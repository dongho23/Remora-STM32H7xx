
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029e38  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001944  0802a0d8  0802a0d8  0002b0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802ba1c  0802ba1c  0002ca1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0802ba24  0802ba24  0002ca24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802ba30  0802ba30  0002ca30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  0802ba34  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b88  24000088  0802babc  0002d088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000c10  0802babc  0002dc10  2**0
                  ALLOC
  9 .dma_buffers  00000100  30000000  00000000  00001000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0002d088  2**0
                  CONTENTS, READONLY
 11 .debug_info   001ecdd9  00000000  00000000  0002d0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0001c0a2  00000000  00000000  00219e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000091e0  00000000  00000000  00235f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00006f31  00000000  00000000  0023f118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000577b4  00000000  00000000  00246049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0009d1a4  00000000  00000000  0029d7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001d97b2  00000000  00000000  0033a9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00514153  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0002babc  00000000  00000000  00514198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  0053fc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802a0c0 	.word	0x0802a0c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0802a0c0 	.word	0x0802a0c0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_frsub>:
 8000728:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800072c:	e002      	b.n	8000734 <__addsf3>
 800072e:	bf00      	nop

08000730 <__aeabi_fsub>:
 8000730:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000734 <__addsf3>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	bf1f      	itttt	ne
 8000738:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800073c:	ea92 0f03 	teqne	r2, r3
 8000740:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000744:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000748:	d06a      	beq.n	8000820 <__addsf3+0xec>
 800074a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800074e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000752:	bfc1      	itttt	gt
 8000754:	18d2      	addgt	r2, r2, r3
 8000756:	4041      	eorgt	r1, r0
 8000758:	4048      	eorgt	r0, r1
 800075a:	4041      	eorgt	r1, r0
 800075c:	bfb8      	it	lt
 800075e:	425b      	neglt	r3, r3
 8000760:	2b19      	cmp	r3, #25
 8000762:	bf88      	it	hi
 8000764:	4770      	bxhi	lr
 8000766:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800076a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000772:	bf18      	it	ne
 8000774:	4240      	negne	r0, r0
 8000776:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800077a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800077e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000782:	bf18      	it	ne
 8000784:	4249      	negne	r1, r1
 8000786:	ea92 0f03 	teq	r2, r3
 800078a:	d03f      	beq.n	800080c <__addsf3+0xd8>
 800078c:	f1a2 0201 	sub.w	r2, r2, #1
 8000790:	fa41 fc03 	asr.w	ip, r1, r3
 8000794:	eb10 000c 	adds.w	r0, r0, ip
 8000798:	f1c3 0320 	rsb	r3, r3, #32
 800079c:	fa01 f103 	lsl.w	r1, r1, r3
 80007a0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__addsf3+0x78>
 80007a6:	4249      	negs	r1, r1
 80007a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007ac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007b0:	d313      	bcc.n	80007da <__addsf3+0xa6>
 80007b2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007b6:	d306      	bcc.n	80007c6 <__addsf3+0x92>
 80007b8:	0840      	lsrs	r0, r0, #1
 80007ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80007be:	f102 0201 	add.w	r2, r2, #1
 80007c2:	2afe      	cmp	r2, #254	@ 0xfe
 80007c4:	d251      	bcs.n	800086a <__addsf3+0x136>
 80007c6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	ea40 0003 	orr.w	r0, r0, r3
 80007d8:	4770      	bx	lr
 80007da:	0049      	lsls	r1, r1, #1
 80007dc:	eb40 0000 	adc.w	r0, r0, r0
 80007e0:	3a01      	subs	r2, #1
 80007e2:	bf28      	it	cs
 80007e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007e8:	d2ed      	bcs.n	80007c6 <__addsf3+0x92>
 80007ea:	fab0 fc80 	clz	ip, r0
 80007ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80007f2:	ebb2 020c 	subs.w	r2, r2, ip
 80007f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007fa:	bfaa      	itet	ge
 80007fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000800:	4252      	neglt	r2, r2
 8000802:	4318      	orrge	r0, r3
 8000804:	bfbc      	itt	lt
 8000806:	40d0      	lsrlt	r0, r2
 8000808:	4318      	orrlt	r0, r3
 800080a:	4770      	bx	lr
 800080c:	f092 0f00 	teq	r2, #0
 8000810:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000814:	bf06      	itte	eq
 8000816:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800081a:	3201      	addeq	r2, #1
 800081c:	3b01      	subne	r3, #1
 800081e:	e7b5      	b.n	800078c <__addsf3+0x58>
 8000820:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000824:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000828:	bf18      	it	ne
 800082a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800082e:	d021      	beq.n	8000874 <__addsf3+0x140>
 8000830:	ea92 0f03 	teq	r2, r3
 8000834:	d004      	beq.n	8000840 <__addsf3+0x10c>
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	bf08      	it	eq
 800083c:	4608      	moveq	r0, r1
 800083e:	4770      	bx	lr
 8000840:	ea90 0f01 	teq	r0, r1
 8000844:	bf1c      	itt	ne
 8000846:	2000      	movne	r0, #0
 8000848:	4770      	bxne	lr
 800084a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800084e:	d104      	bne.n	800085a <__addsf3+0x126>
 8000850:	0040      	lsls	r0, r0, #1
 8000852:	bf28      	it	cs
 8000854:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000858:	4770      	bx	lr
 800085a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800085e:	bf3c      	itt	cc
 8000860:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000864:	4770      	bxcc	lr
 8000866:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800086a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800086e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000872:	4770      	bx	lr
 8000874:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000878:	bf16      	itet	ne
 800087a:	4608      	movne	r0, r1
 800087c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000880:	4601      	movne	r1, r0
 8000882:	0242      	lsls	r2, r0, #9
 8000884:	bf06      	itte	eq
 8000886:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800088a:	ea90 0f01 	teqeq	r0, r1
 800088e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000892:	4770      	bx	lr

08000894 <__aeabi_ui2f>:
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	e004      	b.n	80008a4 <__aeabi_i2f+0x8>
 800089a:	bf00      	nop

0800089c <__aeabi_i2f>:
 800089c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008a0:	bf48      	it	mi
 80008a2:	4240      	negmi	r0, r0
 80008a4:	ea5f 0c00 	movs.w	ip, r0
 80008a8:	bf08      	it	eq
 80008aa:	4770      	bxeq	lr
 80008ac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008b0:	4601      	mov	r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	e01c      	b.n	80008f2 <__aeabi_l2f+0x2a>

080008b8 <__aeabi_ul2f>:
 80008b8:	ea50 0201 	orrs.w	r2, r0, r1
 80008bc:	bf08      	it	eq
 80008be:	4770      	bxeq	lr
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	e00a      	b.n	80008dc <__aeabi_l2f+0x14>
 80008c6:	bf00      	nop

080008c8 <__aeabi_l2f>:
 80008c8:	ea50 0201 	orrs.w	r2, r0, r1
 80008cc:	bf08      	it	eq
 80008ce:	4770      	bxeq	lr
 80008d0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008d4:	d502      	bpl.n	80008dc <__aeabi_l2f+0x14>
 80008d6:	4240      	negs	r0, r0
 80008d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008dc:	ea5f 0c01 	movs.w	ip, r1
 80008e0:	bf02      	ittt	eq
 80008e2:	4684      	moveq	ip, r0
 80008e4:	4601      	moveq	r1, r0
 80008e6:	2000      	moveq	r0, #0
 80008e8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008ec:	bf08      	it	eq
 80008ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008f6:	fabc f28c 	clz	r2, ip
 80008fa:	3a08      	subs	r2, #8
 80008fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000900:	db10      	blt.n	8000924 <__aeabi_l2f+0x5c>
 8000902:	fa01 fc02 	lsl.w	ip, r1, r2
 8000906:	4463      	add	r3, ip
 8000908:	fa00 fc02 	lsl.w	ip, r0, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000914:	fa20 f202 	lsr.w	r2, r0, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f102 0220 	add.w	r2, r2, #32
 8000928:	fa01 fc02 	lsl.w	ip, r1, r2
 800092c:	f1c2 0220 	rsb	r2, r2, #32
 8000930:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000934:	fa21 f202 	lsr.w	r2, r1, r2
 8000938:	eb43 0002 	adc.w	r0, r3, r2
 800093c:	bf08      	it	eq
 800093e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000942:	4770      	bx	lr

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b96a 	b.w	8000c30 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f806 	bl	8000974 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__udivmoddi4>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	9d08      	ldr	r5, [sp, #32]
 800097a:	460c      	mov	r4, r1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d14e      	bne.n	8000a1e <__udivmoddi4+0xaa>
 8000980:	4694      	mov	ip, r2
 8000982:	458c      	cmp	ip, r1
 8000984:	4686      	mov	lr, r0
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	d962      	bls.n	8000a52 <__udivmoddi4+0xde>
 800098c:	b14a      	cbz	r2, 80009a2 <__udivmoddi4+0x2e>
 800098e:	f1c2 0320 	rsb	r3, r2, #32
 8000992:	4091      	lsls	r1, r2
 8000994:	fa20 f303 	lsr.w	r3, r0, r3
 8000998:	fa0c fc02 	lsl.w	ip, ip, r2
 800099c:	4319      	orrs	r1, r3
 800099e:	fa00 fe02 	lsl.w	lr, r0, r2
 80009a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a6:	fa1f f68c 	uxth.w	r6, ip
 80009aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80009ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b2:	fb07 1114 	mls	r1, r7, r4, r1
 80009b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ba:	fb04 f106 	mul.w	r1, r4, r6
 80009be:	4299      	cmp	r1, r3
 80009c0:	d90a      	bls.n	80009d8 <__udivmoddi4+0x64>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80009ca:	f080 8112 	bcs.w	8000bf2 <__udivmoddi4+0x27e>
 80009ce:	4299      	cmp	r1, r3
 80009d0:	f240 810f 	bls.w	8000bf2 <__udivmoddi4+0x27e>
 80009d4:	3c02      	subs	r4, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	1a59      	subs	r1, r3, r1
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e2:	fb07 1110 	mls	r1, r7, r0, r1
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f606 	mul.w	r6, r0, r6
 80009ee:	429e      	cmp	r6, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x94>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80009fa:	f080 80fc 	bcs.w	8000bf6 <__udivmoddi4+0x282>
 80009fe:	429e      	cmp	r6, r3
 8000a00:	f240 80f9 	bls.w	8000bf6 <__udivmoddi4+0x282>
 8000a04:	4463      	add	r3, ip
 8000a06:	3802      	subs	r0, #2
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a0e:	2100      	movs	r1, #0
 8000a10:	b11d      	cbz	r5, 8000a1a <__udivmoddi4+0xa6>
 8000a12:	40d3      	lsrs	r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	e9c5 3200 	strd	r3, r2, [r5]
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d905      	bls.n	8000a2e <__udivmoddi4+0xba>
 8000a22:	b10d      	cbz	r5, 8000a28 <__udivmoddi4+0xb4>
 8000a24:	e9c5 0100 	strd	r0, r1, [r5]
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e7f5      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a2e:	fab3 f183 	clz	r1, r3
 8000a32:	2900      	cmp	r1, #0
 8000a34:	d146      	bne.n	8000ac4 <__udivmoddi4+0x150>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d302      	bcc.n	8000a40 <__udivmoddi4+0xcc>
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	f0c0 80f0 	bcc.w	8000c20 <__udivmoddi4+0x2ac>
 8000a40:	1a86      	subs	r6, r0, r2
 8000a42:	eb64 0303 	sbc.w	r3, r4, r3
 8000a46:	2001      	movs	r0, #1
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d0e6      	beq.n	8000a1a <__udivmoddi4+0xa6>
 8000a4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a50:	e7e3      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	f040 8090 	bne.w	8000b78 <__udivmoddi4+0x204>
 8000a58:	eba1 040c 	sub.w	r4, r1, ip
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	2101      	movs	r1, #1
 8000a66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000a72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a76:	fb07 f006 	mul.w	r0, r7, r6
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x11c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x11a>
 8000a88:	4298      	cmp	r0, r3
 8000a8a:	f200 80cd 	bhi.w	8000c28 <__udivmoddi4+0x2b4>
 8000a8e:	4626      	mov	r6, r4
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	fa1f f38e 	uxth.w	r3, lr
 8000a96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aa2:	fb00 f707 	mul.w	r7, r0, r7
 8000aa6:	429f      	cmp	r7, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x148>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab2:	d202      	bcs.n	8000aba <__udivmoddi4+0x146>
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	f200 80b0 	bhi.w	8000c1a <__udivmoddi4+0x2a6>
 8000aba:	4620      	mov	r0, r4
 8000abc:	1bdb      	subs	r3, r3, r7
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	e7a5      	b.n	8000a10 <__udivmoddi4+0x9c>
 8000ac4:	f1c1 0620 	rsb	r6, r1, #32
 8000ac8:	408b      	lsls	r3, r1
 8000aca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ace:	431f      	orrs	r7, r3
 8000ad0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ad4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ad8:	ea43 030c 	orr.w	r3, r3, ip
 8000adc:	40f4      	lsrs	r4, r6
 8000ade:	fa00 f801 	lsl.w	r8, r0, r1
 8000ae2:	0c38      	lsrs	r0, r7, #16
 8000ae4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ae8:	fbb4 fef0 	udiv	lr, r4, r0
 8000aec:	fa1f fc87 	uxth.w	ip, r7
 8000af0:	fb00 441e 	mls	r4, r0, lr, r4
 8000af4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af8:	fb0e f90c 	mul.w	r9, lr, ip
 8000afc:	45a1      	cmp	r9, r4
 8000afe:	fa02 f201 	lsl.w	r2, r2, r1
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x1a6>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b0a:	f080 8084 	bcs.w	8000c16 <__udivmoddi4+0x2a2>
 8000b0e:	45a1      	cmp	r9, r4
 8000b10:	f240 8081 	bls.w	8000c16 <__udivmoddi4+0x2a2>
 8000b14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	eba4 0409 	sub.w	r4, r4, r9
 8000b1e:	fa1f f983 	uxth.w	r9, r3
 8000b22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b26:	fb00 4413 	mls	r4, r0, r3, r4
 8000b2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b32:	45a4      	cmp	ip, r4
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x1d2>
 8000b36:	193c      	adds	r4, r7, r4
 8000b38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b3c:	d267      	bcs.n	8000c0e <__udivmoddi4+0x29a>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0x29a>
 8000b42:	3b02      	subs	r3, #2
 8000b44:	443c      	add	r4, r7
 8000b46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b4e:	eba4 040c 	sub.w	r4, r4, ip
 8000b52:	429c      	cmp	r4, r3
 8000b54:	46ce      	mov	lr, r9
 8000b56:	469c      	mov	ip, r3
 8000b58:	d351      	bcc.n	8000bfe <__udivmoddi4+0x28a>
 8000b5a:	d04e      	beq.n	8000bfa <__udivmoddi4+0x286>
 8000b5c:	b155      	cbz	r5, 8000b74 <__udivmoddi4+0x200>
 8000b5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000b62:	eb64 040c 	sbc.w	r4, r4, ip
 8000b66:	fa04 f606 	lsl.w	r6, r4, r6
 8000b6a:	40cb      	lsrs	r3, r1
 8000b6c:	431e      	orrs	r6, r3
 8000b6e:	40cc      	lsrs	r4, r1
 8000b70:	e9c5 6400 	strd	r6, r4, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	e750      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	fa24 f303 	lsr.w	r3, r4, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	430c      	orrs	r4, r1
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b94:	fa1f f78c 	uxth.w	r7, ip
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ba0:	0c23      	lsrs	r3, r4, #16
 8000ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba6:	fb00 f107 	mul.w	r1, r0, r7
 8000baa:	4299      	cmp	r1, r3
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x24c>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bb6:	d22c      	bcs.n	8000c12 <__udivmoddi4+0x29e>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d92a      	bls.n	8000c12 <__udivmoddi4+0x29e>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb01 f307 	mul.w	r3, r1, r7
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x276>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000be0:	d213      	bcs.n	8000c0a <__udivmoddi4+0x296>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d911      	bls.n	8000c0a <__udivmoddi4+0x296>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4464      	add	r4, ip
 8000bea:	1ae4      	subs	r4, r4, r3
 8000bec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bf0:	e739      	b.n	8000a66 <__udivmoddi4+0xf2>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	e6f0      	b.n	80009d8 <__udivmoddi4+0x64>
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e706      	b.n	8000a08 <__udivmoddi4+0x94>
 8000bfa:	45c8      	cmp	r8, r9
 8000bfc:	d2ae      	bcs.n	8000b5c <__udivmoddi4+0x1e8>
 8000bfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c06:	3801      	subs	r0, #1
 8000c08:	e7a8      	b.n	8000b5c <__udivmoddi4+0x1e8>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	e7ed      	b.n	8000bea <__udivmoddi4+0x276>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	e799      	b.n	8000b46 <__udivmoddi4+0x1d2>
 8000c12:	4630      	mov	r0, r6
 8000c14:	e7d4      	b.n	8000bc0 <__udivmoddi4+0x24c>
 8000c16:	46d6      	mov	lr, sl
 8000c18:	e77f      	b.n	8000b1a <__udivmoddi4+0x1a6>
 8000c1a:	4463      	add	r3, ip
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	e74d      	b.n	8000abc <__udivmoddi4+0x148>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	e70f      	b.n	8000a48 <__udivmoddi4+0xd4>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	e730      	b.n	8000a90 <__udivmoddi4+0x11c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <_ZN8rxData_tC1Ev>:
    uint8_t jointEnable;
    uint16_t outputs;
    uint8_t spare0;
  };

  rxData_t() {
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
      header = 0;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
      outputs = 0;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      jointEnable = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e008      	b.n	8000c70 <_ZN8rxData_tC1Ev+0x3c>
         jointFreqCmd[i] = 0;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d9f3      	bls.n	8000c5e <_ZN8rxData_tC1Ev+0x2a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	73bb      	strb	r3, [r7, #14]
 8000c7a:	e00b      	b.n	8000c94 <_ZN8rxData_tC1Ev+0x60>
         setPoint[i] = 0.0;
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	3308      	adds	r3, #8
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3304      	adds	r3, #4
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	3301      	adds	r3, #1
 8000c92:	73bb      	strb	r3, [r7, #14]
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	d9f0      	bls.n	8000c7c <_ZN8rxData_tC1Ev+0x48>
     }
  }
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4798      	blx	r3
    }
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf0c      	ite	eq
 8000cde:	2301      	moveq	r3, #1
 8000ce0:	2300      	movne	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_ZNK6Module17getUsesModulePostEv>:
		virtual void update();		// the standard interface for update of the module - use for stepgen, PWM etc
		virtual void updatePost();
		virtual void slowUpdate();	// the standard interface for the slow update - use for PID controller etc
        virtual void configure();   // the standard interface for one off configuration

        virtual bool getUsesModulePost() const { return usesModulePost; }
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7d1b      	ldrb	r3, [r3, #20]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>:

  size_t size() const {
    return size_;
  }

  char operator[](size_t i) const {
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
  }
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_ZN14DMA_RxBuffer_tC1Ev>:
} __attribute__((aligned(32))) txData_t;


typedef struct {
    volatile rxData_t buffer[2]; // DMA RX buffers
} DMA_RxBuffer_t;
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2401      	movs	r4, #1
 8000d34:	461d      	mov	r5, r3
 8000d36:	e004      	b.n	8000d42 <_ZN14DMA_RxBuffer_tC1Ev+0x1a>
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f7ff ff7b 	bl	8000c34 <_ZN8rxData_tC1Ev>
 8000d3e:	3c01      	subs	r4, #1
 8000d40:	3540      	adds	r5, #64	@ 0x40
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	daf8      	bge.n	8000d38 <_ZN14DMA_RxBuffer_tC1Ev+0x10>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bdb0      	pop	{r4, r5, r7, pc}

08000d50 <_ZNSt8functionIFvbEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ffa4 	bl	8000ca8 <_ZNSt14_Function_baseD1Ev>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <_ZN14CommsInterfaceD1Ev>:

#include <functional>

#include "../../modules/module.h"

class CommsInterface : public Module {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <_ZN14CommsInterfaceD1Ev+0x2c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3318      	adds	r3, #24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ffe6 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f010 fff6 	bl	8011d78 <_ZN6ModuleD1Ev>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	0802b0e4 	.word	0x0802b0e4

08000d9c <_ZN14CommsInterfaceD0Ev>:
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ffe1 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000daa:	2128      	movs	r1, #40	@ 0x28
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f027 fbee 	bl	802858e <_ZdlPvj>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "SPIComms.h"

__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;


SPIComms::SPIComms(volatile rxData_t* _ptrRxData, volatile txData_t* _ptrTxData, SPI_TypeDef* _spiType) :
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
	ptrRxData(_ptrRxData),
	ptrTxData(_ptrTxData),
	spiType(_spiType)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 f9ab 	bl	8002128 <_ZN14CommsInterfaceC1Ev>
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x60>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	601a      	str	r2, [r3, #0]
	ptrRxData(_ptrRxData),
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
	ptrTxData(_ptrTxData),
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
	spiType(_spiType)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	635a      	str	r2, [r3, #52]	@ 0x34
{
    spiHandle.Instance = spiType;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	651a      	str	r2, [r3, #80]	@ 0x50
    ptrRxDMABuffer = &rxDMABuffer;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x64>)
 8000df6:	631a      	str	r2, [r3, #48]	@ 0x30

    irqNss = EXTI4_IRQn;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    irqDMAtx = DMA1_Stream0_IRQn;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	220b      	movs	r2, #11
 8000e04:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    irqDMArx = DMA1_Stream1_IRQn;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	0802b0b4 	.word	0x0802b0b4
 8000e20:	30000000 	.word	0x30000000

08000e24 <_ZN8SPICommsD1Ev>:

SPIComms::~SPIComms() {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_ZN8SPICommsD1Ev+0x20>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]

}
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff99 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	0802b0b4 	.word	0x0802b0b4

08000e48 <_ZN8SPICommsD0Ev>:
SPIComms::~SPIComms() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
}
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ffe7 	bl	8000e24 <_ZN8SPICommsD1Ev>
 8000e56:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f027 fb97 	bl	802858e <_ZdlPvj>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <_ZN8SPIComms4initEv>:

void SPIComms::init() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

    if(spiHandle.Instance == SPI1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e88:	4ab1      	ldr	r2, [pc, #708]	@ (8001150 <_ZN8SPIComms4initEv+0x2e4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	f040 815c 	bne.w	8001148 <_ZN8SPIComms4initEv+0x2dc>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	4bb0      	ldr	r3, [pc, #704]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	4aaf      	ldr	r2, [pc, #700]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea0:	4bac      	ldr	r3, [pc, #688]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eae:	2310      	movs	r3, #16
 8000eb0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	48a5      	ldr	r0, [pc, #660]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000ec4:	f01d fb64 	bl	801e590 <HAL_GPIO_Init>

        printf("	Initialising SPI1 slave\n");
 8000ec8:	48a4      	ldr	r0, [pc, #656]	@ (800115c <_ZN8SPIComms4initEv+0x2f0>)
 8000eca:	f028 fa8b 	bl	80293e4 <puts>

        spiHandle.Init.Mode           			= SPI_MODE_SLAVE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	655a      	str	r2, [r3, #84]	@ 0x54
        spiHandle.Init.Direction      			= SPI_DIRECTION_2LINES;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	659a      	str	r2, [r3, #88]	@ 0x58
        spiHandle.Init.DataSize       			= SPI_DATASIZE_8BIT;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2207      	movs	r2, #7
 8000ede:	65da      	str	r2, [r3, #92]	@ 0x5c
        spiHandle.Init.CLKPolarity    			= SPI_POLARITY_LOW;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	661a      	str	r2, [r3, #96]	@ 0x60
        spiHandle.Init.CLKPhase       			= SPI_PHASE_1EDGE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	665a      	str	r2, [r3, #100]	@ 0x64
        spiHandle.Init.NSS            			= SPI_NSS_HARD_INPUT;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	669a      	str	r2, [r3, #104]	@ 0x68
        spiHandle.Init.FirstBit       			= SPI_FIRSTBIT_MSB;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	671a      	str	r2, [r3, #112]	@ 0x70
        spiHandle.Init.TIMode         			= SPI_TIMODE_DISABLE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	675a      	str	r2, [r3, #116]	@ 0x74
        spiHandle.Init.CRCCalculation 			= SPI_CRCCALCULATION_DISABLE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	679a      	str	r2, [r3, #120]	@ 0x78
        spiHandle.Init.CRCPolynomial  			= 0x0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	67da      	str	r2, [r3, #124]	@ 0x7c
        spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        spiHandle.Init.NSSPolarity 				= SPI_NSS_POLARITY_LOW;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        spiHandle.Init.MasterInterDataIdleness 	= SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        spiHandle.Init.MasterReceiverAutoSusp 	= SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        spiHandle.Init.IOSwap 					= SPI_IO_SWAP_DISABLE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

        HAL_SPI_Init(&this->spiHandle);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3350      	adds	r3, #80	@ 0x50
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f022 fe7a 	bl	8023c58 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8000f64:	4b7b      	ldr	r3, [pc, #492]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f74:	4b77      	ldr	r3, [pc, #476]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 8000f82:	4877      	ldr	r0, [pc, #476]	@ (8001160 <_ZN8SPIComms4initEv+0x2f4>)
 8000f84:	f028 fa2e 	bl	80293e4 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b72      	ldr	r3, [pc, #456]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	4a71      	ldr	r2, [pc, #452]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f98:	4b6e      	ldr	r3, [pc, #440]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fb6:	23f0      	movs	r3, #240	@ 0xf0
 8000fb8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4861      	ldr	r0, [pc, #388]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000fd2:	f01d fadd 	bl	801e590 <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 8000fd6:	4863      	ldr	r0, [pc, #396]	@ (8001164 <_ZN8SPIComms4initEv+0x2f8>)
 8000fd8:	f028 fa04 	bl	80293e4 <puts>

        hdma_spi_tx.Instance 					= DMA1_Stream0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a62      	ldr	r2, [pc, #392]	@ (8001168 <_ZN8SPIComms4initEv+0x2fc>)
 8000fe0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2226      	movs	r2, #38	@ 0x26
 8000fe8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        hdma_spi_tx.Init.Direction 				= DMA_MEMORY_TO_PERIPH;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2240      	movs	r2, #64	@ 0x40
 8000ff0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        hdma_spi_tx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001002:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        hdma_spi_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        hdma_spi_tx.Init.Mode 					= DMA_CIRCULAR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        hdma_spi_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        hdma_spi_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

        HAL_DMA_Init(&hdma_spi_tx);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	33d8      	adds	r3, #216	@ 0xd8
 8001034:	4618      	mov	r0, r3
 8001036:	f01a ff6b 	bl	801bf10 <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmatx, hdma_spi_tx);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

        hdma_spi_rx.Instance 					= DMA1_Stream1;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a45      	ldr	r2, [pc, #276]	@ (800116c <_ZN8SPIComms4initEv+0x300>)
 8001056:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2225      	movs	r2, #37	@ 0x25
 800105e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        hdma_spi_rx.Init.Direction 				= DMA_PERIPH_TO_MEMORY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        hdma_spi_rx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001078:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        hdma_spi_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        hdma_spi_rx.Init.Mode 					= DMA_CIRCULAR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001092:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        hdma_spi_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        hdma_spi_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

        HAL_DMA_Init(&hdma_spi_rx);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80010ac:	4618      	mov	r0, r3
 80010ae:	f01a ff2f 	bl	801bf10 <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmarx, hdma_spi_rx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 72a8 	add.w	r2, r3, #336	@ 0x150
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188

        printf("	Initialising DMA for Memory to Memory transfer\n");
 80010ca:	4829      	ldr	r0, [pc, #164]	@ (8001170 <_ZN8SPIComms4initEv+0x304>)
 80010cc:	f028 f98a 	bl	80293e4 <puts>

        hdma_memtomem.Instance 					= DMA1_Stream2;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a28      	ldr	r2, [pc, #160]	@ (8001174 <_ZN8SPIComms4initEv+0x308>)
 80010d4:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
        hdma_memtomem.Init.Request 				= DMA_REQUEST_MEM2MEM;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
        hdma_memtomem.Init.Direction 			= DMA_MEMORY_TO_MEMORY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
        hdma_memtomem.Init.PeriphInc 			= DMA_PINC_ENABLE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ee:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
        hdma_memtomem.Init.MemInc 				= DMA_MINC_ENABLE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f8:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
        hdma_memtomem.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
        hdma_memtomem.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        hdma_memtomem.Init.Mode 				= DMA_NORMAL;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        hdma_memtomem.Init.Priority 			= DMA_PRIORITY_LOW;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
        hdma_memtomem.Init.FIFOMode 			= DMA_FIFOMODE_ENABLE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2204      	movs	r2, #4
 8001120:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        hdma_memtomem.Init.FIFOThreshold 		= DMA_FIFO_THRESHOLD_FULL;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
        hdma_memtomem.Init.MemBurst 			= DMA_MBURST_SINGLE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
        hdma_memtomem.Init.PeriphBurst 			= DMA_PBURST_SINGLE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

        HAL_DMA_Init(&hdma_memtomem);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001142:	4618      	mov	r0, r3
 8001144:	f01a fee4 	bl	801bf10 <HAL_DMA_Init>
    }
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013000 	.word	0x40013000
 8001154:	58024400 	.word	0x58024400
 8001158:	58020000 	.word	0x58020000
 800115c:	0802a0d8 	.word	0x0802a0d8
 8001160:	0802a0f4 	.word	0x0802a0f4
 8001164:	0802a110 	.word	0x0802a110
 8001168:	40020010 	.word	0x40020010
 800116c:	40020028 	.word	0x40020028
 8001170:	0802a12c 	.word	0x0802a12c
 8001174:	40020040 	.word	0x40020040

08001178 <_ZN8SPIComms5startEv>:

void SPIComms::start() {
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08f      	sub	sp, #60	@ 0x3c
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
    // Register the NSS (slave select) interrupt
    NssInterrupt = new ModuleInterrupt<SPIComms>(
        irqNss,
        this,
        &SPIComms::handleNssInterrupt
    );
 8001180:	2010      	movs	r0, #16
 8001182:	f027 fa15 	bl	80285b0 <_Znwj>
 8001186:	4603      	mov	r3, r0
 8001188:	461c      	mov	r4, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	@ 0x48
 8001190:	4b6d      	ldr	r3, [pc, #436]	@ (8001348 <_ZN8SPIComms5startEv+0x1d0>)
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4620      	mov	r0, r4
 80011a2:	f000 fec5 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    NssInterrupt = new ModuleInterrupt<SPIComms>(
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	63dc      	str	r4, [r3, #60]	@ 0x3c
    HAL_NVIC_SetPriority(irqNss, Config::spiNssIrqPriority, 0);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011b0:	2200      	movs	r2, #0
 80011b2:	2106      	movs	r1, #6
 80011b4:	4618      	mov	r0, r3
 80011b6:	f01a fdfa 	bl	801bdae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNss);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011c0:	4618      	mov	r0, r3
 80011c2:	f01a fe0e 	bl	801bde2 <HAL_NVIC_EnableIRQ>
    // Register the DMA Rx interrupt
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMArx,
        this,
        &SPIComms::handleRxInterrupt
    );
 80011c6:	2010      	movs	r0, #16
 80011c8:	f027 f9f2 	bl	80285b0 <_Znwj>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461c      	mov	r4, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f9b3 104a 	ldrsh.w	r1, [r3, #74]	@ 0x4a
 80011d6:	4b5d      	ldr	r3, [pc, #372]	@ (800134c <_ZN8SPIComms5startEv+0x1d4>)
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4620      	mov	r0, r4
 80011e8:	f000 fea2 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	645c      	str	r4, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(irqDMArx, Config::spiDmaRxIrqPriority, 0);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 80011f6:	2200      	movs	r2, #0
 80011f8:	2105      	movs	r1, #5
 80011fa:	4618      	mov	r0, r3
 80011fc:	f01a fdd7 	bl	801bdae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMArx);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001206:	4618      	mov	r0, r3
 8001208:	f01a fdeb 	bl	801bde2 <HAL_NVIC_EnableIRQ>
    // Register the DMA Tx interrupt
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMAtx,
        this,
        &SPIComms::handleTxInterrupt
    );
 800120c:	2010      	movs	r0, #16
 800120e:	f027 f9cf 	bl	80285b0 <_Znwj>
 8001212:	4603      	mov	r3, r0
 8001214:	461c      	mov	r4, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f9b3 104c 	ldrsh.w	r1, [r3, #76]	@ 0x4c
 800121c:	4b4c      	ldr	r3, [pc, #304]	@ (8001350 <_ZN8SPIComms5startEv+0x1d8>)
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4620      	mov	r0, r4
 800122e:	f000 fe7f 	bl	8001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641c      	str	r4, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(irqDMAtx, Config::spiDmaTxIrqPriority, 0); // TX needs higher priority than RX
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800123c:	2200      	movs	r2, #0
 800123e:	2104      	movs	r1, #4
 8001240:	4618      	mov	r0, r3
 8001242:	f01a fdb4 	bl	801bdae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMAtx);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800124c:	4618      	mov	r0, r3
 800124e:	f01a fdc8 	bl	801bde2 <HAL_NVIC_EnableIRQ>

    // Initialize the data buffers
    std::fill(std::begin(ptrTxData->txBuffer), std::end(ptrTxData->txBuffer), 0);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fe96 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 800125c:	4604      	mov	r4, r0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fe9b 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001268:	4601      	mov	r1, r0
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	461a      	mov	r2, r3
 8001274:	4620      	mov	r0, r4
 8001276:	f000 fe9e 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxData->rxBuffer), std::end(ptrRxData->rxBuffer), 0);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fe82 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 8001284:	4604      	mov	r4, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fe87 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001290:	4601      	mov	r1, r0
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	461a      	mov	r2, r3
 800129c:	4620      	mov	r0, r4
 800129e:	f000 fe8a 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[0].rxBuffer), std::end(ptrRxDMABuffer->buffer[0].rxBuffer), 0);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fe6e 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012ac:	4604      	mov	r4, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fe73 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012b8:	4601      	mov	r1, r0
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c2:	461a      	mov	r2, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f000 fe76 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[1].rxBuffer), std::end(ptrRxDMABuffer->buffer[1].rxBuffer), 0);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	3340      	adds	r3, #64	@ 0x40
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fe59 	bl	8001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012d6:	4604      	mov	r4, r0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	3340      	adds	r3, #64	@ 0x40
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fe5d 	bl	8001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012e4:	4601      	mov	r1, r0
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ee:	461a      	mov	r2, r3
 80012f0:	4620      	mov	r0, r4
 80012f2:	f000 fe60 	bl	8001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>

    ptrTxData->header = Config::pruData;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fa:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <_ZN8SPIComms5startEv+0x1dc>)
 80012fc:	601a      	str	r2, [r3, #0]

    // Start the multi-buffer DMA SPI communication
    dmaStatus = startMultiBufferDMASPI(
        (uint8_t*)ptrTxData->txBuffer,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001302:	4619      	mov	r1, r3
        (uint8_t*)ptrTxData->txBuffer,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	4618      	mov	r0, r3
        (uint8_t*)ptrRxDMABuffer->buffer[0].rxBuffer,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	461c      	mov	r4, r3
        (uint8_t*)ptrRxDMABuffer->buffer[1].rxBuffer,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	3340      	adds	r3, #64	@ 0x40
    dmaStatus = startMultiBufferDMASPI(
 8001316:	2240      	movs	r2, #64	@ 0x40
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4623      	mov	r3, r4
 800131e:	4602      	mov	r2, r0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f81b 	bl	800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
        Config::dataBuffSize
    );

    // Check for DMA initialization errors
    if (dmaStatus != HAL_OK) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <_ZN8SPIComms5startEv+0x1c8>
        printf("DMA SPI error\n");
 800133a:	4807      	ldr	r0, [pc, #28]	@ (8001358 <_ZN8SPIComms5startEv+0x1e0>)
 800133c:	f028 f852 	bl	80293e4 <puts>
    }
}
 8001340:	bf00      	nop
 8001342:	3734      	adds	r7, #52	@ 0x34
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	08001d7f 	.word	0x08001d7f
 800134c:	08001dd5 	.word	0x08001dd5
 8001350:	08001dad 	.word	0x08001dad
 8001354:	64617461 	.word	0x64617461
 8001358:	0802a15c 	.word	0x0802a15c

0800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>:

HAL_StatusTypeDef SPIComms::startMultiBufferDMASPI(uint8_t *pTxBuffer0, uint8_t *pTxBuffer1,
                                                   uint8_t *pRxBuffer0, uint8_t *pRxBuffer1,
                                                   uint16_t Size)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b087      	sub	sp, #28
 8001360:	af02      	add	r7, sp, #8
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES(spiHandle.Init.Direction));

    if (spiHandle.State != HAL_SPI_STATE_READY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x28>
    {
        return HAL_BUSY;
 8001380:	2302      	movs	r3, #2
 8001382:	e13e      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    if ((pTxBuffer0 == NULL) || (pRxBuffer0 == NULL) || (Size == 0UL))
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 8001390:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3e>
    {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e133      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* If secondary Tx or Rx buffer is not provided, use the primary buffer */
    if (pTxBuffer1 == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x48>
    {
        pTxBuffer1 = pTxBuffer0;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	607b      	str	r3, [r7, #4]
    }

    if (pRxBuffer1 == NULL)
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x52>
    {
        pRxBuffer1 = pRxBuffer0;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	623b      	str	r3, [r7, #32]
    }

    /* Lock the process */
    __HAL_LOCK(&spiHandle);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x60>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e122      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    /* Set the transaction information */
    spiHandle.State       = HAL_SPI_STATE_BUSY_TX_RX;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2205      	movs	r2, #5
 80013c8:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
    spiHandle.ErrorCode   = HAL_SPI_ERROR_NONE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    spiHandle.TxXferSize  = Size;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013d8:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    spiHandle.TxXferCount = Size;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e0:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
    spiHandle.RxXferSize  = Size;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
    spiHandle.RxXferCount = Size;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013f0:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba

    /* Init unused fields in handle to zero */
    spiHandle.RxISR       = NULL;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    spiHandle.TxISR       = NULL;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    /* Set Full-Duplex mode */
    SPI_2LINES(&spiHandle);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800140e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8001412:	60da      	str	r2, [r3, #12]

    /* Reset the Tx/Rx DMA bits */
    CLEAR_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800141e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001422:	609a      	str	r2, [r3, #8]

    /* Adjust XferCount according to DMA alignment / Data size */
    if (spiHandle.Init.DataSize <= SPI_DATASIZE_8BIT)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	2b07      	cmp	r3, #7
 800142a:	d820      	bhi.n	800146e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x112>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001436:	d109      	bne.n	800144c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0xf0>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 800143e:	b29b      	uxth	r3, r3
 8001440:	3301      	adds	r3, #1
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001456:	d12e      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800145e:	b29b      	uxth	r3, r3
 8001460:	3301      	adds	r3, #1
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
 800146c:	e023      	b.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        }
    }
    else if (spiHandle.Init.DataSize <= SPI_DATASIZE_16BIT)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001472:	2b0f      	cmp	r3, #15
 8001474:	d81f      	bhi.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800147c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001480:	d109      	bne.n	8001496 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x13a>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8001488:	b29b      	uxth	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800149c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014a0:	d109      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        }
    }

    /* Configure Tx DMA with Multi-Buffer */
    hdma_spi_tx.XferHalfCpltCallback = NULL;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    hdma_spi_tx.XferCpltCallback     = NULL;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    hdma_spi_tx.XferErrorCallback    = NULL;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 80014d4:	68b9      	ldr	r1, [r7, #8]
                                                (uint32_t)pTxBuffer0,
                                                (uint32_t)&spiHandle.Instance->TXDR,
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014da:	3320      	adds	r3, #32
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014dc:	461c      	mov	r4, r3
 80014de:	687a      	ldr	r2, [r7, #4]
                                                (uint32_t)pTxBuffer1,
                                                spiHandle.TxXferCount))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80014e6:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4613      	mov	r3, r2
 80014ec:	4622      	mov	r2, r4
 80014ee:	f01c fc3b 	bl	801dd68 <HAL_DMAEx_MultiBufferStart_IT>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x1b2>
    {
        __HAL_UNLOCK(&spiHandle);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e079      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure Rx DMA with Multi-Buffer */
    hdma_spi_rx.XferHalfCpltCallback = NULL;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    hdma_spi_rx.XferCpltCallback     = NULL;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    hdma_spi_rx.XferErrorCallback    = NULL;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f503 70a8 	add.w	r0, r3, #336	@ 0x150
                                                (uint32_t)&spiHandle.Instance->RXDR,
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001530:	3330      	adds	r3, #48	@ 0x30
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001532:	461c      	mov	r4, r3
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6a39      	ldr	r1, [r7, #32]
                                                (uint32_t)pRxBuffer0,
                                                (uint32_t)pRxBuffer1,
                                                spiHandle.RxXferCount))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800153e:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	460b      	mov	r3, r1
 8001544:	4621      	mov	r1, r4
 8001546:	f01c fc0f 	bl	801dd68 <HAL_DMAEx_MultiBufferStart_IT>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00a      	beq.n	8001570 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x214>
    {
        (void)HAL_DMA_Abort(&hdma_spi_tx);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	33d8      	adds	r3, #216	@ 0xd8
 800155e:	4618      	mov	r0, r3
 8001560:	f01b f952 	bl	801c808 <HAL_DMA_Abort>
        __HAL_UNLOCK(&spiHandle);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e048      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure SPI TSIZE for full transfer or circular mode */
    if (hdma_spi_rx.Init.Mode == DMA_CIRCULAR || hdma_spi_tx.Init.Mode == DMA_CIRCULAR)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800157a:	d005      	beq.n	8001588 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x22c>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001586:	d108      	bne.n	800159a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x23e>
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800158c:	6859      	ldr	r1, [r3, #4]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 8001594:	400b      	ands	r3, r1
 8001596:	6053      	str	r3, [r2, #4]
 8001598:	e009      	b.n	80015ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x252>
    }
    else
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, Size);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015aa:	430b      	orrs	r3, r1
 80015ac:	6053      	str	r3, [r2, #4]
    }

    /* Enable Tx and Rx DMA Requests */
    SET_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80015bc:	609a      	str	r2, [r3, #8]

    /* Enable SPI error interrupt */
    __HAL_SPI_ENABLE_IT(&spiHandle, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c8:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80015cc:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&spiHandle);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

    if (spiHandle.Init.Mode == SPI_MODE_MASTER)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015e6:	d107      	bne.n	80015f8 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x29c>
    {
        SET_BIT(spiHandle.Instance->CR1, SPI_CR1_CSTART);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015f6:	601a      	str	r2, [r3, #0]
    }

    __HAL_UNLOCK(&spiHandle);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
 800160a:	bf00      	nop
 800160c:	ffff0000 	.word	0xffff0000

08001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>:

int SPIComms::DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr_dma;
  int interrupt;

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	613b      	str	r3, [r7, #16]

  tmpisr_dma  = regs_dma->ISR;
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5a      	ldr	r2, [pc, #360]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d04a      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a58      	ldr	r2, [pc, #352]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d045      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a57      	ldr	r2, [pc, #348]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d040      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a55      	ldr	r2, [pc, #340]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d03b      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a54      	ldr	r2, [pc, #336]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d036      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a52      	ldr	r2, [pc, #328]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d031      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a51      	ldr	r2, [pc, #324]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d02c      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a4f      	ldr	r2, [pc, #316]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d027      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a4e      	ldr	r2, [pc, #312]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4c      	ldr	r2, [pc, #304]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01d      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4b      	ldr	r2, [pc, #300]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d018      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a49      	ldr	r2, [pc, #292]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a48      	ldr	r2, [pc, #288]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00e      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a46      	ldr	r2, [pc, #280]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d009      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a45      	ldr	r2, [pc, #276]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d004      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a43      	ldr	r2, [pc, #268]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xba>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xbc>
 80016ca:	2300      	movs	r3, #0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 8338 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	2208      	movs	r2, #8
 80016dc:	409a      	lsls	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 809a 	beq.w	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a29      	ldr	r2, [pc, #164]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d04a      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d045      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a26      	ldr	r2, [pc, #152]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d040      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a25      	ldr	r2, [pc, #148]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d03b      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d036      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d031      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a20      	ldr	r2, [pc, #128]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d02c      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1f      	ldr	r2, [pc, #124]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d027      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d022      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1c      	ldr	r2, [pc, #112]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d01d      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1a      	ldr	r2, [pc, #104]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d018      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d013      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00e      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d009      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d004      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d125      	bne.n	80017d4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	e024      	b.n	80017de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ce>
 8001794:	40020010 	.word	0x40020010
 8001798:	40020028 	.word	0x40020028
 800179c:	40020040 	.word	0x40020040
 80017a0:	40020058 	.word	0x40020058
 80017a4:	40020070 	.word	0x40020070
 80017a8:	40020088 	.word	0x40020088
 80017ac:	400200a0 	.word	0x400200a0
 80017b0:	400200b8 	.word	0x400200b8
 80017b4:	40020410 	.word	0x40020410
 80017b8:	40020428 	.word	0x40020428
 80017bc:	40020440 	.word	0x40020440
 80017c0:	40020458 	.word	0x40020458
 80017c4:	40020470 	.word	0x40020470
 80017c8:	40020488 	.word	0x40020488
 80017cc:	400204a0 	.word	0x400204a0
 80017d0:	400204b8 	.word	0x400204b8
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d017      	beq.n	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2208      	movs	r2, #8
 8001806:	409a      	lsls	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001818:	2303      	movs	r3, #3
 800181a:	617b      	str	r3, [r7, #20]
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d070      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a68      	ldr	r2, [pc, #416]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04a      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a66      	ldr	r2, [pc, #408]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d045      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a65      	ldr	r2, [pc, #404]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d040      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a63      	ldr	r2, [pc, #396]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d03b      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a62      	ldr	r2, [pc, #392]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d036      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a60      	ldr	r2, [pc, #384]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d031      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5f      	ldr	r2, [pc, #380]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d02c      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5d      	ldr	r2, [pc, #372]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d027      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5c      	ldr	r2, [pc, #368]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d022      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5a      	ldr	r2, [pc, #360]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01d      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a59      	ldr	r2, [pc, #356]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d018      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a57      	ldr	r2, [pc, #348]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00e      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a54      	ldr	r2, [pc, #336]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d009      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a53      	ldr	r2, [pc, #332]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a51      	ldr	r2, [pc, #324]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d105      	bne.n	80018de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2ce>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018dc:	e003      	b.n	80018e6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2d6>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00f      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2201      	movs	r2, #1
 80018fe:	409a      	lsls	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001908:	f043 0202 	orr.w	r2, r3, #2
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001910:	2303      	movs	r3, #3
 8001912:	617b      	str	r3, [r7, #20]
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	2204      	movs	r2, #4
 800191e:	409a      	lsls	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8092 	beq.w	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2a      	ldr	r2, [pc, #168]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d04a      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a28      	ldr	r2, [pc, #160]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d045      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a27      	ldr	r2, [pc, #156]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d040      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a25      	ldr	r2, [pc, #148]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d03b      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a24      	ldr	r2, [pc, #144]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d036      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a22      	ldr	r2, [pc, #136]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a21      	ldr	r2, [pc, #132]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d02c      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1f      	ldr	r2, [pc, #124]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d027      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d022      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01d      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1b      	ldr	r2, [pc, #108]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d018      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a18      	ldr	r2, [pc, #96]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00e      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d009      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a15      	ldr	r2, [pc, #84]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d004      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a13      	ldr	r2, [pc, #76]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d126      	bne.n	8001a18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	e024      	b.n	8001a20 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>
 80019d6:	bf00      	nop
 80019d8:	40020010 	.word	0x40020010
 80019dc:	40020028 	.word	0x40020028
 80019e0:	40020040 	.word	0x40020040
 80019e4:	40020058 	.word	0x40020058
 80019e8:	40020070 	.word	0x40020070
 80019ec:	40020088 	.word	0x40020088
 80019f0:	400200a0 	.word	0x400200a0
 80019f4:	400200b8 	.word	0x400200b8
 80019f8:	40020410 	.word	0x40020410
 80019fc:	40020428 	.word	0x40020428
 8001a00:	40020440 	.word	0x40020440
 8001a04:	40020458 	.word	0x40020458
 8001a08:	40020470 	.word	0x40020470
 8001a0c:	40020488 	.word	0x40020488
 8001a10:	400204a0 	.word	0x400204a0
 8001a14:	400204b8 	.word	0x400204b8
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00f      	beq.n	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2204      	movs	r2, #4
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a42:	f043 0204 	orr.w	r2, r3, #4
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	617b      	str	r3, [r7, #20]
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2210      	movs	r2, #16
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d07f      	beq.n	8001b62 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x552>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6f      	ldr	r2, [pc, #444]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d04a      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6d      	ldr	r2, [pc, #436]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d045      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d040      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6a      	ldr	r2, [pc, #424]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d03b      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a69      	ldr	r2, [pc, #420]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d036      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a67      	ldr	r2, [pc, #412]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d031      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a66      	ldr	r2, [pc, #408]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d02c      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a64      	ldr	r2, [pc, #400]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d027      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a63      	ldr	r2, [pc, #396]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a61      	ldr	r2, [pc, #388]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01d      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a60      	ldr	r2, [pc, #384]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d018      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a5e      	ldr	r2, [pc, #376]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a5d      	ldr	r2, [pc, #372]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00e      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a5b      	ldr	r2, [pc, #364]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a58      	ldr	r2, [pc, #352]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d105      	bne.n	8001b0e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4fe>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	e004      	b.n	8001b18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x508>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01b      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2210      	movs	r2, #16
 8001b30:	409a      	lsls	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	609a      	str	r2, [r3, #8]

        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
        {
          /* Disable the half transfer interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0208 	bic.w	r2, r2, #8
 8001b5c:	601a      	str	r2, [r3, #0]
        }

      }
      interrupt = DMA_HALF_TRANSFER;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80e5 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a29      	ldr	r2, [pc, #164]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d04a      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a28      	ldr	r2, [pc, #160]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d045      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a26      	ldr	r2, [pc, #152]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d040      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a25      	ldr	r2, [pc, #148]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d03b      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d036      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a22      	ldr	r2, [pc, #136]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d031      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a20      	ldr	r2, [pc, #128]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d02c      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d027      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d022      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d01d      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d018      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a19      	ldr	r2, [pc, #100]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00e      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d009      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d125      	bne.n	8001c64 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x654>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	e024      	b.n	8001c6e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65e>
 8001c24:	40020010 	.word	0x40020010
 8001c28:	40020028 	.word	0x40020028
 8001c2c:	40020040 	.word	0x40020040
 8001c30:	40020058 	.word	0x40020058
 8001c34:	40020070 	.word	0x40020070
 8001c38:	40020088 	.word	0x40020088
 8001c3c:	400200a0 	.word	0x400200a0
 8001c40:	400200b8 	.word	0x400200b8
 8001c44:	40020410 	.word	0x40020410
 8001c48:	40020428 	.word	0x40020428
 8001c4c:	40020440 	.word	0x40020440
 8001c50:	40020458 	.word	0x40020458
 8001c54:	40020470 	.word	0x40020470
 8001c58:	40020488 	.word	0x40020488
 8001c5c:	400204a0 	.word	0x400204a0
 8001c60:	400204b8 	.word	0x400204b8
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	2300      	moveq	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d062      	beq.n	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2220      	movs	r2, #32
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d031      	beq.n	8001d06 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6f6>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0216 	bic.w	r2, r2, #22
 8001cb0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6c2>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6d2>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	223f      	movs	r2, #63	@ 0x3f
 8001cec:	409a      	lsls	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          interrupt = DMA_TRANSFER_COMPLETE;
 8001d02:	2302      	movs	r3, #2
 8001d04:	617b      	str	r3, [r7, #20]
        }

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00f      	beq.n	8001d3e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x72e>
        {
          /* Disable the transfer complete interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0210 	bic.w	r2, r2, #16
 8001d2c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }
        interrupt =  2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return interrupt;
 8001d42:	697b      	ldr	r3, [r7, #20]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>:

int SPIComms::getActiveDMAmemory(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    DMA_Stream_TypeDef *dmaStream = (DMA_Stream_TypeDef *)hdma->Instance;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]

    return (dmaStream->CR & DMA_SxCR_CT) ? 1 : 0;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x20>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x22>
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_ZN8SPIComms18handleNssInterruptEv>:

void SPIComms::handleNssInterrupt()
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	// SPI packet has been fully received
	// Flag the copy the RX buffer if new WRITE data has been received
	// DMA copy is performed during the servo thread update
	if (newWriteData)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <_ZN8SPIComms18handleNssInterruptEv+0x22>
	{
		copyRXbuffer = true;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		newWriteData = false;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
	}
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_ZN8SPIComms17handleTxInterruptEv>:

void SPIComms::handleTxInterrupt()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	DMA_IRQHandler(&hdma_spi_tx);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	33d8      	adds	r3, #216	@ 0xd8
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fc28 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
	HAL_NVIC_EnableIRQ(irqDMAtx);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f01a f80b 	bl	801bde2 <HAL_NVIC_EnableIRQ>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_ZN8SPIComms17handleRxInterruptEv>:

void SPIComms::handleRxInterrupt()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    // Handle the interrupt and determine the type of interrupt
    interruptType = DMA_IRQHandler(&hdma_spi_rx);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fc13 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241

    RxDMAmemoryIdx = getActiveDMAmemory(&hdma_spi_rx);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ffa7 	bl	8001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if (interruptType == DMA_HALF_TRANSFER) // Use the HTC interrupt to check the packet being received
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d12d      	bne.n	8001e72 <_ZN8SPIComms17handleRxInterruptEv+0x9e>
    {
        switch (ptrRxDMABuffer->buffer[RxDMAmemoryIdx].header)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	4413      	add	r3, r2
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <_ZN8SPIComms17handleRxInterruptEv+0xc4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <_ZN8SPIComms17handleRxInterruptEv+0x60>
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <_ZN8SPIComms17handleRxInterruptEv+0xc8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <_ZN8SPIComms17handleRxInterruptEv+0x6e>
 8001e32:	e017      	b.n	8001e64 <_ZN8SPIComms17handleRxInterruptEv+0x90>
        {
            case Config::pruRead:
                // No action needed for PRU_READ.
            	dataCallback(true);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3318      	adds	r3, #24
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f8ca 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e40:	e01f      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            case Config::pruWrite:
            	// Valid PRU_WRITE header, flag RX data transfer.
            	dataCallback(true);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3318      	adds	r3, #24
 8001e46:	2101      	movs	r1, #1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f8c3 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
            	newWriteData = true;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
                RXbufferIdx = RxDMAmemoryIdx;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                break;
 8001e62:	e00e      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            default:
            	dataCallback(false);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3318      	adds	r3, #24
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f8b2 	bl	8001fd4 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e70:	e007      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
        }
    }
    else if (interruptType == DMA_TRANSFER_COMPLETE) // Transfer complete interrupt
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d002      	beq.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
    {
        // Placeholder for transfer complete handling if needed in the future.
    }
    else // Other interrupt sources
    {
        printf("DMA SPI Rx error\n");
 8001e7c:	4808      	ldr	r0, [pc, #32]	@ (8001ea0 <_ZN8SPIComms17handleRxInterruptEv+0xcc>)
 8001e7e:	f027 fab1 	bl	80293e4 <puts>
    }

    HAL_NVIC_EnableIRQ(irqDMArx);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f019 ffaa 	bl	801bde2 <HAL_NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	72656164 	.word	0x72656164
 8001e9c:	77726974 	.word	0x77726974
 8001ea0:	0802a16c 	.word	0x0802a16c

08001ea4 <_ZN8SPIComms5tasksEv>:

void SPIComms::tasks() {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

	if (copyRXbuffer == true)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d138      	bne.n	8001f28 <_ZN8SPIComms5tasksEv+0x84>
    {
	    uint8_t* srcBuffer = (uint8_t*)ptrRxDMABuffer->buffer[RXbufferIdx].rxBuffer;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ec0:	019b      	lsls	r3, r3, #6
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
	    uint8_t* destBuffer = (uint8_t*)ptrRxData->rxBuffer;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop

	    __disable_irq();

	    dmaStatus = HAL_DMA_Start(
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 70e4 	add.w	r0, r3, #456	@ 0x1c8
 8001ed6:	68f9      	ldr	r1, [r7, #12]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	2340      	movs	r3, #64	@ 0x40
 8001edc:	f01a fb74 	bl	801c5c8 <HAL_DMA_Start>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
									(uint32_t)srcBuffer,
									(uint32_t)destBuffer,
									Config::dataBuffSize
	    							);

	    if (dmaStatus == HAL_OK) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10d      	bne.n	8001f10 <_ZN8SPIComms5tasksEv+0x6c>
	        dmaStatus = HAL_DMA_PollForTransfer(&hdma_memtomem, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001efa:	f04f 32ff 	mov.w	r2, #4294967295
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f01a ff9f 	bl	801ce44 <HAL_DMA_PollForTransfer>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
  __ASM volatile ("cpsie i" : : : "memory");
 8001f10:	b662      	cpsie	i
}
 8001f12:	bf00      	nop
	    }

	    __enable_irq();
	    HAL_DMA_Abort(&hdma_memtomem);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f01a fc74 	bl	801c808 <HAL_DMA_Abort>
		copyRXbuffer = false;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>:
private:
	DerivedModule* InterruptOwnerPtr;                                // Pointer to the owning module
	void (DerivedModule::*InterruptHandler)();                       // Member function pointer for the ISR
	
public:
    ModuleInterrupt(IRQn_Type interruptNumber, DerivedModule* ownerPtr, void (DerivedModule::*handler)())
 8001f30:	b082      	sub	sp, #8
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	817b      	strh	r3, [r7, #10]
        : InterruptOwnerPtr(ownerPtr), InterruptHandler(handler)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 f8a3 	bl	8005090 <_ZN9InterruptC1Ev>
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f84 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE+0x54>)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3308      	adds	r3, #8
 8001f5a:	f107 021c 	add.w	r2, r7, #28
 8001f5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f62:	e883 0003 	stmia.w	r3, {r0, r1}
    {
        // Register the interrupt
        Interrupt::Register(interruptNumber, this);
 8001f66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 f89e 	bl	80050b0 <_ZN9Interrupt8RegisterEiPS_>
    }
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f80:	b002      	add	sp, #8
 8001f82:	4770      	bx	lr
 8001f84:	0802b0a8 	.word	0x0802b0a8

08001f88 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    { return __arr; }
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_ZSt3endIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3340      	adds	r3, #64	@ 0x40
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_ZSt4fillIPVhiEvT_S2_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f82d 	bl	8002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>
    }
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_ZNKSt8functionIFvbEEclEb>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fe73 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <_ZNKSt8functionIFvbEEclEb+0x1e>
	  __throw_bad_function_call();
 8001fee:	f026 fb08 	bl	8028602 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68dc      	ldr	r4, [r3, #12]
 8001ff6:	687d      	ldr	r5, [r7, #4]
 8001ff8:	1cfb      	adds	r3, r7, #3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f808 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8002000:	4603      	mov	r3, r0
 8002002:	4619      	mov	r1, r3
 8002004:	4628      	mov	r0, r5
 8002006:	47a0      	blx	r4
 8002008:	bf00      	nop
      }
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bdb0      	pop	{r4, r5, r7, pc}

08002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f804 	bl	8002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8002056:	e006      	b.n	8002066 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x22>
	*__first = __tmp;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d1f4      	bne.n	8002058 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x14>
    }
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_Z41__static_initialization_and_destruction_0ii>:
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d107      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002092:	4293      	cmp	r3, r2
 8002094:	d102      	bne.n	800209c <_Z41__static_initialization_and_destruction_0ii+0x20>
__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;
 8002096:	4803      	ldr	r0, [pc, #12]	@ (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002098:	f7fe fe46 	bl	8000d28 <_ZN14DMA_RxBuffer_tC1Ev>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	30000000 	.word	0x30000000

080020a8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv>:

    void ISR_Handler(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
        if (this->InterruptOwnerPtr && this->InterruptHandler) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d02a      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d107      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x2a>
 80020d0:	2300      	movs	r3, #0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d01b      	beq.n	800210e <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
            (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x40>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	e00a      	b.n	80020fe <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x56>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68d2      	ldr	r2, [r2, #12]
 80020f0:	1052      	asrs	r2, r2, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6892      	ldr	r2, [r2, #8]
 80020fa:	4413      	add	r3, r2
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6852      	ldr	r2, [r2, #4]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68c9      	ldr	r1, [r1, #12]
 8002106:	1049      	asrs	r1, r1, #1
 8002108:	440a      	add	r2, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4798      	blx	r3
        }
    }
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_GLOBAL__sub_I_rxDMABuffer>:
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
 800211a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800211e:	2001      	movs	r0, #1
 8002120:	f7ff ffac 	bl	800207c <_Z41__static_initialization_and_destruction_0ii>
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <_ZN14CommsInterfaceC1Ev>:
#include "commsInterface.h"

CommsInterface::CommsInterface() {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4618      	mov	r0, r3
 8002134:	f00f fe04 	bl	8011d40 <_ZN6ModuleC1Ev>
 8002138:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <_ZN14CommsInterfaceC1Ev+0x2c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3318      	adds	r3, #24
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f839 	bl	80021ba <_ZNSt8functionIFvbEEC1Ev>
    // Constructor implementation
}
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	0802b0e4 	.word	0x0802b0e4

08002158 <_ZN14CommsInterface4initEv>:

void CommsInterface::init(){}
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_ZN14CommsInterface5startEv>:
void CommsInterface::start(){}
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_ZN14CommsInterface5tasksEv>:
void CommsInterface::tasks(){}
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	6053      	str	r3, [r2, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	461a      	mov	r2, r3
 80021c6:	2300      	movs	r3, #0
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	6053      	str	r3, [r2, #4]
 80021cc:	6093      	str	r3, [r2, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ffdf 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_ZN11SoftwareSPIC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_>:
#include "SoftwareSPI.h"

SoftwareSPI::SoftwareSPI(const std::string& mosi, const std::string& miso, const std::string& sck)
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	603b      	str	r3, [r7, #0]
    : mosi_pin(mosi, OUTPUT), miso_pin(miso, INPUT, PULLUP), sck_pin(sck, OUTPUT) {}
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f002 fcd8 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8002206:	2302      	movs	r3, #2
 8002208:	2200      	movs	r2, #0
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	f002 fcf8 	bl	8004c00 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3380      	adds	r3, #128	@ 0x80
 8002214:	2201      	movs	r2, #1
 8002216:	6839      	ldr	r1, [r7, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f002 fcc9 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <_ZN11SoftwareSPI4initEv>:

void SoftwareSPI::init() {
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
    sck_pin.set(true); // Ensure clock starts high
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3380      	adds	r3, #128	@ 0x80
 8002234:	2101      	movs	r1, #1
 8002236:	4618      	mov	r0, r3
 8002238:	f002 fe64 	bl	8004f04 <_ZN3Pin3setEb>
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <_ZN11SoftwareSPI8transferEh>:

void SoftwareSPI::begin() {}

uint8_t SoftwareSPI::transfer(uint8_t ulVal) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
    sck_pin.set(false);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3380      	adds	r3, #128	@ 0x80
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f002 fe52 	bl	8004f04 <_ZN3Pin3setEb>

    for (int i = 7; i >= 1; i--) {
 8002260:	2307      	movs	r3, #7
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	e035      	b.n	80022d2 <_ZN11SoftwareSPI8transferEh+0x8e>
    	// Write bit
        !!(ulVal & (1 << i)) ? mosi_pin.set(true) : mosi_pin.set(false);
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	fa42 f303 	asr.w	r3, r2, r3
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <_ZN11SoftwareSPI8transferEh+0x3e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2101      	movs	r1, #1
 800227a:	4618      	mov	r0, r3
 800227c:	f002 fe42 	bl	8004f04 <_ZN3Pin3setEb>
 8002280:	e004      	b.n	800228c <_ZN11SoftwareSPI8transferEh+0x48>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fe3c 	bl	8004f04 <_ZN3Pin3setEb>
        // Start clock pulse
        sck_pin.set(true);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3380      	adds	r3, #128	@ 0x80
 8002290:	2101      	movs	r1, #1
 8002292:	4618      	mov	r0, r3
 8002294:	f002 fe36 	bl	8004f04 <_ZN3Pin3setEb>
        // Read bit
        value |= ( miso_pin.get() ? 1 : 0) << i;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3340      	adds	r3, #64	@ 0x40
 800229c:	4618      	mov	r0, r3
 800229e:	f002 fe1b 	bl	8004ed8 <_ZNK3Pin3getEv>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <_ZN11SoftwareSPI8transferEh+0x68>
 80022a8:	2201      	movs	r2, #1
 80022aa:	e000      	b.n	80022ae <_ZN11SoftwareSPI8transferEh+0x6a>
 80022ac:	2200      	movs	r2, #0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	b25a      	sxtb	r2, r3
 80022b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	b25b      	sxtb	r3, r3
 80022be:	73fb      	strb	r3, [r7, #15]
        // Stop clock pulse
        sck_pin.set(false);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3380      	adds	r3, #128	@ 0x80
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f002 fe1c 	bl	8004f04 <_ZN3Pin3setEb>
    for (int i = 7; i >= 1; i--) {
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	dcc6      	bgt.n	8002266 <_ZN11SoftwareSPI8transferEh+0x22>
    }

    !!(ulVal & (1 << 0)) ? mosi_pin.set(true) : mosi_pin.set(false);
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <_ZN11SoftwareSPI8transferEh+0xaa>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2101      	movs	r1, #1
 80022e6:	4618      	mov	r0, r3
 80022e8:	f002 fe0c 	bl	8004f04 <_ZN3Pin3setEb>
 80022ec:	e004      	b.n	80022f8 <_ZN11SoftwareSPI8transferEh+0xb4>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 fe06 	bl	8004f04 <_ZN3Pin3setEb>
    sck_pin.set(true);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3380      	adds	r3, #128	@ 0x80
 80022fc:	2101      	movs	r1, #1
 80022fe:	4618      	mov	r0, r3
 8002300:	f002 fe00 	bl	8004f04 <_ZN3Pin3setEb>
    value |= ( miso_pin.get() ? 1 : 0) << 0;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3340      	adds	r3, #64	@ 0x40
 8002308:	4618      	mov	r0, r3
 800230a:	f002 fde5 	bl	8004ed8 <_ZNK3Pin3getEv>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <_ZN11SoftwareSPI8transferEh+0xd4>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <_ZN11SoftwareSPI8transferEh+0xd6>
 8002318:	2300      	movs	r3, #0
 800231a:	b25a      	sxtb	r2, r3
 800231c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002320:	4313      	orrs	r3, r2
 8002322:	b25b      	sxtb	r3, r3
 8002324:	73fb      	strb	r3, [r7, #15]

    return value;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_ZN14SoftwareSerial4idleEv>:
    bool listen(void);
    void tickerHandler(void);

    void enableTx(void);
    void enableRx(void);
    void idle() {__NOP();}
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:
#include "SoftwareSerial.h"
#include <cstdint>



SoftwareSerial::SoftwareSerial(std::string tx, std::string rx)
 8002346:	b590      	push	{r4, r7, lr}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4618      	mov	r0, r3
 8002356:	f026 fa00 	bl	802875a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3318      	adds	r3, #24
 800235e:	4618      	mov	r0, r3
 8002360:	f026 f9fb 	bl	802875a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
    if (!tx.empty()) TXportAndPin = tx;
 8002364:	68b8      	ldr	r0, [r7, #8]
 8002366:	f026 fade 	bl	8028926 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 800236a:	4603      	mov	r3, r0
 800236c:	f083 0301 	eor.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d004      	beq.n	8002380 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3a>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	4618      	mov	r0, r3
 800237c:	f026 fa75 	bl	802886a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    if (!rx.empty()) RXportAndPin = rx;
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f026 fad0 	bl	8028926 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8002386:	4603      	mov	r3, r0
 8002388:	f083 0301 	eor.w	r3, r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d005      	beq.n	800239e <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x58>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3318      	adds	r3, #24
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	f026 fa66 	bl	802886a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    halfDuplex = !TXportAndPin.compare(RXportAndPin);
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3318      	adds	r3, #24
 80023a4:	4619      	mov	r1, r3
 80023a6:	4610      	mov	r0, r2
 80023a8:	f026 fbe2 	bl	8028b70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf0c      	ite	eq
 80023b2:	2301      	moveq	r3, #1
 80023b4:	2300      	movne	r3, #0
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82

    if(halfDuplex)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d015      	beq.n	80023f4 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xae>
    {
        this->rxpin = new Pin(RXportAndPin,1);
 80023c8:	2040      	movs	r0, #64	@ 0x40
 80023ca:	f026 f8f1 	bl	80285b0 <_Znwj>
 80023ce:	4603      	mov	r3, r0
 80023d0:	461c      	mov	r4, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3318      	adds	r3, #24
 80023d6:	2201      	movs	r2, #1
 80023d8:	4619      	mov	r1, r3
 80023da:	4620      	mov	r0, r4
 80023dc:	f002 fbe8 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	635c      	str	r4, [r3, #52]	@ 0x34
        this->txpin = this->rxpin;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	631a      	str	r2, [r3, #48]	@ 0x30
        setTX();
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f848 	bl	8002482 <_ZN14SoftwareSerial5setTXEv>
 80023f2:	e020      	b.n	8002436 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xf0>
    }
    else
    {
        this->txpin = new Pin(TXportAndPin,0);
 80023f4:	2040      	movs	r0, #64	@ 0x40
 80023f6:	f026 f8db 	bl	80285b0 <_Znwj>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461c      	mov	r4, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	4619      	mov	r1, r3
 8002404:	4620      	mov	r0, r4
 8002406:	f002 fbd3 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	631c      	str	r4, [r3, #48]	@ 0x30
        setTX();
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f837 	bl	8002482 <_ZN14SoftwareSerial5setTXEv>

        this->rxpin = new Pin(RXportAndPin,1);
 8002414:	2040      	movs	r0, #64	@ 0x40
 8002416:	f026 f8cb 	bl	80285b0 <_Znwj>
 800241a:	4603      	mov	r3, r0
 800241c:	461c      	mov	r4, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3318      	adds	r3, #24
 8002422:	2201      	movs	r2, #1
 8002424:	4619      	mov	r1, r3
 8002426:	4620      	mov	r0, r4
 8002428:	f002 fbc2 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	635c      	str	r4, [r3, #52]	@ 0x34
        setRX();
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f839 	bl	80024a8 <_ZN14SoftwareSerial5setRXEv>
    }
    
    qin = 0;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    qout = 0;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    activeTx = false;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    activeRx = false;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	bd90      	pop	{r4, r7, pc}

08002460 <_ZN14SoftwareSerial5beginEi>:


void SoftwareSerial::begin(int baudrate)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
    #ifdef FORCE_BAUD_RATE
    baudrate = FORCE_BAUD_RATE;     // 19200 fastest stable baud rate
 800246a:	f644 4390 	movw	r3, #19600	@ 0x4c90
 800246e:	603b      	str	r3, [r7, #0]
    #endif
    baudRate = baudrate;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	67da      	str	r2, [r3, #124]	@ 0x7c
    //ticker.attach_us(callback(this, &SoftwareSerial::tickerHandler), 1000000.0 / (baudRate * 3.0));
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <_ZN14SoftwareSerial5setTXEv>:
    //ticker.attach_us(callback(this, &SoftwareSerial::tickerHandler), 1000000.0 / (baudrate * 3.0));
    this->baudRate = baudrate;
}

void SoftwareSerial::setTX(void)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
    // the pin would be output low for a short while before switching to
    // output hihg. Now, it is input with pullup for a short while, which
    // is fine. With inverse logic, either order is fine.

    //this->txpin->set(1);                  // works for LPC1768 but not STM32
    this->txpin->setAsOutput();
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	4618      	mov	r0, r3
 8002490:	f002 fd4f 	bl	8004f32 <_ZN3Pin11setAsOutputEv>
    this->txpin->set(1);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002498:	2101      	movs	r1, #1
 800249a:	4618      	mov	r0, r3
 800249c:	f002 fd32 	bl	8004f04 <_ZN3Pin3setEb>
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <_ZN14SoftwareSerial5setRXEv>:

void SoftwareSerial::setRX(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

    this->rxpin->setAsInput();
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 fd4d 	bl	8004f54 <_ZN3Pin10setAsInputEv>
    this->rxpin->setPullUp();
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024be:	4618      	mov	r0, r3
 80024c0:	f002 fd59 	bl	8004f76 <_ZN3Pin9setPullUpEv>
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_ZN14SoftwareSerial7setRXTXEb>:

void SoftwareSerial::setRXTX(bool input)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
    if (halfDuplex)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01f      	beq.n	8002522 <_ZN14SoftwareSerial7setRXTXEb+0x56>
    {
        if (input)
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d010      	beq.n	800250a <_ZN14SoftwareSerial7setRXTXEb+0x3e>
        {
            setRX();
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ffdd 	bl	80024a8 <_ZN14SoftwareSerial5setRXEv>
            rxBitCnt = -1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295
 80024f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            rxTickCnt = 2;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            activeRx = true;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
                setTX();
                activeRx = false;
            }
        }
    }
}
 8002508:	e00b      	b.n	8002522 <_ZN14SoftwareSerial7setRXTXEb+0x56>
            if (activeRx)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <_ZN14SoftwareSerial7setRXTXEb+0x56>
                setTX();
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ffb4 	bl	8002482 <_ZN14SoftwareSerial5setTXEv>
                activeRx = false;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZN14SoftwareSerial6listenEv>:

bool SoftwareSerial::listen()
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
    if (rxpin != nullptr)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <_ZN14SoftwareSerial6listenEv+0x1c>
    {
        setRXTX(true);
 800253a:	2101      	movs	r1, #1
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ffc5 	bl	80024cc <_ZN14SoftwareSerial7setRXTXEb>
        return true;
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <_ZN14SoftwareSerial6listenEv+0x1e>
    }
    return false;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <_ZN14SoftwareSerial13tickerHandlerEv>:
{
    
}

void SoftwareSerial::tickerHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
    if (activeTx) this->send();
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <_ZN14SoftwareSerial13tickerHandlerEv+0x18>
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f80c 	bl	8002580 <_ZN14SoftwareSerial4sendEv>
    if (activeRx) this->receive();
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <_ZN14SoftwareSerial13tickerHandlerEv+0x28>
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f867 	bl	8002646 <_ZN14SoftwareSerial7receiveEv>
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <_ZN14SoftwareSerial4sendEv>:

void SoftwareSerial::send(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    if (--txTickCnt <= 0)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258e:	1e5a      	subs	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259c:	2b00      	cmp	r3, #0
 800259e:	bfd4      	ite	le
 80025a0:	2301      	movle	r3, #1
 80025a2:	2300      	movgt	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d049      	beq.n	800263e <_ZN14SoftwareSerial4sendEv+0xbe>
    {
        if (txBitCnt++ < TX_BITS)   // count out the bits in the txBuffer
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025b0:	1c59      	adds	r1, r3, #1
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	bfd4      	ite	le
 80025bc:	2301      	movle	r3, #1
 80025be:	2300      	movgt	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d01b      	beq.n	80025fe <_ZN14SoftwareSerial4sendEv+0x7e>
        {
            this->txpin->set(txBuffer & 0x01);   // set output equal to the LSB in txBuffer
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4619      	mov	r1, r3
 80025e0:	4610      	mov	r0, r2
 80025e2:	f002 fc8f 	bl	8004f04 <_ZN3Pin3setEb>
            txBuffer >>= 1;                     // shift txBuffer to right
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ec:	105a      	asrs	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            txTickCnt = Config::oversample;     // reset the tick counter
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2203      	movs	r2, #3
 80025f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                }
                activeTx = false;
            }
        }
    }
}
 80025fc:	e01f      	b.n	800263e <_ZN14SoftwareSerial4sendEv+0xbe>
            txTickCnt = 1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
            if (outputPending)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 800260c:	2b00      	cmp	r3, #0
 800260e:	d004      	beq.n	800261a <_ZN14SoftwareSerial4sendEv+0x9a>
                activeTx = false;    // output pending allow new byte to be written to txBuffer from write()
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8002618:	e011      	b.n	800263e <_ZN14SoftwareSerial4sendEv+0xbe>
            else if (txBitCnt > 10 + Config::oversample*5)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002620:	2b19      	cmp	r3, #25
 8002622:	d90c      	bls.n	800263e <_ZN14SoftwareSerial4sendEv+0xbe>
                if (halfDuplex)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <_ZN14SoftwareSerial4sendEv+0xb6>
                    setRXTX(true);        // switch to receive mode
 800262e:	2101      	movs	r1, #1
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff4b 	bl	80024cc <_ZN14SoftwareSerial7setRXTXEb>
                activeTx = false;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <_ZN14SoftwareSerial7receiveEv>:

void SoftwareSerial::receive()
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
    if (--rxTickCnt <= 0)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002654:	1e5a      	subs	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002662:	2b00      	cmp	r3, #0
 8002664:	bfd4      	ite	le
 8002666:	2301      	movle	r3, #1
 8002668:	2300      	movgt	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d06f      	beq.n	8002750 <_ZN14SoftwareSerial7receiveEv+0x10a>
    {
        uint8_t inbit = this->rxpin->get();   // read the rx line
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002674:	4618      	mov	r0, r3
 8002676:	f002 fc2f 	bl	8004ed8 <_ZNK3Pin3getEv>
 800267a:	4603      	mov	r3, r0
 800267c:	73fb      	strb	r3, [r7, #15]
        if (rxBitCnt == -1)                 // waiting for start bit
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d114      	bne.n	80026b4 <_ZN14SoftwareSerial7receiveEv+0x6e>
        {
            if (!inbit)
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10c      	bne.n	80026aa <_ZN14SoftwareSerial7receiveEv+0x64>
            {
                // got a start bit
                rxBitCnt = 0;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
                rxTickCnt = Config::oversample + 1;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2204      	movs	r2, #4
 800269c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                rxBuffer = 0;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            if (inbit)  rxBuffer |= 0x80;
            rxBitCnt++;
            rxTickCnt = Config::oversample;
        }
    }
}
 80026a8:	e052      	b.n	8002750 <_ZN14SoftwareSerial7receiveEv+0x10a>
                rxTickCnt = 1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 80026b2:	e04d      	b.n	8002750 <_ZN14SoftwareSerial7receiveEv+0x10a>
        else if (rxBitCnt >= RX_BITS)     // full byte has been read
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ba:	2b07      	cmp	r3, #7
 80026bc:	dd2b      	ble.n	8002716 <_ZN14SoftwareSerial7receiveEv+0xd0>
            inbuf[qin] = rxBuffer;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80026ca:	4619      	mov	r1, r3
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	440b      	add	r3, r1
 80026d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
			if ( ++qin >= IN_BUF_SIZE )
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80026dc:	3301      	adds	r3, #1
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80026ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80026ee:	bf8c      	ite	hi
 80026f0:	2301      	movhi	r3, #1
 80026f2:	2300      	movls	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <_ZN14SoftwareSerial7receiveEv+0xbc>
				qin = 0;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            rxTickCnt = 1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            rxBitCnt = -1;              // flag waiting for start bit
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f04f 32ff 	mov.w	r2, #4294967295
 8002710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
}
 8002714:	e01c      	b.n	8002750 <_ZN14SoftwareSerial7receiveEv+0x10a>
            rxBuffer >>= 1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800271c:	105a      	asrs	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            if (inbit)  rxBuffer |= 0x80;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <_ZN14SoftwareSerial7receiveEv+0xf4>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002730:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            rxBitCnt++;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            rxTickCnt = Config::oversample;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2203      	movs	r2, #3
 800274c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <_ZN14SoftwareSerial9availableEv>:


int SoftwareSerial::available()
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
    return (qout - qin);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8002766:	461a      	mov	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800276e:	1ad3      	subs	r3, r2, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <_ZN14SoftwareSerial5writeEi>:
    }
}


void SoftwareSerial::write(int b)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
    outputPending = true;               // notify ticker handler that there are more bytes to transmit after current
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    while (activeTx)                    // wait for current transmission to complete
 800278e:	e002      	b.n	8002796 <_ZN14SoftwareSerial5writeEi+0x1a>
    {
        idle();
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff fdcd 	bl	8002330 <_ZN14SoftwareSerial4idleEv>
    while (activeTx)                    // wait for current transmission to complete
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f7      	bne.n	8002790 <_ZN14SoftwareSerial5writeEi+0x14>
    }
    txBuffer =      (b << 1) | 0x200;   // add start and stop bits
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    txBitCnt =      0;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    txTickCnt =     Config::oversample;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2203      	movs	r2, #3
 80027ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    if (halfDuplex) setRXTX(false);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <_ZN14SoftwareSerial5writeEi+0x54>
 80027c8:	2100      	movs	r1, #0
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff fe7e 	bl	80024cc <_ZN14SoftwareSerial7setRXTXEb>
    outputPending = false;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    activeTx =      true;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_ZN14SoftwareSerial4readEv>:

int16_t SoftwareSerial::read()
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
    if (qout == qin) return -1;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 2079 	ldrb.w	r2, [r3, #121]	@ 0x79
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d102      	bne.n	8002806 <_ZN14SoftwareSerial4readEv+0x1e>
 8002800:	f04f 33ff 	mov.w	r3, #4294967295
 8002804:	e020      	b.n	8002848 <_ZN14SoftwareSerial4readEv+0x60>

    char d = inbuf[qout] & 0xFF;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800280c:	461a      	mov	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002816:	73fb      	strb	r3, [r7, #15]

    if ( ++qout >= IN_BUF_SIZE ) {qout = 0;}
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800281e:	3301      	adds	r3, #1
 8002820:	b2da      	uxtb	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800282e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002830:	bf8c      	ite	hi
 8002832:	2301      	movhi	r3, #1
 8002834:	2300      	movls	r3, #0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <_ZN14SoftwareSerial4readEv+0x5c>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    
    return d;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	b21b      	sxth	r3, r3
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <_ZN14TMC2130Stepper8CHOPCONFEv>:

#define SET_REG(SETTING) CHOPCONF_register.SETTING = B; write(CHOPCONF_register.address, CHOPCONF_register.sr)

// CHOPCONF

uint32_t TMC2130Stepper::CHOPCONF() {
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
    return read(CHOPCONF_register.address);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3304      	adds	r3, #4
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	216c      	movs	r1, #108	@ 0x6c
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
 800286a:	4603      	mov	r3, r0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <_ZN14TMC2130Stepper8CHOPCONFEm>:
void TMC2130Stepper::CHOPCONF(uint32_t input) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
    CHOPCONF_register.sr = input;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	f8c3 2025 	str.w	r2, [r3, #37]	@ 0x25
    write(CHOPCONF_register.address, CHOPCONF_register.sr);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002892:	216c      	movs	r1, #108	@ 0x6c
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <_ZN14TMC2130Stepper4toffEh>:

void TMC2130Stepper::toff(      uint8_t B ) { SET_REG(toff);    }
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70fb      	strb	r3, [r7, #3]
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	b2d9      	uxtb	r1, r3
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 80028ba:	f361 0303 	bfi	r3, r1, #0, #4
 80028be:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 80028ce:	216c      	movs	r1, #108	@ 0x6c
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <_ZN14TMC2130Stepper5hstrtEh>:
void TMC2130Stepper::hstrt(     uint8_t B ) { SET_REG(hstrt);   }
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	70fb      	strb	r3, [r7, #3]
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	b2d9      	uxtb	r1, r3
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 80028f6:	f361 1306 	bfi	r3, r1, #4, #3
 80028fa:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 800290a:	216c      	movs	r1, #108	@ 0x6c
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4798      	blx	r3
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <_ZN14TMC2130Stepper4hendEh>:
void TMC2130Stepper::hend(      uint8_t B ) { SET_REG(hend);    }
 8002918:	b590      	push	{r4, r7, lr}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	70fb      	strb	r3, [r7, #3]
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	b2da      	uxtb	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f002 0101 	and.w	r1, r2, #1
 8002932:	01cc      	lsls	r4, r1, #7
 8002934:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
 8002938:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 800293c:	4608      	mov	r0, r1
 800293e:	4621      	mov	r1, r4
 8002940:	4301      	orrs	r1, r0
 8002942:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
 8002946:	0852      	lsrs	r2, r2, #1
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	f002 0207 	and.w	r2, r2, #7
 800294e:	f002 0007 	and.w	r0, r2, #7
 8002952:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8002956:	f022 0207 	bic.w	r2, r2, #7
 800295a:	4611      	mov	r1, r2
 800295c:	4602      	mov	r2, r0
 800295e:	430a      	orrs	r2, r1
 8002960:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002970:	216c      	movs	r1, #108	@ 0x6c
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	4798      	blx	r3
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bd90      	pop	{r4, r7, pc}

0800297e <_ZN14TMC2130Stepper3tblEh>:
//void TMC2130Stepper::fd(      uint8_t B ) { SET_REG(fd);      }
void TMC2130Stepper::disfdcc(   bool    B ) { SET_REG(disfdcc); }
void TMC2130Stepper::rndtf(     bool    B ) { SET_REG(rndtf);   }
void TMC2130Stepper::chm(       bool    B ) { SET_REG(chm);     }
void TMC2130Stepper::tbl(       uint8_t B ) { SET_REG(tbl);     }
 800297e:	b590      	push	{r4, r7, lr}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	70fb      	strb	r3, [r7, #3]
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	b2da      	uxtb	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f002 0101 	and.w	r1, r2, #1
 8002998:	01cc      	lsls	r4, r1, #7
 800299a:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 800299e:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80029a2:	4608      	mov	r0, r1
 80029a4:	4621      	mov	r1, r4
 80029a6:	4301      	orrs	r1, r0
 80029a8:	f883 1026 	strb.w	r1, [r3, #38]	@ 0x26
 80029ac:	0852      	lsrs	r2, r2, #1
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	f002 0201 	and.w	r2, r2, #1
 80029b4:	f002 0001 	and.w	r0, r2, #1
 80029b8:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	4611      	mov	r1, r2
 80029c2:	4602      	mov	r2, r0
 80029c4:	430a      	orrs	r2, r1
 80029c6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 80029d6:	216c      	movs	r1, #108	@ 0x6c
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd90      	pop	{r4, r7, pc}

080029e4 <_ZN14TMC2130Stepper6vsenseEb>:
void TMC2130Stepper::vsense(    bool    B ) { SET_REG(vsense);  }
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	f892 3027 	ldrb.w	r3, [r2, #39]	@ 0x27
 80029f6:	78f9      	ldrb	r1, [r7, #3]
 80029f8:	f361 0341 	bfi	r3, r1, #1, #1
 80029fc:	f882 3027 	strb.w	r3, [r2, #39]	@ 0x27
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002a0c:	216c      	movs	r1, #108	@ 0x6c
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <_ZN14TMC2130Stepper4mresEh>:
void TMC2130Stepper::vhighfs(   bool    B ) { SET_REG(vhighfs); }
void TMC2130Stepper::vhighchm(  bool    B ) { SET_REG(vhighchm);}
void TMC2130Stepper::sync(      uint8_t B ) { SET_REG(sync);    }
void TMC2130Stepper::mres(      uint8_t B ) { SET_REG(mres);    }
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	70fb      	strb	r3, [r7, #3]
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	b2d9      	uxtb	r1, r3
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8002a34:	f361 0303 	bfi	r3, r1, #0, #4
 8002a38:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002a48:	216c      	movs	r1, #108	@ 0x6c
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	4798      	blx	r3
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <_ZN14TMC2130Stepper5hstrtEv>:
void TMC2130Stepper::intpol(    bool    B ) { SET_REG(intpol);  }
void TMC2130Stepper::dedge(     bool    B ) { SET_REG(dedge);   }
void TMC2130Stepper::diss2g(    bool    B ) { SET_REG(diss2g);  }

uint8_t TMC2130Stepper::toff()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.toff;    }
uint8_t TMC2130Stepper::hstrt()     { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hstrt;   }
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fef6 	bl	8002854 <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	7b3b      	ldrb	r3, [r7, #12]
 8002a6e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <_ZN14TMC2130Stepper4hendEv>:
uint8_t TMC2130Stepper::hend()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hend;    }
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff fee3 	bl	8002854 <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	89bb      	ldrh	r3, [r7, #12]
 8002a94:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <_ZN14TMC2130Stepper3tblEv>:
//uint8_t TMC2130Stepper::fd()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.fd;      }
bool    TMC2130Stepper::disfdcc()   { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.disfdcc; }
bool    TMC2130Stepper::rndtf()     { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.rndtf;   }
bool    TMC2130Stepper::chm()       { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.chm;     }
uint8_t TMC2130Stepper::tbl()       { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.tbl;     }
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff fed0 	bl	8002854 <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f3c3 33c1 	ubfx	r3, r3, #15, #2
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <_ZN14TMC2130Stepper6vsenseEv>:
bool    TMC2130Stepper::vsense()    { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vsense;  }
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff febd 	bl	8002854 <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002ada:	4603      	mov	r3, r0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	7bbb      	ldrb	r3, [r7, #14]
 8002ae0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <_ZN14TMC2130Stepper4mresEv>:
bool    TMC2130Stepper::vhighfs()   { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vhighfs; }
bool    TMC2130Stepper::vhighchm()  { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vhighchm;}
uint8_t TMC2130Stepper::sync()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.sync;    }
uint8_t TMC2130Stepper::mres()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.mres;    }
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff feaa 	bl	8002854 <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002b00:	4603      	mov	r3, r0
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <_ZN14TMC2208Stepper8CHOPCONFEv>:

void TMC2208Stepper::CHOPCONF(uint32_t input) {
    CHOPCONF_register.sr = input;
    write(CHOPCONF_register.address, CHOPCONF_register.sr);
}
uint32_t TMC2208Stepper::CHOPCONF() {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
    return read(CHOPCONF_register.address);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3304      	adds	r3, #4
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	216c      	movs	r1, #108	@ 0x6c
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	4798      	blx	r3
 8002b2a:	4603      	mov	r3, r0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <_ZN14TMC2208Stepper4toffEh>:
void TMC2208Stepper::toff   ( uint8_t  B )  { SET_REG(toff);    }
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	70fb      	strb	r3, [r7, #3]
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	b2d9      	uxtb	r1, r3
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8002b4e:	f361 0303 	bfi	r3, r1, #0, #4
 8002b52:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002b62:	216c      	movs	r1, #108	@ 0x6c
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	4798      	blx	r3
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <_ZN14TMC2208Stepper5hstrtEh>:
void TMC2208Stepper::hstrt  ( uint8_t  B )  { SET_REG(hstrt);   }
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	70fb      	strb	r3, [r7, #3]
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	b2d9      	uxtb	r1, r3
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8002b8a:	f361 1306 	bfi	r3, r1, #4, #3
 8002b8e:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002b9e:	216c      	movs	r1, #108	@ 0x6c
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	4798      	blx	r3
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <_ZN14TMC2208Stepper4hendEh>:
void TMC2208Stepper::hend   ( uint8_t  B )  { SET_REG(hend);    }
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	70fb      	strb	r3, [r7, #3]
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f002 0101 	and.w	r1, r2, #1
 8002bc6:	01cc      	lsls	r4, r1, #7
 8002bc8:	f893 102b 	ldrb.w	r1, [r3, #43]	@ 0x2b
 8002bcc:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002bd0:	4608      	mov	r0, r1
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	4301      	orrs	r1, r0
 8002bd6:	f883 102b 	strb.w	r1, [r3, #43]	@ 0x2b
 8002bda:	0852      	lsrs	r2, r2, #1
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	f002 0207 	and.w	r2, r2, #7
 8002be2:	f002 0007 	and.w	r0, r2, #7
 8002be6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8002bea:	f022 0207 	bic.w	r2, r2, #7
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002c04:	216c      	movs	r1, #108	@ 0x6c
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	4798      	blx	r3
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd90      	pop	{r4, r7, pc}

08002c12 <_ZN14TMC2208Stepper3tblEh>:
void TMC2208Stepper::tbl    ( uint8_t  B )  { SET_REG(tbl);     }
 8002c12:	b590      	push	{r4, r7, lr}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	70fb      	strb	r3, [r7, #3]
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f002 0101 	and.w	r1, r2, #1
 8002c2c:	01cc      	lsls	r4, r1, #7
 8002c2e:	f893 102c 	ldrb.w	r1, [r3, #44]	@ 0x2c
 8002c32:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002c36:	4608      	mov	r0, r1
 8002c38:	4621      	mov	r1, r4
 8002c3a:	4301      	orrs	r1, r0
 8002c3c:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
 8002c40:	0852      	lsrs	r2, r2, #1
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	f002 0201 	and.w	r2, r2, #1
 8002c48:	f002 0001 	and.w	r0, r2, #1
 8002c4c:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	4611      	mov	r1, r2
 8002c56:	4602      	mov	r2, r0
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002c6a:	216c      	movs	r1, #108	@ 0x6c
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	4798      	blx	r3
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd90      	pop	{r4, r7, pc}

08002c78 <_ZN14TMC2208Stepper6vsenseEb>:
void TMC2208Stepper::vsense ( bool     B )  { SET_REG(vsense);  }
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	70fb      	strb	r3, [r7, #3]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	f892 302d 	ldrb.w	r3, [r2, #45]	@ 0x2d
 8002c8a:	78f9      	ldrb	r1, [r7, #3]
 8002c8c:	f361 0341 	bfi	r3, r1, #1, #1
 8002c90:	f882 302d 	strb.w	r3, [r2, #45]	@ 0x2d
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002ca0:	216c      	movs	r1, #108	@ 0x6c
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	4798      	blx	r3
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <_ZN14TMC2208Stepper4mresEh>:
void TMC2208Stepper::mres   ( uint8_t  B )  { SET_REG(mres);    }
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	70fb      	strb	r3, [r7, #3]
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	b2d9      	uxtb	r1, r3
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	f892 302e 	ldrb.w	r3, [r2, #46]	@ 0x2e
 8002cc8:	f361 0303 	bfi	r3, r1, #0, #4
 8002ccc:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002cdc:	216c      	movs	r1, #108	@ 0x6c
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <_ZN14TMC2208Stepper5hstrtEv>:
void TMC2208Stepper::dedge  ( bool     B )  { SET_REG(dedge);   }
void TMC2208Stepper::diss2g ( bool     B )  { SET_REG(diss2g);  }
void TMC2208Stepper::diss2vs( bool     B )  { SET_REG(diss2vs); }

uint8_t TMC2208Stepper::toff()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.toff;     }
uint8_t TMC2208Stepper::hstrt()     { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hstrt;    }
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ff0c 	bl	8002b14 <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	7b3b      	ldrb	r3, [r7, #12]
 8002d02:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_ZN14TMC2208Stepper4hendEv>:
uint8_t TMC2208Stepper::hend()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hend;     }
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff fef9 	bl	8002b14 <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002d22:	4603      	mov	r3, r0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	89bb      	ldrh	r3, [r7, #12]
 8002d28:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <_ZN14TMC2208Stepper3tblEv>:
uint8_t TMC2208Stepper::tbl()       { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.tbl;      }
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff fee6 	bl	8002b14 <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f3c3 33c1 	ubfx	r3, r3, #15, #2
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <_ZN14TMC2208Stepper6vsenseEv>:
bool    TMC2208Stepper::vsense()    { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vsense;   }
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff fed3 	bl	8002b14 <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	7bbb      	ldrb	r3, [r7, #14]
 8002d74:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <_ZN14TMC2208Stepper4mresEv>:
uint8_t TMC2208Stepper::mres()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.mres;     }
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff fec0 	bl	8002b14 <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002d94:	4603      	mov	r3, r0
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <_ZN14TMC2130Stepper8COOLCONFEm>:
#define SET_REG(SETTING) COOLCONF_register.SETTING = B; write(COOLCONF_register.address, COOLCONF_register.sr);
#define GET_REG(SETTING) return COOLCONF_register.SETTING;

// COOLCONF
uint32_t TMC2130Stepper::COOLCONF() { return COOLCONF_register.sr; }
void TMC2130Stepper::COOLCONF(uint32_t input) {
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
	COOLCONF_register.sr = input;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	b2d1      	uxtb	r1, r2
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	4301      	orrs	r1, r0
 8002dc0:	f883 1029 	strb.w	r1, [r3, #41]	@ 0x29
 8002dc4:	0a11      	lsrs	r1, r2, #8
 8002dc6:	b2c9      	uxtb	r1, r1
 8002dc8:	2000      	movs	r0, #0
 8002dca:	4301      	orrs	r1, r0
 8002dcc:	f883 102a 	strb.w	r1, [r3, #42]	@ 0x2a
 8002dd0:	0c11      	lsrs	r1, r2, #16
 8002dd2:	b2c9      	uxtb	r1, r1
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	4301      	orrs	r1, r0
 8002dd8:	f883 102b 	strb.w	r1, [r3, #43]	@ 0x2b
 8002ddc:	0e12      	lsrs	r2, r2, #24
 8002dde:	f002 0201 	and.w	r2, r2, #1
 8002de2:	f002 0001 	and.w	r0, r2, #1
 8002de6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	4611      	mov	r1, r2
 8002df0:	4602      	mov	r2, r0
 8002df2:	430a      	orrs	r2, r1
 8002df4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	write(COOLCONF_register.address, COOLCONF_register.sr);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681c      	ldr	r4, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e02:	0a12      	lsrs	r2, r2, #8
 8002e04:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	061b      	lsls	r3, r3, #24
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	461a      	mov	r2, r3
 8002e12:	216d      	movs	r1, #109	@ 0x6d
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	47a0      	blx	r4
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd90      	pop	{r4, r7, pc}

08002e20 <_ZN14TMC2130Stepper5seminEh>:

void TMC2130Stepper::semin(	uint8_t B )	{ SET_REG(semin);	}
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	70fb      	strb	r3, [r7, #3]
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	b2d9      	uxtb	r1, r3
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	f892 3029 	ldrb.w	r3, [r2, #41]	@ 0x29
 8002e3a:	f361 0303 	bfi	r3, r1, #0, #4
 8002e3e:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681c      	ldr	r4, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e4c:	0a12      	lsrs	r2, r2, #8
 8002e4e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	061b      	lsls	r3, r3, #24
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	216d      	movs	r1, #109	@ 0x6d
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	47a0      	blx	r4
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd90      	pop	{r4, r7, pc}

08002e6a <_ZN14TMC2130Stepper5semaxEh>:
void TMC2130Stepper::seup(	uint8_t B )	{ SET_REG(seup);	}
void TMC2130Stepper::semax(	uint8_t B )	{ SET_REG(semax);	}
 8002e6a:	b590      	push	{r4, r7, lr}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	70fb      	strb	r3, [r7, #3]
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	b2d9      	uxtb	r1, r3
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	f892 302a 	ldrb.w	r3, [r2, #42]	@ 0x2a
 8002e84:	f361 0303 	bfi	r3, r1, #0, #4
 8002e88:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681c      	ldr	r4, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e96:	0a12      	lsrs	r2, r2, #8
 8002e98:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	216d      	movs	r1, #109	@ 0x6d
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	47a0      	blx	r4
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd90      	pop	{r4, r7, pc}

08002eb4 <_ZN14TMC2130Stepper4sednEh>:
void TMC2130Stepper::sedn(	uint8_t B )	{ SET_REG(sedn);	}
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	70fb      	strb	r3, [r7, #3]
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	b2d9      	uxtb	r1, r3
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	f892 302a 	ldrb.w	r3, [r2, #42]	@ 0x2a
 8002ece:	f361 1346 	bfi	r3, r1, #5, #2
 8002ed2:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681c      	ldr	r4, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ee0:	0a12      	lsrs	r2, r2, #8
 8002ee2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	061b      	lsls	r3, r3, #24
 8002eec:	4313      	orrs	r3, r2
 8002eee:	461a      	mov	r2, r3
 8002ef0:	216d      	movs	r1, #109	@ 0x6d
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	47a0      	blx	r4
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd90      	pop	{r4, r7, pc}

08002efe <_ZN14TMC2209Stepper5seminEh>:
void TMC2209Stepper::COOLCONF(uint16_t input) {
	COOLCONF_register.sr = input;
	write(COOLCONF_register.address, COOLCONF_register.sr);
}

void TMC2209Stepper::semin(	uint8_t B )	{ SET_REG(semin);	}
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	70fb      	strb	r3, [r7, #3]
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	b2d9      	uxtb	r1, r3
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8002f18:	f361 0303 	bfi	r3, r1, #0, #4
 8002f1c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 8002f2e:	b292      	uxth	r2, r2
 8002f30:	2142      	movs	r1, #66	@ 0x42
 8002f32:	4798      	blx	r3
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <_ZN14TMC2209Stepper5semaxEh>:
void TMC2209Stepper::seup(	uint8_t B )	{ SET_REG(seup);	}
void TMC2209Stepper::semax(	uint8_t B )	{ SET_REG(semax);	}
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	70fb      	strb	r3, [r7, #3]
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	b2d9      	uxtb	r1, r3
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8002f56:	f361 0303 	bfi	r3, r1, #0, #4
 8002f5a:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 8002f6c:	b292      	uxth	r2, r2
 8002f6e:	2142      	movs	r1, #66	@ 0x42
 8002f70:	4798      	blx	r3
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <_ZN14TMC2209Stepper4sednEh>:
void TMC2209Stepper::sedn(	uint8_t B )	{ SET_REG(sedn);	}
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	70fb      	strb	r3, [r7, #3]
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	b2d9      	uxtb	r1, r3
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8002f94:	f361 1346 	bfi	r3, r1, #5, #2
 8002f98:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 8002faa:	b292      	uxth	r2, r2
 8002fac:	2142      	movs	r1, #66	@ 0x42
 8002fae:	4798      	blx	r3
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <_ZN14TMC2130Stepper10DRV_STATUSEv>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

#define GET_REG(NS, SETTING) NS::DRV_STATUS_t r{0}; r.sr = DRV_STATUS(); return r.SETTING

uint32_t TMC2130Stepper::DRV_STATUS() { return read(DRV_STATUS_t::address); }
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	216f      	movs	r1, #111	@ 0x6f
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	4798      	blx	r3
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <_ZN14TMC2208Stepper10DRV_STATUSEv>:
bool TMC2130Stepper::s2gb()         { GET_REG(TMC2130_n, s2gb);         }
bool TMC2130Stepper::ola()          { GET_REG(TMC2130_n, ola);          }
bool TMC2130Stepper::olb()          { GET_REG(TMC2130_n, olb);          }
bool TMC2130Stepper::stst()         { GET_REG(TMC2130_n, stst);         }

uint32_t TMC2208Stepper::DRV_STATUS() {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
    return read(TMC2208_n::DRV_STATUS_t::address);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	216f      	movs	r1, #111	@ 0x6f
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4798      	blx	r3
 8002fee:	4603      	mov	r3, r0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_ZN14TMC2130Stepper5GCONFEm>:
// GCONF

uint32_t TMC2130Stepper::GCONF() {
    return read(GCONF_register.address);
}
void TMC2130Stepper::GCONF(uint32_t input) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
    GCONF_register.sr = input;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	b2d1      	uxtb	r1, r2
 800300c:	2000      	movs	r0, #0
 800300e:	4301      	orrs	r1, r0
 8003010:	7559      	strb	r1, [r3, #21]
 8003012:	0a11      	lsrs	r1, r2, #8
 8003014:	b2c9      	uxtb	r1, r1
 8003016:	2000      	movs	r0, #0
 8003018:	4301      	orrs	r1, r0
 800301a:	7599      	strb	r1, [r3, #22]
 800301c:	0c12      	lsrs	r2, r2, #16
 800301e:	f002 0203 	and.w	r2, r2, #3
 8003022:	f002 0003 	and.w	r0, r2, #3
 8003026:	7dda      	ldrb	r2, [r3, #23]
 8003028:	f022 0203 	bic.w	r2, r2, #3
 800302c:	4611      	mov	r1, r2
 800302e:	4602      	mov	r2, r0
 8003030:	430a      	orrs	r2, r1
 8003032:	75da      	strb	r2, [r3, #23]
    write(GCONF_register.address, GCONF_register.sr);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6952      	ldr	r2, [r2, #20]
 800303e:	f3c2 2211 	ubfx	r2, r2, #8, #18
 8003042:	2100      	movs	r1, #0
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4798      	blx	r3
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <_ZN14TMC2208Stepper14en_spreadCycleEb>:
    write(GCONF_register.address, GCONF_register.sr);
}

void TMC2208Stepper::I_scale_analog(bool B)     { SET_REG(i_scale_analog);  }
void TMC2208Stepper::internal_Rsense(bool B)    { SET_REG(internal_rsense); }
void TMC2208Stepper::en_spreadCycle(bool B)     { SET_REG(en_spreadcycle);  }
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	70fb      	strb	r3, [r7, #3]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003062:	78f9      	ldrb	r1, [r7, #3]
 8003064:	f361 0382 	bfi	r3, r1, #2, #1
 8003068:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6a12      	ldr	r2, [r2, #32]
 8003076:	f3c2 2209 	ubfx	r2, r2, #8, #10
 800307a:	b292      	uxth	r2, r2
 800307c:	2100      	movs	r1, #0
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	4798      	blx	r3
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <_ZN14TMC2208Stepper11pdn_disableEb>:
void TMC2208Stepper::shaft(bool B)              { SET_REG(shaft);           }
void TMC2208Stepper::index_otpw(bool B)         { SET_REG(index_otpw);      }
void TMC2208Stepper::index_step(bool B)         { SET_REG(index_step);      }
void TMC2208Stepper::pdn_disable(bool B)        { SET_REG(pdn_disable);     }
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	460b      	mov	r3, r1
 8003094:	70fb      	strb	r3, [r7, #3]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800309c:	78f9      	ldrb	r1, [r7, #3]
 800309e:	f361 1386 	bfi	r3, r1, #6, #1
 80030a2:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6a12      	ldr	r2, [r2, #32]
 80030b0:	f3c2 2209 	ubfx	r2, r2, #8, #10
 80030b4:	b292      	uxth	r2, r2
 80030b6:	2100      	movs	r1, #0
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <_ZN14TMC2208Stepper16mstep_reg_selectEb>:
void TMC2208Stepper::mstep_reg_select(bool B)   { SET_REG(mstep_reg_select);}
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	70fb      	strb	r3, [r7, #3]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 80030d6:	78f9      	ldrb	r1, [r7, #3]
 80030d8:	f361 13c7 	bfi	r3, r1, #7, #1
 80030dc:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6a12      	ldr	r2, [r2, #32]
 80030ea:	f3c2 2209 	ubfx	r2, r2, #8, #10
 80030ee:	b292      	uxth	r2, r2
 80030f0:	2100      	movs	r1, #0
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	4798      	blx	r3
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <_ZN10TMCStepper10IHOLD_IRUNEm>:
#define SET_REG(SETTING) IHOLD_IRUN_register.SETTING = B; write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
#define GET_REG(SETTING) return IHOLD_IRUN_register.SETTING;

// IHOLD_IRUN
uint32_t TMCStepper::IHOLD_IRUN() { return IHOLD_IRUN_register.sr; }
void TMCStepper::IHOLD_IRUN(uint32_t input) {
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	6039      	str	r1, [r7, #0]
    IHOLD_IRUN_register.sr = input;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	b291      	uxth	r1, r2
 8003112:	2000      	movs	r0, #0
 8003114:	4301      	orrs	r1, r0
 8003116:	8099      	strh	r1, [r3, #4]
 8003118:	0c12      	lsrs	r2, r2, #16
 800311a:	f002 020f 	and.w	r2, r2, #15
 800311e:	f002 000f 	and.w	r0, r2, #15
 8003122:	799a      	ldrb	r2, [r3, #6]
 8003124:	f022 020f 	bic.w	r2, r2, #15
 8003128:	4611      	mov	r1, r2
 800312a:	4602      	mov	r2, r0
 800312c:	430a      	orrs	r2, r1
 800312e:	719a      	strb	r2, [r3, #6]
    write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6852      	ldr	r2, [r2, #4]
 800313a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800313e:	2110      	movs	r1, #16
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <_ZN10TMCStepper5iholdEh>:

void    TMCStepper::ihold(uint8_t B)        { SET_REG(ihold);       }
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	70fb      	strb	r3, [r7, #3]
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	b2d9      	uxtb	r1, r3
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	7913      	ldrb	r3, [r2, #4]
 8003164:	f361 0304 	bfi	r3, r1, #0, #5
 8003168:	7113      	strb	r3, [r2, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6852      	ldr	r2, [r2, #4]
 8003174:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003178:	2110      	movs	r1, #16
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <_ZN10TMCStepper4irunEh>:
void    TMCStepper::irun(uint8_t B)         { SET_REG(irun);        }
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	70fb      	strb	r3, [r7, #3]
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	b2d9      	uxtb	r1, r3
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	7953      	ldrb	r3, [r2, #5]
 800319e:	f361 0304 	bfi	r3, r1, #0, #5
 80031a2:	7153      	strb	r3, [r2, #5]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6852      	ldr	r2, [r2, #4]
 80031ae:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80031b2:	2110      	movs	r1, #16
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <_ZN10TMCStepper10iholddelayEh>:
void    TMCStepper::iholddelay(uint8_t B)   { SET_REG(iholddelay);  }
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	b2d9      	uxtb	r1, r3
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	7993      	ldrb	r3, [r2, #6]
 80031d8:	f361 0303 	bfi	r3, r1, #0, #4
 80031dc:	7193      	strb	r3, [r2, #6]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6852      	ldr	r2, [r2, #4]
 80031e8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80031ec:	2110      	movs	r1, #16
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <_ZN14TMC2160Stepper7PWMCONFEm>:
uint8_t TMC2130Stepper::freewheel()		{ GET_REG(freewheel);		}

uint32_t TMC2160Stepper::PWMCONF() {
	return PWMCONF_register.sr;
}
void TMC2160Stepper::PWMCONF(uint32_t input) {
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]
	PWMCONF_register.sr = input;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	write(PWMCONF_register.address, PWMCONF_register.sr);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 800321a:	2170      	movs	r1, #112	@ 0x70
 800321c:	4798      	blx	r3
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <_ZN14TMC2160Stepper13pwm_autoscaleEb>:

void TMC2160Stepper::pwm_ofs		( uint8_t B ) { PWMCONF_register.pwm_ofs = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_grad		( uint8_t B ) { PWMCONF_register.pwm_grad = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_freq		( uint8_t B ) { PWMCONF_register.pwm_freq = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_autoscale	( bool 	  B ) { PWMCONF_register.pwm_autoscale = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	460b      	mov	r3, r1
 8003230:	70fb      	strb	r3, [r7, #3]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	f892 3086 	ldrb.w	r3, [r2, #134]	@ 0x86
 8003238:	78f9      	ldrb	r1, [r7, #3]
 800323a:	f361 0382 	bfi	r3, r1, #2, #1
 800323e:	f882 3086 	strb.w	r3, [r2, #134]	@ 0x86
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 8003250:	2170      	movs	r1, #112	@ 0x70
 8003252:	4798      	blx	r3
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <_ZN14TMC2208Stepper13pwm_autoscaleEb>:
}

void TMC2208Stepper::pwm_ofs		( uint8_t B ) { PWMCONF_register.pwm_ofs = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_grad		( uint8_t B ) { PWMCONF_register.pwm_grad = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_freq		( uint8_t B ) { PWMCONF_register.pwm_freq = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_autoscale	( bool 	  B ) { PWMCONF_register.pwm_autoscale = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	70fb      	strb	r3, [r7, #3]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	f892 3031 	ldrb.w	r3, [r2, #49]	@ 0x31
 800326e:	78f9      	ldrb	r1, [r7, #3]
 8003270:	f361 0382 	bfi	r3, r1, #2, #1
 8003274:	f882 3031 	strb.w	r3, [r2, #49]	@ 0x31
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	f8d2 202f 	ldr.w	r2, [r2, #47]	@ 0x2f
 8003284:	2170      	movs	r1, #112	@ 0x70
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	4798      	blx	r3
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8003296:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
 80032aa:	f7ff fff2 	bl	8003292 <_ZSt23__is_constant_evaluatedv>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d004      	beq.n	80032be <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fa7d 	bl	80037b4 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 80032ba:	4603      	mov	r3, r0
 80032bc:	e004      	b.n	80032c8 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd f86e 	bl	80003a0 <strlen>
 80032c4:	4603      	mov	r3, r0
 80032c6:	bf00      	nop
      }
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_ZN10TMCStepperC1Ef>:
        int16_t cur_b();

		//Timer tmcTimer;

    protected:
        TMCStepper(float RS) : Rsense(RS) {};
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	ed87 0a00 	vstr	s0, [r7]
 80032dc:	4a10      	ldr	r2, [pc, #64]	@ (8003320 <_ZN10TMCStepperC1Ef+0x50>)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3304      	adds	r3, #4
 80032e6:	2100      	movs	r1, #0
 80032e8:	460a      	mov	r2, r1
 80032ea:	801a      	strh	r2, [r3, #0]
 80032ec:	460a      	mov	r2, r1
 80032ee:	709a      	strb	r2, [r3, #2]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	71da      	strb	r2, [r3, #7]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	811a      	strh	r2, [r3, #8]
 80032fc:	7a9a      	ldrb	r2, [r3, #10]
 80032fe:	f022 020f 	bic.w	r2, r2, #15
 8003302:	729a      	strb	r2, [r3, #10]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003310:	611a      	str	r2, [r3, #16]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	0802b18c 	.word	0x0802b18c

08003324 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>:

    if (link > chain_length)
      chain_length = link;
  }

TMC2130Stepper::TMC2130Stepper(const std::string& pinCS, float RS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
 8003324:	b590      	push	{r4, r7, lr}
 8003326:	b08f      	sub	sp, #60	@ 0x3c
 8003328:	af00      	add	r7, sp, #0
 800332a:	6178      	str	r0, [r7, #20]
 800332c:	6139      	str	r1, [r7, #16]
 800332e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003332:	60ba      	str	r2, [r7, #8]
 8003334:	607b      	str	r3, [r7, #4]
  TMCStepper(RS),
  _pinCS(pinCS, OUTPUT),
  link_index(link)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	ed97 0a03 	vldr	s0, [r7, #12]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff ffc7 	bl	80032d0 <_ZN10TMCStepperC1Ef>
 8003342:	4a5f      	ldr	r2, [pc, #380]	@ (80034c0 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x19c>)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	3315      	adds	r3, #21
 800334c:	2200      	movs	r2, #0
 800334e:	801a      	strh	r2, [r3, #0]
 8003350:	709a      	strb	r2, [r3, #2]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2200      	movs	r2, #0
 8003356:	831a      	strh	r2, [r3, #24]
 8003358:	7e9a      	ldrb	r2, [r3, #26]
 800335a:	f022 020f 	bic.w	r2, r2, #15
 800335e:	769a      	strb	r2, [r3, #26]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2200      	movs	r2, #0
 8003364:	76da      	strb	r2, [r3, #27]
 8003366:	2200      	movs	r2, #0
 8003368:	771a      	strb	r2, [r3, #28]
 800336a:	7f5a      	ldrb	r2, [r3, #29]
 800336c:	f022 020f 	bic.w	r2, r2, #15
 8003370:	775a      	strb	r2, [r3, #29]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2200      	movs	r2, #0
 8003376:	83da      	strh	r2, [r3, #30]
 8003378:	8c1a      	ldrh	r2, [r3, #32]
 800337a:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	841a      	strh	r2, [r3, #32]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2200      	movs	r2, #0
 8003388:	845a      	strh	r2, [r3, #34]	@ 0x22
 800338a:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800338e:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8003392:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 80033c4:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80033c8:	f022 0201 	bic.w	r2, r2, #1
 80033cc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	332d      	adds	r3, #45	@ 0x2d
 80033d4:	2200      	movs	r2, #0
 80033d6:	801a      	strh	r2, [r3, #0]
 80033d8:	709a      	strb	r2, [r3, #2]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	3330      	adds	r3, #48	@ 0x30
 80033de:	2100      	movs	r1, #0
 80033e0:	460a      	mov	r2, r1
 80033e2:	801a      	strh	r2, [r3, #0]
 80033e4:	460a      	mov	r2, r1
 80033e6:	709a      	strb	r2, [r3, #2]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	f892 3033 	ldrb.w	r3, [r2, #51]	@ 0x33
 80033ee:	f36f 0301 	bfc	r3, #0, #2
 80033f2:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
  _pinCS(pinCS, OUTPUT),
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	3334      	adds	r3, #52	@ 0x34
 80033fa:	2201      	movs	r2, #1
 80033fc:	6939      	ldr	r1, [r7, #16]
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 fbd6 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
  link_index(link)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2200      	movs	r2, #0
 8003408:	679a      	str	r2, [r3, #120]	@ 0x78
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8003410:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  {
	SoftwareSPI* SW_SPI_Obj = new SoftwareSPI(pinMOSI, pinMISO, pinSCK);
 8003414:	20c0      	movs	r0, #192	@ 0xc0
 8003416:	f025 f8cb 	bl	80285b0 <_Znwj>
 800341a:	4603      	mov	r3, r0
 800341c:	461c      	mov	r4, r3
 800341e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	4620      	mov	r0, r4
 8003426:	f7fe fede 	bl	80021e6 <_ZN11SoftwareSPIC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_>
 800342a:	637c      	str	r4, [r7, #52]	@ 0x34
    TMC_SW_SPI = SW_SPI_Obj;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003430:	679a      	str	r2, [r3, #120]	@ 0x78
    defaults();
 8003432:	6978      	ldr	r0, [r7, #20]
 8003434:	f000 f84a 	bl	80034cc <_ZN14TMC2130Stepper8defaultsEv>

    _pinEN = new Pin("PD_1", OUTPUT);
 8003438:	2040      	movs	r0, #64	@ 0x40
 800343a:	f025 f8b9 	bl	80285b0 <_Znwj>
 800343e:	4603      	mov	r3, r0
 8003440:	461c      	mov	r4, r3
 8003442:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003446:	4618      	mov	r0, r3
 8003448:	f025 f8c3 	bl	80285d2 <_ZNSaIcEC1Ev>
 800344c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8003450:	f107 0318 	add.w	r3, r7, #24
 8003454:	491b      	ldr	r1, [pc, #108]	@ (80034c4 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x1a0>)
 8003456:	4618      	mov	r0, r3
 8003458:	f000 f9cc 	bl	80037f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800345c:	f107 0318 	add.w	r3, r7, #24
 8003460:	2201      	movs	r2, #1
 8003462:	4619      	mov	r1, r3
 8003464:	4620      	mov	r0, r4
 8003466:	f001 fba3 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	675c      	str	r4, [r3, #116]	@ 0x74
 800346e:	f107 0318 	add.w	r3, r7, #24
 8003472:	4618      	mov	r0, r3
 8003474:	f025 f997 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003478:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800347c:	4618      	mov	r0, r3
 800347e:	f025 f8a9 	bl	80285d4 <_ZNSaIcED1Ev>
    _pinEN->set(0);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003486:	2100      	movs	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f001 fd3b 	bl	8004f04 <_ZN3Pin3setEb>

    switchCSpin(HIGH);
 800348e:	2101      	movs	r1, #1
 8003490:	6978      	ldr	r0, [r7, #20]
 8003492:	f000 f832 	bl	80034fa <_ZN14TMC2130Stepper11switchCSpinEb>
    TMC_SW_SPI->init();
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe fec4 	bl	8002228 <_ZN11SoftwareSPI4initEv>

    if (link > chain_length)
 80034a0:	4b09      	ldr	r3, [pc, #36]	@ (80034c8 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x1a4>)
 80034a2:	f993 3000 	ldrsb.w	r3, [r3]
 80034a6:	f997 204c 	ldrsb.w	r2, [r7, #76]	@ 0x4c
 80034aa:	429a      	cmp	r2, r3
 80034ac:	dd03      	ble.n	80034b6 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x192>
      chain_length = link;
 80034ae:	4a06      	ldr	r2, [pc, #24]	@ (80034c8 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x1a4>)
 80034b0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80034b4:	7013      	strb	r3, [r2, #0]
  }
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	4618      	mov	r0, r3
 80034ba:	373c      	adds	r7, #60	@ 0x3c
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd90      	pop	{r4, r7, pc}
 80034c0:	0802b150 	.word	0x0802b150
 80034c4:	0802a180 	.word	0x0802a180
 80034c8:	240000a4 	.word	0x240000a4

080034cc <_ZN14TMC2130Stepper8defaultsEv>:

void TMC2130Stepper::defaults() {
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  //MSLUT4_register.sr = ???;
  //MSLUT5_register.sr = ???;
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSTART_register.start_sin90 = 247;
  PWMCONF_register.sr = 0x00050480;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f442 6290 	orr.w	r2, r2, #1152	@ 0x480
 80034dc:	861a      	strh	r2, [r3, #48]	@ 0x30
 80034de:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80034e2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80034e6:	f042 0205 	orr.w	r2, r2, #5
 80034ea:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <_ZN14TMC2130Stepper11switchCSpinEb>:
void TMC2130Stepper::setSPISpeed(uint32_t speed) {
  spi_speed = speed;
}

__attribute__((weak))
void TMC2130Stepper::switchCSpin(bool state) {
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	460b      	mov	r3, r1
 8003504:	70fb      	strb	r3, [r7, #3]
  _pinCS.set(state);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3334      	adds	r3, #52	@ 0x34
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f001 fcf8 	bl	8004f04 <_ZN3Pin3setEb>
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <_ZN14TMC2130Stepper16beginTransactionEv>:

__attribute__((weak))
void TMC2130Stepper::beginTransaction() {
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if (TMC_SW_SPI == nullptr) {
    //SPI.beginTransaction(SPISettings(spi_speed, MSBFIRST, SPI_MODE3));
  }
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <_ZN14TMC2130Stepper14endTransactionEv>:
__attribute__((weak))
void TMC2130Stepper::endTransaction() {
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  if (TMC_SW_SPI == nullptr) {
    //SPI.endTransaction();
  }
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <_ZN14TMC2130Stepper8transferEh>:

__attribute__((weak))
uint8_t TMC2130Stepper::transfer(const uint8_t data) {
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	70fb      	strb	r3, [r7, #3]
  uint8_t out = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	73fb      	strb	r3, [r7, #15]
  if (TMC_SW_SPI != nullptr) {
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <_ZN14TMC2130Stepper8transferEh+0x2a>
    out = TMC_SW_SPI->transfer(data);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f7fe fe6d 	bl	8002244 <_ZN11SoftwareSPI8transferEh>
 800356a:	4603      	mov	r3, r0
 800356c:	73fb      	strb	r3, [r7, #15]
  }
  else {
    //out = SPI.transfer(data);
  }
  return out;
 800356e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_ZN14TMC2130Stepper18transferEmptyBytesEh>:

void TMC2130Stepper::transferEmptyBytes(const uint8_t n) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	70fb      	strb	r3, [r7, #3]
  for (uint8_t i = 0; i < n; i++) {
 8003584:	2300      	movs	r3, #0
 8003586:	73fb      	strb	r3, [r7, #15]
 8003588:	e006      	b.n	8003598 <_ZN14TMC2130Stepper18transferEmptyBytesEh+0x20>
    transfer(0x00);
 800358a:	2100      	movs	r1, #0
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ffd9 	bl	8003544 <_ZN14TMC2130Stepper8transferEh>
  for (uint8_t i = 0; i < n; i++) {
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	3301      	adds	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	429a      	cmp	r2, r3
 800359e:	d3f4      	bcc.n	800358a <_ZN14TMC2130Stepper18transferEmptyBytesEh+0x12>
  }
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <_ZN14TMC2130Stepper4readEh>:

__attribute__((weak))
uint32_t TMC2130Stepper::read(uint8_t addressByte) {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	70fb      	strb	r3, [r7, #3]
  uint32_t out = 0UL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60bb      	str	r3, [r7, #8]
  int8_t i = 1;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]

  beginTransaction();
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ffab 	bl	800351c <_ZN14TMC2130Stepper16beginTransactionEv>
  switchCSpin(LOW);
 80035c6:	2100      	movs	r1, #0
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff96 	bl	80034fa <_ZN14TMC2130Stepper11switchCSpinEb>
  transfer(addressByte);
 80035ce:	78fb      	ldrb	r3, [r7, #3]
 80035d0:	4619      	mov	r1, r3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ffb6 	bl	8003544 <_ZN14TMC2130Stepper8transferEh>
  // Clear SPI
  transferEmptyBytes(4);
 80035d8:	2104      	movs	r1, #4
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff ffcc 	bl	8003578 <_ZN14TMC2130Stepper18transferEmptyBytesEh>

  // Shift the written data to the correct driver in chain
  // Default link_index = -1 and no shifting happens
  while(i < link_index) {
 80035e0:	e009      	b.n	80035f6 <_ZN14TMC2130Stepper4readEh+0x4a>
    transferEmptyBytes(5);
 80035e2:	2105      	movs	r1, #5
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff ffc7 	bl	8003578 <_ZN14TMC2130Stepper18transferEmptyBytesEh>
    i++;
 80035ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	3301      	adds	r3, #1
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	73fb      	strb	r3, [r7, #15]
  while(i < link_index) {
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f993 307c 	ldrsb.w	r3, [r3, #124]	@ 0x7c
 80035fc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003600:	429a      	cmp	r2, r3
 8003602:	dbee      	blt.n	80035e2 <_ZN14TMC2130Stepper4readEh+0x36>
  }

  switchCSpin(HIGH);
 8003604:	2101      	movs	r1, #1
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff ff77 	bl	80034fa <_ZN14TMC2130Stepper11switchCSpinEb>
  switchCSpin(LOW);
 800360c:	2100      	movs	r1, #0
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff ff73 	bl	80034fa <_ZN14TMC2130Stepper11switchCSpinEb>

  // Shift data from target link into the last one...
  while(i < chain_length) {
 8003614:	e009      	b.n	800362a <_ZN14TMC2130Stepper4readEh+0x7e>
    transferEmptyBytes(5);
 8003616:	2105      	movs	r1, #5
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff ffad 	bl	8003578 <_ZN14TMC2130Stepper18transferEmptyBytesEh>
    i++;
 800361e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	3301      	adds	r3, #1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	73fb      	strb	r3, [r7, #15]
  while(i < chain_length) {
 800362a:	4b23      	ldr	r3, [pc, #140]	@ (80036b8 <_ZN14TMC2130Stepper4readEh+0x10c>)
 800362c:	f993 3000 	ldrsb.w	r3, [r3]
 8003630:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003634:	429a      	cmp	r2, r3
 8003636:	dbee      	blt.n	8003616 <_ZN14TMC2130Stepper4readEh+0x6a>
  }

  // ...and once more to MCU
  status_response = transfer(addressByte); // Send the address byte again
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	4619      	mov	r1, r3
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff81 	bl	8003544 <_ZN14TMC2130Stepper8transferEh>
 8003642:	4603      	mov	r3, r0
 8003644:	461a      	mov	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	751a      	strb	r2, [r3, #20]
  out  = transfer(0x00);
 800364a:	2100      	movs	r1, #0
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ff79 	bl	8003544 <_ZN14TMC2130Stepper8transferEh>
 8003652:	4603      	mov	r3, r0
 8003654:	60bb      	str	r3, [r7, #8]
  out <<= 8;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	60bb      	str	r3, [r7, #8]
  out |= transfer(0x00);
 800365c:	2100      	movs	r1, #0
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff ff70 	bl	8003544 <_ZN14TMC2130Stepper8transferEh>
 8003664:	4603      	mov	r3, r0
 8003666:	461a      	mov	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4313      	orrs	r3, r2
 800366c:	60bb      	str	r3, [r7, #8]
  out <<= 8;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	60bb      	str	r3, [r7, #8]
  out |= transfer(0x00);
 8003674:	2100      	movs	r1, #0
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff ff64 	bl	8003544 <_ZN14TMC2130Stepper8transferEh>
 800367c:	4603      	mov	r3, r0
 800367e:	461a      	mov	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4313      	orrs	r3, r2
 8003684:	60bb      	str	r3, [r7, #8]
  out <<= 8;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	60bb      	str	r3, [r7, #8]
  out |= transfer(0x00);
 800368c:	2100      	movs	r1, #0
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff ff58 	bl	8003544 <_ZN14TMC2130Stepper8transferEh>
 8003694:	4603      	mov	r3, r0
 8003696:	461a      	mov	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4313      	orrs	r3, r2
 800369c:	60bb      	str	r3, [r7, #8]

  endTransaction();
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff ff46 	bl	8003530 <_ZN14TMC2130Stepper14endTransactionEv>
  switchCSpin(HIGH);
 80036a4:	2101      	movs	r1, #1
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ff27 	bl	80034fa <_ZN14TMC2130Stepper11switchCSpinEb>
  return out;
 80036ac:	68bb      	ldr	r3, [r7, #8]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	240000a4 	.word	0x240000a4

080036bc <_ZN14TMC2130Stepper5writeEhm>:

__attribute__((weak))
void TMC2130Stepper::write(uint8_t addressByte, uint32_t config) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	460b      	mov	r3, r1
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	72fb      	strb	r3, [r7, #11]
  addressByte |= TMC_WRITE;
 80036ca:	7afb      	ldrb	r3, [r7, #11]
 80036cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80036d0:	72fb      	strb	r3, [r7, #11]
  int8_t i = 1;
 80036d2:	2301      	movs	r3, #1
 80036d4:	75fb      	strb	r3, [r7, #23]

  beginTransaction();
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f7ff ff20 	bl	800351c <_ZN14TMC2130Stepper16beginTransactionEv>
  switchCSpin(LOW);
 80036dc:	2100      	movs	r1, #0
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f7ff ff0b 	bl	80034fa <_ZN14TMC2130Stepper11switchCSpinEb>
  status_response = transfer(addressByte);
 80036e4:	7afb      	ldrb	r3, [r7, #11]
 80036e6:	4619      	mov	r1, r3
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f7ff ff2b 	bl	8003544 <_ZN14TMC2130Stepper8transferEh>
 80036ee:	4603      	mov	r3, r0
 80036f0:	461a      	mov	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	751a      	strb	r2, [r3, #20]
  transfer(config>>24);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	0e1b      	lsrs	r3, r3, #24
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	4619      	mov	r1, r3
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f7ff ff20 	bl	8003544 <_ZN14TMC2130Stepper8transferEh>
  transfer(config>>16);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	0c1b      	lsrs	r3, r3, #16
 8003708:	b2db      	uxtb	r3, r3
 800370a:	4619      	mov	r1, r3
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f7ff ff19 	bl	8003544 <_ZN14TMC2130Stepper8transferEh>
  transfer(config>>8);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	0a1b      	lsrs	r3, r3, #8
 8003716:	b2db      	uxtb	r3, r3
 8003718:	4619      	mov	r1, r3
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff ff12 	bl	8003544 <_ZN14TMC2130Stepper8transferEh>
  transfer(config);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	4619      	mov	r1, r3
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f7ff ff0c 	bl	8003544 <_ZN14TMC2130Stepper8transferEh>

  // Shift the written data to the correct driver in chain
  // Default link_index = -1 and no shifting happens
  while(i < link_index) {
 800372c:	e009      	b.n	8003742 <_ZN14TMC2130Stepper5writeEhm+0x86>
    transferEmptyBytes(5);
 800372e:	2105      	movs	r1, #5
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7ff ff21 	bl	8003578 <_ZN14TMC2130Stepper18transferEmptyBytesEh>
    i++;
 8003736:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	3301      	adds	r3, #1
 800373e:	b2db      	uxtb	r3, r3
 8003740:	75fb      	strb	r3, [r7, #23]
  while(i < link_index) {
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f993 307c 	ldrsb.w	r3, [r3, #124]	@ 0x7c
 8003748:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800374c:	429a      	cmp	r2, r3
 800374e:	dbee      	blt.n	800372e <_ZN14TMC2130Stepper5writeEhm+0x72>
  }

  endTransaction();
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f7ff feed 	bl	8003530 <_ZN14TMC2130Stepper14endTransactionEv>
  switchCSpin(HIGH);
 8003756:	2101      	movs	r1, #1
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f7ff fece 	bl	80034fa <_ZN14TMC2130Stepper11switchCSpinEb>
}
 800375e:	bf00      	nop
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <_ZN14TMC2130Stepper9TCOOLTHRSEm>:
bool TMC2130Stepper::dco()          { IOIN_t r{0}; r.sr = IOIN(); return r.dco; }
uint8_t TMC2130Stepper::version()   { IOIN_t r{0}; r.sr = IOIN(); return r.version; }
///////////////////////////////////////////////////////////////////////////////////////
// W: TCOOLTHRS
uint32_t TMC2130Stepper::TCOOLTHRS() { return TCOOLTHRS_register.sr; }
void TMC2130Stepper::TCOOLTHRS(uint32_t input) {
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]
  TCOOLTHRS_register.sr = input;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	b291      	uxth	r1, r2
 800377a:	2000      	movs	r0, #0
 800377c:	4301      	orrs	r1, r0
 800377e:	8319      	strh	r1, [r3, #24]
 8003780:	0c12      	lsrs	r2, r2, #16
 8003782:	f002 020f 	and.w	r2, r2, #15
 8003786:	f002 000f 	and.w	r0, r2, #15
 800378a:	7e9a      	ldrb	r2, [r3, #26]
 800378c:	f022 020f 	bic.w	r2, r2, #15
 8003790:	4611      	mov	r1, r2
 8003792:	4602      	mov	r2, r0
 8003794:	430a      	orrs	r2, r1
 8003796:	769a      	strb	r2, [r3, #26]
  write(TCOOLTHRS_register.address, TCOOLTHRS_register.sr);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6992      	ldr	r2, [r2, #24]
 80037a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80037a6:	2114      	movs	r1, #20
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	4798      	blx	r3
}
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80037c0:	e002      	b.n	80037c8 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	3301      	adds	r3, #1
 80037c6:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4413      	add	r3, r2
 80037ce:	2200      	movs	r2, #0
 80037d0:	72fa      	strb	r2, [r7, #11]
 80037d2:	f107 020b 	add.w	r2, r7, #11
 80037d6:	4611      	mov	r1, r2
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 f835 	bl	8003848 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 80037de:	4603      	mov	r3, r0
 80037e0:	f083 0301 	eor.w	r3, r3, #1
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1eb      	bne.n	80037c2 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 80037ea:	68fb      	ldr	r3, [r7, #12]
    }
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 80037f4:	b5b0      	push	{r4, r5, r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8003800:	68fc      	ldr	r4, [r7, #12]
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f024 ff13 	bl	802862e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8003808:	4603      	mov	r3, r0
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4619      	mov	r1, r3
 800380e:	4620      	mov	r0, r4
 8003810:	f025 f9bc 	bl	8028b8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d102      	bne.n	8003820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2c>
	  std::__throw_logic_error(__N("basic_string: "
 800381a:	480a      	ldr	r0, [pc, #40]	@ (8003844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
 800381c:	f024 fee1 	bl	80285e2 <_ZSt19__throw_logic_errorPKc>
				       "construction from null is not valid"));
	const _CharT* __end = __s + traits_type::length(__s);
 8003820:	68b8      	ldr	r0, [r7, #8]
 8003822:	f7ff fd3e 	bl	80032a2 <_ZNSt11char_traitsIcE6lengthEPKc>
 8003826:	4602      	mov	r2, r0
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4413      	add	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, forward_iterator_tag());
 800382e:	462b      	mov	r3, r5
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f83c 	bl	80038b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bdb0      	pop	{r4, r5, r7, pc}
 8003844:	0802a188 	.word	0x0802a188

08003848 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d004      	beq.n	80038a8 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f024 fef4 	bl	8028690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b088      	sub	sp, #32
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	68b8      	ldr	r0, [r7, #8]
 80038c4:	f000 f83b 	bl	800393e <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80038c8:	4603      	mov	r3, r0
 80038ca:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b0f      	cmp	r3, #15
 80038d0:	d911      	bls.n	80038f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 80038d2:	f107 0318 	add.w	r3, r7, #24
 80038d6:	2200      	movs	r2, #0
 80038d8:	4619      	mov	r1, r3
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f024 feb6 	bl	802864c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80038e0:	4603      	mov	r3, r0
 80038e2:	4619      	mov	r1, r3
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f024 fe9e 	bl	8028626 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	4619      	mov	r1, r3
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f024 fe9f 	bl	8028632 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 80038f4:	e005      	b.n	8003902 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x50>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 80038fa:	69f8      	ldr	r0, [r7, #28]
 80038fc:	f024 fe97 	bl	802862e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8003900:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 8003902:	f107 0314 	add.w	r3, r7, #20
 8003906:	68f9      	ldr	r1, [r7, #12]
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff ffb1 	bl	8003870 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f024 fe8b 	bl	802862a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8003914:	4603      	mov	r3, r0
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	4618      	mov	r0, r3
 800391c:	f024 ff18 	bl	8028750 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	4619      	mov	r1, r3
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f024 fe84 	bl	8028636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800392e:	f107 0314 	add.w	r3, r7, #20
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff ffab 	bl	800388e <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800393e:	b5b0      	push	{r4, r5, r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8003948:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800394a:	1d3b      	adds	r3, r7, #4
 800394c:	4618      	mov	r0, r3
 800394e:	f000 f80a 	bl	8003966 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8003952:	462a      	mov	r2, r5
 8003954:	6839      	ldr	r1, [r7, #0]
 8003956:	4620      	mov	r0, r4
 8003958:	f000 f80f 	bl	800397a <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800395c:	4603      	mov	r3, r0
    }
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bdb0      	pop	{r4, r5, r7, pc}

08003966 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1ad3      	subs	r3, r2, r3
    }
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <_ZN14TMC2160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"


TMC2160Stepper::TMC2160Stepper(const std::string& pinCS, float RS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af02      	add	r7, sp, #8
 800399e:	6178      	str	r0, [r7, #20]
 80039a0:	6139      	str	r1, [r7, #16]
 80039a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80039a6:	60ba      	str	r2, [r7, #8]
 80039a8:	607b      	str	r3, [r7, #4]
  TMC2130Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 80039aa:	6978      	ldr	r0, [r7, #20]
 80039ac:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	ed97 0a03 	vldr	s0, [r7, #12]
 80039be:	6939      	ldr	r1, [r7, #16]
 80039c0:	f7ff fcb0 	bl	8003324 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>
 80039c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003a04 <_ZN14TMC2160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x6c>)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	337d      	adds	r3, #125	@ 0x7d
 80039ce:	2200      	movs	r2, #0
 80039d0:	801a      	strh	r2, [r3, #0]
 80039d2:	709a      	strb	r2, [r3, #2]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	3380      	adds	r3, #128	@ 0x80
 80039d8:	2100      	movs	r1, #0
 80039da:	460a      	mov	r2, r1
 80039dc:	801a      	strh	r2, [r3, #0]
 80039de:	460a      	mov	r2, r1
 80039e0:	709a      	strb	r2, [r3, #2]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  { defaults(); }
 80039f2:	6978      	ldr	r0, [r7, #20]
 80039f4:	f000 f85a 	bl	8003aac <_ZN14TMC2160Stepper8defaultsEv>
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	0802b1c8 	.word	0x0802b1c8

08003a08 <_ZN14TMC2160Stepper5beginEv>:

TMC2160Stepper::TMC2160Stepper(const std::string& pinCS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
  TMC2130Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC2160Stepper::begin() {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  //set pins
  switchCSpin(HIGH);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2101      	movs	r1, #1
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fd70 	bl	80034fa <_ZN14TMC2130Stepper11switchCSpinEb>

  if (TMC_SW_SPI != nullptr) TMC_SW_SPI->init();
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d004      	beq.n	8003a2c <_ZN14TMC2160Stepper5beginEv+0x24>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fbfe 	bl	8002228 <_ZN11SoftwareSPI4initEv>

  GCONF(GCONF_register.sr);
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f3c3 2311 	ubfx	r3, r3, #8, #18
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f7ff fadd 	bl	8002ff8 <_ZN14TMC2130Stepper5GCONFEm>
  CHOPCONF(CHOPCONF_register.sr);
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8d3 3025 	ldr.w	r3, [r3, #37]	@ 0x25
 8003a46:	4619      	mov	r1, r3
 8003a48:	4610      	mov	r0, r2
 8003a4a:	f7fe ff13 	bl	8002874 <_ZN14TMC2130Stepper8CHOPCONFEm>
  COOLCONF(COOLCONF_register.sr);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a54:	0a12      	lsrs	r2, r2, #8
 8003a56:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	061b      	lsls	r3, r3, #24
 8003a60:	4313      	orrs	r3, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	f7ff f9a0 	bl	8002da8 <_ZN14TMC2130Stepper8COOLCONFEm>
  PWMCONF(PWMCONF_register.sr);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a6e:	4619      	mov	r1, r3
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff fbc2 	bl	80031fa <_ZN14TMC2160Stepper7PWMCONFEm>
  IHOLD_IRUN(IHOLD_IRUN_register.sr);
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a80:	4619      	mov	r1, r3
 8003a82:	4610      	mov	r0, r2
 8003a84:	f7ff fb3b 	bl	80030fe <_ZN10TMCStepper10IHOLD_IRUNEm>

  toff(8); //off_time(8);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2108      	movs	r1, #8
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fe ff07 	bl	80028a0 <_ZN14TMC2130Stepper4toffEh>
  tbl(1); //blank_time(24);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	332c      	adds	r3, #44	@ 0x2c
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	4798      	blx	r3
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <_ZN14TMC2160Stepper8defaultsEv>:

void TMC2160Stepper::defaults() {
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  SHORT_CONF_register.s2vs_level = 6;
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	f892 307d 	ldrb.w	r3, [r2, #125]	@ 0x7d
 8003aba:	2106      	movs	r1, #6
 8003abc:	f361 0303 	bfi	r3, r1, #0, #4
 8003ac0:	f882 307d 	strb.w	r3, [r2, #125]	@ 0x7d
  SHORT_CONF_register.s2g_level = 6;
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	f892 307e 	ldrb.w	r3, [r2, #126]	@ 0x7e
 8003aca:	2106      	movs	r1, #6
 8003acc:	f361 0303 	bfi	r3, r1, #0, #4
 8003ad0:	f882 307e 	strb.w	r3, [r2, #126]	@ 0x7e
  SHORT_CONF_register.shortfilter = 0b01;
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	f892 307f 	ldrb.w	r3, [r2, #127]	@ 0x7f
 8003ada:	2101      	movs	r1, #1
 8003adc:	f361 0301 	bfi	r3, r1, #0, #2
 8003ae0:	f882 307f 	strb.w	r3, [r2, #127]	@ 0x7f
  SHORT_CONF_register.shortdelay = 0;
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	f892 307f 	ldrb.w	r3, [r2, #127]	@ 0x7f
 8003aea:	f36f 0382 	bfc	r3, #2, #1
 8003aee:	f882 307f 	strb.w	r3, [r2, #127]	@ 0x7f
  DRV_CONF_register.bbmtime = 0;
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	f892 3080 	ldrb.w	r3, [r2, #128]	@ 0x80
 8003af8:	f36f 0304 	bfc	r3, #0, #5
 8003afc:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  DRV_CONF_register.bbmclks = 4;
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	f892 3081 	ldrb.w	r3, [r2, #129]	@ 0x81
 8003b06:	2104      	movs	r1, #4
 8003b08:	f361 0303 	bfi	r3, r1, #0, #4
 8003b0c:	f882 3081 	strb.w	r3, [r2, #129]	@ 0x81
  DRV_CONF_register.otselect = 0b00;
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	f892 3082 	ldrb.w	r3, [r2, #130]	@ 0x82
 8003b16:	f36f 0301 	bfc	r3, #0, #2
 8003b1a:	f882 3082 	strb.w	r3, [r2, #130]	@ 0x82
  DRV_CONF_register.drvstrength = 0b10;
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	f892 3082 	ldrb.w	r3, [r2, #130]	@ 0x82
 8003b24:	2102      	movs	r1, #2
 8003b26:	f361 0383 	bfi	r3, r1, #2, #2
 8003b2a:	f882 3082 	strb.w	r3, [r2, #130]	@ 0x82
  DRV_CONF_register.filt_isense = 0b00;
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	f892 3082 	ldrb.w	r3, [r2, #130]	@ 0x82
 8003b34:	f36f 1305 	bfc	r3, #4, #2
 8003b38:	f882 3082 	strb.w	r3, [r2, #130]	@ 0x82
  TPOWERDOWN_register.sr = 10;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	220a      	movs	r2, #10
 8003b40:	71da      	strb	r2, [r3, #7]
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  CHOPCONF_register.sr = 0x10410150;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8003b4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f042 0201 	orr.w	r2, r2, #1
 8003b54:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f042 0241 	orr.w	r2, r2, #65	@ 0x41
 8003b5e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8003b62:	2200      	movs	r2, #0
 8003b64:	f042 0210 	orr.w	r2, r2, #16
 8003b68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  PWMCONF_register.sr = 0xC40C001E;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a04      	ldr	r2, [pc, #16]	@ (8003b80 <_ZN14TMC2160Stepper8defaultsEv+0xd4>)
 8003b70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	c40c001e 	.word	0xc40c001e

08003b84 <_ZN14TMC2160Stepper11rms_currentEt>:
                 32 * 256 * sqrt(2) * I_rms * R_sense    |
  GLOBALSCALER = ------------------------------------    |
                           (CS + 1) * V_fs               | V_fs = 0.325

*/
void TMC2160Stepper::rms_current(uint16_t mA) {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	@ 0x28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	817b      	strh	r3, [r7, #10]
  constexpr uint32_t V_fs = 325; // 0.325 * 1000
 8003b90:	f240 1345 	movw	r3, #325	@ 0x145
 8003b94:	61fb      	str	r3, [r7, #28]
  uint8_t CS = 31;
 8003b96:	231f      	movs	r3, #31
 8003b98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t scaler = 0; // = 256
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	623b      	str	r3, [r7, #32]

  const uint16_t RS_scaled = Rsense * 0xFFFF; // Scale to 16b
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ba6:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8003c7c <_ZN14TMC2160Stepper11rms_currentEt+0xf8>
 8003baa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bb2:	ee17 3a90 	vmov	r3, s15
 8003bb6:	837b      	strh	r3, [r7, #26]
  uint32_t numerator = 11585; // 32 * 256 * sqrt(2)
 8003bb8:	f642 5341 	movw	r3, #11585	@ 0x2d41
 8003bbc:	617b      	str	r3, [r7, #20]
  numerator *= RS_scaled;
 8003bbe:	8b7a      	ldrh	r2, [r7, #26]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	fb02 f303 	mul.w	r3, r2, r3
 8003bc6:	617b      	str	r3, [r7, #20]
  numerator >>= 8;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	617b      	str	r3, [r7, #20]
  numerator *= mA;
 8003bce:	897a      	ldrh	r2, [r7, #10]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	617b      	str	r3, [r7, #20]

  do {
    uint32_t denominator = V_fs * 0xFFFF >> 8;
 8003bd8:	4b29      	ldr	r3, [pc, #164]	@ (8003c80 <_ZN14TMC2160Stepper11rms_currentEt+0xfc>)
 8003bda:	613b      	str	r3, [r7, #16]
    denominator *= CS+1;
 8003bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003be0:	3301      	adds	r3, #1
 8003be2:	461a      	mov	r2, r3
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	613b      	str	r3, [r7, #16]
    scaler = numerator / denominator;
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	623b      	str	r3, [r7, #32]

    if (scaler > 255) scaler = 0; // Maximum
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	2bff      	cmp	r3, #255	@ 0xff
 8003bfa:	d902      	bls.n	8003c02 <_ZN14TMC2160Stepper11rms_currentEt+0x7e>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	623b      	str	r3, [r7, #32]
 8003c00:	e007      	b.n	8003c12 <_ZN14TMC2160Stepper11rms_currentEt+0x8e>
    else if (scaler < 128) CS--;  // Try again with smaller CS
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c06:	d804      	bhi.n	8003c12 <_ZN14TMC2160Stepper11rms_currentEt+0x8e>
 8003c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while(0 < scaler && scaler < 128);
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <_ZN14TMC2160Stepper11rms_currentEt+0x9a>
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c1c:	d9dc      	bls.n	8003bd8 <_ZN14TMC2160Stepper11rms_currentEt+0x54>


  if (CS > 31)
 8003c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c22:	2b1f      	cmp	r3, #31
 8003c24:	d902      	bls.n	8003c2c <_ZN14TMC2160Stepper11rms_currentEt+0xa8>
    CS = 31;
 8003c26:	231f      	movs	r3, #31
 8003c28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  GLOBAL_SCALER(scaler);
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	4619      	mov	r1, r3
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 f826 	bl	8003c84 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>
  irun(CS);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff faa0 	bl	8003186 <_ZN10TMCStepper4irunEh>
  ihold(CS*holdMultiplier);
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c62:	edc7 7a01 	vstr	s15, [r7, #4]
 8003c66:	793b      	ldrb	r3, [r7, #4]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f7ff fa6d 	bl	800314c <_ZN10TMCStepper5iholdEh>
}
 8003c72:	bf00      	nop
 8003c74:	3728      	adds	r7, #40	@ 0x28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	477fff00 	.word	0x477fff00
 8003c80:	000144fe 	.word	0x000144fe

08003c84 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>:
bool    TMC2160Stepper::dco_cfg6()       { TMC2160_n::IOIN_t r{0}; r.sr = IOIN(); return r.dco_cfg6; }
uint8_t TMC2160Stepper::version()        { TMC2160_n::IOIN_t r{0}; r.sr = IOIN(); return r.version; }

// W: GLOBAL_SCALER
uint8_t TMC2160Stepper::GLOBAL_SCALER() { return GLOBAL_SCALER_register.sr; }
void TMC2160Stepper::GLOBAL_SCALER(uint8_t input) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	70fb      	strb	r3, [r7, #3]
  GLOBAL_SCALER_register.sr = input;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
  write(GLOBAL_SCALER_register.address, GLOBAL_SCALER_register.sr);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	f892 2083 	ldrb.w	r2, [r2, #131]	@ 0x83
 8003ca6:	210b      	movs	r1, #11
 8003ca8:	4798      	blx	r3
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

// Protected
// addr needed for TMC2209
TMC2208Stepper::TMC2208Stepper(std::string SWRXpin, std::string SWTXpin, float RS, uint8_t addr) :
 8003cb4:	b590      	push	{r4, r7, lr}
 8003cb6:	b095      	sub	sp, #84	@ 0x54
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6178      	str	r0, [r7, #20]
 8003cbc:	6139      	str	r1, [r7, #16]
 8003cbe:	60fa      	str	r2, [r7, #12]
 8003cc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cc4:	71fb      	strb	r3, [r7, #7]
    SWRXpin(SWRXpin),
    SWTXpin(SWRXpin),
    TMCStepper(RS),
    //RXTX_pin(SW_RX_pin == SW_TX_pin ? SW_RX_pin : 0),
    slave_address(addr)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	ed97 0a02 	vldr	s0, [r7, #8]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff faff 	bl	80032d0 <_ZN10TMCStepperC1Ef>
 8003cd2:	4a47      	ldr	r2, [pc, #284]	@ (8003df0 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x13c>)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	831a      	strh	r2, [r3, #24]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	4a44      	ldr	r2, [pc, #272]	@ (8003df4 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x140>)
 8003ce2:	61da      	str	r2, [r3, #28]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2020 	strb.w	r2, [r3, #32]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8003cf4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8003cf8:	f022 0203 	bic.w	r2, r2, #3
 8003cfc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8003d08:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8003d0c:	f022 020f 	bic.w	r2, r2, #15
 8003d10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    SWTXpin(SWRXpin),
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	3334      	adds	r3, #52	@ 0x34
 8003d74:	6939      	ldr	r1, [r7, #16]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f024 ff25 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SWRXpin(SWRXpin),
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	334c      	adds	r3, #76	@ 0x4c
 8003d80:	6939      	ldr	r1, [r7, #16]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f024 ff1f 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    slave_address(addr)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	79fa      	ldrb	r2, [r7, #7]
 8003d8c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    {
        SoftwareSerial *SWSerialObj = new SoftwareSerial(SWRXpin, SWTXpin);
 8003d90:	209c      	movs	r0, #156	@ 0x9c
 8003d92:	f024 fc0d 	bl	80285b0 <_Znwj>
 8003d96:	4603      	mov	r3, r0
 8003d98:	461c      	mov	r4, r3
 8003d9a:	f107 031c 	add.w	r3, r7, #28
 8003d9e:	6939      	ldr	r1, [r7, #16]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f024 ff10 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003da6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003daa:	68f9      	ldr	r1, [r7, #12]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f024 ff0a 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003db2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003db6:	f107 031c 	add.w	r3, r7, #28
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f7fe fac2 	bl	8002346 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8003dc2:	64fc      	str	r4, [r7, #76]	@ 0x4c
 8003dc4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f024 fcec 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dce:	f107 031c 	add.w	r3, r7, #28
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f024 fce7 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        SWSerial = SWSerialObj;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ddc:	615a      	str	r2, [r3, #20]
        defaults();
 8003dde:	6978      	ldr	r0, [r7, #20]
 8003de0:	f000 f832 	bl	8003e48 <_ZN14TMC2208Stepper8defaultsEv>
    }
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	4618      	mov	r0, r3
 8003de8:	3754      	adds	r7, #84	@ 0x54
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd90      	pop	{r4, r7, pc}
 8003dee:	bf00      	nop
 8003df0:	0802b114 	.word	0x0802b114
 8003df4:	3de147ae 	.word	0x3de147ae

08003df8 <_ZN14TMC2208Stepper11beginSerialEm>:


void TMC2208Stepper::beginSerial(uint32_t baudrate) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]

    SWSerial->begin(baudrate);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	4611      	mov	r1, r2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe fb28 	bl	8002460 <_ZN14SoftwareSerial5beginEi>
}
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <_ZN14TMC2208Stepper5beginEv>:


void TMC2208Stepper::begin() {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

    beginSerial(19600);
 8003e20:	f644 4190 	movw	r1, #19600	@ 0x4c90
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff ffe7 	bl	8003df8 <_ZN14TMC2208Stepper11beginSerialEm>
    pdn_disable(true);
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff f92c 	bl	800308a <_ZN14TMC2208Stepper11pdn_disableEb>
    mstep_reg_select(true);
 8003e32:	2101      	movs	r1, #1
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff f945 	bl	80030c4 <_ZN14TMC2208Stepper16mstep_reg_selectEb>
    //Wait to initialize
    HAL_Delay(replyDelay);
 8003e3a:	2002      	movs	r0, #2
 8003e3c:	f017 fe96 	bl	801bb6c <HAL_Delay>

}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <_ZN14TMC2208Stepper8defaultsEv>:

void TMC2208Stepper::defaults() {
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
    GCONF_register.i_scale_analog = 1;
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.internal_rsense = 0; // OTP
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003e64:	f36f 0341 	bfc	r3, #1, #1
 8003e68:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.en_spreadcycle = 0; // OTP
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003e72:	f36f 0382 	bfc	r3, #2, #1
 8003e76:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.multistep_filt = 1; // OTP
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	f892 3022 	ldrb.w	r3, [r2, #34]	@ 0x22
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22
    IHOLD_IRUN_register.iholddelay = 1; // OTP
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	7993      	ldrb	r3, [r2, #6]
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	f361 0303 	bfi	r3, r1, #0, #4
 8003e92:	7193      	strb	r3, [r2, #6]
    TPOWERDOWN_register.sr = 20;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2214      	movs	r2, #20
 8003e98:	71da      	strb	r2, [r3, #7]
    CHOPCONF_register.sr = 0x10000053;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8003ea2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f042 0210 	orr.w	r2, r2, #16
 8003eb8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    PWMCONF_register.sr = 0xC10D0024;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 8003ec4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f042 020d 	orr.w	r2, r2, #13
 8003ed4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f062 023e 	orn	r2, r2, #62	@ 0x3e
 8003ede:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  //MSLUT4_register.sr = ???;
  //MSLUT5_register.sr = ???;
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSTART_register.start_sin90 = 247;
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <_ZN14TMC2208Stepper7calcCRCEPhh>:
    PWMCONF(PWMCONF_register.sr);
}

bool TMC2208Stepper::isEnabled() { return !enn() && toff(); }

uint8_t TMC2208Stepper::calcCRC(uint8_t datagram[], uint8_t len) {
 8003eee:	b480      	push	{r7}
 8003ef0:	b087      	sub	sp, #28
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	71fb      	strb	r3, [r7, #7]
    uint8_t crc = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < len; i++) {
 8003f00:	2300      	movs	r3, #0
 8003f02:	75bb      	strb	r3, [r7, #22]
 8003f04:	e027      	b.n	8003f56 <_ZN14TMC2208Stepper7calcCRCEPhh+0x68>
        uint8_t currentByte = datagram[i];
 8003f06:	7dbb      	ldrb	r3, [r7, #22]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	757b      	strb	r3, [r7, #21]
        for (uint8_t j = 0; j < 8; j++) {
 8003f10:	2300      	movs	r3, #0
 8003f12:	753b      	strb	r3, [r7, #20]
 8003f14:	e019      	b.n	8003f4a <_ZN14TMC2208Stepper7calcCRCEPhh+0x5c>
            if ((crc >> 7) ^ (currentByte & 0x01)) {
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	09db      	lsrs	r3, r3, #7
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	7d7b      	ldrb	r3, [r7, #21]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d007      	beq.n	8003f38 <_ZN14TMC2208Stepper7calcCRCEPhh+0x4a>
                crc = (crc << 1) ^ 0x07;
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	b25b      	sxtb	r3, r3
 8003f2e:	f083 0307 	eor.w	r3, r3, #7
 8003f32:	b25b      	sxtb	r3, r3
 8003f34:	75fb      	strb	r3, [r7, #23]
 8003f36:	e002      	b.n	8003f3e <_ZN14TMC2208Stepper7calcCRCEPhh+0x50>
            } else {
                crc = (crc << 1);
 8003f38:	7dfb      	ldrb	r3, [r7, #23]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	75fb      	strb	r3, [r7, #23]
            }
            crc &= 0xff;
            currentByte = currentByte >> 1;
 8003f3e:	7d7b      	ldrb	r3, [r7, #21]
 8003f40:	085b      	lsrs	r3, r3, #1
 8003f42:	757b      	strb	r3, [r7, #21]
        for (uint8_t j = 0; j < 8; j++) {
 8003f44:	7d3b      	ldrb	r3, [r7, #20]
 8003f46:	3301      	adds	r3, #1
 8003f48:	753b      	strb	r3, [r7, #20]
 8003f4a:	7d3b      	ldrb	r3, [r7, #20]
 8003f4c:	2b07      	cmp	r3, #7
 8003f4e:	d9e2      	bls.n	8003f16 <_ZN14TMC2208Stepper7calcCRCEPhh+0x28>
    for (uint8_t i = 0; i < len; i++) {
 8003f50:	7dbb      	ldrb	r3, [r7, #22]
 8003f52:	3301      	adds	r3, #1
 8003f54:	75bb      	strb	r3, [r7, #22]
 8003f56:	7dba      	ldrb	r2, [r7, #22]
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d3d3      	bcc.n	8003f06 <_ZN14TMC2208Stepper7calcCRCEPhh+0x18>
        }
    }
    return crc;
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	371c      	adds	r7, #28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <_ZN14TMC2208Stepper9availableEv>:

__attribute__((weak))
int TMC2208Stepper::available() {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
    int out = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]

	out = SWSerial->available();
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fe fbeb 	bl	8002758 <_ZN14SoftwareSerial9availableEv>
 8003f82:	60f8      	str	r0, [r7, #12]

    return out;
 8003f84:	68fb      	ldr	r3, [r7, #12]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <_ZN14TMC2208Stepper21preWriteCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::preWriteCommunication() {
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
    //this->debug1->write(1);
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <_ZN14TMC2208Stepper20preReadCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::preReadCommunication() {
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]

	SWSerial->listen();	
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe fabb 	bl	800252a <_ZN14SoftwareSerial6listenEv>
    //this->debug2->write(1);				
}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <_ZN14TMC2208Stepper22postWriteCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::postWriteCommunication() {
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
    //this->debug1->write(0);
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <_ZN14TMC2208Stepper21postReadCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::postReadCommunication() {
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
    //this->debug2->write(0);
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <_ZN14TMC2208Stepper11serial_readEv>:


__attribute__((weak))
int16_t TMC2208Stepper::serial_read() {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
    int16_t out = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	81fb      	strh	r3, [r7, #14]
     
    out = SWSerial->read();
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fe fbf7 	bl	80027e8 <_ZN14SoftwareSerial4readEv>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	81fb      	strh	r3, [r7, #14]

	return out;
 8003ffe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <_ZN14TMC2208Stepper12serial_writeEh>:

__attribute__((weak))
uint8_t TMC2208Stepper::serial_write(const uint8_t data) {
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	70fb      	strb	r3, [r7, #3]
    int out = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]

    SWSerial->write(data);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	78fa      	ldrb	r2, [r7, #3]
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fbaa 	bl	800277c <_ZN14SoftwareSerial5writeEi>

    return out;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	b2db      	uxtb	r3, r3
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <_ZN14TMC2208Stepper5writeEhm>:


void TMC2208Stepper::write(uint8_t addr, uint32_t regVal) {
 8004034:	b590      	push	{r4, r7, lr}
 8004036:	b089      	sub	sp, #36	@ 0x24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	460b      	mov	r3, r1
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	72fb      	strb	r3, [r7, #11]
    uint8_t len = 7;
 8004042:	2307      	movs	r3, #7
 8004044:	77bb      	strb	r3, [r7, #30]
    addr |= TMC_WRITE;
 8004046:	7afb      	ldrb	r3, [r7, #11]
 8004048:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800404c:	72fb      	strb	r3, [r7, #11]
    uint8_t datagram[] = {TMC2208_SYNC, slave_address, addr, (uint8_t)(regVal>>24), (uint8_t)(regVal>>16), (uint8_t)(regVal>>8), (uint8_t)(regVal>>0), 0x00};
 800404e:	f107 0314 	add.w	r3, r7, #20
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	605a      	str	r2, [r3, #4]
 8004058:	2305      	movs	r3, #5
 800405a:	753b      	strb	r3, [r7, #20]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8004062:	757b      	strb	r3, [r7, #21]
 8004064:	7afb      	ldrb	r3, [r7, #11]
 8004066:	75bb      	strb	r3, [r7, #22]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	0e1b      	lsrs	r3, r3, #24
 800406c:	b2db      	uxtb	r3, r3
 800406e:	75fb      	strb	r3, [r7, #23]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	0c1b      	lsrs	r3, r3, #16
 8004074:	b2db      	uxtb	r3, r3
 8004076:	763b      	strb	r3, [r7, #24]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	0a1b      	lsrs	r3, r3, #8
 800407c:	b2db      	uxtb	r3, r3
 800407e:	767b      	strb	r3, [r7, #25]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	76bb      	strb	r3, [r7, #26]
	
    datagram[len] = calcCRC(datagram, len);
 8004086:	7fbc      	ldrb	r4, [r7, #30]
 8004088:	7fba      	ldrb	r2, [r7, #30]
 800408a:	f107 0314 	add.w	r3, r7, #20
 800408e:	4619      	mov	r1, r3
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f7ff ff2c 	bl	8003eee <_ZN14TMC2208Stepper7calcCRCEPhh>
 8004096:	4603      	mov	r3, r0
 8004098:	461a      	mov	r2, r3
 800409a:	f104 0320 	add.w	r3, r4, #32
 800409e:	443b      	add	r3, r7
 80040a0:	f803 2c0c 	strb.w	r2, [r3, #-12]
	
	//printf("write datagram = %x, %x, %x, %x, %x, %x, %x, %x\n", datagram[0], datagram[1], datagram[2], datagram[3], datagram[4], datagram[5], datagram[6], datagram[7]);
    
    preWriteCommunication();
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f7ff ff72 	bl	8003f8e <_ZN14TMC2208Stepper21preWriteCommunicationEv>

    for(uint8_t i=0; i<=len; i++) {
 80040aa:	2300      	movs	r3, #0
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e013      	b.n	80040d8 <_ZN14TMC2208Stepper5writeEhm+0xa4>
        bytesWritten += serial_write(datagram[i]);
 80040b0:	7ffb      	ldrb	r3, [r7, #31]
 80040b2:	3320      	adds	r3, #32
 80040b4:	443b      	add	r3, r7
 80040b6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80040ba:	4619      	mov	r1, r3
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f7ff ffa4 	bl	800400a <_ZN14TMC2208Stepper12serial_writeEh>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461a      	mov	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8b1b      	ldrh	r3, [r3, #24]
 80040ca:	4413      	add	r3, r2
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	831a      	strh	r2, [r3, #24]
    for(uint8_t i=0; i<=len; i++) {
 80040d2:	7ffb      	ldrb	r3, [r7, #31]
 80040d4:	3301      	adds	r3, #1
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	7ffa      	ldrb	r2, [r7, #31]
 80040da:	7fbb      	ldrb	r3, [r7, #30]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d9e7      	bls.n	80040b0 <_ZN14TMC2208Stepper5writeEhm+0x7c>
    }
    postWriteCommunication();
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f7ff ff6b 	bl	8003fbc <_ZN14TMC2208Stepper22postWriteCommunicationEv>

    //delay(replyDelay);
    //ThisThread::sleep_for(150);
    HAL_Delay(5);
 80040e6:	2005      	movs	r0, #5
 80040e8:	f017 fd40 	bl	801bb6c <HAL_Delay>
}
 80040ec:	bf00      	nop
 80040ee:	3724      	adds	r7, #36	@ 0x24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd90      	pop	{r4, r7, pc}

080040f4 <_ZN14TMC2208Stepper13_sendDatagramEPhht>:

uint64_t TMC2208Stepper::_sendDatagram(uint8_t datagram[], const uint8_t len, uint16_t timeout) {
 80040f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f8:	b092      	sub	sp, #72	@ 0x48
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6178      	str	r0, [r7, #20]
 80040fe:	6139      	str	r1, [r7, #16]
 8004100:	4611      	mov	r1, r2
 8004102:	461a      	mov	r2, r3
 8004104:	460b      	mov	r3, r1
 8004106:	73fb      	strb	r3, [r7, #15]
 8004108:	4613      	mov	r3, r2
 800410a:	81bb      	strh	r3, [r7, #12]
	
    while (available() > 0) serial_read(); // Flush
 800410c:	e002      	b.n	8004114 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x20>
 800410e:	6978      	ldr	r0, [r7, #20]
 8004110:	f7ff ff68 	bl	8003fe4 <_ZN14TMC2208Stepper11serial_readEv>
 8004114:	6978      	ldr	r0, [r7, #20]
 8004116:	f7ff ff29 	bl	8003f6c <_ZN14TMC2208Stepper9availableEv>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	bfcc      	ite	gt
 8004120:	2301      	movgt	r3, #1
 8004122:	2300      	movle	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f1      	bne.n	800410e <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1a>

    preWriteCommunication();
 800412a:	6978      	ldr	r0, [r7, #20]
 800412c:	f7ff ff2f 	bl	8003f8e <_ZN14TMC2208Stepper21preWriteCommunicationEv>
	for(int i=0; i<=len; i++)
 8004130:	2300      	movs	r3, #0
 8004132:	647b      	str	r3, [r7, #68]	@ 0x44
 8004134:	e00a      	b.n	800414c <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x58>
    {   
        serial_write(datagram[i]);
 8004136:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4413      	add	r3, r2
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	4619      	mov	r1, r3
 8004140:	6978      	ldr	r0, [r7, #20]
 8004142:	f7ff ff62 	bl	800400a <_ZN14TMC2208Stepper12serial_writeEh>
	for(int i=0; i<=len; i++)
 8004146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004148:	3301      	adds	r3, #1
 800414a:	647b      	str	r3, [r7, #68]	@ 0x44
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004150:	429a      	cmp	r2, r3
 8004152:	ddf0      	ble.n	8004136 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x42>
    }
	//delay(replyDelay);
    //ThisThread::sleep_for(replyDelay);
    postWriteCommunication();
 8004154:	6978      	ldr	r0, [r7, #20]
 8004156:	f7ff ff31 	bl	8003fbc <_ZN14TMC2208Stepper22postWriteCommunicationEv>

	// scan for the rx frame and read it
	uint32_t ms = HAL_GetTick();
 800415a:	f017 fcfb 	bl	801bb54 <HAL_GetTick>
 800415e:	6438      	str	r0, [r7, #64]	@ 0x40
	uint32_t sync_target = (static_cast<uint32_t>(datagram[0])<<16) | 0xFF00 | datagram[2];
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	3202      	adds	r2, #2
 800416a:	7812      	ldrb	r2, [r2, #0]
 800416c:	4313      	orrs	r3, r2
 800416e:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 8004172:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t sync = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	63fb      	str	r3, [r7, #60]	@ 0x3c

	do {
		uint32_t ms2 = HAL_GetTick();
 8004178:	f017 fcec 	bl	801bb54 <HAL_GetTick>
 800417c:	6278      	str	r0, [r7, #36]	@ 0x24
		if (ms2 != ms) {
 800417e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004180:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004182:	429a      	cmp	r2, r3
 8004184:	d004      	beq.n	8004190 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x9c>
			// 1ms tick
			ms = ms2;
 8004186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004188:	643b      	str	r3, [r7, #64]	@ 0x40
			timeout--;
 800418a:	89bb      	ldrh	r3, [r7, #12]
 800418c:	3b01      	subs	r3, #1
 800418e:	81bb      	strh	r3, [r7, #12]
		}
		if (!timeout) return 0;
 8004190:	89bb      	ldrh	r3, [r7, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d104      	bne.n	80041a0 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xac>
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	e080      	b.n	80042a2 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1ae>

		int16_t res = serial_read();
 80041a0:	6978      	ldr	r0, [r7, #20]
 80041a2:	f7ff ff1f 	bl	8003fe4 <_ZN14TMC2208Stepper11serial_readEv>
 80041a6:	4603      	mov	r3, r0
 80041a8:	847b      	strh	r3, [r7, #34]	@ 0x22
		if (res < 0) continue;
 80041aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	db0c      	blt.n	80041cc <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xd8>

		sync <<= 8;
 80041b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sync |= res & 0xFF;
 80041b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041be:	4313      	orrs	r3, r2
 80041c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sync &= 0xFFFFFF;
 80041c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041ca:	e000      	b.n	80041ce <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xda>
		if (res < 0) continue;
 80041cc:	bf00      	nop

	} while (sync != sync_target);
 80041ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d1d0      	bne.n	8004178 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x84>

	uint64_t out = sync;
 80041d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d8:	2200      	movs	r2, #0
 80041da:	603b      	str	r3, [r7, #0]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	ms = HAL_GetTick();
 80041e6:	f017 fcb5 	bl	801bb54 <HAL_GetTick>
 80041ea:	6438      	str	r0, [r7, #64]	@ 0x40
	timeout = this->abort_window;
 80041ec:	2305      	movs	r3, #5
 80041ee:	81bb      	strh	r3, [r7, #12]
		 
	for(uint8_t i=0; i<5;) {
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80041f6:	e03f      	b.n	8004278 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x184>
		uint32_t ms2 = HAL_GetTick();
 80041f8:	f017 fcac 	bl	801bb54 <HAL_GetTick>
 80041fc:	61f8      	str	r0, [r7, #28]
		if (ms2 != ms) {
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004202:	429a      	cmp	r2, r3
 8004204:	d004      	beq.n	8004210 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x11c>
			// 1ms tick
			ms = ms2;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	643b      	str	r3, [r7, #64]	@ 0x40
			timeout--;
 800420a:	89bb      	ldrh	r3, [r7, #12]
 800420c:	3b01      	subs	r3, #1
 800420e:	81bb      	strh	r3, [r7, #12]
		}
		if (!timeout) return 0;
 8004210:	89bb      	ldrh	r3, [r7, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d104      	bne.n	8004220 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x12c>
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	e040      	b.n	80042a2 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1ae>

		int16_t res = serial_read();
 8004220:	6978      	ldr	r0, [r7, #20]
 8004222:	f7ff fedf 	bl	8003fe4 <_ZN14TMC2208Stepper11serial_readEv>
 8004226:	4603      	mov	r3, r0
 8004228:	837b      	strh	r3, [r7, #26]
		if (res < 0) continue;
 800422a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800422e:	2b00      	cmp	r3, #0
 8004230:	db21      	blt.n	8004276 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x182>

		out <<= 8;
 8004232:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	020b      	lsls	r3, r1, #8
 8004240:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004244:	0202      	lsls	r2, r0, #8
 8004246:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		out |= res & 0xFF;
 800424a:	8b7b      	ldrh	r3, [r7, #26]
 800424c:	b29b      	uxth	r3, r3
 800424e:	2200      	movs	r2, #0
 8004250:	469a      	mov	sl, r3
 8004252:	4693      	mov	fp, r2
 8004254:	f00a 04ff 	and.w	r4, sl, #255	@ 0xff
 8004258:	2500      	movs	r5, #0
 800425a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800425e:	ea42 0804 	orr.w	r8, r2, r4
 8004262:	ea43 0905 	orr.w	r9, r3, r5
 8004266:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
		i++;
 800426a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800426e:	3301      	adds	r3, #1
 8004270:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004274:	e000      	b.n	8004278 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x184>
		if (res < 0) continue;
 8004276:	bf00      	nop
	for(uint8_t i=0; i<5;) {
 8004278:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800427c:	2b04      	cmp	r3, #4
 800427e:	d9bb      	bls.n	80041f8 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x104>
	}

	while (available() > 0) serial_read(); // Flush
 8004280:	e002      	b.n	8004288 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x194>
 8004282:	6978      	ldr	r0, [r7, #20]
 8004284:	f7ff feae 	bl	8003fe4 <_ZN14TMC2208Stepper11serial_readEv>
 8004288:	6978      	ldr	r0, [r7, #20]
 800428a:	f7ff fe6f 	bl	8003f6c <_ZN14TMC2208Stepper9availableEv>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	bfcc      	ite	gt
 8004294:	2301      	movgt	r3, #1
 8004296:	2300      	movle	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f1      	bne.n	8004282 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x18e>

	return out;
 800429e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 80042a2:	4610      	mov	r0, r2
 80042a4:	4619      	mov	r1, r3
 80042a6:	3748      	adds	r7, #72	@ 0x48
 80042a8:	46bd      	mov	sp, r7
 80042aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080042ae <_ZN14TMC2208Stepper4readEh>:

uint32_t TMC2208Stepper::read(uint8_t addr) {
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b088      	sub	sp, #32
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	460b      	mov	r3, r1
 80042b8:	70fb      	strb	r3, [r7, #3]
    constexpr uint8_t len = 3;
 80042ba:	2303      	movs	r3, #3
 80042bc:	75bb      	strb	r3, [r7, #22]
    addr |= TMC_READ;
    uint8_t datagram[] = {TMC2208_SYNC, slave_address, addr, 0x00};
 80042be:	2300      	movs	r3, #0
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	2305      	movs	r3, #5
 80042c4:	743b      	strb	r3, [r7, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80042cc:	747b      	strb	r3, [r7, #17]
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	74bb      	strb	r3, [r7, #18]
    datagram[len] = calcCRC(datagram, len);
 80042d2:	f107 0310 	add.w	r3, r7, #16
 80042d6:	2203      	movs	r2, #3
 80042d8:	4619      	mov	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff fe07 	bl	8003eee <_ZN14TMC2208Stepper7calcCRCEPhh>
 80042e0:	4603      	mov	r3, r0
 80042e2:	74fb      	strb	r3, [r7, #19]
    uint64_t out = 0x00000000UL;
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for (uint8_t i = 0; i < max_retries; i++) {			 
 80042f0:	2300      	movs	r3, #0
 80042f2:	75fb      	strb	r3, [r7, #23]
 80042f4:	e080      	b.n	80043f8 <_ZN14TMC2208Stepper4readEh+0x14a>
        preReadCommunication();
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fe53 	bl	8003fa2 <_ZN14TMC2208Stepper20preReadCommunicationEv>
        out = _sendDatagram(datagram, len, abort_window);
 80042fc:	f107 0110 	add.w	r1, r7, #16
 8004300:	2305      	movs	r3, #5
 8004302:	2203      	movs	r2, #3
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff fef5 	bl	80040f4 <_ZN14TMC2208Stepper13_sendDatagramEPhht>
 800430a:	e9c7 0106 	strd	r0, r1, [r7, #24]
        postReadCommunication();
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff fe5e 	bl	8003fd0 <_ZN14TMC2208Stepper21postReadCommunicationEv>

//        delay(replyDelay);
        //ThisThread::sleep_for(replyDelay);
        HAL_Delay(5);
 8004314:	2005      	movs	r0, #5
 8004316:	f017 fc29 	bl	801bb6c <HAL_Delay>

        CRCerror = false;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2020 	strb.w	r2, [r3, #32]
        uint8_t out_datagram[] = {
            static_cast<uint8_t>(out>>56),
 8004322:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	0e0a      	lsrs	r2, r1, #24
 8004330:	2300      	movs	r3, #0
            static_cast<uint8_t>(out>>32),
            static_cast<uint8_t>(out>>24),
            static_cast<uint8_t>(out>>16),
            static_cast<uint8_t>(out>> 8),
            static_cast<uint8_t>(out>> 0)
        };
 8004332:	b2d3      	uxtb	r3, r2
 8004334:	723b      	strb	r3, [r7, #8]
            static_cast<uint8_t>(out>>48),
 8004336:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	0c0a      	lsrs	r2, r1, #16
 8004344:	2300      	movs	r3, #0
        };
 8004346:	b2d3      	uxtb	r3, r2
 8004348:	727b      	strb	r3, [r7, #9]
            static_cast<uint8_t>(out>>40),
 800434a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	0a0a      	lsrs	r2, r1, #8
 8004358:	2300      	movs	r3, #0
        };
 800435a:	b2d3      	uxtb	r3, r2
 800435c:	72bb      	strb	r3, [r7, #10]
            static_cast<uint8_t>(out>>32),
 800435e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	000a      	movs	r2, r1
 800436c:	2300      	movs	r3, #0
        };
 800436e:	b2d3      	uxtb	r3, r2
 8004370:	72fb      	strb	r3, [r7, #11]
            static_cast<uint8_t>(out>>24),
 8004372:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	0e02      	lsrs	r2, r0, #24
 8004380:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004384:	0e0b      	lsrs	r3, r1, #24
        };
 8004386:	b2d3      	uxtb	r3, r2
 8004388:	733b      	strb	r3, [r7, #12]
            static_cast<uint8_t>(out>>16),
 800438a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	0c02      	lsrs	r2, r0, #16
 8004398:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800439c:	0c0b      	lsrs	r3, r1, #16
        };
 800439e:	b2d3      	uxtb	r3, r2
 80043a0:	737b      	strb	r3, [r7, #13]
            static_cast<uint8_t>(out>> 8),
 80043a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	0a02      	lsrs	r2, r0, #8
 80043b0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80043b4:	0a0b      	lsrs	r3, r1, #8
        };
 80043b6:	b2d3      	uxtb	r3, r2
 80043b8:	73bb      	strb	r3, [r7, #14]
 80043ba:	7e3b      	ldrb	r3, [r7, #24]
 80043bc:	73fb      	strb	r3, [r7, #15]
        //printf("read  datagram = %x, %x, %x, %x, %x, %x, %x, %x\n", out_datagram[0], out_datagram[1], out_datagram[2], out_datagram[3], out_datagram[4], out_datagram[5], out_datagram[6], out_datagram[7]);
		
        uint8_t crc = calcCRC(out_datagram, 7);
 80043be:	f107 0308 	add.w	r3, r7, #8
 80043c2:	2207      	movs	r2, #7
 80043c4:	4619      	mov	r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff fd91 	bl	8003eee <_ZN14TMC2208Stepper7calcCRCEPhh>
 80043cc:	4603      	mov	r3, r0
 80043ce:	757b      	strb	r3, [r7, #21]
        if ((crc != static_cast<uint8_t>(out)) || crc == 0 ) {
 80043d0:	7e3b      	ldrb	r3, [r7, #24]
 80043d2:	7d7a      	ldrb	r2, [r7, #21]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d102      	bne.n	80043de <_ZN14TMC2208Stepper4readEh+0x130>
 80043d8:	7d7b      	ldrb	r3, [r7, #21]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d110      	bne.n	8004400 <_ZN14TMC2208Stepper4readEh+0x152>
            CRCerror = true;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2020 	strb.w	r2, [r3, #32]
            out = 0;
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (uint8_t i = 0; i < max_retries; i++) {			 
 80043f2:	7dfb      	ldrb	r3, [r7, #23]
 80043f4:	3301      	adds	r3, #1
 80043f6:	75fb      	strb	r3, [r7, #23]
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	f67f af7b 	bls.w	80042f6 <_ZN14TMC2208Stepper4readEh+0x48>
        } else {
            break;
        }
    }

    return out>>8;
 8004400:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	0a02      	lsrs	r2, r0, #8
 800440e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004412:	0a0b      	lsrs	r3, r1, #8
 8004414:	4613      	mov	r3, r2
}
 8004416:	4618      	mov	r0, r3
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <_ZN14TMC2209Stepper6SGTHRSEh>:
    CHOPCONF(CHOPCONF_register.sr);
    PWMCONF(PWMCONF_register.sr);
    TCOOLTHRS(TCOOLTHRS_register.sr);
}

void TMC2209Stepper::SGTHRS(uint8_t input) {
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	460b      	mov	r3, r1
 8004428:	70fb      	strb	r3, [r7, #3]
    SGTHRS_register.sr = input;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	78fa      	ldrb	r2, [r7, #3]
 800442e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    write(SGTHRS_register.address, SGTHRS_register.sr);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8004440:	2140      	movs	r1, #64	@ 0x40
 8004442:	4798      	blx	r3
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <_ZN14TMC2209Stepper9TCOOLTHRSEm>:
    return SGTHRS_register.sr;
}

// W: TCOOLTHRS
uint32_t TMC2209Stepper::TCOOLTHRS() { return TCOOLTHRS_register.sr; }
void TMC2209Stepper::TCOOLTHRS(uint32_t input) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  TCOOLTHRS_register.sr = input;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	b2d1      	uxtb	r1, r2
 8004460:	2000      	movs	r0, #0
 8004462:	4301      	orrs	r1, r0
 8004464:	f883 1065 	strb.w	r1, [r3, #101]	@ 0x65
 8004468:	0a11      	lsrs	r1, r2, #8
 800446a:	b2c9      	uxtb	r1, r1
 800446c:	2000      	movs	r0, #0
 800446e:	4301      	orrs	r1, r0
 8004470:	f883 1066 	strb.w	r1, [r3, #102]	@ 0x66
 8004474:	0c12      	lsrs	r2, r2, #16
 8004476:	f002 020f 	and.w	r2, r2, #15
 800447a:	f002 000f 	and.w	r0, r2, #15
 800447e:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 8004482:	f022 020f 	bic.w	r2, r2, #15
 8004486:	4611      	mov	r1, r2
 8004488:	4602      	mov	r2, r0
 800448a:	430a      	orrs	r2, r1
 800448c:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  write(TCOOLTHRS_register.address, TCOOLTHRS_register.sr);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800449c:	f3c2 2213 	ubfx	r2, r2, #8, #20
 80044a0:	2114      	movs	r1, #20
 80044a2:	4798      	blx	r3
}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <_ZN14TMC5130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC5130Stepper::TMC5130Stepper(const std::string& pinCS, float RS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	6178      	str	r0, [r7, #20]
 80044b4:	6139      	str	r1, [r7, #16]
 80044b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80044ba:	60ba      	str	r2, [r7, #8]
 80044bc:	607b      	str	r3, [r7, #4]
  TMC2160Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 80044be:	6978      	ldr	r0, [r7, #20]
 80044c0:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	ed97 0a03 	vldr	s0, [r7, #12]
 80044d2:	6939      	ldr	r1, [r7, #16]
 80044d4:	f7ff fa60 	bl	8003998 <_ZN14TMC2160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>
 80044d8:	4a48      	ldr	r2, [pc, #288]	@ (80045fc <_ZN14TMC5130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x150>)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	f8b2 3088 	ldrh.w	r3, [r2, #136]	@ 0x88
 80044e4:	f36f 030b 	bfc	r3, #0, #12
 80044e8:	f8a2 3088 	strh.w	r3, [r2, #136]	@ 0x88
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	f892 308a 	ldrb.w	r3, [r2, #138]	@ 0x8a
 80044f2:	f36f 0300 	bfc	r3, #0, #1
 80044f6:	f882 308a 	strb.w	r3, [r2, #138]	@ 0x8a
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
 8004502:	2200      	movs	r2, #0
 8004504:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8004508:	2200      	movs	r2, #0
 800450a:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
 800450e:	2200      	movs	r2, #0
 8004510:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	f892 308f 	ldrb.w	r3, [r2, #143]	@ 0x8f
 800451a:	f36f 0301 	bfc	r3, #0, #2
 800451e:	f882 308f 	strb.w	r3, [r2, #143]	@ 0x8f
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2200      	movs	r2, #0
 8004526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2200      	movs	r2, #0
 800452e:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
 8004532:	f893 2096 	ldrb.w	r2, [r3, #150]	@ 0x96
 8004536:	f022 0203 	bic.w	r2, r2, #3
 800453a:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8004554:	2200      	movs	r2, #0
 8004556:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
 800455a:	f893 209b 	ldrb.w	r2, [r3, #155]	@ 0x9b
 800455e:	f022 020f 	bic.w	r2, r2, #15
 8004562:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2200      	movs	r2, #0
 800456a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2200      	movs	r2, #0
 8004572:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 8004576:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 800457a:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800457e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 800458a:	2200      	movs	r2, #0
 800458c:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
 8004598:	2200      	movs	r2, #0
 800459a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
 80045ac:	f893 20a7 	ldrb.w	r2, [r3, #167]	@ 0xa7
 80045b0:	f022 0203 	bic.w	r2, r2, #3
 80045b4:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	f8b2 30aa 	ldrh.w	r3, [r2, #170]	@ 0xaa
 80045c6:	f36f 030b 	bfc	r3, #0, #12
 80045ca:	f8a2 30aa 	strh.w	r3, [r2, #170]	@ 0xaa
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	@ 0xac
 80045d4:	f36f 030a 	bfc	r3, #0, #11
 80045d8:	f8a2 30ac 	strh.w	r3, [r2, #172]	@ 0xac
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2200      	movs	r2, #0
 80045e0:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
  { defaults(); }
 80045ea:	6978      	ldr	r0, [r7, #20]
 80045ec:	f000 f81c 	bl	8004628 <_ZN14TMC5130Stepper8defaultsEv>
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	0802b204 	.word	0x0802b204

08004600 <_ZN14TMC5130Stepper5beginEv>:

TMC5130Stepper::TMC5130Stepper(const std::string& pinCS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
  TMC2160Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC5130Stepper::begin() {
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  TMC2160Stepper::begin();
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff f9fc 	bl	8003a08 <_ZN14TMC2160Stepper5beginEv>

  XTARGET(0);
 8004610:	2100      	movs	r1, #0
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f838 	bl	8004688 <_ZN14TMC5130Stepper7XTARGETEl>
  XACTUAL(0);
 8004618:	2100      	movs	r1, #0
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f824 	bl	8004668 <_ZN14TMC5130Stepper7XACTUALEl>
  //while (( RAMP_STAT() & cfg.VZERO_bm) != cfg.VZERO_bm) {}
}
 8004620:	bf00      	nop
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <_ZN14TMC5130Stepper8defaultsEv>:

void TMC5130Stepper::defaults() {
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  OUTPUT_register.sr = 1;
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	f892 308a 	ldrb.w	r3, [r2, #138]	@ 0x8a
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	f882 308a 	strb.w	r3, [r2, #138]	@ 0x8a
  ENC_CONST_register.sr = 65536;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
 8004646:	2200      	movs	r2, #0
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  PWMCONF_register.sr = 0x00050480;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a04      	ldr	r2, [pc, #16]	@ (8004664 <_ZN14TMC5130Stepper8defaultsEv+0x3c>)
 8004654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	00050480 	.word	0x00050480

08004668 <_ZN14TMC5130Stepper7XACTUALEl>:
  write(RAMPMODE_register.address, RAMPMODE_register.sr);
}
///////////////////////////////////////////////////////////////////////////////////////
// RW: XACTUAL
int32_t TMC5130Stepper::XACTUAL() { return read(XACTUAL_register.address); }
void TMC5130Stepper::XACTUAL(int32_t input) {
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  write(XACTUAL_register.address, input);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	2121      	movs	r1, #33	@ 0x21
 800467e:	4798      	blx	r3
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <_ZN14TMC5130Stepper7XTARGETEl>:
  write(TZEROWAIT_register.address, TZEROWAIT_register.sr);
}
///////////////////////////////////////////////////////////////////////////////////////
// RW: XTARGET
int32_t TMC5130Stepper::XTARGET() { return read(XTARGET_t::address); }
void TMC5130Stepper::XTARGET(int32_t input) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  write(XTARGET_t::address, input);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	212d      	movs	r1, #45	@ 0x2d
 800469e:	4798      	blx	r3
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <_ZN14TMC5160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC5160Stepper::TMC5160Stepper(const std::string& pinCS, float RS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	6178      	str	r0, [r7, #20]
 80046b0:	6139      	str	r1, [r7, #16]
 80046b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80046b6:	60ba      	str	r2, [r7, #8]
 80046b8:	607b      	str	r3, [r7, #4]
  TMC5130Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 80046ba:	6978      	ldr	r0, [r7, #20]
 80046bc:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	ed97 0a03 	vldr	s0, [r7, #12]
 80046ce:	6939      	ldr	r1, [r7, #16]
 80046d0:	f7ff feec 	bl	80044ac <_ZN14TMC5130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>
 80046d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004700 <_ZN14TMC5160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x58>)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2200      	movs	r2, #0
 80046de:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
 80046e2:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
 80046e6:	f022 020f 	bic.w	r2, r2, #15
 80046ea:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
  { defaults(); }
 80046ee:	6978      	ldr	r0, [r7, #20]
 80046f0:	f000 f808 	bl	8004704 <_ZN14TMC5160Stepper8defaultsEv>
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	0802b240 	.word	0x0802b240

08004704 <_ZN14TMC5160Stepper8defaultsEv>:

TMC5160Stepper::TMC5160Stepper(const std::string& pinCS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
  TMC5130Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC5160Stepper::defaults() {
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  SHORT_CONF_register.s2vs_level = 6;
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	f892 307d 	ldrb.w	r3, [r2, #125]	@ 0x7d
 8004712:	2106      	movs	r1, #6
 8004714:	f361 0303 	bfi	r3, r1, #0, #4
 8004718:	f882 307d 	strb.w	r3, [r2, #125]	@ 0x7d
  SHORT_CONF_register.s2g_level = 6;
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	f892 307e 	ldrb.w	r3, [r2, #126]	@ 0x7e
 8004722:	2106      	movs	r1, #6
 8004724:	f361 0303 	bfi	r3, r1, #0, #4
 8004728:	f882 307e 	strb.w	r3, [r2, #126]	@ 0x7e
  SHORT_CONF_register.shortfilter = 0b01;
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	f892 307f 	ldrb.w	r3, [r2, #127]	@ 0x7f
 8004732:	2101      	movs	r1, #1
 8004734:	f361 0301 	bfi	r3, r1, #0, #2
 8004738:	f882 307f 	strb.w	r3, [r2, #127]	@ 0x7f
  SHORT_CONF_register.shortdelay = 0;
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	f892 307f 	ldrb.w	r3, [r2, #127]	@ 0x7f
 8004742:	f36f 0382 	bfc	r3, #2, #1
 8004746:	f882 307f 	strb.w	r3, [r2, #127]	@ 0x7f
  DRV_CONF_register.bbmtime = 0;
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	f892 3080 	ldrb.w	r3, [r2, #128]	@ 0x80
 8004750:	f36f 0304 	bfc	r3, #0, #5
 8004754:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  DRV_CONF_register.bbmclks = 4;
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	f892 3081 	ldrb.w	r3, [r2, #129]	@ 0x81
 800475e:	2104      	movs	r1, #4
 8004760:	f361 0303 	bfi	r3, r1, #0, #4
 8004764:	f882 3081 	strb.w	r3, [r2, #129]	@ 0x81
  DRV_CONF_register.otselect = 0b00;
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	f892 3082 	ldrb.w	r3, [r2, #130]	@ 0x82
 800476e:	f36f 0301 	bfc	r3, #0, #2
 8004772:	f882 3082 	strb.w	r3, [r2, #130]	@ 0x82
  DRV_CONF_register.drvstrength = 0b10;
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	f892 3082 	ldrb.w	r3, [r2, #130]	@ 0x82
 800477c:	2102      	movs	r1, #2
 800477e:	f361 0383 	bfi	r3, r1, #2, #2
 8004782:	f882 3082 	strb.w	r3, [r2, #130]	@ 0x82
  DRV_CONF_register.filt_isense = 0b00;
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	f892 3082 	ldrb.w	r3, [r2, #130]	@ 0x82
 800478c:	f36f 1305 	bfc	r3, #4, #2
 8004790:	f882 3082 	strb.w	r3, [r2, #130]	@ 0x82
  TPOWERDOWN_register.sr = 10;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	220a      	movs	r2, #10
 8004798:	71da      	strb	r2, [r3, #7]
  VSTOP_register.sr = 1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
 80047ac:	f893 20a7 	ldrb.w	r2, [r3, #167]	@ 0xa7
 80047b0:	f022 0203 	bic.w	r2, r2, #3
 80047b4:	f883 20a7 	strb.w	r2, [r3, #167]	@ 0xa7
  ENC_CONST_register.sr = 65536;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
 80047c0:	2200      	movs	r2, #0
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  CHOPCONF_register.sr = 0x10410150;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80047d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 80047d6:	2200      	movs	r2, #0
 80047d8:	f042 0201 	orr.w	r2, r2, #1
 80047dc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 80047e0:	2200      	movs	r2, #0
 80047e2:	f042 0241 	orr.w	r2, r2, #65	@ 0x41
 80047e6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 80047ea:	2200      	movs	r2, #0
 80047ec:	f042 0210 	orr.w	r2, r2, #16
 80047f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  PWMCONF_register.sr = 0xC40C001E;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a04      	ldr	r2, [pc, #16]	@ (8004808 <_ZN14TMC5160Stepper8defaultsEv+0x104>)
 80047f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	c40c001e 	.word	0xc40c001e
 800480c:	00000000 	.word	0x00000000

08004810 <_ZN10TMCStepper11rms_currentEt>:

uint16_t TMCStepper::cs2rms(uint8_t CS) {
  return (float)(CS+1)/32.0 * (vsense() ? 0.180 : 0.325)/(Rsense+0.02) / 1.41421 * 1000;
}

void TMCStepper::rms_current(uint16_t mA) {
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	460b      	mov	r3, r1
 800481a:	817b      	strh	r3, [r7, #10]
  uint8_t CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.325 - 1;
 800481c:	897b      	ldrh	r3, [r7, #10]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004826:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8004920 <_ZN10TMCStepper11rms_currentEt+0x110>
 800482a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800482e:	ed9f 5b3e 	vldr	d5, [pc, #248]	@ 8004928 <_ZN10TMCStepper11rms_currentEt+0x118>
 8004832:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	edd3 7a03 	vldr	s15, [r3, #12]
 800483c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004840:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8004930 <_ZN10TMCStepper11rms_currentEt+0x120>
 8004844:	ee37 7b05 	vadd.f64	d7, d7, d5
 8004848:	ee26 6b07 	vmul.f64	d6, d6, d7
 800484c:	ed9f 5b3a 	vldr	d5, [pc, #232]	@ 8004938 <_ZN10TMCStepper11rms_currentEt+0x128>
 8004850:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004854:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8004858:	ee37 7b46 	vsub.f64	d7, d7, d6
 800485c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004860:	edc7 7a01 	vstr	s15, [r7, #4]
 8004864:	793b      	ldrb	r3, [r7, #4]
 8004866:	75fb      	strb	r3, [r7, #23]
  // If Current Scale is too low, turn on high sensitivity R_sense and calculate again
  if (CS < 16) {
 8004868:	7dfb      	ldrb	r3, [r7, #23]
 800486a:	2b0f      	cmp	r3, #15
 800486c:	d82d      	bhi.n	80048ca <_ZN10TMCStepper11rms_currentEt+0xba>
    vsense(true);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3308      	adds	r3, #8
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2101      	movs	r1, #1
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	4798      	blx	r3
    CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.180 - 1;
 800487c:	897b      	ldrh	r3, [r7, #10]
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004886:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8004920 <_ZN10TMCStepper11rms_currentEt+0x110>
 800488a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800488e:	ed9f 5b26 	vldr	d5, [pc, #152]	@ 8004928 <_ZN10TMCStepper11rms_currentEt+0x118>
 8004892:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	edd3 7a03 	vldr	s15, [r3, #12]
 800489c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048a0:	ed9f 5b23 	vldr	d5, [pc, #140]	@ 8004930 <_ZN10TMCStepper11rms_currentEt+0x120>
 80048a4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80048a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80048ac:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8004940 <_ZN10TMCStepper11rms_currentEt+0x130>
 80048b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80048b4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80048b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80048bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80048c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80048c4:	793b      	ldrb	r3, [r7, #4]
 80048c6:	75fb      	strb	r3, [r7, #23]
 80048c8:	e006      	b.n	80048d8 <_ZN10TMCStepper11rms_currentEt+0xc8>
  } else { // If CS >= 16, turn off high_sense_r
    vsense(false);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3308      	adds	r3, #8
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2100      	movs	r1, #0
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	4798      	blx	r3
  }

  if (CS > 31)
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
 80048da:	2b1f      	cmp	r3, #31
 80048dc:	d901      	bls.n	80048e2 <_ZN10TMCStepper11rms_currentEt+0xd2>
    CS = 31;
 80048de:	231f      	movs	r3, #31
 80048e0:	75fb      	strb	r3, [r7, #23]

  irun(CS);
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	4619      	mov	r1, r3
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7fe fc4d 	bl	8003186 <_ZN10TMCStepper4irunEh>
  ihold(CS*holdMultiplier);
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80048fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004904:	edc7 7a01 	vstr	s15, [r7, #4]
 8004908:	793b      	ldrb	r3, [r7, #4]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	4619      	mov	r1, r3
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f7fe fc1c 	bl	800314c <_ZN10TMCStepper5iholdEh>
  //val_mA = mA;
}
 8004914:	bf00      	nop
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	f3af 8000 	nop.w
 8004920:	aa3ad18d 	.word	0xaa3ad18d
 8004924:	4046a09a 	.word	0x4046a09a
 8004928:	00000000 	.word	0x00000000
 800492c:	408f4000 	.word	0x408f4000
 8004930:	47ae147b 	.word	0x47ae147b
 8004934:	3f947ae1 	.word	0x3f947ae1
 8004938:	cccccccd 	.word	0xcccccccd
 800493c:	3fd4cccc 	.word	0x3fd4cccc
 8004940:	70a3d70a 	.word	0x70a3d70a
 8004944:	3fc70a3d 	.word	0x3fc70a3d

08004948 <_ZN10TMCStepper15test_connectionEv>:

uint16_t TMCStepper::rms_current() {
  return cs2rms(irun());
}

uint8_t TMCStepper::test_connection() {
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t drv_status = DRV_STATUS();
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3310      	adds	r3, #16
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	4798      	blx	r3
 800495c:	60f8      	str	r0, [r7, #12]
  switch (drv_status) {
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <_ZN10TMCStepper15test_connectionEv+0x28>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496a:	d103      	bne.n	8004974 <_ZN10TMCStepper15test_connectionEv+0x2c>
      case 0xFFFFFFFF: return 1;
 800496c:	2301      	movs	r3, #1
 800496e:	e002      	b.n	8004976 <_ZN10TMCStepper15test_connectionEv+0x2e>
      case 0: return 2;
 8004970:	2302      	movs	r3, #2
 8004972:	e000      	b.n	8004976 <_ZN10TMCStepper15test_connectionEv+0x2e>
      default: return 0;
 8004974:	2300      	movs	r3, #0
  }
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <_ZN10TMCStepper10microstepsEt>:
int8_t TMCStepper::hysteresis_end() { return hend()-3; };

void TMCStepper::hysteresis_start(uint8_t value) { hstrt(value-1); }
uint8_t TMCStepper::hysteresis_start() { return hstrt()+1; }

void TMCStepper::microsteps(uint16_t ms) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	807b      	strh	r3, [r7, #2]
  switch(ms) {
 800498c:	887b      	ldrh	r3, [r7, #2]
 800498e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004992:	d058      	beq.n	8004a46 <_ZN10TMCStepper10microstepsEt+0xc6>
 8004994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004998:	f300 809d 	bgt.w	8004ad6 <_ZN10TMCStepper10microstepsEt+0x156>
 800499c:	2b80      	cmp	r3, #128	@ 0x80
 800499e:	d05a      	beq.n	8004a56 <_ZN10TMCStepper10microstepsEt+0xd6>
 80049a0:	2b80      	cmp	r3, #128	@ 0x80
 80049a2:	f300 8098 	bgt.w	8004ad6 <_ZN10TMCStepper10microstepsEt+0x156>
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	dc4a      	bgt.n	8004a40 <_ZN10TMCStepper10microstepsEt+0xc0>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f340 8093 	ble.w	8004ad6 <_ZN10TMCStepper10microstepsEt+0x156>
 80049b0:	3b01      	subs	r3, #1
 80049b2:	2b1f      	cmp	r3, #31
 80049b4:	f200 808f 	bhi.w	8004ad6 <_ZN10TMCStepper10microstepsEt+0x156>
 80049b8:	a201      	add	r2, pc, #4	@ (adr r2, 80049c0 <_ZN10TMCStepper10microstepsEt+0x40>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	08004ac7 	.word	0x08004ac7
 80049c4:	08004ab7 	.word	0x08004ab7
 80049c8:	08004ad7 	.word	0x08004ad7
 80049cc:	08004aa7 	.word	0x08004aa7
 80049d0:	08004ad7 	.word	0x08004ad7
 80049d4:	08004ad7 	.word	0x08004ad7
 80049d8:	08004ad7 	.word	0x08004ad7
 80049dc:	08004a97 	.word	0x08004a97
 80049e0:	08004ad7 	.word	0x08004ad7
 80049e4:	08004ad7 	.word	0x08004ad7
 80049e8:	08004ad7 	.word	0x08004ad7
 80049ec:	08004ad7 	.word	0x08004ad7
 80049f0:	08004ad7 	.word	0x08004ad7
 80049f4:	08004ad7 	.word	0x08004ad7
 80049f8:	08004ad7 	.word	0x08004ad7
 80049fc:	08004a87 	.word	0x08004a87
 8004a00:	08004ad7 	.word	0x08004ad7
 8004a04:	08004ad7 	.word	0x08004ad7
 8004a08:	08004ad7 	.word	0x08004ad7
 8004a0c:	08004ad7 	.word	0x08004ad7
 8004a10:	08004ad7 	.word	0x08004ad7
 8004a14:	08004ad7 	.word	0x08004ad7
 8004a18:	08004ad7 	.word	0x08004ad7
 8004a1c:	08004ad7 	.word	0x08004ad7
 8004a20:	08004ad7 	.word	0x08004ad7
 8004a24:	08004ad7 	.word	0x08004ad7
 8004a28:	08004ad7 	.word	0x08004ad7
 8004a2c:	08004ad7 	.word	0x08004ad7
 8004a30:	08004ad7 	.word	0x08004ad7
 8004a34:	08004ad7 	.word	0x08004ad7
 8004a38:	08004ad7 	.word	0x08004ad7
 8004a3c:	08004a77 	.word	0x08004a77
 8004a40:	2b40      	cmp	r3, #64	@ 0x40
 8004a42:	d010      	beq.n	8004a66 <_ZN10TMCStepper10microstepsEt+0xe6>
    case  16: mres(4); break;
    case   8: mres(5); break;
    case   4: mres(6); break;
    case   2: mres(7); break;
    case   1: mres(8); break;
    default: break;
 8004a44:	e047      	b.n	8004ad6 <_ZN10TMCStepper10microstepsEt+0x156>
    case 256: mres(0); break;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3324      	adds	r3, #36	@ 0x24
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2100      	movs	r1, #0
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	4798      	blx	r3
 8004a54:	e040      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    case 128: mres(1); break;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3324      	adds	r3, #36	@ 0x24
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2101      	movs	r1, #1
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
 8004a64:	e038      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    case  64: mres(2); break;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3324      	adds	r3, #36	@ 0x24
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2102      	movs	r1, #2
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4798      	blx	r3
 8004a74:	e030      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    case  32: mres(3); break;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3324      	adds	r3, #36	@ 0x24
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2103      	movs	r1, #3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	4798      	blx	r3
 8004a84:	e028      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    case  16: mres(4); break;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3324      	adds	r3, #36	@ 0x24
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2104      	movs	r1, #4
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	4798      	blx	r3
 8004a94:	e020      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    case   8: mres(5); break;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3324      	adds	r3, #36	@ 0x24
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2105      	movs	r1, #5
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	4798      	blx	r3
 8004aa4:	e018      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    case   4: mres(6); break;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3324      	adds	r3, #36	@ 0x24
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2106      	movs	r1, #6
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
 8004ab4:	e010      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    case   2: mres(7); break;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3324      	adds	r3, #36	@ 0x24
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2107      	movs	r1, #7
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	4798      	blx	r3
 8004ac4:	e008      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    case   1: mres(8); break;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3324      	adds	r3, #36	@ 0x24
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2108      	movs	r1, #8
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	4798      	blx	r3
 8004ad4:	e000      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    default: break;
 8004ad6:	bf00      	nop
  }
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <_ZN10TMCStepper10blank_timeEh>:
    case 8: return   1;
  }
  return 1;
}

void TMCStepper::blank_time(uint8_t value) {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	70fb      	strb	r3, [r7, #3]
  switch (value) {
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	2b36      	cmp	r3, #54	@ 0x36
 8004af0:	d022      	beq.n	8004b38 <_ZN10TMCStepper10blank_timeEh+0x58>
 8004af2:	2b36      	cmp	r3, #54	@ 0x36
 8004af4:	dc28      	bgt.n	8004b48 <_ZN10TMCStepper10blank_timeEh+0x68>
 8004af6:	2b24      	cmp	r3, #36	@ 0x24
 8004af8:	d016      	beq.n	8004b28 <_ZN10TMCStepper10blank_timeEh+0x48>
 8004afa:	2b24      	cmp	r3, #36	@ 0x24
 8004afc:	dc24      	bgt.n	8004b48 <_ZN10TMCStepper10blank_timeEh+0x68>
 8004afe:	2b10      	cmp	r3, #16
 8004b00:	d002      	beq.n	8004b08 <_ZN10TMCStepper10blank_timeEh+0x28>
 8004b02:	2b18      	cmp	r3, #24
 8004b04:	d008      	beq.n	8004b18 <_ZN10TMCStepper10blank_timeEh+0x38>
    case 16: tbl(0b00); break;
    case 24: tbl(0b01); break;
    case 36: tbl(0b10); break;
    case 54: tbl(0b11); break;
  }
}
 8004b06:	e01f      	b.n	8004b48 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 16: tbl(0b00); break;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	332c      	adds	r3, #44	@ 0x2c
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2100      	movs	r1, #0
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	4798      	blx	r3
 8004b16:	e017      	b.n	8004b48 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 24: tbl(0b01); break;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	332c      	adds	r3, #44	@ 0x2c
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2101      	movs	r1, #1
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	4798      	blx	r3
 8004b26:	e00f      	b.n	8004b48 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 36: tbl(0b10); break;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	332c      	adds	r3, #44	@ 0x2c
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2102      	movs	r1, #2
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	4798      	blx	r3
 8004b36:	e007      	b.n	8004b48 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 54: tbl(0b11); break;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	332c      	adds	r3, #44	@ 0x2c
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2103      	movs	r1, #3
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4798      	blx	r3
 8004b46:	bf00      	nop
}
 8004b48:	bf00      	nop
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <_ZN10TMCStepper10TPOWERDOWNEh>:
bool  TMCStepper::drv_err()  { GSTAT_t r; r.sr = GSTAT(); return r.drv_err; }
bool  TMCStepper::uv_cp()    { GSTAT_t r; r.sr = GSTAT(); return r.uv_cp; }
///////////////////////////////////////////////////////////////////////////////////////
// W: TPOWERDOWN
uint8_t TMCStepper::TPOWERDOWN() { return TPOWERDOWN_register.sr; }
void TMCStepper::TPOWERDOWN(uint8_t input) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	70fb      	strb	r3, [r7, #3]
  TPOWERDOWN_register.sr = input;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	71da      	strb	r2, [r3, #7]
  write(TPOWERDOWN_register.address, TPOWERDOWN_register.sr);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	79d2      	ldrb	r2, [r2, #7]
 8004b6c:	2111      	movs	r1, #17
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	4798      	blx	r3
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f023 ffef 	bl	8028b6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4904      	ldr	r1, [pc, #16]	@ (8004ba8 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8004b98:	4804      	ldr	r0, [pc, #16]	@ (8004bac <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8004b9a:	f000 fa34 	bl	8005006 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8004b9e:	4603      	mov	r3, r0
					__idx, __base); }
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	0802a1bc 	.word	0x0802a1bc
 8004bac:	0802916d 	.word	0x0802916d

08004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include "pin.h"
#include <cstdio>

Pin::Pin(const std::string& portAndPin, int dir) 
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
    : portAndPin(portAndPin), dir(dir), modifier(NONE) {
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f024 f800 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	761a      	strb	r2, [r3, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	765a      	strb	r2, [r3, #25]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	332c      	adds	r3, #44	@ 0x2c
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	605a      	str	r2, [r3, #4]
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	611a      	str	r2, [r3, #16]
    configurePin();
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f835 	bl	8004c54 <_ZN3Pin12configurePinEv>
    enableClock();
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f8a8 	bl	8004d40 <_ZN3Pin11enableClockEv>
    initialisePin();
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f949 	bl	8004e88 <_ZN3Pin13initialisePinEv>
}
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>:

Pin::Pin(const std::string& portAndPin, int dir, int modifier) 
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
    : portAndPin(portAndPin), dir(dir), modifier(modifier) {
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f023 ffd7 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	761a      	strb	r2, [r3, #24]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	765a      	strb	r2, [r3, #25]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	332c      	adds	r3, #44	@ 0x2c
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	605a      	str	r2, [r3, #4]
 8004c32:	609a      	str	r2, [r3, #8]
 8004c34:	60da      	str	r2, [r3, #12]
 8004c36:	611a      	str	r2, [r3, #16]
    configurePin();
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f80b 	bl	8004c54 <_ZN3Pin12configurePinEv>
    enableClock();
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 f87e 	bl	8004d40 <_ZN3Pin11enableClockEv>
    initialisePin();
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f91f 	bl	8004e88 <_ZN3Pin13initialisePinEv>
}
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <_ZN3Pin12configurePinEv>:

void Pin::configurePin() {
 8004c54:	b5b0      	push	{r4, r5, r7, lr}
 8004c56:	b090      	sub	sp, #64	@ 0x40
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef* gpioPorts[8] = {GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF, GPIOG, GPIOH};
 8004c5c:	4b36      	ldr	r3, [pc, #216]	@ (8004d38 <_ZN3Pin12configurePinEv+0xe4>)
 8004c5e:	f107 0408 	add.w	r4, r7, #8
 8004c62:	461d      	mov	r5, r3
 8004c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004c6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    if (portAndPin[0] == 'P') {
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f023 fe5b 	bl	8028930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b50      	cmp	r3, #80	@ 0x50
 8004c80:	bf0c      	ite	eq
 8004c82:	2301      	moveq	r3, #1
 8004c84:	2300      	movne	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d042      	beq.n	8004d12 <_ZN3Pin12configurePinEv+0xbe>
        portIndex = portAndPin[1] - 'A';
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2101      	movs	r1, #1
 8004c90:	4618      	mov	r0, r3
 8004c92:	f023 fe4d 	bl	8028930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004c96:	4603      	mov	r3, r0
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	3b41      	subs	r3, #65	@ 0x41
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	769a      	strb	r2, [r3, #26]
        pinNumber = std::stoi(portAndPin.substr(3));
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8004ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cac:	2203      	movs	r2, #3
 8004cae:	f023 ffbb 	bl	8028c28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8004cb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004cb6:	220a      	movs	r2, #10
 8004cb8:	2100      	movs	r1, #0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff ff5e 	bl	8004b7c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	839a      	strh	r2, [r3, #28]
 8004cc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f023 fd6a 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        pin = 1 << pinNumber;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	8b9b      	ldrh	r3, [r3, #28]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	2301      	movs	r3, #1
 8004cda:	4093      	lsls	r3, r2
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	83da      	strh	r2, [r3, #30]
    } else {
        printf("Invalid port and pin definition\n");
        return;
    }
    
    GPIOx = gpioPorts[portIndex];
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	7e9b      	ldrb	r3, [r3, #26]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	3340      	adds	r3, #64	@ 0x40
 8004cea:	443b      	add	r3, r7
 8004cec:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    mode = (dir == INPUT) ? GPIO_MODE_INPUT : GPIO_MODE_OUTPUT_PP;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	7e1b      	ldrb	r3, [r3, #24]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bf14      	ite	ne
 8004cfc:	2301      	movne	r3, #1
 8004cfe:	2300      	moveq	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	461a      	mov	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	621a      	str	r2, [r3, #32]
    pull = (modifier == PULLUP) ? GPIO_PULLUP :
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	7e5b      	ldrb	r3, [r3, #25]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d00c      	beq.n	8004d2a <_ZN3Pin12configurePinEv+0xd6>
 8004d10:	e003      	b.n	8004d1a <_ZN3Pin12configurePinEv+0xc6>
        printf("Invalid port and pin definition\n");
 8004d12:	480a      	ldr	r0, [pc, #40]	@ (8004d3c <_ZN3Pin12configurePinEv+0xe8>)
 8004d14:	f024 fb66 	bl	80293e4 <puts>
 8004d18:	e00a      	b.n	8004d30 <_ZN3Pin12configurePinEv+0xdc>
           (modifier == PULLDOWN) ? GPIO_PULLDOWN :
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	7e5b      	ldrb	r3, [r3, #25]
    pull = (modifier == PULLUP) ? GPIO_PULLUP :
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d101      	bne.n	8004d26 <_ZN3Pin12configurePinEv+0xd2>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e002      	b.n	8004d2c <_ZN3Pin12configurePinEv+0xd8>
 8004d26:	2300      	movs	r3, #0
 8004d28:	e000      	b.n	8004d2c <_ZN3Pin12configurePinEv+0xd8>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6253      	str	r3, [r2, #36]	@ 0x24
           GPIO_NOPULL;
}
 8004d30:	3740      	adds	r7, #64	@ 0x40
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bdb0      	pop	{r4, r5, r7, pc}
 8004d36:	bf00      	nop
 8004d38:	0802a1e4 	.word	0x0802a1e4
 8004d3c:	0802a1c4 	.word	0x0802a1c4

08004d40 <_ZN3Pin11enableClockEv>:

void Pin::enableClock() {
 8004d40:	b480      	push	{r7}
 8004d42:	b08b      	sub	sp, #44	@ 0x2c
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
    switch (portIndex) {
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	7e9b      	ldrb	r3, [r3, #26]
 8004d4c:	2b07      	cmp	r3, #7
 8004d4e:	f200 8093 	bhi.w	8004e78 <_ZN3Pin11enableClockEv+0x138>
 8004d52:	a201      	add	r2, pc, #4	@ (adr r2, 8004d58 <_ZN3Pin11enableClockEv+0x18>)
 8004d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d58:	08004d79 	.word	0x08004d79
 8004d5c:	08004d99 	.word	0x08004d99
 8004d60:	08004db9 	.word	0x08004db9
 8004d64:	08004dd9 	.word	0x08004dd9
 8004d68:	08004df9 	.word	0x08004df9
 8004d6c:	08004e19 	.word	0x08004e19
 8004d70:	08004e39 	.word	0x08004e39
 8004d74:	08004e59 	.word	0x08004e59
        case 0: __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8004d78:	4b42      	ldr	r3, [pc, #264]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d7e:	4a41      	ldr	r2, [pc, #260]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d88:	4b3e      	ldr	r3, [pc, #248]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	e06f      	b.n	8004e78 <_ZN3Pin11enableClockEv+0x138>
        case 1: __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8004d98:	4b3a      	ldr	r3, [pc, #232]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d9e:	4a39      	ldr	r2, [pc, #228]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004da0:	f043 0302 	orr.w	r3, r3, #2
 8004da4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004da8:	4b36      	ldr	r3, [pc, #216]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	623b      	str	r3, [r7, #32]
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	e05f      	b.n	8004e78 <_ZN3Pin11enableClockEv+0x138>
        case 2: __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8004db8:	4b32      	ldr	r3, [pc, #200]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dbe:	4a31      	ldr	r2, [pc, #196]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004dc0:	f043 0304 	orr.w	r3, r3, #4
 8004dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	e04f      	b.n	8004e78 <_ZN3Pin11enableClockEv+0x138>
        case 3: __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8004dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dde:	4a29      	ldr	r2, [pc, #164]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004de0:	f043 0308 	orr.w	r3, r3, #8
 8004de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004de8:	4b26      	ldr	r3, [pc, #152]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	e03f      	b.n	8004e78 <_ZN3Pin11enableClockEv+0x138>
        case 4: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8004df8:	4b22      	ldr	r3, [pc, #136]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dfe:	4a21      	ldr	r2, [pc, #132]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e00:	f043 0310 	orr.w	r3, r3, #16
 8004e04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e08:	4b1e      	ldr	r3, [pc, #120]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e0e:	f003 0310 	and.w	r3, r3, #16
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	e02f      	b.n	8004e78 <_ZN3Pin11enableClockEv+0x138>
        case 5: __HAL_RCC_GPIOF_CLK_ENABLE(); break;
 8004e18:	4b1a      	ldr	r3, [pc, #104]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e1e:	4a19      	ldr	r2, [pc, #100]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e20:	f043 0320 	orr.w	r3, r3, #32
 8004e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e28:	4b16      	ldr	r3, [pc, #88]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	e01f      	b.n	8004e78 <_ZN3Pin11enableClockEv+0x138>
        case 6: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8004e38:	4b12      	ldr	r3, [pc, #72]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e3e:	4a11      	ldr	r2, [pc, #68]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e48:	4b0e      	ldr	r3, [pc, #56]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	e00f      	b.n	8004e78 <_ZN3Pin11enableClockEv+0x138>
        case 7: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8004e58:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e5e:	4a09      	ldr	r2, [pc, #36]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e68:	4b06      	ldr	r3, [pc, #24]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e72:	60bb      	str	r3, [r7, #8]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	bf00      	nop
    }
}
 8004e78:	bf00      	nop
 8004e7a:	372c      	adds	r7, #44	@ 0x2c
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	58024400 	.word	0x58024400

08004e88 <_ZN3Pin13initialisePinEv>:

void Pin::initialisePin() {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8bdb      	ldrh	r3, [r3, #30]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	f019 fd40 	bl	801e920 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = pin;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8bdb      	ldrh	r3, [r3, #30]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
    GPIO_InitStruct.Mode = mode;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1a      	ldr	r2, [r3, #32]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pull = pull;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	635a      	str	r2, [r3, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	332c      	adds	r3, #44	@ 0x2c
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	f019 fb60 	bl	801e590 <HAL_GPIO_Init>
}
 8004ed0:	bf00      	nop
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <_ZNK3Pin3getEv>:

bool Pin::get() const {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(GPIOx, pin);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8bdb      	ldrh	r3, [r3, #30]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4610      	mov	r0, r2
 8004eec:	f019 fd00 	bl	801e8f0 <HAL_GPIO_ReadPin>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	bf14      	ite	ne
 8004ef6:	2301      	movne	r3, #1
 8004ef8:	2300      	moveq	r3, #0
 8004efa:	b2db      	uxtb	r3, r3
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <_ZN3Pin3setEb>:

void Pin::set(bool value) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(GPIOx, pin, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8bd9      	ldrh	r1, [r3, #30]
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <_ZN3Pin3setEb+0x1e>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <_ZN3Pin3setEb+0x20>
 8004f22:	2300      	movs	r3, #0
 8004f24:	461a      	mov	r2, r3
 8004f26:	f019 fcfb 	bl	801e920 <HAL_GPIO_WritePin>
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <_ZN3Pin11setAsOutputEv>:

void Pin::setAsOutput() {
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
    mode = GPIO_MODE_OUTPUT_PP;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	621a      	str	r2, [r3, #32]
    pull = GPIO_NOPULL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff ff9e 	bl	8004e88 <_ZN3Pin13initialisePinEv>
}
 8004f4c:	bf00      	nop
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <_ZN3Pin10setAsInputEv>:

void Pin::setAsInput() {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
    mode = GPIO_MODE_INPUT;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	621a      	str	r2, [r3, #32]
    pull = GPIO_NOPULL;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff ff8d 	bl	8004e88 <_ZN3Pin13initialisePinEv>
}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <_ZN3Pin9setPullUpEv>:
void Pin::setPullNone() {
    pull = GPIO_NOPULL;
    initialisePin();
}

void Pin::setPullUp() {
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
    pull = GPIO_PULLUP;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff ff7f 	bl	8004e88 <_ZN3Pin13initialisePinEv>
}
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	f024 fbcf 	bl	802973c <__errno>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	f024 fbc9 	bl	802973c <__errno>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8004fba:	b590      	push	{r4, r7, lr}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	f024 fbbb 	bl	802973c <__errno>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bf0c      	ite	eq
 8004fce:	2301      	moveq	r3, #1
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681c      	ldr	r4, [r3, #0]
 8004fdc:	f024 fbae 	bl	802973c <__errno>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	601c      	str	r4, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd90      	pop	{r4, r7, pc}

08004fee <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8004ff8:	2300      	movs	r3, #0
	  }
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8005006:	b590      	push	{r4, r7, lr}
 8005008:	b08b      	sub	sp, #44	@ 0x2c
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8005014:	f107 0314 	add.w	r3, r7, #20
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff ffba 	bl	8004f92 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f107 0118 	add.w	r1, r7, #24
 8005024:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	4798      	blx	r3
 800502a:	6278      	str	r0, [r7, #36]	@ 0x24

      if (__endptr == __str)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d102      	bne.n	800503a <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8005034:	68b8      	ldr	r0, [r7, #8]
 8005036:	f023 fad7 	bl	80285e8 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 800503a:	f024 fb7f 	bl	802973c <__errno>
 800503e:	4603      	mov	r3, r0
 8005040:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8005042:	2b22      	cmp	r3, #34	@ 0x22
 8005044:	d006      	beq.n	8005054 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8005046:	4621      	mov	r1, r4
 8005048:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800504a:	f7ff ffd0 	bl	8004fee <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8005058:	2300      	movs	r3, #0
      else if (errno == ERANGE
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 800505e:	68b8      	ldr	r0, [r7, #8]
 8005060:	f023 fac8 	bl	80285f4 <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	623b      	str	r3, [r7, #32]

      if (__idx)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	461a      	mov	r2, r3
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	601a      	str	r2, [r3, #0]

      return __ret;
 800507a:	6a3c      	ldr	r4, [r7, #32]
    }
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff ff9a 	bl	8004fba <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8005086:	4623      	mov	r3, r4
    }
 8005088:	4618      	mov	r0, r3
 800508a:	372c      	adds	r7, #44	@ 0x2c
 800508c:	46bd      	mov	sp, r7
 800508e:	bd90      	pop	{r4, r7, pc}

08005090 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	4a04      	ldr	r2, [pc, #16]	@ (80050ac <_ZN9InterruptC1Ev+0x1c>)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	0802b27c 	.word	0x0802b27c

080050b0 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	4805      	ldr	r0, [pc, #20]	@ (80050d4 <_ZN9Interrupt8RegisterEiPS_+0x24>)
 80050be:	f024 f921 	bl	8029304 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 80050c2:	4905      	ldr	r1, [pc, #20]	@ (80050d8 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80050cc:	bf00      	nop
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	0802a204 	.word	0x0802a204
 80050d8:	240000a8 	.word	0x240000a8

080050dc <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 80050e0:	4b04      	ldr	r3, [pc, #16]	@ (80050f4 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 80050e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a02      	ldr	r2, [pc, #8]	@ (80050f4 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 80050ea:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80050ec:	4610      	mov	r0, r2
 80050ee:	4798      	blx	r3
}
 80050f0:	bf00      	nop
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	240000a8 	.word	0x240000a8

080050f8 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>:

void Interrupt::DMA1_Stream0_Wrapper(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream0_IRQn]->ISR_Handler();
 80050fc:	4b04      	ldr	r3, [pc, #16]	@ (8005110 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 80050fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a02      	ldr	r2, [pc, #8]	@ (8005110 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8005106:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005108:	4610      	mov	r0, r2
 800510a:	4798      	blx	r3
}
 800510c:	bf00      	nop
 800510e:	bd80      	pop	{r7, pc}
 8005110:	240000a8 	.word	0x240000a8

08005114 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>:

void Interrupt::DMA1_Stream1_Wrapper(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream1_IRQn]->ISR_Handler();
 8005118:	4b04      	ldr	r3, [pc, #16]	@ (800512c <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 800511a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a02      	ldr	r2, [pc, #8]	@ (800512c <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8005122:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005124:	4610      	mov	r0, r2
 8005126:	4798      	blx	r3
}
 8005128:	bf00      	nop
 800512a:	bd80      	pop	{r7, pc}
 800512c:	240000a8 	.word	0x240000a8

08005130 <_ZN9Interrupt12TIM2_WrapperEv>:


void Interrupt::TIM2_Wrapper(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8005134:	4b04      	ldr	r3, [pc, #16]	@ (8005148 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a02      	ldr	r2, [pc, #8]	@ (8005148 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 800513e:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8005140:	4610      	mov	r0, r2
 8005142:	4798      	blx	r3
}
 8005144:	bf00      	nop
 8005146:	bd80      	pop	{r7, pc}
 8005148:	240000a8 	.word	0x240000a8

0800514c <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 8005150:	4b04      	ldr	r3, [pc, #16]	@ (8005164 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8005152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a02      	ldr	r2, [pc, #8]	@ (8005164 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 800515a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800515c:	4610      	mov	r0, r2
 800515e:	4798      	blx	r3
}
 8005160:	bf00      	nop
 8005162:	bd80      	pop	{r7, pc}
 8005164:	240000a8 	.word	0x240000a8

08005168 <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 800516c:	4b04      	ldr	r3, [pc, #16]	@ (8005180 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 800516e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a02      	ldr	r2, [pc, #8]	@ (8005180 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8005176:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8005178:	4610      	mov	r0, r2
 800517a:	4798      	blx	r3
}
 800517c:	bf00      	nop
 800517e:	bd80      	pop	{r7, pc}
 8005180:	240000a8 	.word	0x240000a8

08005184 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8allocateEj>:
};

namespace detail {
class DefaultAllocator : public Allocator {
 public:
  void* allocate(size_t size) override {
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
    return malloc(size);
 800518e:	6838      	ldr	r0, [r7, #0]
 8005190:	f023 fe7e 	bl	8028e90 <malloc>
 8005194:	4603      	mov	r3, r0
  }
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10deallocateEPv>:

  void deallocate(void* ptr) override {
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
    free(ptr);
 80051a8:	6838      	ldr	r0, [r7, #0]
 80051aa:	f023 fe79 	bl	8028ea0 <free>
  }
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10reallocateEPvj>:

  void* reallocate(void* ptr, size_t new_size) override {
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
    return realloc(ptr, new_size);
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	68b8      	ldr	r0, [r7, #8]
 80051c6:	f023 ff21 	bl	802900c <realloc>
 80051ca:	4603      	mov	r3, r0
  }
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>:

  static Allocator* instance() {
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
    static DefaultAllocator allocator;
    return &allocator;
 80051d8:	4b02      	ldr	r3, [pc, #8]	@ (80051e4 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv+0x10>)
  }
 80051da:	4618      	mov	r0, r3
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	24000000 	.word	0x24000000

080051e8 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>:
  length_type length;
  char data[1];

  static constexpr size_t maxLength = numeric_limits<length_type>::highest();

  static constexpr size_t sizeForLength(size_t n) {
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
    return n + 1 + offsetof(StringNode, data);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3309      	adds	r3, #9
  }
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>:

  static StringNode* create(size_t length, Allocator* allocator) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
    if (length > maxLength)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005210:	d301      	bcc.n	8005216 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x16>
      return nullptr;
 8005212:	2300      	movs	r3, #0
 8005214:	e01b      	b.n	800524e <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto size = sizeForLength(length);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7ff ffe6 	bl	80051e8 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 800521c:	60f8      	str	r0, [r7, #12]
    if (size < length)  // integer overflow
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	429a      	cmp	r2, r3
 8005224:	d201      	bcs.n	800522a <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x2a>
      return nullptr;   // (not testable on 64-bit)
 8005226:	2300      	movs	r3, #0
 8005228:	e011      	b.n	800524e <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto node = reinterpret_cast<StringNode*>(allocator->allocate(size));
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68f9      	ldr	r1, [r7, #12]
 8005232:	6838      	ldr	r0, [r7, #0]
 8005234:	4798      	blx	r3
 8005236:	60b8      	str	r0, [r7, #8]
    if (node) {
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d006      	beq.n	800524c <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4c>
      node->length = length_type(length);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	b29a      	uxth	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	80da      	strh	r2, [r3, #6]
      node->references = 1;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2201      	movs	r2, #1
 800524a:	809a      	strh	r2, [r3, #4]
    }
    return node;
 800524c:	68bb      	ldr	r3, [r7, #8]
  }
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>:

  static StringNode* resize(StringNode* node, size_t length,
 8005256:	b5b0      	push	{r4, r5, r7, lr}
 8005258:	b086      	sub	sp, #24
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	607a      	str	r2, [r7, #4]
                            Allocator* allocator) {
    ARDUINOJSON_ASSERT(node != nullptr);
    StringNode* newNode;
    if (length <= maxLength)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005268:	d20e      	bcs.n	8005288 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x32>
      newNode = reinterpret_cast<StringNode*>(
          allocator->reallocate(node, sizeForLength(length)));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3308      	adds	r3, #8
 8005270:	681c      	ldr	r4, [r3, #0]
 8005272:	687d      	ldr	r5, [r7, #4]
 8005274:	68b8      	ldr	r0, [r7, #8]
 8005276:	f7ff ffb7 	bl	80051e8 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 800527a:	4603      	mov	r3, r0
 800527c:	461a      	mov	r2, r3
 800527e:	68f9      	ldr	r1, [r7, #12]
 8005280:	4628      	mov	r0, r5
 8005282:	47a0      	blx	r4
 8005284:	6178      	str	r0, [r7, #20]
 8005286:	e001      	b.n	800528c <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x36>
    else
      newNode = nullptr;
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]
    if (newNode)
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d004      	beq.n	800529c <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x46>
      newNode->length = length_type(length);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	b29a      	uxth	r2, r3
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	80da      	strh	r2, [r3, #6]
 800529a:	e006      	b.n	80052aa <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x54>
    else
      allocator->deallocate(node);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3304      	adds	r3, #4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68f9      	ldr	r1, [r7, #12]
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	4798      	blx	r3
    return newNode;
 80052aa:	697b      	ldr	r3, [r7, #20]
  }
 80052ac:	4618      	mov	r0, r3
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bdb0      	pop	{r4, r5, r7, pc}

080052b4 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>:

  static void destroy(StringNode* node, Allocator* allocator) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
    allocator->deallocate(node);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3304      	adds	r3, #4
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	6838      	ldr	r0, [r7, #0]
 80052ca:	4798      	blx	r3
  }
 80052cc:	bf00      	nop
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>:
  RamString(const char* str, size_t sz, bool isStatic = false)
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	70fb      	strb	r3, [r7, #3]
      : str_(str), size_(sz & sizeMask), static_(isStatic) {
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	605a      	str	r2, [r3, #4]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	78fa      	ldrb	r2, [r7, #3]
 80052f2:	721a      	strb	r2, [r3, #8]
  }
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>:
  bool isNull() const {
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
    return !str_;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	bf0c      	ite	eq
 8005312:	2301      	moveq	r3, #1
 8005314:	2300      	movne	r3, #0
 8005316:	b2db      	uxtb	r3, r3
  }
 8005318:	4618      	mov	r0, r3
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>:
  size_t size() const {
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
    return size_;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
  }
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>:

  const char* data() const {
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
    return str_;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
  }
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>:

  friend void swap(StringPool& a, StringPool& b) {
    swap_(a.strings_, b.strings_);
  }

  void clear(Allocator* allocator) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
    while (strings_) {
 800535e:	e00a      	b.n	8005376 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0x22>
      auto node = strings_;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	60fb      	str	r3, [r7, #12]
      strings_ = node->next;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	601a      	str	r2, [r3, #0]
      StringNode::destroy(node, allocator);
 800536e:	6839      	ldr	r1, [r7, #0]
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f7ff ff9f 	bl	80052b4 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
    while (strings_) {
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f0      	bne.n	8005360 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0xc>
    }
  }
 800537e:	bf00      	nop
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>:
    node->data[n] = 0;  // force NUL terminator
    add(node);
    return node;
  }

  void add(StringNode* node) {
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node != nullptr);
    node->next = strings_;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	601a      	str	r2, [r3, #0]
    strings_ = node;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	601a      	str	r2, [r3, #0]
  }
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>:
        return node;
    }
    return nullptr;
  }

  void dereference(const char* s, Allocator* allocator) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
    StringNode* prev = nullptr;
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	e029      	b.n	8005418 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x6c>
      if (node->data == s) {
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	3308      	adds	r3, #8
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d11f      	bne.n	800540e <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x62>
        if (--node->references == 0) {
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	889b      	ldrh	r3, [r3, #4]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	809a      	strh	r2, [r3, #4]
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	889b      	ldrh	r3, [r3, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bf0c      	ite	eq
 80053e2:	2301      	moveq	r3, #1
 80053e4:	2300      	movne	r3, #0
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d019      	beq.n	8005420 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
          if (prev)
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d004      	beq.n	80053fc <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x50>
            prev->next = node->next;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	e003      	b.n	8005404 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x58>
          else
            strings_ = node->next;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	601a      	str	r2, [r3, #0]
          StringNode::destroy(node, allocator);
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	6938      	ldr	r0, [r7, #16]
 8005408:	f7ff ff54 	bl	80052b4 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
        }
        return;
 800540c:	e008      	b.n	8005420 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
      }
      prev = node;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1d2      	bne.n	80053c4 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x18>
 800541e:	e000      	b.n	8005422 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x76>
        return;
 8005420:	bf00      	nop
    }
  }
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>:
// https://arduinojson.org/v7/api/jsonstring/
class JsonString {
  friend struct detail::StringAdapter<JsonString>;

 public:
  JsonString() : str_(nullptr, 0, true) {}
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	2301      	movs	r3, #1
 8005434:	2200      	movs	r2, #0
 8005436:	2100      	movs	r1, #0
 8005438:	f7ff ff4c 	bl	80052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>:

  JsonString(const char* data, bool isStatic = false)
 8005446:	b590      	push	{r4, r7, lr}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	4613      	mov	r3, r2
 8005452:	71fb      	strb	r3, [r7, #7]
      : str_(data, data ? ::strlen(data) : 0, isStatic) {}
 8005454:	68fc      	ldr	r4, [r7, #12]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x20>
 800545c:	68b8      	ldr	r0, [r7, #8]
 800545e:	f7fa ff9f 	bl	80003a0 <strlen>
 8005462:	4602      	mov	r2, r0
 8005464:	e000      	b.n	8005468 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x22>
 8005466:	2200      	movs	r2, #0
 8005468:	79fb      	ldrb	r3, [r7, #7]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	4620      	mov	r0, r4
 800546e:	f7ff ff31 	bl	80052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4618      	mov	r0, r3
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	bd90      	pop	{r4, r7, pc}

0800547c <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>:
                                int> = 0>
  JsonString(const char* data, TSize sz, bool isStatic = false)
      : str_(data, size_t(sz), isStatic) {}

  // Returns a pointer to the characters.
  const char* c_str() const {
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
    return str_.data();
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff ff58 	bl	800533c <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 800548c:	4603      	mov	r3, r0
  }
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>:
namespace detail {
template <>
struct StringAdapter<JsonString> {
  using AdaptedString = RamString;

  static const AdaptedString& adapt(const JsonString& s) {
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
    return s.str_;
 800549e:	687b      	ldr	r3, [r7, #4]
  }
 80054a0:	4618      	mov	r0, r3
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>:

class CollectionIterator {
  friend class CollectionData;

 public:
  CollectionIterator() : slot_(nullptr), currentId_(NULL_SLOT) {}
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054c0:	809a      	strh	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>:

  void next(const ResourceManager* resources);

  bool done() const {
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
    return slot_ == nullptr;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bf0c      	ite	eq
 80054e0:	2301      	moveq	r3, #1
 80054e2:	2300      	movne	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
  }
 80054e6:	4618      	mov	r0, r3
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>:

  bool operator==(const CollectionIterator& other) const {
    return slot_ == other.slot_;
  }

  bool operator!=(const CollectionIterator& other) const {
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	6039      	str	r1, [r7, #0]
    return slot_ != other.slot_;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	bf14      	ite	ne
 8005508:	2301      	movne	r3, #1
 800550a:	2300      	moveq	r3, #0
 800550c:	b2db      	uxtb	r3, r3
  }
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>:

  VariantData* operator->() {
 800551a:	b580      	push	{r7, lr}
 800551c:	b082      	sub	sp, #8
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return data();
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f805 	bl	8005532 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8005528:	4603      	mov	r3, r0
  }
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>:
  const VariantData& operator*() const {
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return *data();
  }

  VariantData* data() {
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(slot_);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
  }
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>:
  SlotId head_ = NULL_SLOT;
  SlotId tail_ = NULL_SLOT;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
    return p;
 8005554:	683b      	ldr	r3, [r7, #0]
  }
 8005556:	4618      	mov	r0, r3
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>:
    const CollectionData* collection) {
  const void* data = collection;  // prevent warning cast-align
  return reinterpret_cast<const VariantData*>(data);
}

inline VariantData* collectionToVariant(CollectionData* collection) {
 8005562:	b480      	push	{r7}
 8005564:	b085      	sub	sp, #20
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  void* data = collection;  // prevent warning cast-align
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	60fb      	str	r3, [r7, #12]
  return reinterpret_cast<VariantData*>(data);
 800556e:	68fb      	ldr	r3, [r7, #12]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>:
#endif
  Object = 0x20,
  Array = 0x40,
};

inline bool operator&(VariantType type, VariantTypeBits bit) {
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	460a      	mov	r2, r1
 8005586:	71fb      	strb	r3, [r7, #7]
 8005588:	4613      	mov	r3, r2
 800558a:	71bb      	strb	r3, [r7, #6]
  return (uint8_t(type) & uint8_t(bit)) != 0;
 800558c:	79fa      	ldrb	r2, [r7, #7]
 800558e:	79bb      	ldrb	r3, [r7, #6]
 8005590:	4013      	ands	r3, r2
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	bf14      	ite	ne
 8005598:	2301      	movne	r3, #1
 800559a:	2300      	moveq	r3, #0
 800559c:	b2db      	uxtb	r3, r3
}
 800559e:	4618      	mov	r0, r3
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>:

union VariantContent {
  VariantContent() {}
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>:
  VariantType type_;
  SlotId next_;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
    return p;
 80055ca:	683b      	ldr	r3, [r7, #0]
  }
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>:

  static void operator delete(void*, void*) noexcept {}

  VariantData() : type_(VariantType::Null), next_(NULL_SLOT) {}
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff ffe1 	bl	80055aa <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	711a      	strb	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055f4:	80da      	strh	r2, [r3, #6]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>:

  SlotId next() const {
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
    return next_;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	88db      	ldrh	r3, [r3, #6]
  }
 800560c:	4618      	mov	r0, r3
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>:

  void setNext(SlotId slot) {
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	807b      	strh	r3, [r7, #2]
    next_ = slot;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	887a      	ldrh	r2, [r7, #2]
 8005628:	80da      	strh	r2, [r3, #6]
  }
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
      default:
        return true;
    }
  }

  ArrayData* asArray() {
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
    return isArray() ? &content_.asArray : 0;
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f85f 	bl	8005702 <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x18>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	e000      	b.n	8005650 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x1a>
 800564e:	2300      	movs	r3, #0
  }
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>:

  const ArrayData* asArray() const {
    return const_cast<VariantData*>(this)->asArray();
  }

  CollectionData* asCollection() {
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
    return isCollection() ? &content_.asCollection : 0;
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f85f 	bl	8005724 <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x18>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	e000      	b.n	8005672 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x1a>
 8005670:	2300      	movs	r3, #0
  }
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:
      default:
        return 0;
    }
  }

  ObjectData* asObject() {
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asObject : 0;
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f86c 	bl	8005760 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x18>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	e000      	b.n	8005694 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x1a>
 8005692:	2300      	movs	r3, #0
  }
 8005694:	4618      	mov	r0, r3
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:

  const ObjectData* asObject() const {
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff ffe8 	bl	800567a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 80056aa:	4603      	mov	r3, r0
  }
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>:
      default:
        return JsonString();
    }
  }

  JsonString asString() const {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
    switch (type_) {
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	791b      	ldrb	r3, [r3, #4]
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d002      	beq.n	80056cc <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x18>
 80056c6:	2b05      	cmp	r3, #5
 80056c8:	d008      	beq.n	80056dc <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x28>
 80056ca:	e013      	b.n	80056f4 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x40>
      case VariantType::LinkedString:
        return JsonString(content_.asLinkedString, true);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2201      	movs	r2, #1
 80056d2:	4619      	mov	r1, r3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff feb6 	bl	8005446 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 80056da:	e00e      	b.n	80056fa <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      case VariantType::OwnedString:
        return JsonString(content_.asOwnedString->data,
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f103 0108 	add.w	r1, r3, #8
                          content_.asOwnedString->length);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	88da      	ldrh	r2, [r3, #6]
 80056ea:	2300      	movs	r3, #0
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f001 fe85 	bl	80073fc <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 80056f2:	e002      	b.n	80056fa <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      default:
        return JsonString();
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff fe97 	bl	8005428 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
    }
  }
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>:
    if (!obj)
      return nullptr;
    return obj->getOrAddMember(key, resources);
  }

  bool isArray() const {
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Array;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	791b      	ldrb	r3, [r3, #4]
 800570e:	2b40      	cmp	r3, #64	@ 0x40
 8005710:	bf0c      	ite	eq
 8005712:	2301      	moveq	r3, #1
 8005714:	2300      	movne	r3, #0
 8005716:	b2db      	uxtb	r3, r3
  }
 8005718:	4618      	mov	r0, r3
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>:

  bool isBoolean() const {
    return type_ == VariantType::Boolean;
  }

  bool isCollection() const {
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::CollectionMask;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	791b      	ldrb	r3, [r3, #4]
 8005730:	2160      	movs	r1, #96	@ 0x60
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff ff22 	bl	800557c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8005738:	4603      	mov	r3, r0
  }
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>:

  bool isFloat() const {
 8005742:	b580      	push	{r7, lr}
 8005744:	b082      	sub	sp, #8
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::NumberBit;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	791b      	ldrb	r3, [r3, #4]
 800574e:	2108      	movs	r1, #8
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff ff13 	bl	800557c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8005756:	4603      	mov	r3, r0
  }
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>:
    if (!var)
      return true;
    return var->isNull();
  }

  bool isObject() const {
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Object;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	791b      	ldrb	r3, [r3, #4]
 800576c:	2b20      	cmp	r3, #32
 800576e:	bf0c      	ite	eq
 8005770:	2301      	moveq	r3, #1
 8005772:	2300      	movne	r3, #0
 8005774:	b2db      	uxtb	r3, r3
  }
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>:
    if (!var)
      return;
    var->removeMember(key, resources);
  }

  void reset() {  // TODO: remove
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
    type_ = VariantType::Null;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	711a      	strb	r2, [r3, #4]
  }
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>:

  void setBoolean(bool value) {
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	70fb      	strb	r3, [r7, #3]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Boolean;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2206      	movs	r2, #6
 80057ac:	711a      	strb	r2, [r3, #4]
    content_.asBoolean = value;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	78fa      	ldrb	r2, [r7, #3]
 80057b2:	701a      	strb	r2, [r3, #0]
  }
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>:
  }

  template <typename TAdaptedString>
  bool setString(TAdaptedString value, ResourceManager* resources);

  bool setString(StringNode* s, ResourceManager*) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
    setOwnedString(s);
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 f805 	bl	80057de <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 80057d4:	2301      	movs	r3, #1
  }
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>:
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::LinkedString;
    content_.asLinkedString = s;
  }

  void setOwnedString(StringNode* s) {
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::OwnedString;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2205      	movs	r2, #5
 80057ec:	711a      	strb	r2, [r3, #4]
    content_.asOwnedString = s;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	601a      	str	r2, [r3, #0]
  }
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>:
class CollectionData {
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005816:	805a      	strh	r2, [r3, #2]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4618      	mov	r0, r3
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ArrayData : public CollectionData {
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff ffe5 	bl	8005800 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>:

  static size_t size(const VariantData* var, const ResourceManager* resources) {
    return var != 0 ? var->size(resources) : 0;
  }

  ArrayData& toArray() {
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Array;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2240      	movs	r2, #64	@ 0x40
 800584c:	711a      	strb	r2, [r3, #4]
    new (&content_.asArray) ArrayData();
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4619      	mov	r1, r3
 8005852:	2004      	movs	r0, #4
 8005854:	f7ff fe79 	bl	800554a <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d006      	beq.n	800586c <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv+0x2c>
 800585e:	2200      	movs	r2, #0
 8005860:	801a      	strh	r2, [r3, #0]
 8005862:	2200      	movs	r2, #0
 8005864:	805a      	strh	r2, [r3, #2]
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff ffdd 	bl	8005826 <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>
    return content_.asArray;
 800586c:	687b      	ldr	r3, [r7, #4]
  }
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ObjectData : public CollectionData {
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff ffbd 	bl	8005800 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4618      	mov	r0, r3
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>:
      return 0;
    var->clear(resources);
    return &var->toArray();
  }

  ObjectData& toObject() {
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Object;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	711a      	strb	r2, [r3, #4]
    new (&content_.asObject) ObjectData();
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4619      	mov	r1, r3
 80058a2:	2004      	movs	r0, #4
 80058a4:	f7ff fe51 	bl	800554a <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d006      	beq.n	80058bc <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv+0x2c>
 80058ae:	2200      	movs	r2, #0
 80058b0:	801a      	strh	r2, [r3, #0]
 80058b2:	2200      	movs	r2, #0
 80058b4:	805a      	strh	r2, [r3, #2]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff ffdd 	bl	8005876 <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>
    return content_.asObject;
 80058bc:	687b      	ldr	r3, [r7, #4]
  }
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>:
  StringPool() = default;
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>:
  static_assert(sizeof(FreeSlot) <= sizeof(T), "T is too small");

 public:
  using Pool = MemoryPool<T>;

  MemoryPoolList() = default;
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	621a      	str	r2, [r3, #32]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2204      	movs	r2, #4
 80058fa:	84da      	strh	r2, [r3, #38]	@ 0x26
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005902:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4618      	mov	r0, r3
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>:
  };

 public:
  constexpr static size_t slotSize = sizeof(SlotData);

  ResourceManager(Allocator* allocator = DefaultAllocator::instance())
 8005912:	b580      	push	{r7, lr}
 8005914:	b082      	sub	sp, #8
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
      : allocator_(allocator), overflowed_(false) {}
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	711a      	strb	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3308      	adds	r3, #8
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff ffca 	bl	80058c6 <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	330c      	adds	r3, #12
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff ffd3 	bl	80058e2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>:
      overflowed_ = true;

    return node;
  }

  void saveString(StringNode* node) {
 8005946:	b580      	push	{r7, lr}
 8005948:	b082      	sub	sp, #8
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	6039      	str	r1, [r7, #0]
    stringPool_.add(node);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3308      	adds	r3, #8
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f7ff fd16 	bl	8005388 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
  }
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>:
  template <typename TAdaptedString>
  StringNode* getString(const TAdaptedString& str) const {
    return stringPool_.get(str);
  }

  StringNode* createString(size_t length) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
    auto node = StringNode::create(length, allocator_);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4619      	mov	r1, r3
 8005974:	6838      	ldr	r0, [r7, #0]
 8005976:	f7ff fc43 	bl	8005200 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800597a:	60f8      	str	r0, [r7, #12]
    if (!node)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj+0x24>
      overflowed_ = true;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	711a      	strb	r2, [r3, #4]
    return node;
 8005988:	68fb      	ldr	r3, [r7, #12]
  }
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>:

  StringNode* resizeString(StringNode* node, size_t length) {
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	607a      	str	r2, [r7, #4]
    node = StringNode::resize(node, length, allocator_);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	68b8      	ldr	r0, [r7, #8]
 80059a8:	f7ff fc55 	bl	8005256 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>
 80059ac:	60b8      	str	r0, [r7, #8]
    if (!node)
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d102      	bne.n	80059ba <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj+0x28>
      overflowed_ = true;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	711a      	strb	r2, [r3, #4]
    return node;
 80059ba:	68bb      	ldr	r3, [r7, #8]
  }
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>:

  void destroyString(StringNode* node) {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
    StringNode::destroy(node, allocator_);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4619      	mov	r1, r3
 80059d4:	6838      	ldr	r0, [r7, #0]
 80059d6:	f7ff fc6d 	bl	80052b4 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
  }
 80059da:	bf00      	nop
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>:

  void dereferenceString(const char* s) {
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b082      	sub	sp, #8
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	6039      	str	r1, [r7, #0]
    stringPool_.dereference(s, allocator_);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f103 0008 	add.w	r0, r3, #8
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	f7ff fcd7 	bl	80053ac <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>
  }
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>:

  void clear() {
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
    variantPools_.clear(allocator_);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f103 020c 	add.w	r2, r3, #12
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	f001 fd04 	bl	8007428 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
    overflowed_ = false;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	711a      	strb	r2, [r3, #4]
    stringPool_.clear(allocator_);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f103 0208 	add.w	r2, r3, #8
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4619      	mov	r1, r3
 8005a32:	4610      	mov	r0, r2
 8005a34:	f7ff fc8e 	bl	8005354 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
  }
 8005a38:	bf00      	nop
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>:

  void shrinkToFit() {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
    variantPools_.shrinkToFit(allocator_);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f103 020c 	add.w	r2, r3, #12
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f001 fd1f 	bl	8007498 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
  }
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(nullptr), resources_(nullptr) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data,
 8005a62:	b480      	push	{r7}
 8005a64:	b085      	sub	sp, #20
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	607a      	str	r2, [r7, #4]
                            const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	605a      	str	r2, [r3, #4]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>:
  size_t memoryUsage() const {
    return 0;
  }

 protected:
  const detail::VariantData* getData() const {
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
    return data_;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
  }
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>:

  const detail::ResourceManager* getResourceManager() const {
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
    return resources_;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
  }
 8005aac:	4618      	mov	r0, r3
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::VariantData* data, detail::ResourceManager* resources)
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	605a      	str	r2, [r3, #4]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>:

 private:
  detail::ResourceManager* getResourceManager() const {
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
    return resources_;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
  }
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>:

  detail::VariantData* getData() const {
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
    return data_;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
  }
 8005b02:	4618      	mov	r0, r3
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>:

  static JsonVariant fromJson(JsonVariant src) {
    return src;
  }

  static bool checkJson(JsonVariant src) {
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	463b      	mov	r3, r7
 8005b16:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8005b1a:	463b      	mov	r3, r7
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f001 fcf3 	bl	8007508 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8005b22:	60f8      	str	r0, [r7, #12]
    return !!data;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	bf14      	ite	ne
 8005b2a:	2301      	movne	r3, #1
 8005b2c:	2300      	moveq	r3, #0
 8005b2e:	b2db      	uxtb	r3, r3
  }
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>:

class JsonArrayIterator {
  friend class JsonArray;

 public:
  JsonArrayIterator() {}
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7ff fcb2 	bl	80054ac <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>:
  explicit JsonArrayIterator(detail::ArrayData::iterator iterator,
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	1d38      	adds	r0, r7, #4
 8005b5c:	e880 0006 	stmia.w	r0, {r1, r2}
 8005b60:	603b      	str	r3, [r7, #0]
                             detail::ResourceManager* resources)
      : iterator_(iterator), resources_(resources) {}
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	461a      	mov	r2, r3
 8005b66:	1d3b      	adds	r3, r7, #4
 8005b68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005b6c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	609a      	str	r2, [r3, #8]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>:

  JsonVariant operator*() {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
    return JsonVariant(iterator_.data(), resources_);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff fcce 	bl	8005532 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8005b96:	4601      	mov	r1, r0
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7ff ff8a 	bl	8005ab8 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>:

  bool operator==(const JsonArrayIterator& other) const {
    return iterator_ == other.iterator_;
  }

  bool operator!=(const JsonArrayIterator& other) const {
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
    return iterator_ != other.iterator_;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	4611      	mov	r1, r2
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff fc98 	bl	80054f2 <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>
 8005bc2:	4603      	mov	r3, r0
  }
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>:

  JsonArrayIterator& operator++() {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
    iterator_.next(resources_);
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4610      	mov	r0, r2
 8005bde:	f000 f936 	bl	8005e4e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    return *this;
 8005be2:	687b      	ldr	r3, [r7, #4]
  }
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>:

 public:
  using iterator = JsonArrayIterator;

  // Constructs an unbound reference.
  JsonArray() : data_(0), resources_(0) {}
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	605a      	str	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonArray(detail::ArrayData* data, detail::ResourceManager* resources)
 8005c0e:	b480      	push	{r7}
 8005c10:	b085      	sub	sp, #20
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	605a      	str	r2, [r3, #4]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>:
    return detail::ArrayData::addValue(data_, value, resources_);
  }

  // Returns an iterator to the first element of the array.
  // https://arduinojson.org/v7/api/jsonarray/begin/
  iterator begin() const {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
    if (!data_)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d103      	bne.n	8005c4e <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x1a>
      return iterator();
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff ff76 	bl	8005b38 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
 8005c4c:	e011      	b.n	8005c72 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x3e>
    return iterator(data_->createIterator(resources_), resources_);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4619      	mov	r1, r3
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	f107 0308 	add.w	r3, r7, #8
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 f919 	bl	8005e94 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f107 0208 	add.w	r2, r7, #8
 8005c6a:	ca06      	ldmia	r2, {r1, r2}
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff ff70 	bl	8005b52 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>
  }
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>:

  // Returns an iterator following the last element of the array.
  // https://arduinojson.org/v7/api/jsonarray/end/
  iterator end() const {
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]
    return iterator();
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff ff57 	bl	8005b38 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
  }
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>:

 public:
  using iterator = JsonObjectIterator;

  // Creates an unbound reference.
  JsonObject() : data_(0), resources_(0) {}
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	605a      	str	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonObject(detail::ObjectData* data, detail::ResourceManager* resource)
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resource) {}
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	605a      	str	r2, [r3, #4]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
    return resources_;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
  }
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>:

  detail::VariantData* getData() const {
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
    return detail::collectionToVariant(data_);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff fc2f 	bl	8005562 <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8005d04:	4603      	mov	r3, r0
  }
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>:
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
  friend class detail::VariantAttorney;

 public:
  explicit JsonDocument(Allocator* alloc = detail::DefaultAllocator::instance())
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	6039      	str	r1, [r7, #0]
      : resources_(alloc) {}
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6839      	ldr	r1, [r7, #0]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff fdf8 	bl	8005912 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3338      	adds	r3, #56	@ 0x38
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7ff fc56 	bl	80055d8 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>:
    return resources_.allocator();
  }

  // Reduces the capacity of the memory pool to match the current usage.
  // https://arduinojson.org/v7/api/jsondocument/shrinktofit/
  void shrinkToFit() {
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b082      	sub	sp, #8
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
    resources_.shrinkToFit();
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff fe7d 	bl	8005a40 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>
  }
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>:
    return getVariant().template as<T>();
  }

  // Empties the document and resets the memory pool
  // https://arduinojson.org/v7/api/jsondocument/clear/
  void clear() {
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
    resources_.clear();
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff fe54 	bl	8005a06 <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>
    data_.reset();
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3338      	adds	r3, #56	@ 0x38
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff fd0d 	bl	8005782 <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>
  }
 8005d68:	bf00      	nop
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>:

  JsonVariantConst getVariant() const {
    return JsonVariantConst(&data_, &resources_);
  }

  detail::ResourceManager* getResourceManager() {
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
    return &resources_;
 8005d78:	687b      	ldr	r3, [r7, #4]
  }
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
    return &data_;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3338      	adds	r3, #56	@ 0x38
  }
 8005d92:	4618      	mov	r0, r3
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
    return &data_;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3338      	adds	r3, #56	@ 0x38
  }
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>:
    --index;
  }
  return it;
}

inline VariantData* ArrayData::addElement(ResourceManager* resources) {
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]
  auto slot = resources->allocVariant();
 8005dc0:	f107 0308 	add.w	r3, r7, #8
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 f93e 	bl	8006048 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!slot)
 8005dcc:	f107 0308 	add.w	r3, r7, #8
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f001 fbbd 	bl	8007550 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f083 0301 	eor.w	r3, r3, #1
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x30>
    return nullptr;
 8005de2:	2300      	movs	r3, #0
 8005de4:	e00d      	b.n	8005e02 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x4c>
  CollectionData::appendOne(slot, resources);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	f107 0208 	add.w	r2, r7, #8
 8005dee:	ca06      	ldmia	r2, {r1, r2}
 8005df0:	f000 f867 	bl	8005ec2 <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>
  return slot.ptr();
 8005df4:	f107 0308 	add.w	r3, r7, #8
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 fbba 	bl	8007572 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	bf00      	nop
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>:
#include <ArduinoJson/Variant/VariantCompare.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline CollectionIterator::CollectionIterator(VariantData* slot, SlotId slotId)
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	4613      	mov	r3, r2
 8005e16:	80fb      	strh	r3, [r7, #6]
    : slot_(slot), currentId_(slotId) {
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	88fa      	ldrh	r2, [r7, #6]
 8005e22:	809a      	strh	r2, [r3, #4]
  nextId_ = slot_ ? slot_->next() : NULL_SLOT;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x32>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff fbe5 	bl	8005600 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8005e36:	4603      	mov	r3, r0
 8005e38:	461a      	mov	r2, r3
 8005e3a:	e001      	b.n	8005e40 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x36>
 8005e3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	80da      	strh	r2, [r3, #6]
}
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>:

inline void CollectionIterator::next(const ResourceManager* resources) {
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b082      	sub	sp, #8
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
  ARDUINOJSON_ASSERT(currentId_ != NULL_SLOT);
  slot_ = resources->getVariant(nextId_);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	88db      	ldrh	r3, [r3, #6]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6838      	ldr	r0, [r7, #0]
 8005e60:	f000 f965 	bl	800612e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005e64:	4602      	mov	r2, r0
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	601a      	str	r2, [r3, #0]
  currentId_ = nextId_;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	88da      	ldrh	r2, [r3, #6]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	809a      	strh	r2, [r3, #4]
  if (slot_)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d008      	beq.n	8005e8c <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE+0x3e>
    nextId_ = slot_->next();
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff fbbe 	bl	8005600 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8005e84:	4603      	mov	r3, r0
 8005e86:	461a      	mov	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	80da      	strh	r2, [r3, #6]
}
 8005e8c:	bf00      	nop
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>:

inline CollectionData::iterator CollectionData::createIterator(
    const ResourceManager* resources) const {
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
  return iterator(resources->getVariant(head_), head_);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f941 	bl	800612e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005eac:	4601      	mov	r1, r0
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7ff ffa8 	bl	8005e0a <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>
}
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>:

inline void CollectionData::appendOne(Slot<VariantData> slot,
                                      const ResourceManager* resources) {
 8005ec2:	b590      	push	{r4, r7, lr}
 8005ec4:	b087      	sub	sp, #28
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	1d38      	adds	r0, r7, #4
 8005ecc:	e880 0006 	stmia.w	r0, {r1, r2}
 8005ed0:	603b      	str	r3, [r7, #0]
  if (tail_ != NULL_SLOT) {
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	885b      	ldrh	r3, [r3, #2]
 8005ed6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d019      	beq.n	8005f12 <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x50>
    auto tail = resources->getVariant(tail_);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	885b      	ldrh	r3, [r3, #2]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6838      	ldr	r0, [r7, #0]
 8005ee6:	f000 f922 	bl	800612e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005eea:	6178      	str	r0, [r7, #20]
    tail->setNext(slot.id());
 8005eec:	697c      	ldr	r4, [r7, #20]
 8005eee:	1d3b      	adds	r3, r7, #4
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 fb4a 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4620      	mov	r0, r4
 8005efc:	f7ff fb8c 	bl	8005618 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = slot.id();
 8005f00:	1d3b      	adds	r3, r7, #4
 8005f02:	4618      	mov	r0, r3
 8005f04:	f001 fb41 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = slot.id();
    tail_ = slot.id();
  }
}
 8005f10:	e00f      	b.n	8005f32 <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x70>
    head_ = slot.id();
 8005f12:	1d3b      	adds	r3, r7, #4
 8005f14:	4618      	mov	r0, r3
 8005f16:	f001 fb38 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	801a      	strh	r2, [r3, #0]
    tail_ = slot.id();
 8005f22:	1d3b      	adds	r3, r7, #4
 8005f24:	4618      	mov	r0, r3
 8005f26:	f001 fb30 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	805a      	strh	r2, [r3, #2]
}
 8005f32:	bf00      	nop
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd90      	pop	{r4, r7, pc}

08005f3a <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>:

inline void CollectionData::appendPair(Slot<VariantData> key,
                                       Slot<VariantData> value,
                                       const ResourceManager* resources) {
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	b590      	push	{r4, r7, lr}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	1d38      	adds	r0, r7, #4
 8005f46:	e880 0006 	stmia.w	r0, {r1, r2}
 8005f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  key->setNext(value.id());
 8005f4c:	1d3b      	adds	r3, r7, #4
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f001 fb27 	bl	80075a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8005f54:	4604      	mov	r4, r0
 8005f56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 fb15 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005f60:	4603      	mov	r3, r0
 8005f62:	4619      	mov	r1, r3
 8005f64:	4620      	mov	r0, r4
 8005f66:	f7ff fb57 	bl	8005618 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>

  if (tail_ != NULL_SLOT) {
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	885b      	ldrh	r3, [r3, #2]
 8005f6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d01a      	beq.n	8005fac <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x72>
    auto tail = resources->getVariant(tail_);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	885b      	ldrh	r3, [r3, #2]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005f7e:	f000 f8d6 	bl	800612e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005f82:	6178      	str	r0, [r7, #20]
    tail->setNext(key.id());
 8005f84:	697c      	ldr	r4, [r7, #20]
 8005f86:	1d3b      	adds	r3, r7, #4
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f001 fafe 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	4619      	mov	r1, r3
 8005f92:	4620      	mov	r0, r4
 8005f94:	f7ff fb40 	bl	8005618 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = value.id();
 8005f98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f001 faf4 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = key.id();
    tail_ = value.id();
  }
}
 8005faa:	e010      	b.n	8005fce <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x94>
    head_ = key.id();
 8005fac:	1d3b      	adds	r3, r7, #4
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 faeb 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	801a      	strh	r2, [r3, #0]
    tail_ = value.id();
 8005fbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f001 fae2 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	461a      	mov	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	805a      	strh	r2, [r3, #2]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005fd8:	b002      	add	sp, #8
 8005fda:	4770      	bx	lr

08005fdc <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>:

inline void CollectionData::clear(ResourceManager* resources) {
 8005fdc:	b590      	push	{r4, r7, lr}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  auto next = head_;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	82fb      	strh	r3, [r7, #22]
  while (next != NULL_SLOT) {
 8005fec:	e01b      	b.n	8006026 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x4a>
    auto currId = next;
 8005fee:	8afb      	ldrh	r3, [r7, #22]
 8005ff0:	82bb      	strh	r3, [r7, #20]
    auto slot = resources->getVariant(next);
 8005ff2:	8afb      	ldrh	r3, [r7, #22]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6838      	ldr	r0, [r7, #0]
 8005ff8:	f000 f899 	bl	800612e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005ffc:	6138      	str	r0, [r7, #16]
    next = slot->next();
 8005ffe:	6938      	ldr	r0, [r7, #16]
 8006000:	f7ff fafe 	bl	8005600 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8006004:	4603      	mov	r3, r0
 8006006:	82fb      	strh	r3, [r7, #22]
    resources->freeVariant({slot, currId});
 8006008:	683c      	ldr	r4, [r7, #0]
 800600a:	8aba      	ldrh	r2, [r7, #20]
 800600c:	f107 0308 	add.w	r3, r7, #8
 8006010:	6939      	ldr	r1, [r7, #16]
 8006012:	4618      	mov	r0, r3
 8006014:	f001 fad1 	bl	80075ba <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 8006018:	f107 0308 	add.w	r3, r7, #8
 800601c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006020:	4620      	mov	r0, r4
 8006022:	f000 f851 	bl	80060c8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>
  while (next != NULL_SLOT) {
 8006026:	8afb      	ldrh	r3, [r7, #22]
 8006028:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800602c:	4293      	cmp	r3, r2
 800602e:	d1de      	bne.n	8005fee <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x12>
  }

  head_ = NULL_SLOT;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006036:	801a      	strh	r2, [r3, #0]
  tail_ = NULL_SLOT;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800603e:	805a      	strh	r2, [r3, #2]
}
 8006040:	bf00      	nop
 8006042:	371c      	adds	r7, #28
 8006044:	46bd      	mov	sp, r7
 8006046:	bd90      	pop	{r4, r7, pc}

08006048 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>:
#include <ArduinoJson/Polyfills/alias_cast.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline Slot<VariantData> ResourceManager::allocVariant() {
 8006048:	b590      	push	{r4, r7, lr}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	f103 010c 	add.w	r1, r3, #12
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	f107 0308 	add.w	r3, r7, #8
 8006060:	4618      	mov	r0, r3
 8006062:	f001 fad0 	bl	8007606 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8006066:	f107 0308 	add.w	r3, r7, #8
 800606a:	4618      	mov	r0, r3
 800606c:	f001 fb0e 	bl	800768c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8006070:	4603      	mov	r3, r0
 8006072:	f083 0301 	eor.w	r3, r3, #1
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d006      	beq.n	800608a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x42>
    overflowed_ = true;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2201      	movs	r2, #1
 8006080:	711a      	strb	r2, [r3, #4]
    return {};
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f001 faad 	bl	80075e2 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>
 8006088:	e01a      	b.n	80060c0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x78>
  }
  return {new (&p->variant) VariantData, p.id()};
 800608a:	f107 0308 	add.w	r3, r7, #8
 800608e:	4618      	mov	r0, r3
 8006090:	f001 fb0d 	bl	80076ae <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 8006094:	4603      	mov	r3, r0
 8006096:	4619      	mov	r1, r3
 8006098:	2008      	movs	r0, #8
 800609a:	f7ff fa91 	bl	80055c0 <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>
 800609e:	4604      	mov	r4, r0
 80060a0:	2c00      	cmp	r4, #0
 80060a2:	d002      	beq.n	80060aa <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x62>
 80060a4:	4620      	mov	r0, r4
 80060a6:	f7ff fa97 	bl	80055d8 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 80060aa:	f107 0308 	add.w	r3, r7, #8
 80060ae:	4618      	mov	r0, r3
 80060b0:	f001 fb09 	bl	80076c6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 80060b4:	4603      	mov	r3, r0
 80060b6:	461a      	mov	r2, r3
 80060b8:	4621      	mov	r1, r4
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 fa7d 	bl	80075ba <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
}
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd90      	pop	{r4, r7, pc}

080060c8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>:

inline void ResourceManager::freeVariant(Slot<VariantData> variant) {
 80060c8:	b5b0      	push	{r4, r5, r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	1d3b      	adds	r3, r7, #4
 80060d2:	e883 0006 	stmia.w	r3, {r1, r2}
  variant->clear(this);
 80060d6:	1d3b      	adds	r3, r7, #4
 80060d8:	4618      	mov	r0, r3
 80060da:	f001 fa62 	bl	80075a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 80060de:	4603      	mov	r3, r0
 80060e0:	68f9      	ldr	r1, [r7, #12]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fa1c 	bl	8006520 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
  variantPools_.freeSlot({alias_cast<SlotData*>(variant.ptr()), variant.id()});
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f103 040c 	add.w	r4, r3, #12
 80060ee:	1d3b      	adds	r3, r7, #4
 80060f0:	4618      	mov	r0, r3
 80060f2:	f001 fa3e 	bl	8007572 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 80060f6:	4603      	mov	r3, r0
 80060f8:	4618      	mov	r0, r3
 80060fa:	f001 faf0 	bl	80076de <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>
 80060fe:	4605      	mov	r5, r0
 8006100:	1d3b      	adds	r3, r7, #4
 8006102:	4618      	mov	r0, r3
 8006104:	f001 fa41 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8006108:	4603      	mov	r3, r0
 800610a:	461a      	mov	r2, r3
 800610c:	f107 0310 	add.w	r3, r7, #16
 8006110:	4629      	mov	r1, r5
 8006112:	4618      	mov	r0, r3
 8006114:	f001 faf0 	bl	80076f8 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8006118:	f107 0310 	add.w	r3, r7, #16
 800611c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006120:	4620      	mov	r0, r4
 8006122:	f001 fafd 	bl	8007720 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8006126:	bf00      	nop
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bdb0      	pop	{r4, r5, r7, pc}

0800612e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>:

inline VariantData* ResourceManager::getVariant(SlotId id) const {
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	460b      	mov	r3, r1
 8006138:	807b      	strh	r3, [r7, #2]
  return reinterpret_cast<VariantData*>(variantPools_.getSlot(id));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	330c      	adds	r3, #12
 800613e:	887a      	ldrh	r2, [r7, #2]
 8006140:	4611      	mov	r1, r2
 8006142:	4618      	mov	r0, r3
 8006144:	f001 fb08 	bl	8007758 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8006148:	4603      	mov	r3, r0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>:

#if ARDUINOJSON_USE_EXTENSIONS
inline Slot<VariantExtension> ResourceManager::allocExtension() {
 8006152:	b590      	push	{r4, r7, lr}
 8006154:	b085      	sub	sp, #20
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	f103 010c 	add.w	r1, r3, #12
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	f107 0308 	add.w	r3, r7, #8
 800616a:	4618      	mov	r0, r3
 800616c:	f001 fa4b 	bl	8007606 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8006170:	f107 0308 	add.w	r3, r7, #8
 8006174:	4618      	mov	r0, r3
 8006176:	f001 fa89 	bl	800768c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 800617a:	4603      	mov	r3, r0
 800617c:	f083 0301 	eor.w	r3, r3, #1
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d006      	beq.n	8006194 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x42>
    overflowed_ = true;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2201      	movs	r2, #1
 800618a:	711a      	strb	r2, [r3, #4]
    return {};
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 fb07 	bl	80077a0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>
 8006192:	e011      	b.n	80061b8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x66>
  }
  return {&p->extension, p.id()};
 8006194:	f107 0308 	add.w	r3, r7, #8
 8006198:	4618      	mov	r0, r3
 800619a:	f001 fa88 	bl	80076ae <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 800619e:	4603      	mov	r3, r0
 80061a0:	461c      	mov	r4, r3
 80061a2:	f107 0308 	add.w	r3, r7, #8
 80061a6:	4618      	mov	r0, r3
 80061a8:	f001 fa8d 	bl	80076c6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 80061ac:	4603      	mov	r3, r0
 80061ae:	461a      	mov	r2, r3
 80061b0:	4621      	mov	r1, r4
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f001 fb06 	bl	80077c4 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>
}
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd90      	pop	{r4, r7, pc}

080061c0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>:

inline void ResourceManager::freeExtension(SlotId id) {
 80061c0:	b590      	push	{r4, r7, lr}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	807b      	strh	r3, [r7, #2]
  auto p = getExtension(id);
 80061cc:	887b      	ldrh	r3, [r7, #2]
 80061ce:	4619      	mov	r1, r3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f816 	bl	8006202 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 80061d6:	6178      	str	r0, [r7, #20]
  variantPools_.freeSlot({reinterpret_cast<SlotData*>(p), id});
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f103 040c 	add.w	r4, r3, #12
 80061de:	887a      	ldrh	r2, [r7, #2]
 80061e0:	f107 030c 	add.w	r3, r7, #12
 80061e4:	6979      	ldr	r1, [r7, #20]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f001 fa86 	bl	80076f8 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 80061ec:	f107 030c 	add.w	r3, r7, #12
 80061f0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80061f4:	4620      	mov	r0, r4
 80061f6:	f001 fa93 	bl	8007720 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 80061fa:	bf00      	nop
 80061fc:	371c      	adds	r7, #28
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd90      	pop	{r4, r7, pc}

08006202 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>:

inline VariantExtension* ResourceManager::getExtension(SlotId id) const {
 8006202:	b580      	push	{r7, lr}
 8006204:	b082      	sub	sp, #8
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	460b      	mov	r3, r1
 800620c:	807b      	strh	r3, [r7, #2]
  return &variantPools_.getSlot(id)->extension;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	330c      	adds	r3, #12
 8006212:	887a      	ldrh	r2, [r7, #2]
 8006214:	4611      	mov	r1, r2
 8006216:	4618      	mov	r0, r3
 8006218:	f001 fa9e 	bl	8007758 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 800621c:	4603      	mov	r3, r0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	4603      	mov	r3, r0
 800622e:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(false);
 8006230:	2000      	movs	r0, #0
 8006232:	f000 f819 	bl	8006268 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 8006236:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0')
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x1e>
        return 0;
 8006240:	2300      	movs	r3, #0
 8006242:	e00c      	b.n	800625e <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	79fa      	ldrb	r2, [r7, #7]
 800624a:	429a      	cmp	r2, r3
 800624c:	d103      	bne.n	8006256 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x30>
        return p[1];
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3301      	adds	r3, #1
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	e003      	b.n	800625e <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3302      	adds	r3, #2
 800625a:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0')
 800625c:	e7ec      	b.n	8006238 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x12>
    }
  }
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>:

 private:
  static const char* escapeTable(bool isSerializing) {
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	4603      	mov	r3, r0
 8006270:	71fb      	strb	r3, [r7, #7]
    return &"//''\"\"\\\\b\bf\fn\nr\rt\t"[isSerializing ? 4 : 0];
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x14>
 8006278:	2304      	movs	r3, #4
 800627a:	e000      	b.n	800627e <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x16>
 800627c:	2300      	movs	r3, #0
 800627e:	4a04      	ldr	r2, [pc, #16]	@ (8006290 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x28>)
 8006280:	4413      	add	r3, r2
  }
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	0802a238 	.word	0x0802a238

08006294 <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>:

class StringBuilder {
 public:
  static const size_t initialCapacity = 31;

  StringBuilder(ResourceManager* resources) : resources_(resources) {}
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	605a      	str	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	609a      	str	r2, [r3, #8]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4618      	mov	r0, r3
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>:

  ~StringBuilder() {
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
    if (node_)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d007      	beq.n	80062de <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev+0x20>
      resources_->destroyString(node_);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	4619      	mov	r1, r3
 80062d8:	4610      	mov	r0, r2
 80062da:	f7ff fb73 	bl	80059c4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>
  }
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4618      	mov	r0, r3
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>:

  void startString() {
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
    size_ = 0;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	609a      	str	r2, [r3, #8]
    if (!node_)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d108      	bne.n	8006310 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv+0x28>
      node_ = resources_->createString(initialCapacity);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	211f      	movs	r1, #31
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff fb2d 	bl	8005964 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>
 800630a:	4602      	mov	r2, r0
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	605a      	str	r2, [r3, #4]
  }
 8006310:	bf00      	nop
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>:

  StringNode* save() {
 8006318:	b590      	push	{r4, r7, lr}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	4413      	add	r3, r2
 800632a:	2200      	movs	r2, #0
 800632c:	721a      	strb	r2, [r3, #8]
    StringNode* node = resources_->getString(adaptString(node_->data, size_));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681c      	ldr	r4, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f103 0108 	add.w	r1, r3, #8
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	f107 0308 	add.w	r3, r7, #8
 8006342:	4618      	mov	r0, r3
 8006344:	f001 fa52 	bl	80077ec <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8006348:	f107 0308 	add.w	r3, r7, #8
 800634c:	4619      	mov	r1, r3
 800634e:	4620      	mov	r0, r4
 8006350:	f001 fa5d 	bl	800780e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8006354:	6178      	str	r0, [r7, #20]
    if (!node) {
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d113      	bne.n	8006384 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x6c>
      node = resources_->resizeString(node_, size_);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6818      	ldr	r0, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6859      	ldr	r1, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	461a      	mov	r2, r3
 800636a:	f7ff fb12 	bl	8005992 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 800636e:	6178      	str	r0, [r7, #20]
      ARDUINOJSON_ASSERT(node != nullptr);  // realloc to smaller can't fail
      resources_->saveString(node);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6979      	ldr	r1, [r7, #20]
 8006376:	4618      	mov	r0, r3
 8006378:	f7ff fae5 	bl	8005946 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>
      node_ = nullptr;  // next time we need a new string
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	605a      	str	r2, [r3, #4]
 8006382:	e005      	b.n	8006390 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x78>
    } else {
      node->references++;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	889b      	ldrh	r3, [r3, #4]
 8006388:	3301      	adds	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	809a      	strh	r2, [r3, #4]
    }
    return node;
 8006390:	697b      	ldr	r3, [r7, #20]
  }
 8006392:	4618      	mov	r0, r3
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	bd90      	pop	{r4, r7, pc}

0800639a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0)  // TODO: memcpy
      append(*s++);
  }

  void append(char c) {
 800639a:	b590      	push	{r4, r7, lr}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	460b      	mov	r3, r1
 80063a4:	70fb      	strb	r3, [r7, #3]
    if (node_ && size_ == node_->length)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d014      	beq.n	80063d8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6852      	ldr	r2, [r2, #4]
 80063b6:	88d2      	ldrh	r2, [r2, #6]
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d10d      	bne.n	80063d8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
      node_ = resources_->resizeString(node_, size_ * 2U + 1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6859      	ldr	r1, [r3, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	3301      	adds	r3, #1
 80063cc:	461a      	mov	r2, r3
 80063ce:	f7ff fae0 	bl	8005992 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 80063d2:	4602      	mov	r2, r0
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	605a      	str	r2, [r3, #4]
    if (node_)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x5c>
      node_->data[size_++] = c;
 80063e0:	78fc      	ldrb	r4, [r7, #3]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	1c58      	adds	r0, r3, #1
 80063ec:	6879      	ldr	r1, [r7, #4]
 80063ee:	6088      	str	r0, [r1, #8]
 80063f0:	4413      	add	r3, r2
 80063f2:	4622      	mov	r2, r4
 80063f4:	721a      	strb	r2, [r3, #8]
  }
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd90      	pop	{r4, r7, pc}

080063fe <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>:

  bool isValid() const {
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
    return node_ != nullptr;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	bf14      	ite	ne
 800640e:	2301      	movne	r3, #1
 8006410:	2300      	moveq	r3, #0
 8006412:	b2db      	uxtb	r3, r3
  }
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>:

  size_t size() const {
    return size_;
  }

  JsonString str() const {
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	4413      	add	r3, r2
 8006434:	2200      	movs	r2, #0
 8006436:	721a      	strb	r2, [r3, #8]
    return JsonString(node_->data, size_);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f103 0108 	add.w	r1, r3, #8
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	2300      	movs	r3, #0
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 f9f1 	bl	800782e <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>
  }
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(const char* src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static const char* fromJson(JsonVariantConst src) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	463b      	mov	r3, r7
 800645c:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8006460:	463b      	mov	r3, r7
 8006462:	4618      	mov	r0, r3
 8006464:	f001 f85c 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8006468:	6178      	str	r0, [r7, #20]
    return data ? data->asString().c_str() : 0;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00c      	beq.n	800648a <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x36>
 8006470:	f107 0308 	add.w	r3, r7, #8
 8006474:	6979      	ldr	r1, [r7, #20]
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff f91c 	bl	80056b4 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 800647c:	f107 0308 	add.w	r3, r7, #8
 8006480:	4618      	mov	r0, r3
 8006482:	f7fe fffb 	bl	800547c <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8006486:	4603      	mov	r3, r0
 8006488:	e000      	b.n	800648c <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x38>
 800648a:	2300      	movs	r3, #0
  }
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonArray>().set(src);
  }

  static JsonArray fromJson(JsonVariant src) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 80064a2:	1d3b      	adds	r3, r7, #4
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 f82f 	bl	8007508 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80064aa:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 80064ac:	1d3b      	adds	r3, r7, #4
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 f9cf 	bl	8007852 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80064b4:	6138      	str	r0, [r7, #16]
    return JsonArray(data != 0 ? data->asArray() : 0, resources);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d004      	beq.n	80064c6 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x32>
 80064bc:	6978      	ldr	r0, [r7, #20]
 80064be:	f7ff f8ba 	bl	8005636 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 80064c2:	4603      	mov	r3, r0
 80064c4:	e000      	b.n	80064c8 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x34>
 80064c6:	2300      	movs	r3, #0
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4619      	mov	r1, r3
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f7ff fb9e 	bl	8005c0e <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>
  }
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonObject>().set(src);
  }

  static JsonObject fromJson(JsonVariant src) {
 80064da:	b580      	push	{r7, lr}
 80064dc:	b086      	sub	sp, #24
 80064de:	af00      	add	r7, sp, #0
 80064e0:	60f8      	str	r0, [r7, #12]
 80064e2:	1d3b      	adds	r3, r7, #4
 80064e4:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 80064e8:	1d3b      	adds	r3, r7, #4
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 f80c 	bl	8007508 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80064f0:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 80064f2:	1d3b      	adds	r3, r7, #4
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 f9ac 	bl	8007852 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80064fa:	6138      	str	r0, [r7, #16]
    return JsonObject(data != 0 ? data->asObject() : 0, resources);
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d004      	beq.n	800650c <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x32>
 8006502:	6978      	ldr	r0, [r7, #20]
 8006504:	f7ff f8b9 	bl	800567a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8006508:	4603      	mov	r3, r0
 800650a:	e000      	b.n	800650e <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x34>
 800650c:	2300      	movs	r3, #0
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4619      	mov	r1, r3
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f7ff fbce 	bl	8005cb4 <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>
  }
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>:
  }

  return false;
}

inline void VariantData::clear(ResourceManager* resources) {
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  if (type_ & VariantTypeBits::OwnedStringBit)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	791b      	ldrb	r3, [r3, #4]
 800652e:	2101      	movs	r1, #1
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff f823 	bl	800557c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d006      	beq.n	800654a <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x2a>
    resources->dereferenceString(content_.asOwnedString->data);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3308      	adds	r3, #8
 8006542:	4619      	mov	r1, r3
 8006544:	6838      	ldr	r0, [r7, #0]
 8006546:	f7ff fa4c 	bl	80059e2 <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>

#if ARDUINOJSON_USE_EXTENSIONS
  if (type_ & VariantTypeBits::ExtensionBit)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	791b      	ldrb	r3, [r3, #4]
 800654e:	2110      	movs	r1, #16
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff f813 	bl	800557c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d005      	beq.n	8006568 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x48>
    resources->freeExtension(content_.asSlotId);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	4619      	mov	r1, r3
 8006562:	6838      	ldr	r0, [r7, #0]
 8006564:	f7ff fe2c 	bl	80061c0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>
#endif

  auto collection = asCollection();
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff f875 	bl	8005658 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>
 800656e:	60f8      	str	r0, [r7, #12]
  if (collection)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x5e>
    collection->clear(resources);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f7ff fd2f 	bl	8005fdc <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>

  type_ = VariantType::Null;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	711a      	strb	r2, [r3, #4]
}
 8006584:	bf00      	nop
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>:

#if ARDUINOJSON_USE_EXTENSIONS
inline const VariantExtension* VariantData::getExtension(
    const ResourceManager* resources) const {
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  return type_ & VariantTypeBits::ExtensionBit
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	791b      	ldrb	r3, [r3, #4]
 800659a:	2110      	movs	r1, #16
 800659c:	4618      	mov	r0, r3
 800659e:	f7fe ffed 	bl	800557c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80065a2:	4603      	mov	r3, r0
             ? resources->getExtension(content_.asSlotId)
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d007      	beq.n	80065b8 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2c>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	4619      	mov	r1, r3
 80065ae:	6838      	ldr	r0, [r7, #0]
 80065b0:	f7ff fe27 	bl	8006202 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 80065b4:	4603      	mov	r3, r0
             : nullptr;
 80065b6:	e000      	b.n	80065ba <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2e>
             ? resources->getExtension(content_.asSlotId)
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>:
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : code_(c) {}
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	460b      	mov	r3, r1
 80065cc:	70fb      	strb	r3, [r7, #3]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	78fa      	ldrb	r2, [r7, #3]
 80065d2:	701a      	strb	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4618      	mov	r0, r3
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>:
  explicit operator bool() const {
    return code_ != Ok;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
    return code_;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	781b      	ldrb	r3, [r3, #0]
  }
 80065ee:	4618      	mov	r0, r3
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
	...

080065fc <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>:

  const char* c_str() const {
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
    static const char* messages[] = {
        "Ok",           "EmptyInput", "IncompleteInput",
        "InvalidInput", "NoMemory",   "TooDeep"};
    ARDUINOJSON_ASSERT(static_cast<size_t>(code_) <
                       sizeof(messages) / sizeof(messages[0]));
    return messages[code_];
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	4b04      	ldr	r3, [pc, #16]	@ (800661c <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv+0x20>)
 800660c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  }
 8006610:	4618      	mov	r0, r3
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	24000004 	.word	0x24000004

08006620 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>:
};
}  // namespace DeserializationOption

namespace detail {
struct AllowAllFilter {
  bool allow() const {
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
    return true;
 8006628:	2301      	movs	r3, #1
  }
 800662a:	4618      	mov	r0, r3
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>:

  bool allowArray() const {
 8006636:	b480      	push	{r7}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
    return true;
 800663e:	2301      	movs	r3, #1
  }
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>:

  bool allowObject() const {
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
    return true;
 8006654:	2301      	movs	r3, #1
  }
 8006656:	4618      	mov	r0, r3
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>:

  bool allowValue() const {
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
    return true;
 800666a:	2301      	movs	r3, #1
  }
 800666c:	4618      	mov	r0, r3
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

namespace DeserializationOption {
class NestingLimit {
 public:
  NestingLimit() : value_(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	220a      	movs	r2, #10
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>:
  explicit NestingLimit(uint8_t n) : value_(n) {}
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	78fa      	ldrb	r2, [r7, #3]
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4618      	mov	r0, r3
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>:

  NestingLimit decrement() const {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(value_ > 0);
    return NestingLimit(static_cast<uint8_t>(value_ - 1));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	f107 030c 	add.w	r3, r7, #12
 80066c8:	4611      	mov	r1, r2
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff ffe2 	bl	8006694 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>
 80066d0:	7b3b      	ldrb	r3, [r7, #12]
  }
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>:

  bool reached() const {
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
    return value_ == 0;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	bf0c      	ite	eq
 80066ea:	2301      	moveq	r3, #1
 80066ec:	2300      	movne	r3, #0
 80066ee:	b2db      	uxtb	r3, r3
  }
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>:
    DeserializationOption::NestingLimit nestingLimit, TFilter filter) {
  return {filter, nestingLimit};
}

inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions(
    DeserializationOption::NestingLimit nestingLimit = {}) {
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	7138      	strb	r0, [r7, #4]
  return {{}, nestingLimit};
 8006704:	793b      	ldrb	r3, [r7, #4]
 8006706:	737b      	strb	r3, [r7, #13]
 8006708:	2300      	movs	r3, #0
 800670a:	7b3a      	ldrb	r2, [r7, #12]
 800670c:	f362 0307 	bfi	r3, r2, #0, #8
 8006710:	7b7a      	ldrb	r2, [r7, #13]
 8006712:	f362 230f 	bfi	r3, r2, #8, #8
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>:
inline void shrinkJsonDocument(TDestination&) {
  // no-op by default
}

#if ARDUINOJSON_AUTO_SHRINK
inline void shrinkJsonDocument(JsonDocument& doc) {
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  doc.shrinkToFit();
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7ff fb03 	bl	8005d36 <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	4603      	mov	r3, r0
 8006740:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xD800 && codeunit < 0xDC00;
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8006748:	d305      	bcc.n	8006756 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 800674a:	88fb      	ldrh	r3, [r7, #6]
 800674c:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8006750:	d201      	bcs.n	8006756 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x20>
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>:

inline bool isLowSurrogate(uint16_t codeunit) {
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xDC00 && codeunit < 0xE000;
 800676e:	88fb      	ldrh	r3, [r7, #6]
 8006770:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8006774:	d305      	bcc.n	8006782 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 8006776:	88fb      	ldrh	r3, [r7, #6]
 8006778:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800677c:	d201      	bcs.n	8006782 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 800677e:	2301      	movs	r3, #1
 8006780:	e000      	b.n	8006784 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x20>
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>:

class Codepoint {
 public:
  Codepoint() : highSurrogate_(0), codepoint_(0) {}
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	801a      	strh	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	605a      	str	r2, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4618      	mov	r0, r3
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>:

  bool append(uint16_t codeunit) {
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b082      	sub	sp, #8
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	460b      	mov	r3, r1
 80067bc:	807b      	strh	r3, [r7, #2]
    if (isHighSurrogate(codeunit)) {
 80067be:	887b      	ldrh	r3, [r7, #2]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff ffb9 	bl	8006738 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d007      	beq.n	80067dc <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x2a>
      highSurrogate_ = codeunit & 0x3FF;
 80067cc:	887b      	ldrh	r3, [r7, #2]
 80067ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	801a      	strh	r2, [r3, #0]
      return false;
 80067d8:	2300      	movs	r3, #0
 80067da:	e018      	b.n	800680e <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    if (isLowSurrogate(codeunit)) {
 80067dc:	887b      	ldrh	r3, [r7, #2]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff ffc0 	bl	8006764 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00d      	beq.n	8006806 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x54>
      codepoint_ =
          uint32_t(0x10000 + ((highSurrogate_ << 10) | (codeunit & 0x3FF)));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	029a      	lsls	r2, r3, #10
 80067f0:	887b      	ldrh	r3, [r7, #2]
 80067f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067f6:	4313      	orrs	r3, r2
 80067f8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80067fc:	461a      	mov	r2, r3
      codepoint_ =
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	605a      	str	r2, [r3, #4]
      return true;
 8006802:	2301      	movs	r3, #1
 8006804:	e003      	b.n	800680e <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    codepoint_ = codeunit;
 8006806:	887a      	ldrh	r2, [r7, #2]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	605a      	str	r2, [r3, #4]
    return true;
 800680c:	2301      	movs	r3, #1
  }
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>:

  uint32_t value() const {
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
    return codepoint_;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
  }
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <_ZN11ArduinoJson8V730HB226detail7isdigitEc>:
#include <ArduinoJson/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	4603      	mov	r3, r0
 8006836:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	2b2f      	cmp	r3, #47	@ 0x2f
 800683c:	d904      	bls.n	8006848 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 800683e:	79fb      	ldrb	r3, [r7, #7]
 8006840:	2b39      	cmp	r3, #57	@ 0x39
 8006842:	d801      	bhi.n	8006848 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 8006844:	2301      	movs	r3, #1
 8006846:	e000      	b.n	800684a <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1c>
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>:
  Double,
#endif
};

union NumberValue {
  NumberValue() {}
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>:
  NumberValue(float x) : asFloat(x) {}
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	ed87 0a00 	vstr	s0, [r7]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4618      	mov	r0, r3
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>:
  NumberValue(JsonInteger x) : asSignedInteger(x) {}
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	e9c7 2300 	strd	r2, r3, [r7]
 8006898:	68f9      	ldr	r1, [r7, #12]
 800689a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800689e:	e9c1 2300 	strd	r2, r3, [r1]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>:
  NumberValue(JsonUInt x) : asUnsignedInteger(x) {}
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	e9c7 2300 	strd	r2, r3, [r7]
 80068bc:	68f9      	ldr	r1, [r7, #12]
 80068be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068c2:	e9c1 2300 	strd	r2, r3, [r1]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  NumberValue(double x) : asDouble(x) {}
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	ed87 0b00 	vstr	d0, [r7]
 80068e0:	68f9      	ldr	r1, [r7, #12]
 80068e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068e6:	e9c1 2300 	strd	r2, r3, [r1]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>:
class Number {
  NumberType type_;
  NumberValue value_;

 public:
  Number() : type_(NumberType::Invalid) {}
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3308      	adds	r3, #8
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff ffa3 	bl	8006856 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>:
  Number(float value) : type_(NumberType::Float), value_(value) {}
 800691a:	b580      	push	{r7, lr}
 800691c:	b082      	sub	sp, #8
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	ed87 0a00 	vstr	s0, [r7]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3308      	adds	r3, #8
 8006930:	ed97 0a00 	vldr	s0, [r7]
 8006934:	4618      	mov	r0, r3
 8006936:	f7ff ff99 	bl	800686c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4618      	mov	r0, r3
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>:
  Number(JsonInteger value) : type_(NumberType::SignedInteger), value_(value) {}
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	e9c7 2300 	strd	r2, r3, [r7]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2202      	movs	r2, #2
 8006954:	701a      	strb	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f103 0108 	add.w	r1, r3, #8
 800695c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006960:	4608      	mov	r0, r1
 8006962:	f7ff ff93 	bl	800688c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>:
  Number(JsonUInt value) : type_(NumberType::UnsignedInteger), value_(value) {}
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	e9c7 2300 	strd	r2, r3, [r7]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2203      	movs	r2, #3
 8006980:	701a      	strb	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f103 0108 	add.w	r1, r3, #8
 8006988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800698c:	4608      	mov	r0, r1
 800698e:	f7ff ff8f 	bl	80068b0 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  Number(double value) : type_(NumberType::Double), value_(value) {}
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	ed87 0b00 	vstr	d0, [r7]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2204      	movs	r2, #4
 80069ac:	701a      	strb	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3308      	adds	r3, #8
 80069b2:	ed97 0b00 	vldr	d0, [r7]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7ff ff8c 	bl	80068d4 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>:
      default:
        return T();
    }
  }

  NumberType type() const {
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
    return type_;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	781b      	ldrb	r3, [r3, #0]
  }
 80069d2:	4618      	mov	r0, r3
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>:

  JsonInteger asSignedInteger() const {
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::SignedInteger);
    return value_.asSignedInteger;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 80069ec:	4610      	mov	r0, r2
 80069ee:	4619      	mov	r1, r3
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>:

  JsonUInt asUnsignedInteger() const {
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::UnsignedInteger);
    return value_.asUnsignedInteger;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8006a08:	4610      	mov	r0, r2
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>:

  float asFloat() const {
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Float);
    return value_.asFloat;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	ee07 3a90 	vmov	s15, r3
  }
 8006a26:	eeb0 0a67 	vmov.f32	s0, s15
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>:

#if ARDUINOJSON_USE_DOUBLE
  double asDouble() const {
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Double);
    return value_.asDouble;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006a42:	ec43 2b17 	vmov	d7, r2, r3
  }
 8006a46:	eeb0 0b47 	vmov.f64	d0, d7
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>:
#endif
};

inline Number parseNumber(const char* s) {
 8006a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a58:	b0a6      	sub	sp, #152	@ 0x98
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8006a5e:	64b9      	str	r1, [r7, #72]	@ 0x48
  using mantissa_t = largest_type<traits::mantissa_type, JsonUInt>;
  using exponent_t = traits::exponent_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8006a60:	2300      	movs	r3, #0
 8006a62:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  switch (*s) {
 8006a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b2b      	cmp	r3, #43	@ 0x2b
 8006a6c:	d008      	beq.n	8006a80 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c>
 8006a6e:	2b2d      	cmp	r3, #45	@ 0x2d
 8006a70:	d10a      	bne.n	8006a88 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '-':
      is_negative = true;
 8006a72:	2301      	movs	r3, #1
 8006a74:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      s++;
 8006a78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a7e:	e003      	b.n	8006a88 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '+':
      s++;
 8006a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a82:	3301      	adds	r3, #1
 8006a84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a86:	bf00      	nop
  if (*s == 'i' || *s == 'I') {
    return Number(is_negative ? -traits::inf() : traits::inf());
  }
#endif

  if (!isdigit(*s) && *s != '.')
 8006a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff fece 	bl	800682e <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006a92:	4603      	mov	r3, r0
 8006a94:	f083 0301 	eor.w	r3, r3, #1
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d005      	beq.n	8006aaa <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8006a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006aa4:	d001      	beq.n	8006aaa <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x58>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x64>
    return Number();
 8006ab0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006ab2:	f7ff ff21 	bl	80068f8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8006ab6:	e1f5      	b.n	8006ea4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

  mantissa_t mantissa = 0;
 8006ab8:	f04f 0200 	mov.w	r2, #0
 8006abc:	f04f 0300 	mov.w	r3, #0
 8006ac0:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  exponent_t exponent_offset = 0;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  const mantissa_t maxUint = JsonUInt(-1);
 8006aca:	f04f 32ff 	mov.w	r2, #4294967295
 8006ace:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  while (isdigit(*s)) {
 8006ad6:	e054      	b.n	8006b82 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x12e>
    uint8_t digit = uint8_t(*s - '0');
 8006ad8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	3b30      	subs	r3, #48	@ 0x30
 8006ade:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (mantissa > maxUint / 10)
 8006ae2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006ae6:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8006aea:	49ae      	ldr	r1, [pc, #696]	@ (8006da4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x350>)
 8006aec:	418b      	sbcs	r3, r1
 8006aee:	d251      	bcs.n	8006b94 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x140>
      break;
    mantissa *= 10;
 8006af0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8006af4:	4622      	mov	r2, r4
 8006af6:	462b      	mov	r3, r5
 8006af8:	f04f 0000 	mov.w	r0, #0
 8006afc:	f04f 0100 	mov.w	r1, #0
 8006b00:	0099      	lsls	r1, r3, #2
 8006b02:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8006b06:	0090      	lsls	r0, r2, #2
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	eb12 0804 	adds.w	r8, r2, r4
 8006b10:	eb43 0905 	adc.w	r9, r3, r5
 8006b14:	eb18 0308 	adds.w	r3, r8, r8
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	eb49 0309 	adc.w	r3, r9, r9
 8006b1e:	61fb      	str	r3, [r7, #28]
 8006b20:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8006b24:	e9c7 8922 	strd	r8, r9, [r7, #136]	@ 0x88
    if (mantissa > maxUint - digit)
 8006b28:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b30:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b32:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006b36:	460b      	mov	r3, r1
 8006b38:	43db      	mvns	r3, r3
 8006b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	43db      	mvns	r3, r3
 8006b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b42:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006b46:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	4291      	cmp	r1, r2
 8006b4e:	4629      	mov	r1, r5
 8006b50:	eb71 0303 	sbcs.w	r3, r1, r3
 8006b54:	d320      	bcc.n	8006b98 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x144>
      break;
    mantissa += digit;
 8006b56:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b5e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006b60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006b64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006b68:	4621      	mov	r1, r4
 8006b6a:	1851      	adds	r1, r2, r1
 8006b6c:	6139      	str	r1, [r7, #16]
 8006b6e:	4629      	mov	r1, r5
 8006b70:	414b      	adcs	r3, r1
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006b78:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    s++;
 8006b7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b7e:	3301      	adds	r3, #1
 8006b80:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 8006b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7ff fe51 	bl	800682e <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1a2      	bne.n	8006ad8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x84>
 8006b92:	e002      	b.n	8006b9a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8006b94:	bf00      	nop
 8006b96:	e000      	b.n	8006b9a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8006b98:	bf00      	nop
  }

  if (*s == '\0') {
 8006b9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d136      	bne.n	8006c10 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
    if (is_negative) {
 8006ba2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d019      	beq.n	8006bde <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x18a>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 8006baa:	f04f 0200 	mov.w	r2, #0
 8006bae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006bb2:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 8006bb6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006bba:	2a01      	cmp	r2, #1
 8006bbc:	f173 4300 	sbcs.w	r3, r3, #2147483648	@ 0x80000000
 8006bc0:	d226      	bcs.n	8006c10 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
        return Number(JsonInteger(~mantissa + 1));
 8006bc2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	4250      	negs	r0, r2
 8006bca:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006bcc:	eb61 0303 	sbc.w	r3, r1, r3
 8006bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006bd6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006bd8:	f7ff feb4 	bl	8006944 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>
 8006bdc:	e162      	b.n	8006ea4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
      }
    } else {
      return Number(JsonUInt(mantissa));
 8006bde:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006be2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006be4:	f7ff fec4 	bl	8006970 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>
 8006be8:	e15c      	b.n	8006ea4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8006bea:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006bee:	f04f 020a 	mov.w	r2, #10
 8006bf2:	f04f 0300 	mov.w	r3, #0
 8006bf6:	f7f9 fea5 	bl	8000944 <__aeabi_uldivmod>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    exponent_offset++;
 8006c02:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	3301      	adds	r3, #1
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  while (mantissa > traits::mantissa_max) {
 8006c10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006c14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c18:	d2e7      	bcs.n	8006bea <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x196>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8006c1a:	e009      	b.n	8006c30 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1dc>
    exponent_offset++;
 8006c1c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	3301      	adds	r3, #1
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    s++;
 8006c2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 8006c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff fdfa 	bl	800682e <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1ed      	bne.n	8006c1c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1c8>
  }

  if (*s == '.') {
 8006c40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c46:	d14c      	bne.n	8006ce2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x28e>
    s++;
 8006c48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8006c4e:	e040      	b.n	8006cd2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x27e>
      if (mantissa < traits::mantissa_max / 10) {
 8006c50:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006c54:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8006c58:	4953      	ldr	r1, [pc, #332]	@ (8006da8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x354>)
 8006c5a:	418b      	sbcs	r3, r1
 8006c5c:	d236      	bcs.n	8006ccc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x278>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8006c5e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8006c62:	4622      	mov	r2, r4
 8006c64:	462b      	mov	r3, r5
 8006c66:	f04f 0000 	mov.w	r0, #0
 8006c6a:	f04f 0100 	mov.w	r1, #0
 8006c6e:	0099      	lsls	r1, r3, #2
 8006c70:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8006c74:	0090      	lsls	r0, r2, #2
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	eb12 0a04 	adds.w	sl, r2, r4
 8006c7e:	eb43 0b05 	adc.w	fp, r3, r5
 8006c82:	eb1a 030a 	adds.w	r3, sl, sl
 8006c86:	60bb      	str	r3, [r7, #8]
 8006c88:	eb4b 030b 	adc.w	r3, fp, fp
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006c92:	4652      	mov	r2, sl
 8006c94:	465b      	mov	r3, fp
 8006c96:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006c98:	7809      	ldrb	r1, [r1, #0]
 8006c9a:	3930      	subs	r1, #48	@ 0x30
 8006c9c:	b2c9      	uxtb	r1, r1
 8006c9e:	b2c9      	uxtb	r1, r1
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	6239      	str	r1, [r7, #32]
 8006ca4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ca6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006caa:	4621      	mov	r1, r4
 8006cac:	1851      	adds	r1, r2, r1
 8006cae:	6039      	str	r1, [r7, #0]
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	414b      	adcs	r3, r1
 8006cb4:	607b      	str	r3, [r7, #4]
 8006cb6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006cba:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
        exponent_offset--;
 8006cbe:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
      }
      s++;
 8006ccc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cce:	3301      	adds	r3, #1
 8006cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8006cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff fda9 	bl	800682e <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1b6      	bne.n	8006c50 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1fc>
    }
  }

  int exponent = 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (*s == 'e' || *s == 'E') {
 8006ce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b65      	cmp	r3, #101	@ 0x65
 8006cee:	d003      	beq.n	8006cf8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2a4>
 8006cf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b45      	cmp	r3, #69	@ 0x45
 8006cf6:	d171      	bne.n	8006ddc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
    s++;
 8006cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
    bool negative_exponent = false;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (*s == '-') {
 8006d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b2d      	cmp	r3, #45	@ 0x2d
 8006d0a:	d106      	bne.n	8006d1a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c6>
      negative_exponent = true;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 8006d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d14:	3301      	adds	r3, #1
 8006d16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d18:	e04f      	b.n	8006dba <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
    } else if (*s == '+') {
 8006d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b2b      	cmp	r3, #43	@ 0x2b
 8006d20:	d14b      	bne.n	8006dba <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      s++;
 8006d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d24:	3301      	adds	r3, #1
 8006d26:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    while (isdigit(*s)) {
 8006d28:	e047      	b.n	8006dba <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      exponent = exponent * 10 + (*s - '0');
 8006d2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	461a      	mov	r2, r3
 8006d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	3b30      	subs	r3, #48	@ 0x30
 8006d3e:	4413      	add	r3, r2
 8006d40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      if (exponent + exponent_offset > traits::exponent_max) {
 8006d44:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	@ 0x86
 8006d48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8006d52:	dd2f      	ble.n	8006db4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x360>
        if (negative_exponent)
 8006d54:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00e      	beq.n	8006d7a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x326>
          return Number(is_negative ? -0.0f : 0.0f);
 8006d5c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x316>
 8006d64:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8006dac <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x358>
 8006d68:	e001      	b.n	8006d6e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x31a>
 8006d6a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8006db0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x35c>
 8006d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d72:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006d74:	f7ff fdd1 	bl	800691a <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
 8006d78:	e094      	b.n	8006ea4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
        else
          return Number(is_negative ? -traits::inf() : traits::inf());
 8006d7a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d006      	beq.n	8006d90 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x33c>
 8006d82:	f000 fd87 	bl	8007894 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8006d86:	eeb0 7b40 	vmov.f64	d7, d0
 8006d8a:	eeb1 7b47 	vneg.f64	d7, d7
 8006d8e:	e003      	b.n	8006d98 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x344>
 8006d90:	f000 fd80 	bl	8007894 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8006d94:	eeb0 7b40 	vmov.f64	d7, d0
 8006d98:	eeb0 0b47 	vmov.f64	d0, d7
 8006d9c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006d9e:	f7ff fdfd 	bl	800699c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8006da2:	e07f      	b.n	8006ea4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
 8006da4:	19999999 	.word	0x19999999
 8006da8:	00019999 	.word	0x00019999
 8006dac:	80000000 	.word	0x80000000
 8006db0:	00000000 	.word	0x00000000
      }
      s++;
 8006db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006db6:	3301      	adds	r3, #1
 8006db8:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8006dba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7ff fd35 	bl	800682e <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1af      	bne.n	8006d2a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2d6>
    }
    if (negative_exponent)
 8006dca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d004      	beq.n	8006ddc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
      exponent = -exponent;
 8006dd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006dd6:	425b      	negs	r3, r3
 8006dd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  }
  exponent += exponent_offset;
 8006ddc:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8006de0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006de4:	4413      	add	r3, r2
 8006de6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 8006dea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3a6>
    return Number();
 8006df2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006df4:	f7ff fd80 	bl	80068f8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8006df8:	e054      	b.n	8006ea4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

#if ARDUINOJSON_USE_DOUBLE
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
                  exponent > FloatTraits<float>::exponent_max ||
 8006dfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006dfe:	f113 0f26 	cmn.w	r3, #38	@ 0x26
 8006e02:	db0a      	blt.n	8006e1a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8006e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e08:	2b26      	cmp	r3, #38	@ 0x26
 8006e0a:	dc06      	bgt.n	8006e1a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
                  exponent > FloatTraits<float>::exponent_max ||
 8006e0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006e10:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8006e14:	f173 0300 	sbcs.w	r3, r3, #0
 8006e18:	d301      	bcc.n	8006e1e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3ca>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3cc>
 8006e1e:	2300      	movs	r3, #0
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8006e20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                  mantissa > FloatTraits<float>::mantissa_max;
  if (isDouble) {
 8006e24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d01e      	beq.n	8006e6a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x416>
    auto final_result = make_float(double(mantissa), exponent);
 8006e2c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006e30:	f7f9 fc44 	bl	80006bc <__aeabi_ul2d>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8006e3c:	ec43 2b10 	vmov	d0, r2, r3
 8006e40:	f000 fd36 	bl	80078b0 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>
 8006e44:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    return Number(is_negative ? -final_result : final_result);
 8006e48:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d004      	beq.n	8006e5a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x406>
 8006e50:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8006e54:	eeb1 7b47 	vneg.f64	d7, d7
 8006e58:	e001      	b.n	8006e5e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x40a>
 8006e5a:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8006e5e:	eeb0 0b47 	vmov.f64	d0, d7
 8006e62:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006e64:	f7ff fd9a 	bl	800699c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8006e68:	e01c      	b.n	8006ea4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
  } else
#endif
  {
    auto final_result = make_float(float(mantissa), exponent);
 8006e6a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006e6e:	f7f9 fd23 	bl	80008b8 <__aeabi_ul2f>
 8006e72:	4603      	mov	r3, r0
 8006e74:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8006e78:	ee00 3a10 	vmov	s0, r3
 8006e7c:	f000 fd59 	bl	8007932 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>
 8006e80:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
    return Number(is_negative ? -final_result : final_result);
 8006e84:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d004      	beq.n	8006e96 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x442>
 8006e8c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006e90:	eef1 7a67 	vneg.f32	s15, s15
 8006e94:	e001      	b.n	8006e9a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x446>
 8006e96:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8006e9e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006ea0:	f7ff fd3b 	bl	800691a <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
  }
}
 8006ea4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006ea6:	3798      	adds	r7, #152	@ 0x98
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eae:	bf00      	nop

08006eb0 <_ZN6Remora11setBaseFreqEm>:

public:

	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	635a      	str	r2, [r3, #52]	@ 0x34
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <_ZN6Remora12setServoFreqEm>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	639a      	str	r2, [r3, #56]	@ 0x38
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <_ZN17JsonConfigHandlerC1EP6Remora>:

#include "jsonConfigHandler.h"
#include "../remora.h"


JsonConfigHandler::JsonConfigHandler(Remora* _remora) :
 8006ee8:	b590      	push	{r4, r7, lr}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
	remoraInstance(_remora),
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	601a      	str	r2, [r3, #0]
	configError(false)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	1d1c      	adds	r4, r3, #4
 8006efc:	f107 030c 	add.w	r3, r7, #12
 8006f00:	4618      	mov	r0, r3
 8006f02:	f021 fb66 	bl	80285d2 <_ZNSaIcEC1Ev>
 8006f06:	f107 030c 	add.w	r3, r7, #12
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	4914      	ldr	r1, [pc, #80]	@ (8006f60 <_ZN17JsonConfigHandlerC1EP6Remora+0x78>)
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f7fc fc70 	bl	80037f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006f14:	f107 030c 	add.w	r3, r7, #12
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f021 fb5b 	bl	80285d4 <_ZNSaIcED1Ev>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a10      	ldr	r2, [pc, #64]	@ (8006f64 <_ZN17JsonConfigHandlerC1EP6Remora+0x7c>)
 8006f22:	61da      	str	r2, [r3, #28]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f103 0420 	add.w	r4, r3, #32
 8006f2a:	f7fe f953 	bl	80051d4 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	4619      	mov	r1, r3
 8006f32:	4620      	mov	r0, r4
 8006f34:	f7fe feeb 	bl	8005d0e <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3360      	adds	r3, #96	@ 0x60
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fe fea8 	bl	8005c92 <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
{
	loadConfiguration();
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f80c 	bl	8006f68 <_ZN17JsonConfigHandler17loadConfigurationEv>
    updateThreadFreq();
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f82b 	bl	8006fac <_ZN17JsonConfigHandler16updateThreadFreqEv>
}
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd90      	pop	{r4, r7, pc}
 8006f60:	0802a290 	.word	0x0802a290
 8006f64:	0802a294 	.word	0x0802a294

08006f68 <_ZN17JsonConfigHandler17loadConfigurationEv>:

bool JsonConfigHandler::loadConfiguration() {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
	// Clear any existing configuration
    jsonContent.clear();
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4618      	mov	r0, r3
 8006f76:	f021 fcd1 	bl	802891c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
    doc.clear();
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	3320      	adds	r3, #32
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fe fee5 	bl	8005d4e <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Read and parse the configuration file
    if (!readFileContents()) {
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f903 	bl	8007190 <_ZN17JsonConfigHandler16readFileContentsEv>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	f083 0301 	eor.w	r3, r3, #1
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <_ZN17JsonConfigHandler17loadConfigurationEv+0x32>
        return false;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e003      	b.n	8006fa2 <_ZN17JsonConfigHandler17loadConfigurationEv+0x3a>
    }
    parseJson();
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f9c8 	bl	8007330 <_ZN17JsonConfigHandler9parseJsonEv>
    return true;
 8006fa0:	2301      	movs	r3, #1
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <_ZN17JsonConfigHandler16updateThreadFreqEv>:


void JsonConfigHandler::updateThreadFreq() {
 8006fac:	b590      	push	{r4, r7, lr}
 8006fae:	b0a1      	sub	sp, #132	@ 0x84
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
    if (configError) return;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f040 808e 	bne.w	80070dc <_ZN17JsonConfigHandler16updateThreadFreqEv+0x130>

    printf("\n5. Updating thread frequencies\n");
 8006fc0:	4848      	ldr	r0, [pc, #288]	@ (80070e4 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x138>)
 8006fc2:	f022 fa0f 	bl	80293e4 <puts>

    JsonArray Threads = doc["Threads"];
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f103 0120 	add.w	r1, r3, #32
 8006fcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fd0:	4a45      	ldr	r2, [pc, #276]	@ (80070e8 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x13c>)
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fced 	bl	80079b2 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8006fd8:	f107 031c 	add.w	r3, r7, #28
 8006fdc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8006fe0:	4611      	mov	r1, r2
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fcfe 	bl	80079e4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 8006fe8:	f107 0310 	add.w	r3, r7, #16
 8006fec:	f107 021c 	add.w	r2, r7, #28
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fe1e 	bl	8005c34 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 8006ff8:	e05c      	b.n	80070b4 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x108>
        thread = *it;
 8006ffa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006ffe:	f107 0210 	add.w	r2, r7, #16
 8007002:	4611      	mov	r1, r2
 8007004:	4618      	mov	r0, r3
 8007006:	f7fe fdbd 	bl	8005b84 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 800700a:	68fc      	ldr	r4, [r7, #12]
 800700c:	463b      	mov	r3, r7
 800700e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8007012:	4611      	mov	r1, r2
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fcf4 	bl	8007a02 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800701a:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 800701e:	463a      	mov	r2, r7
 8007020:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007024:	e883 0003 	stmia.w	r3, {r0, r1}
        const char* configor = thread["Thread"];
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800702e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8007032:	4a2e      	ldr	r2, [pc, #184]	@ (80070ec <_ZN17JsonConfigHandler16updateThreadFreqEv+0x140>)
 8007034:	4618      	mov	r0, r3
 8007036:	f000 fcf3 	bl	8007a20 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800703a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800703e:	4618      	mov	r0, r3
 8007040:	f000 fd13 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8007044:	67f8      	str	r0, [r7, #124]	@ 0x7c
        uint32_t    freq = thread["Frequency"];
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800704c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007050:	4a27      	ldr	r2, [pc, #156]	@ (80070f0 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x144>)
 8007052:	4618      	mov	r0, r3
 8007054:	f000 fd15 	bl	8007a82 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8007058:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800705c:	4618      	mov	r0, r3
 800705e:	f000 fd35 	bl	8007acc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8007062:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (!strcmp(configor,"Base")) {
 8007064:	4923      	ldr	r1, [pc, #140]	@ (80070f4 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x148>)
 8007066:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8007068:	f7f9 f93a 	bl	80002e0 <strcmp>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10a      	bne.n	8007088 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xdc>
            printf("	Setting BASE thread frequency to %lu\n", freq);
 8007072:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007074:	4820      	ldr	r0, [pc, #128]	@ (80070f8 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x14c>)
 8007076:	f022 f945 	bl	8029304 <iprintf>
            remoraInstance->setBaseFreq(freq);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff ff15 	bl	8006eb0 <_ZN6Remora11setBaseFreqEm>
 8007086:	e010      	b.n	80070aa <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
        }
        else if (!strcmp(configor,"Servo")) {
 8007088:	491c      	ldr	r1, [pc, #112]	@ (80070fc <_ZN17JsonConfigHandler16updateThreadFreqEv+0x150>)
 800708a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800708c:	f7f9 f928 	bl	80002e0 <strcmp>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d109      	bne.n	80070aa <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
            printf("	Setting SERVO thread frequency to %lu\n", freq);
 8007096:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007098:	4819      	ldr	r0, [pc, #100]	@ (8007100 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x154>)
 800709a:	f022 f933 	bl	8029304 <iprintf>
            remoraInstance->setServoFreq(freq);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff ff11 	bl	8006ecc <_ZN6Remora12setServoFreqEm>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 80070aa:	f107 0310 	add.w	r3, r7, #16
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fe fd8c 	bl	8005bcc <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 80070b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80070b8:	f107 021c 	add.w	r2, r7, #28
 80070bc:	4611      	mov	r1, r2
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fe fddb 	bl	8005c7a <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 80070c4:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80070c8:	f107 0310 	add.w	r3, r7, #16
 80070cc:	4611      	mov	r1, r2
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe fd6c 	bl	8005bac <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d18f      	bne.n	8006ffa <_ZN17JsonConfigHandler16updateThreadFreqEv+0x4e>
 80070da:	e000      	b.n	80070de <_ZN17JsonConfigHandler16updateThreadFreqEv+0x132>
    if (configError) return;
 80070dc:	bf00      	nop
        }
    }
}
 80070de:	3784      	adds	r7, #132	@ 0x84
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd90      	pop	{r4, r7, pc}
 80070e4:	0802a2a0 	.word	0x0802a2a0
 80070e8:	0802a2c0 	.word	0x0802a2c0
 80070ec:	0802a2c8 	.word	0x0802a2c8
 80070f0:	0802a2d0 	.word	0x0802a2d0
 80070f4:	0802a2dc 	.word	0x0802a2dc
 80070f8:	0802a2e4 	.word	0x0802a2e4
 80070fc:	0802a30c 	.word	0x0802a30c
 8007100:	0802a314 	.word	0x0802a314

08007104 <_ZN17JsonConfigHandler10getModulesEv>:


JsonArray JsonConfigHandler::getModules() {
 8007104:	b590      	push	{r4, r7, lr}
 8007106:	b08f      	sub	sp, #60	@ 0x3c
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
	if (doc["Modules"].is<JsonVariant>())
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	f103 0120 	add.w	r1, r3, #32
 8007114:	f107 0308 	add.w	r3, r7, #8
 8007118:	4a1c      	ldr	r2, [pc, #112]	@ (800718c <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 800711a:	4618      	mov	r0, r3
 800711c:	f000 fc49 	bl	80079b2 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8007120:	f107 0308 	add.w	r3, r7, #8
 8007124:	637b      	str	r3, [r7, #52]	@ 0x34
 8007126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007128:	633b      	str	r3, [r7, #48]	@ 0x30
  return containsKey(key.template as<const char*>());
}

template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getVariant() const {
  return JsonVariant(getData(), getResourceManager());
 800712a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800712c:	f001 fba6 	bl	800887c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 8007130:	4604      	mov	r4, r0
 8007132:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007134:	f001 fbb2 	bl	800889c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8007138:	4602      	mov	r2, r0
 800713a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800713e:	4621      	mov	r1, r4
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe fcb9 	bl	8005ab8 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }

  template <typename T>
  FORCE_INLINE enable_if_t<is_same<T, JsonVariant>::value, T> getVariant()
      const {
    return getVariant();
 8007146:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 8007148:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800714c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007150:	f7fe fcdd 	bl	8005b0e <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>
 8007154:	4603      	mov	r3, r0
 8007156:	bf00      	nop
 8007158:	2b00      	cmp	r3, #0
 800715a:	d010      	beq.n	800717e <_ZN17JsonConfigHandler10getModulesEv+0x7a>
        return doc["Modules"].as<JsonArray>();
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	f103 0120 	add.w	r1, r3, #32
 8007162:	f107 0318 	add.w	r3, r7, #24
 8007166:	4a09      	ldr	r2, [pc, #36]	@ (800718c <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8007168:	4618      	mov	r0, r3
 800716a:	f000 fc22 	bl	80079b2 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f107 0218 	add.w	r2, r7, #24
 8007174:	4611      	mov	r1, r2
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fcb4 	bl	8007ae4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 800717c:	e002      	b.n	8007184 <_ZN17JsonConfigHandler10getModulesEv+0x80>
    else
        return JsonArray();
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fe fd34 	bl	8005bec <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>
}
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	373c      	adds	r7, #60	@ 0x3c
 8007188:	46bd      	mov	sp, r7
 800718a:	bd90      	pop	{r4, r7, pc}
 800718c:	0802a33c 	.word	0x0802a33c

08007190 <_ZN17JsonConfigHandler16readFileContentsEv>:
    }
    return JsonObject(); // Return empty object if not found
}
*/

bool JsonConfigHandler::readFileContents() {
 8007190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007194:	b08f      	sub	sp, #60	@ 0x3c
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]

	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 800719a:	485a      	ldr	r0, [pc, #360]	@ (8007304 <_ZN17JsonConfigHandler16readFileContentsEv+0x174>)
 800719c:	f022 f922 	bl	80293e4 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 80071a0:	4859      	ldr	r0, [pc, #356]	@ (8007308 <_ZN17JsonConfigHandler16readFileContentsEv+0x178>)
 80071a2:	f022 f91f 	bl	80293e4 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80071a6:	2200      	movs	r2, #0
 80071a8:	4958      	ldr	r1, [pc, #352]	@ (800730c <_ZN17JsonConfigHandler16readFileContentsEv+0x17c>)
 80071aa:	4859      	ldr	r0, [pc, #356]	@ (8007310 <_ZN17JsonConfigHandler16readFileContentsEv+0x180>)
 80071ac:	f020 fdac 	bl	8027d08 <f_mount>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	bf14      	ite	ne
 80071b6:	2301      	movne	r3, #1
 80071b8:	2300      	moveq	r3, #0
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d005      	beq.n	80071cc <_ZN17JsonConfigHandler16readFileContentsEv+0x3c>
	{
    	printf("	Failed to mount SD card\n\r");
 80071c0:	4854      	ldr	r0, [pc, #336]	@ (8007314 <_ZN17JsonConfigHandler16readFileContentsEv+0x184>)
 80071c2:	f022 f89f 	bl	8029304 <iprintf>
    	Error_Handler();
 80071c6:	f003 fb57 	bl	800a878 <Error_Handler>
 80071ca:	e094      	b.n	80072f6 <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
	}
    else
    {
		//Open file for reading
		if(f_open(&SDFile, filename, FA_READ) != FR_OK)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	2201      	movs	r2, #1
 80071d2:	4619      	mov	r1, r3
 80071d4:	4850      	ldr	r0, [pc, #320]	@ (8007318 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80071d6:	f020 fddd 	bl	8027d94 <f_open>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	bf14      	ite	ne
 80071e0:	2301      	movne	r3, #1
 80071e2:	2300      	moveq	r3, #0
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <_ZN17JsonConfigHandler16readFileContentsEv+0x66>
		{
			printf("	Failed to open JSON config file\n");
 80071ea:	484c      	ldr	r0, [pc, #304]	@ (800731c <_ZN17JsonConfigHandler16readFileContentsEv+0x18c>)
 80071ec:	f022 f8fa 	bl	80293e4 <puts>
			Error_Handler();
 80071f0:	f003 fb42 	bl	800a878 <Error_Handler>
 80071f4:	e07f      	b.n	80072f6 <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
			    // Remove comments from next line to print out the JSON config file
			    printf("\n%s\n", jsonContent.c_str());
			}

			f_close(&SDFile);
		}
 80071f6:	466b      	mov	r3, sp
 80071f8:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 80071fa:	4b47      	ldr	r3, [pc, #284]	@ (8007318 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	633b      	str	r3, [r7, #48]	@ 0x30
			printf("	JSON config file lenght = %2ld\n", length);
 8007200:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007202:	4847      	ldr	r0, [pc, #284]	@ (8007320 <_ZN17JsonConfigHandler16readFileContentsEv+0x190>)
 8007204:	f022 f87e 	bl	8029304 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 8007208:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800720a:	1e4b      	subs	r3, r1, #1
 800720c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800720e:	460a      	mov	r2, r1
 8007210:	2300      	movs	r3, #0
 8007212:	4690      	mov	r8, r2
 8007214:	4699      	mov	r9, r3
 8007216:	f04f 0200 	mov.w	r2, #0
 800721a:	f04f 0300 	mov.w	r3, #0
 800721e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007222:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007226:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800722a:	460a      	mov	r2, r1
 800722c:	2300      	movs	r3, #0
 800722e:	4614      	mov	r4, r2
 8007230:	461d      	mov	r5, r3
 8007232:	f04f 0200 	mov.w	r2, #0
 8007236:	f04f 0300 	mov.w	r3, #0
 800723a:	00eb      	lsls	r3, r5, #3
 800723c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007240:	00e2      	lsls	r2, r4, #3
 8007242:	460b      	mov	r3, r1
 8007244:	3318      	adds	r3, #24
 8007246:	3307      	adds	r3, #7
 8007248:	08db      	lsrs	r3, r3, #3
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	ebad 0d03 	sub.w	sp, sp, r3
 8007250:	466b      	mov	r3, sp
 8007252:	331f      	adds	r3, #31
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	015b      	lsls	r3, r3, #5
 8007258:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 800725a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800725c:	f107 030c 	add.w	r3, r7, #12
 8007260:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007262:	482d      	ldr	r0, [pc, #180]	@ (8007318 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8007264:	f020 ff50 	bl	8028108 <f_read>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	bf14      	ite	ne
 800726e:	2301      	movne	r3, #1
 8007270:	2300      	moveq	r3, #0
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <_ZN17JsonConfigHandler16readFileContentsEv+0xf0>
				printf("	JSON config file read FAILURE\n");
 8007278:	482a      	ldr	r0, [pc, #168]	@ (8007324 <_ZN17JsonConfigHandler16readFileContentsEv+0x194>)
 800727a:	f022 f8b3 	bl	80293e4 <puts>
 800727e:	e036      	b.n	80072ee <_ZN17JsonConfigHandler16readFileContentsEv+0x15e>
				printf("	JSON config file read SUCCESS!\n");
 8007280:	4829      	ldr	r0, [pc, #164]	@ (8007328 <_ZN17JsonConfigHandler16readFileContentsEv+0x198>)
 8007282:	f022 f8af 	bl	80293e4 <puts>
				jsonContent.reserve(length + 1);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	1d1a      	adds	r2, r3, #4
 800728a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728c:	3301      	adds	r3, #1
 800728e:	4619      	mov	r1, r3
 8007290:	4610      	mov	r0, r2
 8007292:	f021 fb28 	bl	80288e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 8007296:	2300      	movs	r3, #0
 8007298:	637b      	str	r3, [r7, #52]	@ 0x34
 800729a:	e01a      	b.n	80072d2 <_ZN17JsonConfigHandler16readFileContentsEv+0x142>
			    	jsonContent = jsonContent + rtext[i];
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	1d19      	adds	r1, r3, #4
 80072a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a4:	4413      	add	r3, r2
 80072a6:	781a      	ldrb	r2, [r3, #0]
 80072a8:	f107 0310 	add.w	r3, r7, #16
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 fc3d 	bl	8007b2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3304      	adds	r3, #4
 80072b6:	f107 0210 	add.w	r2, r7, #16
 80072ba:	4611      	mov	r1, r2
 80072bc:	4618      	mov	r0, r3
 80072be:	f021 fa78 	bl	80287b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80072c2:	f107 0310 	add.w	r3, r7, #16
 80072c6:	4618      	mov	r0, r3
 80072c8:	f021 fa6d 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 80072cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ce:	3301      	adds	r3, #1
 80072d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d6:	429a      	cmp	r2, r3
 80072d8:	dbe0      	blt.n	800729c <_ZN17JsonConfigHandler16readFileContentsEv+0x10c>
			    printf("\n%s\n", jsonContent.c_str());
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3304      	adds	r3, #4
 80072de:	4618      	mov	r0, r3
 80072e0:	f021 fc44 	bl	8028b6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80072e4:	4603      	mov	r3, r0
 80072e6:	4619      	mov	r1, r3
 80072e8:	4810      	ldr	r0, [pc, #64]	@ (800732c <_ZN17JsonConfigHandler16readFileContentsEv+0x19c>)
 80072ea:	f022 f80b 	bl	8029304 <iprintf>
			f_close(&SDFile);
 80072ee:	480a      	ldr	r0, [pc, #40]	@ (8007318 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80072f0:	f021 f8c7 	bl	8028482 <f_close>
 80072f4:	46b5      	mov	sp, r6
    }

	return true;
 80072f6:	2301      	movs	r3, #1
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	373c      	adds	r7, #60	@ 0x3c
 80072fc:	46bd      	mov	sp, r7
 80072fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007302:	bf00      	nop
 8007304:	0802a344 	.word	0x0802a344
 8007308:	0802a368 	.word	0x0802a368
 800730c:	24000420 	.word	0x24000420
 8007310:	24000424 	.word	0x24000424
 8007314:	0802a388 	.word	0x0802a388
 8007318:	24000654 	.word	0x24000654
 800731c:	0802a3a4 	.word	0x0802a3a4
 8007320:	0802a3c8 	.word	0x0802a3c8
 8007324:	0802a3ec 	.word	0x0802a3ec
 8007328:	0802a40c 	.word	0x0802a40c
 800732c:	0802a42c 	.word	0x0802a42c

08007330 <_ZN17JsonConfigHandler9parseJsonEv>:


bool JsonConfigHandler::parseJson() {
 8007330:	b590      	push	{r4, r7, lr}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	
	printf("\n3. Parsing json configuration file\n");
 8007338:	482a      	ldr	r0, [pc, #168]	@ (80073e4 <_ZN17JsonConfigHandler9parseJsonEv+0xb4>)
 800733a:	f022 f853 	bl	80293e4 <puts>
	
    // Clear any existing parsed data
    doc.clear();
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3320      	adds	r3, #32
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe fd03 	bl	8005d4e <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Parse JSON
    DeserializationError error = deserializeJson(doc, jsonContent.c_str());
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f103 0420 	add.w	r4, r3, #32
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3304      	adds	r3, #4
 8007352:	4618      	mov	r0, r3
 8007354:	f021 fc0a 	bl	8028b6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8007358:	4603      	mov	r3, r0
 800735a:	4619      	mov	r1, r3
 800735c:	4620      	mov	r0, r4
 800735e:	f000 fbfb 	bl	8007b58 <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>
 8007362:	4603      	mov	r3, r0
 8007364:	733b      	strb	r3, [r7, #12]

    printf("	Config deserialisation - ");
 8007366:	4820      	ldr	r0, [pc, #128]	@ (80073e8 <_ZN17JsonConfigHandler9parseJsonEv+0xb8>)
 8007368:	f021 ffcc 	bl	8029304 <iprintf>

    switch (error.code())
 800736c:	f107 030c 	add.w	r3, r7, #12
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff f936 	bl	80065e2 <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>
 8007376:	4603      	mov	r3, r0
 8007378:	2b04      	cmp	r3, #4
 800737a:	d012      	beq.n	80073a2 <_ZN17JsonConfigHandler9parseJsonEv+0x72>
 800737c:	2b04      	cmp	r3, #4
 800737e:	dc18      	bgt.n	80073b2 <_ZN17JsonConfigHandler9parseJsonEv+0x82>
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <_ZN17JsonConfigHandler9parseJsonEv+0x5a>
 8007384:	2b03      	cmp	r3, #3
 8007386:	d004      	beq.n	8007392 <_ZN17JsonConfigHandler9parseJsonEv+0x62>
 8007388:	e013      	b.n	80073b2 <_ZN17JsonConfigHandler9parseJsonEv+0x82>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 800738a:	4818      	ldr	r0, [pc, #96]	@ (80073ec <_ZN17JsonConfigHandler9parseJsonEv+0xbc>)
 800738c:	f022 f82a 	bl	80293e4 <puts>
            break;
 8007390:	e023      	b.n	80073da <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 8007392:	4817      	ldr	r0, [pc, #92]	@ (80073f0 <_ZN17JsonConfigHandler9parseJsonEv+0xc0>)
 8007394:	f022 f826 	bl	80293e4 <puts>
            configError = true;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80073a0:	e01b      	b.n	80073da <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 80073a2:	4814      	ldr	r0, [pc, #80]	@ (80073f4 <_ZN17JsonConfigHandler9parseJsonEv+0xc4>)
 80073a4:	f022 f81e 	bl	80293e4 <puts>
            configError = true;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80073b0:	e013      	b.n	80073da <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        default:
            printf("Deserialization failed: ");
 80073b2:	4811      	ldr	r0, [pc, #68]	@ (80073f8 <_ZN17JsonConfigHandler9parseJsonEv+0xc8>)
 80073b4:	f021 ffa6 	bl	8029304 <iprintf>
            printf(error.c_str());
 80073b8:	f107 030c 	add.w	r3, r7, #12
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff f91d 	bl	80065fc <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>
 80073c2:	4603      	mov	r3, r0
 80073c4:	4618      	mov	r0, r3
 80073c6:	f021 ff9d 	bl	8029304 <iprintf>
            printf("\n");
 80073ca:	200a      	movs	r0, #10
 80073cc:	f021 ffac 	bl	8029328 <putchar>
            configError = true;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80073d8:	bf00      	nop
    }

    return true;
 80073da:	2301      	movs	r3, #1
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd90      	pop	{r4, r7, pc}
 80073e4:	0802a434 	.word	0x0802a434
 80073e8:	0802a458 	.word	0x0802a458
 80073ec:	0802a474 	.word	0x0802a474
 80073f0:	0802a490 	.word	0x0802a490
 80073f4:	0802a4a0 	.word	0x0802a4a0
 80073f8:	0802a4b4 	.word	0x0802a4b4

080073fc <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	4611      	mov	r1, r2
 8007408:	461a      	mov	r2, r3
 800740a:	460b      	mov	r3, r1
 800740c:	80fb      	strh	r3, [r7, #6]
 800740e:	4613      	mov	r3, r2
 8007410:	717b      	strb	r3, [r7, #5]
      : str_(data, size_t(sz), isStatic) {}
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	88fa      	ldrh	r2, [r7, #6]
 8007416:	797b      	ldrb	r3, [r7, #5]
 8007418:	68b9      	ldr	r1, [r7, #8]
 800741a:	f7fd ff5b 	bl	80052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>:
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
    ARDUINOJSON_ASSERT(poolIndex < count_);
    return pools_[poolIndex].getSlot(indexInPool);
  }

  void clear(Allocator* allocator) {
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
    for (PoolCount i = 0; i < count_; i++)
 8007432:	2300      	movs	r3, #0
 8007434:	81fb      	strh	r3, [r7, #14]
 8007436:	e00b      	b.n	8007450 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x28>
      pools_[i].destroy(allocator);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a1a      	ldr	r2, [r3, #32]
 800743c:	89fb      	ldrh	r3, [r7, #14]
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	4413      	add	r3, r2
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fb9a 	bl	8007b7e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>
    for (PoolCount i = 0; i < count_; i++)
 800744a:	89fb      	ldrh	r3, [r7, #14]
 800744c:	3301      	adds	r3, #1
 800744e:	81fb      	strh	r3, [r7, #14]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007454:	89fa      	ldrh	r2, [r7, #14]
 8007456:	429a      	cmp	r2, r3
 8007458:	d3ee      	bcc.n	8007438 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x10>
    count_ = 0;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	849a      	strh	r2, [r3, #36]	@ 0x24
    freeList_ = NULL_SLOT;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007466:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (pools_ != preallocatedPools_) {
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a1a      	ldr	r2, [r3, #32]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	429a      	cmp	r2, r3
 8007470:	d00e      	beq.n	8007490 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x68>
      allocator->deallocate(pools_);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3304      	adds	r3, #4
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6a12      	ldr	r2, [r2, #32]
 800747e:	4611      	mov	r1, r2
 8007480:	6838      	ldr	r0, [r7, #0]
 8007482:	4798      	blx	r3
      pools_ = preallocatedPools_;
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	621a      	str	r2, [r3, #32]
      capacity_ = ARDUINOJSON_INITIAL_POOL_COUNT;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2204      	movs	r2, #4
 800748e:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:

  size_t size() const {
    return Pool::slotsToBytes(usage());
  }

  void shrinkToFit(Allocator* allocator) {
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
    if (count_ > 0)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00d      	beq.n	80074c6 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x2e>
      pools_[count_ - 1].shrinkToFit(allocator);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1a      	ldr	r2, [r3, #32]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80074b2:	4619      	mov	r1, r3
 80074b4:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80074b8:	440b      	add	r3, r1
 80074ba:	00db      	lsls	r3, r3, #3
 80074bc:	4413      	add	r3, r2
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fb88 	bl	8007bd6 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
    if (pools_ != preallocatedPools_ && count_ != capacity_) {
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1a      	ldr	r2, [r3, #32]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d017      	beq.n	8007500 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074d8:	429a      	cmp	r2, r3
 80074da:	d011      	beq.n	8007500 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
      pools_ = static_cast<Pool*>(
          allocator->reallocate(pools_, count_ * sizeof(Pool)));
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3308      	adds	r3, #8
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6a11      	ldr	r1, [r2, #32]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80074ec:	00d2      	lsls	r2, r2, #3
 80074ee:	6838      	ldr	r0, [r7, #0]
 80074f0:	4798      	blx	r3
 80074f2:	4602      	mov	r2, r0
      pools_ = static_cast<Pool*>(
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	621a      	str	r2, [r3, #32]
      ARDUINOJSON_ASSERT(pools_ != nullptr);  // realloc to smaller can't fail
      capacity_ = count_;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
      -> decltype(client.getResourceManager()) {
    return client.getResourceManager();
  }

  template <typename TClient>
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
    return client.getData();
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7fe faf0 	bl	8005af6 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 8007516:	4603      	mov	r3, r0
  }
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
    return client.getData();
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7fe faad 	bl	8005a88 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>
 800752e:	4603      	mov	r3, r0
  }
 8007530:	4618      	mov	r0, r3
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7fe faad 	bl	8005aa0 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>
 8007546:	4603      	mov	r3, r0
  }
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
    ARDUINOJSON_ASSERT((p == nullptr) == (id == NULL_SLOT));
  }

  explicit operator bool() const {
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	bf14      	ite	ne
 8007560:	2301      	movne	r3, #1
 8007562:	2300      	moveq	r3, #0
 8007564:	b2db      	uxtb	r3, r3
  }
 8007566:	4618      	mov	r0, r3
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>:

  SlotId id() const {
    return id_;
  }

  T* ptr() const {
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
    return ptr_;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
  }
 800757e:	4618      	mov	r0, r3
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>:
  SlotId id() const {
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
    return id_;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	889b      	ldrh	r3, [r3, #4]
  }
 8007596:	4618      	mov	r0, r3
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>:

  T* operator->() const {
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(ptr_ != nullptr);
    return ptr_;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
  }
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 80075ba:	b480      	push	{r7}
 80075bc:	b085      	sub	sp, #20
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	4613      	mov	r3, r2
 80075c6:	80fb      	strh	r3, [r7, #6]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	88fa      	ldrh	r2, [r7, #6]
 80075d2:	809a      	strh	r2, [r3, #4]
  }
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80075f6:	809a      	strh	r2, [r3, #4]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4618      	mov	r0, r3
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>:
  Slot<T> allocSlot(Allocator* allocator) {
 8007606:	b580      	push	{r7, lr}
 8007608:	b088      	sub	sp, #32
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	607a      	str	r2, [r7, #4]
    if (freeList_ != NULL_SLOT) {
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007616:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800761a:	4293      	cmp	r3, r2
 800761c:	d005      	beq.n	800762a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x24>
      return allocFromFreeList();
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	68b9      	ldr	r1, [r7, #8]
 8007622:	4618      	mov	r0, r3
 8007624:	f000 fb34 	bl	8007c90 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>
 8007628:	e02c      	b.n	8007684 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    if (count_) {
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800762e:	2b00      	cmp	r3, #0
 8007630:	d016      	beq.n	8007660 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
      auto slot = allocFromLastPool();
 8007632:	f107 0314 	add.w	r3, r7, #20
 8007636:	68b9      	ldr	r1, [r7, #8]
 8007638:	4618      	mov	r0, r3
 800763a:	f000 fb46 	bl	8007cca <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
      if (slot)
 800763e:	f107 0314 	add.w	r3, r7, #20
 8007642:	4618      	mov	r0, r3
 8007644:	f000 f822 	bl	800768c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d008      	beq.n	8007660 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
        return slot;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	461a      	mov	r2, r3
 8007652:	f107 0314 	add.w	r3, r7, #20
 8007656:	e893 0003 	ldmia.w	r3, {r0, r1}
 800765a:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 800765e:	e011      	b.n	8007684 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    auto pool = addPool(allocator);
 8007660:	6879      	ldr	r1, [r7, #4]
 8007662:	68b8      	ldr	r0, [r7, #8]
 8007664:	f000 fb6e 	bl	8007d44 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>
 8007668:	61f8      	str	r0, [r7, #28]
    if (!pool)
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d103      	bne.n	8007678 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x72>
      return {};
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 fba3 	bl	8007dbc <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8007676:	e005      	b.n	8007684 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    return allocFromLastPool();
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	68b9      	ldr	r1, [r7, #8]
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fb24 	bl	8007cca <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
 8007682:	bf00      	nop
  }
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	3720      	adds	r7, #32
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>:
  explicit operator bool() const {
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	bf14      	ite	ne
 800769c:	2301      	movne	r3, #1
 800769e:	2300      	moveq	r3, #0
 80076a0:	b2db      	uxtb	r3, r3
  }
 80076a2:	4618      	mov	r0, r3
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>:
  T* operator->() const {
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
    return ptr_;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
  }
 80076ba:	4618      	mov	r0, r3
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>:
  SlotId id() const {
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
    return id_;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	889b      	ldrh	r3, [r3, #4]
  }
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 80076de:	b480      	push	{r7}
 80076e0:	b085      	sub	sp, #20
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60fb      	str	r3, [r7, #12]
  return ac.data;
 80076ea:	68fb      	ldr	r3, [r7, #12]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	4613      	mov	r3, r2
 8007704:	80fb      	strh	r3, [r7, #6]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	88fa      	ldrh	r2, [r7, #6]
 8007710:	809a      	strh	r2, [r3, #4]
  }
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4618      	mov	r0, r3
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>:
  void freeSlot(Slot<T> slot) {
 8007720:	b590      	push	{r4, r7, lr}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	1d3b      	adds	r3, r7, #4
 800772a:	e883 0006 	stmia.w	r3, {r1, r2}
    reinterpret_cast<FreeSlot*>(slot.ptr())->next = freeList_;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 8007732:	1d3b      	adds	r3, r7, #4
 8007734:	4618      	mov	r0, r3
 8007736:	f000 fb53 	bl	8007de0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 800773a:	4603      	mov	r3, r0
 800773c:	4622      	mov	r2, r4
 800773e:	801a      	strh	r2, [r3, #0]
    freeList_ = slot.id();
 8007740:	1d3b      	adds	r3, r7, #4
 8007742:	4618      	mov	r0, r3
 8007744:	f7ff ffbf 	bl	80076c6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8007748:	4603      	mov	r3, r0
 800774a:	461a      	mov	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }
 8007750:	bf00      	nop
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	bd90      	pop	{r4, r7, pc}

08007758 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	807b      	strh	r3, [r7, #2]
    if (id == NULL_SLOT)
 8007764:	887b      	ldrh	r3, [r7, #2]
 8007766:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800776a:	4293      	cmp	r3, r2
 800776c:	d101      	bne.n	8007772 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x1a>
      return nullptr;
 800776e:	2300      	movs	r3, #0
 8007770:	e012      	b.n	8007798 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x40>
    auto poolIndex = SlotId(id / ARDUINOJSON_POOL_CAPACITY);
 8007772:	887b      	ldrh	r3, [r7, #2]
 8007774:	09db      	lsrs	r3, r3, #7
 8007776:	81fb      	strh	r3, [r7, #14]
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
 8007778:	887b      	ldrh	r3, [r7, #2]
 800777a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800777e:	81bb      	strh	r3, [r7, #12]
    return pools_[poolIndex].getSlot(indexInPool);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a1a      	ldr	r2, [r3, #32]
 8007784:	89fb      	ldrh	r3, [r7, #14]
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	4413      	add	r3, r2
 800778a:	89ba      	ldrh	r2, [r7, #12]
 800778c:	4611      	mov	r1, r2
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fb32 	bl	8007df8 <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8007794:	4603      	mov	r3, r0
 8007796:	bf00      	nop
  }
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80077b4:	809a      	strh	r2, [r3, #4]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	4613      	mov	r3, r2
 80077d0:	80fb      	strh	r3, [r7, #6]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	88fa      	ldrh	r2, [r7, #6]
 80077dc:	809a      	strh	r2, [r3, #4]
  }
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>:
AdaptedString<TChar*> adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
AdaptedString<TChar*> adaptString(TChar* p, size_t n) {
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  return SizedStringAdapter<TChar*>::adapt(p, n);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	68b9      	ldr	r1, [r7, #8]
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fb40 	bl	8007e84 <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>
 8007804:	bf00      	nop
}
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* getString(const TAdaptedString& str) const {
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	6039      	str	r1, [r7, #0]
    return stringPool_.get(str);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3308      	adds	r3, #8
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	4618      	mov	r0, r3
 8007820:	f000 fb40 	bl	8007ea4 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8007824:	4603      	mov	r3, r0
  }
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	607a      	str	r2, [r7, #4]
 800783a:	70fb      	strb	r3, [r7, #3]
      : str_(data, size_t(sz), isStatic) {}
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	f7fd fd46 	bl	80052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8007852:	b580      	push	{r7, lr}
 8007854:	b082      	sub	sp, #8
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fe f93f 	bl	8005ade <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8007860:	4603      	mov	r3, r0
  }
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>:
AdaptedString<TString> adaptString(TString&& s) {
 800786a:	b580      	push	{r7, lr}
 800786c:	b082      	sub	sp, #8
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8007874:	6838      	ldr	r0, [r7, #0]
 8007876:	f000 fb50 	bl	8007f1a <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 800787a:	4603      	mov	r3, r0
 800787c:	4618      	mov	r0, r3
 800787e:	f7fd fe0a 	bl	8005496 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8007882:	4602      	mov	r2, r0
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	ca07      	ldmia	r2, {r0, r1, r2}
 8007888:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 8007894:	b580      	push	{r7, lr}
 8007896:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 8007898:	f04f 0000 	mov.w	r0, #0
 800789c:	4903      	ldr	r1, [pc, #12]	@ (80078ac <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv+0x18>)
 800789e:	f000 fb67 	bl	8007f70 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>
 80078a2:	eeb0 7b40 	vmov.f64	d7, d0
  }
 80078a6:	eeb0 0b47 	vmov.f64	d0, d7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	7ff00000 	.word	0x7ff00000

080078b0 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	ed87 0b02 	vstr	d0, [r7, #8]
 80078ba:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	dd04      	ble.n	80078cc <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x1c>
 80078c2:	f000 faab 	bl	8007e1c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 80078c6:	4603      	mov	r3, r0
 80078c8:	613b      	str	r3, [r7, #16]
 80078ca:	e003      	b.n	80078d4 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 80078cc:	f000 faca 	bl	8007e64 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 80078d0:	4603      	mov	r3, r0
 80078d2:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	dc02      	bgt.n	80078e0 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	425b      	negs	r3, r3
 80078de:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 80078e0:	2300      	movs	r3, #0
 80078e2:	75fb      	strb	r3, [r7, #23]
 80078e4:	e019      	b.n	800791a <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x6a>
    if (e & 1)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00e      	beq.n	800790e <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 80078f0:	7dfa      	ldrb	r2, [r7, #23]
 80078f2:	f107 0310 	add.w	r3, r7, #16
 80078f6:	4611      	mov	r1, r2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 fa9f 	bl	8007e3c <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 80078fe:	eeb0 6b40 	vmov.f64	d6, d0
 8007902:	ed97 7b02 	vldr	d7, [r7, #8]
 8007906:	ee27 7b06 	vmul.f64	d7, d7, d6
 800790a:	ed87 7b02 	vstr	d7, [r7, #8]
    e >>= 1;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	105b      	asrs	r3, r3, #1
 8007912:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	3301      	adds	r3, #1
 8007918:	75fb      	strb	r3, [r7, #23]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1e2      	bne.n	80078e6 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 8007920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007924:	ec43 2b17 	vmov	d7, r2, r3
}
 8007928:	eeb0 0b47 	vmov.f64	d0, d7
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>:
inline TFloat make_float(TFloat m, TExponent e) {
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	ed87 0a01 	vstr	s0, [r7, #4]
 800793c:	6038      	str	r0, [r7, #0]
  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	dd04      	ble.n	800794e <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x1c>
 8007944:	f000 fb24 	bl	8007f90 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>
 8007948:	4603      	mov	r3, r0
 800794a:	60bb      	str	r3, [r7, #8]
 800794c:	e003      	b.n	8007956 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 800794e:	f000 fb2f 	bl	8007fb0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>
 8007952:	4603      	mov	r3, r0
 8007954:	60bb      	str	r3, [r7, #8]
  if (e <= 0)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	dc02      	bgt.n	8007962 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x30>
    e = TExponent(-e);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	425b      	negs	r3, r3
 8007960:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]
 8007966:	e019      	b.n	800799c <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x6a>
    if (e & 1)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00e      	beq.n	8007990 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 8007972:	7bfa      	ldrb	r2, [r7, #15]
 8007974:	f107 0308 	add.w	r3, r7, #8
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fb28 	bl	8007fd0 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>
 8007980:	eeb0 7a40 	vmov.f32	s14, s0
 8007984:	edd7 7a01 	vldr	s15, [r7, #4]
 8007988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800798c:	edc7 7a01 	vstr	s15, [r7, #4]
    e >>= 1;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	105b      	asrs	r3, r3, #1
 8007994:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	3301      	adds	r3, #1
 800799a:	73fb      	strb	r3, [r7, #15]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1e2      	bne.n	8007968 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x36>
  return m;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	ee07 3a90 	vmov	s15, r3
}
 80079a8:	eeb0 0a67 	vmov.f32	s0, s15
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>:
  detail::MemberProxy<JsonDocument&, detail::AdaptedString<TString>> operator[](
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b08a      	sub	sp, #40	@ 0x28
 80079b6:	af02      	add	r7, sp, #8
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 80079be:	f107 0314 	add.w	r3, r7, #20
 80079c2:	6879      	ldr	r1, [r7, #4]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 fb17 	bl	8007ff8 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	f107 0314 	add.w	r3, r7, #20
 80079d2:	cb0c      	ldmia	r3, {r2, r3}
 80079d4:	68b9      	ldr	r1, [r7, #8]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 fb21 	bl	800801e <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>
  }
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	3720      	adds	r7, #32
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>:
  operator T() const {
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
    return as<T>();
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 f876 	bl	8007ae4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 80079f8:	bf00      	nop
  }
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>:
  operator T() const {
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	6039      	str	r1, [r7, #0]
    return as<T>();
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 fb20 	bl	8008056 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>
 8007a16:	bf00      	nop
  }
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08c      	sub	sp, #48	@ 0x30
 8007a24:	af02      	add	r7, sp, #8
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	f107 0314 	add.w	r3, r7, #20
 8007a32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a36:	e883 0003 	stmia.w	r3, {r0, r1}
 8007a3a:	f107 031c 	add.w	r3, r7, #28
 8007a3e:	6879      	ldr	r1, [r7, #4]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 fb2c 	bl	800809e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8007a46:	466a      	mov	r2, sp
 8007a48:	f107 0320 	add.w	r3, r7, #32
 8007a4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007a50:	e882 0003 	stmia.w	r2, {r0, r1}
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	f107 0214 	add.w	r2, r7, #20
 8007a5a:	ca06      	ldmia	r2, {r1, r2}
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 f8f8 	bl	8007c52 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	3728      	adds	r7, #40	@ 0x28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
    return as<T>();
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fb26 	bl	80080c4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>
 8007a78:	4603      	mov	r3, r0
  }
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b08c      	sub	sp, #48	@ 0x30
 8007a86:	af02      	add	r7, sp, #8
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	60b9      	str	r1, [r7, #8]
 8007a8c:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	f107 0314 	add.w	r3, r7, #20
 8007a94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a98:	e883 0003 	stmia.w	r3, {r0, r1}
 8007a9c:	f107 031c 	add.w	r3, r7, #28
 8007aa0:	6879      	ldr	r1, [r7, #4]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fb30 	bl	8008108 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8007aa8:	466a      	mov	r2, sp
 8007aaa:	f107 0320 	add.w	r3, r7, #32
 8007aae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007ab2:	e882 0003 	stmia.w	r2, {r0, r1}
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f107 0214 	add.w	r2, r7, #20
 8007abc:	ca06      	ldmia	r2, {r1, r2}
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 f8c7 	bl	8007c52 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	3728      	adds	r7, #40	@ 0x28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>:
  operator T() const {
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
    return as<T>();
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fb2a 	bl	800812e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>
 8007ada:	4603      	mov	r3, r0
  }
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8007ae4:	b590      	push	{r4, r7, lr}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	617b      	str	r3, [r7, #20]
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8007af6:	6938      	ldr	r0, [r7, #16]
 8007af8:	f000 fec0 	bl	800887c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 8007afc:	4604      	mov	r4, r0
 8007afe:	6938      	ldr	r0, [r7, #16]
 8007b00:	f000 fecc 	bl	800889c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8007b04:	4602      	mov	r2, r0
 8007b06:	f107 0308 	add.w	r3, r7, #8
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fd ffd3 	bl	8005ab8 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8007b12:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f107 0308 	add.w	r3, r7, #8
 8007b1a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007b1e:	f7fe fcb9 	bl	8006494 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>
 8007b22:	bf00      	nop
}
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	371c      	adds	r7, #28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd90      	pop	{r4, r7, pc}

08007b2c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	4613      	mov	r3, r2
 8007b38:	71fb      	strb	r3, [r7, #7]
      __string_type __str(__lhs);
 8007b3a:	68b9      	ldr	r1, [r7, #8]
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f021 f842 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	461a      	mov	r2, r3
 8007b46:	2101      	movs	r1, #1
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f020 ff4b 	bl	80289e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8007b4e:	bf00      	nop
    }
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>:
// Parses a JSON input, filters, and puts the result in a JsonDocument.
// https://arduinojson.org/v7/api/json/deserializejson/
template <typename TDestination, typename TChar, typename... Args,
          detail::enable_if_t<
              detail::is_deserialize_destination<TDestination>::value, int> = 0>
inline DeserializationError deserializeJson(TDestination&& dst, TChar* input,
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
                                            Args&&... args) {
  using namespace detail;
  return deserialize<JsonDeserializer>(detail::forward<TDestination>(dst),
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fb05 	bl	8008172 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	463b      	mov	r3, r7
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	f000 fb0a 	bl	8008188 <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>
 8007b74:	4603      	mov	r3, r0
                                       input, detail::forward<Args>(args)...);
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>:
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
    capacity_ = slots_ ? cap : 0;
    usage_ = 0;
  }

  void destroy(Allocator* allocator) {
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b082      	sub	sp, #8
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	6039      	str	r1, [r7, #0]
    if (slots_)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d008      	beq.n	8007ba2 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE+0x24>
      allocator->deallocate(slots_);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3304      	adds	r3, #4
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6852      	ldr	r2, [r2, #4]
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	6838      	ldr	r0, [r7, #0]
 8007ba0:	4798      	blx	r3
    slots_ = nullptr;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	605a      	str	r2, [r3, #4]
    capacity_ = 0;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	805a      	strh	r2, [r3, #2]
  }
 8007bb4:	bf00      	nop
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>:

  static SlotCount bytesToSlots(size_t n) {
    return static_cast<SlotCount>(n / sizeof(T));
  }

  static size_t slotsToBytes(SlotCount n) {
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	80fb      	strh	r3, [r7, #6]
    return n * sizeof(T);
 8007bc6:	88fb      	ldrh	r3, [r7, #6]
 8007bc8:	00db      	lsls	r3, r3, #3
  }
 8007bca:	4618      	mov	r0, r3
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:
  void shrinkToFit(Allocator* allocator) {
 8007bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bd8:	b085      	sub	sp, #20
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	6039      	str	r1, [r7, #0]
        allocator->reallocate(slots_, slotsToBytes(usage_)));
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3308      	adds	r3, #8
 8007be6:	681c      	ldr	r4, [r3, #0]
 8007be8:	683d      	ldr	r5, [r7, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685e      	ldr	r6, [r3, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	885b      	ldrh	r3, [r3, #2]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff ffe2 	bl	8007bbc <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4628      	mov	r0, r5
 8007c00:	47a0      	blx	r4
 8007c02:	60f8      	str	r0, [r7, #12]
    if (newSlots) {
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d006      	beq.n	8007c18 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x42>
      slots_ = newSlots;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	605a      	str	r2, [r3, #4]
      capacity_ = usage_;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	885a      	ldrh	r2, [r3, #2]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	801a      	strh	r2, [r3, #0]
  }
 8007c18:	bf00      	nop
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c20 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>:
  template <typename TAdaptedString>
  VariantData* getMember(TAdaptedString key,
                         const ResourceManager* resources) const;

  template <typename TAdaptedString>
  static VariantData* getMember(const ObjectData* object, TAdaptedString key,
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af02      	add	r7, sp, #8
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	4638      	mov	r0, r7
 8007c2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                const ResourceManager* resources) {
    if (!object)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d101      	bne.n	8007c38 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x18>
      return nullptr;
 8007c34:	2300      	movs	r3, #0
 8007c36:	e008      	b.n	8007c4a <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return object->getMember(key, resources);
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	463b      	mov	r3, r7
 8007c40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c42:	f000 fac2 	bl	80081ca <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 8007c46:	4603      	mov	r3, r0
 8007c48:	bf00      	nop
  }
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>:

  template <typename>
  friend class ElementProxy;

 public:
  MemberProxy(TUpstream upstream, AdaptedString key)
 8007c52:	b082      	sub	sp, #8
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	1d38      	adds	r0, r7, #4
 8007c5e:	e880 0006 	stmia.w	r0, {r1, r2}
 8007c62:	61fb      	str	r3, [r7, #28]
      : upstream_(upstream), key_(key) {}
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	3304      	adds	r3, #4
 8007c68:	1d3a      	adds	r2, r7, #4
 8007c6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	330c      	adds	r3, #12
 8007c76:	f107 021c 	add.w	r2, r7, #28
 8007c7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	b002      	add	sp, #8
 8007c8e:	4770      	bx	lr

08007c90 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>:

 private:
  Slot<T> allocFromFreeList() {
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(freeList_ != NULL_SLOT);
    auto id = freeList_;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c9e:	81fb      	strh	r3, [r7, #14]
    auto slot = getSlot(freeList_);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6838      	ldr	r0, [r7, #0]
 8007ca8:	f7ff fd56 	bl	8007758 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8007cac:	60b8      	str	r0, [r7, #8]
    freeList_ = reinterpret_cast<FreeSlot*>(slot)->next;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	881a      	ldrh	r2, [r3, #0]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
    return {slot, id};
 8007cb6:	89fb      	ldrh	r3, [r7, #14]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	68b9      	ldr	r1, [r7, #8]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff fd1b 	bl	80076f8 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>:

  Slot<T> allocFromLastPool() {
 8007cca:	b5b0      	push	{r4, r5, r7, lr}
 8007ccc:	b086      	sub	sp, #24
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(count_ > 0);
    auto poolIndex = SlotId(count_ - 1);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	82fb      	strh	r3, [r7, #22]
    auto slot = pools_[poolIndex].allocSlot();
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	6a1a      	ldr	r2, [r3, #32]
 8007ce0:	8afb      	ldrh	r3, [r7, #22]
 8007ce2:	00db      	lsls	r3, r3, #3
 8007ce4:	441a      	add	r2, r3
 8007ce6:	f107 030c 	add.w	r3, r7, #12
 8007cea:	4611      	mov	r1, r2
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fa99 	bl	8008224 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>
    if (!slot)
 8007cf2:	f107 030c 	add.w	r3, r7, #12
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7ff fcc8 	bl	800768c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	f083 0301 	eor.w	r3, r3, #1
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d003      	beq.n	8007d10 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x46>
      return {};
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f857 	bl	8007dbc <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8007d0e:	e015      	b.n	8007d3c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x72>
    return {slot.ptr(),
            SlotId(poolIndex * ARDUINOJSON_POOL_CAPACITY + slot.id())};
 8007d10:	f107 030c 	add.w	r3, r7, #12
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 f863 	bl	8007de0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	8afb      	ldrh	r3, [r7, #22]
 8007d1e:	01db      	lsls	r3, r3, #7
 8007d20:	b29c      	uxth	r4, r3
 8007d22:	f107 030c 	add.w	r3, r7, #12
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7ff fccd 	bl	80076c6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	4423      	add	r3, r4
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	461a      	mov	r2, r3
 8007d34:	4629      	mov	r1, r5
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff fcde 	bl	80076f8 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	3718      	adds	r7, #24
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bdb0      	pop	{r4, r5, r7, pc}

08007d44 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>:

  Pool* addPool(Allocator* allocator) {
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
    if (count_ == capacity_ && !increaseCapacity(allocator))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d10b      	bne.n	8007d72 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fa8d 	bl	800827c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>
 8007d62:	4603      	mov	r3, r0
 8007d64:	f083 0301 	eor.w	r3, r3, #1
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e000      	b.n	8007d74 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x30>
 8007d72:	2300      	movs	r3, #0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x38>
      return nullptr;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	e01b      	b.n	8007db4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x70>
    auto pool = &pools_[count_++];
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a1a      	ldr	r2, [r3, #32]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007d84:	1c59      	adds	r1, r3, #1
 8007d86:	b288      	uxth	r0, r1
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	8488      	strh	r0, [r1, #36]	@ 0x24
 8007d8c:	00db      	lsls	r3, r3, #3
 8007d8e:	4413      	add	r3, r2
 8007d90:	60bb      	str	r3, [r7, #8]
    SlotCount poolCapacity = ARDUINOJSON_POOL_CAPACITY;
 8007d92:	2380      	movs	r3, #128	@ 0x80
 8007d94:	81fb      	strh	r3, [r7, #14]
    if (count_ == maxPools)  // last pool is smaller because of NULL_SLOT
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d9e:	d102      	bne.n	8007da6 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x62>
      poolCapacity--;
 8007da0:	89fb      	ldrh	r3, [r7, #14]
 8007da2:	3b01      	subs	r3, #1
 8007da4:	81fb      	strh	r3, [r7, #14]
    pool->create(poolCapacity, allocator);
 8007da6:	89fb      	ldrh	r3, [r7, #14]
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	4619      	mov	r1, r3
 8007dac:	68b8      	ldr	r0, [r7, #8]
 8007dae:	f000 faaa 	bl	8008306 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>
    return pool;
 8007db2:	68bb      	ldr	r3, [r7, #8]
  }
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007dd0:	809a      	strh	r2, [r3, #4]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>:
  T* ptr() const {
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
    return ptr_;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
  }
 8007dec:	4618      	mov	r0, r3
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	807b      	strh	r3, [r7, #2]
    return slots_ + id;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	887b      	ldrh	r3, [r7, #2]
 8007e0a:	00db      	lsls	r3, r3, #3
 8007e0c:	4413      	add	r3, r2
  }
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
	...

08007e1c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8007e22:	1d3b      	adds	r3, r7, #4
 8007e24:	4904      	ldr	r1, [pc, #16]	@ (8007e38 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 fa93 	bl	8008352 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 8007e2c:	687b      	ldr	r3, [r7, #4]
  }
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	0802b280 	.word	0x0802b280

08007e3c <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	00db      	lsls	r3, r3, #3
 8007e4e:	4413      	add	r3, r2
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 fa8d 	bl	8008370 <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>
 8007e56:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8007e5a:	eeb0 0b47 	vmov.f64	d0, d7
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8007e6a:	1d3b      	adds	r3, r7, #4
 8007e6c:	4904      	ldr	r1, [pc, #16]	@ (8007e80 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fa6f 	bl	8008352 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 8007e74:	687b      	ldr	r3, [r7, #4]
  }
 8007e76:	4618      	mov	r0, r3
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	0802b2c8 	.word	0x0802b2c8

08007e84 <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>:

template <typename TChar>
struct SizedStringAdapter<TChar*, enable_if_t<IsChar<TChar>::value>> {
  using AdaptedString = RamString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 8007e90:	2300      	movs	r3, #0
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	68b9      	ldr	r1, [r7, #8]
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f7fd fa1c 	bl	80052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* get(const TAdaptedString& str) const {
 8007ea4:	b590      	push	{r4, r7, lr}
 8007ea6:	b089      	sub	sp, #36	@ 0x24
 8007ea8:	af02      	add	r7, sp, #8
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
    for (auto node = strings_; node; node = node->next) {
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	617b      	str	r3, [r7, #20]
 8007eb4:	e01e      	b.n	8007ef4 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x50>
      if (stringEquals(str, adaptString(node->data, node->length)))
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f103 0108 	add.w	r1, r3, #8
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	88db      	ldrh	r3, [r3, #6]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	f107 0308 	add.w	r3, r7, #8
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7ff fc90 	bl	80077ec <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	466c      	mov	r4, sp
 8007ed0:	f107 030c 	add.w	r3, r7, #12
 8007ed4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007ed8:	e884 0003 	stmia.w	r4, {r0, r1}
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	ca07      	ldmia	r2, {r0, r1, r2}
 8007ee0:	f000 fa56 	bl	8008390 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x4a>
        return node;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	e006      	b.n	8007efc <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x58>
    for (auto node = strings_; node; node = node->next) {
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	617b      	str	r3, [r7, #20]
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1dd      	bne.n	8007eb6 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x12>
    return nullptr;
 8007efa:	2300      	movs	r3, #0
  }
 8007efc:	4618      	mov	r0, r3
 8007efe:	371c      	adds	r7, #28
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd90      	pop	{r4, r7, pc}

08007f04 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

using nullptr_t = decltype(nullptr);

template <class T>
T&& forward(remove_reference_t<T>& t) noexcept {
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8007f0c:	687b      	ldr	r3, [r7, #4]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8007f22:	687b      	ldr	r3, [r7, #4]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fa6b 	bl	8008414 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 fa72 	bl	800842a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8007f46:	4603      	mov	r3, r0
  }
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>:
  VariantData* getData() const {
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fa5b 	bl	8008414 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fa6e 	bl	8008442 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8007f66:	4603      	mov	r3, r0
  }
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 8007f7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f7e:	f000 fa6c 	bl	800845a <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>
 8007f82:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8007f86:	eeb0 0b47 	vmov.f64	d0, d7
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8007f96:	1d3b      	adds	r3, r7, #4
 8007f98:	4904      	ldr	r1, [pc, #16]	@ (8007fac <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv+0x1c>)
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fa71 	bl	8008482 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8007fa0:	687b      	ldr	r3, [r7, #4]
  }
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	0802b310 	.word	0x0802b310

08007fb0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8007fb6:	1d3b      	adds	r3, r7, #4
 8007fb8:	4904      	ldr	r1, [pc, #16]	@ (8007fcc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv+0x1c>)
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fa61 	bl	8008482 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 8007fc0:	687b      	ldr	r3, [r7, #4]
  }
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	0802b328 	.word	0x0802b328

08007fd0 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>:
  T operator[](intptr_t index) const {
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fa5b 	bl	80084a0 <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>
 8007fea:	eef0 7a40 	vmov.f32	s15, s0
  }
 8007fee:	eeb0 0a67 	vmov.f32	s0, s15
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8008002:	6838      	ldr	r0, [r7, #0]
 8008004:	f000 fa5b 	bl	80084be <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8008008:	4602      	mov	r2, r0
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4611      	mov	r1, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f000 fa60 	bl	80084d4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>
 8008014:	bf00      	nop
}
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 800801e:	b082      	sub	sp, #8
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
 800802a:	f107 0110 	add.w	r1, r7, #16
 800802e:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3304      	adds	r3, #4
 800803c:	f107 0210 	add.w	r2, r7, #16
 8008040:	ca07      	ldmia	r2, {r0, r1, r2}
 8008042:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	b002      	add	sp, #8
 8008054:	4770      	bx	lr

08008056 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8008056:	b590      	push	{r4, r7, lr}
 8008058:	b087      	sub	sp, #28
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	6039      	str	r1, [r7, #0]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	617b      	str	r3, [r7, #20]
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8008068:	6938      	ldr	r0, [r7, #16]
 800806a:	f7ff ff71 	bl	8007f50 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>
 800806e:	4604      	mov	r4, r0
 8008070:	6938      	ldr	r0, [r7, #16]
 8008072:	f7ff ff5d 	bl	8007f30 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 8008076:	4602      	mov	r2, r0
 8008078:	f107 0308 	add.w	r3, r7, #8
 800807c:	4621      	mov	r1, r4
 800807e:	4618      	mov	r0, r3
 8008080:	f7fd fd1a 	bl	8005ab8 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8008084:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f107 0308 	add.w	r3, r7, #8
 800808c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008090:	f7fe fa23 	bl	80064da <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>
 8008094:	bf00      	nop
}
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	371c      	adds	r7, #28
 800809a:	46bd      	mov	sp, r7
 800809c:	bd90      	pop	{r4, r7, pc}

0800809e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800809e:	b580      	push	{r7, lr}
 80080a0:	b082      	sub	sp, #8
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80080a8:	6838      	ldr	r0, [r7, #0]
 80080aa:	f000 fa22 	bl	80084f2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80080ae:	4602      	mov	r2, r0
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4611      	mov	r1, r2
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 fa27 	bl	8008508 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>
 80080ba:	bf00      	nop
}
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80080c4:	b590      	push	{r4, r7, lr}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80080d4:	6938      	ldr	r0, [r7, #16]
 80080d6:	f000 fca0 	bl	8008a1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 80080da:	4604      	mov	r4, r0
 80080dc:	6938      	ldr	r0, [r7, #16]
 80080de:	f000 fb2b 	bl	8008738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 80080e2:	4602      	mov	r2, r0
 80080e4:	f107 0308 	add.w	r3, r7, #8
 80080e8:	4621      	mov	r1, r4
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fd fcb9 	bl	8005a62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80080f0:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80080f2:	f107 0308 	add.w	r3, r7, #8
 80080f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80080fa:	f7fe f9ab 	bl	8006454 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 80080fe:	4603      	mov	r3, r0
}
 8008100:	4618      	mov	r0, r3
 8008102:	371c      	adds	r7, #28
 8008104:	46bd      	mov	sp, r7
 8008106:	bd90      	pop	{r4, r7, pc}

08008108 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8008112:	6838      	ldr	r0, [r7, #0]
 8008114:	f000 fa07 	bl	8008526 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8008118:	4602      	mov	r2, r0
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4611      	mov	r1, r2
 800811e:	4618      	mov	r0, r3
 8008120:	f000 fa0c 	bl	800853c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>
 8008124:	bf00      	nop
}
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800812e:	b590      	push	{r4, r7, lr}
 8008130:	b087      	sub	sp, #28
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	617b      	str	r3, [r7, #20]
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800813e:	6938      	ldr	r0, [r7, #16]
 8008140:	f000 fc6b 	bl	8008a1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8008144:	4604      	mov	r4, r0
 8008146:	6938      	ldr	r0, [r7, #16]
 8008148:	f000 faf6 	bl	8008738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800814c:	4602      	mov	r2, r0
 800814e:	f107 0308 	add.w	r3, r7, #8
 8008152:	4621      	mov	r1, r4
 8008154:	4618      	mov	r0, r3
 8008156:	f7fd fc84 	bl	8005a62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800815a:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800815c:	f107 0308 	add.w	r3, r7, #8
 8008160:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008164:	f000 f9f9 	bl	800855a <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>
 8008168:	4603      	mov	r3, r0
}
 800816a:	4618      	mov	r0, r3
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	bd90      	pop	{r4, r7, pc}

08008172 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800817a:	687b      	ldr	r3, [r7, #4]
}
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>:
template <
    template <typename> class TDeserializer, typename TDestination,
    typename TStream, typename... Args,
    enable_if_t<  // issue #1897
        !is_integral<typename first_or_void<Args...>::type>::value, int> = 0>
DeserializationError deserialize(TDestination&& dst, TStream&& input,
 8008188:	b590      	push	{r4, r7, lr}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
                                 Args... args) {
  return doDeserialize<TDeserializer>(
 8008192:	6838      	ldr	r0, [r7, #0]
 8008194:	f7ff feb6 	bl	8007f04 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8008198:	4603      	mov	r3, r0
 800819a:	4618      	mov	r0, r3
 800819c:	f000 f9fb 	bl	8008596 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>
 80081a0:	4604      	mov	r4, r0
 80081a2:	f107 0308 	add.w	r3, r7, #8
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe fa66 	bl	8006678 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>
 80081ac:	7a38      	ldrb	r0, [r7, #8]
 80081ae:	f7fe faa5 	bl	80066fc <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>
 80081b2:	4603      	mov	r3, r0
 80081b4:	81bb      	strh	r3, [r7, #12]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	4621      	mov	r1, r4
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fa0c 	bl	80085d8 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>
 80081c0:	4603      	mov	r3, r0
      dst, makeReader(detail::forward<TStream>(input)),
      makeDeserializationOptions(args...));
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd90      	pop	{r4, r7, pc}

080081ca <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TAdaptedString>
inline VariantData* ObjectData::getMember(
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b088      	sub	sp, #32
 80081ce:	af02      	add	r7, sp, #8
 80081d0:	60f8      	str	r0, [r7, #12]
 80081d2:	4638      	mov	r0, r7
 80081d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  auto it = findKey(key, resources);
 80081d8:	f107 0010 	add.w	r0, r7, #16
 80081dc:	6a3b      	ldr	r3, [r7, #32]
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	463b      	mov	r3, r7
 80081e6:	cb0c      	ldmia	r3, {r2, r3}
 80081e8:	68f9      	ldr	r1, [r7, #12]
 80081ea:	f000 fa2e 	bl	800864a <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>
  if (it.done())
 80081ee:	f107 0310 	add.w	r3, r7, #16
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fd f96c 	bl	80054d0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x38>
    return nullptr;
 80081fe:	2300      	movs	r3, #0
 8008200:	e00c      	b.n	800821c <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x52>
  it.next(resources);
 8008202:	f107 0310 	add.w	r3, r7, #16
 8008206:	6a39      	ldr	r1, [r7, #32]
 8008208:	4618      	mov	r0, r3
 800820a:	f7fd fe20 	bl	8005e4e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
  return it.data();
 800820e:	f107 0310 	add.w	r3, r7, #16
 8008212:	4618      	mov	r0, r3
 8008214:	f7fd f98d 	bl	8005532 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8008218:	4603      	mov	r3, r0
 800821a:	bf00      	nop
}
 800821c:	4618      	mov	r0, r3
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>:
  Slot<T> allocSlot() {
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
    if (!slots_)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d103      	bne.n	800823e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x1a>
      return {};
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7ff fdc0 	bl	8007dbc <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 800823c:	e01a      	b.n	8008274 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    if (usage_ >= capacity_)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	885a      	ldrh	r2, [r3, #2]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	429a      	cmp	r2, r3
 8008248:	d303      	bcc.n	8008252 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x2e>
      return {};
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7ff fdb6 	bl	8007dbc <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8008250:	e010      	b.n	8008274 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    auto index = usage_++;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	885b      	ldrh	r3, [r3, #2]
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	b291      	uxth	r1, r2
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	8051      	strh	r1, [r2, #2]
 800825e:	81fb      	strh	r3, [r7, #14]
    return {slots_ + index, SlotId(index)};
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	89fb      	ldrh	r3, [r7, #14]
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	4413      	add	r3, r2
 800826a:	89fa      	ldrh	r2, [r7, #14]
 800826c:	4619      	mov	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7ff fa42 	bl	80076f8 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>:

  bool increaseCapacity(Allocator* allocator) {
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
    if (capacity_ == maxPools)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800828a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800828e:	d101      	bne.n	8008294 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x18>
      return false;
 8008290:	2300      	movs	r3, #0
 8008292:	e034      	b.n	80082fe <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    void* newPools;
    auto newCapacity = PoolCount(capacity_ * 2);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	817b      	strh	r3, [r7, #10]

    if (pools_ == preallocatedPools_) {
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a1a      	ldr	r2, [r3, #32]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d114      	bne.n	80082d0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x54>
      newPools = allocator->allocate(newCapacity * sizeof(Pool));
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	897a      	ldrh	r2, [r7, #10]
 80082ae:	00d2      	lsls	r2, r2, #3
 80082b0:	4611      	mov	r1, r2
 80082b2:	6838      	ldr	r0, [r7, #0]
 80082b4:	4798      	blx	r3
 80082b6:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x46>
        return false;
 80082be:	2300      	movs	r3, #0
 80082c0:	e01d      	b.n	80082fe <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
      memcpy(newPools, preallocatedPools_, sizeof(preallocatedPools_));
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2220      	movs	r2, #32
 80082c6:	4619      	mov	r1, r3
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f021 fa64 	bl	8029796 <memcpy>
 80082ce:	e00f      	b.n	80082f0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
    } else {
      newPools = allocator->reallocate(pools_, newCapacity * sizeof(Pool));
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3308      	adds	r3, #8
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	6a11      	ldr	r1, [r2, #32]
 80082dc:	897a      	ldrh	r2, [r7, #10]
 80082de:	00d2      	lsls	r2, r2, #3
 80082e0:	6838      	ldr	r0, [r7, #0]
 80082e2:	4798      	blx	r3
 80082e4:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
        return false;
 80082ec:	2300      	movs	r3, #0
 80082ee:	e006      	b.n	80082fe <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    }

    pools_ = static_cast<Pool*>(newPools);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	621a      	str	r2, [r3, #32]
    capacity_ = newCapacity;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	897a      	ldrh	r2, [r7, #10]
 80082fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    return true;
 80082fc:	2301      	movs	r3, #1
  }
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>:
  void create(SlotCount cap, Allocator* allocator) {
 8008306:	b5b0      	push	{r4, r5, r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	60f8      	str	r0, [r7, #12]
 800830e:	460b      	mov	r3, r1
 8008310:	607a      	str	r2, [r7, #4]
 8008312:	817b      	strh	r3, [r7, #10]
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681c      	ldr	r4, [r3, #0]
 800831a:	687d      	ldr	r5, [r7, #4]
 800831c:	897b      	ldrh	r3, [r7, #10]
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff fc4c 	bl	8007bbc <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8008324:	4603      	mov	r3, r0
 8008326:	4619      	mov	r1, r3
 8008328:	4628      	mov	r0, r5
 800832a:	47a0      	blx	r4
 800832c:	4602      	mov	r2, r0
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	605a      	str	r2, [r3, #4]
    capacity_ = slots_ ? cap : 0;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x38>
 800833a:	897a      	ldrh	r2, [r7, #10]
 800833c:	e000      	b.n	8008340 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x3a>
 800833e:	2200      	movs	r2, #0
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	805a      	strh	r2, [r3, #2]
  }
 800834a:	bf00      	nop
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bdb0      	pop	{r4, r5, r7, pc}

08008352 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8008352:	b480      	push	{r7}
 8008354:	b083      	sub	sp, #12
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	6039      	str	r1, [r7, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4618      	mov	r0, r3
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  return *p;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837e:	ec43 2b17 	vmov	d7, r2, r3
}
 8008382:	eeb0 0b47 	vmov.f64	d0, d7
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
  return -stringCompare(s2, s1);
}

template <typename TAdaptedString1, typename TAdaptedString2>
enable_if_t<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey, bool>
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8008390:	b082      	sub	sp, #8
 8008392:	b590      	push	{r4, r7, lr}
 8008394:	b089      	sub	sp, #36	@ 0x24
 8008396:	af00      	add	r7, sp, #0
 8008398:	1d3c      	adds	r4, r7, #4
 800839a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800839e:	637b      	str	r3, [r7, #52]	@ 0x34
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 80083a0:	1d3b      	adds	r3, r7, #4
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fc ffbe 	bl	8005324 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 80083a8:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 80083aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fc ffb8 	bl	8005324 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 80083b4:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 80083b6:	69ba      	ldr	r2, [r7, #24]
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d001      	beq.n	80083c2 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x32>
    return false;
 80083be:	2300      	movs	r3, #0
 80083c0:	e021      	b.n	8008406 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 80083c2:	2300      	movs	r3, #0
 80083c4:	61fb      	str	r3, [r7, #28]
 80083c6:	e019      	b.n	80083fc <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
    if (s1[i] != s2[i])
 80083c8:	1d3b      	adds	r3, r7, #4
 80083ca:	69f9      	ldr	r1, [r7, #28]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7f8 fc9b 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 80083d2:	4603      	mov	r3, r0
 80083d4:	461c      	mov	r4, r3
 80083d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80083da:	69f9      	ldr	r1, [r7, #28]
 80083dc:	4618      	mov	r0, r3
 80083de:	f7f8 fc93 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 80083e2:	4603      	mov	r3, r0
 80083e4:	429c      	cmp	r4, r3
 80083e6:	bf14      	ite	ne
 80083e8:	2301      	movne	r3, #1
 80083ea:	2300      	moveq	r3, #0
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x66>
      return false;
 80083f2:	2300      	movs	r3, #0
 80083f4:	e007      	b.n	8008406 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	3301      	adds	r3, #1
 80083fa:	61fb      	str	r3, [r7, #28]
 80083fc:	69fa      	ldr	r2, [r7, #28]
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	429a      	cmp	r2, r3
 8008402:	d3e1      	bcc.n	80083c8 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x38>
  }
  return true;
 8008404:	2301      	movs	r3, #1
}
 8008406:	4618      	mov	r0, r3
 8008408:	3724      	adds	r7, #36	@ 0x24
 800840a:	46bd      	mov	sp, r7
 800840c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008410:	b002      	add	sp, #8
 8008412:	4770      	bx	lr

08008414 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>:
  const TDerived& derived() const {
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800841c:	687b      	ldr	r3, [r7, #4]
  }
 800841e:	4618      	mov	r0, r3
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7fd fb53 	bl	8005ade <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8008438:	4603      	mov	r3, r0
  }
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8008442:	b580      	push	{r7, lr}
 8008444:	b082      	sub	sp, #8
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
    return client.getData();
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7fd fb53 	bl	8005af6 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 8008450:	4603      	mov	r3, r0
  }
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>:
T alias_cast(F raw_data) {
 800845a:	b480      	push	{r7}
 800845c:	b085      	sub	sp, #20
 800845e:	af00      	add	r7, sp, #0
 8008460:	e9c7 0100 	strd	r0, r1, [r7]
  ac.raw = raw_data;
 8008464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008468:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 800846c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008470:	ec43 2b17 	vmov	d7, r2, r3
}
 8008474:	eeb0 0b47 	vmov.f64	d0, d7
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8008482:	b480      	push	{r7}
 8008484:	b083      	sub	sp, #12
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>:
inline T pgm_read(const T* p) {
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  return *p;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	ee07 3a90 	vmov	s15, r3
}
 80084b0:	eeb0 0a67 	vmov.f32	s0, s15
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80084c6:	687b      	ldr	r3, [r7, #4]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 80084de:	2301      	movs	r3, #1
 80084e0:	2207      	movs	r2, #7
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7fc fef5 	bl	80052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80084fa:	687b      	ldr	r3, [r7, #4]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8008512:	2301      	movs	r3, #1
 8008514:	2206      	movs	r2, #6
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7fc fedb 	bl	80052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8008526:	b480      	push	{r7}
 8008528:	b083      	sub	sp, #12
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800852e:	687b      	ldr	r3, [r7, #4]
}
 8008530:	4618      	mov	r0, r3
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8008546:	2301      	movs	r3, #1
 8008548:	2209      	movs	r2, #9
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7fc fec1 	bl	80052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	463b      	mov	r3, r7
 8008562:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8008566:	463b      	mov	r3, r7
 8008568:	4618      	mov	r0, r3
 800856a:	f7fe ffd9 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800856e:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8008570:	463b      	mov	r3, r7
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe ffe0 	bl	8007538 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8008578:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d005      	beq.n	800858c <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8008580:	68b9      	ldr	r1, [r7, #8]
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 f8e8 	bl	8008758 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>
 8008588:	4603      	mov	r3, r0
 800858a:	e000      	b.n	800858e <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x34>
 800858c:	2300      	movs	r3, #0
  }
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
Reader<remove_reference_t<TInput>> makeReader(TInput&& input) {
 8008596:	b580      	push	{r7, lr}
 8008598:	b084      	sub	sp, #16
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  return Reader<remove_reference_t<TInput>>{detail::forward<TInput>(input)};
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff fcb0 	bl	8007f04 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80085a4:	4603      	mov	r3, r0
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	f107 030c 	add.w	r3, r7, #12
 80085ac:	4611      	mov	r1, r2
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 f984 	bl	80088bc <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>
 80085b4:	68fb      	ldr	r3, [r7, #12]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>:
class JsonDeserializer {
 80085be:	b580      	push	{r7, lr}
 80085c0:	b082      	sub	sp, #8
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fd fe78 	bl	80062be <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4618      	mov	r0, r3
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>:
DeserializationError doDeserialize(TDestination&& dst, TReader reader,
 80085d8:	b590      	push	{r4, r7, lr}
 80085da:	b0a1      	sub	sp, #132	@ 0x84
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	80ba      	strh	r2, [r7, #4]
  auto data = VariantAttorney::getOrCreateData(dst);
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 f97f 	bl	80088e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>
 80085ea:	67f8      	str	r0, [r7, #124]	@ 0x7c
  if (!data)
 80085ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d107      	bne.n	8008602 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x2a>
    return DeserializationError::NoMemory;
 80085f2:	f107 0318 	add.w	r3, r7, #24
 80085f6:	2104      	movs	r1, #4
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fd ffe2 	bl	80065c2 <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 80085fe:	7e3b      	ldrb	r3, [r7, #24]
 8008600:	e01f      	b.n	8008642 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x6a>
  auto resources = VariantAttorney::getResourceManager(dst);
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 f97c 	bl	8008900 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8008608:	67b8      	str	r0, [r7, #120]	@ 0x78
  dst.clear();
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f7fd fb9f 	bl	8005d4e <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>
  auto err = TDeserializer<TReader>(resources, reader)
 8008610:	f107 031c 	add.w	r3, r7, #28
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008618:	4618      	mov	r0, r3
 800861a:	f000 f97d 	bl	8008918 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>
                 .parse(*data, options.filter, options.nestingLimit);
 800861e:	f107 001c 	add.w	r0, r7, #28
 8008622:	797b      	ldrb	r3, [r7, #5]
 8008624:	4622      	mov	r2, r4
 8008626:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008628:	f000 f992 	bl	8008950 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 800862c:	4603      	mov	r3, r0
 800862e:	753b      	strb	r3, [r7, #20]
  auto err = TDeserializer<TReader>(resources, reader)
 8008630:	f107 031c 	add.w	r3, r7, #28
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff ffc2 	bl	80085be <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>
  shrinkJsonDocument(dst);
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7fe f871 	bl	8006722 <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>
  return err;
 8008640:	7d3b      	ldrb	r3, [r7, #20]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3784      	adds	r7, #132	@ 0x84
 8008646:	46bd      	mov	sp, r7
 8008648:	bd90      	pop	{r4, r7, pc}

0800864a <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>:
    return data;
  return addMember(key, resources);
}

template <typename TAdaptedString>
inline ObjectData::iterator ObjectData::findKey(
 800864a:	b082      	sub	sp, #8
 800864c:	b580      	push	{r7, lr}
 800864e:	b08e      	sub	sp, #56	@ 0x38
 8008650:	af02      	add	r7, sp, #8
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
 8008656:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800865a:	e881 000c 	stmia.w	r1, {r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  if (key.isNull())
 800865e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8008662:	f7fc fe4e 	bl	8005302 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x2a>
    return iterator();
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7fc ff1d 	bl	80054ac <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8008672:	e05a      	b.n	800872a <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
  bool isKey = true;
 8008674:	2301      	movs	r3, #1
 8008676:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	f107 030c 	add.w	r3, r7, #12
 8008680:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008682:	4618      	mov	r0, r3
 8008684:	f7fd fc06 	bl	8005e94 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8008688:	e041      	b.n	800870e <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xc4>
    if (isKey && stringEquals(key, adaptString(it->asString())))
 800868a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800868e:	2b00      	cmp	r3, #0
 8008690:	d025      	beq.n	80086de <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8008692:	f107 030c 	add.w	r3, r7, #12
 8008696:	4618      	mov	r0, r3
 8008698:	f7fc ff3f 	bl	800551a <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>
 800869c:	4602      	mov	r2, r0
 800869e:	f107 0314 	add.w	r3, r7, #20
 80086a2:	4611      	mov	r1, r2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fd f805 	bl	80056b4 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 80086aa:	f107 0320 	add.w	r3, r7, #32
 80086ae:	f107 0214 	add.w	r2, r7, #20
 80086b2:	4611      	mov	r1, r2
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 f984 	bl	80089c2 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>
 80086ba:	466a      	mov	r2, sp
 80086bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80086c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80086ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80086d0:	f7ff fe5e 	bl	8008390 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 80086da:	2301      	movs	r3, #1
 80086dc:	e000      	b.n	80086e0 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x96>
 80086de:	2300      	movs	r3, #0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d008      	beq.n	80086f6 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xac>
      return it;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	461a      	mov	r2, r3
 80086e8:	f107 030c 	add.w	r3, r7, #12
 80086ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80086f0:	e882 0003 	stmia.w	r2, {r0, r1}
    isKey = !isKey;
  }
  return iterator();
}
 80086f4:	e019      	b.n	800872a <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
    isKey = !isKey;
 80086f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80086fa:	f083 0301 	eor.w	r3, r3, #1
 80086fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8008702:	f107 030c 	add.w	r3, r7, #12
 8008706:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008708:	4618      	mov	r0, r3
 800870a:	f7fd fba0 	bl	8005e4e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 800870e:	f107 030c 	add.w	r3, r7, #12
 8008712:	4618      	mov	r0, r3
 8008714:	f7fc fedc 	bl	80054d0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8008718:	4603      	mov	r3, r0
 800871a:	f083 0301 	eor.w	r3, r3, #1
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1b2      	bne.n	800868a <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x40>
  return iterator();
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7fc fec1 	bl	80054ac <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
}
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	3730      	adds	r7, #48	@ 0x30
 800872e:	46bd      	mov	sp, r7
 8008730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008734:	b002      	add	sp, #8
 8008736:	4770      	bx	lr

08008738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f953 	bl	80089ec <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 8008746:	4603      	mov	r3, r0
 8008748:	4618      	mov	r0, r3
 800874a:	f000 f95a 	bl	8008a02 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 800874e:	4603      	mov	r3, r0
  }
 8008750:	4618      	mov	r0, r3
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7fd ff11 	bl	800658c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800876a:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	791b      	ldrb	r3, [r3, #4]
 8008770:	3b04      	subs	r3, #4
 8008772:	2b1a      	cmp	r3, #26
 8008774:	d87c      	bhi.n	8008870 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x118>
 8008776:	a201      	add	r2, pc, #4	@ (adr r2, 800877c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x24>)
 8008778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877c:	0800882f 	.word	0x0800882f
 8008780:	0800883d 	.word	0x0800883d
 8008784:	080087e9 	.word	0x080087e9
 8008788:	08008871 	.word	0x08008871
 800878c:	08008871 	.word	0x08008871
 8008790:	08008871 	.word	0x08008871
 8008794:	080087ef 	.word	0x080087ef
 8008798:	08008871 	.word	0x08008871
 800879c:	080087fd 	.word	0x080087fd
 80087a0:	08008871 	.word	0x08008871
 80087a4:	0800884d 	.word	0x0800884d
 80087a8:	08008871 	.word	0x08008871
 80087ac:	08008871 	.word	0x08008871
 80087b0:	08008871 	.word	0x08008871
 80087b4:	08008871 	.word	0x08008871
 80087b8:	08008871 	.word	0x08008871
 80087bc:	08008871 	.word	0x08008871
 80087c0:	08008871 	.word	0x08008871
 80087c4:	08008871 	.word	0x08008871
 80087c8:	08008871 	.word	0x08008871
 80087cc:	08008871 	.word	0x08008871
 80087d0:	08008871 	.word	0x08008871
 80087d4:	0800880b 	.word	0x0800880b
 80087d8:	08008871 	.word	0x08008871
 80087dc:	0800881d 	.word	0x0800881d
 80087e0:	08008871 	.word	0x08008871
 80087e4:	0800885f 	.word	0x0800885f
        return content_.asBoolean;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	e041      	b.n	8008872 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 f921 	bl	8008a3a <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>
 80087f8:	4603      	mov	r3, r0
 80087fa:	e03a      	b.n	8008872 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4618      	mov	r0, r3
 8008802:	f000 f92b 	bl	8008a5c <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>
 8008806:	4603      	mov	r3, r0
 8008808:	e033      	b.n	8008872 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008810:	4610      	mov	r0, r2
 8008812:	4619      	mov	r1, r3
 8008814:	f000 f933 	bl	8008a7e <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8008818:	4603      	mov	r3, r0
 800881a:	e02a      	b.n	8008872 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008822:	4610      	mov	r0, r2
 8008824:	4619      	mov	r1, r3
 8008826:	f000 f93d 	bl	8008aa4 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 800882a:	4603      	mov	r3, r0
 800882c:	e021      	b.n	8008872 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4618      	mov	r0, r3
 8008834:	f000 f949 	bl	8008aca <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 8008838:	4603      	mov	r3, r0
 800883a:	e01a      	b.n	8008872 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3308      	adds	r3, #8
 8008842:	4618      	mov	r0, r3
 8008844:	f000 f941 	bl	8008aca <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 8008848:	4603      	mov	r3, r0
 800884a:	e012      	b.n	8008872 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	edd3 7a00 	vldr	s15, [r3]
 8008852:	eeb0 0a67 	vmov.f32	s0, s15
 8008856:	f000 f94c 	bl	8008af2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 800885a:	4603      	mov	r3, r0
 800885c:	e009      	b.n	8008872 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	ed93 7b00 	vldr	d7, [r3]
 8008864:	eeb0 0b47 	vmov.f64	d0, d7
 8008868:	f000 f95b 	bl	8008b22 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 800886c:	4603      	mov	r3, r0
 800886e:	e000      	b.n	8008872 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 8008870:	2300      	movs	r3, #0
  }
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop

0800887c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f964 	bl	8008b52 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 800888a:	4603      	mov	r3, r0
 800888c:	4618      	mov	r0, r3
 800888e:	f000 f96b 	bl	8008b68 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8008892:	4603      	mov	r3, r0
  }
 8008894:	4618      	mov	r0, r3
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f954 	bl	8008b52 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 80088aa:	4603      	mov	r3, r0
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 f967 	bl	8008b80 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 80088b2:	4603      	mov	r3, r0
  }
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>:
template <typename TSource>
struct Reader<TSource*, enable_if_t<IsCharOrVoid<TSource>::value>> {
  const char* ptr_;

 public:
  explicit Reader(const void* ptr)
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
      : ptr_(ptr ? reinterpret_cast<const char*>(ptr) : "") {}
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x14>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	e000      	b.n	80088d2 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x16>
 80088d0:	4b04      	ldr	r3, [pc, #16]	@ (80088e4 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x28>)
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4618      	mov	r0, r3
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	0802a290 	.word	0x0802a290

080088e8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>:

  template <typename TClient>
  static VariantData* getOrCreateData(TClient& client) {
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7fd fa54 	bl	8005d9e <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>
 80088f6:	4603      	mov	r3, r0
  }
 80088f8:	4618      	mov	r0, r3
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7fd fa31 	bl	8005d70 <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>
 800890e:	4603      	mov	r3, r0
  }
 8008910:	4618      	mov	r0, r3
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>:
  JsonDeserializer(ResourceManager* resources, TReader reader)
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
      : stringBuilder_(resources),
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	68b9      	ldr	r1, [r7, #8]
 8008928:	4618      	mov	r0, r3
 800892a:	f7fd fcb3 	bl	8006294 <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>
        foundSomething_(false),
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	731a      	strb	r2, [r3, #12]
        latch_(reader),
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3310      	adds	r3, #16
 8008938:	6879      	ldr	r1, [r7, #4]
 800893a:	4618      	mov	r0, r3
 800893c:	f000 f92c 	bl	8008b98 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>
        resources_(resources) {}
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	619a      	str	r2, [r3, #24]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError parse(VariantData& variant, TFilter filter,
 8008950:	b590      	push	{r4, r7, lr}
 8008952:	b089      	sub	sp, #36	@ 0x24
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	713a      	strb	r2, [r7, #4]
 800895c:	703b      	strb	r3, [r7, #0]
    err = parseVariant(variant, filter, nestingLimit);
 800895e:	783b      	ldrb	r3, [r7, #0]
 8008960:	4622      	mov	r2, r4
 8008962:	68b9      	ldr	r1, [r7, #8]
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 f929 	bl	8008bbc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 800896a:	4603      	mov	r3, r0
 800896c:	75fb      	strb	r3, [r7, #23]
    if (!err && latch_.last() != 0 && variant.isFloat()) {
 800896e:	7dfb      	ldrb	r3, [r7, #23]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10f      	bne.n	8008994 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	3310      	adds	r3, #16
 8008978:	4618      	mov	r0, r3
 800897a:	f000 fa0d 	bl	8008d98 <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d007      	beq.n	8008994 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8008984:	68b8      	ldr	r0, [r7, #8]
 8008986:	f7fc fedc 	bl	8005742 <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8008990:	2301      	movs	r3, #1
 8008992:	e000      	b.n	8008996 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x46>
 8008994:	2300      	movs	r3, #0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d007      	beq.n	80089aa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x5a>
      return DeserializationError::InvalidInput;
 800899a:	f107 0318 	add.w	r3, r7, #24
 800899e:	2103      	movs	r1, #3
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fd fe0e 	bl	80065c2 <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 80089a6:	7e3b      	ldrb	r3, [r7, #24]
 80089a8:	e007      	b.n	80089ba <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x6a>
    return err;
 80089aa:	7dfa      	ldrb	r2, [r7, #23]
 80089ac:	f107 031c 	add.w	r3, r7, #28
 80089b0:	4611      	mov	r1, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fd fe05 	bl	80065c2 <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 80089b8:	7f3b      	ldrb	r3, [r7, #28]
  }
 80089ba:	4618      	mov	r0, r3
 80089bc:	3724      	adds	r7, #36	@ 0x24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd90      	pop	{r4, r7, pc}

080089c2 <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>:
AdaptedString<TString> adaptString(TString&& s) {
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b082      	sub	sp, #8
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80089cc:	6838      	ldr	r0, [r7, #0]
 80089ce:	f000 f9ef 	bl	8008db0 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>
 80089d2:	4603      	mov	r3, r0
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fc fd5e 	bl	8005496 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 80089da:	4602      	mov	r2, r0
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	ca07      	ldmia	r2, {r0, r1, r2}
 80089e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 80089f4:	687b      	ldr	r3, [r7, #4]
  }
 80089f6:	4618      	mov	r0, r3
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b082      	sub	sp, #8
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f9db 	bl	8008dc6 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>
 8008a10:	4603      	mov	r3, r0
  }
 8008a12:	4618      	mov	r0, r3
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b082      	sub	sp, #8
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f7ff ffe2 	bl	80089ec <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 f9d9 	bl	8008de2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8008a30:	4603      	mov	r3, r0
  }
 8008a32:	4618      	mov	r0, r3
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>:
canConvertNumber(TIn) {
  return true;
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f9d9 	bl	8008dfa <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x18>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	e000      	b.n	8008a54 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x1a>
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>:
TOut convertNumber(TIn value) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f9d9 	bl	8008e1c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x18>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	e000      	b.n	8008a76 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x1a>
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>:
TOut convertNumber(TIn value) {
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b082      	sub	sp, #8
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a8c:	f000 f9dc 	bl	8008e48 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1c>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	e000      	b.n	8008a9c <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1e>
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>:
TOut convertNumber(TIn value) {
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008aae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ab2:	f000 f9e1 	bl	8008e78 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1c>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	e000      	b.n	8008ac2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1e>
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>:

template <typename T>
inline T parseNumber(const char* s) {
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b086      	sub	sp, #24
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8008ad2:	f107 0308 	add.w	r3, r7, #8
 8008ad6:	6879      	ldr	r1, [r7, #4]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fd ffbb 	bl	8006a54 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8008ade:	f107 0308 	add.w	r3, r7, #8
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 f9e6 	bl	8008eb4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>
 8008ae8:	4603      	mov	r3, r0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>:
TOut convertNumber(TIn value) {
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008afc:	ed97 0a01 	vldr	s0, [r7, #4]
 8008b00:	f000 fa1e 	bl	8008f40 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d006      	beq.n	8008b18 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x26>
 8008b0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8008b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b12:	ee17 3a90 	vmov	r3, s15
 8008b16:	e000      	b.n	8008b1a <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x28>
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>:
TOut convertNumber(TIn value) {
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b082      	sub	sp, #8
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008b2c:	ed97 0b00 	vldr	d0, [r7]
 8008b30:	f000 fa34 	bl	8008f9c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d006      	beq.n	8008b48 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x26>
 8008b3a:	ed97 7b00 	vldr	d7, [r7]
 8008b3e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008b42:	ee17 3a90 	vmov	r3, s15
 8008b46:	e000      	b.n	8008b4a <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x28>
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8008b5a:	687b      	ldr	r3, [r7, #4]
  }
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
    return client.getData();
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fa39 	bl	8008fe8 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>
 8008b76:	4603      	mov	r3, r0
  }
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fa49 	bl	8009020 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>
 8008b8e:	4603      	mov	r3, r0
  }
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TReader>
class Latch {
 public:
  Latch(TReader reader) : reader_(reader), loaded_(false) {
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	601a      	str	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	715a      	strb	r2, [r3, #5]
#if ARDUINOJSON_DEBUG
    ended_ = false;
#endif
  }
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseVariant(
 8008bbc:	b5b0      	push	{r4, r5, r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	713a      	strb	r2, [r7, #4]
 8008bc8:	703b      	strb	r3, [r7, #0]
    err = skipSpacesAndComments();
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 fa36 	bl	800903c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	75fb      	strb	r3, [r7, #23]
    if (err)
 8008bd4:	7dfb      	ldrb	r3, [r7, #23]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x22>
      return err;
 8008bda:	7dfb      	ldrb	r3, [r7, #23]
 8008bdc:	e0d2      	b.n	8008d84 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
    switch (current()) {
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 fa62 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b7b      	cmp	r3, #123	@ 0x7b
 8008be8:	f300 80ba 	bgt.w	8008d60 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8008bec:	2b5b      	cmp	r3, #91	@ 0x5b
 8008bee:	da04      	bge.n	8008bfa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x3e>
 8008bf0:	2b22      	cmp	r3, #34	@ 0x22
 8008bf2:	d07b      	beq.n	8008cec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 8008bf4:	2b27      	cmp	r3, #39	@ 0x27
 8008bf6:	d079      	beq.n	8008cec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 8008bf8:	e0b2      	b.n	8008d60 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8008bfa:	3b5b      	subs	r3, #91	@ 0x5b
 8008bfc:	2b20      	cmp	r3, #32
 8008bfe:	f200 80af 	bhi.w	8008d60 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8008c02:	a201      	add	r2, pc, #4	@ (adr r2, 8008c08 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>)
 8008c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c08:	08008c8d 	.word	0x08008c8d
 8008c0c:	08008d61 	.word	0x08008d61
 8008c10:	08008d61 	.word	0x08008d61
 8008c14:	08008d61 	.word	0x08008d61
 8008c18:	08008d61 	.word	0x08008d61
 8008c1c:	08008d61 	.word	0x08008d61
 8008c20:	08008d61 	.word	0x08008d61
 8008c24:	08008d61 	.word	0x08008d61
 8008c28:	08008d61 	.word	0x08008d61
 8008c2c:	08008d61 	.word	0x08008d61
 8008c30:	08008d61 	.word	0x08008d61
 8008c34:	08008d33 	.word	0x08008d33
 8008c38:	08008d61 	.word	0x08008d61
 8008c3c:	08008d61 	.word	0x08008d61
 8008c40:	08008d61 	.word	0x08008d61
 8008c44:	08008d61 	.word	0x08008d61
 8008c48:	08008d61 	.word	0x08008d61
 8008c4c:	08008d61 	.word	0x08008d61
 8008c50:	08008d61 	.word	0x08008d61
 8008c54:	08008d55 	.word	0x08008d55
 8008c58:	08008d61 	.word	0x08008d61
 8008c5c:	08008d61 	.word	0x08008d61
 8008c60:	08008d61 	.word	0x08008d61
 8008c64:	08008d61 	.word	0x08008d61
 8008c68:	08008d61 	.word	0x08008d61
 8008c6c:	08008d11 	.word	0x08008d11
 8008c70:	08008d61 	.word	0x08008d61
 8008c74:	08008d61 	.word	0x08008d61
 8008c78:	08008d61 	.word	0x08008d61
 8008c7c:	08008d61 	.word	0x08008d61
 8008c80:	08008d61 	.word	0x08008d61
 8008c84:	08008d61 	.word	0x08008d61
 8008c88:	08008cbd 	.word	0x08008cbd
        if (filter.allowArray())
 8008c8c:	1d3b      	adds	r3, r7, #4
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fd fcd1 	bl	8006636 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00a      	beq.n	8008cb0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0xf4>
          return parseArray(variant.toArray(), filter, nestingLimit);
 8008c9a:	68b8      	ldr	r0, [r7, #8]
 8008c9c:	f7fc fdd0 	bl	8005840 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 8008ca0:	4601      	mov	r1, r0
 8008ca2:	783b      	ldrb	r3, [r7, #0]
 8008ca4:	462a      	mov	r2, r5
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f000 fa15 	bl	80090d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>
 8008cac:	4603      	mov	r3, r0
 8008cae:	e069      	b.n	8008d84 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipArray(nestingLimit);
 8008cb0:	7839      	ldrb	r1, [r7, #0]
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f000 fa95 	bl	80091e2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	e063      	b.n	8008d84 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowObject())
 8008cbc:	1d3b      	adds	r3, r7, #4
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fd fcc4 	bl	800664c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00a      	beq.n	8008ce0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
          return parseObject(variant.toObject(), filter, nestingLimit);
 8008cca:	68b8      	ldr	r0, [r7, #8]
 8008ccc:	f7fc fde0 	bl	8005890 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 8008cd0:	4601      	mov	r1, r0
 8008cd2:	783b      	ldrb	r3, [r7, #0]
 8008cd4:	4622      	mov	r2, r4
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 fac6 	bl	8009268 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	e051      	b.n	8008d84 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipObject(nestingLimit);
 8008ce0:	7839      	ldrb	r1, [r7, #0]
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f000 fbac 	bl	8009440 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	e04b      	b.n	8008d84 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8008cec:	1d3b      	adds	r3, r7, #4
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fd fcb7 	bl	8006662 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d005      	beq.n	8008d06 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x14a>
          return parseStringValue(variant);
 8008cfa:	68b9      	ldr	r1, [r7, #8]
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 fc1f 	bl	8009540 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>
 8008d02:	4603      	mov	r3, r0
 8008d04:	e03e      	b.n	8008d84 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipQuotedString();
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f000 fc3b 	bl	8009582 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	e039      	b.n	8008d84 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8008d10:	1d3b      	adds	r3, r7, #4
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fd fca5 	bl	8006662 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d003      	beq.n	8008d26 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x16a>
          variant.setBoolean(true);
 8008d1e:	2101      	movs	r1, #1
 8008d20:	68b8      	ldr	r0, [r7, #8]
 8008d22:	f7fc fd3b 	bl	800579c <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("true");
 8008d26:	4919      	ldr	r1, [pc, #100]	@ (8008d8c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>)
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f000 fc5f 	bl	80095ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	e028      	b.n	8008d84 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8008d32:	1d3b      	adds	r3, r7, #4
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7fd fc94 	bl	8006662 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
          variant.setBoolean(false);
 8008d40:	2100      	movs	r1, #0
 8008d42:	68b8      	ldr	r0, [r7, #8]
 8008d44:	f7fc fd2a 	bl	800579c <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("false");
 8008d48:	4911      	ldr	r1, [pc, #68]	@ (8008d90 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d4>)
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f000 fc4e 	bl	80095ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8008d50:	4603      	mov	r3, r0
 8008d52:	e017      	b.n	8008d84 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        return skipKeyword("null");
 8008d54:	490f      	ldr	r1, [pc, #60]	@ (8008d94 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d8>)
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f000 fc48 	bl	80095ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	e011      	b.n	8008d84 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8008d60:	1d3b      	adds	r3, r7, #4
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fd fc7d 	bl	8006662 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d005      	beq.n	8008d7a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
          return parseNumericValue(variant);
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f000 fc61 	bl	8009638 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>
 8008d76:	4603      	mov	r3, r0
 8008d78:	e004      	b.n	8008d84 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipNumericValue();
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 fd04 	bl	8009788 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8008d80:	4603      	mov	r3, r0
 8008d82:	bf00      	nop
  }
 8008d84:	4618      	mov	r0, r3
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8008d8c:	0802a504 	.word	0x0802a504
 8008d90:	0802a50c 	.word	0x0802a50c
 8008d94:	0802a514 	.word	0x0802a514

08008d98 <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>:

  void clear() {
    loaded_ = false;
  }

  int last() const {
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
    return current_;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	791b      	ldrb	r3, [r3, #4]
  }
 8008da4:	4618      	mov	r0, r3
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8008db8:	687b      	ldr	r3, [r7, #4]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>:
  // clang-format off
  MemberProxy(const MemberProxy& src) // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
      : upstream_(src.upstream_), key_(src.key_) {}
  // clang-format on

  ResourceManager* getResourceManager() const {
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b082      	sub	sp, #8
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fcf6 	bl	80097c4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 8008dd8:	4603      	mov	r3, r0
  }
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b082      	sub	sp, #8
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
    return client.getData();
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fd04 	bl	80097f8 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>
 8008df0:	4603      	mov	r3, r0
  }
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8008e02:	f000 f8c2 	bl	8008f8a <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8008e06:	4602      	mov	r2, r0
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	bf94      	ite	ls
 8008e0e:	2301      	movls	r3, #1
 8008e10:	2300      	movhi	r3, #0
 8008e12:	b2db      	uxtb	r3, r3
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3708      	adds	r7, #8
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	da01      	bge.n	8008e2e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x12>
    return false;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	e008      	b.n	8008e40 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x24>
  return TOut(value) <= numeric_limits<TOut>::highest();
 8008e2e:	f000 f8ac 	bl	8008f8a <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8008e32:	4602      	mov	r2, r0
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	bf2c      	ite	cs
 8008e3a:	2301      	movcs	r3, #1
 8008e3c:	2300      	movcc	r3, #0
 8008e3e:	b2db      	uxtb	r3, r3
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008e48:	b5b0      	push	{r4, r5, r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8008e52:	f000 f89a 	bl	8008f8a <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2200      	movs	r2, #0
 8008e5a:	461c      	mov	r4, r3
 8008e5c:	4615      	mov	r5, r2
 8008e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e62:	4294      	cmp	r4, r2
 8008e64:	eb75 0303 	sbcs.w	r3, r5, r3
 8008e68:	bf2c      	ite	cs
 8008e6a:	2301      	movcs	r3, #1
 8008e6c:	2300      	movcc	r3, #0
 8008e6e:	b2db      	uxtb	r3, r3
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bdb0      	pop	{r4, r5, r7, pc}

08008e78 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008e78:	b5b0      	push	{r4, r5, r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8008e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	da01      	bge.n	8008e8e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	e00e      	b.n	8008eac <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x34>
  return value <= TIn(numeric_limits<TOut>::highest());
 8008e8e:	f000 f87c 	bl	8008f8a <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2200      	movs	r2, #0
 8008e96:	461c      	mov	r4, r3
 8008e98:	4615      	mov	r5, r2
 8008e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e9e:	4294      	cmp	r4, r2
 8008ea0:	eb75 0303 	sbcs.w	r3, r5, r3
 8008ea4:	bfac      	ite	ge
 8008ea6:	2301      	movge	r3, #1
 8008ea8:	2300      	movlt	r3, #0
 8008eaa:	b2db      	uxtb	r3, r3
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bdb0      	pop	{r4, r5, r7, pc}

08008eb4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>:
  T convertTo() const {
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d82e      	bhi.n	8008f24 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x70>
 8008ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ecc <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x18>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008edd 	.word	0x08008edd
 8008ed0:	08008eef 	.word	0x08008eef
 8008ed4:	08008f01 	.word	0x08008f01
 8008ed8:	08008f13 	.word	0x08008f13
        return convertNumber<T>(value_.asFloat);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	edd3 7a02 	vldr	s15, [r3, #8]
 8008ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ee6:	f7ff fe04 	bl	8008af2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 8008eea:	4603      	mov	r3, r0
 8008eec:	e01b      	b.n	8008f26 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	f7ff fdd4 	bl	8008aa4 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 8008efc:	4603      	mov	r3, r0
 8008efe:	e012      	b.n	8008f26 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008f06:	4610      	mov	r0, r2
 8008f08:	4619      	mov	r1, r3
 8008f0a:	f7ff fdb8 	bl	8008a7e <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	e009      	b.n	8008f26 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	ed93 7b02 	vldr	d7, [r3, #8]
 8008f18:	eeb0 0b47 	vmov.f64	d0, d7
 8008f1c:	f7ff fe01 	bl	8008b22 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 8008f20:	4603      	mov	r3, r0
 8008f22:	e000      	b.n	8008f26 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return T();
 8008f24:	2300      	movs	r3, #0
  }
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop

08008f30 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, enable_if_t<is_unsigned<T>::value>> {
  static constexpr T lowest() {
 8008f30:	b480      	push	{r7}
 8008f32:	af00      	add	r7, sp, #0
    return 0;
 8008f34:	2300      	movs	r3, #0
  }
 8008f36:	4618      	mov	r0, r3
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8008f4a:	f7ff fff1 	bl	8008f30 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 8008f4e:	ee07 0a90 	vmov	s15, r0
 8008f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f56:	ed97 7a01 	vldr	s14, [r7, #4]
 8008f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f62:	db0d      	blt.n	8008f80 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 8008f64:	2000      	movs	r0, #0
 8008f66:	f000 fc63 	bl	8009830 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>
 8008f6a:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 8008f6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f7a:	d801      	bhi.n	8008f80 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e000      	b.n	8008f82 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>:
  static constexpr T highest() {
 8008f8a:	b480      	push	{r7}
 8008f8c:	af00      	add	r7, sp, #0
    return T(-1);
 8008f8e:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8008f92:	4618      	mov	r0, r3
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8008fa6:	f7ff ffc3 	bl	8008f30 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 8008faa:	ee07 0a90 	vmov	s15, r0
 8008fae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008fb2:	ed97 6b00 	vldr	d6, [r7]
 8008fb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fbe:	db0e      	blt.n	8008fde <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 8008fc0:	f7ff ffe3 	bl	8008f8a <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8008fc4:	ee07 0a90 	vmov	s15, r0
 8008fc8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8008fcc:	ed97 6b00 	vldr	d6, [r7]
 8008fd0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd8:	d801      	bhi.n	8008fde <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e000      	b.n	8008fe0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>:

  VariantData* getData() const {
 8008fe8:	b590      	push	{r4, r7, lr}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af02      	add	r7, sp, #8
 8008fee:	6078      	str	r0, [r7, #4]
    return VariantData::getMember(
        VariantAttorney::getData(upstream_), key_,
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 fc2b 	bl	8009850 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>
 8008ffa:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff fc7d 	bl	8008900 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8009006:	4602      	mov	r2, r0
    return VariantData::getMember(
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	9200      	str	r2, [sp, #0]
 800900c:	3304      	adds	r3, #4
 800900e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009010:	4620      	mov	r0, r4
 8009012:	f000 fc29 	bl	8009868 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 8009016:	4603      	mov	r3, r0
  }
 8009018:	4618      	mov	r0, r3
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	bd90      	pop	{r4, r7, pc}

08009020 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4618      	mov	r0, r3
 800902e:	f7ff fc67 	bl	8008900 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8009032:	4603      	mov	r3, r0
  }
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>:
  DeserializationError::Code skipSpacesAndComments() {
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f82f 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d013      	beq.n	8009078 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x3c>
 8009050:	2b00      	cmp	r3, #0
 8009052:	db1d      	blt.n	8009090 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8009054:	2b20      	cmp	r3, #32
 8009056:	dc1b      	bgt.n	8009090 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8009058:	2b09      	cmp	r3, #9
 800905a:	db19      	blt.n	8009090 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 800905c:	3b09      	subs	r3, #9
 800905e:	4a11      	ldr	r2, [pc, #68]	@ (80090a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x68>)
 8009060:	fa22 f303 	lsr.w	r3, r2, r3
 8009064:	f003 0301 	and.w	r3, r3, #1
 8009068:	2b00      	cmp	r3, #0
 800906a:	bf14      	ite	ne
 800906c:	2301      	movne	r3, #1
 800906e:	2300      	moveq	r3, #0
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d108      	bne.n	8009088 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x4c>
 8009076:	e00b      	b.n	8009090 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
          return foundSomething_ ? DeserializationError::IncompleteInput
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	7b1b      	ldrb	r3, [r3, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d001      	beq.n	8009084 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x48>
 8009080:	2302      	movs	r3, #2
                                 : DeserializationError::EmptyInput;
 8009082:	e00b      	b.n	800909c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          return foundSomething_ ? DeserializationError::IncompleteInput
 8009084:	2301      	movs	r3, #1
                                 : DeserializationError::EmptyInput;
 8009086:	e009      	b.n	800909c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          move();
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fc06 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          continue;
 800908e:	e004      	b.n	800909a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x5e>
          foundSomething_ = true;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	731a      	strb	r2, [r3, #12]
          return DeserializationError::Ok;
 8009096:	2300      	movs	r3, #0
 8009098:	e000      	b.n	800909c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
      switch (current()) {
 800909a:	e7d3      	b.n	8009044 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x8>
  }
 800909c:	4618      	mov	r0, r3
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	00800013 	.word	0x00800013

080090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>:
  char current() {
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
    return latch_.current();
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	3310      	adds	r3, #16
 80090b4:	60fb      	str	r3, [r7, #12]

  FORCE_INLINE char current() {
    if (!loaded_) {
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	795b      	ldrb	r3, [r3, #5]
 80090ba:	f083 0301 	eor.w	r3, r3, #1
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d002      	beq.n	80090ca <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv+0x22>
      load();
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f000 ff1a 	bl	8009efe <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>
    }
    return current_;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	791b      	ldrb	r3, [r3, #4]
  }
 80090ce:	4618      	mov	r0, r3
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseArray(
 80090d6:	b590      	push	{r4, r7, lr}
 80090d8:	b089      	sub	sp, #36	@ 0x24
 80090da:	af00      	add	r7, sp, #0
 80090dc:	60f8      	str	r0, [r7, #12]
 80090de:	60b9      	str	r1, [r7, #8]
 80090e0:	713a      	strb	r2, [r7, #4]
 80090e2:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 80090e4:	463b      	mov	r3, r7
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fd faf7 	bl	80066da <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 80090f2:	2305      	movs	r3, #5
 80090f4:	e071      	b.n	80091da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    move();
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 fbcf 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f7ff ff9d 	bl	800903c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009102:	4603      	mov	r3, r0
 8009104:	77fb      	strb	r3, [r7, #31]
    if (err)
 8009106:	7ffb      	ldrb	r3, [r7, #31]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x3a>
      return err;
 800910c:	7ffb      	ldrb	r3, [r7, #31]
 800910e:	e064      	b.n	80091da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    if (eat(']'))
 8009110:	215d      	movs	r1, #93	@ 0x5d
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f000 fbce 	bl	80098b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
      return DeserializationError::Ok;
 800911e:	2300      	movs	r3, #0
 8009120:	e05b      	b.n	80091da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    TFilter elementFilter = filter[0UL];
 8009122:	2300      	movs	r3, #0
 8009124:	617b      	str	r3, [r7, #20]
 8009126:	f107 0214 	add.w	r2, r7, #20
 800912a:	1d3b      	adds	r3, r7, #4
 800912c:	4611      	mov	r1, r2
 800912e:	4618      	mov	r0, r3
 8009130:	f000 fbdd 	bl	80098ee <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>
      if (elementFilter.allow()) {
 8009134:	f107 0310 	add.w	r3, r7, #16
 8009138:	4618      	mov	r0, r3
 800913a:	f7fd fa71 	bl	8006620 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d01c      	beq.n	800917e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xa8>
        VariantData* value = array.addElement(resources_);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	699b      	ldr	r3, [r3, #24]
 8009148:	4619      	mov	r1, r3
 800914a:	68b8      	ldr	r0, [r7, #8]
 800914c:	f7fc fe33 	bl	8005db6 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8009150:	61b8      	str	r0, [r7, #24]
        if (!value)
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d101      	bne.n	800915c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
          return DeserializationError::NoMemory;
 8009158:	2304      	movs	r3, #4
 800915a:	e03e      	b.n	80091da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = parseVariant(*value, elementFilter, nestingLimit.decrement());
 800915c:	463b      	mov	r3, r7
 800915e:	4618      	mov	r0, r3
 8009160:	f7fd faa8 	bl	80066b4 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8009164:	4603      	mov	r3, r0
 8009166:	4622      	mov	r2, r4
 8009168:	69b9      	ldr	r1, [r7, #24]
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f7ff fd26 	bl	8008bbc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8009170:	4603      	mov	r3, r0
 8009172:	77fb      	strb	r3, [r7, #31]
        if (err)
 8009174:	7ffb      	ldrb	r3, [r7, #31]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d011      	beq.n	800919e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 800917a:	7ffb      	ldrb	r3, [r7, #31]
 800917c:	e02d      	b.n	80091da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = skipVariant(nestingLimit.decrement());
 800917e:	463b      	mov	r3, r7
 8009180:	4618      	mov	r0, r3
 8009182:	f7fd fa97 	bl	80066b4 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8009186:	4603      	mov	r3, r0
 8009188:	4619      	mov	r1, r3
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 fbbc 	bl	8009908 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8009190:	4603      	mov	r3, r0
 8009192:	77fb      	strb	r3, [r7, #31]
        if (err)
 8009194:	7ffb      	ldrb	r3, [r7, #31]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d001      	beq.n	800919e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 800919a:	7ffb      	ldrb	r3, [r7, #31]
 800919c:	e01d      	b.n	80091da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      err = skipSpacesAndComments();
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f7ff ff4c 	bl	800903c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80091a4:	4603      	mov	r3, r0
 80091a6:	77fb      	strb	r3, [r7, #31]
      if (err)
 80091a8:	7ffb      	ldrb	r3, [r7, #31]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xdc>
        return err;
 80091ae:	7ffb      	ldrb	r3, [r7, #31]
 80091b0:	e013      	b.n	80091da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (eat(']'))
 80091b2:	215d      	movs	r1, #93	@ 0x5d
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 fb7d 	bl	80098b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xee>
        return DeserializationError::Ok;
 80091c0:	2300      	movs	r3, #0
 80091c2:	e00a      	b.n	80091da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (!eat(','))
 80091c4:	212c      	movs	r1, #44	@ 0x2c
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 fb74 	bl	80098b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80091cc:	4603      	mov	r3, r0
 80091ce:	f083 0301 	eor.w	r3, r3, #1
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0ad      	beq.n	8009134 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x5e>
        return DeserializationError::InvalidInput;
 80091d8:	2303      	movs	r3, #3
  }
 80091da:	4618      	mov	r0, r3
 80091dc:	3724      	adds	r7, #36	@ 0x24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd90      	pop	{r4, r7, pc}

080091e2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipArray(
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 80091ec:	463b      	mov	r3, r7
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fd fa73 	bl	80066da <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 80091fa:	2305      	movs	r3, #5
 80091fc:	e030      	b.n	8009260 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
    move();
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fb4b 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      err = skipVariant(nestingLimit.decrement());
 8009204:	463b      	mov	r3, r7
 8009206:	4618      	mov	r0, r3
 8009208:	f7fd fa54 	bl	80066b4 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800920c:	4603      	mov	r3, r0
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fb79 	bl	8009908 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8009216:	4603      	mov	r3, r0
 8009218:	73fb      	strb	r3, [r7, #15]
      if (err)
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d001      	beq.n	8009224 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x42>
        return err;
 8009220:	7bfb      	ldrb	r3, [r7, #15]
 8009222:	e01d      	b.n	8009260 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      err = skipSpacesAndComments();
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7ff ff09 	bl	800903c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800922a:	4603      	mov	r3, r0
 800922c:	73fb      	strb	r3, [r7, #15]
      if (err)
 800922e:	7bfb      	ldrb	r3, [r7, #15]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x56>
        return err;
 8009234:	7bfb      	ldrb	r3, [r7, #15]
 8009236:	e013      	b.n	8009260 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (eat(']'))
 8009238:	215d      	movs	r1, #93	@ 0x5d
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fb3a 	bl	80098b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x68>
        return DeserializationError::Ok;
 8009246:	2300      	movs	r3, #0
 8009248:	e00a      	b.n	8009260 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (!eat(','))
 800924a:	212c      	movs	r1, #44	@ 0x2c
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fb31 	bl	80098b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009252:	4603      	mov	r3, r0
 8009254:	f083 0301 	eor.w	r3, r3, #1
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	d0d2      	beq.n	8009204 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x22>
        return DeserializationError::InvalidInput;
 800925e:	2303      	movs	r3, #3
  }
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseObject(
 8009268:	b590      	push	{r4, r7, lr}
 800926a:	b091      	sub	sp, #68	@ 0x44
 800926c:	af02      	add	r7, sp, #8
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	713a      	strb	r2, [r7, #4]
 8009274:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 8009276:	463b      	mov	r3, r7
 8009278:	4618      	mov	r0, r3
 800927a:	f7fd fa2e 	bl	80066da <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 8009284:	2305      	movs	r3, #5
 8009286:	e0d7      	b.n	8009438 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    move();
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 fb06 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f7ff fed4 	bl	800903c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009294:	4603      	mov	r3, r0
 8009296:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (err)
 800929a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d002      	beq.n	80092a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x40>
      return err;
 80092a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80092a6:	e0c7      	b.n	8009438 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    if (eat('}'))
 80092a8:	217d      	movs	r1, #125	@ 0x7d
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 fb02 	bl	80098b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
      return DeserializationError::Ok;
 80092b6:	2300      	movs	r3, #0
 80092b8:	e0be      	b.n	8009438 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = parseKey();
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f000 fbba 	bl	8009a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>
 80092c0:	4603      	mov	r3, r0
 80092c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80092c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d002      	beq.n	80092d4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x6c>
        return err;
 80092ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80092d2:	e0b1      	b.n	8009438 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f7ff feb1 	bl	800903c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80092da:	4603      	mov	r3, r0
 80092dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80092e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
        return err;
 80092e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80092ec:	e0a4      	b.n	8009438 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(':'))
 80092ee:	213a      	movs	r1, #58	@ 0x3a
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f000 fadf 	bl	80098b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f083 0301 	eor.w	r3, r3, #1
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x9e>
        return DeserializationError::InvalidInput;
 8009302:	2303      	movs	r3, #3
 8009304:	e098      	b.n	8009438 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      JsonString key = stringBuilder_.str();
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	f107 0314 	add.w	r3, r7, #20
 800930c:	4611      	mov	r1, r2
 800930e:	4618      	mov	r0, r3
 8009310:	f7fd f886 	bl	8006420 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>
      TFilter memberFilter = filter[key];
 8009314:	f107 0214 	add.w	r2, r7, #20
 8009318:	1d3b      	adds	r3, r7, #4
 800931a:	4611      	mov	r1, r2
 800931c:	4618      	mov	r0, r3
 800931e:	f000 fba9 	bl	8009a74 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>
      if (memberFilter.allow()) {
 8009322:	f107 0310 	add.w	r3, r7, #16
 8009326:	4618      	mov	r0, r3
 8009328:	f7fd f97a 	bl	8006620 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d040      	beq.n	80093b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x14c>
        auto member = object.getMember(adaptString(key), resources_);
 8009332:	f107 0320 	add.w	r3, r7, #32
 8009336:	f107 0214 	add.w	r2, r7, #20
 800933a:	4611      	mov	r1, r2
 800933c:	4618      	mov	r0, r3
 800933e:	f7fe fa94 	bl	800786a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	f107 0320 	add.w	r3, r7, #32
 800934c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800934e:	68b8      	ldr	r0, [r7, #8]
 8009350:	f7fe ff3b 	bl	80081ca <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 8009354:	6378      	str	r0, [r7, #52]	@ 0x34
        if (!member) {
 8009356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009358:	2b00      	cmp	r3, #0
 800935a:	d111      	bne.n	8009380 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x118>
          auto savedKey = stringBuilder_.save();
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	4618      	mov	r0, r3
 8009360:	f7fc ffda 	bl	8006318 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 8009364:	62f8      	str	r0, [r7, #44]	@ 0x2c
          member = object.addMember(savedKey, resources_);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	461a      	mov	r2, r3
 800936c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800936e:	68b8      	ldr	r0, [r7, #8]
 8009370:	f000 fb8c 	bl	8009a8c <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 8009374:	6378      	str	r0, [r7, #52]	@ 0x34
          if (!member)
 8009376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009378:	2b00      	cmp	r3, #0
 800937a:	d107      	bne.n	800938c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
            return DeserializationError::NoMemory;
 800937c:	2304      	movs	r3, #4
 800937e:	e05b      	b.n	8009438 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
          member->clear(resources_);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	4619      	mov	r1, r3
 8009386:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009388:	f7fd f8ca 	bl	8006520 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
        err = parseVariant(*member, memberFilter, nestingLimit.decrement());
 800938c:	463b      	mov	r3, r7
 800938e:	4618      	mov	r0, r3
 8009390:	f7fd f990 	bl	80066b4 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8009394:	4603      	mov	r3, r0
 8009396:	4622      	mov	r2, r4
 8009398:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f7ff fc0e 	bl	8008bbc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 80093a0:	4603      	mov	r3, r0
 80093a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 80093a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d015      	beq.n	80093da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 80093ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80093b2:	e041      	b.n	8009438 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
        err = skipVariant(nestingLimit.decrement());
 80093b4:	463b      	mov	r3, r7
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fd f97c 	bl	80066b4 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 80093bc:	4603      	mov	r3, r0
 80093be:	4619      	mov	r1, r3
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 faa1 	bl	8009908 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 80093c6:	4603      	mov	r3, r0
 80093c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 80093cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 80093d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80093d8:	e02e      	b.n	8009438 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f7ff fe2e 	bl	800903c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80093e0:	4603      	mov	r3, r0
 80093e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80093e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
        return err;
 80093ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80093f2:	e021      	b.n	8009438 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (eat('}'))
 80093f4:	217d      	movs	r1, #125	@ 0x7d
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f000 fa5c 	bl	80098b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x19e>
        return DeserializationError::Ok;
 8009402:	2300      	movs	r3, #0
 8009404:	e018      	b.n	8009438 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(','))
 8009406:	212c      	movs	r1, #44	@ 0x2c
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 fa53 	bl	80098b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800940e:	4603      	mov	r3, r0
 8009410:	f083 0301 	eor.w	r3, r3, #1
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1b6>
        return DeserializationError::InvalidInput;
 800941a:	2303      	movs	r3, #3
 800941c:	e00c      	b.n	8009438 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f7ff fe0c 	bl	800903c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009424:	4603      	mov	r3, r0
 8009426:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 800942a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800942e:	2b00      	cmp	r3, #0
 8009430:	f43f af43 	beq.w	80092ba <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
        return err;
 8009434:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
  }
 8009438:	4618      	mov	r0, r3
 800943a:	373c      	adds	r7, #60	@ 0x3c
 800943c:	46bd      	mov	sp, r7
 800943e:	bd90      	pop	{r4, r7, pc}

08009440 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipObject(
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 800944a:	463b      	mov	r3, r7
 800944c:	4618      	mov	r0, r3
 800944e:	f7fd f944 	bl	80066da <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d001      	beq.n	800945c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 8009458:	2305      	movs	r3, #5
 800945a:	e06d      	b.n	8009538 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    move();
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fa1c 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff fdea 	bl	800903c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009468:	4603      	mov	r3, r0
 800946a:	73fb      	strb	r3, [r7, #15]
    if (err)
 800946c:	7bfb      	ldrb	r3, [r7, #15]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x36>
      return err;
 8009472:	7bfb      	ldrb	r3, [r7, #15]
 8009474:	e060      	b.n	8009538 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    if (eat('}'))
 8009476:	217d      	movs	r1, #125	@ 0x7d
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 fa1b 	bl	80098b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d001      	beq.n	8009488 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
      return DeserializationError::Ok;
 8009484:	2300      	movs	r3, #0
 8009486:	e057      	b.n	8009538 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipKey();
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fb54 	bl	8009b36 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>
 800948e:	4603      	mov	r3, r0
 8009490:	73fb      	strb	r3, [r7, #15]
      if (err)
 8009492:	7bfb      	ldrb	r3, [r7, #15]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x5c>
        return err;
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	e04d      	b.n	8009538 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7ff fdcd 	bl	800903c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80094a2:	4603      	mov	r3, r0
 80094a4:	73fb      	strb	r3, [r7, #15]
      if (err)
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x70>
        return err;
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
 80094ae:	e043      	b.n	8009538 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(':'))
 80094b0:	213a      	movs	r1, #58	@ 0x3a
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f9fe 	bl	80098b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80094b8:	4603      	mov	r3, r0
 80094ba:	f083 0301 	eor.w	r3, r3, #1
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x88>
        return DeserializationError::InvalidInput;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e037      	b.n	8009538 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipVariant(nestingLimit.decrement());
 80094c8:	463b      	mov	r3, r7
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fd f8f2 	bl	80066b4 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 80094d0:	4603      	mov	r3, r0
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fa17 	bl	8009908 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 80094da:	4603      	mov	r3, r0
 80094dc:	73fb      	strb	r3, [r7, #15]
      if (err)
 80094de:	7bfb      	ldrb	r3, [r7, #15]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xa8>
        return err;
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	e027      	b.n	8009538 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7ff fda7 	bl	800903c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80094ee:	4603      	mov	r3, r0
 80094f0:	73fb      	strb	r3, [r7, #15]
      if (err)
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xbc>
        return err;
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	e01d      	b.n	8009538 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (eat('}'))
 80094fc:	217d      	movs	r1, #125	@ 0x7d
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f9d8 	bl	80098b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xce>
        return DeserializationError::Ok;
 800950a:	2300      	movs	r3, #0
 800950c:	e014      	b.n	8009538 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(','))
 800950e:	212c      	movs	r1, #44	@ 0x2c
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f9cf 	bl	80098b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009516:	4603      	mov	r3, r0
 8009518:	f083 0301 	eor.w	r3, r3, #1
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xe6>
        return DeserializationError::InvalidInput;
 8009522:	2303      	movs	r3, #3
 8009524:	e008      	b.n	8009538 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7ff fd88 	bl	800903c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]
      if (err)
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d0a8      	beq.n	8009488 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
        return err;
 8009536:	7bfb      	ldrb	r3, [r7, #15]
  }
 8009538:	4618      	mov	r0, r3
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>:
  DeserializationError::Code parseStringValue(VariantData& variant) {
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
    stringBuilder_.startString();
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4618      	mov	r0, r3
 800954e:	f7fc fecb 	bl	80062e8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    err = parseQuotedString();
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fb0b 	bl	8009b6e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]
    if (err)
 800955c:	7bfb      	ldrb	r3, [r7, #15]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x26>
      return err;
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	e009      	b.n	800957a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x3a>
    variant.setOwnedString(stringBuilder_.save());
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4618      	mov	r0, r3
 800956a:	f7fc fed5 	bl	8006318 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 800956e:	4603      	mov	r3, r0
 8009570:	4619      	mov	r1, r3
 8009572:	6838      	ldr	r0, [r7, #0]
 8009574:	f7fc f933 	bl	80057de <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return DeserializationError::Ok;
 8009578:	2300      	movs	r3, #0
  }
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>:
  DeserializationError::Code skipQuotedString() {
 8009582:	b580      	push	{r7, lr}
 8009584:	b084      	sub	sp, #16
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
    const char stopChar = current();
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7ff fd8c 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009590:	4603      	mov	r3, r0
 8009592:	73fb      	strb	r3, [r7, #15]
    move();
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f980 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7ff fd84 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80095a0:	4603      	mov	r3, r0
 80095a2:	73bb      	strb	r3, [r7, #14]
      move();
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 f978 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 80095aa:	7bba      	ldrb	r2, [r7, #14]
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d016      	beq.n	80095e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x5e>
      if (c == '\0')
 80095b2:	7bbb      	ldrb	r3, [r7, #14]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d101      	bne.n	80095bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x3a>
        return DeserializationError::IncompleteInput;
 80095b8:	2302      	movs	r3, #2
 80095ba:	e013      	b.n	80095e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x62>
      if (c == '\\') {
 80095bc:	7bbb      	ldrb	r3, [r7, #14]
 80095be:	2b5c      	cmp	r3, #92	@ 0x5c
 80095c0:	d1eb      	bne.n	800959a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        if (current() != '\0')
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7ff fd70 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	bf14      	ite	ne
 80095ce:	2301      	movne	r3, #1
 80095d0:	2300      	moveq	r3, #0
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d0e0      	beq.n	800959a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
          move();
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f95e 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (;;) {
 80095de:	e7dc      	b.n	800959a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        break;
 80095e0:	bf00      	nop
    return DeserializationError::Ok;
 80095e2:	2300      	movs	r3, #0
  }
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>:
  DeserializationError::Code skipKeyword(const char* s) {
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
    while (*s) {
 80095f6:	e016      	b.n	8009626 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x3a>
      char c = current();
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7ff fd55 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80095fe:	4603      	mov	r3, r0
 8009600:	73fb      	strb	r3, [r7, #15]
      if (c == '\0')
 8009602:	7bfb      	ldrb	r3, [r7, #15]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d101      	bne.n	800960c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x20>
        return DeserializationError::IncompleteInput;
 8009608:	2302      	movs	r3, #2
 800960a:	e011      	b.n	8009630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      if (*s != c)
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	7bfa      	ldrb	r2, [r7, #15]
 8009612:	429a      	cmp	r2, r3
 8009614:	d001      	beq.n	800961a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x2e>
        return DeserializationError::InvalidInput;
 8009616:	2303      	movs	r3, #3
 8009618:	e00a      	b.n	8009630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      ++s;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	3301      	adds	r3, #1
 800961e:	603b      	str	r3, [r7, #0]
      move();
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f93a 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    while (*s) {
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1e4      	bne.n	80095f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0xc>
    return DeserializationError::Ok;
 800962e:	2300      	movs	r3, #0
  }
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>:
  DeserializationError::Code parseNumericValue(VariantData& result) {
 8009638:	b580      	push	{r7, lr}
 800963a:	b08a      	sub	sp, #40	@ 0x28
 800963c:	af02      	add	r7, sp, #8
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	77fb      	strb	r3, [r7, #31]
    char c = current();
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f7ff fd2e 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800964c:	4603      	mov	r3, r0
 800964e:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 8009650:	e00f      	b.n	8009672 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x3a>
      move();
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f921 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      buffer_[n++] = c;
 8009658:	7fba      	ldrb	r2, [r7, #30]
 800965a:	7ffb      	ldrb	r3, [r7, #31]
 800965c:	1c59      	adds	r1, r3, #1
 800965e:	77f9      	strb	r1, [r7, #31]
 8009660:	4619      	mov	r1, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	440b      	add	r3, r1
 8009666:	771a      	strb	r2, [r3, #28]
      c = current();
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7ff fd1d 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800966e:	4603      	mov	r3, r0
 8009670:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 8009672:	7fbb      	ldrb	r3, [r7, #30]
 8009674:	4618      	mov	r0, r3
 8009676:	f000 fafb 	bl	8009c70 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d004      	beq.n	800968a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 8009680:	7ffb      	ldrb	r3, [r7, #31]
 8009682:	2b3e      	cmp	r3, #62	@ 0x3e
 8009684:	d801      	bhi.n	800968a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 8009686:	2301      	movs	r3, #1
 8009688:	e000      	b.n	800968c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x54>
 800968a:	2300      	movs	r3, #0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1e0      	bne.n	8009652 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x1a>
    buffer_[n] = 0;
 8009690:	7ffb      	ldrb	r3, [r7, #31]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	4413      	add	r3, r2
 8009696:	2200      	movs	r2, #0
 8009698:	771a      	strb	r2, [r3, #28]
    auto number = parseNumber(buffer_);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f103 021c 	add.w	r2, r3, #28
 80096a0:	f107 0308 	add.w	r3, r7, #8
 80096a4:	4611      	mov	r1, r2
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fd f9d4 	bl	8006a54 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
    switch (number.type()) {
 80096ac:	f107 0308 	add.w	r3, r7, #8
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fd f988 	bl	80069c6 <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>
 80096b6:	4603      	mov	r3, r0
 80096b8:	3b01      	subs	r3, #1
 80096ba:	2b03      	cmp	r3, #3
 80096bc:	d85e      	bhi.n	800977c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x144>
 80096be:	a201      	add	r2, pc, #4	@ (adr r2, 80096c4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x8c>)
 80096c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c4:	08009725 	.word	0x08009725
 80096c8:	080096fd 	.word	0x080096fd
 80096cc:	080096d5 	.word	0x080096d5
 80096d0:	08009751 	.word	0x08009751
        if (result.setInteger(number.asUnsignedInteger(), resources_))
 80096d4:	f107 0308 	add.w	r3, r7, #8
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fd f98e 	bl	80069fa <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	6989      	ldr	r1, [r1, #24]
 80096e6:	9100      	str	r1, [sp, #0]
 80096e8:	6838      	ldr	r0, [r7, #0]
 80096ea:	f000 fae5 	bl	8009cb8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xc0>
          return DeserializationError::Ok;
 80096f4:	2300      	movs	r3, #0
 80096f6:	e042      	b.n	800977e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 80096f8:	2304      	movs	r3, #4
 80096fa:	e040      	b.n	800977e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setInteger(number.asSignedInteger(), resources_))
 80096fc:	f107 0308 	add.w	r3, r7, #8
 8009700:	4618      	mov	r0, r3
 8009702:	f7fd f96c 	bl	80069de <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	6879      	ldr	r1, [r7, #4]
 800970c:	6989      	ldr	r1, [r1, #24]
 800970e:	9100      	str	r1, [sp, #0]
 8009710:	6838      	ldr	r0, [r7, #0]
 8009712:	f000 fb13 	bl	8009d3c <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xe8>
          return DeserializationError::Ok;
 800971c:	2300      	movs	r3, #0
 800971e:	e02e      	b.n	800977e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8009720:	2304      	movs	r3, #4
 8009722:	e02c      	b.n	800977e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asFloat(), resources_))
 8009724:	f107 0308 	add.w	r3, r7, #8
 8009728:	4618      	mov	r0, r3
 800972a:	f7fd f974 	bl	8006a16 <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>
 800972e:	eef0 7a40 	vmov.f32	s15, s0
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	4619      	mov	r1, r3
 8009738:	eeb0 0a67 	vmov.f32	s0, s15
 800973c:	6838      	ldr	r0, [r7, #0]
 800973e:	f000 fb3f 	bl	8009dc0 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x114>
          return DeserializationError::Ok;
 8009748:	2300      	movs	r3, #0
 800974a:	e018      	b.n	800977e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 800974c:	2304      	movs	r3, #4
 800974e:	e016      	b.n	800977e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asDouble(), resources_))
 8009750:	f107 0308 	add.w	r3, r7, #8
 8009754:	4618      	mov	r0, r3
 8009756:	f7fd f96d 	bl	8006a34 <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>
 800975a:	eeb0 7b40 	vmov.f64	d7, d0
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	4619      	mov	r1, r3
 8009764:	eeb0 0b47 	vmov.f64	d0, d7
 8009768:	6838      	ldr	r0, [r7, #0]
 800976a:	f000 fb3d 	bl	8009de8 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x140>
          return DeserializationError::Ok;
 8009774:	2300      	movs	r3, #0
 8009776:	e002      	b.n	800977e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8009778:	2304      	movs	r3, #4
 800977a:	e000      	b.n	800977e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        return DeserializationError::InvalidInput;
 800977c:	2303      	movs	r3, #3
  }
 800977e:	4618      	mov	r0, r3
 8009780:	3720      	adds	r7, #32
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop

08009788 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>:
  DeserializationError::Code skipNumericValue() {
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
    char c = current();
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7ff fc89 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009796:	4603      	mov	r3, r0
 8009798:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 800979a:	e007      	b.n	80097ac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x24>
      move();
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f87c 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7ff fc80 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80097a8:	4603      	mov	r3, r0
 80097aa:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 fa5e 	bl	8009c70 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1f0      	bne.n	800979c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x14>
    return DeserializationError::Ok;
 80097ba:	2300      	movs	r3, #0
  }
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f7fc fa84 	bl	8005cda <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>
 80097d2:	4603      	mov	r3, r0
  }
 80097d4:	4618      	mov	r0, r3
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>:
  static T forge(uint32_t bits) {
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
    return alias_cast<T>(bits);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fb4c 	bl	8009e82 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>
 80097ea:	eef0 7a40 	vmov.f32	s15, s0
  }
 80097ee:	eeb0 0a67 	vmov.f32	s0, s15
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 80097f8:	b590      	push	{r4, r7, lr}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af02      	add	r7, sp, #8
 80097fe:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	3304      	adds	r3, #4
 8009804:	4618      	mov	r0, r3
 8009806:	f000 fb4c 	bl	8009ea2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>
 800980a:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3304      	adds	r3, #4
 8009810:	4618      	mov	r0, r3
 8009812:	f7ff ffd7 	bl	80097c4 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 8009816:	4602      	mov	r2, r0
    return VariantData::getMember(
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	9200      	str	r2, [sp, #0]
 800981c:	330c      	adds	r3, #12
 800981e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009820:	4620      	mov	r0, r4
 8009822:	f000 f821 	bl	8009868 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 8009826:	4603      	mov	r3, r0
  }
 8009828:	4618      	mov	r0, r3
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	bd90      	pop	{r4, r7, pc}

08009830 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>:
  static T highest_for(
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
    return forge(0x4F7FFFFF);  // 4.29496704E9
 8009838:	4804      	ldr	r0, [pc, #16]	@ (800984c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE+0x1c>)
 800983a:	f7ff ffcf 	bl	80097dc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 800983e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8009842:	eeb0 0a67 	vmov.f32	s0, s15
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	4f7fffff 	.word	0x4f7fffff

08009850 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
    return client.getData();
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7fc fa94 	bl	8005d86 <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>
 800985e:	4603      	mov	r3, r0
  }
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>:
  static VariantData* getMember(const VariantData* var, TAdaptedString key,
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af02      	add	r7, sp, #8
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	4638      	mov	r0, r7
 8009872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!var)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d101      	bne.n	8009880 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x18>
      return 0;
 800987c:	2300      	movs	r3, #0
 800987e:	e008      	b.n	8009892 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return var->getMember(key, resources);
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	463b      	mov	r3, r7
 8009888:	cb0e      	ldmia	r3, {r1, r2, r3}
 800988a:	f000 fb16 	bl	8009eba <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>
 800988e:	4603      	mov	r3, r0
 8009890:	bf00      	nop
  }
 8009892:	4618      	mov	r0, r3
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>:
  void move() {
 800989a:	b580      	push	{r7, lr}
 800989c:	b082      	sub	sp, #8
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
    latch_.clear();
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	3310      	adds	r3, #16
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 fb1c 	bl	8009ee4 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>
  }
 80098ac:	bf00      	nop
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>:
  bool eat(char charToSkip) {
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
    if (current() != charToSkip)
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff fbf1 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80098c6:	4603      	mov	r3, r0
 80098c8:	461a      	mov	r2, r3
 80098ca:	78fb      	ldrb	r3, [r7, #3]
 80098cc:	4293      	cmp	r3, r2
 80098ce:	bf14      	ite	ne
 80098d0:	2301      	movne	r3, #1
 80098d2:	2300      	moveq	r3, #0
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x2a>
      return false;
 80098da:	2300      	movs	r3, #0
 80098dc:	e003      	b.n	80098e6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x32>
    move();
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff ffdb 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    return true;
 80098e4:	2301      	movs	r3, #1
  }
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>:

  template <typename TKey>
  AllowAllFilter operator[](const TKey&) const {
 80098ee:	b480      	push	{r7}
 80098f0:	b083      	sub	sp, #12
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 80098f8:	bf00      	nop
  }
 80098fa:	4618      	mov	r0, r3
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
	...

08009908 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipVariant(
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	7039      	strb	r1, [r7, #0]
    err = skipSpacesAndComments();
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7ff fb92 	bl	800903c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009918:	4603      	mov	r3, r0
 800991a:	73fb      	strb	r3, [r7, #15]
    if (err)
 800991c:	7bfb      	ldrb	r3, [r7, #15]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d001      	beq.n	8009926 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x1e>
      return err;
 8009922:	7bfb      	ldrb	r3, [r7, #15]
 8009924:	e07c      	b.n	8009a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
    switch (current()) {
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7ff fbbe 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800992c:	4603      	mov	r3, r0
 800992e:	2b7b      	cmp	r3, #123	@ 0x7b
 8009930:	dc71      	bgt.n	8009a16 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8009932:	2b5b      	cmp	r3, #91	@ 0x5b
 8009934:	da04      	bge.n	8009940 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x38>
 8009936:	2b22      	cmp	r3, #34	@ 0x22
 8009938:	d056      	beq.n	80099e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 800993a:	2b27      	cmp	r3, #39	@ 0x27
 800993c:	d054      	beq.n	80099e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 800993e:	e06a      	b.n	8009a16 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8009940:	3b5b      	subs	r3, #91	@ 0x5b
 8009942:	2b20      	cmp	r3, #32
 8009944:	d867      	bhi.n	8009a16 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8009946:	a201      	add	r2, pc, #4	@ (adr r2, 800994c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x44>)
 8009948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994c:	080099d1 	.word	0x080099d1
 8009950:	08009a17 	.word	0x08009a17
 8009954:	08009a17 	.word	0x08009a17
 8009958:	08009a17 	.word	0x08009a17
 800995c:	08009a17 	.word	0x08009a17
 8009960:	08009a17 	.word	0x08009a17
 8009964:	08009a17 	.word	0x08009a17
 8009968:	08009a17 	.word	0x08009a17
 800996c:	08009a17 	.word	0x08009a17
 8009970:	08009a17 	.word	0x08009a17
 8009974:	08009a17 	.word	0x08009a17
 8009978:	080099ff 	.word	0x080099ff
 800997c:	08009a17 	.word	0x08009a17
 8009980:	08009a17 	.word	0x08009a17
 8009984:	08009a17 	.word	0x08009a17
 8009988:	08009a17 	.word	0x08009a17
 800998c:	08009a17 	.word	0x08009a17
 8009990:	08009a17 	.word	0x08009a17
 8009994:	08009a17 	.word	0x08009a17
 8009998:	08009a0b 	.word	0x08009a0b
 800999c:	08009a17 	.word	0x08009a17
 80099a0:	08009a17 	.word	0x08009a17
 80099a4:	08009a17 	.word	0x08009a17
 80099a8:	08009a17 	.word	0x08009a17
 80099ac:	08009a17 	.word	0x08009a17
 80099b0:	080099f3 	.word	0x080099f3
 80099b4:	08009a17 	.word	0x08009a17
 80099b8:	08009a17 	.word	0x08009a17
 80099bc:	08009a17 	.word	0x08009a17
 80099c0:	08009a17 	.word	0x08009a17
 80099c4:	08009a17 	.word	0x08009a17
 80099c8:	08009a17 	.word	0x08009a17
 80099cc:	080099dd 	.word	0x080099dd
        return skipArray(nestingLimit);
 80099d0:	7839      	ldrb	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f7ff fc05 	bl	80091e2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 80099d8:	4603      	mov	r3, r0
 80099da:	e021      	b.n	8009a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipObject(nestingLimit);
 80099dc:	7839      	ldrb	r1, [r7, #0]
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7ff fd2e 	bl	8009440 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 80099e4:	4603      	mov	r3, r0
 80099e6:	e01b      	b.n	8009a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipQuotedString();
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7ff fdca 	bl	8009582 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 80099ee:	4603      	mov	r3, r0
 80099f0:	e016      	b.n	8009a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("true");
 80099f2:	490d      	ldr	r1, [pc, #52]	@ (8009a28 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x120>)
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7ff fdf9 	bl	80095ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 80099fa:	4603      	mov	r3, r0
 80099fc:	e010      	b.n	8009a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("false");
 80099fe:	490b      	ldr	r1, [pc, #44]	@ (8009a2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x124>)
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7ff fdf3 	bl	80095ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8009a06:	4603      	mov	r3, r0
 8009a08:	e00a      	b.n	8009a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("null");
 8009a0a:	4909      	ldr	r1, [pc, #36]	@ (8009a30 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x128>)
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7ff fded 	bl	80095ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8009a12:	4603      	mov	r3, r0
 8009a14:	e004      	b.n	8009a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipNumericValue();
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff feb6 	bl	8009788 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	bf00      	nop
  }
 8009a20:	4618      	mov	r0, r3
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	0802a504 	.word	0x0802a504
 8009a2c:	0802a50c 	.word	0x0802a50c
 8009a30:	0802a514 	.word	0x0802a514

08009a34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>:
  DeserializationError::Code parseKey() {
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
    stringBuilder_.startString();
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fc fc52 	bl	80062e8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    if (isQuote(current())) {
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7ff fb2f 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 fa6c 	bl	8009f2a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d004      	beq.n	8009a62 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x2e>
      return parseQuotedString();
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 f888 	bl	8009b6e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	e004      	b.n	8009a6c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x38>
      return parseNonQuotedString();
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fa75 	bl	8009f52 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	bf00      	nop
  }
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>:
  AllowAllFilter operator[](const TKey&) const {
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8009a7e:	bf00      	nop
  }
 8009a80:	4618      	mov	r0, r3
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b08a      	sub	sp, #40	@ 0x28
 8009a90:	af02      	add	r7, sp, #8
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 8009a98:	f107 0318 	add.w	r3, r7, #24
 8009a9c:	6879      	ldr	r1, [r7, #4]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fc fad2 	bl	8006048 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 8009aa4:	f107 0318 	add.w	r3, r7, #24
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fd fd51 	bl	8007550 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	f083 0301 	eor.w	r3, r3, #1
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x32>
    return nullptr;
 8009aba:	2300      	movs	r3, #0
 8009abc:	e037      	b.n	8009b2e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  auto valueSlot = resources->allocVariant();
 8009abe:	f107 0310 	add.w	r3, r7, #16
 8009ac2:	6879      	ldr	r1, [r7, #4]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fc fabf 	bl	8006048 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 8009aca:	f107 0310 	add.w	r3, r7, #16
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fd fd3e 	bl	8007550 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	f083 0301 	eor.w	r3, r3, #1
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x58>
    return nullptr;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	e024      	b.n	8009b2e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  if (!keySlot->setString(key, resources))
 8009ae4:	f107 0318 	add.w	r3, r7, #24
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fd fd5a 	bl	80075a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8009aee:	4603      	mov	r3, r0
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	68b9      	ldr	r1, [r7, #8]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7fb fe63 	bl	80057c0 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>
 8009afa:	4603      	mov	r3, r0
 8009afc:	f083 0301 	eor.w	r3, r3, #1
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d001      	beq.n	8009b0a <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x7e>
    return nullptr;
 8009b06:	2300      	movs	r3, #0
 8009b08:	e011      	b.n	8009b2e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	9301      	str	r3, [sp, #4]
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	f107 0218 	add.w	r2, r7, #24
 8009b1a:	ca06      	ldmia	r2, {r1, r2}
 8009b1c:	f7fc fa0d 	bl	8005f3a <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 8009b20:	f107 0310 	add.w	r3, r7, #16
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fd fd24 	bl	8007572 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	bf00      	nop
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3720      	adds	r7, #32
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>:
  DeserializationError::Code skipKey() {
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b082      	sub	sp, #8
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
    if (isQuote(current())) {
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7ff fab2 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009b44:	4603      	mov	r3, r0
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 f9ef 	bl	8009f2a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d004      	beq.n	8009b5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x26>
      return skipQuotedString();
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff fd15 	bl	8009582 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	e004      	b.n	8009b66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x30>
      return skipNonQuotedString();
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fa31 	bl	8009fc4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>
 8009b62:	4603      	mov	r3, r0
 8009b64:	bf00      	nop
  }
 8009b66:	4618      	mov	r0, r3
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>:
  DeserializationError::Code parseQuotedString() {
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b086      	sub	sp, #24
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
    Utf16::Codepoint codepoint;
 8009b76:	f107 030c 	add.w	r3, r7, #12
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fc fe08 	bl	8006790 <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>
    const char stopChar = current();
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff fa91 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009b86:	4603      	mov	r3, r0
 8009b88:	75bb      	strb	r3, [r7, #22]
    move();
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff fe85 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7ff fa89 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009b96:	4603      	mov	r3, r0
 8009b98:	75fb      	strb	r3, [r7, #23]
      move();
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7ff fe7d 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8009ba0:	7dfa      	ldrb	r2, [r7, #23]
 8009ba2:	7dbb      	ldrb	r3, [r7, #22]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d051      	beq.n	8009c4c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xde>
      if (c == '\0')
 8009ba8:	7dfb      	ldrb	r3, [r7, #23]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d101      	bne.n	8009bb2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x44>
        return DeserializationError::IncompleteInput;
 8009bae:	2302      	movs	r3, #2
 8009bb0:	e05a      	b.n	8009c68 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
      if (c == '\\') {
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
 8009bb4:	2b5c      	cmp	r3, #92	@ 0x5c
 8009bb6:	d140      	bne.n	8009c3a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xcc>
        c = current();
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7ff fa75 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8009bc2:	7dfb      	ldrb	r3, [r7, #23]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x5e>
          return DeserializationError::IncompleteInput;
 8009bc8:	2302      	movs	r3, #2
 8009bca:	e04d      	b.n	8009c68 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        if (c == 'u') {
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
 8009bce:	2b75      	cmp	r3, #117	@ 0x75
 8009bd0:	d125      	bne.n	8009c1e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xb0>
          move();
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7ff fe61 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          err = parseHex4(codeunit);
 8009bd8:	f107 030a 	add.w	r3, r7, #10
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fa0e 	bl	800a000 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>
 8009be4:	4603      	mov	r3, r0
 8009be6:	757b      	strb	r3, [r7, #21]
          if (err)
 8009be8:	7d7b      	ldrb	r3, [r7, #21]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d001      	beq.n	8009bf2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x84>
            return err;
 8009bee:	7d7b      	ldrb	r3, [r7, #21]
 8009bf0:	e03a      	b.n	8009c68 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
          if (codepoint.append(codeunit))
 8009bf2:	897a      	ldrh	r2, [r7, #10]
 8009bf4:	f107 030c 	add.w	r3, r7, #12
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fc fdd9 	bl	80067b2 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d020      	beq.n	8009c48 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xda>
            Utf8::encodeCodepoint(codepoint.value(), stringBuilder_);
 8009c06:	f107 030c 	add.w	r3, r7, #12
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fc fe03 	bl	8006816 <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>
 8009c10:	4602      	mov	r2, r0
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4619      	mov	r1, r3
 8009c16:	4610      	mov	r0, r2
 8009c18:	f000 fa2b 	bl	800a072 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>
 8009c1c:	e7b8      	b.n	8009b90 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        c = EscapeSequence::unescapeChar(c);
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fc fb00 	bl	8006226 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>
 8009c26:	4603      	mov	r3, r0
 8009c28:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8009c2a:	7dfb      	ldrb	r3, [r7, #23]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xc6>
          return DeserializationError::InvalidInput;
 8009c30:	2303      	movs	r3, #3
 8009c32:	e019      	b.n	8009c68 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        move();
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f7ff fe30 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      stringBuilder_.append(c);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	7dfa      	ldrb	r2, [r7, #23]
 8009c3e:	4611      	mov	r1, r2
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fc fbaa 	bl	800639a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
 8009c46:	e7a3      	b.n	8009b90 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
          continue;
 8009c48:	bf00      	nop
    for (;;) {
 8009c4a:	e7a1      	b.n	8009b90 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        break;
 8009c4c:	bf00      	nop
    if (!stringBuilder_.isValid())
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fc fbd4 	bl	80063fe <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 8009c56:	4603      	mov	r3, r0
 8009c58:	f083 0301 	eor.w	r3, r3, #1
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d001      	beq.n	8009c66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xf8>
      return DeserializationError::NoMemory;
 8009c62:	2304      	movs	r3, #4
 8009c64:	e000      	b.n	8009c68 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
    return DeserializationError::Ok;
 8009c66:	2300      	movs	r3, #0
  }
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3718      	adds	r7, #24
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>:
  static inline bool canBeInNumber(char c) {
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	4603      	mov	r3, r0
 8009c78:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8009c7a:	79fb      	ldrb	r3, [r7, #7]
 8009c7c:	2239      	movs	r2, #57	@ 0x39
 8009c7e:	2130      	movs	r1, #48	@ 0x30
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 fa7a 	bl	800a17a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8009c86:	4603      	mov	r3, r0
           c == 'e' || c == 'E';
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10e      	bne.n	8009caa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8009c8c:	79fb      	ldrb	r3, [r7, #7]
 8009c8e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009c90:	d00b      	beq.n	8009caa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8009c92:	79fb      	ldrb	r3, [r7, #7]
 8009c94:	2b2d      	cmp	r3, #45	@ 0x2d
 8009c96:	d008      	beq.n	8009caa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8009c98:	79fb      	ldrb	r3, [r7, #7]
 8009c9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c9c:	d005      	beq.n	8009caa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8009c9e:	79fb      	ldrb	r3, [r7, #7]
 8009ca0:	2b65      	cmp	r3, #101	@ 0x65
 8009ca2:	d002      	beq.n	8009caa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
           c == 'e' || c == 'E';
 8009ca4:	79fb      	ldrb	r3, [r7, #7]
 8009ca6:	2b45      	cmp	r3, #69	@ 0x45
 8009ca8:	d101      	bne.n	8009cae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3e>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e000      	b.n	8009cb0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x40>
 8009cae:	2300      	movs	r3, #0
  }
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 8009cb8:	b5b0      	push	{r4, r5, r7, lr}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	e9c7 2300 	strd	r2, r3, [r7]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 8009cc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cc8:	f7ff f8be 	bl	8008e48 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d006      	beq.n	8009ce0 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Uint32;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	220a      	movs	r2, #10
 8009cd6:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	e028      	b.n	8009d32 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 8009ce0:	f107 0310 	add.w	r3, r7, #16
 8009ce4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fc fa33 	bl	8006152 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8009cec:	f107 0310 	add.w	r3, r7, #16
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f000 fa5c 	bl	800a1ae <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	f083 0301 	eor.w	r3, r3, #1
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 8009d02:	2300      	movs	r3, #0
 8009d04:	e016      	b.n	8009d34 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Uint64;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	221a      	movs	r2, #26
 8009d0a:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8009d0c:	f107 0310 	add.w	r3, r7, #16
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 fa5d 	bl	800a1d0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8009d16:	4603      	mov	r3, r0
 8009d18:	461a      	mov	r2, r3
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 8009d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009d22:	f107 0310 	add.w	r3, r7, #16
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 fa5e 	bl	800a1e8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 8009d32:	2301      	movs	r3, #1
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3718      	adds	r7, #24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bdb0      	pop	{r4, r5, r7, pc}

08009d3c <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 8009d3c:	b5b0      	push	{r4, r5, r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	e9c7 2300 	strd	r2, r3, [r7]
  if (canConvertNumber<int32_t>(value)) {
 8009d48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d4c:	f000 fa58 	bl	800a200 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d006      	beq.n	8009d64 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Int32;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	220c      	movs	r2, #12
 8009d5a:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	e028      	b.n	8009db6 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
    auto extension = resources->allocExtension();
 8009d64:	f107 0310 	add.w	r3, r7, #16
 8009d68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fc f9f1 	bl	8006152 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8009d70:	f107 0310 	add.w	r3, r7, #16
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 fa1a 	bl	800a1ae <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	f083 0301 	eor.w	r3, r3, #1
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d001      	beq.n	8009d8a <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 8009d86:	2300      	movs	r3, #0
 8009d88:	e016      	b.n	8009db8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Int64;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	221c      	movs	r2, #28
 8009d8e:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8009d90:	f107 0310 	add.w	r3, r7, #16
 8009d94:	4618      	mov	r0, r3
 8009d96:	f000 fa1b 	bl	800a1d0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 8009da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009da6:	f107 0310 	add.w	r3, r7, #16
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 fa1c 	bl	800a1e8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8009db0:	4603      	mov	r3, r0
 8009db2:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 8009db6:	2301      	movs	r3, #1
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bdb0      	pop	{r4, r5, r7, pc}

08009dc0 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>:
  enable_if_t<sizeof(T) == 4, bool> setFloat(T value, ResourceManager*) {
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	ed87 0a02 	vstr	s0, [r7, #8]
 8009dcc:	6079      	str	r1, [r7, #4]
    type_ = VariantType::Float;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	220e      	movs	r2, #14
 8009dd2:	711a      	strb	r2, [r3, #4]
    content_.asFloat = value;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	601a      	str	r2, [r3, #0]
    return true;
 8009dda:	2301      	movs	r3, #1
  }
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>:
enable_if_t<sizeof(T) == 8, bool> VariantData::setFloat(
 8009de8:	b5b0      	push	{r4, r5, r7, lr}
 8009dea:	b088      	sub	sp, #32
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	ed87 0b00 	vstr	d0, [r7]
 8009df4:	60b9      	str	r1, [r7, #8]
  float valueAsFloat = static_cast<float>(value);
 8009df6:	ed97 7b00 	vldr	d7, [r7]
 8009dfa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009dfe:	edc7 7a07 	vstr	s15, [r7, #28]
  if (value == valueAsFloat) {
 8009e02:	edd7 7a07 	vldr	s15, [r7, #28]
 8009e06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009e0a:	ed97 6b00 	vldr	d6, [r7]
 8009e0e:	eeb4 6b47 	vcmp.f64	d6, d7
 8009e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e16:	d106      	bne.n	8009e26 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x3e>
    type_ = VariantType::Float;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	220e      	movs	r2, #14
 8009e1c:	711a      	strb	r2, [r3, #4]
    content_.asFloat = valueAsFloat;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	69fa      	ldr	r2, [r7, #28]
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	e028      	b.n	8009e78 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x90>
    auto extension = resources->allocExtension();
 8009e26:	f107 0314 	add.w	r3, r7, #20
 8009e2a:	68b9      	ldr	r1, [r7, #8]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7fc f990 	bl	8006152 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8009e32:	f107 0314 	add.w	r3, r7, #20
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 f9b9 	bl	800a1ae <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	f083 0301 	eor.w	r3, r3, #1
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x64>
      return false;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	e016      	b.n	8009e7a <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x92>
    type_ = VariantType::Double;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	221e      	movs	r2, #30
 8009e50:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8009e52:	f107 0314 	add.w	r3, r7, #20
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 f9ba 	bl	800a1d0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	461a      	mov	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	801a      	strh	r2, [r3, #0]
    extension->asDouble = value;
 8009e64:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009e68:	f107 0314 	add.w	r3, r7, #20
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f000 f9bb 	bl	800a1e8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8009e72:	4603      	mov	r3, r0
 8009e74:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 8009e78:	2301      	movs	r3, #1
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3720      	adds	r7, #32
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bdb0      	pop	{r4, r5, r7, pc}

08009e82 <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>:
T alias_cast(F raw_data) {
 8009e82:	b480      	push	{r7}
 8009e84:	b085      	sub	sp, #20
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
  ac.raw = raw_data;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	ee07 3a90 	vmov	s15, r3
}
 8009e94:	eeb0 0a67 	vmov.f32	s0, s15
 8009e98:	3714      	adds	r7, #20
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b082      	sub	sp, #8
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
    return client.getData();
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7fb ff21 	bl	8005cf2 <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>
 8009eb0:	4603      	mov	r3, r0
  }
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>:
  VariantData* getMember(TAdaptedString key,
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b086      	sub	sp, #24
 8009ebe:	af02      	add	r7, sp, #8
 8009ec0:	60f8      	str	r0, [r7, #12]
 8009ec2:	4638      	mov	r0, r7
 8009ec4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    return ObjectData::getMember(asObject(), key, resources);
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f7fb fbe7 	bl	800569c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	463b      	mov	r3, r7
 8009ed4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ed6:	f7fd fea3 	bl	8007c20 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>
 8009eda:	4603      	mov	r3, r0
  }
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>:
  void clear() {
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
    loaded_ = false;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	715a      	strb	r2, [r3, #5]
  }
 8009ef2:	bf00      	nop
 8009ef4:	370c      	adds	r7, #12
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>:
  }

 private:
  void load() {
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(!ended_);
    int c = reader_.read();
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 f99f 	bl	800a24c <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>
 8009f0e:	60f8      	str	r0, [r7, #12]
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      ended_ = true;
#endif
    current_ = static_cast<char>(c > 0 ? c : 0);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	711a      	strb	r2, [r3, #4]
    loaded_ = true;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	715a      	strb	r2, [r3, #5]
  }
 8009f22:	bf00      	nop
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 8009f2a:	b480      	push	{r7}
 8009f2c:	b083      	sub	sp, #12
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	4603      	mov	r3, r0
 8009f32:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8009f34:	79fb      	ldrb	r3, [r7, #7]
 8009f36:	2b27      	cmp	r3, #39	@ 0x27
 8009f38:	d002      	beq.n	8009f40 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x16>
 8009f3a:	79fb      	ldrb	r3, [r7, #7]
 8009f3c:	2b22      	cmp	r3, #34	@ 0x22
 8009f3e:	d101      	bne.n	8009f44 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1a>
 8009f40:	2301      	movs	r3, #1
 8009f42:	e000      	b.n	8009f46 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1c>
 8009f44:	2300      	movs	r3, #0
  }
 8009f46:	4618      	mov	r0, r3
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>:
  DeserializationError::Code parseNonQuotedString() {
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
    char c = current();
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7ff f8a4 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009f60:	4603      	mov	r3, r0
 8009f62:	73fb      	strb	r3, [r7, #15]
    if (canBeInNonQuotedString(c)) {  // no quotes
 8009f64:	7bfb      	ldrb	r3, [r7, #15]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 f980 	bl	800a26c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d015      	beq.n	8009f9e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x4c>
        move();
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7ff fc91 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
        stringBuilder_.append(c);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	7bfa      	ldrb	r2, [r7, #15]
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fc fa0b 	bl	800639a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
        c = current();
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f7ff f88f 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	73fb      	strb	r3, [r7, #15]
      } while (canBeInNonQuotedString(c));
 8009f8e:	7bfb      	ldrb	r3, [r7, #15]
 8009f90:	4618      	mov	r0, r3
 8009f92:	f000 f96b 	bl	800a26c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1ea      	bne.n	8009f72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x20>
 8009f9c:	e001      	b.n	8009fa2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x50>
      return DeserializationError::InvalidInput;
 8009f9e:	2303      	movs	r3, #3
 8009fa0:	e00c      	b.n	8009fbc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    if (!stringBuilder_.isValid())
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7fc fa2a 	bl	80063fe <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 8009faa:	4603      	mov	r3, r0
 8009fac:	f083 0301 	eor.w	r3, r3, #1
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d001      	beq.n	8009fba <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x68>
      return DeserializationError::NoMemory;
 8009fb6:	2304      	movs	r3, #4
 8009fb8:	e000      	b.n	8009fbc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    return DeserializationError::Ok;
 8009fba:	2300      	movs	r3, #0
  }
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>:
  DeserializationError::Code skipNonQuotedString() {
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
    char c = current();
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f7ff f86b 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 8009fd6:	e007      	b.n	8009fe8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x24>
      move();
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7ff fc5e 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7ff f862 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 f93e 	bl	800a26c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d1f0      	bne.n	8009fd8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x14>
    return DeserializationError::Ok;
 8009ff6:	2300      	movs	r3, #0
  }
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>:
  DeserializationError::Code parseHex4(uint16_t& result) {
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
    result = 0;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	2200      	movs	r2, #0
 800a00e:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; ++i) {
 800a010:	2300      	movs	r3, #0
 800a012:	73fb      	strb	r3, [r7, #15]
 800a014:	e025      	b.n	800a062 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x62>
      char digit = current();
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f7ff f846 	bl	80090a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800a01c:	4603      	mov	r3, r0
 800a01e:	73bb      	strb	r3, [r7, #14]
      if (!digit)
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d101      	bne.n	800a02a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x2a>
        return DeserializationError::IncompleteInput;
 800a026:	2302      	movs	r3, #2
 800a028:	e01f      	b.n	800a06a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      uint8_t value = decodeHex(digit);
 800a02a:	7bbb      	ldrb	r3, [r7, #14]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 f944 	bl	800a2ba <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>
 800a032:	4603      	mov	r3, r0
 800a034:	737b      	strb	r3, [r7, #13]
      if (value > 0x0F)
 800a036:	7b7b      	ldrb	r3, [r7, #13]
 800a038:	2b0f      	cmp	r3, #15
 800a03a:	d901      	bls.n	800a040 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x40>
        return DeserializationError::InvalidInput;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e014      	b.n	800a06a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      result = uint16_t((result << 4) | value);
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	881b      	ldrh	r3, [r3, #0]
 800a044:	011b      	lsls	r3, r3, #4
 800a046:	b21a      	sxth	r2, r3
 800a048:	7b7b      	ldrb	r3, [r7, #13]
 800a04a:	b21b      	sxth	r3, r3
 800a04c:	4313      	orrs	r3, r2
 800a04e:	b21b      	sxth	r3, r3
 800a050:	b29a      	uxth	r2, r3
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	801a      	strh	r2, [r3, #0]
      move();
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7ff fc1f 	bl	800989a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (uint8_t i = 0; i < 4; ++i) {
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
 800a05e:	3301      	adds	r3, #1
 800a060:	73fb      	strb	r3, [r7, #15]
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	2b03      	cmp	r3, #3
 800a066:	d9d6      	bls.n	800a016 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x16>
    return DeserializationError::Ok;
 800a068:	2300      	movs	r3, #0
  }
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
 800a072:	b580      	push	{r7, lr}
 800a074:	b086      	sub	sp, #24
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	6039      	str	r1, [r7, #0]
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a080:	d806      	bhi.n	800a090 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x1e>
    str.append(char(codepoint32));
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	b2db      	uxtb	r3, r3
 800a086:	4619      	mov	r1, r3
 800a088:	6838      	ldr	r0, [r7, #0]
 800a08a:	f7fc f986 	bl	800639a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>

    while (*(--p)) {
      str.append(*p);
    }
  }
}
 800a08e:	e070      	b.n	800a172 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x100>
    char* p = buf;
 800a090:	f107 030c 	add.w	r3, r7, #12
 800a094:	617b      	str	r3, [r7, #20]
    *(p++) = 0;
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	1c5a      	adds	r2, r3, #1
 800a09a:	617a      	str	r2, [r7, #20]
 800a09c:	2200      	movs	r2, #0
 800a09e:	701a      	strb	r2, [r3, #0]
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a0ae:	b2d9      	uxtb	r1, r3
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	1c5a      	adds	r2, r3, #1
 800a0b4:	617a      	str	r2, [r7, #20]
 800a0b6:	460a      	mov	r2, r1
 800a0b8:	701a      	strb	r2, [r3, #0]
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	099b      	lsrs	r3, r3, #6
 800a0be:	827b      	strh	r3, [r7, #18]
    if (codepoint16 < 0x20) {  // 0x800
 800a0c0:	8a7b      	ldrh	r3, [r7, #18]
 800a0c2:	2b1f      	cmp	r3, #31
 800a0c4:	d80a      	bhi.n	800a0dc <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x6a>
      *(p++) = char(codepoint16 | 0xC0);
 800a0c6:	8a7b      	ldrh	r3, [r7, #18]
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800a0ce:	b2d9      	uxtb	r1, r3
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	1c5a      	adds	r2, r3, #1
 800a0d4:	617a      	str	r2, [r7, #20]
 800a0d6:	460a      	mov	r2, r1
 800a0d8:	701a      	strb	r2, [r3, #0]
 800a0da:	e03e      	b.n	800a15a <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800a0dc:	8a7b      	ldrh	r3, [r7, #18]
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a0ea:	b2d9      	uxtb	r1, r3
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	1c5a      	adds	r2, r3, #1
 800a0f0:	617a      	str	r2, [r7, #20]
 800a0f2:	460a      	mov	r2, r1
 800a0f4:	701a      	strb	r2, [r3, #0]
      codepoint16 = uint16_t(codepoint16 >> 6);
 800a0f6:	8a7b      	ldrh	r3, [r7, #18]
 800a0f8:	099b      	lsrs	r3, r3, #6
 800a0fa:	827b      	strh	r3, [r7, #18]
      if (codepoint16 < 0x10) {  // 0x10000
 800a0fc:	8a7b      	ldrh	r3, [r7, #18]
 800a0fe:	2b0f      	cmp	r3, #15
 800a100:	d80a      	bhi.n	800a118 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xa6>
        *(p++) = char(codepoint16 | 0xE0);
 800a102:	8a7b      	ldrh	r3, [r7, #18]
 800a104:	b2db      	uxtb	r3, r3
 800a106:	f063 031f 	orn	r3, r3, #31
 800a10a:	b2d9      	uxtb	r1, r3
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	1c5a      	adds	r2, r3, #1
 800a110:	617a      	str	r2, [r7, #20]
 800a112:	460a      	mov	r2, r1
 800a114:	701a      	strb	r2, [r3, #0]
 800a116:	e020      	b.n	800a15a <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800a118:	8a7b      	ldrh	r3, [r7, #18]
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a120:	b2db      	uxtb	r3, r3
 800a122:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a126:	b2d9      	uxtb	r1, r3
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	1c5a      	adds	r2, r3, #1
 800a12c:	617a      	str	r2, [r7, #20]
 800a12e:	460a      	mov	r2, r1
 800a130:	701a      	strb	r2, [r3, #0]
        codepoint16 = uint16_t(codepoint16 >> 6);
 800a132:	8a7b      	ldrh	r3, [r7, #18]
 800a134:	099b      	lsrs	r3, r3, #6
 800a136:	827b      	strh	r3, [r7, #18]
        *(p++) = char(codepoint16 | 0xF0);
 800a138:	8a7b      	ldrh	r3, [r7, #18]
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	f063 030f 	orn	r3, r3, #15
 800a140:	b2d9      	uxtb	r1, r3
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	1c5a      	adds	r2, r3, #1
 800a146:	617a      	str	r2, [r7, #20]
 800a148:	460a      	mov	r2, r1
 800a14a:	701a      	strb	r2, [r3, #0]
    while (*(--p)) {
 800a14c:	e005      	b.n	800a15a <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      str.append(*p);
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	4619      	mov	r1, r3
 800a154:	6838      	ldr	r0, [r7, #0]
 800a156:	f7fc f920 	bl	800639a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
    while (*(--p)) {
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	3b01      	subs	r3, #1
 800a15e:	617b      	str	r3, [r7, #20]
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	bf14      	ite	ne
 800a168:	2301      	movne	r3, #1
 800a16a:	2300      	moveq	r3, #0
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1ed      	bne.n	800a14e <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xdc>
}
 800a172:	bf00      	nop
 800a174:	3718      	adds	r7, #24
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 800a17a:	b480      	push	{r7}
 800a17c:	b083      	sub	sp, #12
 800a17e:	af00      	add	r7, sp, #0
 800a180:	4603      	mov	r3, r0
 800a182:	71fb      	strb	r3, [r7, #7]
 800a184:	460b      	mov	r3, r1
 800a186:	71bb      	strb	r3, [r7, #6]
 800a188:	4613      	mov	r3, r2
 800a18a:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 800a18c:	79ba      	ldrb	r2, [r7, #6]
 800a18e:	79fb      	ldrb	r3, [r7, #7]
 800a190:	429a      	cmp	r2, r3
 800a192:	d805      	bhi.n	800a1a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 800a194:	79fa      	ldrb	r2, [r7, #7]
 800a196:	797b      	ldrb	r3, [r7, #5]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d801      	bhi.n	800a1a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 800a19c:	2301      	movs	r3, #1
 800a19e:	e000      	b.n	800a1a2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x28>
 800a1a0:	2300      	movs	r3, #0
  }
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	370c      	adds	r7, #12
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr

0800a1ae <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>:
  explicit operator bool() const {
 800a1ae:	b480      	push	{r7}
 800a1b0:	b083      	sub	sp, #12
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	bf14      	ite	ne
 800a1be:	2301      	movne	r3, #1
 800a1c0:	2300      	moveq	r3, #0
 800a1c2:	b2db      	uxtb	r3, r3
  }
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>:
  SlotId id() const {
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
    return id_;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	889b      	ldrh	r3, [r3, #4]
  }
 800a1dc:	4618      	mov	r0, r3
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>:
  T* operator->() const {
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
    return ptr_;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
  }
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a200:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a204:	b082      	sub	sp, #8
 800a206:	af00      	add	r7, sp, #0
 800a208:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800a20c:	f000 f86e 	bl	800a2ec <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 800a210:	4603      	mov	r3, r0
 800a212:	17da      	asrs	r2, r3, #31
 800a214:	4698      	mov	r8, r3
 800a216:	4691      	mov	r9, r2
 800a218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a21c:	4542      	cmp	r2, r8
 800a21e:	eb73 0309 	sbcs.w	r3, r3, r9
 800a222:	db0d      	blt.n	800a240 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 800a224:	f000 f86b 	bl	800a2fe <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>
 800a228:	4603      	mov	r3, r0
 800a22a:	17da      	asrs	r2, r3, #31
 800a22c:	461c      	mov	r4, r3
 800a22e:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800a230:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a234:	4294      	cmp	r4, r2
 800a236:	eb75 0303 	sbcs.w	r3, r5, r3
 800a23a:	db01      	blt.n	800a240 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 800a23c:	2301      	movs	r3, #1
 800a23e:	e000      	b.n	800a242 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800a24c <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>:

  int read() {
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
    return static_cast<unsigned char>(*ptr_++);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	1c59      	adds	r1, r3, #1
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	6011      	str	r1, [r2, #0]
 800a25e:	781b      	ldrb	r3, [r3, #0]
  }
 800a260:	4618      	mov	r0, r3
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	4603      	mov	r3, r0
 800a274:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800a276:	79fb      	ldrb	r3, [r7, #7]
 800a278:	2239      	movs	r2, #57	@ 0x39
 800a27a:	2130      	movs	r1, #48	@ 0x30
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7ff ff7c 	bl	800a17a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d111      	bne.n	800a2ac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
 800a288:	79fb      	ldrb	r3, [r7, #7]
 800a28a:	227a      	movs	r2, #122	@ 0x7a
 800a28c:	215f      	movs	r1, #95	@ 0x5f
 800a28e:	4618      	mov	r0, r3
 800a290:	f7ff ff73 	bl	800a17a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d108      	bne.n	800a2ac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
           isBetween(c, 'A', 'Z');
 800a29a:	79fb      	ldrb	r3, [r7, #7]
 800a29c:	225a      	movs	r2, #90	@ 0x5a
 800a29e:	2141      	movs	r1, #65	@ 0x41
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7ff ff6a 	bl	800a17a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800a2a6:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x44>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e000      	b.n	800a2b2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x46>
 800a2b0:	2300      	movs	r3, #0
  }
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>:
  static inline uint8_t decodeHex(char c) {
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	71fb      	strb	r3, [r7, #7]
    if (c < 'A')
 800a2c4:	79fb      	ldrb	r3, [r7, #7]
 800a2c6:	2b40      	cmp	r3, #64	@ 0x40
 800a2c8:	d803      	bhi.n	800a2d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x18>
      return uint8_t(c - '0');
 800a2ca:	79fb      	ldrb	r3, [r7, #7]
 800a2cc:	3b30      	subs	r3, #48	@ 0x30
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	e006      	b.n	800a2e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x26>
    c = char(c & ~0x20);  // uppercase
 800a2d2:	79fb      	ldrb	r3, [r7, #7]
 800a2d4:	f023 0320 	bic.w	r3, r3, #32
 800a2d8:	71fb      	strb	r3, [r7, #7]
    return uint8_t(c - 'A' + 10);
 800a2da:	79fb      	ldrb	r3, [r7, #7]
 800a2dc:	3b37      	subs	r3, #55	@ 0x37
 800a2de:	b2db      	uxtb	r3, r3
  }
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>:
};

template <typename T>
struct numeric_limits<
    T, enable_if_t<is_integral<T>::value && is_signed<T>::value>> {
  static constexpr T lowest() {
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 800a2f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>:
  static constexpr T highest() {
 800a2fe:	b580      	push	{r7, lr}
 800a300:	af00      	add	r7, sp, #0
    return T(~lowest());
 800a302:	f7ff fff3 	bl	800a2ec <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 800a306:	4603      	mov	r3, r0
 800a308:	43db      	mvns	r3, r3
  }
 800a30a:	4618      	mov	r0, r3
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800a318:	1d39      	adds	r1, r7, #4
 800a31a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a31e:	2201      	movs	r2, #1
 800a320:	4803      	ldr	r0, [pc, #12]	@ (800a330 <__io_putchar+0x20>)
 800a322:	f019 fe32 	bl	8023f8a <HAL_UART_Transmit>
	  return ch;
 800a326:	687b      	ldr	r3, [r7, #4]
	}
 800a328:	4618      	mov	r0, r3
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	24000378 	.word	0x24000378

0800a334 <main>:
}

int main(void)
{
 800a334:	b590      	push	{r4, r7, lr}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
	MPU_Config();
 800a33a:	f000 fa55 	bl	800a7e8 <_ZL10MPU_Configv>
	//SCB->VTOR = 0x08000000;
	HAL_Init();
 800a33e:	f011 fb83 	bl	801ba48 <HAL_Init>
	SystemClock_Config();
 800a342:	f000 f867 	bl	800a414 <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 800a346:	f000 f92f 	bl	800a5a8 <_Z24PeriphCommonClock_Configv>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a34a:	f3bf 8f4f 	dsb	sy
}
 800a34e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a350:	f3bf 8f6f 	isb	sy
}
 800a354:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 800a356:	4b2d      	ldr	r3, [pc, #180]	@ (800a40c <main+0xd8>)
 800a358:	2200      	movs	r2, #0
 800a35a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a35e:	f3bf 8f4f 	dsb	sy
}
 800a362:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a364:	f3bf 8f6f 	isb	sy
}
 800a368:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800a36a:	bf00      	nop
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800a36c:	4b27      	ldr	r3, [pc, #156]	@ (800a40c <main+0xd8>)
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a374:	2b00      	cmp	r3, #0
 800a376:	bf14      	ite	ne
 800a378:	2301      	movne	r3, #1
 800a37a:	2300      	moveq	r3, #0
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d11b      	bne.n	800a3ba <main+0x86>
  __ASM volatile ("dsb 0xF":::"memory");
 800a382:	f3bf 8f4f 	dsb	sy
}
 800a386:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a388:	f3bf 8f6f 	isb	sy
}
 800a38c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a38e:	4b1f      	ldr	r3, [pc, #124]	@ (800a40c <main+0xd8>)
 800a390:	2200      	movs	r2, #0
 800a392:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a396:	f3bf 8f4f 	dsb	sy
}
 800a39a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a39c:	f3bf 8f6f 	isb	sy
}
 800a3a0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a3a2:	4b1a      	ldr	r3, [pc, #104]	@ (800a40c <main+0xd8>)
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	4a19      	ldr	r2, [pc, #100]	@ (800a40c <main+0xd8>)
 800a3a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a3ae:	f3bf 8f4f 	dsb	sy
}
 800a3b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a3b4:	f3bf 8f6f 	isb	sy
}
 800a3b8:	e000      	b.n	800a3bc <main+0x88>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800a3ba:	bf00      	nop
	SCB_InvalidateICache();
	SCB_EnableICache();
	//SCB_InvalidateDCache();
	//SCB_EnableDCache();

    __HAL_RCC_DMA1_CLK_ENABLE();
 800a3bc:	4b14      	ldr	r3, [pc, #80]	@ (800a410 <main+0xdc>)
 800a3be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a3c2:	4a13      	ldr	r2, [pc, #76]	@ (800a410 <main+0xdc>)
 800a3c4:	f043 0301 	orr.w	r3, r3, #1
 800a3c8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a3cc:	4b10      	ldr	r3, [pc, #64]	@ (800a410 <main+0xdc>)
 800a3ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a3d2:	f003 0301 	and.w	r3, r3, #1
 800a3d6:	603b      	str	r3, [r7, #0]
 800a3d8:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); 			// used for SD card detect
 800a3da:	f000 f9a9 	bl	800a730 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 800a3de:	f000 f947 	bl	800a670 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment line 62 #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in FATFT/Target/sd_diskio.c
 800a3e2:	f000 f919 	bl	800a618 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 800a3e6:	f01b fcb5 	bl	8025d54 <MX_FATFS_Init>

	Remora *remora = new Remora();
 800a3ea:	2044      	movs	r0, #68	@ 0x44
 800a3ec:	f01e f8e0 	bl	80285b0 <_Znwj>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	461c      	mov	r4, r3
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	f000 fe61 	bl	800b0bc <_ZN6RemoraC1Ev>
 800a3fa:	607c      	str	r4, [r7, #4]
	remora->run();
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f001 f915 	bl	800b62c <_ZN6Remora3runEv>
}
 800a402:	2300      	movs	r3, #0
 800a404:	4618      	mov	r0, r3
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd90      	pop	{r4, r7, pc}
 800a40c:	e000ed00 	.word	0xe000ed00
 800a410:	58024400 	.word	0x58024400

0800a414 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b09e      	sub	sp, #120	@ 0x78
 800a418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a41a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a41e:	224c      	movs	r2, #76	@ 0x4c
 800a420:	2100      	movs	r1, #0
 800a422:	4618      	mov	r0, r3
 800a424:	f01f f8e8 	bl	80295f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a428:	f107 030c 	add.w	r3, r7, #12
 800a42c:	2220      	movs	r2, #32
 800a42e:	2100      	movs	r1, #0
 800a430:	4618      	mov	r0, r3
 800a432:	f01f f8e1 	bl	80295f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800a436:	2002      	movs	r0, #2
 800a438:	f014 fa8c 	bl	801e954 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a43c:	2300      	movs	r3, #0
 800a43e:	60bb      	str	r3, [r7, #8]
 800a440:	4b56      	ldr	r3, [pc, #344]	@ (800a59c <_Z18SystemClock_Configv+0x188>)
 800a442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a444:	4a55      	ldr	r2, [pc, #340]	@ (800a59c <_Z18SystemClock_Configv+0x188>)
 800a446:	f023 0301 	bic.w	r3, r3, #1
 800a44a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a44c:	4b53      	ldr	r3, [pc, #332]	@ (800a59c <_Z18SystemClock_Configv+0x188>)
 800a44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a450:	f003 0301 	and.w	r3, r3, #1
 800a454:	60bb      	str	r3, [r7, #8]
 800a456:	4b52      	ldr	r3, [pc, #328]	@ (800a5a0 <_Z18SystemClock_Configv+0x18c>)
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	4a51      	ldr	r2, [pc, #324]	@ (800a5a0 <_Z18SystemClock_Configv+0x18c>)
 800a45c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a460:	6193      	str	r3, [r2, #24]
 800a462:	4b4f      	ldr	r3, [pc, #316]	@ (800a5a0 <_Z18SystemClock_Configv+0x18c>)
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a46a:	60bb      	str	r3, [r7, #8]
 800a46c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a46e:	bf00      	nop
 800a470:	4b4b      	ldr	r3, [pc, #300]	@ (800a5a0 <_Z18SystemClock_Configv+0x18c>)
 800a472:	699b      	ldr	r3, [r3, #24]
 800a474:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a47c:	bf14      	ite	ne
 800a47e:	2301      	movne	r3, #1
 800a480:	2300      	moveq	r3, #0
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1f3      	bne.n	800a470 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a488:	4b46      	ldr	r3, [pc, #280]	@ (800a5a4 <_Z18SystemClock_Configv+0x190>)
 800a48a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a48e:	4a45      	ldr	r2, [pc, #276]	@ (800a5a4 <_Z18SystemClock_Configv+0x190>)
 800a490:	f043 0302 	orr.w	r3, r3, #2
 800a494:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a498:	4b42      	ldr	r3, [pc, #264]	@ (800a5a4 <_Z18SystemClock_Configv+0x190>)
 800a49a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a49e:	f003 0302 	and.w	r3, r3, #2
 800a4a2:	607b      	str	r3, [r7, #4]
 800a4a4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	603b      	str	r3, [r7, #0]
 800a4aa:	4b3d      	ldr	r3, [pc, #244]	@ (800a5a0 <_Z18SystemClock_Configv+0x18c>)
 800a4ac:	699b      	ldr	r3, [r3, #24]
 800a4ae:	4a3c      	ldr	r2, [pc, #240]	@ (800a5a0 <_Z18SystemClock_Configv+0x18c>)
 800a4b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a4b4:	6193      	str	r3, [r2, #24]
 800a4b6:	4b3a      	ldr	r3, [pc, #232]	@ (800a5a0 <_Z18SystemClock_Configv+0x18c>)
 800a4b8:	699b      	ldr	r3, [r3, #24]
 800a4ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a4be:	603b      	str	r3, [r7, #0]
 800a4c0:	4b36      	ldr	r3, [pc, #216]	@ (800a59c <_Z18SystemClock_Configv+0x188>)
 800a4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c4:	4a35      	ldr	r2, [pc, #212]	@ (800a59c <_Z18SystemClock_Configv+0x188>)
 800a4c6:	f043 0301 	orr.w	r3, r3, #1
 800a4ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4cc:	4b33      	ldr	r3, [pc, #204]	@ (800a59c <_Z18SystemClock_Configv+0x188>)
 800a4ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d0:	f003 0301 	and.w	r3, r3, #1
 800a4d4:	603b      	str	r3, [r7, #0]
 800a4d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a4d8:	bf00      	nop
 800a4da:	4b31      	ldr	r3, [pc, #196]	@ (800a5a0 <_Z18SystemClock_Configv+0x18c>)
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a4e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4e6:	bf14      	ite	ne
 800a4e8:	2301      	movne	r3, #1
 800a4ea:	2300      	moveq	r3, #0
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d1f3      	bne.n	800a4da <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800a4f2:	4b2c      	ldr	r3, [pc, #176]	@ (800a5a4 <_Z18SystemClock_Configv+0x190>)
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f6:	f023 0303 	bic.w	r3, r3, #3
 800a4fa:	4a2a      	ldr	r2, [pc, #168]	@ (800a5a4 <_Z18SystemClock_Configv+0x190>)
 800a4fc:	f043 0302 	orr.w	r3, r3, #2
 800a500:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a502:	2301      	movs	r3, #1
 800a504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a506:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a50a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a50c:	2302      	movs	r3, #2
 800a50e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a510:	2302      	movs	r3, #2
 800a512:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 800a514:	2305      	movs	r3, #5
 800a516:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800a518:	23c0      	movs	r3, #192	@ 0xc0
 800a51a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800a51c:	2302      	movs	r3, #2
 800a51e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a520:	2304      	movs	r3, #4
 800a522:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a524:	2302      	movs	r3, #2
 800a526:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800a528:	2308      	movs	r3, #8
 800a52a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a52c:	2300      	movs	r3, #0
 800a52e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a530:	2300      	movs	r3, #0
 800a532:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a534:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a538:	4618      	mov	r0, r3
 800a53a:	f014 fa45 	bl	801e9c8 <HAL_RCC_OscConfig>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	bf14      	ite	ne
 800a544:	2301      	movne	r3, #1
 800a546:	2300      	moveq	r3, #0
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d001      	beq.n	800a552 <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 800a54e:	f000 f993 	bl	800a878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a552:	233f      	movs	r3, #63	@ 0x3f
 800a554:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a556:	2303      	movs	r3, #3
 800a558:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800a55a:	2300      	movs	r3, #0
 800a55c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800a55e:	2308      	movs	r3, #8
 800a560:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800a562:	2340      	movs	r3, #64	@ 0x40
 800a564:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800a566:	2340      	movs	r3, #64	@ 0x40
 800a568:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800a56a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a56e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800a570:	2340      	movs	r3, #64	@ 0x40
 800a572:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a574:	f107 030c 	add.w	r3, r7, #12
 800a578:	2104      	movs	r1, #4
 800a57a:	4618      	mov	r0, r3
 800a57c:	f014 fe7e 	bl	801f27c <HAL_RCC_ClockConfig>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	bf14      	ite	ne
 800a586:	2301      	movne	r3, #1
 800a588:	2300      	moveq	r3, #0
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 800a590:	f000 f972 	bl	800a878 <Error_Handler>
  }
}
 800a594:	bf00      	nop
 800a596:	3778      	adds	r7, #120	@ 0x78
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	58000400 	.word	0x58000400
 800a5a0:	58024800 	.word	0x58024800
 800a5a4:	58024400 	.word	0x58024400

0800a5a8 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b0b0      	sub	sp, #192	@ 0xc0
 800a5ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a5ae:	463b      	mov	r3, r7
 800a5b0:	22c0      	movs	r2, #192	@ 0xc0
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f01f f81f 	bl	80295f8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 800a5ba:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 800a5be:	f04f 0300 	mov.w	r3, #0
 800a5c2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800a5ca:	230c      	movs	r3, #12
 800a5cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 800a5d2:	230a      	movs	r3, #10
 800a5d4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800a5da:	23c0      	movs	r3, #192	@ 0xc0
 800a5dc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800a5de:	2320      	movs	r3, #32
 800a5e0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800a5e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a5ea:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800a5ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5f0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a5f2:	463b      	mov	r3, r7
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f015 f9cd 	bl	801f994 <HAL_RCCEx_PeriphCLKConfig>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	bf14      	ite	ne
 800a600:	2301      	movne	r3, #1
 800a602:	2300      	moveq	r3, #0
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800a60a:	f000 f935 	bl	800a878 <Error_Handler>
  }
}
 800a60e:	bf00      	nop
 800a610:	37c0      	adds	r7, #192	@ 0xc0
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
	...

0800a618 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800a61c:	4b11      	ldr	r3, [pc, #68]	@ (800a664 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a61e:	4a12      	ldr	r2, [pc, #72]	@ (800a668 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 800a620:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800a622:	4b10      	ldr	r3, [pc, #64]	@ (800a664 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a624:	2200      	movs	r2, #0
 800a626:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 800a628:	4b0e      	ldr	r3, [pc, #56]	@ (800a664 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a62a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a62e:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800a630:	4b0c      	ldr	r3, [pc, #48]	@ (800a664 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a632:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a636:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a638:	4b0a      	ldr	r3, [pc, #40]	@ (800a664 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 800a63e:	4b09      	ldr	r3, [pc, #36]	@ (800a664 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a640:	2208      	movs	r2, #8
 800a642:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800a644:	4807      	ldr	r0, [pc, #28]	@ (800a664 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a646:	f017 fea3 	bl	8022390 <HAL_SD_Init>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	bf14      	ite	ne
 800a650:	2301      	movne	r3, #1
 800a652:	2300      	moveq	r3, #0
 800a654:	b2db      	uxtb	r3, r3
 800a656:	2b00      	cmp	r3, #0
 800a658:	d002      	beq.n	800a660 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 800a65a:	4804      	ldr	r0, [pc, #16]	@ (800a66c <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 800a65c:	f01e fec2 	bl	80293e4 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 800a660:	bf00      	nop
 800a662:	bd80      	pop	{r7, pc}
 800a664:	240002fc 	.word	0x240002fc
 800a668:	52007000 	.word	0x52007000
 800a66c:	0802a51c 	.word	0x0802a51c

0800a670 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a674:	4b2c      	ldr	r3, [pc, #176]	@ (800a728 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a676:	4a2d      	ldr	r2, [pc, #180]	@ (800a72c <_ZL19MX_USART1_UART_Initv+0xbc>)
 800a678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = Config::pcBaud;
 800a67a:	4b2b      	ldr	r3, [pc, #172]	@ (800a728 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a67c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a682:	4b29      	ldr	r3, [pc, #164]	@ (800a728 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a684:	2200      	movs	r2, #0
 800a686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a688:	4b27      	ldr	r3, [pc, #156]	@ (800a728 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a68a:	2200      	movs	r2, #0
 800a68c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a68e:	4b26      	ldr	r3, [pc, #152]	@ (800a728 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a690:	2200      	movs	r2, #0
 800a692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a694:	4b24      	ldr	r3, [pc, #144]	@ (800a728 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a696:	220c      	movs	r2, #12
 800a698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a69a:	4b23      	ldr	r3, [pc, #140]	@ (800a728 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a6a0:	4b21      	ldr	r3, [pc, #132]	@ (800a728 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a6a6:	4b20      	ldr	r3, [pc, #128]	@ (800a728 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a6ac:	4b1e      	ldr	r3, [pc, #120]	@ (800a728 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a6b2:	4b1d      	ldr	r3, [pc, #116]	@ (800a728 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a6b8:	481b      	ldr	r0, [pc, #108]	@ (800a728 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a6ba:	f019 fc16 	bl	8023eea <HAL_UART_Init>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	bf14      	ite	ne
 800a6c4:	2301      	movne	r3, #1
 800a6c6:	2300      	moveq	r3, #0
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 800a6ce:	f000 f8d3 	bl	800a878 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	4814      	ldr	r0, [pc, #80]	@ (800a728 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a6d6:	f01a fca8 	bl	802502a <HAL_UARTEx_SetTxFifoThreshold>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	bf14      	ite	ne
 800a6e0:	2301      	movne	r3, #1
 800a6e2:	2300      	moveq	r3, #0
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800a6ea:	f000 f8c5 	bl	800a878 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	480d      	ldr	r0, [pc, #52]	@ (800a728 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a6f2:	f01a fcd8 	bl	80250a6 <HAL_UARTEx_SetRxFifoThreshold>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	bf14      	ite	ne
 800a6fc:	2301      	movne	r3, #1
 800a6fe:	2300      	moveq	r3, #0
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b00      	cmp	r3, #0
 800a704:	d001      	beq.n	800a70a <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800a706:	f000 f8b7 	bl	800a878 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800a70a:	4807      	ldr	r0, [pc, #28]	@ (800a728 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a70c:	f01a fc54 	bl	8024fb8 <HAL_UARTEx_DisableFifoMode>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	bf14      	ite	ne
 800a716:	2301      	movne	r3, #1
 800a718:	2300      	moveq	r3, #0
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d001      	beq.n	800a724 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 800a720:	f000 f8aa 	bl	800a878 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a724:	bf00      	nop
 800a726:	bd80      	pop	{r7, pc}
 800a728:	24000378 	.word	0x24000378
 800a72c:	40011000 	.word	0x40011000

0800a730 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b08a      	sub	sp, #40	@ 0x28
 800a734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a736:	f107 0314 	add.w	r3, r7, #20
 800a73a:	2200      	movs	r2, #0
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	605a      	str	r2, [r3, #4]
 800a740:	609a      	str	r2, [r3, #8]
 800a742:	60da      	str	r2, [r3, #12]
 800a744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a746:	4b26      	ldr	r3, [pc, #152]	@ (800a7e0 <_ZL12MX_GPIO_Initv+0xb0>)
 800a748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a74c:	4a24      	ldr	r2, [pc, #144]	@ (800a7e0 <_ZL12MX_GPIO_Initv+0xb0>)
 800a74e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a752:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a756:	4b22      	ldr	r3, [pc, #136]	@ (800a7e0 <_ZL12MX_GPIO_Initv+0xb0>)
 800a758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a75c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a760:	613b      	str	r3, [r7, #16]
 800a762:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a764:	4b1e      	ldr	r3, [pc, #120]	@ (800a7e0 <_ZL12MX_GPIO_Initv+0xb0>)
 800a766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a76a:	4a1d      	ldr	r2, [pc, #116]	@ (800a7e0 <_ZL12MX_GPIO_Initv+0xb0>)
 800a76c:	f043 0304 	orr.w	r3, r3, #4
 800a770:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a774:	4b1a      	ldr	r3, [pc, #104]	@ (800a7e0 <_ZL12MX_GPIO_Initv+0xb0>)
 800a776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a77a:	f003 0304 	and.w	r3, r3, #4
 800a77e:	60fb      	str	r3, [r7, #12]
 800a780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a782:	4b17      	ldr	r3, [pc, #92]	@ (800a7e0 <_ZL12MX_GPIO_Initv+0xb0>)
 800a784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a788:	4a15      	ldr	r2, [pc, #84]	@ (800a7e0 <_ZL12MX_GPIO_Initv+0xb0>)
 800a78a:	f043 0301 	orr.w	r3, r3, #1
 800a78e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a792:	4b13      	ldr	r3, [pc, #76]	@ (800a7e0 <_ZL12MX_GPIO_Initv+0xb0>)
 800a794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	60bb      	str	r3, [r7, #8]
 800a79e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a7a0:	4b0f      	ldr	r3, [pc, #60]	@ (800a7e0 <_ZL12MX_GPIO_Initv+0xb0>)
 800a7a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a7a6:	4a0e      	ldr	r2, [pc, #56]	@ (800a7e0 <_ZL12MX_GPIO_Initv+0xb0>)
 800a7a8:	f043 0308 	orr.w	r3, r3, #8
 800a7ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a7b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a7e0 <_ZL12MX_GPIO_Initv+0xb0>)
 800a7b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a7b6:	f003 0308 	and.w	r3, r3, #8
 800a7ba:	607b      	str	r3, [r7, #4]
 800a7bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a7be:	2310      	movs	r3, #16
 800a7c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a7ca:	f107 0314 	add.w	r3, r7, #20
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	4804      	ldr	r0, [pc, #16]	@ (800a7e4 <_ZL12MX_GPIO_Initv+0xb4>)
 800a7d2:	f013 fedd 	bl	801e590 <HAL_GPIO_Init>

}
 800a7d6:	bf00      	nop
 800a7d8:	3728      	adds	r7, #40	@ 0x28
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	58024400 	.word	0x58024400
 800a7e4:	58020800 	.word	0x58020800

0800a7e8 <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800a7ee:	463b      	mov	r3, r7
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	605a      	str	r2, [r3, #4]
 800a7f6:	609a      	str	r2, [r3, #8]
 800a7f8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800a7fa:	f011 fb11 	bl	801be20 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a7fe:	2301      	movs	r3, #1
 800a800:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800a802:	2300      	movs	r3, #0
 800a804:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800a806:	2300      	movs	r3, #0
 800a808:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800a80a:	231f      	movs	r3, #31
 800a80c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800a80e:	2387      	movs	r3, #135	@ 0x87
 800a810:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800a812:	2300      	movs	r3, #0
 800a814:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800a816:	2300      	movs	r3, #0
 800a818:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800a81a:	2301      	movs	r3, #1
 800a81c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800a81e:	2301      	movs	r3, #1
 800a820:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800a822:	2300      	movs	r3, #0
 800a824:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800a826:	2300      	movs	r3, #0
 800a828:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a82a:	463b      	mov	r3, r7
 800a82c:	4618      	mov	r0, r3
 800a82e:	f011 fb2f 	bl	801be90 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for DMA buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a832:	2301      	movs	r3, #1
 800a834:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800a836:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800a83a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800a83c:	2307      	movs	r3, #7
 800a83e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800a840:	2303      	movs	r3, #3
 800a842:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800a844:	2301      	movs	r3, #1
 800a846:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800a848:	2300      	movs	r3, #0
 800a84a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800a84c:	2300      	movs	r3, #0
 800a84e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800a850:	2301      	movs	r3, #1
 800a852:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800a854:	2300      	movs	r3, #0
 800a856:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800a858:	2300      	movs	r3, #0
 800a85a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800a85c:	2300      	movs	r3, #0
 800a85e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a860:	463b      	mov	r3, r7
 800a862:	4618      	mov	r0, r3
 800a864:	f011 fb14 	bl	801be90 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800a868:	2004      	movs	r0, #4
 800a86a:	f011 faf1 	bl	801be50 <HAL_MPU_Enable>

}
 800a86e:	bf00      	nop
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
	...

0800a878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 800a87c:	4803      	ldr	r0, [pc, #12]	@ (800a88c <Error_Handler+0x14>)
 800a87e:	f01e fd41 	bl	8029304 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 800a882:	b672      	cpsid	i
}
 800a884:	bf00      	nop

  __disable_irq();
  while (1)
 800a886:	bf00      	nop
 800a888:	e7fd      	b.n	800a886 <Error_Handler+0xe>
 800a88a:	bf00      	nop
 800a88c:	0802a52c 	.word	0x0802a52c

0800a890 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	4618      	mov	r0, r3
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	1c5a      	adds	r2, r3, #1
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	605a      	str	r2, [r3, #4]
 800a8ba:	bf00      	nop
 800a8bc:	370c      	adds	r7, #12
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b082      	sub	sp, #8
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	1e5a      	subs	r2, r3, #1
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	605a      	str	r2, [r3, #4]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	bf0c      	ite	eq
 800a8e0:	2301      	moveq	r3, #1
 800a8e2:	2300      	movne	r3, #0
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d019      	beq.n	800a91e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	3308      	adds	r3, #8
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	1e5a      	subs	r2, r3, #1
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	609a      	str	r2, [r3, #8]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	2b00      	cmp	r3, #0
 800a906:	bf0c      	ite	eq
 800a908:	2301      	moveq	r3, #1
 800a90a:	2300      	movne	r3, #0
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d005      	beq.n	800a91e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	330c      	adds	r3, #12
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	4798      	blx	r3
        }
    }
 800a91e:	bf00      	nop
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
	...

0800a928 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>:
  private:
    template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
      friend class _Sp_counted_ptr_inplace;

    static const type_info&
    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)
 800a928:	b480      	push	{r7}
 800a92a:	af00      	add	r7, sp, #0
    {
      alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };
      return reinterpret_cast<const type_info&>(__tag);
 800a92c:	4b02      	ldr	r3, [pc, #8]	@ (800a938 <_ZNSt19_Sp_make_shared_tag5_S_tiEv+0x10>)
    }
 800a92e:	4618      	mov	r0, r3
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr
 800a938:	0802b354 	.word	0x0802b354

0800a93c <_ZN8txData_tC1Ev>:
    int32_t jointFeedback[Config::joints];	  // Base thread feedback ??
    float processVariable[Config::variables];		     // Servo thread feedback ??
	uint16_t inputs;
  };

  txData_t() {
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
      header = 0;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	601a      	str	r2, [r3, #0]
      inputs = 0;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 800a950:	2300      	movs	r3, #0
 800a952:	73fb      	strb	r3, [r7, #15]
 800a954:	e008      	b.n	800a968 <_ZN8txData_tC1Ev+0x2c>
         jointFeedback[i] = 0;
 800a956:	7bfb      	ldrb	r3, [r7, #15]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4413      	add	r3, r2
 800a95e:	2200      	movs	r2, #0
 800a960:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 800a962:	7bfb      	ldrb	r3, [r7, #15]
 800a964:	3301      	adds	r3, #1
 800a966:	73fb      	strb	r3, [r7, #15]
 800a968:	7bfb      	ldrb	r3, [r7, #15]
 800a96a:	2b07      	cmp	r3, #7
 800a96c:	d9f3      	bls.n	800a956 <_ZN8txData_tC1Ev+0x1a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 800a96e:	2300      	movs	r3, #0
 800a970:	73bb      	strb	r3, [r7, #14]
 800a972:	e00b      	b.n	800a98c <_ZN8txData_tC1Ev+0x50>
         processVariable[i] = 0.0;
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	3308      	adds	r3, #8
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	4413      	add	r3, r2
 800a97e:	3304      	adds	r3, #4
 800a980:	f04f 0200 	mov.w	r2, #0
 800a984:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 800a986:	7bbb      	ldrb	r3, [r7, #14]
 800a988:	3301      	adds	r3, #1
 800a98a:	73bb      	strb	r3, [r7, #14]
 800a98c:	7bbb      	ldrb	r3, [r7, #14]
 800a98e:	2b05      	cmp	r3, #5
 800a990:	d9f0      	bls.n	800a974 <_ZN8txData_tC1Ev+0x38>
     }
  }
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4618      	mov	r0, r3
 800a996:	3714      	adds	r7, #20
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d201      	bcs.n	800a9ba <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	e000      	b.n	800a9bc <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800a9ba:	687b      	ldr	r3, [r7, #4]
    }
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>:
  bool isStatic() const {
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
    return static_;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	7a1b      	ldrb	r3, [r3, #8]
  }
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>:
  ~StringPool() {
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  }
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>:

  VariantData* getOrAddElement(size_t index, ResourceManager* resources);

  VariantData* getElement(size_t index, const ResourceManager* resources) const;

  static VariantData* getElement(const ArrayData* array, size_t index,
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b084      	sub	sp, #16
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	60f8      	str	r0, [r7, #12]
 800a9fe:	60b9      	str	r1, [r7, #8]
 800aa00:	607a      	str	r2, [r7, #4]
                                 const ResourceManager* resources) {
    if (!array)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d101      	bne.n	800aa0c <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x16>
      return nullptr;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	e006      	b.n	800aa1a <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x24>
    return array->getElement(index, resources);
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	68b9      	ldr	r1, [r7, #8]
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f000 f9ab 	bl	800ad6c <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>
 800aa16:	4603      	mov	r3, r0
 800aa18:	bf00      	nop
  }
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
  const ArrayData* asArray() const {
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b082      	sub	sp, #8
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asArray();
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f7fa fe03 	bl	8005636 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800aa30:	4603      	mov	r3, r0
  }
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>:
  VariantData* getElement(size_t index,
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	60f8      	str	r0, [r7, #12]
 800aa42:	60b9      	str	r1, [r7, #8]
 800aa44:	607a      	str	r2, [r7, #4]
    return ArrayData::getElement(asArray(), index, resources);
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f7ff ffeb 	bl	800aa22 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	68b9      	ldr	r1, [r7, #8]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7ff ffcf 	bl	800a9f6 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 800aa58:	4603      	mov	r3, r0
  }
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>:
  static VariantData* getElement(const VariantData* var, size_t index,
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	60f8      	str	r0, [r7, #12]
 800aa6a:	60b9      	str	r1, [r7, #8]
 800aa6c:	607a      	str	r2, [r7, #4]
    return var != 0 ? var->getElement(index, resources) : 0;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d006      	beq.n	800aa82 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x20>
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	68b9      	ldr	r1, [r7, #8]
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f7ff ffde 	bl	800aa3a <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	e000      	b.n	800aa84 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x22>
 800aa82:	2300      	movs	r3, #0
  }
 800aa84:	4618      	mov	r0, r3
 800aa86:	3710      	adds	r7, #16
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>:
  VariantData* getOrAddElement(size_t index, ResourceManager* resources) {
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b086      	sub	sp, #24
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
    auto array = isNull() ? &toArray() : asArray();
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f000 f81d 	bl	800aad8 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d004      	beq.n	800aaae <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x22>
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f7fa fecb 	bl	8005840 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	e003      	b.n	800aab6 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x2a>
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f7fa fdc1 	bl	8005636 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800aab4:	4603      	mov	r3, r0
 800aab6:	617b      	str	r3, [r7, #20]
    if (!array)
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x36>
      return nullptr;
 800aabe:	2300      	movs	r3, #0
 800aac0:	e006      	b.n	800aad0 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x44>
    return array->getOrAddElement(index, resources);
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	68b9      	ldr	r1, [r7, #8]
 800aac6:	6978      	ldr	r0, [r7, #20]
 800aac8:	f000 f8ff 	bl	800acca <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>
 800aacc:	4603      	mov	r3, r0
 800aace:	bf00      	nop
  }
 800aad0:	4618      	mov	r0, r3
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>:
  bool isNull() const {
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Null;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	791b      	ldrb	r3, [r3, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	bf0c      	ite	eq
 800aae8:	2301      	moveq	r3, #1
 800aaea:	2300      	movne	r3, #0
 800aaec:	b2db      	uxtb	r3, r3
  }
 800aaee:	4618      	mov	r0, r3
 800aaf0:	370c      	adds	r7, #12
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr

0800aafa <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>:
  bool isString() const {
 800aafa:	b480      	push	{r7}
 800aafc:	b083      	sub	sp, #12
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::LinkedString ||
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	791b      	ldrb	r3, [r3, #4]
 800ab06:	2b04      	cmp	r3, #4
 800ab08:	d003      	beq.n	800ab12 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x18>
           type_ == VariantType::OwnedString;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	791b      	ldrb	r3, [r3, #4]
    return type_ == VariantType::LinkedString ||
 800ab0e:	2b05      	cmp	r3, #5
 800ab10:	d101      	bne.n	800ab16 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1c>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e000      	b.n	800ab18 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1e>
 800ab16:	2300      	movs	r3, #0
  }
 800ab18:	4618      	mov	r0, r3
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>:
  void setLinkedString(const char* s) {
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
    type_ = VariantType::LinkedString;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2204      	movs	r2, #4
 800ab32:	711a      	strb	r2, [r3, #4]
    content_.asLinkedString = s;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	601a      	str	r2, [r3, #0]
  }
 800ab3a:	bf00      	nop
 800ab3c:	370c      	adds	r7, #12
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>:
  ~ResourceManager() {
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b082      	sub	sp, #8
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
    stringPool_.clear(allocator_);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f103 0208 	add.w	r2, r3, #8
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4619      	mov	r1, r3
 800ab5a:	4610      	mov	r0, r2
 800ab5c:	f7fa fbfa 	bl	8005354 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
    variantPools_.clear(allocator_);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f103 020c 	add.w	r2, r3, #12
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	f7fc fc5b 	bl	8007428 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
  }
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	330c      	adds	r3, #12
 800ab76:	4618      	mov	r0, r3
 800ab78:	f001 f88f 	bl	800bc9a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	3308      	adds	r3, #8
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7ff ff2d 	bl	800a9e0 <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>:
  static JsonVariant fromJson(JsonVariant src) {
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	1d3b      	adds	r3, r7, #4
 800ab9a:	e883 0006 	stmia.w	r3, {r1, r2}
    return src;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	461a      	mov	r2, r3
 800aba2:	1d3b      	adds	r3, r7, #4
 800aba4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aba8:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	3714      	adds	r7, #20
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>:
    return JsonVariantConst(collectionToVariant(data_), resources_);
  }

  // Returns true if the reference is unbound.
  // https://arduinojson.org/v7/api/jsonarray/isnull/
  bool isNull() const {
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
    return data_ == 0;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	bf0c      	ite	eq
 800abc8:	2301      	moveq	r3, #1
 800abca:	2300      	movne	r3, #0
 800abcc:	b2db      	uxtb	r3, r3
  }
 800abce:	4618      	mov	r0, r3
 800abd0:	370c      	adds	r7, #12
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>:
    return detail::VariantData::nesting(collectionToVariant(data_), resources_);
  }

  // Returns the number of elements in the array.
  // https://arduinojson.org/v7/api/jsonarray/size/
  size_t size() const {
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
    return data_ ? data_->size(resources_) : 0;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00a      	beq.n	800ac00 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x26>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	461a      	mov	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	4619      	mov	r1, r3
 800abf6:	4610      	mov	r0, r2
 800abf8:	f000 f8cf 	bl	800ad9a <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>
 800abfc:	4603      	mov	r3, r0
 800abfe:	e000      	b.n	800ac02 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x28>
 800ac00:	2300      	movs	r3, #0
  }
 800ac02:	4618      	mov	r0, r3
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 800ac0a:	b480      	push	{r7}
 800ac0c:	b083      	sub	sp, #12
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
    return resources_;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	685b      	ldr	r3, [r3, #4]
  }
 800ac16:	4618      	mov	r0, r3
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr

0800ac22 <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>:

  detail::VariantData* getData() const {
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b082      	sub	sp, #8
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fa fc97 	bl	8005562 <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 800ac34:	4603      	mov	r3, r0
  }
 800ac36:	4618      	mov	r0, r3
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>:

  detail::VariantData* getOrCreateData() const {
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b082      	sub	sp, #8
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7fa fc89 	bl	8005562 <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 800ac50:	4603      	mov	r3, r0
  }
 800ac52:	4618      	mov	r0, r3
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>:

ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// A JSON document.
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b082      	sub	sp, #8
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7ff ff6e 	bl	800ab46 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3708      	adds	r7, #8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline ArrayData::iterator ArrayData::at(
    size_t index, const ResourceManager* resources) const {
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	607a      	str	r2, [r7, #4]
 800ac80:	603b      	str	r3, [r7, #0]
  auto it = createIterator(resources);
 800ac82:	68b9      	ldr	r1, [r7, #8]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7fb f903 	bl	8005e94 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index) {
 800ac8e:	e006      	b.n	800ac9e <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x2a>
    it.next(resources);
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f7fb f8db 	bl	8005e4e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    --index;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	607b      	str	r3, [r7, #4]
  while (!it.done() && index) {
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f7fa fc16 	bl	80054d0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800aca4:	4603      	mov	r3, r0
 800aca6:	f083 0301 	eor.w	r3, r3, #1
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	2b00      	cmp	r3, #0
 800acae:	d004      	beq.n	800acba <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d001      	beq.n	800acba <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 800acb6:	2301      	movs	r3, #1
 800acb8:	e000      	b.n	800acbc <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x48>
 800acba:	2300      	movs	r3, #0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1e7      	bne.n	800ac90 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x1c>
  }
  return it;
 800acc0:	bf00      	nop
}
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>:
  CollectionData::appendOne(slot, resources);
  return slot.ptr();
}

inline VariantData* ArrayData::getOrAddElement(size_t index,
                                               ResourceManager* resources) {
 800acca:	b580      	push	{r7, lr}
 800accc:	b088      	sub	sp, #32
 800acce:	af00      	add	r7, sp, #0
 800acd0:	60f8      	str	r0, [r7, #12]
 800acd2:	60b9      	str	r1, [r7, #8]
 800acd4:	607a      	str	r2, [r7, #4]
  auto it = createIterator(resources);
 800acd6:	68f9      	ldr	r1, [r7, #12]
 800acd8:	f107 0314 	add.w	r3, r7, #20
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	4618      	mov	r0, r3
 800ace0:	f7fb f8d8 	bl	8005e94 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index > 0) {
 800ace4:	e008      	b.n	800acf8 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x2e>
    it.next(resources);
 800ace6:	f107 0314 	add.w	r3, r7, #20
 800acea:	6879      	ldr	r1, [r7, #4]
 800acec:	4618      	mov	r0, r3
 800acee:	f7fb f8ae 	bl	8005e4e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    index--;
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	3b01      	subs	r3, #1
 800acf6:	60bb      	str	r3, [r7, #8]
  while (!it.done() && index > 0) {
 800acf8:	f107 0314 	add.w	r3, r7, #20
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fa fbe7 	bl	80054d0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800ad02:	4603      	mov	r3, r0
 800ad04:	f083 0301 	eor.w	r3, r3, #1
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d004      	beq.n	800ad18 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d001      	beq.n	800ad18 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 800ad14:	2301      	movs	r3, #1
 800ad16:	e000      	b.n	800ad1a <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x50>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1e3      	bne.n	800ace6 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x1c>
  }
  if (it.done())
 800ad1e:	f107 0314 	add.w	r3, r7, #20
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fa fbd4 	bl	80054d0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d002      	beq.n	800ad34 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x6a>
    index++;
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	3301      	adds	r3, #1
 800ad32:	60bb      	str	r3, [r7, #8]
  VariantData* element = it.data();
 800ad34:	f107 0314 	add.w	r3, r7, #20
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7fa fbfa 	bl	8005532 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800ad3e:	61f8      	str	r0, [r7, #28]
  while (index > 0) {
 800ad40:	e00c      	b.n	800ad5c <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x92>
    element = addElement(resources);
 800ad42:	6879      	ldr	r1, [r7, #4]
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f7fb f836 	bl	8005db6 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 800ad4a:	61f8      	str	r0, [r7, #28]
    if (!element)
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x8c>
      return nullptr;
 800ad52:	2300      	movs	r3, #0
 800ad54:	e006      	b.n	800ad64 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x9a>
    index--;
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	60bb      	str	r3, [r7, #8]
  while (index > 0) {
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1ef      	bne.n	800ad42 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x78>
  }
  return element;
 800ad62:	69fb      	ldr	r3, [r7, #28]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3720      	adds	r7, #32
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>:

inline VariantData* ArrayData::getElement(
    size_t index, const ResourceManager* resources) const {
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
  return at(index, resources).data();
 800ad78:	f107 0010 	add.w	r0, r7, #16
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	68f9      	ldr	r1, [r7, #12]
 800ad82:	f7ff ff77 	bl	800ac74 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>
 800ad86:	f107 0310 	add.w	r3, r7, #16
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fa fbd1 	bl	8005532 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800ad90:	4603      	mov	r3, r0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3718      	adds	r7, #24
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>:
      maxChildNesting = childNesting;
  }
  return maxChildNesting + 1;
}

inline size_t CollectionData::size(const ResourceManager* resources) const {
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b086      	sub	sp, #24
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	6039      	str	r1, [r7, #0]
  size_t count = 0;
 800ada4:	2300      	movs	r3, #0
 800ada6:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 800ada8:	f107 030c 	add.w	r3, r7, #12
 800adac:	683a      	ldr	r2, [r7, #0]
 800adae:	6879      	ldr	r1, [r7, #4]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f7fb f86f 	bl	8005e94 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 800adb6:	e008      	b.n	800adca <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x30>
    count++;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	3301      	adds	r3, #1
 800adbc:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 800adbe:	f107 030c 	add.w	r3, r7, #12
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7fb f842 	bl	8005e4e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 800adca:	f107 030c 	add.w	r3, r7, #12
 800adce:	4618      	mov	r0, r3
 800add0:	f7fa fb7e 	bl	80054d0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800add4:	4603      	mov	r3, r0
 800add6:	f083 0301 	eor.w	r3, r3, #1
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b00      	cmp	r3, #0
 800adde:	d1eb      	bne.n	800adb8 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x1e>
  return count;
 800ade0:	697b      	ldr	r3, [r7, #20]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3718      	adds	r7, #24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>:
  static const char* fromJson(JsonVariantConst src) {
    auto data = getData(src);
    return data ? data->asString().c_str() : 0;
  }

  static bool checkJson(JsonVariantConst src) {
 800adea:	b580      	push	{r7, lr}
 800adec:	b084      	sub	sp, #16
 800adee:	af00      	add	r7, sp, #0
 800adf0:	463b      	mov	r3, r7
 800adf2:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 800adf6:	463b      	mov	r3, r7
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7fc fb91 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800adfe:	60f8      	str	r0, [r7, #12]
    return data && data->isString();
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d007      	beq.n	800ae16 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f7ff fe77 	bl	800aafa <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 800ae12:	2301      	movs	r3, #1
 800ae14:	e000      	b.n	800ae18 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 800ae16:	2300      	movs	r3, #0
  }
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	683a      	ldr	r2, [r7, #0]
 800ae2e:	4611      	mov	r1, r2
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 ff48 	bl	800bcc6 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
 800ae4a:	683a      	ldr	r2, [r7, #0]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4611      	mov	r1, r2
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7ff ffe5 	bl	800ae20 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3708      	adds	r7, #8
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>:
	virtual ~CommsHandler();

	void update(void) override;
	void tasks();

    void setInterface(std::unique_ptr<CommsInterface> commsInterface) {
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
        interface = std::move(commsInterface);
 800ae6a:	6838      	ldr	r0, [r7, #0]
 800ae6c:	f000 ff20 	bl	800bcb0 <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800ae70:	4602      	mov	r2, r0
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	3318      	adds	r3, #24
 800ae76:	4611      	mov	r1, r2
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7ff ffe1 	bl	800ae40 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
    }
 800ae7e:	bf00      	nop
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <_ZNK12CommsHandler9getStatusEv>:
    void setNoDataCount(int count) { noDataCount = count; }
    void setStatus(bool value) { status = value; }

    bool getData() const { return data; }
    int getNoDataCount() const { return noDataCount; }
    bool getStatus() const { return status; }
 800ae86:	b480      	push	{r7}
 800ae88:	b083      	sub	sp, #12
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	7f9b      	ldrb	r3, [r3, #30]
 800ae92:	4618      	mov	r0, r3
 800ae94:	370c      	adds	r7, #12
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr

0800ae9e <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	af00      	add	r7, sp, #0
		// Chip select pin is PA_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 800aea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeaa:	f003 0310 	and.w	r3, r3, #16
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	bf14      	ite	ne
 800aeb2:	2301      	movne	r3, #1
 800aeb4:	2300      	moveq	r3, #0
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d006      	beq.n	800aeca <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 800aebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aec0:	2210      	movs	r2, #16
 800aec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 800aec6:	f7fa f909 	bl	80050dc <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 800aeca:	bf00      	nop
 800aecc:	bd80      	pop	{r7, pc}

0800aece <DMA1_Stream0_IRQHandler>:

	void DMA1_Stream0_IRQHandler()
	{
 800aece:	b580      	push	{r7, lr}
 800aed0:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream0_Wrapper();
 800aed2:	f7fa f911 	bl	80050f8 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>
	}
 800aed6:	bf00      	nop
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <DMA1_Stream1_IRQHandler>:

	void DMA1_Stream1_IRQHandler()
	{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream1_Wrapper();
 800aede:	f7fa f919 	bl	8005114 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>
	}
 800aee2:	bf00      	nop
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 800aeea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	f003 0301 	and.w	r3, r3, #1
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	bf14      	ite	ne
 800aef8:	2301      	movne	r3, #1
 800aefa:	2300      	moveq	r3, #0
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d009      	beq.n	800af16 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 800af02:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800af0c:	f023 0301 	bic.w	r3, r3, #1
 800af10:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 800af12:	f7fa f90d 	bl	8005130 <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 800af16:	bf00      	nop
 800af18:	bd80      	pop	{r7, pc}
	...

0800af1c <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 800af20:	4b0a      	ldr	r3, [pc, #40]	@ (800af4c <TIM3_IRQHandler+0x30>)
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	f003 0301 	and.w	r3, r3, #1
 800af28:	2b00      	cmp	r3, #0
 800af2a:	bf14      	ite	ne
 800af2c:	2301      	movne	r3, #1
 800af2e:	2300      	moveq	r3, #0
 800af30:	b2db      	uxtb	r3, r3
 800af32:	2b00      	cmp	r3, #0
 800af34:	d007      	beq.n	800af46 <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 800af36:	4b05      	ldr	r3, [pc, #20]	@ (800af4c <TIM3_IRQHandler+0x30>)
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	4a04      	ldr	r2, [pc, #16]	@ (800af4c <TIM3_IRQHandler+0x30>)
 800af3c:	f023 0301 	bic.w	r3, r3, #1
 800af40:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 800af42:	f7fa f903 	bl	800514c <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 800af46:	bf00      	nop
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	40000400 	.word	0x40000400

0800af50 <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 800af50:	b580      	push	{r7, lr}
 800af52:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 800af54:	4b0a      	ldr	r3, [pc, #40]	@ (800af80 <TIM4_IRQHandler+0x30>)
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	f003 0301 	and.w	r3, r3, #1
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	bf14      	ite	ne
 800af60:	2301      	movne	r3, #1
 800af62:	2300      	moveq	r3, #0
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b00      	cmp	r3, #0
 800af68:	d007      	beq.n	800af7a <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 800af6a:	4b05      	ldr	r3, [pc, #20]	@ (800af80 <TIM4_IRQHandler+0x30>)
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	4a04      	ldr	r2, [pc, #16]	@ (800af80 <TIM4_IRQHandler+0x30>)
 800af70:	f023 0301 	bic.w	r3, r3, #1
 800af74:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 800af76:	f7fa f8f7 	bl	8005168 <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 800af7a:	bf00      	nop
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	40000800 	.word	0x40000800

0800af84 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3304      	adds	r3, #4
 800af90:	4618      	mov	r0, r3
 800af92:	f000 feb4 	bl	800bcfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4618      	mov	r0, r3
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <_ZNSt10shared_ptrI12CommsHandlerED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4618      	mov	r0, r3
 800afac:	f7ff ffea 	bl	800af84 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4618      	mov	r0, r3
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800afba:	b580      	push	{r7, lr}
 800afbc:	b082      	sub	sp, #8
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 ff6f 	bl	800bea6 <_ZNSaISt10shared_ptrI6ModuleEED1Ev>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4618      	mov	r0, r3
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b082      	sub	sp, #8
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 ff52 	bl	800be86 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4618      	mov	r0, r3
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff ffeb 	bl	800afd2 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4618      	mov	r0, r3
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 800b006:	b580      	push	{r7, lr}
 800b008:	b082      	sub	sp, #8
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	6039      	str	r1, [r7, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	4611      	mov	r1, r2
 800b016:	4618      	mov	r0, r3
 800b018:	f000 ffa0 	bl	800bf5c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4618      	mov	r0, r3
 800b020:	3708      	adds	r7, #8
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 800b026:	b580      	push	{r7, lr}
 800b028:	b082      	sub	sp, #8
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	6039      	str	r1, [r7, #0]
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4611      	mov	r1, r2
 800b036:	4618      	mov	r0, r3
 800b038:	f7ff ffe5 	bl	800b006 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4618      	mov	r0, r3
 800b040:	3708      	adds	r7, #8
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 800b046:	b580      	push	{r7, lr}
 800b048:	b082      	sub	sp, #8
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	6039      	str	r1, [r7, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	683a      	ldr	r2, [r7, #0]
 800b054:	4611      	mov	r1, r2
 800b056:	4618      	mov	r0, r3
 800b058:	f001 f8bf 	bl	800c1da <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4618      	mov	r0, r3
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 800b066:	b580      	push	{r7, lr}
 800b068:	b082      	sub	sp, #8
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	6039      	str	r1, [r7, #0]
 800b070:	683a      	ldr	r2, [r7, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4611      	mov	r1, r2
 800b076:	4618      	mov	r0, r3
 800b078:	f7ff ffe5 	bl	800b046 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4618      	mov	r0, r3
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 800b086:	b580      	push	{r7, lr}
 800b088:	b082      	sub	sp, #8
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	3304      	adds	r3, #4
 800b092:	4618      	mov	r0, r3
 800b094:	f000 fe33 	bl	800bcfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4618      	mov	r0, r3
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <_ZNSt10shared_ptrI6ModuleED1Ev>:
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b082      	sub	sp, #8
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7ff ffea 	bl	800b086 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <_ZN6RemoraC1Ev>:

// unions for TX and RX data
__attribute__((section(".DmaSection"))) volatile txData_t txData;
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;

Remora::Remora() :
 800b0bc:	b590      	push	{r4, r7, lr}
 800b0be:	b097      	sub	sp, #92	@ 0x5c
 800b0c0:	af02      	add	r7, sp, #8
 800b0c2:	6078      	str	r0, [r7, #4]
	baseFreq(Config::pruBaseFreq),
	servoFreq(Config::pruServoFreq),
	serialFreq(Config::pruSerialFreq)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	3310      	adds	r3, #16
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f000 fe51 	bl	800bd70 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	3314      	adds	r3, #20
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 fe7e 	bl	800bdd4 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	331c      	adds	r3, #28
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f000 fea0 	bl	800be22 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	3320      	adds	r3, #32
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 fe9b 	bl	800be22 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	3324      	adds	r3, #36	@ 0x24
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f000 fe96 	bl	800be22 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	3328      	adds	r3, #40	@ 0x28
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7ff ff76 	bl	800afec <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
	baseFreq(Config::pruBaseFreq),
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800b106:	635a      	str	r2, [r3, #52]	@ 0x34
	servoFreq(Config::pruServoFreq),
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b10e:	639a      	str	r2, [r3, #56]	@ 0x38
	serialFreq(Config::pruSerialFreq)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800b116:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	threadsRunning = false;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	currentState = ST_SETUP;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	701a      	strb	r2, [r3, #0]
	prevState = ST_RESET;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2205      	movs	r2, #5
 800b12a:	705a      	strb	r2, [r3, #1]

	configHandler = std::make_unique<JsonConfigHandler>(this);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	613b      	str	r3, [r7, #16]
 800b130:	f107 030c 	add.w	r3, r7, #12
 800b134:	f107 0210 	add.w	r2, r7, #16
 800b138:	4611      	mov	r1, r2
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 fef3 	bl	800bf26 <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	3310      	adds	r3, #16
 800b144:	f107 020c 	add.w	r2, r7, #12
 800b148:	4611      	mov	r1, r2
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7ff ff6b 	bl	800b026 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 800b150:	f107 030c 	add.w	r3, r7, #12
 800b154:	4618      	mov	r0, r3
 800b156:	f000 fe1b 	bl	800bd90 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>

    ptrTxData = &txData;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a6c      	ldr	r2, [pc, #432]	@ (800b310 <_ZN6RemoraC1Ev+0x254>)
 800b15e:	605a      	str	r2, [r3, #4]
    ptrRxData = &rxData;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4a6c      	ldr	r2, [pc, #432]	@ (800b314 <_ZN6RemoraC1Ev+0x258>)
 800b164:	609a      	str	r2, [r3, #8]

	auto spiComms = std::make_unique<SPIComms>(ptrRxData, ptrTxData, SPI1);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f103 0108 	add.w	r1, r3, #8
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	1d1a      	adds	r2, r3, #4
 800b170:	4b69      	ldr	r3, [pc, #420]	@ (800b318 <_ZN6RemoraC1Ev+0x25c>)
 800b172:	617b      	str	r3, [r7, #20]
 800b174:	f107 0008 	add.w	r0, r7, #8
 800b178:	f107 0314 	add.w	r3, r7, #20
 800b17c:	f000 ff0a 	bl	800bf94 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>

	comms = std::make_shared<CommsHandler>();
 800b180:	f107 0318 	add.w	r3, r7, #24
 800b184:	4618      	mov	r0, r3
 800b186:	f000 ff50 	bl	800c02a <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	3314      	adds	r3, #20
 800b18e:	f107 0218 	add.w	r2, r7, #24
 800b192:	4611      	mov	r1, r2
 800b194:	4618      	mov	r0, r3
 800b196:	f000 ff56 	bl	800c046 <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>
 800b19a:	f107 0318 	add.w	r3, r7, #24
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7ff fefe 	bl	800afa0 <_ZNSt10shared_ptrI12CommsHandlerED1Ev>
	comms->setInterface(std::move(spiComms));
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	3314      	adds	r3, #20
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f000 ff5f 	bl	800c06c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	f107 0308 	add.w	r3, r7, #8
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f000 ff65 	bl	800c084 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	f107 0320 	add.w	r3, r7, #32
 800b1c0:	4611      	mov	r1, r2
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 ff7a 	bl	800c0bc <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>
 800b1c8:	f107 0320 	add.w	r3, r7, #32
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	f7ff fe46 	bl	800ae60 <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>
 800b1d4:	f107 0320 	add.w	r3, r7, #32
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 ff8b 	bl	800c0f4 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
	comms->init();
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	3314      	adds	r3, #20
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f000 ff42 	bl	800c06c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f005 fa73 	bl	80106d6 <_ZN12CommsHandler4initEv>
	comms->start();
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	3314      	adds	r3, #20
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 ff39 	bl	800c06c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f005 fa98 	bl	8010732 <_ZN12CommsHandler5startEv>

    baseThread = make_unique<pruThread>(
    									"Base",
										TIM3,
 800b202:	4b46      	ldr	r3, [pc, #280]	@ (800b31c <_ZN6RemoraC1Ev+0x260>)
 800b204:	62bb      	str	r3, [r7, #40]	@ 0x28
										TIM3_IRQn,
 800b206:	231d      	movs	r3, #29
 800b208:	85fb      	strh	r3, [r7, #46]	@ 0x2e
										baseFreq,
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	3334      	adds	r3, #52	@ 0x34
    baseThread = make_unique<pruThread>(
 800b20e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b212:	f107 012e 	add.w	r1, r7, #46	@ 0x2e
 800b216:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800b21a:	4c41      	ldr	r4, [pc, #260]	@ (800b320 <_ZN6RemoraC1Ev+0x264>)
 800b21c:	9401      	str	r4, [sp, #4]
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	460b      	mov	r3, r1
 800b222:	4940      	ldr	r1, [pc, #256]	@ (800b324 <_ZN6RemoraC1Ev+0x268>)
 800b224:	f000 ff88 	bl	800c138 <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::baseThreadIrqPriority
										);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	331c      	adds	r3, #28
 800b22c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800b230:	4611      	mov	r1, r2
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff ff17 	bl	800b066 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    baseThread = make_unique<pruThread>(
 800b238:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b23c:	4618      	mov	r0, r3
 800b23e:	f000 fe00 	bl	800be42 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    servoThread = make_unique<pruThread>(
    									"Servo",
										TIM2,
 800b242:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b246:	637b      	str	r3, [r7, #52]	@ 0x34
										TIM2_IRQn,
 800b248:	231c      	movs	r3, #28
 800b24a:	877b      	strh	r3, [r7, #58]	@ 0x3a
										servoFreq,
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	3338      	adds	r3, #56	@ 0x38
    servoThread = make_unique<pruThread>(
 800b250:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800b254:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 800b258:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800b25c:	4c32      	ldr	r4, [pc, #200]	@ (800b328 <_ZN6RemoraC1Ev+0x26c>)
 800b25e:	9401      	str	r4, [sp, #4]
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	460b      	mov	r3, r1
 800b264:	4931      	ldr	r1, [pc, #196]	@ (800b32c <_ZN6RemoraC1Ev+0x270>)
 800b266:	f000 ffd4 	bl	800c212 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::servoThreadIrqPriority
										);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	3320      	adds	r3, #32
 800b26e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800b272:	4611      	mov	r1, r2
 800b274:	4618      	mov	r0, r3
 800b276:	f7ff fef6 	bl	800b066 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    servoThread = make_unique<pruThread>(
 800b27a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b27e:	4618      	mov	r0, r3
 800b280:	f000 fddf 	bl	800be42 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    serialThread = make_unique<pruThread>(
    									"Serial",
										TIM4,
 800b284:	4b2a      	ldr	r3, [pc, #168]	@ (800b330 <_ZN6RemoraC1Ev+0x274>)
 800b286:	643b      	str	r3, [r7, #64]	@ 0x40
										TIM4_IRQn,
 800b288:	231e      	movs	r3, #30
 800b28a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
										serialFreq,
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	333c      	adds	r3, #60	@ 0x3c
    serialThread = make_unique<pruThread>(
 800b292:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800b296:	f107 0146 	add.w	r1, r7, #70	@ 0x46
 800b29a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800b29e:	4c25      	ldr	r4, [pc, #148]	@ (800b334 <_ZN6RemoraC1Ev+0x278>)
 800b2a0:	9401      	str	r4, [sp, #4]
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	4924      	ldr	r1, [pc, #144]	@ (800b338 <_ZN6RemoraC1Ev+0x27c>)
 800b2a8:	f001 f804 	bl	800c2b4 <_ZSt11make_uniqueI9pruThreadJRA7_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::commsThreadIrqPriority
										);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	3324      	adds	r3, #36	@ 0x24
 800b2b0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800b2b4:	4611      	mov	r1, r2
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7ff fed5 	bl	800b066 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    serialThread = make_unique<pruThread>(
 800b2bc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 fdbe 	bl	800be42 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>

    servoThread->registerModule(comms);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	3320      	adds	r3, #32
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f001 f843 	bl	800c356 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f103 0214 	add.w	r2, r3, #20
 800b2d8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b2dc:	4611      	mov	r1, r2
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f001 f845 	bl	800c36e <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>
 800b2e4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f00f fcb4 	bl	801ac58 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800b2f0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7ff fed4 	bl	800b0a2 <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 800b2fa:	f107 0308 	add.w	r3, r7, #8
 800b2fe:	4618      	mov	r0, r3
 800b300:	f000 fe71 	bl	800bfe6 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4618      	mov	r0, r3
 800b308:	3754      	adds	r7, #84	@ 0x54
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd90      	pop	{r4, r7, pc}
 800b30e:	bf00      	nop
 800b310:	30000080 	.word	0x30000080
 800b314:	300000c0 	.word	0x300000c0
 800b318:	40013000 	.word	0x40013000
 800b31c:	40000400 	.word	0x40000400
 800b320:	0802b35c 	.word	0x0802b35c
 800b324:	0802a534 	.word	0x0802a534
 800b328:	0802b360 	.word	0x0802b360
 800b32c:	0802a53c 	.word	0x0802a53c
 800b330:	40000800 	.word	0x40000800
 800b334:	0802b364 	.word	0x0802b364
 800b338:	0802a544 	.word	0x0802a544

0800b33c <_ZN6Remora17transitionToStateENS_5StateE>:

void Remora::transitionToState(State newState) {
 800b33c:	b5b0      	push	{r4, r5, r7, lr}
 800b33e:	b08a      	sub	sp, #40	@ 0x28
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	460b      	mov	r3, r1
 800b346:	70fb      	strb	r3, [r7, #3]

    if (currentState != newState) {
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	78fa      	ldrb	r2, [r7, #3]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d021      	beq.n	800b396 <_ZN6Remora17transitionToStateENS_5StateE+0x5a>
        const char* stateNames[] = {
 800b352:	4b13      	ldr	r3, [pc, #76]	@ (800b3a0 <_ZN6Remora17transitionToStateENS_5StateE+0x64>)
 800b354:	f107 040c 	add.w	r4, r7, #12
 800b358:	461d      	mov	r5, r3
 800b35a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b35c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b35e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b362:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            "Setup", "Start", "Idle", "Running", "Stop", "Reset", "System Reset"
        };
        printf("\n## Transitioning from %s state to %s state\n",
               stateNames[currentState], stateNames[newState]);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	781b      	ldrb	r3, [r3, #0]
        printf("\n## Transitioning from %s state to %s state\n",
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	3328      	adds	r3, #40	@ 0x28
 800b36e:	443b      	add	r3, r7
 800b370:	f853 1c1c 	ldr.w	r1, [r3, #-28]
               stateNames[currentState], stateNames[newState]);
 800b374:	78fb      	ldrb	r3, [r7, #3]
        printf("\n## Transitioning from %s state to %s state\n",
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	3328      	adds	r3, #40	@ 0x28
 800b37a:	443b      	add	r3, r7
 800b37c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800b380:	461a      	mov	r2, r3
 800b382:	4808      	ldr	r0, [pc, #32]	@ (800b3a4 <_ZN6Remora17transitionToStateENS_5StateE+0x68>)
 800b384:	f01d ffbe 	bl	8029304 <iprintf>

        prevState = currentState;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	781a      	ldrb	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	705a      	strb	r2, [r3, #1]
        currentState = newState;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	78fa      	ldrb	r2, [r7, #3]
 800b394:	701a      	strb	r2, [r3, #0]
    }
}
 800b396:	bf00      	nop
 800b398:	3728      	adds	r7, #40	@ 0x28
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bdb0      	pop	{r4, r5, r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	0802a5bc 	.word	0x0802a5bc
 800b3a4:	0802a54c 	.word	0x0802a54c

0800b3a8 <_ZN6Remora16handleSetupStateEv>:

void Remora::handleSetupState() {
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	781a      	ldrb	r2, [r3, #0]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	785b      	ldrb	r3, [r3, #1]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d002      	beq.n	800b3c2 <_ZN6Remora16handleSetupStateEv+0x1a>
        printf("\n## Entering SETUP state\n");
 800b3bc:	4808      	ldr	r0, [pc, #32]	@ (800b3e0 <_ZN6Remora16handleSetupStateEv+0x38>)
 800b3be:	f01e f811 	bl	80293e4 <puts>
    }
    prevState = currentState;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	781a      	ldrb	r2, [r3, #0]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	705a      	strb	r2, [r3, #1]

    loadModules();
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 f996 	bl	800b6fc <_ZN6Remora11loadModulesEv>
    transitionToState(ST_START);
 800b3d0:	2101      	movs	r1, #1
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f7ff ffb2 	bl	800b33c <_ZN6Remora17transitionToStateENS_5StateE>
}
 800b3d8:	bf00      	nop
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	0802a5d8 	.word	0x0802a5d8

0800b3e4 <_ZN6Remora16handleStartStateEv>:

void Remora::handleStartState() {
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	781a      	ldrb	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	785b      	ldrb	r3, [r3, #1]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d002      	beq.n	800b3fe <_ZN6Remora16handleStartStateEv+0x1a>
        printf("\n## Entering START state\n");
 800b3f8:	482e      	ldr	r0, [pc, #184]	@ (800b4b4 <_ZN6Remora16handleStartStateEv+0xd0>)
 800b3fa:	f01d fff3 	bl	80293e4 <puts>
    }
    prevState = currentState;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	781a      	ldrb	r2, [r3, #0]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	705a      	strb	r2, [r3, #1]

    for (const auto& module : onLoad) {
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	3328      	adds	r3, #40	@ 0x28
 800b40a:	617b      	str	r3, [r7, #20]
 800b40c:	6978      	ldr	r0, [r7, #20]
 800b40e:	f000 ffbe 	bl	800c38e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800b412:	4603      	mov	r3, r0
 800b414:	60fb      	str	r3, [r7, #12]
 800b416:	6978      	ldr	r0, [r7, #20]
 800b418:	f000 ffc9 	bl	800c3ae <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800b41c:	4603      	mov	r3, r0
 800b41e:	60bb      	str	r3, [r7, #8]
 800b420:	e01a      	b.n	800b458 <_ZN6Remora16handleStartStateEv+0x74>
 800b422:	f107 030c 	add.w	r3, r7, #12
 800b426:	4618      	mov	r0, r3
 800b428:	f000 fffb 	bl	800c422 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 800b42c:	6138      	str	r0, [r7, #16]
        if (module) {
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	4618      	mov	r0, r3
 800b432:	f001 f802 	bl	800c43a <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d008      	beq.n	800b44e <_ZN6Remora16handleStartStateEv+0x6a>
            module->configure();
 800b43c:	6938      	ldr	r0, [r7, #16]
 800b43e:	f001 f80d 	bl	800c45c <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b442:	4603      	mov	r3, r0
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	3214      	adds	r2, #20
 800b448:	6812      	ldr	r2, [r2, #0]
 800b44a:	4618      	mov	r0, r3
 800b44c:	4790      	blx	r2
    for (const auto& module : onLoad) {
 800b44e:	f107 030c 	add.w	r3, r7, #12
 800b452:	4618      	mov	r0, r3
 800b454:	f000 ffd4 	bl	800c400 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 800b458:	f107 0208 	add.w	r2, r7, #8
 800b45c:	f107 030c 	add.w	r3, r7, #12
 800b460:	4611      	mov	r1, r2
 800b462:	4618      	mov	r0, r3
 800b464:	f000 ffb4 	bl	800c3d0 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1d9      	bne.n	800b422 <_ZN6Remora16handleStartStateEv+0x3e>
        }
    }

    if (!threadsRunning) {
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b474:	f083 0301 	eor.w	r3, r3, #1
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d011      	beq.n	800b4a2 <_ZN6Remora16handleStartStateEv+0xbe>
        startThread(servoThread, "SERVO");
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	3320      	adds	r3, #32
 800b482:	4a0d      	ldr	r2, [pc, #52]	@ (800b4b8 <_ZN6Remora16handleStartStateEv+0xd4>)
 800b484:	4619      	mov	r1, r3
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 f8a8 	bl	800b5dc <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        startThread(baseThread, "BASE");
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	331c      	adds	r3, #28
 800b490:	4a0a      	ldr	r2, [pc, #40]	@ (800b4bc <_ZN6Remora16handleStartStateEv+0xd8>)
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 f8a1 	bl	800b5dc <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        threadsRunning = true;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2201      	movs	r2, #1
 800b49e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }

    transitionToState(ST_IDLE);
 800b4a2:	2102      	movs	r1, #2
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f7ff ff49 	bl	800b33c <_ZN6Remora17transitionToStateENS_5StateE>
}
 800b4aa:	bf00      	nop
 800b4ac:	3718      	adds	r7, #24
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	0802a5f4 	.word	0x0802a5f4
 800b4b8:	0802a610 	.word	0x0802a610
 800b4bc:	0802a618 	.word	0x0802a618

0800b4c0 <_ZN6Remora15handleIdleStateEv>:

void Remora::handleIdleState() {
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	781a      	ldrb	r2, [r3, #0]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	785b      	ldrb	r3, [r3, #1]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d002      	beq.n	800b4da <_ZN6Remora15handleIdleStateEv+0x1a>
        printf("\n## Entering IDLE state\n");
 800b4d4:	480d      	ldr	r0, [pc, #52]	@ (800b50c <_ZN6Remora15handleIdleStateEv+0x4c>)
 800b4d6:	f01d ff85 	bl	80293e4 <puts>
    }
    prevState = currentState;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	781a      	ldrb	r2, [r3, #0]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	705a      	strb	r2, [r3, #1]

    if (comms->getStatus()) {
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	3314      	adds	r3, #20
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 fdc0 	bl	800c06c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7ff fcc9 	bl	800ae86 <_ZNK12CommsHandler9getStatusEv>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d003      	beq.n	800b502 <_ZN6Remora15handleIdleStateEv+0x42>
        transitionToState(ST_RUNNING);
 800b4fa:	2103      	movs	r1, #3
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f7ff ff1d 	bl	800b33c <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 800b502:	bf00      	nop
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	0802a620 	.word	0x0802a620

0800b510 <_ZN6Remora18handleRunningStateEv>:

void Remora::handleRunningState() {
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	781a      	ldrb	r2, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	785b      	ldrb	r3, [r3, #1]
 800b520:	429a      	cmp	r2, r3
 800b522:	d002      	beq.n	800b52a <_ZN6Remora18handleRunningStateEv+0x1a>
        printf("\n## Entering RUNNING state\n");
 800b524:	4813      	ldr	r0, [pc, #76]	@ (800b574 <_ZN6Remora18handleRunningStateEv+0x64>)
 800b526:	f01d ff5d 	bl	80293e4 <puts>
    }
    prevState = currentState;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	781a      	ldrb	r2, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	705a      	strb	r2, [r3, #1]

    if (!comms->getStatus()) {
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	3314      	adds	r3, #20
 800b536:	4618      	mov	r0, r3
 800b538:	f000 fd98 	bl	800c06c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b53c:	4603      	mov	r3, r0
 800b53e:	4618      	mov	r0, r3
 800b540:	f7ff fca1 	bl	800ae86 <_ZNK12CommsHandler9getStatusEv>
 800b544:	4603      	mov	r3, r0
 800b546:	f083 0301 	eor.w	r3, r3, #1
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d003      	beq.n	800b558 <_ZN6Remora18handleRunningStateEv+0x48>
        transitionToState(ST_RESET);
 800b550:	2105      	movs	r1, #5
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7ff fef2 	bl	800b33c <_ZN6Remora17transitionToStateENS_5StateE>
    }

    if (reset) {
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	7b1b      	ldrb	r3, [r3, #12]
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d003      	beq.n	800b56a <_ZN6Remora18handleRunningStateEv+0x5a>
    	transitionToState(ST_SYSRESET);
 800b562:	2106      	movs	r1, #6
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f7ff fee9 	bl	800b33c <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 800b56a:	bf00      	nop
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	0802a638 	.word	0x0802a638

0800b578 <_ZN6Remora16handleResetStateEv>:

void Remora::handleResetState() {
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	781a      	ldrb	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	785b      	ldrb	r3, [r3, #1]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d002      	beq.n	800b592 <_ZN6Remora16handleResetStateEv+0x1a>
        printf("\n## Entering RESET state\n");
 800b58c:	480c      	ldr	r0, [pc, #48]	@ (800b5c0 <_ZN6Remora16handleResetStateEv+0x48>)
 800b58e:	f01d ff29 	bl	80293e4 <puts>
    }
    prevState = currentState;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	781a      	ldrb	r2, [r3, #0]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	705a      	strb	r2, [r3, #1]

    printf("   Resetting rxBuffer\n");
 800b59a:	480a      	ldr	r0, [pc, #40]	@ (800b5c4 <_ZN6Remora16handleResetStateEv+0x4c>)
 800b59c:	f01d ff22 	bl	80293e4 <puts>
    resetBuffer(ptrRxData->rxBuffer, Config::dataBuffSize);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	2240      	movs	r2, #64	@ 0x40
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 f82f 	bl	800b60c <_ZN6Remora11resetBufferEPVhj>
    transitionToState(ST_IDLE);
 800b5ae:	2102      	movs	r1, #2
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f7ff fec3 	bl	800b33c <_ZN6Remora17transitionToStateENS_5StateE>
}
 800b5b6:	bf00      	nop
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	0802a654 	.word	0x0802a654
 800b5c4:	0802a670 	.word	0x0802a670

0800b5c8 <_ZN6Remora19handleSysResetStateEv>:

void Remora::handleSysResetState() {
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
	HAL_NVIC_SystemReset();
 800b5d0:	f010 fc15 	bl	801bdfe <HAL_NVIC_SystemReset>
}
 800b5d4:	bf00      	nop
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>:

void Remora::startThread(const std::unique_ptr<pruThread>& thread, const char* name) {
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	60b9      	str	r1, [r7, #8]
 800b5e6:	607a      	str	r2, [r7, #4]
    printf("Starting the %s thread\n", name);
 800b5e8:	6879      	ldr	r1, [r7, #4]
 800b5ea:	4807      	ldr	r0, [pc, #28]	@ (800b608 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc+0x2c>)
 800b5ec:	f01d fe8a 	bl	8029304 <iprintf>
    thread->startThread();
 800b5f0:	68b8      	ldr	r0, [r7, #8]
 800b5f2:	f000 feb0 	bl	800c356 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f00f fbc1 	bl	801ad80 <_ZN9pruThread11startThreadEv>
}
 800b5fe:	bf00      	nop
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	0802a688 	.word	0x0802a688

0800b60c <_ZN6Remora11resetBufferEPVhj>:

void Remora::resetBuffer(volatile uint8_t* buffer, size_t size) {
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
    memset((void*)buffer, 0, size);
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	2100      	movs	r1, #0
 800b61c:	68b8      	ldr	r0, [r7, #8]
 800b61e:	f01d ffeb 	bl	80295f8 <memset>
}
 800b622:	bf00      	nop
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
	...

0800b62c <_ZN6Remora3runEv>:

void Remora::run() {
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
    while (true) {
        switch (currentState) {
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	2b06      	cmp	r3, #6
 800b63a:	d829      	bhi.n	800b690 <_ZN6Remora3runEv+0x64>
 800b63c:	a201      	add	r2, pc, #4	@ (adr r2, 800b644 <_ZN6Remora3runEv+0x18>)
 800b63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b642:	bf00      	nop
 800b644:	0800b661 	.word	0x0800b661
 800b648:	0800b669 	.word	0x0800b669
 800b64c:	0800b671 	.word	0x0800b671
 800b650:	0800b679 	.word	0x0800b679
 800b654:	0800b691 	.word	0x0800b691
 800b658:	0800b681 	.word	0x0800b681
 800b65c:	0800b689 	.word	0x0800b689
            case ST_SETUP:
                handleSetupState();
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7ff fea1 	bl	800b3a8 <_ZN6Remora16handleSetupStateEv>
                break;
 800b666:	e017      	b.n	800b698 <_ZN6Remora3runEv+0x6c>
            case ST_START:
                handleStartState();
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7ff febb 	bl	800b3e4 <_ZN6Remora16handleStartStateEv>
                break;
 800b66e:	e013      	b.n	800b698 <_ZN6Remora3runEv+0x6c>
            case ST_IDLE:
                handleIdleState();
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7ff ff25 	bl	800b4c0 <_ZN6Remora15handleIdleStateEv>
                break;
 800b676:	e00f      	b.n	800b698 <_ZN6Remora3runEv+0x6c>
            case ST_RUNNING:
                handleRunningState();
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7ff ff49 	bl	800b510 <_ZN6Remora18handleRunningStateEv>
                break;
 800b67e:	e00b      	b.n	800b698 <_ZN6Remora3runEv+0x6c>
            case ST_RESET:
                handleResetState();
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f7ff ff79 	bl	800b578 <_ZN6Remora16handleResetStateEv>
                break;
 800b686:	e007      	b.n	800b698 <_ZN6Remora3runEv+0x6c>
            case ST_SYSRESET:
                handleSysResetState();
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7ff ff9d 	bl	800b5c8 <_ZN6Remora19handleSysResetStateEv>
                break;
 800b68e:	e003      	b.n	800b698 <_ZN6Remora3runEv+0x6c>
            default:
                printf("Error: Invalid state\n");
 800b690:	4806      	ldr	r0, [pc, #24]	@ (800b6ac <_ZN6Remora3runEv+0x80>)
 800b692:	f01d fea7 	bl	80293e4 <puts>
                break;
 800b696:	bf00      	nop
        }
        comms->tasks();
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	3314      	adds	r3, #20
 800b69c:	4618      	mov	r0, r3
 800b69e:	f000 fce5 	bl	800c06c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f005 f857 	bl	8010758 <_ZN12CommsHandler5tasksEv>
        switch (currentState) {
 800b6aa:	e7c3      	b.n	800b634 <_ZN6Remora3runEv+0x8>
 800b6ac:	0802a6a0 	.word	0x0802a6a0

0800b6b0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	601a      	str	r2, [r3, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	1d1a      	adds	r2, r3, #4
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	3304      	adds	r3, #4
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	4610      	mov	r0, r2
 800b6ce:	f000 ff16 	bl	800c4fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3708      	adds	r7, #8
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	683a      	ldr	r2, [r7, #0]
 800b6ea:	4611      	mov	r1, r2
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7ff ffdf 	bl	800b6b0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <_ZN6Remora11loadModulesEv>:
    }
}

void Remora::loadModules() {
 800b6fc:	b5b0      	push	{r4, r5, r7, lr}
 800b6fe:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800b702:	af04      	add	r7, sp, #16
 800b704:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b708:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b70c:	6018      	str	r0, [r3, #0]
    ModuleFactory* factory = ModuleFactory::getInstance();
 800b70e:	f006 fc9b 	bl	8012048 <_ZN13ModuleFactory11getInstanceEv>
 800b712:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
    JsonArray modules = configHandler->getModules();
 800b716:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b71a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3310      	adds	r3, #16
 800b722:	4618      	mov	r0, r3
 800b724:	f000 fea6 	bl	800c474 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>
 800b728:	4602      	mov	r2, r0
 800b72a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b72e:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800b732:	4611      	mov	r1, r2
 800b734:	4618      	mov	r0, r3
 800b736:	f7fb fce5 	bl	8007104 <_ZN17JsonConfigHandler10getModulesEv>
    if (modules.isNull()) {
 800b73a:	f107 0318 	add.w	r3, r7, #24
 800b73e:	4618      	mov	r0, r3
 800b740:	f7ff fa3a 	bl	800abb8 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>
      //printf something here
    }

    for (size_t i = 0; i < modules.size(); i++) {
 800b744:	2300      	movs	r3, #0
 800b746:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800b74a:	e266      	b.n	800bc1a <_ZN6Remora11loadModulesEv+0x51e>
        //if (modules[i].containsKey("Thread") && modules[i].containsKey("Type")) {
    	if (modules[i]["Thread"].is<const char*>() && modules[i]["Type"].is<const char*>()) {
 800b74c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b750:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800b754:	f107 0118 	add.w	r1, r7, #24
 800b758:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800b75c:	4618      	mov	r0, r3
 800b75e:	f000 fe95 	bl	800c48c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800b762:	f107 0420 	add.w	r4, r7, #32

template <typename TDerived>
template <typename TString, enable_if_t<IsString<TString>::value, int>>
inline MemberProxy<TDerived, AdaptedString<TString>>
VariantRefBase<TDerived>::operator[](const TString& key) const {
  return {derived(), adaptString(key)};
 800b766:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b76a:	4618      	mov	r0, r3
 800b76c:	f001 fb79 	bl	800ce62 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800b770:	4602      	mov	r2, r0
 800b772:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800b776:	4611      	mov	r1, r2
 800b778:	4618      	mov	r0, r3
 800b77a:	f001 fb7d 	bl	800ce78 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800b77e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800b782:	49c3      	ldr	r1, [pc, #780]	@ (800ba90 <_ZN6Remora11loadModulesEv+0x394>)
 800b784:	4618      	mov	r0, r3
 800b786:	f7fc fc8a 	bl	800809e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800b78a:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 800b78e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800b798:	cb0c      	ldmia	r3, {r2, r3}
 800b79a:	4620      	mov	r0, r4
 800b79c:	f001 fb84 	bl	800cea8 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800b7a0:	f107 0320 	add.w	r3, r7, #32
 800b7a4:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 800b7a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800b7ac:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800b7b0:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 800b7b4:	f002 f8df 	bl	800d976 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 800b7be:	f002 f8ea 	bl	800d996 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b7c8:	4621      	mov	r1, r4
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fa f949 	bl	8005a62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800b7d0:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 800b7d2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b7d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b7da:	f7ff fb06 	bl	800adea <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	bf00      	nop
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d04e      	beq.n	800b884 <_ZN6Remora11loadModulesEv+0x188>
 800b7e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b7ea:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800b7ee:	f107 0118 	add.w	r1, r7, #24
 800b7f2:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f000 fe48 	bl	800c48c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800b7fc:	f107 0450 	add.w	r4, r7, #80	@ 0x50
  return {derived(), adaptString(key)};
 800b800:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800b804:	4618      	mov	r0, r3
 800b806:	f001 fb2c 	bl	800ce62 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800b80a:	4602      	mov	r2, r0
 800b80c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800b810:	4611      	mov	r1, r2
 800b812:	4618      	mov	r0, r3
 800b814:	f001 fb30 	bl	800ce78 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800b818:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800b81c:	499d      	ldr	r1, [pc, #628]	@ (800ba94 <_ZN6Remora11loadModulesEv+0x398>)
 800b81e:	4618      	mov	r0, r3
 800b820:	f001 fb61 	bl	800cee6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800b824:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 800b828:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800b82c:	9300      	str	r3, [sp, #0]
 800b82e:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800b832:	cb0c      	ldmia	r3, {r2, r3}
 800b834:	4620      	mov	r0, r4
 800b836:	f001 fb37 	bl	800cea8 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800b83a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b83e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800b842:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800b846:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800b84a:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 800b84e:	f002 f892 	bl	800d976 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800b852:	4604      	mov	r4, r0
 800b854:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 800b858:	f002 f89d 	bl	800d996 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800b85c:	4602      	mov	r2, r0
 800b85e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800b862:	4621      	mov	r1, r4
 800b864:	4618      	mov	r0, r3
 800b866:	f7fa f8fc 	bl	8005a62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800b86a:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 800b86c:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800b870:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b874:	f7ff fab9 	bl	800adea <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 800b878:	4603      	mov	r3, r0
 800b87a:	bf00      	nop
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d001      	beq.n	800b884 <_ZN6Remora11loadModulesEv+0x188>
 800b880:	2301      	movs	r3, #1
 800b882:	e000      	b.n	800b886 <_ZN6Remora11loadModulesEv+0x18a>
 800b884:	2300      	movs	r3, #0
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 81c2 	beq.w	800bc10 <_ZN6Remora11loadModulesEv+0x514>
            const char* threadName = modules[i]["Thread"];
 800b88c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b890:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800b894:	f107 0118 	add.w	r1, r7, #24
 800b898:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800b89c:	4618      	mov	r0, r3
 800b89e:	f000 fdf5 	bl	800c48c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800b8a2:	f107 0480 	add.w	r4, r7, #128	@ 0x80
  return {derived(), adaptString(key)};
 800b8a6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f001 fad9 	bl	800ce62 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800b8b6:	4611      	mov	r1, r2
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f001 fadd 	bl	800ce78 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800b8be:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 800b8c2:	4973      	ldr	r1, [pc, #460]	@ (800ba90 <_ZN6Remora11loadModulesEv+0x394>)
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fc fbea 	bl	800809e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800b8ca:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 800b8ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 800b8d8:	cb0c      	ldmia	r3, {r2, r3}
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f001 fae4 	bl	800cea8 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800b8e0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f000 fde1 	bl	800c4ac <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800b8ea:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
            const char* moduleType = modules[i]["Type"];
 800b8ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b8f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b8f6:	f107 0118 	add.w	r1, r7, #24
 800b8fa:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 fdc4 	bl	800c48c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800b904:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 800b908:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800b90c:	4618      	mov	r0, r3
 800b90e:	f001 faa8 	bl	800ce62 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800b912:	4602      	mov	r2, r0
 800b914:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 800b918:	4611      	mov	r1, r2
 800b91a:	4618      	mov	r0, r3
 800b91c:	f001 faac 	bl	800ce78 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800b920:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800b924:	495b      	ldr	r1, [pc, #364]	@ (800ba94 <_ZN6Remora11loadModulesEv+0x398>)
 800b926:	4618      	mov	r0, r3
 800b928:	f001 fadd 	bl	800cee6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800b92c:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 800b930:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800b93a:	cb0c      	ldmia	r3, {r2, r3}
 800b93c:	4620      	mov	r0, r4
 800b93e:	f001 fab3 	bl	800cea8 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800b942:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800b946:	4618      	mov	r0, r3
 800b948:	f000 fdb0 	bl	800c4ac <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800b94c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
            uint32_t threadFreq = 0;
 800b950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b954:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800b958:	2200      	movs	r2, #0
 800b95a:	601a      	str	r2, [r3, #0]

            // Determine the thread frequency based on the thread name
            if (strcmp(threadName, "Servo") == 0) {
 800b95c:	494e      	ldr	r1, [pc, #312]	@ (800ba98 <_ZN6Remora11loadModulesEv+0x39c>)
 800b95e:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800b962:	f7f4 fcbd 	bl	80002e0 <strcmp>
 800b966:	4603      	mov	r3, r0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10b      	bne.n	800b984 <_ZN6Remora11loadModulesEv+0x288>
                threadFreq = servoFreq;
 800b96c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b970:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b978:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b97c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800b980:	601a      	str	r2, [r3, #0]
 800b982:	e012      	b.n	800b9aa <_ZN6Remora11loadModulesEv+0x2ae>
            } else if (strcmp(threadName, "Base") == 0) {
 800b984:	4945      	ldr	r1, [pc, #276]	@ (800ba9c <_ZN6Remora11loadModulesEv+0x3a0>)
 800b986:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800b98a:	f7f4 fca9 	bl	80002e0 <strcmp>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d10a      	bne.n	800b9aa <_ZN6Remora11loadModulesEv+0x2ae>
                threadFreq = baseFreq;
 800b994:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b998:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b9a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b9a4:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800b9a8:	601a      	str	r2, [r3, #0]
            }

            // Add the "ThreadFreq" key and its value to the module's JSON object
            modules[i]["ThreadFreq"] = threadFreq;
 800b9aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b9ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9b2:	f107 0118 	add.w	r1, r7, #24
 800b9b6:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f000 fd66 	bl	800c48c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800b9c0:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 800b9c4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f001 fa4a 	bl	800ce62 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 800b9d4:	4611      	mov	r1, r2
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f001 fa4e 	bl	800ce78 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800b9dc:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800b9e0:	492f      	ldr	r1, [pc, #188]	@ (800baa0 <_ZN6Remora11loadModulesEv+0x3a4>)
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f001 fab4 	bl	800cf50 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800b9e8:	f507 71ea 	add.w	r1, r7, #468	@ 0x1d4
 800b9ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800b9f6:	cb0c      	ldmia	r3, {r2, r3}
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f001 fa55 	bl	800cea8 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800b9fe:	f107 0214 	add.w	r2, r7, #20
 800ba02:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800ba06:	4611      	mov	r1, r2
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f000 fd5b 	bl	800c4c4 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>

            // Create module using factory
            std::shared_ptr<Module> _mod = factory->createModule(threadName, moduleType, modules[i], this);
 800ba0e:	f8d7 5200 	ldr.w	r5, [r7, #512]	@ 0x200
 800ba12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ba16:	f107 0118 	add.w	r1, r7, #24
 800ba1a:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f000 fd34 	bl	800c48c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800ba24:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ba28:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f000 fd56 	bl	800c4e0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>
 800ba34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ba38:	f5a3 74fe 	sub.w	r4, r3, #508	@ 0x1fc
 800ba3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ba40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	9302      	str	r3, [sp, #8]
 800ba48:	466a      	mov	r2, sp
 800ba4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ba4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ba52:	e882 0003 	stmia.w	r2, {r0, r1}
 800ba56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800ba5a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 800ba5e:	4629      	mov	r1, r5
 800ba60:	4620      	mov	r0, r4
 800ba62:	f006 f9ff 	bl	8011e64 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora>

            // Check if the module creation was successful
            if (!_mod) {
 800ba66:	f107 030c 	add.w	r3, r7, #12
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f000 fce5 	bl	800c43a <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800ba70:	4603      	mov	r3, r0
 800ba72:	f083 0301 	eor.w	r3, r3, #1
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d015      	beq.n	800baa8 <_ZN6Remora11loadModulesEv+0x3ac>
            	printf("Error: Failed to create module of type '%s' for thread '%s'. Skipping registration.\n",
 800ba7c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 800ba80:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 800ba84:	4807      	ldr	r0, [pc, #28]	@ (800baa4 <_ZN6Remora11loadModulesEv+0x3a8>)
 800ba86:	f01d fc3d 	bl	8029304 <iprintf>
						moduleType, threadName);
				continue; // Skip to the next iteration
 800ba8a:	2400      	movs	r4, #0
 800ba8c:	e0ba      	b.n	800bc04 <_ZN6Remora11loadModulesEv+0x508>
 800ba8e:	bf00      	nop
 800ba90:	0802a6b8 	.word	0x0802a6b8
 800ba94:	0802a6c0 	.word	0x0802a6c0
 800ba98:	0802a53c 	.word	0x0802a53c
 800ba9c:	0802a534 	.word	0x0802a534
 800baa0:	0802a6c8 	.word	0x0802a6c8
 800baa4:	0802a6d4 	.word	0x0802a6d4
			}

            bool _modPost = _mod->getUsesModulePost();
 800baa8:	f107 030c 	add.w	r3, r7, #12
 800baac:	4618      	mov	r0, r3
 800baae:	f000 fcd5 	bl	800c45c <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800bab2:	4603      	mov	r3, r0
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	3218      	adds	r2, #24
 800bab8:	6812      	ldr	r2, [r2, #0]
 800baba:	4618      	mov	r0, r3
 800babc:	4790      	blx	r2
 800babe:	4603      	mov	r3, r0
 800bac0:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7

            if (strcmp(threadName, "Servo") == 0) {
 800bac4:	4960      	ldr	r1, [pc, #384]	@ (800bc48 <_ZN6Remora11loadModulesEv+0x54c>)
 800bac6:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800baca:	f7f4 fc09 	bl	80002e0 <strcmp>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d13e      	bne.n	800bb52 <_ZN6Remora11loadModulesEv+0x456>
                servoThread->registerModule(_mod);
 800bad4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bad8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	3320      	adds	r3, #32
 800bae0:	4618      	mov	r0, r3
 800bae2:	f000 fc38 	bl	800c356 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800bae6:	4604      	mov	r4, r0
 800bae8:	f107 020c 	add.w	r2, r7, #12
 800baec:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800baf0:	4611      	mov	r1, r2
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7ff fdf2 	bl	800b6dc <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800baf8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800bafc:	4619      	mov	r1, r3
 800bafe:	4620      	mov	r0, r4
 800bb00:	f00f f8aa 	bl	801ac58 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800bb04:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7ff faca 	bl	800b0a2 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 800bb0e:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d075      	beq.n	800bc02 <_ZN6Remora11loadModulesEv+0x506>
            		servoThread->registerModulePost(_mod);
 800bb16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bb1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	3320      	adds	r3, #32
 800bb22:	4618      	mov	r0, r3
 800bb24:	f000 fc17 	bl	800c356 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800bb28:	4604      	mov	r4, r0
 800bb2a:	f107 020c 	add.w	r2, r7, #12
 800bb2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bb32:	4611      	mov	r1, r2
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7ff fdd1 	bl	800b6dc <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800bb3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bb3e:	4619      	mov	r1, r3
 800bb40:	4620      	mov	r0, r4
 800bb42:	f00f f8a5 	bl	801ac90 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 800bb46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7ff faa9 	bl	800b0a2 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800bb50:	e057      	b.n	800bc02 <_ZN6Remora11loadModulesEv+0x506>
            	}
            }
            else if (strcmp(threadName, "Base") == 0) {
 800bb52:	493e      	ldr	r1, [pc, #248]	@ (800bc4c <_ZN6Remora11loadModulesEv+0x550>)
 800bb54:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800bb58:	f7f4 fbc2 	bl	80002e0 <strcmp>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d13e      	bne.n	800bbe0 <_ZN6Remora11loadModulesEv+0x4e4>
                baseThread->registerModule(_mod);
 800bb62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bb66:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	331c      	adds	r3, #28
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f000 fbf1 	bl	800c356 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800bb74:	4604      	mov	r4, r0
 800bb76:	f107 020c 	add.w	r2, r7, #12
 800bb7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bb7e:	4611      	mov	r1, r2
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7ff fdab 	bl	800b6dc <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800bb86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f00f f863 	bl	801ac58 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800bb92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7ff fa83 	bl	800b0a2 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 800bb9c:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d02e      	beq.n	800bc02 <_ZN6Remora11loadModulesEv+0x506>
            		servoThread->registerModulePost(_mod);
 800bba4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bba8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	3320      	adds	r3, #32
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f000 fbd0 	bl	800c356 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	f107 020c 	add.w	r2, r7, #12
 800bbbc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7ff fd8a 	bl	800b6dc <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800bbc8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bbcc:	4619      	mov	r1, r3
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f00f f85e 	bl	801ac90 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 800bbd4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7ff fa62 	bl	800b0a2 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800bbde:	e010      	b.n	800bc02 <_ZN6Remora11loadModulesEv+0x506>
            	}
            }
            else {
                onLoad.push_back(move(_mod));
 800bbe0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bbe4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800bbee:	f107 030c 	add.w	r3, r7, #12
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f000 fc9a 	bl	800c52c <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	f000 fca0 	bl	800c542 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backEOS2_>
            }
        }
 800bc02:	2401      	movs	r4, #1
 800bc04:	f107 030c 	add.w	r3, r7, #12
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7ff fa4a 	bl	800b0a2 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800bc0e:	2c01      	cmp	r4, #1
    for (size_t i = 0; i < modules.size(); i++) {
 800bc10:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800bc14:	3301      	adds	r3, #1
 800bc16:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800bc1a:	f107 0318 	add.w	r3, r7, #24
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fe ffdb 	bl	800abda <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>
 800bc24:	4602      	mov	r2, r0
 800bc26:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	bf34      	ite	cc
 800bc2e:	2301      	movcc	r3, #1
 800bc30:	2300      	movcs	r3, #0
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	f47f ad89 	bne.w	800b74c <_ZN6Remora11loadModulesEv+0x50>
    }

}
 800bc3a:	bf00      	nop
 800bc3c:	bf00      	nop
 800bc3e:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bdb0      	pop	{r4, r5, r7, pc}
 800bc46:	bf00      	nop
 800bc48:	0802a53c 	.word	0x0802a53c
 800bc4c:	0802a534 	.word	0x0802a534

0800bc50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
      { delete this; }
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d005      	beq.n	800bc6a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	3304      	adds	r3, #4
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	4798      	blx	r3
 800bc6a:	bf00      	nop
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800bc72:	b480      	push	{r7}
 800bc74:	b083      	sub	sp, #12
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
 800bc7a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d201      	bcs.n	800bc8c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	e000      	b.n	800bc8e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800bc8c:	687b      	ldr	r3, [r7, #4]
    }
 800bc8e:	4618      	mov	r0, r3
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr

0800bc9a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>:
  ~MemoryPoolList() {
 800bc9a:	b480      	push	{r7}
 800bc9c:	b083      	sub	sp, #12
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
  }
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4618      	mov	r0, r3
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	370c      	adds	r7, #12
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b082      	sub	sp, #8
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
 800bcce:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800bcd0:	6838      	ldr	r0, [r7, #0]
 800bcd2:	f000 fcbd 	bl	800c650 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	4619      	mov	r1, r3
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fc98 	bl	800c610 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800bce0:	6838      	ldr	r0, [r7, #0]
 800bce2:	f000 fcca 	bl	800c67a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800bce6:	4603      	mov	r3, r0
 800bce8:	4618      	mov	r0, r3
 800bcea:	f000 fcd3 	bl	800c694 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fcc3 	bl	800c67a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800bcf4:	687b      	ldr	r3, [r7, #4]
      }
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3708      	adds	r7, #8
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b082      	sub	sp, #8
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d004      	beq.n	800bd18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fe fdd7 	bl	800a8c6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3708      	adds	r7, #8
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b082      	sub	sp, #8
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f000 fcbc 	bl	800c6aa <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800bd32:	4603      	mov	r3, r0
 800bd34:	4618      	mov	r0, r3
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f000 fcbd 	bl	800c6c6 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b082      	sub	sp, #8
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7ff ffeb 	bl	800bd3c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
	: _M_t()
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	601a      	str	r2, [r3, #0]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7ff ffe8 	bl	800bd56 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800bd90:	b590      	push	{r4, r7, lr}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f000 fca0 	bl	800c6e0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800bda0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00c      	beq.n	800bdc4 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 fca5 	bl	800c6fa <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f000 fcae 	bl	800c714 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f000 fcc6 	bl	800c750 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
	__ptr = pointer();
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	601a      	str	r2, [r3, #0]
      }
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3714      	adds	r7, #20
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd90      	pop	{r4, r7, pc}

0800bdd4 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f000 fcc9 	bl	800c776 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4618      	mov	r0, r3
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b082      	sub	sp, #8
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f000 fccd 	bl	800c798 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4618      	mov	r0, r3
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	4618      	mov	r0, r3
 800be14:	f7ff ffeb 	bl	800bdee <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4618      	mov	r0, r3
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800be22:	b580      	push	{r7, lr}
 800be24:	b082      	sub	sp, #8
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
	: _M_t()
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	601a      	str	r2, [r3, #0]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4618      	mov	r0, r3
 800be34:	f7ff ffe8 	bl	800be08 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4618      	mov	r0, r3
 800be3c:	3708      	adds	r7, #8
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800be42:	b590      	push	{r4, r7, lr}
 800be44:	b085      	sub	sp, #20
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4618      	mov	r0, r3
 800be4e:	f000 fcb0 	bl	800c7b2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800be52:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d00c      	beq.n	800be76 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 fcb5 	bl	800c7cc <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>
 800be62:	4604      	mov	r4, r0
 800be64:	68f8      	ldr	r0, [r7, #12]
 800be66:	f000 fcbe 	bl	800c7e6 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>
 800be6a:	4603      	mov	r3, r0
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4619      	mov	r1, r3
 800be70:	4620      	mov	r0, r4
 800be72:	f000 fcda 	bl	800c82a <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
	__ptr = pointer();
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2200      	movs	r2, #0
 800be7a:	601a      	str	r2, [r3, #0]
      }
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4618      	mov	r0, r3
 800be80:	3714      	adds	r7, #20
 800be82:	46bd      	mov	sp, r7
 800be84:	bd90      	pop	{r4, r7, pc}

0800be86 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800be86:	b580      	push	{r7, lr}
 800be88:	b082      	sub	sp, #8
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fcde 	bl	800c850 <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	4618      	mov	r0, r3
 800be98:	f000 fce6 	bl	800c868 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4618      	mov	r0, r3
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <_ZNSaISt10shared_ptrI6ModuleEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b082      	sub	sp, #8
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fcee 	bl	800c890 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4618      	mov	r0, r3
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b082      	sub	sp, #8
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	689a      	ldr	r2, [r3, #8]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	1ad3      	subs	r3, r2, r3
 800bed4:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800bed6:	461a      	mov	r2, r3
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fce4 	bl	800c8a6 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      }
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7ff f86a 	bl	800afba <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	4618      	mov	r0, r3
 800beea:	3708      	adds	r7, #8
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 800bef0:	b5b0      	push	{r4, r5, r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681c      	ldr	r4, [r3, #0]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	4618      	mov	r0, r3
 800bf04:	f000 fce2 	bl	800c8cc <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800bf08:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f000 fce7 	bl	800c8e2 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7ff ffd1 	bl	800bebe <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3708      	adds	r7, #8
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bdb0      	pop	{r4, r5, r7, pc}

0800bf26 <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 800bf26:	b590      	push	{r4, r7, lr}
 800bf28:	b083      	sub	sp, #12
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
 800bf2e:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800bf30:	206c      	movs	r0, #108	@ 0x6c
 800bf32:	f01c fb3d 	bl	80285b0 <_Znwj>
 800bf36:	4603      	mov	r3, r0
 800bf38:	461c      	mov	r4, r3
 800bf3a:	6838      	ldr	r0, [r7, #0]
 800bf3c:	f000 fcdf 	bl	800c8fe <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>
 800bf40:	4603      	mov	r3, r0
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4619      	mov	r1, r3
 800bf46:	4620      	mov	r0, r4
 800bf48:	f7fa ffce 	bl	8006ee8 <_ZN17JsonConfigHandlerC1EP6Remora>
 800bf4c:	4621      	mov	r1, r4
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fcf0 	bl	800c934 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd90      	pop	{r4, r7, pc}

0800bf5c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800bf66:	6838      	ldr	r0, [r7, #0]
 800bf68:	f000 fd13 	bl	800c992 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	4619      	mov	r1, r3
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fcee 	bl	800c952 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800bf76:	6838      	ldr	r0, [r7, #0]
 800bf78:	f000 fd20 	bl	800c9bc <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f000 fd29 	bl	800c9d6 <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 fd19 	bl	800c9bc <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800bf8a:	687b      	ldr	r3, [r7, #4]
      }
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800bf94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
 800bfa0:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800bfa2:	f44f 7011 	mov.w	r0, #580	@ 0x244
 800bfa6:	f01c fb03 	bl	80285b0 <_Znwj>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	461e      	mov	r6, r3
 800bfae:	68b8      	ldr	r0, [r7, #8]
 800bfb0:	f000 fd1c 	bl	800c9ec <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	681c      	ldr	r4, [r3, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fd22 	bl	800ca02 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	681d      	ldr	r5, [r3, #0]
 800bfc2:	6838      	ldr	r0, [r7, #0]
 800bfc4:	f000 fd28 	bl	800ca18 <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	462a      	mov	r2, r5
 800bfce:	4621      	mov	r1, r4
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	f7f4 fef3 	bl	8000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 800bfd6:	4631      	mov	r1, r6
 800bfd8:	68f8      	ldr	r0, [r7, #12]
 800bfda:	f000 fd38 	bl	800ca4e <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	3714      	adds	r7, #20
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bfe6 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800bfe6:	b590      	push	{r4, r7, lr}
 800bfe8:	b085      	sub	sp, #20
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4618      	mov	r0, r3
 800bff2:	f000 fd3b 	bl	800ca6c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800bff6:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00c      	beq.n	800c01a <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f000 fd40 	bl	800ca86 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 800c006:	4604      	mov	r4, r0
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	f000 fd49 	bl	800caa0 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>
 800c00e:	4603      	mov	r3, r0
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4619      	mov	r1, r3
 800c014:	4620      	mov	r0, r4
 800c016:	f000 fd4e 	bl	800cab6 <_ZNKSt14default_deleteI8SPICommsEclEPS0_>
	__ptr = pointer();
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2200      	movs	r2, #0
 800c01e:	601a      	str	r2, [r3, #0]
      }
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4618      	mov	r0, r3
 800c024:	3714      	adds	r7, #20
 800c026:	46bd      	mov	sp, r7
 800c028:	bd90      	pop	{r4, r7, pc}

0800c02a <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_NonArray<_Tp>>
    make_shared(_Args&&... __args)
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b084      	sub	sp, #16
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
    {
      using _Alloc = allocator<void>;
      _Alloc __a;
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
			     std::forward<_Args>(__args)...);
 800c032:	f107 030c 	add.w	r3, r7, #12
 800c036:	4619      	mov	r1, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 fd4d 	bl	800cad8 <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 800c046:	b590      	push	{r4, r7, lr}
 800c048:	b083      	sub	sp, #12
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 800c050:	687c      	ldr	r4, [r7, #4]
 800c052:	6838      	ldr	r0, [r7, #0]
 800c054:	f000 fd4f 	bl	800caf6 <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>
 800c058:	4603      	mov	r3, r0
 800c05a:	4619      	mov	r1, r3
 800c05c:	4620      	mov	r0, r4
 800c05e:	f000 fd55 	bl	800cb0c <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 800c062:	687b      	ldr	r3, [r7, #4]
      }
 800c064:	4618      	mov	r0, r3
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd90      	pop	{r4, r7, pc}

0800c06c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
	return _M_get();
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fd68 	bl	800cb4a <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800c07a:	4603      	mov	r3, r0
      }
 800c07c:	4618      	mov	r0, r3
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	4618      	mov	r0, r3
 800c090:	370c      	adds	r7, #12
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b084      	sub	sp, #16
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	60f8      	str	r0, [r7, #12]
 800c0a2:	60b9      	str	r1, [r7, #8]
 800c0a4:	607a      	str	r2, [r7, #4]
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	68b9      	ldr	r1, [r7, #8]
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f000 fd70 	bl	800cb92 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3710      	adds	r7, #16
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 800c0bc:	b5b0      	push	{r4, r5, r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 800c0c6:	687c      	ldr	r4, [r7, #4]
 800c0c8:	6838      	ldr	r0, [r7, #0]
 800c0ca:	f000 fd4a 	bl	800cb62 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 800c0ce:	4605      	mov	r5, r0
 800c0d0:	6838      	ldr	r0, [r7, #0]
 800c0d2:	f000 fcd8 	bl	800ca86 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f000 fd4f 	bl	800cb7c <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f7ff ffd8 	bl	800c09a <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>
	{ }
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bdb0      	pop	{r4, r5, r7, pc}

0800c0f4 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800c0f4:	b590      	push	{r4, r7, lr}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 fd5d 	bl	800cbbe <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c104:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00c      	beq.n	800c128 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 fd62 	bl	800cbd8 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>
 800c114:	4604      	mov	r4, r0
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f000 fd6b 	bl	800cbf2 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 800c11c:	4603      	mov	r3, r0
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4619      	mov	r1, r3
 800c122:	4620      	mov	r0, r4
 800c124:	f000 fd70 	bl	800cc08 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
	__ptr = pointer();
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2200      	movs	r2, #0
 800c12c:	601a      	str	r2, [r3, #0]
      }
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4618      	mov	r0, r3
 800c132:	3714      	adds	r7, #20
 800c134:	46bd      	mov	sp, r7
 800c136:	bd90      	pop	{r4, r7, pc}

0800c138 <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c13c:	b08e      	sub	sp, #56	@ 0x38
 800c13e:	af02      	add	r7, sp, #8
 800c140:	60f8      	str	r0, [r7, #12]
 800c142:	60b9      	str	r1, [r7, #8]
 800c144:	607a      	str	r2, [r7, #4]
 800c146:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c148:	2044      	movs	r0, #68	@ 0x44
 800c14a:	f01c fa31 	bl	80285b0 <_Znwj>
 800c14e:	4603      	mov	r3, r0
 800c150:	4698      	mov	r8, r3
 800c152:	68b8      	ldr	r0, [r7, #8]
 800c154:	f000 fd69 	bl	800cc2a <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c158:	4604      	mov	r4, r0
 800c15a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c15e:	4618      	mov	r0, r3
 800c160:	f01c fa37 	bl	80285d2 <_ZNSaIcEC1Ev>
 800c164:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c168:	f107 0314 	add.w	r3, r7, #20
 800c16c:	4621      	mov	r1, r4
 800c16e:	4618      	mov	r0, r3
 800c170:	f7f7 fb40 	bl	80037f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 fd63 	bl	800cc40 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800c17a:	4603      	mov	r3, r0
 800c17c:	681d      	ldr	r5, [r3, #0]
 800c17e:	6838      	ldr	r0, [r7, #0]
 800c180:	f000 fd69 	bl	800cc56 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800c184:	4603      	mov	r3, r0
 800c186:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c18a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c18c:	f000 fd6e 	bl	800cc6c <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800c190:	4603      	mov	r3, r0
 800c192:	681c      	ldr	r4, [r3, #0]
 800c194:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c196:	f000 fd74 	bl	800cc82 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800c19a:	4603      	mov	r3, r0
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	f107 0114 	add.w	r1, r7, #20
 800c1a4:	9301      	str	r3, [sp, #4]
 800c1a6:	9400      	str	r4, [sp, #0]
 800c1a8:	4633      	mov	r3, r6
 800c1aa:	462a      	mov	r2, r5
 800c1ac:	4640      	mov	r0, r8
 800c1ae:	f00e fc97 	bl	801aae0 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800c1b2:	4641      	mov	r1, r8
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f000 fd7f 	bl	800ccb8 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c1ba:	f107 0314 	add.w	r3, r7, #20
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f01c faf1 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c1c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f01c fa03 	bl	80285d4 <_ZNSaIcED1Ev>
 800c1ce:	bf00      	nop
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	3730      	adds	r7, #48	@ 0x30
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c1da <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b082      	sub	sp, #8
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800c1e4:	6838      	ldr	r0, [r7, #0]
 800c1e6:	f000 fd96 	bl	800cd16 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 fd71 	bl	800ccd6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800c1f4:	6838      	ldr	r0, [r7, #0]
 800c1f6:	f000 fda3 	bl	800cd40 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f000 fdac 	bl	800cd5a <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fd9c 	bl	800cd40 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800c208:	687b      	ldr	r3, [r7, #4]
      }
 800c20a:	4618      	mov	r0, r3
 800c20c:	3708      	adds	r7, #8
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c216:	b08e      	sub	sp, #56	@ 0x38
 800c218:	af02      	add	r7, sp, #8
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
 800c220:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c222:	2044      	movs	r0, #68	@ 0x44
 800c224:	f01c f9c4 	bl	80285b0 <_Znwj>
 800c228:	4603      	mov	r3, r0
 800c22a:	4698      	mov	r8, r3
 800c22c:	68b8      	ldr	r0, [r7, #8]
 800c22e:	f000 fd9f 	bl	800cd70 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c232:	4604      	mov	r4, r0
 800c234:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c238:	4618      	mov	r0, r3
 800c23a:	f01c f9ca 	bl	80285d2 <_ZNSaIcEC1Ev>
 800c23e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c242:	f107 0314 	add.w	r3, r7, #20
 800c246:	4621      	mov	r1, r4
 800c248:	4618      	mov	r0, r3
 800c24a:	f7f7 fad3 	bl	80037f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 fcf6 	bl	800cc40 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800c254:	4603      	mov	r3, r0
 800c256:	681d      	ldr	r5, [r3, #0]
 800c258:	6838      	ldr	r0, [r7, #0]
 800c25a:	f000 fcfc 	bl	800cc56 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800c25e:	4603      	mov	r3, r0
 800c260:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c264:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c266:	f000 fd01 	bl	800cc6c <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800c26a:	4603      	mov	r3, r0
 800c26c:	681c      	ldr	r4, [r3, #0]
 800c26e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c270:	f000 fd07 	bl	800cc82 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800c274:	4603      	mov	r3, r0
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	f107 0114 	add.w	r1, r7, #20
 800c27e:	9301      	str	r3, [sp, #4]
 800c280:	9400      	str	r4, [sp, #0]
 800c282:	4633      	mov	r3, r6
 800c284:	462a      	mov	r2, r5
 800c286:	4640      	mov	r0, r8
 800c288:	f00e fc2a 	bl	801aae0 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800c28c:	4641      	mov	r1, r8
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f000 fd12 	bl	800ccb8 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c294:	f107 0314 	add.w	r3, r7, #20
 800c298:	4618      	mov	r0, r3
 800c29a:	f01c fa84 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c29e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f01c f996 	bl	80285d4 <_ZNSaIcED1Ev>
 800c2a8:	bf00      	nop
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	3730      	adds	r7, #48	@ 0x30
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c2b4 <_ZSt11make_uniqueI9pruThreadJRA7_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b8:	b08e      	sub	sp, #56	@ 0x38
 800c2ba:	af02      	add	r7, sp, #8
 800c2bc:	60f8      	str	r0, [r7, #12]
 800c2be:	60b9      	str	r1, [r7, #8]
 800c2c0:	607a      	str	r2, [r7, #4]
 800c2c2:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c2c4:	2044      	movs	r0, #68	@ 0x44
 800c2c6:	f01c f973 	bl	80285b0 <_Znwj>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	4698      	mov	r8, r3
 800c2ce:	68b8      	ldr	r0, [r7, #8]
 800c2d0:	f000 fd59 	bl	800cd86 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f01c f979 	bl	80285d2 <_ZNSaIcEC1Ev>
 800c2e0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c2e4:	f107 0314 	add.w	r3, r7, #20
 800c2e8:	4621      	mov	r1, r4
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7f7 fa82 	bl	80037f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fca5 	bl	800cc40 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	681d      	ldr	r5, [r3, #0]
 800c2fa:	6838      	ldr	r0, [r7, #0]
 800c2fc:	f000 fcab 	bl	800cc56 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800c300:	4603      	mov	r3, r0
 800c302:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c306:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c308:	f000 fcb0 	bl	800cc6c <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800c30c:	4603      	mov	r3, r0
 800c30e:	681c      	ldr	r4, [r3, #0]
 800c310:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c312:	f000 fcb6 	bl	800cc82 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800c316:	4603      	mov	r3, r0
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	f107 0114 	add.w	r1, r7, #20
 800c320:	9301      	str	r3, [sp, #4]
 800c322:	9400      	str	r4, [sp, #0]
 800c324:	4633      	mov	r3, r6
 800c326:	462a      	mov	r2, r5
 800c328:	4640      	mov	r0, r8
 800c32a:	f00e fbd9 	bl	801aae0 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800c32e:	4641      	mov	r1, r8
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f000 fcc1 	bl	800ccb8 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c336:	f107 0314 	add.w	r3, r7, #20
 800c33a:	4618      	mov	r0, r3
 800c33c:	f01c fa33 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c340:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c344:	4618      	mov	r0, r3
 800c346:	f01c f945 	bl	80285d4 <_ZNSaIcED1Ev>
 800c34a:	bf00      	nop
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	3730      	adds	r7, #48	@ 0x30
 800c350:	46bd      	mov	sp, r7
 800c352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c356 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800c356:	b580      	push	{r7, lr}
 800c358:	b082      	sub	sp, #8
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
	return get();
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f7ff fcdf 	bl	800bd22 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 800c364:	4603      	mov	r3, r0
      }
 800c366:	4618      	mov	r0, r3
 800c368:	3708      	adds	r7, #8
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 800c36e:	b580      	push	{r7, lr}
 800c370:	b082      	sub	sp, #8
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
 800c376:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	683a      	ldr	r2, [r7, #0]
 800c37c:	4611      	mov	r1, r2
 800c37e:	4618      	mov	r0, r3
 800c380:	f000 fd0c 	bl	800cd9c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	4618      	mov	r0, r3
 800c388:	3708      	adds	r7, #8
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800c38e:	b580      	push	{r7, lr}
 800c390:	b084      	sub	sp, #16
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	f107 030c 	add.w	r3, r7, #12
 800c39c:	4611      	mov	r1, r2
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f000 fd12 	bl	800cdc8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b084      	sub	sp, #16
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	1d1a      	adds	r2, r3, #4
 800c3ba:	f107 030c 	add.w	r3, r7, #12
 800c3be:	4611      	mov	r1, r2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f000 fd01 	bl	800cdc8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c3d0:	b590      	push	{r4, r7, lr}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 fd04 	bl	800cde8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	681c      	ldr	r4, [r3, #0]
 800c3e4:	6838      	ldr	r0, [r7, #0]
 800c3e6:	f000 fcff 	bl	800cde8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	429c      	cmp	r4, r3
 800c3f0:	bf14      	ite	ne
 800c3f2:	2301      	movne	r3, #1
 800c3f4:	2300      	moveq	r3, #0
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd90      	pop	{r4, r7, pc}

0800c400 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800c400:	b480      	push	{r7}
 800c402:	b083      	sub	sp, #12
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
	++_M_current;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f103 0208 	add.w	r2, r3, #8
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	601a      	str	r2, [r3, #0]
	return *this;
 800c414:	687b      	ldr	r3, [r7, #4]
      }
 800c416:	4618      	mov	r0, r3
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr

0800c422 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800c422:	b480      	push	{r7}
 800c424:	b083      	sub	sp, #12
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4618      	mov	r0, r3
 800c430:	370c      	adds	r7, #12
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr

0800c43a <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>:
      element_type*
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const noexcept
 800c43a:	b480      	push	{r7}
 800c43c:	b083      	sub	sp, #12
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
      { return _M_ptr != nullptr; }
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	bf14      	ite	ne
 800c44a:	2301      	movne	r3, #1
 800c44c:	2300      	moveq	r3, #0
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	4618      	mov	r0, r3
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr

0800c45c <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
	return _M_get();
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 fcca 	bl	800cdfe <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800c46a:	4603      	mov	r3, r0
      }
 800c46c:	4618      	mov	r0, r3
 800c46e:	3708      	adds	r7, #8
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
	return get();
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 fcca 	bl	800ce16 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>
 800c482:	4603      	mov	r3, r0
      }
 800c484:	4618      	mov	r0, r3
 800c486:	3708      	adds	r7, #8
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>:
  detail::ElementProxy<JsonArray> operator[](T index) const {
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
    return {*this, size_t(index)};
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	ca06      	ldmia	r2, {r1, r2}
 800c49e:	68f8      	ldr	r0, [r7, #12]
 800c4a0:	f000 fcc6 	bl	800ce30 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>
  }
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	3710      	adds	r7, #16
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
    return as<T>();
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 fd29 	bl	800cf0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>
 800c4ba:	4603      	mov	r3, r0
  }
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
    this->set(src);
 800c4ce:	6839      	ldr	r1, [r7, #0]
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 fd50 	bl	800cf76 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>
    return *this;
 800c4d6:	687b      	ldr	r3, [r7, #4]
  }
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3708      	adds	r7, #8
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>:
  operator T() const {
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
    return as<T>();
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6839      	ldr	r1, [r7, #0]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 fd4f 	bl	800cf92 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>
 800c4f4:	bf00      	nop
  }
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	3708      	adds	r7, #8
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b082      	sub	sp, #8
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d004      	beq.n	800c522 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7fe f9c3 	bl	800a8a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4618      	mov	r0, r3
 800c526:	3708      	adds	r7, #8
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4618      	mov	r0, r3
 800c538:	370c      	adds	r7, #12
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr

0800c542 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backEOS2_>:
      }

#if __cplusplus >= 201103L
      _GLIBCXX20_CONSTEXPR
      void
      push_back(value_type&& __x)
 800c542:	b580      	push	{r7, lr}
 800c544:	b082      	sub	sp, #8
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
 800c54a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800c54c:	6838      	ldr	r0, [r7, #0]
 800c54e:	f7ff ffed 	bl	800c52c <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800c552:	4603      	mov	r3, r0
 800c554:	4619      	mov	r1, r3
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 fd3f 	bl	800cfda <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>
 800c55c:	bf00      	nop
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
      { }
 800c56c:	4a04      	ldr	r2, [pc, #16]	@ (800c580 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	601a      	str	r2, [r3, #0]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4618      	mov	r0, r3
 800c576:	370c      	adds	r7, #12
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr
 800c580:	0802b38c 	.word	0x0802b38c

0800c584 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
      { }
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f7ff ffe9 	bl	800c564 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800c592:	210c      	movs	r1, #12
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f01b fffa 	bl	802858e <_ZdlPvj>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4618      	mov	r0, r3
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>:
  if (dup)
    setRawString(dup);
}

template <typename TAdaptedString>
inline bool VariantData::setString(TAdaptedString value,
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b086      	sub	sp, #24
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	4638      	mov	r0, r7
 800c5ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                   ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first

  if (value.isNull())
 800c5b2:	463b      	mov	r3, r7
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7f8 fea4 	bl	8005302 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x20>
    return false;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	e021      	b.n	800c608 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>

  if (value.isStatic()) {
 800c5c4:	463b      	mov	r3, r7
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fe f9fe 	bl	800a9c8 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00a      	beq.n	800c5e8 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x44>
    setLinkedString(value.data());
 800c5d2:	463b      	mov	r3, r7
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7f8 feb1 	bl	800533c <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	4619      	mov	r1, r3
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f7fe faa0 	bl	800ab24 <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>
    return true;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e00f      	b.n	800c608 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  auto dup = resources->saveString(value);
 800c5e8:	6a38      	ldr	r0, [r7, #32]
 800c5ea:	463b      	mov	r3, r7
 800c5ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5ee:	f000 fd27 	bl	800d040 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>
 800c5f2:	6178      	str	r0, [r7, #20]
  if (dup) {
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d005      	beq.n	800c606 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x62>
    setOwnedString(dup);
 800c5fa:	6979      	ldr	r1, [r7, #20]
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f7f9 f8ee 	bl	80057de <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 800c602:	2301      	movs	r3, #1
 800c604:	e000      	b.n	800c608 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  return false;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3718      	adds	r7, #24
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800c610:	b590      	push	{r4, r7, lr}
 800c612:	b085      	sub	sp, #20
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 facf 	bl	800cbbe <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c620:	4603      	mov	r3, r0
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800c626:	683c      	ldr	r4, [r7, #0]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fac8 	bl	800cbbe <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c62e:	4603      	mov	r3, r0
 800c630:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d007      	beq.n	800c648 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 f81e 	bl	800c67a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800c63e:	4603      	mov	r3, r0
 800c640:	68f9      	ldr	r1, [r7, #12]
 800c642:	4618      	mov	r0, r3
 800c644:	f000 fae0 	bl	800cc08 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
      }
 800c648:	bf00      	nop
 800c64a:	3714      	adds	r7, #20
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd90      	pop	{r4, r7, pc}

0800c650 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 fab0 	bl	800cbbe <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c65e:	4603      	mov	r3, r0
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 faaa 	bl	800cbbe <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2200      	movs	r2, #0
 800c66e:	601a      	str	r2, [r3, #0]
	return __p;
 800c670:	68fb      	ldr	r3, [r7, #12]
      }
 800c672:	4618      	mov	r0, r3
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b082      	sub	sp, #8
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4618      	mov	r0, r3
 800c686:	f000 fd01 	bl	800d08c <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c68a:	4603      	mov	r3, r0
 800c68c:	4618      	mov	r0, r3
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	370c      	adds	r7, #12
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr

0800c6aa <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b082      	sub	sp, #8
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 fcf5 	bl	800d0a4 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b082      	sub	sp, #8
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 fcf4 	bl	800d0be <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3708      	adds	r7, #8
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 fcf7 	bl	800d0de <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b082      	sub	sp, #8
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	4618      	mov	r0, r3
 800c706:	f000 f959 	bl	800c9bc <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800c70a:	4603      	mov	r3, r0
 800c70c:	4618      	mov	r0, r3
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4618      	mov	r0, r3
 800c720:	370c      	adds	r7, #12
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr

0800c72a <_ZN17JsonConfigHandlerD1Ev>:
#include "../lib/ArduinoJson7/ArduinoJson.h"
#include "fatfs.h"

class Remora; //forward declaration

class JsonConfigHandler {
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b082      	sub	sp, #8
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	3320      	adds	r3, #32
 800c736:	4618      	mov	r0, r3
 800c738:	f7fe fa8f 	bl	800ac5a <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	3304      	adds	r3, #4
 800c740:	4618      	mov	r0, r3
 800c742:	f01c f830 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4618      	mov	r0, r3
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c750:	b590      	push	{r4, r7, lr}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c75a:	683c      	ldr	r4, [r7, #0]
 800c75c:	2c00      	cmp	r4, #0
 800c75e:	d006      	beq.n	800c76e <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_+0x1e>
 800c760:	4620      	mov	r0, r4
 800c762:	f7ff ffe2 	bl	800c72a <_ZN17JsonConfigHandlerD1Ev>
 800c766:	216c      	movs	r1, #108	@ 0x6c
 800c768:	4620      	mov	r0, r4
 800c76a:	f01b ff10 	bl	802858e <_ZdlPvj>
      }
 800c76e:	bf00      	nop
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	bd90      	pop	{r4, r7, pc}

0800c776 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800c776:	b580      	push	{r7, lr}
 800c778:	b082      	sub	sp, #8
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	601a      	str	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	3304      	adds	r3, #4
 800c788:	4618      	mov	r0, r3
 800c78a:	f000 fcb5 	bl	800d0f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4618      	mov	r0, r3
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f000 fcb6 	bl	800d114 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3708      	adds	r7, #8
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}

0800c7b2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c7b2:	b580      	push	{r7, lr}
 800c7b4:	b082      	sub	sp, #8
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f000 fcb9 	bl	800d134 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3708      	adds	r7, #8
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f000 fab2 	bl	800cd40 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c7e6:	b480      	push	{r7}
 800c7e8:	b083      	sub	sp, #12
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <_ZN9pruThreadD1Ev>:

using namespace std;

class Module;

class pruThread
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	3338      	adds	r3, #56	@ 0x38
 800c808:	4618      	mov	r0, r3
 800c80a:	f7ff fb71 	bl	800bef0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	332c      	adds	r3, #44	@ 0x2c
 800c812:	4618      	mov	r0, r3
 800c814:	f7ff fb6c 	bl	800bef0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4618      	mov	r0, r3
 800c81c:	f01b ffc3 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	4618      	mov	r0, r3
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <_ZNKSt14default_deleteI9pruThreadEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c82a:	b590      	push	{r4, r7, lr}
 800c82c:	b083      	sub	sp, #12
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
 800c832:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c834:	683c      	ldr	r4, [r7, #0]
 800c836:	2c00      	cmp	r4, #0
 800c838:	d006      	beq.n	800c848 <_ZNKSt14default_deleteI9pruThreadEclEPS0_+0x1e>
 800c83a:	4620      	mov	r0, r4
 800c83c:	f7ff ffde 	bl	800c7fc <_ZN9pruThreadD1Ev>
 800c840:	2144      	movs	r1, #68	@ 0x44
 800c842:	4620      	mov	r0, r4
 800c844:	f01b fea3 	bl	802858e <_ZdlPvj>
      }
 800c848:	bf00      	nop
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd90      	pop	{r4, r7, pc}

0800c850 <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 fc78 	bl	800d14e <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	4618      	mov	r0, r3
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c868:	b480      	push	{r7}
 800c86a:	b083      	sub	sp, #12
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	601a      	str	r2, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	605a      	str	r2, [r3, #4]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2200      	movs	r2, #0
 800c880:	609a      	str	r2, [r3, #8]
	{ }
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4618      	mov	r0, r3
 800c886:	370c      	adds	r7, #12
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4618      	mov	r0, r3
 800c89c:	370c      	adds	r7, #12
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr

0800c8a6 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b084      	sub	sp, #16
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	60f8      	str	r0, [r7, #12]
 800c8ae:	60b9      	str	r1, [r7, #8]
 800c8b0:	607a      	str	r2, [r7, #4]
	if (__p)
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d005      	beq.n	800c8c4 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	68b9      	ldr	r1, [r7, #8]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f000 fc50 	bl	800d164 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>
      }
 800c8c4:	bf00      	nop
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	370c      	adds	r7, #12
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr

0800c8e2 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b084      	sub	sp, #16
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	60f8      	str	r0, [r7, #12]
 800c8ea:	60b9      	str	r1, [r7, #8]
 800c8ec:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800c8ee:	68b9      	ldr	r1, [r7, #8]
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f000 fc46 	bl	800d182 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>
    }
 800c8f6:	bf00      	nop
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c8fe:	b480      	push	{r7}
 800c900:	b083      	sub	sp, #12
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4618      	mov	r0, r3
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	683a      	ldr	r2, [r7, #0]
 800c922:	4611      	mov	r1, r2
 800c924:	4618      	mov	r0, r3
 800c926:	f000 fc39 	bl	800d19c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	4618      	mov	r0, r3
 800c92e:	3708      	adds	r7, #8
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6839      	ldr	r1, [r7, #0]
 800c942:	4618      	mov	r0, r3
 800c944:	f7ff ffe6 	bl	800c914 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4618      	mov	r0, r3
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800c952:	b590      	push	{r4, r7, lr}
 800c954:	b085      	sub	sp, #20
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
 800c95a:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f7ff febf 	bl	800c6e0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800c962:	4603      	mov	r3, r0
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800c968:	683c      	ldr	r4, [r7, #0]
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7ff feb8 	bl	800c6e0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800c970:	4603      	mov	r3, r0
 800c972:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d007      	beq.n	800c98a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 f81e 	bl	800c9bc <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800c980:	4603      	mov	r3, r0
 800c982:	68f9      	ldr	r1, [r7, #12]
 800c984:	4618      	mov	r0, r3
 800c986:	f7ff fee3 	bl	800c750 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
      }
 800c98a:	bf00      	nop
 800c98c:	3714      	adds	r7, #20
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd90      	pop	{r4, r7, pc}

0800c992 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800c992:	b580      	push	{r7, lr}
 800c994:	b084      	sub	sp, #16
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7ff fea0 	bl	800c6e0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f7ff fe9a 	bl	800c6e0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	601a      	str	r2, [r3, #0]
	return __p;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
      }
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3710      	adds	r7, #16
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f000 fbfc 	bl	800d1c4 <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c9d6:	b480      	push	{r7}
 800c9d8:	b083      	sub	sp, #12
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	370c      	adds	r7, #12
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr

0800ca02 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ca02:	b480      	push	{r7}
 800ca04:	b083      	sub	sp, #12
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	4618      	mov	r0, r3
 800ca24:	370c      	adds	r7, #12
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr

0800ca2e <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800ca2e:	b580      	push	{r7, lr}
 800ca30:	b082      	sub	sp, #8
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
 800ca36:	6039      	str	r1, [r7, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	683a      	ldr	r2, [r7, #0]
 800ca3c:	4611      	mov	r1, r2
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f000 fbcc 	bl	800d1dc <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4618      	mov	r0, r3
 800ca48:	3708      	adds	r7, #8
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b082      	sub	sp, #8
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6839      	ldr	r1, [r7, #0]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7ff ffe6 	bl	800ca2e <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4618      	mov	r0, r3
 800ca66:	3708      	adds	r7, #8
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f000 fbc4 	bl	800d204 <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3708      	adds	r7, #8
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b082      	sub	sp, #8
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4618      	mov	r0, r3
 800ca92:	f000 fbc4 	bl	800d21e <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>
 800ca96:	4603      	mov	r3, r0
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3708      	adds	r7, #8
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	4618      	mov	r0, r3
 800caac:	370c      	adds	r7, #12
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr

0800cab6 <_ZNKSt14default_deleteI8SPICommsEclEPS0_>:
      operator()(_Tp* __ptr) const
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b082      	sub	sp, #8
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
 800cabe:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d004      	beq.n	800cad0 <_ZNKSt14default_deleteI8SPICommsEclEPS0_+0x1a>
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	3204      	adds	r2, #4
 800caca:	6812      	ldr	r2, [r2, #0]
 800cacc:	4618      	mov	r0, r3
 800cace:	4790      	blx	r2
      }
 800cad0:	bf00      	nop
 800cad2:	3708      	adds	r7, #8
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6839      	ldr	r1, [r7, #0]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 fba6 	bl	800d238 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	4618      	mov	r0, r3
 800caf0:	3708      	adds	r7, #8
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800caf6:	b480      	push	{r7}
 800caf8:	b083      	sub	sp, #12
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	4618      	mov	r0, r3
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 800cb16:	6838      	ldr	r0, [r7, #0]
 800cb18:	f000 fba8 	bl	800d26c <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	f107 0308 	add.w	r3, r7, #8
 800cb22:	4611      	mov	r1, r2
 800cb24:	4618      	mov	r0, r3
 800cb26:	f000 fbac 	bl	800d282 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800cb2a:	f107 0308 	add.w	r3, r7, #8
 800cb2e:	6879      	ldr	r1, [r7, #4]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f000 fbc4 	bl	800d2be <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 800cb36:	f107 0308 	add.w	r3, r7, #8
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7fe fa22 	bl	800af84 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 800cb40:	687b      	ldr	r3, [r7, #4]
      }
 800cb42:	4618      	mov	r0, r3
 800cb44:	3710      	adds	r7, #16
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b082      	sub	sp, #8
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 fbca 	bl	800d2ec <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b082      	sub	sp, #8
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f000 fbc9 	bl	800d304 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 800cb72:	4603      	mov	r3, r0
 800cb74:	4618      	mov	r0, r3
 800cb76:	3708      	adds	r7, #8
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4618      	mov	r0, r3
 800cb88:	370c      	adds	r7, #12
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr

0800cb92 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>:
	__uniq_ptr_impl(pointer __p, _Del&& __d)
 800cb92:	b590      	push	{r4, r7, lr}
 800cb94:	b085      	sub	sp, #20
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	60f8      	str	r0, [r7, #12]
 800cb9a:	60b9      	str	r1, [r7, #8]
 800cb9c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800cb9e:	68fc      	ldr	r4, [r7, #12]
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f7ff ffeb 	bl	800cb7c <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cba6:	4602      	mov	r2, r0
 800cba8:	f107 0308 	add.w	r3, r7, #8
 800cbac:	4619      	mov	r1, r3
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f000 fbbd 	bl	800d32e <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3714      	adds	r7, #20
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd90      	pop	{r4, r7, pc}

0800cbbe <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b082      	sub	sp, #8
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f000 fbc9 	bl	800d360 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3708      	adds	r7, #8
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7ff fd49 	bl	800c67a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	4618      	mov	r0, r3
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800cbf2:	b480      	push	{r7}
 800cbf4:	b083      	sub	sp, #12
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	370c      	adds	r7, #12
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>:
      operator()(_Tp* __ptr) const
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d004      	beq.n	800cc22 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_+0x1a>
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	3204      	adds	r2, #4
 800cc1c:	6812      	ldr	r2, [r2, #0]
 800cc1e:	4618      	mov	r0, r3
 800cc20:	4790      	blx	r2
      }
 800cc22:	bf00      	nop
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cc2a:	b480      	push	{r7}
 800cc2c:	b083      	sub	sp, #12
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4618      	mov	r0, r3
 800cc36:	370c      	adds	r7, #12
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	370c      	adds	r7, #12
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr

0800cc56 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cc56:	b480      	push	{r7}
 800cc58:	b083      	sub	sp, #12
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4618      	mov	r0, r3
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	4618      	mov	r0, r3
 800cc78:	370c      	adds	r7, #12
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr

0800cc82 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cc82:	b480      	push	{r7}
 800cc84:	b083      	sub	sp, #12
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	370c      	adds	r7, #12
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	683a      	ldr	r2, [r7, #0]
 800cca6:	4611      	mov	r1, r2
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f000 fb66 	bl	800d37a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3708      	adds	r7, #8
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6839      	ldr	r1, [r7, #0]
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7ff ffe6 	bl	800cc98 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800ccd6:	b590      	push	{r4, r7, lr}
 800ccd8:	b085      	sub	sp, #20
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f7ff fd66 	bl	800c7b2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800cce6:	4603      	mov	r3, r0
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800ccec:	683c      	ldr	r4, [r7, #0]
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7ff fd5f 	bl	800c7b2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d007      	beq.n	800cd0e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 f81e 	bl	800cd40 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800cd04:	4603      	mov	r3, r0
 800cd06:	68f9      	ldr	r1, [r7, #12]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7ff fd8e 	bl	800c82a <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
      }
 800cd0e:	bf00      	nop
 800cd10:	3714      	adds	r7, #20
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd90      	pop	{r4, r7, pc}

0800cd16 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b084      	sub	sp, #16
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7ff fd47 	bl	800c7b2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800cd24:	4603      	mov	r3, r0
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f7ff fd41 	bl	800c7b2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2200      	movs	r2, #0
 800cd34:	601a      	str	r2, [r3, #0]
	return __p;
 800cd36:	68fb      	ldr	r3, [r7, #12]
      }
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f000 fb29 	bl	800d3a2 <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800cd50:	4603      	mov	r3, r0
 800cd52:	4618      	mov	r0, r3
 800cd54:	3708      	adds	r7, #8
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cd5a:	b480      	push	{r7}
 800cd5c:	b083      	sub	sp, #12
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	4618      	mov	r0, r3
 800cd66:	370c      	adds	r7, #12
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr

0800cd70 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	370c      	adds	r7, #12
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr

0800cd86 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cd86:	b480      	push	{r7}
 800cd88:	b083      	sub	sp, #12
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4618      	mov	r0, r3
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	601a      	str	r2, [r3, #0]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	1d1a      	adds	r2, r3, #4
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	4610      	mov	r0, r2
 800cdba:	f7ff fba0 	bl	800c4fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800cdc8:	b480      	push	{r7}
 800cdca:	b083      	sub	sp, #12
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	601a      	str	r2, [r3, #0]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	4618      	mov	r0, r3
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	370c      	adds	r7, #12
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr

0800cdfe <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b082      	sub	sp, #8
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 fad7 	bl	800d3ba <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3708      	adds	r7, #8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b082      	sub	sp, #8
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	4618      	mov	r0, r3
 800ce22:	f000 fad6 	bl	800d3d2 <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800ce26:	4603      	mov	r3, r0
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>:

  template <typename>
  friend class ElementProxy;

 public:
  ElementProxy(TUpstream upstream, size_t index)
 800ce30:	b480      	push	{r7}
 800ce32:	b085      	sub	sp, #20
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	1d38      	adds	r0, r7, #4
 800ce3a:	e880 0006 	stmia.w	r0, {r1, r2}
 800ce3e:	603b      	str	r3, [r7, #0]
      : upstream_(upstream), index_(index) {}
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	3304      	adds	r3, #4
 800ce44:	1d3a      	adds	r2, r7, #4
 800ce46:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce4a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	683a      	ldr	r2, [r7, #0]
 800ce52:	60da      	str	r2, [r3, #12]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	4618      	mov	r0, r3
 800ce58:	3714      	adds	r7, #20
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr

0800ce62 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>:
  const TDerived& derived() const {
 800ce62:	b480      	push	{r7}
 800ce64:	b083      	sub	sp, #12
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800ce6a:	687b      	ldr	r3, [r7, #4]
  }
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>:
    return *this;
  }

 private:
  // clang-format off
  ElementProxy(const ElementProxy& src)  // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
      : upstream_(src.upstream_), index_(src.index_) {}
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	683a      	ldr	r2, [r7, #0]
 800ce86:	3304      	adds	r3, #4
 800ce88:	3204      	adds	r2, #4
 800ce8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce8e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	68da      	ldr	r2, [r3, #12]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	60da      	str	r2, [r3, #12]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr

0800cea8 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 800cea8:	b082      	sub	sp, #8
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b082      	sub	sp, #8
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	6039      	str	r1, [r7, #0]
 800ceb4:	f107 0110 	add.w	r1, r7, #16
 800ceb8:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	3304      	adds	r3, #4
 800cec0:	6839      	ldr	r1, [r7, #0]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7ff ffd8 	bl	800ce78 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	3314      	adds	r3, #20
 800cecc:	f107 0210 	add.w	r2, r7, #16
 800ced0:	ca07      	ldmia	r2, {r0, r1, r2}
 800ced2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	4618      	mov	r0, r3
 800ceda:	3708      	adds	r7, #8
 800cedc:	46bd      	mov	sp, r7
 800cede:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cee2:	b002      	add	sp, #8
 800cee4:	4770      	bx	lr

0800cee6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800cee6:	b580      	push	{r7, lr}
 800cee8:	b082      	sub	sp, #8
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6078      	str	r0, [r7, #4]
 800ceee:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800cef0:	6838      	ldr	r0, [r7, #0]
 800cef2:	f000 fa7c 	bl	800d3ee <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800cef6:	4602      	mov	r2, r0
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	4611      	mov	r1, r2
 800cefc:	4618      	mov	r0, r3
 800cefe:	f000 fa81 	bl	800d404 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>
 800cf02:	bf00      	nop
}
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800cf0c:	b590      	push	{r4, r7, lr}
 800cf0e:	b087      	sub	sp, #28
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	617b      	str	r3, [r7, #20]
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800cf1c:	6938      	ldr	r0, [r7, #16]
 800cf1e:	f000 fd2a 	bl	800d976 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800cf22:	4604      	mov	r4, r0
 800cf24:	6938      	ldr	r0, [r7, #16]
 800cf26:	f000 fd36 	bl	800d996 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	f107 0308 	add.w	r3, r7, #8
 800cf30:	4621      	mov	r1, r4
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7f8 fd95 	bl	8005a62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800cf38:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800cf3a:	f107 0308 	add.w	r3, r7, #8
 800cf3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cf42:	f7f9 fa87 	bl	8006454 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 800cf46:	4603      	mov	r3, r0
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	371c      	adds	r7, #28
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd90      	pop	{r4, r7, pc}

0800cf50 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800cf5a:	6838      	ldr	r0, [r7, #0]
 800cf5c:	f000 fa61 	bl	800d422 <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800cf60:	4602      	mov	r2, r0
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4611      	mov	r1, r2
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 fa66 	bl	800d438 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>
 800cf6c:	bf00      	nop
}
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	3708      	adds	r7, #8
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}

0800cf76 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>:
  bool set(const T& value) const {
 800cf76:	b580      	push	{r7, lr}
 800cf78:	b082      	sub	sp, #8
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
 800cf7e:	6039      	str	r1, [r7, #0]
    return doSet<Converter<TypeForConverter>>(value);
 800cf80:	6839      	ldr	r1, [r7, #0]
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 fa67 	bl	800d456 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>
 800cf88:	4603      	mov	r3, r0
  }
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3708      	adds	r7, #8
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800cf92:	b590      	push	{r4, r7, lr}
 800cf94:	b087      	sub	sp, #28
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
 800cf9a:	6039      	str	r1, [r7, #0]
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	617b      	str	r3, [r7, #20]
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 800cfa4:	6938      	ldr	r0, [r7, #16]
 800cfa6:	f000 ffd3 	bl	800df50 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>
 800cfaa:	4604      	mov	r4, r0
 800cfac:	6938      	ldr	r0, [r7, #16]
 800cfae:	f000 ffdf 	bl	800df70 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	f107 0308 	add.w	r3, r7, #8
 800cfb8:	4621      	mov	r1, r4
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7f8 fd7c 	bl	8005ab8 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 800cfc0:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f107 0308 	add.w	r3, r7, #8
 800cfc8:	e893 0006 	ldmia.w	r3, {r1, r2}
 800cfcc:	f7fd fde0 	bl	800ab90 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>
 800cfd0:	bf00      	nop
}
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	371c      	adds	r7, #28
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd90      	pop	{r4, r7, pc}

0800cfda <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800cfda:	b5b0      	push	{r4, r5, r7, lr}
 800cfdc:	b082      	sub	sp, #8
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
 800cfe2:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	685a      	ldr	r2, [r3, #4]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d012      	beq.n	800d016 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800cff0:	687c      	ldr	r4, [r7, #4]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	685d      	ldr	r5, [r3, #4]
 800cff6:	6838      	ldr	r0, [r7, #0]
 800cff8:	f000 fa3c 	bl	800d474 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cffc:	4603      	mov	r3, r0
 800cffe:	461a      	mov	r2, r3
 800d000:	4629      	mov	r1, r5
 800d002:	4620      	mov	r0, r4
 800d004:	f000 fa41 	bl	800d48a <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	f103 0208 	add.w	r2, r3, #8
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	605a      	str	r2, [r3, #4]
 800d014:	e00c      	b.n	800d030 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x56>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f7ff f9c9 	bl	800c3ae <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800d01c:	4604      	mov	r4, r0
 800d01e:	6838      	ldr	r0, [r7, #0]
 800d020:	f000 fa28 	bl	800d474 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d024:	4603      	mov	r3, r0
 800d026:	461a      	mov	r2, r3
 800d028:	4621      	mov	r1, r4
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 fa40 	bl	800d4b0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 fab9 	bl	800d5a8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4backEv>
 800d036:	4603      	mov	r3, r0
#endif
      }
 800d038:	4618      	mov	r0, r3
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bdb0      	pop	{r4, r5, r7, pc}

0800d040 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>:
  StringNode* saveString(TAdaptedString str) {
 800d040:	b580      	push	{r7, lr}
 800d042:	b088      	sub	sp, #32
 800d044:	af02      	add	r7, sp, #8
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	4638      	mov	r0, r7
 800d04a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (str.isNull())
 800d04e:	463b      	mov	r3, r7
 800d050:	4618      	mov	r0, r3
 800d052:	f7f8 f956 	bl	8005302 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d001      	beq.n	800d060 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x20>
      return 0;
 800d05c:	2300      	movs	r3, #0
 800d05e:	e011      	b.n	800d084 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x44>
    auto node = stringPool_.add(str, allocator_);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f103 0008 	add.w	r0, r3, #8
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	9300      	str	r3, [sp, #0]
 800d06c:	463b      	mov	r3, r7
 800d06e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d070:	f000 fab5 	bl	800d5de <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>
 800d074:	6178      	str	r0, [r7, #20]
    if (!node)
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d102      	bne.n	800d082 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x42>
      overflowed_ = true;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2201      	movs	r2, #1
 800d080:	711a      	strb	r2, [r3, #4]
    return node;
 800d082:	697b      	ldr	r3, [r7, #20]
  }
 800d084:	4618      	mov	r0, r3
 800d086:	3718      	adds	r7, #24
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 fae2 	bl	800d65e <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d09a:	4603      	mov	r3, r0
 800d09c:	4618      	mov	r0, r3
 800d09e:	3708      	adds	r7, #8
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f000 fae1 	bl	800d676 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3708      	adds	r7, #8
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b082      	sub	sp, #8
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f000 fae1 	bl	800d68e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f000 fae9 	bl	800d6a6 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3708      	adds	r7, #8
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b082      	sub	sp, #8
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f000 faea 	bl	800d6c2 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	601a      	str	r2, [r3, #0]
      { }
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	4618      	mov	r0, r3
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 fadc 	bl	800d6da <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4618      	mov	r0, r3
 800d126:	f000 fae4 	bl	800d6f2 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4618      	mov	r0, r3
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	4618      	mov	r0, r3
 800d140:	f000 fae5 	bl	800d70e <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d144:	4603      	mov	r3, r0
 800d146:	4618      	mov	r0, r3
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d14e:	b480      	push	{r7}
 800d150:	b083      	sub	sp, #12
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	4618      	mov	r0, r3
 800d15a:	370c      	adds	r7, #12
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d170:	687a      	ldr	r2, [r7, #4]
 800d172:	68b9      	ldr	r1, [r7, #8]
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f000 fad6 	bl	800d726 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>
 800d17a:	bf00      	nop
 800d17c:	3710      	adds	r7, #16
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d182:	b580      	push	{r7, lr}
 800d184:	b082      	sub	sp, #8
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
 800d18a:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800d18c:	6839      	ldr	r1, [r7, #0]
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 fad8 	bl	800d744 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>
    }
 800d194:	bf00      	nop
 800d196:	3708      	adds	r7, #8
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800d19c:	b590      	push	{r4, r7, lr}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7ff fa8c 	bl	800c6c6 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d1ae:	683c      	ldr	r4, [r7, #0]
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f7ff fa95 	bl	800c6e0 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	601c      	str	r4, [r3, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd90      	pop	{r4, r7, pc}

0800d1c4 <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 fad2 	bl	800d776 <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3708      	adds	r7, #8
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>:
 800d1dc:	b590      	push	{r4, r7, lr}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f000 fad0 	bl	800d78e <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d1ee:	683c      	ldr	r4, [r7, #0]
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f7ff fc3b 	bl	800ca6c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	601c      	str	r4, [r3, #0]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	370c      	adds	r7, #12
 800d200:	46bd      	mov	sp, r7
 800d202:	bd90      	pop	{r4, r7, pc}

0800d204 <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4618      	mov	r0, r3
 800d210:	f000 faca 	bl	800d7a8 <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d214:	4603      	mov	r3, r0
 800d216:	4618      	mov	r0, r3
 800d218:	3708      	adds	r7, #8
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800d21e:	b580      	push	{r7, lr}
 800d220:	b082      	sub	sp, #8
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	4618      	mov	r0, r3
 800d22a:	f000 fac9 	bl	800d7c0 <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800d22e:	4603      	mov	r3, r0
 800d230:	4618      	mov	r0, r3
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
      /// @}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2200      	movs	r2, #0
 800d246:	601a      	str	r2, [r3, #0]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	3304      	adds	r3, #4
 800d24c:	6879      	ldr	r1, [r7, #4]
 800d24e:	683a      	ldr	r2, [r7, #0]
 800d250:	4618      	mov	r0, r3
 800d252:	f000 fac1 	bl	800d7d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	4619      	mov	r1, r3
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 faff 	bl	800d860 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4618      	mov	r0, r3
 800d266:	3708      	adds	r7, #8
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	4618      	mov	r0, r3
 800d278:	370c      	adds	r7, #12
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr

0800d282 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800d282:	b580      	push	{r7, lr}
 800d284:	b082      	sub	sp, #8
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
 800d28a:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	601a      	str	r2, [r3, #0]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	3304      	adds	r3, #4
 800d298:	4618      	mov	r0, r3
 800d29a:	f7ff ff2d 	bl	800d0f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	1d1a      	adds	r2, r3, #4
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	3304      	adds	r3, #4
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	4610      	mov	r0, r2
 800d2aa:	f000 fae4 	bl	800d876 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	601a      	str	r2, [r3, #0]
      }
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3708      	adds	r7, #8
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}

0800d2be <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b082      	sub	sp, #8
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
 800d2c6:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	683a      	ldr	r2, [r7, #0]
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 fae6 	bl	800d8a0 <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	1d1a      	adds	r2, r3, #4
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	3304      	adds	r3, #4
 800d2dc:	4619      	mov	r1, r3
 800d2de:	4610      	mov	r0, r2
 800d2e0:	f000 fac9 	bl	800d876 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 800d2e4:	bf00      	nop
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800d2ec:	b480      	push	{r7}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f7ff fbad 	bl	800ca6c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800d312:	4603      	mov	r3, r0
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f7ff fba7 	bl	800ca6c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800d31e:	4603      	mov	r3, r0
 800d320:	2200      	movs	r2, #0
 800d322:	601a      	str	r2, [r3, #0]
	return __p;
 800d324:	68fb      	ldr	r3, [r7, #12]
      }
 800d326:	4618      	mov	r0, r3
 800d328:	3710      	adds	r7, #16
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 800d32e:	b5b0      	push	{r4, r5, r7, lr}
 800d330:	b084      	sub	sp, #16
 800d332:	af00      	add	r7, sp, #0
 800d334:	60f8      	str	r0, [r7, #12]
 800d336:	60b9      	str	r1, [r7, #8]
 800d338:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800d33a:	68fc      	ldr	r4, [r7, #12]
 800d33c:	68b8      	ldr	r0, [r7, #8]
 800d33e:	f000 face 	bl	800d8de <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800d342:	4605      	mov	r5, r0
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7ff fc19 	bl	800cb7c <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d34a:	4603      	mov	r3, r0
 800d34c:	461a      	mov	r2, r3
 800d34e:	4629      	mov	r1, r5
 800d350:	4620      	mov	r0, r4
 800d352:	f000 facf 	bl	800d8f4 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	4618      	mov	r0, r3
 800d35a:	3710      	adds	r7, #16
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bdb0      	pop	{r4, r5, r7, pc}

0800d360 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4618      	mov	r0, r3
 800d36c:	f000 fade 	bl	800d92c <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d370:	4603      	mov	r3, r0
 800d372:	4618      	mov	r0, r3
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800d37a:	b590      	push	{r4, r7, lr}
 800d37c:	b083      	sub	sp, #12
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
 800d382:	6039      	str	r1, [r7, #0]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	4618      	mov	r0, r3
 800d388:	f7ff fa06 	bl	800c798 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d38c:	683c      	ldr	r4, [r7, #0]
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f7ff fa0f 	bl	800c7b2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800d394:	4603      	mov	r3, r0
 800d396:	601c      	str	r4, [r3, #0]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	4618      	mov	r0, r3
 800d39c:	370c      	adds	r7, #12
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd90      	pop	{r4, r7, pc}

0800d3a2 <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b082      	sub	sp, #8
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 faca 	bl	800d944 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3708      	adds	r7, #8
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800d3ba:	b480      	push	{r7}
 800d3bc:	b083      	sub	sp, #12
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	370c      	adds	r7, #12
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr

0800d3d2 <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b082      	sub	sp, #8
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f000 fabd 	bl	800d95c <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3708      	adds	r7, #8
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800d3ee:	b480      	push	{r7}
 800d3f0:	b083      	sub	sp, #12
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800d3f6:	687b      	ldr	r3, [r7, #4]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	370c      	adds	r7, #12
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800d40e:	2301      	movs	r3, #1
 800d410:	2204      	movs	r2, #4
 800d412:	6839      	ldr	r1, [r7, #0]
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f7f7 ff5d 	bl	80052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	3708      	adds	r7, #8
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800d422:	b480      	push	{r7}
 800d424:	b083      	sub	sp, #12
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800d42a:	687b      	ldr	r3, [r7, #4]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	370c      	adds	r7, #12
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800d442:	2301      	movs	r3, #1
 800d444:	220a      	movs	r2, #10
 800d446:	6839      	ldr	r1, [r7, #0]
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f7f7 ff43 	bl	80052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	3708      	adds	r7, #8
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>:
  }

  template <typename TConverter, typename T>
  bool doSet(const T& value) const {
 800d456:	b580      	push	{r7, lr}
 800d458:	b084      	sub	sp, #16
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
 800d45e:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 800d460:	461a      	mov	r2, r3
 800d462:	6839      	ldr	r1, [r7, #0]
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 faa6 	bl	800d9b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>
 800d46a:	4603      	mov	r3, r0
        value, is_same<typename function_traits<
                           decltype(&TConverter::toJson)>::return_type,
                       bool>{});
  }
 800d46c:	4618      	mov	r0, r3
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	4618      	mov	r0, r3
 800d480:	370c      	adds	r7, #12
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr

0800d48a <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800d48a:	b580      	push	{r7, lr}
 800d48c:	b084      	sub	sp, #16
 800d48e:	af00      	add	r7, sp, #0
 800d490:	60f8      	str	r0, [r7, #12]
 800d492:	60b9      	str	r1, [r7, #8]
 800d494:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f7ff ffec 	bl	800d474 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d49c:	4603      	mov	r3, r0
 800d49e:	461a      	mov	r2, r3
 800d4a0:	68b9      	ldr	r1, [r7, #8]
 800d4a2:	68f8      	ldr	r0, [r7, #12]
 800d4a4:	f000 faa1 	bl	800d9ea <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 800d4a8:	bf00      	nop
 800d4aa:	3710      	adds	r7, #16
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 800d4b0:	b5b0      	push	{r4, r5, r7, lr}
 800d4b2:	b08c      	sub	sp, #48	@ 0x30
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	60b9      	str	r1, [r7, #8]
 800d4ba:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800d4bc:	4a39      	ldr	r2, [pc, #228]	@ (800d5a4 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 800d4be:	2101      	movs	r1, #1
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f000 faaa 	bl	800da1a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>
 800d4c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 800d4d4:	68f8      	ldr	r0, [r7, #12]
 800d4d6:	f7fe ff5a 	bl	800c38e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	617b      	str	r3, [r7, #20]
 800d4de:	f107 0214 	add.w	r2, r7, #20
 800d4e2:	f107 0308 	add.w	r3, r7, #8
 800d4e6:	4611      	mov	r1, r2
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f000 fadd 	bl	800daa8 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f000 faeb 	bl	800dad2 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>
 800d4fc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800d4fe:	69fb      	ldr	r3, [r7, #28]
 800d500:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800d502:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800d504:	6a3b      	ldr	r3, [r7, #32]
 800d506:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 800d508:	69fa      	ldr	r2, [r7, #28]
 800d50a:	18d5      	adds	r5, r2, r3
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f7ff ffb1 	bl	800d474 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d512:	4603      	mov	r3, r0
 800d514:	461a      	mov	r2, r3
 800d516:	4629      	mov	r1, r5
 800d518:	4620      	mov	r0, r4
 800d51a:	f7ff ffb6 	bl	800d48a <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800d51e:	2300      	movs	r3, #0
 800d520:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d522:	f107 0308 	add.w	r3, r7, #8
 800d526:	4618      	mov	r0, r3
 800d528:	f7ff fc5e 	bl	800cde8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800d52c:	4603      	mov	r3, r0
 800d52e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	4618      	mov	r0, r3
 800d534:	f7ff f9ca 	bl	800c8cc <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800d538:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d53a:	69fa      	ldr	r2, [r7, #28]
 800d53c:	4621      	mov	r1, r4
 800d53e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d540:	f000 fadb 	bl	800dafa <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 800d544:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800d546:	69bb      	ldr	r3, [r7, #24]
 800d548:	3308      	adds	r3, #8
 800d54a:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d54c:	f107 0308 	add.w	r3, r7, #8
 800d550:	4618      	mov	r0, r3
 800d552:	f7ff fc49 	bl	800cde8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800d556:	4603      	mov	r3, r0
 800d558:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7ff f9b5 	bl	800c8cc <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800d562:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d564:	69ba      	ldr	r2, [r7, #24]
 800d566:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d568:	4620      	mov	r0, r4
 800d56a:	f000 fac6 	bl	800dafa <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 800d56e:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800d570:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	689a      	ldr	r2, [r3, #8]
 800d576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 800d57c:	461a      	mov	r2, r3
 800d57e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d580:	f7ff f991 	bl	800c8a6 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	69fa      	ldr	r2, [r7, #28]
 800d588:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	69ba      	ldr	r2, [r7, #24]
 800d58e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800d590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d592:	00db      	lsls	r3, r3, #3
 800d594:	69fa      	ldr	r2, [r7, #28]
 800d596:	441a      	add	r2, r3
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	609a      	str	r2, [r3, #8]
    }
 800d59c:	bf00      	nop
 800d59e:	3730      	adds	r7, #48	@ 0x30
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bdb0      	pop	{r4, r5, r7, pc}
 800d5a4:	0802a760 	.word	0x0802a760

0800d5a8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7fe fefc 	bl	800c3ae <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	60fb      	str	r3, [r7, #12]
 800d5ba:	f107 030c 	add.w	r3, r7, #12
 800d5be:	2101      	movs	r1, #1
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f000 fab9 	bl	800db38 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEmiEi>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	60bb      	str	r3, [r7, #8]
 800d5ca:	f107 0308 	add.w	r3, r7, #8
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7fe ff27 	bl	800c422 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 800d5d4:	4603      	mov	r3, r0
      }
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3710      	adds	r7, #16
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>:
  StringNode* add(TAdaptedString str, Allocator* allocator) {
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b088      	sub	sp, #32
 800d5e2:	af02      	add	r7, sp, #8
 800d5e4:	60f8      	str	r0, [r7, #12]
 800d5e6:	4638      	mov	r0, r7
 800d5e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    auto node = get(str);
 800d5ec:	463b      	mov	r3, r7
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f7fa fc57 	bl	8007ea4 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 800d5f6:	6178      	str	r0, [r7, #20]
    if (node) {
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d007      	beq.n	800d60e <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x30>
      node->references++;
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	889b      	ldrh	r3, [r3, #4]
 800d602:	3301      	adds	r3, #1
 800d604:	b29a      	uxth	r2, r3
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	809a      	strh	r2, [r3, #4]
      return node;
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	e023      	b.n	800d656 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    size_t n = str.size();
 800d60e:	463b      	mov	r3, r7
 800d610:	4618      	mov	r0, r3
 800d612:	f7f7 fe87 	bl	8005324 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 800d616:	6138      	str	r0, [r7, #16]
    node = StringNode::create(n, allocator);
 800d618:	6a39      	ldr	r1, [r7, #32]
 800d61a:	6938      	ldr	r0, [r7, #16]
 800d61c:	f7f7 fdf0 	bl	8005200 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800d620:	6178      	str	r0, [r7, #20]
    if (!node)
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d101      	bne.n	800d62c <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x4e>
      return nullptr;
 800d628:	2300      	movs	r3, #0
 800d62a:	e014      	b.n	800d656 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    stringGetChars(str, node->data, n);
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	f103 0208 	add.w	r2, r3, #8
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	4613      	mov	r3, r2
 800d638:	463a      	mov	r2, r7
 800d63a:	ca07      	ldmia	r2, {r0, r1, r2}
 800d63c:	f000 fa95 	bl	800db6a <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>
    node->data[n] = 0;  // force NUL terminator
 800d640:	697a      	ldr	r2, [r7, #20]
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	4413      	add	r3, r2
 800d646:	3308      	adds	r3, #8
 800d648:	2200      	movs	r2, #0
 800d64a:	701a      	strb	r2, [r3, #0]
    add(node);
 800d64c:	6979      	ldr	r1, [r7, #20]
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	f7f7 fe9a 	bl	8005388 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
    return node;
 800d654:	697b      	ldr	r3, [r7, #20]
  }
 800d656:	4618      	mov	r0, r3
 800d658:	3718      	adds	r7, #24
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d65e:	b580      	push	{r7, lr}
 800d660:	b082      	sub	sp, #8
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 fa9f 	bl	800dbaa <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>
 800d66c:	4603      	mov	r3, r0
 800d66e:	4618      	mov	r0, r3
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d676:	b580      	push	{r7, lr}
 800d678:	b082      	sub	sp, #8
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 fa9f 	bl	800dbc2 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>
 800d684:	4603      	mov	r3, r0
 800d686:	4618      	mov	r0, r3
 800d688:	3708      	adds	r7, #8
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>:
      _Tuple_impl()
 800d68e:	b580      	push	{r7, lr}
 800d690:	b082      	sub	sp, #8
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 faa0 	bl	800dbdc <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>:
      constexpr _Head_base()
 800d6a6:	b480      	push	{r7}
 800d6a8:	b083      	sub	sp, #12
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	601a      	str	r2, [r3, #0]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	370c      	adds	r7, #12
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr

0800d6c2 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d6c2:	b580      	push	{r7, lr}
 800d6c4:	b082      	sub	sp, #8
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 fa91 	bl	800dbf2 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3708      	adds	r7, #8
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>:
      _Tuple_impl()
 800d6da:	b580      	push	{r7, lr}
 800d6dc:	b082      	sub	sp, #8
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 fa92 	bl	800dc0c <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3708      	adds	r7, #8
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>:
      constexpr _Head_base()
 800d6f2:	b480      	push	{r7}
 800d6f4:	b083      	sub	sp, #12
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	601a      	str	r2, [r3, #0]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4618      	mov	r0, r3
 800d704:	370c      	adds	r7, #12
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr

0800d70e <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d70e:	b580      	push	{r7, lr}
 800d710:	b082      	sub	sp, #8
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 fa83 	bl	800dc22 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>
 800d71c:	4603      	mov	r3, r0
 800d71e:	4618      	mov	r0, r3
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800d726:	b580      	push	{r7, lr}
 800d728:	b084      	sub	sp, #16
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	60f8      	str	r0, [r7, #12]
 800d72e:	60b9      	str	r1, [r7, #8]
 800d730:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	00db      	lsls	r3, r3, #3
 800d736:	4619      	mov	r1, r3
 800d738:	68b8      	ldr	r0, [r7, #8]
 800d73a:	f01a ff28 	bl	802858e <_ZdlPvj>
      }
 800d73e:	3710      	adds	r7, #16
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800d74e:	e009      	b.n	800d764 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 fa73 	bl	800dc3c <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800d756:	4603      	mov	r3, r0
 800d758:	4618      	mov	r0, r3
 800d75a:	f000 fa7a 	bl	800dc52 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>
	  for (; __first != __last; ++__first)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	3308      	adds	r3, #8
 800d762:	607b      	str	r3, [r7, #4]
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d1f1      	bne.n	800d750 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0xc>
	}
 800d76c:	bf00      	nop
 800d76e:	bf00      	nop
 800d770:	3708      	adds	r7, #8
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d776:	b580      	push	{r7, lr}
 800d778:	b082      	sub	sp, #8
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 fa72 	bl	800dc68 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>
 800d784:	4603      	mov	r3, r0
 800d786:	4618      	mov	r0, r3
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800d78e:	b580      	push	{r7, lr}
 800d790:	b082      	sub	sp, #8
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4618      	mov	r0, r3
 800d79a:	f000 fa71 	bl	800dc80 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f000 fa75 	bl	800dca0 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 fa76 	bl	800dcba <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3708      	adds	r7, #8
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 800d7d8:	b5b0      	push	{r4, r5, r7, lr}
 800d7da:	b08a      	sub	sp, #40	@ 0x28
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	f107 031c 	add.w	r3, r7, #28
 800d7ea:	4611      	mov	r1, r2
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f000 fa70 	bl	800dcd2 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 800d7f2:	f107 0314 	add.w	r3, r7, #20
 800d7f6:	f107 021c 	add.w	r2, r7, #28
 800d7fa:	4611      	mov	r1, r2
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f000 fa81 	bl	800dd04 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 800d802:	f107 0314 	add.w	r3, r7, #20
 800d806:	4618      	mov	r0, r3
 800d808:	f000 faa4 	bl	800dd54 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 800d80c:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 800d80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d810:	4619      	mov	r1, r3
 800d812:	202c      	movs	r0, #44	@ 0x2c
 800d814:	f7fd f83c 	bl	800a890 <_ZnwjPv>
 800d818:	4604      	mov	r4, r0
 800d81a:	4629      	mov	r1, r5
 800d81c:	4620      	mov	r0, r4
 800d81e:	f000 faa7 	bl	800dd70 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>
 800d822:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 800d824:	f107 0314 	add.w	r3, r7, #20
 800d828:	2100      	movs	r1, #0
 800d82a:	4618      	mov	r0, r3
 800d82c:	f000 fac2 	bl	800ddb4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6a3a      	ldr	r2, [r7, #32]
 800d834:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 800d836:	6a38      	ldr	r0, [r7, #32]
 800d838:	f000 facb 	bl	800ddd2 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800d83c:	4602      	mov	r2, r0
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	601a      	str	r2, [r3, #0]
	}
 800d842:	f107 0314 	add.w	r3, r7, #20
 800d846:	4618      	mov	r0, r3
 800d848:	f000 fa6f 	bl	800dd2a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800d84c:	f107 031c 	add.w	r3, r7, #28
 800d850:	4618      	mov	r0, r3
 800d852:	f000 fa4b 	bl	800dcec <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	4618      	mov	r0, r3
 800d85a:	3728      	adds	r7, #40	@ 0x28
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bdb0      	pop	{r4, r5, r7, pc}

0800d860 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
	{ }
 800d86a:	bf00      	nop
 800d86c:	370c      	adds	r7, #12
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr

0800d876 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 800d876:	b480      	push	{r7}
 800d878:	b085      	sub	sp, #20
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
 800d87e:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	68fa      	ldr	r2, [r7, #12]
 800d892:	601a      	str	r2, [r3, #0]
      }
 800d894:	bf00      	nop
 800d896:	3714      	adds	r7, #20
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f000 fa9f 	bl	800ddee <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800d8b6:	6838      	ldr	r0, [r7, #0]
 800d8b8:	f000 fa99 	bl	800ddee <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	681a      	ldr	r2, [r3, #0]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800d8c4:	f107 030c 	add.w	r3, r7, #12
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f000 fa90 	bl	800ddee <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	681a      	ldr	r2, [r3, #0]
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	601a      	str	r2, [r3, #0]
    }
 800d8d6:	bf00      	nop
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d8de:	b480      	push	{r7}
 800d8e0:	b083      	sub	sp, #12
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	370c      	adds	r7, #12
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800d8f4:	b590      	push	{r4, r7, lr}
 800d8f6:	b085      	sub	sp, #20
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7ff f93b 	bl	800cb7c <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d906:	4603      	mov	r3, r0
 800d908:	4619      	mov	r1, r3
 800d90a:	68f8      	ldr	r0, [r7, #12]
 800d90c:	f000 fa7a 	bl	800de04 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>
 800d910:	68fc      	ldr	r4, [r7, #12]
 800d912:	68b8      	ldr	r0, [r7, #8]
 800d914:	f7ff ffe3 	bl	800d8de <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800d918:	4603      	mov	r3, r0
 800d91a:	4619      	mov	r1, r3
 800d91c:	4620      	mov	r0, r4
 800d91e:	f000 fa83 	bl	800de28 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>
	{ }
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	4618      	mov	r0, r3
 800d926:	3714      	adds	r7, #20
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd90      	pop	{r4, r7, pc}

0800d92c <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 fa88 	bl	800de4a <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>
 800d93a:	4603      	mov	r3, r0
 800d93c:	4618      	mov	r0, r3
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 fa89 	bl	800de64 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>
 800d952:	4603      	mov	r3, r0
 800d954:	4618      	mov	r0, r3
 800d956:	3708      	adds	r7, #8
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	4618      	mov	r0, r3
 800d968:	f000 fa88 	bl	800de7c <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d96c:	4603      	mov	r3, r0
 800d96e:	4618      	mov	r0, r3
 800d970:	3708      	adds	r7, #8
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}

0800d976 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800d976:	b580      	push	{r7, lr}
 800d978:	b082      	sub	sp, #8
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f000 fa88 	bl	800de94 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800d984:	4603      	mov	r3, r0
 800d986:	4618      	mov	r0, r3
 800d988:	f000 fa8f 	bl	800deaa <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 800d98c:	4603      	mov	r3, r0
  }
 800d98e:	4618      	mov	r0, r3
 800d990:	3708      	adds	r7, #8
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}

0800d996 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800d996:	b580      	push	{r7, lr}
 800d998:	b082      	sub	sp, #8
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 fa78 	bl	800de94 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f000 fa8b 	bl	800dec2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 800d9ac:	4603      	mov	r3, r0
  }
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3708      	adds	r7, #8
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>:
  return resources && !resources->overflowed();
}

template <typename TDerived>
template <typename TConverter, typename T>
inline bool VariantRefBase<TDerived>::doSet(const T& value, true_type) const {
 800d9b6:	b590      	push	{r4, r7, lr}
 800d9b8:	b087      	sub	sp, #28
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	60f8      	str	r0, [r7, #12]
 800d9be:	60b9      	str	r1, [r7, #8]
 800d9c0:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	681c      	ldr	r4, [r3, #0]
 800d9c6:	f107 0310 	add.w	r3, r7, #16
 800d9ca:	68f9      	ldr	r1, [r7, #12]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f000 fa84 	bl	800deda <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>
 800d9d2:	f107 0310 	add.w	r3, r7, #16
 800d9d6:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d9da:	4620      	mov	r0, r4
 800d9dc:	f000 fa93 	bl	800df06 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>
 800d9e0:	4603      	mov	r3, r0
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	371c      	adds	r7, #28
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd90      	pop	{r4, r7, pc}

0800d9ea <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800d9ea:	b590      	push	{r4, r7, lr}
 800d9ec:	b085      	sub	sp, #20
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	60f8      	str	r0, [r7, #12]
 800d9f2:	60b9      	str	r1, [r7, #8]
 800d9f4:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	2008      	movs	r0, #8
 800d9fc:	f7fc ff48 	bl	800a890 <_ZnwjPv>
 800da00:	4604      	mov	r4, r0
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7ff fd36 	bl	800d474 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800da08:	4603      	mov	r3, r0
 800da0a:	4619      	mov	r1, r3
 800da0c:	4620      	mov	r0, r4
 800da0e:	f000 fabf 	bl	800df90 <_ZNSt10shared_ptrI6ModuleEC1EOS1_>
 800da12:	bf00      	nop
 800da14:	3714      	adds	r7, #20
 800da16:	46bd      	mov	sp, r7
 800da18:	bd90      	pop	{r4, r7, pc}

0800da1a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800da1a:	b590      	push	{r4, r7, lr}
 800da1c:	b087      	sub	sp, #28
 800da1e:	af00      	add	r7, sp, #0
 800da20:	60f8      	str	r0, [r7, #12]
 800da22:	60b9      	str	r1, [r7, #8]
 800da24:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f000 fac5 	bl	800dfb6 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800da2c:	4604      	mov	r4, r0
 800da2e:	68f8      	ldr	r0, [r7, #12]
 800da30:	f000 fad2 	bl	800dfd8 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800da34:	4603      	mov	r3, r0
 800da36:	1ae2      	subs	r2, r4, r3
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	bf34      	ite	cc
 800da3e:	2301      	movcc	r3, #1
 800da40:	2300      	movcs	r3, #0
 800da42:	b2db      	uxtb	r3, r3
 800da44:	2b00      	cmp	r3, #0
 800da46:	d002      	beq.n	800da4e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f01a fdd0 	bl	80285ee <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800da4e:	68f8      	ldr	r0, [r7, #12]
 800da50:	f000 fac2 	bl	800dfd8 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800da54:	4604      	mov	r4, r0
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f000 fabe 	bl	800dfd8 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800da5c:	4603      	mov	r3, r0
 800da5e:	613b      	str	r3, [r7, #16]
 800da60:	f107 0208 	add.w	r2, r7, #8
 800da64:	f107 0310 	add.w	r3, r7, #16
 800da68:	4611      	mov	r1, r2
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fe f901 	bl	800bc72 <_ZSt3maxIjERKT_S2_S2_>
 800da70:	4603      	mov	r3, r0
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4423      	add	r3, r4
 800da76:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	f000 faad 	bl	800dfd8 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800da7e:	4602      	mov	r2, r0
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	4293      	cmp	r3, r2
 800da84:	d306      	bcc.n	800da94 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x7a>
 800da86:	68f8      	ldr	r0, [r7, #12]
 800da88:	f000 fa95 	bl	800dfb6 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800da8c:	4602      	mov	r2, r0
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	4293      	cmp	r3, r2
 800da92:	d904      	bls.n	800da9e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x84>
 800da94:	68f8      	ldr	r0, [r7, #12]
 800da96:	f000 fa8e 	bl	800dfb6 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800da9a:	4603      	mov	r3, r0
 800da9c:	e000      	b.n	800daa0 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x86>
 800da9e:	697b      	ldr	r3, [r7, #20]
      }
 800daa0:	4618      	mov	r0, r3
 800daa2:	371c      	adds	r7, #28
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd90      	pop	{r4, r7, pc}

0800daa8 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800daa8:	b590      	push	{r4, r7, lr}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f7ff f998 	bl	800cde8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800dab8:	4603      	mov	r3, r0
 800daba:	681c      	ldr	r4, [r3, #0]
 800dabc:	6838      	ldr	r0, [r7, #0]
 800dabe:	f7ff f993 	bl	800cde8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800dac2:	4603      	mov	r3, r0
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	1ae3      	subs	r3, r4, r3
 800dac8:	10db      	asrs	r3, r3, #3
 800daca:	4618      	mov	r0, r3
 800dacc:	370c      	adds	r7, #12
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd90      	pop	{r4, r7, pc}

0800dad2 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800dad2:	b580      	push	{r7, lr}
 800dad4:	b082      	sub	sp, #8
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
 800dada:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d006      	beq.n	800daf0 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x1e>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6839      	ldr	r1, [r7, #0]
 800dae6:	4618      	mov	r0, r3
 800dae8:	f000 fa86 	bl	800dff8 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>
 800daec:	4603      	mov	r3, r0
 800daee:	e000      	b.n	800daf2 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x20>
 800daf0:	2300      	movs	r3, #0
      }
 800daf2:	4618      	mov	r0, r3
 800daf4:	3708      	adds	r7, #8
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}

0800dafa <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800dafa:	b580      	push	{r7, lr}
 800dafc:	b084      	sub	sp, #16
 800dafe:	af00      	add	r7, sp, #0
 800db00:	60f8      	str	r0, [r7, #12]
 800db02:	60b9      	str	r1, [r7, #8]
 800db04:	607a      	str	r2, [r7, #4]
 800db06:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	68b9      	ldr	r1, [r7, #8]
 800db0e:	68f8      	ldr	r0, [r7, #12]
 800db10:	f000 fa81 	bl	800e016 <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 800db14:	4603      	mov	r3, r0
      }
 800db16:	4618      	mov	r0, r3
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800db1e:	b580      	push	{r7, lr}
 800db20:	b082      	sub	sp, #8
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
 800db26:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800db28:	6839      	ldr	r1, [r7, #0]
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 fa90 	bl	800e050 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>
	}
 800db30:	bf00      	nop
 800db32:	3708      	adds	r7, #8
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800db38:	b580      	push	{r7, lr}
 800db3a:	b084      	sub	sp, #16
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681a      	ldr	r2, [r3, #0]
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	00db      	lsls	r3, r3, #3
 800db4a:	425b      	negs	r3, r3
 800db4c:	4413      	add	r3, r2
 800db4e:	60fb      	str	r3, [r7, #12]
 800db50:	f107 020c 	add.w	r2, r7, #12
 800db54:	f107 0308 	add.w	r3, r7, #8
 800db58:	4611      	mov	r1, r2
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7ff f934 	bl	800cdc8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	4618      	mov	r0, r3
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}

0800db6a <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
  return stringEquals(s2, s1);
}

template <typename TAdaptedString>
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 800db6a:	b590      	push	{r4, r7, lr}
 800db6c:	b087      	sub	sp, #28
 800db6e:	af00      	add	r7, sp, #0
 800db70:	1d3c      	adds	r4, r7, #4
 800db72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800db76:	603b      	str	r3, [r7, #0]
  ARDUINOJSON_ASSERT(s.size() <= n);
  for (size_t i = 0; i < n; i++) {
 800db78:	2300      	movs	r3, #0
 800db7a:	617b      	str	r3, [r7, #20]
 800db7c:	e00c      	b.n	800db98 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x2e>
    p[i] = s[i];
 800db7e:	683a      	ldr	r2, [r7, #0]
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	18d4      	adds	r4, r2, r3
 800db84:	1d3b      	adds	r3, r7, #4
 800db86:	6979      	ldr	r1, [r7, #20]
 800db88:	4618      	mov	r0, r3
 800db8a:	f7f3 f8bd 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800db8e:	4603      	mov	r3, r0
 800db90:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	3301      	adds	r3, #1
 800db96:	617b      	str	r3, [r7, #20]
 800db98:	697a      	ldr	r2, [r7, #20]
 800db9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d3ee      	bcc.n	800db7e <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x14>
  }
}
 800dba0:	bf00      	nop
 800dba2:	bf00      	nop
 800dba4:	371c      	adds	r7, #28
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd90      	pop	{r4, r7, pc}

0800dbaa <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b082      	sub	sp, #8
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 fa58 	bl	800e068 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3708      	adds	r7, #8
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}

0800dbc2 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b082      	sub	sp, #8
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f000 fa56 	bl	800e07e <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3708      	adds	r7, #8
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>:
      constexpr _Head_base()
 800dbdc:	b480      	push	{r7}
 800dbde:	b083      	sub	sp, #12
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	370c      	adds	r7, #12
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr

0800dbf2 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b082      	sub	sp, #8
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f000 fa49 	bl	800e094 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>
 800dc02:	4603      	mov	r3, r0
 800dc04:	4618      	mov	r0, r3
 800dc06:	3708      	adds	r7, #8
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>:
      constexpr _Head_base()
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	4618      	mov	r0, r3
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr

0800dc22 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dc22:	b580      	push	{r7, lr}
 800dc24:	b082      	sub	sp, #8
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	6078      	str	r0, [r7, #4]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f000 fa3c 	bl	800e0aa <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>
 800dc32:	4603      	mov	r3, r0
 800dc34:	4618      	mov	r0, r3
 800dc36:	3708      	adds	r7, #8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	4618      	mov	r0, r3
 800dc48:	370c      	adds	r7, #12
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr

0800dc52 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>:
    _Destroy(_Tp* __pointer)
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b082      	sub	sp, #8
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f7fd fa21 	bl	800b0a2 <_ZNSt10shared_ptrI6ModuleED1Ev>
    }
 800dc60:	bf00      	nop
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 fa25 	bl	800e0c0 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>
 800dc76:	4603      	mov	r3, r0
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f000 fa24 	bl	800e0d6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	4618      	mov	r0, r3
 800dc92:	f000 fa2c 	bl	800e0ee <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f000 fa2d 	bl	800e10a <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3708      	adds	r7, #8
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}

0800dcba <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800dcba:	b580      	push	{r7, lr}
 800dcbc:	b082      	sub	sp, #8
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 fa2c 	bl	800e120 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	4618      	mov	r0, r3
 800dccc:	3708      	adds	r7, #8
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}

0800dcd2 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b082      	sub	sp, #8
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
 800dcda:	6039      	str	r1, [r7, #0]
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f000 fa2b 	bl	800e138 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	4618      	mov	r0, r3
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 fa2a 	bl	800e14e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3708      	adds	r7, #8
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800dd0e:	2101      	movs	r1, #1
 800dd10:	6838      	ldr	r0, [r7, #0]
 800dd12:	f000 fa27 	bl	800e164 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 800dd16:	4603      	mov	r3, r0
 800dd18:	461a      	mov	r2, r3
 800dd1a:	6839      	ldr	r1, [r7, #0]
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f000 fa30 	bl	800e182 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	3708      	adds	r7, #8
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b082      	sub	sp, #8
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d007      	beq.n	800dd4a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6818      	ldr	r0, [r3, #0]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	2201      	movs	r2, #1
 800dd44:	4619      	mov	r1, r3
 800dd46:	f000 fa30 	bl	800e1aa <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3708      	adds	r7, #8
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	4618      	mov	r0, r3
 800dd62:	f000 fa31 	bl	800e1c8 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 800dd66:	4603      	mov	r3, r0
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3708      	adds	r7, #8
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 800dd70:	b590      	push	{r4, r7, lr}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	7039      	strb	r1, [r7, #0]
	: _M_impl(__a)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f000 fa2f 	bl	800e1e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800dd82:	4a0b      	ldr	r2, [pc, #44]	@ (800ddb0 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_+0x40>)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	601a      	str	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	330c      	adds	r3, #12
 800dd8c:	4621      	mov	r1, r4
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f000 fa3c 	bl	800e20c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 f81c 	bl	800ddd2 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	463b      	mov	r3, r7
 800dd9e:	4611      	mov	r1, r2
 800dda0:	4618      	mov	r0, r3
 800dda2:	f000 fa42 	bl	800e22a <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>
	}
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	370c      	adds	r7, #12
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd90      	pop	{r4, r7, pc}
 800ddb0:	0802b370 	.word	0x0802b370

0800ddb4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	605a      	str	r2, [r3, #4]
	return *this;
 800ddc4:	687b      	ldr	r3, [r7, #4]
      }
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	370c      	adds	r7, #12
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr

0800ddd2 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b082      	sub	sp, #8
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	330c      	adds	r3, #12
 800ddde:	4618      	mov	r0, r3
 800dde0:	f000 fa2f 	bl	800e242 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>
 800dde4:	4603      	mov	r3, r0
 800dde6:	4618      	mov	r0, r3
 800dde8:	3708      	adds	r7, #8
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}

0800ddee <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800ddee:	b480      	push	{r7}
 800ddf0:	b083      	sub	sp, #12
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	370c      	adds	r7, #12
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr

0800de04 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800de0e:	6838      	ldr	r0, [r7, #0]
 800de10:	f7fe feb4 	bl	800cb7c <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800de14:	4603      	mov	r3, r0
 800de16:	4619      	mov	r1, r3
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f000 fa1e 	bl	800e25a <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>
	{ }
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	4618      	mov	r0, r3
 800de22:	3708      	adds	r7, #8
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800de32:	6838      	ldr	r0, [r7, #0]
 800de34:	f7ff fd53 	bl	800d8de <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800de38:	4603      	mov	r3, r0
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	601a      	str	r2, [r3, #0]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	4618      	mov	r0, r3
 800de44:	3708      	adds	r7, #8
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}

0800de4a <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800de4a:	b580      	push	{r7, lr}
 800de4c:	b082      	sub	sp, #8
 800de4e:	af00      	add	r7, sp, #0
 800de50:	6078      	str	r0, [r7, #4]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	4618      	mov	r0, r3
 800de56:	f000 fa13 	bl	800e280 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>
 800de5a:	4603      	mov	r3, r0
 800de5c:	4618      	mov	r0, r3
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 fa12 	bl	800e296 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>
 800de72:	4603      	mov	r3, r0
 800de74:	4618      	mov	r0, r3
 800de76:	3708      	adds	r7, #8
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f000 fa11 	bl	800e2ac <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>
 800de8a:	4603      	mov	r3, r0
 800de8c:	4618      	mov	r0, r3
 800de8e:	3708      	adds	r7, #8
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}

0800de94 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800de9c:	687b      	ldr	r3, [r7, #4]
  }
 800de9e:	4618      	mov	r0, r3
 800dea0:	370c      	adds	r7, #12
 800dea2:	46bd      	mov	sp, r7
 800dea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea8:	4770      	bx	lr

0800deaa <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800deaa:	b580      	push	{r7, lr}
 800deac:	b082      	sub	sp, #8
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
    return client.getData();
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 fa07 	bl	800e2c6 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>
 800deb8:	4603      	mov	r3, r0
  }
 800deba:	4618      	mov	r0, r3
 800debc:	3708      	adds	r7, #8
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}

0800dec2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b082      	sub	sp, #8
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 fa17 	bl	800e2fe <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>
 800ded0:	4603      	mov	r3, r0
  }
 800ded2:	4618      	mov	r0, r3
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>:
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
 800deda:	b590      	push	{r4, r7, lr}
 800dedc:	b083      	sub	sp, #12
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
 800dee2:	6039      	str	r1, [r7, #0]
  return JsonVariant(getOrCreateData(), getResourceManager());
 800dee4:	6838      	ldr	r0, [r7, #0]
 800dee6:	f000 fa18 	bl	800e31a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>
 800deea:	4604      	mov	r4, r0
 800deec:	6838      	ldr	r0, [r7, #0]
 800deee:	f7ff fd52 	bl	800d996 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800def2:	4603      	mov	r3, r0
 800def4:	461a      	mov	r2, r3
 800def6:	4621      	mov	r1, r4
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f7f7 fddd 	bl	8005ab8 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
}
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	370c      	adds	r7, #12
 800df02:	46bd      	mov	sp, r7
 800df04:	bd90      	pop	{r4, r7, pc}

0800df06 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 800df06:	b580      	push	{r7, lr}
 800df08:	b086      	sub	sp, #24
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	60f8      	str	r0, [r7, #12]
 800df0e:	1d3b      	adds	r3, r7, #4
 800df10:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(dst);
 800df14:	1d3b      	adds	r3, r7, #4
 800df16:	4618      	mov	r0, r3
 800df18:	f7f9 faf6 	bl	8007508 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800df1c:	6178      	str	r0, [r7, #20]
    if (!data)
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d101      	bne.n	800df28 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x22>
      return false;
 800df24:	2300      	movs	r3, #0
 800df26:	e00f      	b.n	800df48 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 800df28:	1d3b      	adds	r3, r7, #4
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7f9 fc91 	bl	8007852 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800df30:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 800df32:	6939      	ldr	r1, [r7, #16]
 800df34:	6978      	ldr	r0, [r7, #20]
 800df36:	f7f8 faf3 	bl	8006520 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 800df3a:	693a      	ldr	r2, [r7, #16]
 800df3c:	68f9      	ldr	r1, [r7, #12]
 800df3e:	6978      	ldr	r0, [r7, #20]
 800df40:	f000 f9fb 	bl	800e33a <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800df44:	4603      	mov	r3, r0
 800df46:	bf00      	nop
  }
 800df48:	4618      	mov	r0, r3
 800df4a:	3718      	adds	r7, #24
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>:
  VariantData* getData() const {
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f7fe ff82 	bl	800ce62 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800df5e:	4603      	mov	r3, r0
 800df60:	4618      	mov	r0, r3
 800df62:	f000 fa2d 	bl	800e3c0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800df66:	4603      	mov	r3, r0
  }
 800df68:	4618      	mov	r0, r3
 800df6a:	3708      	adds	r7, #8
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f7fe ff72 	bl	800ce62 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800df7e:	4603      	mov	r3, r0
 800df80:	4618      	mov	r0, r3
 800df82:	f000 fa3c 	bl	800e3fe <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800df86:	4603      	mov	r3, r0
  }
 800df88:	4618      	mov	r0, r3
 800df8a:	3708      	adds	r7, #8
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <_ZNSt10shared_ptrI6ModuleEC1EOS1_>:
      shared_ptr(shared_ptr&& __r) noexcept
 800df90:	b590      	push	{r4, r7, lr}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 800df9a:	687c      	ldr	r4, [r7, #4]
 800df9c:	6838      	ldr	r0, [r7, #0]
 800df9e:	f7fe fac5 	bl	800c52c <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f000 fa35 	bl	800e416 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	4618      	mov	r0, r3
 800dfb0:	370c      	adds	r7, #12
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd90      	pop	{r4, r7, pc}

0800dfb6 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800dfb6:	b580      	push	{r7, lr}
 800dfb8:	b082      	sub	sp, #8
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f000 fa60 	bl	800e486 <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f000 fa42 	bl	800e452 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800dfd8:	b480      	push	{r7}
 800dfda:	b083      	sub	sp, #12
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	685a      	ldr	r2, [r3, #4]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	1ad3      	subs	r3, r2, r3
 800dfea:	10db      	asrs	r3, r3, #3
 800dfec:	4618      	mov	r0, r3
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e002:	2200      	movs	r2, #0
 800e004:	6839      	ldr	r1, [r7, #0]
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f000 fa48 	bl	800e49c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>
 800e00c:	4603      	mov	r3, r0
 800e00e:	4618      	mov	r0, r3
 800e010:	3708      	adds	r7, #8
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800e016:	b5b0      	push	{r4, r5, r7, lr}
 800e018:	b084      	sub	sp, #16
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	60f8      	str	r0, [r7, #12]
 800e01e:	60b9      	str	r1, [r7, #8]
 800e020:	607a      	str	r2, [r7, #4]
 800e022:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f000 fa63 	bl	800e4f0 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800e02a:	4604      	mov	r4, r0
 800e02c:	68b8      	ldr	r0, [r7, #8]
 800e02e:	f000 fa5f 	bl	800e4f0 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800e032:	4605      	mov	r5, r0
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f000 fa5b 	bl	800e4f0 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800e03a:	4602      	mov	r2, r0
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	4629      	mov	r1, r5
 800e040:	4620      	mov	r0, r4
 800e042:	f000 fa60 	bl	800e506 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 800e046:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 800e048:	4618      	mov	r0, r3
 800e04a:	3710      	adds	r7, #16
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bdb0      	pop	{r4, r5, r7, pc}

0800e050 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800e05a:	6838      	ldr	r0, [r7, #0]
 800e05c:	f7fd f821 	bl	800b0a2 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800e060:	bf00      	nop
 800e062:	3708      	adds	r7, #8
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e068:	b480      	push	{r7}
 800e06a:	b083      	sub	sp, #12
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	4618      	mov	r0, r3
 800e074:	370c      	adds	r7, #12
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr

0800e07e <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800e07e:	b480      	push	{r7}
 800e080:	b083      	sub	sp, #12
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	4618      	mov	r0, r3
 800e08a:	370c      	adds	r7, #12
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr

0800e094 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e094:	b480      	push	{r7}
 800e096:	b083      	sub	sp, #12
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	4618      	mov	r0, r3
 800e0a0:	370c      	adds	r7, #12
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a8:	4770      	bx	lr

0800e0aa <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>:
 800e0aa:	b480      	push	{r7}
 800e0ac:	b083      	sub	sp, #12
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	370c      	adds	r7, #12
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr

0800e0c0 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	370c      	adds	r7, #12
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr

0800e0d6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>:
      _Tuple_impl()
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b082      	sub	sp, #8
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 fa37 	bl	800e552 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3708      	adds	r7, #8
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>:
      constexpr _Head_base()
 800e0ee:	b480      	push	{r7}
 800e0f0:	b083      	sub	sp, #12
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	601a      	str	r2, [r3, #0]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	4618      	mov	r0, r3
 800e100:	370c      	adds	r7, #12
 800e102:	46bd      	mov	sp, r7
 800e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e108:	4770      	bx	lr

0800e10a <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e10a:	b480      	push	{r7}
 800e10c:	b083      	sub	sp, #12
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	4618      	mov	r0, r3
 800e116:	370c      	adds	r7, #12
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr

0800e120 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 fa1d 	bl	800e568 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>
 800e12e:	4603      	mov	r3, r0
 800e130:	4618      	mov	r0, r3
 800e132:	3708      	adds	r7, #8
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e138:	b480      	push	{r7}
 800e13a:	b083      	sub	sp, #12
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	4618      	mov	r0, r3
 800e144:	370c      	adds	r7, #12
 800e146:	46bd      	mov	sp, r7
 800e148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14c:	4770      	bx	lr

0800e14e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e14e:	b480      	push	{r7}
 800e150:	b083      	sub	sp, #12
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4618      	mov	r0, r3
 800e15a:	370c      	adds	r7, #12
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e16e:	2200      	movs	r2, #0
 800e170:	6839      	ldr	r1, [r7, #0]
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 fa04 	bl	800e580 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800e178:	4603      	mov	r3, r0
 800e17a:	4618      	mov	r0, r3
 800e17c:	3708      	adds	r7, #8
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}

0800e182 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800e182:	b580      	push	{r7, lr}
 800e184:	b084      	sub	sp, #16
 800e186:	af00      	add	r7, sp, #0
 800e188:	60f8      	str	r0, [r7, #12]
 800e18a:	60b9      	str	r1, [r7, #8]
 800e18c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800e18e:	68b8      	ldr	r0, [r7, #8]
 800e190:	f000 fa24 	bl	800e5dc <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 800e194:	4602      	mov	r2, r0
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	601a      	str	r2, [r3, #0]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	605a      	str	r2, [r3, #4]
      { }
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3710      	adds	r7, #16
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b084      	sub	sp, #16
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	60f8      	str	r0, [r7, #12]
 800e1b2:	60b9      	str	r1, [r7, #8]
 800e1b4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	68b9      	ldr	r1, [r7, #8]
 800e1ba:	68f8      	ldr	r0, [r7, #12]
 800e1bc:	f000 fa19 	bl	800e5f2 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 800e1c0:	bf00      	nop
 800e1c2:	3710      	adds	r7, #16
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800e1c8:	b480      	push	{r7}
 800e1ca:	b083      	sub	sp, #12
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800e1d0:	687b      	ldr	r3, [r7, #4]
    }
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	370c      	adds	r7, #12
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr
	...

0800e1e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 800e1e8:	4a07      	ldr	r2, [pc, #28]	@ (800e208 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	601a      	str	r2, [r3, #0]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	605a      	str	r2, [r3, #4]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	609a      	str	r2, [r3, #8]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	370c      	adds	r7, #12
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr
 800e208:	0802b38c 	.word	0x0802b38c

0800e20c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	7039      	strb	r1, [r7, #0]
 800e216:	463b      	mov	r3, r7
 800e218:	4619      	mov	r1, r3
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 f9fa 	bl	800e614 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	4618      	mov	r0, r3
 800e224:	3708      	adds	r7, #8
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}

0800e22a <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b082      	sub	sp, #8
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
 800e232:	6039      	str	r1, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 800e234:	6838      	ldr	r0, [r7, #0]
 800e236:	f000 f9f9 	bl	800e62c <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>
 800e23a:	bf00      	nop
 800e23c:	3708      	adds	r7, #8
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}

0800e242 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 800e242:	b580      	push	{r7, lr}
 800e244:	b082      	sub	sp, #8
 800e246:	af00      	add	r7, sp, #0
 800e248:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 f9ff 	bl	800e64e <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>
 800e250:	4603      	mov	r3, r0
 800e252:	4618      	mov	r0, r3
 800e254:	3708      	adds	r7, #8
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}

0800e25a <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 800e25a:	b590      	push	{r4, r7, lr}
 800e25c:	b083      	sub	sp, #12
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
 800e262:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800e264:	687c      	ldr	r4, [r7, #4]
 800e266:	6838      	ldr	r0, [r7, #0]
 800e268:	f7fe fc88 	bl	800cb7c <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e26c:	4603      	mov	r3, r0
 800e26e:	4619      	mov	r1, r3
 800e270:	4620      	mov	r0, r4
 800e272:	f000 f9f7 	bl	800e664 <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	4618      	mov	r0, r3
 800e27a:	370c      	adds	r7, #12
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd90      	pop	{r4, r7, pc}

0800e280 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e280:	b480      	push	{r7}
 800e282:	b083      	sub	sp, #12
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	4618      	mov	r0, r3
 800e28c:	370c      	adds	r7, #12
 800e28e:	46bd      	mov	sp, r7
 800e290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e294:	4770      	bx	lr

0800e296 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e296:	b480      	push	{r7}
 800e298:	b083      	sub	sp, #12
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	370c      	adds	r7, #12
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f000 f9e0 	bl	800e67c <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3708      	adds	r7, #8
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}

0800e2c6 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 800e2c6:	b590      	push	{r4, r7, lr}
 800e2c8:	b085      	sub	sp, #20
 800e2ca:	af02      	add	r7, sp, #8
 800e2cc:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	3304      	adds	r3, #4
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f000 f874 	bl	800e3c0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800e2d8:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	3304      	adds	r3, #4
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f000 f88d 	bl	800e3fe <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800e2e4:	4602      	mov	r2, r0
    return VariantData::getMember(
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	9200      	str	r2, [sp, #0]
 800e2ea:	3314      	adds	r3, #20
 800e2ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	f7fb faba 	bl	8009868 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800e2f4:	4603      	mov	r3, r0
  }
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	370c      	adds	r7, #12
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd90      	pop	{r4, r7, pc}

0800e2fe <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b082      	sub	sp, #8
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	3304      	adds	r3, #4
 800e30a:	4618      	mov	r0, r3
 800e30c:	f000 f877 	bl	800e3fe <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800e310:	4603      	mov	r3, r0
  }
 800e312:	4618      	mov	r0, r3
 800e314:	3708      	adds	r7, #8
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}

0800e31a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>:
  VariantData* getOrCreateData() const {
 800e31a:	b580      	push	{r7, lr}
 800e31c:	b082      	sub	sp, #8
 800e31e:	af00      	add	r7, sp, #0
 800e320:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getOrCreateData(derived());
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f7ff fdb6 	bl	800de94 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800e328:	4603      	mov	r3, r0
 800e32a:	4618      	mov	r0, r3
 800e32c:	f000 f9b1 	bl	800e692 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>
 800e330:	4603      	mov	r3, r0
  }
 800e332:	4618      	mov	r0, r3
 800e334:	3708      	adds	r7, #8
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}

0800e33a <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 800e33a:	b5b0      	push	{r4, r5, r7, lr}
 800e33c:	b086      	sub	sp, #24
 800e33e:	af00      	add	r7, sp, #0
 800e340:	60f8      	str	r0, [r7, #12]
 800e342:	60b9      	str	r1, [r7, #8]
 800e344:	607a      	str	r2, [r7, #4]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 800e346:	68b8      	ldr	r0, [r7, #8]
 800e348:	f7fa fd57 	bl	8008dfa <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d006      	beq.n	800e360 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x26>
    type_ = VariantType::Uint32;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	220a      	movs	r2, #10
 800e356:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	68ba      	ldr	r2, [r7, #8]
 800e35c:	601a      	str	r2, [r3, #0]
 800e35e:	e02a      	b.n	800e3b6 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 800e360:	f107 0310 	add.w	r3, r7, #16
 800e364:	6879      	ldr	r1, [r7, #4]
 800e366:	4618      	mov	r0, r3
 800e368:	f7f7 fef3 	bl	8006152 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 800e36c:	f107 0310 	add.w	r3, r7, #16
 800e370:	4618      	mov	r0, r3
 800e372:	f7fb ff1c 	bl	800a1ae <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800e376:	4603      	mov	r3, r0
 800e378:	f083 0301 	eor.w	r3, r3, #1
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d001      	beq.n	800e386 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4c>
      return false;
 800e382:	2300      	movs	r3, #0
 800e384:	e018      	b.n	800e3b8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7e>
    type_ = VariantType::Uint64;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	221a      	movs	r2, #26
 800e38a:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 800e38c:	f107 0310 	add.w	r3, r7, #16
 800e390:	4618      	mov	r0, r3
 800e392:	f7fb ff1d 	bl	800a1d0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800e396:	4603      	mov	r3, r0
 800e398:	461a      	mov	r2, r3
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	461c      	mov	r4, r3
 800e3a4:	4615      	mov	r5, r2
 800e3a6:	f107 0310 	add.w	r3, r7, #16
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7fb ff1c 	bl	800a1e8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 800e3b6:	2301      	movs	r3, #1
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3718      	adds	r7, #24
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bdb0      	pop	{r4, r5, r7, pc}

0800e3c0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800e3c0:	b5b0      	push	{r4, r5, r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	60fb      	str	r3, [r7, #12]
    return VariantAttorney::getResourceManager(upstream_);
  }

  FORCE_INLINE VariantData* getData() const {
    return VariantData::getElement(
        VariantAttorney::getData(upstream_), index_,
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	3304      	adds	r3, #4
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f000 fa0e 	bl	800e7f2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>
 800e3d6:	4605      	mov	r5, r0
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	68dc      	ldr	r4, [r3, #12]
        VariantAttorney::getResourceManager(upstream_));
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	3304      	adds	r3, #4
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f000 fa12 	bl	800e80a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800e3e6:	4603      	mov	r3, r0
    return VariantData::getElement(
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	4621      	mov	r1, r4
 800e3ec:	4628      	mov	r0, r5
 800e3ee:	f7fc fb38 	bl	800aa62 <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 800e3f2:	4603      	mov	r3, r0
        VariantAttorney::getResourceManager(upstream_));
 800e3f4:	bf00      	nop
  }
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3710      	adds	r7, #16
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bdb0      	pop	{r4, r5, r7, pc}

0800e3fe <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800e3fe:	b580      	push	{r7, lr}
 800e400:	b082      	sub	sp, #8
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 f94f 	bl	800e6aa <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>
 800e40c:	4603      	mov	r3, r0
  }
 800e40e:	4618      	mov	r0, r3
 800e410:	3708      	adds	r7, #8
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800e416:	b580      	push	{r7, lr}
 800e418:	b082      	sub	sp, #8
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
 800e41e:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	601a      	str	r2, [r3, #0]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	3304      	adds	r3, #4
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7fe fe63 	bl	800d0f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	1d1a      	adds	r2, r3, #4
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	3304      	adds	r3, #4
 800e43a:	4619      	mov	r1, r3
 800e43c:	4610      	mov	r0, r2
 800e43e:	f7ff fa1a 	bl	800d876 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	2200      	movs	r2, #0
 800e446:	601a      	str	r2, [r3, #0]
      }
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	4618      	mov	r0, r3
 800e44c:	3708      	adds	r7, #8
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}

0800e452 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800e452:	b580      	push	{r7, lr}
 800e454:	b084      	sub	sp, #16
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800e45a:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 800e45e:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 f930 	bl	800e6c6 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>
 800e466:	4603      	mov	r3, r0
 800e468:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800e46a:	f107 0208 	add.w	r2, r7, #8
 800e46e:	f107 030c 	add.w	r3, r7, #12
 800e472:	4611      	mov	r1, r2
 800e474:	4618      	mov	r0, r3
 800e476:	f7fc fa93 	bl	800a9a0 <_ZSt3minIjERKT_S2_S2_>
 800e47a:	4603      	mov	r3, r0
 800e47c:	681b      	ldr	r3, [r3, #0]
      }
 800e47e:	4618      	mov	r0, r3
 800e480:	3710      	adds	r7, #16
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}

0800e486 <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800e486:	b480      	push	{r7}
 800e488:	b083      	sub	sp, #12
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	4618      	mov	r0, r3
 800e492:	370c      	adds	r7, #12
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr

0800e49c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e4a8:	68f8      	ldr	r0, [r7, #12]
 800e4aa:	f000 f918 	bl	800e6de <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 800e4ae:	4602      	mov	r2, r0
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	bf8c      	ite	hi
 800e4b6:	2301      	movhi	r3, #1
 800e4b8:	2300      	movls	r3, #0
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	bf14      	ite	ne
 800e4c0:	2301      	movne	r3, #1
 800e4c2:	2300      	moveq	r3, #0
 800e4c4:	b2db      	uxtb	r3, r3
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d007      	beq.n	800e4da <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e4d0:	d301      	bcc.n	800e4d6 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800e4d2:	f01a f883 	bl	80285dc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800e4d6:	f01a f87e 	bl	80285d6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	00db      	lsls	r3, r3, #3
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f01a f866 	bl	80285b0 <_Znwj>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	bf00      	nop
      }
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3710      	adds	r7, #16
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>:
    __niter_base(_Iterator __it)
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	370c      	adds	r7, #12
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr

0800e506 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800e506:	b590      	push	{r4, r7, lr}
 800e508:	b087      	sub	sp, #28
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	60f8      	str	r0, [r7, #12]
 800e50e:	60b9      	str	r1, [r7, #8]
 800e510:	607a      	str	r2, [r7, #4]
 800e512:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800e518:	e012      	b.n	800e540 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800e51a:	6978      	ldr	r0, [r7, #20]
 800e51c:	f7ff fb8e 	bl	800dc3c <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800e520:	4604      	mov	r4, r0
 800e522:	68f8      	ldr	r0, [r7, #12]
 800e524:	f7ff fb8a 	bl	800dc3c <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800e528:	4603      	mov	r3, r0
 800e52a:	683a      	ldr	r2, [r7, #0]
 800e52c:	4619      	mov	r1, r3
 800e52e:	4620      	mov	r0, r4
 800e530:	f000 f8e1 	bl	800e6f6 <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	3308      	adds	r3, #8
 800e538:	60fb      	str	r3, [r7, #12]
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	3308      	adds	r3, #8
 800e53e:	617b      	str	r3, [r7, #20]
 800e540:	68fa      	ldr	r2, [r7, #12]
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	429a      	cmp	r2, r3
 800e546:	d1e8      	bne.n	800e51a <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x14>
      return __cur;
 800e548:	697b      	ldr	r3, [r7, #20]
    }
 800e54a:	4618      	mov	r0, r3
 800e54c:	371c      	adds	r7, #28
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd90      	pop	{r4, r7, pc}

0800e552 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>:
      constexpr _Head_base()
 800e552:	b480      	push	{r7}
 800e554:	b083      	sub	sp, #12
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4618      	mov	r0, r3
 800e55e:	370c      	adds	r7, #12
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr

0800e568 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4618      	mov	r0, r3
 800e574:	370c      	adds	r7, #12
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr
	...

0800e580 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e580:	b580      	push	{r7, lr}
 800e582:	b084      	sub	sp, #16
 800e584:	af00      	add	r7, sp, #0
 800e586:	60f8      	str	r0, [r7, #12]
 800e588:	60b9      	str	r1, [r7, #8]
 800e58a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e58c:	68f8      	ldr	r0, [r7, #12]
 800e58e:	f000 f8ff 	bl	800e790 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800e592:	4602      	mov	r2, r0
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	4293      	cmp	r3, r2
 800e598:	bf8c      	ite	hi
 800e59a:	2301      	movhi	r3, #1
 800e59c:	2300      	movls	r3, #0
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	bf14      	ite	ne
 800e5a4:	2301      	movne	r3, #1
 800e5a6:	2300      	moveq	r3, #0
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d007      	beq.n	800e5be <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	4a09      	ldr	r2, [pc, #36]	@ (800e5d8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d901      	bls.n	800e5ba <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800e5b6:	f01a f811 	bl	80285dc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800e5ba:	f01a f80c 	bl	80285d6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	222c      	movs	r2, #44	@ 0x2c
 800e5c2:	fb02 f303 	mul.w	r3, r2, r3
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f019 fff2 	bl	80285b0 <_Znwj>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	bf00      	nop
      }
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3710      	adds	r7, #16
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	05d1745d 	.word	0x05d1745d

0800e5dc <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e5dc:	b480      	push	{r7}
 800e5de:	b083      	sub	sp, #12
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	370c      	adds	r7, #12
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr

0800e5f2 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b084      	sub	sp, #16
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	60f8      	str	r0, [r7, #12]
 800e5fa:	60b9      	str	r1, [r7, #8]
 800e5fc:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	222c      	movs	r2, #44	@ 0x2c
 800e602:	fb02 f303 	mul.w	r3, r2, r3
 800e606:	4619      	mov	r1, r3
 800e608:	68b8      	ldr	r0, [r7, #8]
 800e60a:	f019 ffc0 	bl	802858e <_ZdlPvj>
      }
 800e60e:	3710      	adds	r7, #16
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	4618      	mov	r0, r3
 800e622:	370c      	adds	r7, #12
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr

0800e62c <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	4619      	mov	r1, r3
 800e638:	2020      	movs	r0, #32
 800e63a:	f7fc f929 	bl	800a890 <_ZnwjPv>
 800e63e:	4603      	mov	r3, r0
 800e640:	4618      	mov	r0, r3
 800e642:	f001 ffef 	bl	8010624 <_ZN12CommsHandlerC1Ev>
    }
 800e646:	bf00      	nop
 800e648:	3708      	adds	r7, #8
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>:
      _M_addr() noexcept
 800e64e:	b480      	push	{r7}
 800e650:	b083      	sub	sp, #12
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800e656:	687b      	ldr	r3, [r7, #4]
      }
 800e658:	4618      	mov	r0, r3
 800e65a:	370c      	adds	r7, #12
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr

0800e664 <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800e664:	b480      	push	{r7}
 800e666:	b083      	sub	sp, #12
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4618      	mov	r0, r3
 800e672:	370c      	adds	r7, #12
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr

0800e67c <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800e67c:	b480      	push	{r7}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	4618      	mov	r0, r3
 800e688:	370c      	adds	r7, #12
 800e68a:	46bd      	mov	sp, r7
 800e68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e690:	4770      	bx	lr

0800e692 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800e692:	b580      	push	{r7, lr}
 800e694:	b082      	sub	sp, #8
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f000 f886 	bl	800e7ac <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>
 800e6a0:	4603      	mov	r3, r0
  }
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3708      	adds	r7, #8
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}

0800e6aa <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800e6aa:	b580      	push	{r7, lr}
 800e6ac:	b082      	sub	sp, #8
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	3304      	adds	r3, #4
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f000 f8a7 	bl	800e80a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800e6bc:	4603      	mov	r3, r0
  }
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3708      	adds	r7, #8
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}

0800e6c6 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800e6c6:	b580      	push	{r7, lr}
 800e6c8:	b082      	sub	sp, #8
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f000 f8a7 	bl	800e822 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>
 800e6d4:	4603      	mov	r3, r0
      }
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3708      	adds	r7, #8
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800e6de:	b480      	push	{r7}
 800e6e0:	b083      	sub	sp, #12
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e6e6:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	370c      	adds	r7, #12
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr

0800e6f6 <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b084      	sub	sp, #16
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	60f8      	str	r0, [r7, #12]
 800e6fe:	60b9      	str	r1, [r7, #8]
 800e700:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800e702:	68b8      	ldr	r0, [r7, #8]
 800e704:	f7fd ff12 	bl	800c52c <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800e708:	4603      	mov	r3, r0
 800e70a:	461a      	mov	r2, r3
 800e70c:	68f9      	ldr	r1, [r7, #12]
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f7fe febb 	bl	800d48a <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800e714:	68b8      	ldr	r0, [r7, #8]
 800e716:	f7ff fa91 	bl	800dc3c <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800e71a:	4603      	mov	r3, r0
 800e71c:	4619      	mov	r1, r3
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f7ff f9fd 	bl	800db1e <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>
    }
 800e724:	bf00      	nop
 800e726:	3710      	adds	r7, #16
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>:
  VariantData* getOrAddMember(TAdaptedString key, ResourceManager* resources) {
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b088      	sub	sp, #32
 800e730:	af02      	add	r7, sp, #8
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	4638      	mov	r0, r7
 800e736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (key.isNull())
 800e73a:	463b      	mov	r3, r7
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7f6 fde0 	bl	8005302 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800e742:	4603      	mov	r3, r0
 800e744:	2b00      	cmp	r3, #0
 800e746:	d001      	beq.n	800e74c <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x20>
      return nullptr;
 800e748:	2300      	movs	r3, #0
 800e74a:	e01d      	b.n	800e788 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    auto obj = isNull() ? &toObject() : asObject();
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f7fc f9c3 	bl	800aad8 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d004      	beq.n	800e762 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x36>
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f7f7 f899 	bl	8005890 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 800e75e:	4603      	mov	r3, r0
 800e760:	e003      	b.n	800e76a <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x3e>
 800e762:	68f8      	ldr	r0, [r7, #12]
 800e764:	f7f6 ff89 	bl	800567a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 800e768:	4603      	mov	r3, r0
 800e76a:	617b      	str	r3, [r7, #20]
    if (!obj)
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d101      	bne.n	800e776 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x4a>
      return nullptr;
 800e772:	2300      	movs	r3, #0
 800e774:	e008      	b.n	800e788 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    return obj->getOrAddMember(key, resources);
 800e776:	6978      	ldr	r0, [r7, #20]
 800e778:	6a3b      	ldr	r3, [r7, #32]
 800e77a:	9300      	str	r3, [sp, #0]
 800e77c:	463b      	mov	r3, r7
 800e77e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e780:	f000 f85b 	bl	800e83a <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800e784:	4603      	mov	r3, r0
 800e786:	bf00      	nop
  }
 800e788:	4618      	mov	r0, r3
 800e78a:	3718      	adds	r7, #24
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e798:	4b03      	ldr	r3, [pc, #12]	@ (800e7a8 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 800e79a:	4618      	mov	r0, r3
 800e79c:	370c      	adds	r7, #12
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a4:	4770      	bx	lr
 800e7a6:	bf00      	nop
 800e7a8:	02e8ba2e 	.word	0x02e8ba2e

0800e7ac <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>:

  VariantData* getOrCreateData() const {
 800e7ac:	b590      	push	{r4, r7, lr}
 800e7ae:	b087      	sub	sp, #28
 800e7b0:	af02      	add	r7, sp, #8
 800e7b2:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	3304      	adds	r3, #4
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f000 f85f 	bl	800e87c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>
 800e7be:	60f8      	str	r0, [r7, #12]
    if (!data)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d101      	bne.n	800e7ca <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	e00f      	b.n	800e7ea <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x3e>
    return data->getOrAddMember(key_,
 800e7ca:	68fc      	ldr	r4, [r7, #12]
                                VariantAttorney::getResourceManager(upstream_));
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	3304      	adds	r3, #4
    return data->getOrAddMember(key_,
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7ff fe14 	bl	800e3fe <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	9200      	str	r2, [sp, #0]
 800e7dc:	3314      	adds	r3, #20
 800e7de:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e7e0:	4620      	mov	r0, r4
 800e7e2:	f7ff ffa3 	bl	800e72c <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>
 800e7e6:	4603      	mov	r3, r0
                                VariantAttorney::getResourceManager(upstream_));
 800e7e8:	bf00      	nop
  }
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3714      	adds	r7, #20
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd90      	pop	{r4, r7, pc}

0800e7f2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b082      	sub	sp, #8
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
    return client.getData();
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f7fc fa11 	bl	800ac22 <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>
 800e800:	4603      	mov	r3, r0
  }
 800e802:	4618      	mov	r0, r3
 800e804:	3708      	adds	r7, #8
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}

0800e80a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b082      	sub	sp, #8
 800e80e:	af00      	add	r7, sp, #0
 800e810:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f7fc f9f9 	bl	800ac0a <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>
 800e818:	4603      	mov	r3, r0
  }
 800e81a:	4618      	mov	r0, r3
 800e81c:	3708      	adds	r7, #8
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}

0800e822 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e822:	b580      	push	{r7, lr}
 800e824:	b082      	sub	sp, #8
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7ff ff57 	bl	800e6de <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 800e830:	4603      	mov	r3, r0
 800e832:	4618      	mov	r0, r3
 800e834:	3708      	adds	r7, #8
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}

0800e83a <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
  it.next(resources);
  return it.data();
}

template <typename TAdaptedString>
VariantData* ObjectData::getOrAddMember(TAdaptedString key,
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b088      	sub	sp, #32
 800e83e:	af02      	add	r7, sp, #8
 800e840:	60f8      	str	r0, [r7, #12]
 800e842:	4638      	mov	r0, r7
 800e844:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                        ResourceManager* resources) {
  auto data = getMember(key, resources);
 800e848:	6a3b      	ldr	r3, [r7, #32]
 800e84a:	9300      	str	r3, [sp, #0]
 800e84c:	463b      	mov	r3, r7
 800e84e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e850:	68f8      	ldr	r0, [r7, #12]
 800e852:	f7f9 fcba 	bl	80081ca <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 800e856:	6178      	str	r0, [r7, #20]
  if (data)
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d001      	beq.n	800e862 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x28>
    return data;
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	e008      	b.n	800e874 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x3a>
  return addMember(key, resources);
 800e862:	6a3b      	ldr	r3, [r7, #32]
 800e864:	9300      	str	r3, [sp, #0]
 800e866:	463b      	mov	r3, r7
 800e868:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e86a:	68f8      	ldr	r0, [r7, #12]
 800e86c:	f000 f812 	bl	800e894 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800e870:	4603      	mov	r3, r0
 800e872:	bf00      	nop
}
 800e874:	4618      	mov	r0, r3
 800e876:	3718      	adds	r7, #24
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b082      	sub	sp, #8
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f000 f85b 	bl	800e940 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>
 800e88a:	4603      	mov	r3, r0
  }
 800e88c:	4618      	mov	r0, r3
 800e88e:	3708      	adds	r7, #8
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 800e894:	b580      	push	{r7, lr}
 800e896:	b08a      	sub	sp, #40	@ 0x28
 800e898:	af02      	add	r7, sp, #8
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	4638      	mov	r0, r7
 800e89e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 800e8a2:	f107 0318 	add.w	r3, r7, #24
 800e8a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7f7 fbcd 	bl	8006048 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 800e8ae:	f107 0318 	add.w	r3, r7, #24
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7f8 fe4c 	bl	8007550 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	f083 0301 	eor.w	r3, r3, #1
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d001      	beq.n	800e8c8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x34>
    return nullptr;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	e037      	b.n	800e938 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  auto valueSlot = resources->allocVariant();
 800e8c8:	f107 0310 	add.w	r3, r7, #16
 800e8cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7f7 fbba 	bl	8006048 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 800e8d4:	f107 0310 	add.w	r3, r7, #16
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7f8 fe39 	bl	8007550 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	f083 0301 	eor.w	r3, r3, #1
 800e8e4:	b2db      	uxtb	r3, r3
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d001      	beq.n	800e8ee <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x5a>
    return nullptr;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	e024      	b.n	800e938 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  if (!keySlot->setString(key, resources))
 800e8ee:	f107 0318 	add.w	r3, r7, #24
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7f8 fe55 	bl	80075a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 800e8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8fa:	9300      	str	r3, [sp, #0]
 800e8fc:	463b      	mov	r3, r7
 800e8fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e900:	f7fd fe50 	bl	800c5a4 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>
 800e904:	4603      	mov	r3, r0
 800e906:	f083 0301 	eor.w	r3, r3, #1
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d001      	beq.n	800e914 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x80>
    return nullptr;
 800e910:	2300      	movs	r3, #0
 800e912:	e011      	b.n	800e938 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 800e914:	68f8      	ldr	r0, [r7, #12]
 800e916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e918:	9301      	str	r3, [sp, #4]
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	9300      	str	r3, [sp, #0]
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	f107 0218 	add.w	r2, r7, #24
 800e924:	ca06      	ldmia	r2, {r1, r2}
 800e926:	f7f7 fb08 	bl	8005f3a <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 800e92a:	f107 0310 	add.w	r3, r7, #16
 800e92e:	4618      	mov	r0, r3
 800e930:	f7f8 fe1f 	bl	8007572 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800e934:	4603      	mov	r3, r0
 800e936:	bf00      	nop
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3720      	adds	r7, #32
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>:
  }

  VariantData* getOrCreateData() const {
 800e940:	b5b0      	push	{r4, r5, r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	3304      	adds	r3, #4
 800e94c:	4618      	mov	r0, r3
 800e94e:	f000 f81a 	bl	800e986 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>
 800e952:	60f8      	str	r0, [r7, #12]
    if (!data)
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d101      	bne.n	800e95e <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800e95a:	2300      	movs	r3, #0
 800e95c:	e00f      	b.n	800e97e <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x3e>
    return data->getOrAddElement(
 800e95e:	68fc      	ldr	r4, [r7, #12]
        index_, VariantAttorney::getResourceManager(upstream_));
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	68dd      	ldr	r5, [r3, #12]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	3304      	adds	r3, #4
    return data->getOrAddElement(
 800e968:	4618      	mov	r0, r3
 800e96a:	f7ff ff4e 	bl	800e80a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800e96e:	4603      	mov	r3, r0
 800e970:	461a      	mov	r2, r3
 800e972:	4629      	mov	r1, r5
 800e974:	4620      	mov	r0, r4
 800e976:	f7fc f889 	bl	800aa8c <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>
 800e97a:	4603      	mov	r3, r0
        index_, VariantAttorney::getResourceManager(upstream_));
 800e97c:	bf00      	nop
  }
 800e97e:	4618      	mov	r0, r3
 800e980:	3710      	adds	r7, #16
 800e982:	46bd      	mov	sp, r7
 800e984:	bdb0      	pop	{r4, r5, r7, pc}

0800e986 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800e986:	b580      	push	{r7, lr}
 800e988:	b082      	sub	sp, #8
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f7fc f955 	bl	800ac3e <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>
 800e994:	4603      	mov	r3, r0
  }
 800e996:	4618      	mov	r0, r3
 800e998:	3708      	adds	r7, #8
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
	...

0800e9a0 <_Z41__static_initialization_and_destruction_0ii>:
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d10a      	bne.n	800e9c6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d105      	bne.n	800e9c6 <_Z41__static_initialization_and_destruction_0ii+0x26>
__attribute__((section(".DmaSection"))) volatile txData_t txData;
 800e9ba:	4805      	ldr	r0, [pc, #20]	@ (800e9d0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800e9bc:	f7fb ffbe 	bl	800a93c <_ZN8txData_tC1Ev>
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;
 800e9c0:	4804      	ldr	r0, [pc, #16]	@ (800e9d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800e9c2:	f7f2 f937 	bl	8000c34 <_ZN8rxData_tC1Ev>
}
 800e9c6:	bf00      	nop
 800e9c8:	3708      	adds	r7, #8
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	30000080 	.word	0x30000080
 800e9d4:	300000c0 	.word	0x300000c0

0800e9d8 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	4a05      	ldr	r2, [pc, #20]	@ (800e9f8 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	601a      	str	r2, [r3, #0]
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fd fdbb 	bl	800c564 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3708      	adds	r7, #8
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	0802b370 	.word	0x0802b370

0800e9fc <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f7ff ffe7 	bl	800e9d8 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800ea0a:	212c      	movs	r1, #44	@ 0x2c
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f019 fdbe 	bl	802858e <_ZdlPvj>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4618      	mov	r0, r3
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800ea1c:	b590      	push	{r4, r7, lr}
 800ea1e:	b083      	sub	sp, #12
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	330c      	adds	r3, #12
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f000 f856 	bl	800eada <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800ea2e:	4604      	mov	r4, r0
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7ff f9ce 	bl	800ddd2 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800ea36:	4603      	mov	r3, r0
 800ea38:	4619      	mov	r1, r3
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	f000 f859 	bl	800eaf2 <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>
      }
 800ea40:	bf00      	nop
 800ea42:	370c      	adds	r7, #12
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd90      	pop	{r4, r7, pc}

0800ea48 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b086      	sub	sp, #24
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	330c      	adds	r3, #12
 800ea54:	4618      	mov	r0, r3
 800ea56:	f000 f840 	bl	800eada <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	f107 0314 	add.w	r3, r7, #20
 800ea60:	4611      	mov	r1, r2
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7ff f935 	bl	800dcd2 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800ea68:	f107 0114 	add.w	r1, r7, #20
 800ea6c:	f107 030c 	add.w	r3, r7, #12
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7ff fb85 	bl	800e182 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f7ff ffad 	bl	800e9d8 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800ea7e:	f107 030c 	add.w	r3, r7, #12
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7ff f951 	bl	800dd2a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800ea88:	f107 0314 	add.w	r3, r7, #20
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7ff f92d 	bl	800dcec <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800ea92:	3718      	adds	r7, #24
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f7ff f995 	bl	800ddd2 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800eaa8:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800eaaa:	f7fb ff3d 	bl	800a928 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 800eaae:	4602      	mov	r2, r0
	    ||
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d005      	beq.n	800eac2 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 800eab6:	6838      	ldr	r0, [r7, #0]
 800eab8:	f019 fda6 	bl	8028608 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 800eabc:	4603      	mov	r3, r0
	    ||
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d001      	beq.n	800eac6 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 800eac2:	2301      	movs	r3, #1
 800eac4:	e000      	b.n	800eac8 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 800eac6:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d001      	beq.n	800ead0 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	e000      	b.n	800ead2 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 800ead0:	2300      	movs	r3, #0
      }
 800ead2:	4618      	mov	r0, r3
 800ead4:	3710      	adds	r7, #16
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}

0800eada <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 800eada:	b580      	push	{r7, lr}
 800eadc:	b082      	sub	sp, #8
 800eade:	af00      	add	r7, sp, #0
 800eae0:	6078      	str	r0, [r7, #4]
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f000 f811 	bl	800eb0a <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 800eae8:	4603      	mov	r3, r0
 800eaea:	4618      	mov	r0, r3
 800eaec:	3708      	adds	r7, #8
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b082      	sub	sp, #8
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	6078      	str	r0, [r7, #4]
 800eafa:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 800eafc:	6838      	ldr	r0, [r7, #0]
 800eafe:	f000 f80f 	bl	800eb20 <_ZSt8_DestroyI12CommsHandlerEvPT_>
 800eb02:	bf00      	nop
 800eb04:	3708      	adds	r7, #8
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}

0800eb0a <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800eb0a:	b480      	push	{r7}
 800eb0c:	b083      	sub	sp, #12
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	4618      	mov	r0, r3
 800eb16:	370c      	adds	r7, #12
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr

0800eb20 <_ZSt8_DestroyI12CommsHandlerEvPT_>:
    _Destroy(_Tp* __pointer)
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	4798      	blx	r3
    }
 800eb32:	bf00      	nop
 800eb34:	3708      	adds	r7, #8
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800eb42:	2001      	movs	r0, #1
 800eb44:	f7ff ff2c 	bl	800e9a0 <_Z41__static_initialization_and_destruction_0ii>
 800eb48:	bd80      	pop	{r7, pc}
	...

0800eb4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b083      	sub	sp, #12
 800eb50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800eb52:	4b0a      	ldr	r3, [pc, #40]	@ (800eb7c <HAL_MspInit+0x30>)
 800eb54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800eb58:	4a08      	ldr	r2, [pc, #32]	@ (800eb7c <HAL_MspInit+0x30>)
 800eb5a:	f043 0302 	orr.w	r3, r3, #2
 800eb5e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800eb62:	4b06      	ldr	r3, [pc, #24]	@ (800eb7c <HAL_MspInit+0x30>)
 800eb64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800eb68:	f003 0302 	and.w	r3, r3, #2
 800eb6c:	607b      	str	r3, [r7, #4]
 800eb6e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800eb70:	bf00      	nop
 800eb72:	370c      	adds	r7, #12
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr
 800eb7c:	58024400 	.word	0x58024400

0800eb80 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b0bc      	sub	sp, #240	@ 0xf0
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb88:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	601a      	str	r2, [r3, #0]
 800eb90:	605a      	str	r2, [r3, #4]
 800eb92:	609a      	str	r2, [r3, #8]
 800eb94:	60da      	str	r2, [r3, #12]
 800eb96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800eb98:	f107 0318 	add.w	r3, r7, #24
 800eb9c:	22c0      	movs	r2, #192	@ 0xc0
 800eb9e:	2100      	movs	r1, #0
 800eba0:	4618      	mov	r0, r3
 800eba2:	f01a fd29 	bl	80295f8 <memset>
  if(hsd->Instance==SDMMC1)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	4a3c      	ldr	r2, [pc, #240]	@ (800ec9c <HAL_SD_MspInit+0x11c>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d171      	bne.n	800ec94 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800ebb0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ebb4:	f04f 0300 	mov.w	r3, #0
 800ebb8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ebc0:	f107 0318 	add.w	r3, r7, #24
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f010 fee5 	bl	801f994 <HAL_RCCEx_PeriphCLKConfig>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d001      	beq.n	800ebd4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800ebd0:	f7fb fe52 	bl	800a878 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800ebd4:	4b32      	ldr	r3, [pc, #200]	@ (800eca0 <HAL_SD_MspInit+0x120>)
 800ebd6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ebda:	4a31      	ldr	r2, [pc, #196]	@ (800eca0 <HAL_SD_MspInit+0x120>)
 800ebdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ebe0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800ebe4:	4b2e      	ldr	r3, [pc, #184]	@ (800eca0 <HAL_SD_MspInit+0x120>)
 800ebe6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ebea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ebee:	617b      	str	r3, [r7, #20]
 800ebf0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ebf2:	4b2b      	ldr	r3, [pc, #172]	@ (800eca0 <HAL_SD_MspInit+0x120>)
 800ebf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ebf8:	4a29      	ldr	r2, [pc, #164]	@ (800eca0 <HAL_SD_MspInit+0x120>)
 800ebfa:	f043 0304 	orr.w	r3, r3, #4
 800ebfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ec02:	4b27      	ldr	r3, [pc, #156]	@ (800eca0 <HAL_SD_MspInit+0x120>)
 800ec04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ec08:	f003 0304 	and.w	r3, r3, #4
 800ec0c:	613b      	str	r3, [r7, #16]
 800ec0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ec10:	4b23      	ldr	r3, [pc, #140]	@ (800eca0 <HAL_SD_MspInit+0x120>)
 800ec12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ec16:	4a22      	ldr	r2, [pc, #136]	@ (800eca0 <HAL_SD_MspInit+0x120>)
 800ec18:	f043 0308 	orr.w	r3, r3, #8
 800ec1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ec20:	4b1f      	ldr	r3, [pc, #124]	@ (800eca0 <HAL_SD_MspInit+0x120>)
 800ec22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ec26:	f003 0308 	and.w	r3, r3, #8
 800ec2a:	60fb      	str	r3, [r7, #12]
 800ec2c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800ec2e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800ec32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec36:	2302      	movs	r3, #2
 800ec38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec42:	2303      	movs	r3, #3
 800ec44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800ec48:	230c      	movs	r3, #12
 800ec4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ec4e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ec52:	4619      	mov	r1, r3
 800ec54:	4813      	ldr	r0, [pc, #76]	@ (800eca4 <HAL_SD_MspInit+0x124>)
 800ec56:	f00f fc9b 	bl	801e590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ec5a:	2304      	movs	r3, #4
 800ec5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec60:	2302      	movs	r3, #2
 800ec62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec66:	2300      	movs	r3, #0
 800ec68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec6c:	2303      	movs	r3, #3
 800ec6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800ec72:	230c      	movs	r3, #12
 800ec74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ec78:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	480a      	ldr	r0, [pc, #40]	@ (800eca8 <HAL_SD_MspInit+0x128>)
 800ec80:	f00f fc86 	bl	801e590 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800ec84:	2200      	movs	r2, #0
 800ec86:	2100      	movs	r1, #0
 800ec88:	2031      	movs	r0, #49	@ 0x31
 800ec8a:	f00d f890 	bl	801bdae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800ec8e:	2031      	movs	r0, #49	@ 0x31
 800ec90:	f00d f8a7 	bl	801bde2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800ec94:	bf00      	nop
 800ec96:	37f0      	adds	r7, #240	@ 0xf0
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	52007000 	.word	0x52007000
 800eca0:	58024400 	.word	0x58024400
 800eca4:	58020800 	.word	0x58020800
 800eca8:	58020c00 	.word	0x58020c00

0800ecac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b0ba      	sub	sp, #232	@ 0xe8
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ecb4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ecb8:	2200      	movs	r2, #0
 800ecba:	601a      	str	r2, [r3, #0]
 800ecbc:	605a      	str	r2, [r3, #4]
 800ecbe:	609a      	str	r2, [r3, #8]
 800ecc0:	60da      	str	r2, [r3, #12]
 800ecc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ecc4:	f107 0310 	add.w	r3, r7, #16
 800ecc8:	22c0      	movs	r2, #192	@ 0xc0
 800ecca:	2100      	movs	r1, #0
 800eccc:	4618      	mov	r0, r3
 800ecce:	f01a fc93 	bl	80295f8 <memset>
  if(huart->Instance==USART1)
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	4a27      	ldr	r2, [pc, #156]	@ (800ed74 <HAL_UART_MspInit+0xc8>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d146      	bne.n	800ed6a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800ecdc:	f04f 0201 	mov.w	r2, #1
 800ece0:	f04f 0300 	mov.w	r3, #0
 800ece4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800ece8:	2300      	movs	r3, #0
 800ecea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ecee:	f107 0310 	add.w	r3, r7, #16
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f010 fe4e 	bl	801f994 <HAL_RCCEx_PeriphCLKConfig>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d001      	beq.n	800ed02 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800ecfe:	f7fb fdbb 	bl	800a878 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ed02:	4b1d      	ldr	r3, [pc, #116]	@ (800ed78 <HAL_UART_MspInit+0xcc>)
 800ed04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ed08:	4a1b      	ldr	r2, [pc, #108]	@ (800ed78 <HAL_UART_MspInit+0xcc>)
 800ed0a:	f043 0310 	orr.w	r3, r3, #16
 800ed0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800ed12:	4b19      	ldr	r3, [pc, #100]	@ (800ed78 <HAL_UART_MspInit+0xcc>)
 800ed14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ed18:	f003 0310 	and.w	r3, r3, #16
 800ed1c:	60fb      	str	r3, [r7, #12]
 800ed1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed20:	4b15      	ldr	r3, [pc, #84]	@ (800ed78 <HAL_UART_MspInit+0xcc>)
 800ed22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ed26:	4a14      	ldr	r2, [pc, #80]	@ (800ed78 <HAL_UART_MspInit+0xcc>)
 800ed28:	f043 0301 	orr.w	r3, r3, #1
 800ed2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ed30:	4b11      	ldr	r3, [pc, #68]	@ (800ed78 <HAL_UART_MspInit+0xcc>)
 800ed32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ed36:	f003 0301 	and.w	r3, r3, #1
 800ed3a:	60bb      	str	r3, [r7, #8]
 800ed3c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ed3e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800ed42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed46:	2302      	movs	r3, #2
 800ed48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ed52:	2300      	movs	r3, #0
 800ed54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ed58:	2307      	movs	r3, #7
 800ed5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed5e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ed62:	4619      	mov	r1, r3
 800ed64:	4805      	ldr	r0, [pc, #20]	@ (800ed7c <HAL_UART_MspInit+0xd0>)
 800ed66:	f00f fc13 	bl	801e590 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800ed6a:	bf00      	nop
 800ed6c:	37e8      	adds	r7, #232	@ 0xe8
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	40011000 	.word	0x40011000
 800ed78:	58024400 	.word	0x58024400
 800ed7c:	58020000 	.word	0x58020000

0800ed80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ed80:	b480      	push	{r7}
 800ed82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ed84:	bf00      	nop
 800ed86:	e7fd      	b.n	800ed84 <NMI_Handler+0x4>

0800ed88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ed8c:	bf00      	nop
 800ed8e:	e7fd      	b.n	800ed8c <HardFault_Handler+0x4>

0800ed90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ed90:	b480      	push	{r7}
 800ed92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ed94:	bf00      	nop
 800ed96:	e7fd      	b.n	800ed94 <MemManage_Handler+0x4>

0800ed98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ed98:	b480      	push	{r7}
 800ed9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ed9c:	bf00      	nop
 800ed9e:	e7fd      	b.n	800ed9c <BusFault_Handler+0x4>

0800eda0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800eda0:	b480      	push	{r7}
 800eda2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800eda4:	bf00      	nop
 800eda6:	e7fd      	b.n	800eda4 <UsageFault_Handler+0x4>

0800eda8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800eda8:	b480      	push	{r7}
 800edaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800edac:	bf00      	nop
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr

0800edb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800edb6:	b480      	push	{r7}
 800edb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800edba:	bf00      	nop
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr

0800edc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800edc4:	b480      	push	{r7}
 800edc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800edc8:	bf00      	nop
 800edca:	46bd      	mov	sp, r7
 800edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd0:	4770      	bx	lr

0800edd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800edd2:	b580      	push	{r7, lr}
 800edd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800edd6:	f00c fea9 	bl	801bb2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800edda:	bf00      	nop
 800eddc:	bd80      	pop	{r7, pc}
	...

0800ede0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800ede4:	4802      	ldr	r0, [pc, #8]	@ (800edf0 <SDMMC1_IRQHandler+0x10>)
 800ede6:	f013 fd43 	bl	8022870 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800edea:	bf00      	nop
 800edec:	bd80      	pop	{r7, pc}
 800edee:	bf00      	nop
 800edf0:	240002fc 	.word	0x240002fc

0800edf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800edf4:	b480      	push	{r7}
 800edf6:	af00      	add	r7, sp, #0
	return 1;
 800edf8:	2301      	movs	r3, #1
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <_kill>:

int _kill(int pid, int sig)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800ee0e:	f01a fc95 	bl	802973c <__errno>
 800ee12:	4603      	mov	r3, r0
 800ee14:	2216      	movs	r2, #22
 800ee16:	601a      	str	r2, [r3, #0]
	return -1;
 800ee18:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3708      	adds	r7, #8
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <_exit>:

void _exit (int status)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800ee2c:	f04f 31ff 	mov.w	r1, #4294967295
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f7ff ffe7 	bl	800ee04 <_kill>
	while (1) {}		/* Make sure we hang here */
 800ee36:	bf00      	nop
 800ee38:	e7fd      	b.n	800ee36 <_exit+0x12>

0800ee3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ee3a:	b580      	push	{r7, lr}
 800ee3c:	b086      	sub	sp, #24
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	60f8      	str	r0, [r7, #12]
 800ee42:	60b9      	str	r1, [r7, #8]
 800ee44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ee46:	2300      	movs	r3, #0
 800ee48:	617b      	str	r3, [r7, #20]
 800ee4a:	e00a      	b.n	800ee62 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ee4c:	f3af 8000 	nop.w
 800ee50:	4601      	mov	r1, r0
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	1c5a      	adds	r2, r3, #1
 800ee56:	60ba      	str	r2, [r7, #8]
 800ee58:	b2ca      	uxtb	r2, r1
 800ee5a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	3301      	adds	r3, #1
 800ee60:	617b      	str	r3, [r7, #20]
 800ee62:	697a      	ldr	r2, [r7, #20]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	dbf0      	blt.n	800ee4c <_read+0x12>
	}

return len;
 800ee6a:	687b      	ldr	r3, [r7, #4]
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3718      	adds	r7, #24
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}

0800ee74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b086      	sub	sp, #24
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	60f8      	str	r0, [r7, #12]
 800ee7c:	60b9      	str	r1, [r7, #8]
 800ee7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ee80:	2300      	movs	r3, #0
 800ee82:	617b      	str	r3, [r7, #20]
 800ee84:	e009      	b.n	800ee9a <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	1c5a      	adds	r2, r3, #1
 800ee8a:	60ba      	str	r2, [r7, #8]
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7fb fa3e 	bl	800a310 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	3301      	adds	r3, #1
 800ee98:	617b      	str	r3, [r7, #20]
 800ee9a:	697a      	ldr	r2, [r7, #20]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	dbf1      	blt.n	800ee86 <_write+0x12>
	}
	return len;
 800eea2:	687b      	ldr	r3, [r7, #4]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3718      	adds	r7, #24
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <_close>:

int _close(int file)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b083      	sub	sp, #12
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
	return -1;
 800eeb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	370c      	adds	r7, #12
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr

0800eec4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b083      	sub	sp, #12
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800eed4:	605a      	str	r2, [r3, #4]
	return 0;
 800eed6:	2300      	movs	r3, #0
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	370c      	adds	r7, #12
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <_isatty>:

int _isatty(int file)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b083      	sub	sp, #12
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
	return 1;
 800eeec:	2301      	movs	r3, #1
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	370c      	adds	r7, #12
 800eef2:	46bd      	mov	sp, r7
 800eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef8:	4770      	bx	lr

0800eefa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800eefa:	b480      	push	{r7}
 800eefc:	b085      	sub	sp, #20
 800eefe:	af00      	add	r7, sp, #0
 800ef00:	60f8      	str	r0, [r7, #12]
 800ef02:	60b9      	str	r1, [r7, #8]
 800ef04:	607a      	str	r2, [r7, #4]
	return 0;
 800ef06:	2300      	movs	r3, #0
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3714      	adds	r7, #20
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b086      	sub	sp, #24
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ef1c:	4a14      	ldr	r2, [pc, #80]	@ (800ef70 <_sbrk+0x5c>)
 800ef1e:	4b15      	ldr	r3, [pc, #84]	@ (800ef74 <_sbrk+0x60>)
 800ef20:	1ad3      	subs	r3, r2, r3
 800ef22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ef28:	4b13      	ldr	r3, [pc, #76]	@ (800ef78 <_sbrk+0x64>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d102      	bne.n	800ef36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ef30:	4b11      	ldr	r3, [pc, #68]	@ (800ef78 <_sbrk+0x64>)
 800ef32:	4a12      	ldr	r2, [pc, #72]	@ (800ef7c <_sbrk+0x68>)
 800ef34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ef36:	4b10      	ldr	r3, [pc, #64]	@ (800ef78 <_sbrk+0x64>)
 800ef38:	681a      	ldr	r2, [r3, #0]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	693a      	ldr	r2, [r7, #16]
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d207      	bcs.n	800ef54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ef44:	f01a fbfa 	bl	802973c <__errno>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	220c      	movs	r2, #12
 800ef4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ef4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef52:	e009      	b.n	800ef68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ef54:	4b08      	ldr	r3, [pc, #32]	@ (800ef78 <_sbrk+0x64>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ef5a:	4b07      	ldr	r3, [pc, #28]	@ (800ef78 <_sbrk+0x64>)
 800ef5c:	681a      	ldr	r2, [r3, #0]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4413      	add	r3, r2
 800ef62:	4a05      	ldr	r2, [pc, #20]	@ (800ef78 <_sbrk+0x64>)
 800ef64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ef66:	68fb      	ldr	r3, [r7, #12]
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3718      	adds	r7, #24
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	24080000 	.word	0x24080000
 800ef74:	00000400 	.word	0x00000400
 800ef78:	2400040c 	.word	0x2400040c
 800ef7c:	24000c10 	.word	0x24000c10

0800ef80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ef80:	b480      	push	{r7}
 800ef82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800ef84:	4b37      	ldr	r3, [pc, #220]	@ (800f064 <SystemInit+0xe4>)
 800ef86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ef8a:	4a36      	ldr	r2, [pc, #216]	@ (800f064 <SystemInit+0xe4>)
 800ef8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ef90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800ef94:	4b34      	ldr	r3, [pc, #208]	@ (800f068 <SystemInit+0xe8>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f003 030f 	and.w	r3, r3, #15
 800ef9c:	2b06      	cmp	r3, #6
 800ef9e:	d807      	bhi.n	800efb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800efa0:	4b31      	ldr	r3, [pc, #196]	@ (800f068 <SystemInit+0xe8>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f023 030f 	bic.w	r3, r3, #15
 800efa8:	4a2f      	ldr	r2, [pc, #188]	@ (800f068 <SystemInit+0xe8>)
 800efaa:	f043 0307 	orr.w	r3, r3, #7
 800efae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800efb0:	4b2e      	ldr	r3, [pc, #184]	@ (800f06c <SystemInit+0xec>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4a2d      	ldr	r2, [pc, #180]	@ (800f06c <SystemInit+0xec>)
 800efb6:	f043 0301 	orr.w	r3, r3, #1
 800efba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800efbc:	4b2b      	ldr	r3, [pc, #172]	@ (800f06c <SystemInit+0xec>)
 800efbe:	2200      	movs	r2, #0
 800efc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800efc2:	4b2a      	ldr	r3, [pc, #168]	@ (800f06c <SystemInit+0xec>)
 800efc4:	681a      	ldr	r2, [r3, #0]
 800efc6:	4929      	ldr	r1, [pc, #164]	@ (800f06c <SystemInit+0xec>)
 800efc8:	4b29      	ldr	r3, [pc, #164]	@ (800f070 <SystemInit+0xf0>)
 800efca:	4013      	ands	r3, r2
 800efcc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800efce:	4b26      	ldr	r3, [pc, #152]	@ (800f068 <SystemInit+0xe8>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f003 0308 	and.w	r3, r3, #8
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d007      	beq.n	800efea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800efda:	4b23      	ldr	r3, [pc, #140]	@ (800f068 <SystemInit+0xe8>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f023 030f 	bic.w	r3, r3, #15
 800efe2:	4a21      	ldr	r2, [pc, #132]	@ (800f068 <SystemInit+0xe8>)
 800efe4:	f043 0307 	orr.w	r3, r3, #7
 800efe8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800efea:	4b20      	ldr	r3, [pc, #128]	@ (800f06c <SystemInit+0xec>)
 800efec:	2200      	movs	r2, #0
 800efee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800eff0:	4b1e      	ldr	r3, [pc, #120]	@ (800f06c <SystemInit+0xec>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800eff6:	4b1d      	ldr	r3, [pc, #116]	@ (800f06c <SystemInit+0xec>)
 800eff8:	2200      	movs	r2, #0
 800effa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800effc:	4b1b      	ldr	r3, [pc, #108]	@ (800f06c <SystemInit+0xec>)
 800effe:	4a1d      	ldr	r2, [pc, #116]	@ (800f074 <SystemInit+0xf4>)
 800f000:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800f002:	4b1a      	ldr	r3, [pc, #104]	@ (800f06c <SystemInit+0xec>)
 800f004:	4a1c      	ldr	r2, [pc, #112]	@ (800f078 <SystemInit+0xf8>)
 800f006:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800f008:	4b18      	ldr	r3, [pc, #96]	@ (800f06c <SystemInit+0xec>)
 800f00a:	4a1c      	ldr	r2, [pc, #112]	@ (800f07c <SystemInit+0xfc>)
 800f00c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800f00e:	4b17      	ldr	r3, [pc, #92]	@ (800f06c <SystemInit+0xec>)
 800f010:	2200      	movs	r2, #0
 800f012:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800f014:	4b15      	ldr	r3, [pc, #84]	@ (800f06c <SystemInit+0xec>)
 800f016:	4a19      	ldr	r2, [pc, #100]	@ (800f07c <SystemInit+0xfc>)
 800f018:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800f01a:	4b14      	ldr	r3, [pc, #80]	@ (800f06c <SystemInit+0xec>)
 800f01c:	2200      	movs	r2, #0
 800f01e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800f020:	4b12      	ldr	r3, [pc, #72]	@ (800f06c <SystemInit+0xec>)
 800f022:	4a16      	ldr	r2, [pc, #88]	@ (800f07c <SystemInit+0xfc>)
 800f024:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800f026:	4b11      	ldr	r3, [pc, #68]	@ (800f06c <SystemInit+0xec>)
 800f028:	2200      	movs	r2, #0
 800f02a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800f02c:	4b0f      	ldr	r3, [pc, #60]	@ (800f06c <SystemInit+0xec>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4a0e      	ldr	r2, [pc, #56]	@ (800f06c <SystemInit+0xec>)
 800f032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f036:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800f038:	4b0c      	ldr	r3, [pc, #48]	@ (800f06c <SystemInit+0xec>)
 800f03a:	2200      	movs	r2, #0
 800f03c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800f03e:	4b10      	ldr	r3, [pc, #64]	@ (800f080 <SystemInit+0x100>)
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	4b10      	ldr	r3, [pc, #64]	@ (800f084 <SystemInit+0x104>)
 800f044:	4013      	ands	r3, r2
 800f046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f04a:	d202      	bcs.n	800f052 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800f04c:	4b0e      	ldr	r3, [pc, #56]	@ (800f088 <SystemInit+0x108>)
 800f04e:	2201      	movs	r2, #1
 800f050:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800f052:	4b0e      	ldr	r3, [pc, #56]	@ (800f08c <SystemInit+0x10c>)
 800f054:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800f058:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800f05a:	bf00      	nop
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr
 800f064:	e000ed00 	.word	0xe000ed00
 800f068:	52002000 	.word	0x52002000
 800f06c:	58024400 	.word	0x58024400
 800f070:	eaf6ed7f 	.word	0xeaf6ed7f
 800f074:	02020200 	.word	0x02020200
 800f078:	01ff0000 	.word	0x01ff0000
 800f07c:	01010280 	.word	0x01010280
 800f080:	5c001000 	.word	0x5c001000
 800f084:	ffff0000 	.word	0xffff0000
 800f088:	51008108 	.word	0x51008108
 800f08c:	52004000 	.word	0x52004000

0800f090 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "blink.h"


shared_ptr<Module> Blink::create(const JsonObject& config, Remora* instance) {
 800f090:	b580      	push	{r7, lr}
 800f092:	b09a      	sub	sp, #104	@ 0x68
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	607a      	str	r2, [r7, #4]
    const char* pin = config["Pin"];
 800f09c:	f107 031c 	add.w	r3, r7, #28
 800f0a0:	4a23      	ldr	r2, [pc, #140]	@ (800f130 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa0>)
 800f0a2:	68b9      	ldr	r1, [r7, #8]
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f000 f8b7 	bl	800f218 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f0aa:	f107 031c 	add.w	r3, r7, #28
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7f8 fcdb 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	61bb      	str	r3, [r7, #24]
    int frequency = config["Frequency"];
 800f0b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f0bc:	4a1d      	ldr	r2, [pc, #116]	@ (800f134 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa4>)
 800f0be:	68b9      	ldr	r1, [r7, #8]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7f8 fcde 	bl	8007a82 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f0c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f000 f8c9 	bl	800f262 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	617b      	str	r3, [r7, #20]
    uint32_t threadFreq = config["ThreadFreq"];
 800f0d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f0d8:	4a17      	ldr	r2, [pc, #92]	@ (800f138 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa8>)
 800f0da:	68b9      	ldr	r1, [r7, #8]
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f000 f8cc 	bl	800f27a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f0e2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7f8 fcf0 	bl	8007acc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	613b      	str	r3, [r7, #16]
    
    printf("Creating Blink module on pin %s with frequency %d Hz\n", pin, frequency);
 800f0f0:	69bb      	ldr	r3, [r7, #24]
 800f0f2:	697a      	ldr	r2, [r7, #20]
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	4811      	ldr	r0, [pc, #68]	@ (800f13c <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xac>)
 800f0f8:	f01a f904 	bl	8029304 <iprintf>
	return std::make_unique<Blink>(pin, threadFreq, frequency);
 800f0fc:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800f100:	f107 0314 	add.w	r3, r7, #20
 800f104:	f107 0210 	add.w	r2, r7, #16
 800f108:	f107 0118 	add.w	r1, r7, #24
 800f10c:	f000 f8da 	bl	800f2c4 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800f110:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f114:	4619      	mov	r1, r3
 800f116:	68f8      	ldr	r0, [r7, #12]
 800f118:	f000 f937 	bl	800f38a <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800f11c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f120:	4618      	mov	r0, r3
 800f122:	f000 f910 	bl	800f346 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>
 800f126:	bf00      	nop
}
 800f128:	68f8      	ldr	r0, [r7, #12]
 800f12a:	3768      	adds	r7, #104	@ 0x68
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	0802a77c 	.word	0x0802a77c
 800f134:	0802a780 	.word	0x0802a780
 800f138:	0802a78c 	.word	0x0802a78c
 800f13c:	0802a798 	.word	0x0802a798

0800f140 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>:
 * @brief Constructs a Blink module.
 * 
 * Initializes the blink pin and sets up the toggle period based on the 
 * servo thread frequency and desired blink frequency.
 */
Blink::Blink(std::string _portAndPin, uint32_t _threadFreq, uint32_t _freq) :
 800f140:	b580      	push	{r7, lr}
 800f142:	b086      	sub	sp, #24
 800f144:	af00      	add	r7, sp, #0
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	607a      	str	r2, [r7, #4]
 800f14c:	603b      	str	r3, [r7, #0]
	bState(false),
    periodCount(_threadFreq / _freq),
    blinkCount(0),
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	4618      	mov	r0, r3
 800f152:	f002 fdf5 	bl	8011d40 <_ZN6ModuleC1Ev>
 800f156:	4a15      	ldr	r2, [pc, #84]	@ (800f1ac <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm+0x6c>)
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	601a      	str	r2, [r3, #0]
	bState(false),
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2200      	movs	r2, #0
 800f160:	755a      	strb	r2, [r3, #21]
    periodCount(_threadFreq / _freq),
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	fbb2 f2f3 	udiv	r2, r2, r3
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	619a      	str	r2, [r3, #24]
    blinkCount(0),
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2200      	movs	r2, #0
 800f172:	61da      	str	r2, [r3, #28]
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800f174:	2301      	movs	r3, #1
 800f176:	617b      	str	r3, [r7, #20]
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	3320      	adds	r3, #32
 800f17c:	f107 0214 	add.w	r2, r7, #20
 800f180:	68b9      	ldr	r1, [r7, #8]
 800f182:	4618      	mov	r0, r3
 800f184:	f000 f914 	bl	800f3b0 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
{
	blinkPin->set(bState);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	3320      	adds	r3, #32
 800f18c:	4618      	mov	r0, r3
 800f18e:	f000 f952 	bl	800f436 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800f192:	4602      	mov	r2, r0
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	7d5b      	ldrb	r3, [r3, #21]
 800f198:	4619      	mov	r1, r3
 800f19a:	4610      	mov	r0, r2
 800f19c:	f7f5 feb2 	bl	8004f04 <_ZN3Pin3setEb>
}
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3718      	adds	r7, #24
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	0802b3d4 	.word	0x0802b3d4

0800f1b0 <_ZN5Blink6updateEv>:

void Blink::update(void)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
	++blinkCount;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	69db      	ldr	r3, [r3, #28]
 800f1bc:	1c5a      	adds	r2, r3, #1
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	61da      	str	r2, [r3, #28]
	if (blinkCount >= periodCount / 2)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	69da      	ldr	r2, [r3, #28]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	699b      	ldr	r3, [r3, #24]
 800f1ca:	085b      	lsrs	r3, r3, #1
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d315      	bcc.n	800f1fc <_ZN5Blink6updateEv+0x4c>
	{
        bState = !bState;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	7d5b      	ldrb	r3, [r3, #21]
 800f1d4:	f083 0301 	eor.w	r3, r3, #1
 800f1d8:	b2da      	uxtb	r2, r3
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	755a      	strb	r2, [r3, #21]
        blinkPin->set(bState);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	3320      	adds	r3, #32
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f000 f927 	bl	800f436 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800f1e8:	4602      	mov	r2, r0
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	7d5b      	ldrb	r3, [r3, #21]
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	4610      	mov	r0, r2
 800f1f2:	f7f5 fe87 	bl	8004f04 <_ZN3Pin3setEb>
        blinkCount = 0;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	61da      	str	r2, [r3, #28]
	}
}
 800f1fc:	bf00      	nop
 800f1fe:	3708      	adds	r7, #8
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}

0800f204 <_ZN5Blink10slowUpdateEv>:

void Blink::slowUpdate(void)
{
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
	return;
 800f20c:	bf00      	nop
}
 800f20e:	370c      	adds	r7, #12
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr

0800f218 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800f218:	b580      	push	{r7, lr}
 800f21a:	b08c      	sub	sp, #48	@ 0x30
 800f21c:	af02      	add	r7, sp, #8
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800f224:	68ba      	ldr	r2, [r7, #8]
 800f226:	f107 0314 	add.w	r3, r7, #20
 800f22a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f22e:	e883 0003 	stmia.w	r3, {r0, r1}
 800f232:	f107 031c 	add.w	r3, r7, #28
 800f236:	6879      	ldr	r1, [r7, #4]
 800f238:	4618      	mov	r0, r3
 800f23a:	f000 f913 	bl	800f464 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800f23e:	466a      	mov	r2, sp
 800f240:	f107 0320 	add.w	r3, r7, #32
 800f244:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f248:	e882 0003 	stmia.w	r2, {r0, r1}
 800f24c:	69fb      	ldr	r3, [r7, #28]
 800f24e:	f107 0214 	add.w	r2, r7, #20
 800f252:	ca06      	ldmia	r2, {r1, r2}
 800f254:	68f8      	ldr	r0, [r7, #12]
 800f256:	f7f8 fcfc 	bl	8007c52 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	3728      	adds	r7, #40	@ 0x28
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}

0800f262 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>:
  operator T() const {
 800f262:	b580      	push	{r7, lr}
 800f264:	b082      	sub	sp, #8
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
    return as<T>();
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f000 f90d 	bl	800f48a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>
 800f270:	4603      	mov	r3, r0
  }
 800f272:	4618      	mov	r0, r3
 800f274:	3708      	adds	r7, #8
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}

0800f27a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800f27a:	b580      	push	{r7, lr}
 800f27c:	b08c      	sub	sp, #48	@ 0x30
 800f27e:	af02      	add	r7, sp, #8
 800f280:	60f8      	str	r0, [r7, #12]
 800f282:	60b9      	str	r1, [r7, #8]
 800f284:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800f286:	68ba      	ldr	r2, [r7, #8]
 800f288:	f107 0314 	add.w	r3, r7, #20
 800f28c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f290:	e883 0003 	stmia.w	r3, {r0, r1}
 800f294:	f107 031c 	add.w	r3, r7, #28
 800f298:	6879      	ldr	r1, [r7, #4]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7fd fe58 	bl	800cf50 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800f2a0:	466a      	mov	r2, sp
 800f2a2:	f107 0320 	add.w	r3, r7, #32
 800f2a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f2aa:	e882 0003 	stmia.w	r2, {r0, r1}
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	f107 0214 	add.w	r2, r7, #20
 800f2b4:	ca06      	ldmia	r2, {r1, r2}
 800f2b6:	68f8      	ldr	r0, [r7, #12]
 800f2b8:	f7f8 fccb 	bl	8007c52 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800f2bc:	68f8      	ldr	r0, [r7, #12]
 800f2be:	3728      	adds	r7, #40	@ 0x28
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800f2c4:	b5b0      	push	{r4, r5, r7, lr}
 800f2c6:	b08c      	sub	sp, #48	@ 0x30
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	60b9      	str	r1, [r7, #8]
 800f2ce:	607a      	str	r2, [r7, #4]
 800f2d0:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800f2d2:	2024      	movs	r0, #36	@ 0x24
 800f2d4:	f019 f96c 	bl	80285b0 <_Znwj>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	461d      	mov	r5, r3
 800f2dc:	68b8      	ldr	r0, [r7, #8]
 800f2de:	f000 f8f6 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	681c      	ldr	r4, [r3, #0]
 800f2e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f019 f971 	bl	80285d2 <_ZNSaIcEC1Ev>
 800f2f0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f2f4:	f107 0314 	add.w	r3, r7, #20
 800f2f8:	4621      	mov	r1, r4
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7f4 fa7a 	bl	80037f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f7fd fcb3 	bl	800cc6c <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800f306:	4603      	mov	r3, r0
 800f308:	681c      	ldr	r4, [r3, #0]
 800f30a:	6838      	ldr	r0, [r7, #0]
 800f30c:	f000 f8ea 	bl	800f4e4 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800f310:	4603      	mov	r3, r0
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	f107 0114 	add.w	r1, r7, #20
 800f318:	4622      	mov	r2, r4
 800f31a:	4628      	mov	r0, r5
 800f31c:	f7ff ff10 	bl	800f140 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>
 800f320:	4629      	mov	r1, r5
 800f322:	68f8      	ldr	r0, [r7, #12]
 800f324:	f000 f8f9 	bl	800f51a <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800f328:	f107 0314 	add.w	r3, r7, #20
 800f32c:	4618      	mov	r0, r3
 800f32e:	f019 fa3a 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f332:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f336:	4618      	mov	r0, r3
 800f338:	f019 f94c 	bl	80285d4 <_ZNSaIcED1Ev>
 800f33c:	bf00      	nop
 800f33e:	68f8      	ldr	r0, [r7, #12]
 800f340:	3730      	adds	r7, #48	@ 0x30
 800f342:	46bd      	mov	sp, r7
 800f344:	bdb0      	pop	{r4, r5, r7, pc}

0800f346 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800f346:	b590      	push	{r4, r7, lr}
 800f348:	b085      	sub	sp, #20
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4618      	mov	r0, r3
 800f352:	f000 f8f1 	bl	800f538 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800f356:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d00c      	beq.n	800f37a <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f000 f8f6 	bl	800f552 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800f366:	4604      	mov	r4, r0
 800f368:	68f8      	ldr	r0, [r7, #12]
 800f36a:	f000 f8ff 	bl	800f56c <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>
 800f36e:	4603      	mov	r3, r0
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	4619      	mov	r1, r3
 800f374:	4620      	mov	r0, r4
 800f376:	f000 f92d 	bl	800f5d4 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
	__ptr = pointer();
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2200      	movs	r2, #0
 800f37e:	601a      	str	r2, [r3, #0]
      }
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	4618      	mov	r0, r3
 800f384:	3714      	adds	r7, #20
 800f386:	46bd      	mov	sp, r7
 800f388:	bd90      	pop	{r4, r7, pc}

0800f38a <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800f38a:	b590      	push	{r4, r7, lr}
 800f38c:	b083      	sub	sp, #12
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
 800f392:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800f394:	687c      	ldr	r4, [r7, #4]
 800f396:	6838      	ldr	r0, [r7, #0]
 800f398:	f000 f92d 	bl	800f5f6 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800f39c:	4603      	mov	r3, r0
 800f39e:	4619      	mov	r1, r3
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	f000 f933 	bl	800f60c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	370c      	adds	r7, #12
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd90      	pop	{r4, r7, pc}

0800f3b0 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800f3b0:	b5b0      	push	{r4, r5, r7, lr}
 800f3b2:	b084      	sub	sp, #16
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	60f8      	str	r0, [r7, #12]
 800f3b8:	60b9      	str	r1, [r7, #8]
 800f3ba:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800f3bc:	2040      	movs	r0, #64	@ 0x40
 800f3be:	f019 f8f7 	bl	80285b0 <_Znwj>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	461c      	mov	r4, r3
 800f3c6:	68b8      	ldr	r0, [r7, #8]
 800f3c8:	f000 f958 	bl	800f67c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800f3cc:	4605      	mov	r5, r0
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 f83d 	bl	800f44e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	461a      	mov	r2, r3
 800f3da:	4629      	mov	r1, r5
 800f3dc:	4620      	mov	r0, r4
 800f3de:	f7f5 fbe7 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800f3e2:	4621      	mov	r1, r4
 800f3e4:	68f8      	ldr	r0, [r7, #12]
 800f3e6:	f000 f964 	bl	800f6b2 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800f3ea:	68f8      	ldr	r0, [r7, #12]
 800f3ec:	3710      	adds	r7, #16
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bdb0      	pop	{r4, r5, r7, pc}

0800f3f2 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800f3f2:	b590      	push	{r4, r7, lr}
 800f3f4:	b085      	sub	sp, #20
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f000 f967 	bl	800f6d0 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800f402:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d00c      	beq.n	800f426 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 f96c 	bl	800f6ea <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>
 800f412:	4604      	mov	r4, r0
 800f414:	68f8      	ldr	r0, [r7, #12]
 800f416:	f000 f975 	bl	800f704 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800f41a:	4603      	mov	r3, r0
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	4619      	mov	r1, r3
 800f420:	4620      	mov	r0, r4
 800f422:	f000 f987 	bl	800f734 <_ZNKSt14default_deleteI3PinEclEPS0_>
	__ptr = pointer();
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2200      	movs	r2, #0
 800f42a:	601a      	str	r2, [r3, #0]
      }
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	4618      	mov	r0, r3
 800f430:	3714      	adds	r7, #20
 800f432:	46bd      	mov	sp, r7
 800f434:	bd90      	pop	{r4, r7, pc}

0800f436 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800f436:	b580      	push	{r7, lr}
 800f438:	b082      	sub	sp, #8
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
	return get();
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f000 f98b 	bl	800f75a <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>
 800f444:	4603      	mov	r3, r0
      }
 800f446:	4618      	mov	r0, r3
 800f448:	3708      	adds	r7, #8
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}

0800f44e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f44e:	b480      	push	{r7}
 800f450:	b083      	sub	sp, #12
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	4618      	mov	r0, r3
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr

0800f464 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800f464:	b580      	push	{r7, lr}
 800f466:	b082      	sub	sp, #8
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800f46e:	6838      	ldr	r0, [r7, #0]
 800f470:	f000 f980 	bl	800f774 <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800f474:	4602      	mov	r2, r0
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	4611      	mov	r1, r2
 800f47a:	4618      	mov	r0, r3
 800f47c:	f000 f985 	bl	800f78a <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>
 800f480:	bf00      	nop
}
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	3708      	adds	r7, #8
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}

0800f48a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 800f48a:	b590      	push	{r4, r7, lr}
 800f48c:	b087      	sub	sp, #28
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	617b      	str	r3, [r7, #20]
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800f49a:	6938      	ldr	r0, [r7, #16]
 800f49c:	f7f9 fabd 	bl	8008a1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 800f4a0:	4604      	mov	r4, r0
 800f4a2:	6938      	ldr	r0, [r7, #16]
 800f4a4:	f7f9 f948 	bl	8008738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	f107 0308 	add.w	r3, r7, #8
 800f4ae:	4621      	mov	r1, r4
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f7f6 fad6 	bl	8005a62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800f4b6:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 800f4b8:	f107 0308 	add.w	r3, r7, #8
 800f4bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f4c0:	f000 f972 	bl	800f7a8 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>
 800f4c4:	4603      	mov	r3, r0
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	371c      	adds	r7, #28
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd90      	pop	{r4, r7, pc}

0800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f4ce:	b480      	push	{r7}
 800f4d0:	b083      	sub	sp, #12
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	370c      	adds	r7, #12
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr

0800f4e4 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f4e4:	b480      	push	{r7}
 800f4e6:	b083      	sub	sp, #12
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	370c      	adds	r7, #12
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f8:	4770      	bx	lr

0800f4fa <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800f4fa:	b580      	push	{r7, lr}
 800f4fc:	b082      	sub	sp, #8
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	6078      	str	r0, [r7, #4]
 800f502:	6039      	str	r1, [r7, #0]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	683a      	ldr	r2, [r7, #0]
 800f508:	4611      	mov	r1, r2
 800f50a:	4618      	mov	r0, r3
 800f50c:	f000 f96a 	bl	800f7e4 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	4618      	mov	r0, r3
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}

0800f51a <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800f51a:	b580      	push	{r7, lr}
 800f51c:	b082      	sub	sp, #8
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
 800f522:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6839      	ldr	r1, [r7, #0]
 800f528:	4618      	mov	r0, r3
 800f52a:	f7ff ffe6 	bl	800f4fa <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4618      	mov	r0, r3
 800f532:	3708      	adds	r7, #8
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4618      	mov	r0, r3
 800f544:	f000 f962 	bl	800f80c <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f548:	4603      	mov	r3, r0
 800f54a:	4618      	mov	r0, r3
 800f54c:	3708      	adds	r7, #8
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}

0800f552 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800f552:	b580      	push	{r7, lr}
 800f554:	b082      	sub	sp, #8
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	4618      	mov	r0, r3
 800f55e:	f000 f962 	bl	800f826 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>
 800f562:	4603      	mov	r3, r0
 800f564:	4618      	mov	r0, r3
 800f566:	3708      	adds	r7, #8
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}

0800f56c <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	4618      	mov	r0, r3
 800f578:	370c      	adds	r7, #12
 800f57a:	46bd      	mov	sp, r7
 800f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f580:	4770      	bx	lr
	...

0800f584 <_ZN5BlinkD1Ev>:
 * @class Blink
 * @brief A module for toggling a pin at a specific frequency.
 * 
 * The Blink class controls a GPIO pin, toggling its state at a specified frequency.
 */
class Blink : public Module
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	4a08      	ldr	r2, [pc, #32]	@ (800f5b0 <_ZN5BlinkD1Ev+0x2c>)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	601a      	str	r2, [r3, #0]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	3320      	adds	r3, #32
 800f596:	4618      	mov	r0, r3
 800f598:	f7ff ff2b 	bl	800f3f2 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f002 fbea 	bl	8011d78 <_ZN6ModuleD1Ev>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3708      	adds	r7, #8
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	0802b3d4 	.word	0x0802b3d4

0800f5b4 <_ZN5BlinkD0Ev>:
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f7ff ffe1 	bl	800f584 <_ZN5BlinkD1Ev>
 800f5c2:	2124      	movs	r1, #36	@ 0x24
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f018 ffe2 	bl	802858e <_ZdlPvj>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3708      	adds	r7, #8
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <_ZNKSt14default_deleteI5BlinkEclEPS0_>:
      operator()(_Tp* __ptr) const
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d004      	beq.n	800f5ee <_ZNKSt14default_deleteI5BlinkEclEPS0_+0x1a>
 800f5e4:	681a      	ldr	r2, [r3, #0]
 800f5e6:	3204      	adds	r2, #4
 800f5e8:	6812      	ldr	r2, [r2, #0]
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	4790      	blx	r2
      }
 800f5ee:	bf00      	nop
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800f5f6:	b480      	push	{r7}
 800f5f8:	b083      	sub	sp, #12
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	4618      	mov	r0, r3
 800f602:	370c      	adds	r7, #12
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr

0800f60c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b084      	sub	sp, #16
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800f616:	6838      	ldr	r0, [r7, #0]
 800f618:	f000 f912 	bl	800f840 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800f61c:	4602      	mov	r2, r0
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	601a      	str	r2, [r3, #0]
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	3304      	adds	r3, #4
 800f626:	4618      	mov	r0, r3
 800f628:	f7fd fd66 	bl	800d0f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800f62c:	6838      	ldr	r0, [r7, #0]
 800f62e:	f000 f907 	bl	800f840 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800f632:	4603      	mov	r3, r0
 800f634:	4618      	mov	r0, r3
 800f636:	f000 f910 	bl	800f85a <_ZSt12__to_addressI5BlinkEPT_S2_>
 800f63a:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800f63c:	6838      	ldr	r0, [r7, #0]
 800f63e:	f7ff ffda 	bl	800f5f6 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800f642:	4602      	mov	r2, r0
 800f644:	f107 0308 	add.w	r3, r7, #8
 800f648:	4611      	mov	r1, r2
 800f64a:	4618      	mov	r0, r3
 800f64c:	f000 f910 	bl	800f870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	3304      	adds	r3, #4
 800f654:	f107 0208 	add.w	r2, r7, #8
 800f658:	4611      	mov	r1, r2
 800f65a:	4618      	mov	r0, r3
 800f65c:	f000 f94a 	bl	800f8f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800f660:	f107 0308 	add.w	r3, r7, #8
 800f664:	4618      	mov	r0, r3
 800f666:	f7fc fb4a 	bl	800bcfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800f66a:	68f9      	ldr	r1, [r7, #12]
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 f965 	bl	800f93c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	4618      	mov	r0, r3
 800f676:	3710      	adds	r7, #16
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f67c:	b480      	push	{r7}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	4618      	mov	r0, r3
 800f688:	370c      	adds	r7, #12
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr

0800f692 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800f692:	b580      	push	{r7, lr}
 800f694:	b082      	sub	sp, #8
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
 800f69a:	6039      	str	r1, [r7, #0]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	683a      	ldr	r2, [r7, #0]
 800f6a0:	4611      	mov	r1, r2
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f000 f955 	bl	800f952 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3708      	adds	r7, #8
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}

0800f6b2 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b082      	sub	sp, #8
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
 800f6ba:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6839      	ldr	r1, [r7, #0]
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7ff ffe6 	bl	800f692 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3708      	adds	r7, #8
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}

0800f6d0 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f000 f94d 	bl	800f97a <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3708      	adds	r7, #8
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}

0800f6ea <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800f6ea:	b580      	push	{r7, lr}
 800f6ec:	b082      	sub	sp, #8
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f000 f94d 	bl	800f994 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}

0800f704 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f704:	b480      	push	{r7}
 800f706:	b083      	sub	sp, #12
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	4618      	mov	r0, r3
 800f710:	370c      	adds	r7, #12
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr

0800f71a <_ZN3PinD1Ev>:
#define OPENDRAIN   0b001
#define PULLUP      0b010
#define PULLDOWN    0b011
#define PULLNONE    0b100

class Pin {
 800f71a:	b580      	push	{r7, lr}
 800f71c:	b082      	sub	sp, #8
 800f71e:	af00      	add	r7, sp, #0
 800f720:	6078      	str	r0, [r7, #4]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	4618      	mov	r0, r3
 800f726:	f019 f83e 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	4618      	mov	r0, r3
 800f72e:	3708      	adds	r7, #8
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <_ZNKSt14default_deleteI3PinEclEPS0_>:
      operator()(_Tp* __ptr) const
 800f734:	b590      	push	{r4, r7, lr}
 800f736:	b083      	sub	sp, #12
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800f73e:	683c      	ldr	r4, [r7, #0]
 800f740:	2c00      	cmp	r4, #0
 800f742:	d006      	beq.n	800f752 <_ZNKSt14default_deleteI3PinEclEPS0_+0x1e>
 800f744:	4620      	mov	r0, r4
 800f746:	f7ff ffe8 	bl	800f71a <_ZN3PinD1Ev>
 800f74a:	2140      	movs	r1, #64	@ 0x40
 800f74c:	4620      	mov	r0, r4
 800f74e:	f018 ff1e 	bl	802858e <_ZdlPvj>
      }
 800f752:	bf00      	nop
 800f754:	370c      	adds	r7, #12
 800f756:	46bd      	mov	sp, r7
 800f758:	bd90      	pop	{r4, r7, pc}

0800f75a <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b082      	sub	sp, #8
 800f75e:	af00      	add	r7, sp, #0
 800f760:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	4618      	mov	r0, r3
 800f766:	f000 f922 	bl	800f9ae <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800f76a:	4603      	mov	r3, r0
 800f76c:	4618      	mov	r0, r3
 800f76e:	3708      	adds	r7, #8
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800f774:	b480      	push	{r7}
 800f776:	b083      	sub	sp, #12
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800f77c:	687b      	ldr	r3, [r7, #4]
}
 800f77e:	4618      	mov	r0, r3
 800f780:	370c      	adds	r7, #12
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr

0800f78a <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800f78a:	b580      	push	{r7, lr}
 800f78c:	b082      	sub	sp, #8
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
 800f792:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800f794:	2301      	movs	r3, #1
 800f796:	2203      	movs	r2, #3
 800f798:	6839      	ldr	r1, [r7, #0]
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f7f5 fd9a 	bl	80052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	3708      	adds	r7, #8
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>:
    auto resources = getResourceManager(dst);
    data->clear(resources);
    return data->setInteger(src, resources);
  }

  static T fromJson(JsonVariantConst src) {
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	463b      	mov	r3, r7
 800f7b0:	e883 0003 	stmia.w	r3, {r0, r1}
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    auto data = getData(src);
 800f7b4:	463b      	mov	r3, r7
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7f7 feb2 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800f7bc:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800f7be:	463b      	mov	r3, r7
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f7f7 feb9 	bl	8007538 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800f7c6:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d005      	beq.n	800f7da <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x32>
 800f7ce:	68b9      	ldr	r1, [r7, #8]
 800f7d0:	68f8      	ldr	r0, [r7, #12]
 800f7d2:	f000 f8fb 	bl	800f9cc <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	e000      	b.n	800f7dc <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x34>
 800f7da:	2300      	movs	r3, #0
  }
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3710      	adds	r7, #16
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800f7e4:	b590      	push	{r4, r7, lr}
 800f7e6:	b083      	sub	sp, #12
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	6039      	str	r1, [r7, #0]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f000 f97d 	bl	800faf0 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800f7f6:	683c      	ldr	r4, [r7, #0]
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f7ff fe9d 	bl	800f538 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800f7fe:	4603      	mov	r3, r0
 800f800:	601c      	str	r4, [r3, #0]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	4618      	mov	r0, r3
 800f806:	370c      	adds	r7, #12
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd90      	pop	{r4, r7, pc}

0800f80c <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	4618      	mov	r0, r3
 800f818:	f000 f977 	bl	800fb0a <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800f81c:	4603      	mov	r3, r0
 800f81e:	4618      	mov	r0, r3
 800f820:	3708      	adds	r7, #8
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}

0800f826 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800f826:	b580      	push	{r7, lr}
 800f828:	b082      	sub	sp, #8
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4618      	mov	r0, r3
 800f832:	f000 f976 	bl	800fb22 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f836:	4603      	mov	r3, r0
 800f838:	4618      	mov	r0, r3
 800f83a:	3708      	adds	r7, #8
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800f840:	b580      	push	{r7, lr}
 800f842:	b082      	sub	sp, #8
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4618      	mov	r0, r3
 800f84c:	f000 f975 	bl	800fb3a <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800f850:	4603      	mov	r3, r0
 800f852:	4618      	mov	r0, r3
 800f854:	3708      	adds	r7, #8
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}

0800f85a <_ZSt12__to_addressI5BlinkEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800f85a:	b480      	push	{r7}
 800f85c:	b083      	sub	sp, #12
 800f85e:	af00      	add	r7, sp, #0
 800f860:	6078      	str	r0, [r7, #4]
      return __ptr;
 800f862:	687b      	ldr	r3, [r7, #4]
    }
 800f864:	4618      	mov	r0, r3
 800f866:	370c      	adds	r7, #12
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800f870:	b580      	push	{r7, lr}
 800f872:	b086      	sub	sp, #24
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2200      	movs	r2, #0
 800f87e:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800f880:	6838      	ldr	r0, [r7, #0]
 800f882:	f7ff ffdd 	bl	800f840 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800f886:	4603      	mov	r3, r0
 800f888:	2b00      	cmp	r3, #0
 800f88a:	bf0c      	ite	eq
 800f88c:	2301      	moveq	r3, #1
 800f88e:	2300      	movne	r3, #0
 800f890:	b2db      	uxtb	r3, r3
 800f892:	2b00      	cmp	r3, #0
 800f894:	d128      	bne.n	800f8e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800f896:	f107 030c 	add.w	r3, r7, #12
 800f89a:	4618      	mov	r0, r3
 800f89c:	f000 f95b 	bl	800fb56 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800f8a0:	f107 030c 	add.w	r3, r7, #12
 800f8a4:	2101      	movs	r1, #1
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f000 f96d 	bl	800fb86 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800f8ac:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800f8ae:	6838      	ldr	r0, [r7, #0]
 800f8b0:	f000 f978 	bl	800fba4 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800f8b8:	6838      	ldr	r0, [r7, #0]
 800f8ba:	f7ff fe4a 	bl	800f552 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800f8be:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f000 f97c 	bl	800fbbe <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	f107 0210 	add.w	r2, r7, #16
 800f8cc:	f107 000c 	add.w	r0, r7, #12
 800f8d0:	6979      	ldr	r1, [r7, #20]
 800f8d2:	f000 f97f 	bl	800fbd4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	697a      	ldr	r2, [r7, #20]
 800f8da:	601a      	str	r2, [r3, #0]
	}
 800f8dc:	f107 030c 	add.w	r3, r7, #12
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f000 f944 	bl	800fb6e <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800f8e6:	e000      	b.n	800f8ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800f8e8:	bf00      	nop
	}
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3718      	adds	r7, #24
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b084      	sub	sp, #16
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	68fa      	ldr	r2, [r7, #12]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d011      	beq.n	800f932 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != nullptr)
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d002      	beq.n	800f91a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 800f914:	68f8      	ldr	r0, [r7, #12]
 800f916:	f7fa ffc7 	bl	800a8a8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != nullptr)
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d004      	beq.n	800f92c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	4618      	mov	r0, r3
 800f928:	f7fa ffcd 	bl	800a8c6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	68fa      	ldr	r2, [r7, #12]
 800f930:	601a      	str	r2, [r3, #0]
	return *this;
 800f932:	687b      	ldr	r3, [r7, #4]
      }
 800f934:	4618      	mov	r0, r3
 800f936:	3710      	adds	r7, #16
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
	{ }
 800f946:	bf00      	nop
 800f948:	370c      	adds	r7, #12
 800f94a:	46bd      	mov	sp, r7
 800f94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f950:	4770      	bx	lr

0800f952 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800f952:	b590      	push	{r4, r7, lr}
 800f954:	b083      	sub	sp, #12
 800f956:	af00      	add	r7, sp, #0
 800f958:	6078      	str	r0, [r7, #4]
 800f95a:	6039      	str	r1, [r7, #0]
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4618      	mov	r0, r3
 800f960:	f000 f950 	bl	800fc04 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800f964:	683c      	ldr	r4, [r7, #0]
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f7ff feb2 	bl	800f6d0 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800f96c:	4603      	mov	r3, r0
 800f96e:	601c      	str	r4, [r3, #0]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	4618      	mov	r0, r3
 800f974:	370c      	adds	r7, #12
 800f976:	46bd      	mov	sp, r7
 800f978:	bd90      	pop	{r4, r7, pc}

0800f97a <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800f97a:	b580      	push	{r7, lr}
 800f97c:	b082      	sub	sp, #8
 800f97e:	af00      	add	r7, sp, #0
 800f980:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	4618      	mov	r0, r3
 800f986:	f000 f94a 	bl	800fc1e <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800f98a:	4603      	mov	r3, r0
 800f98c:	4618      	mov	r0, r3
 800f98e:	3708      	adds	r7, #8
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f000 f949 	bl	800fc36 <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3708      	adds	r7, #8
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}

0800f9ae <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800f9ae:	b580      	push	{r7, lr}
 800f9b0:	b082      	sub	sp, #8
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f000 f948 	bl	800fc4e <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3708      	adds	r7, #8
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
	...

0800f9cc <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b084      	sub	sp, #16
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 800f9d6:	6839      	ldr	r1, [r7, #0]
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7f6 fdd7 	bl	800658c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800f9de:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	791b      	ldrb	r3, [r3, #4]
 800f9e4:	3b04      	subs	r3, #4
 800f9e6:	2b1a      	cmp	r3, #26
 800f9e8:	d87c      	bhi.n	800fae4 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x118>
 800f9ea:	a201      	add	r2, pc, #4	@ (adr r2, 800f9f0 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x24>)
 800f9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9f0:	0800faa3 	.word	0x0800faa3
 800f9f4:	0800fab1 	.word	0x0800fab1
 800f9f8:	0800fa5d 	.word	0x0800fa5d
 800f9fc:	0800fae5 	.word	0x0800fae5
 800fa00:	0800fae5 	.word	0x0800fae5
 800fa04:	0800fae5 	.word	0x0800fae5
 800fa08:	0800fa63 	.word	0x0800fa63
 800fa0c:	0800fae5 	.word	0x0800fae5
 800fa10:	0800fa71 	.word	0x0800fa71
 800fa14:	0800fae5 	.word	0x0800fae5
 800fa18:	0800fac1 	.word	0x0800fac1
 800fa1c:	0800fae5 	.word	0x0800fae5
 800fa20:	0800fae5 	.word	0x0800fae5
 800fa24:	0800fae5 	.word	0x0800fae5
 800fa28:	0800fae5 	.word	0x0800fae5
 800fa2c:	0800fae5 	.word	0x0800fae5
 800fa30:	0800fae5 	.word	0x0800fae5
 800fa34:	0800fae5 	.word	0x0800fae5
 800fa38:	0800fae5 	.word	0x0800fae5
 800fa3c:	0800fae5 	.word	0x0800fae5
 800fa40:	0800fae5 	.word	0x0800fae5
 800fa44:	0800fae5 	.word	0x0800fae5
 800fa48:	0800fa7f 	.word	0x0800fa7f
 800fa4c:	0800fae5 	.word	0x0800fae5
 800fa50:	0800fa91 	.word	0x0800fa91
 800fa54:	0800fae5 	.word	0x0800fae5
 800fa58:	0800fad3 	.word	0x0800fad3
        return content_.asBoolean;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	e041      	b.n	800fae6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	4618      	mov	r0, r3
 800fa68:	f000 f8fe 	bl	800fc68 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	e03a      	b.n	800fae6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4618      	mov	r0, r3
 800fa76:	f000 f908 	bl	800fc8a <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	e033      	b.n	800fae6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa84:	4610      	mov	r0, r2
 800fa86:	4619      	mov	r1, r3
 800fa88:	f000 f910 	bl	800fcac <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	e02a      	b.n	800fae6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa96:	4610      	mov	r0, r2
 800fa98:	4619      	mov	r1, r3
 800fa9a:	f000 f91a 	bl	800fcd2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	e021      	b.n	800fae6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	4618      	mov	r0, r3
 800faa8:	f000 f926 	bl	800fcf8 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800faac:	4603      	mov	r3, r0
 800faae:	e01a      	b.n	800fae6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	3308      	adds	r3, #8
 800fab6:	4618      	mov	r0, r3
 800fab8:	f000 f91e 	bl	800fcf8 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800fabc:	4603      	mov	r3, r0
 800fabe:	e012      	b.n	800fae6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	edd3 7a00 	vldr	s15, [r3]
 800fac6:	eeb0 0a67 	vmov.f32	s0, s15
 800faca:	f000 f929 	bl	800fd20 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800face:	4603      	mov	r3, r0
 800fad0:	e009      	b.n	800fae6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	ed93 7b00 	vldr	d7, [r3]
 800fad8:	eeb0 0b47 	vmov.f64	d0, d7
 800fadc:	f000 f938 	bl	800fd50 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800fae0:	4603      	mov	r3, r0
 800fae2:	e000      	b.n	800fae6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 800fae4:	2300      	movs	r3, #0
  }
 800fae6:	4618      	mov	r0, r3
 800fae8:	3710      	adds	r7, #16
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}
 800faee:	bf00      	nop

0800faf0 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	4618      	mov	r0, r3
 800fafc:	f000 f940 	bl	800fd80 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	4618      	mov	r0, r3
 800fb04:	3708      	adds	r7, #8
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}

0800fb0a <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b082      	sub	sp, #8
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f000 f944 	bl	800fda0 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3708      	adds	r7, #8
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}

0800fb22 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800fb22:	b580      	push	{r7, lr}
 800fb24:	b082      	sub	sp, #8
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f000 f945 	bl	800fdba <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800fb30:	4603      	mov	r3, r0
 800fb32:	4618      	mov	r0, r3
 800fb34:	3708      	adds	r7, #8
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}

0800fb3a <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
 800fb3a:	b580      	push	{r7, lr}
 800fb3c:	b082      	sub	sp, #8
 800fb3e:	af00      	add	r7, sp, #0
 800fb40:	6078      	str	r0, [r7, #4]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	4618      	mov	r0, r3
 800fb46:	f000 f944 	bl	800fdd2 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3708      	adds	r7, #8
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}

0800fb56 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800fb56:	b580      	push	{r7, lr}
 800fb58:	b082      	sub	sp, #8
 800fb5a:	af00      	add	r7, sp, #0
 800fb5c:	6078      	str	r0, [r7, #4]
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f000 f944 	bl	800fdec <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	4618      	mov	r0, r3
 800fb68:	3708      	adds	r7, #8
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}

0800fb6e <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	b082      	sub	sp, #8
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	6078      	str	r0, [r7, #4]
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 f943 	bl	800fe02 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3708      	adds	r7, #8
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}

0800fb86 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800fb86:	b580      	push	{r7, lr}
 800fb88:	b082      	sub	sp, #8
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
 800fb8e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800fb90:	2200      	movs	r2, #0
 800fb92:	6839      	ldr	r1, [r7, #0]
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f000 f93f 	bl	800fe18 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3708      	adds	r7, #8
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f000 f95c 	bl	800fe6c <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3708      	adds	r7, #8
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}

0800fbbe <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fbbe:	b480      	push	{r7}
 800fbc0:	b083      	sub	sp, #12
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	4618      	mov	r0, r3
 800fbca:	370c      	adds	r7, #12
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd2:	4770      	bx	lr

0800fbd4 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800fbd4:	b590      	push	{r4, r7, lr}
 800fbd6:	b085      	sub	sp, #20
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	60f8      	str	r0, [r7, #12]
 800fbdc:	60b9      	str	r1, [r7, #8]
 800fbde:	607a      	str	r2, [r7, #4]
 800fbe0:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f000 f957 	bl	800fe96 <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800fbe8:	4604      	mov	r4, r0
 800fbea:	6838      	ldr	r0, [r7, #0]
 800fbec:	f7ff ffe7 	bl	800fbbe <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	4622      	mov	r2, r4
 800fbf4:	68b9      	ldr	r1, [r7, #8]
 800fbf6:	68f8      	ldr	r0, [r7, #12]
 800fbf8:	f000 f958 	bl	800feac <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800fbfc:	bf00      	nop
 800fbfe:	3714      	adds	r7, #20
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd90      	pop	{r4, r7, pc}

0800fc04 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f000 f96a 	bl	800fee8 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	4618      	mov	r0, r3
 800fc18:	3708      	adds	r7, #8
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}

0800fc1e <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fc1e:	b580      	push	{r7, lr}
 800fc20:	b082      	sub	sp, #8
 800fc22:	af00      	add	r7, sp, #0
 800fc24:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f000 f96e 	bl	800ff08 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3708      	adds	r7, #8
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}

0800fc36 <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800fc36:	b580      	push	{r7, lr}
 800fc38:	b082      	sub	sp, #8
 800fc3a:	af00      	add	r7, sp, #0
 800fc3c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f000 f96f 	bl	800ff22 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800fc44:	4603      	mov	r3, r0
 800fc46:	4618      	mov	r0, r3
 800fc48:	3708      	adds	r7, #8
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}

0800fc4e <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800fc4e:	b580      	push	{r7, lr}
 800fc50:	b082      	sub	sp, #8
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f000 f96e 	bl	800ff3a <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	4618      	mov	r0, r3
 800fc62:	3708      	adds	r7, #8
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>:
TOut convertNumber(TIn value) {
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f000 f96e 	bl	800ff52 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800fc76:	4603      	mov	r3, r0
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d001      	beq.n	800fc80 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x18>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	e000      	b.n	800fc82 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x1a>
 800fc80:	2300      	movs	r3, #0
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3708      	adds	r7, #8
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}

0800fc8a <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>:
TOut convertNumber(TIn value) {
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b082      	sub	sp, #8
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f000 f96f 	bl	800ff76 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d001      	beq.n	800fca2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x18>
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	e000      	b.n	800fca4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x1a>
 800fca2:	2300      	movs	r3, #0
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3708      	adds	r7, #8
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>:
TOut convertNumber(TIn value) {
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fcb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fcba:	f000 f967 	bl	800ff8c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d001      	beq.n	800fcc8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1c>
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	e000      	b.n	800fcca <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1e>
 800fcc8:	2300      	movs	r3, #0
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3708      	adds	r7, #8
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}

0800fcd2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>:
TOut convertNumber(TIn value) {
 800fcd2:	b580      	push	{r7, lr}
 800fcd4:	b082      	sub	sp, #8
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fcdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fce0:	f000 f96c 	bl	800ffbc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800fce4:	4603      	mov	r3, r0
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d001      	beq.n	800fcee <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1c>
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	e000      	b.n	800fcf0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1e>
 800fcee:	2300      	movs	r3, #0
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3708      	adds	r7, #8
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>:
inline T parseNumber(const char* s) {
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b086      	sub	sp, #24
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800fd00:	f107 0308 	add.w	r3, r7, #8
 800fd04:	6879      	ldr	r1, [r7, #4]
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7f6 fea4 	bl	8006a54 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 800fd0c:	f107 0308 	add.w	r3, r7, #8
 800fd10:	4618      	mov	r0, r3
 800fd12:	f000 f979 	bl	8010008 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>
 800fd16:	4603      	mov	r3, r0
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3718      	adds	r7, #24
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}

0800fd20 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>:
TOut convertNumber(TIn value) {
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fd2a:	ed97 0a01 	vldr	s0, [r7, #4]
 800fd2e:	f000 f9b2 	bl	8010096 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 800fd32:	4603      	mov	r3, r0
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d006      	beq.n	800fd46 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x26>
 800fd38:	edd7 7a01 	vldr	s15, [r7, #4]
 800fd3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd40:	ee17 3a90 	vmov	r3, s15
 800fd44:	e000      	b.n	800fd48 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x28>
 800fd46:	2300      	movs	r3, #0
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3708      	adds	r7, #8
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>:
TOut convertNumber(TIn value) {
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fd5a:	ed97 0b00 	vldr	d0, [r7]
 800fd5e:	f000 f9c7 	bl	80100f0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800fd62:	4603      	mov	r3, r0
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d006      	beq.n	800fd76 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x26>
 800fd68:	ed97 7b00 	vldr	d7, [r7]
 800fd6c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800fd70:	ee17 3a90 	vmov	r3, s15
 800fd74:	e000      	b.n	800fd78 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x28>
 800fd76:	2300      	movs	r3, #0
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3708      	adds	r7, #8
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}

0800fd80 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f000 f9d7 	bl	801013c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	4618      	mov	r0, r3
 800fd92:	f000 f9df 	bl	8010154 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3708      	adds	r7, #8
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f000 f9e0 	bl	8010170 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}

0800fdba <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fdba:	b580      	push	{r7, lr}
 800fdbc:	b082      	sub	sp, #8
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f000 f9df 	bl	8010186 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3708      	adds	r7, #8
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}

0800fdd2 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800fdd2:	b580      	push	{r7, lr}
 800fdd4:	b082      	sub	sp, #8
 800fdd6:	af00      	add	r7, sp, #0
 800fdd8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	4618      	mov	r0, r3
 800fdde:	f000 f9de 	bl	801019e <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800fde2:	4603      	mov	r3, r0
 800fde4:	4618      	mov	r0, r3
 800fde6:	3708      	adds	r7, #8
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}

0800fdec <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800fdec:	b480      	push	{r7}
 800fdee:	b083      	sub	sp, #12
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	370c      	adds	r7, #12
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe00:	4770      	bx	lr

0800fe02 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800fe02:	b480      	push	{r7}
 800fe04:	b083      	sub	sp, #12
 800fe06:	af00      	add	r7, sp, #0
 800fe08:	6078      	str	r0, [r7, #4]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	370c      	adds	r7, #12
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr

0800fe18 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b084      	sub	sp, #16
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	60f8      	str	r0, [r7, #12]
 800fe20:	60b9      	str	r1, [r7, #8]
 800fe22:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800fe24:	68f8      	ldr	r0, [r7, #12]
 800fe26:	f000 f9c6 	bl	80101b6 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	bf8c      	ite	hi
 800fe32:	2301      	movhi	r3, #1
 800fe34:	2300      	movls	r3, #0
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	bf14      	ite	ne
 800fe3c:	2301      	movne	r3, #1
 800fe3e:	2300      	moveq	r3, #0
 800fe40:	b2db      	uxtb	r3, r3
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d007      	beq.n	800fe56 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe4c:	d301      	bcc.n	800fe52 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800fe4e:	f018 fbc5 	bl	80285dc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800fe52:	f018 fbc0 	bl	80285d6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	011b      	lsls	r3, r3, #4
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f018 fba8 	bl	80285b0 <_Znwj>
 800fe60:	4603      	mov	r3, r0
 800fe62:	bf00      	nop
      }
 800fe64:	4618      	mov	r0, r3
 800fe66:	3710      	adds	r7, #16
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}

0800fe6c <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b084      	sub	sp, #16
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f7ff fb5f 	bl	800f538 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f7ff fb59 	bl	800f538 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800fe86:	4603      	mov	r3, r0
 800fe88:	2200      	movs	r2, #0
 800fe8a:	601a      	str	r2, [r3, #0]
	return __p;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
      }
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3710      	adds	r7, #16
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}

0800fe96 <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fe96:	b480      	push	{r7}
 800fe98:	b083      	sub	sp, #12
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	4618      	mov	r0, r3
 800fea2:	370c      	adds	r7, #12
 800fea4:	46bd      	mov	sp, r7
 800fea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feaa:	4770      	bx	lr

0800feac <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800feac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800feae:	b085      	sub	sp, #20
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	60b9      	str	r1, [r7, #8]
 800feb6:	607a      	str	r2, [r7, #4]
 800feb8:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	4619      	mov	r1, r3
 800febe:	2010      	movs	r0, #16
 800fec0:	f7fa fce6 	bl	800a890 <_ZnwjPv>
 800fec4:	4605      	mov	r5, r0
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f7ff ffe5 	bl	800fe96 <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800fecc:	4603      	mov	r3, r0
 800fece:	681c      	ldr	r4, [r3, #0]
 800fed0:	6838      	ldr	r0, [r7, #0]
 800fed2:	f7ff fe74 	bl	800fbbe <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800fed6:	4632      	mov	r2, r6
 800fed8:	4621      	mov	r1, r4
 800feda:	4628      	mov	r0, r5
 800fedc:	f000 f978 	bl	80101d0 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 800fee0:	bf00      	nop
 800fee2:	3714      	adds	r7, #20
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fee8 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f000 f98f 	bl	8010214 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	4618      	mov	r0, r3
 800fefa:	f000 f997 	bl	801022c <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	4618      	mov	r0, r3
 800ff02:	3708      	adds	r7, #8
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	4618      	mov	r0, r3
 800ff14:	f000 f998 	bl	8010248 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3708      	adds	r7, #8
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}

0800ff22 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ff22:	b580      	push	{r7, lr}
 800ff24:	b082      	sub	sp, #8
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f000 f997 	bl	801025e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>
 800ff30:	4603      	mov	r3, r0
 800ff32:	4618      	mov	r0, r3
 800ff34:	3708      	adds	r7, #8
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}

0800ff3a <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b082      	sub	sp, #8
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f000 f997 	bl	8010276 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3708      	adds	r7, #8
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}

0800ff52 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800ff52:	b580      	push	{r7, lr}
 800ff54:	b082      	sub	sp, #8
 800ff56:	af00      	add	r7, sp, #0
 800ff58:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 800ff5a:	f000 f8c1 	bl	80100e0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	461a      	mov	r2, r3
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	4293      	cmp	r3, r2
 800ff66:	bf94      	ite	ls
 800ff68:	2301      	movls	r3, #1
 800ff6a:	2300      	movhi	r3, #0
 800ff6c:	b2db      	uxtb	r3, r3
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3708      	adds	r7, #8
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}

0800ff76 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 800ff76:	b480      	push	{r7}
 800ff78:	b083      	sub	sp, #12
 800ff7a:	af00      	add	r7, sp, #0
 800ff7c:	6078      	str	r0, [r7, #4]
  return true;
 800ff7e:	2301      	movs	r3, #1
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	370c      	adds	r7, #12
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr

0800ff8c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800ff8c:	b5b0      	push	{r4, r5, r7, lr}
 800ff8e:	b082      	sub	sp, #8
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 800ff96:	f000 f8a3 	bl	80100e0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	17da      	asrs	r2, r3, #31
 800ff9e:	461c      	mov	r4, r3
 800ffa0:	4615      	mov	r5, r2
 800ffa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffa6:	4294      	cmp	r4, r2
 800ffa8:	eb75 0303 	sbcs.w	r3, r5, r3
 800ffac:	bf2c      	ite	cs
 800ffae:	2301      	movcs	r3, #1
 800ffb0:	2300      	movcc	r3, #0
 800ffb2:	b2db      	uxtb	r3, r3
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3708      	adds	r7, #8
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bdb0      	pop	{r4, r5, r7, pc}

0800ffbc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800ffbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ffc0:	b082      	sub	sp, #8
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800ffc8:	f000 f85c 	bl	8010084 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	17da      	asrs	r2, r3, #31
 800ffd0:	4698      	mov	r8, r3
 800ffd2:	4691      	mov	r9, r2
 800ffd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffd8:	4542      	cmp	r2, r8
 800ffda:	eb73 0309 	sbcs.w	r3, r3, r9
 800ffde:	db0d      	blt.n	800fffc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 800ffe0:	f000 f87e 	bl	80100e0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	17da      	asrs	r2, r3, #31
 800ffe8:	461c      	mov	r4, r3
 800ffea:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800ffec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fff0:	4294      	cmp	r4, r2
 800fff2:	eb75 0303 	sbcs.w	r3, r5, r3
 800fff6:	db01      	blt.n	800fffc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 800fff8:	2301      	movs	r3, #1
 800fffa:	e000      	b.n	800fffe <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 800fffc:	2300      	movs	r3, #0
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3708      	adds	r7, #8
 8010002:	46bd      	mov	sp, r7
 8010004:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08010008 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>:
  T convertTo() const {
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	3b01      	subs	r3, #1
 8010016:	2b03      	cmp	r3, #3
 8010018:	d82e      	bhi.n	8010078 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x70>
 801001a:	a201      	add	r2, pc, #4	@ (adr r2, 8010020 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x18>)
 801001c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010020:	08010031 	.word	0x08010031
 8010024:	08010043 	.word	0x08010043
 8010028:	08010055 	.word	0x08010055
 801002c:	08010067 	.word	0x08010067
        return convertNumber<T>(value_.asFloat);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	edd3 7a02 	vldr	s15, [r3, #8]
 8010036:	eeb0 0a67 	vmov.f32	s0, s15
 801003a:	f7ff fe71 	bl	800fd20 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 801003e:	4603      	mov	r3, r0
 8010040:	e01b      	b.n	801007a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8010048:	4610      	mov	r0, r2
 801004a:	4619      	mov	r1, r3
 801004c:	f7ff fe41 	bl	800fcd2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 8010050:	4603      	mov	r3, r0
 8010052:	e012      	b.n	801007a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801005a:	4610      	mov	r0, r2
 801005c:	4619      	mov	r1, r3
 801005e:	f7ff fe25 	bl	800fcac <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 8010062:	4603      	mov	r3, r0
 8010064:	e009      	b.n	801007a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	ed93 7b02 	vldr	d7, [r3, #8]
 801006c:	eeb0 0b47 	vmov.f64	d0, d7
 8010070:	f7ff fe6e 	bl	800fd50 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 8010074:	4603      	mov	r3, r0
 8010076:	e000      	b.n	801007a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return T();
 8010078:	2300      	movs	r3, #0
  }
 801007a:	4618      	mov	r0, r3
 801007c:	3708      	adds	r7, #8
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop

08010084 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>:
  static constexpr T lowest() {
 8010084:	b480      	push	{r7}
 8010086:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 8010088:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 801008c:	4618      	mov	r0, r3
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr

08010096 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8010096:	b580      	push	{r7, lr}
 8010098:	b082      	sub	sp, #8
 801009a:	af00      	add	r7, sp, #0
 801009c:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 80100a0:	f7ff fff0 	bl	8010084 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 80100a4:	ee07 0a90 	vmov	s15, r0
 80100a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80100b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100b8:	db0d      	blt.n	80100d6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 80100ba:	2000      	movs	r0, #0
 80100bc:	f000 f8e8 	bl	8010290 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>
 80100c0:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 80100c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80100c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80100cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100d0:	d801      	bhi.n	80100d6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 80100d2:	2301      	movs	r3, #1
 80100d4:	e000      	b.n	80100d8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 80100d6:	2300      	movs	r3, #0
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3708      	adds	r7, #8
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}

080100e0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>:
  static constexpr T highest() {
 80100e0:	b580      	push	{r7, lr}
 80100e2:	af00      	add	r7, sp, #0
    return T(~lowest());
 80100e4:	f7ff ffce 	bl	8010084 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 80100e8:	4603      	mov	r3, r0
 80100ea:	43db      	mvns	r3, r3
  }
 80100ec:	4618      	mov	r0, r3
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 80100fa:	f7ff ffc3 	bl	8010084 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 80100fe:	ee07 0a90 	vmov	s15, r0
 8010102:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010106:	ed97 6b00 	vldr	d6, [r7]
 801010a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801010e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010112:	db0e      	blt.n	8010132 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 8010114:	f7ff ffe4 	bl	80100e0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 8010118:	ee07 0a90 	vmov	s15, r0
 801011c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8010120:	ed97 6b00 	vldr	d6, [r7]
 8010124:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801012c:	d801      	bhi.n	8010132 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 801012e:	2301      	movs	r3, #1
 8010130:	e000      	b.n	8010134 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 8010132:	2300      	movs	r3, #0
}
 8010134:	4618      	mov	r0, r3
 8010136:	3708      	adds	r7, #8
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>:
      _Tuple_impl()
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f000 f8b2 	bl	80102ae <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	4618      	mov	r0, r3
 801014e:	3708      	adds	r7, #8
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>:
      constexpr _Head_base()
 8010154:	b480      	push	{r7}
 8010156:	b083      	sub	sp, #12
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	2200      	movs	r2, #0
 8010160:	601a      	str	r2, [r3, #0]
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	4618      	mov	r0, r3
 8010166:	370c      	adds	r7, #12
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr

08010170 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8010170:	b480      	push	{r7}
 8010172:	b083      	sub	sp, #12
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	4618      	mov	r0, r3
 801017c:	370c      	adds	r7, #12
 801017e:	46bd      	mov	sp, r7
 8010180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010184:	4770      	bx	lr

08010186 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010186:	b580      	push	{r7, lr}
 8010188:	b082      	sub	sp, #8
 801018a:	af00      	add	r7, sp, #0
 801018c:	6078      	str	r0, [r7, #4]
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f000 f898 	bl	80102c4 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>
 8010194:	4603      	mov	r3, r0
 8010196:	4618      	mov	r0, r3
 8010198:	3708      	adds	r7, #8
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}

0801019e <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801019e:	b580      	push	{r7, lr}
 80101a0:	b082      	sub	sp, #8
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f000 f897 	bl	80102da <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>
 80101ac:	4603      	mov	r3, r0
 80101ae:	4618      	mov	r0, r3
 80101b0:	3708      	adds	r7, #8
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80101b6:	b480      	push	{r7}
 80101b8:	b083      	sub	sp, #12
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80101be:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 80101c2:	4618      	mov	r0, r3
 80101c4:	370c      	adds	r7, #12
 80101c6:	46bd      	mov	sp, r7
 80101c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101cc:	4770      	bx	lr
	...

080101d0 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 80101d0:	b5b0      	push	{r4, r5, r7, lr}
 80101d2:	b086      	sub	sp, #24
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	60f8      	str	r0, [r7, #12]
 80101d8:	60b9      	str	r1, [r7, #8]
 80101da:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	4618      	mov	r0, r3
 80101e0:	f7fd fffe 	bl	800e1e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80101e4:	4a0a      	ldr	r2, [pc, #40]	@ (8010210 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	601a      	str	r2, [r3, #0]
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f103 040c 	add.w	r4, r3, #12
 80101f0:	1d3b      	adds	r3, r7, #4
 80101f2:	4618      	mov	r0, r3
 80101f4:	f000 f87e 	bl	80102f4 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 80101f8:	f107 0314 	add.w	r3, r7, #20
 80101fc:	462a      	mov	r2, r5
 80101fe:	68b9      	ldr	r1, [r7, #8]
 8010200:	4620      	mov	r0, r4
 8010202:	f000 f882 	bl	801030a <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	4618      	mov	r0, r3
 801020a:	3718      	adds	r7, #24
 801020c:	46bd      	mov	sp, r7
 801020e:	bdb0      	pop	{r4, r5, r7, pc}
 8010210:	0802b3b8 	.word	0x0802b3b8

08010214 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>:
      _Tuple_impl()
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f000 f890 	bl	8010342 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	4618      	mov	r0, r3
 8010226:	3708      	adds	r7, #8
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}

0801022c <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>:
      constexpr _Head_base()
 801022c:	b480      	push	{r7}
 801022e:	b083      	sub	sp, #12
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2200      	movs	r2, #0
 8010238:	601a      	str	r2, [r3, #0]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4618      	mov	r0, r3
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr

08010248 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8010248:	b480      	push	{r7}
 801024a:	b083      	sub	sp, #12
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	4618      	mov	r0, r3
 8010254:	370c      	adds	r7, #12
 8010256:	46bd      	mov	sp, r7
 8010258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025c:	4770      	bx	lr

0801025e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801025e:	b580      	push	{r7, lr}
 8010260:	b082      	sub	sp, #8
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f000 f876 	bl	8010358 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>
 801026c:	4603      	mov	r3, r0
 801026e:	4618      	mov	r0, r3
 8010270:	3708      	adds	r7, #8
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}

08010276 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010276:	b580      	push	{r7, lr}
 8010278:	b082      	sub	sp, #8
 801027a:	af00      	add	r7, sp, #0
 801027c:	6078      	str	r0, [r7, #4]
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	4618      	mov	r0, r3
 8010282:	f000 f874 	bl	801036e <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>
 8010286:	4603      	mov	r3, r0
 8010288:	4618      	mov	r0, r3
 801028a:	3708      	adds	r7, #8
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}

08010290 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>:
  static T highest_for(
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
    return forge(0x4EFFFFFF);  // 2.14748352E9
 8010298:	f06f 4031 	mvn.w	r0, #2969567232	@ 0xb1000000
 801029c:	f7f9 fa9e 	bl	80097dc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 80102a0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80102a4:	eeb0 0a67 	vmov.f32	s0, s15
 80102a8:	3708      	adds	r7, #8
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}

080102ae <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>:
      constexpr _Head_base()
 80102ae:	b480      	push	{r7}
 80102b0:	b083      	sub	sp, #12
 80102b2:	af00      	add	r7, sp, #0
 80102b4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	4618      	mov	r0, r3
 80102ba:	370c      	adds	r7, #12
 80102bc:	46bd      	mov	sp, r7
 80102be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c2:	4770      	bx	lr

080102c4 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80102c4:	b480      	push	{r7}
 80102c6:	b083      	sub	sp, #12
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	4618      	mov	r0, r3
 80102d0:	370c      	adds	r7, #12
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr

080102da <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80102da:	b580      	push	{r7, lr}
 80102dc:	b082      	sub	sp, #8
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	4618      	mov	r0, r3
 80102e6:	f000 f84d 	bl	8010384 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>
 80102ea:	4603      	mov	r3, r0
 80102ec:	4618      	mov	r0, r3
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80102f4:	b480      	push	{r7}
 80102f6:	b083      	sub	sp, #12
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	4618      	mov	r0, r3
 8010300:	370c      	adds	r7, #12
 8010302:	46bd      	mov	sp, r7
 8010304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010308:	4770      	bx	lr

0801030a <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 801030a:	b580      	push	{r7, lr}
 801030c:	b084      	sub	sp, #16
 801030e:	af00      	add	r7, sp, #0
 8010310:	60f8      	str	r0, [r7, #12]
 8010312:	60b9      	str	r1, [r7, #8]
 8010314:	713a      	strb	r2, [r7, #4]
 8010316:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 8010318:	1d3b      	adds	r3, r7, #4
 801031a:	4618      	mov	r0, r3
 801031c:	f7ff ffea 	bl	80102f4 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 8010320:	4603      	mov	r3, r0
 8010322:	4619      	mov	r1, r3
 8010324:	68f8      	ldr	r0, [r7, #12]
 8010326:	f000 f838 	bl	801039a <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>
 801032a:	6839      	ldr	r1, [r7, #0]
 801032c:	68f8      	ldr	r0, [r7, #12]
 801032e:	f000 f841 	bl	80103b4 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	68ba      	ldr	r2, [r7, #8]
 8010336:	601a      	str	r2, [r3, #0]
	{ }
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	4618      	mov	r0, r3
 801033c:	3710      	adds	r7, #16
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}

08010342 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>:
      constexpr _Head_base()
 8010342:	b480      	push	{r7}
 8010344:	b083      	sub	sp, #12
 8010346:	af00      	add	r7, sp, #0
 8010348:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	4618      	mov	r0, r3
 801034e:	370c      	adds	r7, #12
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr

08010358 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	4618      	mov	r0, r3
 8010364:	370c      	adds	r7, #12
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr

0801036e <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 801036e:	b480      	push	{r7}
 8010370:	b083      	sub	sp, #12
 8010372:	af00      	add	r7, sp, #0
 8010374:	6078      	str	r0, [r7, #4]
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	4618      	mov	r0, r3
 801037a:	370c      	adds	r7, #12
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr

08010384 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>:
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	4618      	mov	r0, r3
 8010390:	370c      	adds	r7, #12
 8010392:	46bd      	mov	sp, r7
 8010394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010398:	4770      	bx	lr

0801039a <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 801039a:	b580      	push	{r7, lr}
 801039c:	b082      	sub	sp, #8
 801039e:	af00      	add	r7, sp, #0
 80103a0:	6078      	str	r0, [r7, #4]
 80103a2:	6039      	str	r1, [r7, #0]
 80103a4:	6838      	ldr	r0, [r7, #0]
 80103a6:	f7ff ffa5 	bl	80102f4 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	4618      	mov	r0, r3
 80103ae:	3708      	adds	r7, #8
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 80103b4:	b480      	push	{r7}
 80103b6:	b083      	sub	sp, #12
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	6039      	str	r1, [r7, #0]
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4618      	mov	r0, r3
 80103c2:	370c      	adds	r7, #12
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	4a05      	ldr	r2, [pc, #20]	@ (80103ec <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	601a      	str	r2, [r3, #0]
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	4618      	mov	r0, r3
 80103de:	f7fc f8c1 	bl	800c564 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4618      	mov	r0, r3
 80103e6:	3708      	adds	r7, #8
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	0802b3b8 	.word	0x0802b3b8

080103f0 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f7ff ffe7 	bl	80103cc <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80103fe:	2110      	movs	r1, #16
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f018 f8c4 	bl	802858e <_ZdlPvj>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	4618      	mov	r0, r3
 801040a:	3708      	adds	r7, #8
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}

08010410 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8010410:	b580      	push	{r7, lr}
 8010412:	b082      	sub	sp, #8
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	330c      	adds	r3, #12
 801041c:	4618      	mov	r0, r3
 801041e:	f000 f83f 	bl	80104a0 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8010422:	4602      	mov	r2, r0
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	68db      	ldr	r3, [r3, #12]
 8010428:	4619      	mov	r1, r3
 801042a:	4610      	mov	r0, r2
 801042c:	f7ff f8d2 	bl	800f5d4 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
 8010430:	bf00      	nop
 8010432:	3708      	adds	r7, #8
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8010438:	b580      	push	{r7, lr}
 801043a:	b086      	sub	sp, #24
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	330c      	adds	r3, #12
 8010444:	4618      	mov	r0, r3
 8010446:	f000 f837 	bl	80104b8 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801044a:	4602      	mov	r2, r0
 801044c:	f107 0314 	add.w	r3, r7, #20
 8010450:	4611      	mov	r1, r2
 8010452:	4618      	mov	r0, r3
 8010454:	f000 f83c 	bl	80104d0 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8010458:	f107 0114 	add.w	r1, r7, #20
 801045c:	f107 030c 	add.w	r3, r7, #12
 8010460:	687a      	ldr	r2, [r7, #4]
 8010462:	4618      	mov	r0, r3
 8010464:	f000 f841 	bl	80104ea <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f7ff ffaf 	bl	80103cc <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 801046e:	f107 030c 	add.w	r3, r7, #12
 8010472:	4618      	mov	r0, r3
 8010474:	f000 f84d 	bl	8010512 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8010478:	f107 0314 	add.w	r3, r7, #20
 801047c:	4618      	mov	r0, r3
 801047e:	f7ff fb76 	bl	800fb6e <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8010482:	3718      	adds	r7, #24
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 8010488:	b480      	push	{r7}
 801048a:	b083      	sub	sp, #12
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
        return nullptr;
 8010492:	2300      	movs	r3, #0
      }
 8010494:	4618      	mov	r0, r3
 8010496:	370c      	adds	r7, #12
 8010498:	46bd      	mov	sp, r7
 801049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049e:	4770      	bx	lr

080104a0 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f000 f847 	bl	801053c <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>
 80104ae:	4603      	mov	r3, r0
 80104b0:	4618      	mov	r0, r3
 80104b2:	3708      	adds	r7, #8
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}

080104b8 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f000 f846 	bl	8010552 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 80104c6:	4603      	mov	r3, r0
 80104c8:	4618      	mov	r0, r3
 80104ca:	3708      	adds	r7, #8
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	6039      	str	r1, [r7, #0]
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	f7ff fc86 	bl	800fdec <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4618      	mov	r0, r3
 80104e4:	3708      	adds	r7, #8
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}

080104ea <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80104ea:	b580      	push	{r7, lr}
 80104ec:	b084      	sub	sp, #16
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	60f8      	str	r0, [r7, #12]
 80104f2:	60b9      	str	r1, [r7, #8]
 80104f4:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80104f6:	68b8      	ldr	r0, [r7, #8]
 80104f8:	f000 f836 	bl	8010568 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 80104fc:	4602      	mov	r2, r0
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	601a      	str	r2, [r3, #0]
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	605a      	str	r2, [r3, #4]
      { }
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	4618      	mov	r0, r3
 801050c:	3710      	adds	r7, #16
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}

08010512 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8010512:	b580      	push	{r7, lr}
 8010514:	b082      	sub	sp, #8
 8010516:	af00      	add	r7, sp, #0
 8010518:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d007      	beq.n	8010532 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6818      	ldr	r0, [r3, #0]
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	685b      	ldr	r3, [r3, #4]
 801052a:	2201      	movs	r2, #1
 801052c:	4619      	mov	r1, r3
 801052e:	f000 f826 	bl	801057e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	4618      	mov	r0, r3
 8010536:	3708      	adds	r7, #8
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 801053c:	b480      	push	{r7}
 801053e:	b083      	sub	sp, #12
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	4618      	mov	r0, r3
 8010548:	370c      	adds	r7, #12
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr

08010552 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>:
 8010552:	b480      	push	{r7}
 8010554:	b083      	sub	sp, #12
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	4618      	mov	r0, r3
 801055e:	370c      	adds	r7, #12
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr

08010568 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8010568:	b480      	push	{r7}
 801056a:	b083      	sub	sp, #12
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	4618      	mov	r0, r3
 8010574:	370c      	adds	r7, #12
 8010576:	46bd      	mov	sp, r7
 8010578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057c:	4770      	bx	lr

0801057e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801057e:	b580      	push	{r7, lr}
 8010580:	b084      	sub	sp, #16
 8010582:	af00      	add	r7, sp, #0
 8010584:	60f8      	str	r0, [r7, #12]
 8010586:	60b9      	str	r1, [r7, #8]
 8010588:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	68b9      	ldr	r1, [r7, #8]
 801058e:	68f8      	ldr	r0, [r7, #12]
 8010590:	f000 f804 	bl	801059c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8010594:	bf00      	nop
 8010596:	3710      	adds	r7, #16
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	011b      	lsls	r3, r3, #4
 80105ac:	4619      	mov	r1, r3
 80105ae:	68b8      	ldr	r0, [r7, #8]
 80105b0:	f017 ffed 	bl	802858e <_ZdlPvj>
      }
 80105b4:	3710      	adds	r7, #16
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}

080105ba <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 80105ba:	b480      	push	{r7}
 80105bc:	b083      	sub	sp, #12
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	4618      	mov	r0, r3
 80105c6:	370c      	adds	r7, #12
 80105c8:	46bd      	mov	sp, r7
 80105ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ce:	4770      	bx	lr

080105d0 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 80105d0:	b480      	push	{r7}
 80105d2:	b083      	sub	sp, #12
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	4618      	mov	r0, r3
 80105dc:	370c      	adds	r7, #12
 80105de:	46bd      	mov	sp, r7
 80105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e4:	4770      	bx	lr

080105e6 <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>:

	virtual void init(void);
	virtual void start(void);
	virtual void tasks(void);

    void setDataCallback(const std::function<void(bool)>& callback) {
 80105e6:	b580      	push	{r7, lr}
 80105e8:	b082      	sub	sp, #8
 80105ea:	af00      	add	r7, sp, #0
 80105ec:	6078      	str	r0, [r7, #4]
 80105ee:	6039      	str	r1, [r7, #0]
        dataCallback = callback;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	3318      	adds	r3, #24
 80105f4:	6839      	ldr	r1, [r7, #0]
 80105f6:	4618      	mov	r0, r3
 80105f8:	f000 f8e9 	bl	80107ce <_ZNSt8functionIFvbEEaSERKS1_>
    }
 80105fc:	bf00      	nop
 80105fe:	3708      	adds	r7, #8
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <_ZN12CommsHandler7setDataEb>:
    void setData(bool value) { data = value; }
 8010604:	b480      	push	{r7}
 8010606:	b083      	sub	sp, #12
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	460b      	mov	r3, r1
 801060e:	70fb      	strb	r3, [r7, #3]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	78fa      	ldrb	r2, [r7, #3]
 8010614:	771a      	strb	r2, [r3, #28]
 8010616:	bf00      	nop
 8010618:	370c      	adds	r7, #12
 801061a:	46bd      	mov	sp, r7
 801061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010620:	4770      	bx	lr
	...

08010624 <_ZN12CommsHandlerC1Ev>:
#include "commsHandler.h"
#include "../../remora.h"

CommsHandler::CommsHandler() : data(false), noDataCount(0), status(false) {
 8010624:	b580      	push	{r7, lr}
 8010626:	b082      	sub	sp, #8
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	4618      	mov	r0, r3
 8010630:	f001 fb86 	bl	8011d40 <_ZN6ModuleC1Ev>
 8010634:	4a0a      	ldr	r2, [pc, #40]	@ (8010660 <_ZN12CommsHandlerC1Ev+0x3c>)
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	601a      	str	r2, [r3, #0]
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	3318      	adds	r3, #24
 801063e:	4618      	mov	r0, r3
 8010640:	f000 f8fa 	bl	8010838 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2200      	movs	r2, #0
 8010648:	771a      	strb	r2, [r3, #28]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2200      	movs	r2, #0
 801064e:	775a      	strb	r2, [r3, #29]
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2200      	movs	r2, #0
 8010654:	779a      	strb	r2, [r3, #30]

}
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	4618      	mov	r0, r3
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	0802b3f8 	.word	0x0802b3f8

08010664 <_ZN12CommsHandlerD1Ev>:

CommsHandler::~CommsHandler() {}
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
 801066c:	4a08      	ldr	r2, [pc, #32]	@ (8010690 <_ZN12CommsHandlerD1Ev+0x2c>)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	601a      	str	r2, [r3, #0]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	3318      	adds	r3, #24
 8010676:	4618      	mov	r0, r3
 8010678:	f7fb fd3c 	bl	800c0f4 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	4618      	mov	r0, r3
 8010680:	f001 fb7a 	bl	8011d78 <_ZN6ModuleD1Ev>
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	4618      	mov	r0, r3
 8010688:	3708      	adds	r7, #8
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}
 801068e:	bf00      	nop
 8010690:	0802b3f8 	.word	0x0802b3f8

08010694 <_ZN12CommsHandlerD0Ev>:
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f7ff ffe1 	bl	8010664 <_ZN12CommsHandlerD1Ev>
 80106a2:	2120      	movs	r1, #32
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f017 ff72 	bl	802858e <_ZdlPvj>
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	4618      	mov	r0, r3
 80106ae:	3708      	adds	r7, #8
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}

080106b4 <_ZZN12CommsHandler4initEvENKUlbE_clEb>:

void CommsHandler::init() {
    interface->setDataCallback([this](bool dataReceived) {
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b082      	sub	sp, #8
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	460b      	mov	r3, r1
 80106be:	70fb      	strb	r3, [r7, #3]
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
        this->setData(dataReceived);
 80106c4:	78fa      	ldrb	r2, [r7, #3]
 80106c6:	4611      	mov	r1, r2
 80106c8:	4618      	mov	r0, r3
 80106ca:	f7ff ff9b 	bl	8010604 <_ZN12CommsHandler7setDataEb>
    });
 80106ce:	bf00      	nop
 80106d0:	3708      	adds	r7, #8
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}

080106d6 <_ZN12CommsHandler4initEv>:
void CommsHandler::init() {
 80106d6:	b590      	push	{r4, r7, lr}
 80106d8:	b089      	sub	sp, #36	@ 0x24
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
    interface->setDataCallback([this](bool dataReceived) {
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	3318      	adds	r3, #24
 80106e2:	4618      	mov	r0, r3
 80106e4:	f000 f8b8 	bl	8010858 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 80106e8:	4604      	mov	r4, r0
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	61fb      	str	r3, [r7, #28]
 80106ee:	f107 021c 	add.w	r2, r7, #28
 80106f2:	f107 030c 	add.w	r3, r7, #12
 80106f6:	4611      	mov	r1, r2
 80106f8:	4618      	mov	r0, r3
 80106fa:	f000 f8b9 	bl	8010870 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>
 80106fe:	f107 030c 	add.w	r3, r7, #12
 8010702:	4619      	mov	r1, r3
 8010704:	4620      	mov	r0, r4
 8010706:	f7ff ff6e 	bl	80105e6 <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>
 801070a:	f107 030c 	add.w	r3, r7, #12
 801070e:	4618      	mov	r0, r3
 8010710:	f7f0 fb1e 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>

    interface->init();
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	3318      	adds	r3, #24
 8010718:	4618      	mov	r0, r3
 801071a:	f000 f89d 	bl	8010858 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 801071e:	4603      	mov	r3, r0
 8010720:	681a      	ldr	r2, [r3, #0]
 8010722:	321c      	adds	r2, #28
 8010724:	6812      	ldr	r2, [r2, #0]
 8010726:	4618      	mov	r0, r3
 8010728:	4790      	blx	r2
}
 801072a:	bf00      	nop
 801072c:	3724      	adds	r7, #36	@ 0x24
 801072e:	46bd      	mov	sp, r7
 8010730:	bd90      	pop	{r4, r7, pc}

08010732 <_ZN12CommsHandler5startEv>:

void CommsHandler::start() {
 8010732:	b580      	push	{r7, lr}
 8010734:	b082      	sub	sp, #8
 8010736:	af00      	add	r7, sp, #0
 8010738:	6078      	str	r0, [r7, #4]
	interface->start();
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	3318      	adds	r3, #24
 801073e:	4618      	mov	r0, r3
 8010740:	f000 f88a 	bl	8010858 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 8010744:	4603      	mov	r3, r0
 8010746:	681a      	ldr	r2, [r3, #0]
 8010748:	3220      	adds	r2, #32
 801074a:	6812      	ldr	r2, [r2, #0]
 801074c:	4618      	mov	r0, r3
 801074e:	4790      	blx	r2
}
 8010750:	bf00      	nop
 8010752:	3708      	adds	r7, #8
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <_ZN12CommsHandler5tasksEv>:

// tasks is run in the main loop to do polling tasks, eg Ethernet, processing data etc
void CommsHandler::tasks() {
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
	interface->tasks();
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	3318      	adds	r3, #24
 8010764:	4618      	mov	r0, r3
 8010766:	f000 f877 	bl	8010858 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 801076a:	4603      	mov	r3, r0
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	3224      	adds	r2, #36	@ 0x24
 8010770:	6812      	ldr	r2, [r2, #0]
 8010772:	4618      	mov	r0, r3
 8010774:	4790      	blx	r2
}
 8010776:	bf00      	nop
 8010778:	3708      	adds	r7, #8
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}

0801077e <_ZN12CommsHandler6updateEv>:

// update it run in the servo thread to monitor communications
void CommsHandler::update() {
 801077e:	b480      	push	{r7}
 8010780:	b083      	sub	sp, #12
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
	if (data)
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	7f1b      	ldrb	r3, [r3, #28]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d006      	beq.n	801079c <_ZN12CommsHandler6updateEv+0x1e>
	{
		noDataCount = 0;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2200      	movs	r2, #0
 8010792:	775a      	strb	r2, [r3, #29]
		status = true;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2201      	movs	r2, #1
 8010798:	779a      	strb	r2, [r3, #30]
 801079a:	e005      	b.n	80107a8 <_ZN12CommsHandler6updateEv+0x2a>
	}
	else
	{
		noDataCount++;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	7f5b      	ldrb	r3, [r3, #29]
 80107a0:	3301      	adds	r3, #1
 80107a2:	b2da      	uxtb	r2, r3
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	775a      	strb	r2, [r3, #29]
	}

	if (noDataCount > Config::dataErrMax)
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	7f5b      	ldrb	r3, [r3, #29]
 80107ac:	2b64      	cmp	r3, #100	@ 0x64
 80107ae:	d905      	bls.n	80107bc <_ZN12CommsHandler6updateEv+0x3e>
	{
		noDataCount = 0;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2200      	movs	r2, #0
 80107b4:	775a      	strb	r2, [r3, #29]
		status = false;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2200      	movs	r2, #0
 80107ba:	779a      	strb	r2, [r3, #30]
	}

	data = false;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2200      	movs	r2, #0
 80107c0:	771a      	strb	r2, [r3, #28]
}
 80107c2:	bf00      	nop
 80107c4:	370c      	adds	r7, #12
 80107c6:	46bd      	mov	sp, r7
 80107c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107cc:	4770      	bx	lr

080107ce <_ZNSt8functionIFvbEEaSERKS1_>:
      operator=(const function& __x)
 80107ce:	b580      	push	{r7, lr}
 80107d0:	b086      	sub	sp, #24
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	6078      	str	r0, [r7, #4]
 80107d6:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 80107d8:	f107 0308 	add.w	r3, r7, #8
 80107dc:	6839      	ldr	r1, [r7, #0]
 80107de:	4618      	mov	r0, r3
 80107e0:	f000 f876 	bl	80108d0 <_ZNSt8functionIFvbEEC1ERKS1_>
 80107e4:	f107 0308 	add.w	r3, r7, #8
 80107e8:	6879      	ldr	r1, [r7, #4]
 80107ea:	4618      	mov	r0, r3
 80107ec:	f000 f89b 	bl	8010926 <_ZNSt8functionIFvbEE4swapERS1_>
 80107f0:	f107 0308 	add.w	r3, r7, #8
 80107f4:	4618      	mov	r0, r3
 80107f6:	f7f0 faab 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
	return *this;
 80107fa:	687b      	ldr	r3, [r7, #4]
      }
 80107fc:	4618      	mov	r0, r3
 80107fe:	3718      	adds	r7, #24
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}

08010804 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	4618      	mov	r0, r3
 8010810:	f000 f8aa 	bl	8010968 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	4618      	mov	r0, r3
 8010818:	3708      	adds	r7, #8
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}

0801081e <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 801081e:	b580      	push	{r7, lr}
 8010820:	b082      	sub	sp, #8
 8010822:	af00      	add	r7, sp, #0
 8010824:	6078      	str	r0, [r7, #4]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	4618      	mov	r0, r3
 801082a:	f7ff ffeb 	bl	8010804 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	4618      	mov	r0, r3
 8010832:	3708      	adds	r7, #8
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
	: _M_t()
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2200      	movs	r2, #0
 8010844:	601a      	str	r2, [r3, #0]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	4618      	mov	r0, r3
 801084a:	f7ff ffe8 	bl	801081e <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	4618      	mov	r0, r3
 8010852:	3708      	adds	r7, #8
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}

08010858 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8010858:	b580      	push	{r7, lr}
 801085a:	b082      	sub	sp, #8
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
	return get();
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f000 f88e 	bl	8010982 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>
 8010866:	4603      	mov	r3, r0
      }
 8010868:	4618      	mov	r0, r3
 801086a:	3708      	adds	r7, #8
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>:
	function(_Functor&& __f)
 8010870:	b590      	push	{r4, r7, lr}
 8010872:	b083      	sub	sp, #12
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	6039      	str	r1, [r7, #0]
	: _Function_base()
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	461a      	mov	r2, r3
 801087e:	2300      	movs	r3, #0
 8010880:	6013      	str	r3, [r2, #0]
 8010882:	6053      	str	r3, [r2, #4]
 8010884:	6093      	str	r3, [r2, #8]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	4618      	mov	r0, r3
 801088a:	f7f1 fc83 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2200      	movs	r2, #0
 8010892:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8010894:	6838      	ldr	r0, [r7, #0]
 8010896:	f000 f881 	bl	801099c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>
 801089a:	4603      	mov	r3, r0
 801089c:	2b00      	cmp	r3, #0
 801089e:	d00e      	beq.n	80108be <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 80108a0:	687c      	ldr	r4, [r7, #4]
 80108a2:	6838      	ldr	r0, [r7, #0]
 80108a4:	f000 f885 	bl	80109b2 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 80108a8:	4603      	mov	r3, r0
 80108aa:	4619      	mov	r1, r3
 80108ac:	4620      	mov	r0, r4
 80108ae:	f000 f88b 	bl	80109c8 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	4a04      	ldr	r2, [pc, #16]	@ (80108c8 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x58>)
 80108b6:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	4a04      	ldr	r2, [pc, #16]	@ (80108cc <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x5c>)
 80108bc:	609a      	str	r2, [r3, #8]
	}
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	4618      	mov	r0, r3
 80108c2:	370c      	adds	r7, #12
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd90      	pop	{r4, r7, pc}
 80108c8:	080109ed 	.word	0x080109ed
 80108cc:	08010a17 	.word	0x08010a17

080108d0 <_ZNSt8functionIFvbEEC1ERKS1_>:
      function(const function& __x)
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	461a      	mov	r2, r3
 80108de:	2300      	movs	r3, #0
 80108e0:	6013      	str	r3, [r2, #0]
 80108e2:	6053      	str	r3, [r2, #4]
 80108e4:	6093      	str	r3, [r2, #8]
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7f1 fc53 	bl	8002194 <_ZNSt14_Function_baseC1Ev>
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2200      	movs	r2, #0
 80108f2:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 80108f4:	6838      	ldr	r0, [r7, #0]
 80108f6:	f000 f8ad 	bl	8010a54 <_ZNKSt8functionIFvbEEcvbEv>
 80108fa:	4603      	mov	r3, r0
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d00d      	beq.n	801091c <_ZNSt8functionIFvbEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	689b      	ldr	r3, [r3, #8]
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	6839      	ldr	r1, [r7, #0]
 8010908:	2202      	movs	r2, #2
 801090a:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	68da      	ldr	r2, [r3, #12]
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	689a      	ldr	r2, [r3, #8]
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	609a      	str	r2, [r3, #8]
      }
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	4618      	mov	r0, r3
 8010920:	3708      	adds	r7, #8
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}

08010926 <_ZNSt8functionIFvbEE4swapERS1_>:
      void swap(function& __x) noexcept
 8010926:	b580      	push	{r7, lr}
 8010928:	b082      	sub	sp, #8
 801092a:	af00      	add	r7, sp, #0
 801092c:	6078      	str	r0, [r7, #4]
 801092e:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	683a      	ldr	r2, [r7, #0]
 8010934:	4611      	mov	r1, r2
 8010936:	4618      	mov	r0, r3
 8010938:	f000 f89c 	bl	8010a74 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f103 0208 	add.w	r2, r3, #8
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	3308      	adds	r3, #8
 8010946:	4619      	mov	r1, r3
 8010948:	4610      	mov	r0, r2
 801094a:	f000 f8ba 	bl	8010ac2 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f103 020c 	add.w	r2, r3, #12
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	330c      	adds	r3, #12
 8010958:	4619      	mov	r1, r3
 801095a:	4610      	mov	r0, r2
 801095c:	f000 f8d0 	bl	8010b00 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 8010960:	bf00      	nop
 8010962:	3708      	adds	r7, #8
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}

08010968 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	4618      	mov	r0, r3
 8010974:	f000 f8e3 	bl	8010b3e <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	4618      	mov	r0, r3
 801097c:	3708      	adds	r7, #8
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}

08010982 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8010982:	b580      	push	{r7, lr}
 8010984:	b082      	sub	sp, #8
 8010986:	af00      	add	r7, sp, #0
 8010988:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	4618      	mov	r0, r3
 801098e:	f000 f8e6 	bl	8010b5e <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 8010992:	4603      	mov	r3, r0
 8010994:	4618      	mov	r0, r3
 8010996:	3708      	adds	r7, #8
 8010998:	46bd      	mov	sp, r7
 801099a:	bd80      	pop	{r7, pc}

0801099c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 801099c:	b480      	push	{r7}
 801099e:	b083      	sub	sp, #12
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
	  { return true; }
 80109a4:	2301      	movs	r3, #1
 80109a6:	4618      	mov	r0, r3
 80109a8:	370c      	adds	r7, #12
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr

080109b2 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80109b2:	b480      	push	{r7}
 80109b4:	b083      	sub	sp, #12
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	4618      	mov	r0, r3
 80109be:	370c      	adds	r7, #12
 80109c0:	46bd      	mov	sp, r7
 80109c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c6:	4770      	bx	lr

080109c8 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 80109c8:	b590      	push	{r4, r7, lr}
 80109ca:	b083      	sub	sp, #12
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 80109d2:	6838      	ldr	r0, [r7, #0]
 80109d4:	f7ff ffed 	bl	80109b2 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 80109d8:	4603      	mov	r3, r0
 80109da:	4622      	mov	r2, r4
 80109dc:	4619      	mov	r1, r3
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f000 f8cb 	bl	8010b7a <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 80109e4:	bf00      	nop
 80109e6:	370c      	adds	r7, #12
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd90      	pop	{r4, r7, pc}

080109ec <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80109ec:	b590      	push	{r4, r7, lr}
 80109ee:	b083      	sub	sp, #12
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
 80109f4:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f000 f8d8 	bl	8010bac <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 80109fc:	4604      	mov	r4, r0
 80109fe:	6838      	ldr	r0, [r7, #0]
 8010a00:	f7f1 fb06 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010a04:	4603      	mov	r3, r0
 8010a06:	4619      	mov	r1, r3
 8010a08:	4620      	mov	r0, r4
 8010a0a:	f000 f8df 	bl	8010bcc <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8010a0e:	bf00      	nop
      }
 8010a10:	370c      	adds	r7, #12
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd90      	pop	{r4, r7, pc}

08010a16 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8010a16:	b590      	push	{r4, r7, lr}
 8010a18:	b085      	sub	sp, #20
 8010a1a:	af00      	add	r7, sp, #0
 8010a1c:	60f8      	str	r0, [r7, #12]
 8010a1e:	60b9      	str	r1, [r7, #8]
 8010a20:	4613      	mov	r3, r2
 8010a22:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8010a24:	79fb      	ldrb	r3, [r7, #7]
 8010a26:	2b01      	cmp	r3, #1
 8010a28:	d109      	bne.n	8010a3e <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8010a2a:	68b8      	ldr	r0, [r7, #8]
 8010a2c:	f000 f8be 	bl	8010bac <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8010a30:	4604      	mov	r4, r0
 8010a32:	68f8      	ldr	r0, [r7, #12]
 8010a34:	f000 f8e0 	bl	8010bf8 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	601c      	str	r4, [r3, #0]
	    break;
 8010a3c:	e005      	b.n	8010a4a <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8010a3e:	79fb      	ldrb	r3, [r7, #7]
 8010a40:	461a      	mov	r2, r3
 8010a42:	68b9      	ldr	r1, [r7, #8]
 8010a44:	68f8      	ldr	r0, [r7, #12]
 8010a46:	f000 f8e3 	bl	8010c10 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8010a4a:	2300      	movs	r3, #0
      }
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3714      	adds	r7, #20
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd90      	pop	{r4, r7, pc}

08010a54 <_ZNKSt8functionIFvbEEcvbEv>:
      explicit operator bool() const noexcept
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7f0 f935 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 8010a64:	4603      	mov	r3, r0
 8010a66:	f083 0301 	eor.w	r3, r3, #1
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3708      	adds	r7, #8
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}

08010a74 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b084      	sub	sp, #16
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f000 f900 	bl	8010c84 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8010a84:	4602      	mov	r2, r0
 8010a86:	f107 0308 	add.w	r3, r7, #8
 8010a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a8e:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8010a92:	6838      	ldr	r0, [r7, #0]
 8010a94:	f000 f8f6 	bl	8010c84 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8010a98:	4602      	mov	r2, r0
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010aa0:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8010aa4:	f107 0308 	add.w	r3, r7, #8
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f000 f8eb 	bl	8010c84 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8010aae:	4602      	mov	r2, r0
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ab6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010aba:	bf00      	nop
 8010abc:	3710      	adds	r7, #16
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}

08010ac2 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8010ac2:	b580      	push	{r7, lr}
 8010ac4:	b084      	sub	sp, #16
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	6078      	str	r0, [r7, #4]
 8010aca:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f000 f8e4 	bl	8010c9a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8010ad8:	6838      	ldr	r0, [r7, #0]
 8010ada:	f000 f8de 	bl	8010c9a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8010ae6:	f107 030c 	add.w	r3, r7, #12
 8010aea:	4618      	mov	r0, r3
 8010aec:	f000 f8d5 	bl	8010c9a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8010af0:	4603      	mov	r3, r0
 8010af2:	681a      	ldr	r2, [r3, #0]
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	601a      	str	r2, [r3, #0]
    }
 8010af8:	bf00      	nop
 8010afa:	3710      	adds	r7, #16
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}

08010b00 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b084      	sub	sp, #16
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f000 f8d0 	bl	8010cb0 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8010b10:	4603      	mov	r3, r0
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8010b16:	6838      	ldr	r0, [r7, #0]
 8010b18:	f000 f8ca 	bl	8010cb0 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	681a      	ldr	r2, [r3, #0]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8010b24:	f107 030c 	add.w	r3, r7, #12
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f000 f8c1 	bl	8010cb0 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	681a      	ldr	r2, [r3, #0]
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	601a      	str	r2, [r3, #0]
    }
 8010b36:	bf00      	nop
 8010b38:	3710      	adds	r7, #16
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}

08010b3e <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8010b3e:	b580      	push	{r7, lr}
 8010b40:	b082      	sub	sp, #8
 8010b42:	af00      	add	r7, sp, #0
 8010b44:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f000 f8bd 	bl	8010cc6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f000 f8c5 	bl	8010cde <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	4618      	mov	r0, r3
 8010b58:	3708      	adds	r7, #8
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}

08010b5e <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8010b5e:	b580      	push	{r7, lr}
 8010b60:	b082      	sub	sp, #8
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f000 f8c6 	bl	8010cfa <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	4618      	mov	r0, r3
 8010b74:	3708      	adds	r7, #8
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}

08010b7a <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8010b7a:	b590      	push	{r4, r7, lr}
 8010b7c:	b085      	sub	sp, #20
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	60f8      	str	r0, [r7, #12]
 8010b82:	60b9      	str	r1, [r7, #8]
 8010b84:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8010b86:	68f8      	ldr	r0, [r7, #12]
 8010b88:	f7ff fd17 	bl	80105ba <_ZNSt9_Any_data9_M_accessEv>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	4619      	mov	r1, r3
 8010b90:	2004      	movs	r0, #4
 8010b92:	f7f9 fe7d 	bl	800a890 <_ZnwjPv>
 8010b96:	4604      	mov	r4, r0
 8010b98:	68b8      	ldr	r0, [r7, #8]
 8010b9a:	f7ff ff0a 	bl	80109b2 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	6023      	str	r3, [r4, #0]
	  }
 8010ba4:	bf00      	nop
 8010ba6:	3714      	adds	r7, #20
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd90      	pop	{r4, r7, pc}

08010bac <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b084      	sub	sp, #16
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f000 f8ad 	bl	8010d14 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>
 8010bba:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8010bbc:	68f8      	ldr	r0, [r7, #12]
 8010bbe:	f000 f8b5 	bl	8010d2c <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>
 8010bc2:	4603      	mov	r3, r0
	}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3710      	adds	r7, #16
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8010bcc:	b5b0      	push	{r4, r5, r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
 8010bd4:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f000 f8b3 	bl	8010d42 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8010bdc:	4604      	mov	r4, r0
 8010bde:	6838      	ldr	r0, [r7, #0]
 8010be0:	f7f1 fa16 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010be4:	4603      	mov	r3, r0
 8010be6:	461a      	mov	r2, r3
 8010be8:	4621      	mov	r1, r4
 8010bea:	4628      	mov	r0, r5
 8010bec:	f000 f8b4 	bl	8010d58 <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8010bf0:	bf00      	nop
 8010bf2:	3708      	adds	r7, #8
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bdb0      	pop	{r4, r5, r7, pc}

08010bf8 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b082      	sub	sp, #8
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f7ff fcda 	bl	80105ba <_ZNSt9_Any_data9_M_accessEv>
 8010c06:	4603      	mov	r3, r0
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3708      	adds	r7, #8
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8010c10:	b590      	push	{r4, r7, lr}
 8010c12:	b085      	sub	sp, #20
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	60f8      	str	r0, [r7, #12]
 8010c18:	60b9      	str	r1, [r7, #8]
 8010c1a:	4613      	mov	r3, r2
 8010c1c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8010c1e:	79fb      	ldrb	r3, [r7, #7]
 8010c20:	2b03      	cmp	r3, #3
 8010c22:	d82a      	bhi.n	8010c7a <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8010c24:	a201      	add	r2, pc, #4	@ (adr r2, 8010c2c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8010c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c2a:	bf00      	nop
 8010c2c:	08010c3d 	.word	0x08010c3d
 8010c30:	08010c4b 	.word	0x08010c4b
 8010c34:	08010c5f 	.word	0x08010c5f
 8010c38:	08010c71 	.word	0x08010c71
	      __dest._M_access<const type_info*>() = nullptr;
 8010c3c:	68f8      	ldr	r0, [r7, #12]
 8010c3e:	f000 f8a2 	bl	8010d86 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8010c42:	4603      	mov	r3, r0
 8010c44:	2200      	movs	r2, #0
 8010c46:	601a      	str	r2, [r3, #0]
	      break;
 8010c48:	e017      	b.n	8010c7a <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8010c4a:	68b8      	ldr	r0, [r7, #8]
 8010c4c:	f7ff ffae 	bl	8010bac <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8010c50:	4604      	mov	r4, r0
 8010c52:	68f8      	ldr	r0, [r7, #12]
 8010c54:	f7ff ffd0 	bl	8010bf8 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	601c      	str	r4, [r3, #0]
	      break;
 8010c5c:	e00d      	b.n	8010c7a <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8010c5e:	68b8      	ldr	r0, [r7, #8]
 8010c60:	f7ff ffa4 	bl	8010bac <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8010c64:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8010c66:	4619      	mov	r1, r3
 8010c68:	68f8      	ldr	r0, [r7, #12]
 8010c6a:	f000 f898 	bl	8010d9e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8010c6e:	e004      	b.n	8010c7a <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8010c70:	4621      	mov	r1, r4
 8010c72:	68f8      	ldr	r0, [r7, #12]
 8010c74:	f000 f8a5 	bl	8010dc2 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8010c78:	bf00      	nop
	  return false;
 8010c7a:	2300      	movs	r3, #0
	}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3714      	adds	r7, #20
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd90      	pop	{r4, r7, pc}

08010c84 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8010c84:	b480      	push	{r7}
 8010c86:	b083      	sub	sp, #12
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	4618      	mov	r0, r3
 8010c90:	370c      	adds	r7, #12
 8010c92:	46bd      	mov	sp, r7
 8010c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c98:	4770      	bx	lr

08010c9a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8010c9a:	b480      	push	{r7}
 8010c9c:	b083      	sub	sp, #12
 8010c9e:	af00      	add	r7, sp, #0
 8010ca0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	370c      	adds	r7, #12
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr

08010cb0 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8010cb0:	b480      	push	{r7}
 8010cb2:	b083      	sub	sp, #12
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	4618      	mov	r0, r3
 8010cbc:	370c      	adds	r7, #12
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc4:	4770      	bx	lr

08010cc6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>:
      _Tuple_impl()
 8010cc6:	b580      	push	{r7, lr}
 8010cc8:	b082      	sub	sp, #8
 8010cca:	af00      	add	r7, sp, #0
 8010ccc:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f000 f883 	bl	8010dda <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	3708      	adds	r7, #8
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}

08010cde <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>:
      constexpr _Head_base()
 8010cde:	b480      	push	{r7}
 8010ce0:	b083      	sub	sp, #12
 8010ce2:	af00      	add	r7, sp, #0
 8010ce4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2200      	movs	r2, #0
 8010cea:	601a      	str	r2, [r3, #0]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	4618      	mov	r0, r3
 8010cf0:	370c      	adds	r7, #12
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr

08010cfa <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b082      	sub	sp, #8
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	4618      	mov	r0, r3
 8010d06:	f000 f873 	bl	8010df0 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	3708      	adds	r7, #8
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}

08010d14 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>:
      _M_access() const noexcept
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b082      	sub	sp, #8
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f7ff fc57 	bl	80105d0 <_ZNKSt9_Any_data9_M_accessEv>
 8010d22:	4603      	mov	r3, r0
 8010d24:	4618      	mov	r0, r3
 8010d26:	3708      	adds	r7, #8
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8010d2c:	b480      	push	{r7}
 8010d2e:	b083      	sub	sp, #12
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	4618      	mov	r0, r3
 8010d38:	370c      	adds	r7, #12
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr

08010d42 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010d42:	b480      	push	{r7}
 8010d44:	b083      	sub	sp, #12
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	370c      	adds	r7, #12
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr

08010d58 <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8010d58:	b590      	push	{r4, r7, lr}
 8010d5a:	b085      	sub	sp, #20
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	7338      	strb	r0, [r7, #12]
 8010d60:	60b9      	str	r1, [r7, #8]
 8010d62:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8010d64:	68b8      	ldr	r0, [r7, #8]
 8010d66:	f7ff ffec 	bl	8010d42 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8010d6a:	4604      	mov	r4, r0
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f7f1 f94f 	bl	8002010 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010d72:	4603      	mov	r3, r0
 8010d74:	781b      	ldrb	r3, [r3, #0]
 8010d76:	4619      	mov	r1, r3
 8010d78:	4620      	mov	r0, r4
 8010d7a:	f7ff fc9b 	bl	80106b4 <_ZZN12CommsHandler4initEvENKUlbE_clEb>
 8010d7e:	bf00      	nop
 8010d80:	3714      	adds	r7, #20
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd90      	pop	{r4, r7, pc}

08010d86 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8010d86:	b580      	push	{r7, lr}
 8010d88:	b082      	sub	sp, #8
 8010d8a:	af00      	add	r7, sp, #0
 8010d8c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f7ff fc13 	bl	80105ba <_ZNSt9_Any_data9_M_accessEv>
 8010d94:	4603      	mov	r3, r0
 8010d96:	4618      	mov	r0, r3
 8010d98:	3708      	adds	r7, #8
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}

08010d9e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8010d9e:	b590      	push	{r4, r7, lr}
 8010da0:	b083      	sub	sp, #12
 8010da2:	af00      	add	r7, sp, #0
 8010da4:	6078      	str	r0, [r7, #4]
 8010da6:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8010da8:	6838      	ldr	r0, [r7, #0]
 8010daa:	f000 f82d 	bl	8010e08 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8010dae:	4603      	mov	r3, r0
 8010db0:	4622      	mov	r2, r4
 8010db2:	4619      	mov	r1, r3
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f000 f832 	bl	8010e1e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8010dba:	bf00      	nop
 8010dbc:	370c      	adds	r7, #12
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd90      	pop	{r4, r7, pc}

08010dc2 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8010dc2:	b580      	push	{r7, lr}
 8010dc4:	b082      	sub	sp, #8
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	6078      	str	r0, [r7, #4]
 8010dca:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f000 f83f 	bl	8010e50 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>
	}
 8010dd2:	bf00      	nop
 8010dd4:	3708      	adds	r7, #8
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}

08010dda <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>:
      constexpr _Head_base()
 8010dda:	b480      	push	{r7}
 8010ddc:	b083      	sub	sp, #12
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	4618      	mov	r0, r3
 8010de6:	370c      	adds	r7, #12
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr

08010df0 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b082      	sub	sp, #8
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f000 f835 	bl	8010e68 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	4618      	mov	r0, r3
 8010e02:	3708      	adds	r7, #8
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010e08:	b480      	push	{r7}
 8010e0a:	b083      	sub	sp, #12
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	4618      	mov	r0, r3
 8010e14:	370c      	adds	r7, #12
 8010e16:	46bd      	mov	sp, r7
 8010e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1c:	4770      	bx	lr

08010e1e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8010e1e:	b590      	push	{r4, r7, lr}
 8010e20:	b085      	sub	sp, #20
 8010e22:	af00      	add	r7, sp, #0
 8010e24:	60f8      	str	r0, [r7, #12]
 8010e26:	60b9      	str	r1, [r7, #8]
 8010e28:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8010e2a:	68f8      	ldr	r0, [r7, #12]
 8010e2c:	f7ff fbc5 	bl	80105ba <_ZNSt9_Any_data9_M_accessEv>
 8010e30:	4603      	mov	r3, r0
 8010e32:	4619      	mov	r1, r3
 8010e34:	2004      	movs	r0, #4
 8010e36:	f7f9 fd2b 	bl	800a890 <_ZnwjPv>
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	68b8      	ldr	r0, [r7, #8]
 8010e3e:	f7ff ffe3 	bl	8010e08 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8010e42:	4603      	mov	r3, r0
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	6023      	str	r3, [r4, #0]
	  }
 8010e48:	bf00      	nop
 8010e4a:	3714      	adds	r7, #20
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd90      	pop	{r4, r7, pc}

08010e50 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f7ff fbae 	bl	80105ba <_ZNSt9_Any_data9_M_accessEv>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	4618      	mov	r0, r3
 8010e62:	3708      	adds	r7, #8
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b082      	sub	sp, #8
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	4618      	mov	r0, r3
 8010e74:	f000 f805 	bl	8010e82 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	3708      	adds	r7, #8
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}

08010e82 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8010e82:	b480      	push	{r7}
 8010e84:	b083      	sub	sp, #12
 8010e86:	af00      	add	r7, sp, #0
 8010e88:	6078      	str	r0, [r7, #4]
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	370c      	adds	r7, #12
 8010e90:	46bd      	mov	sp, r7
 8010e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e96:	4770      	bx	lr

08010e98 <_ZN6Remora9getTxDataEv>:
	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
 8010e98:	b480      	push	{r7}
 8010e9a:	b083      	sub	sp, #12
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	4b03      	ldr	r3, [pc, #12]	@ (8010eb0 <_ZN6Remora9getTxDataEv+0x18>)
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	370c      	adds	r7, #12
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eac:	4770      	bx	lr
 8010eae:	bf00      	nop
 8010eb0:	30000080 	.word	0x30000080

08010eb4 <_ZN6Remora9getRxDataEv>:
    volatile rxData_t* getRxData() { return &rxData; }
 8010eb4:	b480      	push	{r7}
 8010eb6:	b083      	sub	sp, #12
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	4b03      	ldr	r3, [pc, #12]	@ (8010ecc <_ZN6Remora9getRxDataEv+0x18>)
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	370c      	adds	r7, #12
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec8:	4770      	bx	lr
 8010eca:	bf00      	nop
 8010ecc:	300000c0 	.word	0x300000c0

08010ed0 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "digitalPin.h"

std::shared_ptr<Module> DigitalPin::create(const JsonObject& config, Remora* instance) {
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b0b0      	sub	sp, #192	@ 0xc0
 8010ed4:	af04      	add	r7, sp, #16
 8010ed6:	60f8      	str	r0, [r7, #12]
 8010ed8:	60b9      	str	r1, [r7, #8]
 8010eda:	607a      	str	r2, [r7, #4]
	const char* pin = config["Pin"];
 8010edc:	f107 0320 	add.w	r3, r7, #32
 8010ee0:	4a65      	ldr	r2, [pc, #404]	@ (8011078 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1a8>)
 8010ee2:	68b9      	ldr	r1, [r7, #8]
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7fe f997 	bl	800f218 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8010eea:	f107 0320 	add.w	r3, r7, #32
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7f6 fdbb 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	61fb      	str	r3, [r7, #28]
	const char* mode = config["Mode"];
 8010ef8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010efc:	4a5f      	ldr	r2, [pc, #380]	@ (801107c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1ac>)
 8010efe:	68b9      	ldr	r1, [r7, #8]
 8010f00:	4618      	mov	r0, r3
 8010f02:	f000 f985 	bl	8011210 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8010f06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7f6 fdad 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8010f10:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	const char* invert = config["Invert"];
 8010f14:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8010f18:	4a59      	ldr	r2, [pc, #356]	@ (8011080 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b0>)
 8010f1a:	68b9      	ldr	r1, [r7, #8]
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7f6 fd7f 	bl	8007a20 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8010f22:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7f6 fd9f 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8010f2c:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	const char* modifier = config["Modifier"];
 8010f30:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010f34:	4a53      	ldr	r2, [pc, #332]	@ (8011084 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b4>)
 8010f36:	68b9      	ldr	r1, [r7, #8]
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f000 f98e 	bl	801125a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8010f3e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7f6 fd91 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8010f48:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	int dataBit = config["Data Bit"];
 8010f4c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8010f50:	4a4d      	ldr	r2, [pc, #308]	@ (8011088 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b8>)
 8010f52:	68b9      	ldr	r1, [r7, #8]
 8010f54:	4618      	mov	r0, r3
 8010f56:	f000 f980 	bl	801125a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8010f5a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7fe f97f 	bl	800f262 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8010f64:	4603      	mov	r3, r0
 8010f66:	61bb      	str	r3, [r7, #24]

	int mod;
	bool inv;

	if (!strcmp(modifier, "Open Drain")) {
 8010f68:	4948      	ldr	r1, [pc, #288]	@ (801108c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1bc>)
 8010f6a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8010f6e:	f7ef f9b7 	bl	80002e0 <strcmp>
 8010f72:	4603      	mov	r3, r0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d102      	bne.n	8010f7e <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xae>
		mod = OPENDRAIN;
 8010f78:	2301      	movs	r3, #1
 8010f7a:	617b      	str	r3, [r7, #20]
 8010f7c:	e022      	b.n	8010fc4 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull Up")) {
 8010f7e:	4944      	ldr	r1, [pc, #272]	@ (8011090 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c0>)
 8010f80:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8010f84:	f7ef f9ac 	bl	80002e0 <strcmp>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d102      	bne.n	8010f94 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xc4>
		mod = PULLUP;
 8010f8e:	2302      	movs	r3, #2
 8010f90:	617b      	str	r3, [r7, #20]
 8010f92:	e017      	b.n	8010fc4 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull Down")) {
 8010f94:	493f      	ldr	r1, [pc, #252]	@ (8011094 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c4>)
 8010f96:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8010f9a:	f7ef f9a1 	bl	80002e0 <strcmp>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d102      	bne.n	8010faa <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xda>
		mod = PULLDOWN;
 8010fa4:	2303      	movs	r3, #3
 8010fa6:	617b      	str	r3, [r7, #20]
 8010fa8:	e00c      	b.n	8010fc4 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull None")) {
 8010faa:	493b      	ldr	r1, [pc, #236]	@ (8011098 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c8>)
 8010fac:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8010fb0:	f7ef f996 	bl	80002e0 <strcmp>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d102      	bne.n	8010fc0 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf0>
		mod = PULLNONE;
 8010fba:	2304      	movs	r3, #4
 8010fbc:	617b      	str	r3, [r7, #20]
 8010fbe:	e001      	b.n	8010fc4 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else {
		mod = NONE;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	617b      	str	r3, [r7, #20]
	}

	inv = !strcmp(invert, "True");
 8010fc4:	4935      	ldr	r1, [pc, #212]	@ (801109c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1cc>)
 8010fc6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8010fca:	f7ef f989 	bl	80002e0 <strcmp>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	bf0c      	ite	eq
 8010fd4:	2301      	moveq	r3, #1
 8010fd6:	2300      	movne	r3, #0
 8010fd8:	b2db      	uxtb	r3, r3
 8010fda:	74fb      	strb	r3, [r7, #19]

	volatile uint16_t* ptrData = (!strcmp(mode, "Output")) ? &instance->getRxData()->outputs : &instance->getTxData()->inputs;
 8010fdc:	4930      	ldr	r1, [pc, #192]	@ (80110a0 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 8010fde:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8010fe2:	f7ef f97d 	bl	80002e0 <strcmp>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d105      	bne.n	8010ff8 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x128>
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f7ff ff61 	bl	8010eb4 <_ZN6Remora9getRxDataEv>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	333d      	adds	r3, #61	@ 0x3d
 8010ff6:	e004      	b.n	8011002 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x132>
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f7ff ff4d 	bl	8010e98 <_ZN6Remora9getTxDataEv>
 8010ffe:	4603      	mov	r3, r0
 8011000:	333c      	adds	r3, #60	@ 0x3c
 8011002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	printf("Creating DigitalPin module: Mode=%s, Pin=%s\n", mode, pin);
 8011006:	69fb      	ldr	r3, [r7, #28]
 8011008:	461a      	mov	r2, r3
 801100a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 801100e:	4825      	ldr	r0, [pc, #148]	@ (80110a4 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d4>)
 8011010:	f018 f978 	bl	8029304 <iprintf>
	return std::make_unique<DigitalPin>(*ptrData, (!strcmp(mode, "Output")) ? 1 : 0, pin, dataBit, inv, mod);
 8011014:	4922      	ldr	r1, [pc, #136]	@ (80110a0 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 8011016:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 801101a:	f7ef f961 	bl	80002e0 <strcmp>
 801101e:	4603      	mov	r3, r0
 8011020:	2b00      	cmp	r3, #0
 8011022:	d101      	bne.n	8011028 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>
 8011024:	2301      	movs	r3, #1
 8011026:	e000      	b.n	801102a <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x15a>
 8011028:	2300      	movs	r3, #0
 801102a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801102e:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8011032:	f107 011c 	add.w	r1, r7, #28
 8011036:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 801103a:	f107 0314 	add.w	r3, r7, #20
 801103e:	9302      	str	r3, [sp, #8]
 8011040:	f107 0313 	add.w	r3, r7, #19
 8011044:	9301      	str	r3, [sp, #4]
 8011046:	f107 0318 	add.w	r3, r7, #24
 801104a:	9300      	str	r3, [sp, #0]
 801104c:	460b      	mov	r3, r1
 801104e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8011052:	f000 f927 	bl	80112a4 <_ZSt11make_uniqueI10DigitalPinJRVtiRPKcRiRbS6_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8011056:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801105a:	4619      	mov	r1, r3
 801105c:	68f8      	ldr	r0, [r7, #12]
 801105e:	f000 f999 	bl	8011394 <_ZNSt10shared_ptrI6ModuleEC1I10DigitalPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 8011062:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8011066:	4618      	mov	r0, r3
 8011068:	f000 f972 	bl	8011350 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev>
 801106c:	bf00      	nop
}
 801106e:	68f8      	ldr	r0, [r7, #12]
 8011070:	37b0      	adds	r7, #176	@ 0xb0
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	0802a804 	.word	0x0802a804
 801107c:	0802a808 	.word	0x0802a808
 8011080:	0802a810 	.word	0x0802a810
 8011084:	0802a818 	.word	0x0802a818
 8011088:	0802a824 	.word	0x0802a824
 801108c:	0802a830 	.word	0x0802a830
 8011090:	0802a83c 	.word	0x0802a83c
 8011094:	0802a844 	.word	0x0802a844
 8011098:	0802a850 	.word	0x0802a850
 801109c:	0802a85c 	.word	0x0802a85c
 80110a0:	0802a864 	.word	0x0802a864
 80110a4:	0802a86c 	.word	0x0802a86c

080110a8 <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>:

DigitalPin::DigitalPin(volatile uint16_t& _ptrData, int _mode, std::string _portAndPin, 
 80110a8:	b590      	push	{r4, r7, lr}
 80110aa:	b085      	sub	sp, #20
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	60f8      	str	r0, [r7, #12]
 80110b0:	60b9      	str	r1, [r7, #8]
 80110b2:	607a      	str	r2, [r7, #4]
 80110b4:	603b      	str	r3, [r7, #0]
    portAndPin(std::move(_portAndPin)),
    bitNumber(_bitNumber),
    invert(_invert),
    modifier(_modifier),
    pin(std::make_unique<Pin>(portAndPin, mode, modifier)),
    mask(1 << bitNumber)
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	4618      	mov	r0, r3
 80110ba:	f000 fe41 	bl	8011d40 <_ZN6ModuleC1Ev>
 80110be:	4a1c      	ldr	r2, [pc, #112]	@ (8011130 <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi+0x88>)
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	601a      	str	r2, [r3, #0]
    ptrData(&_ptrData),
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	68ba      	ldr	r2, [r7, #8]
 80110c8:	619a      	str	r2, [r3, #24]
    mode(_mode),
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	687a      	ldr	r2, [r7, #4]
 80110ce:	61da      	str	r2, [r3, #28]
    portAndPin(std::move(_portAndPin)),
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	f103 0420 	add.w	r4, r3, #32
 80110d6:	6838      	ldr	r0, [r7, #0]
 80110d8:	f000 f96f 	bl	80113ba <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80110dc:	4603      	mov	r3, r0
 80110de:	4619      	mov	r1, r3
 80110e0:	4620      	mov	r0, r4
 80110e2:	f017 fb41 	bl	8028768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    bitNumber(_bitNumber),
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	6a3a      	ldr	r2, [r7, #32]
 80110ea:	639a      	str	r2, [r3, #56]	@ 0x38
    invert(_invert),
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80110f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    modifier(_modifier),
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80110fa:	641a      	str	r2, [r3, #64]	@ 0x40
    pin(std::make_unique<Pin>(portAndPin, mode, modifier)),
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	f103 0120 	add.w	r1, r3, #32
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	f103 021c 	add.w	r2, r3, #28
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 8011114:	4623      	mov	r3, r4
 8011116:	f000 f95b 	bl	80113d0 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERiS8_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
    mask(1 << bitNumber)
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801111e:	2201      	movs	r2, #1
 8011120:	409a      	lsls	r2, r3
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	649a      	str	r2, [r3, #72]	@ 0x48
{
}
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	4618      	mov	r0, r3
 801112a:	3714      	adds	r7, #20
 801112c:	46bd      	mov	sp, r7
 801112e:	bd90      	pop	{r4, r7, pc}
 8011130:	0802b438 	.word	0x0802b438

08011134 <_ZN10DigitalPin6updateEv>:

void DigitalPin::update()
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b084      	sub	sp, #16
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
    bool pinState;
    if (mode == 0) {  // Input mode
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	69db      	ldr	r3, [r3, #28]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d136      	bne.n	80111b2 <_ZN10DigitalPin6updateEv+0x7e>
        pinState = pin->get();
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	3344      	adds	r3, #68	@ 0x44
 8011148:	4618      	mov	r0, r3
 801114a:	f7fe f974 	bl	800f436 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 801114e:	4603      	mov	r3, r0
 8011150:	4618      	mov	r0, r3
 8011152:	f7f3 fec1 	bl	8004ed8 <_ZNK3Pin3getEv>
 8011156:	4603      	mov	r3, r0
 8011158:	73fb      	strb	r3, [r7, #15]
        if (invert) {
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011160:	2b00      	cmp	r3, #0
 8011162:	d003      	beq.n	801116c <_ZN10DigitalPin6updateEv+0x38>
            pinState = !pinState;
 8011164:	7bfb      	ldrb	r3, [r7, #15]
 8011166:	f083 0301 	eor.w	r3, r3, #1
 801116a:	73fb      	strb	r3, [r7, #15]
        }
        if (pinState) {
 801116c:	7bfb      	ldrb	r3, [r7, #15]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d00e      	beq.n	8011190 <_ZN10DigitalPin6updateEv+0x5c>
            *ptrData |= mask;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	699b      	ldr	r3, [r3, #24]
 8011176:	881b      	ldrh	r3, [r3, #0]
 8011178:	b29b      	uxth	r3, r3
 801117a:	b21a      	sxth	r2, r3
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011180:	b21b      	sxth	r3, r3
 8011182:	4313      	orrs	r3, r2
 8011184:	b21a      	sxth	r2, r3
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	699b      	ldr	r3, [r3, #24]
 801118a:	b292      	uxth	r2, r2
 801118c:	801a      	strh	r2, [r3, #0]
        if (invert) {
            pinState = !pinState;
        }
        pin->set(pinState);
    }
}
 801118e:	e031      	b.n	80111f4 <_ZN10DigitalPin6updateEv+0xc0>
            *ptrData &= ~mask;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	699b      	ldr	r3, [r3, #24]
 8011194:	881b      	ldrh	r3, [r3, #0]
 8011196:	b29b      	uxth	r3, r3
 8011198:	b21a      	sxth	r2, r3
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801119e:	b21b      	sxth	r3, r3
 80111a0:	43db      	mvns	r3, r3
 80111a2:	b21b      	sxth	r3, r3
 80111a4:	4013      	ands	r3, r2
 80111a6:	b21a      	sxth	r2, r3
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	699b      	ldr	r3, [r3, #24]
 80111ac:	b292      	uxth	r2, r2
 80111ae:	801a      	strh	r2, [r3, #0]
}
 80111b0:	e020      	b.n	80111f4 <_ZN10DigitalPin6updateEv+0xc0>
        pinState = (*ptrData & mask) ? true : false;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	699b      	ldr	r3, [r3, #24]
 80111b6:	881b      	ldrh	r3, [r3, #0]
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	461a      	mov	r2, r3
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80111c0:	4013      	ands	r3, r2
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	bf14      	ite	ne
 80111c6:	2301      	movne	r3, #1
 80111c8:	2300      	moveq	r3, #0
 80111ca:	73fb      	strb	r3, [r7, #15]
        if (invert) {
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d003      	beq.n	80111de <_ZN10DigitalPin6updateEv+0xaa>
            pinState = !pinState;
 80111d6:	7bfb      	ldrb	r3, [r7, #15]
 80111d8:	f083 0301 	eor.w	r3, r3, #1
 80111dc:	73fb      	strb	r3, [r7, #15]
        pin->set(pinState);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	3344      	adds	r3, #68	@ 0x44
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7fe f927 	bl	800f436 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 80111e8:	4602      	mov	r2, r0
 80111ea:	7bfb      	ldrb	r3, [r7, #15]
 80111ec:	4619      	mov	r1, r3
 80111ee:	4610      	mov	r0, r2
 80111f0:	f7f3 fe88 	bl	8004f04 <_ZN3Pin3setEb>
}
 80111f4:	bf00      	nop
 80111f6:	3710      	adds	r7, #16
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}

080111fc <_ZN10DigitalPin10slowUpdateEv>:

void DigitalPin::slowUpdate()
{
 80111fc:	b480      	push	{r7}
 80111fe:	b083      	sub	sp, #12
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
    return;
 8011204:	bf00      	nop
}
 8011206:	370c      	adds	r7, #12
 8011208:	46bd      	mov	sp, r7
 801120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120e:	4770      	bx	lr

08011210 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8011210:	b580      	push	{r7, lr}
 8011212:	b08c      	sub	sp, #48	@ 0x30
 8011214:	af02      	add	r7, sp, #8
 8011216:	60f8      	str	r0, [r7, #12]
 8011218:	60b9      	str	r1, [r7, #8]
 801121a:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 801121c:	68ba      	ldr	r2, [r7, #8]
 801121e:	f107 0314 	add.w	r3, r7, #20
 8011222:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011226:	e883 0003 	stmia.w	r3, {r0, r1}
 801122a:	f107 031c 	add.w	r3, r7, #28
 801122e:	6879      	ldr	r1, [r7, #4]
 8011230:	4618      	mov	r0, r3
 8011232:	f7fb fe58 	bl	800cee6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8011236:	466a      	mov	r2, sp
 8011238:	f107 0320 	add.w	r3, r7, #32
 801123c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011240:	e882 0003 	stmia.w	r2, {r0, r1}
 8011244:	69fb      	ldr	r3, [r7, #28]
 8011246:	f107 0214 	add.w	r2, r7, #20
 801124a:	ca06      	ldmia	r2, {r1, r2}
 801124c:	68f8      	ldr	r0, [r7, #12]
 801124e:	f7f6 fd00 	bl	8007c52 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8011252:	68f8      	ldr	r0, [r7, #12]
 8011254:	3728      	adds	r7, #40	@ 0x28
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}

0801125a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 801125a:	b580      	push	{r7, lr}
 801125c:	b08c      	sub	sp, #48	@ 0x30
 801125e:	af02      	add	r7, sp, #8
 8011260:	60f8      	str	r0, [r7, #12]
 8011262:	60b9      	str	r1, [r7, #8]
 8011264:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8011266:	68ba      	ldr	r2, [r7, #8]
 8011268:	f107 0314 	add.w	r3, r7, #20
 801126c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011270:	e883 0003 	stmia.w	r3, {r0, r1}
 8011274:	f107 031c 	add.w	r3, r7, #28
 8011278:	6879      	ldr	r1, [r7, #4]
 801127a:	4618      	mov	r0, r3
 801127c:	f000 f8cf 	bl	801141e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8011280:	466a      	mov	r2, sp
 8011282:	f107 0320 	add.w	r3, r7, #32
 8011286:	e893 0003 	ldmia.w	r3, {r0, r1}
 801128a:	e882 0003 	stmia.w	r2, {r0, r1}
 801128e:	69fb      	ldr	r3, [r7, #28]
 8011290:	f107 0214 	add.w	r2, r7, #20
 8011294:	ca06      	ldmia	r2, {r1, r2}
 8011296:	68f8      	ldr	r0, [r7, #12]
 8011298:	f7f6 fcdb 	bl	8007c52 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 801129c:	68f8      	ldr	r0, [r7, #12]
 801129e:	3728      	adds	r7, #40	@ 0x28
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}

080112a4 <_ZSt11make_uniqueI10DigitalPinJRVtiRPKcRiRbS6_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80112a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112a8:	b091      	sub	sp, #68	@ 0x44
 80112aa:	af04      	add	r7, sp, #16
 80112ac:	60f8      	str	r0, [r7, #12]
 80112ae:	60b9      	str	r1, [r7, #8]
 80112b0:	607a      	str	r2, [r7, #4]
 80112b2:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80112b4:	204c      	movs	r0, #76	@ 0x4c
 80112b6:	f017 f97b 	bl	80285b0 <_Znwj>
 80112ba:	4603      	mov	r3, r0
 80112bc:	4698      	mov	r8, r3
 80112be:	68b8      	ldr	r0, [r7, #8]
 80112c0:	f000 f8c0 	bl	8011444 <_ZSt7forwardIRVtEOT_RNSt16remove_referenceIS2_E4typeE>
 80112c4:	4681      	mov	r9, r0
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f7fe f8c1 	bl	800f44e <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 80112cc:	4603      	mov	r3, r0
 80112ce:	681e      	ldr	r6, [r3, #0]
 80112d0:	6838      	ldr	r0, [r7, #0]
 80112d2:	f7fe f8fc 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80112d6:	4603      	mov	r3, r0
 80112d8:	681c      	ldr	r4, [r3, #0]
 80112da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80112de:	4618      	mov	r0, r3
 80112e0:	f017 f977 	bl	80285d2 <_ZNSaIcEC1Ev>
 80112e4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80112e8:	f107 0314 	add.w	r3, r7, #20
 80112ec:	4621      	mov	r1, r4
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7f2 fa80 	bl	80037f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80112f4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80112f6:	f7fe f8f5 	bl	800f4e4 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80112fa:	4603      	mov	r3, r0
 80112fc:	681c      	ldr	r4, [r3, #0]
 80112fe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011300:	f000 f8ab 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8011304:	4603      	mov	r3, r0
 8011306:	781d      	ldrb	r5, [r3, #0]
 8011308:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801130a:	f7fe f8eb 	bl	800f4e4 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801130e:	4603      	mov	r3, r0
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	f107 0214 	add.w	r2, r7, #20
 8011316:	9302      	str	r3, [sp, #8]
 8011318:	9501      	str	r5, [sp, #4]
 801131a:	9400      	str	r4, [sp, #0]
 801131c:	4613      	mov	r3, r2
 801131e:	4632      	mov	r2, r6
 8011320:	4649      	mov	r1, r9
 8011322:	4640      	mov	r0, r8
 8011324:	f7ff fec0 	bl	80110a8 <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8011328:	4641      	mov	r1, r8
 801132a:	68f8      	ldr	r0, [r7, #12]
 801132c:	f000 f8b0 	bl	8011490 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8011330:	f107 0314 	add.w	r3, r7, #20
 8011334:	4618      	mov	r0, r3
 8011336:	f017 fa36 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801133a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801133e:	4618      	mov	r0, r3
 8011340:	f017 f948 	bl	80285d4 <_ZNSaIcED1Ev>
 8011344:	bf00      	nop
 8011346:	68f8      	ldr	r0, [r7, #12]
 8011348:	3734      	adds	r7, #52	@ 0x34
 801134a:	46bd      	mov	sp, r7
 801134c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011350 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8011350:	b590      	push	{r4, r7, lr}
 8011352:	b085      	sub	sp, #20
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	4618      	mov	r0, r3
 801135c:	f000 f8a7 	bl	80114ae <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 8011360:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d00c      	beq.n	8011384 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f000 f8ac 	bl	80114c8 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>
 8011370:	4604      	mov	r4, r0
 8011372:	68f8      	ldr	r0, [r7, #12]
 8011374:	f000 f8b5 	bl	80114e2 <_ZSt4moveIRP10DigitalPinEONSt16remove_referenceIT_E4typeEOS4_>
 8011378:	4603      	mov	r3, r0
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	4619      	mov	r1, r3
 801137e:	4620      	mov	r0, r4
 8011380:	f000 f8e6 	bl	8011550 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>
	__ptr = pointer();
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	2200      	movs	r2, #0
 8011388:	601a      	str	r2, [r3, #0]
      }
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	4618      	mov	r0, r3
 801138e:	3714      	adds	r7, #20
 8011390:	46bd      	mov	sp, r7
 8011392:	bd90      	pop	{r4, r7, pc}

08011394 <_ZNSt10shared_ptrI6ModuleEC1I10DigitalPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 8011394:	b590      	push	{r4, r7, lr}
 8011396:	b083      	sub	sp, #12
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
 801139c:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 801139e:	687c      	ldr	r4, [r7, #4]
 80113a0:	6838      	ldr	r0, [r7, #0]
 80113a2:	f000 f8e6 	bl	8011572 <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80113a6:	4603      	mov	r3, r0
 80113a8:	4619      	mov	r1, r3
 80113aa:	4620      	mov	r0, r4
 80113ac:	f000 f8ec 	bl	8011588 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	4618      	mov	r0, r3
 80113b4:	370c      	adds	r7, #12
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd90      	pop	{r4, r7, pc}

080113ba <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80113ba:	b480      	push	{r7}
 80113bc:	b083      	sub	sp, #12
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	4618      	mov	r0, r3
 80113c6:	370c      	adds	r7, #12
 80113c8:	46bd      	mov	sp, r7
 80113ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ce:	4770      	bx	lr

080113d0 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERiS8_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80113d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113d2:	b085      	sub	sp, #20
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	60f8      	str	r0, [r7, #12]
 80113d8:	60b9      	str	r1, [r7, #8]
 80113da:	607a      	str	r2, [r7, #4]
 80113dc:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80113de:	2040      	movs	r0, #64	@ 0x40
 80113e0:	f017 f8e6 	bl	80285b0 <_Znwj>
 80113e4:	4603      	mov	r3, r0
 80113e6:	461d      	mov	r5, r3
 80113e8:	68b8      	ldr	r0, [r7, #8]
 80113ea:	f7fe f947 	bl	800f67c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80113ee:	4606      	mov	r6, r0
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	f7fe f877 	bl	800f4e4 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80113f6:	4603      	mov	r3, r0
 80113f8:	681c      	ldr	r4, [r3, #0]
 80113fa:	6838      	ldr	r0, [r7, #0]
 80113fc:	f7fe f872 	bl	800f4e4 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8011400:	4603      	mov	r3, r0
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	4622      	mov	r2, r4
 8011406:	4631      	mov	r1, r6
 8011408:	4628      	mov	r0, r5
 801140a:	f7f3 fbf9 	bl	8004c00 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
 801140e:	4629      	mov	r1, r5
 8011410:	68f8      	ldr	r0, [r7, #12]
 8011412:	f7fe f94e 	bl	800f6b2 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8011416:	68f8      	ldr	r0, [r7, #12]
 8011418:	3714      	adds	r7, #20
 801141a:	46bd      	mov	sp, r7
 801141c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801141e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 801141e:	b580      	push	{r7, lr}
 8011420:	b082      	sub	sp, #8
 8011422:	af00      	add	r7, sp, #0
 8011424:	6078      	str	r0, [r7, #4]
 8011426:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8011428:	6838      	ldr	r0, [r7, #0]
 801142a:	f000 f8e5 	bl	80115f8 <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 801142e:	4602      	mov	r2, r0
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	4611      	mov	r1, r2
 8011434:	4618      	mov	r0, r3
 8011436:	f000 f8ea 	bl	801160e <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>
 801143a:	bf00      	nop
}
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	3708      	adds	r7, #8
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}

08011444 <_ZSt7forwardIRVtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011444:	b480      	push	{r7}
 8011446:	b083      	sub	sp, #12
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	4618      	mov	r0, r3
 8011450:	370c      	adds	r7, #12
 8011452:	46bd      	mov	sp, r7
 8011454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011458:	4770      	bx	lr

0801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801145a:	b480      	push	{r7}
 801145c:	b083      	sub	sp, #12
 801145e:	af00      	add	r7, sp, #0
 8011460:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	4618      	mov	r0, r3
 8011466:	370c      	adds	r7, #12
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr

08011470 <_ZNSt15__uniq_ptr_dataI10DigitalPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8011470:	b580      	push	{r7, lr}
 8011472:	b082      	sub	sp, #8
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	6039      	str	r1, [r7, #0]
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	683a      	ldr	r2, [r7, #0]
 801147e:	4611      	mov	r1, r2
 8011480:	4618      	mov	r0, r3
 8011482:	f000 f8d3 	bl	801162c <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EEC1EPS0_>
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	4618      	mov	r0, r3
 801148a:	3708      	adds	r7, #8
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}

08011490 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8011490:	b580      	push	{r7, lr}
 8011492:	b082      	sub	sp, #8
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
 8011498:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6839      	ldr	r1, [r7, #0]
 801149e:	4618      	mov	r0, r3
 80114a0:	f7ff ffe6 	bl	8011470 <_ZNSt15__uniq_ptr_dataI10DigitalPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	4618      	mov	r0, r3
 80114a8:	3708      	adds	r7, #8
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}

080114ae <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80114ae:	b580      	push	{r7, lr}
 80114b0:	b082      	sub	sp, #8
 80114b2:	af00      	add	r7, sp, #0
 80114b4:	6078      	str	r0, [r7, #4]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	4618      	mov	r0, r3
 80114ba:	f000 f8cb 	bl	8011654 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80114be:	4603      	mov	r3, r0
 80114c0:	4618      	mov	r0, r3
 80114c2:	3708      	adds	r7, #8
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}

080114c8 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	4618      	mov	r0, r3
 80114d4:	f000 f8cb 	bl	801166e <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE10_M_deleterEv>
 80114d8:	4603      	mov	r3, r0
 80114da:	4618      	mov	r0, r3
 80114dc:	3708      	adds	r7, #8
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}

080114e2 <_ZSt4moveIRP10DigitalPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80114e2:	b480      	push	{r7}
 80114e4:	b083      	sub	sp, #12
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	4618      	mov	r0, r3
 80114ee:	370c      	adds	r7, #12
 80114f0:	46bd      	mov	sp, r7
 80114f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f6:	4770      	bx	lr

080114f8 <_ZN10DigitalPinD1Ev>:
 * @brief Digital I/O pin control module.
 * 
 * The DigitalPin class manages digital input and output operations, allowing
 * interaction with external devices via GPIO.
 */
class DigitalPin : public Module
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	4a0a      	ldr	r2, [pc, #40]	@ (801152c <_ZN10DigitalPinD1Ev+0x34>)
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	601a      	str	r2, [r3, #0]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	3344      	adds	r3, #68	@ 0x44
 801150a:	4618      	mov	r0, r3
 801150c:	f7fd ff71 	bl	800f3f2 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	3320      	adds	r3, #32
 8011514:	4618      	mov	r0, r3
 8011516:	f017 f946 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	4618      	mov	r0, r3
 801151e:	f000 fc2b 	bl	8011d78 <_ZN6ModuleD1Ev>
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	4618      	mov	r0, r3
 8011526:	3708      	adds	r7, #8
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}
 801152c:	0802b438 	.word	0x0802b438

08011530 <_ZN10DigitalPinD0Ev>:
 8011530:	b580      	push	{r7, lr}
 8011532:	b082      	sub	sp, #8
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f7ff ffdd 	bl	80114f8 <_ZN10DigitalPinD1Ev>
 801153e:	214c      	movs	r1, #76	@ 0x4c
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f017 f824 	bl	802858e <_ZdlPvj>
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	4618      	mov	r0, r3
 801154a:	3708      	adds	r7, #8
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}

08011550 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 8011550:	b580      	push	{r7, lr}
 8011552:	b082      	sub	sp, #8
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
 8011558:	6039      	str	r1, [r7, #0]
	delete __ptr;
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d004      	beq.n	801156a <_ZNKSt14default_deleteI10DigitalPinEclEPS0_+0x1a>
 8011560:	681a      	ldr	r2, [r3, #0]
 8011562:	3204      	adds	r2, #4
 8011564:	6812      	ldr	r2, [r2, #0]
 8011566:	4618      	mov	r0, r3
 8011568:	4790      	blx	r2
      }
 801156a:	bf00      	nop
 801156c:	3708      	adds	r7, #8
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}

08011572 <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8011572:	b480      	push	{r7}
 8011574:	b083      	sub	sp, #12
 8011576:	af00      	add	r7, sp, #0
 8011578:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	4618      	mov	r0, r3
 801157e:	370c      	adds	r7, #12
 8011580:	46bd      	mov	sp, r7
 8011582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011586:	4770      	bx	lr

08011588 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 8011588:	b580      	push	{r7, lr}
 801158a:	b084      	sub	sp, #16
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
 8011590:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 8011592:	6838      	ldr	r0, [r7, #0]
 8011594:	f000 f878 	bl	8011688 <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 8011598:	4602      	mov	r2, r0
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	601a      	str	r2, [r3, #0]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	3304      	adds	r3, #4
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fb fda8 	bl	800d0f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 80115a8:	6838      	ldr	r0, [r7, #0]
 80115aa:	f000 f86d 	bl	8011688 <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 80115ae:	4603      	mov	r3, r0
 80115b0:	4618      	mov	r0, r3
 80115b2:	f000 f876 	bl	80116a2 <_ZSt12__to_addressI10DigitalPinEPT_S2_>
 80115b6:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 80115b8:	6838      	ldr	r0, [r7, #0]
 80115ba:	f7ff ffda 	bl	8011572 <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80115be:	4602      	mov	r2, r0
 80115c0:	f107 0308 	add.w	r3, r7, #8
 80115c4:	4611      	mov	r1, r2
 80115c6:	4618      	mov	r0, r3
 80115c8:	f000 f876 	bl	80116b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	3304      	adds	r3, #4
 80115d0:	f107 0208 	add.w	r2, r7, #8
 80115d4:	4611      	mov	r1, r2
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7fe f98c 	bl	800f8f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 80115dc:	f107 0308 	add.w	r3, r7, #8
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7fa fb8c 	bl	800bcfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 80115e6:	68f9      	ldr	r1, [r7, #12]
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f000 f8a7 	bl	801173c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI10DigitalPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	4618      	mov	r0, r3
 80115f2:	3710      	adds	r7, #16
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}

080115f8 <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80115f8:	b480      	push	{r7}
 80115fa:	b083      	sub	sp, #12
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8011600:	687b      	ldr	r3, [r7, #4]
}
 8011602:	4618      	mov	r0, r3
 8011604:	370c      	adds	r7, #12
 8011606:	46bd      	mov	sp, r7
 8011608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160c:	4770      	bx	lr

0801160e <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 801160e:	b580      	push	{r7, lr}
 8011610:	b082      	sub	sp, #8
 8011612:	af00      	add	r7, sp, #0
 8011614:	6078      	str	r0, [r7, #4]
 8011616:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8011618:	2301      	movs	r3, #1
 801161a:	2208      	movs	r2, #8
 801161c:	6839      	ldr	r1, [r7, #0]
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f7f3 fe58 	bl	80052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	3708      	adds	r7, #8
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 801162c:	b590      	push	{r4, r7, lr}
 801162e:	b083      	sub	sp, #12
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	6039      	str	r1, [r7, #0]
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	4618      	mov	r0, r3
 801163a:	f000 f88a 	bl	8011752 <_ZNSt5tupleIJP10DigitalPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 801163e:	683c      	ldr	r4, [r7, #0]
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f7ff ff34 	bl	80114ae <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 8011646:	4603      	mov	r3, r0
 8011648:	601c      	str	r4, [r3, #0]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	4618      	mov	r0, r3
 801164e:	370c      	adds	r7, #12
 8011650:	46bd      	mov	sp, r7
 8011652:	bd90      	pop	{r4, r7, pc}

08011654 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8011654:	b580      	push	{r7, lr}
 8011656:	b082      	sub	sp, #8
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	4618      	mov	r0, r3
 8011660:	f000 f884 	bl	801176c <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011664:	4603      	mov	r3, r0
 8011666:	4618      	mov	r0, r3
 8011668:	3708      	adds	r7, #8
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}

0801166e <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 801166e:	b580      	push	{r7, lr}
 8011670:	b082      	sub	sp, #8
 8011672:	af00      	add	r7, sp, #0
 8011674:	6078      	str	r0, [r7, #4]
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	4618      	mov	r0, r3
 801167a:	f000 f883 	bl	8011784 <_ZSt3getILj1EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801167e:	4603      	mov	r3, r0
 8011680:	4618      	mov	r0, r3
 8011682:	3708      	adds	r7, #8
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}

08011688 <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8011688:	b580      	push	{r7, lr}
 801168a:	b082      	sub	sp, #8
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	4618      	mov	r0, r3
 8011694:	f000 f882 	bl	801179c <_ZNKSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 8011698:	4603      	mov	r3, r0
 801169a:	4618      	mov	r0, r3
 801169c:	3708      	adds	r7, #8
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}

080116a2 <_ZSt12__to_addressI10DigitalPinEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 80116a2:	b480      	push	{r7}
 80116a4:	b083      	sub	sp, #12
 80116a6:	af00      	add	r7, sp, #0
 80116a8:	6078      	str	r0, [r7, #4]
      return __ptr;
 80116aa:	687b      	ldr	r3, [r7, #4]
    }
 80116ac:	4618      	mov	r0, r3
 80116ae:	370c      	adds	r7, #12
 80116b0:	46bd      	mov	sp, r7
 80116b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b6:	4770      	bx	lr

080116b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b086      	sub	sp, #24
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	6039      	str	r1, [r7, #0]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2200      	movs	r2, #0
 80116c6:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 80116c8:	6838      	ldr	r0, [r7, #0]
 80116ca:	f7ff ffdd 	bl	8011688 <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 80116ce:	4603      	mov	r3, r0
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	bf0c      	ite	eq
 80116d4:	2301      	moveq	r3, #1
 80116d6:	2300      	movne	r3, #0
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d128      	bne.n	8011730 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 80116de:	f107 030c 	add.w	r3, r7, #12
 80116e2:	4618      	mov	r0, r3
 80116e4:	f000 f868 	bl	80117b8 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 80116e8:	f107 030c 	add.w	r3, r7, #12
 80116ec:	2101      	movs	r1, #1
 80116ee:	4618      	mov	r0, r3
 80116f0:	f000 f87a 	bl	80117e8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 80116f4:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 80116f6:	6838      	ldr	r0, [r7, #0]
 80116f8:	f000 f885 	bl	8011806 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE7releaseEv>
 80116fc:	4603      	mov	r3, r0
 80116fe:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 8011700:	6838      	ldr	r0, [r7, #0]
 8011702:	f7ff fee1 	bl	80114c8 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>
 8011706:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 8011708:	4618      	mov	r0, r3
 801170a:	f000 f889 	bl	8011820 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 801170e:	4603      	mov	r3, r0
 8011710:	f107 0210 	add.w	r2, r7, #16
 8011714:	f107 000c 	add.w	r0, r7, #12
 8011718:	6979      	ldr	r1, [r7, #20]
 801171a:	f000 f88c 	bl	8011836 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	697a      	ldr	r2, [r7, #20]
 8011722:	601a      	str	r2, [r3, #0]
	}
 8011724:	f107 030c 	add.w	r3, r7, #12
 8011728:	4618      	mov	r0, r3
 801172a:	f000 f851 	bl	80117d0 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801172e:	e000      	b.n	8011732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 8011730:	bf00      	nop
	}
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	4618      	mov	r0, r3
 8011736:	3718      	adds	r7, #24
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI10DigitalPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
	{ }
 8011746:	bf00      	nop
 8011748:	370c      	adds	r7, #12
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr

08011752 <_ZNSt5tupleIJP10DigitalPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8011752:	b580      	push	{r7, lr}
 8011754:	b082      	sub	sp, #8
 8011756:	af00      	add	r7, sp, #0
 8011758:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	4618      	mov	r0, r3
 801175e:	f000 f882 	bl	8011866 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEEC1Ev>
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	4618      	mov	r0, r3
 8011766:	3708      	adds	r7, #8
 8011768:	46bd      	mov	sp, r7
 801176a:	bd80      	pop	{r7, pc}

0801176c <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801176c:	b580      	push	{r7, lr}
 801176e:	b082      	sub	sp, #8
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f000 f886 	bl	8011886 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERS4_>
 801177a:	4603      	mov	r3, r0
 801177c:	4618      	mov	r0, r3
 801177e:	3708      	adds	r7, #8
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}

08011784 <_ZSt3getILj1EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	f000 f887 	bl	80118a0 <_ZSt12__get_helperILj1ESt14default_deleteI10DigitalPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8011792:	4603      	mov	r3, r0
 8011794:	4618      	mov	r0, r3
 8011796:	3708      	adds	r7, #8
 8011798:	46bd      	mov	sp, r7
 801179a:	bd80      	pop	{r7, pc}

0801179c <_ZNKSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	4618      	mov	r0, r3
 80117a8:	f000 f886 	bl	80118b8 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80117ac:	4603      	mov	r3, r0
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	4618      	mov	r0, r3
 80117b2:	3708      	adds	r7, #8
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}

080117b8 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	f000 f886 	bl	80118d2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	4618      	mov	r0, r3
 80117ca:	3708      	adds	r7, #8
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}

080117d0 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b082      	sub	sp, #8
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f000 f885 	bl	80118e8 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	4618      	mov	r0, r3
 80117e2:	3708      	adds	r7, #8
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}

080117e8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80117f2:	2200      	movs	r2, #0
 80117f4:	6839      	ldr	r1, [r7, #0]
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f000 f881 	bl	80118fe <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 80117fc:	4603      	mov	r3, r0
 80117fe:	4618      	mov	r0, r3
 8011800:	3708      	adds	r7, #8
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}

08011806 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8011806:	b580      	push	{r7, lr}
 8011808:	b082      	sub	sp, #8
 801180a:	af00      	add	r7, sp, #0
 801180c:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	4618      	mov	r0, r3
 8011812:	f000 f89e 	bl	8011952 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE7releaseEv>
 8011816:	4603      	mov	r3, r0
 8011818:	4618      	mov	r0, r3
 801181a:	3708      	adds	r7, #8
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}

08011820 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011820:	b480      	push	{r7}
 8011822:	b083      	sub	sp, #12
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	4618      	mov	r0, r3
 801182c:	370c      	adds	r7, #12
 801182e:	46bd      	mov	sp, r7
 8011830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011834:	4770      	bx	lr

08011836 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8011836:	b590      	push	{r4, r7, lr}
 8011838:	b085      	sub	sp, #20
 801183a:	af00      	add	r7, sp, #0
 801183c:	60f8      	str	r0, [r7, #12]
 801183e:	60b9      	str	r1, [r7, #8]
 8011840:	607a      	str	r2, [r7, #4]
 8011842:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f000 f899 	bl	801197c <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>
 801184a:	4604      	mov	r4, r0
 801184c:	6838      	ldr	r0, [r7, #0]
 801184e:	f7ff ffe7 	bl	8011820 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8011852:	4603      	mov	r3, r0
 8011854:	4622      	mov	r2, r4
 8011856:	68b9      	ldr	r1, [r7, #8]
 8011858:	68f8      	ldr	r0, [r7, #12]
 801185a:	f000 f89a 	bl	8011992 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 801185e:	bf00      	nop
 8011860:	3714      	adds	r7, #20
 8011862:	46bd      	mov	sp, r7
 8011864:	bd90      	pop	{r4, r7, pc}

08011866 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8011866:	b580      	push	{r7, lr}
 8011868:	b082      	sub	sp, #8
 801186a:	af00      	add	r7, sp, #0
 801186c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f000 f8ad 	bl	80119ce <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEEC1Ev>
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	4618      	mov	r0, r3
 8011878:	f000 f8b5 	bl	80119e6 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EEC1Ev>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	4618      	mov	r0, r3
 8011880:	3708      	adds	r7, #8
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}

08011886 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011886:	b580      	push	{r7, lr}
 8011888:	b082      	sub	sp, #8
 801188a:	af00      	add	r7, sp, #0
 801188c:	6078      	str	r0, [r7, #4]
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	4618      	mov	r0, r3
 8011892:	f000 f8b6 	bl	8011a02 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERS2_>
 8011896:	4603      	mov	r3, r0
 8011898:	4618      	mov	r0, r3
 801189a:	3708      	adds	r7, #8
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}

080118a0 <_ZSt12__get_helperILj1ESt14default_deleteI10DigitalPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b082      	sub	sp, #8
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f000 f8b5 	bl	8011a18 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEE7_M_headERS3_>
 80118ae:	4603      	mov	r3, r0
 80118b0:	4618      	mov	r0, r3
 80118b2:	3708      	adds	r7, #8
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b082      	sub	sp, #8
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	4618      	mov	r0, r3
 80118c4:	f000 f8b4 	bl	8011a30 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80118c8:	4603      	mov	r3, r0
 80118ca:	4618      	mov	r0, r3
 80118cc:	3708      	adds	r7, #8
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}

080118d2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80118d2:	b480      	push	{r7}
 80118d4:	b083      	sub	sp, #12
 80118d6:	af00      	add	r7, sp, #0
 80118d8:	6078      	str	r0, [r7, #4]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	4618      	mov	r0, r3
 80118de:	370c      	adds	r7, #12
 80118e0:	46bd      	mov	sp, r7
 80118e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e6:	4770      	bx	lr

080118e8 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80118e8:	b480      	push	{r7}
 80118ea:	b083      	sub	sp, #12
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	4618      	mov	r0, r3
 80118f4:	370c      	adds	r7, #12
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr

080118fe <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80118fe:	b580      	push	{r7, lr}
 8011900:	b084      	sub	sp, #16
 8011902:	af00      	add	r7, sp, #0
 8011904:	60f8      	str	r0, [r7, #12]
 8011906:	60b9      	str	r1, [r7, #8]
 8011908:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801190a:	68f8      	ldr	r0, [r7, #12]
 801190c:	f000 f89c 	bl	8011a48 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 8011910:	4602      	mov	r2, r0
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	4293      	cmp	r3, r2
 8011916:	bf8c      	ite	hi
 8011918:	2301      	movhi	r3, #1
 801191a:	2300      	movls	r3, #0
 801191c:	b2db      	uxtb	r3, r3
 801191e:	2b00      	cmp	r3, #0
 8011920:	bf14      	ite	ne
 8011922:	2301      	movne	r3, #1
 8011924:	2300      	moveq	r3, #0
 8011926:	b2db      	uxtb	r3, r3
 8011928:	2b00      	cmp	r3, #0
 801192a:	d007      	beq.n	801193c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011932:	d301      	bcc.n	8011938 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8011934:	f016 fe52 	bl	80285dc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8011938:	f016 fe4d 	bl	80285d6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801193c:	68bb      	ldr	r3, [r7, #8]
 801193e:	011b      	lsls	r3, r3, #4
 8011940:	4618      	mov	r0, r3
 8011942:	f016 fe35 	bl	80285b0 <_Znwj>
 8011946:	4603      	mov	r3, r0
 8011948:	bf00      	nop
      }
 801194a:	4618      	mov	r0, r3
 801194c:	3710      	adds	r7, #16
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}

08011952 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8011952:	b580      	push	{r7, lr}
 8011954:	b084      	sub	sp, #16
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f7ff fda7 	bl	80114ae <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 8011960:	4603      	mov	r3, r0
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f7ff fda1 	bl	80114ae <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 801196c:	4603      	mov	r3, r0
 801196e:	2200      	movs	r2, #0
 8011970:	601a      	str	r2, [r3, #0]
	return __p;
 8011972:	68fb      	ldr	r3, [r7, #12]
      }
 8011974:	4618      	mov	r0, r3
 8011976:	3710      	adds	r7, #16
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}

0801197c <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801197c:	b480      	push	{r7}
 801197e:	b083      	sub	sp, #12
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	4618      	mov	r0, r3
 8011988:	370c      	adds	r7, #12
 801198a:	46bd      	mov	sp, r7
 801198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011990:	4770      	bx	lr

08011992 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8011992:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011994:	b085      	sub	sp, #20
 8011996:	af00      	add	r7, sp, #0
 8011998:	60f8      	str	r0, [r7, #12]
 801199a:	60b9      	str	r1, [r7, #8]
 801199c:	607a      	str	r2, [r7, #4]
 801199e:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	4619      	mov	r1, r3
 80119a4:	2010      	movs	r0, #16
 80119a6:	f7f8 ff73 	bl	800a890 <_ZnwjPv>
 80119aa:	4605      	mov	r5, r0
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f7ff ffe5 	bl	801197c <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>
 80119b2:	4603      	mov	r3, r0
 80119b4:	681c      	ldr	r4, [r3, #0]
 80119b6:	6838      	ldr	r0, [r7, #0]
 80119b8:	f7ff ff32 	bl	8011820 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 80119bc:	4632      	mov	r2, r6
 80119be:	4621      	mov	r1, r4
 80119c0:	4628      	mov	r0, r5
 80119c2:	f000 f84d 	bl	8011a60 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 80119c6:	bf00      	nop
 80119c8:	3714      	adds	r7, #20
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080119ce <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEEC1Ev>:
      _Tuple_impl()
 80119ce:	b580      	push	{r7, lr}
 80119d0:	b082      	sub	sp, #8
 80119d2:	af00      	add	r7, sp, #0
 80119d4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80119d6:	6878      	ldr	r0, [r7, #4]
 80119d8:	f000 f864 	bl	8011aa4 <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EEC1Ev>
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	4618      	mov	r0, r3
 80119e0:	3708      	adds	r7, #8
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}

080119e6 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EEC1Ev>:
      constexpr _Head_base()
 80119e6:	b480      	push	{r7}
 80119e8:	b083      	sub	sp, #12
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2200      	movs	r2, #0
 80119f2:	601a      	str	r2, [r3, #0]
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	4618      	mov	r0, r3
 80119f8:	370c      	adds	r7, #12
 80119fa:	46bd      	mov	sp, r7
 80119fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a00:	4770      	bx	lr

08011a02 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8011a02:	b480      	push	{r7}
 8011a04:	b083      	sub	sp, #12
 8011a06:	af00      	add	r7, sp, #0
 8011a08:	6078      	str	r0, [r7, #4]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	370c      	adds	r7, #12
 8011a10:	46bd      	mov	sp, r7
 8011a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a16:	4770      	bx	lr

08011a18 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f000 f84a 	bl	8011aba <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EE7_M_headERS3_>
 8011a26:	4603      	mov	r3, r0
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3708      	adds	r7, #8
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b082      	sub	sp, #8
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f000 f849 	bl	8011ad0 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	4618      	mov	r0, r3
 8011a42:	3708      	adds	r7, #8
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8011a48:	b480      	push	{r7}
 8011a4a:	b083      	sub	sp, #12
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8011a50:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 8011a54:	4618      	mov	r0, r3
 8011a56:	370c      	adds	r7, #12
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5e:	4770      	bx	lr

08011a60 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8011a60:	b5b0      	push	{r4, r5, r7, lr}
 8011a62:	b086      	sub	sp, #24
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	60f8      	str	r0, [r7, #12]
 8011a68:	60b9      	str	r1, [r7, #8]
 8011a6a:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7fc fbb6 	bl	800e1e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8011a74:	4a0a      	ldr	r2, [pc, #40]	@ (8011aa0 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	601a      	str	r2, [r3, #0]
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	f103 040c 	add.w	r4, r3, #12
 8011a80:	1d3b      	adds	r3, r7, #4
 8011a82:	4618      	mov	r0, r3
 8011a84:	f000 f831 	bl	8011aea <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8011a88:	f107 0314 	add.w	r3, r7, #20
 8011a8c:	462a      	mov	r2, r5
 8011a8e:	68b9      	ldr	r1, [r7, #8]
 8011a90:	4620      	mov	r0, r4
 8011a92:	f000 f835 	bl	8011b00 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3718      	adds	r7, #24
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8011aa0:	0802b41c 	.word	0x0802b41c

08011aa4 <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EEC1Ev>:
      constexpr _Head_base()
 8011aa4:	b480      	push	{r7}
 8011aa6:	b083      	sub	sp, #12
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	4618      	mov	r0, r3
 8011ab0:	370c      	adds	r7, #12
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab8:	4770      	bx	lr

08011aba <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8011aba:	b480      	push	{r7}
 8011abc:	b083      	sub	sp, #12
 8011abe:	af00      	add	r7, sp, #0
 8011ac0:	6078      	str	r0, [r7, #4]
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	370c      	adds	r7, #12
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ace:	4770      	bx	lr

08011ad0 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b082      	sub	sp, #8
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	4618      	mov	r0, r3
 8011adc:	f000 f82c 	bl	8011b38 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERKS2_>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	3708      	adds	r7, #8
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd80      	pop	{r7, pc}

08011aea <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8011aea:	b480      	push	{r7}
 8011aec:	b083      	sub	sp, #12
 8011aee:	af00      	add	r7, sp, #0
 8011af0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	4618      	mov	r0, r3
 8011af6:	370c      	adds	r7, #12
 8011af8:	46bd      	mov	sp, r7
 8011afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afe:	4770      	bx	lr

08011b00 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b084      	sub	sp, #16
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	60f8      	str	r0, [r7, #12]
 8011b08:	60b9      	str	r1, [r7, #8]
 8011b0a:	713a      	strb	r2, [r7, #4]
 8011b0c:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 8011b0e:	1d3b      	adds	r3, r7, #4
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7ff ffea 	bl	8011aea <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8011b16:	4603      	mov	r3, r0
 8011b18:	4619      	mov	r1, r3
 8011b1a:	68f8      	ldr	r0, [r7, #12]
 8011b1c:	f000 f817 	bl	8011b4e <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EEC1EOS2_>
 8011b20:	6839      	ldr	r1, [r7, #0]
 8011b22:	68f8      	ldr	r0, [r7, #12]
 8011b24:	f7fe fc46 	bl	80103b4 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	68ba      	ldr	r2, [r7, #8]
 8011b2c:	601a      	str	r2, [r3, #0]
	{ }
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	4618      	mov	r0, r3
 8011b32:	3710      	adds	r7, #16
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8011b38:	b480      	push	{r7}
 8011b3a:	b083      	sub	sp, #12
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	4618      	mov	r0, r3
 8011b44:	370c      	adds	r7, #12
 8011b46:	46bd      	mov	sp, r7
 8011b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4c:	4770      	bx	lr

08011b4e <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8011b4e:	b580      	push	{r7, lr}
 8011b50:	b082      	sub	sp, #8
 8011b52:	af00      	add	r7, sp, #0
 8011b54:	6078      	str	r0, [r7, #4]
 8011b56:	6039      	str	r1, [r7, #0]
 8011b58:	6838      	ldr	r0, [r7, #0]
 8011b5a:	f7ff ffc6 	bl	8011aea <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	4618      	mov	r0, r3
 8011b62:	3708      	adds	r7, #8
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	4a05      	ldr	r2, [pc, #20]	@ (8011b88 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	601a      	str	r2, [r3, #0]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f7fa fcf3 	bl	800c564 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	4618      	mov	r0, r3
 8011b82:	3708      	adds	r7, #8
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}
 8011b88:	0802b41c 	.word	0x0802b41c

08011b8c <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f7ff ffe7 	bl	8011b68 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011b9a:	2110      	movs	r1, #16
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f016 fcf6 	bl	802858e <_ZdlPvj>
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3708      	adds	r7, #8
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}

08011bac <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	330c      	adds	r3, #12
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f000 f83f 	bl	8011c3c <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8011bbe:	4602      	mov	r2, r0
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	68db      	ldr	r3, [r3, #12]
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	4610      	mov	r0, r2
 8011bc8:	f7ff fcc2 	bl	8011550 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>
 8011bcc:	bf00      	nop
 8011bce:	3708      	adds	r7, #8
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}

08011bd4 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b086      	sub	sp, #24
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	330c      	adds	r3, #12
 8011be0:	4618      	mov	r0, r3
 8011be2:	f000 f837 	bl	8011c54 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8011be6:	4602      	mov	r2, r0
 8011be8:	f107 0314 	add.w	r3, r7, #20
 8011bec:	4611      	mov	r1, r2
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f000 f83c 	bl	8011c6c <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8011bf4:	f107 0114 	add.w	r1, r7, #20
 8011bf8:	f107 030c 	add.w	r3, r7, #12
 8011bfc:	687a      	ldr	r2, [r7, #4]
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f000 f841 	bl	8011c86 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f7ff ffaf 	bl	8011b68 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8011c0a:	f107 030c 	add.w	r3, r7, #12
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f000 f84d 	bl	8011cae <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8011c14:	f107 0314 	add.w	r3, r7, #20
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7ff fdd9 	bl	80117d0 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8011c1e:	3718      	adds	r7, #24
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 8011c24:	b480      	push	{r7}
 8011c26:	b083      	sub	sp, #12
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
        return nullptr;
 8011c2e:	2300      	movs	r3, #0
      }
 8011c30:	4618      	mov	r0, r3
 8011c32:	370c      	adds	r7, #12
 8011c34:	46bd      	mov	sp, r7
 8011c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3a:	4770      	bx	lr

08011c3c <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b082      	sub	sp, #8
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f000 f847 	bl	8011cd8 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EE6_S_getERS3_>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3708      	adds	r7, #8
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	6878      	ldr	r0, [r7, #4]
 8011c5e:	f7fe fc78 	bl	8010552 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8011c62:	4603      	mov	r3, r0
 8011c64:	4618      	mov	r0, r3
 8011c66:	3708      	adds	r7, #8
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b082      	sub	sp, #8
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	6039      	str	r1, [r7, #0]
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f7ff fe2b 	bl	80118d2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3708      	adds	r7, #8
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}

08011c86 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8011c86:	b580      	push	{r7, lr}
 8011c88:	b084      	sub	sp, #16
 8011c8a:	af00      	add	r7, sp, #0
 8011c8c:	60f8      	str	r0, [r7, #12]
 8011c8e:	60b9      	str	r1, [r7, #8]
 8011c90:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8011c92:	68b8      	ldr	r0, [r7, #8]
 8011c94:	f000 f82b 	bl	8011cee <_ZSt11__addressofISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8011c98:	4602      	mov	r2, r0
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	601a      	str	r2, [r3, #0]
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	687a      	ldr	r2, [r7, #4]
 8011ca2:	605a      	str	r2, [r3, #4]
      { }
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3710      	adds	r7, #16
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}

08011cae <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8011cae:	b580      	push	{r7, lr}
 8011cb0:	b082      	sub	sp, #8
 8011cb2:	af00      	add	r7, sp, #0
 8011cb4:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d007      	beq.n	8011cce <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6818      	ldr	r0, [r3, #0]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	685b      	ldr	r3, [r3, #4]
 8011cc6:	2201      	movs	r2, #1
 8011cc8:	4619      	mov	r1, r3
 8011cca:	f000 f81b 	bl	8011d04 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3708      	adds	r7, #8
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}

08011cd8 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8011cd8:	b480      	push	{r7}
 8011cda:	b083      	sub	sp, #12
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	370c      	adds	r7, #12
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cec:	4770      	bx	lr

08011cee <_ZSt11__addressofISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8011cee:	b480      	push	{r7}
 8011cf0:	b083      	sub	sp, #12
 8011cf2:	af00      	add	r7, sp, #0
 8011cf4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	370c      	adds	r7, #12
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr

08011d04 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b084      	sub	sp, #16
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	60b9      	str	r1, [r7, #8]
 8011d0e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8011d10:	687a      	ldr	r2, [r7, #4]
 8011d12:	68b9      	ldr	r1, [r7, #8]
 8011d14:	68f8      	ldr	r0, [r7, #12]
 8011d16:	f000 f804 	bl	8011d22 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8011d1a:	bf00      	nop
 8011d1c:	3710      	adds	r7, #16
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}

08011d22 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8011d22:	b580      	push	{r7, lr}
 8011d24:	b084      	sub	sp, #16
 8011d26:	af00      	add	r7, sp, #0
 8011d28:	60f8      	str	r0, [r7, #12]
 8011d2a:	60b9      	str	r1, [r7, #8]
 8011d2c:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	011b      	lsls	r3, r3, #4
 8011d32:	4619      	mov	r1, r3
 8011d34:	68b8      	ldr	r0, [r7, #8]
 8011d36:	f016 fc2a 	bl	802858e <_ZdlPvj>
      }
 8011d3a:	3710      	adds	r7, #16
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}

08011d40 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b082      	sub	sp, #8
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
 8011d48:	4a09      	ldr	r2, [pc, #36]	@ (8011d70 <_ZN6ModuleC1Ev+0x30>)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	601a      	str	r2, [r3, #0]
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	2200      	movs	r2, #0
 8011d52:	751a      	strb	r2, [r3, #20]
{
	this->counter = 0;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2200      	movs	r2, #0
 8011d58:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	2201      	movs	r2, #1
 8011d5e:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 8011d60:	4804      	ldr	r0, [pc, #16]	@ (8011d74 <_ZN6ModuleC1Ev+0x34>)
 8011d62:	f017 fb3f 	bl	80293e4 <puts>
}
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3708      	adds	r7, #8
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}
 8011d70:	0802b45c 	.word	0x0802b45c
 8011d74:	0802a8d0 	.word	0x0802a8d0

08011d78 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 8011d78:	b480      	push	{r7}
 8011d7a:	b083      	sub	sp, #12
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
 8011d80:	4a04      	ldr	r2, [pc, #16]	@ (8011d94 <_ZN6ModuleD1Ev+0x1c>)
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	601a      	str	r2, [r3, #0]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	4618      	mov	r0, r3
 8011d8a:	370c      	adds	r7, #12
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d92:	4770      	bx	lr
 8011d94:	0802b45c 	.word	0x0802b45c

08011d98 <_ZN6ModuleD0Ev>:
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f7ff ffe9 	bl	8011d78 <_ZN6ModuleD1Ev>
 8011da6:	2118      	movs	r1, #24
 8011da8:	6878      	ldr	r0, [r7, #4]
 8011daa:	f016 fbf0 	bl	802858e <_ZdlPvj>
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	4618      	mov	r0, r3
 8011db2:	3708      	adds	r7, #8
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b082      	sub	sp, #8
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
	++this->counter;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	691b      	ldr	r3, [r3, #16]
 8011dc4:	1c5a      	adds	r2, r3, #1
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	691a      	ldr	r2, [r3, #16]
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	68db      	ldr	r3, [r3, #12]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	db08      	blt.n	8011de8 <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	3310      	adds	r3, #16
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	4798      	blx	r3
		this->counter = 0;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2200      	movs	r2, #0
 8011de6:	611a      	str	r2, [r3, #16]
	}

	this->update();
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	3308      	adds	r3, #8
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	4798      	blx	r3
}
 8011df4:	bf00      	nop
 8011df6:	3708      	adds	r7, #8
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}

08011dfc <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 8011dfc:	b480      	push	{r7}
 8011dfe:	b083      	sub	sp, #12
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	bf00      	nop
 8011e06:	370c      	adds	r7, #12
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0e:	4770      	bx	lr

08011e10 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8011e10:	b480      	push	{r7}
 8011e12:	b083      	sub	sp, #12
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	bf00      	nop
 8011e1a:	370c      	adds	r7, #12
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr

08011e24 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8011e24:	b480      	push	{r7}
 8011e26:	b083      	sub	sp, #12
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
 8011e2c:	bf00      	nop
 8011e2e:	370c      	adds	r7, #12
 8011e30:	46bd      	mov	sp, r7
 8011e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e36:	4770      	bx	lr

08011e38 <_ZN6Module9configureEv>:
void Module::configure(){}
 8011e38:	b480      	push	{r7}
 8011e3a:	b083      	sub	sp, #12
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
 8011e40:	bf00      	nop
 8011e42:	370c      	adds	r7, #12
 8011e44:	46bd      	mov	sp, r7
 8011e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4a:	4770      	bx	lr

08011e4c <_ZN13ModuleFactoryC1Ev>:

class ModuleFactory {
private:

    // Private constructor for singleton
    ModuleFactory() {};
 8011e4c:	b480      	push	{r7}
 8011e4e:	b083      	sub	sp, #12
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	4618      	mov	r0, r3
 8011e58:	370c      	adds	r7, #12
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e60:	4770      	bx	lr
	...

08011e64 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora>:

// Create module based on thread and type
std::shared_ptr<Module> ModuleFactory::createModule(const char* _tname,
                                   const char* _mtype,
                                   const JsonVariant config,
                                   Remora* instance) {
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b094      	sub	sp, #80	@ 0x50
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	60f8      	str	r0, [r7, #12]
 8011e6c:	60b9      	str	r1, [r7, #8]
 8011e6e:	607a      	str	r2, [r7, #4]
 8011e70:	603b      	str	r3, [r7, #0]
    if (strcmp(_tname, "Base") == 0) {
 8011e72:	4969      	ldr	r1, [pc, #420]	@ (8012018 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1b4>)
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f7ee fa33 	bl	80002e0 <strcmp>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d116      	bne.n	8011eae <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x4a>
        if (strcmp(_mtype, "Stepgen") == 0) {
 8011e80:	4966      	ldr	r1, [pc, #408]	@ (801201c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1b8>)
 8011e82:	6838      	ldr	r0, [r7, #0]
 8011e84:	f7ee fa2c 	bl	80002e0 <strcmp>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	f040 80bc 	bne.w	8012008 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a4>
            return Stepgen::create(config, instance);
 8011e90:	f107 0310 	add.w	r3, r7, #16
 8011e94:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7f5 fdb2 	bl	8007a02 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	f107 0110 	add.w	r1, r7, #16
 8011ea4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f001 fe54 	bl	8013b54 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
    } else {
        printf("Error: Unknown thread type '%s' or module type '%s'\n", _tname, _mtype);
    }

    return nullptr;
}
 8011eac:	e0b0      	b.n	8012010 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
    } else if (strcmp(_tname, "Servo") == 0) {
 8011eae:	495c      	ldr	r1, [pc, #368]	@ (8012020 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1bc>)
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f7ee fa15 	bl	80002e0 <strcmp>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d157      	bne.n	8011f6c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x108>
        if (strcmp(_mtype, "Blink") == 0) {
 8011ebc:	4959      	ldr	r1, [pc, #356]	@ (8012024 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1c0>)
 8011ebe:	6838      	ldr	r0, [r7, #0]
 8011ec0:	f7ee fa0e 	bl	80002e0 <strcmp>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d10e      	bne.n	8011ee8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x84>
            return Blink::create(config, instance);
 8011eca:	f107 0318 	add.w	r3, r7, #24
 8011ece:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7f5 fd95 	bl	8007a02 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f107 0118 	add.w	r1, r7, #24
 8011ede:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7fd f8d5 	bl	800f090 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8011ee6:	e093      	b.n	8012010 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
        } else if (strcmp(_mtype, "Reset Pin") == 0) {
 8011ee8:	494f      	ldr	r1, [pc, #316]	@ (8012028 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1c4>)
 8011eea:	6838      	ldr	r0, [r7, #0]
 8011eec:	f7ee f9f8 	bl	80002e0 <strcmp>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d10e      	bne.n	8011f14 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xb0>
            return ResetPin::create(config, instance);
 8011ef6:	f107 0320 	add.w	r3, r7, #32
 8011efa:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7f5 fd7f 	bl	8007a02 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	f107 0120 	add.w	r1, r7, #32
 8011f0a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f000 f903 	bl	8012118 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8011f12:	e07d      	b.n	8012010 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
        } else if (strcmp(_mtype, "Digital Pin") == 0) {
 8011f14:	4945      	ldr	r1, [pc, #276]	@ (801202c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1c8>)
 8011f16:	6838      	ldr	r0, [r7, #0]
 8011f18:	f7ee f9e2 	bl	80002e0 <strcmp>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d10e      	bne.n	8011f40 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xdc>
            return DigitalPin::create(config, instance);
 8011f22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011f26:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7f5 fd69 	bl	8007a02 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8011f36:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7fe ffc9 	bl	8010ed0 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8011f3e:	e067      	b.n	8012010 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
        } else if (strcmp(_mtype, "Sigma Delta") == 0) {
 8011f40:	493b      	ldr	r1, [pc, #236]	@ (8012030 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1cc>)
 8011f42:	6838      	ldr	r0, [r7, #0]
 8011f44:	f7ee f9cc 	bl	80002e0 <strcmp>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d15c      	bne.n	8012008 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a4>
            return SigmaDelta::create(config, instance);
 8011f4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011f52:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7f5 fd53 	bl	8007a02 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8011f62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011f64:	4618      	mov	r0, r3
 8011f66:	f000 fe71 	bl	8012c4c <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8011f6a:	e051      	b.n	8012010 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
    } else if (strcmp(_tname, "On load") == 0) {
 8011f6c:	4931      	ldr	r1, [pc, #196]	@ (8012034 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1d0>)
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f7ee f9b6 	bl	80002e0 <strcmp>
 8011f74:	4603      	mov	r3, r0
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d141      	bne.n	8011ffe <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x19a>
    	if (strcmp(_mtype, "TMC2208") == 0) {
 8011f7a:	492f      	ldr	r1, [pc, #188]	@ (8012038 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1d4>)
 8011f7c:	6838      	ldr	r0, [r7, #0]
 8011f7e:	f7ee f9af 	bl	80002e0 <strcmp>
 8011f82:	4603      	mov	r3, r0
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d10e      	bne.n	8011fa6 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x142>
   	        return TMC2208::create(config, instance);
 8011f88:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011f8c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7f5 fd36 	bl	8007a02 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8011f9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f003 f822 	bl	8014fe8 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8011fa4:	e034      	b.n	8012010 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
   	    } else if (strcmp(_mtype, "TMC2209") == 0) {
 8011fa6:	4925      	ldr	r1, [pc, #148]	@ (801203c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1d8>)
 8011fa8:	6838      	ldr	r0, [r7, #0]
 8011faa:	f7ee f999 	bl	80002e0 <strcmp>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d10e      	bne.n	8011fd2 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x16e>
    		return TMC2209::create(config, instance);
 8011fb4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011fb8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f7f5 fd20 	bl	8007a02 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8011fc8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f005 fe0a 	bl	8017be4 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8011fd0:	e01e      	b.n	8012010 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
    	} else if (strcmp(_mtype, "TMC5160") == 0) {
 8011fd2:	491b      	ldr	r1, [pc, #108]	@ (8012040 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1dc>)
 8011fd4:	6838      	ldr	r0, [r7, #0]
 8011fd6:	f7ee f983 	bl	80002e0 <strcmp>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d113      	bne.n	8012008 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a4>
    		return TMC5160::create(config, instance);
 8011fe0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8011fe4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7f5 fd0a 	bl	8007a02 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8011ff4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f007 fa1a 	bl	8019430 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8011ffc:	e008      	b.n	8012010 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
        printf("Error: Unknown thread type '%s' or module type '%s'\n", _tname, _mtype);
 8011ffe:	683a      	ldr	r2, [r7, #0]
 8012000:	6879      	ldr	r1, [r7, #4]
 8012002:	4810      	ldr	r0, [pc, #64]	@ (8012044 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1e0>)
 8012004:	f017 f97e 	bl	8029304 <iprintf>
    return nullptr;
 8012008:	2100      	movs	r1, #0
 801200a:	68f8      	ldr	r0, [r7, #12]
 801200c:	f000 f84c 	bl	80120a8 <_ZNSt10shared_ptrI6ModuleEC1EDn>
}
 8012010:	68f8      	ldr	r0, [r7, #12]
 8012012:	3750      	adds	r7, #80	@ 0x50
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}
 8012018:	0802a928 	.word	0x0802a928
 801201c:	0802a930 	.word	0x0802a930
 8012020:	0802a938 	.word	0x0802a938
 8012024:	0802a940 	.word	0x0802a940
 8012028:	0802a948 	.word	0x0802a948
 801202c:	0802a954 	.word	0x0802a954
 8012030:	0802a960 	.word	0x0802a960
 8012034:	0802a96c 	.word	0x0802a96c
 8012038:	0802a974 	.word	0x0802a974
 801203c:	0802a97c 	.word	0x0802a97c
 8012040:	0802a984 	.word	0x0802a984
 8012044:	0802a98c 	.word	0x0802a98c

08012048 <_ZN13ModuleFactory11getInstanceEv>:


// Static instance accessor
ModuleFactory* ModuleFactory::getInstance() {
 8012048:	b598      	push	{r3, r4, r7, lr}
 801204a:	af00      	add	r7, sp, #0
    static ModuleFactory* instance = new ModuleFactory();
 801204c:	4b14      	ldr	r3, [pc, #80]	@ (80120a0 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	f3bf 8f5b 	dmb	ish
 8012054:	f003 0301 	and.w	r3, r3, #1
 8012058:	2b00      	cmp	r3, #0
 801205a:	bf0c      	ite	eq
 801205c:	2301      	moveq	r3, #1
 801205e:	2300      	movne	r3, #0
 8012060:	b2db      	uxtb	r3, r3
 8012062:	2b00      	cmp	r3, #0
 8012064:	d017      	beq.n	8012096 <_ZN13ModuleFactory11getInstanceEv+0x4e>
 8012066:	480e      	ldr	r0, [pc, #56]	@ (80120a0 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 8012068:	f016 fa93 	bl	8028592 <__cxa_guard_acquire>
 801206c:	4603      	mov	r3, r0
 801206e:	2b00      	cmp	r3, #0
 8012070:	bf14      	ite	ne
 8012072:	2301      	movne	r3, #1
 8012074:	2300      	moveq	r3, #0
 8012076:	b2db      	uxtb	r3, r3
 8012078:	2b00      	cmp	r3, #0
 801207a:	d00c      	beq.n	8012096 <_ZN13ModuleFactory11getInstanceEv+0x4e>
 801207c:	2001      	movs	r0, #1
 801207e:	f016 fa97 	bl	80285b0 <_Znwj>
 8012082:	4603      	mov	r3, r0
 8012084:	461c      	mov	r4, r3
 8012086:	4620      	mov	r0, r4
 8012088:	f7ff fee0 	bl	8011e4c <_ZN13ModuleFactoryC1Ev>
 801208c:	4b05      	ldr	r3, [pc, #20]	@ (80120a4 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 801208e:	601c      	str	r4, [r3, #0]
 8012090:	4803      	ldr	r0, [pc, #12]	@ (80120a0 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 8012092:	f016 fa8a 	bl	80285aa <__cxa_guard_release>
    return instance;
 8012096:	4b03      	ldr	r3, [pc, #12]	@ (80120a4 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 8012098:	681b      	ldr	r3, [r3, #0]
}
 801209a:	4618      	mov	r0, r3
 801209c:	bd98      	pop	{r3, r4, r7, pc}
 801209e:	bf00      	nop
 80120a0:	24000414 	.word	0x24000414
 80120a4:	24000410 	.word	0x24000410

080120a8 <_ZNSt10shared_ptrI6ModuleEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b082      	sub	sp, #8
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
 80120b0:	6039      	str	r1, [r7, #0]
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f000 f805 	bl	80120c2 <_ZNSt10shared_ptrI6ModuleEC1Ev>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	4618      	mov	r0, r3
 80120bc:	3708      	adds	r7, #8
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}

080120c2 <_ZNSt10shared_ptrI6ModuleEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 80120c2:	b580      	push	{r7, lr}
 80120c4:	b082      	sub	sp, #8
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	4618      	mov	r0, r3
 80120ce:	f000 f805 	bl	80120dc <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	4618      	mov	r0, r3
 80120d6:	3708      	adds	r7, #8
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}

080120dc <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 80120dc:	b580      	push	{r7, lr}
 80120de:	b082      	sub	sp, #8
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2200      	movs	r2, #0
 80120e8:	601a      	str	r2, [r3, #0]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	3304      	adds	r3, #4
 80120ee:	4618      	mov	r0, r3
 80120f0:	f7fb f802 	bl	800d0f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	4618      	mov	r0, r3
 80120f8:	3708      	adds	r7, #8
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}

080120fe <_ZN6Remora8getResetEv>:
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
    volatile rxData_t* getRxData() { return &rxData; }
    volatile bool* getReset() { return &reset; };
 80120fe:	b480      	push	{r7}
 8012100:	b083      	sub	sp, #12
 8012102:	af00      	add	r7, sp, #0
 8012104:	6078      	str	r0, [r7, #4]
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	330c      	adds	r3, #12
 801210a:	4618      	mov	r0, r3
 801210c:	370c      	adds	r7, #12
 801210e:	46bd      	mov	sp, r7
 8012110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012114:	4770      	bx	lr
	...

08012118 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "resetPin.h"
#include <cstdio>

std::shared_ptr<Module> ResetPin::create(const JsonObject& config, Remora* instance) {
 8012118:	b580      	push	{r7, lr}
 801211a:	b094      	sub	sp, #80	@ 0x50
 801211c:	af00      	add	r7, sp, #0
 801211e:	60f8      	str	r0, [r7, #12]
 8012120:	60b9      	str	r1, [r7, #8]
 8012122:	607a      	str	r2, [r7, #4]
	const char* comment = config["Comment"];
 8012124:	f107 0314 	add.w	r3, r7, #20
 8012128:	4a1f      	ldr	r2, [pc, #124]	@ (80121a8 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x90>)
 801212a:	68b9      	ldr	r1, [r7, #8]
 801212c:	4618      	mov	r0, r3
 801212e:	f000 f886 	bl	801223e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012132:	f107 0314 	add.w	r3, r7, #20
 8012136:	4618      	mov	r0, r3
 8012138:	f7f5 fc97 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 801213c:	64f8      	str	r0, [r7, #76]	@ 0x4c
	printf("%s\n", comment);
 801213e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8012140:	f017 f950 	bl	80293e4 <puts>

	const char* pin = config["Pin"];
 8012144:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012148:	4a18      	ldr	r2, [pc, #96]	@ (80121ac <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x94>)
 801214a:	68b9      	ldr	r1, [r7, #8]
 801214c:	4618      	mov	r0, r3
 801214e:	f7fd f863 	bl	800f218 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012152:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012156:	4618      	mov	r0, r3
 8012158:	f7f5 fc87 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 801215c:	4603      	mov	r3, r0
 801215e:	613b      	str	r3, [r7, #16]
	printf("Make Reset Pin at pin %s\n", pin);
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	4619      	mov	r1, r3
 8012164:	4812      	ldr	r0, [pc, #72]	@ (80121b0 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x98>)
 8012166:	f017 f8cd 	bl	8029304 <iprintf>

	return std::make_unique<ResetPin>(instance->getReset(), pin);
 801216a:	6878      	ldr	r0, [r7, #4]
 801216c:	f7ff ffc7 	bl	80120fe <_ZN6Remora8getResetEv>
 8012170:	4603      	mov	r3, r0
 8012172:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012174:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8012178:	f107 0210 	add.w	r2, r7, #16
 801217c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8012180:	4618      	mov	r0, r3
 8012182:	f000 f881 	bl	8012288 <_ZSt11make_uniqueI8ResetPinJPVbRPKcEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8012186:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801218a:	4619      	mov	r1, r3
 801218c:	68f8      	ldr	r0, [r7, #12]
 801218e:	f000 f8d9 	bl	8012344 <_ZNSt10shared_ptrI6ModuleEC1I8ResetPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 8012192:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8012196:	4618      	mov	r0, r3
 8012198:	f000 f8b2 	bl	8012300 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev>
 801219c:	bf00      	nop
}
 801219e:	68f8      	ldr	r0, [r7, #12]
 80121a0:	3750      	adds	r7, #80	@ 0x50
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	bf00      	nop
 80121a8:	0802a9c4 	.word	0x0802a9c4
 80121ac:	0802a9cc 	.word	0x0802a9cc
 80121b0:	0802a9d0 	.word	0x0802a9d0

080121b4 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

ResetPin::ResetPin(volatile bool* ptrReset, const std::string& portAndPin) :
 80121b4:	b590      	push	{r4, r7, lr}
 80121b6:	b085      	sub	sp, #20
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	60f8      	str	r0, [r7, #12]
 80121bc:	60b9      	str	r1, [r7, #8]
 80121be:	607a      	str	r2, [r7, #4]
    ptrReset(ptrReset),
    portAndPin(portAndPin),
    pin(new Pin(portAndPin, 0)) {}  // Input mode (0x0)
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	4618      	mov	r0, r3
 80121c4:	f7ff fdbc 	bl	8011d40 <_ZN6ModuleC1Ev>
 80121c8:	4a0e      	ldr	r2, [pc, #56]	@ (8012204 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50>)
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	601a      	str	r2, [r3, #0]
    ptrReset(ptrReset),
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	68ba      	ldr	r2, [r7, #8]
 80121d2:	619a      	str	r2, [r3, #24]
    portAndPin(portAndPin),
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	331c      	adds	r3, #28
 80121d8:	6879      	ldr	r1, [r7, #4]
 80121da:	4618      	mov	r0, r3
 80121dc:	f016 fcf3 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    pin(new Pin(portAndPin, 0)) {}  // Input mode (0x0)
 80121e0:	2040      	movs	r0, #64	@ 0x40
 80121e2:	f016 f9e5 	bl	80285b0 <_Znwj>
 80121e6:	4603      	mov	r3, r0
 80121e8:	461c      	mov	r4, r3
 80121ea:	2200      	movs	r2, #0
 80121ec:	6879      	ldr	r1, [r7, #4]
 80121ee:	4620      	mov	r0, r4
 80121f0:	f7f2 fcde 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	635c      	str	r4, [r3, #52]	@ 0x34
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	4618      	mov	r0, r3
 80121fc:	3714      	adds	r7, #20
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd90      	pop	{r4, r7, pc}
 8012202:	bf00      	nop
 8012204:	0802b49c 	.word	0x0802b49c

08012208 <_ZN8ResetPin6updateEv>:

void ResetPin::update() {
 8012208:	b590      	push	{r4, r7, lr}
 801220a:	b083      	sub	sp, #12
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
    *ptrReset = pin->get();
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	699c      	ldr	r4, [r3, #24]
 8012218:	4610      	mov	r0, r2
 801221a:	f7f2 fe5d 	bl	8004ed8 <_ZNK3Pin3getEv>
 801221e:	4603      	mov	r3, r0
 8012220:	7023      	strb	r3, [r4, #0]
}
 8012222:	bf00      	nop
 8012224:	370c      	adds	r7, #12
 8012226:	46bd      	mov	sp, r7
 8012228:	bd90      	pop	{r4, r7, pc}

0801222a <_ZN8ResetPin10slowUpdateEv>:

void ResetPin::slowUpdate() {
 801222a:	b480      	push	{r7}
 801222c:	b083      	sub	sp, #12
 801222e:	af00      	add	r7, sp, #0
 8012230:	6078      	str	r0, [r7, #4]
    return;
 8012232:	bf00      	nop
}
 8012234:	370c      	adds	r7, #12
 8012236:	46bd      	mov	sp, r7
 8012238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223c:	4770      	bx	lr

0801223e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 801223e:	b580      	push	{r7, lr}
 8012240:	b08c      	sub	sp, #48	@ 0x30
 8012242:	af02      	add	r7, sp, #8
 8012244:	60f8      	str	r0, [r7, #12]
 8012246:	60b9      	str	r1, [r7, #8]
 8012248:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 801224a:	68ba      	ldr	r2, [r7, #8]
 801224c:	f107 0314 	add.w	r3, r7, #20
 8012250:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012254:	e883 0003 	stmia.w	r3, {r0, r1}
 8012258:	f107 031c 	add.w	r3, r7, #28
 801225c:	6879      	ldr	r1, [r7, #4]
 801225e:	4618      	mov	r0, r3
 8012260:	f7f5 feca 	bl	8007ff8 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8012264:	466a      	mov	r2, sp
 8012266:	f107 0320 	add.w	r3, r7, #32
 801226a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801226e:	e882 0003 	stmia.w	r2, {r0, r1}
 8012272:	69fb      	ldr	r3, [r7, #28]
 8012274:	f107 0214 	add.w	r2, r7, #20
 8012278:	ca06      	ldmia	r2, {r1, r2}
 801227a:	68f8      	ldr	r0, [r7, #12]
 801227c:	f7f5 fce9 	bl	8007c52 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8012280:	68f8      	ldr	r0, [r7, #12]
 8012282:	3728      	adds	r7, #40	@ 0x28
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}

08012288 <_ZSt11make_uniqueI8ResetPinJPVbRPKcEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8012288:	b5f0      	push	{r4, r5, r6, r7, lr}
 801228a:	b08d      	sub	sp, #52	@ 0x34
 801228c:	af00      	add	r7, sp, #0
 801228e:	60f8      	str	r0, [r7, #12]
 8012290:	60b9      	str	r1, [r7, #8]
 8012292:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8012294:	2038      	movs	r0, #56	@ 0x38
 8012296:	f016 f98b 	bl	80285b0 <_Znwj>
 801229a:	4603      	mov	r3, r0
 801229c:	461e      	mov	r6, r3
 801229e:	68b8      	ldr	r0, [r7, #8]
 80122a0:	f000 f863 	bl	801236a <_ZSt7forwardIPVbEOT_RNSt16remove_referenceIS2_E4typeE>
 80122a4:	4603      	mov	r3, r0
 80122a6:	681c      	ldr	r4, [r3, #0]
 80122a8:	6878      	ldr	r0, [r7, #4]
 80122aa:	f7fd f910 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80122ae:	4603      	mov	r3, r0
 80122b0:	681d      	ldr	r5, [r3, #0]
 80122b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80122b6:	4618      	mov	r0, r3
 80122b8:	f016 f98b 	bl	80285d2 <_ZNSaIcEC1Ev>
 80122bc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80122c0:	f107 0314 	add.w	r3, r7, #20
 80122c4:	4629      	mov	r1, r5
 80122c6:	4618      	mov	r0, r3
 80122c8:	f7f1 fa94 	bl	80037f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80122cc:	f107 0314 	add.w	r3, r7, #20
 80122d0:	461a      	mov	r2, r3
 80122d2:	4621      	mov	r1, r4
 80122d4:	4630      	mov	r0, r6
 80122d6:	f7ff ff6d 	bl	80121b4 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80122da:	4631      	mov	r1, r6
 80122dc:	68f8      	ldr	r0, [r7, #12]
 80122de:	f000 f85f 	bl	80123a0 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80122e2:	f107 0314 	add.w	r3, r7, #20
 80122e6:	4618      	mov	r0, r3
 80122e8:	f016 fa5d 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80122ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80122f0:	4618      	mov	r0, r3
 80122f2:	f016 f96f 	bl	80285d4 <_ZNSaIcED1Ev>
 80122f6:	bf00      	nop
 80122f8:	68f8      	ldr	r0, [r7, #12]
 80122fa:	3734      	adds	r7, #52	@ 0x34
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012300 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8012300:	b590      	push	{r4, r7, lr}
 8012302:	b085      	sub	sp, #20
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	4618      	mov	r0, r3
 801230c:	f000 f857 	bl	80123be <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 8012310:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d00c      	beq.n	8012334 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f000 f85c 	bl	80123d8 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>
 8012320:	4604      	mov	r4, r0
 8012322:	68f8      	ldr	r0, [r7, #12]
 8012324:	f000 f865 	bl	80123f2 <_ZSt4moveIRP8ResetPinEONSt16remove_referenceIT_E4typeEOS4_>
 8012328:	4603      	mov	r3, r0
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	4619      	mov	r1, r3
 801232e:	4620      	mov	r0, r4
 8012330:	f000 f892 	bl	8012458 <_ZNKSt14default_deleteI8ResetPinEclEPS0_>
	__ptr = pointer();
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	2200      	movs	r2, #0
 8012338:	601a      	str	r2, [r3, #0]
      }
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	4618      	mov	r0, r3
 801233e:	3714      	adds	r7, #20
 8012340:	46bd      	mov	sp, r7
 8012342:	bd90      	pop	{r4, r7, pc}

08012344 <_ZNSt10shared_ptrI6ModuleEC1I8ResetPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 8012344:	b590      	push	{r4, r7, lr}
 8012346:	b083      	sub	sp, #12
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
 801234c:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 801234e:	687c      	ldr	r4, [r7, #4]
 8012350:	6838      	ldr	r0, [r7, #0]
 8012352:	f000 f892 	bl	801247a <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8012356:	4603      	mov	r3, r0
 8012358:	4619      	mov	r1, r3
 801235a:	4620      	mov	r0, r4
 801235c:	f000 f898 	bl	8012490 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	4618      	mov	r0, r3
 8012364:	370c      	adds	r7, #12
 8012366:	46bd      	mov	sp, r7
 8012368:	bd90      	pop	{r4, r7, pc}

0801236a <_ZSt7forwardIPVbEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801236a:	b480      	push	{r7}
 801236c:	b083      	sub	sp, #12
 801236e:	af00      	add	r7, sp, #0
 8012370:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	4618      	mov	r0, r3
 8012376:	370c      	adds	r7, #12
 8012378:	46bd      	mov	sp, r7
 801237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237e:	4770      	bx	lr

08012380 <_ZNSt15__uniq_ptr_dataI8ResetPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8012380:	b580      	push	{r7, lr}
 8012382:	b082      	sub	sp, #8
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	6039      	str	r1, [r7, #0]
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	683a      	ldr	r2, [r7, #0]
 801238e:	4611      	mov	r1, r2
 8012390:	4618      	mov	r0, r3
 8012392:	f000 f8b5 	bl	8012500 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EEC1EPS0_>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	4618      	mov	r0, r3
 801239a:	3708      	adds	r7, #8
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}

080123a0 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b082      	sub	sp, #8
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6839      	ldr	r1, [r7, #0]
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7ff ffe6 	bl	8012380 <_ZNSt15__uniq_ptr_dataI8ResetPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	4618      	mov	r0, r3
 80123b8:	3708      	adds	r7, #8
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}

080123be <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80123be:	b580      	push	{r7, lr}
 80123c0:	b082      	sub	sp, #8
 80123c2:	af00      	add	r7, sp, #0
 80123c4:	6078      	str	r0, [r7, #4]
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	4618      	mov	r0, r3
 80123ca:	f000 f8ad 	bl	8012528 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80123ce:	4603      	mov	r3, r0
 80123d0:	4618      	mov	r0, r3
 80123d2:	3708      	adds	r7, #8
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	4618      	mov	r0, r3
 80123e4:	f000 f8ad 	bl	8012542 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE10_M_deleterEv>
 80123e8:	4603      	mov	r3, r0
 80123ea:	4618      	mov	r0, r3
 80123ec:	3708      	adds	r7, #8
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}

080123f2 <_ZSt4moveIRP8ResetPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80123f2:	b480      	push	{r7}
 80123f4:	b083      	sub	sp, #12
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	4618      	mov	r0, r3
 80123fe:	370c      	adds	r7, #12
 8012400:	46bd      	mov	sp, r7
 8012402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012406:	4770      	bx	lr

08012408 <_ZN8ResetPinD1Ev>:
#include "../../drivers/pin/pin.h"

// Global PRUreset variable (declared in extern.h or another source file)
extern volatile bool PRUreset;

class ResetPin : public Module {
 8012408:	b580      	push	{r7, lr}
 801240a:	b082      	sub	sp, #8
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	4a08      	ldr	r2, [pc, #32]	@ (8012434 <_ZN8ResetPinD1Ev+0x2c>)
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	601a      	str	r2, [r3, #0]
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	331c      	adds	r3, #28
 801241a:	4618      	mov	r0, r3
 801241c:	f016 f9c3 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	4618      	mov	r0, r3
 8012424:	f7ff fca8 	bl	8011d78 <_ZN6ModuleD1Ev>
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	4618      	mov	r0, r3
 801242c:	3708      	adds	r7, #8
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}
 8012432:	bf00      	nop
 8012434:	0802b49c 	.word	0x0802b49c

08012438 <_ZN8ResetPinD0Ev>:
 8012438:	b580      	push	{r7, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f7ff ffe1 	bl	8012408 <_ZN8ResetPinD1Ev>
 8012446:	2138      	movs	r1, #56	@ 0x38
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f016 f8a0 	bl	802858e <_ZdlPvj>
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	4618      	mov	r0, r3
 8012452:	3708      	adds	r7, #8
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}

08012458 <_ZNKSt14default_deleteI8ResetPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 8012458:	b580      	push	{r7, lr}
 801245a:	b082      	sub	sp, #8
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d004      	beq.n	8012472 <_ZNKSt14default_deleteI8ResetPinEclEPS0_+0x1a>
 8012468:	681a      	ldr	r2, [r3, #0]
 801246a:	3204      	adds	r2, #4
 801246c:	6812      	ldr	r2, [r2, #0]
 801246e:	4618      	mov	r0, r3
 8012470:	4790      	blx	r2
      }
 8012472:	bf00      	nop
 8012474:	3708      	adds	r7, #8
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}

0801247a <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 801247a:	b480      	push	{r7}
 801247c:	b083      	sub	sp, #12
 801247e:	af00      	add	r7, sp, #0
 8012480:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	4618      	mov	r0, r3
 8012486:	370c      	adds	r7, #12
 8012488:	46bd      	mov	sp, r7
 801248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248e:	4770      	bx	lr

08012490 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 8012490:	b580      	push	{r7, lr}
 8012492:	b084      	sub	sp, #16
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
 8012498:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 801249a:	6838      	ldr	r0, [r7, #0]
 801249c:	f000 f85e 	bl	801255c <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 80124a0:	4602      	mov	r2, r0
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	601a      	str	r2, [r3, #0]
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	3304      	adds	r3, #4
 80124aa:	4618      	mov	r0, r3
 80124ac:	f7fa fe24 	bl	800d0f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 80124b0:	6838      	ldr	r0, [r7, #0]
 80124b2:	f000 f853 	bl	801255c <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 80124b6:	4603      	mov	r3, r0
 80124b8:	4618      	mov	r0, r3
 80124ba:	f000 f85c 	bl	8012576 <_ZSt12__to_addressI8ResetPinEPT_S2_>
 80124be:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 80124c0:	6838      	ldr	r0, [r7, #0]
 80124c2:	f7ff ffda 	bl	801247a <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80124c6:	4602      	mov	r2, r0
 80124c8:	f107 0308 	add.w	r3, r7, #8
 80124cc:	4611      	mov	r1, r2
 80124ce:	4618      	mov	r0, r3
 80124d0:	f000 f85c 	bl	801258c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	3304      	adds	r3, #4
 80124d8:	f107 0208 	add.w	r2, r7, #8
 80124dc:	4611      	mov	r1, r2
 80124de:	4618      	mov	r0, r3
 80124e0:	f7fd fa08 	bl	800f8f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 80124e4:	f107 0308 	add.w	r3, r7, #8
 80124e8:	4618      	mov	r0, r3
 80124ea:	f7f9 fc08 	bl	800bcfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 80124ee:	68f9      	ldr	r1, [r7, #12]
 80124f0:	6878      	ldr	r0, [r7, #4]
 80124f2:	f000 f88d 	bl	8012610 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI8ResetPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	4618      	mov	r0, r3
 80124fa:	3710      	adds	r7, #16
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}

08012500 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8012500:	b590      	push	{r4, r7, lr}
 8012502:	b083      	sub	sp, #12
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	6039      	str	r1, [r7, #0]
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	4618      	mov	r0, r3
 801250e:	f000 f88a 	bl	8012626 <_ZNSt5tupleIJP8ResetPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8012512:	683c      	ldr	r4, [r7, #0]
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f7ff ff52 	bl	80123be <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 801251a:	4603      	mov	r3, r0
 801251c:	601c      	str	r4, [r3, #0]
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	4618      	mov	r0, r3
 8012522:	370c      	adds	r7, #12
 8012524:	46bd      	mov	sp, r7
 8012526:	bd90      	pop	{r4, r7, pc}

08012528 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8012528:	b580      	push	{r7, lr}
 801252a:	b082      	sub	sp, #8
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	4618      	mov	r0, r3
 8012534:	f000 f884 	bl	8012640 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012538:	4603      	mov	r3, r0
 801253a:	4618      	mov	r0, r3
 801253c:	3708      	adds	r7, #8
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}

08012542 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8012542:	b580      	push	{r7, lr}
 8012544:	b082      	sub	sp, #8
 8012546:	af00      	add	r7, sp, #0
 8012548:	6078      	str	r0, [r7, #4]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	4618      	mov	r0, r3
 801254e:	f000 f883 	bl	8012658 <_ZSt3getILj1EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8012552:	4603      	mov	r3, r0
 8012554:	4618      	mov	r0, r3
 8012556:	3708      	adds	r7, #8
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 801255c:	b580      	push	{r7, lr}
 801255e:	b082      	sub	sp, #8
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	4618      	mov	r0, r3
 8012568:	f000 f882 	bl	8012670 <_ZNKSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 801256c:	4603      	mov	r3, r0
 801256e:	4618      	mov	r0, r3
 8012570:	3708      	adds	r7, #8
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}

08012576 <_ZSt12__to_addressI8ResetPinEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 8012576:	b480      	push	{r7}
 8012578:	b083      	sub	sp, #12
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
      return __ptr;
 801257e:	687b      	ldr	r3, [r7, #4]
    }
 8012580:	4618      	mov	r0, r3
 8012582:	370c      	adds	r7, #12
 8012584:	46bd      	mov	sp, r7
 8012586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258a:	4770      	bx	lr

0801258c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 801258c:	b580      	push	{r7, lr}
 801258e:	b086      	sub	sp, #24
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	6039      	str	r1, [r7, #0]
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	2200      	movs	r2, #0
 801259a:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 801259c:	6838      	ldr	r0, [r7, #0]
 801259e:	f7ff ffdd 	bl	801255c <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 80125a2:	4603      	mov	r3, r0
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	bf0c      	ite	eq
 80125a8:	2301      	moveq	r3, #1
 80125aa:	2300      	movne	r3, #0
 80125ac:	b2db      	uxtb	r3, r3
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d128      	bne.n	8012604 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 80125b2:	f107 030c 	add.w	r3, r7, #12
 80125b6:	4618      	mov	r0, r3
 80125b8:	f000 f868 	bl	801268c <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 80125bc:	f107 030c 	add.w	r3, r7, #12
 80125c0:	2101      	movs	r1, #1
 80125c2:	4618      	mov	r0, r3
 80125c4:	f000 f87a 	bl	80126bc <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 80125c8:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 80125ca:	6838      	ldr	r0, [r7, #0]
 80125cc:	f000 f885 	bl	80126da <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE7releaseEv>
 80125d0:	4603      	mov	r3, r0
 80125d2:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 80125d4:	6838      	ldr	r0, [r7, #0]
 80125d6:	f7ff feff 	bl	80123d8 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>
 80125da:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 80125dc:	4618      	mov	r0, r3
 80125de:	f000 f889 	bl	80126f4 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 80125e2:	4603      	mov	r3, r0
 80125e4:	f107 0210 	add.w	r2, r7, #16
 80125e8:	f107 000c 	add.w	r0, r7, #12
 80125ec:	6979      	ldr	r1, [r7, #20]
 80125ee:	f000 f88c 	bl	801270a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	697a      	ldr	r2, [r7, #20]
 80125f6:	601a      	str	r2, [r3, #0]
	}
 80125f8:	f107 030c 	add.w	r3, r7, #12
 80125fc:	4618      	mov	r0, r3
 80125fe:	f000 f851 	bl	80126a4 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8012602:	e000      	b.n	8012606 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 8012604:	bf00      	nop
	}
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	4618      	mov	r0, r3
 801260a:	3718      	adds	r7, #24
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}

08012610 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI8ResetPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8012610:	b480      	push	{r7}
 8012612:	b083      	sub	sp, #12
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	6039      	str	r1, [r7, #0]
	{ }
 801261a:	bf00      	nop
 801261c:	370c      	adds	r7, #12
 801261e:	46bd      	mov	sp, r7
 8012620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012624:	4770      	bx	lr

08012626 <_ZNSt5tupleIJP8ResetPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8012626:	b580      	push	{r7, lr}
 8012628:	b082      	sub	sp, #8
 801262a:	af00      	add	r7, sp, #0
 801262c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	4618      	mov	r0, r3
 8012632:	f000 f882 	bl	801273a <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEEC1Ev>
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	4618      	mov	r0, r3
 801263a:	3708      	adds	r7, #8
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}

08012640 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012640:	b580      	push	{r7, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f000 f886 	bl	801275a <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERS4_>
 801264e:	4603      	mov	r3, r0
 8012650:	4618      	mov	r0, r3
 8012652:	3708      	adds	r7, #8
 8012654:	46bd      	mov	sp, r7
 8012656:	bd80      	pop	{r7, pc}

08012658 <_ZSt3getILj1EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8012658:	b580      	push	{r7, lr}
 801265a:	b082      	sub	sp, #8
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f000 f887 	bl	8012774 <_ZSt12__get_helperILj1ESt14default_deleteI8ResetPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8012666:	4603      	mov	r3, r0
 8012668:	4618      	mov	r0, r3
 801266a:	3708      	adds	r7, #8
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <_ZNKSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8012670:	b580      	push	{r7, lr}
 8012672:	b082      	sub	sp, #8
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	4618      	mov	r0, r3
 801267c:	f000 f886 	bl	801278c <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8012680:	4603      	mov	r3, r0
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	4618      	mov	r0, r3
 8012686:	3708      	adds	r7, #8
 8012688:	46bd      	mov	sp, r7
 801268a:	bd80      	pop	{r7, pc}

0801268c <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801268c:	b580      	push	{r7, lr}
 801268e:	b082      	sub	sp, #8
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f000 f886 	bl	80127a6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	4618      	mov	r0, r3
 801269e:	3708      	adds	r7, #8
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}

080126a4 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f000 f885 	bl	80127bc <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	4618      	mov	r0, r3
 80126b6:	3708      	adds	r7, #8
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}

080126bc <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 80126bc:	b580      	push	{r7, lr}
 80126be:	b082      	sub	sp, #8
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80126c6:	2200      	movs	r2, #0
 80126c8:	6839      	ldr	r1, [r7, #0]
 80126ca:	6878      	ldr	r0, [r7, #4]
 80126cc:	f000 f881 	bl	80127d2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 80126d0:	4603      	mov	r3, r0
 80126d2:	4618      	mov	r0, r3
 80126d4:	3708      	adds	r7, #8
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}

080126da <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 80126da:	b580      	push	{r7, lr}
 80126dc:	b082      	sub	sp, #8
 80126de:	af00      	add	r7, sp, #0
 80126e0:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	4618      	mov	r0, r3
 80126e6:	f000 f89e 	bl	8012826 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE7releaseEv>
 80126ea:	4603      	mov	r3, r0
 80126ec:	4618      	mov	r0, r3
 80126ee:	3708      	adds	r7, #8
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bd80      	pop	{r7, pc}

080126f4 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80126f4:	b480      	push	{r7}
 80126f6:	b083      	sub	sp, #12
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	4618      	mov	r0, r3
 8012700:	370c      	adds	r7, #12
 8012702:	46bd      	mov	sp, r7
 8012704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012708:	4770      	bx	lr

0801270a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801270a:	b590      	push	{r4, r7, lr}
 801270c:	b085      	sub	sp, #20
 801270e:	af00      	add	r7, sp, #0
 8012710:	60f8      	str	r0, [r7, #12]
 8012712:	60b9      	str	r1, [r7, #8]
 8012714:	607a      	str	r2, [r7, #4]
 8012716:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f000 f899 	bl	8012850 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>
 801271e:	4604      	mov	r4, r0
 8012720:	6838      	ldr	r0, [r7, #0]
 8012722:	f7ff ffe7 	bl	80126f4 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012726:	4603      	mov	r3, r0
 8012728:	4622      	mov	r2, r4
 801272a:	68b9      	ldr	r1, [r7, #8]
 801272c:	68f8      	ldr	r0, [r7, #12]
 801272e:	f000 f89a 	bl	8012866 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 8012732:	bf00      	nop
 8012734:	3714      	adds	r7, #20
 8012736:	46bd      	mov	sp, r7
 8012738:	bd90      	pop	{r4, r7, pc}

0801273a <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 801273a:	b580      	push	{r7, lr}
 801273c:	b082      	sub	sp, #8
 801273e:	af00      	add	r7, sp, #0
 8012740:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f000 f8ad 	bl	80128a2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEEC1Ev>
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	4618      	mov	r0, r3
 801274c:	f000 f8b5 	bl	80128ba <_ZNSt10_Head_baseILj0EP8ResetPinLb0EEC1Ev>
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	4618      	mov	r0, r3
 8012754:	3708      	adds	r7, #8
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}

0801275a <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801275a:	b580      	push	{r7, lr}
 801275c:	b082      	sub	sp, #8
 801275e:	af00      	add	r7, sp, #0
 8012760:	6078      	str	r0, [r7, #4]
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	4618      	mov	r0, r3
 8012766:	f000 f8b6 	bl	80128d6 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERS2_>
 801276a:	4603      	mov	r3, r0
 801276c:	4618      	mov	r0, r3
 801276e:	3708      	adds	r7, #8
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}

08012774 <_ZSt12__get_helperILj1ESt14default_deleteI8ResetPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012774:	b580      	push	{r7, lr}
 8012776:	b082      	sub	sp, #8
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f000 f8b5 	bl	80128ec <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEE7_M_headERS3_>
 8012782:	4603      	mov	r3, r0
 8012784:	4618      	mov	r0, r3
 8012786:	3708      	adds	r7, #8
 8012788:	46bd      	mov	sp, r7
 801278a:	bd80      	pop	{r7, pc}

0801278c <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 801278c:	b580      	push	{r7, lr}
 801278e:	b082      	sub	sp, #8
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	4618      	mov	r0, r3
 8012798:	f000 f8b4 	bl	8012904 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801279c:	4603      	mov	r3, r0
 801279e:	4618      	mov	r0, r3
 80127a0:	3708      	adds	r7, #8
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}

080127a6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80127a6:	b480      	push	{r7}
 80127a8:	b083      	sub	sp, #12
 80127aa:	af00      	add	r7, sp, #0
 80127ac:	6078      	str	r0, [r7, #4]
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	4618      	mov	r0, r3
 80127b2:	370c      	adds	r7, #12
 80127b4:	46bd      	mov	sp, r7
 80127b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ba:	4770      	bx	lr

080127bc <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80127bc:	b480      	push	{r7}
 80127be:	b083      	sub	sp, #12
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	4618      	mov	r0, r3
 80127c8:	370c      	adds	r7, #12
 80127ca:	46bd      	mov	sp, r7
 80127cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d0:	4770      	bx	lr

080127d2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80127d2:	b580      	push	{r7, lr}
 80127d4:	b084      	sub	sp, #16
 80127d6:	af00      	add	r7, sp, #0
 80127d8:	60f8      	str	r0, [r7, #12]
 80127da:	60b9      	str	r1, [r7, #8]
 80127dc:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80127de:	68f8      	ldr	r0, [r7, #12]
 80127e0:	f000 f89c 	bl	801291c <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 80127e4:	4602      	mov	r2, r0
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	4293      	cmp	r3, r2
 80127ea:	bf8c      	ite	hi
 80127ec:	2301      	movhi	r3, #1
 80127ee:	2300      	movls	r3, #0
 80127f0:	b2db      	uxtb	r3, r3
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	bf14      	ite	ne
 80127f6:	2301      	movne	r3, #1
 80127f8:	2300      	moveq	r3, #0
 80127fa:	b2db      	uxtb	r3, r3
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d007      	beq.n	8012810 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012806:	d301      	bcc.n	801280c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8012808:	f015 fee8 	bl	80285dc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801280c:	f015 fee3 	bl	80285d6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	011b      	lsls	r3, r3, #4
 8012814:	4618      	mov	r0, r3
 8012816:	f015 fecb 	bl	80285b0 <_Znwj>
 801281a:	4603      	mov	r3, r0
 801281c:	bf00      	nop
      }
 801281e:	4618      	mov	r0, r3
 8012820:	3710      	adds	r7, #16
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}

08012826 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8012826:	b580      	push	{r7, lr}
 8012828:	b084      	sub	sp, #16
 801282a:	af00      	add	r7, sp, #0
 801282c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f7ff fdc5 	bl	80123be <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 8012834:	4603      	mov	r3, r0
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f7ff fdbf 	bl	80123be <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 8012840:	4603      	mov	r3, r0
 8012842:	2200      	movs	r2, #0
 8012844:	601a      	str	r2, [r3, #0]
	return __p;
 8012846:	68fb      	ldr	r3, [r7, #12]
      }
 8012848:	4618      	mov	r0, r3
 801284a:	3710      	adds	r7, #16
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}

08012850 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012850:	b480      	push	{r7}
 8012852:	b083      	sub	sp, #12
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	4618      	mov	r0, r3
 801285c:	370c      	adds	r7, #12
 801285e:	46bd      	mov	sp, r7
 8012860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012864:	4770      	bx	lr

08012866 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8012866:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012868:	b085      	sub	sp, #20
 801286a:	af00      	add	r7, sp, #0
 801286c:	60f8      	str	r0, [r7, #12]
 801286e:	60b9      	str	r1, [r7, #8]
 8012870:	607a      	str	r2, [r7, #4]
 8012872:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	4619      	mov	r1, r3
 8012878:	2010      	movs	r0, #16
 801287a:	f7f8 f809 	bl	800a890 <_ZnwjPv>
 801287e:	4605      	mov	r5, r0
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f7ff ffe5 	bl	8012850 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>
 8012886:	4603      	mov	r3, r0
 8012888:	681c      	ldr	r4, [r3, #0]
 801288a:	6838      	ldr	r0, [r7, #0]
 801288c:	f7ff ff32 	bl	80126f4 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012890:	4632      	mov	r2, r6
 8012892:	4621      	mov	r1, r4
 8012894:	4628      	mov	r0, r5
 8012896:	f000 f84d 	bl	8012934 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 801289a:	bf00      	nop
 801289c:	3714      	adds	r7, #20
 801289e:	46bd      	mov	sp, r7
 80128a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080128a2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEEC1Ev>:
      _Tuple_impl()
 80128a2:	b580      	push	{r7, lr}
 80128a4:	b082      	sub	sp, #8
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f000 f864 	bl	8012978 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EEC1Ev>
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	4618      	mov	r0, r3
 80128b4:	3708      	adds	r7, #8
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}

080128ba <_ZNSt10_Head_baseILj0EP8ResetPinLb0EEC1Ev>:
      constexpr _Head_base()
 80128ba:	b480      	push	{r7}
 80128bc:	b083      	sub	sp, #12
 80128be:	af00      	add	r7, sp, #0
 80128c0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	2200      	movs	r2, #0
 80128c6:	601a      	str	r2, [r3, #0]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	4618      	mov	r0, r3
 80128cc:	370c      	adds	r7, #12
 80128ce:	46bd      	mov	sp, r7
 80128d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d4:	4770      	bx	lr

080128d6 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80128d6:	b480      	push	{r7}
 80128d8:	b083      	sub	sp, #12
 80128da:	af00      	add	r7, sp, #0
 80128dc:	6078      	str	r0, [r7, #4]
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	4618      	mov	r0, r3
 80128e2:	370c      	adds	r7, #12
 80128e4:	46bd      	mov	sp, r7
 80128e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ea:	4770      	bx	lr

080128ec <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b082      	sub	sp, #8
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
 80128f4:	6878      	ldr	r0, [r7, #4]
 80128f6:	f000 f84a 	bl	801298e <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EE7_M_headERS3_>
 80128fa:	4603      	mov	r3, r0
 80128fc:	4618      	mov	r0, r3
 80128fe:	3708      	adds	r7, #8
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}

08012904 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012904:	b580      	push	{r7, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f000 f849 	bl	80129a4 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 8012912:	4603      	mov	r3, r0
 8012914:	4618      	mov	r0, r3
 8012916:	3708      	adds	r7, #8
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801291c:	b480      	push	{r7}
 801291e:	b083      	sub	sp, #12
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8012924:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 8012928:	4618      	mov	r0, r3
 801292a:	370c      	adds	r7, #12
 801292c:	46bd      	mov	sp, r7
 801292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012932:	4770      	bx	lr

08012934 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8012934:	b5b0      	push	{r4, r5, r7, lr}
 8012936:	b086      	sub	sp, #24
 8012938:	af00      	add	r7, sp, #0
 801293a:	60f8      	str	r0, [r7, #12]
 801293c:	60b9      	str	r1, [r7, #8]
 801293e:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	4618      	mov	r0, r3
 8012944:	f7fb fc4c 	bl	800e1e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8012948:	4a0a      	ldr	r2, [pc, #40]	@ (8012974 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	601a      	str	r2, [r3, #0]
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	f103 040c 	add.w	r4, r3, #12
 8012954:	1d3b      	adds	r3, r7, #4
 8012956:	4618      	mov	r0, r3
 8012958:	f000 f831 	bl	80129be <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 801295c:	f107 0314 	add.w	r3, r7, #20
 8012960:	462a      	mov	r2, r5
 8012962:	68b9      	ldr	r1, [r7, #8]
 8012964:	4620      	mov	r0, r4
 8012966:	f000 f835 	bl	80129d4 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	4618      	mov	r0, r3
 801296e:	3718      	adds	r7, #24
 8012970:	46bd      	mov	sp, r7
 8012972:	bdb0      	pop	{r4, r5, r7, pc}
 8012974:	0802b480 	.word	0x0802b480

08012978 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EEC1Ev>:
      constexpr _Head_base()
 8012978:	b480      	push	{r7}
 801297a:	b083      	sub	sp, #12
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	4618      	mov	r0, r3
 8012984:	370c      	adds	r7, #12
 8012986:	46bd      	mov	sp, r7
 8012988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298c:	4770      	bx	lr

0801298e <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801298e:	b480      	push	{r7}
 8012990:	b083      	sub	sp, #12
 8012992:	af00      	add	r7, sp, #0
 8012994:	6078      	str	r0, [r7, #4]
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	4618      	mov	r0, r3
 801299a:	370c      	adds	r7, #12
 801299c:	46bd      	mov	sp, r7
 801299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a2:	4770      	bx	lr

080129a4 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b082      	sub	sp, #8
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	4618      	mov	r0, r3
 80129b0:	f000 f82c 	bl	8012a0c <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERKS2_>
 80129b4:	4603      	mov	r3, r0
 80129b6:	4618      	mov	r0, r3
 80129b8:	3708      	adds	r7, #8
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}

080129be <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80129be:	b480      	push	{r7}
 80129c0:	b083      	sub	sp, #12
 80129c2:	af00      	add	r7, sp, #0
 80129c4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	4618      	mov	r0, r3
 80129ca:	370c      	adds	r7, #12
 80129cc:	46bd      	mov	sp, r7
 80129ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d2:	4770      	bx	lr

080129d4 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b084      	sub	sp, #16
 80129d8:	af00      	add	r7, sp, #0
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	60b9      	str	r1, [r7, #8]
 80129de:	713a      	strb	r2, [r7, #4]
 80129e0:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 80129e2:	1d3b      	adds	r3, r7, #4
 80129e4:	4618      	mov	r0, r3
 80129e6:	f7ff ffea 	bl	80129be <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 80129ea:	4603      	mov	r3, r0
 80129ec:	4619      	mov	r1, r3
 80129ee:	68f8      	ldr	r0, [r7, #12]
 80129f0:	f000 f817 	bl	8012a22 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EEC1EOS2_>
 80129f4:	6839      	ldr	r1, [r7, #0]
 80129f6:	68f8      	ldr	r0, [r7, #12]
 80129f8:	f7fd fcdc 	bl	80103b4 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	68ba      	ldr	r2, [r7, #8]
 8012a00:	601a      	str	r2, [r3, #0]
	{ }
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	4618      	mov	r0, r3
 8012a06:	3710      	adds	r7, #16
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}

08012a0c <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8012a0c:	b480      	push	{r7}
 8012a0e:	b083      	sub	sp, #12
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	4618      	mov	r0, r3
 8012a18:	370c      	adds	r7, #12
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a20:	4770      	bx	lr

08012a22 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8012a22:	b580      	push	{r7, lr}
 8012a24:	b082      	sub	sp, #8
 8012a26:	af00      	add	r7, sp, #0
 8012a28:	6078      	str	r0, [r7, #4]
 8012a2a:	6039      	str	r1, [r7, #0]
 8012a2c:	6838      	ldr	r0, [r7, #0]
 8012a2e:	f7ff ffc6 	bl	80129be <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	4618      	mov	r0, r3
 8012a36:	3708      	adds	r7, #8
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}

08012a3c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b082      	sub	sp, #8
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
 8012a44:	4a05      	ldr	r2, [pc, #20]	@ (8012a5c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	601a      	str	r2, [r3, #0]
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7f9 fd89 	bl	800c564 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	4618      	mov	r0, r3
 8012a56:	3708      	adds	r7, #8
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd80      	pop	{r7, pc}
 8012a5c:	0802b480 	.word	0x0802b480

08012a60 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b082      	sub	sp, #8
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f7ff ffe7 	bl	8012a3c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012a6e:	2110      	movs	r1, #16
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f015 fd8c 	bl	802858e <_ZdlPvj>
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3708      	adds	r7, #8
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	330c      	adds	r3, #12
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f000 f83f 	bl	8012b10 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8012a92:	4602      	mov	r2, r0
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	68db      	ldr	r3, [r3, #12]
 8012a98:	4619      	mov	r1, r3
 8012a9a:	4610      	mov	r0, r2
 8012a9c:	f7ff fcdc 	bl	8012458 <_ZNKSt14default_deleteI8ResetPinEclEPS0_>
 8012aa0:	bf00      	nop
 8012aa2:	3708      	adds	r7, #8
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}

08012aa8 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b086      	sub	sp, #24
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	330c      	adds	r3, #12
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f000 f837 	bl	8012b28 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8012aba:	4602      	mov	r2, r0
 8012abc:	f107 0314 	add.w	r3, r7, #20
 8012ac0:	4611      	mov	r1, r2
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f000 f83c 	bl	8012b40 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8012ac8:	f107 0114 	add.w	r1, r7, #20
 8012acc:	f107 030c 	add.w	r3, r7, #12
 8012ad0:	687a      	ldr	r2, [r7, #4]
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f000 f841 	bl	8012b5a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f7ff ffaf 	bl	8012a3c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8012ade:	f107 030c 	add.w	r3, r7, #12
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f000 f84d 	bl	8012b82 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8012ae8:	f107 0314 	add.w	r3, r7, #20
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7ff fdd9 	bl	80126a4 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8012af2:	3718      	adds	r7, #24
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}

08012af8 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 8012af8:	b480      	push	{r7}
 8012afa:	b083      	sub	sp, #12
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	6039      	str	r1, [r7, #0]
        return nullptr;
 8012b02:	2300      	movs	r3, #0
      }
 8012b04:	4618      	mov	r0, r3
 8012b06:	370c      	adds	r7, #12
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0e:	4770      	bx	lr

08012b10 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f000 f847 	bl	8012bac <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EE6_S_getERS3_>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	4618      	mov	r0, r3
 8012b22:	3708      	adds	r7, #8
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}

08012b28 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b082      	sub	sp, #8
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f7fd fd0e 	bl	8010552 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8012b36:	4603      	mov	r3, r0
 8012b38:	4618      	mov	r0, r3
 8012b3a:	3708      	adds	r7, #8
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bd80      	pop	{r7, pc}

08012b40 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b082      	sub	sp, #8
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	6039      	str	r1, [r7, #0]
 8012b4a:	6878      	ldr	r0, [r7, #4]
 8012b4c:	f7ff fe2b 	bl	80127a6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	4618      	mov	r0, r3
 8012b54:	3708      	adds	r7, #8
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}

08012b5a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8012b5a:	b580      	push	{r7, lr}
 8012b5c:	b084      	sub	sp, #16
 8012b5e:	af00      	add	r7, sp, #0
 8012b60:	60f8      	str	r0, [r7, #12]
 8012b62:	60b9      	str	r1, [r7, #8]
 8012b64:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8012b66:	68b8      	ldr	r0, [r7, #8]
 8012b68:	f000 f82b 	bl	8012bc2 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8012b6c:	4602      	mov	r2, r0
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	601a      	str	r2, [r3, #0]
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	687a      	ldr	r2, [r7, #4]
 8012b76:	605a      	str	r2, [r3, #4]
      { }
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3710      	adds	r7, #16
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}

08012b82 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8012b82:	b580      	push	{r7, lr}
 8012b84:	b082      	sub	sp, #8
 8012b86:	af00      	add	r7, sp, #0
 8012b88:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d007      	beq.n	8012ba2 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6818      	ldr	r0, [r3, #0]
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	685b      	ldr	r3, [r3, #4]
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	4619      	mov	r1, r3
 8012b9e:	f000 f81b 	bl	8012bd8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	3708      	adds	r7, #8
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bd80      	pop	{r7, pc}

08012bac <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8012bac:	b480      	push	{r7}
 8012bae:	b083      	sub	sp, #12
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	370c      	adds	r7, #12
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc0:	4770      	bx	lr

08012bc2 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012bc2:	b480      	push	{r7}
 8012bc4:	b083      	sub	sp, #12
 8012bc6:	af00      	add	r7, sp, #0
 8012bc8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	4618      	mov	r0, r3
 8012bce:	370c      	adds	r7, #12
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd6:	4770      	bx	lr

08012bd8 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b084      	sub	sp, #16
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	60f8      	str	r0, [r7, #12]
 8012be0:	60b9      	str	r1, [r7, #8]
 8012be2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8012be4:	687a      	ldr	r2, [r7, #4]
 8012be6:	68b9      	ldr	r1, [r7, #8]
 8012be8:	68f8      	ldr	r0, [r7, #12]
 8012bea:	f000 f804 	bl	8012bf6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8012bee:	bf00      	nop
 8012bf0:	3710      	adds	r7, #16
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}

08012bf6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8012bf6:	b580      	push	{r7, lr}
 8012bf8:	b084      	sub	sp, #16
 8012bfa:	af00      	add	r7, sp, #0
 8012bfc:	60f8      	str	r0, [r7, #12]
 8012bfe:	60b9      	str	r1, [r7, #8]
 8012c00:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	011b      	lsls	r3, r3, #4
 8012c06:	4619      	mov	r1, r3
 8012c08:	68b8      	ldr	r0, [r7, #8]
 8012c0a:	f015 fcc0 	bl	802858e <_ZdlPvj>
      }
 8012c0e:	3710      	adds	r7, #16
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}

08012c14 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b082      	sub	sp, #8
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	3304      	adds	r3, #4
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7f9 f86c 	bl	800bcfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	4618      	mov	r0, r3
 8012c2a:	3708      	adds	r7, #8
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}

08012c30 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b082      	sub	sp, #8
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7ff ffea 	bl	8012c14 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	4618      	mov	r0, r3
 8012c44:	3708      	adds	r7, #8
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}
	...

08012c4c <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include <cstdio>

#define CONFINE(value, min, max) (((value) < (min)) ? (min) : (((value) > (max)) ? (max) : (value)))
#define PID_SD_MAX 256 // 8-bit resolution

std::shared_ptr<Module> SigmaDelta::create(const JsonObject& config, Remora* instance) {
 8012c4c:	b590      	push	{r4, r7, lr}
 8012c4e:	b0b1      	sub	sp, #196	@ 0xc4
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	60f8      	str	r0, [r7, #12]
 8012c54:	60b9      	str	r1, [r7, #8]
 8012c56:	607a      	str	r2, [r7, #4]
    const char* comment = config["Comment"];
 8012c58:	f107 0320 	add.w	r3, r7, #32
 8012c5c:	4a55      	ldr	r2, [pc, #340]	@ (8012db4 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x168>)
 8012c5e:	68b9      	ldr	r1, [r7, #8]
 8012c60:	4618      	mov	r0, r3
 8012c62:	f7ff faec 	bl	801223e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012c66:	f107 0320 	add.w	r3, r7, #32
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f7f4 fefd 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8012c70:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
    printf("%s\n", comment);
 8012c74:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8012c78:	f016 fbb4 	bl	80293e4 <puts>

    int spIndex = config["SP[i]"];
 8012c7c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8012c80:	4a4d      	ldr	r2, [pc, #308]	@ (8012db8 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x16c>)
 8012c82:	68b9      	ldr	r1, [r7, #8]
 8012c84:	4618      	mov	r0, r3
 8012c86:	f000 f9bb 	bl	8013000 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA6_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012c8a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f7fc fae7 	bl	800f262 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8012c94:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
    const char* pin = config["SD Pin"];
 8012c98:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012c9c:	4a47      	ldr	r2, [pc, #284]	@ (8012dbc <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x170>)
 8012c9e:	68b9      	ldr	r1, [r7, #8]
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f7f4 febd 	bl	8007a20 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012ca6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7f4 fedd 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	61fb      	str	r3, [r7, #28]

    // Get pointer to the setpoint from the Remora instance
    volatile float* ptrSP = &instance->getRxData()->setPoint[spIndex];
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f7fe f8fd 	bl	8010eb4 <_ZN6Remora9getRxDataEv>
 8012cba:	4602      	mov	r2, r0
 8012cbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012cc0:	3308      	adds	r3, #8
 8012cc2:	009b      	lsls	r3, r3, #2
 8012cc4:	4413      	add	r3, r2
 8012cc6:	3304      	adds	r3, #4
 8012cc8:	61bb      	str	r3, [r7, #24]

    printf("Creating SigmaDelta module: Pin=%s, SP Index=%d\n", pin, spIndex);
 8012cca:	69fb      	ldr	r3, [r7, #28]
 8012ccc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8012cd0:	4619      	mov	r1, r3
 8012cd2:	483b      	ldr	r0, [pc, #236]	@ (8012dc0 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x174>)
 8012cd4:	f016 fb16 	bl	8029304 <iprintf>

    // Check if "SD Max" exists in the config
    if (config["SD Max"].is<int>()) {
 8012cd8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8012cdc:	4a39      	ldr	r2, [pc, #228]	@ (8012dc4 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x178>)
 8012cde:	68b9      	ldr	r1, [r7, #8]
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7f4 fe9d 	bl	8007a20 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012ce6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8012cea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012cee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8012cf6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8012cfa:	f7f5 fe8e 	bl	8008a1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8012cfe:	4604      	mov	r4, r0
 8012d00:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8012d04:	f7f5 fd18 	bl	8008738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8012d08:	4602      	mov	r2, r0
 8012d0a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8012d0e:	4621      	mov	r1, r4
 8012d10:	4618      	mov	r0, r3
 8012d12:	f7f2 fea6 	bl	8005a62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8012d16:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 8012d18:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8012d1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012d20:	f000 f9f4 	bl	801310c <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE>
 8012d24:	4603      	mov	r3, r0
 8012d26:	bf00      	nop
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d028      	beq.n	8012d7e <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x132>
        int SDmax = config["SD Max"];
 8012d2c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8012d30:	4a24      	ldr	r2, [pc, #144]	@ (8012dc4 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x178>)
 8012d32:	68b9      	ldr	r1, [r7, #8]
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7f4 fe73 	bl	8007a20 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012d3a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7fc fa8f 	bl	800f262 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8012d44:	4603      	mov	r3, r0
 8012d46:	617b      	str	r3, [r7, #20]
        printf("Using SD Max=%d\n", SDmax);
 8012d48:	697b      	ldr	r3, [r7, #20]
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	481e      	ldr	r0, [pc, #120]	@ (8012dc8 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x17c>)
 8012d4e:	f016 fad9 	bl	8029304 <iprintf>
        return std::make_shared<SigmaDelta>(pin, ptrSP, SDmax);
 8012d52:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8012d56:	f107 0314 	add.w	r3, r7, #20
 8012d5a:	f107 0218 	add.w	r2, r7, #24
 8012d5e:	f107 011c 	add.w	r1, r7, #28
 8012d62:	f000 f972 	bl	801304a <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfRiEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESB_E4typeEEDpOT0_>
 8012d66:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012d6a:	4619      	mov	r1, r3
 8012d6c:	68f8      	ldr	r0, [r7, #12]
 8012d6e:	f000 f98d 	bl	801308c <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>
 8012d72:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7ff ff5a 	bl	8012c30 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>
    } else {
        printf("Using default SD Max\n");
        return std::make_shared<SigmaDelta>(pin, ptrSP);
    }
}
 8012d7c:	e016      	b.n	8012dac <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x160>
        printf("Using default SD Max\n");
 8012d7e:	4813      	ldr	r0, [pc, #76]	@ (8012dcc <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x180>)
 8012d80:	f016 fb30 	bl	80293e4 <puts>
        return std::make_shared<SigmaDelta>(pin, ptrSP);
 8012d84:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8012d88:	f107 0218 	add.w	r2, r7, #24
 8012d8c:	f107 011c 	add.w	r1, r7, #28
 8012d90:	4618      	mov	r0, r3
 8012d92:	f000 f98e 	bl	80130b2 <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESA_E4typeEEDpOT0_>
 8012d96:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	68f8      	ldr	r0, [r7, #12]
 8012d9e:	f000 f975 	bl	801308c <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>
 8012da2:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7ff ff42 	bl	8012c30 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>
}
 8012dac:	68f8      	ldr	r0, [r7, #12]
 8012dae:	37c4      	adds	r7, #196	@ 0xc4
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd90      	pop	{r4, r7, pc}
 8012db4:	0802aa20 	.word	0x0802aa20
 8012db8:	0802aa28 	.word	0x0802aa28
 8012dbc:	0802aa30 	.word	0x0802aa30
 8012dc0:	0802aa38 	.word	0x0802aa38
 8012dc4:	0802aa6c 	.word	0x0802aa6c
 8012dc8:	0802aa74 	.word	0x0802aa74
 8012dcc:	0802aa88 	.word	0x0802aa88

08012dd0 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf>:

SigmaDelta::SigmaDelta(const std::string& pin, volatile float* ptrSP) :
 8012dd0:	b590      	push	{r4, r7, lr}
 8012dd2:	b085      	sub	sp, #20
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	60f8      	str	r0, [r7, #12]
 8012dd8:	60b9      	str	r1, [r7, #8]
 8012dda:	607a      	str	r2, [r7, #4]
    SDmax(PID_SD_MAX - 1),
    setPoint(0),
    SDaccumulator(0),
    SDdirection(false),
    SDpin(new Pin(pin, OUTPUT)),
    ptrSP(ptrSP) {}
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7fe ffae 	bl	8011d40 <_ZN6ModuleC1Ev>
 8012de4:	4a14      	ldr	r2, [pc, #80]	@ (8012e38 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf+0x68>)
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	601a      	str	r2, [r3, #0]
    pin(pin),
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	3318      	adds	r3, #24
 8012dee:	68b9      	ldr	r1, [r7, #8]
 8012df0:	4618      	mov	r0, r3
 8012df2:	f015 fee8 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SDmax(PID_SD_MAX - 1),
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	22ff      	movs	r2, #255	@ 0xff
 8012dfa:	631a      	str	r2, [r3, #48]	@ 0x30
    setPoint(0),
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	635a      	str	r2, [r3, #52]	@ 0x34
    SDaccumulator(0),
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	2200      	movs	r2, #0
 8012e06:	639a      	str	r2, [r3, #56]	@ 0x38
    SDdirection(false),
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    SDpin(new Pin(pin, OUTPUT)),
 8012e10:	2040      	movs	r0, #64	@ 0x40
 8012e12:	f015 fbcd 	bl	80285b0 <_Znwj>
 8012e16:	4603      	mov	r3, r0
 8012e18:	461c      	mov	r4, r3
 8012e1a:	2201      	movs	r2, #1
 8012e1c:	68b9      	ldr	r1, [r7, #8]
 8012e1e:	4620      	mov	r0, r4
 8012e20:	f7f1 fec6 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	641c      	str	r4, [r3, #64]	@ 0x40
    ptrSP(ptrSP) {}
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	687a      	ldr	r2, [r7, #4]
 8012e2c:	645a      	str	r2, [r3, #68]	@ 0x44
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	4618      	mov	r0, r3
 8012e32:	3714      	adds	r7, #20
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd90      	pop	{r4, r7, pc}
 8012e38:	0802b4dc 	.word	0x0802b4dc

08012e3c <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi>:

SigmaDelta::SigmaDelta(const std::string& pin, volatile float* ptrSP, int SDmax) :
 8012e3c:	b590      	push	{r4, r7, lr}
 8012e3e:	b085      	sub	sp, #20
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	60f8      	str	r0, [r7, #12]
 8012e44:	60b9      	str	r1, [r7, #8]
 8012e46:	607a      	str	r2, [r7, #4]
 8012e48:	603b      	str	r3, [r7, #0]
    SDmax(CONFINE(SDmax, 0, PID_SD_MAX - 1)),
    setPoint(0),
    SDaccumulator(0),
    SDdirection(false),
    SDpin(new Pin(pin, OUTPUT)),
    ptrSP(ptrSP) {}
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7fe ff77 	bl	8011d40 <_ZN6ModuleC1Ev>
 8012e52:	4a19      	ldr	r2, [pc, #100]	@ (8012eb8 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x7c>)
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	601a      	str	r2, [r3, #0]
    pin(pin),
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	3318      	adds	r3, #24
 8012e5c:	68b9      	ldr	r1, [r7, #8]
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f015 feb1 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SDmax(CONFINE(SDmax, 0, PID_SD_MAX - 1)),
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	db04      	blt.n	8012e74 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x38>
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	2bff      	cmp	r3, #255	@ 0xff
 8012e6e:	bfa8      	it	ge
 8012e70:	23ff      	movge	r3, #255	@ 0xff
 8012e72:	e000      	b.n	8012e76 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x3a>
 8012e74:	2300      	movs	r3, #0
 8012e76:	68fa      	ldr	r2, [r7, #12]
 8012e78:	6313      	str	r3, [r2, #48]	@ 0x30
    setPoint(0),
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	635a      	str	r2, [r3, #52]	@ 0x34
    SDaccumulator(0),
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	2200      	movs	r2, #0
 8012e84:	639a      	str	r2, [r3, #56]	@ 0x38
    SDdirection(false),
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	2200      	movs	r2, #0
 8012e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    SDpin(new Pin(pin, OUTPUT)),
 8012e8e:	2040      	movs	r0, #64	@ 0x40
 8012e90:	f015 fb8e 	bl	80285b0 <_Znwj>
 8012e94:	4603      	mov	r3, r0
 8012e96:	461c      	mov	r4, r3
 8012e98:	2201      	movs	r2, #1
 8012e9a:	68b9      	ldr	r1, [r7, #8]
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	f7f1 fe87 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	641c      	str	r4, [r3, #64]	@ 0x40
    ptrSP(ptrSP) {}
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	687a      	ldr	r2, [r7, #4]
 8012eaa:	645a      	str	r2, [r3, #68]	@ 0x44
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3714      	adds	r7, #20
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd90      	pop	{r4, r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	0802b4dc 	.word	0x0802b4dc

08012ebc <_ZN10SigmaDelta6updateEv>:
    newSdSP = CONFINE(newSdSP, 0, 100);
    // Scale the percentage to fit within the range of PID_SD_MAX
    this->setPoint = (newSdSP * (PID_SD_MAX - 1)) / 100;
}

void SigmaDelta::update() {
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b084      	sub	sp, #16
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
    // Read set point from the data source
    float newSP = *ptrSP;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	60fb      	str	r3, [r7, #12]

    // Scale from 0-100% to 0-SDmax
    int scaledSP = static_cast<int>((newSP / 100.0f) * SDmax);
 8012ecc:	edd7 7a03 	vldr	s15, [r7, #12]
 8012ed0:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8012fe8 <_ZN10SigmaDelta6updateEv+0x12c>
 8012ed4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012edc:	ee07 3a90 	vmov	s15, r3
 8012ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012eec:	ee17 3a90 	vmov	r3, s15
 8012ef0:	60bb      	str	r3, [r7, #8]

    // Check if the setpoint has changed
    if (scaledSP != setPoint) {
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012ef6:	68ba      	ldr	r2, [r7, #8]
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	d00f      	beq.n	8012f1c <_ZN10SigmaDelta6updateEv+0x60>
        setPoint = CONFINE(scaledSP, 0, SDmax);
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	db09      	blt.n	8012f16 <_ZN10SigmaDelta6updateEv+0x5a>
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f06:	68ba      	ldr	r2, [r7, #8]
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	dd02      	ble.n	8012f12 <_ZN10SigmaDelta6updateEv+0x56>
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f10:	e002      	b.n	8012f18 <_ZN10SigmaDelta6updateEv+0x5c>
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	e000      	b.n	8012f18 <_ZN10SigmaDelta6updateEv+0x5c>
 8012f16:	2300      	movs	r3, #0
 8012f18:	687a      	ldr	r2, [r7, #4]
 8012f1a:	6353      	str	r3, [r2, #52]	@ 0x34
    }

    // Sigma-Delta modulation logic
    if (setPoint <= 0) {
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	dc06      	bgt.n	8012f32 <_ZN10SigmaDelta6updateEv+0x76>
        SDpin->set(false);
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f28:	2100      	movs	r1, #0
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7f1 ffea 	bl	8004f04 <_ZN3Pin3setEb>
        return;
 8012f30:	e057      	b.n	8012fe2 <_ZN10SigmaDelta6updateEv+0x126>
    } else if (setPoint >= SDmax) {
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f3a:	429a      	cmp	r2, r3
 8012f3c:	db06      	blt.n	8012f4c <_ZN10SigmaDelta6updateEv+0x90>
        SDpin->set(true);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f42:	2101      	movs	r1, #1
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7f1 ffdd 	bl	8004f04 <_ZN3Pin3setEb>
        return;
 8012f4a:	e04a      	b.n	8012fe2 <_ZN10SigmaDelta6updateEv+0x126>
    }

    SDaccumulator = CONFINE(SDaccumulator, -SDmax, SDmax << 1);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f54:	425b      	negs	r3, r3
 8012f56:	429a      	cmp	r2, r3
 8012f58:	da03      	bge.n	8012f62 <_ZN10SigmaDelta6updateEv+0xa6>
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f5e:	425b      	negs	r3, r3
 8012f60:	e007      	b.n	8012f72 <_ZN10SigmaDelta6updateEv+0xb6>
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f6a:	005b      	lsls	r3, r3, #1
 8012f6c:	4293      	cmp	r3, r2
 8012f6e:	bfa8      	it	ge
 8012f70:	4613      	movge	r3, r2
 8012f72:	687a      	ldr	r2, [r7, #4]
 8012f74:	6393      	str	r3, [r2, #56]	@ 0x38

    if (!SDdirection) {
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012f7c:	f083 0301 	eor.w	r3, r3, #1
 8012f80:	b2db      	uxtb	r3, r3
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d012      	beq.n	8012fac <_ZN10SigmaDelta6updateEv+0xf0>
        SDaccumulator += setPoint;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012f8e:	441a      	add	r2, r3
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	639a      	str	r2, [r3, #56]	@ 0x38
        if (SDaccumulator >= (SDmax >> 1)) {
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f9c:	105b      	asrs	r3, r3, #1
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	db16      	blt.n	8012fd0 <_ZN10SigmaDelta6updateEv+0x114>
            SDdirection = true;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2201      	movs	r2, #1
 8012fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012faa:	e011      	b.n	8012fd0 <_ZN10SigmaDelta6updateEv+0x114>
        }
    } else {
        SDaccumulator -= (SDmax - setPoint);
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012fb8:	1acb      	subs	r3, r1, r3
 8012fba:	1ad2      	subs	r2, r2, r3
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	639a      	str	r2, [r3, #56]	@ 0x38
        if (SDaccumulator <= 0) {
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	dc03      	bgt.n	8012fd0 <_ZN10SigmaDelta6updateEv+0x114>
            SDdirection = false;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2200      	movs	r2, #0
 8012fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    SDpin->set(SDdirection);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012fda:	4619      	mov	r1, r3
 8012fdc:	4610      	mov	r0, r2
 8012fde:	f7f1 ff91 	bl	8004f04 <_ZN3Pin3setEb>
}
 8012fe2:	3710      	adds	r7, #16
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}
 8012fe8:	42c80000 	.word	0x42c80000

08012fec <_ZN10SigmaDelta10slowUpdateEv>:

void SigmaDelta::slowUpdate() {}
 8012fec:	b480      	push	{r7}
 8012fee:	b083      	sub	sp, #12
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
 8012ff4:	bf00      	nop
 8012ff6:	370c      	adds	r7, #12
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffe:	4770      	bx	lr

08013000 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA6_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8013000:	b580      	push	{r7, lr}
 8013002:	b08c      	sub	sp, #48	@ 0x30
 8013004:	af02      	add	r7, sp, #8
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	60b9      	str	r1, [r7, #8]
 801300a:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 801300c:	68ba      	ldr	r2, [r7, #8]
 801300e:	f107 0314 	add.w	r3, r7, #20
 8013012:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013016:	e883 0003 	stmia.w	r3, {r0, r1}
 801301a:	f107 031c 	add.w	r3, r7, #28
 801301e:	6879      	ldr	r1, [r7, #4]
 8013020:	4618      	mov	r0, r3
 8013022:	f000 f860 	bl	80130e6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA6_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8013026:	466a      	mov	r2, sp
 8013028:	f107 0320 	add.w	r3, r7, #32
 801302c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013030:	e882 0003 	stmia.w	r2, {r0, r1}
 8013034:	69fb      	ldr	r3, [r7, #28]
 8013036:	f107 0214 	add.w	r2, r7, #20
 801303a:	ca06      	ldmia	r2, {r1, r2}
 801303c:	68f8      	ldr	r0, [r7, #12]
 801303e:	f7f4 fe08 	bl	8007c52 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8013042:	68f8      	ldr	r0, [r7, #12]
 8013044:	3728      	adds	r7, #40	@ 0x28
 8013046:	46bd      	mov	sp, r7
 8013048:	bd80      	pop	{r7, pc}

0801304a <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfRiEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESB_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 801304a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801304c:	b089      	sub	sp, #36	@ 0x24
 801304e:	af02      	add	r7, sp, #8
 8013050:	60f8      	str	r0, [r7, #12]
 8013052:	60b9      	str	r1, [r7, #8]
 8013054:	607a      	str	r2, [r7, #4]
 8013056:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8013058:	f107 0314 	add.w	r3, r7, #20
 801305c:	461e      	mov	r6, r3
 801305e:	68b8      	ldr	r0, [r7, #8]
 8013060:	f7fc fa35 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013064:	4604      	mov	r4, r0
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f000 f871 	bl	801314e <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801306c:	4605      	mov	r5, r0
 801306e:	6838      	ldr	r0, [r7, #0]
 8013070:	f7fc fa38 	bl	800f4e4 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8013074:	4603      	mov	r3, r0
 8013076:	9300      	str	r3, [sp, #0]
 8013078:	462b      	mov	r3, r5
 801307a:	4622      	mov	r2, r4
 801307c:	4631      	mov	r1, r6
 801307e:	68f8      	ldr	r0, [r7, #12]
 8013080:	f000 f870 	bl	8013164 <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8013084:	68f8      	ldr	r0, [r7, #12]
 8013086:	371c      	adds	r7, #28
 8013088:	46bd      	mov	sp, r7
 801308a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801308c <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 801308c:	b590      	push	{r4, r7, lr}
 801308e:	b083      	sub	sp, #12
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8013096:	687c      	ldr	r4, [r7, #4]
 8013098:	6838      	ldr	r0, [r7, #0]
 801309a:	f000 f883 	bl	80131a4 <_ZSt4moveIRSt10shared_ptrI10SigmaDeltaEEONSt16remove_referenceIT_E4typeEOS5_>
 801309e:	4603      	mov	r3, r0
 80130a0:	4619      	mov	r1, r3
 80130a2:	4620      	mov	r0, r4
 80130a4:	f000 f889 	bl	80131ba <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltavEEOS_IT_LS2_0EE>
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	4618      	mov	r0, r3
 80130ac:	370c      	adds	r7, #12
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd90      	pop	{r4, r7, pc}

080130b2 <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESA_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 80130b2:	b5b0      	push	{r4, r5, r7, lr}
 80130b4:	b086      	sub	sp, #24
 80130b6:	af00      	add	r7, sp, #0
 80130b8:	60f8      	str	r0, [r7, #12]
 80130ba:	60b9      	str	r1, [r7, #8]
 80130bc:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 80130be:	f107 0314 	add.w	r3, r7, #20
 80130c2:	461d      	mov	r5, r3
 80130c4:	68b8      	ldr	r0, [r7, #8]
 80130c6:	f7fc fa02 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80130ca:	4604      	mov	r4, r0
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f000 f83e 	bl	801314e <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80130d2:	4603      	mov	r3, r0
 80130d4:	4622      	mov	r2, r4
 80130d6:	4629      	mov	r1, r5
 80130d8:	68f8      	ldr	r0, [r7, #12]
 80130da:	f000 f88c 	bl	80131f6 <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 80130de:	68f8      	ldr	r0, [r7, #12]
 80130e0:	3718      	adds	r7, #24
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bdb0      	pop	{r4, r5, r7, pc}

080130e6 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA6_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 80130e6:	b580      	push	{r7, lr}
 80130e8:	b082      	sub	sp, #8
 80130ea:	af00      	add	r7, sp, #0
 80130ec:	6078      	str	r0, [r7, #4]
 80130ee:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80130f0:	6838      	ldr	r0, [r7, #0]
 80130f2:	f000 f89a 	bl	801322a <_ZN11ArduinoJson8V730HB226detail7forwardIRA6_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80130f6:	4602      	mov	r2, r0
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	4611      	mov	r1, r2
 80130fc:	4618      	mov	r0, r3
 80130fe:	f000 f89f 	bl	8013240 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA6_KcvE5adaptES5_>
 8013102:	bf00      	nop
}
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	3708      	adds	r7, #8
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}

0801310c <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE>:
    auto data = getData(src);
    auto resources = getResourceManager(src);
    return data ? data->template asIntegral<T>(resources) : T();
  }

  static bool checkJson(JsonVariantConst src) {
 801310c:	b580      	push	{r7, lr}
 801310e:	b084      	sub	sp, #16
 8013110:	af00      	add	r7, sp, #0
 8013112:	463b      	mov	r3, r7
 8013114:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8013118:	463b      	mov	r3, r7
 801311a:	4618      	mov	r0, r3
 801311c:	f7f4 fa00 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8013120:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8013122:	463b      	mov	r3, r7
 8013124:	4618      	mov	r0, r3
 8013126:	f7f4 fa07 	bl	8007538 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 801312a:	60b8      	str	r0, [r7, #8]
    return data && data->template isInteger<T>(resources);
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d008      	beq.n	8013144 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x38>
 8013132:	68b9      	ldr	r1, [r7, #8]
 8013134:	68f8      	ldr	r0, [r7, #12]
 8013136:	f000 f893 	bl	8013260 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE>
 801313a:	4603      	mov	r3, r0
 801313c:	2b00      	cmp	r3, #0
 801313e:	d001      	beq.n	8013144 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x38>
 8013140:	2301      	movs	r3, #1
 8013142:	e000      	b.n	8013146 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x3a>
 8013144:	2300      	movs	r3, #0
  }
 8013146:	4618      	mov	r0, r3
 8013148:	3710      	adds	r7, #16
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}

0801314e <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801314e:	b480      	push	{r7}
 8013150:	b083      	sub	sp, #12
 8013152:	af00      	add	r7, sp, #0
 8013154:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	4618      	mov	r0, r3
 801315a:	370c      	adds	r7, #12
 801315c:	46bd      	mov	sp, r7
 801315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013162:	4770      	bx	lr

08013164 <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8013164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013166:	b087      	sub	sp, #28
 8013168:	af02      	add	r7, sp, #8
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	607a      	str	r2, [r7, #4]
 8013170:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8013172:	68fc      	ldr	r4, [r7, #12]
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	f7fc f9aa 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801317a:	4605      	mov	r5, r0
 801317c:	6838      	ldr	r0, [r7, #0]
 801317e:	f7ff ffe6 	bl	801314e <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013182:	4606      	mov	r6, r0
 8013184:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013186:	f7fc f9ad 	bl	800f4e4 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801318a:	4603      	mov	r3, r0
 801318c:	9300      	str	r3, [sp, #0]
 801318e:	4633      	mov	r3, r6
 8013190:	462a      	mov	r2, r5
 8013192:	68b9      	ldr	r1, [r7, #8]
 8013194:	4620      	mov	r0, r4
 8013196:	f000 f8c1 	bl	801331c <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	4618      	mov	r0, r3
 801319e:	3714      	adds	r7, #20
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080131a4 <_ZSt4moveIRSt10shared_ptrI10SigmaDeltaEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80131a4:	b480      	push	{r7}
 80131a6:	b083      	sub	sp, #12
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	4618      	mov	r0, r3
 80131b0:	370c      	adds	r7, #12
 80131b2:	46bd      	mov	sp, r7
 80131b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b8:	4770      	bx	lr

080131ba <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltavEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 80131ba:	b580      	push	{r7, lr}
 80131bc:	b082      	sub	sp, #8
 80131be:	af00      	add	r7, sp, #0
 80131c0:	6078      	str	r0, [r7, #4]
 80131c2:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	681a      	ldr	r2, [r3, #0]
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	601a      	str	r2, [r3, #0]
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	3304      	adds	r3, #4
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7f9 ff91 	bl	800d0f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	1d1a      	adds	r2, r3, #4
 80131da:	683b      	ldr	r3, [r7, #0]
 80131dc:	3304      	adds	r3, #4
 80131de:	4619      	mov	r1, r3
 80131e0:	4610      	mov	r0, r2
 80131e2:	f7fa fb48 	bl	800d876 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	2200      	movs	r2, #0
 80131ea:	601a      	str	r2, [r3, #0]
	}
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	4618      	mov	r0, r3
 80131f0:	3708      	adds	r7, #8
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}

080131f6 <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80131f6:	b5b0      	push	{r4, r5, r7, lr}
 80131f8:	b084      	sub	sp, #16
 80131fa:	af00      	add	r7, sp, #0
 80131fc:	60f8      	str	r0, [r7, #12]
 80131fe:	60b9      	str	r1, [r7, #8]
 8013200:	607a      	str	r2, [r7, #4]
 8013202:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8013204:	68fc      	ldr	r4, [r7, #12]
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f7fc f961 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801320c:	4605      	mov	r5, r0
 801320e:	6838      	ldr	r0, [r7, #0]
 8013210:	f7ff ff9d 	bl	801314e <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013214:	4603      	mov	r3, r0
 8013216:	462a      	mov	r2, r5
 8013218:	68b9      	ldr	r1, [r7, #8]
 801321a:	4620      	mov	r0, r4
 801321c:	f000 f8ac 	bl	8013378 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	4618      	mov	r0, r3
 8013224:	3710      	adds	r7, #16
 8013226:	46bd      	mov	sp, r7
 8013228:	bdb0      	pop	{r4, r5, r7, pc}

0801322a <_ZN11ArduinoJson8V730HB226detail7forwardIRA6_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 801322a:	b480      	push	{r7}
 801322c:	b083      	sub	sp, #12
 801322e:	af00      	add	r7, sp, #0
 8013230:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8013232:	687b      	ldr	r3, [r7, #4]
}
 8013234:	4618      	mov	r0, r3
 8013236:	370c      	adds	r7, #12
 8013238:	46bd      	mov	sp, r7
 801323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323e:	4770      	bx	lr

08013240 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA6_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
 8013248:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 801324a:	2301      	movs	r3, #1
 801324c:	2205      	movs	r2, #5
 801324e:	6839      	ldr	r1, [r7, #0]
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	f7f2 f83f 	bl	80052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8013256:	6878      	ldr	r0, [r7, #4]
 8013258:	3708      	adds	r7, #8
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
	...

08013260 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE>:
  bool isInteger(const ResourceManager* resources) const {
 8013260:	b580      	push	{r7, lr}
 8013262:	b084      	sub	sp, #16
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
 8013268:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 801326a:	6839      	ldr	r1, [r7, #0]
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f7f3 f98d 	bl	800658c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8013272:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	791b      	ldrb	r3, [r3, #4]
 8013278:	3b0a      	subs	r3, #10
 801327a:	2b12      	cmp	r3, #18
 801327c:	d848      	bhi.n	8013310 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb0>
 801327e:	a201      	add	r2, pc, #4	@ (adr r2, 8013284 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0x24>)
 8013280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013284:	080132d1 	.word	0x080132d1
 8013288:	08013311 	.word	0x08013311
 801328c:	080132df 	.word	0x080132df
 8013290:	08013311 	.word	0x08013311
 8013294:	08013311 	.word	0x08013311
 8013298:	08013311 	.word	0x08013311
 801329c:	08013311 	.word	0x08013311
 80132a0:	08013311 	.word	0x08013311
 80132a4:	08013311 	.word	0x08013311
 80132a8:	08013311 	.word	0x08013311
 80132ac:	08013311 	.word	0x08013311
 80132b0:	08013311 	.word	0x08013311
 80132b4:	08013311 	.word	0x08013311
 80132b8:	08013311 	.word	0x08013311
 80132bc:	08013311 	.word	0x08013311
 80132c0:	08013311 	.word	0x08013311
 80132c4:	080132ed 	.word	0x080132ed
 80132c8:	08013311 	.word	0x08013311
 80132cc:	080132ff 	.word	0x080132ff
        return canConvertNumber<T>(content_.asUint32);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	4618      	mov	r0, r3
 80132d6:	f7fc fe3c 	bl	800ff52 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80132da:	4603      	mov	r3, r0
 80132dc:	e019      	b.n	8013312 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(content_.asInt32);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7fc fe47 	bl	800ff76 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 80132e8:	4603      	mov	r3, r0
 80132ea:	e012      	b.n	8013312 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asUint64);
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f2:	4610      	mov	r0, r2
 80132f4:	4619      	mov	r1, r3
 80132f6:	f7fc fe49 	bl	800ff8c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80132fa:	4603      	mov	r3, r0
 80132fc:	e009      	b.n	8013312 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asInt64);
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013304:	4610      	mov	r0, r2
 8013306:	4619      	mov	r1, r3
 8013308:	f7fc fe58 	bl	800ffbc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 801330c:	4603      	mov	r3, r0
 801330e:	e000      	b.n	8013312 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return false;
 8013310:	2300      	movs	r3, #0
  }
 8013312:	4618      	mov	r0, r3
 8013314:	3710      	adds	r7, #16
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop

0801331c <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 801331c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013320:	b086      	sub	sp, #24
 8013322:	af02      	add	r7, sp, #8
 8013324:	60f8      	str	r0, [r7, #12]
 8013326:	60b9      	str	r1, [r7, #8]
 8013328:	607a      	str	r2, [r7, #4]
 801332a:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	2200      	movs	r2, #0
 8013330:	601a      	str	r2, [r3, #0]
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	1d1c      	adds	r4, r3, #4
 8013336:	68fd      	ldr	r5, [r7, #12]
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f7fc f8c8 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801333e:	4680      	mov	r8, r0
 8013340:	6838      	ldr	r0, [r7, #0]
 8013342:	f7ff ff04 	bl	801314e <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013346:	4606      	mov	r6, r0
 8013348:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801334a:	f7fc f8cb 	bl	800f4e4 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801334e:	4603      	mov	r3, r0
 8013350:	9301      	str	r3, [sp, #4]
 8013352:	9600      	str	r6, [sp, #0]
 8013354:	4643      	mov	r3, r8
 8013356:	68ba      	ldr	r2, [r7, #8]
 8013358:	4629      	mov	r1, r5
 801335a:	4620      	mov	r0, r4
 801335c:	f000 f833 	bl	80133c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfRiEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	4619      	mov	r1, r3
 8013366:	68f8      	ldr	r0, [r7, #12]
 8013368:	f000 f883 	bl	8013472 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	4618      	mov	r0, r3
 8013370:	3710      	adds	r7, #16
 8013372:	46bd      	mov	sp, r7
 8013374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013378 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8013378:	b5f0      	push	{r4, r5, r6, r7, lr}
 801337a:	b087      	sub	sp, #28
 801337c:	af02      	add	r7, sp, #8
 801337e:	60f8      	str	r0, [r7, #12]
 8013380:	60b9      	str	r1, [r7, #8]
 8013382:	607a      	str	r2, [r7, #4]
 8013384:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	2200      	movs	r2, #0
 801338a:	601a      	str	r2, [r3, #0]
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	1d1c      	adds	r4, r3, #4
 8013390:	68fd      	ldr	r5, [r7, #12]
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f7fc f89b 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013398:	4606      	mov	r6, r0
 801339a:	6838      	ldr	r0, [r7, #0]
 801339c:	f7ff fed7 	bl	801314e <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80133a0:	4603      	mov	r3, r0
 80133a2:	9300      	str	r3, [sp, #0]
 80133a4:	4633      	mov	r3, r6
 80133a6:	68ba      	ldr	r2, [r7, #8]
 80133a8:	4629      	mov	r1, r5
 80133aa:	4620      	mov	r0, r4
 80133ac:	f000 f86c 	bl	8013488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	4619      	mov	r1, r3
 80133b6:	68f8      	ldr	r0, [r7, #12]
 80133b8:	f000 f85b 	bl	8013472 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	4618      	mov	r0, r3
 80133c0:	3714      	adds	r7, #20
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080133c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfRiEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 80133c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133ca:	b08c      	sub	sp, #48	@ 0x30
 80133cc:	af02      	add	r7, sp, #8
 80133ce:	60f8      	str	r0, [r7, #12]
 80133d0:	60b9      	str	r1, [r7, #8]
 80133d2:	607a      	str	r2, [r7, #4]
 80133d4:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 80133d6:	687a      	ldr	r2, [r7, #4]
 80133d8:	f107 031c 	add.w	r3, r7, #28
 80133dc:	4611      	mov	r1, r2
 80133de:	4618      	mov	r0, r3
 80133e0:	f000 f8a0 	bl	8013524 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 80133e4:	f107 0314 	add.w	r3, r7, #20
 80133e8:	f107 021c 	add.w	r2, r7, #28
 80133ec:	4611      	mov	r1, r2
 80133ee:	4618      	mov	r0, r3
 80133f0:	f000 f8b1 	bl	8013556 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 80133f4:	f107 0314 	add.w	r3, r7, #20
 80133f8:	4618      	mov	r0, r3
 80133fa:	f000 f8d4 	bl	80135a6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 80133fe:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 8013400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013402:	4619      	mov	r1, r3
 8013404:	2054      	movs	r0, #84	@ 0x54
 8013406:	f7f7 fa43 	bl	800a890 <_ZnwjPv>
 801340a:	4604      	mov	r4, r0
 801340c:	6838      	ldr	r0, [r7, #0]
 801340e:	f7fc f85e 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013412:	4605      	mov	r5, r0
 8013414:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8013416:	f7ff fe9a 	bl	801314e <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801341a:	4606      	mov	r6, r0
 801341c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801341e:	f7fc f861 	bl	800f4e4 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8013422:	4603      	mov	r3, r0
 8013424:	9300      	str	r3, [sp, #0]
 8013426:	4633      	mov	r3, r6
 8013428:	462a      	mov	r2, r5
 801342a:	4641      	mov	r1, r8
 801342c:	4620      	mov	r0, r4
 801342e:	f000 f8c9 	bl	80135c4 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_>
 8013432:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 8013434:	f107 0314 	add.w	r3, r7, #20
 8013438:	2100      	movs	r1, #0
 801343a:	4618      	mov	r0, r3
 801343c:	f000 f8f6 	bl	801362c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	6a3a      	ldr	r2, [r7, #32]
 8013444:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8013446:	6a38      	ldr	r0, [r7, #32]
 8013448:	f000 f8ff 	bl	801364a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801344c:	4602      	mov	r2, r0
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	601a      	str	r2, [r3, #0]
	}
 8013452:	f107 0314 	add.w	r3, r7, #20
 8013456:	4618      	mov	r0, r3
 8013458:	f000 f890 	bl	801357c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 801345c:	f107 031c 	add.w	r3, r7, #28
 8013460:	4618      	mov	r0, r3
 8013462:	f000 f86c 	bl	801353e <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	4618      	mov	r0, r3
 801346a:	3728      	adds	r7, #40	@ 0x28
 801346c:	46bd      	mov	sp, r7
 801346e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013472 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8013472:	b480      	push	{r7}
 8013474:	b083      	sub	sp, #12
 8013476:	af00      	add	r7, sp, #0
 8013478:	6078      	str	r0, [r7, #4]
 801347a:	6039      	str	r1, [r7, #0]
	{ }
 801347c:	bf00      	nop
 801347e:	370c      	adds	r7, #12
 8013480:	46bd      	mov	sp, r7
 8013482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013486:	4770      	bx	lr

08013488 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8013488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801348a:	b08b      	sub	sp, #44	@ 0x2c
 801348c:	af00      	add	r7, sp, #0
 801348e:	60f8      	str	r0, [r7, #12]
 8013490:	60b9      	str	r1, [r7, #8]
 8013492:	607a      	str	r2, [r7, #4]
 8013494:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8013496:	687a      	ldr	r2, [r7, #4]
 8013498:	f107 031c 	add.w	r3, r7, #28
 801349c:	4611      	mov	r1, r2
 801349e:	4618      	mov	r0, r3
 80134a0:	f000 f840 	bl	8013524 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 80134a4:	f107 0314 	add.w	r3, r7, #20
 80134a8:	f107 021c 	add.w	r2, r7, #28
 80134ac:	4611      	mov	r1, r2
 80134ae:	4618      	mov	r0, r3
 80134b0:	f000 f851 	bl	8013556 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 80134b4:	f107 0314 	add.w	r3, r7, #20
 80134b8:	4618      	mov	r0, r3
 80134ba:	f000 f874 	bl	80135a6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 80134be:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 80134c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134c2:	4619      	mov	r1, r3
 80134c4:	2054      	movs	r0, #84	@ 0x54
 80134c6:	f7f7 f9e3 	bl	800a890 <_ZnwjPv>
 80134ca:	4604      	mov	r4, r0
 80134cc:	6838      	ldr	r0, [r7, #0]
 80134ce:	f7fb fffe 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80134d2:	4605      	mov	r5, r0
 80134d4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80134d6:	f7ff fe3a 	bl	801314e <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80134da:	4603      	mov	r3, r0
 80134dc:	462a      	mov	r2, r5
 80134de:	4631      	mov	r1, r6
 80134e0:	4620      	mov	r0, r4
 80134e2:	f000 f8c1 	bl	8013668 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_>
 80134e6:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 80134e8:	f107 0314 	add.w	r3, r7, #20
 80134ec:	2100      	movs	r1, #0
 80134ee:	4618      	mov	r0, r3
 80134f0:	f000 f89c 	bl	801362c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	6a3a      	ldr	r2, [r7, #32]
 80134f8:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 80134fa:	6a38      	ldr	r0, [r7, #32]
 80134fc:	f000 f8a5 	bl	801364a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8013500:	4602      	mov	r2, r0
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	601a      	str	r2, [r3, #0]
	}
 8013506:	f107 0314 	add.w	r3, r7, #20
 801350a:	4618      	mov	r0, r3
 801350c:	f000 f836 	bl	801357c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8013510:	f107 031c 	add.w	r3, r7, #28
 8013514:	4618      	mov	r0, r3
 8013516:	f000 f812 	bl	801353e <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	4618      	mov	r0, r3
 801351e:	372c      	adds	r7, #44	@ 0x2c
 8013520:	46bd      	mov	sp, r7
 8013522:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013524 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
 8013524:	b580      	push	{r7, lr}
 8013526:	b082      	sub	sp, #8
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	6039      	str	r1, [r7, #0]
 801352e:	6878      	ldr	r0, [r7, #4]
 8013530:	f000 f8c8 	bl	80136c4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	4618      	mov	r0, r3
 8013538:	3708      	adds	r7, #8
 801353a:	46bd      	mov	sp, r7
 801353c:	bd80      	pop	{r7, pc}

0801353e <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801353e:	b580      	push	{r7, lr}
 8013540:	b082      	sub	sp, #8
 8013542:	af00      	add	r7, sp, #0
 8013544:	6078      	str	r0, [r7, #4]
 8013546:	6878      	ldr	r0, [r7, #4]
 8013548:	f000 f8c7 	bl	80136da <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	4618      	mov	r0, r3
 8013550:	3708      	adds	r7, #8
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}

08013556 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 8013556:	b580      	push	{r7, lr}
 8013558:	b082      	sub	sp, #8
 801355a:	af00      	add	r7, sp, #0
 801355c:	6078      	str	r0, [r7, #4]
 801355e:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8013560:	2101      	movs	r1, #1
 8013562:	6838      	ldr	r0, [r7, #0]
 8013564:	f000 f8c4 	bl	80136f0 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8013568:	4603      	mov	r3, r0
 801356a:	461a      	mov	r2, r3
 801356c:	6839      	ldr	r1, [r7, #0]
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	f000 f8cd 	bl	801370e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 8013574:	6878      	ldr	r0, [r7, #4]
 8013576:	3708      	adds	r7, #8
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}

0801357c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	685b      	ldr	r3, [r3, #4]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d007      	beq.n	801359c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	6818      	ldr	r0, [r3, #0]
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	685b      	ldr	r3, [r3, #4]
 8013594:	2201      	movs	r2, #1
 8013596:	4619      	mov	r1, r3
 8013598:	f000 f8cd 	bl	8013736 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	4618      	mov	r0, r3
 80135a0:	3708      	adds	r7, #8
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd80      	pop	{r7, pc}

080135a6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 80135a6:	b580      	push	{r7, lr}
 80135a8:	b082      	sub	sp, #8
 80135aa:	af00      	add	r7, sp, #0
 80135ac:	6078      	str	r0, [r7, #4]
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	685b      	ldr	r3, [r3, #4]
 80135b2:	4618      	mov	r0, r3
 80135b4:	f000 f8ce 	bl	8013754 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 80135b8:	4603      	mov	r3, r0
 80135ba:	4618      	mov	r0, r3
 80135bc:	3708      	adds	r7, #8
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd80      	pop	{r7, pc}
	...

080135c4 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 80135c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135c6:	b087      	sub	sp, #28
 80135c8:	af02      	add	r7, sp, #8
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	7239      	strb	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
 80135d0:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7fa fe03 	bl	800e1e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80135da:	4a13      	ldr	r2, [pc, #76]	@ (8013628 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_+0x64>)
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	601a      	str	r2, [r3, #0]
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	330c      	adds	r3, #12
 80135e4:	4621      	mov	r1, r4
 80135e6:	4618      	mov	r0, r3
 80135e8:	f000 f8bf 	bl	801376a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 80135ec:	68f8      	ldr	r0, [r7, #12]
 80135ee:	f000 f82c 	bl	801364a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80135f2:	4604      	mov	r4, r0
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f7fb ff6a 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80135fa:	4605      	mov	r5, r0
 80135fc:	6838      	ldr	r0, [r7, #0]
 80135fe:	f7ff fda6 	bl	801314e <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013602:	4606      	mov	r6, r0
 8013604:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013606:	f7fb ff6d 	bl	800f4e4 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801360a:	4603      	mov	r3, r0
 801360c:	f107 0008 	add.w	r0, r7, #8
 8013610:	9300      	str	r3, [sp, #0]
 8013612:	4633      	mov	r3, r6
 8013614:	462a      	mov	r2, r5
 8013616:	4621      	mov	r1, r4
 8013618:	f000 f8b6 	bl	8013788 <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfRiEEEvRS0_PT_DpOT0_>
	}
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	4618      	mov	r0, r3
 8013620:	3714      	adds	r7, #20
 8013622:	46bd      	mov	sp, r7
 8013624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013626:	bf00      	nop
 8013628:	0802b4c0 	.word	0x0802b4c0

0801362c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 801362c:	b480      	push	{r7}
 801362e:	b083      	sub	sp, #12
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
 8013634:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	2200      	movs	r2, #0
 801363a:	605a      	str	r2, [r3, #4]
	return *this;
 801363c:	687b      	ldr	r3, [r7, #4]
      }
 801363e:	4618      	mov	r0, r3
 8013640:	370c      	adds	r7, #12
 8013642:	46bd      	mov	sp, r7
 8013644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013648:	4770      	bx	lr

0801364a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 801364a:	b580      	push	{r7, lr}
 801364c:	b082      	sub	sp, #8
 801364e:	af00      	add	r7, sp, #0
 8013650:	6078      	str	r0, [r7, #4]
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	330c      	adds	r3, #12
 8013656:	4618      	mov	r0, r3
 8013658:	f000 f8b2 	bl	80137c0 <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE6_M_ptrEv>
 801365c:	4603      	mov	r3, r0
 801365e:	4618      	mov	r0, r3
 8013660:	3708      	adds	r7, #8
 8013662:	46bd      	mov	sp, r7
 8013664:	bd80      	pop	{r7, pc}
	...

08013668 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8013668:	b5b0      	push	{r4, r5, r7, lr}
 801366a:	b084      	sub	sp, #16
 801366c:	af00      	add	r7, sp, #0
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	7239      	strb	r1, [r7, #8]
 8013672:	607a      	str	r2, [r7, #4]
 8013674:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	4618      	mov	r0, r3
 801367a:	f7fa fdb1 	bl	800e1e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 801367e:	4a10      	ldr	r2, [pc, #64]	@ (80136c0 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_+0x58>)
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	601a      	str	r2, [r3, #0]
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	330c      	adds	r3, #12
 8013688:	4621      	mov	r1, r4
 801368a:	4618      	mov	r0, r3
 801368c:	f000 f86d 	bl	801376a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8013690:	68f8      	ldr	r0, [r7, #12]
 8013692:	f7ff ffda 	bl	801364a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8013696:	4604      	mov	r4, r0
 8013698:	6878      	ldr	r0, [r7, #4]
 801369a:	f7fb ff18 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801369e:	4605      	mov	r5, r0
 80136a0:	6838      	ldr	r0, [r7, #0]
 80136a2:	f7ff fd54 	bl	801314e <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80136a6:	4603      	mov	r3, r0
 80136a8:	f107 0008 	add.w	r0, r7, #8
 80136ac:	462a      	mov	r2, r5
 80136ae:	4621      	mov	r1, r4
 80136b0:	f000 f892 	bl	80137d8 <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfEEEvRS0_PT_DpOT0_>
	}
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	4618      	mov	r0, r3
 80136b8:	3710      	adds	r7, #16
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bdb0      	pop	{r4, r5, r7, pc}
 80136be:	bf00      	nop
 80136c0:	0802b4c0 	.word	0x0802b4c0

080136c4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80136c4:	b480      	push	{r7}
 80136c6:	b083      	sub	sp, #12
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	4618      	mov	r0, r3
 80136d0:	370c      	adds	r7, #12
 80136d2:	46bd      	mov	sp, r7
 80136d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d8:	4770      	bx	lr

080136da <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80136da:	b480      	push	{r7}
 80136dc:	b083      	sub	sp, #12
 80136de:	af00      	add	r7, sp, #0
 80136e0:	6078      	str	r0, [r7, #4]
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	4618      	mov	r0, r3
 80136e6:	370c      	adds	r7, #12
 80136e8:	46bd      	mov	sp, r7
 80136ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ee:	4770      	bx	lr

080136f0 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b082      	sub	sp, #8
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
 80136f8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80136fa:	2200      	movs	r2, #0
 80136fc:	6839      	ldr	r1, [r7, #0]
 80136fe:	6878      	ldr	r0, [r7, #4]
 8013700:	f000 f882 	bl	8013808 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8013704:	4603      	mov	r3, r0
 8013706:	4618      	mov	r0, r3
 8013708:	3708      	adds	r7, #8
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}

0801370e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 801370e:	b580      	push	{r7, lr}
 8013710:	b084      	sub	sp, #16
 8013712:	af00      	add	r7, sp, #0
 8013714:	60f8      	str	r0, [r7, #12]
 8013716:	60b9      	str	r1, [r7, #8]
 8013718:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801371a:	68b8      	ldr	r0, [r7, #8]
 801371c:	f000 f8a2 	bl	8013864 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8013720:	4602      	mov	r2, r0
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	601a      	str	r2, [r3, #0]
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	687a      	ldr	r2, [r7, #4]
 801372a:	605a      	str	r2, [r3, #4]
      { }
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	4618      	mov	r0, r3
 8013730:	3710      	adds	r7, #16
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}

08013736 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8013736:	b580      	push	{r7, lr}
 8013738:	b084      	sub	sp, #16
 801373a:	af00      	add	r7, sp, #0
 801373c:	60f8      	str	r0, [r7, #12]
 801373e:	60b9      	str	r1, [r7, #8]
 8013740:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8013742:	687a      	ldr	r2, [r7, #4]
 8013744:	68b9      	ldr	r1, [r7, #8]
 8013746:	68f8      	ldr	r0, [r7, #12]
 8013748:	f000 f897 	bl	801387a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 801374c:	bf00      	nop
 801374e:	3710      	adds	r7, #16
 8013750:	46bd      	mov	sp, r7
 8013752:	bd80      	pop	{r7, pc}

08013754 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 8013754:	b480      	push	{r7}
 8013756:	b083      	sub	sp, #12
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
      return __ptr;
 801375c:	687b      	ldr	r3, [r7, #4]
    }
 801375e:	4618      	mov	r0, r3
 8013760:	370c      	adds	r7, #12
 8013762:	46bd      	mov	sp, r7
 8013764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013768:	4770      	bx	lr

0801376a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 801376a:	b580      	push	{r7, lr}
 801376c:	b082      	sub	sp, #8
 801376e:	af00      	add	r7, sp, #0
 8013770:	6078      	str	r0, [r7, #4]
 8013772:	7039      	strb	r1, [r7, #0]
 8013774:	463b      	mov	r3, r7
 8013776:	4619      	mov	r1, r3
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f7fa ff4b 	bl	800e614 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	4618      	mov	r0, r3
 8013782:	3708      	adds	r7, #8
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}

08013788 <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfRiEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 8013788:	b5b0      	push	{r4, r5, r7, lr}
 801378a:	b084      	sub	sp, #16
 801378c:	af00      	add	r7, sp, #0
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	60b9      	str	r1, [r7, #8]
 8013792:	607a      	str	r2, [r7, #4]
 8013794:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f7fb fe99 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801379c:	4604      	mov	r4, r0
 801379e:	6838      	ldr	r0, [r7, #0]
 80137a0:	f7ff fcd5 	bl	801314e <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80137a4:	4605      	mov	r5, r0
 80137a6:	6a38      	ldr	r0, [r7, #32]
 80137a8:	f7fb fe9c 	bl	800f4e4 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80137ac:	4603      	mov	r3, r0
 80137ae:	462a      	mov	r2, r5
 80137b0:	4621      	mov	r1, r4
 80137b2:	68b8      	ldr	r0, [r7, #8]
 80137b4:	f000 f872 	bl	801389c <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfRiEEvPT_DpOT0_>
 80137b8:	bf00      	nop
 80137ba:	3710      	adds	r7, #16
 80137bc:	46bd      	mov	sp, r7
 80137be:	bdb0      	pop	{r4, r5, r7, pc}

080137c0 <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE6_M_ptrEv>:
      _M_ptr() noexcept
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b082      	sub	sp, #8
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f000 f8a4 	bl	8013916 <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE7_M_addrEv>
 80137ce:	4603      	mov	r3, r0
 80137d0:	4618      	mov	r0, r3
 80137d2:	3708      	adds	r7, #8
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}

080137d8 <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 80137d8:	b590      	push	{r4, r7, lr}
 80137da:	b085      	sub	sp, #20
 80137dc:	af00      	add	r7, sp, #0
 80137de:	60f8      	str	r0, [r7, #12]
 80137e0:	60b9      	str	r1, [r7, #8]
 80137e2:	607a      	str	r2, [r7, #4]
 80137e4:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 80137e6:	6878      	ldr	r0, [r7, #4]
 80137e8:	f7fb fe71 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80137ec:	4604      	mov	r4, r0
 80137ee:	6838      	ldr	r0, [r7, #0]
 80137f0:	f7ff fcad 	bl	801314e <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80137f4:	4603      	mov	r3, r0
 80137f6:	461a      	mov	r2, r3
 80137f8:	4621      	mov	r1, r4
 80137fa:	68b8      	ldr	r0, [r7, #8]
 80137fc:	f000 f896 	bl	801392c <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfEEvPT_DpOT0_>
 8013800:	bf00      	nop
 8013802:	3714      	adds	r7, #20
 8013804:	46bd      	mov	sp, r7
 8013806:	bd90      	pop	{r4, r7, pc}

08013808 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013808:	b580      	push	{r7, lr}
 801380a:	b084      	sub	sp, #16
 801380c:	af00      	add	r7, sp, #0
 801380e:	60f8      	str	r0, [r7, #12]
 8013810:	60b9      	str	r1, [r7, #8]
 8013812:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8013814:	68f8      	ldr	r0, [r7, #12]
 8013816:	f000 f8c1 	bl	801399c <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 801381a:	4602      	mov	r2, r0
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	4293      	cmp	r3, r2
 8013820:	bf8c      	ite	hi
 8013822:	2301      	movhi	r3, #1
 8013824:	2300      	movls	r3, #0
 8013826:	b2db      	uxtb	r3, r3
 8013828:	2b00      	cmp	r3, #0
 801382a:	bf14      	ite	ne
 801382c:	2301      	movne	r3, #1
 801382e:	2300      	moveq	r3, #0
 8013830:	b2db      	uxtb	r3, r3
 8013832:	2b00      	cmp	r3, #0
 8013834:	d007      	beq.n	8013846 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	4a09      	ldr	r2, [pc, #36]	@ (8013860 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 801383a:	4293      	cmp	r3, r2
 801383c:	d901      	bls.n	8013842 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801383e:	f014 fecd 	bl	80285dc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8013842:	f014 fec8 	bl	80285d6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	2254      	movs	r2, #84	@ 0x54
 801384a:	fb02 f303 	mul.w	r3, r2, r3
 801384e:	4618      	mov	r0, r3
 8013850:	f014 feae 	bl	80285b0 <_Znwj>
 8013854:	4603      	mov	r3, r0
 8013856:	bf00      	nop
      }
 8013858:	4618      	mov	r0, r3
 801385a:	3710      	adds	r7, #16
 801385c:	46bd      	mov	sp, r7
 801385e:	bd80      	pop	{r7, pc}
 8013860:	030c30c3 	.word	0x030c30c3

08013864 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8013864:	b480      	push	{r7}
 8013866:	b083      	sub	sp, #12
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	4618      	mov	r0, r3
 8013870:	370c      	adds	r7, #12
 8013872:	46bd      	mov	sp, r7
 8013874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013878:	4770      	bx	lr

0801387a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 801387a:	b580      	push	{r7, lr}
 801387c:	b084      	sub	sp, #16
 801387e:	af00      	add	r7, sp, #0
 8013880:	60f8      	str	r0, [r7, #12]
 8013882:	60b9      	str	r1, [r7, #8]
 8013884:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	2254      	movs	r2, #84	@ 0x54
 801388a:	fb02 f303 	mul.w	r3, r2, r3
 801388e:	4619      	mov	r1, r3
 8013890:	68b8      	ldr	r0, [r7, #8]
 8013892:	f014 fe7c 	bl	802858e <_ZdlPvj>
      }
 8013896:	3710      	adds	r7, #16
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}

0801389c <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfRiEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 801389c:	b5b0      	push	{r4, r5, r7, lr}
 801389e:	b08c      	sub	sp, #48	@ 0x30
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	60f8      	str	r0, [r7, #12]
 80138a4:	60b9      	str	r1, [r7, #8]
 80138a6:	607a      	str	r2, [r7, #4]
 80138a8:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	4619      	mov	r1, r3
 80138ae:	2048      	movs	r0, #72	@ 0x48
 80138b0:	f7f6 ffee 	bl	800a890 <_ZnwjPv>
 80138b4:	4605      	mov	r5, r0
 80138b6:	68b8      	ldr	r0, [r7, #8]
 80138b8:	f7fb fe09 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80138bc:	4603      	mov	r3, r0
 80138be:	681c      	ldr	r4, [r3, #0]
 80138c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80138c4:	4618      	mov	r0, r3
 80138c6:	f014 fe84 	bl	80285d2 <_ZNSaIcEC1Ev>
 80138ca:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80138ce:	f107 0314 	add.w	r3, r7, #20
 80138d2:	4621      	mov	r1, r4
 80138d4:	4618      	mov	r0, r3
 80138d6:	f7ef ff8d 	bl	80037f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f7ff fc37 	bl	801314e <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80138e0:	4603      	mov	r3, r0
 80138e2:	681c      	ldr	r4, [r3, #0]
 80138e4:	6838      	ldr	r0, [r7, #0]
 80138e6:	f7fb fdfd 	bl	800f4e4 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80138ea:	4603      	mov	r3, r0
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	f107 0114 	add.w	r1, r7, #20
 80138f2:	4622      	mov	r2, r4
 80138f4:	4628      	mov	r0, r5
 80138f6:	f7ff faa1 	bl	8012e3c <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi>
 80138fa:	f107 0314 	add.w	r3, r7, #20
 80138fe:	4618      	mov	r0, r3
 8013900:	f014 ff51 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013904:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013908:	4618      	mov	r0, r3
 801390a:	f014 fe63 	bl	80285d4 <_ZNSaIcED1Ev>
    }
 801390e:	bf00      	nop
 8013910:	3730      	adds	r7, #48	@ 0x30
 8013912:	46bd      	mov	sp, r7
 8013914:	bdb0      	pop	{r4, r5, r7, pc}

08013916 <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE7_M_addrEv>:
      _M_addr() noexcept
 8013916:	b480      	push	{r7}
 8013918:	b083      	sub	sp, #12
 801391a:	af00      	add	r7, sp, #0
 801391c:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 801391e:	687b      	ldr	r3, [r7, #4]
      }
 8013920:	4618      	mov	r0, r3
 8013922:	370c      	adds	r7, #12
 8013924:	46bd      	mov	sp, r7
 8013926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392a:	4770      	bx	lr

0801392c <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 801392c:	b5b0      	push	{r4, r5, r7, lr}
 801392e:	b08c      	sub	sp, #48	@ 0x30
 8013930:	af00      	add	r7, sp, #0
 8013932:	60f8      	str	r0, [r7, #12]
 8013934:	60b9      	str	r1, [r7, #8]
 8013936:	607a      	str	r2, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	4619      	mov	r1, r3
 801393c:	2048      	movs	r0, #72	@ 0x48
 801393e:	f7f6 ffa7 	bl	800a890 <_ZnwjPv>
 8013942:	4605      	mov	r5, r0
 8013944:	68b8      	ldr	r0, [r7, #8]
 8013946:	f7fb fdc2 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801394a:	4603      	mov	r3, r0
 801394c:	681c      	ldr	r4, [r3, #0]
 801394e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013952:	4618      	mov	r0, r3
 8013954:	f014 fe3d 	bl	80285d2 <_ZNSaIcEC1Ev>
 8013958:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801395c:	f107 0314 	add.w	r3, r7, #20
 8013960:	4621      	mov	r1, r4
 8013962:	4618      	mov	r0, r3
 8013964:	f7ef ff46 	bl	80037f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013968:	6878      	ldr	r0, [r7, #4]
 801396a:	f7ff fbf0 	bl	801314e <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801396e:	4603      	mov	r3, r0
 8013970:	681a      	ldr	r2, [r3, #0]
 8013972:	f107 0314 	add.w	r3, r7, #20
 8013976:	4619      	mov	r1, r3
 8013978:	4628      	mov	r0, r5
 801397a:	f7ff fa29 	bl	8012dd0 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf>
 801397e:	f107 0314 	add.w	r3, r7, #20
 8013982:	4618      	mov	r0, r3
 8013984:	f014 ff0f 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013988:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801398c:	4618      	mov	r0, r3
 801398e:	f014 fe21 	bl	80285d4 <_ZNSaIcED1Ev>
    }
 8013992:	bf00      	nop
 8013994:	3730      	adds	r7, #48	@ 0x30
 8013996:	46bd      	mov	sp, r7
 8013998:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801399c <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801399c:	b480      	push	{r7}
 801399e:	b083      	sub	sp, #12
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80139a4:	4b03      	ldr	r3, [pc, #12]	@ (80139b4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 80139a6:	4618      	mov	r0, r3
 80139a8:	370c      	adds	r7, #12
 80139aa:	46bd      	mov	sp, r7
 80139ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b0:	4770      	bx	lr
 80139b2:	bf00      	nop
 80139b4:	01861861 	.word	0x01861861

080139b8 <_ZN10SigmaDeltaD1Ev>:
#include <string>
#include "../../remora.h"
#include "../../modules/module.h"
#include "../../drivers/pin/pin.h"

class SigmaDelta : public Module {
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b082      	sub	sp, #8
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
 80139c0:	4a08      	ldr	r2, [pc, #32]	@ (80139e4 <_ZN10SigmaDeltaD1Ev+0x2c>)
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	601a      	str	r2, [r3, #0]
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	3318      	adds	r3, #24
 80139ca:	4618      	mov	r0, r3
 80139cc:	f014 feeb 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	4618      	mov	r0, r3
 80139d4:	f7fe f9d0 	bl	8011d78 <_ZN6ModuleD1Ev>
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	4618      	mov	r0, r3
 80139dc:	3708      	adds	r7, #8
 80139de:	46bd      	mov	sp, r7
 80139e0:	bd80      	pop	{r7, pc}
 80139e2:	bf00      	nop
 80139e4:	0802b4dc 	.word	0x0802b4dc

080139e8 <_ZN10SigmaDeltaD0Ev>:
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b082      	sub	sp, #8
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
 80139f0:	6878      	ldr	r0, [r7, #4]
 80139f2:	f7ff ffe1 	bl	80139b8 <_ZN10SigmaDeltaD1Ev>
 80139f6:	2148      	movs	r1, #72	@ 0x48
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f014 fdc8 	bl	802858e <_ZdlPvj>
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	4618      	mov	r0, r3
 8013a02:	3708      	adds	r7, #8
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}

08013a08 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b082      	sub	sp, #8
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
 8013a10:	4a05      	ldr	r2, [pc, #20]	@ (8013a28 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	601a      	str	r2, [r3, #0]
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7f8 fda3 	bl	800c564 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	4618      	mov	r0, r3
 8013a22:	3708      	adds	r7, #8
 8013a24:	46bd      	mov	sp, r7
 8013a26:	bd80      	pop	{r7, pc}
 8013a28:	0802b4c0 	.word	0x0802b4c0

08013a2c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b082      	sub	sp, #8
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
 8013a34:	6878      	ldr	r0, [r7, #4]
 8013a36:	f7ff ffe7 	bl	8013a08 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8013a3a:	2154      	movs	r1, #84	@ 0x54
 8013a3c:	6878      	ldr	r0, [r7, #4]
 8013a3e:	f014 fda6 	bl	802858e <_ZdlPvj>
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	4618      	mov	r0, r3
 8013a46:	3708      	adds	r7, #8
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}

08013a4c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8013a4c:	b590      	push	{r4, r7, lr}
 8013a4e:	b083      	sub	sp, #12
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	330c      	adds	r3, #12
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f000 f856 	bl	8013b0a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8013a5e:	4604      	mov	r4, r0
 8013a60:	6878      	ldr	r0, [r7, #4]
 8013a62:	f7ff fdf2 	bl	801364a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8013a66:	4603      	mov	r3, r0
 8013a68:	4619      	mov	r1, r3
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	f000 f859 	bl	8013b22 <_ZNSt16allocator_traitsISaIvEE7destroyI10SigmaDeltaEEvRS0_PT_>
      }
 8013a70:	bf00      	nop
 8013a72:	370c      	adds	r7, #12
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bd90      	pop	{r4, r7, pc}

08013a78 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b086      	sub	sp, #24
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	330c      	adds	r3, #12
 8013a84:	4618      	mov	r0, r3
 8013a86:	f000 f840 	bl	8013b0a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8013a8a:	4602      	mov	r2, r0
 8013a8c:	f107 0314 	add.w	r3, r7, #20
 8013a90:	4611      	mov	r1, r2
 8013a92:	4618      	mov	r0, r3
 8013a94:	f7ff fd46 	bl	8013524 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8013a98:	f107 0114 	add.w	r1, r7, #20
 8013a9c:	f107 030c 	add.w	r3, r7, #12
 8013aa0:	687a      	ldr	r2, [r7, #4]
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7ff fe33 	bl	801370e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8013aa8:	6878      	ldr	r0, [r7, #4]
 8013aaa:	f7ff ffad 	bl	8013a08 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8013aae:	f107 030c 	add.w	r3, r7, #12
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7ff fd62 	bl	801357c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8013ab8:	f107 0314 	add.w	r3, r7, #20
 8013abc:	4618      	mov	r0, r3
 8013abe:	f7ff fd3e 	bl	801353e <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8013ac2:	3718      	adds	r7, #24
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}

08013ac8 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b084      	sub	sp, #16
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f7ff fdb9 	bl	801364a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8013ad8:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8013ada:	f7f6 ff25 	bl	800a928 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8013ade:	4602      	mov	r2, r0
	    ||
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	4293      	cmp	r3, r2
 8013ae4:	d005      	beq.n	8013af2 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 8013ae6:	6838      	ldr	r0, [r7, #0]
 8013ae8:	f014 fd8e 	bl	8028608 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8013aec:	4603      	mov	r3, r0
	    ||
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d001      	beq.n	8013af6 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 8013af2:	2301      	movs	r3, #1
 8013af4:	e000      	b.n	8013af8 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8013af6:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d001      	beq.n	8013b00 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	e000      	b.n	8013b02 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 8013b00:	2300      	movs	r3, #0
      }
 8013b02:	4618      	mov	r0, r3
 8013b04:	3710      	adds	r7, #16
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}

08013b0a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 8013b0a:	b580      	push	{r7, lr}
 8013b0c:	b082      	sub	sp, #8
 8013b0e:	af00      	add	r7, sp, #0
 8013b10:	6078      	str	r0, [r7, #4]
 8013b12:	6878      	ldr	r0, [r7, #4]
 8013b14:	f7fa fff9 	bl	800eb0a <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	3708      	adds	r7, #8
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}

08013b22 <_ZNSt16allocator_traitsISaIvEE7destroyI10SigmaDeltaEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 8013b22:	b580      	push	{r7, lr}
 8013b24:	b082      	sub	sp, #8
 8013b26:	af00      	add	r7, sp, #0
 8013b28:	6078      	str	r0, [r7, #4]
 8013b2a:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 8013b2c:	6838      	ldr	r0, [r7, #0]
 8013b2e:	f000 f804 	bl	8013b3a <_ZSt8_DestroyI10SigmaDeltaEvPT_>
 8013b32:	bf00      	nop
 8013b34:	3708      	adds	r7, #8
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}

08013b3a <_ZSt8_DestroyI10SigmaDeltaEvPT_>:
    _Destroy(_Tp* __pointer)
 8013b3a:	b580      	push	{r7, lr}
 8013b3c:	b082      	sub	sp, #8
 8013b3e:	af00      	add	r7, sp, #0
 8013b40:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	6878      	ldr	r0, [r7, #4]
 8013b4a:	4798      	blx	r3
    }
 8013b4c:	bf00      	nop
 8013b4e:	3708      	adds	r7, #8
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}

08013b54 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "stepgen.h"


shared_ptr<Module> Stepgen::create(const JsonObject& config, Remora* instance)
	{
 8013b54:	b590      	push	{r4, r7, lr}
 8013b56:	b0bd      	sub	sp, #244	@ 0xf4
 8013b58:	af08      	add	r7, sp, #32
 8013b5a:	60f8      	str	r0, [r7, #12]
 8013b5c:	60b9      	str	r1, [r7, #8]
 8013b5e:	607a      	str	r2, [r7, #4]
	    const char* comment = config["Comment"];
 8013b60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013b64:	4a50      	ldr	r2, [pc, #320]	@ (8013ca8 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x154>)
 8013b66:	68b9      	ldr	r1, [r7, #8]
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7fe fb68 	bl	801223e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013b6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013b72:	4618      	mov	r0, r3
 8013b74:	f7f3 ff79 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013b78:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
	    uint32_t threadFreq = config["ThreadFreq"];
 8013b7c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013b80:	4a4a      	ldr	r2, [pc, #296]	@ (8013cac <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>)
 8013b82:	68b9      	ldr	r1, [r7, #8]
 8013b84:	4618      	mov	r0, r3
 8013b86:	f7fb fb78 	bl	800f27a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013b8a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f7f3 ff9c 	bl	8007acc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8013b94:	4603      	mov	r3, r0
 8013b96:	62bb      	str	r3, [r7, #40]	@ 0x28

	    printf("%s\n", comment);
 8013b98:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8013b9c:	f015 fc22 	bl	80293e4 <puts>

	    int joint = config["Joint Number"];
 8013ba0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8013ba4:	4a42      	ldr	r2, [pc, #264]	@ (8013cb0 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x15c>)
 8013ba6:	68b9      	ldr	r1, [r7, #8]
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f000 fa1d 	bl	8013fe8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013bae:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f7fb fb55 	bl	800f262 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	627b      	str	r3, [r7, #36]	@ 0x24
	    const char* enable = config["Enable Pin"];
 8013bbc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8013bc0:	4a3c      	ldr	r2, [pc, #240]	@ (8013cb4 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x160>)
 8013bc2:	68b9      	ldr	r1, [r7, #8]
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f7fb fb58 	bl	800f27a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013bca:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7f3 ff4b 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	623b      	str	r3, [r7, #32]
	    const char* step = config["Step Pin"];
 8013bd8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013bdc:	4a36      	ldr	r2, [pc, #216]	@ (8013cb8 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x164>)
 8013bde:	68b9      	ldr	r1, [r7, #8]
 8013be0:	4618      	mov	r0, r3
 8013be2:	f7fd fb3a 	bl	801125a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013be6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013bea:	4618      	mov	r0, r3
 8013bec:	f7f3 ff3d 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	61fb      	str	r3, [r7, #28]
	    const char* dir = config["Direction Pin"];
 8013bf4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8013bf8:	4a30      	ldr	r2, [pc, #192]	@ (8013cbc <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x168>)
 8013bfa:	68b9      	ldr	r1, [r7, #8]
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f000 fa18 	bl	8014032 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013c02:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8013c06:	4618      	mov	r0, r3
 8013c08:	f7f3 ff2f 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	61bb      	str	r3, [r7, #24]

	    // Configure pointers to data source and feedback location
	    volatile int32_t* ptrJointFreqCmd = &instance->getRxData()->jointFreqCmd[joint];
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f7fd f94f 	bl	8010eb4 <_ZN6Remora9getRxDataEv>
 8013c16:	4602      	mov	r2, r0
 8013c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c1a:	009b      	lsls	r3, r3, #2
 8013c1c:	4413      	add	r3, r2
 8013c1e:	3304      	adds	r3, #4
 8013c20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    volatile int32_t* ptrJointFeedback = &instance->getTxData()->jointFeedback[joint];
 8013c24:	6878      	ldr	r0, [r7, #4]
 8013c26:	f7fd f937 	bl	8010e98 <_ZN6Remora9getTxDataEv>
 8013c2a:	4602      	mov	r2, r0
 8013c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c2e:	009b      	lsls	r3, r3, #2
 8013c30:	4413      	add	r3, r2
 8013c32:	3304      	adds	r3, #4
 8013c34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	    volatile uint8_t* ptrJointEnable = &instance->getRxData()->jointEnable;
 8013c38:	6878      	ldr	r0, [r7, #4]
 8013c3a:	f7fd f93b 	bl	8010eb4 <_ZN6Remora9getRxDataEv>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	333c      	adds	r3, #60	@ 0x3c
 8013c42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

	    bool usesModulePost = true;		// stepgen uses the thread modulesPost vector
 8013c46:	2301      	movs	r3, #1
 8013c48:	75fb      	strb	r3, [r7, #23]

	    // Create the step generator and register it in the thread
	    return make_unique<Stepgen>(threadFreq, joint, enable, step, dir, Config::stepBit, *ptrJointFreqCmd, *ptrJointFeedback, *ptrJointEnable, usesModulePost);
 8013c4a:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 8013c4e:	f107 0420 	add.w	r4, r7, #32
 8013c52:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013c56:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8013c5a:	f107 0317 	add.w	r3, r7, #23
 8013c5e:	9306      	str	r3, [sp, #24]
 8013c60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013c64:	9305      	str	r3, [sp, #20]
 8013c66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013c6a:	9304      	str	r3, [sp, #16]
 8013c6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8013c70:	9303      	str	r3, [sp, #12]
 8013c72:	4b13      	ldr	r3, [pc, #76]	@ (8013cc0 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x16c>)
 8013c74:	9302      	str	r3, [sp, #8]
 8013c76:	f107 0318 	add.w	r3, r7, #24
 8013c7a:	9301      	str	r3, [sp, #4]
 8013c7c:	f107 031c 	add.w	r3, r7, #28
 8013c80:	9300      	str	r3, [sp, #0]
 8013c82:	4623      	mov	r3, r4
 8013c84:	f000 f9fa 	bl	801407c <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8013c88:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8013c8c:	4619      	mov	r1, r3
 8013c8e:	68f8      	ldr	r0, [r7, #12]
 8013c90:	f000 fa70 	bl	8014174 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 8013c94:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f000 fa49 	bl	8014130 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>
 8013c9e:	bf00      	nop
	}
 8013ca0:	68f8      	ldr	r0, [r7, #12]
 8013ca2:	37d4      	adds	r7, #212	@ 0xd4
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd90      	pop	{r4, r7, pc}
 8013ca8:	0802aad4 	.word	0x0802aad4
 8013cac:	0802aadc 	.word	0x0802aadc
 8013cb0:	0802aae8 	.word	0x0802aae8
 8013cb4:	0802aaf8 	.word	0x0802aaf8
 8013cb8:	0802ab04 	.word	0x0802ab04
 8013cbc:	0802ab10 	.word	0x0802ab10
 8013cc0:	0802b4f8 	.word	0x0802b4f8

08013cc4 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>:
 * @param _stepBit The number of bits used for the step value.
 * @param _ptrFrequencyCommand A reference to the frequency command data for the joint.
 * @param _ptrFeedback A reference to the feedback data for the joint.
 * @param _ptrJointEnable A reference to the joint enable data.
 */
Stepgen::Stepgen(int32_t _threadFreq, int _jointNumber, const char* _enable, const char* _step, const char* _direction, int _stepBit, volatile int32_t& _ptrFrequencyCommand, volatile int32_t& _ptrFeedback,  volatile uint8_t& _ptrJointEnable, bool _usesModulePost)
 8013cc4:	b590      	push	{r4, r7, lr}
 8013cc6:	b09b      	sub	sp, #108	@ 0x6c
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	60b9      	str	r1, [r7, #8]
 8013cce:	607a      	str	r2, [r7, #4]
 8013cd0:	603b      	str	r3, [r7, #0]
      DDSaccumulator(0),
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
      mask(1 << _jointNumber),  // Mask for checking the joint number
      isEnabled(false),
      isForward(false),
      isStepping(false)
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7fe f833 	bl	8011d40 <_ZN6ModuleC1Ev>
 8013cda:	4a5c      	ldr	r2, [pc, #368]	@ (8013e4c <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb+0x188>)
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	601a      	str	r2, [r3, #0]
    : jointNumber(_jointNumber),
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	687a      	ldr	r2, [r7, #4]
 8013ce4:	619a      	str	r2, [r3, #24]
      enable(_enable),
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	683a      	ldr	r2, [r7, #0]
 8013cea:	61da      	str	r2, [r3, #28]
      step(_step),
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8013cf0:	621a      	str	r2, [r3, #32]
      direction(_direction),
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013cf6:	625a      	str	r2, [r3, #36]	@ 0x24
      stepBit(_stepBit),
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013cfe:	629a      	str	r2, [r3, #40]	@ 0x28
      ptrFrequencyCommand(&_ptrFrequencyCommand),
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8013d06:	62da      	str	r2, [r3, #44]	@ 0x2c
      ptrFeedback(&_ptrFeedback),
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013d0e:	631a      	str	r2, [r3, #48]	@ 0x30
      ptrJointEnable(&_ptrJointEnable),
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013d16:	635a      	str	r2, [r3, #52]	@ 0x34
	  enablePin(_enable, OUTPUT),
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8013d1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013d22:	4618      	mov	r0, r3
 8013d24:	f014 fc55 	bl	80285d2 <_ZNSaIcEC1Ev>
 8013d28:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8013d2c:	f107 0314 	add.w	r3, r7, #20
 8013d30:	6839      	ldr	r1, [r7, #0]
 8013d32:	4618      	mov	r0, r3
 8013d34:	f7ef fd5e 	bl	80037f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013d38:	f107 0314 	add.w	r3, r7, #20
 8013d3c:	2201      	movs	r2, #1
 8013d3e:	4619      	mov	r1, r3
 8013d40:	4620      	mov	r0, r4
 8013d42:	f7f0 ff35 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8013d46:	f107 0314 	add.w	r3, r7, #20
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f014 fd2b 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013d50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013d54:	4618      	mov	r0, r3
 8013d56:	f014 fc3d 	bl	80285d4 <_ZNSaIcED1Ev>
      stepPin(_step, OUTPUT),
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 8013d60:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8013d64:	4618      	mov	r0, r3
 8013d66:	f014 fc34 	bl	80285d2 <_ZNSaIcEC1Ev>
 8013d6a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8013d6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013d72:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8013d74:	4618      	mov	r0, r3
 8013d76:	f7ef fd3d 	bl	80037f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013d7a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013d7e:	2201      	movs	r2, #1
 8013d80:	4619      	mov	r1, r3
 8013d82:	4620      	mov	r0, r4
 8013d84:	f7f0 ff14 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8013d88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f014 fd0a 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013d92:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8013d96:	4618      	mov	r0, r3
 8013d98:	f014 fc1c 	bl	80285d4 <_ZNSaIcED1Ev>
      directionPin(_direction, OUTPUT),
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	f103 04b8 	add.w	r4, r3, #184	@ 0xb8
 8013da2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013da6:	4618      	mov	r0, r3
 8013da8:	f014 fc13 	bl	80285d2 <_ZNSaIcEC1Ev>
 8013dac:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8013db0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013db4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7ef fd1c 	bl	80037f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013dbc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013dc0:	2201      	movs	r2, #1
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	f7f0 fef3 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8013dca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f014 fce9 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013dd4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013dd8:	4618      	mov	r0, r3
 8013dda:	f014 fbfb 	bl	80285d4 <_ZNSaIcED1Ev>
      rawCount(0),
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	2200      	movs	r2, #0
 8013de2:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
      DDSaccumulator(0),
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	2200      	movs	r2, #0
 8013dea:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
 8013dee:	2201      	movs	r2, #1
 8013df0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013df4:	fa02 f303 	lsl.w	r3, r2, r3
 8013df8:	ee07 3a90 	vmov	s15, r3
 8013dfc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013e00:	68bb      	ldr	r3, [r7, #8]
 8013e02:	ee07 3a90 	vmov	s15, r3
 8013e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	edc3 7a40 	vstr	s15, [r3, #256]	@ 0x100
      mask(1 << _jointNumber),  // Mask for checking the joint number
 8013e14:	2201      	movs	r2, #1
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	409a      	lsls	r2, r3
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
      isEnabled(false),
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	2200      	movs	r2, #0
 8013e24:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
      isForward(false),
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
      isStepping(false)
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	2200      	movs	r2, #0
 8013e34:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
{
	usesModulePost = _usesModulePost;
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8013e3e:	751a      	strb	r2, [r3, #20]
}
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	4618      	mov	r0, r3
 8013e44:	376c      	adds	r7, #108	@ 0x6c
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd90      	pop	{r4, r7, pc}
 8013e4a:	bf00      	nop
 8013e4c:	0802b520 	.word	0x0802b520

08013e50 <_ZN7Stepgen6updateEv>:
 * 
 * This method generates pulses for stepping according to the current
 * frequency command and direction.
 */
void Stepgen::update()
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b082      	sub	sp, #8
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
    makePulses();  // Generate pulses for stepping and direction
 8013e58:	6878      	ldr	r0, [r7, #4]
 8013e5a:	f000 f819 	bl	8013e90 <_ZN7Stepgen10makePulsesEv>
}
 8013e5e:	bf00      	nop
 8013e60:	3708      	adds	r7, #8
 8013e62:	46bd      	mov	sp, r7
 8013e64:	bd80      	pop	{r7, pc}

08013e66 <_ZN7Stepgen10updatePostEv>:
 * @brief Post-update method for the Stepgen.
 * 
 * This method stops any ongoing pulses after the update phase.
 */
void Stepgen::updatePost()
{
 8013e66:	b580      	push	{r7, lr}
 8013e68:	b082      	sub	sp, #8
 8013e6a:	af00      	add	r7, sp, #0
 8013e6c:	6078      	str	r0, [r7, #4]
    stopPulses();  // Stop pulse generation after update
 8013e6e:	6878      	ldr	r0, [r7, #4]
 8013e70:	f000 f8a8 	bl	8013fc4 <_ZN7Stepgen10stopPulsesEv>
}
 8013e74:	bf00      	nop
 8013e76:	3708      	adds	r7, #8
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}

08013e7c <_ZN7Stepgen10slowUpdateEv>:
 * 
 * This is a placeholder for performing any slow or low-priority updates,
 * though it currently does nothing.
 */
void Stepgen::slowUpdate()
{
 8013e7c:	b480      	push	{r7}
 8013e7e:	b083      	sub	sp, #12
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
    // Currently no operation for slow update
}
 8013e84:	bf00      	nop
 8013e86:	370c      	adds	r7, #12
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8e:	4770      	bx	lr

08013e90 <_ZN7Stepgen10makePulsesEv>:
 * This method calculates the next step and updates the step and direction
 * pins accordingly. It uses the DDS (Direct Digital Synthesis) technique
 * to generate precise frequency-based stepping.
 */
void Stepgen::makePulses()
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b084      	sub	sp, #16
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
    isEnabled = ((*(ptrJointEnable) & mask) != 0);
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013e9c:	781b      	ldrb	r3, [r3, #0]
 8013e9e:	b2db      	uxtb	r3, r3
 8013ea0:	461a      	mov	r2, r3
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8013ea8:	4013      	ands	r3, r2
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	bf14      	ite	ne
 8013eae:	2301      	movne	r3, #1
 8013eb0:	2300      	moveq	r3, #0
 8013eb2:	b2da      	uxtb	r2, r3
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
    if (!isEnabled)
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8013ec0:	f083 0301 	eor.w	r3, r3, #1
 8013ec4:	b2db      	uxtb	r3, r3
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d006      	beq.n	8013ed8 <_ZN7Stepgen10makePulsesEv+0x48>
    {
        enablePin.set(true);  	// Disable the driver if not enabled
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	3338      	adds	r3, #56	@ 0x38
 8013ece:	2101      	movs	r1, #1
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7f1 f817 	bl	8004f04 <_ZN3Pin3setEb>
        return;  				// Exit early if the generator is disabled
 8013ed6:	e072      	b.n	8013fbe <_ZN7Stepgen10makePulsesEv+0x12e>
    }

    enablePin.set(false); 		// Enable the driver
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	3338      	adds	r3, #56	@ 0x38
 8013edc:	2100      	movs	r1, #0
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f7f1 f810 	bl	8004f04 <_ZN3Pin3setEb>

    // Get the current frequency command and scale it using the frequency scale
    frequencyCommand = *ptrFrequencyCommand;
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ee8:	681a      	ldr	r2, [r3, #0]
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    DDSaddValue = frequencyCommand * frequencyScale;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8013ef6:	ee07 3a90 	vmov	s15, r3
 8013efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 8013f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f0c:	ee17 2a90 	vmov	r2, s15
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

    // Save the current DDS accumulator value and update it
    int32_t stepNow = DDSaccumulator;
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8013f1c:	60fb      	str	r3, [r7, #12]
    DDSaccumulator += DDSaddValue;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8013f2a:	441a      	add	r2, r3
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

    // Check for changes in the low half of the DDS accumulator
    stepNow ^= DDSaccumulator;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8013f38:	68fa      	ldr	r2, [r7, #12]
 8013f3a:	4053      	eors	r3, r2
 8013f3c:	60fb      	str	r3, [r7, #12]
    stepNow &= (1L << stepBit);  // Check for the step bit
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f42:	2201      	movs	r2, #1
 8013f44:	fa02 f303 	lsl.w	r3, r2, r3
 8013f48:	68fa      	ldr	r2, [r7, #12]
 8013f4a:	4013      	ands	r3, r2
 8013f4c:	60fb      	str	r3, [r7, #12]

    // Determine direction based on the sign of DDSaddValue
    isForward = DDSaddValue > 0;
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	bfcc      	ite	gt
 8013f58:	2301      	movgt	r3, #1
 8013f5a:	2300      	movle	r3, #0
 8013f5c:	b2da      	uxtb	r2, r3
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111

    // If a step is to be made, set the direction and step pins accordingly
    if (stepNow)
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d029      	beq.n	8013fbe <_ZN7Stepgen10makePulsesEv+0x12e>
    {
        directionPin.set(isForward);  // Set direction pin
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 8013f76:	4619      	mov	r1, r3
 8013f78:	4610      	mov	r0, r2
 8013f7a:	f7f0 ffc3 	bl	8004f04 <_ZN3Pin3setEb>
        stepPin.set(true);  // Set the step pin
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	3378      	adds	r3, #120	@ 0x78
 8013f82:	2101      	movs	r1, #1
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7f0 ffbd 	bl	8004f04 <_ZN3Pin3setEb>
        rawCount += (isForward ? 1 : -1);  // Update rawCount based on direction
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8013f90:	687a      	ldr	r2, [r7, #4]
 8013f92:	f892 2111 	ldrb.w	r2, [r2, #273]	@ 0x111
 8013f96:	2a00      	cmp	r2, #0
 8013f98:	d001      	beq.n	8013f9e <_ZN7Stepgen10makePulsesEv+0x10e>
 8013f9a:	2201      	movs	r2, #1
 8013f9c:	e001      	b.n	8013fa2 <_ZN7Stepgen10makePulsesEv+0x112>
 8013f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8013fa2:	441a      	add	r2, r3
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        *ptrFeedback = rawCount;  // Update the feedback with the raw count
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013fae:	687a      	ldr	r2, [r7, #4]
 8013fb0:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8013fb4:	601a      	str	r2, [r3, #0]
        isStepping = true;  // Indicate that stepping is occurring
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	2201      	movs	r2, #1
 8013fba:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
    }
}
 8013fbe:	3710      	adds	r7, #16
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	bd80      	pop	{r7, pc}

08013fc4 <_ZN7Stepgen10stopPulsesEv>:
 * @brief Stops the pulse generation.
 * 
 * This method resets the step pin to low and stops any ongoing stepping.
 */
void Stepgen::stopPulses()
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b082      	sub	sp, #8
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
    stepPin.set(false);  // Reset step pin to low
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	3378      	adds	r3, #120	@ 0x78
 8013fd0:	2100      	movs	r1, #0
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7f0 ff96 	bl	8004f04 <_ZN3Pin3setEb>
    isStepping = false;  // Indicate that stepping has stopped
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	2200      	movs	r2, #0
 8013fdc:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
}
 8013fe0:	bf00      	nop
 8013fe2:	3708      	adds	r7, #8
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b08c      	sub	sp, #48	@ 0x30
 8013fec:	af02      	add	r7, sp, #8
 8013fee:	60f8      	str	r0, [r7, #12]
 8013ff0:	60b9      	str	r1, [r7, #8]
 8013ff2:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8013ff4:	68ba      	ldr	r2, [r7, #8]
 8013ff6:	f107 0314 	add.w	r3, r7, #20
 8013ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013ffe:	e883 0003 	stmia.w	r3, {r0, r1}
 8014002:	f107 031c 	add.w	r3, r7, #28
 8014006:	6879      	ldr	r1, [r7, #4]
 8014008:	4618      	mov	r0, r3
 801400a:	f000 f8c6 	bl	801419a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 801400e:	466a      	mov	r2, sp
 8014010:	f107 0320 	add.w	r3, r7, #32
 8014014:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014018:	e882 0003 	stmia.w	r2, {r0, r1}
 801401c:	69fb      	ldr	r3, [r7, #28]
 801401e:	f107 0214 	add.w	r2, r7, #20
 8014022:	ca06      	ldmia	r2, {r1, r2}
 8014024:	68f8      	ldr	r0, [r7, #12]
 8014026:	f7f3 fe14 	bl	8007c52 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 801402a:	68f8      	ldr	r0, [r7, #12]
 801402c:	3728      	adds	r7, #40	@ 0x28
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}

08014032 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8014032:	b580      	push	{r7, lr}
 8014034:	b08c      	sub	sp, #48	@ 0x30
 8014036:	af02      	add	r7, sp, #8
 8014038:	60f8      	str	r0, [r7, #12]
 801403a:	60b9      	str	r1, [r7, #8]
 801403c:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 801403e:	68ba      	ldr	r2, [r7, #8]
 8014040:	f107 0314 	add.w	r3, r7, #20
 8014044:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014048:	e883 0003 	stmia.w	r3, {r0, r1}
 801404c:	f107 031c 	add.w	r3, r7, #28
 8014050:	6879      	ldr	r1, [r7, #4]
 8014052:	4618      	mov	r0, r3
 8014054:	f000 f8b4 	bl	80141c0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8014058:	466a      	mov	r2, sp
 801405a:	f107 0320 	add.w	r3, r7, #32
 801405e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014062:	e882 0003 	stmia.w	r2, {r0, r1}
 8014066:	69fb      	ldr	r3, [r7, #28]
 8014068:	f107 0214 	add.w	r2, r7, #20
 801406c:	ca06      	ldmia	r2, {r1, r2}
 801406e:	68f8      	ldr	r0, [r7, #12]
 8014070:	f7f3 fdef 	bl	8007c52 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8014074:	68f8      	ldr	r0, [r7, #12]
 8014076:	3728      	adds	r7, #40	@ 0x28
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}

0801407c <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 801407c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014080:	b093      	sub	sp, #76	@ 0x4c
 8014082:	af08      	add	r7, sp, #32
 8014084:	6278      	str	r0, [r7, #36]	@ 0x24
 8014086:	6239      	str	r1, [r7, #32]
 8014088:	61fa      	str	r2, [r7, #28]
 801408a:	61bb      	str	r3, [r7, #24]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 801408c:	f44f 708a 	mov.w	r0, #276	@ 0x114
 8014090:	f014 fa8e 	bl	80285b0 <_Znwj>
 8014094:	4603      	mov	r3, r0
 8014096:	4698      	mov	r8, r3
 8014098:	6a38      	ldr	r0, [r7, #32]
 801409a:	f7f8 fde7 	bl	800cc6c <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 801409e:	4603      	mov	r3, r0
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	4699      	mov	r9, r3
 80140a4:	69f8      	ldr	r0, [r7, #28]
 80140a6:	f7fb fa1d 	bl	800f4e4 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80140aa:	4603      	mov	r3, r0
 80140ac:	681e      	ldr	r6, [r3, #0]
 80140ae:	69b8      	ldr	r0, [r7, #24]
 80140b0:	f7fb fa0d 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80140b4:	4603      	mov	r3, r0
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	617b      	str	r3, [r7, #20]
 80140ba:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80140bc:	f7fb fa07 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80140c0:	4603      	mov	r3, r0
 80140c2:	681c      	ldr	r4, [r3, #0]
 80140c4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80140c6:	f7fb fa02 	bl	800f4ce <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80140ca:	4603      	mov	r3, r0
 80140cc:	681d      	ldr	r5, [r3, #0]
 80140ce:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80140d0:	f7f8 fdd7 	bl	800cc82 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80140d4:	4603      	mov	r3, r0
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	613b      	str	r3, [r7, #16]
 80140da:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80140dc:	f000 f883 	bl	80141e6 <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 80140e0:	60f8      	str	r0, [r7, #12]
 80140e2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80140e4:	f000 f87f 	bl	80141e6 <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 80140e8:	60b8      	str	r0, [r7, #8]
 80140ea:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80140ec:	f000 f886 	bl	80141fc <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>
 80140f0:	6078      	str	r0, [r7, #4]
 80140f2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80140f4:	f7fd f9b1 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80140f8:	4603      	mov	r3, r0
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	9306      	str	r3, [sp, #24]
 80140fe:	687a      	ldr	r2, [r7, #4]
 8014100:	9205      	str	r2, [sp, #20]
 8014102:	68ba      	ldr	r2, [r7, #8]
 8014104:	9204      	str	r2, [sp, #16]
 8014106:	68fa      	ldr	r2, [r7, #12]
 8014108:	9203      	str	r2, [sp, #12]
 801410a:	693a      	ldr	r2, [r7, #16]
 801410c:	9202      	str	r2, [sp, #8]
 801410e:	9501      	str	r5, [sp, #4]
 8014110:	9400      	str	r4, [sp, #0]
 8014112:	697b      	ldr	r3, [r7, #20]
 8014114:	4632      	mov	r2, r6
 8014116:	4649      	mov	r1, r9
 8014118:	4640      	mov	r0, r8
 801411a:	f7ff fdd3 	bl	8013cc4 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>
 801411e:	4641      	mov	r1, r8
 8014120:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014122:	f000 f886 	bl	8014232 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8014126:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014128:	372c      	adds	r7, #44	@ 0x2c
 801412a:	46bd      	mov	sp, r7
 801412c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014130 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8014130:	b590      	push	{r4, r7, lr}
 8014132:	b085      	sub	sp, #20
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	4618      	mov	r0, r3
 801413c:	f000 f888 	bl	8014250 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8014140:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d00c      	beq.n	8014164 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f000 f88d 	bl	801426a <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 8014150:	4604      	mov	r4, r0
 8014152:	68f8      	ldr	r0, [r7, #12]
 8014154:	f000 f896 	bl	8014284 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>
 8014158:	4603      	mov	r3, r0
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	4619      	mov	r1, r3
 801415e:	4620      	mov	r0, r4
 8014160:	f000 f8cf 	bl	8014302 <_ZNKSt14default_deleteI7StepgenEclEPS0_>
	__ptr = pointer();
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	2200      	movs	r2, #0
 8014168:	601a      	str	r2, [r3, #0]
      }
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	4618      	mov	r0, r3
 801416e:	3714      	adds	r7, #20
 8014170:	46bd      	mov	sp, r7
 8014172:	bd90      	pop	{r4, r7, pc}

08014174 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 8014174:	b590      	push	{r4, r7, lr}
 8014176:	b083      	sub	sp, #12
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
 801417c:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 801417e:	687c      	ldr	r4, [r7, #4]
 8014180:	6838      	ldr	r0, [r7, #0]
 8014182:	f000 f8cf 	bl	8014324 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8014186:	4603      	mov	r3, r0
 8014188:	4619      	mov	r1, r3
 801418a:	4620      	mov	r0, r4
 801418c:	f000 f8d5 	bl	801433a <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	4618      	mov	r0, r3
 8014194:	370c      	adds	r7, #12
 8014196:	46bd      	mov	sp, r7
 8014198:	bd90      	pop	{r4, r7, pc}

0801419a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 801419a:	b580      	push	{r7, lr}
 801419c:	b082      	sub	sp, #8
 801419e:	af00      	add	r7, sp, #0
 80141a0:	6078      	str	r0, [r7, #4]
 80141a2:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80141a4:	6838      	ldr	r0, [r7, #0]
 80141a6:	f000 f900 	bl	80143aa <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80141aa:	4602      	mov	r2, r0
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	4611      	mov	r1, r2
 80141b0:	4618      	mov	r0, r3
 80141b2:	f000 f905 	bl	80143c0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>
 80141b6:	bf00      	nop
}
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	3708      	adds	r7, #8
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}

080141c0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b082      	sub	sp, #8
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80141ca:	6838      	ldr	r0, [r7, #0]
 80141cc:	f000 f907 	bl	80143de <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80141d0:	4602      	mov	r2, r0
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	4611      	mov	r1, r2
 80141d6:	4618      	mov	r0, r3
 80141d8:	f000 f90c 	bl	80143f4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>
 80141dc:	bf00      	nop
}
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	3708      	adds	r7, #8
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}

080141e6 <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80141e6:	b480      	push	{r7}
 80141e8:	b083      	sub	sp, #12
 80141ea:	af00      	add	r7, sp, #0
 80141ec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	4618      	mov	r0, r3
 80141f2:	370c      	adds	r7, #12
 80141f4:	46bd      	mov	sp, r7
 80141f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fa:	4770      	bx	lr

080141fc <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80141fc:	b480      	push	{r7}
 80141fe:	b083      	sub	sp, #12
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	4618      	mov	r0, r3
 8014208:	370c      	adds	r7, #12
 801420a:	46bd      	mov	sp, r7
 801420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014210:	4770      	bx	lr

08014212 <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8014212:	b580      	push	{r7, lr}
 8014214:	b082      	sub	sp, #8
 8014216:	af00      	add	r7, sp, #0
 8014218:	6078      	str	r0, [r7, #4]
 801421a:	6039      	str	r1, [r7, #0]
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	683a      	ldr	r2, [r7, #0]
 8014220:	4611      	mov	r1, r2
 8014222:	4618      	mov	r0, r3
 8014224:	f000 f8f5 	bl	8014412 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	4618      	mov	r0, r3
 801422c:	3708      	adds	r7, #8
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}

08014232 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8014232:	b580      	push	{r7, lr}
 8014234:	b082      	sub	sp, #8
 8014236:	af00      	add	r7, sp, #0
 8014238:	6078      	str	r0, [r7, #4]
 801423a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	6839      	ldr	r1, [r7, #0]
 8014240:	4618      	mov	r0, r3
 8014242:	f7ff ffe6 	bl	8014212 <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	4618      	mov	r0, r3
 801424a:	3708      	adds	r7, #8
 801424c:	46bd      	mov	sp, r7
 801424e:	bd80      	pop	{r7, pc}

08014250 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	4618      	mov	r0, r3
 801425c:	f000 f8ed 	bl	801443a <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8014260:	4603      	mov	r3, r0
 8014262:	4618      	mov	r0, r3
 8014264:	3708      	adds	r7, #8
 8014266:	46bd      	mov	sp, r7
 8014268:	bd80      	pop	{r7, pc}

0801426a <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 801426a:	b580      	push	{r7, lr}
 801426c:	b082      	sub	sp, #8
 801426e:	af00      	add	r7, sp, #0
 8014270:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	4618      	mov	r0, r3
 8014276:	f000 f8ed 	bl	8014454 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>
 801427a:	4603      	mov	r3, r0
 801427c:	4618      	mov	r0, r3
 801427e:	3708      	adds	r7, #8
 8014280:	46bd      	mov	sp, r7
 8014282:	bd80      	pop	{r7, pc}

08014284 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8014284:	b480      	push	{r7}
 8014286:	b083      	sub	sp, #12
 8014288:	af00      	add	r7, sp, #0
 801428a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	4618      	mov	r0, r3
 8014290:	370c      	adds	r7, #12
 8014292:	46bd      	mov	sp, r7
 8014294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014298:	4770      	bx	lr
	...

0801429c <_ZN7StepgenD1Ev>:
 *
 * The Stepgen class is responsible for controlling a stepper motor by generating
 * pulses based on frequency commands received from a controller, as well as managing
 * the motor's direction and enable states.
 */
class Stepgen : public Module
 801429c:	b580      	push	{r7, lr}
 801429e:	b082      	sub	sp, #8
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
 80142a4:	4a0d      	ldr	r2, [pc, #52]	@ (80142dc <_ZN7StepgenD1Ev+0x40>)
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	601a      	str	r2, [r3, #0]
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	33b8      	adds	r3, #184	@ 0xb8
 80142ae:	4618      	mov	r0, r3
 80142b0:	f7fb fa33 	bl	800f71a <_ZN3PinD1Ev>
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	3378      	adds	r3, #120	@ 0x78
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7fb fa2e 	bl	800f71a <_ZN3PinD1Ev>
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	3338      	adds	r3, #56	@ 0x38
 80142c2:	4618      	mov	r0, r3
 80142c4:	f7fb fa29 	bl	800f71a <_ZN3PinD1Ev>
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	4618      	mov	r0, r3
 80142cc:	f7fd fd54 	bl	8011d78 <_ZN6ModuleD1Ev>
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	4618      	mov	r0, r3
 80142d4:	3708      	adds	r7, #8
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bd80      	pop	{r7, pc}
 80142da:	bf00      	nop
 80142dc:	0802b520 	.word	0x0802b520

080142e0 <_ZN7StepgenD0Ev>:
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b082      	sub	sp, #8
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
 80142e8:	6878      	ldr	r0, [r7, #4]
 80142ea:	f7ff ffd7 	bl	801429c <_ZN7StepgenD1Ev>
 80142ee:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80142f2:	6878      	ldr	r0, [r7, #4]
 80142f4:	f014 f94b 	bl	802858e <_ZdlPvj>
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	4618      	mov	r0, r3
 80142fc:	3708      	adds	r7, #8
 80142fe:	46bd      	mov	sp, r7
 8014300:	bd80      	pop	{r7, pc}

08014302 <_ZNKSt14default_deleteI7StepgenEclEPS0_>:
      operator()(_Tp* __ptr) const
 8014302:	b580      	push	{r7, lr}
 8014304:	b082      	sub	sp, #8
 8014306:	af00      	add	r7, sp, #0
 8014308:	6078      	str	r0, [r7, #4]
 801430a:	6039      	str	r1, [r7, #0]
	delete __ptr;
 801430c:	683b      	ldr	r3, [r7, #0]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d004      	beq.n	801431c <_ZNKSt14default_deleteI7StepgenEclEPS0_+0x1a>
 8014312:	681a      	ldr	r2, [r3, #0]
 8014314:	3204      	adds	r2, #4
 8014316:	6812      	ldr	r2, [r2, #0]
 8014318:	4618      	mov	r0, r3
 801431a:	4790      	blx	r2
      }
 801431c:	bf00      	nop
 801431e:	3708      	adds	r7, #8
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}

08014324 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8014324:	b480      	push	{r7}
 8014326:	b083      	sub	sp, #12
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	4618      	mov	r0, r3
 8014330:	370c      	adds	r7, #12
 8014332:	46bd      	mov	sp, r7
 8014334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014338:	4770      	bx	lr

0801433a <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 801433a:	b580      	push	{r7, lr}
 801433c:	b084      	sub	sp, #16
 801433e:	af00      	add	r7, sp, #0
 8014340:	6078      	str	r0, [r7, #4]
 8014342:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 8014344:	6838      	ldr	r0, [r7, #0]
 8014346:	f000 f892 	bl	801446e <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 801434a:	4602      	mov	r2, r0
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	601a      	str	r2, [r3, #0]
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	3304      	adds	r3, #4
 8014354:	4618      	mov	r0, r3
 8014356:	f7f8 fecf 	bl	800d0f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 801435a:	6838      	ldr	r0, [r7, #0]
 801435c:	f000 f887 	bl	801446e <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 8014360:	4603      	mov	r3, r0
 8014362:	4618      	mov	r0, r3
 8014364:	f000 f890 	bl	8014488 <_ZSt12__to_addressI7StepgenEPT_S2_>
 8014368:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 801436a:	6838      	ldr	r0, [r7, #0]
 801436c:	f7ff ffda 	bl	8014324 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8014370:	4602      	mov	r2, r0
 8014372:	f107 0308 	add.w	r3, r7, #8
 8014376:	4611      	mov	r1, r2
 8014378:	4618      	mov	r0, r3
 801437a:	f000 f890 	bl	801449e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	3304      	adds	r3, #4
 8014382:	f107 0208 	add.w	r2, r7, #8
 8014386:	4611      	mov	r1, r2
 8014388:	4618      	mov	r0, r3
 801438a:	f7fb fab3 	bl	800f8f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 801438e:	f107 0308 	add.w	r3, r7, #8
 8014392:	4618      	mov	r0, r3
 8014394:	f7f7 fcb3 	bl	800bcfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 8014398:	68f9      	ldr	r1, [r7, #12]
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f000 f8c1 	bl	8014522 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	4618      	mov	r0, r3
 80143a4:	3710      	adds	r7, #16
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}

080143aa <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80143aa:	b480      	push	{r7}
 80143ac:	b083      	sub	sp, #12
 80143ae:	af00      	add	r7, sp, #0
 80143b0:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80143b2:	687b      	ldr	r3, [r7, #4]
}
 80143b4:	4618      	mov	r0, r3
 80143b6:	370c      	adds	r7, #12
 80143b8:	46bd      	mov	sp, r7
 80143ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143be:	4770      	bx	lr

080143c0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b082      	sub	sp, #8
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
 80143c8:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 80143ca:	2301      	movs	r3, #1
 80143cc:	220c      	movs	r2, #12
 80143ce:	6839      	ldr	r1, [r7, #0]
 80143d0:	6878      	ldr	r0, [r7, #4]
 80143d2:	f7f0 ff7f 	bl	80052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80143d6:	6878      	ldr	r0, [r7, #4]
 80143d8:	3708      	adds	r7, #8
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}

080143de <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80143de:	b480      	push	{r7}
 80143e0:	b083      	sub	sp, #12
 80143e2:	af00      	add	r7, sp, #0
 80143e4:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80143e6:	687b      	ldr	r3, [r7, #4]
}
 80143e8:	4618      	mov	r0, r3
 80143ea:	370c      	adds	r7, #12
 80143ec:	46bd      	mov	sp, r7
 80143ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f2:	4770      	bx	lr

080143f4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b082      	sub	sp, #8
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
 80143fc:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 80143fe:	2301      	movs	r3, #1
 8014400:	220d      	movs	r2, #13
 8014402:	6839      	ldr	r1, [r7, #0]
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f7f0 ff65 	bl	80052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	3708      	adds	r7, #8
 801440e:	46bd      	mov	sp, r7
 8014410:	bd80      	pop	{r7, pc}

08014412 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8014412:	b590      	push	{r4, r7, lr}
 8014414:	b083      	sub	sp, #12
 8014416:	af00      	add	r7, sp, #0
 8014418:	6078      	str	r0, [r7, #4]
 801441a:	6039      	str	r1, [r7, #0]
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	4618      	mov	r0, r3
 8014420:	f000 f88a 	bl	8014538 <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8014424:	683c      	ldr	r4, [r7, #0]
 8014426:	6878      	ldr	r0, [r7, #4]
 8014428:	f7ff ff12 	bl	8014250 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 801442c:	4603      	mov	r3, r0
 801442e:	601c      	str	r4, [r3, #0]
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	4618      	mov	r0, r3
 8014434:	370c      	adds	r7, #12
 8014436:	46bd      	mov	sp, r7
 8014438:	bd90      	pop	{r4, r7, pc}

0801443a <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801443a:	b580      	push	{r7, lr}
 801443c:	b082      	sub	sp, #8
 801443e:	af00      	add	r7, sp, #0
 8014440:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	4618      	mov	r0, r3
 8014446:	f000 f884 	bl	8014552 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801444a:	4603      	mov	r3, r0
 801444c:	4618      	mov	r0, r3
 801444e:	3708      	adds	r7, #8
 8014450:	46bd      	mov	sp, r7
 8014452:	bd80      	pop	{r7, pc}

08014454 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8014454:	b580      	push	{r7, lr}
 8014456:	b082      	sub	sp, #8
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	4618      	mov	r0, r3
 8014460:	f000 f883 	bl	801456a <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8014464:	4603      	mov	r3, r0
 8014466:	4618      	mov	r0, r3
 8014468:	3708      	adds	r7, #8
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}

0801446e <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 801446e:	b580      	push	{r7, lr}
 8014470:	b082      	sub	sp, #8
 8014472:	af00      	add	r7, sp, #0
 8014474:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	4618      	mov	r0, r3
 801447a:	f000 f882 	bl	8014582 <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 801447e:	4603      	mov	r3, r0
 8014480:	4618      	mov	r0, r3
 8014482:	3708      	adds	r7, #8
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}

08014488 <_ZSt12__to_addressI7StepgenEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 8014488:	b480      	push	{r7}
 801448a:	b083      	sub	sp, #12
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
      return __ptr;
 8014490:	687b      	ldr	r3, [r7, #4]
    }
 8014492:	4618      	mov	r0, r3
 8014494:	370c      	adds	r7, #12
 8014496:	46bd      	mov	sp, r7
 8014498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449c:	4770      	bx	lr

0801449e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 801449e:	b580      	push	{r7, lr}
 80144a0:	b086      	sub	sp, #24
 80144a2:	af00      	add	r7, sp, #0
 80144a4:	6078      	str	r0, [r7, #4]
 80144a6:	6039      	str	r1, [r7, #0]
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	2200      	movs	r2, #0
 80144ac:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 80144ae:	6838      	ldr	r0, [r7, #0]
 80144b0:	f7ff ffdd 	bl	801446e <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 80144b4:	4603      	mov	r3, r0
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	bf0c      	ite	eq
 80144ba:	2301      	moveq	r3, #1
 80144bc:	2300      	movne	r3, #0
 80144be:	b2db      	uxtb	r3, r3
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d128      	bne.n	8014516 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 80144c4:	f107 030c 	add.w	r3, r7, #12
 80144c8:	4618      	mov	r0, r3
 80144ca:	f000 f868 	bl	801459e <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 80144ce:	f107 030c 	add.w	r3, r7, #12
 80144d2:	2101      	movs	r1, #1
 80144d4:	4618      	mov	r0, r3
 80144d6:	f000 f87a 	bl	80145ce <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 80144da:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 80144dc:	6838      	ldr	r0, [r7, #0]
 80144de:	f000 f885 	bl	80145ec <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>
 80144e2:	4603      	mov	r3, r0
 80144e4:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 80144e6:	6838      	ldr	r0, [r7, #0]
 80144e8:	f7ff febf 	bl	801426a <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 80144ec:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 80144ee:	4618      	mov	r0, r3
 80144f0:	f000 f889 	bl	8014606 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 80144f4:	4603      	mov	r3, r0
 80144f6:	f107 0210 	add.w	r2, r7, #16
 80144fa:	f107 000c 	add.w	r0, r7, #12
 80144fe:	6979      	ldr	r1, [r7, #20]
 8014500:	f000 f88c 	bl	801461c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	697a      	ldr	r2, [r7, #20]
 8014508:	601a      	str	r2, [r3, #0]
	}
 801450a:	f107 030c 	add.w	r3, r7, #12
 801450e:	4618      	mov	r0, r3
 8014510:	f000 f851 	bl	80145b6 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8014514:	e000      	b.n	8014518 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 8014516:	bf00      	nop
	}
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	4618      	mov	r0, r3
 801451c:	3718      	adds	r7, #24
 801451e:	46bd      	mov	sp, r7
 8014520:	bd80      	pop	{r7, pc}

08014522 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8014522:	b480      	push	{r7}
 8014524:	b083      	sub	sp, #12
 8014526:	af00      	add	r7, sp, #0
 8014528:	6078      	str	r0, [r7, #4]
 801452a:	6039      	str	r1, [r7, #0]
	{ }
 801452c:	bf00      	nop
 801452e:	370c      	adds	r7, #12
 8014530:	46bd      	mov	sp, r7
 8014532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014536:	4770      	bx	lr

08014538 <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	4618      	mov	r0, r3
 8014544:	f000 f882 	bl	801464c <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	4618      	mov	r0, r3
 801454c:	3708      	adds	r7, #8
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}

08014552 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8014552:	b580      	push	{r7, lr}
 8014554:	b082      	sub	sp, #8
 8014556:	af00      	add	r7, sp, #0
 8014558:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801455a:	6878      	ldr	r0, [r7, #4]
 801455c:	f000 f886 	bl	801466c <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>
 8014560:	4603      	mov	r3, r0
 8014562:	4618      	mov	r0, r3
 8014564:	3708      	adds	r7, #8
 8014566:	46bd      	mov	sp, r7
 8014568:	bd80      	pop	{r7, pc}

0801456a <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801456a:	b580      	push	{r7, lr}
 801456c:	b082      	sub	sp, #8
 801456e:	af00      	add	r7, sp, #0
 8014570:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8014572:	6878      	ldr	r0, [r7, #4]
 8014574:	f000 f887 	bl	8014686 <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8014578:	4603      	mov	r3, r0
 801457a:	4618      	mov	r0, r3
 801457c:	3708      	adds	r7, #8
 801457e:	46bd      	mov	sp, r7
 8014580:	bd80      	pop	{r7, pc}

08014582 <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8014582:	b580      	push	{r7, lr}
 8014584:	b082      	sub	sp, #8
 8014586:	af00      	add	r7, sp, #0
 8014588:	6078      	str	r0, [r7, #4]
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	4618      	mov	r0, r3
 801458e:	f000 f886 	bl	801469e <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8014592:	4603      	mov	r3, r0
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	4618      	mov	r0, r3
 8014598:	3708      	adds	r7, #8
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}

0801459e <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801459e:	b580      	push	{r7, lr}
 80145a0:	b082      	sub	sp, #8
 80145a2:	af00      	add	r7, sp, #0
 80145a4:	6078      	str	r0, [r7, #4]
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f000 f886 	bl	80146b8 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	4618      	mov	r0, r3
 80145b0:	3708      	adds	r7, #8
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}

080145b6 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80145b6:	b580      	push	{r7, lr}
 80145b8:	b082      	sub	sp, #8
 80145ba:	af00      	add	r7, sp, #0
 80145bc:	6078      	str	r0, [r7, #4]
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f000 f885 	bl	80146ce <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	4618      	mov	r0, r3
 80145c8:	3708      	adds	r7, #8
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd80      	pop	{r7, pc}

080145ce <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 80145ce:	b580      	push	{r7, lr}
 80145d0:	b082      	sub	sp, #8
 80145d2:	af00      	add	r7, sp, #0
 80145d4:	6078      	str	r0, [r7, #4]
 80145d6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80145d8:	2200      	movs	r2, #0
 80145da:	6839      	ldr	r1, [r7, #0]
 80145dc:	6878      	ldr	r0, [r7, #4]
 80145de:	f000 f881 	bl	80146e4 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 80145e2:	4603      	mov	r3, r0
 80145e4:	4618      	mov	r0, r3
 80145e6:	3708      	adds	r7, #8
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}

080145ec <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b082      	sub	sp, #8
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	4618      	mov	r0, r3
 80145f8:	f000 f89e 	bl	8014738 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>
 80145fc:	4603      	mov	r3, r0
 80145fe:	4618      	mov	r0, r3
 8014600:	3708      	adds	r7, #8
 8014602:	46bd      	mov	sp, r7
 8014604:	bd80      	pop	{r7, pc}

08014606 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014606:	b480      	push	{r7}
 8014608:	b083      	sub	sp, #12
 801460a:	af00      	add	r7, sp, #0
 801460c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	4618      	mov	r0, r3
 8014612:	370c      	adds	r7, #12
 8014614:	46bd      	mov	sp, r7
 8014616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461a:	4770      	bx	lr

0801461c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801461c:	b590      	push	{r4, r7, lr}
 801461e:	b085      	sub	sp, #20
 8014620:	af00      	add	r7, sp, #0
 8014622:	60f8      	str	r0, [r7, #12]
 8014624:	60b9      	str	r1, [r7, #8]
 8014626:	607a      	str	r2, [r7, #4]
 8014628:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f000 f899 	bl	8014762 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 8014630:	4604      	mov	r4, r0
 8014632:	6838      	ldr	r0, [r7, #0]
 8014634:	f7ff ffe7 	bl	8014606 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 8014638:	4603      	mov	r3, r0
 801463a:	4622      	mov	r2, r4
 801463c:	68b9      	ldr	r1, [r7, #8]
 801463e:	68f8      	ldr	r0, [r7, #12]
 8014640:	f000 f89a 	bl	8014778 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 8014644:	bf00      	nop
 8014646:	3714      	adds	r7, #20
 8014648:	46bd      	mov	sp, r7
 801464a:	bd90      	pop	{r4, r7, pc}

0801464c <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 801464c:	b580      	push	{r7, lr}
 801464e:	b082      	sub	sp, #8
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f000 f8ad 	bl	80147b4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	4618      	mov	r0, r3
 801465e:	f000 f8b5 	bl	80147cc <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	4618      	mov	r0, r3
 8014666:	3708      	adds	r7, #8
 8014668:	46bd      	mov	sp, r7
 801466a:	bd80      	pop	{r7, pc}

0801466c <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801466c:	b580      	push	{r7, lr}
 801466e:	b082      	sub	sp, #8
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	4618      	mov	r0, r3
 8014678:	f000 f8b6 	bl	80147e8 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>
 801467c:	4603      	mov	r3, r0
 801467e:	4618      	mov	r0, r3
 8014680:	3708      	adds	r7, #8
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}

08014686 <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8014686:	b580      	push	{r7, lr}
 8014688:	b082      	sub	sp, #8
 801468a:	af00      	add	r7, sp, #0
 801468c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f000 f8b5 	bl	80147fe <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>
 8014694:	4603      	mov	r3, r0
 8014696:	4618      	mov	r0, r3
 8014698:	3708      	adds	r7, #8
 801469a:	46bd      	mov	sp, r7
 801469c:	bd80      	pop	{r7, pc}

0801469e <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 801469e:	b580      	push	{r7, lr}
 80146a0:	b082      	sub	sp, #8
 80146a2:	af00      	add	r7, sp, #0
 80146a4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	4618      	mov	r0, r3
 80146aa:	f000 f8b4 	bl	8014816 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80146ae:	4603      	mov	r3, r0
 80146b0:	4618      	mov	r0, r3
 80146b2:	3708      	adds	r7, #8
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bd80      	pop	{r7, pc}

080146b8 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80146b8:	b480      	push	{r7}
 80146ba:	b083      	sub	sp, #12
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	4618      	mov	r0, r3
 80146c4:	370c      	adds	r7, #12
 80146c6:	46bd      	mov	sp, r7
 80146c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146cc:	4770      	bx	lr

080146ce <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80146ce:	b480      	push	{r7}
 80146d0:	b083      	sub	sp, #12
 80146d2:	af00      	add	r7, sp, #0
 80146d4:	6078      	str	r0, [r7, #4]
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	4618      	mov	r0, r3
 80146da:	370c      	adds	r7, #12
 80146dc:	46bd      	mov	sp, r7
 80146de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e2:	4770      	bx	lr

080146e4 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b084      	sub	sp, #16
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	60f8      	str	r0, [r7, #12]
 80146ec:	60b9      	str	r1, [r7, #8]
 80146ee:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80146f0:	68f8      	ldr	r0, [r7, #12]
 80146f2:	f000 f89c 	bl	801482e <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 80146f6:	4602      	mov	r2, r0
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	4293      	cmp	r3, r2
 80146fc:	bf8c      	ite	hi
 80146fe:	2301      	movhi	r3, #1
 8014700:	2300      	movls	r3, #0
 8014702:	b2db      	uxtb	r3, r3
 8014704:	2b00      	cmp	r3, #0
 8014706:	bf14      	ite	ne
 8014708:	2301      	movne	r3, #1
 801470a:	2300      	moveq	r3, #0
 801470c:	b2db      	uxtb	r3, r3
 801470e:	2b00      	cmp	r3, #0
 8014710:	d007      	beq.n	8014722 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014718:	d301      	bcc.n	801471e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801471a:	f013 ff5f 	bl	80285dc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801471e:	f013 ff5a 	bl	80285d6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8014722:	68bb      	ldr	r3, [r7, #8]
 8014724:	011b      	lsls	r3, r3, #4
 8014726:	4618      	mov	r0, r3
 8014728:	f013 ff42 	bl	80285b0 <_Znwj>
 801472c:	4603      	mov	r3, r0
 801472e:	bf00      	nop
      }
 8014730:	4618      	mov	r0, r3
 8014732:	3710      	adds	r7, #16
 8014734:	46bd      	mov	sp, r7
 8014736:	bd80      	pop	{r7, pc}

08014738 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8014738:	b580      	push	{r7, lr}
 801473a:	b084      	sub	sp, #16
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f7ff fd85 	bl	8014250 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8014746:	4603      	mov	r3, r0
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 801474c:	6878      	ldr	r0, [r7, #4]
 801474e:	f7ff fd7f 	bl	8014250 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8014752:	4603      	mov	r3, r0
 8014754:	2200      	movs	r2, #0
 8014756:	601a      	str	r2, [r3, #0]
	return __p;
 8014758:	68fb      	ldr	r3, [r7, #12]
      }
 801475a:	4618      	mov	r0, r3
 801475c:	3710      	adds	r7, #16
 801475e:	46bd      	mov	sp, r7
 8014760:	bd80      	pop	{r7, pc}

08014762 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014762:	b480      	push	{r7}
 8014764:	b083      	sub	sp, #12
 8014766:	af00      	add	r7, sp, #0
 8014768:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	4618      	mov	r0, r3
 801476e:	370c      	adds	r7, #12
 8014770:	46bd      	mov	sp, r7
 8014772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014776:	4770      	bx	lr

08014778 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8014778:	b5f0      	push	{r4, r5, r6, r7, lr}
 801477a:	b085      	sub	sp, #20
 801477c:	af00      	add	r7, sp, #0
 801477e:	60f8      	str	r0, [r7, #12]
 8014780:	60b9      	str	r1, [r7, #8]
 8014782:	607a      	str	r2, [r7, #4]
 8014784:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8014786:	68bb      	ldr	r3, [r7, #8]
 8014788:	4619      	mov	r1, r3
 801478a:	2010      	movs	r0, #16
 801478c:	f7f6 f880 	bl	800a890 <_ZnwjPv>
 8014790:	4605      	mov	r5, r0
 8014792:	6878      	ldr	r0, [r7, #4]
 8014794:	f7ff ffe5 	bl	8014762 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 8014798:	4603      	mov	r3, r0
 801479a:	681c      	ldr	r4, [r3, #0]
 801479c:	6838      	ldr	r0, [r7, #0]
 801479e:	f7ff ff32 	bl	8014606 <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 80147a2:	4632      	mov	r2, r6
 80147a4:	4621      	mov	r1, r4
 80147a6:	4628      	mov	r0, r5
 80147a8:	f000 f84e 	bl	8014848 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 80147ac:	bf00      	nop
 80147ae:	3714      	adds	r7, #20
 80147b0:	46bd      	mov	sp, r7
 80147b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080147b4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>:
      _Tuple_impl()
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b082      	sub	sp, #8
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80147bc:	6878      	ldr	r0, [r7, #4]
 80147be:	f000 f865 	bl	801488c <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	4618      	mov	r0, r3
 80147c6:	3708      	adds	r7, #8
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}

080147cc <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>:
      constexpr _Head_base()
 80147cc:	b480      	push	{r7}
 80147ce:	b083      	sub	sp, #12
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	2200      	movs	r2, #0
 80147d8:	601a      	str	r2, [r3, #0]
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	4618      	mov	r0, r3
 80147de:	370c      	adds	r7, #12
 80147e0:	46bd      	mov	sp, r7
 80147e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e6:	4770      	bx	lr

080147e8 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80147e8:	b480      	push	{r7}
 80147ea:	b083      	sub	sp, #12
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	4618      	mov	r0, r3
 80147f4:	370c      	adds	r7, #12
 80147f6:	46bd      	mov	sp, r7
 80147f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fc:	4770      	bx	lr

080147fe <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80147fe:	b580      	push	{r7, lr}
 8014800:	b082      	sub	sp, #8
 8014802:	af00      	add	r7, sp, #0
 8014804:	6078      	str	r0, [r7, #4]
 8014806:	6878      	ldr	r0, [r7, #4]
 8014808:	f000 f84b 	bl	80148a2 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>
 801480c:	4603      	mov	r3, r0
 801480e:	4618      	mov	r0, r3
 8014810:	3708      	adds	r7, #8
 8014812:	46bd      	mov	sp, r7
 8014814:	bd80      	pop	{r7, pc}

08014816 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8014816:	b580      	push	{r7, lr}
 8014818:	b082      	sub	sp, #8
 801481a:	af00      	add	r7, sp, #0
 801481c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801481e:	6878      	ldr	r0, [r7, #4]
 8014820:	f000 f84a 	bl	80148b8 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>
 8014824:	4603      	mov	r3, r0
 8014826:	4618      	mov	r0, r3
 8014828:	3708      	adds	r7, #8
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}

0801482e <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801482e:	b480      	push	{r7}
 8014830:	b083      	sub	sp, #12
 8014832:	af00      	add	r7, sp, #0
 8014834:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8014836:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 801483a:	4618      	mov	r0, r3
 801483c:	370c      	adds	r7, #12
 801483e:	46bd      	mov	sp, r7
 8014840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014844:	4770      	bx	lr
	...

08014848 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8014848:	b5b0      	push	{r4, r5, r7, lr}
 801484a:	b086      	sub	sp, #24
 801484c:	af00      	add	r7, sp, #0
 801484e:	60f8      	str	r0, [r7, #12]
 8014850:	60b9      	str	r1, [r7, #8]
 8014852:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	4618      	mov	r0, r3
 8014858:	f7f9 fcc2 	bl	800e1e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 801485c:	4a0a      	ldr	r2, [pc, #40]	@ (8014888 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	601a      	str	r2, [r3, #0]
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	f103 040c 	add.w	r4, r3, #12
 8014868:	1d3b      	adds	r3, r7, #4
 801486a:	4618      	mov	r0, r3
 801486c:	f000 f831 	bl	80148d2 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 8014870:	f107 0314 	add.w	r3, r7, #20
 8014874:	462a      	mov	r2, r5
 8014876:	68b9      	ldr	r1, [r7, #8]
 8014878:	4620      	mov	r0, r4
 801487a:	f000 f835 	bl	80148e8 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	4618      	mov	r0, r3
 8014882:	3718      	adds	r7, #24
 8014884:	46bd      	mov	sp, r7
 8014886:	bdb0      	pop	{r4, r5, r7, pc}
 8014888:	0802b504 	.word	0x0802b504

0801488c <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>:
      constexpr _Head_base()
 801488c:	b480      	push	{r7}
 801488e:	b083      	sub	sp, #12
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	4618      	mov	r0, r3
 8014898:	370c      	adds	r7, #12
 801489a:	46bd      	mov	sp, r7
 801489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a0:	4770      	bx	lr

080148a2 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80148a2:	b480      	push	{r7}
 80148a4:	b083      	sub	sp, #12
 80148a6:	af00      	add	r7, sp, #0
 80148a8:	6078      	str	r0, [r7, #4]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	4618      	mov	r0, r3
 80148ae:	370c      	adds	r7, #12
 80148b0:	46bd      	mov	sp, r7
 80148b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b6:	4770      	bx	lr

080148b8 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b082      	sub	sp, #8
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	4618      	mov	r0, r3
 80148c4:	f000 f82c 	bl	8014920 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>
 80148c8:	4603      	mov	r3, r0
 80148ca:	4618      	mov	r0, r3
 80148cc:	3708      	adds	r7, #8
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}

080148d2 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80148d2:	b480      	push	{r7}
 80148d4:	b083      	sub	sp, #12
 80148d6:	af00      	add	r7, sp, #0
 80148d8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	4618      	mov	r0, r3
 80148de:	370c      	adds	r7, #12
 80148e0:	46bd      	mov	sp, r7
 80148e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e6:	4770      	bx	lr

080148e8 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b084      	sub	sp, #16
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	60f8      	str	r0, [r7, #12]
 80148f0:	60b9      	str	r1, [r7, #8]
 80148f2:	713a      	strb	r2, [r7, #4]
 80148f4:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 80148f6:	1d3b      	adds	r3, r7, #4
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7ff ffea 	bl	80148d2 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 80148fe:	4603      	mov	r3, r0
 8014900:	4619      	mov	r1, r3
 8014902:	68f8      	ldr	r0, [r7, #12]
 8014904:	f000 f817 	bl	8014936 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>
 8014908:	6839      	ldr	r1, [r7, #0]
 801490a:	68f8      	ldr	r0, [r7, #12]
 801490c:	f7fb fd52 	bl	80103b4 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	68ba      	ldr	r2, [r7, #8]
 8014914:	601a      	str	r2, [r3, #0]
	{ }
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	4618      	mov	r0, r3
 801491a:	3710      	adds	r7, #16
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}

08014920 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8014920:	b480      	push	{r7}
 8014922:	b083      	sub	sp, #12
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	4618      	mov	r0, r3
 801492c:	370c      	adds	r7, #12
 801492e:	46bd      	mov	sp, r7
 8014930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014934:	4770      	bx	lr

08014936 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8014936:	b580      	push	{r7, lr}
 8014938:	b082      	sub	sp, #8
 801493a:	af00      	add	r7, sp, #0
 801493c:	6078      	str	r0, [r7, #4]
 801493e:	6039      	str	r1, [r7, #0]
 8014940:	6838      	ldr	r0, [r7, #0]
 8014942:	f7ff ffc6 	bl	80148d2 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	4618      	mov	r0, r3
 801494a:	3708      	adds	r7, #8
 801494c:	46bd      	mov	sp, r7
 801494e:	bd80      	pop	{r7, pc}

08014950 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8014950:	b580      	push	{r7, lr}
 8014952:	b082      	sub	sp, #8
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
 8014958:	4a05      	ldr	r2, [pc, #20]	@ (8014970 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	601a      	str	r2, [r3, #0]
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	4618      	mov	r0, r3
 8014962:	f7f7 fdff 	bl	800c564 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	4618      	mov	r0, r3
 801496a:	3708      	adds	r7, #8
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}
 8014970:	0802b504 	.word	0x0802b504

08014974 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8014974:	b580      	push	{r7, lr}
 8014976:	b082      	sub	sp, #8
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f7ff ffe7 	bl	8014950 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014982:	2110      	movs	r1, #16
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f013 fe02 	bl	802858e <_ZdlPvj>
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	4618      	mov	r0, r3
 801498e:	3708      	adds	r7, #8
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}

08014994 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8014994:	b580      	push	{r7, lr}
 8014996:	b082      	sub	sp, #8
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	330c      	adds	r3, #12
 80149a0:	4618      	mov	r0, r3
 80149a2:	f000 f83f 	bl	8014a24 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 80149a6:	4602      	mov	r2, r0
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	68db      	ldr	r3, [r3, #12]
 80149ac:	4619      	mov	r1, r3
 80149ae:	4610      	mov	r0, r2
 80149b0:	f7ff fca7 	bl	8014302 <_ZNKSt14default_deleteI7StepgenEclEPS0_>
 80149b4:	bf00      	nop
 80149b6:	3708      	adds	r7, #8
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}

080149bc <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80149bc:	b580      	push	{r7, lr}
 80149be:	b086      	sub	sp, #24
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	330c      	adds	r3, #12
 80149c8:	4618      	mov	r0, r3
 80149ca:	f000 f837 	bl	8014a3c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80149ce:	4602      	mov	r2, r0
 80149d0:	f107 0314 	add.w	r3, r7, #20
 80149d4:	4611      	mov	r1, r2
 80149d6:	4618      	mov	r0, r3
 80149d8:	f000 f83c 	bl	8014a54 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80149dc:	f107 0114 	add.w	r1, r7, #20
 80149e0:	f107 030c 	add.w	r3, r7, #12
 80149e4:	687a      	ldr	r2, [r7, #4]
 80149e6:	4618      	mov	r0, r3
 80149e8:	f000 f841 	bl	8014a6e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f7ff ffaf 	bl	8014950 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 80149f2:	f107 030c 	add.w	r3, r7, #12
 80149f6:	4618      	mov	r0, r3
 80149f8:	f000 f84d 	bl	8014a96 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80149fc:	f107 0314 	add.w	r3, r7, #20
 8014a00:	4618      	mov	r0, r3
 8014a02:	f7ff fdd8 	bl	80145b6 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8014a06:	3718      	adds	r7, #24
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}

08014a0c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 8014a0c:	b480      	push	{r7}
 8014a0e:	b083      	sub	sp, #12
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	6039      	str	r1, [r7, #0]
        return nullptr;
 8014a16:	2300      	movs	r3, #0
      }
 8014a18:	4618      	mov	r0, r3
 8014a1a:	370c      	adds	r7, #12
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a22:	4770      	bx	lr

08014a24 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b082      	sub	sp, #8
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f000 f847 	bl	8014ac0 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>
 8014a32:	4603      	mov	r3, r0
 8014a34:	4618      	mov	r0, r3
 8014a36:	3708      	adds	r7, #8
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}

08014a3c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b082      	sub	sp, #8
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
 8014a44:	6878      	ldr	r0, [r7, #4]
 8014a46:	f7fb fd84 	bl	8010552 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	3708      	adds	r7, #8
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd80      	pop	{r7, pc}

08014a54 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b082      	sub	sp, #8
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
 8014a5c:	6039      	str	r1, [r7, #0]
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f7ff fe2a 	bl	80146b8 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	4618      	mov	r0, r3
 8014a68:	3708      	adds	r7, #8
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}

08014a6e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8014a6e:	b580      	push	{r7, lr}
 8014a70:	b084      	sub	sp, #16
 8014a72:	af00      	add	r7, sp, #0
 8014a74:	60f8      	str	r0, [r7, #12]
 8014a76:	60b9      	str	r1, [r7, #8]
 8014a78:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8014a7a:	68b8      	ldr	r0, [r7, #8]
 8014a7c:	f000 f82b 	bl	8014ad6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8014a80:	4602      	mov	r2, r0
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	601a      	str	r2, [r3, #0]
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	687a      	ldr	r2, [r7, #4]
 8014a8a:	605a      	str	r2, [r3, #4]
      { }
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3710      	adds	r7, #16
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}

08014a96 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8014a96:	b580      	push	{r7, lr}
 8014a98:	b082      	sub	sp, #8
 8014a9a:	af00      	add	r7, sp, #0
 8014a9c:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	685b      	ldr	r3, [r3, #4]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d007      	beq.n	8014ab6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	6818      	ldr	r0, [r3, #0]
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	685b      	ldr	r3, [r3, #4]
 8014aae:	2201      	movs	r2, #1
 8014ab0:	4619      	mov	r1, r3
 8014ab2:	f000 f81b 	bl	8014aec <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	4618      	mov	r0, r3
 8014aba:	3708      	adds	r7, #8
 8014abc:	46bd      	mov	sp, r7
 8014abe:	bd80      	pop	{r7, pc}

08014ac0 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8014ac0:	b480      	push	{r7}
 8014ac2:	b083      	sub	sp, #12
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	4618      	mov	r0, r3
 8014acc:	370c      	adds	r7, #12
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad4:	4770      	bx	lr

08014ad6 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8014ad6:	b480      	push	{r7}
 8014ad8:	b083      	sub	sp, #12
 8014ada:	af00      	add	r7, sp, #0
 8014adc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	370c      	adds	r7, #12
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aea:	4770      	bx	lr

08014aec <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b084      	sub	sp, #16
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8014af8:	687a      	ldr	r2, [r7, #4]
 8014afa:	68b9      	ldr	r1, [r7, #8]
 8014afc:	68f8      	ldr	r0, [r7, #12]
 8014afe:	f000 f804 	bl	8014b0a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8014b02:	bf00      	nop
 8014b04:	3710      	adds	r7, #16
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}

08014b0a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8014b0a:	b580      	push	{r7, lr}
 8014b0c:	b084      	sub	sp, #16
 8014b0e:	af00      	add	r7, sp, #0
 8014b10:	60f8      	str	r0, [r7, #12]
 8014b12:	60b9      	str	r1, [r7, #8]
 8014b14:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	011b      	lsls	r3, r3, #4
 8014b1a:	4619      	mov	r1, r3
 8014b1c:	68b8      	ldr	r0, [r7, #8]
 8014b1e:	f013 fd36 	bl	802858e <_ZdlPvj>
      }
 8014b22:	3710      	adds	r7, #16
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd80      	pop	{r7, pc}

08014b28 <_ZSt20__throw_bad_weak_ptrv>:
  { _GLIBCXX_THROW_OR_ABORT(bad_weak_ptr()); }
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	af00      	add	r7, sp, #0
 8014b2c:	f014 f9a8 	bl	8028e80 <abort>

08014b30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv>:
    {
 8014b30:	b480      	push	{r7}
 8014b32:	b083      	sub	sp, #12
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
      if (_M_use_count == 0)
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	685b      	ldr	r3, [r3, #4]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d101      	bne.n	8014b44 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv+0x14>
	return false;
 8014b40:	2300      	movs	r3, #0
 8014b42:	e005      	b.n	8014b50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv+0x20>
      ++_M_use_count;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	685b      	ldr	r3, [r3, #4]
 8014b48:	1c5a      	adds	r2, r3, #1
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	605a      	str	r2, [r3, #4]
      return true;
 8014b4e:	2301      	movs	r3, #1
    }
 8014b50:	4618      	mov	r0, r3
 8014b52:	370c      	adds	r7, #12
 8014b54:	46bd      	mov	sp, r7
 8014b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5a:	4770      	bx	lr

08014b5c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_add_refEv>:
    { ++_M_weak_count; }
 8014b5c:	b480      	push	{r7}
 8014b5e:	b083      	sub	sp, #12
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	6078      	str	r0, [r7, #4]
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	689b      	ldr	r3, [r3, #8]
 8014b68:	1c5a      	adds	r2, r3, #1
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	609a      	str	r2, [r3, #8]
 8014b6e:	bf00      	nop
 8014b70:	370c      	adds	r7, #12
 8014b72:	46bd      	mov	sp, r7
 8014b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b78:	4770      	bx	lr

08014b7a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv>:
    {
 8014b7a:	b580      	push	{r7, lr}
 8014b7c:	b082      	sub	sp, #8
 8014b7e:	af00      	add	r7, sp, #0
 8014b80:	6078      	str	r0, [r7, #4]
      if (--_M_weak_count == 0)
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	689b      	ldr	r3, [r3, #8]
 8014b86:	1e5a      	subs	r2, r3, #1
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	609a      	str	r2, [r3, #8]
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	689b      	ldr	r3, [r3, #8]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	bf0c      	ite	eq
 8014b94:	2301      	moveq	r3, #1
 8014b96:	2300      	movne	r3, #0
 8014b98:	b2db      	uxtb	r3, r3
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d005      	beq.n	8014baa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv+0x30>
        _M_destroy();
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	330c      	adds	r3, #12
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	6878      	ldr	r0, [r7, #4]
 8014ba8:	4798      	blx	r3
    }
 8014baa:	bf00      	nop
 8014bac:	3708      	adds	r7, #8
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}

08014bb2 <_ZNKSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>:
    { return _M_use_count; }
 8014bb2:	b480      	push	{r7}
 8014bb4:	b083      	sub	sp, #12
 8014bb6:	af00      	add	r7, sp, #0
 8014bb8:	6078      	str	r0, [r7, #4]
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	370c      	adds	r7, #12
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc8:	4770      	bx	lr

08014bca <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>:
  static constexpr T highest() {
 8014bca:	b480      	push	{r7}
 8014bcc:	af00      	add	r7, sp, #0
    return T(-1);
 8014bce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  }
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bda:	4770      	bx	lr

08014bdc <_ZNK11ArduinoJson8V730HB2210JsonString4sizeEv>:
  size_t size() const {
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b082      	sub	sp, #8
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
    return str_.size();
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7f0 fb9c 	bl	8005324 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8014bec:	4603      	mov	r3, r0
  }
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3708      	adds	r7, #8
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}

08014bf6 <_ZNK11ArduinoJson8V730HB2210JsonStringcvbEv>:
  explicit operator bool() const {
 8014bf6:	b580      	push	{r7, lr}
 8014bf8:	b082      	sub	sp, #8
 8014bfa:	af00      	add	r7, sp, #0
 8014bfc:	6078      	str	r0, [r7, #4]
    return str_.data() != 0;
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	4618      	mov	r0, r3
 8014c02:	f7f0 fb9b 	bl	800533c <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 8014c06:	4603      	mov	r3, r0
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	bf14      	ite	ne
 8014c0c:	2301      	movne	r3, #1
 8014c0e:	2300      	moveq	r3, #0
 8014c10:	b2db      	uxtb	r3, r3
  }
 8014c12:	4618      	mov	r0, r3
 8014c14:	3708      	adds	r7, #8
 8014c16:	46bd      	mov	sp, r7
 8014c18:	bd80      	pop	{r7, pc}

08014c1a <_ZNK11ArduinoJson8V730HB226detail14CollectionData4headEv>:
  SlotId head() const {
 8014c1a:	b480      	push	{r7}
 8014c1c:	b083      	sub	sp, #12
 8014c1e:	af00      	add	r7, sp, #0
 8014c20:	6078      	str	r0, [r7, #4]
    return head_;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	881b      	ldrh	r3, [r3, #0]
  }
 8014c26:	4618      	mov	r0, r3
 8014c28:	370c      	adds	r7, #12
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c30:	4770      	bx	lr

08014c32 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc>:
  static char escapeChar(char c) {
 8014c32:	b580      	push	{r7, lr}
 8014c34:	b084      	sub	sp, #16
 8014c36:	af00      	add	r7, sp, #0
 8014c38:	4603      	mov	r3, r0
 8014c3a:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(true);
 8014c3c:	2001      	movs	r0, #1
 8014c3e:	f7f1 fb13 	bl	8006268 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 8014c42:	60f8      	str	r0, [r7, #12]
    while (p[0] && p[1] != c) {
 8014c44:	e002      	b.n	8014c4c <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc+0x1a>
      p += 2;
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	3302      	adds	r3, #2
 8014c4a:	60fb      	str	r3, [r7, #12]
    while (p[0] && p[1] != c) {
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	781b      	ldrb	r3, [r3, #0]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d005      	beq.n	8014c60 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc+0x2e>
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	3301      	adds	r3, #1
 8014c58:	781b      	ldrb	r3, [r3, #0]
 8014c5a:	79fa      	ldrb	r2, [r7, #7]
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	d1f2      	bne.n	8014c46 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc+0x14>
    return p[0];
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	781b      	ldrb	r3, [r3, #0]
  }
 8014c64:	4618      	mov	r0, r3
 8014c66:	3710      	adds	r7, #16
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	bd80      	pop	{r7, pc}

08014c6c <_ZN11ArduinoJson8V730HB226detail5pow10Ei>:
  }

  return powersOf10;
}

constexpr uint32_t pow10(int exponent) {
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b082      	sub	sp, #8
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
  return (exponent == 0) ? 1 : 10 * pow10(exponent - 1);
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d00a      	beq.n	8014c90 <_ZN11ArduinoJson8V730HB226detail5pow10Ei+0x24>
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	3b01      	subs	r3, #1
 8014c7e:	4618      	mov	r0, r3
 8014c80:	f7ff fff4 	bl	8014c6c <_ZN11ArduinoJson8V730HB226detail5pow10Ei>
 8014c84:	4602      	mov	r2, r0
 8014c86:	4613      	mov	r3, r2
 8014c88:	009b      	lsls	r3, r3, #2
 8014c8a:	4413      	add	r3, r2
 8014c8c:	005b      	lsls	r3, r3, #1
 8014c8e:	e000      	b.n	8014c92 <_ZN11ArduinoJson8V730HB226detail5pow10Ei+0x26>
 8014c90:	2301      	movs	r3, #1
}
 8014c92:	4618      	mov	r0, r3
 8014c94:	3708      	adds	r7, #8
 8014c96:	46bd      	mov	sp, r7
 8014c98:	bd80      	pop	{r7, pc}
	...

08014c9c <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda>:

inline FloatParts decomposeFloat(JsonFloat value, int8_t decimalPlaces) {
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b08c      	sub	sp, #48	@ 0x30
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	60f8      	str	r0, [r7, #12]
 8014ca4:	ed87 0b00 	vstr	d0, [r7]
 8014ca8:	460b      	mov	r3, r1
 8014caa:	72fb      	strb	r3, [r7, #11]
  uint32_t maxDecimalPart = pow10(decimalPlaces);
 8014cac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7ff ffdb 	bl	8014c6c <_ZN11ArduinoJson8V730HB226detail5pow10Ei>
 8014cb6:	62f8      	str	r0, [r7, #44]	@ 0x2c

  int16_t exponent = normalize(value);
 8014cb8:	463b      	mov	r3, r7
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f000 fbe0 	bl	8015480 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	857b      	strh	r3, [r7, #42]	@ 0x2a

  uint32_t integral = uint32_t(value);
 8014cc4:	ed97 7b00 	vldr	d7, [r7]
 8014cc8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8014ccc:	ee17 3a90 	vmov	r3, s15
 8014cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  // reduce number of decimal places by the number of integral places
  for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8014cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cd4:	623b      	str	r3, [r7, #32]
 8014cd6:	e011      	b.n	8014cfc <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x60>
    maxDecimalPart /= 10;
 8014cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cda:	4a44      	ldr	r2, [pc, #272]	@ (8014dec <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8014cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8014ce0:	08db      	lsrs	r3, r3, #3
 8014ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    decimalPlaces--;
 8014ce4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014ce8:	b2db      	uxtb	r3, r3
 8014cea:	3b01      	subs	r3, #1
 8014cec:	b2db      	uxtb	r3, r3
 8014cee:	72fb      	strb	r3, [r7, #11]
  for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8014cf0:	6a3b      	ldr	r3, [r7, #32]
 8014cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8014dec <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8014cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8014cf8:	08db      	lsrs	r3, r3, #3
 8014cfa:	623b      	str	r3, [r7, #32]
 8014cfc:	6a3b      	ldr	r3, [r7, #32]
 8014cfe:	2b09      	cmp	r3, #9
 8014d00:	d8ea      	bhi.n	8014cd8 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x3c>
  }

  JsonFloat remainder =
      (value - JsonFloat(integral)) * JsonFloat(maxDecimalPart);
 8014d02:	ed97 6b00 	vldr	d6, [r7]
 8014d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d08:	ee07 3a90 	vmov	s15, r3
 8014d0c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014d10:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d16:	ee07 3a90 	vmov	s15, r3
 8014d1a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  JsonFloat remainder =
 8014d1e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014d22:	ed87 7b04 	vstr	d7, [r7, #16]

  uint32_t decimal = uint32_t(remainder);
 8014d26:	ed97 7b04 	vldr	d7, [r7, #16]
 8014d2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8014d2e:	ee17 3a90 	vmov	r3, s15
 8014d32:	61fb      	str	r3, [r7, #28]
  remainder = remainder - JsonFloat(decimal);
 8014d34:	69fb      	ldr	r3, [r7, #28]
 8014d36:	ee07 3a90 	vmov	s15, r3
 8014d3a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014d3e:	ed97 6b04 	vldr	d6, [r7, #16]
 8014d42:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014d46:	ed87 7b04 	vstr	d7, [r7, #16]

  // rounding:
  // increment by 1 if remainder >= 0.5
  decimal += uint32_t(remainder * 2);
 8014d4a:	ed97 7b04 	vldr	d7, [r7, #16]
 8014d4e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014d52:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8014d56:	ee17 2a90 	vmov	r2, s15
 8014d5a:	69fb      	ldr	r3, [r7, #28]
 8014d5c:	4413      	add	r3, r2
 8014d5e:	61fb      	str	r3, [r7, #28]
  if (decimal >= maxDecimalPart) {
 8014d60:	69fa      	ldr	r2, [r7, #28]
 8014d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d64:	429a      	cmp	r2, r3
 8014d66:	d320      	bcc.n	8014daa <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
    decimal = 0;
 8014d68:	2300      	movs	r3, #0
 8014d6a:	61fb      	str	r3, [r7, #28]
    integral++;
 8014d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d6e:	3301      	adds	r3, #1
 8014d70:	627b      	str	r3, [r7, #36]	@ 0x24
    if (exponent && integral >= 10) {
 8014d72:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d017      	beq.n	8014daa <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
 8014d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d7c:	2b09      	cmp	r3, #9
 8014d7e:	d914      	bls.n	8014daa <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
      exponent++;
 8014d80:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8014d84:	b29b      	uxth	r3, r3
 8014d86:	3301      	adds	r3, #1
 8014d88:	b29b      	uxth	r3, r3
 8014d8a:	857b      	strh	r3, [r7, #42]	@ 0x2a
      integral = 1;
 8014d8c:	2301      	movs	r3, #1
 8014d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  // remove trailing zeros
  while (decimal % 10 == 0 && decimalPlaces > 0) {
 8014d90:	e00b      	b.n	8014daa <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
    decimal /= 10;
 8014d92:	69fb      	ldr	r3, [r7, #28]
 8014d94:	4a15      	ldr	r2, [pc, #84]	@ (8014dec <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8014d96:	fba2 2303 	umull	r2, r3, r2, r3
 8014d9a:	08db      	lsrs	r3, r3, #3
 8014d9c:	61fb      	str	r3, [r7, #28]
    decimalPlaces--;
 8014d9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014da2:	b2db      	uxtb	r3, r3
 8014da4:	3b01      	subs	r3, #1
 8014da6:	b2db      	uxtb	r3, r3
 8014da8:	72fb      	strb	r3, [r7, #11]
  while (decimal % 10 == 0 && decimalPlaces > 0) {
 8014daa:	69f9      	ldr	r1, [r7, #28]
 8014dac:	4b0f      	ldr	r3, [pc, #60]	@ (8014dec <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8014dae:	fba3 2301 	umull	r2, r3, r3, r1
 8014db2:	08da      	lsrs	r2, r3, #3
 8014db4:	4613      	mov	r3, r2
 8014db6:	009b      	lsls	r3, r3, #2
 8014db8:	4413      	add	r3, r2
 8014dba:	005b      	lsls	r3, r3, #1
 8014dbc:	1aca      	subs	r2, r1, r3
 8014dbe:	2a00      	cmp	r2, #0
 8014dc0:	d103      	bne.n	8014dca <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x12e>
 8014dc2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	dce3      	bgt.n	8014d92 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0xf6>
  }

  return {integral, decimal, exponent, decimalPlaces};
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014dce:	601a      	str	r2, [r3, #0]
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	69fa      	ldr	r2, [r7, #28]
 8014dd4:	605a      	str	r2, [r3, #4]
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8014dda:	811a      	strh	r2, [r3, #8]
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	7afa      	ldrb	r2, [r7, #11]
 8014de0:	729a      	strb	r2, [r3, #10]
}
 8014de2:	68f8      	ldr	r0, [r7, #12]
 8014de4:	3730      	adds	r7, #48	@ 0x30
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd80      	pop	{r7, pc}
 8014dea:	bf00      	nop
 8014dec:	cccccccd 	.word	0xcccccccd

08014df0 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(JsonString src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static JsonString fromJson(JsonVariantConst src) {
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b086      	sub	sp, #24
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	60f8      	str	r0, [r7, #12]
 8014df8:	1d3b      	adds	r3, r7, #4
 8014dfa:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 8014dfe:	1d3b      	adds	r3, r7, #4
 8014e00:	4618      	mov	r0, r3
 8014e02:	f7f2 fb8d 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8014e06:	6178      	str	r0, [r7, #20]
    return data ? data->asString() : JsonString();
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d005      	beq.n	8014e1a <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE+0x2a>
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	6979      	ldr	r1, [r7, #20]
 8014e12:	4618      	mov	r0, r3
 8014e14:	f7f0 fc4e 	bl	80056b4 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8014e18:	e002      	b.n	8014e20 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE+0x30>
 8014e1a:	68f8      	ldr	r0, [r7, #12]
 8014e1c:	f7f0 fb04 	bl	8005428 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
  }
 8014e20:	68f8      	ldr	r0, [r7, #12]
 8014e22:	3718      	adds	r7, #24
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}

08014e28 <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

#endif

#if ARDUINOJSON_ENABLE_STD_STRING

inline void convertFromJson(JsonVariantConst src, std::string& dst) {
 8014e28:	b590      	push	{r4, r7, lr}
 8014e2a:	b089      	sub	sp, #36	@ 0x24
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	f107 0308 	add.w	r3, r7, #8
 8014e32:	e883 0003 	stmia.w	r3, {r0, r1}
 8014e36:	607a      	str	r2, [r7, #4]
  JsonString str = src.as<JsonString>();
 8014e38:	f107 0314 	add.w	r3, r7, #20
 8014e3c:	f107 0208 	add.w	r2, r7, #8
 8014e40:	4611      	mov	r1, r2
 8014e42:	4618      	mov	r0, r3
 8014e44:	f000 fbe8 	bl	8015618 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst2asINS0_10JsonStringELi0EEET_v>
  if (str)
 8014e48:	f107 0314 	add.w	r3, r7, #20
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f7ff fed2 	bl	8014bf6 <_ZNK11ArduinoJson8V730HB2210JsonStringcvbEv>
 8014e52:	4603      	mov	r3, r0
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d011      	beq.n	8014e7c <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>
    dst.assign(str.c_str(), str.size());
 8014e58:	f107 0314 	add.w	r3, r7, #20
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f7f0 fb0d 	bl	800547c <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8014e62:	4604      	mov	r4, r0
 8014e64:	f107 0314 	add.w	r3, r7, #20
 8014e68:	4618      	mov	r0, r3
 8014e6a:	f7ff feb7 	bl	8014bdc <_ZNK11ArduinoJson8V730HB2210JsonString4sizeEv>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	461a      	mov	r2, r3
 8014e72:	4621      	mov	r1, r4
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f013 fe3b 	bl	8028af0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcj>
  else
    serializeJson(src, dst);
}
 8014e7a:	e006      	b.n	8014e8a <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
    serializeJson(src, dst);
 8014e7c:	687a      	ldr	r2, [r7, #4]
 8014e7e:	f107 0308 	add.w	r3, r7, #8
 8014e82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014e86:	f000 fbd7 	bl	8015638 <_ZN11ArduinoJson8V730HB2213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEjNS0_16JsonVariantConstERT_>
}
 8014e8a:	bf00      	nop
 8014e8c:	3724      	adds	r7, #36	@ 0x24
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bd90      	pop	{r4, r7, pc}

08014e92 <_ZN6Remora15getSerialThreadEv>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
    volatile rxData_t* getRxData() { return &rxData; }
    volatile bool* getReset() { return &reset; };
    pruThread* getSerialThread() { return serialThread.get(); }
 8014e92:	b580      	push	{r7, lr}
 8014e94:	b082      	sub	sp, #8
 8014e96:	af00      	add	r7, sp, #0
 8014e98:	6078      	str	r0, [r7, #4]
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	3324      	adds	r3, #36	@ 0x24
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f7f6 ff3f 	bl	800bd22 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	3708      	adds	r7, #8
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}
	...

08014eb0 <_ZN14TMC2208StepperD1Ev>:
		INIT_REGISTER(ENC_DEVIATION){.sr=0};

		static constexpr float default_RS = 0.075;
};

class TMC2208Stepper : public TMCStepper {
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b082      	sub	sp, #8
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
 8014eb8:	4a08      	ldr	r2, [pc, #32]	@ (8014edc <_ZN14TMC2208StepperD1Ev+0x2c>)
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	601a      	str	r2, [r3, #0]
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	334c      	adds	r3, #76	@ 0x4c
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f013 fc6f 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	3334      	adds	r3, #52	@ 0x34
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f013 fc6a 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	3708      	adds	r7, #8
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	bd80      	pop	{r7, pc}
 8014edc:	0802b114 	.word	0x0802b114

08014ee0 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_f>:
    public:

        TMC2208Stepper(std::string SWRXpin, std::string SWTXpin, float RS) :
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b090      	sub	sp, #64	@ 0x40
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	60f8      	str	r0, [r7, #12]
 8014ee8:	60b9      	str	r1, [r7, #8]
 8014eea:	607a      	str	r2, [r7, #4]
 8014eec:	ed87 0a00 	vstr	s0, [r7]
                TMC2208Stepper(SWRXpin, SWTXpin, RS, TMC2208_SLAVE_ADDR)
 8014ef0:	f107 0310 	add.w	r3, r7, #16
 8014ef4:	68b9      	ldr	r1, [r7, #8]
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f013 fe65 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8014efc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014f00:	6879      	ldr	r1, [r7, #4]
 8014f02:	4618      	mov	r0, r3
 8014f04:	f013 fe5f 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8014f08:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8014f0c:	f107 0110 	add.w	r1, r7, #16
 8014f10:	2300      	movs	r3, #0
 8014f12:	ed97 0a00 	vldr	s0, [r7]
 8014f16:	68f8      	ldr	r0, [r7, #12]
 8014f18:	f7ee fecc 	bl	8003cb4 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 8014f1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014f20:	4618      	mov	r0, r3
 8014f22:	f013 fc40 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8014f26:	f107 0310 	add.w	r3, r7, #16
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f013 fc3b 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                {}
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	4618      	mov	r0, r3
 8014f34:	3740      	adds	r7, #64	@ 0x40
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}
	...

08014f3c <_ZN3TMCC1EP6Remoraf>:
	Remora* 	instance;
	float       Rsense;

public:

	TMC(Remora* _instance, float _Rsense) : instance(_instance), Rsense(_Rsense) {}
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b084      	sub	sp, #16
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	60f8      	str	r0, [r7, #12]
 8014f44:	60b9      	str	r1, [r7, #8]
 8014f46:	ed87 0a01 	vstr	s0, [r7, #4]
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7fc fef7 	bl	8011d40 <_ZN6ModuleC1Ev>
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	3318      	adds	r3, #24
 8014f56:	4618      	mov	r0, r3
 8014f58:	f000 fbaa 	bl	80156b0 <_ZNSt23enable_shared_from_thisI3TMCEC1Ev>
 8014f5c:	4a06      	ldr	r2, [pc, #24]	@ (8014f78 <_ZN3TMCC1EP6Remoraf+0x3c>)
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	601a      	str	r2, [r3, #0]
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	68ba      	ldr	r2, [r7, #8]
 8014f66:	621a      	str	r2, [r3, #32]
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	687a      	ldr	r2, [r7, #4]
 8014f6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	4618      	mov	r0, r3
 8014f72:	3710      	adds	r7, #16
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}
 8014f78:	0802b584 	.word	0x0802b584

08014f7c <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b082      	sub	sp, #8
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	3304      	adds	r3, #4
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f7f6 feb8 	bl	800bcfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	4618      	mov	r0, r3
 8014f92:	3708      	adds	r7, #8
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}

08014f98 <_ZNSt10shared_ptrI3TMCED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b082      	sub	sp, #8
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f7ff ffea 	bl	8014f7c <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	4618      	mov	r0, r3
 8014fac:	3708      	adds	r7, #8
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	bd80      	pop	{r7, pc}

08014fb2 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8014fb2:	b580      	push	{r7, lr}
 8014fb4:	b082      	sub	sp, #8
 8014fb6:	af00      	add	r7, sp, #0
 8014fb8:	6078      	str	r0, [r7, #4]
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	3304      	adds	r3, #4
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f7f6 fe9d 	bl	800bcfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	3708      	adds	r7, #8
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bd80      	pop	{r7, pc}

08014fce <_ZNSt10shared_ptrI7TMC2208ED1Ev>:
 8014fce:	b580      	push	{r7, lr}
 8014fd0:	b082      	sub	sp, #8
 8014fd2:	af00      	add	r7, sp, #0
 8014fd4:	6078      	str	r0, [r7, #4]
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	4618      	mov	r0, r3
 8014fda:	f7ff ffea 	bl	8014fb2 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	3708      	adds	r7, #8
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}

08014fe8 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "tmc.h"
#include <cstdint>

#define TOFF_VALUE  4 // [1... 15]

std::shared_ptr<Module> TMC2208::create(const JsonObject& config, Remora* instance) {
 8014fe8:	b590      	push	{r4, r7, lr}
 8014fea:	b0b9      	sub	sp, #228	@ 0xe4
 8014fec:	af04      	add	r7, sp, #16
 8014fee:	60f8      	str	r0, [r7, #12]
 8014ff0:	60b9      	str	r1, [r7, #8]
 8014ff2:	607a      	str	r2, [r7, #4]
    printf("Creating TMC2208 module\n");
 8014ff4:	484a      	ldr	r0, [pc, #296]	@ (8015120 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x138>)
 8014ff6:	f014 f9f5 	bl	80293e4 <puts>

    const char* comment = config["Comment"];
 8014ffa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8014ffe:	4a49      	ldr	r2, [pc, #292]	@ (8015124 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x13c>)
 8015000:	68b9      	ldr	r1, [r7, #8]
 8015002:	4618      	mov	r0, r3
 8015004:	f7fd f91b 	bl	801223e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8015008:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801500c:	4618      	mov	r0, r3
 801500e:	f7f2 fd2c 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8015012:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    printf("Comment: %s\n", comment);
 8015016:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 801501a:	4843      	ldr	r0, [pc, #268]	@ (8015128 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x140>)
 801501c:	f014 f972 	bl	8029304 <iprintf>

    std::string RxPin = config["RX pin"];
 8015020:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015024:	4a41      	ldr	r2, [pc, #260]	@ (801512c <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x144>)
 8015026:	68b9      	ldr	r1, [r7, #8]
 8015028:	4618      	mov	r0, r3
 801502a:	f7f2 fcf9 	bl	8007a20 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801502e:	f107 031c 	add.w	r3, r7, #28
 8015032:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8015036:	4611      	mov	r1, r2
 8015038:	4618      	mov	r0, r3
 801503a:	f000 fb61 	bl	8015700 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    float RSense = config["RSense"];
 801503e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8015042:	4a3b      	ldr	r2, [pc, #236]	@ (8015130 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x148>)
 8015044:	68b9      	ldr	r1, [r7, #8]
 8015046:	4618      	mov	r0, r3
 8015048:	f7f2 fcea 	bl	8007a20 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801504c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8015050:	4618      	mov	r0, r3
 8015052:	f000 fb63 	bl	801571c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>
 8015056:	eef0 7a40 	vmov.f32	s15, s0
 801505a:	edc7 7a06 	vstr	s15, [r7, #24]
    uint16_t current = config["Current"];
 801505e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8015062:	4a34      	ldr	r2, [pc, #208]	@ (8015134 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x14c>)
 8015064:	68b9      	ldr	r1, [r7, #8]
 8015066:	4618      	mov	r0, r3
 8015068:	f7fd f8e9 	bl	801223e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801506c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8015070:	4618      	mov	r0, r3
 8015072:	f000 fb61 	bl	8015738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8015076:	4603      	mov	r3, r0
 8015078:	82fb      	strh	r3, [r7, #22]
    uint16_t microsteps = config["Microsteps"];
 801507a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801507e:	4a2e      	ldr	r2, [pc, #184]	@ (8015138 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x150>)
 8015080:	68b9      	ldr	r1, [r7, #8]
 8015082:	4618      	mov	r0, r3
 8015084:	f7fa f8f9 	bl	800f27a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8015088:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801508c:	4618      	mov	r0, r3
 801508e:	f000 fb53 	bl	8015738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8015092:	4603      	mov	r3, r0
 8015094:	82bb      	strh	r3, [r7, #20]
    bool stealthchop = (strcmp(config["Stealth chop"], "on") == 0);
 8015096:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 801509a:	4a28      	ldr	r2, [pc, #160]	@ (801513c <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x154>)
 801509c:	68b9      	ldr	r1, [r7, #8]
 801509e:	4618      	mov	r0, r3
 80150a0:	f7fe ffa2 	bl	8013fe8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80150a4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80150a8:	4618      	mov	r0, r3
 80150aa:	f7f2 fcde 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80150ae:	4603      	mov	r3, r0
 80150b0:	4923      	ldr	r1, [pc, #140]	@ (8015140 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>)
 80150b2:	4618      	mov	r0, r3
 80150b4:	f7eb f914 	bl	80002e0 <strcmp>
 80150b8:	4603      	mov	r3, r0
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	bf0c      	ite	eq
 80150be:	2301      	moveq	r3, #1
 80150c0:	2300      	movne	r3, #0
 80150c2:	b2db      	uxtb	r3, r3
 80150c4:	74fb      	strb	r3, [r7, #19]

    return std::make_shared<TMC2208>(std::move(RxPin), RSense, current, microsteps, stealthchop, instance);
 80150c6:	f107 031c 	add.w	r3, r7, #28
 80150ca:	4618      	mov	r0, r3
 80150cc:	f7fc f975 	bl	80113ba <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80150d0:	4604      	mov	r4, r0
 80150d2:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80150d6:	f107 0116 	add.w	r1, r7, #22
 80150da:	f107 0218 	add.w	r2, r7, #24
 80150de:	1d3b      	adds	r3, r7, #4
 80150e0:	9302      	str	r3, [sp, #8]
 80150e2:	f107 0313 	add.w	r3, r7, #19
 80150e6:	9301      	str	r3, [sp, #4]
 80150e8:	f107 0314 	add.w	r3, r7, #20
 80150ec:	9300      	str	r3, [sp, #0]
 80150ee:	460b      	mov	r3, r1
 80150f0:	4621      	mov	r1, r4
 80150f2:	f000 fb2d 	bl	8015750 <_ZSt11make_sharedI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESG_E4typeEEDpOT0_>
 80150f6:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80150fa:	4619      	mov	r1, r3
 80150fc:	68f8      	ldr	r0, [r7, #12]
 80150fe:	f000 fb59 	bl	80157b4 <_ZNSt10shared_ptrI6ModuleEC1I7TMC2208vEEOS_IT_E>
 8015102:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8015106:	4618      	mov	r0, r3
 8015108:	f7ff ff61 	bl	8014fce <_ZNSt10shared_ptrI7TMC2208ED1Ev>
}
 801510c:	f107 031c 	add.w	r3, r7, #28
 8015110:	4618      	mov	r0, r3
 8015112:	f013 fb48 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    return std::make_shared<TMC2208>(std::move(RxPin), RSense, current, microsteps, stealthchop, instance);
 8015116:	bf00      	nop
}
 8015118:	68f8      	ldr	r0, [r7, #12]
 801511a:	37d4      	adds	r7, #212	@ 0xd4
 801511c:	46bd      	mov	sp, r7
 801511e:	bd90      	pop	{r4, r7, pc}
 8015120:	0802ab68 	.word	0x0802ab68
 8015124:	0802ab80 	.word	0x0802ab80
 8015128:	0802ab88 	.word	0x0802ab88
 801512c:	0802ab98 	.word	0x0802ab98
 8015130:	0802aba0 	.word	0x0802aba0
 8015134:	0802aba8 	.word	0x0802aba8
 8015138:	0802abb0 	.word	0x0802abb0
 801513c:	0802abbc 	.word	0x0802abbc
 8015140:	0802abcc 	.word	0x0802abcc

08015144 <_ZN3TMCD1Ev>:
class TMC : public Module, public std::enable_shared_from_this<TMC>
 8015144:	b580      	push	{r7, lr}
 8015146:	b082      	sub	sp, #8
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
 801514c:	4a08      	ldr	r2, [pc, #32]	@ (8015170 <_ZN3TMCD1Ev+0x2c>)
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	601a      	str	r2, [r3, #0]
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	3318      	adds	r3, #24
 8015156:	4618      	mov	r0, r3
 8015158:	f000 fab7 	bl	80156ca <_ZNSt23enable_shared_from_thisI3TMCED1Ev>
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	4618      	mov	r0, r3
 8015160:	f7fc fe0a 	bl	8011d78 <_ZN6ModuleD1Ev>
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	4618      	mov	r0, r3
 8015168:	3708      	adds	r7, #8
 801516a:	46bd      	mov	sp, r7
 801516c:	bd80      	pop	{r7, pc}
 801516e:	bf00      	nop
 8015170:	0802b584 	.word	0x0802b584

08015174 <_ZN3TMCD0Ev>:
 8015174:	b580      	push	{r7, lr}
 8015176:	b082      	sub	sp, #8
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
 801517c:	6878      	ldr	r0, [r7, #4]
 801517e:	f7ff ffe1 	bl	8015144 <_ZN3TMCD1Ev>
 8015182:	2128      	movs	r1, #40	@ 0x28
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f013 fa02 	bl	802858e <_ZdlPvj>
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	4618      	mov	r0, r3
 801518e:	3708      	adds	r7, #8
 8015190:	46bd      	mov	sp, r7
 8015192:	bd80      	pop	{r7, pc}

08015194 <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttbP6Remora>:

TMC2208::TMC2208(std::string _rxtxPin, float _Rsense, uint16_t _mA, uint16_t _microsteps, bool _stealth, Remora* _instance)
 8015194:	b590      	push	{r4, r7, lr}
 8015196:	b085      	sub	sp, #20
 8015198:	af00      	add	r7, sp, #0
 801519a:	60f8      	str	r0, [r7, #12]
 801519c:	60b9      	str	r1, [r7, #8]
 801519e:	ed87 0a01 	vstr	s0, [r7, #4]
 80151a2:	4611      	mov	r1, r2
 80151a4:	461a      	mov	r2, r3
 80151a6:	460b      	mov	r3, r1
 80151a8:	807b      	strh	r3, [r7, #2]
 80151aa:	4613      	mov	r3, r2
 80151ac:	803b      	strh	r3, [r7, #0]
    : TMC{_instance, _Rsense},  // Call base class constructor
      rxtxPin(std::move(_rxtxPin)),
      mA(_mA),
      microsteps(_microsteps),
      stealth(_stealth),
      driver(std::make_unique<TMC2208Stepper>(rxtxPin, rxtxPin, Rsense)) {}
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	ed97 0a01 	vldr	s0, [r7, #4]
 80151b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80151b6:	4618      	mov	r0, r3
 80151b8:	f7ff fec0 	bl	8014f3c <_ZN3TMCC1EP6Remoraf>
 80151bc:	4a17      	ldr	r2, [pc, #92]	@ (801521c <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttbP6Remora+0x88>)
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	601a      	str	r2, [r3, #0]
      rxtxPin(std::move(_rxtxPin)),
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80151c8:	68b8      	ldr	r0, [r7, #8]
 80151ca:	f7fc f8f6 	bl	80113ba <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80151ce:	4603      	mov	r3, r0
 80151d0:	4619      	mov	r1, r3
 80151d2:	4620      	mov	r0, r4
 80151d4:	f013 fac8 	bl	8028768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      mA(_mA),
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	887a      	ldrh	r2, [r7, #2]
 80151dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      microsteps(_microsteps),
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	883a      	ldrh	r2, [r7, #0]
 80151e4:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
      stealth(_stealth),
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 80151ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      driver(std::make_unique<TMC2208Stepper>(rxtxPin, rxtxPin, Rsense)) {}
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 801520a:	4623      	mov	r3, r4
 801520c:	f000 fae5 	bl	80157da <_ZSt11make_uniqueI14TMC2208StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	4618      	mov	r0, r3
 8015214:	3714      	adds	r7, #20
 8015216:	46bd      	mov	sp, r7
 8015218:	bd90      	pop	{r4, r7, pc}
 801521a:	bf00      	nop
 801521c:	0802b560 	.word	0x0802b560

08015220 <_ZN7TMC22089configureEv>:


void TMC2208::configure()
{
 8015220:	b590      	push	{r4, r7, lr}
 8015222:	b08b      	sub	sp, #44	@ 0x2c
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
    printf("\nStarting the Serial thread\n");
 8015228:	4877      	ldr	r0, [pc, #476]	@ (8015408 <_ZN7TMC22089configureEv+0x1e8>)
 801522a:	f014 f8db 	bl	80293e4 <puts>
    instance->getSerialThread()->startThread();
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	6a1b      	ldr	r3, [r3, #32]
 8015232:	4618      	mov	r0, r3
 8015234:	f7ff fe2d 	bl	8014e92 <_ZN6Remora15getSerialThreadEv>
 8015238:	4603      	mov	r3, r0
 801523a:	4618      	mov	r0, r3
 801523c:	f005 fda0 	bl	801ad80 <_ZN9pruThread11startThreadEv>

    auto self = shared_from_this();
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f103 0218 	add.w	r2, r3, #24
 8015246:	f107 030c 	add.w	r3, r7, #12
 801524a:	4611      	mov	r1, r2
 801524c:	4618      	mov	r0, r3
 801524e:	f000 fa49 	bl	80156e4 <_ZNSt23enable_shared_from_thisI3TMCE16shared_from_thisEv>
    instance->getSerialThread()->registerModule(self);
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	6a1b      	ldr	r3, [r3, #32]
 8015256:	4618      	mov	r0, r3
 8015258:	f7ff fe1b 	bl	8014e92 <_ZN6Remora15getSerialThreadEv>
 801525c:	4604      	mov	r4, r0
 801525e:	f107 020c 	add.w	r2, r7, #12
 8015262:	f107 0314 	add.w	r3, r7, #20
 8015266:	4611      	mov	r1, r2
 8015268:	4618      	mov	r0, r3
 801526a:	f000 fb1b 	bl	80158a4 <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 801526e:	f107 0314 	add.w	r3, r7, #20
 8015272:	4619      	mov	r1, r3
 8015274:	4620      	mov	r0, r4
 8015276:	f005 fcef 	bl	801ac58 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 801527a:	f107 0314 	add.w	r3, r7, #20
 801527e:	4618      	mov	r0, r3
 8015280:	f7f5 ff0f 	bl	800b0a2 <_ZNSt10shared_ptrI6ModuleED1Ev>

    driver->begin();
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	3348      	adds	r3, #72	@ 0x48
 8015288:	4618      	mov	r0, r3
 801528a:	f000 fb1b 	bl	80158c4 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801528e:	4603      	mov	r3, r0
 8015290:	4618      	mov	r0, r3
 8015292:	f7ee fdc1 	bl	8003e18 <_ZN14TMC2208Stepper5beginEv>

    printf("Testing connection to TMC driver... ");
 8015296:	485d      	ldr	r0, [pc, #372]	@ (801540c <_ZN7TMC22089configureEv+0x1ec>)
 8015298:	f014 f834 	bl	8029304 <iprintf>
    uint16_t result = driver->test_connection();
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	3348      	adds	r3, #72	@ 0x48
 80152a0:	4618      	mov	r0, r3
 80152a2:	f000 fb0f 	bl	80158c4 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80152a6:	4603      	mov	r3, r0
 80152a8:	4618      	mov	r0, r3
 80152aa:	f7ef fb4d 	bl	8004948 <_ZN10TMCStepper15test_connectionEv>
 80152ae:	4603      	mov	r3, r0
 80152b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    
    if (result) {
 80152b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d018      	beq.n	80152ea <_ZN7TMC22089configureEv+0xca>
        printf("Failed!\nLikely cause: ");
 80152b8:	4855      	ldr	r0, [pc, #340]	@ (8015410 <_ZN7TMC22089configureEv+0x1f0>)
 80152ba:	f014 f823 	bl	8029304 <iprintf>
        switch(result) {
 80152be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80152c0:	2b01      	cmp	r3, #1
 80152c2:	d002      	beq.n	80152ca <_ZN7TMC22089configureEv+0xaa>
 80152c4:	2b02      	cmp	r3, #2
 80152c6:	d004      	beq.n	80152d2 <_ZN7TMC22089configureEv+0xb2>
 80152c8:	e007      	b.n	80152da <_ZN7TMC22089configureEv+0xba>
            case 1: printf("Loose connection\n"); break;
 80152ca:	4852      	ldr	r0, [pc, #328]	@ (8015414 <_ZN7TMC22089configureEv+0x1f4>)
 80152cc:	f014 f88a 	bl	80293e4 <puts>
 80152d0:	e007      	b.n	80152e2 <_ZN7TMC22089configureEv+0xc2>
            case 2: printf("No power\n"); break;
 80152d2:	4851      	ldr	r0, [pc, #324]	@ (8015418 <_ZN7TMC22089configureEv+0x1f8>)
 80152d4:	f014 f886 	bl	80293e4 <puts>
 80152d8:	e003      	b.n	80152e2 <_ZN7TMC22089configureEv+0xc2>
            default: printf("Unknown issue\n"); break;
 80152da:	4850      	ldr	r0, [pc, #320]	@ (801541c <_ZN7TMC22089configureEv+0x1fc>)
 80152dc:	f014 f882 	bl	80293e4 <puts>
 80152e0:	bf00      	nop
        }
        printf("Fix the problem and reset the board.\n");
 80152e2:	484f      	ldr	r0, [pc, #316]	@ (8015420 <_ZN7TMC22089configureEv+0x200>)
 80152e4:	f014 f87e 	bl	80293e4 <puts>
 80152e8:	e002      	b.n	80152f0 <_ZN7TMC22089configureEv+0xd0>
    } else {
        printf("OK\n");
 80152ea:	484e      	ldr	r0, [pc, #312]	@ (8015424 <_ZN7TMC22089configureEv+0x204>)
 80152ec:	f014 f87a 	bl	80293e4 <puts>
    }

    // Configure driver settings
    driver->toff(TOFF_VALUE);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	3348      	adds	r3, #72	@ 0x48
 80152f4:	4618      	mov	r0, r3
 80152f6:	f000 fae5 	bl	80158c4 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80152fa:	4603      	mov	r3, r0
 80152fc:	2104      	movs	r1, #4
 80152fe:	4618      	mov	r0, r3
 8015300:	f7ed fc18 	bl	8002b34 <_ZN14TMC2208Stepper4toffEh>
    driver->blank_time(24);
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	3348      	adds	r3, #72	@ 0x48
 8015308:	4618      	mov	r0, r3
 801530a:	f000 fadb 	bl	80158c4 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801530e:	4603      	mov	r3, r0
 8015310:	2118      	movs	r1, #24
 8015312:	4618      	mov	r0, r3
 8015314:	f7ef fbe4 	bl	8004ae0 <_ZN10TMCStepper10blank_timeEh>
    driver->rms_current(mA);
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	3348      	adds	r3, #72	@ 0x48
 801531c:	4618      	mov	r0, r3
 801531e:	f000 fad1 	bl	80158c4 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 8015322:	4603      	mov	r3, r0
 8015324:	461a      	mov	r2, r3
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801532c:	4619      	mov	r1, r3
 801532e:	4610      	mov	r0, r2
 8015330:	f7ef fa6e 	bl	8004810 <_ZN10TMCStepper11rms_currentEt>
    driver->microsteps(microsteps);
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	3348      	adds	r3, #72	@ 0x48
 8015338:	4618      	mov	r0, r3
 801533a:	f000 fac3 	bl	80158c4 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801533e:	4603      	mov	r3, r0
 8015340:	461a      	mov	r2, r3
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8015348:	4619      	mov	r1, r3
 801534a:	4610      	mov	r0, r2
 801534c:	f7ef fb18 	bl	8004980 <_ZN10TMCStepper10microstepsEt>
    driver->en_spreadCycle(!stealth);
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	3348      	adds	r3, #72	@ 0x48
 8015354:	4618      	mov	r0, r3
 8015356:	f000 fab5 	bl	80158c4 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801535a:	4602      	mov	r2, r0
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015362:	f083 0301 	eor.w	r3, r3, #1
 8015366:	b2db      	uxtb	r3, r3
 8015368:	4619      	mov	r1, r3
 801536a:	4610      	mov	r0, r2
 801536c:	f7ed fe70 	bl	8003050 <_ZN14TMC2208Stepper14en_spreadCycleEb>
    driver->pwm_autoscale(true);
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	3348      	adds	r3, #72	@ 0x48
 8015374:	4618      	mov	r0, r3
 8015376:	f000 faa5 	bl	80158c4 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801537a:	4603      	mov	r3, r0
 801537c:	2101      	movs	r1, #1
 801537e:	4618      	mov	r0, r3
 8015380:	f7ed ff6c 	bl	800325c <_ZN14TMC2208Stepper13pwm_autoscaleEb>
    driver->iholddelay(10);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	3348      	adds	r3, #72	@ 0x48
 8015388:	4618      	mov	r0, r3
 801538a:	f000 fa9b 	bl	80158c4 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801538e:	4603      	mov	r3, r0
 8015390:	210a      	movs	r1, #10
 8015392:	4618      	mov	r0, r3
 8015394:	f7ed ff14 	bl	80031c0 <_ZN10TMCStepper10iholddelayEh>
    driver->TPOWERDOWN(128);  // ~2s until driver lowers to hold current
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	3348      	adds	r3, #72	@ 0x48
 801539c:	4618      	mov	r0, r3
 801539e:	f000 fa91 	bl	80158c4 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80153a2:	4603      	mov	r3, r0
 80153a4:	2180      	movs	r1, #128	@ 0x80
 80153a6:	4618      	mov	r0, r3
 80153a8:	f7ef fbd2 	bl	8004b50 <_ZN10TMCStepper10TPOWERDOWNEh>

    printf("\nStopping the Serial thread\n");
 80153ac:	481e      	ldr	r0, [pc, #120]	@ (8015428 <_ZN7TMC22089configureEv+0x208>)
 80153ae:	f014 f819 	bl	80293e4 <puts>
    instance->getSerialThread()->stopThread();
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	6a1b      	ldr	r3, [r3, #32]
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7ff fd6b 	bl	8014e92 <_ZN6Remora15getSerialThreadEv>
 80153bc:	4603      	mov	r3, r0
 80153be:	4618      	mov	r0, r3
 80153c0:	f005 fd0b 	bl	801adda <_ZN9pruThread10stopThreadEv>
    instance->getSerialThread()->unregisterModule(self);
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	6a1b      	ldr	r3, [r3, #32]
 80153c8:	4618      	mov	r0, r3
 80153ca:	f7ff fd62 	bl	8014e92 <_ZN6Remora15getSerialThreadEv>
 80153ce:	4604      	mov	r4, r0
 80153d0:	f107 020c 	add.w	r2, r7, #12
 80153d4:	f107 031c 	add.w	r3, r7, #28
 80153d8:	4611      	mov	r1, r2
 80153da:	4618      	mov	r0, r3
 80153dc:	f000 fa62 	bl	80158a4 <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 80153e0:	f107 031c 	add.w	r3, r7, #28
 80153e4:	4619      	mov	r1, r3
 80153e6:	4620      	mov	r0, r4
 80153e8:	f005 fc82 	bl	801acf0 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>
 80153ec:	f107 031c 	add.w	r3, r7, #28
 80153f0:	4618      	mov	r0, r3
 80153f2:	f7f5 fe56 	bl	800b0a2 <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 80153f6:	f107 030c 	add.w	r3, r7, #12
 80153fa:	4618      	mov	r0, r3
 80153fc:	f7ff fdcc 	bl	8014f98 <_ZNSt10shared_ptrI3TMCED1Ev>
 8015400:	372c      	adds	r7, #44	@ 0x2c
 8015402:	46bd      	mov	sp, r7
 8015404:	bd90      	pop	{r4, r7, pc}
 8015406:	bf00      	nop
 8015408:	0802abd0 	.word	0x0802abd0
 801540c:	0802abec 	.word	0x0802abec
 8015410:	0802ac14 	.word	0x0802ac14
 8015414:	0802ac2c 	.word	0x0802ac2c
 8015418:	0802ac40 	.word	0x0802ac40
 801541c:	0802ac4c 	.word	0x0802ac4c
 8015420:	0802ac5c 	.word	0x0802ac5c
 8015424:	0802ac84 	.word	0x0802ac84
 8015428:	0802ac88 	.word	0x0802ac88

0801542c <_ZN7TMC22086updateEv>:

void TMC2208::update()
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b082      	sub	sp, #8
 8015430:	af00      	add	r7, sp, #0
 8015432:	6078      	str	r0, [r7, #4]
    driver->SWSerial->tickerHandler();
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	3348      	adds	r3, #72	@ 0x48
 8015438:	4618      	mov	r0, r3
 801543a:	f000 fa43 	bl	80158c4 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801543e:	4603      	mov	r3, r0
 8015440:	695b      	ldr	r3, [r3, #20]
 8015442:	4618      	mov	r0, r3
 8015444:	f7ed f884 	bl	8002550 <_ZN14SoftwareSerial13tickerHandlerEv>
}
 8015448:	bf00      	nop
 801544a:	3708      	adds	r7, #8
 801544c:	46bd      	mov	sp, r7
 801544e:	bd80      	pop	{r7, pc}

08015450 <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4sizeEv>:

  TChar* data() const {
    return data_;
  }

  size_t size() const {
 8015450:	b480      	push	{r7}
 8015452:	b083      	sub	sp, #12
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
    return size_;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	685b      	ldr	r3, [r3, #4]
  }
 801545c:	4618      	mov	r0, r3
 801545e:	370c      	adds	r7, #12
 8015460:	46bd      	mov	sp, r7
 8015462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015466:	4770      	bx	lr

08015468 <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4dataEv>:
  TChar* data() const {
 8015468:	b480      	push	{r7}
 801546a:	b083      	sub	sp, #12
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
    return data_;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	681b      	ldr	r3, [r3, #0]
  }
 8015474:	4618      	mov	r0, r3
 8015476:	370c      	adds	r7, #12
 8015478:	46bd      	mov	sp, r7
 801547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547e:	4770      	bx	lr

08015480 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_>:
inline int16_t normalize(TFloat& value) {
 8015480:	b580      	push	{r7, lr}
 8015482:	ed2d 8b02 	vpush	{d8}
 8015486:	b088      	sub	sp, #32
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
  int16_t powersOf10 = 0;
 801548c:	2300      	movs	r3, #0
 801548e:	83fb      	strh	r3, [r7, #30]
  int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
 8015490:	2308      	movs	r3, #8
 8015492:	777b      	strb	r3, [r7, #29]
  int bit = 1 << index;
 8015494:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015498:	2201      	movs	r2, #1
 801549a:	fa02 f303 	lsl.w	r3, r2, r3
 801549e:	61bb      	str	r3, [r7, #24]
  if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	ed93 7b00 	vldr	d7, [r3]
 80154a6:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8015608 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x188>
 80154aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80154ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154b2:	db44      	blt.n	801553e <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xbe>
    for (; index >= 0; index--) {
 80154b4:	e03f      	b.n	8015536 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xb6>
      if (value >= traits::positiveBinaryPowersOfTen()[index]) {
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	ed93 8b00 	vldr	d8, [r3]
 80154bc:	f7f2 fcae 	bl	8007e1c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 80154c0:	4603      	mov	r3, r0
 80154c2:	60bb      	str	r3, [r7, #8]
 80154c4:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80154c8:	f107 0308 	add.w	r3, r7, #8
 80154cc:	4611      	mov	r1, r2
 80154ce:	4618      	mov	r0, r3
 80154d0:	f7f2 fcb4 	bl	8007e3c <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 80154d4:	eeb0 7b40 	vmov.f64	d7, d0
 80154d8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80154dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154e0:	bfac      	ite	ge
 80154e2:	2301      	movge	r3, #1
 80154e4:	2300      	movlt	r3, #0
 80154e6:	b2db      	uxtb	r3, r3
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d01b      	beq.n	8015524 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xa4>
        value *= traits::negativeBinaryPowersOfTen()[index];
 80154ec:	f7f2 fcba 	bl	8007e64 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 80154f0:	4603      	mov	r3, r0
 80154f2:	60fb      	str	r3, [r7, #12]
 80154f4:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80154f8:	f107 030c 	add.w	r3, r7, #12
 80154fc:	4611      	mov	r1, r2
 80154fe:	4618      	mov	r0, r3
 8015500:	f7f2 fc9c 	bl	8007e3c <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 8015504:	eeb0 6b40 	vmov.f64	d6, d0
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	ed93 7b00 	vldr	d7, [r3]
 801550e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	ed83 7b00 	vstr	d7, [r3]
        powersOf10 = int16_t(powersOf10 + bit);
 8015518:	69bb      	ldr	r3, [r7, #24]
 801551a:	b29a      	uxth	r2, r3
 801551c:	8bfb      	ldrh	r3, [r7, #30]
 801551e:	4413      	add	r3, r2
 8015520:	b29b      	uxth	r3, r3
 8015522:	83fb      	strh	r3, [r7, #30]
      bit >>= 1;
 8015524:	69bb      	ldr	r3, [r7, #24]
 8015526:	105b      	asrs	r3, r3, #1
 8015528:	61bb      	str	r3, [r7, #24]
    for (; index >= 0; index--) {
 801552a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801552e:	b2db      	uxtb	r3, r3
 8015530:	3b01      	subs	r3, #1
 8015532:	b2db      	uxtb	r3, r3
 8015534:	777b      	strb	r3, [r7, #29]
 8015536:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801553a:	2b00      	cmp	r3, #0
 801553c:	dabb      	bge.n	80154b6 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x36>
  if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	ed93 7b00 	vldr	d7, [r3]
 8015544:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801554c:	dd52      	ble.n	80155f4 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x174>
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	ed93 7b00 	vldr	d7, [r3]
 8015554:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8015610 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x190>
 8015558:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801555c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015560:	d848      	bhi.n	80155f4 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x174>
    for (; index >= 0; index--) {
 8015562:	e043      	b.n	80155ec <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x16c>
      if (value < traits::negativeBinaryPowersOfTen()[index] * 10) {
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	ed93 8b00 	vldr	d8, [r3]
 801556a:	f7f2 fc7b 	bl	8007e64 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 801556e:	4603      	mov	r3, r0
 8015570:	613b      	str	r3, [r7, #16]
 8015572:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8015576:	f107 0310 	add.w	r3, r7, #16
 801557a:	4611      	mov	r1, r2
 801557c:	4618      	mov	r0, r3
 801557e:	f7f2 fc5d 	bl	8007e3c <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 8015582:	eeb0 7b40 	vmov.f64	d7, d0
 8015586:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801558a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801558e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015596:	bf4c      	ite	mi
 8015598:	2301      	movmi	r3, #1
 801559a:	2300      	movpl	r3, #0
 801559c:	b2db      	uxtb	r3, r3
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d01b      	beq.n	80155da <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x15a>
        value *= traits::positiveBinaryPowersOfTen()[index];
 80155a2:	f7f2 fc3b 	bl	8007e1c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 80155a6:	4603      	mov	r3, r0
 80155a8:	617b      	str	r3, [r7, #20]
 80155aa:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80155ae:	f107 0314 	add.w	r3, r7, #20
 80155b2:	4611      	mov	r1, r2
 80155b4:	4618      	mov	r0, r3
 80155b6:	f7f2 fc41 	bl	8007e3c <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 80155ba:	eeb0 6b40 	vmov.f64	d6, d0
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	ed93 7b00 	vldr	d7, [r3]
 80155c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	ed83 7b00 	vstr	d7, [r3]
        powersOf10 = int16_t(powersOf10 - bit);
 80155ce:	8bfa      	ldrh	r2, [r7, #30]
 80155d0:	69bb      	ldr	r3, [r7, #24]
 80155d2:	b29b      	uxth	r3, r3
 80155d4:	1ad3      	subs	r3, r2, r3
 80155d6:	b29b      	uxth	r3, r3
 80155d8:	83fb      	strh	r3, [r7, #30]
      bit >>= 1;
 80155da:	69bb      	ldr	r3, [r7, #24]
 80155dc:	105b      	asrs	r3, r3, #1
 80155de:	61bb      	str	r3, [r7, #24]
    for (; index >= 0; index--) {
 80155e0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80155e4:	b2db      	uxtb	r3, r3
 80155e6:	3b01      	subs	r3, #1
 80155e8:	b2db      	uxtb	r3, r3
 80155ea:	777b      	strb	r3, [r7, #29]
 80155ec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	dab7      	bge.n	8015564 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xe4>
  return powersOf10;
 80155f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80155f8:	4618      	mov	r0, r3
 80155fa:	3720      	adds	r7, #32
 80155fc:	46bd      	mov	sp, r7
 80155fe:	ecbd 8b02 	vpop	{d8}
 8015602:	bd80      	pop	{r7, pc}
 8015604:	f3af 8000 	nop.w
 8015608:	00000000 	.word	0x00000000
 801560c:	416312d0 	.word	0x416312d0
 8015610:	88e368f1 	.word	0x88e368f1
 8015614:	3ee4f8b5 	.word	0x3ee4f8b5

08015618 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst2asINS0_10JsonStringELi0EEET_v>:
  T as() const {
 8015618:	b580      	push	{r7, lr}
 801561a:	b082      	sub	sp, #8
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
 8015620:	6039      	str	r1, [r7, #0]
    return Converter<T>::fromJson(*this);
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	683b      	ldr	r3, [r7, #0]
 8015626:	e893 0006 	ldmia.w	r3, {r1, r2}
 801562a:	f7ff fbe1 	bl	8014df0 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE>
 801562e:	bf00      	nop
  }
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	3708      	adds	r7, #8
 8015634:	46bd      	mov	sp, r7
 8015636:	bd80      	pop	{r7, pc}

08015638 <_ZN11ArduinoJson8V730HB2213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEjNS0_16JsonVariantConstERT_>:
// Produces a minified JSON document.
// https://arduinojson.org/v7/api/json/serializejson/
template <
    typename TDestination,
    detail::enable_if_t<!detail::is_pointer<TDestination>::value, int> = 0>
size_t serializeJson(JsonVariantConst source, TDestination& destination) {
 8015638:	b580      	push	{r7, lr}
 801563a:	b084      	sub	sp, #16
 801563c:	af00      	add	r7, sp, #0
 801563e:	f107 0308 	add.w	r3, r7, #8
 8015642:	e883 0003 	stmia.w	r3, {r0, r1}
 8015646:	607a      	str	r2, [r7, #4]
  using namespace detail;
  return serialize<JsonSerializer>(source, destination);
 8015648:	687a      	ldr	r2, [r7, #4]
 801564a:	f107 0308 	add.w	r3, r7, #8
 801564e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015652:	f000 f943 	bl	80158dc <_ZN11ArduinoJson8V730HB226detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>
 8015656:	4603      	mov	r3, r0
}
 8015658:	4618      	mov	r0, r3
 801565a:	3710      	adds	r7, #16
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}

08015660 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      : _M_ptr(nullptr), _M_refcount()
      { }

      __weak_ptr(const __weak_ptr&) noexcept = default;

      ~__weak_ptr() = default;
 8015660:	b580      	push	{r7, lr}
 8015662:	b082      	sub	sp, #8
 8015664:	af00      	add	r7, sp, #0
 8015666:	6078      	str	r0, [r7, #4]
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	3304      	adds	r3, #4
 801566c:	4618      	mov	r0, r3
 801566e:	f000 f960 	bl	8015932 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	4618      	mov	r0, r3
 8015676:	3708      	adds	r7, #8
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}

0801567c <_ZNSt8weak_ptrI3TMCEC1Ev>:
      constexpr weak_ptr() noexcept = default;
 801567c:	b580      	push	{r7, lr}
 801567e:	b082      	sub	sp, #8
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	4618      	mov	r0, r3
 8015688:	f000 f942 	bl	8015910 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	4618      	mov	r0, r3
 8015690:	3708      	adds	r7, #8
 8015692:	46bd      	mov	sp, r7
 8015694:	bd80      	pop	{r7, pc}

08015696 <_ZNSt8weak_ptrI3TMCED1Ev>:
    class weak_ptr : public __weak_ptr<_Tp>
 8015696:	b580      	push	{r7, lr}
 8015698:	b082      	sub	sp, #8
 801569a:	af00      	add	r7, sp, #0
 801569c:	6078      	str	r0, [r7, #4]
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	4618      	mov	r0, r3
 80156a2:	f7ff ffdd 	bl	8015660 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	4618      	mov	r0, r3
 80156aa:	3708      	adds	r7, #8
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}

080156b0 <_ZNSt23enable_shared_from_thisI3TMCEC1Ev>:
      constexpr enable_shared_from_this() noexcept { }
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b082      	sub	sp, #8
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	4618      	mov	r0, r3
 80156bc:	f7ff ffde 	bl	801567c <_ZNSt8weak_ptrI3TMCEC1Ev>
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	4618      	mov	r0, r3
 80156c4:	3708      	adds	r7, #8
 80156c6:	46bd      	mov	sp, r7
 80156c8:	bd80      	pop	{r7, pc}

080156ca <_ZNSt23enable_shared_from_thisI3TMCED1Ev>:
      ~enable_shared_from_this() { }
 80156ca:	b580      	push	{r7, lr}
 80156cc:	b082      	sub	sp, #8
 80156ce:	af00      	add	r7, sp, #0
 80156d0:	6078      	str	r0, [r7, #4]
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	4618      	mov	r0, r3
 80156d6:	f7ff ffde 	bl	8015696 <_ZNSt8weak_ptrI3TMCED1Ev>
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	4618      	mov	r0, r3
 80156de:	3708      	adds	r7, #8
 80156e0:	46bd      	mov	sp, r7
 80156e2:	bd80      	pop	{r7, pc}

080156e4 <_ZNSt23enable_shared_from_thisI3TMCE16shared_from_thisEv>:
      shared_from_this()
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b082      	sub	sp, #8
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
 80156ec:	6039      	str	r1, [r7, #0]
      { return shared_ptr<_Tp>(this->_M_weak_this); }
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	4619      	mov	r1, r3
 80156f2:	6878      	ldr	r0, [r7, #4]
 80156f4:	f000 f92f 	bl	8015956 <_ZNSt10shared_ptrI3TMCEC1IS0_vEERKSt8weak_ptrIT_E>
 80156f8:	6878      	ldr	r0, [r7, #4]
 80156fa:	3708      	adds	r7, #8
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bd80      	pop	{r7, pc}

08015700 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>:
  operator T() const {
 8015700:	b580      	push	{r7, lr}
 8015702:	b082      	sub	sp, #8
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
 8015708:	6039      	str	r1, [r7, #0]
    return as<T>();
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	6839      	ldr	r1, [r7, #0]
 801570e:	4618      	mov	r0, r3
 8015710:	f000 f931 	bl	8015976 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEET_v>
  }
 8015714:	6878      	ldr	r0, [r7, #4]
 8015716:	3708      	adds	r7, #8
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}

0801571c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>:
  operator T() const {
 801571c:	b580      	push	{r7, lr}
 801571e:	b082      	sub	sp, #8
 8015720:	af00      	add	r7, sp, #0
 8015722:	6078      	str	r0, [r7, #4]
    return as<T>();
 8015724:	6878      	ldr	r0, [r7, #4]
 8015726:	f000 f949 	bl	80159bc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIfEET_v>
 801572a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801572e:	eeb0 0a67 	vmov.f32	s0, s15
 8015732:	3708      	adds	r7, #8
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}

08015738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>:
  operator T() const {
 8015738:	b580      	push	{r7, lr}
 801573a:	b082      	sub	sp, #8
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
    return as<T>();
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f000 f95f 	bl	8015a04 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asItEET_v>
 8015746:	4603      	mov	r3, r0
  }
 8015748:	4618      	mov	r0, r3
 801574a:	3708      	adds	r7, #8
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}

08015750 <_ZSt11make_sharedI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESG_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 8015750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015754:	b08a      	sub	sp, #40	@ 0x28
 8015756:	af04      	add	r7, sp, #16
 8015758:	60f8      	str	r0, [r7, #12]
 801575a:	60b9      	str	r1, [r7, #8]
 801575c:	607a      	str	r2, [r7, #4]
 801575e:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 8015760:	f107 0314 	add.w	r3, r7, #20
 8015764:	469a      	mov	sl, r3
 8015766:	68b8      	ldr	r0, [r7, #8]
 8015768:	f000 f96e 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801576c:	4680      	mov	r8, r0
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	f000 f975 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8015774:	4681      	mov	r9, r0
 8015776:	6838      	ldr	r0, [r7, #0]
 8015778:	f000 f97c 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801577c:	4604      	mov	r4, r0
 801577e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015780:	f000 f978 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015784:	4605      	mov	r5, r0
 8015786:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015788:	f7fb fe67 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801578c:	4606      	mov	r6, r0
 801578e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015790:	f000 f97b 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8015794:	4603      	mov	r3, r0
 8015796:	9303      	str	r3, [sp, #12]
 8015798:	9602      	str	r6, [sp, #8]
 801579a:	9501      	str	r5, [sp, #4]
 801579c:	9400      	str	r4, [sp, #0]
 801579e:	464b      	mov	r3, r9
 80157a0:	4642      	mov	r2, r8
 80157a2:	4651      	mov	r1, sl
 80157a4:	68f8      	ldr	r0, [r7, #12]
 80157a6:	f000 f97b 	bl	8015aa0 <_ZNSt10shared_ptrI7TMC2208EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 80157aa:	68f8      	ldr	r0, [r7, #12]
 80157ac:	3718      	adds	r7, #24
 80157ae:	46bd      	mov	sp, r7
 80157b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080157b4 <_ZNSt10shared_ptrI6ModuleEC1I7TMC2208vEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 80157b4:	b590      	push	{r4, r7, lr}
 80157b6:	b083      	sub	sp, #12
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
 80157bc:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80157be:	687c      	ldr	r4, [r7, #4]
 80157c0:	6838      	ldr	r0, [r7, #0]
 80157c2:	f000 f99f 	bl	8015b04 <_ZSt4moveIRSt10shared_ptrI7TMC2208EEONSt16remove_referenceIT_E4typeEOS5_>
 80157c6:	4603      	mov	r3, r0
 80157c8:	4619      	mov	r1, r3
 80157ca:	4620      	mov	r0, r4
 80157cc:	f000 f9a5 	bl	8015b1a <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208vEEOS_IT_LS2_0EE>
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	4618      	mov	r0, r3
 80157d4:	370c      	adds	r7, #12
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd90      	pop	{r4, r7, pc}

080157da <_ZSt11make_uniqueI14TMC2208StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80157da:	b590      	push	{r4, r7, lr}
 80157dc:	b091      	sub	sp, #68	@ 0x44
 80157de:	af00      	add	r7, sp, #0
 80157e0:	60f8      	str	r0, [r7, #12]
 80157e2:	60b9      	str	r1, [r7, #8]
 80157e4:	607a      	str	r2, [r7, #4]
 80157e6:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80157e8:	2068      	movs	r0, #104	@ 0x68
 80157ea:	f012 fee1 	bl	80285b0 <_Znwj>
 80157ee:	4603      	mov	r3, r0
 80157f0:	461c      	mov	r4, r3
 80157f2:	68b8      	ldr	r0, [r7, #8]
 80157f4:	f7f9 ff42 	bl	800f67c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80157f8:	4602      	mov	r2, r0
 80157fa:	f107 0310 	add.w	r3, r7, #16
 80157fe:	4611      	mov	r1, r2
 8015800:	4618      	mov	r0, r3
 8015802:	f013 f9e0 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8015806:	6878      	ldr	r0, [r7, #4]
 8015808:	f7f9 ff38 	bl	800f67c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 801580c:	4602      	mov	r2, r0
 801580e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015812:	4611      	mov	r1, r2
 8015814:	4618      	mov	r0, r3
 8015816:	f013 f9d6 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801581a:	6838      	ldr	r0, [r7, #0]
 801581c:	f000 f91f 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8015820:	4603      	mov	r3, r0
 8015822:	edd3 7a00 	vldr	s15, [r3]
 8015826:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801582a:	f107 0310 	add.w	r3, r7, #16
 801582e:	eeb0 0a67 	vmov.f32	s0, s15
 8015832:	4619      	mov	r1, r3
 8015834:	4620      	mov	r0, r4
 8015836:	f7ff fb53 	bl	8014ee0 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_f>
 801583a:	4621      	mov	r1, r4
 801583c:	68f8      	ldr	r0, [r7, #12]
 801583e:	f000 f99a 	bl	8015b76 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8015842:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015846:	4618      	mov	r0, r3
 8015848:	f012 ffad 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801584c:	f107 0310 	add.w	r3, r7, #16
 8015850:	4618      	mov	r0, r3
 8015852:	f012 ffa8 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015856:	bf00      	nop
 8015858:	68f8      	ldr	r0, [r7, #12]
 801585a:	3744      	adds	r7, #68	@ 0x44
 801585c:	46bd      	mov	sp, r7
 801585e:	bd90      	pop	{r4, r7, pc}

08015860 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8015860:	b590      	push	{r4, r7, lr}
 8015862:	b085      	sub	sp, #20
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	4618      	mov	r0, r3
 801586c:	f000 f992 	bl	8015b94 <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8015870:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d00c      	beq.n	8015894 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 801587a:	6878      	ldr	r0, [r7, #4]
 801587c:	f000 f997 	bl	8015bae <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE11get_deleterEv>
 8015880:	4604      	mov	r4, r0
 8015882:	68f8      	ldr	r0, [r7, #12]
 8015884:	f000 f9a0 	bl	8015bc8 <_ZSt4moveIRP14TMC2208StepperEONSt16remove_referenceIT_E4typeEOS4_>
 8015888:	4603      	mov	r3, r0
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	4619      	mov	r1, r3
 801588e:	4620      	mov	r0, r4
 8015890:	f000 f9a5 	bl	8015bde <_ZNKSt14default_deleteI14TMC2208StepperEclEPS0_>
	__ptr = pointer();
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	2200      	movs	r2, #0
 8015898:	601a      	str	r2, [r3, #0]
      }
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	4618      	mov	r0, r3
 801589e:	3714      	adds	r7, #20
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd90      	pop	{r4, r7, pc}

080158a4 <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b082      	sub	sp, #8
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
 80158ac:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	683a      	ldr	r2, [r7, #0]
 80158b2:	4611      	mov	r1, r2
 80158b4:	4618      	mov	r0, r3
 80158b6:	f000 f9a5 	bl	8015c04 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I3TMCvEERKS_IT_LS2_0EE>
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	4618      	mov	r0, r3
 80158be:	3708      	adds	r7, #8
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}

080158c4 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b082      	sub	sp, #8
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
	return get();
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f000 f9af 	bl	8015c30 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE3getEv>
 80158d2:	4603      	mov	r3, r0
      }
 80158d4:	4618      	mov	r0, r3
 80158d6:	3708      	adds	r7, #8
 80158d8:	46bd      	mov	sp, r7
 80158da:	bd80      	pop	{r7, pc}

080158dc <_ZN11ArduinoJson8V730HB226detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>:
  TSerializer<TWriter> serializer(writer, resources);
  return VariantData::accept(data, resources, serializer);
}

template <template <typename> class TSerializer, typename TDestination>
size_t serialize(ArduinoJson::JsonVariantConst source,
 80158dc:	b580      	push	{r7, lr}
 80158de:	b086      	sub	sp, #24
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	f107 0308 	add.w	r3, r7, #8
 80158e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80158ea:	607a      	str	r2, [r7, #4]
                 TDestination& destination) {
  Writer<TDestination> writer(destination);
 80158ec:	f107 0314 	add.w	r3, r7, #20
 80158f0:	6879      	ldr	r1, [r7, #4]
 80158f2:	4618      	mov	r0, r3
 80158f4:	f000 f9a9 	bl	8015c4a <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>
  return doSerialize<TSerializer>(source, writer);
 80158f8:	697a      	ldr	r2, [r7, #20]
 80158fa:	f107 0308 	add.w	r3, r7, #8
 80158fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015902:	f000 f9b2 	bl	8015c6a <_ZN11ArduinoJson8V730HB226detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>
 8015906:	4603      	mov	r3, r0
}
 8015908:	4618      	mov	r0, r3
 801590a:	3718      	adds	r7, #24
 801590c:	46bd      	mov	sp, r7
 801590e:	bd80      	pop	{r7, pc}

08015910 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __weak_ptr() noexcept
 8015910:	b580      	push	{r7, lr}
 8015912:	b082      	sub	sp, #8
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
      : _M_ptr(nullptr), _M_refcount()
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	2200      	movs	r2, #0
 801591c:	601a      	str	r2, [r3, #0]
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	3304      	adds	r3, #4
 8015922:	4618      	mov	r0, r3
 8015924:	f000 f9db 	bl	8015cde <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	4618      	mov	r0, r3
 801592c:	3708      	adds	r7, #8
 801592e:	46bd      	mov	sp, r7
 8015930:	bd80      	pop	{r7, pc}

08015932 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__weak_count() noexcept
 8015932:	b580      	push	{r7, lr}
 8015934:	b082      	sub	sp, #8
 8015936:	af00      	add	r7, sp, #0
 8015938:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d004      	beq.n	801594c <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_weak_release();
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	4618      	mov	r0, r3
 8015948:	f7ff f917 	bl	8014b7a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv>
      }
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	4618      	mov	r0, r3
 8015950:	3708      	adds	r7, #8
 8015952:	46bd      	mov	sp, r7
 8015954:	bd80      	pop	{r7, pc}

08015956 <_ZNSt10shared_ptrI3TMCEC1IS0_vEERKSt8weak_ptrIT_E>:
	explicit shared_ptr(const weak_ptr<_Yp>& __r)
 8015956:	b580      	push	{r7, lr}
 8015958:	b082      	sub	sp, #8
 801595a:	af00      	add	r7, sp, #0
 801595c:	6078      	str	r0, [r7, #4]
 801595e:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__r) { }
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	683a      	ldr	r2, [r7, #0]
 8015964:	4611      	mov	r1, r2
 8015966:	4618      	mov	r0, r3
 8015968:	f000 f9c7 	bl	8015cfa <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEERKSt10__weak_ptrIT_LS2_0EE>
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	4618      	mov	r0, r3
 8015970:	3708      	adds	r7, #8
 8015972:	46bd      	mov	sp, r7
 8015974:	bd80      	pop	{r7, pc}

08015976 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 8015976:	b590      	push	{r4, r7, lr}
 8015978:	b087      	sub	sp, #28
 801597a:	af00      	add	r7, sp, #0
 801597c:	6078      	str	r0, [r7, #4]
 801597e:	6039      	str	r1, [r7, #0]
 8015980:	683b      	ldr	r3, [r7, #0]
 8015982:	617b      	str	r3, [r7, #20]
 8015984:	697b      	ldr	r3, [r7, #20]
 8015986:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8015988:	6938      	ldr	r0, [r7, #16]
 801598a:	f7f3 f846 	bl	8008a1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 801598e:	4604      	mov	r4, r0
 8015990:	6938      	ldr	r0, [r7, #16]
 8015992:	f7f2 fed1 	bl	8008738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8015996:	4602      	mov	r2, r0
 8015998:	f107 0308 	add.w	r3, r7, #8
 801599c:	4621      	mov	r1, r4
 801599e:	4618      	mov	r0, r3
 80159a0:	f7f0 f85f 	bl	8005a62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80159a4:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 80159a6:	6878      	ldr	r0, [r7, #4]
 80159a8:	f107 0308 	add.w	r3, r7, #8
 80159ac:	e893 0006 	ldmia.w	r3, {r1, r2}
 80159b0:	f000 f9b9 	bl	8015d26 <_ZN11ArduinoJson8V730HB229ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>
}
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	371c      	adds	r7, #28
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd90      	pop	{r4, r7, pc}

080159bc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIfEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80159bc:	b590      	push	{r4, r7, lr}
 80159be:	b087      	sub	sp, #28
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	6078      	str	r0, [r7, #4]
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	617b      	str	r3, [r7, #20]
 80159c8:	697b      	ldr	r3, [r7, #20]
 80159ca:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80159cc:	6938      	ldr	r0, [r7, #16]
 80159ce:	f7f3 f824 	bl	8008a1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 80159d2:	4604      	mov	r4, r0
 80159d4:	6938      	ldr	r0, [r7, #16]
 80159d6:	f7f2 feaf 	bl	8008738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 80159da:	4602      	mov	r2, r0
 80159dc:	f107 0308 	add.w	r3, r7, #8
 80159e0:	4621      	mov	r1, r4
 80159e2:	4618      	mov	r0, r3
 80159e4:	f7f0 f83d 	bl	8005a62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80159e8:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80159ea:	f107 0308 	add.w	r3, r7, #8
 80159ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80159f2:	f000 f9ad 	bl	8015d50 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE>
 80159f6:	eef0 7a40 	vmov.f32	s15, s0
}
 80159fa:	eeb0 0a67 	vmov.f32	s0, s15
 80159fe:	371c      	adds	r7, #28
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bd90      	pop	{r4, r7, pc}

08015a04 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asItEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8015a04:	b590      	push	{r4, r7, lr}
 8015a06:	b087      	sub	sp, #28
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	617b      	str	r3, [r7, #20]
 8015a10:	697b      	ldr	r3, [r7, #20]
 8015a12:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8015a14:	6938      	ldr	r0, [r7, #16]
 8015a16:	f7f3 f800 	bl	8008a1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8015a1a:	4604      	mov	r4, r0
 8015a1c:	6938      	ldr	r0, [r7, #16]
 8015a1e:	f7f2 fe8b 	bl	8008738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8015a22:	4602      	mov	r2, r0
 8015a24:	f107 0308 	add.w	r3, r7, #8
 8015a28:	4621      	mov	r1, r4
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7f0 f819 	bl	8005a62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8015a30:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8015a32:	f107 0308 	add.w	r3, r7, #8
 8015a36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015a3a:	f000 f9ad 	bl	8015d98 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE>
 8015a3e:	4603      	mov	r3, r0
}
 8015a40:	4618      	mov	r0, r3
 8015a42:	371c      	adds	r7, #28
 8015a44:	46bd      	mov	sp, r7
 8015a46:	bd90      	pop	{r4, r7, pc}

08015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015a48:	b480      	push	{r7}
 8015a4a:	b083      	sub	sp, #12
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	4618      	mov	r0, r3
 8015a54:	370c      	adds	r7, #12
 8015a56:	46bd      	mov	sp, r7
 8015a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5c:	4770      	bx	lr

08015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015a5e:	b480      	push	{r7}
 8015a60:	b083      	sub	sp, #12
 8015a62:	af00      	add	r7, sp, #0
 8015a64:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	4618      	mov	r0, r3
 8015a6a:	370c      	adds	r7, #12
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a72:	4770      	bx	lr

08015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015a74:	b480      	push	{r7}
 8015a76:	b083      	sub	sp, #12
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	4618      	mov	r0, r3
 8015a80:	370c      	adds	r7, #12
 8015a82:	46bd      	mov	sp, r7
 8015a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a88:	4770      	bx	lr

08015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015a8a:	b480      	push	{r7}
 8015a8c:	b083      	sub	sp, #12
 8015a8e:	af00      	add	r7, sp, #0
 8015a90:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	4618      	mov	r0, r3
 8015a96:	370c      	adds	r7, #12
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9e:	4770      	bx	lr

08015aa0 <_ZNSt10shared_ptrI7TMC2208EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8015aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015aa4:	b08b      	sub	sp, #44	@ 0x2c
 8015aa6:	af04      	add	r7, sp, #16
 8015aa8:	6178      	str	r0, [r7, #20]
 8015aaa:	6139      	str	r1, [r7, #16]
 8015aac:	60fa      	str	r2, [r7, #12]
 8015aae:	60bb      	str	r3, [r7, #8]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8015ab0:	697c      	ldr	r4, [r7, #20]
 8015ab2:	68f8      	ldr	r0, [r7, #12]
 8015ab4:	f7ff ffc8 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8015ab8:	4680      	mov	r8, r0
 8015aba:	68b8      	ldr	r0, [r7, #8]
 8015abc:	f7ff ffcf 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8015ac0:	4681      	mov	r9, r0
 8015ac2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015ac4:	f7ff ffd6 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015ac8:	4605      	mov	r5, r0
 8015aca:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015acc:	f7ff ffd2 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015ad0:	4606      	mov	r6, r0
 8015ad2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015ad4:	f7fb fcc1 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8015ad8:	6078      	str	r0, [r7, #4]
 8015ada:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015adc:	f7ff ffd5 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	9303      	str	r3, [sp, #12]
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	9302      	str	r3, [sp, #8]
 8015ae8:	9601      	str	r6, [sp, #4]
 8015aea:	9500      	str	r5, [sp, #0]
 8015aec:	464b      	mov	r3, r9
 8015aee:	4642      	mov	r2, r8
 8015af0:	6939      	ldr	r1, [r7, #16]
 8015af2:	4620      	mov	r0, r4
 8015af4:	f000 f96e 	bl	8015dd4 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8015af8:	697b      	ldr	r3, [r7, #20]
 8015afa:	4618      	mov	r0, r3
 8015afc:	371c      	adds	r7, #28
 8015afe:	46bd      	mov	sp, r7
 8015b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015b04 <_ZSt4moveIRSt10shared_ptrI7TMC2208EEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8015b04:	b480      	push	{r7}
 8015b06:	b083      	sub	sp, #12
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	4618      	mov	r0, r3
 8015b10:	370c      	adds	r7, #12
 8015b12:	46bd      	mov	sp, r7
 8015b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b18:	4770      	bx	lr

08015b1a <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208vEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8015b1a:	b580      	push	{r7, lr}
 8015b1c:	b082      	sub	sp, #8
 8015b1e:	af00      	add	r7, sp, #0
 8015b20:	6078      	str	r0, [r7, #4]
 8015b22:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8015b24:	683b      	ldr	r3, [r7, #0]
 8015b26:	681a      	ldr	r2, [r3, #0]
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	601a      	str	r2, [r3, #0]
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	3304      	adds	r3, #4
 8015b30:	4618      	mov	r0, r3
 8015b32:	f7f7 fae1 	bl	800d0f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	1d1a      	adds	r2, r3, #4
 8015b3a:	683b      	ldr	r3, [r7, #0]
 8015b3c:	3304      	adds	r3, #4
 8015b3e:	4619      	mov	r1, r3
 8015b40:	4610      	mov	r0, r2
 8015b42:	f7f7 fe98 	bl	800d876 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 8015b46:	683b      	ldr	r3, [r7, #0]
 8015b48:	2200      	movs	r2, #0
 8015b4a:	601a      	str	r2, [r3, #0]
	}
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	4618      	mov	r0, r3
 8015b50:	3708      	adds	r7, #8
 8015b52:	46bd      	mov	sp, r7
 8015b54:	bd80      	pop	{r7, pc}

08015b56 <_ZNSt15__uniq_ptr_dataI14TMC2208StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8015b56:	b580      	push	{r7, lr}
 8015b58:	b082      	sub	sp, #8
 8015b5a:	af00      	add	r7, sp, #0
 8015b5c:	6078      	str	r0, [r7, #4]
 8015b5e:	6039      	str	r1, [r7, #0]
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	683a      	ldr	r2, [r7, #0]
 8015b64:	4611      	mov	r1, r2
 8015b66:	4618      	mov	r0, r3
 8015b68:	f000 f974 	bl	8015e54 <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EEC1EPS0_>
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	4618      	mov	r0, r3
 8015b70:	3708      	adds	r7, #8
 8015b72:	46bd      	mov	sp, r7
 8015b74:	bd80      	pop	{r7, pc}

08015b76 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8015b76:	b580      	push	{r7, lr}
 8015b78:	b082      	sub	sp, #8
 8015b7a:	af00      	add	r7, sp, #0
 8015b7c:	6078      	str	r0, [r7, #4]
 8015b7e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	6839      	ldr	r1, [r7, #0]
 8015b84:	4618      	mov	r0, r3
 8015b86:	f7ff ffe6 	bl	8015b56 <_ZNSt15__uniq_ptr_dataI14TMC2208StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	3708      	adds	r7, #8
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bd80      	pop	{r7, pc}

08015b94 <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b082      	sub	sp, #8
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	f000 f96c 	bl	8015e7c <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	3708      	adds	r7, #8
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}

08015bae <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8015bae:	b580      	push	{r7, lr}
 8015bb0:	b082      	sub	sp, #8
 8015bb2:	af00      	add	r7, sp, #0
 8015bb4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	4618      	mov	r0, r3
 8015bba:	f000 f96c 	bl	8015e96 <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE10_M_deleterEv>
 8015bbe:	4603      	mov	r3, r0
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	3708      	adds	r7, #8
 8015bc4:	46bd      	mov	sp, r7
 8015bc6:	bd80      	pop	{r7, pc}

08015bc8 <_ZSt4moveIRP14TMC2208StepperEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8015bc8:	b480      	push	{r7}
 8015bca:	b083      	sub	sp, #12
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	370c      	adds	r7, #12
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bdc:	4770      	bx	lr

08015bde <_ZNKSt14default_deleteI14TMC2208StepperEclEPS0_>:
      operator()(_Tp* __ptr) const
 8015bde:	b590      	push	{r4, r7, lr}
 8015be0:	b083      	sub	sp, #12
 8015be2:	af00      	add	r7, sp, #0
 8015be4:	6078      	str	r0, [r7, #4]
 8015be6:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8015be8:	683c      	ldr	r4, [r7, #0]
 8015bea:	2c00      	cmp	r4, #0
 8015bec:	d006      	beq.n	8015bfc <_ZNKSt14default_deleteI14TMC2208StepperEclEPS0_+0x1e>
 8015bee:	4620      	mov	r0, r4
 8015bf0:	f7ff f95e 	bl	8014eb0 <_ZN14TMC2208StepperD1Ev>
 8015bf4:	2168      	movs	r1, #104	@ 0x68
 8015bf6:	4620      	mov	r0, r4
 8015bf8:	f012 fcc9 	bl	802858e <_ZdlPvj>
      }
 8015bfc:	bf00      	nop
 8015bfe:	370c      	adds	r7, #12
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd90      	pop	{r4, r7, pc}

08015c04 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I3TMCvEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b082      	sub	sp, #8
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
 8015c0c:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 8015c0e:	683b      	ldr	r3, [r7, #0]
 8015c10:	681a      	ldr	r2, [r3, #0]
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	601a      	str	r2, [r3, #0]
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	1d1a      	adds	r2, r3, #4
 8015c1a:	683b      	ldr	r3, [r7, #0]
 8015c1c:	3304      	adds	r3, #4
 8015c1e:	4619      	mov	r1, r3
 8015c20:	4610      	mov	r0, r2
 8015c22:	f7f6 fc6c 	bl	800c4fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	4618      	mov	r0, r3
 8015c2a:	3708      	adds	r7, #8
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	bd80      	pop	{r7, pc}

08015c30 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b082      	sub	sp, #8
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	f000 f938 	bl	8015eb0 <_ZNKSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8015c40:	4603      	mov	r3, r0
 8015c42:	4618      	mov	r0, r3
 8015c44:	3708      	adds	r7, #8
 8015c46:	46bd      	mov	sp, r7
 8015c48:	bd80      	pop	{r7, pc}

08015c4a <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>:
};

template <typename TDestination>
class Writer<TDestination, enable_if_t<is_std_string<TDestination>::value>> {
 public:
  Writer(TDestination& str) : str_(&str) {
 8015c4a:	b580      	push	{r7, lr}
 8015c4c:	b082      	sub	sp, #8
 8015c4e:	af00      	add	r7, sp, #0
 8015c50:	6078      	str	r0, [r7, #4]
 8015c52:	6039      	str	r1, [r7, #0]
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	683a      	ldr	r2, [r7, #0]
 8015c58:	601a      	str	r2, [r3, #0]
    str.clear();
 8015c5a:	6838      	ldr	r0, [r7, #0]
 8015c5c:	f012 fe5e 	bl	802891c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
  }
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	4618      	mov	r0, r3
 8015c64:	3708      	adds	r7, #8
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd80      	pop	{r7, pc}

08015c6a <_ZN11ArduinoJson8V730HB226detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>:
size_t doSerialize(ArduinoJson::JsonVariantConst source, TWriter writer) {
 8015c6a:	b580      	push	{r7, lr}
 8015c6c:	b08a      	sub	sp, #40	@ 0x28
 8015c6e:	af00      	add	r7, sp, #0
 8015c70:	f107 0308 	add.w	r3, r7, #8
 8015c74:	e883 0003 	stmia.w	r3, {r0, r1}
 8015c78:	607a      	str	r2, [r7, #4]
  auto data = VariantAttorney::getData(source);
 8015c7a:	f107 0308 	add.w	r3, r7, #8
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f7f1 fc4e 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8015c84:	6278      	str	r0, [r7, #36]	@ 0x24
  auto resources = VariantAttorney::getResourceManager(source);
 8015c86:	f107 0308 	add.w	r3, r7, #8
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	f7f1 fc54 	bl	8007538 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8015c90:	6238      	str	r0, [r7, #32]
  TSerializer<TWriter> serializer(writer, resources);
 8015c92:	f107 0314 	add.w	r3, r7, #20
 8015c96:	6a3a      	ldr	r2, [r7, #32]
 8015c98:	6879      	ldr	r1, [r7, #4]
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	f000 f916 	bl	8015ecc <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_PKNS1_15ResourceManagerE>
  return VariantData::accept(data, resources, serializer);
 8015ca0:	f107 0314 	add.w	r3, r7, #20
 8015ca4:	461a      	mov	r2, r3
 8015ca6:	6a39      	ldr	r1, [r7, #32]
 8015ca8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015caa:	f000 f922 	bl	8015ef2 <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_>
 8015cae:	4603      	mov	r3, r0
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	3728      	adds	r7, #40	@ 0x28
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}

08015cb8 <_ZN11ArduinoJson8V730HB2215SerializedValueIPKcEC1ES3_j>:
  explicit SerializedValue(TChar* p, size_t n) : data_(p), size_(n) {}
 8015cb8:	b480      	push	{r7}
 8015cba:	b085      	sub	sp, #20
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	60f8      	str	r0, [r7, #12]
 8015cc0:	60b9      	str	r1, [r7, #8]
 8015cc2:	607a      	str	r2, [r7, #4]
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	68ba      	ldr	r2, [r7, #8]
 8015cc8:	601a      	str	r2, [r3, #0]
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	687a      	ldr	r2, [r7, #4]
 8015cce:	605a      	str	r2, [r3, #4]
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	3714      	adds	r7, #20
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cdc:	4770      	bx	lr

08015cde <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __weak_count() noexcept : _M_pi(nullptr)
 8015cde:	b480      	push	{r7}
 8015ce0:	b083      	sub	sp, #12
 8015ce2:	af00      	add	r7, sp, #0
 8015ce4:	6078      	str	r0, [r7, #4]
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	2200      	movs	r2, #0
 8015cea:	601a      	str	r2, [r3, #0]
      { }
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	4618      	mov	r0, r3
 8015cf0:	370c      	adds	r7, #12
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf8:	4770      	bx	lr

08015cfa <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEERKSt10__weak_ptrIT_LS2_0EE>:
	explicit __shared_ptr(const __weak_ptr<_Yp, _Lp>& __r)
 8015cfa:	b580      	push	{r7, lr}
 8015cfc:	b082      	sub	sp, #8
 8015cfe:	af00      	add	r7, sp, #0
 8015d00:	6078      	str	r0, [r7, #4]
 8015d02:	6039      	str	r1, [r7, #0]
	: _M_refcount(__r._M_refcount) // may throw
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	1d1a      	adds	r2, r3, #4
 8015d08:	683b      	ldr	r3, [r7, #0]
 8015d0a:	3304      	adds	r3, #4
 8015d0c:	4619      	mov	r1, r3
 8015d0e:	4610      	mov	r0, r2
 8015d10:	f000 f909 	bl	8015f26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE>
	  _M_ptr = __r._M_ptr;
 8015d14:	683b      	ldr	r3, [r7, #0]
 8015d16:	681a      	ldr	r2, [r3, #0]
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	601a      	str	r2, [r3, #0]
	}
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	4618      	mov	r0, r3
 8015d20:	3708      	adds	r7, #8
 8015d22:	46bd      	mov	sp, r7
 8015d24:	bd80      	pop	{r7, pc}

08015d26 <_ZN11ArduinoJson8V730HB229ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>:
  static detail::decay_t<T> fromJson(JsonVariantConst src) {
 8015d26:	b580      	push	{r7, lr}
 8015d28:	b084      	sub	sp, #16
 8015d2a:	af00      	add	r7, sp, #0
 8015d2c:	60f8      	str	r0, [r7, #12]
 8015d2e:	1d3b      	adds	r3, r7, #4
 8015d30:	e883 0006 	stmia.w	r3, {r1, r2}
    T result; // Error here? See https://arduinojson.org/v7/non-default-constructible/
 8015d34:	68f8      	ldr	r0, [r7, #12]
 8015d36:	f012 fd10 	bl	802875a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
    convertFromJson(src, result);  // Error here? See https://arduinojson.org/v7/unsupported-as/
 8015d3a:	68fa      	ldr	r2, [r7, #12]
 8015d3c:	1d3b      	adds	r3, r7, #4
 8015d3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015d42:	f7ff f871 	bl	8014e28 <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    return result;
 8015d46:	bf00      	nop
  }
 8015d48:	68f8      	ldr	r0, [r7, #12]
 8015d4a:	3710      	adds	r7, #16
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	bd80      	pop	{r7, pc}

08015d50 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b084      	sub	sp, #16
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	463b      	mov	r3, r7
 8015d58:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8015d5c:	463b      	mov	r3, r7
 8015d5e:	4618      	mov	r0, r3
 8015d60:	f7f1 fbde 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8015d64:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8015d66:	463b      	mov	r3, r7
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f7f1 fbe5 	bl	8007538 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8015d6e:	60b8      	str	r0, [r7, #8]
    return data ? data->template asFloat<T>(resources) : 0;
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d006      	beq.n	8015d84 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8015d76:	68b9      	ldr	r1, [r7, #8]
 8015d78:	68f8      	ldr	r0, [r7, #12]
 8015d7a:	f000 f8f9 	bl	8015f70 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE>
 8015d7e:	eef0 7a40 	vmov.f32	s15, s0
 8015d82:	e001      	b.n	8015d88 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8015d84:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8015d94 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x44>
  }
 8015d88:	eeb0 0a67 	vmov.f32	s0, s15
 8015d8c:	3710      	adds	r7, #16
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bd80      	pop	{r7, pc}
 8015d92:	bf00      	nop
 8015d94:	00000000 	.word	0x00000000

08015d98 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b084      	sub	sp, #16
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	463b      	mov	r3, r7
 8015da0:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8015da4:	463b      	mov	r3, r7
 8015da6:	4618      	mov	r0, r3
 8015da8:	f7f1 fbba 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8015dac:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8015dae:	463b      	mov	r3, r7
 8015db0:	4618      	mov	r0, r3
 8015db2:	f7f1 fbc1 	bl	8007538 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8015db6:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d005      	beq.n	8015dca <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8015dbe:	68b9      	ldr	r1, [r7, #8]
 8015dc0:	68f8      	ldr	r0, [r7, #12]
 8015dc2:	f000 f963 	bl	801608c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	e000      	b.n	8015dcc <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8015dca:	2300      	movs	r3, #0
  }
 8015dcc:	4618      	mov	r0, r3
 8015dce:	3710      	adds	r7, #16
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bd80      	pop	{r7, pc}

08015dd4 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8015dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dd8:	b08e      	sub	sp, #56	@ 0x38
 8015dda:	af06      	add	r7, sp, #24
 8015ddc:	61f8      	str	r0, [r7, #28]
 8015dde:	61b9      	str	r1, [r7, #24]
 8015de0:	617a      	str	r2, [r7, #20]
 8015de2:	613b      	str	r3, [r7, #16]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8015de4:	69fb      	ldr	r3, [r7, #28]
 8015de6:	2200      	movs	r2, #0
 8015de8:	601a      	str	r2, [r3, #0]
 8015dea:	69fb      	ldr	r3, [r7, #28]
 8015dec:	1d1c      	adds	r4, r3, #4
 8015dee:	69fd      	ldr	r5, [r7, #28]
 8015df0:	6978      	ldr	r0, [r7, #20]
 8015df2:	f7ff fe29 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8015df6:	4680      	mov	r8, r0
 8015df8:	6938      	ldr	r0, [r7, #16]
 8015dfa:	f7ff fe30 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8015dfe:	4606      	mov	r6, r0
 8015e00:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015e02:	f7ff fe37 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015e06:	60f8      	str	r0, [r7, #12]
 8015e08:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015e0a:	f7ff fe33 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015e0e:	60b8      	str	r0, [r7, #8]
 8015e10:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015e12:	f7fb fb22 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8015e16:	6078      	str	r0, [r7, #4]
 8015e18:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015e1a:	f7ff fe36 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	9304      	str	r3, [sp, #16]
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	9303      	str	r3, [sp, #12]
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	9302      	str	r3, [sp, #8]
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	9301      	str	r3, [sp, #4]
 8015e2e:	9600      	str	r6, [sp, #0]
 8015e30:	4643      	mov	r3, r8
 8015e32:	69ba      	ldr	r2, [r7, #24]
 8015e34:	4629      	mov	r1, r5
 8015e36:	4620      	mov	r0, r4
 8015e38:	f000 f9ba 	bl	80161b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8015e3c:	69fb      	ldr	r3, [r7, #28]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	4619      	mov	r1, r3
 8015e42:	69f8      	ldr	r0, [r7, #28]
 8015e44:	f000 fa1a 	bl	801627c <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8015e48:	69fb      	ldr	r3, [r7, #28]
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	3720      	adds	r7, #32
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e54 <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8015e54:	b590      	push	{r4, r7, lr}
 8015e56:	b083      	sub	sp, #12
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
 8015e5c:	6039      	str	r1, [r7, #0]
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	4618      	mov	r0, r3
 8015e62:	f000 fa2c 	bl	80162be <_ZNSt5tupleIJP14TMC2208StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8015e66:	683c      	ldr	r4, [r7, #0]
 8015e68:	6878      	ldr	r0, [r7, #4]
 8015e6a:	f7ff fe93 	bl	8015b94 <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	601c      	str	r4, [r3, #0]
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	4618      	mov	r0, r3
 8015e76:	370c      	adds	r7, #12
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	bd90      	pop	{r4, r7, pc}

08015e7c <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	b082      	sub	sp, #8
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	4618      	mov	r0, r3
 8015e88:	f000 fa26 	bl	80162d8 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	4618      	mov	r0, r3
 8015e90:	3708      	adds	r7, #8
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}

08015e96 <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8015e96:	b580      	push	{r7, lr}
 8015e98:	b082      	sub	sp, #8
 8015e9a:	af00      	add	r7, sp, #0
 8015e9c:	6078      	str	r0, [r7, #4]
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	f000 fa25 	bl	80162f0 <_ZSt3getILj1EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8015ea6:	4603      	mov	r3, r0
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	3708      	adds	r7, #8
 8015eac:	46bd      	mov	sp, r7
 8015eae:	bd80      	pop	{r7, pc}

08015eb0 <_ZNKSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b082      	sub	sp, #8
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	6078      	str	r0, [r7, #4]
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	4618      	mov	r0, r3
 8015ebc:	f000 fa24 	bl	8016308 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	3708      	adds	r7, #8
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	bd80      	pop	{r7, pc}

08015ecc <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_PKNS1_15ResourceManagerE>:
  JsonSerializer(TWriter writer, const ResourceManager* resources)
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b084      	sub	sp, #16
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	60f8      	str	r0, [r7, #12]
 8015ed4:	60b9      	str	r1, [r7, #8]
 8015ed6:	607a      	str	r2, [r7, #4]
      : formatter_(writer), resources_(resources) {}
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	68b9      	ldr	r1, [r7, #8]
 8015edc:	4618      	mov	r0, r3
 8015ede:	f000 fa20 	bl	8016322 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	687a      	ldr	r2, [r7, #4]
 8015ee6:	609a      	str	r2, [r3, #8]
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	4618      	mov	r0, r3
 8015eec:	3710      	adds	r7, #16
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}

08015ef2 <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_>:
  static typename TVisitor::result_type accept(const VariantData* var,
 8015ef2:	b580      	push	{r7, lr}
 8015ef4:	b084      	sub	sp, #16
 8015ef6:	af00      	add	r7, sp, #0
 8015ef8:	60f8      	str	r0, [r7, #12]
 8015efa:	60b9      	str	r1, [r7, #8]
 8015efc:	607a      	str	r2, [r7, #4]
    if (var != 0)
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d006      	beq.n	8015f12 <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_+0x20>
      return var->accept(visit, resources);
 8015f04:	68ba      	ldr	r2, [r7, #8]
 8015f06:	6879      	ldr	r1, [r7, #4]
 8015f08:	68f8      	ldr	r0, [r7, #12]
 8015f0a:	f000 fa1b 	bl	8016344 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
 8015f0e:	4603      	mov	r3, r0
 8015f10:	e005      	b.n	8015f1e <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_+0x2c>
      return visit.visit(nullptr);
 8015f12:	2100      	movs	r1, #0
 8015f14:	6878      	ldr	r0, [r7, #4]
 8015f16:	f000 fb43 	bl	80165a0 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	bf00      	nop
  }
 8015f1e:	4618      	mov	r0, r3
 8015f20:	3710      	adds	r7, #16
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}

08015f26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE>:
    __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)
 8015f26:	b580      	push	{r7, lr}
 8015f28:	b082      	sub	sp, #8
 8015f2a:	af00      	add	r7, sp, #0
 8015f2c:	6078      	str	r0, [r7, #4]
 8015f2e:	6039      	str	r1, [r7, #0]
    : _M_pi(__r._M_pi)
 8015f30:	683b      	ldr	r3, [r7, #0]
 8015f32:	681a      	ldr	r2, [r3, #0]
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	601a      	str	r2, [r3, #0]
      if (_M_pi == nullptr || !_M_pi->_M_add_ref_lock_nothrow())
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d00a      	beq.n	8015f56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x30>
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	4618      	mov	r0, r3
 8015f46:	f7fe fdf3 	bl	8014b30 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv>
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	f083 0301 	eor.w	r3, r3, #1
 8015f50:	b2db      	uxtb	r3, r3
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d001      	beq.n	8015f5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x34>
 8015f56:	2301      	movs	r3, #1
 8015f58:	e000      	b.n	8015f5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x36>
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d001      	beq.n	8015f64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x3e>
	__throw_bad_weak_ptr();
 8015f60:	f7fe fde2 	bl	8014b28 <_ZSt20__throw_bad_weak_ptrv>
    }
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	4618      	mov	r0, r3
 8015f68:	3708      	adds	r7, #8
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}
	...

08015f70 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE>:
  T asFloat(const ResourceManager* resources) const {
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b084      	sub	sp, #16
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
 8015f78:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8015f7a:	6839      	ldr	r1, [r7, #0]
 8015f7c:	6878      	ldr	r0, [r7, #4]
 8015f7e:	f7f0 fb05 	bl	800658c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8015f82:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	791b      	ldrb	r3, [r3, #4]
 8015f88:	3b04      	subs	r3, #4
 8015f8a:	2b1a      	cmp	r3, #26
 8015f8c:	d874      	bhi.n	8016078 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x108>
 8015f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8015f94 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x24>)
 8015f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f94:	08016053 	.word	0x08016053
 8015f98:	08016053 	.word	0x08016053
 8015f9c:	08016001 	.word	0x08016001
 8015fa0:	08016079 	.word	0x08016079
 8015fa4:	08016079 	.word	0x08016079
 8015fa8:	08016079 	.word	0x08016079
 8015fac:	0801600f 	.word	0x0801600f
 8015fb0:	08016079 	.word	0x08016079
 8015fb4:	0801601d 	.word	0x0801601d
 8015fb8:	08016079 	.word	0x08016079
 8015fbc:	08016065 	.word	0x08016065
 8015fc0:	08016079 	.word	0x08016079
 8015fc4:	08016079 	.word	0x08016079
 8015fc8:	08016079 	.word	0x08016079
 8015fcc:	08016079 	.word	0x08016079
 8015fd0:	08016079 	.word	0x08016079
 8015fd4:	08016079 	.word	0x08016079
 8015fd8:	08016079 	.word	0x08016079
 8015fdc:	08016079 	.word	0x08016079
 8015fe0:	08016079 	.word	0x08016079
 8015fe4:	08016079 	.word	0x08016079
 8015fe8:	08016079 	.word	0x08016079
 8015fec:	0801602b 	.word	0x0801602b
 8015ff0:	08016079 	.word	0x08016079
 8015ff4:	0801603f 	.word	0x0801603f
 8015ff8:	08016079 	.word	0x08016079
 8015ffc:	0801606d 	.word	0x0801606d
        return static_cast<T>(content_.asBoolean);
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	781b      	ldrb	r3, [r3, #0]
 8016004:	ee07 3a90 	vmov	s15, r3
 8016008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801600c:	e036      	b.n	801607c <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asUint32);
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	ee07 3a90 	vmov	s15, r3
 8016016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801601a:	e02f      	b.n	801607c <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asInt32);
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	ee07 3a90 	vmov	s15, r3
 8016024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016028:	e028      	b.n	801607c <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asUint64);
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016030:	4610      	mov	r0, r2
 8016032:	4619      	mov	r1, r3
 8016034:	f7ea fc40 	bl	80008b8 <__aeabi_ul2f>
 8016038:	ee07 0a90 	vmov	s15, r0
 801603c:	e01e      	b.n	801607c <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asInt64);
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016044:	4610      	mov	r0, r2
 8016046:	4619      	mov	r1, r3
 8016048:	f7ea fc3e 	bl	80008c8 <__aeabi_l2f>
 801604c:	ee07 0a90 	vmov	s15, r0
 8016050:	e014      	b.n	801607c <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return parseNumber<T>(content_.asOwnedString->data);
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	3308      	adds	r3, #8
 8016058:	4618      	mov	r0, r3
 801605a:	f000 fab5 	bl	80165c8 <_ZN11ArduinoJson8V730HB226detail11parseNumberIfEET_PKc>
 801605e:	eef0 7a40 	vmov.f32	s15, s0
 8016062:	e00b      	b.n	801607c <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asFloat);
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	edd3 7a00 	vldr	s15, [r3]
 801606a:	e007      	b.n	801607c <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asDouble);
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	ed93 7b00 	vldr	d7, [r3]
 8016072:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8016076:	e001      	b.n	801607c <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return 0;
 8016078:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8016088 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x118>
  }
 801607c:	eeb0 0a67 	vmov.f32	s0, s15
 8016080:	3710      	adds	r7, #16
 8016082:	46bd      	mov	sp, r7
 8016084:	bd80      	pop	{r7, pc}
 8016086:	bf00      	nop
 8016088:	00000000 	.word	0x00000000

0801608c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 801608c:	b580      	push	{r7, lr}
 801608e:	b084      	sub	sp, #16
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
 8016094:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8016096:	6839      	ldr	r1, [r7, #0]
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f7f0 fa77 	bl	800658c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 801609e:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	791b      	ldrb	r3, [r3, #4]
 80160a4:	3b04      	subs	r3, #4
 80160a6:	2b1a      	cmp	r3, #26
 80160a8:	d87c      	bhi.n	80161a4 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x118>
 80160aa:	a201      	add	r2, pc, #4	@ (adr r2, 80160b0 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x24>)
 80160ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160b0:	08016163 	.word	0x08016163
 80160b4:	08016171 	.word	0x08016171
 80160b8:	0801611d 	.word	0x0801611d
 80160bc:	080161a5 	.word	0x080161a5
 80160c0:	080161a5 	.word	0x080161a5
 80160c4:	080161a5 	.word	0x080161a5
 80160c8:	08016123 	.word	0x08016123
 80160cc:	080161a5 	.word	0x080161a5
 80160d0:	08016131 	.word	0x08016131
 80160d4:	080161a5 	.word	0x080161a5
 80160d8:	08016181 	.word	0x08016181
 80160dc:	080161a5 	.word	0x080161a5
 80160e0:	080161a5 	.word	0x080161a5
 80160e4:	080161a5 	.word	0x080161a5
 80160e8:	080161a5 	.word	0x080161a5
 80160ec:	080161a5 	.word	0x080161a5
 80160f0:	080161a5 	.word	0x080161a5
 80160f4:	080161a5 	.word	0x080161a5
 80160f8:	080161a5 	.word	0x080161a5
 80160fc:	080161a5 	.word	0x080161a5
 8016100:	080161a5 	.word	0x080161a5
 8016104:	080161a5 	.word	0x080161a5
 8016108:	0801613f 	.word	0x0801613f
 801610c:	080161a5 	.word	0x080161a5
 8016110:	08016151 	.word	0x08016151
 8016114:	080161a5 	.word	0x080161a5
 8016118:	08016193 	.word	0x08016193
        return content_.asBoolean;
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	781b      	ldrb	r3, [r3, #0]
 8016120:	e041      	b.n	80161a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	4618      	mov	r0, r3
 8016128:	f000 fa64 	bl	80165f4 <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_>
 801612c:	4603      	mov	r3, r0
 801612e:	e03a      	b.n	80161a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	4618      	mov	r0, r3
 8016136:	f000 fa6f 	bl	8016618 <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_>
 801613a:	4603      	mov	r3, r0
 801613c:	e033      	b.n	80161a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016144:	4610      	mov	r0, r2
 8016146:	4619      	mov	r1, r3
 8016148:	f000 fa78 	bl	801663c <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>
 801614c:	4603      	mov	r3, r0
 801614e:	e02a      	b.n	80161a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016156:	4610      	mov	r0, r2
 8016158:	4619      	mov	r1, r3
 801615a:	f000 fa82 	bl	8016662 <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>
 801615e:	4603      	mov	r3, r0
 8016160:	e021      	b.n	80161a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	4618      	mov	r0, r3
 8016168:	f000 fa8e 	bl	8016688 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>
 801616c:	4603      	mov	r3, r0
 801616e:	e01a      	b.n	80161a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	3308      	adds	r3, #8
 8016176:	4618      	mov	r0, r3
 8016178:	f000 fa86 	bl	8016688 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>
 801617c:	4603      	mov	r3, r0
 801617e:	e012      	b.n	80161a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	edd3 7a00 	vldr	s15, [r3]
 8016186:	eeb0 0a67 	vmov.f32	s0, s15
 801618a:	f000 fa91 	bl	80166b0 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>
 801618e:	4603      	mov	r3, r0
 8016190:	e009      	b.n	80161a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	ed93 7b00 	vldr	d7, [r3]
 8016198:	eeb0 0b47 	vmov.f64	d0, d7
 801619c:	f000 faa1 	bl	80166e2 <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>
 80161a0:	4603      	mov	r3, r0
 80161a2:	e000      	b.n	80161a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 80161a4:	2300      	movs	r3, #0
  }
 80161a6:	4618      	mov	r0, r3
 80161a8:	3710      	adds	r7, #16
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
 80161ae:	bf00      	nop

080161b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 80161b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161b4:	b090      	sub	sp, #64	@ 0x40
 80161b6:	af04      	add	r7, sp, #16
 80161b8:	6178      	str	r0, [r7, #20]
 80161ba:	6139      	str	r1, [r7, #16]
 80161bc:	60fa      	str	r2, [r7, #12]
 80161be:	60bb      	str	r3, [r7, #8]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 80161c0:	68fa      	ldr	r2, [r7, #12]
 80161c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80161c6:	4611      	mov	r1, r2
 80161c8:	4618      	mov	r0, r3
 80161ca:	f000 faa3 	bl	8016714 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 80161ce:	f107 031c 	add.w	r3, r7, #28
 80161d2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80161d6:	4611      	mov	r1, r2
 80161d8:	4618      	mov	r0, r3
 80161da:	f000 fab4 	bl	8016746 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 80161de:	f107 031c 	add.w	r3, r7, #28
 80161e2:	4618      	mov	r0, r3
 80161e4:	f000 fad7 	bl	8016796 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 80161e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  auto __pi = ::new (__mem)
 80161ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161ec:	4619      	mov	r1, r3
 80161ee:	2058      	movs	r0, #88	@ 0x58
 80161f0:	f7f4 fb4e 	bl	800a890 <_ZnwjPv>
 80161f4:	4604      	mov	r4, r0
 80161f6:	68b8      	ldr	r0, [r7, #8]
 80161f8:	f7ff fc26 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80161fc:	4680      	mov	r8, r0
 80161fe:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8016200:	f7ff fc2d 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8016204:	4681      	mov	r9, r0
 8016206:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016208:	f7ff fc34 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801620c:	4605      	mov	r5, r0
 801620e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8016210:	f7ff fc30 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8016214:	4606      	mov	r6, r0
 8016216:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8016218:	f7fb f91f 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801621c:	6078      	str	r0, [r7, #4]
 801621e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8016220:	f7ff fc33 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8016224:	4603      	mov	r3, r0
 8016226:	9303      	str	r3, [sp, #12]
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	9302      	str	r3, [sp, #8]
 801622c:	9601      	str	r6, [sp, #4]
 801622e:	9500      	str	r5, [sp, #0]
 8016230:	464b      	mov	r3, r9
 8016232:	4642      	mov	r2, r8
 8016234:	4651      	mov	r1, sl
 8016236:	4620      	mov	r0, r4
 8016238:	f000 fabc 	bl	80167b4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEES1_DpOT_>
 801623c:	62bc      	str	r4, [r7, #40]	@ 0x28
	  __guard = nullptr;
 801623e:	f107 031c 	add.w	r3, r7, #28
 8016242:	2100      	movs	r1, #0
 8016244:	4618      	mov	r0, r3
 8016246:	f000 faf9 	bl	801683c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 801624a:	697b      	ldr	r3, [r7, #20]
 801624c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801624e:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8016250:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016252:	f000 fb02 	bl	801685a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8016256:	4602      	mov	r2, r0
 8016258:	693b      	ldr	r3, [r7, #16]
 801625a:	601a      	str	r2, [r3, #0]
	}
 801625c:	f107 031c 	add.w	r3, r7, #28
 8016260:	4618      	mov	r0, r3
 8016262:	f000 fa83 	bl	801676c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8016266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801626a:	4618      	mov	r0, r3
 801626c:	f000 fa5f 	bl	801672e <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8016270:	697b      	ldr	r3, [r7, #20]
 8016272:	4618      	mov	r0, r3
 8016274:	3730      	adds	r7, #48	@ 0x30
 8016276:	46bd      	mov	sp, r7
 8016278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801627c <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp* __p) noexcept
 801627c:	b580      	push	{r7, lr}
 801627e:	b084      	sub	sp, #16
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
 8016284:	6039      	str	r1, [r7, #0]
	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	1d1a      	adds	r2, r3, #4
 801628a:	683b      	ldr	r3, [r7, #0]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d002      	beq.n	8016296 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1a>
 8016290:	683b      	ldr	r3, [r7, #0]
 8016292:	3318      	adds	r3, #24
 8016294:	e000      	b.n	8016298 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1c>
 8016296:	2300      	movs	r3, #0
 8016298:	4619      	mov	r1, r3
 801629a:	4610      	mov	r0, r2
 801629c:	f000 faeb 	bl	8016876 <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>
 80162a0:	60f8      	str	r0, [r7, #12]
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d006      	beq.n	80162b6 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x3a>
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	3304      	adds	r3, #4
 80162ac:	461a      	mov	r2, r3
 80162ae:	6839      	ldr	r1, [r7, #0]
 80162b0:	68f8      	ldr	r0, [r7, #12]
 80162b2:	f000 faec 	bl	801688e <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2208EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>
	}
 80162b6:	bf00      	nop
 80162b8:	3710      	adds	r7, #16
 80162ba:	46bd      	mov	sp, r7
 80162bc:	bd80      	pop	{r7, pc}

080162be <_ZNSt5tupleIJP14TMC2208StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80162be:	b580      	push	{r7, lr}
 80162c0:	b082      	sub	sp, #8
 80162c2:	af00      	add	r7, sp, #0
 80162c4:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	4618      	mov	r0, r3
 80162ca:	f000 faf0 	bl	80168ae <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEEC1Ev>
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	4618      	mov	r0, r3
 80162d2:	3708      	adds	r7, #8
 80162d4:	46bd      	mov	sp, r7
 80162d6:	bd80      	pop	{r7, pc}

080162d8 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80162d8:	b580      	push	{r7, lr}
 80162da:	b082      	sub	sp, #8
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80162e0:	6878      	ldr	r0, [r7, #4]
 80162e2:	f000 faf4 	bl	80168ce <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERS4_>
 80162e6:	4603      	mov	r3, r0
 80162e8:	4618      	mov	r0, r3
 80162ea:	3708      	adds	r7, #8
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}

080162f0 <_ZSt3getILj1EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b082      	sub	sp, #8
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80162f8:	6878      	ldr	r0, [r7, #4]
 80162fa:	f000 faf5 	bl	80168e8 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2208StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80162fe:	4603      	mov	r3, r0
 8016300:	4618      	mov	r0, r3
 8016302:	3708      	adds	r7, #8
 8016304:	46bd      	mov	sp, r7
 8016306:	bd80      	pop	{r7, pc}

08016308 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8016308:	b580      	push	{r7, lr}
 801630a:	b082      	sub	sp, #8
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	4618      	mov	r0, r3
 8016314:	f000 faf4 	bl	8016900 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8016318:	4603      	mov	r3, r0
 801631a:	4618      	mov	r0, r3
 801631c:	3708      	adds	r7, #8
 801631e:	46bd      	mov	sp, r7
 8016320:	bd80      	pop	{r7, pc}

08016322 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter writer) : writer_(writer) {}
 8016322:	b580      	push	{r7, lr}
 8016324:	b082      	sub	sp, #8
 8016326:	af00      	add	r7, sp, #0
 8016328:	6078      	str	r0, [r7, #4]
 801632a:	6039      	str	r1, [r7, #0]
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	463a      	mov	r2, r7
 8016330:	4611      	mov	r1, r2
 8016332:	4618      	mov	r0, r3
 8016334:	f000 faf0 	bl	8016918 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	4618      	mov	r0, r3
 801633c:	3708      	adds	r7, #8
 801633e:	46bd      	mov	sp, r7
 8016340:	bd80      	pop	{r7, pc}
	...

08016344 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>:
  typename TVisitor::result_type accept(
 8016344:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8016348:	b08e      	sub	sp, #56	@ 0x38
 801634a:	af00      	add	r7, sp, #0
 801634c:	60f8      	str	r0, [r7, #12]
 801634e:	60b9      	str	r1, [r7, #8]
 8016350:	607a      	str	r2, [r7, #4]
    auto extension = getExtension(resources);
 8016352:	6879      	ldr	r1, [r7, #4]
 8016354:	68f8      	ldr	r0, [r7, #12]
 8016356:	f7f0 f919 	bl	800658c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 801635a:	6378      	str	r0, [r7, #52]	@ 0x34
    switch (type_) {
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	791b      	ldrb	r3, [r3, #4]
 8016360:	3b03      	subs	r3, #3
 8016362:	2b3d      	cmp	r3, #61	@ 0x3d
 8016364:	f200 8111 	bhi.w	801658a <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x246>
 8016368:	a201      	add	r2, pc, #4	@ (adr r2, 8016370 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x2c>)
 801636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801636e:	bf00      	nop
 8016370:	080164f5 	.word	0x080164f5
 8016374:	080164ad 	.word	0x080164ad
 8016378:	080164cd 	.word	0x080164cd
 801637c:	08016571 	.word	0x08016571
 8016380:	0801658b 	.word	0x0801658b
 8016384:	0801658b 	.word	0x0801658b
 8016388:	0801658b 	.word	0x0801658b
 801638c:	08016539 	.word	0x08016539
 8016390:	0801658b 	.word	0x0801658b
 8016394:	08016521 	.word	0x08016521
 8016398:	0801658b 	.word	0x0801658b
 801639c:	08016469 	.word	0x08016469
 80163a0:	0801658b 	.word	0x0801658b
 80163a4:	0801658b 	.word	0x0801658b
 80163a8:	0801658b 	.word	0x0801658b
 80163ac:	0801658b 	.word	0x0801658b
 80163b0:	0801658b 	.word	0x0801658b
 80163b4:	0801658b 	.word	0x0801658b
 80163b8:	0801658b 	.word	0x0801658b
 80163bc:	0801658b 	.word	0x0801658b
 80163c0:	0801658b 	.word	0x0801658b
 80163c4:	0801658b 	.word	0x0801658b
 80163c8:	0801658b 	.word	0x0801658b
 80163cc:	08016561 	.word	0x08016561
 80163d0:	0801658b 	.word	0x0801658b
 80163d4:	08016551 	.word	0x08016551
 80163d8:	0801658b 	.word	0x0801658b
 80163dc:	0801647d 	.word	0x0801647d
 80163e0:	0801658b 	.word	0x0801658b
 80163e4:	0801649f 	.word	0x0801649f
 80163e8:	0801658b 	.word	0x0801658b
 80163ec:	0801658b 	.word	0x0801658b
 80163f0:	0801658b 	.word	0x0801658b
 80163f4:	0801658b 	.word	0x0801658b
 80163f8:	0801658b 	.word	0x0801658b
 80163fc:	0801658b 	.word	0x0801658b
 8016400:	0801658b 	.word	0x0801658b
 8016404:	0801658b 	.word	0x0801658b
 8016408:	0801658b 	.word	0x0801658b
 801640c:	0801658b 	.word	0x0801658b
 8016410:	0801658b 	.word	0x0801658b
 8016414:	0801658b 	.word	0x0801658b
 8016418:	0801658b 	.word	0x0801658b
 801641c:	0801658b 	.word	0x0801658b
 8016420:	0801658b 	.word	0x0801658b
 8016424:	0801658b 	.word	0x0801658b
 8016428:	0801658b 	.word	0x0801658b
 801642c:	0801658b 	.word	0x0801658b
 8016430:	0801658b 	.word	0x0801658b
 8016434:	0801658b 	.word	0x0801658b
 8016438:	0801658b 	.word	0x0801658b
 801643c:	0801658b 	.word	0x0801658b
 8016440:	0801658b 	.word	0x0801658b
 8016444:	0801658b 	.word	0x0801658b
 8016448:	0801658b 	.word	0x0801658b
 801644c:	0801658b 	.word	0x0801658b
 8016450:	0801658b 	.word	0x0801658b
 8016454:	0801658b 	.word	0x0801658b
 8016458:	0801658b 	.word	0x0801658b
 801645c:	0801658b 	.word	0x0801658b
 8016460:	0801658b 	.word	0x0801658b
 8016464:	08016491 	.word	0x08016491
        return visit.visit(content_.asFloat);
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	edd3 7a00 	vldr	s15, [r3]
 801646e:	eeb0 0a67 	vmov.f32	s0, s15
 8016472:	68b8      	ldr	r0, [r7, #8]
 8016474:	f000 fa63 	bl	801693e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIfEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>
 8016478:	4603      	mov	r3, r0
 801647a:	e08c      	b.n	8016596 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(extension->asDouble);
 801647c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801647e:	ed93 7b00 	vldr	d7, [r3]
 8016482:	eeb0 0b47 	vmov.f64	d0, d7
 8016486:	68b8      	ldr	r0, [r7, #8]
 8016488:	f000 fa6d 	bl	8016966 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIdEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>
 801648c:	4603      	mov	r3, r0
 801648e:	e082      	b.n	8016596 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(content_.asArray);
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	4619      	mov	r1, r3
 8016494:	68b8      	ldr	r0, [r7, #8]
 8016496:	f000 fa7a 	bl	801698e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE>
 801649a:	4603      	mov	r3, r0
 801649c:	e07b      	b.n	8016596 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(content_.asObject);
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	4619      	mov	r1, r3
 80164a2:	68b8      	ldr	r0, [r7, #8]
 80164a4:	f000 fab1 	bl	8016a0a <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE>
 80164a8:	4603      	mov	r3, r0
 80164aa:	e074      	b.n	8016596 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(JsonString(content_.asLinkedString, true));
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	6819      	ldr	r1, [r3, #0]
 80164b0:	f107 0314 	add.w	r3, r7, #20
 80164b4:	2201      	movs	r2, #1
 80164b6:	4618      	mov	r0, r3
 80164b8:	f7ee ffc5 	bl	8005446 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 80164bc:	f107 0314 	add.w	r3, r7, #20
 80164c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80164c2:	68b8      	ldr	r0, [r7, #8]
 80164c4:	f000 faeb 	bl	8016a9e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>
 80164c8:	4603      	mov	r3, r0
 80164ca:	e064      	b.n	8016596 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(JsonString(content_.asOwnedString->data,
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	f103 0108 	add.w	r1, r3, #8
                                      content_.asOwnedString->length));
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	681b      	ldr	r3, [r3, #0]
        return visit.visit(JsonString(content_.asOwnedString->data,
 80164d8:	88da      	ldrh	r2, [r3, #6]
 80164da:	f107 0020 	add.w	r0, r7, #32
 80164de:	2300      	movs	r3, #0
 80164e0:	f7f0 ff8c 	bl	80073fc <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 80164e4:	f107 0320 	add.w	r3, r7, #32
 80164e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80164ea:	68b8      	ldr	r0, [r7, #8]
 80164ec:	f000 fad7 	bl	8016a9e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>
 80164f0:	4603      	mov	r3, r0
                                      content_.asOwnedString->length));
 80164f2:	e050      	b.n	8016596 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(RawString(content_.asOwnedString->data,
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	f103 0108 	add.w	r1, r3, #8
                                     content_.asOwnedString->length));
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	88db      	ldrh	r3, [r3, #6]
        return visit.visit(RawString(content_.asOwnedString->data,
 8016502:	461a      	mov	r2, r3
 8016504:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016508:	4618      	mov	r0, r3
 801650a:	f7ff fbd5 	bl	8015cb8 <_ZN11ArduinoJson8V730HB2215SerializedValueIPKcEC1ES3_j>
 801650e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016512:	e893 0006 	ldmia.w	r3, {r1, r2}
 8016516:	68b8      	ldr	r0, [r7, #8]
 8016518:	f000 fae0 	bl	8016adc <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_15SerializedValueIPKcEE>
 801651c:	4603      	mov	r3, r0
                                     content_.asOwnedString->length));
 801651e:	e03a      	b.n	8016596 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(static_cast<JsonInteger>(content_.asInt32));
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	17da      	asrs	r2, r3, #31
 8016526:	4698      	mov	r8, r3
 8016528:	4691      	mov	r9, r2
 801652a:	4642      	mov	r2, r8
 801652c:	464b      	mov	r3, r9
 801652e:	68b8      	ldr	r0, [r7, #8]
 8016530:	f000 faf3 	bl	8016b1a <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>
 8016534:	4603      	mov	r3, r0
 8016536:	e02e      	b.n	8016596 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(static_cast<JsonUInt>(content_.asUint32));
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	2200      	movs	r2, #0
 801653e:	461c      	mov	r4, r3
 8016540:	4615      	mov	r5, r2
 8016542:	4622      	mov	r2, r4
 8016544:	462b      	mov	r3, r5
 8016546:	68b8      	ldr	r0, [r7, #8]
 8016548:	f000 fafb 	bl	8016b42 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>
 801654c:	4603      	mov	r3, r0
 801654e:	e022      	b.n	8016596 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(extension->asInt64);
 8016550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016556:	68b8      	ldr	r0, [r7, #8]
 8016558:	f000 fadf 	bl	8016b1a <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>
 801655c:	4603      	mov	r3, r0
 801655e:	e01a      	b.n	8016596 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(extension->asUint64);
 8016560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016566:	68b8      	ldr	r0, [r7, #8]
 8016568:	f000 faeb 	bl	8016b42 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>
 801656c:	4603      	mov	r3, r0
 801656e:	e012      	b.n	8016596 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(content_.asBoolean != 0);
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	781b      	ldrb	r3, [r3, #0]
 8016574:	2b00      	cmp	r3, #0
 8016576:	bf14      	ite	ne
 8016578:	2301      	movne	r3, #1
 801657a:	2300      	moveq	r3, #0
 801657c:	b2db      	uxtb	r3, r3
 801657e:	4619      	mov	r1, r3
 8016580:	68b8      	ldr	r0, [r7, #8]
 8016582:	f000 faf2 	bl	8016b6a <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEb>
 8016586:	4603      	mov	r3, r0
 8016588:	e005      	b.n	8016596 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(nullptr);
 801658a:	2100      	movs	r1, #0
 801658c:	68b8      	ldr	r0, [r7, #8]
 801658e:	f000 f807 	bl	80165a0 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>
 8016592:	4603      	mov	r3, r0
 8016594:	bf00      	nop
  }
 8016596:	4618      	mov	r0, r3
 8016598:	3738      	adds	r7, #56	@ 0x38
 801659a:	46bd      	mov	sp, r7
 801659c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080165a0 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>:
  size_t visit(nullptr_t) {
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b082      	sub	sp, #8
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
 80165a8:	6039      	str	r1, [r7, #0]
    formatter_.writeRaw("null");
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	4905      	ldr	r1, [pc, #20]	@ (80165c4 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn+0x24>)
 80165ae:	4618      	mov	r0, r3
 80165b0:	f000 faef 	bl	8016b92 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
    return bytesWritten();
 80165b4:	6878      	ldr	r0, [r7, #4]
 80165b6:	f000 faff 	bl	8016bb8 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 80165ba:	4603      	mov	r3, r0
  }
 80165bc:	4618      	mov	r0, r3
 80165be:	3708      	adds	r7, #8
 80165c0:	46bd      	mov	sp, r7
 80165c2:	bd80      	pop	{r7, pc}
 80165c4:	0802aca4 	.word	0x0802aca4

080165c8 <_ZN11ArduinoJson8V730HB226detail11parseNumberIfEET_PKc>:
inline T parseNumber(const char* s) {
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b086      	sub	sp, #24
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 80165d0:	f107 0308 	add.w	r3, r7, #8
 80165d4:	6879      	ldr	r1, [r7, #4]
 80165d6:	4618      	mov	r0, r3
 80165d8:	f7f0 fa3c 	bl	8006a54 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 80165dc:	f107 0308 	add.w	r3, r7, #8
 80165e0:	4618      	mov	r0, r3
 80165e2:	f000 faf7 	bl	8016bd4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v>
 80165e6:	eef0 7a40 	vmov.f32	s15, s0
}
 80165ea:	eeb0 0a67 	vmov.f32	s0, s15
 80165ee:	3718      	adds	r7, #24
 80165f0:	46bd      	mov	sp, r7
 80165f2:	bd80      	pop	{r7, pc}

080165f4 <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_>:
TOut convertNumber(TIn value) {
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b082      	sub	sp, #8
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80165fc:	6878      	ldr	r0, [r7, #4]
 80165fe:	f000 fb2f 	bl	8016c60 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8016602:	4603      	mov	r3, r0
 8016604:	2b00      	cmp	r3, #0
 8016606:	d002      	beq.n	801660e <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_+0x1a>
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	b29b      	uxth	r3, r3
 801660c:	e000      	b.n	8016610 <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_+0x1c>
 801660e:	2300      	movs	r3, #0
}
 8016610:	4618      	mov	r0, r3
 8016612:	3708      	adds	r7, #8
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}

08016618 <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_>:
TOut convertNumber(TIn value) {
 8016618:	b580      	push	{r7, lr}
 801661a:	b082      	sub	sp, #8
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8016620:	6878      	ldr	r0, [r7, #4]
 8016622:	f000 fb2f 	bl	8016c84 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8016626:	4603      	mov	r3, r0
 8016628:	2b00      	cmp	r3, #0
 801662a:	d002      	beq.n	8016632 <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_+0x1a>
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	b29b      	uxth	r3, r3
 8016630:	e000      	b.n	8016634 <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_+0x1c>
 8016632:	2300      	movs	r3, #0
}
 8016634:	4618      	mov	r0, r3
 8016636:	3708      	adds	r7, #8
 8016638:	46bd      	mov	sp, r7
 801663a:	bd80      	pop	{r7, pc}

0801663c <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>:
TOut convertNumber(TIn value) {
 801663c:	b580      	push	{r7, lr}
 801663e:	b082      	sub	sp, #8
 8016640:	af00      	add	r7, sp, #0
 8016642:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8016646:	e9d7 0100 	ldrd	r0, r1, [r7]
 801664a:	f000 fb32 	bl	8016cb2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 801664e:	4603      	mov	r3, r0
 8016650:	2b00      	cmp	r3, #0
 8016652:	d001      	beq.n	8016658 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_+0x1c>
 8016654:	883b      	ldrh	r3, [r7, #0]
 8016656:	e000      	b.n	801665a <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_+0x1e>
 8016658:	2300      	movs	r3, #0
}
 801665a:	4618      	mov	r0, r3
 801665c:	3708      	adds	r7, #8
 801665e:	46bd      	mov	sp, r7
 8016660:	bd80      	pop	{r7, pc}

08016662 <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>:
TOut convertNumber(TIn value) {
 8016662:	b580      	push	{r7, lr}
 8016664:	b082      	sub	sp, #8
 8016666:	af00      	add	r7, sp, #0
 8016668:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 801666c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016670:	f000 fb38 	bl	8016ce4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8016674:	4603      	mov	r3, r0
 8016676:	2b00      	cmp	r3, #0
 8016678:	d001      	beq.n	801667e <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_+0x1c>
 801667a:	883b      	ldrh	r3, [r7, #0]
 801667c:	e000      	b.n	8016680 <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_+0x1e>
 801667e:	2300      	movs	r3, #0
}
 8016680:	4618      	mov	r0, r3
 8016682:	3708      	adds	r7, #8
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}

08016688 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>:
inline T parseNumber(const char* s) {
 8016688:	b580      	push	{r7, lr}
 801668a:	b086      	sub	sp, #24
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8016690:	f107 0308 	add.w	r3, r7, #8
 8016694:	6879      	ldr	r1, [r7, #4]
 8016696:	4618      	mov	r0, r3
 8016698:	f7f0 f9dc 	bl	8006a54 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 801669c:	f107 0308 	add.w	r3, r7, #8
 80166a0:	4618      	mov	r0, r3
 80166a2:	f000 fb3f 	bl	8016d24 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v>
 80166a6:	4603      	mov	r3, r0
}
 80166a8:	4618      	mov	r0, r3
 80166aa:	3718      	adds	r7, #24
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bd80      	pop	{r7, pc}

080166b0 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>:
TOut convertNumber(TIn value) {
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b082      	sub	sp, #8
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80166ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80166be:	f000 fb77 	bl	8016db0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 80166c2:	4603      	mov	r3, r0
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d007      	beq.n	80166d8 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_+0x28>
 80166c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80166cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80166d0:	ee17 3a90 	vmov	r3, s15
 80166d4:	b29b      	uxth	r3, r3
 80166d6:	e000      	b.n	80166da <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_+0x2a>
 80166d8:	2300      	movs	r3, #0
}
 80166da:	4618      	mov	r0, r3
 80166dc:	3708      	adds	r7, #8
 80166de:	46bd      	mov	sp, r7
 80166e0:	bd80      	pop	{r7, pc}

080166e2 <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>:
TOut convertNumber(TIn value) {
 80166e2:	b580      	push	{r7, lr}
 80166e4:	b082      	sub	sp, #8
 80166e6:	af00      	add	r7, sp, #0
 80166e8:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80166ec:	ed97 0b00 	vldr	d0, [r7]
 80166f0:	f000 fb86 	bl	8016e00 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 80166f4:	4603      	mov	r3, r0
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d007      	beq.n	801670a <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_+0x28>
 80166fa:	ed97 7b00 	vldr	d7, [r7]
 80166fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8016702:	ee17 3a90 	vmov	r3, s15
 8016706:	b29b      	uxth	r3, r3
 8016708:	e000      	b.n	801670c <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_+0x2a>
 801670a:	2300      	movs	r3, #0
}
 801670c:	4618      	mov	r0, r3
 801670e:	3708      	adds	r7, #8
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}

08016714 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
 8016714:	b580      	push	{r7, lr}
 8016716:	b082      	sub	sp, #8
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
 801671c:	6039      	str	r1, [r7, #0]
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	f000 fb96 	bl	8016e50 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	4618      	mov	r0, r3
 8016728:	3708      	adds	r7, #8
 801672a:	46bd      	mov	sp, r7
 801672c:	bd80      	pop	{r7, pc}

0801672e <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801672e:	b580      	push	{r7, lr}
 8016730:	b082      	sub	sp, #8
 8016732:	af00      	add	r7, sp, #0
 8016734:	6078      	str	r0, [r7, #4]
 8016736:	6878      	ldr	r0, [r7, #4]
 8016738:	f000 fb95 	bl	8016e66 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	4618      	mov	r0, r3
 8016740:	3708      	adds	r7, #8
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}

08016746 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 8016746:	b580      	push	{r7, lr}
 8016748:	b082      	sub	sp, #8
 801674a:	af00      	add	r7, sp, #0
 801674c:	6078      	str	r0, [r7, #4]
 801674e:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8016750:	2101      	movs	r1, #1
 8016752:	6838      	ldr	r0, [r7, #0]
 8016754:	f000 fb92 	bl	8016e7c <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8016758:	4603      	mov	r3, r0
 801675a:	461a      	mov	r2, r3
 801675c:	6839      	ldr	r1, [r7, #0]
 801675e:	6878      	ldr	r0, [r7, #4]
 8016760:	f000 fb9b 	bl	8016e9a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 8016764:	6878      	ldr	r0, [r7, #4]
 8016766:	3708      	adds	r7, #8
 8016768:	46bd      	mov	sp, r7
 801676a:	bd80      	pop	{r7, pc}

0801676c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 801676c:	b580      	push	{r7, lr}
 801676e:	b082      	sub	sp, #8
 8016770:	af00      	add	r7, sp, #0
 8016772:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	685b      	ldr	r3, [r3, #4]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d007      	beq.n	801678c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	6818      	ldr	r0, [r3, #0]
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	685b      	ldr	r3, [r3, #4]
 8016784:	2201      	movs	r2, #1
 8016786:	4619      	mov	r1, r3
 8016788:	f000 fb9b 	bl	8016ec2 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	4618      	mov	r0, r3
 8016790:	3708      	adds	r7, #8
 8016792:	46bd      	mov	sp, r7
 8016794:	bd80      	pop	{r7, pc}

08016796 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8016796:	b580      	push	{r7, lr}
 8016798:	b082      	sub	sp, #8
 801679a:	af00      	add	r7, sp, #0
 801679c:	6078      	str	r0, [r7, #4]
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	685b      	ldr	r3, [r3, #4]
 80167a2:	4618      	mov	r0, r3
 80167a4:	f000 fb9c 	bl	8016ee0 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 80167a8:	4603      	mov	r3, r0
 80167aa:	4618      	mov	r0, r3
 80167ac:	3708      	adds	r7, #8
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}
	...

080167b4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 80167b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167b8:	b088      	sub	sp, #32
 80167ba:	af04      	add	r7, sp, #16
 80167bc:	60f8      	str	r0, [r7, #12]
 80167be:	7239      	strb	r1, [r7, #8]
 80167c0:	607a      	str	r2, [r7, #4]
 80167c2:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	4618      	mov	r0, r3
 80167c8:	f7f7 fd0a 	bl	800e1e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80167cc:	4a1a      	ldr	r2, [pc, #104]	@ (8016838 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEES1_DpOT_+0x84>)
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	601a      	str	r2, [r3, #0]
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	330c      	adds	r3, #12
 80167d6:	4621      	mov	r1, r4
 80167d8:	4618      	mov	r0, r3
 80167da:	f000 fb8c 	bl	8016ef6 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 80167de:	68f8      	ldr	r0, [r7, #12]
 80167e0:	f000 f83b 	bl	801685a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80167e4:	4680      	mov	r8, r0
 80167e6:	6878      	ldr	r0, [r7, #4]
 80167e8:	f7ff f92e 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80167ec:	4681      	mov	r9, r0
 80167ee:	6838      	ldr	r0, [r7, #0]
 80167f0:	f7ff f935 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80167f4:	4682      	mov	sl, r0
 80167f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80167f8:	f7ff f93c 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80167fc:	4604      	mov	r4, r0
 80167fe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016800:	f7ff f938 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8016804:	4605      	mov	r5, r0
 8016806:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016808:	f7fa fe27 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801680c:	4606      	mov	r6, r0
 801680e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8016810:	f7ff f93b 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8016814:	4603      	mov	r3, r0
 8016816:	f107 0008 	add.w	r0, r7, #8
 801681a:	9303      	str	r3, [sp, #12]
 801681c:	9602      	str	r6, [sp, #8]
 801681e:	9501      	str	r5, [sp, #4]
 8016820:	9400      	str	r4, [sp, #0]
 8016822:	4653      	mov	r3, sl
 8016824:	464a      	mov	r2, r9
 8016826:	4641      	mov	r1, r8
 8016828:	f000 fb74 	bl	8016f14 <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEEvRS0_PT_DpOT0_>
	}
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	4618      	mov	r0, r3
 8016830:	3710      	adds	r7, #16
 8016832:	46bd      	mov	sp, r7
 8016834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016838:	0802b544 	.word	0x0802b544

0801683c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 801683c:	b480      	push	{r7}
 801683e:	b083      	sub	sp, #12
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
 8016844:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	2200      	movs	r2, #0
 801684a:	605a      	str	r2, [r3, #4]
	return *this;
 801684c:	687b      	ldr	r3, [r7, #4]
      }
 801684e:	4618      	mov	r0, r3
 8016850:	370c      	adds	r7, #12
 8016852:	46bd      	mov	sp, r7
 8016854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016858:	4770      	bx	lr

0801685a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 801685a:	b580      	push	{r7, lr}
 801685c:	b082      	sub	sp, #8
 801685e:	af00      	add	r7, sp, #0
 8016860:	6078      	str	r0, [r7, #4]
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	330c      	adds	r3, #12
 8016866:	4618      	mov	r0, r3
 8016868:	f000 fb82 	bl	8016f70 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E6_M_ptrEv>
 801686c:	4603      	mov	r3, r0
 801686e:	4618      	mov	r0, r3
 8016870:	3708      	adds	r7, #8
 8016872:	46bd      	mov	sp, r7
 8016874:	bd80      	pop	{r7, pc}

08016876 <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>:
      __enable_shared_from_this_base(const __shared_count<>&,
 8016876:	b480      	push	{r7}
 8016878:	b083      	sub	sp, #12
 801687a:	af00      	add	r7, sp, #0
 801687c:	6078      	str	r0, [r7, #4]
 801687e:	6039      	str	r1, [r7, #0]
      { return __p; }
 8016880:	683b      	ldr	r3, [r7, #0]
 8016882:	4618      	mov	r0, r3
 8016884:	370c      	adds	r7, #12
 8016886:	46bd      	mov	sp, r7
 8016888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688c:	4770      	bx	lr

0801688e <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2208EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>:
	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 801688e:	b580      	push	{r7, lr}
 8016890:	b084      	sub	sp, #16
 8016892:	af00      	add	r7, sp, #0
 8016894:	60f8      	str	r0, [r7, #12]
 8016896:	60b9      	str	r1, [r7, #8]
 8016898:	607a      	str	r2, [r7, #4]
	{ _M_weak_this._M_assign(__p, __n); }
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	687a      	ldr	r2, [r7, #4]
 801689e:	68b9      	ldr	r1, [r7, #8]
 80168a0:	4618      	mov	r0, r3
 80168a2:	f000 fb71 	bl	8016f88 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>
 80168a6:	bf00      	nop
 80168a8:	3710      	adds	r7, #16
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd80      	pop	{r7, pc}

080168ae <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80168ae:	b580      	push	{r7, lr}
 80168b0:	b082      	sub	sp, #8
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80168b6:	6878      	ldr	r0, [r7, #4]
 80168b8:	f000 fb84 	bl	8016fc4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEEC1Ev>
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	4618      	mov	r0, r3
 80168c0:	f000 fb8c 	bl	8016fdc <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EEC1Ev>
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	4618      	mov	r0, r3
 80168c8:	3708      	adds	r7, #8
 80168ca:	46bd      	mov	sp, r7
 80168cc:	bd80      	pop	{r7, pc}

080168ce <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80168ce:	b580      	push	{r7, lr}
 80168d0:	b082      	sub	sp, #8
 80168d2:	af00      	add	r7, sp, #0
 80168d4:	6078      	str	r0, [r7, #4]
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	4618      	mov	r0, r3
 80168da:	f000 fb8d 	bl	8016ff8 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERS2_>
 80168de:	4603      	mov	r3, r0
 80168e0:	4618      	mov	r0, r3
 80168e2:	3708      	adds	r7, #8
 80168e4:	46bd      	mov	sp, r7
 80168e6:	bd80      	pop	{r7, pc}

080168e8 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2208StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b082      	sub	sp, #8
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80168f0:	6878      	ldr	r0, [r7, #4]
 80168f2:	f000 fb8c 	bl	801700e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEE7_M_headERS3_>
 80168f6:	4603      	mov	r3, r0
 80168f8:	4618      	mov	r0, r3
 80168fa:	3708      	adds	r7, #8
 80168fc:	46bd      	mov	sp, r7
 80168fe:	bd80      	pop	{r7, pc}

08016900 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8016900:	b580      	push	{r7, lr}
 8016902:	b082      	sub	sp, #8
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8016908:	6878      	ldr	r0, [r7, #4]
 801690a:	f000 fb8c 	bl	8017026 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERKS4_>
 801690e:	4603      	mov	r3, r0
 8016910:	4618      	mov	r0, r3
 8016912:	3708      	adds	r7, #8
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}

08016918 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class CountingDecorator {
 public:
  explicit CountingDecorator(TWriter& writer) : writer_(writer), count_(0) {}
 8016918:	b480      	push	{r7}
 801691a:	b083      	sub	sp, #12
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
 8016920:	6039      	str	r1, [r7, #0]
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	683a      	ldr	r2, [r7, #0]
 8016926:	6812      	ldr	r2, [r2, #0]
 8016928:	601a      	str	r2, [r3, #0]
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	2200      	movs	r2, #0
 801692e:	605a      	str	r2, [r3, #4]
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	4618      	mov	r0, r3
 8016934:	370c      	adds	r7, #12
 8016936:	46bd      	mov	sp, r7
 8016938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693c:	4770      	bx	lr

0801693e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIfEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>:
  enable_if_t<is_floating_point<T>::value, size_t> visit(T value) {
 801693e:	b580      	push	{r7, lr}
 8016940:	b082      	sub	sp, #8
 8016942:	af00      	add	r7, sp, #0
 8016944:	6078      	str	r0, [r7, #4]
 8016946:	ed87 0a00 	vstr	s0, [r7]
    formatter_.writeFloat(value);
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	ed97 0a00 	vldr	s0, [r7]
 8016950:	4618      	mov	r0, r3
 8016952:	f000 fbac 	bl	80170ae <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIfEEvT_>
    return bytesWritten();
 8016956:	6878      	ldr	r0, [r7, #4]
 8016958:	f000 f92e 	bl	8016bb8 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 801695c:	4603      	mov	r3, r0
  }
 801695e:	4618      	mov	r0, r3
 8016960:	3708      	adds	r7, #8
 8016962:	46bd      	mov	sp, r7
 8016964:	bd80      	pop	{r7, pc}

08016966 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIdEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>:
  enable_if_t<is_floating_point<T>::value, size_t> visit(T value) {
 8016966:	b580      	push	{r7, lr}
 8016968:	b084      	sub	sp, #16
 801696a:	af00      	add	r7, sp, #0
 801696c:	60f8      	str	r0, [r7, #12]
 801696e:	ed87 0b00 	vstr	d0, [r7]
    formatter_.writeFloat(value);
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	ed97 0b00 	vldr	d0, [r7]
 8016978:	4618      	mov	r0, r3
 801697a:	f000 fbac 	bl	80170d6 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>
    return bytesWritten();
 801697e:	68f8      	ldr	r0, [r7, #12]
 8016980:	f000 f91a 	bl	8016bb8 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016984:	4603      	mov	r3, r0
  }
 8016986:	4618      	mov	r0, r3
 8016988:	3710      	adds	r7, #16
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}

0801698e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE>:
  size_t visit(const ArrayData& array) {
 801698e:	b580      	push	{r7, lr}
 8016990:	b084      	sub	sp, #16
 8016992:	af00      	add	r7, sp, #0
 8016994:	6078      	str	r0, [r7, #4]
 8016996:	6039      	str	r1, [r7, #0]
    write('[');
 8016998:	215b      	movs	r1, #91	@ 0x5b
 801699a:	6878      	ldr	r0, [r7, #4]
 801699c:	f000 fbab 	bl	80170f6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    auto slotId = array.head();
 80169a0:	683b      	ldr	r3, [r7, #0]
 80169a2:	4618      	mov	r0, r3
 80169a4:	f7fe f939 	bl	8014c1a <_ZNK11ArduinoJson8V730HB226detail14CollectionData4headEv>
 80169a8:	4603      	mov	r3, r0
 80169aa:	81fb      	strh	r3, [r7, #14]
    while (slotId != NULL_SLOT) {
 80169ac:	e01c      	b.n	80169e8 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x5a>
      auto slot = resources_->getVariant(slotId);
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	689b      	ldr	r3, [r3, #8]
 80169b2:	89fa      	ldrh	r2, [r7, #14]
 80169b4:	4611      	mov	r1, r2
 80169b6:	4618      	mov	r0, r3
 80169b8:	f7ef fbb9 	bl	800612e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 80169bc:	60b8      	str	r0, [r7, #8]
      slot->accept(*this, resources_);
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	689b      	ldr	r3, [r3, #8]
 80169c2:	461a      	mov	r2, r3
 80169c4:	6879      	ldr	r1, [r7, #4]
 80169c6:	68b8      	ldr	r0, [r7, #8]
 80169c8:	f7ff fcbc 	bl	8016344 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
      slotId = slot->next();
 80169cc:	68b8      	ldr	r0, [r7, #8]
 80169ce:	f7ee fe17 	bl	8005600 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 80169d2:	4603      	mov	r3, r0
 80169d4:	81fb      	strh	r3, [r7, #14]
      if (slotId != NULL_SLOT)
 80169d6:	89fb      	ldrh	r3, [r7, #14]
 80169d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80169dc:	4293      	cmp	r3, r2
 80169de:	d003      	beq.n	80169e8 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x5a>
        write(',');
 80169e0:	212c      	movs	r1, #44	@ 0x2c
 80169e2:	6878      	ldr	r0, [r7, #4]
 80169e4:	f000 fb87 	bl	80170f6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    while (slotId != NULL_SLOT) {
 80169e8:	89fb      	ldrh	r3, [r7, #14]
 80169ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80169ee:	4293      	cmp	r3, r2
 80169f0:	d1dd      	bne.n	80169ae <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x20>
    write(']');
 80169f2:	215d      	movs	r1, #93	@ 0x5d
 80169f4:	6878      	ldr	r0, [r7, #4]
 80169f6:	f000 fb7e 	bl	80170f6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 80169fa:	6878      	ldr	r0, [r7, #4]
 80169fc:	f000 f8dc 	bl	8016bb8 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016a00:	4603      	mov	r3, r0
  }
 8016a02:	4618      	mov	r0, r3
 8016a04:	3710      	adds	r7, #16
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bd80      	pop	{r7, pc}

08016a0a <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE>:
  size_t visit(const ObjectData& object) {
 8016a0a:	b580      	push	{r7, lr}
 8016a0c:	b084      	sub	sp, #16
 8016a0e:	af00      	add	r7, sp, #0
 8016a10:	6078      	str	r0, [r7, #4]
 8016a12:	6039      	str	r1, [r7, #0]
    write('{');
 8016a14:	217b      	movs	r1, #123	@ 0x7b
 8016a16:	6878      	ldr	r0, [r7, #4]
 8016a18:	f000 fb6d 	bl	80170f6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    auto slotId = object.head();
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	4618      	mov	r0, r3
 8016a20:	f7fe f8fb 	bl	8014c1a <_ZNK11ArduinoJson8V730HB226detail14CollectionData4headEv>
 8016a24:	4603      	mov	r3, r0
 8016a26:	81fb      	strh	r3, [r7, #14]
    bool isKey = true;
 8016a28:	2301      	movs	r3, #1
 8016a2a:	737b      	strb	r3, [r7, #13]
    while (slotId != NULL_SLOT) {
 8016a2c:	e026      	b.n	8016a7c <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x72>
      auto slot = resources_->getVariant(slotId);
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	689b      	ldr	r3, [r3, #8]
 8016a32:	89fa      	ldrh	r2, [r7, #14]
 8016a34:	4611      	mov	r1, r2
 8016a36:	4618      	mov	r0, r3
 8016a38:	f7ef fb79 	bl	800612e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8016a3c:	60b8      	str	r0, [r7, #8]
      slot->accept(*this, resources_);
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	689b      	ldr	r3, [r3, #8]
 8016a42:	461a      	mov	r2, r3
 8016a44:	6879      	ldr	r1, [r7, #4]
 8016a46:	68b8      	ldr	r0, [r7, #8]
 8016a48:	f7ff fc7c 	bl	8016344 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
      slotId = slot->next();
 8016a4c:	68b8      	ldr	r0, [r7, #8]
 8016a4e:	f7ee fdd7 	bl	8005600 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8016a52:	4603      	mov	r3, r0
 8016a54:	81fb      	strh	r3, [r7, #14]
      if (slotId != NULL_SLOT)
 8016a56:	89fb      	ldrh	r3, [r7, #14]
 8016a58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016a5c:	4293      	cmp	r3, r2
 8016a5e:	d009      	beq.n	8016a74 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x6a>
        write(isKey ? ':' : ',');
 8016a60:	7b7b      	ldrb	r3, [r7, #13]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d001      	beq.n	8016a6a <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x60>
 8016a66:	233a      	movs	r3, #58	@ 0x3a
 8016a68:	e000      	b.n	8016a6c <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x62>
 8016a6a:	232c      	movs	r3, #44	@ 0x2c
 8016a6c:	4619      	mov	r1, r3
 8016a6e:	6878      	ldr	r0, [r7, #4]
 8016a70:	f000 fb41 	bl	80170f6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
      isKey = !isKey;
 8016a74:	7b7b      	ldrb	r3, [r7, #13]
 8016a76:	f083 0301 	eor.w	r3, r3, #1
 8016a7a:	737b      	strb	r3, [r7, #13]
    while (slotId != NULL_SLOT) {
 8016a7c:	89fb      	ldrh	r3, [r7, #14]
 8016a7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016a82:	4293      	cmp	r3, r2
 8016a84:	d1d3      	bne.n	8016a2e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x24>
    write('}');
 8016a86:	217d      	movs	r1, #125	@ 0x7d
 8016a88:	6878      	ldr	r0, [r7, #4]
 8016a8a:	f000 fb34 	bl	80170f6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 8016a8e:	6878      	ldr	r0, [r7, #4]
 8016a90:	f000 f892 	bl	8016bb8 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016a94:	4603      	mov	r3, r0
  }
 8016a96:	4618      	mov	r0, r3
 8016a98:	3710      	adds	r7, #16
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	bd80      	pop	{r7, pc}

08016a9e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>:
  size_t visit(JsonString value) {
 8016a9e:	b5b0      	push	{r4, r5, r7, lr}
 8016aa0:	b084      	sub	sp, #16
 8016aa2:	af00      	add	r7, sp, #0
 8016aa4:	60f8      	str	r0, [r7, #12]
 8016aa6:	4638      	mov	r0, r7
 8016aa8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    formatter_.writeString(value.c_str(), value.size());
 8016aac:	68fc      	ldr	r4, [r7, #12]
 8016aae:	463b      	mov	r3, r7
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	f7ee fce3 	bl	800547c <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8016ab6:	4605      	mov	r5, r0
 8016ab8:	463b      	mov	r3, r7
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7fe f88e 	bl	8014bdc <_ZNK11ArduinoJson8V730HB2210JsonString4sizeEv>
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	461a      	mov	r2, r3
 8016ac4:	4629      	mov	r1, r5
 8016ac6:	4620      	mov	r0, r4
 8016ac8:	f000 fb25 	bl	8017116 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>
    return bytesWritten();
 8016acc:	68f8      	ldr	r0, [r7, #12]
 8016ace:	f000 f873 	bl	8016bb8 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016ad2:	4603      	mov	r3, r0
  }
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	3710      	adds	r7, #16
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	bdb0      	pop	{r4, r5, r7, pc}

08016adc <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_15SerializedValueIPKcEE>:
  size_t visit(RawString value) {
 8016adc:	b5b0      	push	{r4, r5, r7, lr}
 8016ade:	b084      	sub	sp, #16
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	60f8      	str	r0, [r7, #12]
 8016ae4:	1d3b      	adds	r3, r7, #4
 8016ae6:	e883 0006 	stmia.w	r3, {r1, r2}
    formatter_.writeRaw(value.data(), value.size());
 8016aea:	68fc      	ldr	r4, [r7, #12]
 8016aec:	1d3b      	adds	r3, r7, #4
 8016aee:	4618      	mov	r0, r3
 8016af0:	f7fe fcba 	bl	8015468 <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4dataEv>
 8016af4:	4605      	mov	r5, r0
 8016af6:	1d3b      	adds	r3, r7, #4
 8016af8:	4618      	mov	r0, r3
 8016afa:	f7fe fca9 	bl	8015450 <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4sizeEv>
 8016afe:	4603      	mov	r3, r0
 8016b00:	461a      	mov	r2, r3
 8016b02:	4629      	mov	r1, r5
 8016b04:	4620      	mov	r0, r4
 8016b06:	f000 fb2b 	bl	8017160 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>
    return bytesWritten();
 8016b0a:	68f8      	ldr	r0, [r7, #12]
 8016b0c:	f000 f854 	bl	8016bb8 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016b10:	4603      	mov	r3, r0
  }
 8016b12:	4618      	mov	r0, r3
 8016b14:	3710      	adds	r7, #16
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bdb0      	pop	{r4, r5, r7, pc}

08016b1a <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>:
  size_t visit(JsonInteger value) {
 8016b1a:	b580      	push	{r7, lr}
 8016b1c:	b084      	sub	sp, #16
 8016b1e:	af00      	add	r7, sp, #0
 8016b20:	60f8      	str	r0, [r7, #12]
 8016b22:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 8016b26:	68f9      	ldr	r1, [r7, #12]
 8016b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b2c:	4608      	mov	r0, r1
 8016b2e:	f000 fb27 	bl	8017180 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 8016b32:	68f8      	ldr	r0, [r7, #12]
 8016b34:	f000 f840 	bl	8016bb8 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016b38:	4603      	mov	r3, r0
  }
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	3710      	adds	r7, #16
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}

08016b42 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>:
  size_t visit(JsonUInt value) {
 8016b42:	b580      	push	{r7, lr}
 8016b44:	b084      	sub	sp, #16
 8016b46:	af00      	add	r7, sp, #0
 8016b48:	60f8      	str	r0, [r7, #12]
 8016b4a:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 8016b4e:	68f9      	ldr	r1, [r7, #12]
 8016b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b54:	4608      	mov	r0, r1
 8016b56:	f000 fb37 	bl	80171c8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 8016b5a:	68f8      	ldr	r0, [r7, #12]
 8016b5c:	f000 f82c 	bl	8016bb8 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016b60:	4603      	mov	r3, r0
  }
 8016b62:	4618      	mov	r0, r3
 8016b64:	3710      	adds	r7, #16
 8016b66:	46bd      	mov	sp, r7
 8016b68:	bd80      	pop	{r7, pc}

08016b6a <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEb>:
  size_t visit(bool value) {
 8016b6a:	b580      	push	{r7, lr}
 8016b6c:	b082      	sub	sp, #8
 8016b6e:	af00      	add	r7, sp, #0
 8016b70:	6078      	str	r0, [r7, #4]
 8016b72:	460b      	mov	r3, r1
 8016b74:	70fb      	strb	r3, [r7, #3]
    formatter_.writeBoolean(value);
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	78fa      	ldrb	r2, [r7, #3]
 8016b7a:	4611      	mov	r1, r2
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	f000 fb59 	bl	8017234 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>
    return bytesWritten();
 8016b82:	6878      	ldr	r0, [r7, #4]
 8016b84:	f000 f818 	bl	8016bb8 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016b88:	4603      	mov	r3, r0
  }
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	3708      	adds	r7, #8
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}

08016b92 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char* s) {
 8016b92:	b590      	push	{r4, r7, lr}
 8016b94:	b083      	sub	sp, #12
 8016b96:	af00      	add	r7, sp, #0
 8016b98:	6078      	str	r0, [r7, #4]
 8016b9a:	6039      	str	r1, [r7, #0]
    writer_.write(reinterpret_cast<const uint8_t*>(s), strlen(s));
 8016b9c:	687c      	ldr	r4, [r7, #4]
 8016b9e:	6838      	ldr	r0, [r7, #0]
 8016ba0:	f7e9 fbfe 	bl	80003a0 <strlen>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	461a      	mov	r2, r3
 8016ba8:	6839      	ldr	r1, [r7, #0]
 8016baa:	4620      	mov	r0, r4
 8016bac:	f000 fb5c 	bl	8017268 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8016bb0:	bf00      	nop
 8016bb2:	370c      	adds	r7, #12
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	bd90      	pop	{r4, r7, pc}

08016bb8 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b082      	sub	sp, #8
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
    return formatter_.bytesWritten();
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	f000 fb66 	bl	8017294 <_ZNK11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016bc8:	4603      	mov	r3, r0
  }
 8016bca:	4618      	mov	r0, r3
 8016bcc:	3708      	adds	r7, #8
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	bd80      	pop	{r7, pc}
	...

08016bd4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v>:
  T convertTo() const {
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b082      	sub	sp, #8
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	781b      	ldrb	r3, [r3, #0]
 8016be0:	3b01      	subs	r3, #1
 8016be2:	2b03      	cmp	r3, #3
 8016be4:	d832      	bhi.n	8016c4c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x78>
 8016be6:	a201      	add	r2, pc, #4	@ (adr r2, 8016bec <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x18>)
 8016be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bec:	08016bfd 	.word	0x08016bfd
 8016bf0:	08016c11 	.word	0x08016c11
 8016bf4:	08016c25 	.word	0x08016c25
 8016bf8:	08016c39 	.word	0x08016c39
        return convertNumber<T>(value_.asFloat);
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	edd3 7a02 	vldr	s15, [r3, #8]
 8016c02:	eeb0 0a67 	vmov.f32	s0, s15
 8016c06:	f000 fb52 	bl	80172ae <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_>
 8016c0a:	eef0 7a40 	vmov.f32	s15, s0
 8016c0e:	e01f      	b.n	8016c50 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asSignedInteger);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016c16:	4610      	mov	r0, r2
 8016c18:	4619      	mov	r1, r3
 8016c1a:	f000 fb5f 	bl	80172dc <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_>
 8016c1e:	eef0 7a40 	vmov.f32	s15, s0
 8016c22:	e015      	b.n	8016c50 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asUnsignedInteger);
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016c2a:	4610      	mov	r0, r2
 8016c2c:	4619      	mov	r1, r3
 8016c2e:	f000 fb70 	bl	8017312 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_>
 8016c32:	eef0 7a40 	vmov.f32	s15, s0
 8016c36:	e00b      	b.n	8016c50 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asDouble);
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	ed93 7b02 	vldr	d7, [r3, #8]
 8016c3e:	eeb0 0b47 	vmov.f64	d0, d7
 8016c42:	f000 fb81 	bl	8017348 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_>
 8016c46:	eef0 7a40 	vmov.f32	s15, s0
 8016c4a:	e001      	b.n	8016c50 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return T();
 8016c4c:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8016c5c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x88>
  }
 8016c50:	eeb0 0a67 	vmov.f32	s0, s15
 8016c54:	3708      	adds	r7, #8
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}
 8016c5a:	bf00      	nop
 8016c5c:	00000000 	.word	0x00000000

08016c60 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8016c68:	f7fd ffaf 	bl	8014bca <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	461a      	mov	r2, r3
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	4293      	cmp	r3, r2
 8016c74:	bf94      	ite	ls
 8016c76:	2301      	movls	r3, #1
 8016c78:	2300      	movhi	r3, #0
 8016c7a:	b2db      	uxtb	r3, r3
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3708      	adds	r7, #8
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}

08016c84 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b082      	sub	sp, #8
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	da01      	bge.n	8016c96 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x12>
    return false;
 8016c92:	2300      	movs	r3, #0
 8016c94:	e009      	b.n	8016caa <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x26>
  return value <= TIn(numeric_limits<TOut>::highest());
 8016c96:	f7fd ff98 	bl	8014bca <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016c9a:	4603      	mov	r3, r0
 8016c9c:	461a      	mov	r2, r3
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	4293      	cmp	r3, r2
 8016ca2:	bfd4      	ite	le
 8016ca4:	2301      	movle	r3, #1
 8016ca6:	2300      	movgt	r3, #0
 8016ca8:	b2db      	uxtb	r3, r3
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	3708      	adds	r7, #8
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd80      	pop	{r7, pc}

08016cb2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016cb2:	b5b0      	push	{r4, r5, r7, lr}
 8016cb4:	b082      	sub	sp, #8
 8016cb6:	af00      	add	r7, sp, #0
 8016cb8:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8016cbc:	f7fd ff85 	bl	8014bca <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	b29b      	uxth	r3, r3
 8016cc4:	2200      	movs	r2, #0
 8016cc6:	461c      	mov	r4, r3
 8016cc8:	4615      	mov	r5, r2
 8016cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016cce:	4294      	cmp	r4, r2
 8016cd0:	eb75 0303 	sbcs.w	r3, r5, r3
 8016cd4:	bf2c      	ite	cs
 8016cd6:	2301      	movcs	r3, #1
 8016cd8:	2300      	movcc	r3, #0
 8016cda:	b2db      	uxtb	r3, r3
}
 8016cdc:	4618      	mov	r0, r3
 8016cde:	3708      	adds	r7, #8
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bdb0      	pop	{r4, r5, r7, pc}

08016ce4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016ce4:	b5b0      	push	{r4, r5, r7, lr}
 8016ce6:	b082      	sub	sp, #8
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8016cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	da01      	bge.n	8016cfa <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	e00f      	b.n	8016d1a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x36>
  return value <= TIn(numeric_limits<TOut>::highest());
 8016cfa:	f7fd ff66 	bl	8014bca <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	b29b      	uxth	r3, r3
 8016d02:	2200      	movs	r2, #0
 8016d04:	461c      	mov	r4, r3
 8016d06:	4615      	mov	r5, r2
 8016d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016d0c:	4294      	cmp	r4, r2
 8016d0e:	eb75 0303 	sbcs.w	r3, r5, r3
 8016d12:	bfac      	ite	ge
 8016d14:	2301      	movge	r3, #1
 8016d16:	2300      	movlt	r3, #0
 8016d18:	b2db      	uxtb	r3, r3
}
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	3708      	adds	r7, #8
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016d24 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v>:
  T convertTo() const {
 8016d24:	b580      	push	{r7, lr}
 8016d26:	b082      	sub	sp, #8
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	781b      	ldrb	r3, [r3, #0]
 8016d30:	3b01      	subs	r3, #1
 8016d32:	2b03      	cmp	r3, #3
 8016d34:	d82e      	bhi.n	8016d94 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x70>
 8016d36:	a201      	add	r2, pc, #4	@ (adr r2, 8016d3c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x18>)
 8016d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d3c:	08016d4d 	.word	0x08016d4d
 8016d40:	08016d5f 	.word	0x08016d5f
 8016d44:	08016d71 	.word	0x08016d71
 8016d48:	08016d83 	.word	0x08016d83
        return convertNumber<T>(value_.asFloat);
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8016d52:	eeb0 0a67 	vmov.f32	s0, s15
 8016d56:	f7ff fcab 	bl	80166b0 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	e01b      	b.n	8016d96 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016d64:	4610      	mov	r0, r2
 8016d66:	4619      	mov	r1, r3
 8016d68:	f7ff fc7b 	bl	8016662 <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	e012      	b.n	8016d96 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016d76:	4610      	mov	r0, r2
 8016d78:	4619      	mov	r1, r3
 8016d7a:	f7ff fc5f 	bl	801663c <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	e009      	b.n	8016d96 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	ed93 7b02 	vldr	d7, [r3, #8]
 8016d88:	eeb0 0b47 	vmov.f64	d0, d7
 8016d8c:	f7ff fca9 	bl	80166e2 <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>
 8016d90:	4603      	mov	r3, r0
 8016d92:	e000      	b.n	8016d96 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return T();
 8016d94:	2300      	movs	r3, #0
  }
 8016d96:	4618      	mov	r0, r3
 8016d98:	3708      	adds	r7, #8
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	bd80      	pop	{r7, pc}
 8016d9e:	bf00      	nop

08016da0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>:
  static constexpr T lowest() {
 8016da0:	b480      	push	{r7}
 8016da2:	af00      	add	r7, sp, #0
    return 0;
 8016da4:	2300      	movs	r3, #0
  }
 8016da6:	4618      	mov	r0, r3
 8016da8:	46bd      	mov	sp, r7
 8016daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dae:	4770      	bx	lr

08016db0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b082      	sub	sp, #8
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8016dba:	f7ff fff1 	bl	8016da0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>
 8016dbe:	4603      	mov	r3, r0
 8016dc0:	ee07 3a90 	vmov	s15, r3
 8016dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016dc8:	ed97 7a01 	vldr	s14, [r7, #4]
 8016dcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dd4:	db0f      	blt.n	8016df6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8016dd6:	f7fd fef8 	bl	8014bca <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016dda:	4603      	mov	r3, r0
 8016ddc:	ee07 3a90 	vmov	s15, r3
 8016de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8016de4:	ed97 7a01 	vldr	s14, [r7, #4]
 8016de8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016df0:	d801      	bhi.n	8016df6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8016df2:	2301      	movs	r3, #1
 8016df4:	e000      	b.n	8016df8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8016df6:	2300      	movs	r3, #0
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	3708      	adds	r7, #8
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bd80      	pop	{r7, pc}

08016e00 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b082      	sub	sp, #8
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8016e0a:	f7ff ffc9 	bl	8016da0 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>
 8016e0e:	4603      	mov	r3, r0
 8016e10:	ee07 3a90 	vmov	s15, r3
 8016e14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016e18:	ed97 6b00 	vldr	d6, [r7]
 8016e1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e24:	db0f      	blt.n	8016e46 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8016e26:	f7fd fed0 	bl	8014bca <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	ee07 3a90 	vmov	s15, r3
 8016e30:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8016e34:	ed97 6b00 	vldr	d6, [r7]
 8016e38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e40:	d801      	bhi.n	8016e46 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8016e42:	2301      	movs	r3, #1
 8016e44:	e000      	b.n	8016e48 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8016e46:	2300      	movs	r3, #0
}
 8016e48:	4618      	mov	r0, r3
 8016e4a:	3708      	adds	r7, #8
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}

08016e50 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8016e50:	b480      	push	{r7}
 8016e52:	b083      	sub	sp, #12
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	370c      	adds	r7, #12
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e64:	4770      	bx	lr

08016e66 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8016e66:	b480      	push	{r7}
 8016e68:	b083      	sub	sp, #12
 8016e6a:	af00      	add	r7, sp, #0
 8016e6c:	6078      	str	r0, [r7, #4]
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	4618      	mov	r0, r3
 8016e72:	370c      	adds	r7, #12
 8016e74:	46bd      	mov	sp, r7
 8016e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7a:	4770      	bx	lr

08016e7c <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b082      	sub	sp, #8
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	6078      	str	r0, [r7, #4]
 8016e84:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8016e86:	2200      	movs	r2, #0
 8016e88:	6839      	ldr	r1, [r7, #0]
 8016e8a:	6878      	ldr	r0, [r7, #4]
 8016e8c:	f000 fa76 	bl	801737c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8016e90:	4603      	mov	r3, r0
 8016e92:	4618      	mov	r0, r3
 8016e94:	3708      	adds	r7, #8
 8016e96:	46bd      	mov	sp, r7
 8016e98:	bd80      	pop	{r7, pc}

08016e9a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8016e9a:	b580      	push	{r7, lr}
 8016e9c:	b084      	sub	sp, #16
 8016e9e:	af00      	add	r7, sp, #0
 8016ea0:	60f8      	str	r0, [r7, #12]
 8016ea2:	60b9      	str	r1, [r7, #8]
 8016ea4:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8016ea6:	68b8      	ldr	r0, [r7, #8]
 8016ea8:	f000 fa96 	bl	80173d8 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8016eac:	4602      	mov	r2, r0
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	601a      	str	r2, [r3, #0]
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	687a      	ldr	r2, [r7, #4]
 8016eb6:	605a      	str	r2, [r3, #4]
      { }
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	4618      	mov	r0, r3
 8016ebc:	3710      	adds	r7, #16
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	bd80      	pop	{r7, pc}

08016ec2 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8016ec2:	b580      	push	{r7, lr}
 8016ec4:	b084      	sub	sp, #16
 8016ec6:	af00      	add	r7, sp, #0
 8016ec8:	60f8      	str	r0, [r7, #12]
 8016eca:	60b9      	str	r1, [r7, #8]
 8016ecc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8016ece:	687a      	ldr	r2, [r7, #4]
 8016ed0:	68b9      	ldr	r1, [r7, #8]
 8016ed2:	68f8      	ldr	r0, [r7, #12]
 8016ed4:	f000 fa8b 	bl	80173ee <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 8016ed8:	bf00      	nop
 8016eda:	3710      	adds	r7, #16
 8016edc:	46bd      	mov	sp, r7
 8016ede:	bd80      	pop	{r7, pc}

08016ee0 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 8016ee0:	b480      	push	{r7}
 8016ee2:	b083      	sub	sp, #12
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
      return __ptr;
 8016ee8:	687b      	ldr	r3, [r7, #4]
    }
 8016eea:	4618      	mov	r0, r3
 8016eec:	370c      	adds	r7, #12
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef4:	4770      	bx	lr

08016ef6 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 8016ef6:	b580      	push	{r7, lr}
 8016ef8:	b082      	sub	sp, #8
 8016efa:	af00      	add	r7, sp, #0
 8016efc:	6078      	str	r0, [r7, #4]
 8016efe:	7039      	strb	r1, [r7, #0]
 8016f00:	463b      	mov	r3, r7
 8016f02:	4619      	mov	r1, r3
 8016f04:	6878      	ldr	r0, [r7, #4]
 8016f06:	f7f7 fb85 	bl	800e614 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	3708      	adds	r7, #8
 8016f10:	46bd      	mov	sp, r7
 8016f12:	bd80      	pop	{r7, pc}

08016f14 <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 8016f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f18:	b089      	sub	sp, #36	@ 0x24
 8016f1a:	af04      	add	r7, sp, #16
 8016f1c:	60f8      	str	r0, [r7, #12]
 8016f1e:	60b9      	str	r1, [r7, #8]
 8016f20:	607a      	str	r2, [r7, #4]
 8016f22:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 8016f24:	6878      	ldr	r0, [r7, #4]
 8016f26:	f7fe fd8f 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8016f2a:	4606      	mov	r6, r0
 8016f2c:	6838      	ldr	r0, [r7, #0]
 8016f2e:	f7fe fd96 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8016f32:	4680      	mov	r8, r0
 8016f34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016f36:	f7fe fd9d 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8016f3a:	4681      	mov	r9, r0
 8016f3c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016f3e:	f7fe fd99 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8016f42:	4604      	mov	r4, r0
 8016f44:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016f46:	f7fa fa88 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8016f4a:	4605      	mov	r5, r0
 8016f4c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8016f4e:	f7fe fd9c 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8016f52:	4603      	mov	r3, r0
 8016f54:	9302      	str	r3, [sp, #8]
 8016f56:	9501      	str	r5, [sp, #4]
 8016f58:	9400      	str	r4, [sp, #0]
 8016f5a:	464b      	mov	r3, r9
 8016f5c:	4642      	mov	r2, r8
 8016f5e:	4631      	mov	r1, r6
 8016f60:	68b8      	ldr	r0, [r7, #8]
 8016f62:	f000 fa55 	bl	8017410 <_ZSt10_ConstructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEEvPT_DpOT0_>
 8016f66:	bf00      	nop
 8016f68:	3714      	adds	r7, #20
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016f70 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E6_M_ptrEv>:
      _M_ptr() noexcept
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b082      	sub	sp, #8
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8016f78:	6878      	ldr	r0, [r7, #4]
 8016f7a:	f000 fa94 	bl	80174a6 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E7_M_addrEv>
 8016f7e:	4603      	mov	r3, r0
 8016f80:	4618      	mov	r0, r3
 8016f82:	3708      	adds	r7, #8
 8016f84:	46bd      	mov	sp, r7
 8016f86:	bd80      	pop	{r7, pc}

08016f88 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>:
      }

    private:
      // Used by __enable_shared_from_this.
      void
      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b084      	sub	sp, #16
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	60f8      	str	r0, [r7, #12]
 8016f90:	60b9      	str	r1, [r7, #8]
 8016f92:	607a      	str	r2, [r7, #4]
      {
	if (use_count() == 0)
 8016f94:	68f8      	ldr	r0, [r7, #12]
 8016f96:	f000 fa91 	bl	80174bc <_ZNKSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9use_countEv>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	bf0c      	ite	eq
 8016fa0:	2301      	moveq	r3, #1
 8016fa2:	2300      	movne	r3, #0
 8016fa4:	b2db      	uxtb	r3, r3
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d008      	beq.n	8016fbc <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE+0x34>
	  {
	    _M_ptr = __ptr;
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	68ba      	ldr	r2, [r7, #8]
 8016fae:	601a      	str	r2, [r3, #0]
	    _M_refcount = __refcount;
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	3304      	adds	r3, #4
 8016fb4:	6879      	ldr	r1, [r7, #4]
 8016fb6:	4618      	mov	r0, r3
 8016fb8:	f000 fa8e 	bl	80174d8 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE>
	  }
      }
 8016fbc:	bf00      	nop
 8016fbe:	3710      	adds	r7, #16
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	bd80      	pop	{r7, pc}

08016fc4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEEC1Ev>:
      _Tuple_impl()
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b082      	sub	sp, #8
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8016fcc:	6878      	ldr	r0, [r7, #4]
 8016fce:	f000 faa2 	bl	8017516 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EEC1Ev>
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	3708      	adds	r7, #8
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}

08016fdc <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EEC1Ev>:
      constexpr _Head_base()
 8016fdc:	b480      	push	{r7}
 8016fde:	b083      	sub	sp, #12
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	601a      	str	r2, [r3, #0]
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	4618      	mov	r0, r3
 8016fee:	370c      	adds	r7, #12
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff6:	4770      	bx	lr

08016ff8 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8016ff8:	b480      	push	{r7}
 8016ffa:	b083      	sub	sp, #12
 8016ffc:	af00      	add	r7, sp, #0
 8016ffe:	6078      	str	r0, [r7, #4]
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	4618      	mov	r0, r3
 8017004:	370c      	adds	r7, #12
 8017006:	46bd      	mov	sp, r7
 8017008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801700c:	4770      	bx	lr

0801700e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801700e:	b580      	push	{r7, lr}
 8017010:	b082      	sub	sp, #8
 8017012:	af00      	add	r7, sp, #0
 8017014:	6078      	str	r0, [r7, #4]
 8017016:	6878      	ldr	r0, [r7, #4]
 8017018:	f000 fa88 	bl	801752c <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EE7_M_headERS3_>
 801701c:	4603      	mov	r3, r0
 801701e:	4618      	mov	r0, r3
 8017020:	3708      	adds	r7, #8
 8017022:	46bd      	mov	sp, r7
 8017024:	bd80      	pop	{r7, pc}

08017026 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8017026:	b580      	push	{r7, lr}
 8017028:	b082      	sub	sp, #8
 801702a:	af00      	add	r7, sp, #0
 801702c:	6078      	str	r0, [r7, #4]
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	4618      	mov	r0, r3
 8017032:	f000 fa86 	bl	8017542 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERKS2_>
 8017036:	4603      	mov	r3, r0
 8017038:	4618      	mov	r0, r3
 801703a:	3708      	adds	r7, #8
 801703c:	46bd      	mov	sp, r7
 801703e:	bd80      	pop	{r7, pc}

08017040 <_ZN11ArduinoJson8V730HB226detail5isnanIdEEbT_>:
// Some libraries #define isnan() and isinf() so we need to check before
// using this name

#ifndef isnan
template <typename T>
bool isnan(T x) {
 8017040:	b480      	push	{r7}
 8017042:	b083      	sub	sp, #12
 8017044:	af00      	add	r7, sp, #0
 8017046:	ed87 0b00 	vstr	d0, [r7]
  return x != x;
 801704a:	ed97 6b00 	vldr	d6, [r7]
 801704e:	ed97 7b00 	vldr	d7, [r7]
 8017052:	eeb4 6b47 	vcmp.f64	d6, d7
 8017056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801705a:	bf14      	ite	ne
 801705c:	2301      	movne	r3, #1
 801705e:	2300      	moveq	r3, #0
 8017060:	b2db      	uxtb	r3, r3
}
 8017062:	4618      	mov	r0, r3
 8017064:	370c      	adds	r7, #12
 8017066:	46bd      	mov	sp, r7
 8017068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706c:	4770      	bx	lr

0801706e <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_>:
#endif

#ifndef isinf
template <typename T>
bool isinf(T x) {
 801706e:	b480      	push	{r7}
 8017070:	b083      	sub	sp, #12
 8017072:	af00      	add	r7, sp, #0
 8017074:	ed87 0b00 	vstr	d0, [r7]
  return x != 0.0 && x * 2 == x;
 8017078:	ed97 7b00 	vldr	d7, [r7]
 801707c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017084:	d00c      	beq.n	80170a0 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_+0x32>
 8017086:	ed97 7b00 	vldr	d7, [r7]
 801708a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801708e:	ed97 6b00 	vldr	d6, [r7]
 8017092:	eeb4 6b47 	vcmp.f64	d6, d7
 8017096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801709a:	d101      	bne.n	80170a0 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_+0x32>
 801709c:	2301      	movs	r3, #1
 801709e:	e000      	b.n	80170a2 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_+0x34>
 80170a0:	2300      	movs	r3, #0
}
 80170a2:	4618      	mov	r0, r3
 80170a4:	370c      	adds	r7, #12
 80170a6:	46bd      	mov	sp, r7
 80170a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ac:	4770      	bx	lr

080170ae <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIfEEvT_>:
  void writeFloat(T value) {
 80170ae:	b580      	push	{r7, lr}
 80170b0:	b082      	sub	sp, #8
 80170b2:	af00      	add	r7, sp, #0
 80170b4:	6078      	str	r0, [r7, #4]
 80170b6:	ed87 0a00 	vstr	s0, [r7]
    writeFloat(JsonFloat(value), sizeof(T) >= 8 ? 9 : 6);
 80170ba:	edd7 7a00 	vldr	s15, [r7]
 80170be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80170c2:	2106      	movs	r1, #6
 80170c4:	eeb0 0b47 	vmov.f64	d0, d7
 80170c8:	6878      	ldr	r0, [r7, #4]
 80170ca:	f000 fa45 	bl	8017558 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>
  }
 80170ce:	bf00      	nop
 80170d0:	3708      	adds	r7, #8
 80170d2:	46bd      	mov	sp, r7
 80170d4:	bd80      	pop	{r7, pc}

080170d6 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>:
  void writeFloat(T value) {
 80170d6:	b580      	push	{r7, lr}
 80170d8:	b084      	sub	sp, #16
 80170da:	af00      	add	r7, sp, #0
 80170dc:	60f8      	str	r0, [r7, #12]
 80170de:	ed87 0b00 	vstr	d0, [r7]
    writeFloat(JsonFloat(value), sizeof(T) >= 8 ? 9 : 6);
 80170e2:	2109      	movs	r1, #9
 80170e4:	ed97 0b00 	vldr	d0, [r7]
 80170e8:	68f8      	ldr	r0, [r7, #12]
 80170ea:	f000 fa35 	bl	8017558 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>
  }
 80170ee:	bf00      	nop
 80170f0:	3710      	adds	r7, #16
 80170f2:	46bd      	mov	sp, r7
 80170f4:	bd80      	pop	{r7, pc}

080170f6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>:
  void write(char c) {
 80170f6:	b580      	push	{r7, lr}
 80170f8:	b082      	sub	sp, #8
 80170fa:	af00      	add	r7, sp, #0
 80170fc:	6078      	str	r0, [r7, #4]
 80170fe:	460b      	mov	r3, r1
 8017100:	70fb      	strb	r3, [r7, #3]
    formatter_.writeRaw(c);
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	78fa      	ldrb	r2, [r7, #3]
 8017106:	4611      	mov	r1, r2
 8017108:	4618      	mov	r0, r3
 801710a:	f000 fa83 	bl	8017614 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 801710e:	bf00      	nop
 8017110:	3708      	adds	r7, #8
 8017112:	46bd      	mov	sp, r7
 8017114:	bd80      	pop	{r7, pc}

08017116 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>:
  void writeString(const char* value, size_t n) {
 8017116:	b580      	push	{r7, lr}
 8017118:	b084      	sub	sp, #16
 801711a:	af00      	add	r7, sp, #0
 801711c:	60f8      	str	r0, [r7, #12]
 801711e:	60b9      	str	r1, [r7, #8]
 8017120:	607a      	str	r2, [r7, #4]
    writeRaw('\"');
 8017122:	2122      	movs	r1, #34	@ 0x22
 8017124:	68f8      	ldr	r0, [r7, #12]
 8017126:	f000 fa75 	bl	8017614 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
    while (n--)
 801712a:	e007      	b.n	801713c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x26>
      writeChar(*value++);
 801712c:	68bb      	ldr	r3, [r7, #8]
 801712e:	1c5a      	adds	r2, r3, #1
 8017130:	60ba      	str	r2, [r7, #8]
 8017132:	781b      	ldrb	r3, [r3, #0]
 8017134:	4619      	mov	r1, r3
 8017136:	68f8      	ldr	r0, [r7, #12]
 8017138:	f000 fa7c 	bl	8017634 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>
    while (n--)
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	1e5a      	subs	r2, r3, #1
 8017140:	607a      	str	r2, [r7, #4]
 8017142:	2b00      	cmp	r3, #0
 8017144:	bf14      	ite	ne
 8017146:	2301      	movne	r3, #1
 8017148:	2300      	moveq	r3, #0
 801714a:	b2db      	uxtb	r3, r3
 801714c:	2b00      	cmp	r3, #0
 801714e:	d1ed      	bne.n	801712c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x16>
    writeRaw('\"');
 8017150:	2122      	movs	r1, #34	@ 0x22
 8017152:	68f8      	ldr	r0, [r7, #12]
 8017154:	f000 fa5e 	bl	8017614 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8017158:	bf00      	nop
 801715a:	3710      	adds	r7, #16
 801715c:	46bd      	mov	sp, r7
 801715e:	bd80      	pop	{r7, pc}

08017160 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>:

  void writeRaw(const char* s, size_t n) {
 8017160:	b580      	push	{r7, lr}
 8017162:	b084      	sub	sp, #16
 8017164:	af00      	add	r7, sp, #0
 8017166:	60f8      	str	r0, [r7, #12]
 8017168:	60b9      	str	r1, [r7, #8]
 801716a:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(s), n);
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	687a      	ldr	r2, [r7, #4]
 8017170:	68b9      	ldr	r1, [r7, #8]
 8017172:	4618      	mov	r0, r3
 8017174:	f000 f878 	bl	8017268 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8017178:	bf00      	nop
 801717a:	3710      	adds	r7, #16
 801717c:	46bd      	mov	sp, r7
 801717e:	bd80      	pop	{r7, pc}

08017180 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_signed<T>::value> writeInteger(T value) {
 8017180:	b5b0      	push	{r4, r5, r7, lr}
 8017182:	b086      	sub	sp, #24
 8017184:	af00      	add	r7, sp, #0
 8017186:	60f8      	str	r0, [r7, #12]
 8017188:	e9c7 2300 	strd	r2, r3, [r7]
    if (value < 0) {
 801718c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017190:	2b00      	cmp	r3, #0
 8017192:	da0c      	bge.n	80171ae <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x2e>
      writeRaw('-');
 8017194:	212d      	movs	r1, #45	@ 0x2d
 8017196:	68f8      	ldr	r0, [r7, #12]
 8017198:	f000 fa3c 	bl	8017614 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 801719c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80171a0:	2100      	movs	r1, #0
 80171a2:	4254      	negs	r4, r2
 80171a4:	eb61 0503 	sbc.w	r5, r1, r3
 80171a8:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80171ac:	e003      	b.n	80171b6 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x36>
      unsigned_value = unsigned_type(value);
 80171ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80171b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    writeInteger(unsigned_value);
 80171b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80171ba:	68f8      	ldr	r0, [r7, #12]
 80171bc:	f000 f804 	bl	80171c8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 80171c0:	bf00      	nop
 80171c2:	3718      	adds	r7, #24
 80171c4:	46bd      	mov	sp, r7
 80171c6:	bdb0      	pop	{r4, r5, r7, pc}

080171c8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b08c      	sub	sp, #48	@ 0x30
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	60f8      	str	r0, [r7, #12]
 80171d0:	e9c7 2300 	strd	r2, r3, [r7]
    char* end = buffer + sizeof(buffer);
 80171d4:	f107 0310 	add.w	r3, r7, #16
 80171d8:	3316      	adds	r3, #22
 80171da:	62bb      	str	r3, [r7, #40]	@ 0x28
    char* begin = end;
 80171dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80171de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      *--begin = char(value % 10 + '0');
 80171e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80171e4:	f04f 020a 	mov.w	r2, #10
 80171e8:	f04f 0300 	mov.w	r3, #0
 80171ec:	f7e9 fbaa 	bl	8000944 <__aeabi_uldivmod>
 80171f0:	b2d3      	uxtb	r3, r2
 80171f2:	3330      	adds	r3, #48	@ 0x30
 80171f4:	b2da      	uxtb	r2, r3
 80171f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171f8:	3b01      	subs	r3, #1
 80171fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80171fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171fe:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8017200:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017204:	f04f 020a 	mov.w	r2, #10
 8017208:	f04f 0300 	mov.w	r3, #0
 801720c:	f7e9 fb9a 	bl	8000944 <__aeabi_uldivmod>
 8017210:	4602      	mov	r2, r0
 8017212:	460b      	mov	r3, r1
 8017214:	e9c7 2300 	strd	r2, r3, [r7]
    } while (value);
 8017218:	e9d7 2300 	ldrd	r2, r3, [r7]
 801721c:	4313      	orrs	r3, r2
 801721e:	d1df      	bne.n	80171e0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 8017220:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017224:	68f8      	ldr	r0, [r7, #12]
 8017226:	f000 fa31 	bl	801768c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 801722a:	bf00      	nop
 801722c:	3730      	adds	r7, #48	@ 0x30
 801722e:	46bd      	mov	sp, r7
 8017230:	bd80      	pop	{r7, pc}
	...

08017234 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>:
  void writeBoolean(bool value) {
 8017234:	b580      	push	{r7, lr}
 8017236:	b082      	sub	sp, #8
 8017238:	af00      	add	r7, sp, #0
 801723a:	6078      	str	r0, [r7, #4]
 801723c:	460b      	mov	r3, r1
 801723e:	70fb      	strb	r3, [r7, #3]
    if (value)
 8017240:	78fb      	ldrb	r3, [r7, #3]
 8017242:	2b00      	cmp	r3, #0
 8017244:	d004      	beq.n	8017250 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x1c>
      writeRaw("true");
 8017246:	4906      	ldr	r1, [pc, #24]	@ (8017260 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x2c>)
 8017248:	6878      	ldr	r0, [r7, #4]
 801724a:	f7ff fca2 	bl	8016b92 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 801724e:	e003      	b.n	8017258 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x24>
      writeRaw("false");
 8017250:	4904      	ldr	r1, [pc, #16]	@ (8017264 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x30>)
 8017252:	6878      	ldr	r0, [r7, #4]
 8017254:	f7ff fc9d 	bl	8016b92 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 8017258:	bf00      	nop
 801725a:	3708      	adds	r7, #8
 801725c:	46bd      	mov	sp, r7
 801725e:	bd80      	pop	{r7, pc}
 8017260:	0802acac 	.word	0x0802acac
 8017264:	0802acb4 	.word	0x0802acb4

08017268 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>:

  void write(uint8_t c) {
    count_ += writer_.write(c);
  }

  void write(const uint8_t* s, size_t n) {
 8017268:	b580      	push	{r7, lr}
 801726a:	b084      	sub	sp, #16
 801726c:	af00      	add	r7, sp, #0
 801726e:	60f8      	str	r0, [r7, #12]
 8017270:	60b9      	str	r1, [r7, #8]
 8017272:	607a      	str	r2, [r7, #4]
    count_ += writer_.write(s, n);
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	687a      	ldr	r2, [r7, #4]
 8017278:	68b9      	ldr	r1, [r7, #8]
 801727a:	4618      	mov	r0, r3
 801727c:	f000 fa18 	bl	80176b0 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>
 8017280:	4602      	mov	r2, r0
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	685b      	ldr	r3, [r3, #4]
 8017286:	441a      	add	r2, r3
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	605a      	str	r2, [r3, #4]
  }
 801728c:	bf00      	nop
 801728e:	3710      	adds	r7, #16
 8017290:	46bd      	mov	sp, r7
 8017292:	bd80      	pop	{r7, pc}

08017294 <_ZNK11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 8017294:	b580      	push	{r7, lr}
 8017296:	b082      	sub	sp, #8
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
    return writer_.count();
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	4618      	mov	r0, r3
 80172a0:	f000 fa18 	bl	80176d4 <_ZNK11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>
 80172a4:	4603      	mov	r3, r0
  }
 80172a6:	4618      	mov	r0, r3
 80172a8:	3708      	adds	r7, #8
 80172aa:	46bd      	mov	sp, r7
 80172ac:	bd80      	pop	{r7, pc}

080172ae <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_>:
TOut convertNumber(TIn value) {
 80172ae:	b580      	push	{r7, lr}
 80172b0:	b082      	sub	sp, #8
 80172b2:	af00      	add	r7, sp, #0
 80172b4:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80172b8:	ed97 0a01 	vldr	s0, [r7, #4]
 80172bc:	f000 fa16 	bl	80176ec <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIffEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>
 80172c0:	4603      	mov	r3, r0
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d001      	beq.n	80172ca <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_+0x1c>
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	e001      	b.n	80172ce <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_+0x20>
 80172ca:	f04f 0300 	mov.w	r3, #0
 80172ce:	ee07 3a90 	vmov	s15, r3
}
 80172d2:	eeb0 0a67 	vmov.f32	s0, s15
 80172d6:	3708      	adds	r7, #8
 80172d8:	46bd      	mov	sp, r7
 80172da:	bd80      	pop	{r7, pc}

080172dc <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_>:
TOut convertNumber(TIn value) {
 80172dc:	b580      	push	{r7, lr}
 80172de:	b082      	sub	sp, #8
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80172e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80172ea:	f000 fa0b 	bl	8017704 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfxEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>
 80172ee:	4603      	mov	r3, r0
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d005      	beq.n	8017300 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_+0x24>
 80172f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80172f8:	f7e9 fae6 	bl	80008c8 <__aeabi_l2f>
 80172fc:	4603      	mov	r3, r0
 80172fe:	e001      	b.n	8017304 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_+0x28>
 8017300:	f04f 0300 	mov.w	r3, #0
 8017304:	ee07 3a90 	vmov	s15, r3
}
 8017308:	eeb0 0a67 	vmov.f32	s0, s15
 801730c:	3708      	adds	r7, #8
 801730e:	46bd      	mov	sp, r7
 8017310:	bd80      	pop	{r7, pc}

08017312 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_>:
TOut convertNumber(TIn value) {
 8017312:	b580      	push	{r7, lr}
 8017314:	b082      	sub	sp, #8
 8017316:	af00      	add	r7, sp, #0
 8017318:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 801731c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017320:	f000 f9fc 	bl	801771c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfyEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>
 8017324:	4603      	mov	r3, r0
 8017326:	2b00      	cmp	r3, #0
 8017328:	d005      	beq.n	8017336 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_+0x24>
 801732a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801732e:	f7e9 fac3 	bl	80008b8 <__aeabi_ul2f>
 8017332:	4603      	mov	r3, r0
 8017334:	e001      	b.n	801733a <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_+0x28>
 8017336:	f04f 0300 	mov.w	r3, #0
 801733a:	ee07 3a90 	vmov	s15, r3
}
 801733e:	eeb0 0a67 	vmov.f32	s0, s15
 8017342:	3708      	adds	r7, #8
 8017344:	46bd      	mov	sp, r7
 8017346:	bd80      	pop	{r7, pc}

08017348 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_>:
TOut convertNumber(TIn value) {
 8017348:	b580      	push	{r7, lr}
 801734a:	b082      	sub	sp, #8
 801734c:	af00      	add	r7, sp, #0
 801734e:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8017352:	ed97 0b00 	vldr	d0, [r7]
 8017356:	f000 f9ed 	bl	8017734 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfdEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>
 801735a:	4603      	mov	r3, r0
 801735c:	2b00      	cmp	r3, #0
 801735e:	d004      	beq.n	801736a <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x22>
 8017360:	ed97 7b00 	vldr	d7, [r7]
 8017364:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017368:	e001      	b.n	801736e <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x26>
 801736a:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8017378 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x30>
}
 801736e:	eeb0 0a67 	vmov.f32	s0, s15
 8017372:	3708      	adds	r7, #8
 8017374:	46bd      	mov	sp, r7
 8017376:	bd80      	pop	{r7, pc}
 8017378:	00000000 	.word	0x00000000

0801737c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801737c:	b580      	push	{r7, lr}
 801737e:	b084      	sub	sp, #16
 8017380:	af00      	add	r7, sp, #0
 8017382:	60f8      	str	r0, [r7, #12]
 8017384:	60b9      	str	r1, [r7, #8]
 8017386:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8017388:	68f8      	ldr	r0, [r7, #12]
 801738a:	f000 f9df 	bl	801774c <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 801738e:	4602      	mov	r2, r0
 8017390:	68bb      	ldr	r3, [r7, #8]
 8017392:	4293      	cmp	r3, r2
 8017394:	bf8c      	ite	hi
 8017396:	2301      	movhi	r3, #1
 8017398:	2300      	movls	r3, #0
 801739a:	b2db      	uxtb	r3, r3
 801739c:	2b00      	cmp	r3, #0
 801739e:	bf14      	ite	ne
 80173a0:	2301      	movne	r3, #1
 80173a2:	2300      	moveq	r3, #0
 80173a4:	b2db      	uxtb	r3, r3
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d007      	beq.n	80173ba <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80173aa:	68bb      	ldr	r3, [r7, #8]
 80173ac:	4a09      	ldr	r2, [pc, #36]	@ (80173d4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 80173ae:	4293      	cmp	r3, r2
 80173b0:	d901      	bls.n	80173b6 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80173b2:	f011 f913 	bl	80285dc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80173b6:	f011 f90e 	bl	80285d6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80173ba:	68bb      	ldr	r3, [r7, #8]
 80173bc:	2258      	movs	r2, #88	@ 0x58
 80173be:	fb02 f303 	mul.w	r3, r2, r3
 80173c2:	4618      	mov	r0, r3
 80173c4:	f011 f8f4 	bl	80285b0 <_Znwj>
 80173c8:	4603      	mov	r3, r0
 80173ca:	bf00      	nop
      }
 80173cc:	4618      	mov	r0, r3
 80173ce:	3710      	adds	r7, #16
 80173d0:	46bd      	mov	sp, r7
 80173d2:	bd80      	pop	{r7, pc}
 80173d4:	02e8ba2e 	.word	0x02e8ba2e

080173d8 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80173d8:	b480      	push	{r7}
 80173da:	b083      	sub	sp, #12
 80173dc:	af00      	add	r7, sp, #0
 80173de:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	4618      	mov	r0, r3
 80173e4:	370c      	adds	r7, #12
 80173e6:	46bd      	mov	sp, r7
 80173e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ec:	4770      	bx	lr

080173ee <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80173ee:	b580      	push	{r7, lr}
 80173f0:	b084      	sub	sp, #16
 80173f2:	af00      	add	r7, sp, #0
 80173f4:	60f8      	str	r0, [r7, #12]
 80173f6:	60b9      	str	r1, [r7, #8]
 80173f8:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	2258      	movs	r2, #88	@ 0x58
 80173fe:	fb02 f303 	mul.w	r3, r2, r3
 8017402:	4619      	mov	r1, r3
 8017404:	68b8      	ldr	r0, [r7, #8]
 8017406:	f011 f8c2 	bl	802858e <_ZdlPvj>
      }
 801740a:	3710      	adds	r7, #16
 801740c:	46bd      	mov	sp, r7
 801740e:	bd80      	pop	{r7, pc}

08017410 <_ZSt10_ConstructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8017410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017414:	ed2d 8b02 	vpush	{d8}
 8017418:	b08c      	sub	sp, #48	@ 0x30
 801741a:	af02      	add	r7, sp, #8
 801741c:	60f8      	str	r0, [r7, #12]
 801741e:	60b9      	str	r1, [r7, #8]
 8017420:	607a      	str	r2, [r7, #4]
 8017422:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	4619      	mov	r1, r3
 8017428:	204c      	movs	r0, #76	@ 0x4c
 801742a:	f7f3 fa31 	bl	800a890 <_ZnwjPv>
 801742e:	4680      	mov	r8, r0
 8017430:	68b8      	ldr	r0, [r7, #8]
 8017432:	f7fe fb09 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8017436:	4602      	mov	r2, r0
 8017438:	f107 0310 	add.w	r3, r7, #16
 801743c:	4611      	mov	r1, r2
 801743e:	4618      	mov	r0, r3
 8017440:	f011 f992 	bl	8028768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8017444:	6878      	ldr	r0, [r7, #4]
 8017446:	f7fe fb0a 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801744a:	4603      	mov	r3, r0
 801744c:	ed93 8a00 	vldr	s16, [r3]
 8017450:	6838      	ldr	r0, [r7, #0]
 8017452:	f7fe fb0f 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8017456:	4603      	mov	r3, r0
 8017458:	881d      	ldrh	r5, [r3, #0]
 801745a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801745c:	f7fe fb0a 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8017460:	4603      	mov	r3, r0
 8017462:	881e      	ldrh	r6, [r3, #0]
 8017464:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017466:	f7f9 fff8 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801746a:	4603      	mov	r3, r0
 801746c:	781c      	ldrb	r4, [r3, #0]
 801746e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8017470:	f7fe fb0b 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8017474:	4603      	mov	r3, r0
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	f107 0110 	add.w	r1, r7, #16
 801747c:	9301      	str	r3, [sp, #4]
 801747e:	9400      	str	r4, [sp, #0]
 8017480:	4633      	mov	r3, r6
 8017482:	462a      	mov	r2, r5
 8017484:	eeb0 0a48 	vmov.f32	s0, s16
 8017488:	4640      	mov	r0, r8
 801748a:	f7fd fe83 	bl	8015194 <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttbP6Remora>
 801748e:	f107 0310 	add.w	r3, r7, #16
 8017492:	4618      	mov	r0, r3
 8017494:	f011 f987 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 8017498:	bf00      	nop
 801749a:	3728      	adds	r7, #40	@ 0x28
 801749c:	46bd      	mov	sp, r7
 801749e:	ecbd 8b02 	vpop	{d8}
 80174a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080174a6 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E7_M_addrEv>:
      _M_addr() noexcept
 80174a6:	b480      	push	{r7}
 80174a8:	b083      	sub	sp, #12
 80174aa:	af00      	add	r7, sp, #0
 80174ac:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 80174ae:	687b      	ldr	r3, [r7, #4]
      }
 80174b0:	4618      	mov	r0, r3
 80174b2:	370c      	adds	r7, #12
 80174b4:	46bd      	mov	sp, r7
 80174b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ba:	4770      	bx	lr

080174bc <_ZNKSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9use_countEv>:
      use_count() const noexcept
 80174bc:	b580      	push	{r7, lr}
 80174be:	b082      	sub	sp, #8
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
      { return _M_refcount._M_get_use_count(); }
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	3304      	adds	r3, #4
 80174c8:	4618      	mov	r0, r3
 80174ca:	f000 f94d 	bl	8017768 <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>
 80174ce:	4603      	mov	r3, r0
 80174d0:	4618      	mov	r0, r3
 80174d2:	3708      	adds	r7, #8
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bd80      	pop	{r7, pc}

080174d8 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE>:
      operator=(const __shared_count<_Lp>& __r) noexcept
 80174d8:	b580      	push	{r7, lr}
 80174da:	b084      	sub	sp, #16
 80174dc:	af00      	add	r7, sp, #0
 80174de:	6078      	str	r0, [r7, #4]
 80174e0:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80174e2:	683b      	ldr	r3, [r7, #0]
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	60fb      	str	r3, [r7, #12]
	if (__tmp != nullptr)
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d002      	beq.n	80174f4 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE+0x1c>
	  __tmp->_M_weak_add_ref();
 80174ee:	68f8      	ldr	r0, [r7, #12]
 80174f0:	f7fd fb34 	bl	8014b5c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_add_refEv>
	if (_M_pi != nullptr)
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d004      	beq.n	8017506 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE+0x2e>
	  _M_pi->_M_weak_release();
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	4618      	mov	r0, r3
 8017502:	f7fd fb3a 	bl	8014b7a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv>
	_M_pi = __tmp;
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	68fa      	ldr	r2, [r7, #12]
 801750a:	601a      	str	r2, [r3, #0]
	return *this;
 801750c:	687b      	ldr	r3, [r7, #4]
      }
 801750e:	4618      	mov	r0, r3
 8017510:	3710      	adds	r7, #16
 8017512:	46bd      	mov	sp, r7
 8017514:	bd80      	pop	{r7, pc}

08017516 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EEC1Ev>:
      constexpr _Head_base()
 8017516:	b480      	push	{r7}
 8017518:	b083      	sub	sp, #12
 801751a:	af00      	add	r7, sp, #0
 801751c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	4618      	mov	r0, r3
 8017522:	370c      	adds	r7, #12
 8017524:	46bd      	mov	sp, r7
 8017526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801752a:	4770      	bx	lr

0801752c <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801752c:	b480      	push	{r7}
 801752e:	b083      	sub	sp, #12
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	4618      	mov	r0, r3
 8017538:	370c      	adds	r7, #12
 801753a:	46bd      	mov	sp, r7
 801753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017540:	4770      	bx	lr

08017542 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8017542:	b480      	push	{r7}
 8017544:	b083      	sub	sp, #12
 8017546:	af00      	add	r7, sp, #0
 8017548:	6078      	str	r0, [r7, #4]
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	4618      	mov	r0, r3
 801754e:	370c      	adds	r7, #12
 8017550:	46bd      	mov	sp, r7
 8017552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017556:	4770      	bx	lr

08017558 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>:
  void writeFloat(JsonFloat value, int8_t decimalPlaces) {
 8017558:	b580      	push	{r7, lr}
 801755a:	b088      	sub	sp, #32
 801755c:	af00      	add	r7, sp, #0
 801755e:	60f8      	str	r0, [r7, #12]
 8017560:	ed87 0b00 	vstr	d0, [r7]
 8017564:	460b      	mov	r3, r1
 8017566:	72fb      	strb	r3, [r7, #11]
    if (isnan(value))
 8017568:	ed97 0b00 	vldr	d0, [r7]
 801756c:	f7ff fd68 	bl	8017040 <_ZN11ArduinoJson8V730HB226detail5isnanIdEEbT_>
 8017570:	4603      	mov	r3, r0
 8017572:	2b00      	cmp	r3, #0
 8017574:	d004      	beq.n	8017580 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x28>
      return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 8017576:	4926      	ldr	r1, [pc, #152]	@ (8017610 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb8>)
 8017578:	68f8      	ldr	r0, [r7, #12]
 801757a:	f7ff fb0a 	bl	8016b92 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 801757e:	e044      	b.n	801760a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb2>
    if (isinf(value))
 8017580:	ed97 0b00 	vldr	d0, [r7]
 8017584:	f7ff fd73 	bl	801706e <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_>
 8017588:	4603      	mov	r3, r0
 801758a:	2b00      	cmp	r3, #0
 801758c:	d004      	beq.n	8017598 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x40>
      return writeRaw("null");
 801758e:	4920      	ldr	r1, [pc, #128]	@ (8017610 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb8>)
 8017590:	68f8      	ldr	r0, [r7, #12]
 8017592:	f7ff fafe 	bl	8016b92 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 8017596:	e038      	b.n	801760a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb2>
    if (value < 0.0) {
 8017598:	ed97 7b00 	vldr	d7, [r7]
 801759c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80175a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175a4:	d509      	bpl.n	80175ba <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x62>
      writeRaw('-');
 80175a6:	212d      	movs	r1, #45	@ 0x2d
 80175a8:	68f8      	ldr	r0, [r7, #12]
 80175aa:	f000 f833 	bl	8017614 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      value = -value;
 80175ae:	ed97 7b00 	vldr	d7, [r7]
 80175b2:	eeb1 7b47 	vneg.f64	d7, d7
 80175b6:	ed87 7b00 	vstr	d7, [r7]
    auto parts = decomposeFloat(value, decimalPlaces);
 80175ba:	f107 0314 	add.w	r3, r7, #20
 80175be:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80175c2:	4611      	mov	r1, r2
 80175c4:	ed97 0b00 	vldr	d0, [r7]
 80175c8:	4618      	mov	r0, r3
 80175ca:	f7fd fb67 	bl	8014c9c <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda>
    writeInteger(parts.integral);
 80175ce:	697b      	ldr	r3, [r7, #20]
 80175d0:	4619      	mov	r1, r3
 80175d2:	68f8      	ldr	r0, [r7, #12]
 80175d4:	f000 f8dc 	bl	8017790 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    if (parts.decimalPlaces)
 80175d8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d006      	beq.n	80175ee <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x96>
      writeDecimals(parts.decimal, parts.decimalPlaces);
 80175e0:	69bb      	ldr	r3, [r7, #24]
 80175e2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80175e6:	4619      	mov	r1, r3
 80175e8:	68f8      	ldr	r0, [r7, #12]
 80175ea:	f000 f903 	bl	80177f4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>
    if (parts.exponent) {
 80175ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d009      	beq.n	801760a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb2>
      writeRaw('e');
 80175f6:	2165      	movs	r1, #101	@ 0x65
 80175f8:	68f8      	ldr	r0, [r7, #12]
 80175fa:	f000 f80b 	bl	8017614 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeInteger(parts.exponent);
 80175fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017602:	4619      	mov	r1, r3
 8017604:	68f8      	ldr	r0, [r7, #12]
 8017606:	f000 f939 	bl	801787c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
  }
 801760a:	3720      	adds	r7, #32
 801760c:	46bd      	mov	sp, r7
 801760e:	bd80      	pop	{r7, pc}
 8017610:	0802aca4 	.word	0x0802aca4

08017614 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    writer_.write(reinterpret_cast<const uint8_t*>(s), N - 1);
  }
  void writeRaw(char c) {
 8017614:	b580      	push	{r7, lr}
 8017616:	b082      	sub	sp, #8
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
 801761c:	460b      	mov	r3, r1
 801761e:	70fb      	strb	r3, [r7, #3]
    writer_.write(static_cast<uint8_t>(c));
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	78fa      	ldrb	r2, [r7, #3]
 8017624:	4611      	mov	r1, r2
 8017626:	4618      	mov	r0, r3
 8017628:	f000 f945 	bl	80178b6 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>
  }
 801762c:	bf00      	nop
 801762e:	3708      	adds	r7, #8
 8017630:	46bd      	mov	sp, r7
 8017632:	bd80      	pop	{r7, pc}

08017634 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>:
  void writeChar(char c) {
 8017634:	b580      	push	{r7, lr}
 8017636:	b084      	sub	sp, #16
 8017638:	af00      	add	r7, sp, #0
 801763a:	6078      	str	r0, [r7, #4]
 801763c:	460b      	mov	r3, r1
 801763e:	70fb      	strb	r3, [r7, #3]
    char specialChar = EscapeSequence::escapeChar(c);
 8017640:	78fb      	ldrb	r3, [r7, #3]
 8017642:	4618      	mov	r0, r3
 8017644:	f7fd faf5 	bl	8014c32 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc>
 8017648:	4603      	mov	r3, r0
 801764a:	73fb      	strb	r3, [r7, #15]
    if (specialChar) {
 801764c:	7bfb      	ldrb	r3, [r7, #15]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d009      	beq.n	8017666 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x32>
      writeRaw('\\');
 8017652:	215c      	movs	r1, #92	@ 0x5c
 8017654:	6878      	ldr	r0, [r7, #4]
 8017656:	f7ff ffdd 	bl	8017614 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeRaw(specialChar);
 801765a:	7bfb      	ldrb	r3, [r7, #15]
 801765c:	4619      	mov	r1, r3
 801765e:	6878      	ldr	r0, [r7, #4]
 8017660:	f7ff ffd8 	bl	8017614 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8017664:	e00c      	b.n	8017680 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
    } else if (c) {
 8017666:	78fb      	ldrb	r3, [r7, #3]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d005      	beq.n	8017678 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x44>
      writeRaw(c);
 801766c:	78fb      	ldrb	r3, [r7, #3]
 801766e:	4619      	mov	r1, r3
 8017670:	6878      	ldr	r0, [r7, #4]
 8017672:	f7ff ffcf 	bl	8017614 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 8017676:	e003      	b.n	8017680 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
      writeRaw("\\u0000");
 8017678:	4903      	ldr	r1, [pc, #12]	@ (8017688 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x54>)
 801767a:	6878      	ldr	r0, [r7, #4]
 801767c:	f7ff fa89 	bl	8016b92 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 8017680:	bf00      	nop
 8017682:	3710      	adds	r7, #16
 8017684:	46bd      	mov	sp, r7
 8017686:	bd80      	pop	{r7, pc}
 8017688:	0802acbc 	.word	0x0802acbc

0801768c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>:
  void writeRaw(const char* begin, const char* end) {
 801768c:	b580      	push	{r7, lr}
 801768e:	b084      	sub	sp, #16
 8017690:	af00      	add	r7, sp, #0
 8017692:	60f8      	str	r0, [r7, #12]
 8017694:	60b9      	str	r1, [r7, #8]
 8017696:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 8017698:	68f8      	ldr	r0, [r7, #12]
                  static_cast<size_t>(end - begin));
 801769a:	687a      	ldr	r2, [r7, #4]
 801769c:	68bb      	ldr	r3, [r7, #8]
 801769e:	1ad3      	subs	r3, r2, r3
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 80176a0:	461a      	mov	r2, r3
 80176a2:	68b9      	ldr	r1, [r7, #8]
 80176a4:	f7ff fde0 	bl	8017268 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 80176a8:	bf00      	nop
 80176aa:	3710      	adds	r7, #16
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}

080176b0 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>:
  size_t write(uint8_t c) {
    str_->push_back(static_cast<char>(c));
    return 1;
  }

  size_t write(const uint8_t* s, size_t n) {
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b084      	sub	sp, #16
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	60f8      	str	r0, [r7, #12]
 80176b8:	60b9      	str	r1, [r7, #8]
 80176ba:	607a      	str	r2, [r7, #4]
    str_->append(reinterpret_cast<const char*>(s), n);
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	687a      	ldr	r2, [r7, #4]
 80176c2:	68b9      	ldr	r1, [r7, #8]
 80176c4:	4618      	mov	r0, r3
 80176c6:	f011 fa41 	bl	8028b4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
    return n;
 80176ca:	687b      	ldr	r3, [r7, #4]
  }
 80176cc:	4618      	mov	r0, r3
 80176ce:	3710      	adds	r7, #16
 80176d0:	46bd      	mov	sp, r7
 80176d2:	bd80      	pop	{r7, pc}

080176d4 <_ZNK11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>:

  size_t count() const {
 80176d4:	b480      	push	{r7}
 80176d6:	b083      	sub	sp, #12
 80176d8:	af00      	add	r7, sp, #0
 80176da:	6078      	str	r0, [r7, #4]
    return count_;
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	685b      	ldr	r3, [r3, #4]
  }
 80176e0:	4618      	mov	r0, r3
 80176e2:	370c      	adds	r7, #12
 80176e4:	46bd      	mov	sp, r7
 80176e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ea:	4770      	bx	lr

080176ec <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIffEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 80176ec:	b480      	push	{r7}
 80176ee:	b083      	sub	sp, #12
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	ed87 0a01 	vstr	s0, [r7, #4]
  return true;
 80176f6:	2301      	movs	r3, #1
}
 80176f8:	4618      	mov	r0, r3
 80176fa:	370c      	adds	r7, #12
 80176fc:	46bd      	mov	sp, r7
 80176fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017702:	4770      	bx	lr

08017704 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfxEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 8017704:	b480      	push	{r7}
 8017706:	b083      	sub	sp, #12
 8017708:	af00      	add	r7, sp, #0
 801770a:	e9c7 0100 	strd	r0, r1, [r7]
  return true;
 801770e:	2301      	movs	r3, #1
}
 8017710:	4618      	mov	r0, r3
 8017712:	370c      	adds	r7, #12
 8017714:	46bd      	mov	sp, r7
 8017716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801771a:	4770      	bx	lr

0801771c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfyEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 801771c:	b480      	push	{r7}
 801771e:	b083      	sub	sp, #12
 8017720:	af00      	add	r7, sp, #0
 8017722:	e9c7 0100 	strd	r0, r1, [r7]
  return true;
 8017726:	2301      	movs	r3, #1
}
 8017728:	4618      	mov	r0, r3
 801772a:	370c      	adds	r7, #12
 801772c:	46bd      	mov	sp, r7
 801772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017732:	4770      	bx	lr

08017734 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfdEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 8017734:	b480      	push	{r7}
 8017736:	b083      	sub	sp, #12
 8017738:	af00      	add	r7, sp, #0
 801773a:	ed87 0b00 	vstr	d0, [r7]
  return true;
 801773e:	2301      	movs	r3, #1
}
 8017740:	4618      	mov	r0, r3
 8017742:	370c      	adds	r7, #12
 8017744:	46bd      	mov	sp, r7
 8017746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801774a:	4770      	bx	lr

0801774c <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801774c:	b480      	push	{r7}
 801774e:	b083      	sub	sp, #12
 8017750:	af00      	add	r7, sp, #0
 8017752:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8017754:	4b03      	ldr	r3, [pc, #12]	@ (8017764 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 8017756:	4618      	mov	r0, r3
 8017758:	370c      	adds	r7, #12
 801775a:	46bd      	mov	sp, r7
 801775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017760:	4770      	bx	lr
 8017762:	bf00      	nop
 8017764:	01745d17 	.word	0x01745d17

08017768 <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>:
      _M_get_use_count() const noexcept
 8017768:	b580      	push	{r7, lr}
 801776a:	b082      	sub	sp, #8
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
      { return _M_pi != nullptr ? _M_pi->_M_get_use_count() : 0; }
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d006      	beq.n	8017786 <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv+0x1e>
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	4618      	mov	r0, r3
 801777e:	f7fd fa18 	bl	8014bb2 <_ZNKSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>
 8017782:	4603      	mov	r3, r0
 8017784:	e000      	b.n	8017788 <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv+0x20>
 8017786:	2300      	movs	r3, #0
 8017788:	4618      	mov	r0, r3
 801778a:	3708      	adds	r7, #8
 801778c:	46bd      	mov	sp, r7
 801778e:	bd80      	pop	{r7, pc}

08017790 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 8017790:	b580      	push	{r7, lr}
 8017792:	b08a      	sub	sp, #40	@ 0x28
 8017794:	af00      	add	r7, sp, #0
 8017796:	6078      	str	r0, [r7, #4]
 8017798:	6039      	str	r1, [r7, #0]
    char* end = buffer + sizeof(buffer);
 801779a:	f107 0308 	add.w	r3, r7, #8
 801779e:	3316      	adds	r3, #22
 80177a0:	623b      	str	r3, [r7, #32]
    char* begin = end;
 80177a2:	6a3b      	ldr	r3, [r7, #32]
 80177a4:	627b      	str	r3, [r7, #36]	@ 0x24
      *--begin = char(value % 10 + '0');
 80177a6:	6839      	ldr	r1, [r7, #0]
 80177a8:	4b11      	ldr	r3, [pc, #68]	@ (80177f0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 80177aa:	fba3 2301 	umull	r2, r3, r3, r1
 80177ae:	08da      	lsrs	r2, r3, #3
 80177b0:	4613      	mov	r3, r2
 80177b2:	009b      	lsls	r3, r3, #2
 80177b4:	4413      	add	r3, r2
 80177b6:	005b      	lsls	r3, r3, #1
 80177b8:	1aca      	subs	r2, r1, r3
 80177ba:	b2d3      	uxtb	r3, r2
 80177bc:	3330      	adds	r3, #48	@ 0x30
 80177be:	b2da      	uxtb	r2, r3
 80177c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177c2:	3b01      	subs	r3, #1
 80177c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80177c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177c8:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	4a08      	ldr	r2, [pc, #32]	@ (80177f0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 80177ce:	fba2 2303 	umull	r2, r3, r2, r3
 80177d2:	08db      	lsrs	r3, r3, #3
 80177d4:	603b      	str	r3, [r7, #0]
    } while (value);
 80177d6:	683b      	ldr	r3, [r7, #0]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d1e4      	bne.n	80177a6 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x16>
    writeRaw(begin, end);
 80177dc:	6a3a      	ldr	r2, [r7, #32]
 80177de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80177e0:	6878      	ldr	r0, [r7, #4]
 80177e2:	f7ff ff53 	bl	801768c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 80177e6:	bf00      	nop
 80177e8:	3728      	adds	r7, #40	@ 0x28
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd80      	pop	{r7, pc}
 80177ee:	bf00      	nop
 80177f0:	cccccccd 	.word	0xcccccccd

080177f4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>:
  void writeDecimals(uint32_t value, int8_t width) {
 80177f4:	b580      	push	{r7, lr}
 80177f6:	b08a      	sub	sp, #40	@ 0x28
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	60f8      	str	r0, [r7, #12]
 80177fc:	60b9      	str	r1, [r7, #8]
 80177fe:	4613      	mov	r3, r2
 8017800:	71fb      	strb	r3, [r7, #7]
    char* end = buffer + sizeof(buffer);
 8017802:	f107 0310 	add.w	r3, r7, #16
 8017806:	3310      	adds	r3, #16
 8017808:	623b      	str	r3, [r7, #32]
    char* begin = end;
 801780a:	6a3b      	ldr	r3, [r7, #32]
 801780c:	627b      	str	r3, [r7, #36]	@ 0x24
    while (width--) {
 801780e:	e017      	b.n	8017840 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x4c>
      *--begin = char(value % 10 + '0');
 8017810:	68b9      	ldr	r1, [r7, #8]
 8017812:	4b19      	ldr	r3, [pc, #100]	@ (8017878 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 8017814:	fba3 2301 	umull	r2, r3, r3, r1
 8017818:	08da      	lsrs	r2, r3, #3
 801781a:	4613      	mov	r3, r2
 801781c:	009b      	lsls	r3, r3, #2
 801781e:	4413      	add	r3, r2
 8017820:	005b      	lsls	r3, r3, #1
 8017822:	1aca      	subs	r2, r1, r3
 8017824:	b2d3      	uxtb	r3, r2
 8017826:	3330      	adds	r3, #48	@ 0x30
 8017828:	b2da      	uxtb	r2, r3
 801782a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801782c:	3b01      	subs	r3, #1
 801782e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017832:	701a      	strb	r2, [r3, #0]
      value /= 10;
 8017834:	68bb      	ldr	r3, [r7, #8]
 8017836:	4a10      	ldr	r2, [pc, #64]	@ (8017878 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 8017838:	fba2 2303 	umull	r2, r3, r2, r3
 801783c:	08db      	lsrs	r3, r3, #3
 801783e:	60bb      	str	r3, [r7, #8]
    while (width--) {
 8017840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017844:	b2da      	uxtb	r2, r3
 8017846:	3a01      	subs	r2, #1
 8017848:	b2d2      	uxtb	r2, r2
 801784a:	71fa      	strb	r2, [r7, #7]
 801784c:	2b00      	cmp	r3, #0
 801784e:	bf14      	ite	ne
 8017850:	2301      	movne	r3, #1
 8017852:	2300      	moveq	r3, #0
 8017854:	b2db      	uxtb	r3, r3
 8017856:	2b00      	cmp	r3, #0
 8017858:	d1da      	bne.n	8017810 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x1c>
    *--begin = '.';
 801785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801785c:	3b01      	subs	r3, #1
 801785e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017862:	222e      	movs	r2, #46	@ 0x2e
 8017864:	701a      	strb	r2, [r3, #0]
    writeRaw(begin, end);
 8017866:	6a3a      	ldr	r2, [r7, #32]
 8017868:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801786a:	68f8      	ldr	r0, [r7, #12]
 801786c:	f7ff ff0e 	bl	801768c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8017870:	bf00      	nop
 8017872:	3728      	adds	r7, #40	@ 0x28
 8017874:	46bd      	mov	sp, r7
 8017876:	bd80      	pop	{r7, pc}
 8017878:	cccccccd 	.word	0xcccccccd

0801787c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_signed<T>::value> writeInteger(T value) {
 801787c:	b580      	push	{r7, lr}
 801787e:	b084      	sub	sp, #16
 8017880:	af00      	add	r7, sp, #0
 8017882:	6078      	str	r0, [r7, #4]
 8017884:	460b      	mov	r3, r1
 8017886:	807b      	strh	r3, [r7, #2]
    if (value < 0) {
 8017888:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801788c:	2b00      	cmp	r3, #0
 801788e:	da07      	bge.n	80178a0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x24>
      writeRaw('-');
 8017890:	212d      	movs	r1, #45	@ 0x2d
 8017892:	6878      	ldr	r0, [r7, #4]
 8017894:	f7ff febe 	bl	8017614 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 8017898:	887b      	ldrh	r3, [r7, #2]
 801789a:	425b      	negs	r3, r3
 801789c:	81fb      	strh	r3, [r7, #14]
 801789e:	e001      	b.n	80178a4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x28>
      unsigned_value = unsigned_type(value);
 80178a0:	887b      	ldrh	r3, [r7, #2]
 80178a2:	81fb      	strh	r3, [r7, #14]
    writeInteger(unsigned_value);
 80178a4:	89fb      	ldrh	r3, [r7, #14]
 80178a6:	4619      	mov	r1, r3
 80178a8:	6878      	ldr	r0, [r7, #4]
 80178aa:	f000 f81b 	bl	80178e4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 80178ae:	bf00      	nop
 80178b0:	3710      	adds	r7, #16
 80178b2:	46bd      	mov	sp, r7
 80178b4:	bd80      	pop	{r7, pc}

080178b6 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>:
  void write(uint8_t c) {
 80178b6:	b580      	push	{r7, lr}
 80178b8:	b082      	sub	sp, #8
 80178ba:	af00      	add	r7, sp, #0
 80178bc:	6078      	str	r0, [r7, #4]
 80178be:	460b      	mov	r3, r1
 80178c0:	70fb      	strb	r3, [r7, #3]
    count_ += writer_.write(c);
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	78fa      	ldrb	r2, [r7, #3]
 80178c6:	4611      	mov	r1, r2
 80178c8:	4618      	mov	r0, r3
 80178ca:	f000 f83f 	bl	801794c <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>
 80178ce:	4602      	mov	r2, r0
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	685b      	ldr	r3, [r3, #4]
 80178d4:	441a      	add	r2, r3
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	605a      	str	r2, [r3, #4]
  }
 80178da:	bf00      	nop
 80178dc:	3708      	adds	r7, #8
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}
	...

080178e4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b08a      	sub	sp, #40	@ 0x28
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	6078      	str	r0, [r7, #4]
 80178ec:	460b      	mov	r3, r1
 80178ee:	807b      	strh	r3, [r7, #2]
    char* end = buffer + sizeof(buffer);
 80178f0:	f107 0308 	add.w	r3, r7, #8
 80178f4:	3316      	adds	r3, #22
 80178f6:	623b      	str	r3, [r7, #32]
    char* begin = end;
 80178f8:	6a3b      	ldr	r3, [r7, #32]
 80178fa:	627b      	str	r3, [r7, #36]	@ 0x24
      *--begin = char(value % 10 + '0');
 80178fc:	887a      	ldrh	r2, [r7, #2]
 80178fe:	4b12      	ldr	r3, [pc, #72]	@ (8017948 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 8017900:	fba3 1302 	umull	r1, r3, r3, r2
 8017904:	08d9      	lsrs	r1, r3, #3
 8017906:	460b      	mov	r3, r1
 8017908:	009b      	lsls	r3, r3, #2
 801790a:	440b      	add	r3, r1
 801790c:	005b      	lsls	r3, r3, #1
 801790e:	1ad3      	subs	r3, r2, r3
 8017910:	b29b      	uxth	r3, r3
 8017912:	b2db      	uxtb	r3, r3
 8017914:	3330      	adds	r3, #48	@ 0x30
 8017916:	b2da      	uxtb	r2, r3
 8017918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801791a:	3b01      	subs	r3, #1
 801791c:	627b      	str	r3, [r7, #36]	@ 0x24
 801791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017920:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8017922:	887b      	ldrh	r3, [r7, #2]
 8017924:	4a08      	ldr	r2, [pc, #32]	@ (8017948 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 8017926:	fba2 2303 	umull	r2, r3, r2, r3
 801792a:	08db      	lsrs	r3, r3, #3
 801792c:	807b      	strh	r3, [r7, #2]
    } while (value);
 801792e:	887b      	ldrh	r3, [r7, #2]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d1e3      	bne.n	80178fc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 8017934:	6a3a      	ldr	r2, [r7, #32]
 8017936:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017938:	6878      	ldr	r0, [r7, #4]
 801793a:	f7ff fea7 	bl	801768c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 801793e:	bf00      	nop
 8017940:	3728      	adds	r7, #40	@ 0x28
 8017942:	46bd      	mov	sp, r7
 8017944:	bd80      	pop	{r7, pc}
 8017946:	bf00      	nop
 8017948:	cccccccd 	.word	0xcccccccd

0801794c <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>:
  size_t write(uint8_t c) {
 801794c:	b580      	push	{r7, lr}
 801794e:	b082      	sub	sp, #8
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
 8017954:	460b      	mov	r3, r1
 8017956:	70fb      	strb	r3, [r7, #3]
    str_->push_back(static_cast<char>(c));
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	78fa      	ldrb	r2, [r7, #3]
 801795e:	4611      	mov	r1, r2
 8017960:	4618      	mov	r0, r3
 8017962:	f010 ffe8 	bl	8028936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
    return 1;
 8017966:	2301      	movs	r3, #1
  }
 8017968:	4618      	mov	r0, r3
 801796a:	3708      	adds	r7, #8
 801796c:	46bd      	mov	sp, r7
 801796e:	bd80      	pop	{r7, pc}

08017970 <_ZN7TMC2208D1Ev>:

public:

	TMC2208(std::string, float, uint16_t, uint16_t, bool, Remora*);
	static std::shared_ptr<Module> create(const JsonObject& config, Remora* instance);
	~TMC2208() = default;
 8017970:	b580      	push	{r7, lr}
 8017972:	b082      	sub	sp, #8
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
 8017978:	4a0a      	ldr	r2, [pc, #40]	@ (80179a4 <_ZN7TMC2208D1Ev+0x34>)
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	601a      	str	r2, [r3, #0]
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	3348      	adds	r3, #72	@ 0x48
 8017982:	4618      	mov	r0, r3
 8017984:	f7fd ff6c 	bl	8015860 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EED1Ev>
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	3328      	adds	r3, #40	@ 0x28
 801798c:	4618      	mov	r0, r3
 801798e:	f010 ff0a 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	4618      	mov	r0, r3
 8017996:	f7fd fbd5 	bl	8015144 <_ZN3TMCD1Ev>
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	4618      	mov	r0, r3
 801799e:	3708      	adds	r7, #8
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}
 80179a4:	0802b560 	.word	0x0802b560

080179a8 <_ZN7TMC2208D0Ev>:
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b082      	sub	sp, #8
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
 80179b0:	6878      	ldr	r0, [r7, #4]
 80179b2:	f7ff ffdd 	bl	8017970 <_ZN7TMC2208D1Ev>
 80179b6:	214c      	movs	r1, #76	@ 0x4c
 80179b8:	6878      	ldr	r0, [r7, #4]
 80179ba:	f010 fde8 	bl	802858e <_ZdlPvj>
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	4618      	mov	r0, r3
 80179c2:	3708      	adds	r7, #8
 80179c4:	46bd      	mov	sp, r7
 80179c6:	bd80      	pop	{r7, pc}

080179c8 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b082      	sub	sp, #8
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	6078      	str	r0, [r7, #4]
 80179d0:	4a05      	ldr	r2, [pc, #20]	@ (80179e8 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	601a      	str	r2, [r3, #0]
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	4618      	mov	r0, r3
 80179da:	f7f4 fdc3 	bl	800c564 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	4618      	mov	r0, r3
 80179e2:	3708      	adds	r7, #8
 80179e4:	46bd      	mov	sp, r7
 80179e6:	bd80      	pop	{r7, pc}
 80179e8:	0802b544 	.word	0x0802b544

080179ec <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b082      	sub	sp, #8
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	6078      	str	r0, [r7, #4]
 80179f4:	6878      	ldr	r0, [r7, #4]
 80179f6:	f7ff ffe7 	bl	80179c8 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80179fa:	2158      	movs	r1, #88	@ 0x58
 80179fc:	6878      	ldr	r0, [r7, #4]
 80179fe:	f010 fdc6 	bl	802858e <_ZdlPvj>
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	4618      	mov	r0, r3
 8017a06:	3708      	adds	r7, #8
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	bd80      	pop	{r7, pc}

08017a0c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8017a0c:	b590      	push	{r4, r7, lr}
 8017a0e:	b083      	sub	sp, #12
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	330c      	adds	r3, #12
 8017a18:	4618      	mov	r0, r3
 8017a1a:	f000 f856 	bl	8017aca <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8017a1e:	4604      	mov	r4, r0
 8017a20:	6878      	ldr	r0, [r7, #4]
 8017a22:	f7fe ff1a 	bl	801685a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8017a26:	4603      	mov	r3, r0
 8017a28:	4619      	mov	r1, r3
 8017a2a:	4620      	mov	r0, r4
 8017a2c:	f000 f859 	bl	8017ae2 <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2208EEvRS0_PT_>
      }
 8017a30:	bf00      	nop
 8017a32:	370c      	adds	r7, #12
 8017a34:	46bd      	mov	sp, r7
 8017a36:	bd90      	pop	{r4, r7, pc}

08017a38 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b086      	sub	sp, #24
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	330c      	adds	r3, #12
 8017a44:	4618      	mov	r0, r3
 8017a46:	f000 f840 	bl	8017aca <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8017a4a:	4602      	mov	r2, r0
 8017a4c:	f107 0314 	add.w	r3, r7, #20
 8017a50:	4611      	mov	r1, r2
 8017a52:	4618      	mov	r0, r3
 8017a54:	f7fe fe5e 	bl	8016714 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8017a58:	f107 0114 	add.w	r1, r7, #20
 8017a5c:	f107 030c 	add.w	r3, r7, #12
 8017a60:	687a      	ldr	r2, [r7, #4]
 8017a62:	4618      	mov	r0, r3
 8017a64:	f7ff fa19 	bl	8016e9a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8017a68:	6878      	ldr	r0, [r7, #4]
 8017a6a:	f7ff ffad 	bl	80179c8 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8017a6e:	f107 030c 	add.w	r3, r7, #12
 8017a72:	4618      	mov	r0, r3
 8017a74:	f7fe fe7a 	bl	801676c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8017a78:	f107 0314 	add.w	r3, r7, #20
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	f7fe fe56 	bl	801672e <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8017a82:	3718      	adds	r7, #24
 8017a84:	46bd      	mov	sp, r7
 8017a86:	bd80      	pop	{r7, pc}

08017a88 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b084      	sub	sp, #16
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	6078      	str	r0, [r7, #4]
 8017a90:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8017a92:	6878      	ldr	r0, [r7, #4]
 8017a94:	f7fe fee1 	bl	801685a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8017a98:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8017a9a:	f7f2 ff45 	bl	800a928 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8017a9e:	4602      	mov	r2, r0
	    ||
 8017aa0:	683b      	ldr	r3, [r7, #0]
 8017aa2:	4293      	cmp	r3, r2
 8017aa4:	d005      	beq.n	8017ab2 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 8017aa6:	6838      	ldr	r0, [r7, #0]
 8017aa8:	f010 fdae 	bl	8028608 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8017aac:	4603      	mov	r3, r0
	    ||
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d001      	beq.n	8017ab6 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 8017ab2:	2301      	movs	r3, #1
 8017ab4:	e000      	b.n	8017ab8 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8017ab6:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d001      	beq.n	8017ac0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	e000      	b.n	8017ac2 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 8017ac0:	2300      	movs	r3, #0
      }
 8017ac2:	4618      	mov	r0, r3
 8017ac4:	3710      	adds	r7, #16
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	bd80      	pop	{r7, pc}

08017aca <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 8017aca:	b580      	push	{r7, lr}
 8017acc:	b082      	sub	sp, #8
 8017ace:	af00      	add	r7, sp, #0
 8017ad0:	6078      	str	r0, [r7, #4]
 8017ad2:	6878      	ldr	r0, [r7, #4]
 8017ad4:	f7f7 f819 	bl	800eb0a <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 8017ad8:	4603      	mov	r3, r0
 8017ada:	4618      	mov	r0, r3
 8017adc:	3708      	adds	r7, #8
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	bd80      	pop	{r7, pc}

08017ae2 <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2208EEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 8017ae2:	b580      	push	{r7, lr}
 8017ae4:	b082      	sub	sp, #8
 8017ae6:	af00      	add	r7, sp, #0
 8017ae8:	6078      	str	r0, [r7, #4]
 8017aea:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 8017aec:	6838      	ldr	r0, [r7, #0]
 8017aee:	f000 f804 	bl	8017afa <_ZSt8_DestroyI7TMC2208EvPT_>
 8017af2:	bf00      	nop
 8017af4:	3708      	adds	r7, #8
 8017af6:	46bd      	mov	sp, r7
 8017af8:	bd80      	pop	{r7, pc}

08017afa <_ZSt8_DestroyI7TMC2208EvPT_>:
    _Destroy(_Tp* __pointer)
 8017afa:	b580      	push	{r7, lr}
 8017afc:	b082      	sub	sp, #8
 8017afe:	af00      	add	r7, sp, #0
 8017b00:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	6878      	ldr	r0, [r7, #4]
 8017b0a:	4798      	blx	r3
    }
 8017b0c:	bf00      	nop
 8017b0e:	3708      	adds	r7, #8
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bd80      	pop	{r7, pc}

08017b14 <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>:
};

class TMC2209Stepper : public TMC2208Stepper {
    public:

        TMC2209Stepper(std::string SWRXpin, std::string SWTXpin, float RS, uint8_t addr) :
 8017b14:	b590      	push	{r4, r7, lr}
 8017b16:	b093      	sub	sp, #76	@ 0x4c
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	6178      	str	r0, [r7, #20]
 8017b1c:	6139      	str	r1, [r7, #16]
 8017b1e:	60fa      	str	r2, [r7, #12]
 8017b20:	ed87 0a02 	vstr	s0, [r7, #8]
 8017b24:	71fb      	strb	r3, [r7, #7]
                TMC2208Stepper(SWRXpin, SWTXpin, RS, addr) {}
 8017b26:	697c      	ldr	r4, [r7, #20]
 8017b28:	f107 0318 	add.w	r3, r7, #24
 8017b2c:	6939      	ldr	r1, [r7, #16]
 8017b2e:	4618      	mov	r0, r3
 8017b30:	f011 f849 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8017b34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017b38:	68f9      	ldr	r1, [r7, #12]
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	f011 f843 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8017b40:	79fb      	ldrb	r3, [r7, #7]
 8017b42:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8017b46:	f107 0118 	add.w	r1, r7, #24
 8017b4a:	ed97 0a02 	vldr	s0, [r7, #8]
 8017b4e:	4620      	mov	r0, r4
 8017b50:	f7ec f8b0 	bl	8003cb4 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 8017b54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017b58:	4618      	mov	r0, r3
 8017b5a:	f010 fe24 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8017b5e:	f107 0318 	add.w	r3, r7, #24
 8017b62:	4618      	mov	r0, r3
 8017b64:	f010 fe1f 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8017b68:	4a0f      	ldr	r2, [pc, #60]	@ (8017ba8 <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x94>)
 8017b6a:	697b      	ldr	r3, [r7, #20]
 8017b6c:	601a      	str	r2, [r3, #0]
 8017b6e:	697b      	ldr	r3, [r7, #20]
 8017b70:	2200      	movs	r2, #0
 8017b72:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8017b76:	2200      	movs	r2, #0
 8017b78:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 8017b7c:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 8017b80:	f022 020f 	bic.w	r2, r2, #15
 8017b84:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
 8017b88:	697b      	ldr	r3, [r7, #20]
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8017b90:	697b      	ldr	r3, [r7, #20]
 8017b92:	2200      	movs	r2, #0
 8017b94:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 8017b98:	2200      	movs	r2, #0
 8017b9a:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
 8017b9e:	697b      	ldr	r3, [r7, #20]
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	374c      	adds	r7, #76	@ 0x4c
 8017ba4:	46bd      	mov	sp, r7
 8017ba6:	bd90      	pop	{r4, r7, pc}
 8017ba8:	0802b5e8 	.word	0x0802b5e8

08017bac <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b082      	sub	sp, #8
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	3304      	adds	r3, #4
 8017bb8:	4618      	mov	r0, r3
 8017bba:	f7f4 f8a0 	bl	800bcfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	3708      	adds	r7, #8
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	bd80      	pop	{r7, pc}

08017bc8 <_ZNSt10shared_ptrI7TMC2209ED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8017bc8:	b580      	push	{r7, lr}
 8017bca:	b082      	sub	sp, #8
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	4618      	mov	r0, r3
 8017bd4:	f7ff ffea 	bl	8017bac <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	4618      	mov	r0, r3
 8017bdc:	3708      	adds	r7, #8
 8017bde:	46bd      	mov	sp, r7
 8017be0:	bd80      	pop	{r7, pc}
	...

08017be4 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "tmc.h"
#include <cstdint>

#define TOFF_VALUE  4 // [1... 15]

std::shared_ptr<Module> TMC2209::create(const JsonObject& config, Remora* instance) {
 8017be4:	b590      	push	{r4, r7, lr}
 8017be6:	b0c9      	sub	sp, #292	@ 0x124
 8017be8:	af06      	add	r7, sp, #24
 8017bea:	60f8      	str	r0, [r7, #12]
 8017bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017bf0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017bf4:	6019      	str	r1, [r3, #0]
 8017bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017bfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8017bfe:	601a      	str	r2, [r3, #0]
    printf("Creating TMC2209 module\n");
 8017c00:	4868      	ldr	r0, [pc, #416]	@ (8017da4 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c0>)
 8017c02:	f011 fbef 	bl	80293e4 <puts>

    const char* comment = config["Comment"];
 8017c06:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8017c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017c0e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017c12:	4a65      	ldr	r2, [pc, #404]	@ (8017da8 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c4>)
 8017c14:	6819      	ldr	r1, [r3, #0]
 8017c16:	f7fa fb12 	bl	801223e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017c1a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8017c1e:	4618      	mov	r0, r3
 8017c20:	f7ef ff23 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8017c24:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    printf("Comment: %s\n", comment);
 8017c28:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8017c2c:	485f      	ldr	r0, [pc, #380]	@ (8017dac <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c8>)
 8017c2e:	f011 fb69 	bl	8029304 <iprintf>

    std::string RxPin = config["RX pin"];
 8017c32:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8017c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017c3a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017c3e:	4a5c      	ldr	r2, [pc, #368]	@ (8017db0 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1cc>)
 8017c40:	6819      	ldr	r1, [r3, #0]
 8017c42:	f7ef feed 	bl	8007a20 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017c4a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8017c4e:	4611      	mov	r1, r2
 8017c50:	4618      	mov	r0, r3
 8017c52:	f7fd fd55 	bl	8015700 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    float RSense = config["RSense"];
 8017c56:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8017c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017c5e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017c62:	4a54      	ldr	r2, [pc, #336]	@ (8017db4 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 8017c64:	6819      	ldr	r1, [r3, #0]
 8017c66:	f7ef fedb 	bl	8007a20 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017c6a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8017c6e:	4618      	mov	r0, r3
 8017c70:	f7fd fd54 	bl	801571c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>
 8017c74:	eef0 7a40 	vmov.f32	s15, s0
 8017c78:	edc7 7a08 	vstr	s15, [r7, #32]
    uint8_t address = config["Address"];
 8017c7c:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8017c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017c84:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017c88:	4a4b      	ldr	r2, [pc, #300]	@ (8017db8 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d4>)
 8017c8a:	6819      	ldr	r1, [r3, #0]
 8017c8c:	f7fa fad7 	bl	801223e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017c90:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8017c94:	4618      	mov	r0, r3
 8017c96:	f000 fa47 	bl	8018128 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>
 8017c9a:	4603      	mov	r3, r0
 8017c9c:	77fb      	strb	r3, [r7, #31]
    uint16_t current = config["Current"];
 8017c9e:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8017ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017ca6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017caa:	4a44      	ldr	r2, [pc, #272]	@ (8017dbc <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d8>)
 8017cac:	6819      	ldr	r1, [r3, #0]
 8017cae:	f7fa fac6 	bl	801223e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017cb2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	f7fd fd3e 	bl	8015738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8017cbc:	4603      	mov	r3, r0
 8017cbe:	83bb      	strh	r3, [r7, #28]
    uint16_t microsteps = config["Microsteps"];
 8017cc0:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8017cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017cc8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8017dc0 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1dc>)
 8017cce:	6819      	ldr	r1, [r3, #0]
 8017cd0:	f7f7 fad3 	bl	800f27a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017cd4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8017cd8:	4618      	mov	r0, r3
 8017cda:	f7fd fd2d 	bl	8015738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8017cde:	4603      	mov	r3, r0
 8017ce0:	837b      	strh	r3, [r7, #26]
    uint16_t stall = config["Stall sensitivity"];
 8017ce2:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8017ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017cea:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017cee:	4a35      	ldr	r2, [pc, #212]	@ (8017dc4 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1e0>)
 8017cf0:	6819      	ldr	r1, [r3, #0]
 8017cf2:	f000 fa25 	bl	8018140 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017cf6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f7fd fd1c 	bl	8015738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8017d00:	4603      	mov	r3, r0
 8017d02:	833b      	strh	r3, [r7, #24]
    bool stealthchop = (strcmp(config["Stealth chop"], "on") == 0);
 8017d04:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8017d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017d0c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017d10:	4a2d      	ldr	r2, [pc, #180]	@ (8017dc8 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1e4>)
 8017d12:	6819      	ldr	r1, [r3, #0]
 8017d14:	f7fc f968 	bl	8013fe8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017d18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f7ef fea4 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8017d22:	4603      	mov	r3, r0
 8017d24:	4929      	ldr	r1, [pc, #164]	@ (8017dcc <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1e8>)
 8017d26:	4618      	mov	r0, r3
 8017d28:	f7e8 fada 	bl	80002e0 <strcmp>
 8017d2c:	4603      	mov	r3, r0
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	bf0c      	ite	eq
 8017d32:	2301      	moveq	r3, #1
 8017d34:	2300      	movne	r3, #0
 8017d36:	b2db      	uxtb	r3, r3
 8017d38:	75fb      	strb	r3, [r7, #23]

    return std::make_shared<TMC2209>(std::move(RxPin), RSense, address, current, microsteps, stealthchop, stall, instance);
 8017d3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017d3e:	4618      	mov	r0, r3
 8017d40:	f7f9 fb3b 	bl	80113ba <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8017d44:	4604      	mov	r4, r0
 8017d46:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8017d4a:	f107 011f 	add.w	r1, r7, #31
 8017d4e:	f107 0220 	add.w	r2, r7, #32
 8017d52:	1d3b      	adds	r3, r7, #4
 8017d54:	9304      	str	r3, [sp, #16]
 8017d56:	f107 0318 	add.w	r3, r7, #24
 8017d5a:	9303      	str	r3, [sp, #12]
 8017d5c:	f107 0317 	add.w	r3, r7, #23
 8017d60:	9302      	str	r3, [sp, #8]
 8017d62:	f107 031a 	add.w	r3, r7, #26
 8017d66:	9301      	str	r3, [sp, #4]
 8017d68:	f107 031c 	add.w	r3, r7, #28
 8017d6c:	9300      	str	r3, [sp, #0]
 8017d6e:	460b      	mov	r3, r1
 8017d70:	4621      	mov	r1, r4
 8017d72:	f000 fa0a 	bl	801818a <_ZSt11make_sharedI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>
 8017d76:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8017d7a:	4619      	mov	r1, r3
 8017d7c:	68f8      	ldr	r0, [r7, #12]
 8017d7e:	f000 fa42 	bl	8018206 <_ZNSt10shared_ptrI6ModuleEC1I7TMC2209vEEOS_IT_E>
 8017d82:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8017d86:	4618      	mov	r0, r3
 8017d88:	f7ff ff1e 	bl	8017bc8 <_ZNSt10shared_ptrI7TMC2209ED1Ev>
}
 8017d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017d90:	4618      	mov	r0, r3
 8017d92:	f010 fd08 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    return std::make_shared<TMC2209>(std::move(RxPin), RSense, address, current, microsteps, stealthchop, stall, instance);
 8017d96:	bf00      	nop
}
 8017d98:	68f8      	ldr	r0, [r7, #12]
 8017d9a:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8017d9e:	46bd      	mov	sp, r7
 8017da0:	bd90      	pop	{r4, r7, pc}
 8017da2:	bf00      	nop
 8017da4:	0802acd8 	.word	0x0802acd8
 8017da8:	0802acf0 	.word	0x0802acf0
 8017dac:	0802acf8 	.word	0x0802acf8
 8017db0:	0802ad08 	.word	0x0802ad08
 8017db4:	0802ad10 	.word	0x0802ad10
 8017db8:	0802ad18 	.word	0x0802ad18
 8017dbc:	0802ad20 	.word	0x0802ad20
 8017dc0:	0802ad28 	.word	0x0802ad28
 8017dc4:	0802ad34 	.word	0x0802ad34
 8017dc8:	0802ad48 	.word	0x0802ad48
 8017dcc:	0802ad58 	.word	0x0802ad58

08017dd0 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbtP6Remora>:

TMC2209::TMC2209(std::string _rxtxPin, float _Rsense, uint8_t _addr, uint16_t _mA, uint16_t _microsteps, bool _stealth, uint16_t _stall, Remora* _instance)
 8017dd0:	b5b0      	push	{r4, r5, r7, lr}
 8017dd2:	b086      	sub	sp, #24
 8017dd4:	af02      	add	r7, sp, #8
 8017dd6:	60f8      	str	r0, [r7, #12]
 8017dd8:	60b9      	str	r1, [r7, #8]
 8017dda:	ed87 0a01 	vstr	s0, [r7, #4]
 8017dde:	4611      	mov	r1, r2
 8017de0:	461a      	mov	r2, r3
 8017de2:	460b      	mov	r3, r1
 8017de4:	70fb      	strb	r3, [r7, #3]
 8017de6:	4613      	mov	r3, r2
 8017de8:	803b      	strh	r3, [r7, #0]
      addr(_addr),
      mA(_mA),
      microsteps(_microsteps),
      stealth(_stealth),
      stall(_stall),
      driver(std::make_unique<TMC2209Stepper>(rxtxPin, rxtxPin, Rsense, addr)) {}
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	ed97 0a01 	vldr	s0, [r7, #4]
 8017df0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017df2:	4618      	mov	r0, r3
 8017df4:	f7fd f8a2 	bl	8014f3c <_ZN3TMCC1EP6Remoraf>
 8017df8:	4a1d      	ldr	r2, [pc, #116]	@ (8017e70 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbtP6Remora+0xa0>)
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	601a      	str	r2, [r3, #0]
      rxtxPin(std::move(_rxtxPin)),
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8017e04:	68b8      	ldr	r0, [r7, #8]
 8017e06:	f7f9 fad8 	bl	80113ba <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	4619      	mov	r1, r3
 8017e0e:	4620      	mov	r0, r4
 8017e10:	f010 fcaa 	bl	8028768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      addr(_addr),
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	78fa      	ldrb	r2, [r7, #3]
 8017e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      mA(_mA),
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	883a      	ldrh	r2, [r7, #0]
 8017e20:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
      microsteps(_microsteps),
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	8c3a      	ldrh	r2, [r7, #32]
 8017e28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      stealth(_stealth),
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8017e32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      stall(_stall),
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8017e3a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      driver(std::make_unique<TMC2209Stepper>(rxtxPin, rxtxPin, Rsense, addr)) {}
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	3340      	adds	r3, #64	@ 0x40
 8017e54:	68fa      	ldr	r2, [r7, #12]
 8017e56:	f102 004c 	add.w	r0, r2, #76	@ 0x4c
 8017e5a:	9300      	str	r3, [sp, #0]
 8017e5c:	462b      	mov	r3, r5
 8017e5e:	4622      	mov	r2, r4
 8017e60:	f000 f9e4 	bl	801822c <_ZSt11make_uniqueI14TMC2209StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfRhEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8017e64:	68fb      	ldr	r3, [r7, #12]
 8017e66:	4618      	mov	r0, r3
 8017e68:	3710      	adds	r7, #16
 8017e6a:	46bd      	mov	sp, r7
 8017e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8017e6e:	bf00      	nop
 8017e70:	0802b5c4 	.word	0x0802b5c4

08017e74 <_ZN7TMC22099configureEv>:


void TMC2209::configure()
{
 8017e74:	b590      	push	{r4, r7, lr}
 8017e76:	b08b      	sub	sp, #44	@ 0x2c
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
    printf("\nStarting the Serial thread\n");
 8017e7c:	4897      	ldr	r0, [pc, #604]	@ (80180dc <_ZN7TMC22099configureEv+0x268>)
 8017e7e:	f011 fab1 	bl	80293e4 <puts>
    instance->getSerialThread()->startThread();
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	6a1b      	ldr	r3, [r3, #32]
 8017e86:	4618      	mov	r0, r3
 8017e88:	f7fd f803 	bl	8014e92 <_ZN6Remora15getSerialThreadEv>
 8017e8c:	4603      	mov	r3, r0
 8017e8e:	4618      	mov	r0, r3
 8017e90:	f002 ff76 	bl	801ad80 <_ZN9pruThread11startThreadEv>

    auto self = shared_from_this();
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	f103 0218 	add.w	r2, r3, #24
 8017e9a:	f107 030c 	add.w	r3, r7, #12
 8017e9e:	4611      	mov	r1, r2
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f7fd fc1f 	bl	80156e4 <_ZNSt23enable_shared_from_thisI3TMCE16shared_from_thisEv>
    instance->getSerialThread()->registerModule(self);
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	6a1b      	ldr	r3, [r3, #32]
 8017eaa:	4618      	mov	r0, r3
 8017eac:	f7fc fff1 	bl	8014e92 <_ZN6Remora15getSerialThreadEv>
 8017eb0:	4604      	mov	r4, r0
 8017eb2:	f107 020c 	add.w	r2, r7, #12
 8017eb6:	f107 0314 	add.w	r3, r7, #20
 8017eba:	4611      	mov	r1, r2
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	f7fd fcf1 	bl	80158a4 <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 8017ec2:	f107 0314 	add.w	r3, r7, #20
 8017ec6:	4619      	mov	r1, r3
 8017ec8:	4620      	mov	r0, r4
 8017eca:	f002 fec5 	bl	801ac58 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 8017ece:	f107 0314 	add.w	r3, r7, #20
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	f7f3 f8e5 	bl	800b0a2 <_ZNSt10shared_ptrI6ModuleED1Ev>

    driver->begin();
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	334c      	adds	r3, #76	@ 0x4c
 8017edc:	4618      	mov	r0, r3
 8017ede:	f000 fa12 	bl	8018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017ee2:	4603      	mov	r3, r0
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f7eb ff97 	bl	8003e18 <_ZN14TMC2208Stepper5beginEv>

    printf("Testing connection to TMC driver... ");
 8017eea:	487d      	ldr	r0, [pc, #500]	@ (80180e0 <_ZN7TMC22099configureEv+0x26c>)
 8017eec:	f011 fa0a 	bl	8029304 <iprintf>
    uint16_t result = driver->test_connection();
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	334c      	adds	r3, #76	@ 0x4c
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	f000 fa06 	bl	8018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017efa:	4603      	mov	r3, r0
 8017efc:	4618      	mov	r0, r3
 8017efe:	f7ec fd23 	bl	8004948 <_ZN10TMCStepper15test_connectionEv>
 8017f02:	4603      	mov	r3, r0
 8017f04:	84fb      	strh	r3, [r7, #38]	@ 0x26
    
    if (result) {
 8017f06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d018      	beq.n	8017f3e <_ZN7TMC22099configureEv+0xca>
        printf("Failed!\nLikely cause: ");
 8017f0c:	4875      	ldr	r0, [pc, #468]	@ (80180e4 <_ZN7TMC22099configureEv+0x270>)
 8017f0e:	f011 f9f9 	bl	8029304 <iprintf>
        switch(result) {
 8017f12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017f14:	2b01      	cmp	r3, #1
 8017f16:	d002      	beq.n	8017f1e <_ZN7TMC22099configureEv+0xaa>
 8017f18:	2b02      	cmp	r3, #2
 8017f1a:	d004      	beq.n	8017f26 <_ZN7TMC22099configureEv+0xb2>
 8017f1c:	e007      	b.n	8017f2e <_ZN7TMC22099configureEv+0xba>
            case 1: printf("Loose connection\n"); break;
 8017f1e:	4872      	ldr	r0, [pc, #456]	@ (80180e8 <_ZN7TMC22099configureEv+0x274>)
 8017f20:	f011 fa60 	bl	80293e4 <puts>
 8017f24:	e007      	b.n	8017f36 <_ZN7TMC22099configureEv+0xc2>
            case 2: printf("No power\n"); break;
 8017f26:	4871      	ldr	r0, [pc, #452]	@ (80180ec <_ZN7TMC22099configureEv+0x278>)
 8017f28:	f011 fa5c 	bl	80293e4 <puts>
 8017f2c:	e003      	b.n	8017f36 <_ZN7TMC22099configureEv+0xc2>
            default: printf("Unknown issue\n"); break;
 8017f2e:	4870      	ldr	r0, [pc, #448]	@ (80180f0 <_ZN7TMC22099configureEv+0x27c>)
 8017f30:	f011 fa58 	bl	80293e4 <puts>
 8017f34:	bf00      	nop
        }
        printf("Fix the problem and reset the board.\n");
 8017f36:	486f      	ldr	r0, [pc, #444]	@ (80180f4 <_ZN7TMC22099configureEv+0x280>)
 8017f38:	f011 fa54 	bl	80293e4 <puts>
 8017f3c:	e002      	b.n	8017f44 <_ZN7TMC22099configureEv+0xd0>
    } else {
        printf("OK\n");
 8017f3e:	486e      	ldr	r0, [pc, #440]	@ (80180f8 <_ZN7TMC22099configureEv+0x284>)
 8017f40:	f011 fa50 	bl	80293e4 <puts>
    }

    // Configure driver settings
    driver->toff(TOFF_VALUE);
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	334c      	adds	r3, #76	@ 0x4c
 8017f48:	4618      	mov	r0, r3
 8017f4a:	f000 f9dc 	bl	8018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017f4e:	4603      	mov	r3, r0
 8017f50:	2104      	movs	r1, #4
 8017f52:	4618      	mov	r0, r3
 8017f54:	f7ea fdee 	bl	8002b34 <_ZN14TMC2208Stepper4toffEh>
    driver->blank_time(24);
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	334c      	adds	r3, #76	@ 0x4c
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	f000 f9d2 	bl	8018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017f62:	4603      	mov	r3, r0
 8017f64:	2118      	movs	r1, #24
 8017f66:	4618      	mov	r0, r3
 8017f68:	f7ec fdba 	bl	8004ae0 <_ZN10TMCStepper10blank_timeEh>
    driver->rms_current(mA);
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	334c      	adds	r3, #76	@ 0x4c
 8017f70:	4618      	mov	r0, r3
 8017f72:	f000 f9c8 	bl	8018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017f76:	4603      	mov	r3, r0
 8017f78:	461a      	mov	r2, r3
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8017f80:	4619      	mov	r1, r3
 8017f82:	4610      	mov	r0, r2
 8017f84:	f7ec fc44 	bl	8004810 <_ZN10TMCStepper11rms_currentEt>
    driver->microsteps(microsteps);
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	334c      	adds	r3, #76	@ 0x4c
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	f000 f9ba 	bl	8018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017f92:	4603      	mov	r3, r0
 8017f94:	461a      	mov	r2, r3
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8017f9c:	4619      	mov	r1, r3
 8017f9e:	4610      	mov	r0, r2
 8017fa0:	f7ec fcee 	bl	8004980 <_ZN10TMCStepper10microstepsEt>
    driver->TCOOLTHRS(0xFFFFF);  // 20-bit max threshold for smart energy CoolStep
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	334c      	adds	r3, #76	@ 0x4c
 8017fa8:	4618      	mov	r0, r3
 8017faa:	f000 f9ac 	bl	8018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017fae:	4603      	mov	r3, r0
 8017fb0:	4952      	ldr	r1, [pc, #328]	@ (80180fc <_ZN7TMC22099configureEv+0x288>)
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	f7ec fa4a 	bl	800444c <_ZN14TMC2209Stepper9TCOOLTHRSEm>
    driver->semin(5);             // CoolStep lower threshold
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	334c      	adds	r3, #76	@ 0x4c
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	f000 f9a2 	bl	8018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017fc2:	4603      	mov	r3, r0
 8017fc4:	2105      	movs	r1, #5
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	f7ea ff99 	bl	8002efe <_ZN14TMC2209Stepper5seminEh>
    driver->semax(2);             // CoolStep upper threshold
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	334c      	adds	r3, #76	@ 0x4c
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	f000 f998 	bl	8018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017fd6:	4603      	mov	r3, r0
 8017fd8:	2102      	movs	r1, #2
 8017fda:	4618      	mov	r0, r3
 8017fdc:	f7ea ffae 	bl	8002f3c <_ZN14TMC2209Stepper5semaxEh>
    driver->sedn(0b01);           // CoolStep decrement rate
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	334c      	adds	r3, #76	@ 0x4c
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f000 f98e 	bl	8018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017fea:	4603      	mov	r3, r0
 8017fec:	2101      	movs	r1, #1
 8017fee:	4618      	mov	r0, r3
 8017ff0:	f7ea ffc3 	bl	8002f7a <_ZN14TMC2209Stepper4sednEh>
    driver->en_spreadCycle(!stealth);
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	334c      	adds	r3, #76	@ 0x4c
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	f000 f984 	bl	8018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8017ffe:	4603      	mov	r3, r0
 8018000:	461a      	mov	r2, r3
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8018008:	f083 0301 	eor.w	r3, r3, #1
 801800c:	b2db      	uxtb	r3, r3
 801800e:	4619      	mov	r1, r3
 8018010:	4610      	mov	r0, r2
 8018012:	f7eb f81d 	bl	8003050 <_ZN14TMC2208Stepper14en_spreadCycleEb>
    driver->pwm_autoscale(true);
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	334c      	adds	r3, #76	@ 0x4c
 801801a:	4618      	mov	r0, r3
 801801c:	f000 f973 	bl	8018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018020:	4603      	mov	r3, r0
 8018022:	2101      	movs	r1, #1
 8018024:	4618      	mov	r0, r3
 8018026:	f7eb f919 	bl	800325c <_ZN14TMC2208Stepper13pwm_autoscaleEb>

    if (stealth && stall) {
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8018030:	2b00      	cmp	r3, #0
 8018032:	d012      	beq.n	801805a <_ZN7TMC22099configureEv+0x1e6>
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801803a:	2b00      	cmp	r3, #0
 801803c:	d00d      	beq.n	801805a <_ZN7TMC22099configureEv+0x1e6>
        // StallGuard sensitivity threshold (higher = more sensitive)
        driver->SGTHRS(stall);
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	334c      	adds	r3, #76	@ 0x4c
 8018042:	4618      	mov	r0, r3
 8018044:	f000 f95f 	bl	8018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018048:	4602      	mov	r2, r0
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018050:	b2db      	uxtb	r3, r3
 8018052:	4619      	mov	r1, r3
 8018054:	4610      	mov	r0, r2
 8018056:	f7ec f9e2 	bl	800441e <_ZN14TMC2209Stepper6SGTHRSEh>
    }

    driver->iholddelay(10);
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	334c      	adds	r3, #76	@ 0x4c
 801805e:	4618      	mov	r0, r3
 8018060:	f000 f951 	bl	8018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018064:	4603      	mov	r3, r0
 8018066:	210a      	movs	r1, #10
 8018068:	4618      	mov	r0, r3
 801806a:	f7eb f8a9 	bl	80031c0 <_ZN10TMCStepper10iholddelayEh>
    driver->TPOWERDOWN(128);  // ~2s until driver lowers to hold current
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	334c      	adds	r3, #76	@ 0x4c
 8018072:	4618      	mov	r0, r3
 8018074:	f000 f947 	bl	8018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018078:	4603      	mov	r3, r0
 801807a:	2180      	movs	r1, #128	@ 0x80
 801807c:	4618      	mov	r0, r3
 801807e:	f7ec fd67 	bl	8004b50 <_ZN10TMCStepper10TPOWERDOWNEh>

    printf("\nStopping the Serial thread\n");
 8018082:	481f      	ldr	r0, [pc, #124]	@ (8018100 <_ZN7TMC22099configureEv+0x28c>)
 8018084:	f011 f9ae 	bl	80293e4 <puts>
    instance->getSerialThread()->stopThread();
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	6a1b      	ldr	r3, [r3, #32]
 801808c:	4618      	mov	r0, r3
 801808e:	f7fc ff00 	bl	8014e92 <_ZN6Remora15getSerialThreadEv>
 8018092:	4603      	mov	r3, r0
 8018094:	4618      	mov	r0, r3
 8018096:	f002 fea0 	bl	801adda <_ZN9pruThread10stopThreadEv>
    instance->getSerialThread()->unregisterModule(self);
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	6a1b      	ldr	r3, [r3, #32]
 801809e:	4618      	mov	r0, r3
 80180a0:	f7fc fef7 	bl	8014e92 <_ZN6Remora15getSerialThreadEv>
 80180a4:	4604      	mov	r4, r0
 80180a6:	f107 020c 	add.w	r2, r7, #12
 80180aa:	f107 031c 	add.w	r3, r7, #28
 80180ae:	4611      	mov	r1, r2
 80180b0:	4618      	mov	r0, r3
 80180b2:	f7fd fbf7 	bl	80158a4 <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 80180b6:	f107 031c 	add.w	r3, r7, #28
 80180ba:	4619      	mov	r1, r3
 80180bc:	4620      	mov	r0, r4
 80180be:	f002 fe17 	bl	801acf0 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>
 80180c2:	f107 031c 	add.w	r3, r7, #28
 80180c6:	4618      	mov	r0, r3
 80180c8:	f7f2 ffeb 	bl	800b0a2 <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 80180cc:	f107 030c 	add.w	r3, r7, #12
 80180d0:	4618      	mov	r0, r3
 80180d2:	f7fc ff61 	bl	8014f98 <_ZNSt10shared_ptrI3TMCED1Ev>
 80180d6:	372c      	adds	r7, #44	@ 0x2c
 80180d8:	46bd      	mov	sp, r7
 80180da:	bd90      	pop	{r4, r7, pc}
 80180dc:	0802ad5c 	.word	0x0802ad5c
 80180e0:	0802ad78 	.word	0x0802ad78
 80180e4:	0802ada0 	.word	0x0802ada0
 80180e8:	0802adb8 	.word	0x0802adb8
 80180ec:	0802adcc 	.word	0x0802adcc
 80180f0:	0802add8 	.word	0x0802add8
 80180f4:	0802ade8 	.word	0x0802ade8
 80180f8:	0802ae10 	.word	0x0802ae10
 80180fc:	000fffff 	.word	0x000fffff
 8018100:	0802ae14 	.word	0x0802ae14

08018104 <_ZN7TMC22096updateEv>:

void TMC2209::update()
{
 8018104:	b580      	push	{r7, lr}
 8018106:	b082      	sub	sp, #8
 8018108:	af00      	add	r7, sp, #0
 801810a:	6078      	str	r0, [r7, #4]
    driver->SWSerial->tickerHandler();
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	334c      	adds	r3, #76	@ 0x4c
 8018110:	4618      	mov	r0, r3
 8018112:	f000 f8f8 	bl	8018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018116:	4603      	mov	r3, r0
 8018118:	695b      	ldr	r3, [r3, #20]
 801811a:	4618      	mov	r0, r3
 801811c:	f7ea fa18 	bl	8002550 <_ZN14SoftwareSerial13tickerHandlerEv>
}
 8018120:	bf00      	nop
 8018122:	3708      	adds	r7, #8
 8018124:	46bd      	mov	sp, r7
 8018126:	bd80      	pop	{r7, pc}

08018128 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>:
  operator T() const {
 8018128:	b580      	push	{r7, lr}
 801812a:	b082      	sub	sp, #8
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
    return as<T>();
 8018130:	6878      	ldr	r0, [r7, #4]
 8018132:	f000 f8f4 	bl	801831e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIhEET_v>
 8018136:	4603      	mov	r3, r0
  }
 8018138:	4618      	mov	r0, r3
 801813a:	3708      	adds	r7, #8
 801813c:	46bd      	mov	sp, r7
 801813e:	bd80      	pop	{r7, pc}

08018140 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8018140:	b580      	push	{r7, lr}
 8018142:	b08c      	sub	sp, #48	@ 0x30
 8018144:	af02      	add	r7, sp, #8
 8018146:	60f8      	str	r0, [r7, #12]
 8018148:	60b9      	str	r1, [r7, #8]
 801814a:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 801814c:	68ba      	ldr	r2, [r7, #8]
 801814e:	f107 0314 	add.w	r3, r7, #20
 8018152:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018156:	e883 0003 	stmia.w	r3, {r0, r1}
 801815a:	f107 031c 	add.w	r3, r7, #28
 801815e:	6879      	ldr	r1, [r7, #4]
 8018160:	4618      	mov	r0, r3
 8018162:	f000 f8fe 	bl	8018362 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA18_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8018166:	466a      	mov	r2, sp
 8018168:	f107 0320 	add.w	r3, r7, #32
 801816c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018170:	e882 0003 	stmia.w	r2, {r0, r1}
 8018174:	69fb      	ldr	r3, [r7, #28]
 8018176:	f107 0214 	add.w	r2, r7, #20
 801817a:	ca06      	ldmia	r2, {r1, r2}
 801817c:	68f8      	ldr	r0, [r7, #12]
 801817e:	f7ef fd68 	bl	8007c52 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8018182:	68f8      	ldr	r0, [r7, #12]
 8018184:	3728      	adds	r7, #40	@ 0x28
 8018186:	46bd      	mov	sp, r7
 8018188:	bd80      	pop	{r7, pc}

0801818a <_ZSt11make_sharedI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 801818a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801818e:	b08e      	sub	sp, #56	@ 0x38
 8018190:	af06      	add	r7, sp, #24
 8018192:	6178      	str	r0, [r7, #20]
 8018194:	6139      	str	r1, [r7, #16]
 8018196:	60fa      	str	r2, [r7, #12]
 8018198:	60bb      	str	r3, [r7, #8]
			     std::forward<_Args>(__args)...);
 801819a:	f107 031c 	add.w	r3, r7, #28
 801819e:	469a      	mov	sl, r3
 80181a0:	6938      	ldr	r0, [r7, #16]
 80181a2:	f7fd fc51 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80181a6:	4680      	mov	r8, r0
 80181a8:	68f8      	ldr	r0, [r7, #12]
 80181aa:	f7fd fc58 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80181ae:	4681      	mov	r9, r0
 80181b0:	68b8      	ldr	r0, [r7, #8]
 80181b2:	f000 f8e9 	bl	8018388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80181b6:	4604      	mov	r4, r0
 80181b8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80181ba:	f7fd fc5b 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80181be:	4605      	mov	r5, r0
 80181c0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80181c2:	f7fd fc57 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80181c6:	4606      	mov	r6, r0
 80181c8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80181ca:	f7f9 f946 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80181ce:	6078      	str	r0, [r7, #4]
 80181d0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80181d2:	f7fd fc4f 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80181d6:	6038      	str	r0, [r7, #0]
 80181d8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80181da:	f7fd fc56 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80181de:	4603      	mov	r3, r0
 80181e0:	9305      	str	r3, [sp, #20]
 80181e2:	683b      	ldr	r3, [r7, #0]
 80181e4:	9304      	str	r3, [sp, #16]
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	9303      	str	r3, [sp, #12]
 80181ea:	9602      	str	r6, [sp, #8]
 80181ec:	9501      	str	r5, [sp, #4]
 80181ee:	9400      	str	r4, [sp, #0]
 80181f0:	464b      	mov	r3, r9
 80181f2:	4642      	mov	r2, r8
 80181f4:	4651      	mov	r1, sl
 80181f6:	6978      	ldr	r0, [r7, #20]
 80181f8:	f000 f8d1 	bl	801839e <_ZNSt10shared_ptrI7TMC2209EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 80181fc:	6978      	ldr	r0, [r7, #20]
 80181fe:	3720      	adds	r7, #32
 8018200:	46bd      	mov	sp, r7
 8018202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018206 <_ZNSt10shared_ptrI6ModuleEC1I7TMC2209vEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8018206:	b590      	push	{r4, r7, lr}
 8018208:	b083      	sub	sp, #12
 801820a:	af00      	add	r7, sp, #0
 801820c:	6078      	str	r0, [r7, #4]
 801820e:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8018210:	687c      	ldr	r4, [r7, #4]
 8018212:	6838      	ldr	r0, [r7, #0]
 8018214:	f000 f901 	bl	801841a <_ZSt4moveIRSt10shared_ptrI7TMC2209EEONSt16remove_referenceIT_E4typeEOS5_>
 8018218:	4603      	mov	r3, r0
 801821a:	4619      	mov	r1, r3
 801821c:	4620      	mov	r0, r4
 801821e:	f000 f907 	bl	8018430 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209vEEOS_IT_LS2_0EE>
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	4618      	mov	r0, r3
 8018226:	370c      	adds	r7, #12
 8018228:	46bd      	mov	sp, r7
 801822a:	bd90      	pop	{r4, r7, pc}

0801822c <_ZSt11make_uniqueI14TMC2209StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfRhEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 801822c:	b590      	push	{r4, r7, lr}
 801822e:	ed2d 8b02 	vpush	{d8}
 8018232:	b091      	sub	sp, #68	@ 0x44
 8018234:	af00      	add	r7, sp, #0
 8018236:	60f8      	str	r0, [r7, #12]
 8018238:	60b9      	str	r1, [r7, #8]
 801823a:	607a      	str	r2, [r7, #4]
 801823c:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 801823e:	206c      	movs	r0, #108	@ 0x6c
 8018240:	f010 f9b6 	bl	80285b0 <_Znwj>
 8018244:	4603      	mov	r3, r0
 8018246:	461c      	mov	r4, r3
 8018248:	68b8      	ldr	r0, [r7, #8]
 801824a:	f7f7 fa17 	bl	800f67c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 801824e:	4602      	mov	r2, r0
 8018250:	f107 0310 	add.w	r3, r7, #16
 8018254:	4611      	mov	r1, r2
 8018256:	4618      	mov	r0, r3
 8018258:	f010 fcb5 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801825c:	6878      	ldr	r0, [r7, #4]
 801825e:	f7f7 fa0d 	bl	800f67c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8018262:	4602      	mov	r2, r0
 8018264:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018268:	4611      	mov	r1, r2
 801826a:	4618      	mov	r0, r3
 801826c:	f010 fcab 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8018270:	6838      	ldr	r0, [r7, #0]
 8018272:	f7fd fbf4 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8018276:	4603      	mov	r3, r0
 8018278:	ed93 8a00 	vldr	s16, [r3]
 801827c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801827e:	f000 f883 	bl	8018388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8018282:	4603      	mov	r3, r0
 8018284:	781b      	ldrb	r3, [r3, #0]
 8018286:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801828a:	f107 0110 	add.w	r1, r7, #16
 801828e:	eeb0 0a48 	vmov.f32	s0, s16
 8018292:	4620      	mov	r0, r4
 8018294:	f7ff fc3e 	bl	8017b14 <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 8018298:	4621      	mov	r1, r4
 801829a:	68f8      	ldr	r0, [r7, #12]
 801829c:	f000 f8f6 	bl	801848c <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80182a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80182a4:	4618      	mov	r0, r3
 80182a6:	f010 fa7e 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80182aa:	f107 0310 	add.w	r3, r7, #16
 80182ae:	4618      	mov	r0, r3
 80182b0:	f010 fa79 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80182b4:	bf00      	nop
 80182b6:	68f8      	ldr	r0, [r7, #12]
 80182b8:	3744      	adds	r7, #68	@ 0x44
 80182ba:	46bd      	mov	sp, r7
 80182bc:	ecbd 8b02 	vpop	{d8}
 80182c0:	bd90      	pop	{r4, r7, pc}

080182c2 <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80182c2:	b590      	push	{r4, r7, lr}
 80182c4:	b085      	sub	sp, #20
 80182c6:	af00      	add	r7, sp, #0
 80182c8:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	4618      	mov	r0, r3
 80182ce:	f000 f8ec 	bl	80184aa <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>
 80182d2:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d00c      	beq.n	80182f6 <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80182dc:	6878      	ldr	r0, [r7, #4]
 80182de:	f000 f8f1 	bl	80184c4 <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE11get_deleterEv>
 80182e2:	4604      	mov	r4, r0
 80182e4:	68f8      	ldr	r0, [r7, #12]
 80182e6:	f000 f8fa 	bl	80184de <_ZSt4moveIRP14TMC2209StepperEONSt16remove_referenceIT_E4typeEOS4_>
 80182ea:	4603      	mov	r3, r0
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	4619      	mov	r1, r3
 80182f0:	4620      	mov	r0, r4
 80182f2:	f000 f911 	bl	8018518 <_ZNKSt14default_deleteI14TMC2209StepperEclEPS0_>
	__ptr = pointer();
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	2200      	movs	r2, #0
 80182fa:	601a      	str	r2, [r3, #0]
      }
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	4618      	mov	r0, r3
 8018300:	3714      	adds	r7, #20
 8018302:	46bd      	mov	sp, r7
 8018304:	bd90      	pop	{r4, r7, pc}

08018306 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8018306:	b580      	push	{r7, lr}
 8018308:	b082      	sub	sp, #8
 801830a:	af00      	add	r7, sp, #0
 801830c:	6078      	str	r0, [r7, #4]
	return get();
 801830e:	6878      	ldr	r0, [r7, #4]
 8018310:	f000 f915 	bl	801853e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE3getEv>
 8018314:	4603      	mov	r3, r0
      }
 8018316:	4618      	mov	r0, r3
 8018318:	3708      	adds	r7, #8
 801831a:	46bd      	mov	sp, r7
 801831c:	bd80      	pop	{r7, pc}

0801831e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIhEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 801831e:	b590      	push	{r4, r7, lr}
 8018320:	b087      	sub	sp, #28
 8018322:	af00      	add	r7, sp, #0
 8018324:	6078      	str	r0, [r7, #4]
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	617b      	str	r3, [r7, #20]
 801832a:	697b      	ldr	r3, [r7, #20]
 801832c:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 801832e:	6938      	ldr	r0, [r7, #16]
 8018330:	f7f0 fb73 	bl	8008a1a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8018334:	4604      	mov	r4, r0
 8018336:	6938      	ldr	r0, [r7, #16]
 8018338:	f7f0 f9fe 	bl	8008738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 801833c:	4602      	mov	r2, r0
 801833e:	f107 0308 	add.w	r3, r7, #8
 8018342:	4621      	mov	r1, r4
 8018344:	4618      	mov	r0, r3
 8018346:	f7ed fb8c 	bl	8005a62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 801834a:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 801834c:	f107 0308 	add.w	r3, r7, #8
 8018350:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018354:	f000 f900 	bl	8018558 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE>
 8018358:	4603      	mov	r3, r0
}
 801835a:	4618      	mov	r0, r3
 801835c:	371c      	adds	r7, #28
 801835e:	46bd      	mov	sp, r7
 8018360:	bd90      	pop	{r4, r7, pc}

08018362 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA18_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8018362:	b580      	push	{r7, lr}
 8018364:	b082      	sub	sp, #8
 8018366:	af00      	add	r7, sp, #0
 8018368:	6078      	str	r0, [r7, #4]
 801836a:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 801836c:	6838      	ldr	r0, [r7, #0]
 801836e:	f000 f911 	bl	8018594 <_ZN11ArduinoJson8V730HB226detail7forwardIRA18_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8018372:	4602      	mov	r2, r0
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	4611      	mov	r1, r2
 8018378:	4618      	mov	r0, r3
 801837a:	f000 f916 	bl	80185aa <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA18_KcvE5adaptES5_>
 801837e:	bf00      	nop
}
 8018380:	6878      	ldr	r0, [r7, #4]
 8018382:	3708      	adds	r7, #8
 8018384:	46bd      	mov	sp, r7
 8018386:	bd80      	pop	{r7, pc}

08018388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8018388:	b480      	push	{r7}
 801838a:	b083      	sub	sp, #12
 801838c:	af00      	add	r7, sp, #0
 801838e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	4618      	mov	r0, r3
 8018394:	370c      	adds	r7, #12
 8018396:	46bd      	mov	sp, r7
 8018398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801839c:	4770      	bx	lr

0801839e <_ZNSt10shared_ptrI7TMC2209EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 801839e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80183a2:	b08f      	sub	sp, #60	@ 0x3c
 80183a4:	af06      	add	r7, sp, #24
 80183a6:	61f8      	str	r0, [r7, #28]
 80183a8:	61b9      	str	r1, [r7, #24]
 80183aa:	617a      	str	r2, [r7, #20]
 80183ac:	613b      	str	r3, [r7, #16]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 80183ae:	69fc      	ldr	r4, [r7, #28]
 80183b0:	6978      	ldr	r0, [r7, #20]
 80183b2:	f7fd fb49 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80183b6:	4680      	mov	r8, r0
 80183b8:	6938      	ldr	r0, [r7, #16]
 80183ba:	f7fd fb50 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80183be:	4681      	mov	r9, r0
 80183c0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80183c2:	f7ff ffe1 	bl	8018388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80183c6:	4605      	mov	r5, r0
 80183c8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80183ca:	f7fd fb53 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80183ce:	4606      	mov	r6, r0
 80183d0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80183d2:	f7fd fb4f 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80183d6:	60f8      	str	r0, [r7, #12]
 80183d8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80183da:	f7f9 f83e 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80183de:	60b8      	str	r0, [r7, #8]
 80183e0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80183e2:	f7fd fb47 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80183e6:	6078      	str	r0, [r7, #4]
 80183e8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80183ea:	f7fd fb4e 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80183ee:	4603      	mov	r3, r0
 80183f0:	9305      	str	r3, [sp, #20]
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	9304      	str	r3, [sp, #16]
 80183f6:	68bb      	ldr	r3, [r7, #8]
 80183f8:	9303      	str	r3, [sp, #12]
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	9302      	str	r3, [sp, #8]
 80183fe:	9601      	str	r6, [sp, #4]
 8018400:	9500      	str	r5, [sp, #0]
 8018402:	464b      	mov	r3, r9
 8018404:	4642      	mov	r2, r8
 8018406:	69b9      	ldr	r1, [r7, #24]
 8018408:	4620      	mov	r0, r4
 801840a:	f000 f8dd 	bl	80185c8 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 801840e:	69fb      	ldr	r3, [r7, #28]
 8018410:	4618      	mov	r0, r3
 8018412:	3724      	adds	r7, #36	@ 0x24
 8018414:	46bd      	mov	sp, r7
 8018416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801841a <_ZSt4moveIRSt10shared_ptrI7TMC2209EEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 801841a:	b480      	push	{r7}
 801841c:	b083      	sub	sp, #12
 801841e:	af00      	add	r7, sp, #0
 8018420:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	4618      	mov	r0, r3
 8018426:	370c      	adds	r7, #12
 8018428:	46bd      	mov	sp, r7
 801842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801842e:	4770      	bx	lr

08018430 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209vEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8018430:	b580      	push	{r7, lr}
 8018432:	b082      	sub	sp, #8
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]
 8018438:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 801843a:	683b      	ldr	r3, [r7, #0]
 801843c:	681a      	ldr	r2, [r3, #0]
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	601a      	str	r2, [r3, #0]
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	3304      	adds	r3, #4
 8018446:	4618      	mov	r0, r3
 8018448:	f7f4 fe56 	bl	800d0f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	1d1a      	adds	r2, r3, #4
 8018450:	683b      	ldr	r3, [r7, #0]
 8018452:	3304      	adds	r3, #4
 8018454:	4619      	mov	r1, r3
 8018456:	4610      	mov	r0, r2
 8018458:	f7f5 fa0d 	bl	800d876 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 801845c:	683b      	ldr	r3, [r7, #0]
 801845e:	2200      	movs	r2, #0
 8018460:	601a      	str	r2, [r3, #0]
	}
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	4618      	mov	r0, r3
 8018466:	3708      	adds	r7, #8
 8018468:	46bd      	mov	sp, r7
 801846a:	bd80      	pop	{r7, pc}

0801846c <_ZNSt15__uniq_ptr_dataI14TMC2209StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 801846c:	b580      	push	{r7, lr}
 801846e:	b082      	sub	sp, #8
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
 8018474:	6039      	str	r1, [r7, #0]
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	683a      	ldr	r2, [r7, #0]
 801847a:	4611      	mov	r1, r2
 801847c:	4618      	mov	r0, r3
 801847e:	f000 f8ef 	bl	8018660 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EEC1EPS0_>
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	4618      	mov	r0, r3
 8018486:	3708      	adds	r7, #8
 8018488:	46bd      	mov	sp, r7
 801848a:	bd80      	pop	{r7, pc}

0801848c <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 801848c:	b580      	push	{r7, lr}
 801848e:	b082      	sub	sp, #8
 8018490:	af00      	add	r7, sp, #0
 8018492:	6078      	str	r0, [r7, #4]
 8018494:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	6839      	ldr	r1, [r7, #0]
 801849a:	4618      	mov	r0, r3
 801849c:	f7ff ffe6 	bl	801846c <_ZNSt15__uniq_ptr_dataI14TMC2209StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	4618      	mov	r0, r3
 80184a4:	3708      	adds	r7, #8
 80184a6:	46bd      	mov	sp, r7
 80184a8:	bd80      	pop	{r7, pc}

080184aa <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80184aa:	b580      	push	{r7, lr}
 80184ac:	b082      	sub	sp, #8
 80184ae:	af00      	add	r7, sp, #0
 80184b0:	6078      	str	r0, [r7, #4]
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	4618      	mov	r0, r3
 80184b6:	f000 f8e7 	bl	8018688 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80184ba:	4603      	mov	r3, r0
 80184bc:	4618      	mov	r0, r3
 80184be:	3708      	adds	r7, #8
 80184c0:	46bd      	mov	sp, r7
 80184c2:	bd80      	pop	{r7, pc}

080184c4 <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b082      	sub	sp, #8
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	4618      	mov	r0, r3
 80184d0:	f000 f8e7 	bl	80186a2 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE10_M_deleterEv>
 80184d4:	4603      	mov	r3, r0
 80184d6:	4618      	mov	r0, r3
 80184d8:	3708      	adds	r7, #8
 80184da:	46bd      	mov	sp, r7
 80184dc:	bd80      	pop	{r7, pc}

080184de <_ZSt4moveIRP14TMC2209StepperEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80184de:	b480      	push	{r7}
 80184e0:	b083      	sub	sp, #12
 80184e2:	af00      	add	r7, sp, #0
 80184e4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	4618      	mov	r0, r3
 80184ea:	370c      	adds	r7, #12
 80184ec:	46bd      	mov	sp, r7
 80184ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f2:	4770      	bx	lr

080184f4 <_ZN14TMC2209StepperD1Ev>:
class TMC2209Stepper : public TMC2208Stepper {
 80184f4:	b580      	push	{r7, lr}
 80184f6:	b082      	sub	sp, #8
 80184f8:	af00      	add	r7, sp, #0
 80184fa:	6078      	str	r0, [r7, #4]
 80184fc:	4a05      	ldr	r2, [pc, #20]	@ (8018514 <_ZN14TMC2209StepperD1Ev+0x20>)
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	601a      	str	r2, [r3, #0]
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	4618      	mov	r0, r3
 8018506:	f7fc fcd3 	bl	8014eb0 <_ZN14TMC2208StepperD1Ev>
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	4618      	mov	r0, r3
 801850e:	3708      	adds	r7, #8
 8018510:	46bd      	mov	sp, r7
 8018512:	bd80      	pop	{r7, pc}
 8018514:	0802b5e8 	.word	0x0802b5e8

08018518 <_ZNKSt14default_deleteI14TMC2209StepperEclEPS0_>:
      operator()(_Tp* __ptr) const
 8018518:	b590      	push	{r4, r7, lr}
 801851a:	b083      	sub	sp, #12
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
 8018520:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8018522:	683c      	ldr	r4, [r7, #0]
 8018524:	2c00      	cmp	r4, #0
 8018526:	d006      	beq.n	8018536 <_ZNKSt14default_deleteI14TMC2209StepperEclEPS0_+0x1e>
 8018528:	4620      	mov	r0, r4
 801852a:	f7ff ffe3 	bl	80184f4 <_ZN14TMC2209StepperD1Ev>
 801852e:	216c      	movs	r1, #108	@ 0x6c
 8018530:	4620      	mov	r0, r4
 8018532:	f010 f82c 	bl	802858e <_ZdlPvj>
      }
 8018536:	bf00      	nop
 8018538:	370c      	adds	r7, #12
 801853a:	46bd      	mov	sp, r7
 801853c:	bd90      	pop	{r4, r7, pc}

0801853e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 801853e:	b580      	push	{r7, lr}
 8018540:	b082      	sub	sp, #8
 8018542:	af00      	add	r7, sp, #0
 8018544:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	4618      	mov	r0, r3
 801854a:	f000 f8b7 	bl	80186bc <_ZNKSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>
 801854e:	4603      	mov	r3, r0
 8018550:	4618      	mov	r0, r3
 8018552:	3708      	adds	r7, #8
 8018554:	46bd      	mov	sp, r7
 8018556:	bd80      	pop	{r7, pc}

08018558 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8018558:	b580      	push	{r7, lr}
 801855a:	b084      	sub	sp, #16
 801855c:	af00      	add	r7, sp, #0
 801855e:	463b      	mov	r3, r7
 8018560:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8018564:	463b      	mov	r3, r7
 8018566:	4618      	mov	r0, r3
 8018568:	f7ee ffda 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 801856c:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 801856e:	463b      	mov	r3, r7
 8018570:	4618      	mov	r0, r3
 8018572:	f7ee ffe1 	bl	8007538 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8018576:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d005      	beq.n	801858a <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE+0x32>
 801857e:	68b9      	ldr	r1, [r7, #8]
 8018580:	68f8      	ldr	r0, [r7, #12]
 8018582:	f000 f8a9 	bl	80186d8 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE>
 8018586:	4603      	mov	r3, r0
 8018588:	e000      	b.n	801858c <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE+0x34>
 801858a:	2300      	movs	r3, #0
  }
 801858c:	4618      	mov	r0, r3
 801858e:	3710      	adds	r7, #16
 8018590:	46bd      	mov	sp, r7
 8018592:	bd80      	pop	{r7, pc}

08018594 <_ZN11ArduinoJson8V730HB226detail7forwardIRA18_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8018594:	b480      	push	{r7}
 8018596:	b083      	sub	sp, #12
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 801859c:	687b      	ldr	r3, [r7, #4]
}
 801859e:	4618      	mov	r0, r3
 80185a0:	370c      	adds	r7, #12
 80185a2:	46bd      	mov	sp, r7
 80185a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a8:	4770      	bx	lr

080185aa <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA18_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 80185aa:	b580      	push	{r7, lr}
 80185ac:	b082      	sub	sp, #8
 80185ae:	af00      	add	r7, sp, #0
 80185b0:	6078      	str	r0, [r7, #4]
 80185b2:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 80185b4:	2301      	movs	r3, #1
 80185b6:	2211      	movs	r2, #17
 80185b8:	6839      	ldr	r1, [r7, #0]
 80185ba:	6878      	ldr	r0, [r7, #4]
 80185bc:	f7ec fe8a 	bl	80052d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80185c0:	6878      	ldr	r0, [r7, #4]
 80185c2:	3708      	adds	r7, #8
 80185c4:	46bd      	mov	sp, r7
 80185c6:	bd80      	pop	{r7, pc}

080185c8 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80185c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185cc:	b092      	sub	sp, #72	@ 0x48
 80185ce:	af08      	add	r7, sp, #32
 80185d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80185d2:	6239      	str	r1, [r7, #32]
 80185d4:	61fa      	str	r2, [r7, #28]
 80185d6:	61bb      	str	r3, [r7, #24]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80185d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185da:	2200      	movs	r2, #0
 80185dc:	601a      	str	r2, [r3, #0]
 80185de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185e0:	1d1c      	adds	r4, r3, #4
 80185e2:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 80185e4:	69f8      	ldr	r0, [r7, #28]
 80185e6:	f7fd fa2f 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80185ea:	4680      	mov	r8, r0
 80185ec:	69b8      	ldr	r0, [r7, #24]
 80185ee:	f7fd fa36 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80185f2:	4606      	mov	r6, r0
 80185f4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80185f6:	f7ff fec7 	bl	8018388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80185fa:	6178      	str	r0, [r7, #20]
 80185fc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80185fe:	f7fd fa39 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018602:	6138      	str	r0, [r7, #16]
 8018604:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8018606:	f7fd fa35 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801860a:	60f8      	str	r0, [r7, #12]
 801860c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801860e:	f7f8 ff24 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8018612:	60b8      	str	r0, [r7, #8]
 8018614:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8018616:	f7fd fa2d 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801861a:	6078      	str	r0, [r7, #4]
 801861c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801861e:	f7fd fa34 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8018622:	4603      	mov	r3, r0
 8018624:	9306      	str	r3, [sp, #24]
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	9305      	str	r3, [sp, #20]
 801862a:	68bb      	ldr	r3, [r7, #8]
 801862c:	9304      	str	r3, [sp, #16]
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	9303      	str	r3, [sp, #12]
 8018632:	693b      	ldr	r3, [r7, #16]
 8018634:	9302      	str	r3, [sp, #8]
 8018636:	697b      	ldr	r3, [r7, #20]
 8018638:	9301      	str	r3, [sp, #4]
 801863a:	9600      	str	r6, [sp, #0]
 801863c:	4643      	mov	r3, r8
 801863e:	6a3a      	ldr	r2, [r7, #32]
 8018640:	4629      	mov	r1, r5
 8018642:	4620      	mov	r0, r4
 8018644:	f000 f8da 	bl	80187fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8018648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	4619      	mov	r1, r3
 801864e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018650:	f000 f946 	bl	80188e0 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8018654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018656:	4618      	mov	r0, r3
 8018658:	3728      	adds	r7, #40	@ 0x28
 801865a:	46bd      	mov	sp, r7
 801865c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018660 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8018660:	b590      	push	{r4, r7, lr}
 8018662:	b083      	sub	sp, #12
 8018664:	af00      	add	r7, sp, #0
 8018666:	6078      	str	r0, [r7, #4]
 8018668:	6039      	str	r1, [r7, #0]
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	4618      	mov	r0, r3
 801866e:	f000 f958 	bl	8018922 <_ZNSt5tupleIJP14TMC2209StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8018672:	683c      	ldr	r4, [r7, #0]
 8018674:	6878      	ldr	r0, [r7, #4]
 8018676:	f7ff ff18 	bl	80184aa <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>
 801867a:	4603      	mov	r3, r0
 801867c:	601c      	str	r4, [r3, #0]
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	4618      	mov	r0, r3
 8018682:	370c      	adds	r7, #12
 8018684:	46bd      	mov	sp, r7
 8018686:	bd90      	pop	{r4, r7, pc}

08018688 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8018688:	b580      	push	{r7, lr}
 801868a:	b082      	sub	sp, #8
 801868c:	af00      	add	r7, sp, #0
 801868e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	4618      	mov	r0, r3
 8018694:	f000 f952 	bl	801893c <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8018698:	4603      	mov	r3, r0
 801869a:	4618      	mov	r0, r3
 801869c:	3708      	adds	r7, #8
 801869e:	46bd      	mov	sp, r7
 80186a0:	bd80      	pop	{r7, pc}

080186a2 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80186a2:	b580      	push	{r7, lr}
 80186a4:	b082      	sub	sp, #8
 80186a6:	af00      	add	r7, sp, #0
 80186a8:	6078      	str	r0, [r7, #4]
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	4618      	mov	r0, r3
 80186ae:	f000 f951 	bl	8018954 <_ZSt3getILj1EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80186b2:	4603      	mov	r3, r0
 80186b4:	4618      	mov	r0, r3
 80186b6:	3708      	adds	r7, #8
 80186b8:	46bd      	mov	sp, r7
 80186ba:	bd80      	pop	{r7, pc}

080186bc <_ZNKSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 80186bc:	b580      	push	{r7, lr}
 80186be:	b082      	sub	sp, #8
 80186c0:	af00      	add	r7, sp, #0
 80186c2:	6078      	str	r0, [r7, #4]
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	4618      	mov	r0, r3
 80186c8:	f000 f950 	bl	801896c <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80186cc:	4603      	mov	r3, r0
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	4618      	mov	r0, r3
 80186d2:	3708      	adds	r7, #8
 80186d4:	46bd      	mov	sp, r7
 80186d6:	bd80      	pop	{r7, pc}

080186d8 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 80186d8:	b580      	push	{r7, lr}
 80186da:	b084      	sub	sp, #16
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
 80186e0:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80186e2:	6839      	ldr	r1, [r7, #0]
 80186e4:	6878      	ldr	r0, [r7, #4]
 80186e6:	f7ed ff51 	bl	800658c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80186ea:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	791b      	ldrb	r3, [r3, #4]
 80186f0:	3b04      	subs	r3, #4
 80186f2:	2b1a      	cmp	r3, #26
 80186f4:	d87c      	bhi.n	80187f0 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x118>
 80186f6:	a201      	add	r2, pc, #4	@ (adr r2, 80186fc <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x24>)
 80186f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186fc:	080187af 	.word	0x080187af
 8018700:	080187bd 	.word	0x080187bd
 8018704:	08018769 	.word	0x08018769
 8018708:	080187f1 	.word	0x080187f1
 801870c:	080187f1 	.word	0x080187f1
 8018710:	080187f1 	.word	0x080187f1
 8018714:	0801876f 	.word	0x0801876f
 8018718:	080187f1 	.word	0x080187f1
 801871c:	0801877d 	.word	0x0801877d
 8018720:	080187f1 	.word	0x080187f1
 8018724:	080187cd 	.word	0x080187cd
 8018728:	080187f1 	.word	0x080187f1
 801872c:	080187f1 	.word	0x080187f1
 8018730:	080187f1 	.word	0x080187f1
 8018734:	080187f1 	.word	0x080187f1
 8018738:	080187f1 	.word	0x080187f1
 801873c:	080187f1 	.word	0x080187f1
 8018740:	080187f1 	.word	0x080187f1
 8018744:	080187f1 	.word	0x080187f1
 8018748:	080187f1 	.word	0x080187f1
 801874c:	080187f1 	.word	0x080187f1
 8018750:	080187f1 	.word	0x080187f1
 8018754:	0801878b 	.word	0x0801878b
 8018758:	080187f1 	.word	0x080187f1
 801875c:	0801879d 	.word	0x0801879d
 8018760:	080187f1 	.word	0x080187f1
 8018764:	080187df 	.word	0x080187df
        return content_.asBoolean;
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	781b      	ldrb	r3, [r3, #0]
 801876c:	e041      	b.n	80187f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	4618      	mov	r0, r3
 8018774:	f000 f907 	bl	8018986 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_>
 8018778:	4603      	mov	r3, r0
 801877a:	e03a      	b.n	80187f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	4618      	mov	r0, r3
 8018782:	f000 f912 	bl	80189aa <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_>
 8018786:	4603      	mov	r3, r0
 8018788:	e033      	b.n	80187f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018790:	4610      	mov	r0, r2
 8018792:	4619      	mov	r1, r3
 8018794:	f000 f91b 	bl	80189ce <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>
 8018798:	4603      	mov	r3, r0
 801879a:	e02a      	b.n	80187f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187a2:	4610      	mov	r0, r2
 80187a4:	4619      	mov	r1, r3
 80187a6:	f000 f925 	bl	80189f4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>
 80187aa:	4603      	mov	r3, r0
 80187ac:	e021      	b.n	80187f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	4618      	mov	r0, r3
 80187b4:	f000 f931 	bl	8018a1a <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>
 80187b8:	4603      	mov	r3, r0
 80187ba:	e01a      	b.n	80187f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	3308      	adds	r3, #8
 80187c2:	4618      	mov	r0, r3
 80187c4:	f000 f929 	bl	8018a1a <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>
 80187c8:	4603      	mov	r3, r0
 80187ca:	e012      	b.n	80187f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	edd3 7a00 	vldr	s15, [r3]
 80187d2:	eeb0 0a67 	vmov.f32	s0, s15
 80187d6:	f000 f934 	bl	8018a42 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>
 80187da:	4603      	mov	r3, r0
 80187dc:	e009      	b.n	80187f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	ed93 7b00 	vldr	d7, [r3]
 80187e4:	eeb0 0b47 	vmov.f64	d0, d7
 80187e8:	f000 f945 	bl	8018a76 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>
 80187ec:	4603      	mov	r3, r0
 80187ee:	e000      	b.n	80187f2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 80187f0:	2300      	movs	r3, #0
  }
 80187f2:	4618      	mov	r0, r3
 80187f4:	3710      	adds	r7, #16
 80187f6:	46bd      	mov	sp, r7
 80187f8:	bd80      	pop	{r7, pc}
 80187fa:	bf00      	nop

080187fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 80187fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018800:	b094      	sub	sp, #80	@ 0x50
 8018802:	af06      	add	r7, sp, #24
 8018804:	61f8      	str	r0, [r7, #28]
 8018806:	61b9      	str	r1, [r7, #24]
 8018808:	617a      	str	r2, [r7, #20]
 801880a:	613b      	str	r3, [r7, #16]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 801880c:	697a      	ldr	r2, [r7, #20]
 801880e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018812:	4611      	mov	r1, r2
 8018814:	4618      	mov	r0, r3
 8018816:	f000 f948 	bl	8018aaa <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 801881a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801881e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8018822:	4611      	mov	r1, r2
 8018824:	4618      	mov	r0, r3
 8018826:	f000 f959 	bl	8018adc <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 801882a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801882e:	4618      	mov	r0, r3
 8018830:	f000 f97c 	bl	8018b2c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8018834:	6378      	str	r0, [r7, #52]	@ 0x34
	  auto __pi = ::new (__mem)
 8018836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018838:	4619      	mov	r1, r3
 801883a:	205c      	movs	r0, #92	@ 0x5c
 801883c:	f7f2 f828 	bl	800a890 <_ZnwjPv>
 8018840:	4604      	mov	r4, r0
 8018842:	6938      	ldr	r0, [r7, #16]
 8018844:	f7fd f900 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8018848:	4680      	mov	r8, r0
 801884a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801884c:	f7fd f907 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8018850:	4681      	mov	r9, r0
 8018852:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8018854:	f7ff fd98 	bl	8018388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8018858:	4605      	mov	r5, r0
 801885a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801885c:	f7fd f90a 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018860:	4606      	mov	r6, r0
 8018862:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8018864:	f7fd f906 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018868:	60f8      	str	r0, [r7, #12]
 801886a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801886c:	f7f8 fdf5 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8018870:	60b8      	str	r0, [r7, #8]
 8018872:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8018874:	f7fd f8fe 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018878:	6078      	str	r0, [r7, #4]
 801887a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 801887c:	f7fd f905 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8018880:	4603      	mov	r3, r0
 8018882:	9305      	str	r3, [sp, #20]
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	9304      	str	r3, [sp, #16]
 8018888:	68bb      	ldr	r3, [r7, #8]
 801888a:	9303      	str	r3, [sp, #12]
 801888c:	68fb      	ldr	r3, [r7, #12]
 801888e:	9302      	str	r3, [sp, #8]
 8018890:	9601      	str	r6, [sp, #4]
 8018892:	9500      	str	r5, [sp, #0]
 8018894:	464b      	mov	r3, r9
 8018896:	4642      	mov	r2, r8
 8018898:	4651      	mov	r1, sl
 801889a:	4620      	mov	r0, r4
 801889c:	f000 f954 	bl	8018b48 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>
 80188a0:	633c      	str	r4, [r7, #48]	@ 0x30
	  __guard = nullptr;
 80188a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80188a6:	2100      	movs	r1, #0
 80188a8:	4618      	mov	r0, r3
 80188aa:	f000 f99d 	bl	8018be8 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 80188ae:	69fb      	ldr	r3, [r7, #28]
 80188b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80188b2:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 80188b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80188b6:	f000 f9a6 	bl	8018c06 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80188ba:	4602      	mov	r2, r0
 80188bc:	69bb      	ldr	r3, [r7, #24]
 80188be:	601a      	str	r2, [r3, #0]
	}
 80188c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80188c4:	4618      	mov	r0, r3
 80188c6:	f000 f91c 	bl	8018b02 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80188ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80188ce:	4618      	mov	r0, r3
 80188d0:	f000 f8f8 	bl	8018ac4 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80188d4:	69fb      	ldr	r3, [r7, #28]
 80188d6:	4618      	mov	r0, r3
 80188d8:	3738      	adds	r7, #56	@ 0x38
 80188da:	46bd      	mov	sp, r7
 80188dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080188e0 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp* __p) noexcept
 80188e0:	b580      	push	{r7, lr}
 80188e2:	b084      	sub	sp, #16
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	6078      	str	r0, [r7, #4]
 80188e8:	6039      	str	r1, [r7, #0]
	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	1d1a      	adds	r2, r3, #4
 80188ee:	683b      	ldr	r3, [r7, #0]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d002      	beq.n	80188fa <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1a>
 80188f4:	683b      	ldr	r3, [r7, #0]
 80188f6:	3318      	adds	r3, #24
 80188f8:	e000      	b.n	80188fc <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1c>
 80188fa:	2300      	movs	r3, #0
 80188fc:	4619      	mov	r1, r3
 80188fe:	4610      	mov	r0, r2
 8018900:	f7fd ffb9 	bl	8016876 <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>
 8018904:	60f8      	str	r0, [r7, #12]
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d006      	beq.n	801891a <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x3a>
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	3304      	adds	r3, #4
 8018910:	461a      	mov	r2, r3
 8018912:	6839      	ldr	r1, [r7, #0]
 8018914:	68f8      	ldr	r0, [r7, #12]
 8018916:	f000 f984 	bl	8018c22 <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2209EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>
	}
 801891a:	bf00      	nop
 801891c:	3710      	adds	r7, #16
 801891e:	46bd      	mov	sp, r7
 8018920:	bd80      	pop	{r7, pc}

08018922 <_ZNSt5tupleIJP14TMC2209StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8018922:	b580      	push	{r7, lr}
 8018924:	b082      	sub	sp, #8
 8018926:	af00      	add	r7, sp, #0
 8018928:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	4618      	mov	r0, r3
 801892e:	f000 f988 	bl	8018c42 <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEEC1Ev>
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	4618      	mov	r0, r3
 8018936:	3708      	adds	r7, #8
 8018938:	46bd      	mov	sp, r7
 801893a:	bd80      	pop	{r7, pc}

0801893c <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801893c:	b580      	push	{r7, lr}
 801893e:	b082      	sub	sp, #8
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8018944:	6878      	ldr	r0, [r7, #4]
 8018946:	f000 f98c 	bl	8018c62 <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERS4_>
 801894a:	4603      	mov	r3, r0
 801894c:	4618      	mov	r0, r3
 801894e:	3708      	adds	r7, #8
 8018950:	46bd      	mov	sp, r7
 8018952:	bd80      	pop	{r7, pc}

08018954 <_ZSt3getILj1EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8018954:	b580      	push	{r7, lr}
 8018956:	b082      	sub	sp, #8
 8018958:	af00      	add	r7, sp, #0
 801895a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801895c:	6878      	ldr	r0, [r7, #4]
 801895e:	f000 f98d 	bl	8018c7c <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2209StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8018962:	4603      	mov	r3, r0
 8018964:	4618      	mov	r0, r3
 8018966:	3708      	adds	r7, #8
 8018968:	46bd      	mov	sp, r7
 801896a:	bd80      	pop	{r7, pc}

0801896c <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 801896c:	b580      	push	{r7, lr}
 801896e:	b082      	sub	sp, #8
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	4618      	mov	r0, r3
 8018978:	f000 f98c 	bl	8018c94 <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801897c:	4603      	mov	r3, r0
 801897e:	4618      	mov	r0, r3
 8018980:	3708      	adds	r7, #8
 8018982:	46bd      	mov	sp, r7
 8018984:	bd80      	pop	{r7, pc}

08018986 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_>:
TOut convertNumber(TIn value) {
 8018986:	b580      	push	{r7, lr}
 8018988:	b082      	sub	sp, #8
 801898a:	af00      	add	r7, sp, #0
 801898c:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 801898e:	6878      	ldr	r0, [r7, #4]
 8018990:	f000 f98c 	bl	8018cac <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8018994:	4603      	mov	r3, r0
 8018996:	2b00      	cmp	r3, #0
 8018998:	d002      	beq.n	80189a0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_+0x1a>
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	b2db      	uxtb	r3, r3
 801899e:	e000      	b.n	80189a2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_+0x1c>
 80189a0:	2300      	movs	r3, #0
}
 80189a2:	4618      	mov	r0, r3
 80189a4:	3708      	adds	r7, #8
 80189a6:	46bd      	mov	sp, r7
 80189a8:	bd80      	pop	{r7, pc}

080189aa <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_>:
TOut convertNumber(TIn value) {
 80189aa:	b580      	push	{r7, lr}
 80189ac:	b082      	sub	sp, #8
 80189ae:	af00      	add	r7, sp, #0
 80189b0:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80189b2:	6878      	ldr	r0, [r7, #4]
 80189b4:	f000 f98c 	bl	8018cd0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80189b8:	4603      	mov	r3, r0
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d002      	beq.n	80189c4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_+0x1a>
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	b2db      	uxtb	r3, r3
 80189c2:	e000      	b.n	80189c6 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_+0x1c>
 80189c4:	2300      	movs	r3, #0
}
 80189c6:	4618      	mov	r0, r3
 80189c8:	3708      	adds	r7, #8
 80189ca:	46bd      	mov	sp, r7
 80189cc:	bd80      	pop	{r7, pc}

080189ce <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>:
TOut convertNumber(TIn value) {
 80189ce:	b580      	push	{r7, lr}
 80189d0:	b082      	sub	sp, #8
 80189d2:	af00      	add	r7, sp, #0
 80189d4:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80189d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80189dc:	f000 f98f 	bl	8018cfe <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80189e0:	4603      	mov	r3, r0
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d001      	beq.n	80189ea <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_+0x1c>
 80189e6:	783b      	ldrb	r3, [r7, #0]
 80189e8:	e000      	b.n	80189ec <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_+0x1e>
 80189ea:	2300      	movs	r3, #0
}
 80189ec:	4618      	mov	r0, r3
 80189ee:	3708      	adds	r7, #8
 80189f0:	46bd      	mov	sp, r7
 80189f2:	bd80      	pop	{r7, pc}

080189f4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>:
TOut convertNumber(TIn value) {
 80189f4:	b580      	push	{r7, lr}
 80189f6:	b082      	sub	sp, #8
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80189fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018a02:	f000 f995 	bl	8018d30 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8018a06:	4603      	mov	r3, r0
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d001      	beq.n	8018a10 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_+0x1c>
 8018a0c:	783b      	ldrb	r3, [r7, #0]
 8018a0e:	e000      	b.n	8018a12 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_+0x1e>
 8018a10:	2300      	movs	r3, #0
}
 8018a12:	4618      	mov	r0, r3
 8018a14:	3708      	adds	r7, #8
 8018a16:	46bd      	mov	sp, r7
 8018a18:	bd80      	pop	{r7, pc}

08018a1a <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>:
inline T parseNumber(const char* s) {
 8018a1a:	b580      	push	{r7, lr}
 8018a1c:	b086      	sub	sp, #24
 8018a1e:	af00      	add	r7, sp, #0
 8018a20:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8018a22:	f107 0308 	add.w	r3, r7, #8
 8018a26:	6879      	ldr	r1, [r7, #4]
 8018a28:	4618      	mov	r0, r3
 8018a2a:	f7ee f813 	bl	8006a54 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8018a2e:	f107 0308 	add.w	r3, r7, #8
 8018a32:	4618      	mov	r0, r3
 8018a34:	f000 f99c 	bl	8018d70 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v>
 8018a38:	4603      	mov	r3, r0
}
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	3718      	adds	r7, #24
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	bd80      	pop	{r7, pc}

08018a42 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>:
TOut convertNumber(TIn value) {
 8018a42:	b580      	push	{r7, lr}
 8018a44:	b082      	sub	sp, #8
 8018a46:	af00      	add	r7, sp, #0
 8018a48:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018a4c:	ed97 0a01 	vldr	s0, [r7, #4]
 8018a50:	f000 f9dc 	bl	8018e0c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8018a54:	4603      	mov	r3, r0
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d008      	beq.n	8018a6c <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_+0x2a>
 8018a5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8018a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018a62:	edc7 7a00 	vstr	s15, [r7]
 8018a66:	783b      	ldrb	r3, [r7, #0]
 8018a68:	b2db      	uxtb	r3, r3
 8018a6a:	e000      	b.n	8018a6e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_+0x2c>
 8018a6c:	2300      	movs	r3, #0
}
 8018a6e:	4618      	mov	r0, r3
 8018a70:	3708      	adds	r7, #8
 8018a72:	46bd      	mov	sp, r7
 8018a74:	bd80      	pop	{r7, pc}

08018a76 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>:
TOut convertNumber(TIn value) {
 8018a76:	b580      	push	{r7, lr}
 8018a78:	b084      	sub	sp, #16
 8018a7a:	af00      	add	r7, sp, #0
 8018a7c:	ed87 0b02 	vstr	d0, [r7, #8]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018a80:	ed97 0b02 	vldr	d0, [r7, #8]
 8018a84:	f000 f9ea 	bl	8018e5c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8018a88:	4603      	mov	r3, r0
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d008      	beq.n	8018aa0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_+0x2a>
 8018a8e:	ed97 7b02 	vldr	d7, [r7, #8]
 8018a92:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8018a96:	edc7 7a01 	vstr	s15, [r7, #4]
 8018a9a:	793b      	ldrb	r3, [r7, #4]
 8018a9c:	b2db      	uxtb	r3, r3
 8018a9e:	e000      	b.n	8018aa2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_+0x2c>
 8018aa0:	2300      	movs	r3, #0
}
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	3710      	adds	r7, #16
 8018aa6:	46bd      	mov	sp, r7
 8018aa8:	bd80      	pop	{r7, pc}

08018aaa <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8018aaa:	b580      	push	{r7, lr}
 8018aac:	b082      	sub	sp, #8
 8018aae:	af00      	add	r7, sp, #0
 8018ab0:	6078      	str	r0, [r7, #4]
 8018ab2:	6039      	str	r1, [r7, #0]
 8018ab4:	6878      	ldr	r0, [r7, #4]
 8018ab6:	f000 f9f9 	bl	8018eac <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	4618      	mov	r0, r3
 8018abe:	3708      	adds	r7, #8
 8018ac0:	46bd      	mov	sp, r7
 8018ac2:	bd80      	pop	{r7, pc}

08018ac4 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8018ac4:	b580      	push	{r7, lr}
 8018ac6:	b082      	sub	sp, #8
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	6078      	str	r0, [r7, #4]
 8018acc:	6878      	ldr	r0, [r7, #4]
 8018ace:	f000 f9f8 	bl	8018ec2 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	3708      	adds	r7, #8
 8018ad8:	46bd      	mov	sp, r7
 8018ada:	bd80      	pop	{r7, pc}

08018adc <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 8018adc:	b580      	push	{r7, lr}
 8018ade:	b082      	sub	sp, #8
 8018ae0:	af00      	add	r7, sp, #0
 8018ae2:	6078      	str	r0, [r7, #4]
 8018ae4:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8018ae6:	2101      	movs	r1, #1
 8018ae8:	6838      	ldr	r0, [r7, #0]
 8018aea:	f000 f9f5 	bl	8018ed8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8018aee:	4603      	mov	r3, r0
 8018af0:	461a      	mov	r2, r3
 8018af2:	6839      	ldr	r1, [r7, #0]
 8018af4:	6878      	ldr	r0, [r7, #4]
 8018af6:	f000 f9fe 	bl	8018ef6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 8018afa:	6878      	ldr	r0, [r7, #4]
 8018afc:	3708      	adds	r7, #8
 8018afe:	46bd      	mov	sp, r7
 8018b00:	bd80      	pop	{r7, pc}

08018b02 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8018b02:	b580      	push	{r7, lr}
 8018b04:	b082      	sub	sp, #8
 8018b06:	af00      	add	r7, sp, #0
 8018b08:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	685b      	ldr	r3, [r3, #4]
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d007      	beq.n	8018b22 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	6818      	ldr	r0, [r3, #0]
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	685b      	ldr	r3, [r3, #4]
 8018b1a:	2201      	movs	r2, #1
 8018b1c:	4619      	mov	r1, r3
 8018b1e:	f000 f9fe 	bl	8018f1e <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	4618      	mov	r0, r3
 8018b26:	3708      	adds	r7, #8
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	bd80      	pop	{r7, pc}

08018b2c <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8018b2c:	b580      	push	{r7, lr}
 8018b2e:	b082      	sub	sp, #8
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	6078      	str	r0, [r7, #4]
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	685b      	ldr	r3, [r3, #4]
 8018b38:	4618      	mov	r0, r3
 8018b3a:	f000 f9ff 	bl	8018f3c <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8018b3e:	4603      	mov	r3, r0
 8018b40:	4618      	mov	r0, r3
 8018b42:	3708      	adds	r7, #8
 8018b44:	46bd      	mov	sp, r7
 8018b46:	bd80      	pop	{r7, pc}

08018b48 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8018b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b4c:	b08c      	sub	sp, #48	@ 0x30
 8018b4e:	af06      	add	r7, sp, #24
 8018b50:	6178      	str	r0, [r7, #20]
 8018b52:	7439      	strb	r1, [r7, #16]
 8018b54:	60fa      	str	r2, [r7, #12]
 8018b56:	60bb      	str	r3, [r7, #8]
	: _M_impl(__a)
 8018b58:	697b      	ldr	r3, [r7, #20]
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	f7f5 fb40 	bl	800e1e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8018b60:	4a20      	ldr	r2, [pc, #128]	@ (8018be4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_+0x9c>)
 8018b62:	697b      	ldr	r3, [r7, #20]
 8018b64:	601a      	str	r2, [r3, #0]
 8018b66:	697b      	ldr	r3, [r7, #20]
 8018b68:	330c      	adds	r3, #12
 8018b6a:	4621      	mov	r1, r4
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	f000 f9f0 	bl	8018f52 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8018b72:	6978      	ldr	r0, [r7, #20]
 8018b74:	f000 f847 	bl	8018c06 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8018b78:	4680      	mov	r8, r0
 8018b7a:	68f8      	ldr	r0, [r7, #12]
 8018b7c:	f7fc ff64 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8018b80:	4681      	mov	r9, r0
 8018b82:	68b8      	ldr	r0, [r7, #8]
 8018b84:	f7fc ff6b 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8018b88:	4682      	mov	sl, r0
 8018b8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018b8c:	f7ff fbfc 	bl	8018388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8018b90:	4604      	mov	r4, r0
 8018b92:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018b94:	f7fc ff6e 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018b98:	4605      	mov	r5, r0
 8018b9a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8018b9c:	f7fc ff6a 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018ba0:	4606      	mov	r6, r0
 8018ba2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018ba4:	f7f8 fc59 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8018ba8:	6078      	str	r0, [r7, #4]
 8018baa:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8018bac:	f7fc ff62 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018bb0:	6038      	str	r0, [r7, #0]
 8018bb2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8018bb4:	f7fc ff69 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8018bb8:	4603      	mov	r3, r0
 8018bba:	f107 0010 	add.w	r0, r7, #16
 8018bbe:	9305      	str	r3, [sp, #20]
 8018bc0:	683b      	ldr	r3, [r7, #0]
 8018bc2:	9304      	str	r3, [sp, #16]
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	9303      	str	r3, [sp, #12]
 8018bc8:	9602      	str	r6, [sp, #8]
 8018bca:	9501      	str	r5, [sp, #4]
 8018bcc:	9400      	str	r4, [sp, #0]
 8018bce:	4653      	mov	r3, sl
 8018bd0:	464a      	mov	r2, r9
 8018bd2:	4641      	mov	r1, r8
 8018bd4:	f000 f9cc 	bl	8018f70 <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>
	}
 8018bd8:	697b      	ldr	r3, [r7, #20]
 8018bda:	4618      	mov	r0, r3
 8018bdc:	3718      	adds	r7, #24
 8018bde:	46bd      	mov	sp, r7
 8018be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018be4:	0802b5a8 	.word	0x0802b5a8

08018be8 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8018be8:	b480      	push	{r7}
 8018bea:	b083      	sub	sp, #12
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	6078      	str	r0, [r7, #4]
 8018bf0:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	2200      	movs	r2, #0
 8018bf6:	605a      	str	r2, [r3, #4]
	return *this;
 8018bf8:	687b      	ldr	r3, [r7, #4]
      }
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	370c      	adds	r7, #12
 8018bfe:	46bd      	mov	sp, r7
 8018c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c04:	4770      	bx	lr

08018c06 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 8018c06:	b580      	push	{r7, lr}
 8018c08:	b082      	sub	sp, #8
 8018c0a:	af00      	add	r7, sp, #0
 8018c0c:	6078      	str	r0, [r7, #4]
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	330c      	adds	r3, #12
 8018c12:	4618      	mov	r0, r3
 8018c14:	f000 f9e5 	bl	8018fe2 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E6_M_ptrEv>
 8018c18:	4603      	mov	r3, r0
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	3708      	adds	r7, #8
 8018c1e:	46bd      	mov	sp, r7
 8018c20:	bd80      	pop	{r7, pc}

08018c22 <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2209EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>:
	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 8018c22:	b580      	push	{r7, lr}
 8018c24:	b084      	sub	sp, #16
 8018c26:	af00      	add	r7, sp, #0
 8018c28:	60f8      	str	r0, [r7, #12]
 8018c2a:	60b9      	str	r1, [r7, #8]
 8018c2c:	607a      	str	r2, [r7, #4]
	{ _M_weak_this._M_assign(__p, __n); }
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	687a      	ldr	r2, [r7, #4]
 8018c32:	68b9      	ldr	r1, [r7, #8]
 8018c34:	4618      	mov	r0, r3
 8018c36:	f7fe f9a7 	bl	8016f88 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>
 8018c3a:	bf00      	nop
 8018c3c:	3710      	adds	r7, #16
 8018c3e:	46bd      	mov	sp, r7
 8018c40:	bd80      	pop	{r7, pc}

08018c42 <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8018c42:	b580      	push	{r7, lr}
 8018c44:	b082      	sub	sp, #8
 8018c46:	af00      	add	r7, sp, #0
 8018c48:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8018c4a:	6878      	ldr	r0, [r7, #4]
 8018c4c:	f000 f9d5 	bl	8018ffa <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEEC1Ev>
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	4618      	mov	r0, r3
 8018c54:	f000 f9dd 	bl	8019012 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EEC1Ev>
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	4618      	mov	r0, r3
 8018c5c:	3708      	adds	r7, #8
 8018c5e:	46bd      	mov	sp, r7
 8018c60:	bd80      	pop	{r7, pc}

08018c62 <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8018c62:	b580      	push	{r7, lr}
 8018c64:	b082      	sub	sp, #8
 8018c66:	af00      	add	r7, sp, #0
 8018c68:	6078      	str	r0, [r7, #4]
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	f000 f9de 	bl	801902e <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERS2_>
 8018c72:	4603      	mov	r3, r0
 8018c74:	4618      	mov	r0, r3
 8018c76:	3708      	adds	r7, #8
 8018c78:	46bd      	mov	sp, r7
 8018c7a:	bd80      	pop	{r7, pc}

08018c7c <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2209StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b082      	sub	sp, #8
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8018c84:	6878      	ldr	r0, [r7, #4]
 8018c86:	f000 f9dd 	bl	8019044 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEE7_M_headERS3_>
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	3708      	adds	r7, #8
 8018c90:	46bd      	mov	sp, r7
 8018c92:	bd80      	pop	{r7, pc}

08018c94 <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8018c94:	b580      	push	{r7, lr}
 8018c96:	b082      	sub	sp, #8
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8018c9c:	6878      	ldr	r0, [r7, #4]
 8018c9e:	f000 f9dd 	bl	801905c <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERKS4_>
 8018ca2:	4603      	mov	r3, r0
 8018ca4:	4618      	mov	r0, r3
 8018ca6:	3708      	adds	r7, #8
 8018ca8:	46bd      	mov	sp, r7
 8018caa:	bd80      	pop	{r7, pc}

08018cac <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018cac:	b580      	push	{r7, lr}
 8018cae:	b082      	sub	sp, #8
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8018cb4:	f000 f8a2 	bl	8018dfc <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018cb8:	4603      	mov	r3, r0
 8018cba:	461a      	mov	r2, r3
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	4293      	cmp	r3, r2
 8018cc0:	bf94      	ite	ls
 8018cc2:	2301      	movls	r3, #1
 8018cc4:	2300      	movhi	r3, #0
 8018cc6:	b2db      	uxtb	r3, r3
}
 8018cc8:	4618      	mov	r0, r3
 8018cca:	3708      	adds	r7, #8
 8018ccc:	46bd      	mov	sp, r7
 8018cce:	bd80      	pop	{r7, pc}

08018cd0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	b082      	sub	sp, #8
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	da01      	bge.n	8018ce2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x12>
    return false;
 8018cde:	2300      	movs	r3, #0
 8018ce0:	e009      	b.n	8018cf6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x26>
  return value <= TIn(numeric_limits<TOut>::highest());
 8018ce2:	f000 f88b 	bl	8018dfc <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	461a      	mov	r2, r3
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	4293      	cmp	r3, r2
 8018cee:	bfd4      	ite	le
 8018cf0:	2301      	movle	r3, #1
 8018cf2:	2300      	movgt	r3, #0
 8018cf4:	b2db      	uxtb	r3, r3
}
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	3708      	adds	r7, #8
 8018cfa:	46bd      	mov	sp, r7
 8018cfc:	bd80      	pop	{r7, pc}

08018cfe <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018cfe:	b5b0      	push	{r4, r5, r7, lr}
 8018d00:	b082      	sub	sp, #8
 8018d02:	af00      	add	r7, sp, #0
 8018d04:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8018d08:	f000 f878 	bl	8018dfc <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018d0c:	4603      	mov	r3, r0
 8018d0e:	b2db      	uxtb	r3, r3
 8018d10:	2200      	movs	r2, #0
 8018d12:	461c      	mov	r4, r3
 8018d14:	4615      	mov	r5, r2
 8018d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018d1a:	4294      	cmp	r4, r2
 8018d1c:	eb75 0303 	sbcs.w	r3, r5, r3
 8018d20:	bf2c      	ite	cs
 8018d22:	2301      	movcs	r3, #1
 8018d24:	2300      	movcc	r3, #0
 8018d26:	b2db      	uxtb	r3, r3
}
 8018d28:	4618      	mov	r0, r3
 8018d2a:	3708      	adds	r7, #8
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	bdb0      	pop	{r4, r5, r7, pc}

08018d30 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018d30:	b5b0      	push	{r4, r5, r7, lr}
 8018d32:	b082      	sub	sp, #8
 8018d34:	af00      	add	r7, sp, #0
 8018d36:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8018d3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	da01      	bge.n	8018d46 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8018d42:	2300      	movs	r3, #0
 8018d44:	e00f      	b.n	8018d66 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x36>
  return value <= TIn(numeric_limits<TOut>::highest());
 8018d46:	f000 f859 	bl	8018dfc <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018d4a:	4603      	mov	r3, r0
 8018d4c:	b2db      	uxtb	r3, r3
 8018d4e:	2200      	movs	r2, #0
 8018d50:	461c      	mov	r4, r3
 8018d52:	4615      	mov	r5, r2
 8018d54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018d58:	4294      	cmp	r4, r2
 8018d5a:	eb75 0303 	sbcs.w	r3, r5, r3
 8018d5e:	bfac      	ite	ge
 8018d60:	2301      	movge	r3, #1
 8018d62:	2300      	movlt	r3, #0
 8018d64:	b2db      	uxtb	r3, r3
}
 8018d66:	4618      	mov	r0, r3
 8018d68:	3708      	adds	r7, #8
 8018d6a:	46bd      	mov	sp, r7
 8018d6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018d70 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v>:
  T convertTo() const {
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b082      	sub	sp, #8
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	781b      	ldrb	r3, [r3, #0]
 8018d7c:	3b01      	subs	r3, #1
 8018d7e:	2b03      	cmp	r3, #3
 8018d80:	d82e      	bhi.n	8018de0 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x70>
 8018d82:	a201      	add	r2, pc, #4	@ (adr r2, 8018d88 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x18>)
 8018d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d88:	08018d99 	.word	0x08018d99
 8018d8c:	08018dab 	.word	0x08018dab
 8018d90:	08018dbd 	.word	0x08018dbd
 8018d94:	08018dcf 	.word	0x08018dcf
        return convertNumber<T>(value_.asFloat);
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8018d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8018da2:	f7ff fe4e 	bl	8018a42 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>
 8018da6:	4603      	mov	r3, r0
 8018da8:	e01b      	b.n	8018de2 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018db0:	4610      	mov	r0, r2
 8018db2:	4619      	mov	r1, r3
 8018db4:	f7ff fe1e 	bl	80189f4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>
 8018db8:	4603      	mov	r3, r0
 8018dba:	e012      	b.n	8018de2 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018dc2:	4610      	mov	r0, r2
 8018dc4:	4619      	mov	r1, r3
 8018dc6:	f7ff fe02 	bl	80189ce <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>
 8018dca:	4603      	mov	r3, r0
 8018dcc:	e009      	b.n	8018de2 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	ed93 7b02 	vldr	d7, [r3, #8]
 8018dd4:	eeb0 0b47 	vmov.f64	d0, d7
 8018dd8:	f7ff fe4d 	bl	8018a76 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>
 8018ddc:	4603      	mov	r3, r0
 8018dde:	e000      	b.n	8018de2 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return T();
 8018de0:	2300      	movs	r3, #0
  }
 8018de2:	4618      	mov	r0, r3
 8018de4:	3708      	adds	r7, #8
 8018de6:	46bd      	mov	sp, r7
 8018de8:	bd80      	pop	{r7, pc}
 8018dea:	bf00      	nop

08018dec <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>:
  static constexpr T lowest() {
 8018dec:	b480      	push	{r7}
 8018dee:	af00      	add	r7, sp, #0
    return 0;
 8018df0:	2300      	movs	r3, #0
  }
 8018df2:	4618      	mov	r0, r3
 8018df4:	46bd      	mov	sp, r7
 8018df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dfa:	4770      	bx	lr

08018dfc <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>:
  static constexpr T highest() {
 8018dfc:	b480      	push	{r7}
 8018dfe:	af00      	add	r7, sp, #0
    return T(-1);
 8018e00:	23ff      	movs	r3, #255	@ 0xff
  }
 8018e02:	4618      	mov	r0, r3
 8018e04:	46bd      	mov	sp, r7
 8018e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0a:	4770      	bx	lr

08018e0c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b082      	sub	sp, #8
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8018e16:	f7ff ffe9 	bl	8018dec <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>
 8018e1a:	4603      	mov	r3, r0
 8018e1c:	ee07 3a90 	vmov	s15, r3
 8018e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e24:	ed97 7a01 	vldr	s14, [r7, #4]
 8018e28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e30:	db0f      	blt.n	8018e52 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8018e32:	f7ff ffe3 	bl	8018dfc <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018e36:	4603      	mov	r3, r0
 8018e38:	ee07 3a90 	vmov	s15, r3
 8018e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8018e40:	ed97 7a01 	vldr	s14, [r7, #4]
 8018e44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e4c:	d801      	bhi.n	8018e52 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8018e4e:	2301      	movs	r3, #1
 8018e50:	e000      	b.n	8018e54 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8018e52:	2300      	movs	r3, #0
}
 8018e54:	4618      	mov	r0, r3
 8018e56:	3708      	adds	r7, #8
 8018e58:	46bd      	mov	sp, r7
 8018e5a:	bd80      	pop	{r7, pc}

08018e5c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b082      	sub	sp, #8
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8018e66:	f7ff ffc1 	bl	8018dec <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>
 8018e6a:	4603      	mov	r3, r0
 8018e6c:	ee07 3a90 	vmov	s15, r3
 8018e70:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018e74:	ed97 6b00 	vldr	d6, [r7]
 8018e78:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e80:	db0f      	blt.n	8018ea2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8018e82:	f7ff ffbb 	bl	8018dfc <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018e86:	4603      	mov	r3, r0
 8018e88:	ee07 3a90 	vmov	s15, r3
 8018e8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8018e90:	ed97 6b00 	vldr	d6, [r7]
 8018e94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e9c:	d801      	bhi.n	8018ea2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8018e9e:	2301      	movs	r3, #1
 8018ea0:	e000      	b.n	8018ea4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8018ea2:	2300      	movs	r3, #0
}
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	3708      	adds	r7, #8
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	bd80      	pop	{r7, pc}

08018eac <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8018eac:	b480      	push	{r7}
 8018eae:	b083      	sub	sp, #12
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	370c      	adds	r7, #12
 8018eba:	46bd      	mov	sp, r7
 8018ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ec0:	4770      	bx	lr

08018ec2 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8018ec2:	b480      	push	{r7}
 8018ec4:	b083      	sub	sp, #12
 8018ec6:	af00      	add	r7, sp, #0
 8018ec8:	6078      	str	r0, [r7, #4]
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	4618      	mov	r0, r3
 8018ece:	370c      	adds	r7, #12
 8018ed0:	46bd      	mov	sp, r7
 8018ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed6:	4770      	bx	lr

08018ed8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8018ed8:	b580      	push	{r7, lr}
 8018eda:	b082      	sub	sp, #8
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	6078      	str	r0, [r7, #4]
 8018ee0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8018ee2:	2200      	movs	r2, #0
 8018ee4:	6839      	ldr	r1, [r7, #0]
 8018ee6:	6878      	ldr	r0, [r7, #4]
 8018ee8:	f000 f8c6 	bl	8019078 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8018eec:	4603      	mov	r3, r0
 8018eee:	4618      	mov	r0, r3
 8018ef0:	3708      	adds	r7, #8
 8018ef2:	46bd      	mov	sp, r7
 8018ef4:	bd80      	pop	{r7, pc}

08018ef6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8018ef6:	b580      	push	{r7, lr}
 8018ef8:	b084      	sub	sp, #16
 8018efa:	af00      	add	r7, sp, #0
 8018efc:	60f8      	str	r0, [r7, #12]
 8018efe:	60b9      	str	r1, [r7, #8]
 8018f00:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8018f02:	68b8      	ldr	r0, [r7, #8]
 8018f04:	f000 f8e6 	bl	80190d4 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8018f08:	4602      	mov	r2, r0
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	601a      	str	r2, [r3, #0]
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	687a      	ldr	r2, [r7, #4]
 8018f12:	605a      	str	r2, [r3, #4]
      { }
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	4618      	mov	r0, r3
 8018f18:	3710      	adds	r7, #16
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	bd80      	pop	{r7, pc}

08018f1e <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8018f1e:	b580      	push	{r7, lr}
 8018f20:	b084      	sub	sp, #16
 8018f22:	af00      	add	r7, sp, #0
 8018f24:	60f8      	str	r0, [r7, #12]
 8018f26:	60b9      	str	r1, [r7, #8]
 8018f28:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8018f2a:	687a      	ldr	r2, [r7, #4]
 8018f2c:	68b9      	ldr	r1, [r7, #8]
 8018f2e:	68f8      	ldr	r0, [r7, #12]
 8018f30:	f000 f8db 	bl	80190ea <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 8018f34:	bf00      	nop
 8018f36:	3710      	adds	r7, #16
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	bd80      	pop	{r7, pc}

08018f3c <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 8018f3c:	b480      	push	{r7}
 8018f3e:	b083      	sub	sp, #12
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	6078      	str	r0, [r7, #4]
      return __ptr;
 8018f44:	687b      	ldr	r3, [r7, #4]
    }
 8018f46:	4618      	mov	r0, r3
 8018f48:	370c      	adds	r7, #12
 8018f4a:	46bd      	mov	sp, r7
 8018f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f50:	4770      	bx	lr

08018f52 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 8018f52:	b580      	push	{r7, lr}
 8018f54:	b082      	sub	sp, #8
 8018f56:	af00      	add	r7, sp, #0
 8018f58:	6078      	str	r0, [r7, #4]
 8018f5a:	7039      	strb	r1, [r7, #0]
 8018f5c:	463b      	mov	r3, r7
 8018f5e:	4619      	mov	r1, r3
 8018f60:	6878      	ldr	r0, [r7, #4]
 8018f62:	f7f5 fb57 	bl	800e614 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	4618      	mov	r0, r3
 8018f6a:	3708      	adds	r7, #8
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	bd80      	pop	{r7, pc}

08018f70 <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 8018f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f74:	b08c      	sub	sp, #48	@ 0x30
 8018f76:	af06      	add	r7, sp, #24
 8018f78:	6178      	str	r0, [r7, #20]
 8018f7a:	6139      	str	r1, [r7, #16]
 8018f7c:	60fa      	str	r2, [r7, #12]
 8018f7e:	60bb      	str	r3, [r7, #8]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 8018f80:	68f8      	ldr	r0, [r7, #12]
 8018f82:	f7fc fd61 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8018f86:	4680      	mov	r8, r0
 8018f88:	68b8      	ldr	r0, [r7, #8]
 8018f8a:	f7fc fd68 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8018f8e:	4681      	mov	r9, r0
 8018f90:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018f92:	f7ff f9f9 	bl	8018388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8018f96:	4682      	mov	sl, r0
 8018f98:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018f9a:	f7fc fd6b 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018f9e:	4604      	mov	r4, r0
 8018fa0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8018fa2:	f7fc fd67 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018fa6:	4605      	mov	r5, r0
 8018fa8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018faa:	f7f8 fa56 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8018fae:	4606      	mov	r6, r0
 8018fb0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8018fb2:	f7fc fd5f 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018fb6:	6078      	str	r0, [r7, #4]
 8018fb8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8018fba:	f7fc fd66 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8018fbe:	4603      	mov	r3, r0
 8018fc0:	9304      	str	r3, [sp, #16]
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	9303      	str	r3, [sp, #12]
 8018fc6:	9602      	str	r6, [sp, #8]
 8018fc8:	9501      	str	r5, [sp, #4]
 8018fca:	9400      	str	r4, [sp, #0]
 8018fcc:	4653      	mov	r3, sl
 8018fce:	464a      	mov	r2, r9
 8018fd0:	4641      	mov	r1, r8
 8018fd2:	6938      	ldr	r0, [r7, #16]
 8018fd4:	f000 f89a 	bl	801910c <_ZSt10_ConstructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>
 8018fd8:	bf00      	nop
 8018fda:	3718      	adds	r7, #24
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018fe2 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E6_M_ptrEv>:
      _M_ptr() noexcept
 8018fe2:	b580      	push	{r7, lr}
 8018fe4:	b082      	sub	sp, #8
 8018fe6:	af00      	add	r7, sp, #0
 8018fe8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8018fea:	6878      	ldr	r0, [r7, #4]
 8018fec:	f000 f8e7 	bl	80191be <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E7_M_addrEv>
 8018ff0:	4603      	mov	r3, r0
 8018ff2:	4618      	mov	r0, r3
 8018ff4:	3708      	adds	r7, #8
 8018ff6:	46bd      	mov	sp, r7
 8018ff8:	bd80      	pop	{r7, pc}

08018ffa <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEEC1Ev>:
      _Tuple_impl()
 8018ffa:	b580      	push	{r7, lr}
 8018ffc:	b082      	sub	sp, #8
 8018ffe:	af00      	add	r7, sp, #0
 8019000:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8019002:	6878      	ldr	r0, [r7, #4]
 8019004:	f000 f8e6 	bl	80191d4 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EEC1Ev>
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	4618      	mov	r0, r3
 801900c:	3708      	adds	r7, #8
 801900e:	46bd      	mov	sp, r7
 8019010:	bd80      	pop	{r7, pc}

08019012 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EEC1Ev>:
      constexpr _Head_base()
 8019012:	b480      	push	{r7}
 8019014:	b083      	sub	sp, #12
 8019016:	af00      	add	r7, sp, #0
 8019018:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	2200      	movs	r2, #0
 801901e:	601a      	str	r2, [r3, #0]
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	4618      	mov	r0, r3
 8019024:	370c      	adds	r7, #12
 8019026:	46bd      	mov	sp, r7
 8019028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801902c:	4770      	bx	lr

0801902e <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801902e:	b480      	push	{r7}
 8019030:	b083      	sub	sp, #12
 8019032:	af00      	add	r7, sp, #0
 8019034:	6078      	str	r0, [r7, #4]
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	4618      	mov	r0, r3
 801903a:	370c      	adds	r7, #12
 801903c:	46bd      	mov	sp, r7
 801903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019042:	4770      	bx	lr

08019044 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8019044:	b580      	push	{r7, lr}
 8019046:	b082      	sub	sp, #8
 8019048:	af00      	add	r7, sp, #0
 801904a:	6078      	str	r0, [r7, #4]
 801904c:	6878      	ldr	r0, [r7, #4]
 801904e:	f000 f8cc 	bl	80191ea <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EE7_M_headERS3_>
 8019052:	4603      	mov	r3, r0
 8019054:	4618      	mov	r0, r3
 8019056:	3708      	adds	r7, #8
 8019058:	46bd      	mov	sp, r7
 801905a:	bd80      	pop	{r7, pc}

0801905c <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801905c:	b580      	push	{r7, lr}
 801905e:	b082      	sub	sp, #8
 8019060:	af00      	add	r7, sp, #0
 8019062:	6078      	str	r0, [r7, #4]
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	4618      	mov	r0, r3
 8019068:	f000 f8ca 	bl	8019200 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERKS2_>
 801906c:	4603      	mov	r3, r0
 801906e:	4618      	mov	r0, r3
 8019070:	3708      	adds	r7, #8
 8019072:	46bd      	mov	sp, r7
 8019074:	bd80      	pop	{r7, pc}
	...

08019078 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8019078:	b580      	push	{r7, lr}
 801907a:	b084      	sub	sp, #16
 801907c:	af00      	add	r7, sp, #0
 801907e:	60f8      	str	r0, [r7, #12]
 8019080:	60b9      	str	r1, [r7, #8]
 8019082:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8019084:	68f8      	ldr	r0, [r7, #12]
 8019086:	f000 f8c7 	bl	8019218 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 801908a:	4602      	mov	r2, r0
 801908c:	68bb      	ldr	r3, [r7, #8]
 801908e:	4293      	cmp	r3, r2
 8019090:	bf8c      	ite	hi
 8019092:	2301      	movhi	r3, #1
 8019094:	2300      	movls	r3, #0
 8019096:	b2db      	uxtb	r3, r3
 8019098:	2b00      	cmp	r3, #0
 801909a:	bf14      	ite	ne
 801909c:	2301      	movne	r3, #1
 801909e:	2300      	moveq	r3, #0
 80190a0:	b2db      	uxtb	r3, r3
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d007      	beq.n	80190b6 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80190a6:	68bb      	ldr	r3, [r7, #8]
 80190a8:	4a09      	ldr	r2, [pc, #36]	@ (80190d0 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 80190aa:	4293      	cmp	r3, r2
 80190ac:	d901      	bls.n	80190b2 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80190ae:	f00f fa95 	bl	80285dc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80190b2:	f00f fa90 	bl	80285d6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80190b6:	68bb      	ldr	r3, [r7, #8]
 80190b8:	225c      	movs	r2, #92	@ 0x5c
 80190ba:	fb02 f303 	mul.w	r3, r2, r3
 80190be:	4618      	mov	r0, r3
 80190c0:	f00f fa76 	bl	80285b0 <_Znwj>
 80190c4:	4603      	mov	r3, r0
 80190c6:	bf00      	nop
      }
 80190c8:	4618      	mov	r0, r3
 80190ca:	3710      	adds	r7, #16
 80190cc:	46bd      	mov	sp, r7
 80190ce:	bd80      	pop	{r7, pc}
 80190d0:	02c8590b 	.word	0x02c8590b

080190d4 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80190d4:	b480      	push	{r7}
 80190d6:	b083      	sub	sp, #12
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	4618      	mov	r0, r3
 80190e0:	370c      	adds	r7, #12
 80190e2:	46bd      	mov	sp, r7
 80190e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190e8:	4770      	bx	lr

080190ea <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80190ea:	b580      	push	{r7, lr}
 80190ec:	b084      	sub	sp, #16
 80190ee:	af00      	add	r7, sp, #0
 80190f0:	60f8      	str	r0, [r7, #12]
 80190f2:	60b9      	str	r1, [r7, #8]
 80190f4:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	225c      	movs	r2, #92	@ 0x5c
 80190fa:	fb02 f303 	mul.w	r3, r2, r3
 80190fe:	4619      	mov	r1, r3
 8019100:	68b8      	ldr	r0, [r7, #8]
 8019102:	f00f fa44 	bl	802858e <_ZdlPvj>
      }
 8019106:	3710      	adds	r7, #16
 8019108:	46bd      	mov	sp, r7
 801910a:	bd80      	pop	{r7, pc}

0801910c <_ZSt10_ConstructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 801910c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019110:	ed2d 8b02 	vpush	{d8}
 8019114:	b08e      	sub	sp, #56	@ 0x38
 8019116:	af04      	add	r7, sp, #16
 8019118:	60f8      	str	r0, [r7, #12]
 801911a:	60b9      	str	r1, [r7, #8]
 801911c:	607a      	str	r2, [r7, #4]
 801911e:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	4619      	mov	r1, r3
 8019124:	2050      	movs	r0, #80	@ 0x50
 8019126:	f7f1 fbb3 	bl	800a890 <_ZnwjPv>
 801912a:	4682      	mov	sl, r0
 801912c:	68b8      	ldr	r0, [r7, #8]
 801912e:	f7fc fc8b 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019132:	4602      	mov	r2, r0
 8019134:	f107 0310 	add.w	r3, r7, #16
 8019138:	4611      	mov	r1, r2
 801913a:	4618      	mov	r0, r3
 801913c:	f00f fb14 	bl	8028768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8019140:	6878      	ldr	r0, [r7, #4]
 8019142:	f7fc fc8c 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019146:	4603      	mov	r3, r0
 8019148:	ed93 8a00 	vldr	s16, [r3]
 801914c:	6838      	ldr	r0, [r7, #0]
 801914e:	f7ff f91b 	bl	8018388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8019152:	4603      	mov	r3, r0
 8019154:	f893 8000 	ldrb.w	r8, [r3]
 8019158:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801915a:	f7fc fc8b 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801915e:	4603      	mov	r3, r0
 8019160:	f8b3 9000 	ldrh.w	r9, [r3]
 8019164:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019166:	f7fc fc85 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801916a:	4603      	mov	r3, r0
 801916c:	881c      	ldrh	r4, [r3, #0]
 801916e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019170:	f7f8 f973 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8019174:	4603      	mov	r3, r0
 8019176:	781d      	ldrb	r5, [r3, #0]
 8019178:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801917a:	f7fc fc7b 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801917e:	4603      	mov	r3, r0
 8019180:	881e      	ldrh	r6, [r3, #0]
 8019182:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8019184:	f7fc fc81 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019188:	4603      	mov	r3, r0
 801918a:	681b      	ldr	r3, [r3, #0]
 801918c:	f107 0110 	add.w	r1, r7, #16
 8019190:	9303      	str	r3, [sp, #12]
 8019192:	9602      	str	r6, [sp, #8]
 8019194:	9501      	str	r5, [sp, #4]
 8019196:	9400      	str	r4, [sp, #0]
 8019198:	464b      	mov	r3, r9
 801919a:	4642      	mov	r2, r8
 801919c:	eeb0 0a48 	vmov.f32	s0, s16
 80191a0:	4650      	mov	r0, sl
 80191a2:	f7fe fe15 	bl	8017dd0 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbtP6Remora>
 80191a6:	f107 0310 	add.w	r3, r7, #16
 80191aa:	4618      	mov	r0, r3
 80191ac:	f00f fafb 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 80191b0:	bf00      	nop
 80191b2:	3728      	adds	r7, #40	@ 0x28
 80191b4:	46bd      	mov	sp, r7
 80191b6:	ecbd 8b02 	vpop	{d8}
 80191ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080191be <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E7_M_addrEv>:
      _M_addr() noexcept
 80191be:	b480      	push	{r7}
 80191c0:	b083      	sub	sp, #12
 80191c2:	af00      	add	r7, sp, #0
 80191c4:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 80191c6:	687b      	ldr	r3, [r7, #4]
      }
 80191c8:	4618      	mov	r0, r3
 80191ca:	370c      	adds	r7, #12
 80191cc:	46bd      	mov	sp, r7
 80191ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d2:	4770      	bx	lr

080191d4 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EEC1Ev>:
      constexpr _Head_base()
 80191d4:	b480      	push	{r7}
 80191d6:	b083      	sub	sp, #12
 80191d8:	af00      	add	r7, sp, #0
 80191da:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	4618      	mov	r0, r3
 80191e0:	370c      	adds	r7, #12
 80191e2:	46bd      	mov	sp, r7
 80191e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e8:	4770      	bx	lr

080191ea <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80191ea:	b480      	push	{r7}
 80191ec:	b083      	sub	sp, #12
 80191ee:	af00      	add	r7, sp, #0
 80191f0:	6078      	str	r0, [r7, #4]
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	4618      	mov	r0, r3
 80191f6:	370c      	adds	r7, #12
 80191f8:	46bd      	mov	sp, r7
 80191fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191fe:	4770      	bx	lr

08019200 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8019200:	b480      	push	{r7}
 8019202:	b083      	sub	sp, #12
 8019204:	af00      	add	r7, sp, #0
 8019206:	6078      	str	r0, [r7, #4]
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	4618      	mov	r0, r3
 801920c:	370c      	adds	r7, #12
 801920e:	46bd      	mov	sp, r7
 8019210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019214:	4770      	bx	lr
	...

08019218 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8019218:	b480      	push	{r7}
 801921a:	b083      	sub	sp, #12
 801921c:	af00      	add	r7, sp, #0
 801921e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8019220:	4b03      	ldr	r3, [pc, #12]	@ (8019230 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 8019222:	4618      	mov	r0, r3
 8019224:	370c      	adds	r7, #12
 8019226:	46bd      	mov	sp, r7
 8019228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801922c:	4770      	bx	lr
 801922e:	bf00      	nop
 8019230:	01642c85 	.word	0x01642c85

08019234 <_ZN7TMC2209D1Ev>:

public:

	TMC2209(std::string, float, uint8_t, uint16_t, uint16_t, bool, uint16_t, Remora*);
	static std::shared_ptr<Module> create(const JsonObject& config, Remora* instance);
	~TMC2209() = default;
 8019234:	b580      	push	{r7, lr}
 8019236:	b082      	sub	sp, #8
 8019238:	af00      	add	r7, sp, #0
 801923a:	6078      	str	r0, [r7, #4]
 801923c:	4a0a      	ldr	r2, [pc, #40]	@ (8019268 <_ZN7TMC2209D1Ev+0x34>)
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	601a      	str	r2, [r3, #0]
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	334c      	adds	r3, #76	@ 0x4c
 8019246:	4618      	mov	r0, r3
 8019248:	f7ff f83b 	bl	80182c2 <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EED1Ev>
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	3328      	adds	r3, #40	@ 0x28
 8019250:	4618      	mov	r0, r3
 8019252:	f00f faa8 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	4618      	mov	r0, r3
 801925a:	f7fb ff73 	bl	8015144 <_ZN3TMCD1Ev>
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	4618      	mov	r0, r3
 8019262:	3708      	adds	r7, #8
 8019264:	46bd      	mov	sp, r7
 8019266:	bd80      	pop	{r7, pc}
 8019268:	0802b5c4 	.word	0x0802b5c4

0801926c <_ZN7TMC2209D0Ev>:
 801926c:	b580      	push	{r7, lr}
 801926e:	b082      	sub	sp, #8
 8019270:	af00      	add	r7, sp, #0
 8019272:	6078      	str	r0, [r7, #4]
 8019274:	6878      	ldr	r0, [r7, #4]
 8019276:	f7ff ffdd 	bl	8019234 <_ZN7TMC2209D1Ev>
 801927a:	2150      	movs	r1, #80	@ 0x50
 801927c:	6878      	ldr	r0, [r7, #4]
 801927e:	f00f f986 	bl	802858e <_ZdlPvj>
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	4618      	mov	r0, r3
 8019286:	3708      	adds	r7, #8
 8019288:	46bd      	mov	sp, r7
 801928a:	bd80      	pop	{r7, pc}

0801928c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 801928c:	b580      	push	{r7, lr}
 801928e:	b082      	sub	sp, #8
 8019290:	af00      	add	r7, sp, #0
 8019292:	6078      	str	r0, [r7, #4]
 8019294:	4a05      	ldr	r2, [pc, #20]	@ (80192ac <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	601a      	str	r2, [r3, #0]
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	4618      	mov	r0, r3
 801929e:	f7f3 f961 	bl	800c564 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	4618      	mov	r0, r3
 80192a6:	3708      	adds	r7, #8
 80192a8:	46bd      	mov	sp, r7
 80192aa:	bd80      	pop	{r7, pc}
 80192ac:	0802b5a8 	.word	0x0802b5a8

080192b0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 80192b0:	b580      	push	{r7, lr}
 80192b2:	b082      	sub	sp, #8
 80192b4:	af00      	add	r7, sp, #0
 80192b6:	6078      	str	r0, [r7, #4]
 80192b8:	6878      	ldr	r0, [r7, #4]
 80192ba:	f7ff ffe7 	bl	801928c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80192be:	215c      	movs	r1, #92	@ 0x5c
 80192c0:	6878      	ldr	r0, [r7, #4]
 80192c2:	f00f f964 	bl	802858e <_ZdlPvj>
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	4618      	mov	r0, r3
 80192ca:	3708      	adds	r7, #8
 80192cc:	46bd      	mov	sp, r7
 80192ce:	bd80      	pop	{r7, pc}

080192d0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80192d0:	b590      	push	{r4, r7, lr}
 80192d2:	b083      	sub	sp, #12
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	330c      	adds	r3, #12
 80192dc:	4618      	mov	r0, r3
 80192de:	f000 f856 	bl	801938e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80192e2:	4604      	mov	r4, r0
 80192e4:	6878      	ldr	r0, [r7, #4]
 80192e6:	f7ff fc8e 	bl	8018c06 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80192ea:	4603      	mov	r3, r0
 80192ec:	4619      	mov	r1, r3
 80192ee:	4620      	mov	r0, r4
 80192f0:	f000 f859 	bl	80193a6 <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2209EEvRS0_PT_>
      }
 80192f4:	bf00      	nop
 80192f6:	370c      	adds	r7, #12
 80192f8:	46bd      	mov	sp, r7
 80192fa:	bd90      	pop	{r4, r7, pc}

080192fc <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80192fc:	b580      	push	{r7, lr}
 80192fe:	b086      	sub	sp, #24
 8019300:	af00      	add	r7, sp, #0
 8019302:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	330c      	adds	r3, #12
 8019308:	4618      	mov	r0, r3
 801930a:	f000 f840 	bl	801938e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801930e:	4602      	mov	r2, r0
 8019310:	f107 0314 	add.w	r3, r7, #20
 8019314:	4611      	mov	r1, r2
 8019316:	4618      	mov	r0, r3
 8019318:	f7ff fbc7 	bl	8018aaa <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 801931c:	f107 0114 	add.w	r1, r7, #20
 8019320:	f107 030c 	add.w	r3, r7, #12
 8019324:	687a      	ldr	r2, [r7, #4]
 8019326:	4618      	mov	r0, r3
 8019328:	f7ff fde5 	bl	8018ef6 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 801932c:	6878      	ldr	r0, [r7, #4]
 801932e:	f7ff ffad 	bl	801928c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8019332:	f107 030c 	add.w	r3, r7, #12
 8019336:	4618      	mov	r0, r3
 8019338:	f7ff fbe3 	bl	8018b02 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 801933c:	f107 0314 	add.w	r3, r7, #20
 8019340:	4618      	mov	r0, r3
 8019342:	f7ff fbbf 	bl	8018ac4 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8019346:	3718      	adds	r7, #24
 8019348:	46bd      	mov	sp, r7
 801934a:	bd80      	pop	{r7, pc}

0801934c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 801934c:	b580      	push	{r7, lr}
 801934e:	b084      	sub	sp, #16
 8019350:	af00      	add	r7, sp, #0
 8019352:	6078      	str	r0, [r7, #4]
 8019354:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8019356:	6878      	ldr	r0, [r7, #4]
 8019358:	f7ff fc55 	bl	8018c06 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801935c:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 801935e:	f7f1 fae3 	bl	800a928 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8019362:	4602      	mov	r2, r0
	    ||
 8019364:	683b      	ldr	r3, [r7, #0]
 8019366:	4293      	cmp	r3, r2
 8019368:	d005      	beq.n	8019376 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 801936a:	6838      	ldr	r0, [r7, #0]
 801936c:	f00f f94c 	bl	8028608 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8019370:	4603      	mov	r3, r0
	    ||
 8019372:	2b00      	cmp	r3, #0
 8019374:	d001      	beq.n	801937a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 8019376:	2301      	movs	r3, #1
 8019378:	e000      	b.n	801937c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 801937a:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 801937c:	2b00      	cmp	r3, #0
 801937e:	d001      	beq.n	8019384 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	e000      	b.n	8019386 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 8019384:	2300      	movs	r3, #0
      }
 8019386:	4618      	mov	r0, r3
 8019388:	3710      	adds	r7, #16
 801938a:	46bd      	mov	sp, r7
 801938c:	bd80      	pop	{r7, pc}

0801938e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 801938e:	b580      	push	{r7, lr}
 8019390:	b082      	sub	sp, #8
 8019392:	af00      	add	r7, sp, #0
 8019394:	6078      	str	r0, [r7, #4]
 8019396:	6878      	ldr	r0, [r7, #4]
 8019398:	f7f5 fbb7 	bl	800eb0a <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 801939c:	4603      	mov	r3, r0
 801939e:	4618      	mov	r0, r3
 80193a0:	3708      	adds	r7, #8
 80193a2:	46bd      	mov	sp, r7
 80193a4:	bd80      	pop	{r7, pc}

080193a6 <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2209EEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 80193a6:	b580      	push	{r7, lr}
 80193a8:	b082      	sub	sp, #8
 80193aa:	af00      	add	r7, sp, #0
 80193ac:	6078      	str	r0, [r7, #4]
 80193ae:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 80193b0:	6838      	ldr	r0, [r7, #0]
 80193b2:	f000 f804 	bl	80193be <_ZSt8_DestroyI7TMC2209EvPT_>
 80193b6:	bf00      	nop
 80193b8:	3708      	adds	r7, #8
 80193ba:	46bd      	mov	sp, r7
 80193bc:	bd80      	pop	{r7, pc}

080193be <_ZSt8_DestroyI7TMC2209EvPT_>:
    _Destroy(_Tp* __pointer)
 80193be:	b580      	push	{r7, lr}
 80193c0:	b082      	sub	sp, #8
 80193c2:	af00      	add	r7, sp, #0
 80193c4:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	6878      	ldr	r0, [r7, #4]
 80193ce:	4798      	blx	r3
    }
 80193d0:	bf00      	nop
 80193d2:	3708      	adds	r7, #8
 80193d4:	46bd      	mov	sp, r7
 80193d6:	bd80      	pop	{r7, pc}

080193d8 <_ZN14TMC5160Stepper11rms_currentEt>:
		void rms_current(uint16_t mA) { TMC2160Stepper::rms_current(mA); }
 80193d8:	b580      	push	{r7, lr}
 80193da:	b082      	sub	sp, #8
 80193dc:	af00      	add	r7, sp, #0
 80193de:	6078      	str	r0, [r7, #4]
 80193e0:	460b      	mov	r3, r1
 80193e2:	807b      	strh	r3, [r7, #2]
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	887a      	ldrh	r2, [r7, #2]
 80193e8:	4611      	mov	r1, r2
 80193ea:	4618      	mov	r0, r3
 80193ec:	f7ea fbca 	bl	8003b84 <_ZN14TMC2160Stepper11rms_currentEt>
 80193f0:	bf00      	nop
 80193f2:	3708      	adds	r7, #8
 80193f4:	46bd      	mov	sp, r7
 80193f6:	bd80      	pop	{r7, pc}

080193f8 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b082      	sub	sp, #8
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	6078      	str	r0, [r7, #4]
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	3304      	adds	r3, #4
 8019404:	4618      	mov	r0, r3
 8019406:	f7f2 fc7a 	bl	800bcfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	4618      	mov	r0, r3
 801940e:	3708      	adds	r7, #8
 8019410:	46bd      	mov	sp, r7
 8019412:	bd80      	pop	{r7, pc}

08019414 <_ZNSt10shared_ptrI7TMC5160ED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8019414:	b580      	push	{r7, lr}
 8019416:	b082      	sub	sp, #8
 8019418:	af00      	add	r7, sp, #0
 801941a:	6078      	str	r0, [r7, #4]
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	4618      	mov	r0, r3
 8019420:	f7ff ffea 	bl	80193f8 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	4618      	mov	r0, r3
 8019428:	3708      	adds	r7, #8
 801942a:	46bd      	mov	sp, r7
 801942c:	bd80      	pop	{r7, pc}
	...

08019430 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "tmc.h"
#include <cstdint>

#define TOFF_VALUE  4 // [1... 15]

std::shared_ptr<Module> TMC5160::create(const JsonObject& config, Remora* instance) {
 8019430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019432:	b0ef      	sub	sp, #444	@ 0x1bc
 8019434:	af08      	add	r7, sp, #32
 8019436:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801943a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801943e:	6018      	str	r0, [r3, #0]
 8019440:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019444:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019448:	6019      	str	r1, [r3, #0]
 801944a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801944e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8019452:	601a      	str	r2, [r3, #0]
    printf("Creating TMC5160 module\n");
 8019454:	48b1      	ldr	r0, [pc, #708]	@ (801971c <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2ec>)
 8019456:	f00f ffc5 	bl	80293e4 <puts>

    const char* comment = config["Comment"];
 801945a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801945e:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 8019462:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019466:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801946a:	4aad      	ldr	r2, [pc, #692]	@ (8019720 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2f0>)
 801946c:	6819      	ldr	r1, [r3, #0]
 801946e:	f7f8 fee6 	bl	801223e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8019472:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8019476:	4618      	mov	r0, r3
 8019478:	f7ee faf7 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 801947c:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194
    printf("Comment: %s\n", comment);
 8019480:	f8d7 1194 	ldr.w	r1, [r7, #404]	@ 0x194
 8019484:	48a7      	ldr	r0, [pc, #668]	@ (8019724 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2f4>)
 8019486:	f00f ff3d 	bl	8029304 <iprintf>

    std::string pinCS = config["CS pin"];
 801948a:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 801948e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019492:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019496:	4aa4      	ldr	r2, [pc, #656]	@ (8019728 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2f8>)
 8019498:	6819      	ldr	r1, [r3, #0]
 801949a:	f7ee fac1 	bl	8007a20 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801949e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80194a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80194a6:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 80194aa:	4611      	mov	r1, r2
 80194ac:	4618      	mov	r0, r3
 80194ae:	f7fc f927 	bl	8015700 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    std::string pinMOSI = config["MOSI pin"];
 80194b2:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 80194b6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80194ba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80194be:	4a9b      	ldr	r2, [pc, #620]	@ (801972c <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2fc>)
 80194c0:	6819      	ldr	r1, [r3, #0]
 80194c2:	f7f7 feca 	bl	801125a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80194c6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80194ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80194ce:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 80194d2:	4611      	mov	r1, r2
 80194d4:	4618      	mov	r0, r3
 80194d6:	f7fc f913 	bl	8015700 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    std::string pinMISO = config["MISO pin"];
 80194da:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80194de:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80194e2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80194e6:	4a92      	ldr	r2, [pc, #584]	@ (8019730 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x300>)
 80194e8:	6819      	ldr	r1, [r3, #0]
 80194ea:	f7f7 feb6 	bl	801125a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80194ee:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80194f2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80194f6:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 80194fa:	4611      	mov	r1, r2
 80194fc:	4618      	mov	r0, r3
 80194fe:	f7fc f8ff 	bl	8015700 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    std::string pinSCK = config["SCK pin"];
 8019502:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8019506:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801950a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801950e:	4a89      	ldr	r2, [pc, #548]	@ (8019734 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x304>)
 8019510:	6819      	ldr	r1, [r3, #0]
 8019512:	f7f8 fe94 	bl	801223e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8019516:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801951a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 801951e:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 8019522:	4611      	mov	r1, r2
 8019524:	4618      	mov	r0, r3
 8019526:	f7fc f8eb 	bl	8015700 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    float RSense = config["RSense"];
 801952a:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 801952e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019532:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019536:	4a80      	ldr	r2, [pc, #512]	@ (8019738 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x308>)
 8019538:	6819      	ldr	r1, [r3, #0]
 801953a:	f7ee fa71 	bl	8007a20 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801953e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8019542:	4618      	mov	r0, r3
 8019544:	f7fc f8ea 	bl	801571c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>
 8019548:	eef0 7a40 	vmov.f32	s15, s0
 801954c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019550:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8019554:	edc3 7a00 	vstr	s15, [r3]
    uint8_t address = config["Address"];
 8019558:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 801955c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019560:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019564:	4a75      	ldr	r2, [pc, #468]	@ (801973c <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x30c>)
 8019566:	6819      	ldr	r1, [r3, #0]
 8019568:	f7f8 fe69 	bl	801223e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801956c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8019570:	4618      	mov	r0, r3
 8019572:	f7fe fdd9 	bl	8018128 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>
 8019576:	4603      	mov	r3, r0
 8019578:	461a      	mov	r2, r3
 801957a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801957e:	f2a3 1379 	subw	r3, r3, #377	@ 0x179
 8019582:	701a      	strb	r2, [r3, #0]
    uint16_t current = config["Current"];
 8019584:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8019588:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801958c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019590:	4a6b      	ldr	r2, [pc, #428]	@ (8019740 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x310>)
 8019592:	6819      	ldr	r1, [r3, #0]
 8019594:	f7f8 fe53 	bl	801223e <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8019598:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 801959c:	4618      	mov	r0, r3
 801959e:	f7fc f8cb 	bl	8015738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 80195a2:	4603      	mov	r3, r0
 80195a4:	461a      	mov	r2, r3
 80195a6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195aa:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80195ae:	801a      	strh	r2, [r3, #0]
    uint16_t microsteps = config["Microsteps"];
 80195b0:	f507 70a2 	add.w	r0, r7, #324	@ 0x144
 80195b4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195b8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80195bc:	4a61      	ldr	r2, [pc, #388]	@ (8019744 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x314>)
 80195be:	6819      	ldr	r1, [r3, #0]
 80195c0:	f7f5 fe5b 	bl	800f27a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80195c4:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80195c8:	4618      	mov	r0, r3
 80195ca:	f7fc f8b5 	bl	8015738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 80195ce:	4603      	mov	r3, r0
 80195d0:	461a      	mov	r2, r3
 80195d2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195d6:	f5a3 73bf 	sub.w	r3, r3, #382	@ 0x17e
 80195da:	801a      	strh	r2, [r3, #0]
    uint16_t stall = config["Stall sensitivity"];
 80195dc:	f507 70ae 	add.w	r0, r7, #348	@ 0x15c
 80195e0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195e4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80195e8:	4a57      	ldr	r2, [pc, #348]	@ (8019748 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x318>)
 80195ea:	6819      	ldr	r1, [r3, #0]
 80195ec:	f7fe fda8 	bl	8018140 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80195f0:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80195f4:	4618      	mov	r0, r3
 80195f6:	f7fc f89f 	bl	8015738 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 80195fa:	4603      	mov	r3, r0
 80195fc:	461a      	mov	r2, r3
 80195fe:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019602:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8019606:	801a      	strh	r2, [r3, #0]
    bool stealthchop = (strcmp(config["Stealth chop"], "on") == 0);
 8019608:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 801960c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019610:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019614:	4a4d      	ldr	r2, [pc, #308]	@ (801974c <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x31c>)
 8019616:	6819      	ldr	r1, [r3, #0]
 8019618:	f7fa fce6 	bl	8013fe8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801961c:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8019620:	4618      	mov	r0, r3
 8019622:	f7ee fa22 	bl	8007a6a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8019626:	4603      	mov	r3, r0
 8019628:	4949      	ldr	r1, [pc, #292]	@ (8019750 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x320>)
 801962a:	4618      	mov	r0, r3
 801962c:	f7e6 fe58 	bl	80002e0 <strcmp>
 8019630:	4603      	mov	r3, r0
 8019632:	2b00      	cmp	r3, #0
 8019634:	bf0c      	ite	eq
 8019636:	2301      	moveq	r3, #1
 8019638:	2300      	movne	r3, #0
 801963a:	b2da      	uxtb	r2, r3
 801963c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019640:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 8019644:	701a      	strb	r2, [r3, #0]

    return std::make_shared<TMC5160>(std::move(pinCS), std::move(pinMOSI), std::move(pinMISO), std::move(pinSCK), RSense, address, current, microsteps, stealthchop, stall, instance);
 8019646:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 801964a:	4618      	mov	r0, r3
 801964c:	f7f7 feb5 	bl	80113ba <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019650:	4604      	mov	r4, r0
 8019652:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8019656:	4618      	mov	r0, r3
 8019658:	f7f7 feaf 	bl	80113ba <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 801965c:	4605      	mov	r5, r0
 801965e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8019662:	4618      	mov	r0, r3
 8019664:	f7f7 fea9 	bl	80113ba <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019668:	4606      	mov	r6, r0
 801966a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801966e:	4618      	mov	r0, r3
 8019670:	f7f7 fea3 	bl	80113ba <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019674:	4602      	mov	r2, r0
 8019676:	f507 70c6 	add.w	r0, r7, #396	@ 0x18c
 801967a:	1d3b      	adds	r3, r7, #4
 801967c:	9307      	str	r3, [sp, #28]
 801967e:	f107 0318 	add.w	r3, r7, #24
 8019682:	9306      	str	r3, [sp, #24]
 8019684:	f107 0317 	add.w	r3, r7, #23
 8019688:	9305      	str	r3, [sp, #20]
 801968a:	f107 031a 	add.w	r3, r7, #26
 801968e:	9304      	str	r3, [sp, #16]
 8019690:	f107 031c 	add.w	r3, r7, #28
 8019694:	9303      	str	r3, [sp, #12]
 8019696:	f107 031f 	add.w	r3, r7, #31
 801969a:	9302      	str	r3, [sp, #8]
 801969c:	f107 0320 	add.w	r3, r7, #32
 80196a0:	9301      	str	r3, [sp, #4]
 80196a2:	9200      	str	r2, [sp, #0]
 80196a4:	4633      	mov	r3, r6
 80196a6:	462a      	mov	r2, r5
 80196a8:	4621      	mov	r1, r4
 80196aa:	f000 f999 	bl	80199e0 <_ZSt11make_sharedI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_RfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>
 80196ae:	f507 72c6 	add.w	r2, r7, #396	@ 0x18c
 80196b2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80196b6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80196ba:	4611      	mov	r1, r2
 80196bc:	6818      	ldr	r0, [r3, #0]
 80196be:	f000 f9df 	bl	8019a80 <_ZNSt10shared_ptrI6ModuleEC1I7TMC5160vEEOS_IT_E>
 80196c2:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 80196c6:	4618      	mov	r0, r3
 80196c8:	f7ff fea4 	bl	8019414 <_ZNSt10shared_ptrI7TMC5160ED1Ev>
}
 80196cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80196d0:	4618      	mov	r0, r3
 80196d2:	f00f f868 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80196d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80196da:	4618      	mov	r0, r3
 80196dc:	f00f f863 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80196e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80196e4:	4618      	mov	r0, r3
 80196e6:	f00f f85e 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80196ea:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80196ee:	4618      	mov	r0, r3
 80196f0:	f00f f859 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    return std::make_shared<TMC5160>(std::move(pinCS), std::move(pinMOSI), std::move(pinMISO), std::move(pinSCK), RSense, address, current, microsteps, stealthchop, stall, instance);
 80196f4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80196f8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80196fc:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8019700:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 8019704:	6812      	ldr	r2, [r2, #0]
 8019706:	601a      	str	r2, [r3, #0]
}
 8019708:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801970c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8019710:	6818      	ldr	r0, [r3, #0]
 8019712:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 8019716:	46bd      	mov	sp, r7
 8019718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801971a:	bf00      	nop
 801971c:	0802ae64 	.word	0x0802ae64
 8019720:	0802ae7c 	.word	0x0802ae7c
 8019724:	0802ae84 	.word	0x0802ae84
 8019728:	0802ae94 	.word	0x0802ae94
 801972c:	0802ae9c 	.word	0x0802ae9c
 8019730:	0802aea8 	.word	0x0802aea8
 8019734:	0802aeb4 	.word	0x0802aeb4
 8019738:	0802aebc 	.word	0x0802aebc
 801973c:	0802aec4 	.word	0x0802aec4
 8019740:	0802aecc 	.word	0x0802aecc
 8019744:	0802aed4 	.word	0x0802aed4
 8019748:	0802aee0 	.word	0x0802aee0
 801974c:	0802aef4 	.word	0x0802aef4
 8019750:	0802af04 	.word	0x0802af04

08019754 <_ZN7TMC5160C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_fhttbtP6Remora>:

TMC5160::TMC5160(std::string _pinCS, std::string _pinMOSI, std::string _pinMISO, std::string _pinSCK, float _Rsense, uint8_t _addr, uint16_t _mA, uint16_t _microsteps, bool _stealth, uint16_t _stall, Remora* _instance)
 8019754:	b5b0      	push	{r4, r5, r7, lr}
 8019756:	b088      	sub	sp, #32
 8019758:	af02      	add	r7, sp, #8
 801975a:	6178      	str	r0, [r7, #20]
 801975c:	6139      	str	r1, [r7, #16]
 801975e:	60fa      	str	r2, [r7, #12]
 8019760:	60bb      	str	r3, [r7, #8]
 8019762:	ed87 0a01 	vstr	s0, [r7, #4]
      addr(_addr),
      mA(_mA),
      microsteps(_microsteps),
      stealth(_stealth),
      stall(_stall),
      driver(std::make_unique<TMC5160Stepper>(pinCS, _Rsense, pinMISO, pinMOSI, pinSCK)) {}
 8019766:	697b      	ldr	r3, [r7, #20]
 8019768:	edd7 7a01 	vldr	s15, [r7, #4]
 801976c:	eeb0 0a67 	vmov.f32	s0, s15
 8019770:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019772:	4618      	mov	r0, r3
 8019774:	f7fb fbe2 	bl	8014f3c <_ZN3TMCC1EP6Remoraf>
 8019778:	4a2f      	ldr	r2, [pc, #188]	@ (8019838 <_ZN7TMC5160C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_fhttbtP6Remora+0xe4>)
 801977a:	697b      	ldr	r3, [r7, #20]
 801977c:	601a      	str	r2, [r3, #0]
      pinCS(std::move(_pinCS)),
 801977e:	697b      	ldr	r3, [r7, #20]
 8019780:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8019784:	6938      	ldr	r0, [r7, #16]
 8019786:	f7f7 fe18 	bl	80113ba <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 801978a:	4603      	mov	r3, r0
 801978c:	4619      	mov	r1, r3
 801978e:	4620      	mov	r0, r4
 8019790:	f00e ffea 	bl	8028768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	  pinMOSI(std::move(_pinMOSI)),
 8019794:	697b      	ldr	r3, [r7, #20]
 8019796:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 801979a:	68f8      	ldr	r0, [r7, #12]
 801979c:	f7f7 fe0d 	bl	80113ba <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80197a0:	4603      	mov	r3, r0
 80197a2:	4619      	mov	r1, r3
 80197a4:	4620      	mov	r0, r4
 80197a6:	f00e ffdf 	bl	8028768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	  pinMISO(std::move(_pinMISO)),
 80197aa:	697b      	ldr	r3, [r7, #20]
 80197ac:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 80197b0:	68b8      	ldr	r0, [r7, #8]
 80197b2:	f7f7 fe02 	bl	80113ba <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80197b6:	4603      	mov	r3, r0
 80197b8:	4619      	mov	r1, r3
 80197ba:	4620      	mov	r0, r4
 80197bc:	f00e ffd4 	bl	8028768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	  pinSCK(std::move(_pinSCK)),
 80197c0:	697b      	ldr	r3, [r7, #20]
 80197c2:	f103 0470 	add.w	r4, r3, #112	@ 0x70
 80197c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80197c8:	f7f7 fdf7 	bl	80113ba <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80197cc:	4603      	mov	r3, r0
 80197ce:	4619      	mov	r1, r3
 80197d0:	4620      	mov	r0, r4
 80197d2:	f00e ffc9 	bl	8028768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      addr(_addr),
 80197d6:	697b      	ldr	r3, [r7, #20]
 80197d8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80197dc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
      mA(_mA),
 80197e0:	697b      	ldr	r3, [r7, #20]
 80197e2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80197e4:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
      microsteps(_microsteps),
 80197e8:	697b      	ldr	r3, [r7, #20]
 80197ea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80197ec:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
      stealth(_stealth),
 80197f0:	697b      	ldr	r3, [r7, #20]
 80197f2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80197f6:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
      stall(_stall),
 80197fa:	697b      	ldr	r3, [r7, #20]
 80197fc:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80197fe:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
      driver(std::make_unique<TMC5160Stepper>(pinCS, _Rsense, pinMISO, pinMOSI, pinSCK)) {}
 8019802:	697b      	ldr	r3, [r7, #20]
 8019804:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8019808:	697b      	ldr	r3, [r7, #20]
 801980a:	f103 0558 	add.w	r5, r3, #88	@ 0x58
 801980e:	697b      	ldr	r3, [r7, #20]
 8019810:	3340      	adds	r3, #64	@ 0x40
 8019812:	697a      	ldr	r2, [r7, #20]
 8019814:	3270      	adds	r2, #112	@ 0x70
 8019816:	6979      	ldr	r1, [r7, #20]
 8019818:	f101 0094 	add.w	r0, r1, #148	@ 0x94
 801981c:	1d39      	adds	r1, r7, #4
 801981e:	9201      	str	r2, [sp, #4]
 8019820:	9300      	str	r3, [sp, #0]
 8019822:	462b      	mov	r3, r5
 8019824:	460a      	mov	r2, r1
 8019826:	4621      	mov	r1, r4
 8019828:	f000 f93d 	bl	8019aa6 <_ZSt11make_uniqueI14TMC5160StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfS7_S7_S7_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 801982c:	697b      	ldr	r3, [r7, #20]
 801982e:	4618      	mov	r0, r3
 8019830:	3718      	adds	r7, #24
 8019832:	46bd      	mov	sp, r7
 8019834:	bdb0      	pop	{r4, r5, r7, pc}
 8019836:	bf00      	nop
 8019838:	0802b640 	.word	0x0802b640

0801983c <_ZN7TMC51609configureEv>:


void TMC5160::configure()
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b084      	sub	sp, #16
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
    driver->begin();
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	3394      	adds	r3, #148	@ 0x94
 8019848:	4618      	mov	r0, r3
 801984a:	f000 f98a 	bl	8019b62 <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 801984e:	4603      	mov	r3, r0
 8019850:	4618      	mov	r0, r3
 8019852:	f7ea fed5 	bl	8004600 <_ZN14TMC5130Stepper5beginEv>

    printf("Testing connection to TMC driver... ");
 8019856:	4855      	ldr	r0, [pc, #340]	@ (80199ac <_ZN7TMC51609configureEv+0x170>)
 8019858:	f00f fd54 	bl	8029304 <iprintf>
    uint16_t result = driver->test_connection();
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	3394      	adds	r3, #148	@ 0x94
 8019860:	4618      	mov	r0, r3
 8019862:	f000 f97e 	bl	8019b62 <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019866:	4603      	mov	r3, r0
 8019868:	4618      	mov	r0, r3
 801986a:	f7eb f86d 	bl	8004948 <_ZN10TMCStepper15test_connectionEv>
 801986e:	4603      	mov	r3, r0
 8019870:	81fb      	strh	r3, [r7, #14]
    
    if (result) {
 8019872:	89fb      	ldrh	r3, [r7, #14]
 8019874:	2b00      	cmp	r3, #0
 8019876:	d018      	beq.n	80198aa <_ZN7TMC51609configureEv+0x6e>
        printf("Failed!\nLikely cause: ");
 8019878:	484d      	ldr	r0, [pc, #308]	@ (80199b0 <_ZN7TMC51609configureEv+0x174>)
 801987a:	f00f fd43 	bl	8029304 <iprintf>
        switch(result) {
 801987e:	89fb      	ldrh	r3, [r7, #14]
 8019880:	2b01      	cmp	r3, #1
 8019882:	d002      	beq.n	801988a <_ZN7TMC51609configureEv+0x4e>
 8019884:	2b02      	cmp	r3, #2
 8019886:	d004      	beq.n	8019892 <_ZN7TMC51609configureEv+0x56>
 8019888:	e007      	b.n	801989a <_ZN7TMC51609configureEv+0x5e>
            case 1: printf("Loose connection\n"); break;
 801988a:	484a      	ldr	r0, [pc, #296]	@ (80199b4 <_ZN7TMC51609configureEv+0x178>)
 801988c:	f00f fdaa 	bl	80293e4 <puts>
 8019890:	e007      	b.n	80198a2 <_ZN7TMC51609configureEv+0x66>
            case 2: printf("No power\n"); break;
 8019892:	4849      	ldr	r0, [pc, #292]	@ (80199b8 <_ZN7TMC51609configureEv+0x17c>)
 8019894:	f00f fda6 	bl	80293e4 <puts>
 8019898:	e003      	b.n	80198a2 <_ZN7TMC51609configureEv+0x66>
            default: printf("Unknown issue\n"); break;
 801989a:	4848      	ldr	r0, [pc, #288]	@ (80199bc <_ZN7TMC51609configureEv+0x180>)
 801989c:	f00f fda2 	bl	80293e4 <puts>
 80198a0:	bf00      	nop
        }
        printf("Fix the problem and reset the board.\n");
 80198a2:	4847      	ldr	r0, [pc, #284]	@ (80199c0 <_ZN7TMC51609configureEv+0x184>)
 80198a4:	f00f fd9e 	bl	80293e4 <puts>
 80198a8:	e002      	b.n	80198b0 <_ZN7TMC51609configureEv+0x74>
    } else {
        printf("OK\n");
 80198aa:	4846      	ldr	r0, [pc, #280]	@ (80199c4 <_ZN7TMC51609configureEv+0x188>)
 80198ac:	f00f fd9a 	bl	80293e4 <puts>
    }

    // Configure driver settings
    driver->toff(TOFF_VALUE);
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	3394      	adds	r3, #148	@ 0x94
 80198b4:	4618      	mov	r0, r3
 80198b6:	f000 f954 	bl	8019b62 <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 80198ba:	4603      	mov	r3, r0
 80198bc:	2104      	movs	r1, #4
 80198be:	4618      	mov	r0, r3
 80198c0:	f7e8 ffee 	bl	80028a0 <_ZN14TMC2130Stepper4toffEh>
    driver->blank_time(24);
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	3394      	adds	r3, #148	@ 0x94
 80198c8:	4618      	mov	r0, r3
 80198ca:	f000 f94a 	bl	8019b62 <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 80198ce:	4603      	mov	r3, r0
 80198d0:	2118      	movs	r1, #24
 80198d2:	4618      	mov	r0, r3
 80198d4:	f7eb f904 	bl	8004ae0 <_ZN10TMCStepper10blank_timeEh>
    driver->rms_current(mA);
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	3394      	adds	r3, #148	@ 0x94
 80198dc:	4618      	mov	r0, r3
 80198de:	f000 f940 	bl	8019b62 <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 80198e2:	4602      	mov	r2, r0
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 80198ea:	4619      	mov	r1, r3
 80198ec:	4610      	mov	r0, r2
 80198ee:	f7ff fd73 	bl	80193d8 <_ZN14TMC5160Stepper11rms_currentEt>
    driver->microsteps(microsteps);
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	3394      	adds	r3, #148	@ 0x94
 80198f6:	4618      	mov	r0, r3
 80198f8:	f000 f933 	bl	8019b62 <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 80198fc:	4603      	mov	r3, r0
 80198fe:	461a      	mov	r2, r3
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8019906:	4619      	mov	r1, r3
 8019908:	4610      	mov	r0, r2
 801990a:	f7eb f839 	bl	8004980 <_ZN10TMCStepper10microstepsEt>
    driver->TCOOLTHRS(0xFFFFF);  // 20-bit max threshold for smart energy CoolStep
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	3394      	adds	r3, #148	@ 0x94
 8019912:	4618      	mov	r0, r3
 8019914:	f000 f925 	bl	8019b62 <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019918:	4603      	mov	r3, r0
 801991a:	492b      	ldr	r1, [pc, #172]	@ (80199c8 <_ZN7TMC51609configureEv+0x18c>)
 801991c:	4618      	mov	r0, r3
 801991e:	f7e9 ff22 	bl	8003766 <_ZN14TMC2130Stepper9TCOOLTHRSEm>
    driver->semin(5);             // CoolStep lower threshold
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	3394      	adds	r3, #148	@ 0x94
 8019926:	4618      	mov	r0, r3
 8019928:	f000 f91b 	bl	8019b62 <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 801992c:	4603      	mov	r3, r0
 801992e:	2105      	movs	r1, #5
 8019930:	4618      	mov	r0, r3
 8019932:	f7e9 fa75 	bl	8002e20 <_ZN14TMC2130Stepper5seminEh>
    driver->semax(2);             // CoolStep upper threshold
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	3394      	adds	r3, #148	@ 0x94
 801993a:	4618      	mov	r0, r3
 801993c:	f000 f911 	bl	8019b62 <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019940:	4603      	mov	r3, r0
 8019942:	2102      	movs	r1, #2
 8019944:	4618      	mov	r0, r3
 8019946:	f7e9 fa90 	bl	8002e6a <_ZN14TMC2130Stepper5semaxEh>
    driver->sedn(0b01);           // CoolStep decrement rate
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	3394      	adds	r3, #148	@ 0x94
 801994e:	4618      	mov	r0, r3
 8019950:	f000 f907 	bl	8019b62 <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019954:	4603      	mov	r3, r0
 8019956:	2101      	movs	r1, #1
 8019958:	4618      	mov	r0, r3
 801995a:	f7e9 faab 	bl	8002eb4 <_ZN14TMC2130Stepper4sednEh>
    //driver->en_spreadCycle(!stealth);
    driver->pwm_autoscale(true);
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	3394      	adds	r3, #148	@ 0x94
 8019962:	4618      	mov	r0, r3
 8019964:	f000 f8fd 	bl	8019b62 <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019968:	4603      	mov	r3, r0
 801996a:	2101      	movs	r1, #1
 801996c:	4618      	mov	r0, r3
 801996e:	f7e9 fc5a 	bl	8003226 <_ZN14TMC2160Stepper13pwm_autoscaleEb>

    if (stealth && stall) {
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8019978:	2b00      	cmp	r3, #0
        // StallGuard sensitivity threshold (higher = more sensitive)
        //driver->SGTHRS(stall);
    }

    driver->iholddelay(10);
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	3394      	adds	r3, #148	@ 0x94
 801997e:	4618      	mov	r0, r3
 8019980:	f000 f8ef 	bl	8019b62 <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019984:	4603      	mov	r3, r0
 8019986:	210a      	movs	r1, #10
 8019988:	4618      	mov	r0, r3
 801998a:	f7e9 fc19 	bl	80031c0 <_ZN10TMCStepper10iholddelayEh>
    driver->TPOWERDOWN(128);  // ~2s until driver lowers to hold current
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	3394      	adds	r3, #148	@ 0x94
 8019992:	4618      	mov	r0, r3
 8019994:	f000 f8e5 	bl	8019b62 <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019998:	4603      	mov	r3, r0
 801999a:	2180      	movs	r1, #128	@ 0x80
 801999c:	4618      	mov	r0, r3
 801999e:	f7eb f8d7 	bl	8004b50 <_ZN10TMCStepper10TPOWERDOWNEh>
}
 80199a2:	bf00      	nop
 80199a4:	3710      	adds	r7, #16
 80199a6:	46bd      	mov	sp, r7
 80199a8:	bd80      	pop	{r7, pc}
 80199aa:	bf00      	nop
 80199ac:	0802af08 	.word	0x0802af08
 80199b0:	0802af30 	.word	0x0802af30
 80199b4:	0802af48 	.word	0x0802af48
 80199b8:	0802af5c 	.word	0x0802af5c
 80199bc:	0802af68 	.word	0x0802af68
 80199c0:	0802af78 	.word	0x0802af78
 80199c4:	0802afa0 	.word	0x0802afa0
 80199c8:	000fffff 	.word	0x000fffff

080199cc <_ZN7TMC51606updateEv>:

void TMC5160::update(){}
 80199cc:	b480      	push	{r7}
 80199ce:	b083      	sub	sp, #12
 80199d0:	af00      	add	r7, sp, #0
 80199d2:	6078      	str	r0, [r7, #4]
 80199d4:	bf00      	nop
 80199d6:	370c      	adds	r7, #12
 80199d8:	46bd      	mov	sp, r7
 80199da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199de:	4770      	bx	lr

080199e0 <_ZSt11make_sharedI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_RfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 80199e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199e4:	b096      	sub	sp, #88	@ 0x58
 80199e6:	af0a      	add	r7, sp, #40	@ 0x28
 80199e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80199ea:	6239      	str	r1, [r7, #32]
 80199ec:	61fa      	str	r2, [r7, #28]
 80199ee:	61bb      	str	r3, [r7, #24]
			     std::forward<_Args>(__args)...);
 80199f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80199f4:	469a      	mov	sl, r3
 80199f6:	6a38      	ldr	r0, [r7, #32]
 80199f8:	f7fc f826 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80199fc:	4680      	mov	r8, r0
 80199fe:	69f8      	ldr	r0, [r7, #28]
 8019a00:	f7fc f822 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019a04:	4681      	mov	r9, r0
 8019a06:	69b8      	ldr	r0, [r7, #24]
 8019a08:	f7fc f81e 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019a0c:	4604      	mov	r4, r0
 8019a0e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8019a10:	f7fc f81a 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019a14:	4605      	mov	r5, r0
 8019a16:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019a18:	f7fc f821 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019a1c:	4606      	mov	r6, r0
 8019a1e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019a20:	f7fe fcb2 	bl	8018388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8019a24:	6178      	str	r0, [r7, #20]
 8019a26:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8019a28:	f7fc f824 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019a2c:	6138      	str	r0, [r7, #16]
 8019a2e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8019a30:	f7fc f820 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019a34:	60f8      	str	r0, [r7, #12]
 8019a36:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8019a38:	f7f7 fd0f 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8019a3c:	60b8      	str	r0, [r7, #8]
 8019a3e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8019a40:	f7fc f818 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019a44:	6078      	str	r0, [r7, #4]
 8019a46:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8019a48:	f7fc f81f 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	9308      	str	r3, [sp, #32]
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	9307      	str	r3, [sp, #28]
 8019a54:	68bb      	ldr	r3, [r7, #8]
 8019a56:	9306      	str	r3, [sp, #24]
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	9305      	str	r3, [sp, #20]
 8019a5c:	693b      	ldr	r3, [r7, #16]
 8019a5e:	9304      	str	r3, [sp, #16]
 8019a60:	697b      	ldr	r3, [r7, #20]
 8019a62:	9303      	str	r3, [sp, #12]
 8019a64:	9602      	str	r6, [sp, #8]
 8019a66:	9501      	str	r5, [sp, #4]
 8019a68:	9400      	str	r4, [sp, #0]
 8019a6a:	464b      	mov	r3, r9
 8019a6c:	4642      	mov	r2, r8
 8019a6e:	4651      	mov	r1, sl
 8019a70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019a72:	f000 f882 	bl	8019b7a <_ZNSt10shared_ptrI7TMC5160EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_RfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8019a76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019a78:	3730      	adds	r7, #48	@ 0x30
 8019a7a:	46bd      	mov	sp, r7
 8019a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019a80 <_ZNSt10shared_ptrI6ModuleEC1I7TMC5160vEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8019a80:	b590      	push	{r4, r7, lr}
 8019a82:	b083      	sub	sp, #12
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
 8019a88:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8019a8a:	687c      	ldr	r4, [r7, #4]
 8019a8c:	6838      	ldr	r0, [r7, #0]
 8019a8e:	f000 f8c4 	bl	8019c1a <_ZSt4moveIRSt10shared_ptrI7TMC5160EEONSt16remove_referenceIT_E4typeEOS5_>
 8019a92:	4603      	mov	r3, r0
 8019a94:	4619      	mov	r1, r3
 8019a96:	4620      	mov	r0, r4
 8019a98:	f000 f8ca 	bl	8019c30 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC5160vEEOS_IT_LS2_0EE>
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	4618      	mov	r0, r3
 8019aa0:	370c      	adds	r7, #12
 8019aa2:	46bd      	mov	sp, r7
 8019aa4:	bd90      	pop	{r4, r7, pc}

08019aa6 <_ZSt11make_uniqueI14TMC5160StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfS7_S7_S7_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8019aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019aaa:	ed2d 8b02 	vpush	{d8}
 8019aae:	b086      	sub	sp, #24
 8019ab0:	af02      	add	r7, sp, #8
 8019ab2:	60f8      	str	r0, [r7, #12]
 8019ab4:	60b9      	str	r1, [r7, #8]
 8019ab6:	607a      	str	r2, [r7, #4]
 8019ab8:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8019aba:	20b8      	movs	r0, #184	@ 0xb8
 8019abc:	f00e fd78 	bl	80285b0 <_Znwj>
 8019ac0:	4603      	mov	r3, r0
 8019ac2:	461c      	mov	r4, r3
 8019ac4:	68b8      	ldr	r0, [r7, #8]
 8019ac6:	f7f5 fdd9 	bl	800f67c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019aca:	4605      	mov	r5, r0
 8019acc:	6878      	ldr	r0, [r7, #4]
 8019ace:	f7fb ffc6 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019ad2:	4603      	mov	r3, r0
 8019ad4:	ed93 8a00 	vldr	s16, [r3]
 8019ad8:	6838      	ldr	r0, [r7, #0]
 8019ada:	f7f5 fdcf 	bl	800f67c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019ade:	4606      	mov	r6, r0
 8019ae0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019ae2:	f7f5 fdcb 	bl	800f67c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019ae6:	4680      	mov	r8, r0
 8019ae8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8019aea:	f7f5 fdc7 	bl	800f67c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019aee:	4603      	mov	r3, r0
 8019af0:	f04f 32ff 	mov.w	r2, #4294967295
 8019af4:	9201      	str	r2, [sp, #4]
 8019af6:	9300      	str	r3, [sp, #0]
 8019af8:	4643      	mov	r3, r8
 8019afa:	4632      	mov	r2, r6
 8019afc:	eeb0 0a48 	vmov.f32	s0, s16
 8019b00:	4629      	mov	r1, r5
 8019b02:	4620      	mov	r0, r4
 8019b04:	f7ea fdd0 	bl	80046a8 <_ZN14TMC5160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>
 8019b08:	4621      	mov	r1, r4
 8019b0a:	68f8      	ldr	r0, [r7, #12]
 8019b0c:	f000 f8be 	bl	8019c8c <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8019b10:	68f8      	ldr	r0, [r7, #12]
 8019b12:	3710      	adds	r7, #16
 8019b14:	46bd      	mov	sp, r7
 8019b16:	ecbd 8b02 	vpop	{d8}
 8019b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019b1e <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8019b1e:	b590      	push	{r4, r7, lr}
 8019b20:	b085      	sub	sp, #20
 8019b22:	af00      	add	r7, sp, #0
 8019b24:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	4618      	mov	r0, r3
 8019b2a:	f000 f8be 	bl	8019caa <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8019b2e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d00c      	beq.n	8019b52 <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8019b38:	6878      	ldr	r0, [r7, #4]
 8019b3a:	f000 f8c3 	bl	8019cc4 <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EE11get_deleterEv>
 8019b3e:	4604      	mov	r4, r0
 8019b40:	68f8      	ldr	r0, [r7, #12]
 8019b42:	f000 f8cc 	bl	8019cde <_ZSt4moveIRP14TMC5160StepperEONSt16remove_referenceIT_E4typeEOS4_>
 8019b46:	4603      	mov	r3, r0
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	4619      	mov	r1, r3
 8019b4c:	4620      	mov	r0, r4
 8019b4e:	f000 f91b 	bl	8019d88 <_ZNKSt14default_deleteI14TMC5160StepperEclEPS0_>
	__ptr = pointer();
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	2200      	movs	r2, #0
 8019b56:	601a      	str	r2, [r3, #0]
      }
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	4618      	mov	r0, r3
 8019b5c:	3714      	adds	r7, #20
 8019b5e:	46bd      	mov	sp, r7
 8019b60:	bd90      	pop	{r4, r7, pc}

08019b62 <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8019b62:	b580      	push	{r7, lr}
 8019b64:	b082      	sub	sp, #8
 8019b66:	af00      	add	r7, sp, #0
 8019b68:	6078      	str	r0, [r7, #4]
	return get();
 8019b6a:	6878      	ldr	r0, [r7, #4]
 8019b6c:	f000 f91f 	bl	8019dae <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EE3getEv>
 8019b70:	4603      	mov	r3, r0
      }
 8019b72:	4618      	mov	r0, r3
 8019b74:	3708      	adds	r7, #8
 8019b76:	46bd      	mov	sp, r7
 8019b78:	bd80      	pop	{r7, pc}

08019b7a <_ZNSt10shared_ptrI7TMC5160EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_RfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8019b7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b7e:	b095      	sub	sp, #84	@ 0x54
 8019b80:	af0a      	add	r7, sp, #40	@ 0x28
 8019b82:	6278      	str	r0, [r7, #36]	@ 0x24
 8019b84:	6239      	str	r1, [r7, #32]
 8019b86:	61fa      	str	r2, [r7, #28]
 8019b88:	61bb      	str	r3, [r7, #24]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8019b8a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8019b8c:	69f8      	ldr	r0, [r7, #28]
 8019b8e:	f7fb ff5b 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019b92:	4680      	mov	r8, r0
 8019b94:	69b8      	ldr	r0, [r7, #24]
 8019b96:	f7fb ff57 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019b9a:	4681      	mov	r9, r0
 8019b9c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8019b9e:	f7fb ff53 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019ba2:	4605      	mov	r5, r0
 8019ba4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8019ba6:	f7fb ff4f 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019baa:	4606      	mov	r6, r0
 8019bac:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8019bae:	f7fb ff56 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019bb2:	6178      	str	r0, [r7, #20]
 8019bb4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019bb6:	f7fe fbe7 	bl	8018388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8019bba:	6138      	str	r0, [r7, #16]
 8019bbc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019bbe:	f7fb ff59 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019bc2:	60f8      	str	r0, [r7, #12]
 8019bc4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8019bc6:	f7fb ff55 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019bca:	60b8      	str	r0, [r7, #8]
 8019bcc:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8019bce:	f7f7 fc44 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8019bd2:	6078      	str	r0, [r7, #4]
 8019bd4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8019bd6:	f7fb ff4d 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019bda:	6038      	str	r0, [r7, #0]
 8019bdc:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8019bde:	f7fb ff54 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019be2:	4603      	mov	r3, r0
 8019be4:	9308      	str	r3, [sp, #32]
 8019be6:	683b      	ldr	r3, [r7, #0]
 8019be8:	9307      	str	r3, [sp, #28]
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	9306      	str	r3, [sp, #24]
 8019bee:	68bb      	ldr	r3, [r7, #8]
 8019bf0:	9305      	str	r3, [sp, #20]
 8019bf2:	68fb      	ldr	r3, [r7, #12]
 8019bf4:	9304      	str	r3, [sp, #16]
 8019bf6:	693b      	ldr	r3, [r7, #16]
 8019bf8:	9303      	str	r3, [sp, #12]
 8019bfa:	697b      	ldr	r3, [r7, #20]
 8019bfc:	9302      	str	r3, [sp, #8]
 8019bfe:	9601      	str	r6, [sp, #4]
 8019c00:	9500      	str	r5, [sp, #0]
 8019c02:	464b      	mov	r3, r9
 8019c04:	4642      	mov	r2, r8
 8019c06:	6a39      	ldr	r1, [r7, #32]
 8019c08:	4620      	mov	r0, r4
 8019c0a:	f000 f8dd 	bl	8019dc8 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8019c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c10:	4618      	mov	r0, r3
 8019c12:	372c      	adds	r7, #44	@ 0x2c
 8019c14:	46bd      	mov	sp, r7
 8019c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08019c1a <_ZSt4moveIRSt10shared_ptrI7TMC5160EEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8019c1a:	b480      	push	{r7}
 8019c1c:	b083      	sub	sp, #12
 8019c1e:	af00      	add	r7, sp, #0
 8019c20:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	4618      	mov	r0, r3
 8019c26:	370c      	adds	r7, #12
 8019c28:	46bd      	mov	sp, r7
 8019c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c2e:	4770      	bx	lr

08019c30 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC5160vEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8019c30:	b580      	push	{r7, lr}
 8019c32:	b082      	sub	sp, #8
 8019c34:	af00      	add	r7, sp, #0
 8019c36:	6078      	str	r0, [r7, #4]
 8019c38:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8019c3a:	683b      	ldr	r3, [r7, #0]
 8019c3c:	681a      	ldr	r2, [r3, #0]
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	601a      	str	r2, [r3, #0]
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	3304      	adds	r3, #4
 8019c46:	4618      	mov	r0, r3
 8019c48:	f7f3 fa56 	bl	800d0f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	1d1a      	adds	r2, r3, #4
 8019c50:	683b      	ldr	r3, [r7, #0]
 8019c52:	3304      	adds	r3, #4
 8019c54:	4619      	mov	r1, r3
 8019c56:	4610      	mov	r0, r2
 8019c58:	f7f3 fe0d 	bl	800d876 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 8019c5c:	683b      	ldr	r3, [r7, #0]
 8019c5e:	2200      	movs	r2, #0
 8019c60:	601a      	str	r2, [r3, #0]
	}
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	4618      	mov	r0, r3
 8019c66:	3708      	adds	r7, #8
 8019c68:	46bd      	mov	sp, r7
 8019c6a:	bd80      	pop	{r7, pc}

08019c6c <_ZNSt15__uniq_ptr_dataI14TMC5160StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b082      	sub	sp, #8
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
 8019c74:	6039      	str	r1, [r7, #0]
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	683a      	ldr	r2, [r7, #0]
 8019c7a:	4611      	mov	r1, r2
 8019c7c:	4618      	mov	r0, r3
 8019c7e:	f000 f901 	bl	8019e84 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EEC1EPS0_>
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	4618      	mov	r0, r3
 8019c86:	3708      	adds	r7, #8
 8019c88:	46bd      	mov	sp, r7
 8019c8a:	bd80      	pop	{r7, pc}

08019c8c <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8019c8c:	b580      	push	{r7, lr}
 8019c8e:	b082      	sub	sp, #8
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
 8019c94:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	6839      	ldr	r1, [r7, #0]
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	f7ff ffe6 	bl	8019c6c <_ZNSt15__uniq_ptr_dataI14TMC5160StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	4618      	mov	r0, r3
 8019ca4:	3708      	adds	r7, #8
 8019ca6:	46bd      	mov	sp, r7
 8019ca8:	bd80      	pop	{r7, pc}

08019caa <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8019caa:	b580      	push	{r7, lr}
 8019cac:	b082      	sub	sp, #8
 8019cae:	af00      	add	r7, sp, #0
 8019cb0:	6078      	str	r0, [r7, #4]
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	4618      	mov	r0, r3
 8019cb6:	f000 f8f9 	bl	8019eac <_ZSt3getILj0EJP14TMC5160StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8019cba:	4603      	mov	r3, r0
 8019cbc:	4618      	mov	r0, r3
 8019cbe:	3708      	adds	r7, #8
 8019cc0:	46bd      	mov	sp, r7
 8019cc2:	bd80      	pop	{r7, pc}

08019cc4 <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8019cc4:	b580      	push	{r7, lr}
 8019cc6:	b082      	sub	sp, #8
 8019cc8:	af00      	add	r7, sp, #0
 8019cca:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	4618      	mov	r0, r3
 8019cd0:	f000 f8f9 	bl	8019ec6 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE10_M_deleterEv>
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	4618      	mov	r0, r3
 8019cd8:	3708      	adds	r7, #8
 8019cda:	46bd      	mov	sp, r7
 8019cdc:	bd80      	pop	{r7, pc}

08019cde <_ZSt4moveIRP14TMC5160StepperEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8019cde:	b480      	push	{r7}
 8019ce0:	b083      	sub	sp, #12
 8019ce2:	af00      	add	r7, sp, #0
 8019ce4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	4618      	mov	r0, r3
 8019cea:	370c      	adds	r7, #12
 8019cec:	46bd      	mov	sp, r7
 8019cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cf2:	4770      	bx	lr

08019cf4 <_ZN14TMC2130StepperD1Ev>:
class TMC2130Stepper : public TMCStepper {
 8019cf4:	b580      	push	{r7, lr}
 8019cf6:	b082      	sub	sp, #8
 8019cf8:	af00      	add	r7, sp, #0
 8019cfa:	6078      	str	r0, [r7, #4]
 8019cfc:	4a06      	ldr	r2, [pc, #24]	@ (8019d18 <_ZN14TMC2130StepperD1Ev+0x24>)
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	601a      	str	r2, [r3, #0]
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	3334      	adds	r3, #52	@ 0x34
 8019d06:	4618      	mov	r0, r3
 8019d08:	f7f5 fd07 	bl	800f71a <_ZN3PinD1Ev>
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	4618      	mov	r0, r3
 8019d10:	3708      	adds	r7, #8
 8019d12:	46bd      	mov	sp, r7
 8019d14:	bd80      	pop	{r7, pc}
 8019d16:	bf00      	nop
 8019d18:	0802b150 	.word	0x0802b150

08019d1c <_ZN14TMC2160StepperD1Ev>:
class TMC2160Stepper : public TMC2130Stepper {
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	b082      	sub	sp, #8
 8019d20:	af00      	add	r7, sp, #0
 8019d22:	6078      	str	r0, [r7, #4]
 8019d24:	4a05      	ldr	r2, [pc, #20]	@ (8019d3c <_ZN14TMC2160StepperD1Ev+0x20>)
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	601a      	str	r2, [r3, #0]
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	4618      	mov	r0, r3
 8019d2e:	f7ff ffe1 	bl	8019cf4 <_ZN14TMC2130StepperD1Ev>
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	4618      	mov	r0, r3
 8019d36:	3708      	adds	r7, #8
 8019d38:	46bd      	mov	sp, r7
 8019d3a:	bd80      	pop	{r7, pc}
 8019d3c:	0802b1c8 	.word	0x0802b1c8

08019d40 <_ZN14TMC5130StepperD1Ev>:
class TMC5130Stepper : public TMC2160Stepper {
 8019d40:	b580      	push	{r7, lr}
 8019d42:	b082      	sub	sp, #8
 8019d44:	af00      	add	r7, sp, #0
 8019d46:	6078      	str	r0, [r7, #4]
 8019d48:	4a05      	ldr	r2, [pc, #20]	@ (8019d60 <_ZN14TMC5130StepperD1Ev+0x20>)
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	601a      	str	r2, [r3, #0]
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	4618      	mov	r0, r3
 8019d52:	f7ff ffe3 	bl	8019d1c <_ZN14TMC2160StepperD1Ev>
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	4618      	mov	r0, r3
 8019d5a:	3708      	adds	r7, #8
 8019d5c:	46bd      	mov	sp, r7
 8019d5e:	bd80      	pop	{r7, pc}
 8019d60:	0802b204 	.word	0x0802b204

08019d64 <_ZN14TMC5160StepperD1Ev>:
class TMC5160Stepper : public TMC5130Stepper {
 8019d64:	b580      	push	{r7, lr}
 8019d66:	b082      	sub	sp, #8
 8019d68:	af00      	add	r7, sp, #0
 8019d6a:	6078      	str	r0, [r7, #4]
 8019d6c:	4a05      	ldr	r2, [pc, #20]	@ (8019d84 <_ZN14TMC5160StepperD1Ev+0x20>)
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	601a      	str	r2, [r3, #0]
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	4618      	mov	r0, r3
 8019d76:	f7ff ffe3 	bl	8019d40 <_ZN14TMC5130StepperD1Ev>
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	3708      	adds	r7, #8
 8019d80:	46bd      	mov	sp, r7
 8019d82:	bd80      	pop	{r7, pc}
 8019d84:	0802b240 	.word	0x0802b240

08019d88 <_ZNKSt14default_deleteI14TMC5160StepperEclEPS0_>:
      operator()(_Tp* __ptr) const
 8019d88:	b590      	push	{r4, r7, lr}
 8019d8a:	b083      	sub	sp, #12
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	6078      	str	r0, [r7, #4]
 8019d90:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8019d92:	683c      	ldr	r4, [r7, #0]
 8019d94:	2c00      	cmp	r4, #0
 8019d96:	d006      	beq.n	8019da6 <_ZNKSt14default_deleteI14TMC5160StepperEclEPS0_+0x1e>
 8019d98:	4620      	mov	r0, r4
 8019d9a:	f7ff ffe3 	bl	8019d64 <_ZN14TMC5160StepperD1Ev>
 8019d9e:	21b8      	movs	r1, #184	@ 0xb8
 8019da0:	4620      	mov	r0, r4
 8019da2:	f00e fbf4 	bl	802858e <_ZdlPvj>
      }
 8019da6:	bf00      	nop
 8019da8:	370c      	adds	r7, #12
 8019daa:	46bd      	mov	sp, r7
 8019dac:	bd90      	pop	{r4, r7, pc}

08019dae <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8019dae:	b580      	push	{r7, lr}
 8019db0:	b082      	sub	sp, #8
 8019db2:	af00      	add	r7, sp, #0
 8019db4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	4618      	mov	r0, r3
 8019dba:	f000 f891 	bl	8019ee0 <_ZNKSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	4618      	mov	r0, r3
 8019dc2:	3708      	adds	r7, #8
 8019dc4:	46bd      	mov	sp, r7
 8019dc6:	bd80      	pop	{r7, pc}

08019dc8 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8019dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dcc:	b096      	sub	sp, #88	@ 0x58
 8019dce:	af0a      	add	r7, sp, #40	@ 0x28
 8019dd0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8019dd2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8019dd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8019dd6:	623b      	str	r3, [r7, #32]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8019dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019dda:	2200      	movs	r2, #0
 8019ddc:	601a      	str	r2, [r3, #0]
 8019dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019de0:	1d1d      	adds	r5, r3, #4
 8019de2:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 8019de4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019de6:	f7fb fe2f 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019dea:	4680      	mov	r8, r0
 8019dec:	6a38      	ldr	r0, [r7, #32]
 8019dee:	f7fb fe2b 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019df2:	61f8      	str	r0, [r7, #28]
 8019df4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8019df6:	f7fb fe27 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019dfa:	61b8      	str	r0, [r7, #24]
 8019dfc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8019dfe:	f7fb fe23 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019e02:	6178      	str	r0, [r7, #20]
 8019e04:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8019e06:	f7fb fe2a 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019e0a:	6138      	str	r0, [r7, #16]
 8019e0c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019e0e:	f7fe fabb 	bl	8018388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8019e12:	60f8      	str	r0, [r7, #12]
 8019e14:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019e16:	f7fb fe2d 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019e1a:	60b8      	str	r0, [r7, #8]
 8019e1c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8019e1e:	f7fb fe29 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019e22:	6078      	str	r0, [r7, #4]
 8019e24:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8019e26:	f7f7 fb18 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8019e2a:	6038      	str	r0, [r7, #0]
 8019e2c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8019e2e:	f7fb fe21 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019e32:	4604      	mov	r4, r0
 8019e34:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8019e36:	f7fb fe28 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019e3a:	4603      	mov	r3, r0
 8019e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8019e3e:	9408      	str	r4, [sp, #32]
 8019e40:	683b      	ldr	r3, [r7, #0]
 8019e42:	9307      	str	r3, [sp, #28]
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	9306      	str	r3, [sp, #24]
 8019e48:	68bb      	ldr	r3, [r7, #8]
 8019e4a:	9305      	str	r3, [sp, #20]
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	9304      	str	r3, [sp, #16]
 8019e50:	693b      	ldr	r3, [r7, #16]
 8019e52:	9303      	str	r3, [sp, #12]
 8019e54:	697b      	ldr	r3, [r7, #20]
 8019e56:	9302      	str	r3, [sp, #8]
 8019e58:	69bb      	ldr	r3, [r7, #24]
 8019e5a:	9301      	str	r3, [sp, #4]
 8019e5c:	69fb      	ldr	r3, [r7, #28]
 8019e5e:	9300      	str	r3, [sp, #0]
 8019e60:	4643      	mov	r3, r8
 8019e62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019e64:	4631      	mov	r1, r6
 8019e66:	4628      	mov	r0, r5
 8019e68:	f000 f848 	bl	8019efc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC5160SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8019e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	4619      	mov	r1, r3
 8019e72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019e74:	f000 f8c8 	bl	801a008 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8019e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	3730      	adds	r7, #48	@ 0x30
 8019e7e:	46bd      	mov	sp, r7
 8019e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019e84 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8019e84:	b590      	push	{r4, r7, lr}
 8019e86:	b083      	sub	sp, #12
 8019e88:	af00      	add	r7, sp, #0
 8019e8a:	6078      	str	r0, [r7, #4]
 8019e8c:	6039      	str	r1, [r7, #0]
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	4618      	mov	r0, r3
 8019e92:	f000 f8da 	bl	801a04a <_ZNSt5tupleIJP14TMC5160StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8019e96:	683c      	ldr	r4, [r7, #0]
 8019e98:	6878      	ldr	r0, [r7, #4]
 8019e9a:	f7ff ff06 	bl	8019caa <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8019e9e:	4603      	mov	r3, r0
 8019ea0:	601c      	str	r4, [r3, #0]
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	4618      	mov	r0, r3
 8019ea6:	370c      	adds	r7, #12
 8019ea8:	46bd      	mov	sp, r7
 8019eaa:	bd90      	pop	{r4, r7, pc}

08019eac <_ZSt3getILj0EJP14TMC5160StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8019eac:	b580      	push	{r7, lr}
 8019eae:	b082      	sub	sp, #8
 8019eb0:	af00      	add	r7, sp, #0
 8019eb2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	4618      	mov	r0, r3
 8019eb8:	f000 f8d4 	bl	801a064 <_ZSt12__get_helperILj0EP14TMC5160StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8019ebc:	4603      	mov	r3, r0
 8019ebe:	4618      	mov	r0, r3
 8019ec0:	3708      	adds	r7, #8
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	bd80      	pop	{r7, pc}

08019ec6 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8019ec6:	b580      	push	{r7, lr}
 8019ec8:	b082      	sub	sp, #8
 8019eca:	af00      	add	r7, sp, #0
 8019ecc:	6078      	str	r0, [r7, #4]
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	4618      	mov	r0, r3
 8019ed2:	f000 f8d3 	bl	801a07c <_ZSt3getILj1EJP14TMC5160StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8019ed6:	4603      	mov	r3, r0
 8019ed8:	4618      	mov	r0, r3
 8019eda:	3708      	adds	r7, #8
 8019edc:	46bd      	mov	sp, r7
 8019ede:	bd80      	pop	{r7, pc}

08019ee0 <_ZNKSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8019ee0:	b580      	push	{r7, lr}
 8019ee2:	b082      	sub	sp, #8
 8019ee4:	af00      	add	r7, sp, #0
 8019ee6:	6078      	str	r0, [r7, #4]
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	4618      	mov	r0, r3
 8019eec:	f000 f8d2 	bl	801a094 <_ZSt3getILj0EJP14TMC5160StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8019ef0:	4603      	mov	r3, r0
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	3708      	adds	r7, #8
 8019ef8:	46bd      	mov	sp, r7
 8019efa:	bd80      	pop	{r7, pc}

08019efc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC5160SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8019efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f00:	b09a      	sub	sp, #104	@ 0x68
 8019f02:	af0a      	add	r7, sp, #40	@ 0x28
 8019f04:	6278      	str	r0, [r7, #36]	@ 0x24
 8019f06:	6239      	str	r1, [r7, #32]
 8019f08:	61fa      	str	r2, [r7, #28]
 8019f0a:	61bb      	str	r3, [r7, #24]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8019f0c:	69fa      	ldr	r2, [r7, #28]
 8019f0e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8019f12:	4611      	mov	r1, r2
 8019f14:	4618      	mov	r0, r3
 8019f16:	f000 f8ca 	bl	801a0ae <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8019f1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019f1e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8019f22:	4611      	mov	r1, r2
 8019f24:	4618      	mov	r0, r3
 8019f26:	f000 f8db 	bl	801a0e0 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8019f2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019f2e:	4618      	mov	r0, r3
 8019f30:	f000 f8fe 	bl	801a130 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8019f34:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  auto __pi = ::new (__mem)
 8019f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019f38:	4619      	mov	r1, r3
 8019f3a:	20a4      	movs	r0, #164	@ 0xa4
 8019f3c:	f7f0 fca8 	bl	800a890 <_ZnwjPv>
 8019f40:	4605      	mov	r5, r0
 8019f42:	69b8      	ldr	r0, [r7, #24]
 8019f44:	f7fb fd80 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019f48:	4680      	mov	r8, r0
 8019f4a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8019f4c:	f7fb fd7c 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019f50:	4681      	mov	r9, r0
 8019f52:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8019f54:	f7fb fd78 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019f58:	4606      	mov	r6, r0
 8019f5a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8019f5c:	f7fb fd74 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019f60:	6178      	str	r0, [r7, #20]
 8019f62:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8019f64:	f7fb fd7b 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f68:	6138      	str	r0, [r7, #16]
 8019f6a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8019f6c:	f7fe fa0c 	bl	8018388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f70:	60f8      	str	r0, [r7, #12]
 8019f72:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8019f74:	f7fb fd7e 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f78:	60b8      	str	r0, [r7, #8]
 8019f7a:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8019f7c:	f7fb fd7a 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f80:	6078      	str	r0, [r7, #4]
 8019f82:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8019f84:	f7f7 fa69 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f88:	6038      	str	r0, [r7, #0]
 8019f8a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8019f8e:	f7fb fd71 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f92:	4604      	mov	r4, r0
 8019f94:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8019f98:	f7fb fd77 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019f9c:	4603      	mov	r3, r0
 8019f9e:	9308      	str	r3, [sp, #32]
 8019fa0:	9407      	str	r4, [sp, #28]
 8019fa2:	683b      	ldr	r3, [r7, #0]
 8019fa4:	9306      	str	r3, [sp, #24]
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	9305      	str	r3, [sp, #20]
 8019faa:	68bb      	ldr	r3, [r7, #8]
 8019fac:	9304      	str	r3, [sp, #16]
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	9303      	str	r3, [sp, #12]
 8019fb2:	693b      	ldr	r3, [r7, #16]
 8019fb4:	9302      	str	r3, [sp, #8]
 8019fb6:	697b      	ldr	r3, [r7, #20]
 8019fb8:	9301      	str	r3, [sp, #4]
 8019fba:	9600      	str	r6, [sp, #0]
 8019fbc:	464b      	mov	r3, r9
 8019fbe:	4642      	mov	r2, r8
 8019fc0:	4651      	mov	r1, sl
 8019fc2:	4628      	mov	r0, r5
 8019fc4:	f000 f8c2 	bl	801a14c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>
 8019fc8:	63bd      	str	r5, [r7, #56]	@ 0x38
	  __guard = nullptr;
 8019fca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019fce:	2100      	movs	r1, #0
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	f000 f91f 	bl	801a214 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8019fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019fda:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8019fdc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8019fde:	f000 f928 	bl	801a232 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8019fe2:	4602      	mov	r2, r0
 8019fe4:	6a3b      	ldr	r3, [r7, #32]
 8019fe6:	601a      	str	r2, [r3, #0]
	}
 8019fe8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019fec:	4618      	mov	r0, r3
 8019fee:	f000 f88a 	bl	801a106 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8019ff2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8019ff6:	4618      	mov	r0, r3
 8019ff8:	f000 f866 	bl	801a0c8 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8019ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ffe:	4618      	mov	r0, r3
 801a000:	3740      	adds	r7, #64	@ 0x40
 801a002:	46bd      	mov	sp, r7
 801a004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a008 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp* __p) noexcept
 801a008:	b580      	push	{r7, lr}
 801a00a:	b084      	sub	sp, #16
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	6078      	str	r0, [r7, #4]
 801a010:	6039      	str	r1, [r7, #0]
	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	1d1a      	adds	r2, r3, #4
 801a016:	683b      	ldr	r3, [r7, #0]
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d002      	beq.n	801a022 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1a>
 801a01c:	683b      	ldr	r3, [r7, #0]
 801a01e:	3318      	adds	r3, #24
 801a020:	e000      	b.n	801a024 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1c>
 801a022:	2300      	movs	r3, #0
 801a024:	4619      	mov	r1, r3
 801a026:	4610      	mov	r0, r2
 801a028:	f7fc fc25 	bl	8016876 <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>
 801a02c:	60f8      	str	r0, [r7, #12]
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	2b00      	cmp	r3, #0
 801a032:	d006      	beq.n	801a042 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x3a>
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	3304      	adds	r3, #4
 801a038:	461a      	mov	r2, r3
 801a03a:	6839      	ldr	r1, [r7, #0]
 801a03c:	68f8      	ldr	r0, [r7, #12]
 801a03e:	f000 f906 	bl	801a24e <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC5160EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>
	}
 801a042:	bf00      	nop
 801a044:	3710      	adds	r7, #16
 801a046:	46bd      	mov	sp, r7
 801a048:	bd80      	pop	{r7, pc}

0801a04a <_ZNSt5tupleIJP14TMC5160StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 801a04a:	b580      	push	{r7, lr}
 801a04c:	b082      	sub	sp, #8
 801a04e:	af00      	add	r7, sp, #0
 801a050:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	4618      	mov	r0, r3
 801a056:	f000 f90a 	bl	801a26e <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEEC1Ev>
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	4618      	mov	r0, r3
 801a05e:	3708      	adds	r7, #8
 801a060:	46bd      	mov	sp, r7
 801a062:	bd80      	pop	{r7, pc}

0801a064 <_ZSt12__get_helperILj0EP14TMC5160StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801a064:	b580      	push	{r7, lr}
 801a066:	b082      	sub	sp, #8
 801a068:	af00      	add	r7, sp, #0
 801a06a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801a06c:	6878      	ldr	r0, [r7, #4]
 801a06e:	f000 f90e 	bl	801a28e <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEE7_M_headERS4_>
 801a072:	4603      	mov	r3, r0
 801a074:	4618      	mov	r0, r3
 801a076:	3708      	adds	r7, #8
 801a078:	46bd      	mov	sp, r7
 801a07a:	bd80      	pop	{r7, pc}

0801a07c <_ZSt3getILj1EJP14TMC5160StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801a07c:	b580      	push	{r7, lr}
 801a07e:	b082      	sub	sp, #8
 801a080:	af00      	add	r7, sp, #0
 801a082:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801a084:	6878      	ldr	r0, [r7, #4]
 801a086:	f000 f90f 	bl	801a2a8 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC5160StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801a08a:	4603      	mov	r3, r0
 801a08c:	4618      	mov	r0, r3
 801a08e:	3708      	adds	r7, #8
 801a090:	46bd      	mov	sp, r7
 801a092:	bd80      	pop	{r7, pc}

0801a094 <_ZSt3getILj0EJP14TMC5160StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 801a094:	b580      	push	{r7, lr}
 801a096:	b082      	sub	sp, #8
 801a098:	af00      	add	r7, sp, #0
 801a09a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	4618      	mov	r0, r3
 801a0a0:	f000 f90e 	bl	801a2c0 <_ZSt12__get_helperILj0EP14TMC5160StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801a0a4:	4603      	mov	r3, r0
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	3708      	adds	r7, #8
 801a0aa:	46bd      	mov	sp, r7
 801a0ac:	bd80      	pop	{r7, pc}

0801a0ae <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 801a0ae:	b580      	push	{r7, lr}
 801a0b0:	b082      	sub	sp, #8
 801a0b2:	af00      	add	r7, sp, #0
 801a0b4:	6078      	str	r0, [r7, #4]
 801a0b6:	6039      	str	r1, [r7, #0]
 801a0b8:	6878      	ldr	r0, [r7, #4]
 801a0ba:	f000 f90d 	bl	801a2d8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	4618      	mov	r0, r3
 801a0c2:	3708      	adds	r7, #8
 801a0c4:	46bd      	mov	sp, r7
 801a0c6:	bd80      	pop	{r7, pc}

0801a0c8 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801a0c8:	b580      	push	{r7, lr}
 801a0ca:	b082      	sub	sp, #8
 801a0cc:	af00      	add	r7, sp, #0
 801a0ce:	6078      	str	r0, [r7, #4]
 801a0d0:	6878      	ldr	r0, [r7, #4]
 801a0d2:	f000 f90c 	bl	801a2ee <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	4618      	mov	r0, r3
 801a0da:	3708      	adds	r7, #8
 801a0dc:	46bd      	mov	sp, r7
 801a0de:	bd80      	pop	{r7, pc}

0801a0e0 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 801a0e0:	b580      	push	{r7, lr}
 801a0e2:	b082      	sub	sp, #8
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	6078      	str	r0, [r7, #4]
 801a0e8:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 801a0ea:	2101      	movs	r1, #1
 801a0ec:	6838      	ldr	r0, [r7, #0]
 801a0ee:	f000 f909 	bl	801a304 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	461a      	mov	r2, r3
 801a0f6:	6839      	ldr	r1, [r7, #0]
 801a0f8:	6878      	ldr	r0, [r7, #4]
 801a0fa:	f000 f912 	bl	801a322 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 801a0fe:	6878      	ldr	r0, [r7, #4]
 801a100:	3708      	adds	r7, #8
 801a102:	46bd      	mov	sp, r7
 801a104:	bd80      	pop	{r7, pc}

0801a106 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 801a106:	b580      	push	{r7, lr}
 801a108:	b082      	sub	sp, #8
 801a10a:	af00      	add	r7, sp, #0
 801a10c:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	685b      	ldr	r3, [r3, #4]
 801a112:	2b00      	cmp	r3, #0
 801a114:	d007      	beq.n	801a126 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	6818      	ldr	r0, [r3, #0]
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	685b      	ldr	r3, [r3, #4]
 801a11e:	2201      	movs	r2, #1
 801a120:	4619      	mov	r1, r3
 801a122:	f000 f912 	bl	801a34a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	4618      	mov	r0, r3
 801a12a:	3708      	adds	r7, #8
 801a12c:	46bd      	mov	sp, r7
 801a12e:	bd80      	pop	{r7, pc}

0801a130 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 801a130:	b580      	push	{r7, lr}
 801a132:	b082      	sub	sp, #8
 801a134:	af00      	add	r7, sp, #0
 801a136:	6078      	str	r0, [r7, #4]
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	685b      	ldr	r3, [r3, #4]
 801a13c:	4618      	mov	r0, r3
 801a13e:	f000 f913 	bl	801a368 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 801a142:	4603      	mov	r3, r0
 801a144:	4618      	mov	r0, r3
 801a146:	3708      	adds	r7, #8
 801a148:	46bd      	mov	sp, r7
 801a14a:	bd80      	pop	{r7, pc}

0801a14c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 801a14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a150:	b094      	sub	sp, #80	@ 0x50
 801a152:	af0a      	add	r7, sp, #40	@ 0x28
 801a154:	6278      	str	r0, [r7, #36]	@ 0x24
 801a156:	f887 1020 	strb.w	r1, [r7, #32]
 801a15a:	61fa      	str	r2, [r7, #28]
 801a15c:	61bb      	str	r3, [r7, #24]
	: _M_impl(__a)
 801a15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a160:	4618      	mov	r0, r3
 801a162:	f7f4 f83d 	bl	800e1e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 801a166:	4a2a      	ldr	r2, [pc, #168]	@ (801a210 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_+0xc4>)
 801a168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a16a:	601a      	str	r2, [r3, #0]
 801a16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a16e:	330c      	adds	r3, #12
 801a170:	4621      	mov	r1, r4
 801a172:	4618      	mov	r0, r3
 801a174:	f000 f903 	bl	801a37e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 801a178:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a17a:	f000 f85a 	bl	801a232 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801a17e:	4680      	mov	r8, r0
 801a180:	69f8      	ldr	r0, [r7, #28]
 801a182:	f7fb fc61 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a186:	4681      	mov	r9, r0
 801a188:	69b8      	ldr	r0, [r7, #24]
 801a18a:	f7fb fc5d 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a18e:	4682      	mov	sl, r0
 801a190:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801a192:	f7fb fc59 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a196:	4604      	mov	r4, r0
 801a198:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801a19a:	f7fb fc55 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a19e:	4605      	mov	r5, r0
 801a1a0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801a1a2:	f7fb fc5c 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801a1a6:	4606      	mov	r6, r0
 801a1a8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801a1aa:	f7fe f8ed 	bl	8018388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801a1ae:	6178      	str	r0, [r7, #20]
 801a1b0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a1b2:	f7fb fc5f 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a1b6:	6138      	str	r0, [r7, #16]
 801a1b8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801a1ba:	f7fb fc5b 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a1be:	60f8      	str	r0, [r7, #12]
 801a1c0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801a1c2:	f7f7 f94a 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801a1c6:	60b8      	str	r0, [r7, #8]
 801a1c8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 801a1ca:	f7fb fc53 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a1ce:	6078      	str	r0, [r7, #4]
 801a1d0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801a1d2:	f7fb fc5a 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801a1d6:	4603      	mov	r3, r0
 801a1d8:	f107 0020 	add.w	r0, r7, #32
 801a1dc:	9308      	str	r3, [sp, #32]
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	9307      	str	r3, [sp, #28]
 801a1e2:	68bb      	ldr	r3, [r7, #8]
 801a1e4:	9306      	str	r3, [sp, #24]
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	9305      	str	r3, [sp, #20]
 801a1ea:	693b      	ldr	r3, [r7, #16]
 801a1ec:	9304      	str	r3, [sp, #16]
 801a1ee:	697b      	ldr	r3, [r7, #20]
 801a1f0:	9303      	str	r3, [sp, #12]
 801a1f2:	9602      	str	r6, [sp, #8]
 801a1f4:	9501      	str	r5, [sp, #4]
 801a1f6:	9400      	str	r4, [sp, #0]
 801a1f8:	4653      	mov	r3, sl
 801a1fa:	464a      	mov	r2, r9
 801a1fc:	4641      	mov	r1, r8
 801a1fe:	f000 f8cd 	bl	801a39c <_ZNSt16allocator_traitsISaIvEE9constructI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_RfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>
	}
 801a202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a204:	4618      	mov	r0, r3
 801a206:	3728      	adds	r7, #40	@ 0x28
 801a208:	46bd      	mov	sp, r7
 801a20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a20e:	bf00      	nop
 801a210:	0802b624 	.word	0x0802b624

0801a214 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 801a214:	b480      	push	{r7}
 801a216:	b083      	sub	sp, #12
 801a218:	af00      	add	r7, sp, #0
 801a21a:	6078      	str	r0, [r7, #4]
 801a21c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	2200      	movs	r2, #0
 801a222:	605a      	str	r2, [r3, #4]
	return *this;
 801a224:	687b      	ldr	r3, [r7, #4]
      }
 801a226:	4618      	mov	r0, r3
 801a228:	370c      	adds	r7, #12
 801a22a:	46bd      	mov	sp, r7
 801a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a230:	4770      	bx	lr

0801a232 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 801a232:	b580      	push	{r7, lr}
 801a234:	b082      	sub	sp, #8
 801a236:	af00      	add	r7, sp, #0
 801a238:	6078      	str	r0, [r7, #4]
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	330c      	adds	r3, #12
 801a23e:	4618      	mov	r0, r3
 801a240:	f000 f8f7 	bl	801a432 <_ZN9__gnu_cxx16__aligned_bufferI7TMC5160E6_M_ptrEv>
 801a244:	4603      	mov	r3, r0
 801a246:	4618      	mov	r0, r3
 801a248:	3708      	adds	r7, #8
 801a24a:	46bd      	mov	sp, r7
 801a24c:	bd80      	pop	{r7, pc}

0801a24e <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC5160EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>:
	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 801a24e:	b580      	push	{r7, lr}
 801a250:	b084      	sub	sp, #16
 801a252:	af00      	add	r7, sp, #0
 801a254:	60f8      	str	r0, [r7, #12]
 801a256:	60b9      	str	r1, [r7, #8]
 801a258:	607a      	str	r2, [r7, #4]
	{ _M_weak_this._M_assign(__p, __n); }
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	687a      	ldr	r2, [r7, #4]
 801a25e:	68b9      	ldr	r1, [r7, #8]
 801a260:	4618      	mov	r0, r3
 801a262:	f7fc fe91 	bl	8016f88 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>
 801a266:	bf00      	nop
 801a268:	3710      	adds	r7, #16
 801a26a:	46bd      	mov	sp, r7
 801a26c:	bd80      	pop	{r7, pc}

0801a26e <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 801a26e:	b580      	push	{r7, lr}
 801a270:	b082      	sub	sp, #8
 801a272:	af00      	add	r7, sp, #0
 801a274:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 801a276:	6878      	ldr	r0, [r7, #4]
 801a278:	f000 f8e7 	bl	801a44a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC5160StepperEEEC1Ev>
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	4618      	mov	r0, r3
 801a280:	f000 f8ef 	bl	801a462 <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EEC1Ev>
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	4618      	mov	r0, r3
 801a288:	3708      	adds	r7, #8
 801a28a:	46bd      	mov	sp, r7
 801a28c:	bd80      	pop	{r7, pc}

0801a28e <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801a28e:	b580      	push	{r7, lr}
 801a290:	b082      	sub	sp, #8
 801a292:	af00      	add	r7, sp, #0
 801a294:	6078      	str	r0, [r7, #4]
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	4618      	mov	r0, r3
 801a29a:	f000 f8f0 	bl	801a47e <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EE7_M_headERS2_>
 801a29e:	4603      	mov	r3, r0
 801a2a0:	4618      	mov	r0, r3
 801a2a2:	3708      	adds	r7, #8
 801a2a4:	46bd      	mov	sp, r7
 801a2a6:	bd80      	pop	{r7, pc}

0801a2a8 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC5160StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801a2a8:	b580      	push	{r7, lr}
 801a2aa:	b082      	sub	sp, #8
 801a2ac:	af00      	add	r7, sp, #0
 801a2ae:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801a2b0:	6878      	ldr	r0, [r7, #4]
 801a2b2:	f000 f8ef 	bl	801a494 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC5160StepperEEE7_M_headERS3_>
 801a2b6:	4603      	mov	r3, r0
 801a2b8:	4618      	mov	r0, r3
 801a2ba:	3708      	adds	r7, #8
 801a2bc:	46bd      	mov	sp, r7
 801a2be:	bd80      	pop	{r7, pc}

0801a2c0 <_ZSt12__get_helperILj0EP14TMC5160StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801a2c0:	b580      	push	{r7, lr}
 801a2c2:	b082      	sub	sp, #8
 801a2c4:	af00      	add	r7, sp, #0
 801a2c6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801a2c8:	6878      	ldr	r0, [r7, #4]
 801a2ca:	f000 f8ef 	bl	801a4ac <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEE7_M_headERKS4_>
 801a2ce:	4603      	mov	r3, r0
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	3708      	adds	r7, #8
 801a2d4:	46bd      	mov	sp, r7
 801a2d6:	bd80      	pop	{r7, pc}

0801a2d8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801a2d8:	b480      	push	{r7}
 801a2da:	b083      	sub	sp, #12
 801a2dc:	af00      	add	r7, sp, #0
 801a2de:	6078      	str	r0, [r7, #4]
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	4618      	mov	r0, r3
 801a2e4:	370c      	adds	r7, #12
 801a2e6:	46bd      	mov	sp, r7
 801a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ec:	4770      	bx	lr

0801a2ee <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801a2ee:	b480      	push	{r7}
 801a2f0:	b083      	sub	sp, #12
 801a2f2:	af00      	add	r7, sp, #0
 801a2f4:	6078      	str	r0, [r7, #4]
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	4618      	mov	r0, r3
 801a2fa:	370c      	adds	r7, #12
 801a2fc:	46bd      	mov	sp, r7
 801a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a302:	4770      	bx	lr

0801a304 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 801a304:	b580      	push	{r7, lr}
 801a306:	b082      	sub	sp, #8
 801a308:	af00      	add	r7, sp, #0
 801a30a:	6078      	str	r0, [r7, #4]
 801a30c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801a30e:	2200      	movs	r2, #0
 801a310:	6839      	ldr	r1, [r7, #0]
 801a312:	6878      	ldr	r0, [r7, #4]
 801a314:	f000 f8d8 	bl	801a4c8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 801a318:	4603      	mov	r3, r0
 801a31a:	4618      	mov	r0, r3
 801a31c:	3708      	adds	r7, #8
 801a31e:	46bd      	mov	sp, r7
 801a320:	bd80      	pop	{r7, pc}

0801a322 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 801a322:	b580      	push	{r7, lr}
 801a324:	b084      	sub	sp, #16
 801a326:	af00      	add	r7, sp, #0
 801a328:	60f8      	str	r0, [r7, #12]
 801a32a:	60b9      	str	r1, [r7, #8]
 801a32c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801a32e:	68b8      	ldr	r0, [r7, #8]
 801a330:	f000 f8f8 	bl	801a524 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 801a334:	4602      	mov	r2, r0
 801a336:	68fb      	ldr	r3, [r7, #12]
 801a338:	601a      	str	r2, [r3, #0]
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	687a      	ldr	r2, [r7, #4]
 801a33e:	605a      	str	r2, [r3, #4]
      { }
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	4618      	mov	r0, r3
 801a344:	3710      	adds	r7, #16
 801a346:	46bd      	mov	sp, r7
 801a348:	bd80      	pop	{r7, pc}

0801a34a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801a34a:	b580      	push	{r7, lr}
 801a34c:	b084      	sub	sp, #16
 801a34e:	af00      	add	r7, sp, #0
 801a350:	60f8      	str	r0, [r7, #12]
 801a352:	60b9      	str	r1, [r7, #8]
 801a354:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801a356:	687a      	ldr	r2, [r7, #4]
 801a358:	68b9      	ldr	r1, [r7, #8]
 801a35a:	68f8      	ldr	r0, [r7, #12]
 801a35c:	f000 f8ed 	bl	801a53a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 801a360:	bf00      	nop
 801a362:	3710      	adds	r7, #16
 801a364:	46bd      	mov	sp, r7
 801a366:	bd80      	pop	{r7, pc}

0801a368 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 801a368:	b480      	push	{r7}
 801a36a:	b083      	sub	sp, #12
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	6078      	str	r0, [r7, #4]
      return __ptr;
 801a370:	687b      	ldr	r3, [r7, #4]
    }
 801a372:	4618      	mov	r0, r3
 801a374:	370c      	adds	r7, #12
 801a376:	46bd      	mov	sp, r7
 801a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a37c:	4770      	bx	lr

0801a37e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 801a37e:	b580      	push	{r7, lr}
 801a380:	b082      	sub	sp, #8
 801a382:	af00      	add	r7, sp, #0
 801a384:	6078      	str	r0, [r7, #4]
 801a386:	7039      	strb	r1, [r7, #0]
 801a388:	463b      	mov	r3, r7
 801a38a:	4619      	mov	r1, r3
 801a38c:	6878      	ldr	r0, [r7, #4]
 801a38e:	f7f4 f941 	bl	800e614 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	4618      	mov	r0, r3
 801a396:	3708      	adds	r7, #8
 801a398:	46bd      	mov	sp, r7
 801a39a:	bd80      	pop	{r7, pc}

0801a39c <_ZNSt16allocator_traitsISaIvEE9constructI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_RfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 801a39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3a0:	b090      	sub	sp, #64	@ 0x40
 801a3a2:	af08      	add	r7, sp, #32
 801a3a4:	61f8      	str	r0, [r7, #28]
 801a3a6:	61b9      	str	r1, [r7, #24]
 801a3a8:	617a      	str	r2, [r7, #20]
 801a3aa:	613b      	str	r3, [r7, #16]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 801a3ac:	6978      	ldr	r0, [r7, #20]
 801a3ae:	f7fb fb4b 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a3b2:	4680      	mov	r8, r0
 801a3b4:	6938      	ldr	r0, [r7, #16]
 801a3b6:	f7fb fb47 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a3ba:	4681      	mov	r9, r0
 801a3bc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801a3be:	f7fb fb43 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a3c2:	4682      	mov	sl, r0
 801a3c4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801a3c6:	f7fb fb3f 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a3ca:	4604      	mov	r4, r0
 801a3cc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801a3ce:	f7fb fb46 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801a3d2:	4605      	mov	r5, r0
 801a3d4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801a3d6:	f7fd ffd7 	bl	8018388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801a3da:	4606      	mov	r6, r0
 801a3dc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801a3de:	f7fb fb49 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a3e2:	60f8      	str	r0, [r7, #12]
 801a3e4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801a3e6:	f7fb fb45 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a3ea:	60b8      	str	r0, [r7, #8]
 801a3ec:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a3ee:	f7f7 f834 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801a3f2:	6078      	str	r0, [r7, #4]
 801a3f4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801a3f6:	f7fb fb3d 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a3fa:	6038      	str	r0, [r7, #0]
 801a3fc:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801a3fe:	f7fb fb44 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801a402:	4603      	mov	r3, r0
 801a404:	9307      	str	r3, [sp, #28]
 801a406:	683b      	ldr	r3, [r7, #0]
 801a408:	9306      	str	r3, [sp, #24]
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	9305      	str	r3, [sp, #20]
 801a40e:	68bb      	ldr	r3, [r7, #8]
 801a410:	9304      	str	r3, [sp, #16]
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	9303      	str	r3, [sp, #12]
 801a416:	9602      	str	r6, [sp, #8]
 801a418:	9501      	str	r5, [sp, #4]
 801a41a:	9400      	str	r4, [sp, #0]
 801a41c:	4653      	mov	r3, sl
 801a41e:	464a      	mov	r2, r9
 801a420:	4641      	mov	r1, r8
 801a422:	69b8      	ldr	r0, [r7, #24]
 801a424:	f000 f89a 	bl	801a55c <_ZSt10_ConstructI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_RfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>
 801a428:	bf00      	nop
 801a42a:	3720      	adds	r7, #32
 801a42c:	46bd      	mov	sp, r7
 801a42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a432 <_ZN9__gnu_cxx16__aligned_bufferI7TMC5160E6_M_ptrEv>:
      _M_ptr() noexcept
 801a432:	b580      	push	{r7, lr}
 801a434:	b082      	sub	sp, #8
 801a436:	af00      	add	r7, sp, #0
 801a438:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801a43a:	6878      	ldr	r0, [r7, #4]
 801a43c:	f000 f926 	bl	801a68c <_ZN9__gnu_cxx16__aligned_bufferI7TMC5160E7_M_addrEv>
 801a440:	4603      	mov	r3, r0
 801a442:	4618      	mov	r0, r3
 801a444:	3708      	adds	r7, #8
 801a446:	46bd      	mov	sp, r7
 801a448:	bd80      	pop	{r7, pc}

0801a44a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC5160StepperEEEC1Ev>:
      _Tuple_impl()
 801a44a:	b580      	push	{r7, lr}
 801a44c:	b082      	sub	sp, #8
 801a44e:	af00      	add	r7, sp, #0
 801a450:	6078      	str	r0, [r7, #4]
      : _Base() { }
 801a452:	6878      	ldr	r0, [r7, #4]
 801a454:	f000 f925 	bl	801a6a2 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC5160StepperELb1EEC1Ev>
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	4618      	mov	r0, r3
 801a45c:	3708      	adds	r7, #8
 801a45e:	46bd      	mov	sp, r7
 801a460:	bd80      	pop	{r7, pc}

0801a462 <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EEC1Ev>:
      constexpr _Head_base()
 801a462:	b480      	push	{r7}
 801a464:	b083      	sub	sp, #12
 801a466:	af00      	add	r7, sp, #0
 801a468:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	2200      	movs	r2, #0
 801a46e:	601a      	str	r2, [r3, #0]
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	4618      	mov	r0, r3
 801a474:	370c      	adds	r7, #12
 801a476:	46bd      	mov	sp, r7
 801a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a47c:	4770      	bx	lr

0801a47e <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801a47e:	b480      	push	{r7}
 801a480:	b083      	sub	sp, #12
 801a482:	af00      	add	r7, sp, #0
 801a484:	6078      	str	r0, [r7, #4]
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	4618      	mov	r0, r3
 801a48a:	370c      	adds	r7, #12
 801a48c:	46bd      	mov	sp, r7
 801a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a492:	4770      	bx	lr

0801a494 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC5160StepperEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801a494:	b580      	push	{r7, lr}
 801a496:	b082      	sub	sp, #8
 801a498:	af00      	add	r7, sp, #0
 801a49a:	6078      	str	r0, [r7, #4]
 801a49c:	6878      	ldr	r0, [r7, #4]
 801a49e:	f000 f90b 	bl	801a6b8 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC5160StepperELb1EE7_M_headERS3_>
 801a4a2:	4603      	mov	r3, r0
 801a4a4:	4618      	mov	r0, r3
 801a4a6:	3708      	adds	r7, #8
 801a4a8:	46bd      	mov	sp, r7
 801a4aa:	bd80      	pop	{r7, pc}

0801a4ac <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801a4ac:	b580      	push	{r7, lr}
 801a4ae:	b082      	sub	sp, #8
 801a4b0:	af00      	add	r7, sp, #0
 801a4b2:	6078      	str	r0, [r7, #4]
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	f000 f909 	bl	801a6ce <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EE7_M_headERKS2_>
 801a4bc:	4603      	mov	r3, r0
 801a4be:	4618      	mov	r0, r3
 801a4c0:	3708      	adds	r7, #8
 801a4c2:	46bd      	mov	sp, r7
 801a4c4:	bd80      	pop	{r7, pc}
	...

0801a4c8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801a4c8:	b580      	push	{r7, lr}
 801a4ca:	b084      	sub	sp, #16
 801a4cc:	af00      	add	r7, sp, #0
 801a4ce:	60f8      	str	r0, [r7, #12]
 801a4d0:	60b9      	str	r1, [r7, #8]
 801a4d2:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801a4d4:	68f8      	ldr	r0, [r7, #12]
 801a4d6:	f000 f905 	bl	801a6e4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 801a4da:	4602      	mov	r2, r0
 801a4dc:	68bb      	ldr	r3, [r7, #8]
 801a4de:	4293      	cmp	r3, r2
 801a4e0:	bf8c      	ite	hi
 801a4e2:	2301      	movhi	r3, #1
 801a4e4:	2300      	movls	r3, #0
 801a4e6:	b2db      	uxtb	r3, r3
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	bf14      	ite	ne
 801a4ec:	2301      	movne	r3, #1
 801a4ee:	2300      	moveq	r3, #0
 801a4f0:	b2db      	uxtb	r3, r3
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d007      	beq.n	801a506 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801a4f6:	68bb      	ldr	r3, [r7, #8]
 801a4f8:	4a09      	ldr	r2, [pc, #36]	@ (801a520 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 801a4fa:	4293      	cmp	r3, r2
 801a4fc:	d901      	bls.n	801a502 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801a4fe:	f00e f86d 	bl	80285dc <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801a502:	f00e f868 	bl	80285d6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801a506:	68bb      	ldr	r3, [r7, #8]
 801a508:	22a4      	movs	r2, #164	@ 0xa4
 801a50a:	fb02 f303 	mul.w	r3, r2, r3
 801a50e:	4618      	mov	r0, r3
 801a510:	f00e f84e 	bl	80285b0 <_Znwj>
 801a514:	4603      	mov	r3, r0
 801a516:	bf00      	nop
      }
 801a518:	4618      	mov	r0, r3
 801a51a:	3710      	adds	r7, #16
 801a51c:	46bd      	mov	sp, r7
 801a51e:	bd80      	pop	{r7, pc}
 801a520:	018f9c18 	.word	0x018f9c18

0801a524 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801a524:	b480      	push	{r7}
 801a526:	b083      	sub	sp, #12
 801a528:	af00      	add	r7, sp, #0
 801a52a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	4618      	mov	r0, r3
 801a530:	370c      	adds	r7, #12
 801a532:	46bd      	mov	sp, r7
 801a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a538:	4770      	bx	lr

0801a53a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 801a53a:	b580      	push	{r7, lr}
 801a53c:	b084      	sub	sp, #16
 801a53e:	af00      	add	r7, sp, #0
 801a540:	60f8      	str	r0, [r7, #12]
 801a542:	60b9      	str	r1, [r7, #8]
 801a544:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	22a4      	movs	r2, #164	@ 0xa4
 801a54a:	fb02 f303 	mul.w	r3, r2, r3
 801a54e:	4619      	mov	r1, r3
 801a550:	68b8      	ldr	r0, [r7, #8]
 801a552:	f00e f81c 	bl	802858e <_ZdlPvj>
      }
 801a556:	3710      	adds	r7, #16
 801a558:	46bd      	mov	sp, r7
 801a55a:	bd80      	pop	{r7, pc}

0801a55c <_ZSt10_ConstructI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_RfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 801a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a560:	ed2d 8b02 	vpush	{d8}
 801a564:	b0a6      	sub	sp, #152	@ 0x98
 801a566:	af08      	add	r7, sp, #32
 801a568:	6178      	str	r0, [r7, #20]
 801a56a:	6139      	str	r1, [r7, #16]
 801a56c:	60fa      	str	r2, [r7, #12]
 801a56e:	60bb      	str	r3, [r7, #8]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 801a570:	697b      	ldr	r3, [r7, #20]
 801a572:	4619      	mov	r1, r3
 801a574:	2098      	movs	r0, #152	@ 0x98
 801a576:	f7f0 f98b 	bl	800a890 <_ZnwjPv>
 801a57a:	4680      	mov	r8, r0
 801a57c:	6938      	ldr	r0, [r7, #16]
 801a57e:	f7fb fa63 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a582:	4602      	mov	r2, r0
 801a584:	f107 0318 	add.w	r3, r7, #24
 801a588:	4611      	mov	r1, r2
 801a58a:	4618      	mov	r0, r3
 801a58c:	f00e f8ec 	bl	8028768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801a590:	68f8      	ldr	r0, [r7, #12]
 801a592:	f7fb fa59 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a596:	4602      	mov	r2, r0
 801a598:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801a59c:	4611      	mov	r1, r2
 801a59e:	4618      	mov	r0, r3
 801a5a0:	f00e f8e2 	bl	8028768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801a5a4:	68b8      	ldr	r0, [r7, #8]
 801a5a6:	f7fb fa4f 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a5aa:	4602      	mov	r2, r0
 801a5ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a5b0:	4611      	mov	r1, r2
 801a5b2:	4618      	mov	r0, r3
 801a5b4:	f00e f8d8 	bl	8028768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801a5b8:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 801a5bc:	f7fb fa44 	bl	8015a48 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a5c0:	4602      	mov	r2, r0
 801a5c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a5c6:	4611      	mov	r1, r2
 801a5c8:	4618      	mov	r0, r3
 801a5ca:	f00e f8cd 	bl	8028768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801a5ce:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 801a5d2:	f7fb fa44 	bl	8015a5e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801a5d6:	4603      	mov	r3, r0
 801a5d8:	ed93 8a00 	vldr	s16, [r3]
 801a5dc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 801a5e0:	f7fd fed2 	bl	8018388 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801a5e4:	4603      	mov	r3, r0
 801a5e6:	781c      	ldrb	r4, [r3, #0]
 801a5e8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 801a5ec:	f7fb fa42 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a5f0:	4603      	mov	r3, r0
 801a5f2:	881d      	ldrh	r5, [r3, #0]
 801a5f4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 801a5f8:	f7fb fa3c 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a5fc:	4603      	mov	r3, r0
 801a5fe:	881e      	ldrh	r6, [r3, #0]
 801a600:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 801a604:	f7f6 ff29 	bl	801145a <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801a608:	4603      	mov	r3, r0
 801a60a:	781b      	ldrb	r3, [r3, #0]
 801a60c:	607b      	str	r3, [r7, #4]
 801a60e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 801a612:	f7fb fa2f 	bl	8015a74 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a616:	4603      	mov	r3, r0
 801a618:	881a      	ldrh	r2, [r3, #0]
 801a61a:	603a      	str	r2, [r7, #0]
 801a61c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 801a620:	f7fb fa33 	bl	8015a8a <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801a624:	4603      	mov	r3, r0
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 801a62c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801a630:	f107 0118 	add.w	r1, r7, #24
 801a634:	9306      	str	r3, [sp, #24]
 801a636:	683b      	ldr	r3, [r7, #0]
 801a638:	9305      	str	r3, [sp, #20]
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	9304      	str	r3, [sp, #16]
 801a63e:	9603      	str	r6, [sp, #12]
 801a640:	9502      	str	r5, [sp, #8]
 801a642:	9401      	str	r4, [sp, #4]
 801a644:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a648:	9300      	str	r3, [sp, #0]
 801a64a:	eeb0 0a48 	vmov.f32	s0, s16
 801a64e:	4603      	mov	r3, r0
 801a650:	4640      	mov	r0, r8
 801a652:	f7ff f87f 	bl	8019754 <_ZN7TMC5160C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_fhttbtP6Remora>
 801a656:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a65a:	4618      	mov	r0, r3
 801a65c:	f00e f8a3 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a660:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a664:	4618      	mov	r0, r3
 801a666:	f00e f89e 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a66a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801a66e:	4618      	mov	r0, r3
 801a670:	f00e f899 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a674:	f107 0318 	add.w	r3, r7, #24
 801a678:	4618      	mov	r0, r3
 801a67a:	f00e f894 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 801a67e:	bf00      	nop
 801a680:	3778      	adds	r7, #120	@ 0x78
 801a682:	46bd      	mov	sp, r7
 801a684:	ecbd 8b02 	vpop	{d8}
 801a688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a68c <_ZN9__gnu_cxx16__aligned_bufferI7TMC5160E7_M_addrEv>:
      _M_addr() noexcept
 801a68c:	b480      	push	{r7}
 801a68e:	b083      	sub	sp, #12
 801a690:	af00      	add	r7, sp, #0
 801a692:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 801a694:	687b      	ldr	r3, [r7, #4]
      }
 801a696:	4618      	mov	r0, r3
 801a698:	370c      	adds	r7, #12
 801a69a:	46bd      	mov	sp, r7
 801a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6a0:	4770      	bx	lr

0801a6a2 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC5160StepperELb1EEC1Ev>:
      constexpr _Head_base()
 801a6a2:	b480      	push	{r7}
 801a6a4:	b083      	sub	sp, #12
 801a6a6:	af00      	add	r7, sp, #0
 801a6a8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	4618      	mov	r0, r3
 801a6ae:	370c      	adds	r7, #12
 801a6b0:	46bd      	mov	sp, r7
 801a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6b6:	4770      	bx	lr

0801a6b8 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC5160StepperELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801a6b8:	b480      	push	{r7}
 801a6ba:	b083      	sub	sp, #12
 801a6bc:	af00      	add	r7, sp, #0
 801a6be:	6078      	str	r0, [r7, #4]
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	370c      	adds	r7, #12
 801a6c6:	46bd      	mov	sp, r7
 801a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6cc:	4770      	bx	lr

0801a6ce <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 801a6ce:	b480      	push	{r7}
 801a6d0:	b083      	sub	sp, #12
 801a6d2:	af00      	add	r7, sp, #0
 801a6d4:	6078      	str	r0, [r7, #4]
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	4618      	mov	r0, r3
 801a6da:	370c      	adds	r7, #12
 801a6dc:	46bd      	mov	sp, r7
 801a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6e2:	4770      	bx	lr

0801a6e4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801a6e4:	b480      	push	{r7}
 801a6e6:	b083      	sub	sp, #12
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801a6ec:	4b03      	ldr	r3, [pc, #12]	@ (801a6fc <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 801a6ee:	4618      	mov	r0, r3
 801a6f0:	370c      	adds	r7, #12
 801a6f2:	46bd      	mov	sp, r7
 801a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6f8:	4770      	bx	lr
 801a6fa:	bf00      	nop
 801a6fc:	00c7ce0c 	.word	0x00c7ce0c

0801a700 <_ZN7TMC5160D1Ev>:

public:

	TMC5160(std::string, std::string, std::string, std::string, float, uint8_t, uint16_t, uint16_t, bool, uint16_t, Remora*);
	static std::shared_ptr<Module> create(const JsonObject& config, Remora* instance);
	~TMC5160() = default;
 801a700:	b580      	push	{r7, lr}
 801a702:	b082      	sub	sp, #8
 801a704:	af00      	add	r7, sp, #0
 801a706:	6078      	str	r0, [r7, #4]
 801a708:	4a12      	ldr	r2, [pc, #72]	@ (801a754 <_ZN7TMC5160D1Ev+0x54>)
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	601a      	str	r2, [r3, #0]
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	3394      	adds	r3, #148	@ 0x94
 801a712:	4618      	mov	r0, r3
 801a714:	f7ff fa03 	bl	8019b1e <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EED1Ev>
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	3370      	adds	r3, #112	@ 0x70
 801a71c:	4618      	mov	r0, r3
 801a71e:	f00e f842 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	3358      	adds	r3, #88	@ 0x58
 801a726:	4618      	mov	r0, r3
 801a728:	f00e f83d 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	3340      	adds	r3, #64	@ 0x40
 801a730:	4618      	mov	r0, r3
 801a732:	f00e f838 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	3328      	adds	r3, #40	@ 0x28
 801a73a:	4618      	mov	r0, r3
 801a73c:	f00e f833 	bl	80287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	4618      	mov	r0, r3
 801a744:	f7fa fcfe 	bl	8015144 <_ZN3TMCD1Ev>
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	4618      	mov	r0, r3
 801a74c:	3708      	adds	r7, #8
 801a74e:	46bd      	mov	sp, r7
 801a750:	bd80      	pop	{r7, pc}
 801a752:	bf00      	nop
 801a754:	0802b640 	.word	0x0802b640

0801a758 <_ZN7TMC5160D0Ev>:
 801a758:	b580      	push	{r7, lr}
 801a75a:	b082      	sub	sp, #8
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	6078      	str	r0, [r7, #4]
 801a760:	6878      	ldr	r0, [r7, #4]
 801a762:	f7ff ffcd 	bl	801a700 <_ZN7TMC5160D1Ev>
 801a766:	2198      	movs	r1, #152	@ 0x98
 801a768:	6878      	ldr	r0, [r7, #4]
 801a76a:	f00d ff10 	bl	802858e <_ZdlPvj>
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	4618      	mov	r0, r3
 801a772:	3708      	adds	r7, #8
 801a774:	46bd      	mov	sp, r7
 801a776:	bd80      	pop	{r7, pc}

0801a778 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 801a778:	b580      	push	{r7, lr}
 801a77a:	b082      	sub	sp, #8
 801a77c:	af00      	add	r7, sp, #0
 801a77e:	6078      	str	r0, [r7, #4]
 801a780:	4a05      	ldr	r2, [pc, #20]	@ (801a798 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	601a      	str	r2, [r3, #0]
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	4618      	mov	r0, r3
 801a78a:	f7f1 feeb 	bl	800c564 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	4618      	mov	r0, r3
 801a792:	3708      	adds	r7, #8
 801a794:	46bd      	mov	sp, r7
 801a796:	bd80      	pop	{r7, pc}
 801a798:	0802b624 	.word	0x0802b624

0801a79c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 801a79c:	b580      	push	{r7, lr}
 801a79e:	b082      	sub	sp, #8
 801a7a0:	af00      	add	r7, sp, #0
 801a7a2:	6078      	str	r0, [r7, #4]
 801a7a4:	6878      	ldr	r0, [r7, #4]
 801a7a6:	f7ff ffe7 	bl	801a778 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801a7aa:	21a4      	movs	r1, #164	@ 0xa4
 801a7ac:	6878      	ldr	r0, [r7, #4]
 801a7ae:	f00d feee 	bl	802858e <_ZdlPvj>
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	4618      	mov	r0, r3
 801a7b6:	3708      	adds	r7, #8
 801a7b8:	46bd      	mov	sp, r7
 801a7ba:	bd80      	pop	{r7, pc}

0801a7bc <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 801a7bc:	b590      	push	{r4, r7, lr}
 801a7be:	b083      	sub	sp, #12
 801a7c0:	af00      	add	r7, sp, #0
 801a7c2:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	330c      	adds	r3, #12
 801a7c8:	4618      	mov	r0, r3
 801a7ca:	f000 f856 	bl	801a87a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801a7ce:	4604      	mov	r4, r0
 801a7d0:	6878      	ldr	r0, [r7, #4]
 801a7d2:	f7ff fd2e 	bl	801a232 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801a7d6:	4603      	mov	r3, r0
 801a7d8:	4619      	mov	r1, r3
 801a7da:	4620      	mov	r0, r4
 801a7dc:	f000 f859 	bl	801a892 <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC5160EEvRS0_PT_>
      }
 801a7e0:	bf00      	nop
 801a7e2:	370c      	adds	r7, #12
 801a7e4:	46bd      	mov	sp, r7
 801a7e6:	bd90      	pop	{r4, r7, pc}

0801a7e8 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 801a7e8:	b580      	push	{r7, lr}
 801a7ea:	b086      	sub	sp, #24
 801a7ec:	af00      	add	r7, sp, #0
 801a7ee:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	330c      	adds	r3, #12
 801a7f4:	4618      	mov	r0, r3
 801a7f6:	f000 f840 	bl	801a87a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801a7fa:	4602      	mov	r2, r0
 801a7fc:	f107 0314 	add.w	r3, r7, #20
 801a800:	4611      	mov	r1, r2
 801a802:	4618      	mov	r0, r3
 801a804:	f7ff fc53 	bl	801a0ae <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 801a808:	f107 0114 	add.w	r1, r7, #20
 801a80c:	f107 030c 	add.w	r3, r7, #12
 801a810:	687a      	ldr	r2, [r7, #4]
 801a812:	4618      	mov	r0, r3
 801a814:	f7ff fd85 	bl	801a322 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 801a818:	6878      	ldr	r0, [r7, #4]
 801a81a:	f7ff ffad 	bl	801a778 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 801a81e:	f107 030c 	add.w	r3, r7, #12
 801a822:	4618      	mov	r0, r3
 801a824:	f7ff fc6f 	bl	801a106 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 801a828:	f107 0314 	add.w	r3, r7, #20
 801a82c:	4618      	mov	r0, r3
 801a82e:	f7ff fc4b 	bl	801a0c8 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801a832:	3718      	adds	r7, #24
 801a834:	46bd      	mov	sp, r7
 801a836:	bd80      	pop	{r7, pc}

0801a838 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 801a838:	b580      	push	{r7, lr}
 801a83a:	b084      	sub	sp, #16
 801a83c:	af00      	add	r7, sp, #0
 801a83e:	6078      	str	r0, [r7, #4]
 801a840:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 801a842:	6878      	ldr	r0, [r7, #4]
 801a844:	f7ff fcf5 	bl	801a232 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801a848:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 801a84a:	f7f0 f86d 	bl	800a928 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 801a84e:	4602      	mov	r2, r0
	    ||
 801a850:	683b      	ldr	r3, [r7, #0]
 801a852:	4293      	cmp	r3, r2
 801a854:	d005      	beq.n	801a862 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 801a856:	6838      	ldr	r0, [r7, #0]
 801a858:	f00d fed6 	bl	8028608 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 801a85c:	4603      	mov	r3, r0
	    ||
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d001      	beq.n	801a866 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 801a862:	2301      	movs	r3, #1
 801a864:	e000      	b.n	801a868 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 801a866:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d001      	beq.n	801a870 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	e000      	b.n	801a872 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 801a870:	2300      	movs	r3, #0
      }
 801a872:	4618      	mov	r0, r3
 801a874:	3710      	adds	r7, #16
 801a876:	46bd      	mov	sp, r7
 801a878:	bd80      	pop	{r7, pc}

0801a87a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 801a87a:	b580      	push	{r7, lr}
 801a87c:	b082      	sub	sp, #8
 801a87e:	af00      	add	r7, sp, #0
 801a880:	6078      	str	r0, [r7, #4]
 801a882:	6878      	ldr	r0, [r7, #4]
 801a884:	f7f4 f941 	bl	800eb0a <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 801a888:	4603      	mov	r3, r0
 801a88a:	4618      	mov	r0, r3
 801a88c:	3708      	adds	r7, #8
 801a88e:	46bd      	mov	sp, r7
 801a890:	bd80      	pop	{r7, pc}

0801a892 <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC5160EEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 801a892:	b580      	push	{r7, lr}
 801a894:	b082      	sub	sp, #8
 801a896:	af00      	add	r7, sp, #0
 801a898:	6078      	str	r0, [r7, #4]
 801a89a:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 801a89c:	6838      	ldr	r0, [r7, #0]
 801a89e:	f000 f804 	bl	801a8aa <_ZSt8_DestroyI7TMC5160EvPT_>
 801a8a2:	bf00      	nop
 801a8a4:	3708      	adds	r7, #8
 801a8a6:	46bd      	mov	sp, r7
 801a8a8:	bd80      	pop	{r7, pc}

0801a8aa <_ZSt8_DestroyI7TMC5160EvPT_>:
    _Destroy(_Tp* __pointer)
 801a8aa:	b580      	push	{r7, lr}
 801a8ac:	b082      	sub	sp, #8
 801a8ae:	af00      	add	r7, sp, #0
 801a8b0:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	6878      	ldr	r0, [r7, #4]
 801a8ba:	4798      	blx	r3
    }
 801a8bc:	bf00      	nop
 801a8be:	3708      	adds	r7, #8
 801a8c0:	46bd      	mov	sp, r7
 801a8c2:	bd80      	pop	{r7, pc}

0801a8c4 <__NVIC_SetPriority>:
{
 801a8c4:	b480      	push	{r7}
 801a8c6:	b083      	sub	sp, #12
 801a8c8:	af00      	add	r7, sp, #0
 801a8ca:	4603      	mov	r3, r0
 801a8cc:	6039      	str	r1, [r7, #0]
 801a8ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a8d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	db0a      	blt.n	801a8ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a8d8:	683b      	ldr	r3, [r7, #0]
 801a8da:	b2da      	uxtb	r2, r3
 801a8dc:	490c      	ldr	r1, [pc, #48]	@ (801a910 <__NVIC_SetPriority+0x4c>)
 801a8de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a8e2:	0112      	lsls	r2, r2, #4
 801a8e4:	b2d2      	uxtb	r2, r2
 801a8e6:	440b      	add	r3, r1
 801a8e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801a8ec:	e00a      	b.n	801a904 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a8ee:	683b      	ldr	r3, [r7, #0]
 801a8f0:	b2da      	uxtb	r2, r3
 801a8f2:	4908      	ldr	r1, [pc, #32]	@ (801a914 <__NVIC_SetPriority+0x50>)
 801a8f4:	88fb      	ldrh	r3, [r7, #6]
 801a8f6:	f003 030f 	and.w	r3, r3, #15
 801a8fa:	3b04      	subs	r3, #4
 801a8fc:	0112      	lsls	r2, r2, #4
 801a8fe:	b2d2      	uxtb	r2, r2
 801a900:	440b      	add	r3, r1
 801a902:	761a      	strb	r2, [r3, #24]
}
 801a904:	bf00      	nop
 801a906:	370c      	adds	r7, #12
 801a908:	46bd      	mov	sp, r7
 801a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a90e:	4770      	bx	lr
 801a910:	e000e100 	.word	0xe000e100
 801a914:	e000ed00 	.word	0xe000ed00

0801a918 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 801a918:	b480      	push	{r7}
 801a91a:	b083      	sub	sp, #12
 801a91c:	af00      	add	r7, sp, #0
 801a91e:	4603      	mov	r3, r0
 801a920:	6039      	str	r1, [r7, #0]
 801a922:	71fb      	strb	r3, [r7, #7]
    return memory_order(int(__m) & int(__mod));
 801a924:	683b      	ldr	r3, [r7, #0]
 801a926:	b25a      	sxtb	r2, r3
 801a928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a92c:	4013      	ands	r3, r2
 801a92e:	b25b      	sxtb	r3, r3
 801a930:	b2db      	uxtb	r3, r3
  }
 801a932:	4618      	mov	r0, r3
 801a934:	370c      	adds	r7, #12
 801a936:	46bd      	mov	sp, r7
 801a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a93c:	4770      	bx	lr

0801a93e <_ZNSt6atomicIbEC1Eb>:
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 801a93e:	b580      	push	{r7, lr}
 801a940:	b082      	sub	sp, #8
 801a942:	af00      	add	r7, sp, #0
 801a944:	6078      	str	r0, [r7, #4]
 801a946:	460b      	mov	r3, r1
 801a948:	70fb      	strb	r3, [r7, #3]
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	78fa      	ldrb	r2, [r7, #3]
 801a94e:	4611      	mov	r1, r2
 801a950:	4618      	mov	r0, r3
 801a952:	f000 fa7c 	bl	801ae4e <_ZNSt13__atomic_baseIbEC1Eb>
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	4618      	mov	r0, r3
 801a95a:	3708      	adds	r7, #8
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd80      	pop	{r7, pc}

0801a960 <_ZNSt6atomicIbE5storeEbSt12memory_order>:
#if __cplusplus >= 201703L
    static constexpr bool is_always_lock_free = ATOMIC_BOOL_LOCK_FREE == 2;
#endif

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
 801a960:	b580      	push	{r7, lr}
 801a962:	b084      	sub	sp, #16
 801a964:	af00      	add	r7, sp, #0
 801a966:	6078      	str	r0, [r7, #4]
 801a968:	460b      	mov	r3, r1
 801a96a:	70fb      	strb	r3, [r7, #3]
 801a96c:	4613      	mov	r3, r2
 801a96e:	70bb      	strb	r3, [r7, #2]
    { _M_base.store(__i, __m); }
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	60fb      	str	r3, [r7, #12]
 801a974:	78fb      	ldrb	r3, [r7, #3]
 801a976:	72fb      	strb	r3, [r7, #11]
 801a978:	78bb      	ldrb	r3, [r7, #2]
 801a97a:	72bb      	strb	r3, [r7, #10]

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 801a97c:	7abb      	ldrb	r3, [r7, #10]
 801a97e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801a982:	4618      	mov	r0, r3
 801a984:	f7ff ffc8 	bl	801a918 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 801a988:	4603      	mov	r3, r0
 801a98a:	727b      	strb	r3, [r7, #9]
	__glibcxx_assert(__b != memory_order_acquire);
 801a98c:	f7e8 fc81 	bl	8003292 <_ZSt23__is_constant_evaluatedv>
 801a990:	4603      	mov	r3, r0
 801a992:	2b00      	cmp	r3, #0
 801a994:	d004      	beq.n	801a9a0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 801a996:	7a7b      	ldrb	r3, [r7, #9]
 801a998:	2b02      	cmp	r3, #2
 801a99a:	d101      	bne.n	801a9a0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 801a99c:	2301      	movs	r3, #1
 801a99e:	e000      	b.n	801a9a2 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x42>
 801a9a0:	2300      	movs	r3, #0
 801a9a2:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 801a9a4:	f7e8 fc75 	bl	8003292 <_ZSt23__is_constant_evaluatedv>
 801a9a8:	4603      	mov	r3, r0
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d004      	beq.n	801a9b8 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 801a9ae:	7a7b      	ldrb	r3, [r7, #9]
 801a9b0:	2b04      	cmp	r3, #4
 801a9b2:	d101      	bne.n	801a9b8 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 801a9b4:	2301      	movs	r3, #1
 801a9b6:	e000      	b.n	801a9ba <_ZNSt6atomicIbE5storeEbSt12memory_order+0x5a>
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_consume);
 801a9bc:	f7e8 fc69 	bl	8003292 <_ZSt23__is_constant_evaluatedv>
 801a9c0:	4603      	mov	r3, r0
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d004      	beq.n	801a9d0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 801a9c6:	7a7b      	ldrb	r3, [r7, #9]
 801a9c8:	2b01      	cmp	r3, #1
 801a9ca:	d101      	bne.n	801a9d0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 801a9cc:	2301      	movs	r3, #1
 801a9ce:	e000      	b.n	801a9d2 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x72>
 801a9d0:	2300      	movs	r3, #0
 801a9d2:	2b00      	cmp	r3, #0

	__atomic_store_n(&_M_i, __i, int(__m));
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	7afa      	ldrb	r2, [r7, #11]
 801a9d8:	f3bf 8f5b 	dmb	ish
 801a9dc:	701a      	strb	r2, [r3, #0]
 801a9de:	f3bf 8f5b 	dmb	ish
      }
 801a9e2:	bf00      	nop
 801a9e4:	bf00      	nop
 801a9e6:	3710      	adds	r7, #16
 801a9e8:	46bd      	mov	sp, r7
 801a9ea:	bd80      	pop	{r7, pc}

0801a9ec <_ZNKSt6atomicIbE4loadESt12memory_order>:
    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
 801a9ec:	b580      	push	{r7, lr}
 801a9ee:	b084      	sub	sp, #16
 801a9f0:	af00      	add	r7, sp, #0
 801a9f2:	6078      	str	r0, [r7, #4]
 801a9f4:	460b      	mov	r3, r1
 801a9f6:	70fb      	strb	r3, [r7, #3]
    { return _M_base.load(__m); }
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	60fb      	str	r3, [r7, #12]
 801a9fc:	78fb      	ldrb	r3, [r7, #3]
 801a9fe:	72fb      	strb	r3, [r7, #11]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 801aa00:	7afb      	ldrb	r3, [r7, #11]
 801aa02:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801aa06:	4618      	mov	r0, r3
 801aa08:	f7ff ff86 	bl	801a918 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 801aa0c:	4603      	mov	r3, r0
 801aa0e:	72bb      	strb	r3, [r7, #10]
	__glibcxx_assert(__b != memory_order_release);
 801aa10:	f7e8 fc3f 	bl	8003292 <_ZSt23__is_constant_evaluatedv>
 801aa14:	4603      	mov	r3, r0
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d004      	beq.n	801aa24 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 801aa1a:	7abb      	ldrb	r3, [r7, #10]
 801aa1c:	2b03      	cmp	r3, #3
 801aa1e:	d101      	bne.n	801aa24 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 801aa20:	2301      	movs	r3, #1
 801aa22:	e000      	b.n	801aa26 <_ZNKSt6atomicIbE4loadESt12memory_order+0x3a>
 801aa24:	2300      	movs	r3, #0
 801aa26:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 801aa28:	f7e8 fc33 	bl	8003292 <_ZSt23__is_constant_evaluatedv>
 801aa2c:	4603      	mov	r3, r0
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d004      	beq.n	801aa3c <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 801aa32:	7abb      	ldrb	r3, [r7, #10]
 801aa34:	2b04      	cmp	r3, #4
 801aa36:	d101      	bne.n	801aa3c <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 801aa38:	2301      	movs	r3, #1
 801aa3a:	e000      	b.n	801aa3e <_ZNKSt6atomicIbE4loadESt12memory_order+0x52>
 801aa3c:	2300      	movs	r3, #0
 801aa3e:	2b00      	cmp	r3, #0

	return __atomic_load_n(&_M_i, int(__m));
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	f3bf 8f5b 	dmb	ish
 801aa46:	781b      	ldrb	r3, [r3, #0]
 801aa48:	f3bf 8f5b 	dmb	ish
 801aa4c:	b2db      	uxtb	r3, r3
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	bf14      	ite	ne
 801aa52:	2301      	movne	r3, #1
 801aa54:	2300      	moveq	r3, #0
 801aa56:	b2db      	uxtb	r3, r3
 801aa58:	4618      	mov	r0, r3
 801aa5a:	3710      	adds	r7, #16
 801aa5c:	46bd      	mov	sp, r7
 801aa5e:	bd80      	pop	{r7, pc}

0801aa60 <_ZN9pruThread16setThreadRunningEb>:
    atomic<bool> threadPaused{false};

    vector<shared_ptr<Module>> modules;
    vector<shared_ptr<Module>> modulesPost;

    void setThreadRunning(bool val) { threadRunning.store(val, std::memory_order_release); }
 801aa60:	b580      	push	{r7, lr}
 801aa62:	b082      	sub	sp, #8
 801aa64:	af00      	add	r7, sp, #0
 801aa66:	6078      	str	r0, [r7, #4]
 801aa68:	460b      	mov	r3, r1
 801aa6a:	70fb      	strb	r3, [r7, #3]
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	3329      	adds	r3, #41	@ 0x29
 801aa70:	78f9      	ldrb	r1, [r7, #3]
 801aa72:	2203      	movs	r2, #3
 801aa74:	4618      	mov	r0, r3
 801aa76:	f7ff ff73 	bl	801a960 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 801aa7a:	bf00      	nop
 801aa7c:	3708      	adds	r7, #8
 801aa7e:	46bd      	mov	sp, r7
 801aa80:	bd80      	pop	{r7, pc}

0801aa82 <_ZN9pruThread15setThreadPausedEb>:
    void setThreadPaused(bool val) { threadPaused.store(val, std::memory_order_release); }
 801aa82:	b580      	push	{r7, lr}
 801aa84:	b082      	sub	sp, #8
 801aa86:	af00      	add	r7, sp, #0
 801aa88:	6078      	str	r0, [r7, #4]
 801aa8a:	460b      	mov	r3, r1
 801aa8c:	70fb      	strb	r3, [r7, #3]
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	332a      	adds	r3, #42	@ 0x2a
 801aa92:	78f9      	ldrb	r1, [r7, #3]
 801aa94:	2203      	movs	r2, #3
 801aa96:	4618      	mov	r0, r3
 801aa98:	f7ff ff62 	bl	801a960 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 801aa9c:	bf00      	nop
 801aa9e:	3708      	adds	r7, #8
 801aaa0:	46bd      	mov	sp, r7
 801aaa2:	bd80      	pop	{r7, pc}

0801aaa4 <_ZNK9pruThread9isRunningEv>:

	bool registerModule(shared_ptr<Module> module);
	bool registerModulePost(shared_ptr<Module> module);
	bool unregisterModule(shared_ptr<Module> module);

    [[nodiscard]] bool isRunning() const { return threadRunning.load(std::memory_order_acquire);  }
 801aaa4:	b580      	push	{r7, lr}
 801aaa6:	b082      	sub	sp, #8
 801aaa8:	af00      	add	r7, sp, #0
 801aaaa:	6078      	str	r0, [r7, #4]
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	3329      	adds	r3, #41	@ 0x29
 801aab0:	2102      	movs	r1, #2
 801aab2:	4618      	mov	r0, r3
 801aab4:	f7ff ff9a 	bl	801a9ec <_ZNKSt6atomicIbE4loadESt12memory_order>
 801aab8:	4603      	mov	r3, r0
 801aaba:	4618      	mov	r0, r3
 801aabc:	3708      	adds	r7, #8
 801aabe:	46bd      	mov	sp, r7
 801aac0:	bd80      	pop	{r7, pc}

0801aac2 <_ZNK9pruThread8isPausedEv>:
    [[nodiscard]] bool isPaused() const { return threadPaused.load(std::memory_order_acquire); }
 801aac2:	b580      	push	{r7, lr}
 801aac4:	b082      	sub	sp, #8
 801aac6:	af00      	add	r7, sp, #0
 801aac8:	6078      	str	r0, [r7, #4]
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	332a      	adds	r3, #42	@ 0x2a
 801aace:	2102      	movs	r1, #2
 801aad0:	4618      	mov	r0, r3
 801aad2:	f7ff ff8b 	bl	801a9ec <_ZNKSt6atomicIbE4loadESt12memory_order>
 801aad6:	4603      	mov	r3, r0
 801aad8:	4618      	mov	r0, r3
 801aada:	3708      	adds	r7, #8
 801aadc:	46bd      	mov	sp, r7
 801aade:	bd80      	pop	{r7, pc}

0801aae0 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>:

#include "pruThread.h"
#include "../modules/module.h"


pruThread::pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio)
 801aae0:	b580      	push	{r7, lr}
 801aae2:	b084      	sub	sp, #16
 801aae4:	af00      	add	r7, sp, #0
 801aae6:	60f8      	str	r0, [r7, #12]
 801aae8:	60b9      	str	r1, [r7, #8]
 801aaea:	607a      	str	r2, [r7, #4]
 801aaec:	807b      	strh	r3, [r7, #2]
    : threadName(_name),
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	68b9      	ldr	r1, [r7, #8]
 801aaf2:	4618      	mov	r0, r3
 801aaf4:	f00e f867 	bl	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      timer(_timer),
 801aaf8:	68fb      	ldr	r3, [r7, #12]
 801aafa:	687a      	ldr	r2, [r7, #4]
 801aafc:	619a      	str	r2, [r3, #24]
      irq(_irq),
 801aafe:	68fb      	ldr	r3, [r7, #12]
 801ab00:	887a      	ldrh	r2, [r7, #2]
 801ab02:	839a      	strh	r2, [r3, #28]
      frequency(_freq),
 801ab04:	68fb      	ldr	r3, [r7, #12]
 801ab06:	69ba      	ldr	r2, [r7, #24]
 801ab08:	621a      	str	r2, [r3, #32]
	  hasModulesPost(false)
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	2200      	movs	r2, #0
 801ab0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 801ab12:	68fb      	ldr	r3, [r7, #12]
 801ab14:	3329      	adds	r3, #41	@ 0x29
 801ab16:	2100      	movs	r1, #0
 801ab18:	4618      	mov	r0, r3
 801ab1a:	f7ff ff10 	bl	801a93e <_ZNSt6atomicIbEC1Eb>
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	332a      	adds	r3, #42	@ 0x2a
 801ab22:	2100      	movs	r1, #0
 801ab24:	4618      	mov	r0, r3
 801ab26:	f7ff ff0a 	bl	801a93e <_ZNSt6atomicIbEC1Eb>
 801ab2a:	68fb      	ldr	r3, [r7, #12]
 801ab2c:	332c      	adds	r3, #44	@ 0x2c
 801ab2e:	4618      	mov	r0, r3
 801ab30:	f7f0 fa5c 	bl	800afec <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 801ab34:	68fb      	ldr	r3, [r7, #12]
 801ab36:	3338      	adds	r3, #56	@ 0x38
 801ab38:	4618      	mov	r0, r3
 801ab3a:	f7f0 fa57 	bl	800afec <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
{
	printf("Creating %s thread at %lu hz\n", threadName.c_str(), (unsigned long)frequency);
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	4618      	mov	r0, r3
 801ab42:	f00e f813 	bl	8028b6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 801ab46:	4601      	mov	r1, r0
 801ab48:	68fb      	ldr	r3, [r7, #12]
 801ab4a:	6a1b      	ldr	r3, [r3, #32]
 801ab4c:	461a      	mov	r2, r3
 801ab4e:	4808      	ldr	r0, [pc, #32]	@ (801ab70 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh+0x90>)
 801ab50:	f00e fbd8 	bl	8029304 <iprintf>
    NVIC_SetPriority(irq, _prio);
 801ab54:	68fb      	ldr	r3, [r7, #12]
 801ab56:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801ab5a:	7f3a      	ldrb	r2, [r7, #28]
 801ab5c:	4611      	mov	r1, r2
 801ab5e:	4618      	mov	r0, r3
 801ab60:	f7ff feb0 	bl	801a8c4 <__NVIC_SetPriority>
}
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	4618      	mov	r0, r3
 801ab68:	3710      	adds	r7, #16
 801ab6a:	46bd      	mov	sp, r7
 801ab6c:	bd80      	pop	{r7, pc}
 801ab6e:	bf00      	nop
 801ab70:	0802afc4 	.word	0x0802afc4

0801ab74 <_ZN9pruThread14executeModulesEv>:


bool pruThread::executeModules() {
 801ab74:	b580      	push	{r7, lr}
 801ab76:	b08a      	sub	sp, #40	@ 0x28
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
    for (const auto& module : modules) {
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	332c      	adds	r3, #44	@ 0x2c
 801ab80:	627b      	str	r3, [r7, #36]	@ 0x24
 801ab82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ab84:	f7f1 fc03 	bl	800c38e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801ab88:	4603      	mov	r3, r0
 801ab8a:	617b      	str	r3, [r7, #20]
 801ab8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ab8e:	f7f1 fc0e 	bl	800c3ae <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801ab92:	4603      	mov	r3, r0
 801ab94:	613b      	str	r3, [r7, #16]
 801ab96:	e018      	b.n	801abca <_ZN9pruThread14executeModulesEv+0x56>
 801ab98:	f107 0314 	add.w	r3, r7, #20
 801ab9c:	4618      	mov	r0, r3
 801ab9e:	f7f1 fc40 	bl	800c422 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801aba2:	61b8      	str	r0, [r7, #24]
        if (module) {
 801aba4:	69bb      	ldr	r3, [r7, #24]
 801aba6:	4618      	mov	r0, r3
 801aba8:	f7f1 fc47 	bl	800c43a <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801abac:	4603      	mov	r3, r0
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d006      	beq.n	801abc0 <_ZN9pruThread14executeModulesEv+0x4c>
            module->runModule();
 801abb2:	69b8      	ldr	r0, [r7, #24]
 801abb4:	f7f1 fc52 	bl	800c45c <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 801abb8:	4603      	mov	r3, r0
 801abba:	4618      	mov	r0, r3
 801abbc:	f7f7 f8fc 	bl	8011db8 <_ZN6Module9runModuleEv>
    for (const auto& module : modules) {
 801abc0:	f107 0314 	add.w	r3, r7, #20
 801abc4:	4618      	mov	r0, r3
 801abc6:	f7f1 fc1b 	bl	800c400 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 801abca:	f107 0210 	add.w	r2, r7, #16
 801abce:	f107 0314 	add.w	r3, r7, #20
 801abd2:	4611      	mov	r1, r2
 801abd4:	4618      	mov	r0, r3
 801abd6:	f7f1 fbfb 	bl	800c3d0 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801abda:	4603      	mov	r3, r0
 801abdc:	2b00      	cmp	r3, #0
 801abde:	d1db      	bne.n	801ab98 <_ZN9pruThread14executeModulesEv+0x24>
        }
    }

    if (hasModulesPost) {
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d031      	beq.n	801ac4e <_ZN9pruThread14executeModulesEv+0xda>
		for (const auto& module : modulesPost) {
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	3338      	adds	r3, #56	@ 0x38
 801abee:	623b      	str	r3, [r7, #32]
 801abf0:	6a38      	ldr	r0, [r7, #32]
 801abf2:	f7f1 fbcc 	bl	800c38e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801abf6:	4603      	mov	r3, r0
 801abf8:	60fb      	str	r3, [r7, #12]
 801abfa:	6a38      	ldr	r0, [r7, #32]
 801abfc:	f7f1 fbd7 	bl	800c3ae <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801ac00:	4603      	mov	r3, r0
 801ac02:	60bb      	str	r3, [r7, #8]
 801ac04:	e018      	b.n	801ac38 <_ZN9pruThread14executeModulesEv+0xc4>
 801ac06:	f107 030c 	add.w	r3, r7, #12
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	f7f1 fc09 	bl	800c422 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801ac10:	61f8      	str	r0, [r7, #28]
			if (module) {
 801ac12:	69fb      	ldr	r3, [r7, #28]
 801ac14:	4618      	mov	r0, r3
 801ac16:	f7f1 fc10 	bl	800c43a <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801ac1a:	4603      	mov	r3, r0
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d006      	beq.n	801ac2e <_ZN9pruThread14executeModulesEv+0xba>
				module->runModule();
 801ac20:	69f8      	ldr	r0, [r7, #28]
 801ac22:	f7f1 fc1b 	bl	800c45c <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 801ac26:	4603      	mov	r3, r0
 801ac28:	4618      	mov	r0, r3
 801ac2a:	f7f7 f8c5 	bl	8011db8 <_ZN6Module9runModuleEv>
		for (const auto& module : modulesPost) {
 801ac2e:	f107 030c 	add.w	r3, r7, #12
 801ac32:	4618      	mov	r0, r3
 801ac34:	f7f1 fbe4 	bl	800c400 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 801ac38:	f107 0208 	add.w	r2, r7, #8
 801ac3c:	f107 030c 	add.w	r3, r7, #12
 801ac40:	4611      	mov	r1, r2
 801ac42:	4618      	mov	r0, r3
 801ac44:	f7f1 fbc4 	bl	800c3d0 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801ac48:	4603      	mov	r3, r0
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d1db      	bne.n	801ac06 <_ZN9pruThread14executeModulesEv+0x92>
			}
		}
    }

    return true;
 801ac4e:	2301      	movs	r3, #1
}
 801ac50:	4618      	mov	r0, r3
 801ac52:	3728      	adds	r7, #40	@ 0x28
 801ac54:	46bd      	mov	sp, r7
 801ac56:	bd80      	pop	{r7, pc}

0801ac58 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>:

bool pruThread::registerModule(shared_ptr<Module> module) {
 801ac58:	b580      	push	{r7, lr}
 801ac5a:	b082      	sub	sp, #8
 801ac5c:	af00      	add	r7, sp, #0
 801ac5e:	6078      	str	r0, [r7, #4]
 801ac60:	6039      	str	r1, [r7, #0]
    if (!module) {
 801ac62:	683b      	ldr	r3, [r7, #0]
 801ac64:	4618      	mov	r0, r3
 801ac66:	f7f1 fbe8 	bl	800c43a <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801ac6a:	4603      	mov	r3, r0
 801ac6c:	f083 0301 	eor.w	r3, r3, #1
 801ac70:	b2db      	uxtb	r3, r3
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d001      	beq.n	801ac7a <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 801ac76:	2300      	movs	r3, #0
 801ac78:	e006      	b.n	801ac88 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x30>
    }
    modules.push_back(module);
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	332c      	adds	r3, #44	@ 0x2c
 801ac7e:	6839      	ldr	r1, [r7, #0]
 801ac80:	4618      	mov	r0, r3
 801ac82:	f000 f8f4 	bl	801ae6e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 801ac86:	2301      	movs	r3, #1
}
 801ac88:	4618      	mov	r0, r3
 801ac8a:	3708      	adds	r7, #8
 801ac8c:	46bd      	mov	sp, r7
 801ac8e:	bd80      	pop	{r7, pc}

0801ac90 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>:

bool pruThread::registerModulePost(shared_ptr<Module> module) {
 801ac90:	b580      	push	{r7, lr}
 801ac92:	b082      	sub	sp, #8
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	6078      	str	r0, [r7, #4]
 801ac98:	6039      	str	r1, [r7, #0]
    if (!module) {
 801ac9a:	683b      	ldr	r3, [r7, #0]
 801ac9c:	4618      	mov	r0, r3
 801ac9e:	f7f1 fbcc 	bl	800c43a <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801aca2:	4603      	mov	r3, r0
 801aca4:	f083 0301 	eor.w	r3, r3, #1
 801aca8:	b2db      	uxtb	r3, r3
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d001      	beq.n	801acb2 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x22>
        return false;
 801acae:	2300      	movs	r3, #0
 801acb0:	e00a      	b.n	801acc8 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x38>
    }
    hasModulesPost = true;
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	2201      	movs	r2, #1
 801acb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    modulesPost.push_back(module);
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	3338      	adds	r3, #56	@ 0x38
 801acbe:	6839      	ldr	r1, [r7, #0]
 801acc0:	4618      	mov	r0, r3
 801acc2:	f000 f8d4 	bl	801ae6e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 801acc6:	2301      	movs	r3, #1
}
 801acc8:	4618      	mov	r0, r3
 801acca:	3708      	adds	r7, #8
 801accc:	46bd      	mov	sp, r7
 801acce:	bd80      	pop	{r7, pc}

0801acd0 <_ZZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEENKUlRKS2_E_clES4_>:
        return false;
    }

    // Use a lambda to compare the raw pointers inside the shared_ptrs
    auto iter = std::remove_if(modules.begin(), modules.end(),
        [&module](const std::shared_ptr<Module>& mod) {
 801acd0:	b580      	push	{r7, lr}
 801acd2:	b082      	sub	sp, #8
 801acd4:	af00      	add	r7, sp, #0
 801acd6:	6078      	str	r0, [r7, #4]
 801acd8:	6039      	str	r1, [r7, #0]
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	681b      	ldr	r3, [r3, #0]
            return mod == module; // Compare shared_ptrs directly
 801acde:	4619      	mov	r1, r3
 801ace0:	6838      	ldr	r0, [r7, #0]
 801ace2:	f000 f8ea 	bl	801aeba <_ZSteqI6ModuleS0_EbRKSt10shared_ptrIT_ERKS1_IT0_E>
 801ace6:	4603      	mov	r3, r0
        });
 801ace8:	4618      	mov	r0, r3
 801acea:	3708      	adds	r7, #8
 801acec:	46bd      	mov	sp, r7
 801acee:	bd80      	pop	{r7, pc}

0801acf0 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>:
bool pruThread::unregisterModule(std::shared_ptr<Module> module) {
 801acf0:	b590      	push	{r4, r7, lr}
 801acf2:	b087      	sub	sp, #28
 801acf4:	af00      	add	r7, sp, #0
 801acf6:	6078      	str	r0, [r7, #4]
 801acf8:	6039      	str	r1, [r7, #0]
    if (!module) {
 801acfa:	683b      	ldr	r3, [r7, #0]
 801acfc:	4618      	mov	r0, r3
 801acfe:	f7f1 fb9c 	bl	800c43a <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801ad02:	4603      	mov	r3, r0
 801ad04:	f083 0301 	eor.w	r3, r3, #1
 801ad08:	b2db      	uxtb	r3, r3
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	d001      	beq.n	801ad12 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 801ad0e:	2300      	movs	r3, #0
 801ad10:	e032      	b.n	801ad78 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE+0x88>
    auto iter = std::remove_if(modules.begin(), modules.end(),
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	332c      	adds	r3, #44	@ 0x2c
 801ad16:	4618      	mov	r0, r3
 801ad18:	f7f1 fb39 	bl	800c38e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801ad1c:	4604      	mov	r4, r0
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	332c      	adds	r3, #44	@ 0x2c
 801ad22:	4618      	mov	r0, r3
 801ad24:	f7f1 fb43 	bl	800c3ae <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801ad28:	4601      	mov	r1, r0
 801ad2a:	683b      	ldr	r3, [r7, #0]
 801ad2c:	461a      	mov	r2, r3
 801ad2e:	4620      	mov	r0, r4
 801ad30:	f000 f8db 	bl	801aeea <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEZN9pruThread16unregisterModuleES4_EUlRKS4_E_ET_SE_SE_T0_>
 801ad34:	4603      	mov	r3, r0
 801ad36:	60bb      	str	r3, [r7, #8]

    modules.erase(iter, modules.end());
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 801ad3e:	f107 0208 	add.w	r2, r7, #8
 801ad42:	f107 030c 	add.w	r3, r7, #12
 801ad46:	4611      	mov	r1, r2
 801ad48:	4618      	mov	r0, r3
 801ad4a:	f000 f8e2 	bl	801af12 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	332c      	adds	r3, #44	@ 0x2c
 801ad52:	4618      	mov	r0, r3
 801ad54:	f7f1 fb2b 	bl	800c3ae <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801ad58:	4603      	mov	r3, r0
 801ad5a:	617b      	str	r3, [r7, #20]
 801ad5c:	f107 0214 	add.w	r2, r7, #20
 801ad60:	f107 0310 	add.w	r3, r7, #16
 801ad64:	4611      	mov	r1, r2
 801ad66:	4618      	mov	r0, r3
 801ad68:	f000 f8d3 	bl	801af12 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>
 801ad6c:	693a      	ldr	r2, [r7, #16]
 801ad6e:	68f9      	ldr	r1, [r7, #12]
 801ad70:	4620      	mov	r0, r4
 801ad72:	f000 f8df 	bl	801af34 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS2_S4_EES9_>
    return true;
 801ad76:	2301      	movs	r3, #1
}
 801ad78:	4618      	mov	r0, r3
 801ad7a:	371c      	adds	r7, #28
 801ad7c:	46bd      	mov	sp, r7
 801ad7e:	bd90      	pop	{r4, r7, pc}

0801ad80 <_ZN9pruThread11startThreadEv>:

// For baremetal, this is just initialization
bool pruThread::startThread() {
 801ad80:	b590      	push	{r4, r7, lr}
 801ad82:	b085      	sub	sp, #20
 801ad84:	af02      	add	r7, sp, #8
 801ad86:	6078      	str	r0, [r7, #4]
    if (isRunning()) {
 801ad88:	6878      	ldr	r0, [r7, #4]
 801ad8a:	f7ff fe8b 	bl	801aaa4 <_ZNK9pruThread9isRunningEv>
 801ad8e:	4603      	mov	r3, r0
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	d001      	beq.n	801ad98 <_ZN9pruThread11startThreadEv+0x18>
        return true;
 801ad94:	2301      	movs	r3, #1
 801ad96:	e01c      	b.n	801add2 <_ZN9pruThread11startThreadEv+0x52>
    }

    setThreadRunning(true);
 801ad98:	2101      	movs	r1, #1
 801ad9a:	6878      	ldr	r0, [r7, #4]
 801ad9c:	f7ff fe60 	bl	801aa60 <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 801ada0:	2100      	movs	r1, #0
 801ada2:	6878      	ldr	r0, [r7, #4]
 801ada4:	f7ff fe6d 	bl	801aa82 <_ZN9pruThread15setThreadPausedEb>

    timerPtr = new pruTimer(timer, irq, frequency, this);
 801ada8:	2014      	movs	r0, #20
 801adaa:	f00d fc01 	bl	80285b0 <_Znwj>
 801adae:	4603      	mov	r3, r0
 801adb0:	461c      	mov	r4, r3
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	6999      	ldr	r1, [r3, #24]
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	6a18      	ldr	r0, [r3, #32]
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	9300      	str	r3, [sp, #0]
 801adc4:	4603      	mov	r3, r0
 801adc6:	4620      	mov	r0, r4
 801adc8:	f000 fd1a 	bl	801b800 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	625c      	str	r4, [r3, #36]	@ 0x24
    return true;
 801add0:	2301      	movs	r3, #1
}
 801add2:	4618      	mov	r0, r3
 801add4:	370c      	adds	r7, #12
 801add6:	46bd      	mov	sp, r7
 801add8:	bd90      	pop	{r4, r7, pc}

0801adda <_ZN9pruThread10stopThreadEv>:

void pruThread::stopThread() {
 801adda:	b580      	push	{r7, lr}
 801addc:	b082      	sub	sp, #8
 801adde:	af00      	add	r7, sp, #0
 801ade0:	6078      	str	r0, [r7, #4]
    setThreadRunning(false);
 801ade2:	2100      	movs	r1, #0
 801ade4:	6878      	ldr	r0, [r7, #4]
 801ade6:	f7ff fe3b 	bl	801aa60 <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 801adea:	2100      	movs	r1, #0
 801adec:	6878      	ldr	r0, [r7, #4]
 801adee:	f7ff fe48 	bl	801aa82 <_ZN9pruThread15setThreadPausedEb>
}
 801adf2:	bf00      	nop
 801adf4:	3708      	adds	r7, #8
 801adf6:	46bd      	mov	sp, r7
 801adf8:	bd80      	pop	{r7, pc}

0801adfa <_ZN9pruThread6updateEv>:

// This is the main function that should be called periodically
bool pruThread::update() {
 801adfa:	b580      	push	{r7, lr}
 801adfc:	b082      	sub	sp, #8
 801adfe:	af00      	add	r7, sp, #0
 801ae00:	6078      	str	r0, [r7, #4]
    if (!isRunning() || isPaused()) {
 801ae02:	6878      	ldr	r0, [r7, #4]
 801ae04:	f7ff fe4e 	bl	801aaa4 <_ZNK9pruThread9isRunningEv>
 801ae08:	4603      	mov	r3, r0
 801ae0a:	f083 0301 	eor.w	r3, r3, #1
 801ae0e:	b2db      	uxtb	r3, r3
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	d105      	bne.n	801ae20 <_ZN9pruThread6updateEv+0x26>
 801ae14:	6878      	ldr	r0, [r7, #4]
 801ae16:	f7ff fe54 	bl	801aac2 <_ZNK9pruThread8isPausedEv>
 801ae1a:	4603      	mov	r3, r0
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d001      	beq.n	801ae24 <_ZN9pruThread6updateEv+0x2a>
 801ae20:	2301      	movs	r3, #1
 801ae22:	e000      	b.n	801ae26 <_ZN9pruThread6updateEv+0x2c>
 801ae24:	2300      	movs	r3, #0
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d001      	beq.n	801ae2e <_ZN9pruThread6updateEv+0x34>
        return true;
 801ae2a:	2301      	movs	r3, #1
 801ae2c:	e00b      	b.n	801ae46 <_ZN9pruThread6updateEv+0x4c>
    }

    // Execute all modules
    if (!executeModules()) {
 801ae2e:	6878      	ldr	r0, [r7, #4]
 801ae30:	f7ff fea0 	bl	801ab74 <_ZN9pruThread14executeModulesEv>
 801ae34:	4603      	mov	r3, r0
 801ae36:	f083 0301 	eor.w	r3, r3, #1
 801ae3a:	b2db      	uxtb	r3, r3
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d001      	beq.n	801ae44 <_ZN9pruThread6updateEv+0x4a>
        return false;
 801ae40:	2300      	movs	r3, #0
 801ae42:	e000      	b.n	801ae46 <_ZN9pruThread6updateEv+0x4c>
    }

    return true;
 801ae44:	2301      	movs	r3, #1
}
 801ae46:	4618      	mov	r0, r3
 801ae48:	3708      	adds	r7, #8
 801ae4a:	46bd      	mov	sp, r7
 801ae4c:	bd80      	pop	{r7, pc}

0801ae4e <_ZNSt13__atomic_baseIbEC1Eb>:
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 801ae4e:	b480      	push	{r7}
 801ae50:	b083      	sub	sp, #12
 801ae52:	af00      	add	r7, sp, #0
 801ae54:	6078      	str	r0, [r7, #4]
 801ae56:	460b      	mov	r3, r1
 801ae58:	70fb      	strb	r3, [r7, #3]
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	78fa      	ldrb	r2, [r7, #3]
 801ae5e:	701a      	strb	r2, [r3, #0]
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	4618      	mov	r0, r3
 801ae64:	370c      	adds	r7, #12
 801ae66:	46bd      	mov	sp, r7
 801ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae6c:	4770      	bx	lr

0801ae6e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
 801ae6e:	b580      	push	{r7, lr}
 801ae70:	b082      	sub	sp, #8
 801ae72:	af00      	add	r7, sp, #0
 801ae74:	6078      	str	r0, [r7, #4]
 801ae76:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	685a      	ldr	r2, [r3, #4]
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	689b      	ldr	r3, [r3, #8]
 801ae80:	429a      	cmp	r2, r3
 801ae82:	d00d      	beq.n	801aea0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801ae84:	6878      	ldr	r0, [r7, #4]
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	685b      	ldr	r3, [r3, #4]
 801ae8a:	683a      	ldr	r2, [r7, #0]
 801ae8c:	4619      	mov	r1, r3
 801ae8e:	f000 f88a 	bl	801afa6 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	685b      	ldr	r3, [r3, #4]
 801ae96:	f103 0208 	add.w	r2, r3, #8
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	605a      	str	r2, [r3, #4]
      }
 801ae9e:	e008      	b.n	801aeb2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x44>
	  _M_realloc_insert(end(), __x);
 801aea0:	6878      	ldr	r0, [r7, #4]
 801aea2:	f7f1 fa84 	bl	800c3ae <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801aea6:	4603      	mov	r3, r0
 801aea8:	683a      	ldr	r2, [r7, #0]
 801aeaa:	4619      	mov	r1, r3
 801aeac:	6878      	ldr	r0, [r7, #4]
 801aeae:	f000 f88d 	bl	801afcc <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 801aeb2:	bf00      	nop
 801aeb4:	3708      	adds	r7, #8
 801aeb6:	46bd      	mov	sp, r7
 801aeb8:	bd80      	pop	{r7, pc}

0801aeba <_ZSteqI6ModuleS0_EbRKSt10shared_ptrIT_ERKS1_IT0_E>:
    operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
 801aeba:	b590      	push	{r4, r7, lr}
 801aebc:	b083      	sub	sp, #12
 801aebe:	af00      	add	r7, sp, #0
 801aec0:	6078      	str	r0, [r7, #4]
 801aec2:	6039      	str	r1, [r7, #0]
    { return __a.get() == __b.get(); }
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	4618      	mov	r0, r3
 801aec8:	f7f2 fa77 	bl	800d3ba <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 801aecc:	4604      	mov	r4, r0
 801aece:	683b      	ldr	r3, [r7, #0]
 801aed0:	4618      	mov	r0, r3
 801aed2:	f7f2 fa72 	bl	800d3ba <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 801aed6:	4603      	mov	r3, r0
 801aed8:	429c      	cmp	r4, r3
 801aeda:	bf0c      	ite	eq
 801aedc:	2301      	moveq	r3, #1
 801aede:	2300      	movne	r3, #0
 801aee0:	b2db      	uxtb	r3, r3
 801aee2:	4618      	mov	r0, r3
 801aee4:	370c      	adds	r7, #12
 801aee6:	46bd      	mov	sp, r7
 801aee8:	bd90      	pop	{r4, r7, pc}

0801aeea <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEZN9pruThread16unregisterModuleES4_EUlRKS4_E_ET_SE_SE_T0_>:
   *  are still present, but their value is unspecified.
  */
  template<typename _ForwardIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
 801aeea:	b580      	push	{r7, lr}
 801aeec:	b084      	sub	sp, #16
 801aeee:	af00      	add	r7, sp, #0
 801aef0:	60f8      	str	r0, [r7, #12]
 801aef2:	60b9      	str	r1, [r7, #8]
 801aef4:	607a      	str	r2, [r7, #4]
				  _ForwardIterator>)
      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__remove_if(__first, __last,
 801aef6:	6878      	ldr	r0, [r7, #4]
 801aef8:	f000 f8e4 	bl	801b0c4 <_ZN9__gnu_cxx5__ops11__pred_iterIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EENS0_10_Iter_predIT_EESA_>
 801aefc:	4603      	mov	r3, r0
 801aefe:	461a      	mov	r2, r3
 801af00:	68b9      	ldr	r1, [r7, #8]
 801af02:	68f8      	ldr	r0, [r7, #12]
 801af04:	f000 f8f2 	bl	801b0ec <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>
 801af08:	4603      	mov	r3, r0
			      __gnu_cxx::__ops::__pred_iter(__pred));
    }
 801af0a:	4618      	mov	r0, r3
 801af0c:	3710      	adds	r7, #16
 801af0e:	46bd      	mov	sp, r7
 801af10:	bd80      	pop	{r7, pc}

0801af12 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>:
	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
 801af12:	b580      	push	{r7, lr}
 801af14:	b082      	sub	sp, #8
 801af16:	af00      	add	r7, sp, #0
 801af18:	6078      	str	r0, [r7, #4]
 801af1a:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 801af1c:	6838      	ldr	r0, [r7, #0]
 801af1e:	f7f1 ff63 	bl	800cde8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801af22:	4603      	mov	r3, r0
 801af24:	681a      	ldr	r2, [r3, #0]
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	601a      	str	r2, [r3, #0]
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	4618      	mov	r0, r3
 801af2e:	3708      	adds	r7, #8
 801af30:	46bd      	mov	sp, r7
 801af32:	bd80      	pop	{r7, pc}

0801af34 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS2_S4_EES9_>:
      erase(const_iterator __first, const_iterator __last)
 801af34:	b590      	push	{r4, r7, lr}
 801af36:	b087      	sub	sp, #28
 801af38:	af00      	add	r7, sp, #0
 801af3a:	60f8      	str	r0, [r7, #12]
 801af3c:	60b9      	str	r1, [r7, #8]
 801af3e:	607a      	str	r2, [r7, #4]
	const auto __beg = begin();
 801af40:	68f8      	ldr	r0, [r7, #12]
 801af42:	f7f1 fa24 	bl	800c38e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801af46:	4603      	mov	r3, r0
 801af48:	617b      	str	r3, [r7, #20]
	const auto __cbeg = cbegin();
 801af4a:	68f8      	ldr	r0, [r7, #12]
 801af4c:	f000 f929 	bl	801b1a2 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE6cbeginEv>
 801af50:	4603      	mov	r3, r0
 801af52:	613b      	str	r3, [r7, #16]
	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
 801af54:	f107 0210 	add.w	r2, r7, #16
 801af58:	f107 0308 	add.w	r3, r7, #8
 801af5c:	4611      	mov	r1, r2
 801af5e:	4618      	mov	r0, r3
 801af60:	f000 f92f 	bl	801b1c2 <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 801af64:	4602      	mov	r2, r0
 801af66:	f107 0314 	add.w	r3, r7, #20
 801af6a:	4611      	mov	r1, r2
 801af6c:	4618      	mov	r0, r3
 801af6e:	f000 f93d 	bl	801b1ec <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 801af72:	4604      	mov	r4, r0
 801af74:	f107 0210 	add.w	r2, r7, #16
 801af78:	1d3b      	adds	r3, r7, #4
 801af7a:	4611      	mov	r1, r2
 801af7c:	4618      	mov	r0, r3
 801af7e:	f000 f920 	bl	801b1c2 <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 801af82:	4602      	mov	r2, r0
 801af84:	f107 0314 	add.w	r3, r7, #20
 801af88:	4611      	mov	r1, r2
 801af8a:	4618      	mov	r0, r3
 801af8c:	f000 f92e 	bl	801b1ec <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 801af90:	4603      	mov	r3, r0
 801af92:	461a      	mov	r2, r3
 801af94:	4621      	mov	r1, r4
 801af96:	68f8      	ldr	r0, [r7, #12]
 801af98:	f000 f940 	bl	801b21c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_>
 801af9c:	4603      	mov	r3, r0
      }
 801af9e:	4618      	mov	r0, r3
 801afa0:	371c      	adds	r7, #28
 801afa2:	46bd      	mov	sp, r7
 801afa4:	bd90      	pop	{r4, r7, pc}

0801afa6 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801afa6:	b580      	push	{r7, lr}
 801afa8:	b084      	sub	sp, #16
 801afaa:	af00      	add	r7, sp, #0
 801afac:	60f8      	str	r0, [r7, #12]
 801afae:	60b9      	str	r1, [r7, #8]
 801afb0:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 801afb2:	6878      	ldr	r0, [r7, #4]
 801afb4:	f000 f979 	bl	801b2aa <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 801afb8:	4603      	mov	r3, r0
 801afba:	461a      	mov	r2, r3
 801afbc:	68b9      	ldr	r1, [r7, #8]
 801afbe:	68f8      	ldr	r0, [r7, #12]
 801afc0:	f000 f97e 	bl	801b2c0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 801afc4:	bf00      	nop
 801afc6:	3710      	adds	r7, #16
 801afc8:	46bd      	mov	sp, r7
 801afca:	bd80      	pop	{r7, pc}

0801afcc <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801afcc:	b5b0      	push	{r4, r5, r7, lr}
 801afce:	b08c      	sub	sp, #48	@ 0x30
 801afd0:	af00      	add	r7, sp, #0
 801afd2:	60f8      	str	r0, [r7, #12]
 801afd4:	60b9      	str	r1, [r7, #8]
 801afd6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801afd8:	4a39      	ldr	r2, [pc, #228]	@ (801b0c0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 801afda:	2101      	movs	r1, #1
 801afdc:	68f8      	ldr	r0, [r7, #12]
 801afde:	f7f2 fd1c 	bl	800da1a <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>
 801afe2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 801afe4:	68fb      	ldr	r3, [r7, #12]
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801afea:	68fb      	ldr	r3, [r7, #12]
 801afec:	685b      	ldr	r3, [r3, #4]
 801afee:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 801aff0:	68f8      	ldr	r0, [r7, #12]
 801aff2:	f7f1 f9cc 	bl	800c38e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801aff6:	4603      	mov	r3, r0
 801aff8:	617b      	str	r3, [r7, #20]
 801affa:	f107 0214 	add.w	r2, r7, #20
 801affe:	f107 0308 	add.w	r3, r7, #8
 801b002:	4611      	mov	r1, r2
 801b004:	4618      	mov	r0, r3
 801b006:	f7f2 fd4f 	bl	800daa8 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801b00a:	4603      	mov	r3, r0
 801b00c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 801b00e:	68fb      	ldr	r3, [r7, #12]
 801b010:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b012:	4618      	mov	r0, r3
 801b014:	f7f2 fd5d 	bl	800dad2 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>
 801b018:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801b01a:	69fb      	ldr	r3, [r7, #28]
 801b01c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 801b01e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 801b020:	6a3b      	ldr	r3, [r7, #32]
 801b022:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 801b024:	69fa      	ldr	r2, [r7, #28]
 801b026:	18d5      	adds	r5, r2, r3
 801b028:	6878      	ldr	r0, [r7, #4]
 801b02a:	f000 f93e 	bl	801b2aa <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 801b02e:	4603      	mov	r3, r0
 801b030:	461a      	mov	r2, r3
 801b032:	4629      	mov	r1, r5
 801b034:	4620      	mov	r0, r4
 801b036:	f7ff ffb6 	bl	801afa6 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
 801b03a:	2300      	movs	r3, #0
 801b03c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801b03e:	f107 0308 	add.w	r3, r7, #8
 801b042:	4618      	mov	r0, r3
 801b044:	f7f1 fed0 	bl	800cde8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b048:	4603      	mov	r3, r0
 801b04a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 801b04c:	68fb      	ldr	r3, [r7, #12]
 801b04e:	4618      	mov	r0, r3
 801b050:	f7f1 fc3c 	bl	800c8cc <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 801b054:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801b056:	69fa      	ldr	r2, [r7, #28]
 801b058:	4621      	mov	r1, r4
 801b05a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b05c:	f7f2 fd4d 	bl	800dafa <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 801b060:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801b062:	69bb      	ldr	r3, [r7, #24]
 801b064:	3308      	adds	r3, #8
 801b066:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801b068:	f107 0308 	add.w	r3, r7, #8
 801b06c:	4618      	mov	r0, r3
 801b06e:	f7f1 febb 	bl	800cde8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b072:	4603      	mov	r3, r0
 801b074:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801b076:	68fb      	ldr	r3, [r7, #12]
 801b078:	4618      	mov	r0, r3
 801b07a:	f7f1 fc27 	bl	800c8cc <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 801b07e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801b080:	69ba      	ldr	r2, [r7, #24]
 801b082:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b084:	4620      	mov	r0, r4
 801b086:	f7f2 fd38 	bl	800dafa <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 801b08a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 801b08c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801b08e:	68fb      	ldr	r3, [r7, #12]
 801b090:	689a      	ldr	r2, [r3, #8]
 801b092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b094:	1ad3      	subs	r3, r2, r3
 801b096:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 801b098:	461a      	mov	r2, r3
 801b09a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b09c:	f7f1 fc03 	bl	800c8a6 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 801b0a0:	68fb      	ldr	r3, [r7, #12]
 801b0a2:	69fa      	ldr	r2, [r7, #28]
 801b0a4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801b0a6:	68fb      	ldr	r3, [r7, #12]
 801b0a8:	69ba      	ldr	r2, [r7, #24]
 801b0aa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801b0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0ae:	00db      	lsls	r3, r3, #3
 801b0b0:	69fa      	ldr	r2, [r7, #28]
 801b0b2:	441a      	add	r2, r3
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	609a      	str	r2, [r3, #8]
    }
 801b0b8:	bf00      	nop
 801b0ba:	3730      	adds	r7, #48	@ 0x30
 801b0bc:	46bd      	mov	sp, r7
 801b0be:	bdb0      	pop	{r4, r5, r7, pc}
 801b0c0:	0802afe4 	.word	0x0802afe4

0801b0c4 <_ZN9__gnu_cxx5__ops11__pred_iterIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EENS0_10_Iter_predIT_EESA_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 801b0c4:	b580      	push	{r7, lr}
 801b0c6:	b084      	sub	sp, #16
 801b0c8:	af00      	add	r7, sp, #0
 801b0ca:	6078      	str	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 801b0cc:	1d3b      	adds	r3, r7, #4
 801b0ce:	4618      	mov	r0, r3
 801b0d0:	f000 f90e 	bl	801b2f0 <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>
 801b0d4:	4602      	mov	r2, r0
 801b0d6:	f107 030c 	add.w	r3, r7, #12
 801b0da:	6811      	ldr	r1, [r2, #0]
 801b0dc:	4618      	mov	r0, r3
 801b0de:	f000 f912 	bl	801b306 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EC1ES8_>
 801b0e2:	68fb      	ldr	r3, [r7, #12]
 801b0e4:	4618      	mov	r0, r3
 801b0e6:	3710      	adds	r7, #16
 801b0e8:	46bd      	mov	sp, r7
 801b0ea:	bd80      	pop	{r7, pc}

0801b0ec <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>:
    }

  template<typename _ForwardIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
 801b0ec:	b590      	push	{r4, r7, lr}
 801b0ee:	b087      	sub	sp, #28
 801b0f0:	af00      	add	r7, sp, #0
 801b0f2:	60f8      	str	r0, [r7, #12]
 801b0f4:	60b9      	str	r1, [r7, #8]
 801b0f6:	607a      	str	r2, [r7, #4]
		_Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
 801b0f8:	687a      	ldr	r2, [r7, #4]
 801b0fa:	68b9      	ldr	r1, [r7, #8]
 801b0fc:	68f8      	ldr	r0, [r7, #12]
 801b0fe:	f000 f914 	bl	801b32a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>
 801b102:	4603      	mov	r3, r0
 801b104:	60fb      	str	r3, [r7, #12]
      if (__first == __last)
 801b106:	f107 0208 	add.w	r2, r7, #8
 801b10a:	f107 030c 	add.w	r3, r7, #12
 801b10e:	4611      	mov	r1, r2
 801b110:	4618      	mov	r0, r3
 801b112:	f000 f920 	bl	801b356 <_ZN9__gnu_cxxeqIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801b116:	4603      	mov	r3, r0
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d001      	beq.n	801b120 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x34>
	return __first;
 801b11c:	68fb      	ldr	r3, [r7, #12]
 801b11e:	e03c      	b.n	801b19a <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0xae>
      _ForwardIterator __result = __first;
 801b120:	68fb      	ldr	r3, [r7, #12]
 801b122:	617b      	str	r3, [r7, #20]
      ++__first;
 801b124:	f107 030c 	add.w	r3, r7, #12
 801b128:	4618      	mov	r0, r3
 801b12a:	f7f1 f969 	bl	800c400 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __first != __last; ++__first)
 801b12e:	e028      	b.n	801b182 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x96>
	if (!__pred(__first))
 801b130:	1d3b      	adds	r3, r7, #4
 801b132:	68f9      	ldr	r1, [r7, #12]
 801b134:	4618      	mov	r0, r3
 801b136:	f000 f926 	bl	801b386 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b13a:	4603      	mov	r3, r0
 801b13c:	f083 0301 	eor.w	r3, r3, #1
 801b140:	b2db      	uxtb	r3, r3
 801b142:	2b00      	cmp	r3, #0
 801b144:	d018      	beq.n	801b178 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x8c>
	  {
	    *__result = _GLIBCXX_MOVE(*__first);
 801b146:	f107 030c 	add.w	r3, r7, #12
 801b14a:	4618      	mov	r0, r3
 801b14c:	f7f1 f969 	bl	800c422 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801b150:	4603      	mov	r3, r0
 801b152:	4618      	mov	r0, r3
 801b154:	f7f1 f9ea 	bl	800c52c <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 801b158:	4604      	mov	r4, r0
 801b15a:	f107 0314 	add.w	r3, r7, #20
 801b15e:	4618      	mov	r0, r3
 801b160:	f7f1 f95f 	bl	800c422 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801b164:	4603      	mov	r3, r0
 801b166:	4621      	mov	r1, r4
 801b168:	4618      	mov	r0, r3
 801b16a:	f000 f920 	bl	801b3ae <_ZNSt10shared_ptrI6ModuleEaSEOS1_>
	    ++__result;
 801b16e:	f107 0314 	add.w	r3, r7, #20
 801b172:	4618      	mov	r0, r3
 801b174:	f7f1 f944 	bl	800c400 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __first != __last; ++__first)
 801b178:	f107 030c 	add.w	r3, r7, #12
 801b17c:	4618      	mov	r0, r3
 801b17e:	f7f1 f93f 	bl	800c400 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 801b182:	f107 0208 	add.w	r2, r7, #8
 801b186:	f107 030c 	add.w	r3, r7, #12
 801b18a:	4611      	mov	r1, r2
 801b18c:	4618      	mov	r0, r3
 801b18e:	f7f1 f91f 	bl	800c3d0 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801b192:	4603      	mov	r3, r0
 801b194:	2b00      	cmp	r3, #0
 801b196:	d1cb      	bne.n	801b130 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x44>
	  }
      return __result;
 801b198:	697b      	ldr	r3, [r7, #20]
    }
 801b19a:	4618      	mov	r0, r3
 801b19c:	371c      	adds	r7, #28
 801b19e:	46bd      	mov	sp, r7
 801b1a0:	bd90      	pop	{r4, r7, pc}

0801b1a2 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE6cbeginEv>:
      cbegin() const noexcept
 801b1a2:	b580      	push	{r7, lr}
 801b1a4:	b084      	sub	sp, #16
 801b1a6:	af00      	add	r7, sp, #0
 801b1a8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 801b1aa:	687a      	ldr	r2, [r7, #4]
 801b1ac:	f107 030c 	add.w	r3, r7, #12
 801b1b0:	4611      	mov	r1, r2
 801b1b2:	4618      	mov	r0, r3
 801b1b4:	f000 f90e 	bl	801b3d4 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS5_>
 801b1b8:	68fb      	ldr	r3, [r7, #12]
 801b1ba:	4618      	mov	r0, r3
 801b1bc:	3710      	adds	r7, #16
 801b1be:	46bd      	mov	sp, r7
 801b1c0:	bd80      	pop	{r7, pc}

0801b1c2 <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801b1c2:	b590      	push	{r4, r7, lr}
 801b1c4:	b083      	sub	sp, #12
 801b1c6:	af00      	add	r7, sp, #0
 801b1c8:	6078      	str	r0, [r7, #4]
 801b1ca:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801b1cc:	6878      	ldr	r0, [r7, #4]
 801b1ce:	f000 f911 	bl	801b3f4 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b1d2:	4603      	mov	r3, r0
 801b1d4:	681c      	ldr	r4, [r3, #0]
 801b1d6:	6838      	ldr	r0, [r7, #0]
 801b1d8:	f000 f90c 	bl	801b3f4 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b1dc:	4603      	mov	r3, r0
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	1ae3      	subs	r3, r4, r3
 801b1e2:	10db      	asrs	r3, r3, #3
 801b1e4:	4618      	mov	r0, r3
 801b1e6:	370c      	adds	r7, #12
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	bd90      	pop	{r4, r7, pc}

0801b1ec <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b084      	sub	sp, #16
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	6078      	str	r0, [r7, #4]
 801b1f4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	681a      	ldr	r2, [r3, #0]
 801b1fa:	683b      	ldr	r3, [r7, #0]
 801b1fc:	00db      	lsls	r3, r3, #3
 801b1fe:	4413      	add	r3, r2
 801b200:	60fb      	str	r3, [r7, #12]
 801b202:	f107 020c 	add.w	r2, r7, #12
 801b206:	f107 0308 	add.w	r3, r7, #8
 801b20a:	4611      	mov	r1, r2
 801b20c:	4618      	mov	r0, r3
 801b20e:	f7f1 fddb 	bl	800cdc8 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 801b212:	68bb      	ldr	r3, [r7, #8]
 801b214:	4618      	mov	r0, r3
 801b216:	3710      	adds	r7, #16
 801b218:	46bd      	mov	sp, r7
 801b21a:	bd80      	pop	{r7, pc}

0801b21c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_>:
    vector<_Tp, _Alloc>::
 801b21c:	b590      	push	{r4, r7, lr}
 801b21e:	b087      	sub	sp, #28
 801b220:	af00      	add	r7, sp, #0
 801b222:	60f8      	str	r0, [r7, #12]
 801b224:	60b9      	str	r1, [r7, #8]
 801b226:	607a      	str	r2, [r7, #4]
      if (__first != __last)
 801b228:	1d3a      	adds	r2, r7, #4
 801b22a:	f107 0308 	add.w	r3, r7, #8
 801b22e:	4611      	mov	r1, r2
 801b230:	4618      	mov	r0, r3
 801b232:	f7f1 f8cd 	bl	800c3d0 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801b236:	4603      	mov	r3, r0
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d031      	beq.n	801b2a0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_+0x84>
	  if (__last != end())
 801b23c:	68f8      	ldr	r0, [r7, #12]
 801b23e:	f7f1 f8b6 	bl	800c3ae <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801b242:	4603      	mov	r3, r0
 801b244:	613b      	str	r3, [r7, #16]
 801b246:	f107 0210 	add.w	r2, r7, #16
 801b24a:	1d3b      	adds	r3, r7, #4
 801b24c:	4611      	mov	r1, r2
 801b24e:	4618      	mov	r0, r3
 801b250:	f7f1 f8be 	bl	800c3d0 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801b254:	4603      	mov	r3, r0
 801b256:	2b00      	cmp	r3, #0
 801b258:	d008      	beq.n	801b26c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_+0x50>
	    _GLIBCXX_MOVE3(__last, end(), __first);
 801b25a:	68f8      	ldr	r0, [r7, #12]
 801b25c:	f7f1 f8a7 	bl	800c3ae <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801b260:	4603      	mov	r3, r0
 801b262:	68ba      	ldr	r2, [r7, #8]
 801b264:	4619      	mov	r1, r3
 801b266:	6878      	ldr	r0, [r7, #4]
 801b268:	f000 f8cf 	bl	801b40a <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET0_T_SB_SA_>
	  _M_erase_at_end(__first.base() + (end() - __last));
 801b26c:	f107 0308 	add.w	r3, r7, #8
 801b270:	4618      	mov	r0, r3
 801b272:	f7f1 fdb9 	bl	800cde8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b276:	4603      	mov	r3, r0
 801b278:	681c      	ldr	r4, [r3, #0]
 801b27a:	68f8      	ldr	r0, [r7, #12]
 801b27c:	f7f1 f897 	bl	800c3ae <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801b280:	4603      	mov	r3, r0
 801b282:	617b      	str	r3, [r7, #20]
 801b284:	1d3a      	adds	r2, r7, #4
 801b286:	f107 0314 	add.w	r3, r7, #20
 801b28a:	4611      	mov	r1, r2
 801b28c:	4618      	mov	r0, r3
 801b28e:	f7f2 fc0b 	bl	800daa8 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801b292:	4603      	mov	r3, r0
 801b294:	00db      	lsls	r3, r3, #3
 801b296:	4423      	add	r3, r4
 801b298:	4619      	mov	r1, r3
 801b29a:	68f8      	ldr	r0, [r7, #12]
 801b29c:	f000 f8cd 	bl	801b43a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_>
      return __first;
 801b2a0:	68bb      	ldr	r3, [r7, #8]
    }
 801b2a2:	4618      	mov	r0, r3
 801b2a4:	371c      	adds	r7, #28
 801b2a6:	46bd      	mov	sp, r7
 801b2a8:	bd90      	pop	{r4, r7, pc}

0801b2aa <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801b2aa:	b480      	push	{r7}
 801b2ac:	b083      	sub	sp, #12
 801b2ae:	af00      	add	r7, sp, #0
 801b2b0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	4618      	mov	r0, r3
 801b2b6:	370c      	adds	r7, #12
 801b2b8:	46bd      	mov	sp, r7
 801b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2be:	4770      	bx	lr

0801b2c0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801b2c0:	b590      	push	{r4, r7, lr}
 801b2c2:	b085      	sub	sp, #20
 801b2c4:	af00      	add	r7, sp, #0
 801b2c6:	60f8      	str	r0, [r7, #12]
 801b2c8:	60b9      	str	r1, [r7, #8]
 801b2ca:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801b2cc:	68bb      	ldr	r3, [r7, #8]
 801b2ce:	4619      	mov	r1, r3
 801b2d0:	2008      	movs	r0, #8
 801b2d2:	f7ef fadd 	bl	800a890 <_ZnwjPv>
 801b2d6:	4604      	mov	r4, r0
 801b2d8:	6878      	ldr	r0, [r7, #4]
 801b2da:	f7ff ffe6 	bl	801b2aa <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 801b2de:	4603      	mov	r3, r0
 801b2e0:	4619      	mov	r1, r3
 801b2e2:	4620      	mov	r0, r4
 801b2e4:	f7f0 f9fa 	bl	800b6dc <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 801b2e8:	bf00      	nop
 801b2ea:	3714      	adds	r7, #20
 801b2ec:	46bd      	mov	sp, r7
 801b2ee:	bd90      	pop	{r4, r7, pc}

0801b2f0 <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 801b2f0:	b480      	push	{r7}
 801b2f2:	b083      	sub	sp, #12
 801b2f4:	af00      	add	r7, sp, #0
 801b2f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	4618      	mov	r0, r3
 801b2fc:	370c      	adds	r7, #12
 801b2fe:	46bd      	mov	sp, r7
 801b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b304:	4770      	bx	lr

0801b306 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EC1ES8_>:
      _Iter_pred(_Predicate __pred)
 801b306:	b580      	push	{r7, lr}
 801b308:	b082      	sub	sp, #8
 801b30a:	af00      	add	r7, sp, #0
 801b30c:	6078      	str	r0, [r7, #4]
 801b30e:	6039      	str	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 801b310:	463b      	mov	r3, r7
 801b312:	4618      	mov	r0, r3
 801b314:	f7ff ffec 	bl	801b2f0 <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>
 801b318:	4602      	mov	r2, r0
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	6812      	ldr	r2, [r2, #0]
 801b31e:	601a      	str	r2, [r3, #0]
      { }
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	4618      	mov	r0, r3
 801b324:	3708      	adds	r7, #8
 801b326:	46bd      	mov	sp, r7
 801b328:	bd80      	pop	{r7, pc}

0801b32a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>:
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 801b32a:	b590      	push	{r4, r7, lr}
 801b32c:	b085      	sub	sp, #20
 801b32e:	af00      	add	r7, sp, #0
 801b330:	60f8      	str	r0, [r7, #12]
 801b332:	60b9      	str	r1, [r7, #8]
 801b334:	607a      	str	r2, [r7, #4]
		       std::__iterator_category(__first));
 801b336:	f107 030c 	add.w	r3, r7, #12
 801b33a:	4618      	mov	r0, r3
 801b33c:	f000 f89e 	bl	801b47c <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSB_>
      return __find_if(__first, __last, __pred,
 801b340:	4623      	mov	r3, r4
 801b342:	687a      	ldr	r2, [r7, #4]
 801b344:	68b9      	ldr	r1, [r7, #8]
 801b346:	68f8      	ldr	r0, [r7, #12]
 801b348:	f000 f8a2 	bl	801b490 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag>
 801b34c:	4603      	mov	r3, r0
    }
 801b34e:	4618      	mov	r0, r3
 801b350:	3714      	adds	r7, #20
 801b352:	46bd      	mov	sp, r7
 801b354:	bd90      	pop	{r4, r7, pc}

0801b356 <_ZN9__gnu_cxxeqIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 801b356:	b590      	push	{r4, r7, lr}
 801b358:	b083      	sub	sp, #12
 801b35a:	af00      	add	r7, sp, #0
 801b35c:	6078      	str	r0, [r7, #4]
 801b35e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 801b360:	6878      	ldr	r0, [r7, #4]
 801b362:	f7f1 fd41 	bl	800cde8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b366:	4603      	mov	r3, r0
 801b368:	681c      	ldr	r4, [r3, #0]
 801b36a:	6838      	ldr	r0, [r7, #0]
 801b36c:	f7f1 fd3c 	bl	800cde8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b370:	4603      	mov	r3, r0
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	429c      	cmp	r4, r3
 801b376:	bf0c      	ite	eq
 801b378:	2301      	moveq	r3, #1
 801b37a:	2300      	movne	r3, #0
 801b37c:	b2db      	uxtb	r3, r3
 801b37e:	4618      	mov	r0, r3
 801b380:	370c      	adds	r7, #12
 801b382:	46bd      	mov	sp, r7
 801b384:	bd90      	pop	{r4, r7, pc}

0801b386 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>:
	operator()(_Iterator __it)
 801b386:	b590      	push	{r4, r7, lr}
 801b388:	b083      	sub	sp, #12
 801b38a:	af00      	add	r7, sp, #0
 801b38c:	6078      	str	r0, [r7, #4]
 801b38e:	6039      	str	r1, [r7, #0]
	{ return bool(_M_pred(*__it)); }
 801b390:	687c      	ldr	r4, [r7, #4]
 801b392:	463b      	mov	r3, r7
 801b394:	4618      	mov	r0, r3
 801b396:	f7f1 f844 	bl	800c422 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801b39a:	4603      	mov	r3, r0
 801b39c:	4619      	mov	r1, r3
 801b39e:	4620      	mov	r0, r4
 801b3a0:	f7ff fc96 	bl	801acd0 <_ZZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEENKUlRKS2_E_clES4_>
 801b3a4:	4603      	mov	r3, r0
 801b3a6:	4618      	mov	r0, r3
 801b3a8:	370c      	adds	r7, #12
 801b3aa:	46bd      	mov	sp, r7
 801b3ac:	bd90      	pop	{r4, r7, pc}

0801b3ae <_ZNSt10shared_ptrI6ModuleEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 801b3ae:	b590      	push	{r4, r7, lr}
 801b3b0:	b083      	sub	sp, #12
 801b3b2:	af00      	add	r7, sp, #0
 801b3b4:	6078      	str	r0, [r7, #4]
 801b3b6:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 801b3b8:	687c      	ldr	r4, [r7, #4]
 801b3ba:	6838      	ldr	r0, [r7, #0]
 801b3bc:	f7f1 f8b6 	bl	800c52c <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 801b3c0:	4603      	mov	r3, r0
 801b3c2:	4619      	mov	r1, r3
 801b3c4:	4620      	mov	r0, r4
 801b3c6:	f000 f8fc 	bl	801b5c2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 801b3ca:	687b      	ldr	r3, [r7, #4]
      }
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	370c      	adds	r7, #12
 801b3d0:	46bd      	mov	sp, r7
 801b3d2:	bd90      	pop	{r4, r7, pc}

0801b3d4 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801b3d4:	b480      	push	{r7}
 801b3d6:	b083      	sub	sp, #12
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	6078      	str	r0, [r7, #4]
 801b3dc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801b3de:	683b      	ldr	r3, [r7, #0]
 801b3e0:	681a      	ldr	r2, [r3, #0]
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	601a      	str	r2, [r3, #0]
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	4618      	mov	r0, r3
 801b3ea:	370c      	adds	r7, #12
 801b3ec:	46bd      	mov	sp, r7
 801b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3f2:	4770      	bx	lr

0801b3f4 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 801b3f4:	b480      	push	{r7}
 801b3f6:	b083      	sub	sp, #12
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	4618      	mov	r0, r3
 801b400:	370c      	adds	r7, #12
 801b402:	46bd      	mov	sp, r7
 801b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b408:	4770      	bx	lr

0801b40a <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET0_T_SB_SA_>:
    move(_II __first, _II __last, _OI __result)
 801b40a:	b590      	push	{r4, r7, lr}
 801b40c:	b085      	sub	sp, #20
 801b40e:	af00      	add	r7, sp, #0
 801b410:	60f8      	str	r0, [r7, #12]
 801b412:	60b9      	str	r1, [r7, #8]
 801b414:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 801b416:	68f8      	ldr	r0, [r7, #12]
 801b418:	f000 f8f2 	bl	801b600 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>
 801b41c:	4604      	mov	r4, r0
 801b41e:	68b8      	ldr	r0, [r7, #8]
 801b420:	f000 f8ee 	bl	801b600 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>
 801b424:	4603      	mov	r3, r0
 801b426:	687a      	ldr	r2, [r7, #4]
 801b428:	4619      	mov	r1, r3
 801b42a:	4620      	mov	r0, r4
 801b42c:	f000 f8f3 	bl	801b616 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET1_T0_SB_SA_>
 801b430:	4603      	mov	r3, r0
    }
 801b432:	4618      	mov	r0, r3
 801b434:	3714      	adds	r7, #20
 801b436:	46bd      	mov	sp, r7
 801b438:	bd90      	pop	{r4, r7, pc}

0801b43a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_>:

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 801b43a:	b590      	push	{r4, r7, lr}
 801b43c:	b085      	sub	sp, #20
 801b43e:	af00      	add	r7, sp, #0
 801b440:	6078      	str	r0, [r7, #4]
 801b442:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	685a      	ldr	r2, [r3, #4]
 801b448:	683b      	ldr	r3, [r7, #0]
 801b44a:	1ad3      	subs	r3, r2, r3
 801b44c:	10db      	asrs	r3, r3, #3
 801b44e:	60fb      	str	r3, [r7, #12]
 801b450:	68fb      	ldr	r3, [r7, #12]
 801b452:	2b00      	cmp	r3, #0
 801b454:	d00e      	beq.n	801b474 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	4618      	mov	r0, r3
 801b45e:	f7f1 fa35 	bl	800c8cc <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 801b462:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 801b464:	461a      	mov	r2, r3
 801b466:	4621      	mov	r1, r4
 801b468:	6838      	ldr	r0, [r7, #0]
 801b46a:	f7f1 fa3a 	bl	800c8e2 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	683a      	ldr	r2, [r7, #0]
 801b472:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 801b474:	bf00      	nop
 801b476:	3714      	adds	r7, #20
 801b478:	46bd      	mov	sp, r7
 801b47a:	bd90      	pop	{r4, r7, pc}

0801b47c <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSB_>:
    __iterator_category(const _Iter&)
 801b47c:	b480      	push	{r7}
 801b47e:	b083      	sub	sp, #12
 801b480:	af00      	add	r7, sp, #0
 801b482:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 801b484:	4618      	mov	r0, r3
 801b486:	370c      	adds	r7, #12
 801b488:	46bd      	mov	sp, r7
 801b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b48e:	4770      	bx	lr

0801b490 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 801b490:	b580      	push	{r7, lr}
 801b492:	b086      	sub	sp, #24
 801b494:	af00      	add	r7, sp, #0
 801b496:	60f8      	str	r0, [r7, #12]
 801b498:	60b9      	str	r1, [r7, #8]
 801b49a:	607a      	str	r2, [r7, #4]
 801b49c:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 801b49e:	f107 020c 	add.w	r2, r7, #12
 801b4a2:	f107 0308 	add.w	r3, r7, #8
 801b4a6:	4611      	mov	r1, r2
 801b4a8:	4618      	mov	r0, r3
 801b4aa:	f7f2 fafd 	bl	800daa8 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801b4ae:	4603      	mov	r3, r0
 801b4b0:	109b      	asrs	r3, r3, #2
 801b4b2:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 801b4b4:	e03e      	b.n	801b534 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 801b4b6:	1d3b      	adds	r3, r7, #4
 801b4b8:	68f9      	ldr	r1, [r7, #12]
 801b4ba:	4618      	mov	r0, r3
 801b4bc:	f7ff ff63 	bl	801b386 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b4c0:	4603      	mov	r3, r0
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d001      	beq.n	801b4ca <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	e077      	b.n	801b5ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b4ca:	f107 030c 	add.w	r3, r7, #12
 801b4ce:	4618      	mov	r0, r3
 801b4d0:	f7f0 ff96 	bl	800c400 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b4d4:	1d3b      	adds	r3, r7, #4
 801b4d6:	68f9      	ldr	r1, [r7, #12]
 801b4d8:	4618      	mov	r0, r3
 801b4da:	f7ff ff54 	bl	801b386 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b4de:	4603      	mov	r3, r0
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d001      	beq.n	801b4e8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 801b4e4:	68fb      	ldr	r3, [r7, #12]
 801b4e6:	e068      	b.n	801b5ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b4e8:	f107 030c 	add.w	r3, r7, #12
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	f7f0 ff87 	bl	800c400 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b4f2:	1d3b      	adds	r3, r7, #4
 801b4f4:	68f9      	ldr	r1, [r7, #12]
 801b4f6:	4618      	mov	r0, r3
 801b4f8:	f7ff ff45 	bl	801b386 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b4fc:	4603      	mov	r3, r0
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d001      	beq.n	801b506 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 801b502:	68fb      	ldr	r3, [r7, #12]
 801b504:	e059      	b.n	801b5ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b506:	f107 030c 	add.w	r3, r7, #12
 801b50a:	4618      	mov	r0, r3
 801b50c:	f7f0 ff78 	bl	800c400 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b510:	1d3b      	adds	r3, r7, #4
 801b512:	68f9      	ldr	r1, [r7, #12]
 801b514:	4618      	mov	r0, r3
 801b516:	f7ff ff36 	bl	801b386 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b51a:	4603      	mov	r3, r0
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d001      	beq.n	801b524 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 801b520:	68fb      	ldr	r3, [r7, #12]
 801b522:	e04a      	b.n	801b5ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b524:	f107 030c 	add.w	r3, r7, #12
 801b528:	4618      	mov	r0, r3
 801b52a:	f7f0 ff69 	bl	800c400 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __trip_count > 0; --__trip_count)
 801b52e:	697b      	ldr	r3, [r7, #20]
 801b530:	3b01      	subs	r3, #1
 801b532:	617b      	str	r3, [r7, #20]
 801b534:	697b      	ldr	r3, [r7, #20]
 801b536:	2b00      	cmp	r3, #0
 801b538:	dcbd      	bgt.n	801b4b6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 801b53a:	f107 020c 	add.w	r2, r7, #12
 801b53e:	f107 0308 	add.w	r3, r7, #8
 801b542:	4611      	mov	r1, r2
 801b544:	4618      	mov	r0, r3
 801b546:	f7f2 faaf 	bl	800daa8 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801b54a:	4603      	mov	r3, r0
 801b54c:	2b03      	cmp	r3, #3
 801b54e:	d006      	beq.n	801b55e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xce>
 801b550:	2b03      	cmp	r3, #3
 801b552:	dc31      	bgt.n	801b5b8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x128>
 801b554:	2b01      	cmp	r3, #1
 801b556:	d020      	beq.n	801b59a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x10a>
 801b558:	2b02      	cmp	r3, #2
 801b55a:	d00f      	beq.n	801b57c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xec>
 801b55c:	e02c      	b.n	801b5b8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 801b55e:	1d3b      	adds	r3, r7, #4
 801b560:	68f9      	ldr	r1, [r7, #12]
 801b562:	4618      	mov	r0, r3
 801b564:	f7ff ff0f 	bl	801b386 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b568:	4603      	mov	r3, r0
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d001      	beq.n	801b572 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	e023      	b.n	801b5ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b572:	f107 030c 	add.w	r3, r7, #12
 801b576:	4618      	mov	r0, r3
 801b578:	f7f0 ff42 	bl	800c400 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b57c:	1d3b      	adds	r3, r7, #4
 801b57e:	68f9      	ldr	r1, [r7, #12]
 801b580:	4618      	mov	r0, r3
 801b582:	f7ff ff00 	bl	801b386 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b586:	4603      	mov	r3, r0
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d001      	beq.n	801b590 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 801b58c:	68fb      	ldr	r3, [r7, #12]
 801b58e:	e014      	b.n	801b5ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b590:	f107 030c 	add.w	r3, r7, #12
 801b594:	4618      	mov	r0, r3
 801b596:	f7f0 ff33 	bl	800c400 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b59a:	1d3b      	adds	r3, r7, #4
 801b59c:	68f9      	ldr	r1, [r7, #12]
 801b59e:	4618      	mov	r0, r3
 801b5a0:	f7ff fef1 	bl	801b386 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b5a4:	4603      	mov	r3, r0
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d001      	beq.n	801b5ae <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 801b5aa:	68fb      	ldr	r3, [r7, #12]
 801b5ac:	e005      	b.n	801b5ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b5ae:	f107 030c 	add.w	r3, r7, #12
 801b5b2:	4618      	mov	r0, r3
 801b5b4:	f7f0 ff24 	bl	800c400 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  return __last;
 801b5b8:	68bb      	ldr	r3, [r7, #8]
    }
 801b5ba:	4618      	mov	r0, r3
 801b5bc:	3718      	adds	r7, #24
 801b5be:	46bd      	mov	sp, r7
 801b5c0:	bd80      	pop	{r7, pc}

0801b5c2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 801b5c2:	b580      	push	{r7, lr}
 801b5c4:	b084      	sub	sp, #16
 801b5c6:	af00      	add	r7, sp, #0
 801b5c8:	6078      	str	r0, [r7, #4]
 801b5ca:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 801b5cc:	6838      	ldr	r0, [r7, #0]
 801b5ce:	f000 f843 	bl	801b658 <_ZSt4moveIRSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 801b5d2:	4602      	mov	r2, r0
 801b5d4:	f107 0308 	add.w	r3, r7, #8
 801b5d8:	4611      	mov	r1, r2
 801b5da:	4618      	mov	r0, r3
 801b5dc:	f7f2 ff1b 	bl	800e416 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 801b5e0:	f107 0308 	add.w	r3, r7, #8
 801b5e4:	6879      	ldr	r1, [r7, #4]
 801b5e6:	4618      	mov	r0, r3
 801b5e8:	f000 f841 	bl	801b66e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 801b5ec:	f107 0308 	add.w	r3, r7, #8
 801b5f0:	4618      	mov	r0, r3
 801b5f2:	f7ef fd48 	bl	800b086 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 801b5f6:	687b      	ldr	r3, [r7, #4]
      }
 801b5f8:	4618      	mov	r0, r3
 801b5fa:	3710      	adds	r7, #16
 801b5fc:	46bd      	mov	sp, r7
 801b5fe:	bd80      	pop	{r7, pc}

0801b600 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 801b600:	b480      	push	{r7}
 801b602:	b083      	sub	sp, #12
 801b604:	af00      	add	r7, sp, #0
 801b606:	6078      	str	r0, [r7, #4]
    { return __it; }
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	4618      	mov	r0, r3
 801b60c:	370c      	adds	r7, #12
 801b60e:	46bd      	mov	sp, r7
 801b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b614:	4770      	bx	lr

0801b616 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801b616:	b5b0      	push	{r4, r5, r7, lr}
 801b618:	b084      	sub	sp, #16
 801b61a:	af00      	add	r7, sp, #0
 801b61c:	60f8      	str	r0, [r7, #12]
 801b61e:	60b9      	str	r1, [r7, #8]
 801b620:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801b622:	68f8      	ldr	r0, [r7, #12]
 801b624:	f000 f83a 	bl	801b69c <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801b628:	4604      	mov	r4, r0
 801b62a:	68b8      	ldr	r0, [r7, #8]
 801b62c:	f000 f836 	bl	801b69c <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801b630:	4605      	mov	r5, r0
 801b632:	6878      	ldr	r0, [r7, #4]
 801b634:	f000 f832 	bl	801b69c <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801b638:	4603      	mov	r3, r0
 801b63a:	461a      	mov	r2, r3
 801b63c:	4629      	mov	r1, r5
 801b63e:	4620      	mov	r0, r4
 801b640:	f000 f83a 	bl	801b6b8 <_ZSt14__copy_move_a1ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>
 801b644:	4603      	mov	r3, r0
 801b646:	4619      	mov	r1, r3
 801b648:	6878      	ldr	r0, [r7, #4]
 801b64a:	f000 f845 	bl	801b6d8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES5_ET_SA_T0_>
 801b64e:	4603      	mov	r3, r0
    }
 801b650:	4618      	mov	r0, r3
 801b652:	3710      	adds	r7, #16
 801b654:	46bd      	mov	sp, r7
 801b656:	bdb0      	pop	{r4, r5, r7, pc}

0801b658 <_ZSt4moveIRSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 801b658:	b480      	push	{r7}
 801b65a:	b083      	sub	sp, #12
 801b65c:	af00      	add	r7, sp, #0
 801b65e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	4618      	mov	r0, r3
 801b664:	370c      	adds	r7, #12
 801b666:	46bd      	mov	sp, r7
 801b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b66c:	4770      	bx	lr

0801b66e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 801b66e:	b580      	push	{r7, lr}
 801b670:	b082      	sub	sp, #8
 801b672:	af00      	add	r7, sp, #0
 801b674:	6078      	str	r0, [r7, #4]
 801b676:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	683a      	ldr	r2, [r7, #0]
 801b67c:	4611      	mov	r1, r2
 801b67e:	4618      	mov	r0, r3
 801b680:	f000 f841 	bl	801b706 <_ZSt4swapIP6ModuleENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	1d1a      	adds	r2, r3, #4
 801b688:	683b      	ldr	r3, [r7, #0]
 801b68a:	3304      	adds	r3, #4
 801b68c:	4619      	mov	r1, r3
 801b68e:	4610      	mov	r0, r2
 801b690:	f7f2 f8f1 	bl	800d876 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 801b694:	bf00      	nop
 801b696:	3708      	adds	r7, #8
 801b698:	46bd      	mov	sp, r7
 801b69a:	bd80      	pop	{r7, pc}

0801b69c <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 801b69c:	b580      	push	{r7, lr}
 801b69e:	b082      	sub	sp, #8
 801b6a0:	af00      	add	r7, sp, #0
 801b6a2:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 801b6a4:	1d3b      	adds	r3, r7, #4
 801b6a6:	4618      	mov	r0, r3
 801b6a8:	f7f1 fb9e 	bl	800cde8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b6ac:	4603      	mov	r3, r0
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	4618      	mov	r0, r3
 801b6b2:	3708      	adds	r7, #8
 801b6b4:	46bd      	mov	sp, r7
 801b6b6:	bd80      	pop	{r7, pc}

0801b6b8 <_ZSt14__copy_move_a1ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 801b6b8:	b580      	push	{r7, lr}
 801b6ba:	b084      	sub	sp, #16
 801b6bc:	af00      	add	r7, sp, #0
 801b6be:	60f8      	str	r0, [r7, #12]
 801b6c0:	60b9      	str	r1, [r7, #8]
 801b6c2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 801b6c4:	687a      	ldr	r2, [r7, #4]
 801b6c6:	68b9      	ldr	r1, [r7, #8]
 801b6c8:	68f8      	ldr	r0, [r7, #12]
 801b6ca:	f000 f83b 	bl	801b744 <_ZSt14__copy_move_a2ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>
 801b6ce:	4603      	mov	r3, r0
 801b6d0:	4618      	mov	r0, r3
 801b6d2:	3710      	adds	r7, #16
 801b6d4:	46bd      	mov	sp, r7
 801b6d6:	bd80      	pop	{r7, pc}

0801b6d8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES5_ET_SA_T0_>:
    __niter_wrap(_From __from, _To __res)
 801b6d8:	b580      	push	{r7, lr}
 801b6da:	b082      	sub	sp, #8
 801b6dc:	af00      	add	r7, sp, #0
 801b6de:	6078      	str	r0, [r7, #4]
 801b6e0:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 801b6e2:	6878      	ldr	r0, [r7, #4]
 801b6e4:	f7ff ffda 	bl	801b69c <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801b6e8:	4602      	mov	r2, r0
 801b6ea:	683b      	ldr	r3, [r7, #0]
 801b6ec:	1a9b      	subs	r3, r3, r2
 801b6ee:	10db      	asrs	r3, r3, #3
 801b6f0:	461a      	mov	r2, r3
 801b6f2:	1d3b      	adds	r3, r7, #4
 801b6f4:	4611      	mov	r1, r2
 801b6f6:	4618      	mov	r0, r3
 801b6f8:	f7ff fd78 	bl	801b1ec <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 801b6fc:	4603      	mov	r3, r0
 801b6fe:	4618      	mov	r0, r3
 801b700:	3708      	adds	r7, #8
 801b702:	46bd      	mov	sp, r7
 801b704:	bd80      	pop	{r7, pc}

0801b706 <_ZSt4swapIP6ModuleENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
    swap(_Tp& __a, _Tp& __b)
 801b706:	b580      	push	{r7, lr}
 801b708:	b084      	sub	sp, #16
 801b70a:	af00      	add	r7, sp, #0
 801b70c:	6078      	str	r0, [r7, #4]
 801b70e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801b710:	6878      	ldr	r0, [r7, #4]
 801b712:	f000 f827 	bl	801b764 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 801b716:	4603      	mov	r3, r0
 801b718:	681b      	ldr	r3, [r3, #0]
 801b71a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 801b71c:	6838      	ldr	r0, [r7, #0]
 801b71e:	f000 f821 	bl	801b764 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 801b722:	4603      	mov	r3, r0
 801b724:	681a      	ldr	r2, [r3, #0]
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 801b72a:	f107 030c 	add.w	r3, r7, #12
 801b72e:	4618      	mov	r0, r3
 801b730:	f000 f818 	bl	801b764 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 801b734:	4603      	mov	r3, r0
 801b736:	681a      	ldr	r2, [r3, #0]
 801b738:	683b      	ldr	r3, [r7, #0]
 801b73a:	601a      	str	r2, [r3, #0]
    }
 801b73c:	bf00      	nop
 801b73e:	3710      	adds	r7, #16
 801b740:	46bd      	mov	sp, r7
 801b742:	bd80      	pop	{r7, pc}

0801b744 <_ZSt14__copy_move_a2ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 801b744:	b580      	push	{r7, lr}
 801b746:	b084      	sub	sp, #16
 801b748:	af00      	add	r7, sp, #0
 801b74a:	60f8      	str	r0, [r7, #12]
 801b74c:	60b9      	str	r1, [r7, #8]
 801b74e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 801b750:	687a      	ldr	r2, [r7, #4]
 801b752:	68b9      	ldr	r1, [r7, #8]
 801b754:	68f8      	ldr	r0, [r7, #12]
 801b756:	f000 f810 	bl	801b77a <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_>
 801b75a:	4603      	mov	r3, r0
    }
 801b75c:	4618      	mov	r0, r3
 801b75e:	3710      	adds	r7, #16
 801b760:	46bd      	mov	sp, r7
 801b762:	bd80      	pop	{r7, pc}

0801b764 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 801b764:	b480      	push	{r7}
 801b766:	b083      	sub	sp, #12
 801b768:	af00      	add	r7, sp, #0
 801b76a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	4618      	mov	r0, r3
 801b770:	370c      	adds	r7, #12
 801b772:	46bd      	mov	sp, r7
 801b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b778:	4770      	bx	lr

0801b77a <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 801b77a:	b580      	push	{r7, lr}
 801b77c:	b086      	sub	sp, #24
 801b77e:	af00      	add	r7, sp, #0
 801b780:	60f8      	str	r0, [r7, #12]
 801b782:	60b9      	str	r1, [r7, #8]
 801b784:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801b786:	68ba      	ldr	r2, [r7, #8]
 801b788:	68fb      	ldr	r3, [r7, #12]
 801b78a:	1ad3      	subs	r3, r2, r3
 801b78c:	10db      	asrs	r3, r3, #3
 801b78e:	617b      	str	r3, [r7, #20]
 801b790:	e010      	b.n	801b7b4 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_+0x3a>
	      *__result = std::move(*__first);
 801b792:	68f8      	ldr	r0, [r7, #12]
 801b794:	f7f0 feca 	bl	800c52c <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 801b798:	4603      	mov	r3, r0
 801b79a:	4619      	mov	r1, r3
 801b79c:	6878      	ldr	r0, [r7, #4]
 801b79e:	f7ff fe06 	bl	801b3ae <_ZNSt10shared_ptrI6ModuleEaSEOS1_>
	      ++__first;
 801b7a2:	68fb      	ldr	r3, [r7, #12]
 801b7a4:	3308      	adds	r3, #8
 801b7a6:	60fb      	str	r3, [r7, #12]
	      ++__result;
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	3308      	adds	r3, #8
 801b7ac:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801b7ae:	697b      	ldr	r3, [r7, #20]
 801b7b0:	3b01      	subs	r3, #1
 801b7b2:	617b      	str	r3, [r7, #20]
 801b7b4:	697b      	ldr	r3, [r7, #20]
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	dceb      	bgt.n	801b792 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_+0x18>
	  return __result;
 801b7ba:	687b      	ldr	r3, [r7, #4]
	}
 801b7bc:	4618      	mov	r0, r3
 801b7be:	3718      	adds	r7, #24
 801b7c0:	46bd      	mov	sp, r7
 801b7c2:	bd80      	pop	{r7, pc}

0801b7c4 <__NVIC_EnableIRQ>:
{
 801b7c4:	b480      	push	{r7}
 801b7c6:	b083      	sub	sp, #12
 801b7c8:	af00      	add	r7, sp, #0
 801b7ca:	4603      	mov	r3, r0
 801b7cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801b7ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	db0b      	blt.n	801b7ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b7d6:	88fb      	ldrh	r3, [r7, #6]
 801b7d8:	f003 021f 	and.w	r2, r3, #31
 801b7dc:	4907      	ldr	r1, [pc, #28]	@ (801b7fc <__NVIC_EnableIRQ+0x38>)
 801b7de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b7e2:	095b      	lsrs	r3, r3, #5
 801b7e4:	2001      	movs	r0, #1
 801b7e6:	fa00 f202 	lsl.w	r2, r0, r2
 801b7ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801b7ee:	bf00      	nop
 801b7f0:	370c      	adds	r7, #12
 801b7f2:	46bd      	mov	sp, r7
 801b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7f8:	4770      	bx	lr
 801b7fa:	bf00      	nop
 801b7fc:	e000e100 	.word	0xe000e100

0801b800 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* _timer, IRQn_Type _irq, uint32_t _frequency, pruThread* _ownerPtr):
 801b800:	b590      	push	{r4, r7, lr}
 801b802:	b085      	sub	sp, #20
 801b804:	af00      	add	r7, sp, #0
 801b806:	60f8      	str	r0, [r7, #12]
 801b808:	60b9      	str	r1, [r7, #8]
 801b80a:	603b      	str	r3, [r7, #0]
 801b80c:	4613      	mov	r3, r2
 801b80e:	80fb      	strh	r3, [r7, #6]
	timer(_timer),
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	68ba      	ldr	r2, [r7, #8]
 801b814:	605a      	str	r2, [r3, #4]
	irq(_irq),
 801b816:	68fb      	ldr	r3, [r7, #12]
 801b818:	88fa      	ldrh	r2, [r7, #6]
 801b81a:	811a      	strh	r2, [r3, #8]
	frequency(_frequency),
 801b81c:	68fb      	ldr	r3, [r7, #12]
 801b81e:	683a      	ldr	r2, [r7, #0]
 801b820:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(_ownerPtr)
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	6a3a      	ldr	r2, [r7, #32]
 801b826:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 801b828:	2008      	movs	r0, #8
 801b82a:	f00c fec1 	bl	80285b0 <_Znwj>
 801b82e:	4603      	mov	r3, r0
 801b830:	461c      	mov	r4, r3
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801b838:	68fa      	ldr	r2, [r7, #12]
 801b83a:	4619      	mov	r1, r3
 801b83c:	4620      	mov	r0, r4
 801b83e:	f000 f8af 	bl	801b9a0 <_ZN14TimerInterruptC1EiP8pruTimer>
 801b842:	68fb      	ldr	r3, [r7, #12]
 801b844:	601c      	str	r4, [r3, #0]

	startTimer();
 801b846:	68f8      	ldr	r0, [r7, #12]
 801b848:	f000 f812 	bl	801b870 <_ZN8pruTimer10startTimerEv>
}
 801b84c:	68fb      	ldr	r3, [r7, #12]
 801b84e:	4618      	mov	r0, r3
 801b850:	3714      	adds	r7, #20
 801b852:	46bd      	mov	sp, r7
 801b854:	bd90      	pop	{r4, r7, pc}

0801b856 <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 801b856:	b580      	push	{r7, lr}
 801b858:	b082      	sub	sp, #8
 801b85a:	af00      	add	r7, sp, #0
 801b85c:	6078      	str	r0, [r7, #4]
	//Do something here
	timerOwnerPtr->update();
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	691b      	ldr	r3, [r3, #16]
 801b862:	4618      	mov	r0, r3
 801b864:	f7ff fac9 	bl	801adfa <_ZN9pruThread6updateEv>
}
 801b868:	bf00      	nop
 801b86a:	3708      	adds	r7, #8
 801b86c:	46bd      	mov	sp, r7
 801b86e:	bd80      	pop	{r7, pc}

0801b870 <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 801b870:	b580      	push	{r7, lr}
 801b872:	b086      	sub	sp, #24
 801b874:	af00      	add	r7, sp, #0
 801b876:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (timer == TIM2)
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	685b      	ldr	r3, [r3, #4]
 801b87c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b880:	d116      	bne.n	801b8b0 <_ZN8pruTimer10startTimerEv+0x40>
    {
        printf("	power on Timer 2\n\r");
 801b882:	483f      	ldr	r0, [pc, #252]	@ (801b980 <_ZN8pruTimer10startTimerEv+0x110>)
 801b884:	f00d fd3e 	bl	8029304 <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 801b888:	4b3e      	ldr	r3, [pc, #248]	@ (801b984 <_ZN8pruTimer10startTimerEv+0x114>)
 801b88a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b88e:	4a3d      	ldr	r2, [pc, #244]	@ (801b984 <_ZN8pruTimer10startTimerEv+0x114>)
 801b890:	f043 0301 	orr.w	r3, r3, #1
 801b894:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801b898:	4b3a      	ldr	r3, [pc, #232]	@ (801b984 <_ZN8pruTimer10startTimerEv+0x114>)
 801b89a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b89e:	f003 0301 	and.w	r3, r3, #1
 801b8a2:	613b      	str	r3, [r7, #16]
 801b8a4:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB1CLK;
 801b8a6:	4b38      	ldr	r3, [pc, #224]	@ (801b988 <_ZN8pruTimer10startTimerEv+0x118>)
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	085b      	lsrs	r3, r3, #1
 801b8ac:	617b      	str	r3, [r7, #20]
 801b8ae:	e036      	b.n	801b91e <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM3)
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	685b      	ldr	r3, [r3, #4]
 801b8b4:	4a35      	ldr	r2, [pc, #212]	@ (801b98c <_ZN8pruTimer10startTimerEv+0x11c>)
 801b8b6:	4293      	cmp	r3, r2
 801b8b8:	d116      	bne.n	801b8e8 <_ZN8pruTimer10startTimerEv+0x78>
    {
        printf("	power on Timer 3\n\r");
 801b8ba:	4835      	ldr	r0, [pc, #212]	@ (801b990 <_ZN8pruTimer10startTimerEv+0x120>)
 801b8bc:	f00d fd22 	bl	8029304 <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 801b8c0:	4b30      	ldr	r3, [pc, #192]	@ (801b984 <_ZN8pruTimer10startTimerEv+0x114>)
 801b8c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b8c6:	4a2f      	ldr	r2, [pc, #188]	@ (801b984 <_ZN8pruTimer10startTimerEv+0x114>)
 801b8c8:	f043 0302 	orr.w	r3, r3, #2
 801b8cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801b8d0:	4b2c      	ldr	r3, [pc, #176]	@ (801b984 <_ZN8pruTimer10startTimerEv+0x114>)
 801b8d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b8d6:	f003 0302 	and.w	r3, r3, #2
 801b8da:	60fb      	str	r3, [r7, #12]
 801b8dc:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 801b8de:	4b2a      	ldr	r3, [pc, #168]	@ (801b988 <_ZN8pruTimer10startTimerEv+0x118>)
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	085b      	lsrs	r3, r3, #1
 801b8e4:	617b      	str	r3, [r7, #20]
 801b8e6:	e01a      	b.n	801b91e <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM4)
 801b8e8:	687b      	ldr	r3, [r7, #4]
 801b8ea:	685b      	ldr	r3, [r3, #4]
 801b8ec:	4a29      	ldr	r2, [pc, #164]	@ (801b994 <_ZN8pruTimer10startTimerEv+0x124>)
 801b8ee:	4293      	cmp	r3, r2
 801b8f0:	d115      	bne.n	801b91e <_ZN8pruTimer10startTimerEv+0xae>
    {
        printf("	power on Timer 4\n\r");
 801b8f2:	4829      	ldr	r0, [pc, #164]	@ (801b998 <_ZN8pruTimer10startTimerEv+0x128>)
 801b8f4:	f00d fd06 	bl	8029304 <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 801b8f8:	4b22      	ldr	r3, [pc, #136]	@ (801b984 <_ZN8pruTimer10startTimerEv+0x114>)
 801b8fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b8fe:	4a21      	ldr	r2, [pc, #132]	@ (801b984 <_ZN8pruTimer10startTimerEv+0x114>)
 801b900:	f043 0304 	orr.w	r3, r3, #4
 801b904:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801b908:	4b1e      	ldr	r3, [pc, #120]	@ (801b984 <_ZN8pruTimer10startTimerEv+0x114>)
 801b90a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b90e:	f003 0304 	and.w	r3, r3, #4
 801b912:	60bb      	str	r3, [r7, #8]
 801b914:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 801b916:	4b1c      	ldr	r3, [pc, #112]	@ (801b988 <_ZN8pruTimer10startTimerEv+0x118>)
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	085b      	lsrs	r3, r3, #1
 801b91c:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    timer->CR2 &= 0;                                            // UG used as trigg output
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	685b      	ldr	r3, [r3, #4]
 801b922:	685b      	ldr	r3, [r3, #4]
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	685b      	ldr	r3, [r3, #4]
 801b928:	2200      	movs	r2, #0
 801b92a:	605a      	str	r2, [r3, #4]
    timer->PSC = TIM_PSC-1;                                     // prescaler
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	685b      	ldr	r3, [r3, #4]
 801b930:	2200      	movs	r2, #0
 801b932:	629a      	str	r2, [r3, #40]	@ 0x28
    timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	68db      	ldr	r3, [r3, #12]
 801b938:	697a      	ldr	r2, [r7, #20]
 801b93a:	fbb2 f2f3 	udiv	r2, r2, r3
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	685b      	ldr	r3, [r3, #4]
 801b942:	3a01      	subs	r2, #1
 801b944:	62da      	str	r2, [r3, #44]	@ 0x2c
    timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	685b      	ldr	r3, [r3, #4]
 801b94a:	2201      	movs	r2, #1
 801b94c:	615a      	str	r2, [r3, #20]
    timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	685b      	ldr	r3, [r3, #4]
 801b952:	2201      	movs	r2, #1
 801b954:	60da      	str	r2, [r3, #12]

    timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	685b      	ldr	r3, [r3, #4]
 801b95a:	681a      	ldr	r2, [r3, #0]
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	685b      	ldr	r3, [r3, #4]
 801b960:	f042 0201 	orr.w	r2, r2, #1
 801b964:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(irq);
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801b96c:	4618      	mov	r0, r3
 801b96e:	f7ff ff29 	bl	801b7c4 <__NVIC_EnableIRQ>

    printf("	timer started\n");
 801b972:	480a      	ldr	r0, [pc, #40]	@ (801b99c <_ZN8pruTimer10startTimerEv+0x12c>)
 801b974:	f00d fd36 	bl	80293e4 <puts>
}
 801b978:	bf00      	nop
 801b97a:	3718      	adds	r7, #24
 801b97c:	46bd      	mov	sp, r7
 801b97e:	bd80      	pop	{r7, pc}
 801b980:	0802b000 	.word	0x0802b000
 801b984:	58024400 	.word	0x58024400
 801b988:	2400001c 	.word	0x2400001c
 801b98c:	40000400 	.word	0x40000400
 801b990:	0802b014 	.word	0x0802b014
 801b994:	40000800 	.word	0x40000800
 801b998:	0802b028 	.word	0x0802b028
 801b99c:	0802b03c 	.word	0x0802b03c

0801b9a0 <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 801b9a0:	b580      	push	{r7, lr}
 801b9a2:	b084      	sub	sp, #16
 801b9a4:	af00      	add	r7, sp, #0
 801b9a6:	60f8      	str	r0, [r7, #12]
 801b9a8:	60b9      	str	r1, [r7, #8]
 801b9aa:	607a      	str	r2, [r7, #4]
 801b9ac:	68fb      	ldr	r3, [r7, #12]
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	f7e9 fb6e 	bl	8005090 <_ZN9InterruptC1Ev>
 801b9b4:	4a07      	ldr	r2, [pc, #28]	@ (801b9d4 <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 801b9b6:	68fb      	ldr	r3, [r7, #12]
 801b9b8:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 801b9ba:	68fb      	ldr	r3, [r7, #12]
 801b9bc:	687a      	ldr	r2, [r7, #4]
 801b9be:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 801b9c0:	68fb      	ldr	r3, [r7, #12]
 801b9c2:	4619      	mov	r1, r3
 801b9c4:	68b8      	ldr	r0, [r7, #8]
 801b9c6:	f7e9 fb73 	bl	80050b0 <_ZN9Interrupt8RegisterEiPS_>
}
 801b9ca:	68fb      	ldr	r3, [r7, #12]
 801b9cc:	4618      	mov	r0, r3
 801b9ce:	3710      	adds	r7, #16
 801b9d0:	46bd      	mov	sp, r7
 801b9d2:	bd80      	pop	{r7, pc}
 801b9d4:	0802b664 	.word	0x0802b664

0801b9d8 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 801b9d8:	b580      	push	{r7, lr}
 801b9da:	b082      	sub	sp, #8
 801b9dc:	af00      	add	r7, sp, #0
 801b9de:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	685b      	ldr	r3, [r3, #4]
 801b9e4:	4618      	mov	r0, r3
 801b9e6:	f7ff ff36 	bl	801b856 <_ZN8pruTimer9timerTickEv>
}
 801b9ea:	bf00      	nop
 801b9ec:	3708      	adds	r7, #8
 801b9ee:	46bd      	mov	sp, r7
 801b9f0:	bd80      	pop	{r7, pc}
	...

0801b9f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 801b9f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 801ba2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 801b9f8:	f7f3 fac2 	bl	800ef80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801b9fc:	480c      	ldr	r0, [pc, #48]	@ (801ba30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801b9fe:	490d      	ldr	r1, [pc, #52]	@ (801ba34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801ba00:	4a0d      	ldr	r2, [pc, #52]	@ (801ba38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801ba02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801ba04:	e002      	b.n	801ba0c <LoopCopyDataInit>

0801ba06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801ba06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801ba08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801ba0a:	3304      	adds	r3, #4

0801ba0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801ba0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801ba0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801ba10:	d3f9      	bcc.n	801ba06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801ba12:	4a0a      	ldr	r2, [pc, #40]	@ (801ba3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 801ba14:	4c0a      	ldr	r4, [pc, #40]	@ (801ba40 <LoopFillZerobss+0x22>)
  movs r3, #0
 801ba16:	2300      	movs	r3, #0
  b LoopFillZerobss
 801ba18:	e001      	b.n	801ba1e <LoopFillZerobss>

0801ba1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801ba1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801ba1c:	3204      	adds	r2, #4

0801ba1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801ba1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801ba20:	d3fb      	bcc.n	801ba1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801ba22:	f00d fe91 	bl	8029748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801ba26:	f7ee fc85 	bl	800a334 <main>
  bx  lr
 801ba2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801ba2c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 801ba30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 801ba34:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 801ba38:	0802ba34 	.word	0x0802ba34
  ldr r2, =_sbss
 801ba3c:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 801ba40:	24000c10 	.word	0x24000c10

0801ba44 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801ba44:	e7fe      	b.n	801ba44 <ADC3_IRQHandler>
	...

0801ba48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801ba48:	b580      	push	{r7, lr}
 801ba4a:	b082      	sub	sp, #8
 801ba4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801ba4e:	2003      	movs	r0, #3
 801ba50:	f000 f9a2 	bl	801bd98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801ba54:	f003 fdc8 	bl	801f5e8 <HAL_RCC_GetSysClockFreq>
 801ba58:	4602      	mov	r2, r0
 801ba5a:	4b15      	ldr	r3, [pc, #84]	@ (801bab0 <HAL_Init+0x68>)
 801ba5c:	699b      	ldr	r3, [r3, #24]
 801ba5e:	0a1b      	lsrs	r3, r3, #8
 801ba60:	f003 030f 	and.w	r3, r3, #15
 801ba64:	4913      	ldr	r1, [pc, #76]	@ (801bab4 <HAL_Init+0x6c>)
 801ba66:	5ccb      	ldrb	r3, [r1, r3]
 801ba68:	f003 031f 	and.w	r3, r3, #31
 801ba6c:	fa22 f303 	lsr.w	r3, r2, r3
 801ba70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801ba72:	4b0f      	ldr	r3, [pc, #60]	@ (801bab0 <HAL_Init+0x68>)
 801ba74:	699b      	ldr	r3, [r3, #24]
 801ba76:	f003 030f 	and.w	r3, r3, #15
 801ba7a:	4a0e      	ldr	r2, [pc, #56]	@ (801bab4 <HAL_Init+0x6c>)
 801ba7c:	5cd3      	ldrb	r3, [r2, r3]
 801ba7e:	f003 031f 	and.w	r3, r3, #31
 801ba82:	687a      	ldr	r2, [r7, #4]
 801ba84:	fa22 f303 	lsr.w	r3, r2, r3
 801ba88:	4a0b      	ldr	r2, [pc, #44]	@ (801bab8 <HAL_Init+0x70>)
 801ba8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801ba8c:	4a0b      	ldr	r2, [pc, #44]	@ (801babc <HAL_Init+0x74>)
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801ba92:	200f      	movs	r0, #15
 801ba94:	f000 f814 	bl	801bac0 <HAL_InitTick>
 801ba98:	4603      	mov	r3, r0
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d001      	beq.n	801baa2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801ba9e:	2301      	movs	r3, #1
 801baa0:	e002      	b.n	801baa8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801baa2:	f7f3 f853 	bl	800eb4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801baa6:	2300      	movs	r3, #0
}
 801baa8:	4618      	mov	r0, r3
 801baaa:	3708      	adds	r7, #8
 801baac:	46bd      	mov	sp, r7
 801baae:	bd80      	pop	{r7, pc}
 801bab0:	58024400 	.word	0x58024400
 801bab4:	0802b3a0 	.word	0x0802b3a0
 801bab8:	24000020 	.word	0x24000020
 801babc:	2400001c 	.word	0x2400001c

0801bac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801bac0:	b580      	push	{r7, lr}
 801bac2:	b082      	sub	sp, #8
 801bac4:	af00      	add	r7, sp, #0
 801bac6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801bac8:	4b15      	ldr	r3, [pc, #84]	@ (801bb20 <HAL_InitTick+0x60>)
 801baca:	781b      	ldrb	r3, [r3, #0]
 801bacc:	2b00      	cmp	r3, #0
 801bace:	d101      	bne.n	801bad4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 801bad0:	2301      	movs	r3, #1
 801bad2:	e021      	b.n	801bb18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 801bad4:	4b13      	ldr	r3, [pc, #76]	@ (801bb24 <HAL_InitTick+0x64>)
 801bad6:	681a      	ldr	r2, [r3, #0]
 801bad8:	4b11      	ldr	r3, [pc, #68]	@ (801bb20 <HAL_InitTick+0x60>)
 801bada:	781b      	ldrb	r3, [r3, #0]
 801badc:	4619      	mov	r1, r3
 801bade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801bae2:	fbb3 f3f1 	udiv	r3, r3, r1
 801bae6:	fbb2 f3f3 	udiv	r3, r2, r3
 801baea:	4618      	mov	r0, r3
 801baec:	f000 f98b 	bl	801be06 <HAL_SYSTICK_Config>
 801baf0:	4603      	mov	r3, r0
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d001      	beq.n	801bafa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801baf6:	2301      	movs	r3, #1
 801baf8:	e00e      	b.n	801bb18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	2b0f      	cmp	r3, #15
 801bafe:	d80a      	bhi.n	801bb16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801bb00:	2200      	movs	r2, #0
 801bb02:	6879      	ldr	r1, [r7, #4]
 801bb04:	f04f 30ff 	mov.w	r0, #4294967295
 801bb08:	f000 f951 	bl	801bdae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801bb0c:	4a06      	ldr	r2, [pc, #24]	@ (801bb28 <HAL_InitTick+0x68>)
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801bb12:	2300      	movs	r3, #0
 801bb14:	e000      	b.n	801bb18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 801bb16:	2301      	movs	r3, #1
}
 801bb18:	4618      	mov	r0, r3
 801bb1a:	3708      	adds	r7, #8
 801bb1c:	46bd      	mov	sp, r7
 801bb1e:	bd80      	pop	{r7, pc}
 801bb20:	24000028 	.word	0x24000028
 801bb24:	2400001c 	.word	0x2400001c
 801bb28:	24000024 	.word	0x24000024

0801bb2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801bb2c:	b480      	push	{r7}
 801bb2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801bb30:	4b06      	ldr	r3, [pc, #24]	@ (801bb4c <HAL_IncTick+0x20>)
 801bb32:	781b      	ldrb	r3, [r3, #0]
 801bb34:	461a      	mov	r2, r3
 801bb36:	4b06      	ldr	r3, [pc, #24]	@ (801bb50 <HAL_IncTick+0x24>)
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	4413      	add	r3, r2
 801bb3c:	4a04      	ldr	r2, [pc, #16]	@ (801bb50 <HAL_IncTick+0x24>)
 801bb3e:	6013      	str	r3, [r2, #0]
}
 801bb40:	bf00      	nop
 801bb42:	46bd      	mov	sp, r7
 801bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb48:	4770      	bx	lr
 801bb4a:	bf00      	nop
 801bb4c:	24000028 	.word	0x24000028
 801bb50:	24000418 	.word	0x24000418

0801bb54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801bb54:	b480      	push	{r7}
 801bb56:	af00      	add	r7, sp, #0
  return uwTick;
 801bb58:	4b03      	ldr	r3, [pc, #12]	@ (801bb68 <HAL_GetTick+0x14>)
 801bb5a:	681b      	ldr	r3, [r3, #0]
}
 801bb5c:	4618      	mov	r0, r3
 801bb5e:	46bd      	mov	sp, r7
 801bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb64:	4770      	bx	lr
 801bb66:	bf00      	nop
 801bb68:	24000418 	.word	0x24000418

0801bb6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801bb6c:	b580      	push	{r7, lr}
 801bb6e:	b084      	sub	sp, #16
 801bb70:	af00      	add	r7, sp, #0
 801bb72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801bb74:	f7ff ffee 	bl	801bb54 <HAL_GetTick>
 801bb78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801bb7e:	68fb      	ldr	r3, [r7, #12]
 801bb80:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb84:	d005      	beq.n	801bb92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801bb86:	4b0a      	ldr	r3, [pc, #40]	@ (801bbb0 <HAL_Delay+0x44>)
 801bb88:	781b      	ldrb	r3, [r3, #0]
 801bb8a:	461a      	mov	r2, r3
 801bb8c:	68fb      	ldr	r3, [r7, #12]
 801bb8e:	4413      	add	r3, r2
 801bb90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801bb92:	bf00      	nop
 801bb94:	f7ff ffde 	bl	801bb54 <HAL_GetTick>
 801bb98:	4602      	mov	r2, r0
 801bb9a:	68bb      	ldr	r3, [r7, #8]
 801bb9c:	1ad3      	subs	r3, r2, r3
 801bb9e:	68fa      	ldr	r2, [r7, #12]
 801bba0:	429a      	cmp	r2, r3
 801bba2:	d8f7      	bhi.n	801bb94 <HAL_Delay+0x28>
  {
  }
}
 801bba4:	bf00      	nop
 801bba6:	bf00      	nop
 801bba8:	3710      	adds	r7, #16
 801bbaa:	46bd      	mov	sp, r7
 801bbac:	bd80      	pop	{r7, pc}
 801bbae:	bf00      	nop
 801bbb0:	24000028 	.word	0x24000028

0801bbb4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 801bbb4:	b480      	push	{r7}
 801bbb6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801bbb8:	4b03      	ldr	r3, [pc, #12]	@ (801bbc8 <HAL_GetREVID+0x14>)
 801bbba:	681b      	ldr	r3, [r3, #0]
 801bbbc:	0c1b      	lsrs	r3, r3, #16
}
 801bbbe:	4618      	mov	r0, r3
 801bbc0:	46bd      	mov	sp, r7
 801bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbc6:	4770      	bx	lr
 801bbc8:	5c001000 	.word	0x5c001000

0801bbcc <__NVIC_SetPriorityGrouping>:
{
 801bbcc:	b480      	push	{r7}
 801bbce:	b085      	sub	sp, #20
 801bbd0:	af00      	add	r7, sp, #0
 801bbd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	f003 0307 	and.w	r3, r3, #7
 801bbda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801bbdc:	4b0b      	ldr	r3, [pc, #44]	@ (801bc0c <__NVIC_SetPriorityGrouping+0x40>)
 801bbde:	68db      	ldr	r3, [r3, #12]
 801bbe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801bbe2:	68ba      	ldr	r2, [r7, #8]
 801bbe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801bbe8:	4013      	ands	r3, r2
 801bbea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801bbec:	68fb      	ldr	r3, [r7, #12]
 801bbee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801bbf0:	68bb      	ldr	r3, [r7, #8]
 801bbf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801bbf4:	4b06      	ldr	r3, [pc, #24]	@ (801bc10 <__NVIC_SetPriorityGrouping+0x44>)
 801bbf6:	4313      	orrs	r3, r2
 801bbf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801bbfa:	4a04      	ldr	r2, [pc, #16]	@ (801bc0c <__NVIC_SetPriorityGrouping+0x40>)
 801bbfc:	68bb      	ldr	r3, [r7, #8]
 801bbfe:	60d3      	str	r3, [r2, #12]
}
 801bc00:	bf00      	nop
 801bc02:	3714      	adds	r7, #20
 801bc04:	46bd      	mov	sp, r7
 801bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc0a:	4770      	bx	lr
 801bc0c:	e000ed00 	.word	0xe000ed00
 801bc10:	05fa0000 	.word	0x05fa0000

0801bc14 <__NVIC_GetPriorityGrouping>:
{
 801bc14:	b480      	push	{r7}
 801bc16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801bc18:	4b04      	ldr	r3, [pc, #16]	@ (801bc2c <__NVIC_GetPriorityGrouping+0x18>)
 801bc1a:	68db      	ldr	r3, [r3, #12]
 801bc1c:	0a1b      	lsrs	r3, r3, #8
 801bc1e:	f003 0307 	and.w	r3, r3, #7
}
 801bc22:	4618      	mov	r0, r3
 801bc24:	46bd      	mov	sp, r7
 801bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc2a:	4770      	bx	lr
 801bc2c:	e000ed00 	.word	0xe000ed00

0801bc30 <__NVIC_EnableIRQ>:
{
 801bc30:	b480      	push	{r7}
 801bc32:	b083      	sub	sp, #12
 801bc34:	af00      	add	r7, sp, #0
 801bc36:	4603      	mov	r3, r0
 801bc38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801bc3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	db0b      	blt.n	801bc5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801bc42:	88fb      	ldrh	r3, [r7, #6]
 801bc44:	f003 021f 	and.w	r2, r3, #31
 801bc48:	4907      	ldr	r1, [pc, #28]	@ (801bc68 <__NVIC_EnableIRQ+0x38>)
 801bc4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bc4e:	095b      	lsrs	r3, r3, #5
 801bc50:	2001      	movs	r0, #1
 801bc52:	fa00 f202 	lsl.w	r2, r0, r2
 801bc56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801bc5a:	bf00      	nop
 801bc5c:	370c      	adds	r7, #12
 801bc5e:	46bd      	mov	sp, r7
 801bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc64:	4770      	bx	lr
 801bc66:	bf00      	nop
 801bc68:	e000e100 	.word	0xe000e100

0801bc6c <__NVIC_SetPriority>:
{
 801bc6c:	b480      	push	{r7}
 801bc6e:	b083      	sub	sp, #12
 801bc70:	af00      	add	r7, sp, #0
 801bc72:	4603      	mov	r3, r0
 801bc74:	6039      	str	r1, [r7, #0]
 801bc76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801bc78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	db0a      	blt.n	801bc96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bc80:	683b      	ldr	r3, [r7, #0]
 801bc82:	b2da      	uxtb	r2, r3
 801bc84:	490c      	ldr	r1, [pc, #48]	@ (801bcb8 <__NVIC_SetPriority+0x4c>)
 801bc86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bc8a:	0112      	lsls	r2, r2, #4
 801bc8c:	b2d2      	uxtb	r2, r2
 801bc8e:	440b      	add	r3, r1
 801bc90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801bc94:	e00a      	b.n	801bcac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bc96:	683b      	ldr	r3, [r7, #0]
 801bc98:	b2da      	uxtb	r2, r3
 801bc9a:	4908      	ldr	r1, [pc, #32]	@ (801bcbc <__NVIC_SetPriority+0x50>)
 801bc9c:	88fb      	ldrh	r3, [r7, #6]
 801bc9e:	f003 030f 	and.w	r3, r3, #15
 801bca2:	3b04      	subs	r3, #4
 801bca4:	0112      	lsls	r2, r2, #4
 801bca6:	b2d2      	uxtb	r2, r2
 801bca8:	440b      	add	r3, r1
 801bcaa:	761a      	strb	r2, [r3, #24]
}
 801bcac:	bf00      	nop
 801bcae:	370c      	adds	r7, #12
 801bcb0:	46bd      	mov	sp, r7
 801bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcb6:	4770      	bx	lr
 801bcb8:	e000e100 	.word	0xe000e100
 801bcbc:	e000ed00 	.word	0xe000ed00

0801bcc0 <NVIC_EncodePriority>:
{
 801bcc0:	b480      	push	{r7}
 801bcc2:	b089      	sub	sp, #36	@ 0x24
 801bcc4:	af00      	add	r7, sp, #0
 801bcc6:	60f8      	str	r0, [r7, #12]
 801bcc8:	60b9      	str	r1, [r7, #8]
 801bcca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801bccc:	68fb      	ldr	r3, [r7, #12]
 801bcce:	f003 0307 	and.w	r3, r3, #7
 801bcd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801bcd4:	69fb      	ldr	r3, [r7, #28]
 801bcd6:	f1c3 0307 	rsb	r3, r3, #7
 801bcda:	2b04      	cmp	r3, #4
 801bcdc:	bf28      	it	cs
 801bcde:	2304      	movcs	r3, #4
 801bce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801bce2:	69fb      	ldr	r3, [r7, #28]
 801bce4:	3304      	adds	r3, #4
 801bce6:	2b06      	cmp	r3, #6
 801bce8:	d902      	bls.n	801bcf0 <NVIC_EncodePriority+0x30>
 801bcea:	69fb      	ldr	r3, [r7, #28]
 801bcec:	3b03      	subs	r3, #3
 801bcee:	e000      	b.n	801bcf2 <NVIC_EncodePriority+0x32>
 801bcf0:	2300      	movs	r3, #0
 801bcf2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801bcf4:	f04f 32ff 	mov.w	r2, #4294967295
 801bcf8:	69bb      	ldr	r3, [r7, #24]
 801bcfa:	fa02 f303 	lsl.w	r3, r2, r3
 801bcfe:	43da      	mvns	r2, r3
 801bd00:	68bb      	ldr	r3, [r7, #8]
 801bd02:	401a      	ands	r2, r3
 801bd04:	697b      	ldr	r3, [r7, #20]
 801bd06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801bd08:	f04f 31ff 	mov.w	r1, #4294967295
 801bd0c:	697b      	ldr	r3, [r7, #20]
 801bd0e:	fa01 f303 	lsl.w	r3, r1, r3
 801bd12:	43d9      	mvns	r1, r3
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801bd18:	4313      	orrs	r3, r2
}
 801bd1a:	4618      	mov	r0, r3
 801bd1c:	3724      	adds	r7, #36	@ 0x24
 801bd1e:	46bd      	mov	sp, r7
 801bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd24:	4770      	bx	lr
	...

0801bd28 <__NVIC_SystemReset>:
{
 801bd28:	b480      	push	{r7}
 801bd2a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801bd2c:	f3bf 8f4f 	dsb	sy
}
 801bd30:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801bd32:	4b06      	ldr	r3, [pc, #24]	@ (801bd4c <__NVIC_SystemReset+0x24>)
 801bd34:	68db      	ldr	r3, [r3, #12]
 801bd36:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801bd3a:	4904      	ldr	r1, [pc, #16]	@ (801bd4c <__NVIC_SystemReset+0x24>)
 801bd3c:	4b04      	ldr	r3, [pc, #16]	@ (801bd50 <__NVIC_SystemReset+0x28>)
 801bd3e:	4313      	orrs	r3, r2
 801bd40:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801bd42:	f3bf 8f4f 	dsb	sy
}
 801bd46:	bf00      	nop
    __NOP();
 801bd48:	bf00      	nop
 801bd4a:	e7fd      	b.n	801bd48 <__NVIC_SystemReset+0x20>
 801bd4c:	e000ed00 	.word	0xe000ed00
 801bd50:	05fa0004 	.word	0x05fa0004

0801bd54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801bd54:	b580      	push	{r7, lr}
 801bd56:	b082      	sub	sp, #8
 801bd58:	af00      	add	r7, sp, #0
 801bd5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	3b01      	subs	r3, #1
 801bd60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bd64:	d301      	bcc.n	801bd6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801bd66:	2301      	movs	r3, #1
 801bd68:	e00f      	b.n	801bd8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801bd6a:	4a0a      	ldr	r2, [pc, #40]	@ (801bd94 <SysTick_Config+0x40>)
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	3b01      	subs	r3, #1
 801bd70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801bd72:	210f      	movs	r1, #15
 801bd74:	f04f 30ff 	mov.w	r0, #4294967295
 801bd78:	f7ff ff78 	bl	801bc6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801bd7c:	4b05      	ldr	r3, [pc, #20]	@ (801bd94 <SysTick_Config+0x40>)
 801bd7e:	2200      	movs	r2, #0
 801bd80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801bd82:	4b04      	ldr	r3, [pc, #16]	@ (801bd94 <SysTick_Config+0x40>)
 801bd84:	2207      	movs	r2, #7
 801bd86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801bd88:	2300      	movs	r3, #0
}
 801bd8a:	4618      	mov	r0, r3
 801bd8c:	3708      	adds	r7, #8
 801bd8e:	46bd      	mov	sp, r7
 801bd90:	bd80      	pop	{r7, pc}
 801bd92:	bf00      	nop
 801bd94:	e000e010 	.word	0xe000e010

0801bd98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801bd98:	b580      	push	{r7, lr}
 801bd9a:	b082      	sub	sp, #8
 801bd9c:	af00      	add	r7, sp, #0
 801bd9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801bda0:	6878      	ldr	r0, [r7, #4]
 801bda2:	f7ff ff13 	bl	801bbcc <__NVIC_SetPriorityGrouping>
}
 801bda6:	bf00      	nop
 801bda8:	3708      	adds	r7, #8
 801bdaa:	46bd      	mov	sp, r7
 801bdac:	bd80      	pop	{r7, pc}

0801bdae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801bdae:	b580      	push	{r7, lr}
 801bdb0:	b086      	sub	sp, #24
 801bdb2:	af00      	add	r7, sp, #0
 801bdb4:	4603      	mov	r3, r0
 801bdb6:	60b9      	str	r1, [r7, #8]
 801bdb8:	607a      	str	r2, [r7, #4]
 801bdba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801bdbc:	f7ff ff2a 	bl	801bc14 <__NVIC_GetPriorityGrouping>
 801bdc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801bdc2:	687a      	ldr	r2, [r7, #4]
 801bdc4:	68b9      	ldr	r1, [r7, #8]
 801bdc6:	6978      	ldr	r0, [r7, #20]
 801bdc8:	f7ff ff7a 	bl	801bcc0 <NVIC_EncodePriority>
 801bdcc:	4602      	mov	r2, r0
 801bdce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801bdd2:	4611      	mov	r1, r2
 801bdd4:	4618      	mov	r0, r3
 801bdd6:	f7ff ff49 	bl	801bc6c <__NVIC_SetPriority>
}
 801bdda:	bf00      	nop
 801bddc:	3718      	adds	r7, #24
 801bdde:	46bd      	mov	sp, r7
 801bde0:	bd80      	pop	{r7, pc}

0801bde2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801bde2:	b580      	push	{r7, lr}
 801bde4:	b082      	sub	sp, #8
 801bde6:	af00      	add	r7, sp, #0
 801bde8:	4603      	mov	r3, r0
 801bdea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801bdec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bdf0:	4618      	mov	r0, r3
 801bdf2:	f7ff ff1d 	bl	801bc30 <__NVIC_EnableIRQ>
}
 801bdf6:	bf00      	nop
 801bdf8:	3708      	adds	r7, #8
 801bdfa:	46bd      	mov	sp, r7
 801bdfc:	bd80      	pop	{r7, pc}

0801bdfe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 801bdfe:	b580      	push	{r7, lr}
 801be00:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801be02:	f7ff ff91 	bl	801bd28 <__NVIC_SystemReset>

0801be06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801be06:	b580      	push	{r7, lr}
 801be08:	b082      	sub	sp, #8
 801be0a:	af00      	add	r7, sp, #0
 801be0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801be0e:	6878      	ldr	r0, [r7, #4]
 801be10:	f7ff ffa0 	bl	801bd54 <SysTick_Config>
 801be14:	4603      	mov	r3, r0
}
 801be16:	4618      	mov	r0, r3
 801be18:	3708      	adds	r7, #8
 801be1a:	46bd      	mov	sp, r7
 801be1c:	bd80      	pop	{r7, pc}
	...

0801be20 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 801be20:	b480      	push	{r7}
 801be22:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801be24:	f3bf 8f5f 	dmb	sy
}
 801be28:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801be2a:	4b07      	ldr	r3, [pc, #28]	@ (801be48 <HAL_MPU_Disable+0x28>)
 801be2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801be2e:	4a06      	ldr	r2, [pc, #24]	@ (801be48 <HAL_MPU_Disable+0x28>)
 801be30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801be34:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801be36:	4b05      	ldr	r3, [pc, #20]	@ (801be4c <HAL_MPU_Disable+0x2c>)
 801be38:	2200      	movs	r2, #0
 801be3a:	605a      	str	r2, [r3, #4]
}
 801be3c:	bf00      	nop
 801be3e:	46bd      	mov	sp, r7
 801be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be44:	4770      	bx	lr
 801be46:	bf00      	nop
 801be48:	e000ed00 	.word	0xe000ed00
 801be4c:	e000ed90 	.word	0xe000ed90

0801be50 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801be50:	b480      	push	{r7}
 801be52:	b083      	sub	sp, #12
 801be54:	af00      	add	r7, sp, #0
 801be56:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801be58:	4a0b      	ldr	r2, [pc, #44]	@ (801be88 <HAL_MPU_Enable+0x38>)
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	f043 0301 	orr.w	r3, r3, #1
 801be60:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801be62:	4b0a      	ldr	r3, [pc, #40]	@ (801be8c <HAL_MPU_Enable+0x3c>)
 801be64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801be66:	4a09      	ldr	r2, [pc, #36]	@ (801be8c <HAL_MPU_Enable+0x3c>)
 801be68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801be6c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801be6e:	f3bf 8f4f 	dsb	sy
}
 801be72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801be74:	f3bf 8f6f 	isb	sy
}
 801be78:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801be7a:	bf00      	nop
 801be7c:	370c      	adds	r7, #12
 801be7e:	46bd      	mov	sp, r7
 801be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be84:	4770      	bx	lr
 801be86:	bf00      	nop
 801be88:	e000ed90 	.word	0xe000ed90
 801be8c:	e000ed00 	.word	0xe000ed00

0801be90 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 801be90:	b480      	push	{r7}
 801be92:	b083      	sub	sp, #12
 801be94:	af00      	add	r7, sp, #0
 801be96:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	785a      	ldrb	r2, [r3, #1]
 801be9c:	4b1b      	ldr	r3, [pc, #108]	@ (801bf0c <HAL_MPU_ConfigRegion+0x7c>)
 801be9e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 801bea0:	4b1a      	ldr	r3, [pc, #104]	@ (801bf0c <HAL_MPU_ConfigRegion+0x7c>)
 801bea2:	691b      	ldr	r3, [r3, #16]
 801bea4:	4a19      	ldr	r2, [pc, #100]	@ (801bf0c <HAL_MPU_ConfigRegion+0x7c>)
 801bea6:	f023 0301 	bic.w	r3, r3, #1
 801beaa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 801beac:	4a17      	ldr	r2, [pc, #92]	@ (801bf0c <HAL_MPU_ConfigRegion+0x7c>)
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	685b      	ldr	r3, [r3, #4]
 801beb2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	7b1b      	ldrb	r3, [r3, #12]
 801beb8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	7adb      	ldrb	r3, [r3, #11]
 801bebe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801bec0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	7a9b      	ldrb	r3, [r3, #10]
 801bec6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801bec8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	7b5b      	ldrb	r3, [r3, #13]
 801bece:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801bed0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	7b9b      	ldrb	r3, [r3, #14]
 801bed6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801bed8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	7bdb      	ldrb	r3, [r3, #15]
 801bede:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801bee0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	7a5b      	ldrb	r3, [r3, #9]
 801bee6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801bee8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	7a1b      	ldrb	r3, [r3, #8]
 801beee:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801bef0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801bef2:	687a      	ldr	r2, [r7, #4]
 801bef4:	7812      	ldrb	r2, [r2, #0]
 801bef6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801bef8:	4a04      	ldr	r2, [pc, #16]	@ (801bf0c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801befa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801befc:	6113      	str	r3, [r2, #16]
}
 801befe:	bf00      	nop
 801bf00:	370c      	adds	r7, #12
 801bf02:	46bd      	mov	sp, r7
 801bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf08:	4770      	bx	lr
 801bf0a:	bf00      	nop
 801bf0c:	e000ed90 	.word	0xe000ed90

0801bf10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801bf10:	b580      	push	{r7, lr}
 801bf12:	b086      	sub	sp, #24
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 801bf18:	f7ff fe1c 	bl	801bb54 <HAL_GetTick>
 801bf1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	d101      	bne.n	801bf28 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 801bf24:	2301      	movs	r3, #1
 801bf26:	e316      	b.n	801c556 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	681b      	ldr	r3, [r3, #0]
 801bf2c:	4a66      	ldr	r2, [pc, #408]	@ (801c0c8 <HAL_DMA_Init+0x1b8>)
 801bf2e:	4293      	cmp	r3, r2
 801bf30:	d04a      	beq.n	801bfc8 <HAL_DMA_Init+0xb8>
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	4a65      	ldr	r2, [pc, #404]	@ (801c0cc <HAL_DMA_Init+0x1bc>)
 801bf38:	4293      	cmp	r3, r2
 801bf3a:	d045      	beq.n	801bfc8 <HAL_DMA_Init+0xb8>
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	681b      	ldr	r3, [r3, #0]
 801bf40:	4a63      	ldr	r2, [pc, #396]	@ (801c0d0 <HAL_DMA_Init+0x1c0>)
 801bf42:	4293      	cmp	r3, r2
 801bf44:	d040      	beq.n	801bfc8 <HAL_DMA_Init+0xb8>
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	4a62      	ldr	r2, [pc, #392]	@ (801c0d4 <HAL_DMA_Init+0x1c4>)
 801bf4c:	4293      	cmp	r3, r2
 801bf4e:	d03b      	beq.n	801bfc8 <HAL_DMA_Init+0xb8>
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	681b      	ldr	r3, [r3, #0]
 801bf54:	4a60      	ldr	r2, [pc, #384]	@ (801c0d8 <HAL_DMA_Init+0x1c8>)
 801bf56:	4293      	cmp	r3, r2
 801bf58:	d036      	beq.n	801bfc8 <HAL_DMA_Init+0xb8>
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	681b      	ldr	r3, [r3, #0]
 801bf5e:	4a5f      	ldr	r2, [pc, #380]	@ (801c0dc <HAL_DMA_Init+0x1cc>)
 801bf60:	4293      	cmp	r3, r2
 801bf62:	d031      	beq.n	801bfc8 <HAL_DMA_Init+0xb8>
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	4a5d      	ldr	r2, [pc, #372]	@ (801c0e0 <HAL_DMA_Init+0x1d0>)
 801bf6a:	4293      	cmp	r3, r2
 801bf6c:	d02c      	beq.n	801bfc8 <HAL_DMA_Init+0xb8>
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	4a5c      	ldr	r2, [pc, #368]	@ (801c0e4 <HAL_DMA_Init+0x1d4>)
 801bf74:	4293      	cmp	r3, r2
 801bf76:	d027      	beq.n	801bfc8 <HAL_DMA_Init+0xb8>
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	681b      	ldr	r3, [r3, #0]
 801bf7c:	4a5a      	ldr	r2, [pc, #360]	@ (801c0e8 <HAL_DMA_Init+0x1d8>)
 801bf7e:	4293      	cmp	r3, r2
 801bf80:	d022      	beq.n	801bfc8 <HAL_DMA_Init+0xb8>
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	681b      	ldr	r3, [r3, #0]
 801bf86:	4a59      	ldr	r2, [pc, #356]	@ (801c0ec <HAL_DMA_Init+0x1dc>)
 801bf88:	4293      	cmp	r3, r2
 801bf8a:	d01d      	beq.n	801bfc8 <HAL_DMA_Init+0xb8>
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	681b      	ldr	r3, [r3, #0]
 801bf90:	4a57      	ldr	r2, [pc, #348]	@ (801c0f0 <HAL_DMA_Init+0x1e0>)
 801bf92:	4293      	cmp	r3, r2
 801bf94:	d018      	beq.n	801bfc8 <HAL_DMA_Init+0xb8>
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	4a56      	ldr	r2, [pc, #344]	@ (801c0f4 <HAL_DMA_Init+0x1e4>)
 801bf9c:	4293      	cmp	r3, r2
 801bf9e:	d013      	beq.n	801bfc8 <HAL_DMA_Init+0xb8>
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	4a54      	ldr	r2, [pc, #336]	@ (801c0f8 <HAL_DMA_Init+0x1e8>)
 801bfa6:	4293      	cmp	r3, r2
 801bfa8:	d00e      	beq.n	801bfc8 <HAL_DMA_Init+0xb8>
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	4a53      	ldr	r2, [pc, #332]	@ (801c0fc <HAL_DMA_Init+0x1ec>)
 801bfb0:	4293      	cmp	r3, r2
 801bfb2:	d009      	beq.n	801bfc8 <HAL_DMA_Init+0xb8>
 801bfb4:	687b      	ldr	r3, [r7, #4]
 801bfb6:	681b      	ldr	r3, [r3, #0]
 801bfb8:	4a51      	ldr	r2, [pc, #324]	@ (801c100 <HAL_DMA_Init+0x1f0>)
 801bfba:	4293      	cmp	r3, r2
 801bfbc:	d004      	beq.n	801bfc8 <HAL_DMA_Init+0xb8>
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	681b      	ldr	r3, [r3, #0]
 801bfc2:	4a50      	ldr	r2, [pc, #320]	@ (801c104 <HAL_DMA_Init+0x1f4>)
 801bfc4:	4293      	cmp	r3, r2
 801bfc6:	d101      	bne.n	801bfcc <HAL_DMA_Init+0xbc>
 801bfc8:	2301      	movs	r3, #1
 801bfca:	e000      	b.n	801bfce <HAL_DMA_Init+0xbe>
 801bfcc:	2300      	movs	r3, #0
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	f000 813b 	beq.w	801c24a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	2202      	movs	r2, #2
 801bfd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	2200      	movs	r2, #0
 801bfe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	4a37      	ldr	r2, [pc, #220]	@ (801c0c8 <HAL_DMA_Init+0x1b8>)
 801bfea:	4293      	cmp	r3, r2
 801bfec:	d04a      	beq.n	801c084 <HAL_DMA_Init+0x174>
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	681b      	ldr	r3, [r3, #0]
 801bff2:	4a36      	ldr	r2, [pc, #216]	@ (801c0cc <HAL_DMA_Init+0x1bc>)
 801bff4:	4293      	cmp	r3, r2
 801bff6:	d045      	beq.n	801c084 <HAL_DMA_Init+0x174>
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	4a34      	ldr	r2, [pc, #208]	@ (801c0d0 <HAL_DMA_Init+0x1c0>)
 801bffe:	4293      	cmp	r3, r2
 801c000:	d040      	beq.n	801c084 <HAL_DMA_Init+0x174>
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	4a33      	ldr	r2, [pc, #204]	@ (801c0d4 <HAL_DMA_Init+0x1c4>)
 801c008:	4293      	cmp	r3, r2
 801c00a:	d03b      	beq.n	801c084 <HAL_DMA_Init+0x174>
 801c00c:	687b      	ldr	r3, [r7, #4]
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	4a31      	ldr	r2, [pc, #196]	@ (801c0d8 <HAL_DMA_Init+0x1c8>)
 801c012:	4293      	cmp	r3, r2
 801c014:	d036      	beq.n	801c084 <HAL_DMA_Init+0x174>
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	681b      	ldr	r3, [r3, #0]
 801c01a:	4a30      	ldr	r2, [pc, #192]	@ (801c0dc <HAL_DMA_Init+0x1cc>)
 801c01c:	4293      	cmp	r3, r2
 801c01e:	d031      	beq.n	801c084 <HAL_DMA_Init+0x174>
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	4a2e      	ldr	r2, [pc, #184]	@ (801c0e0 <HAL_DMA_Init+0x1d0>)
 801c026:	4293      	cmp	r3, r2
 801c028:	d02c      	beq.n	801c084 <HAL_DMA_Init+0x174>
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	4a2d      	ldr	r2, [pc, #180]	@ (801c0e4 <HAL_DMA_Init+0x1d4>)
 801c030:	4293      	cmp	r3, r2
 801c032:	d027      	beq.n	801c084 <HAL_DMA_Init+0x174>
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	4a2b      	ldr	r2, [pc, #172]	@ (801c0e8 <HAL_DMA_Init+0x1d8>)
 801c03a:	4293      	cmp	r3, r2
 801c03c:	d022      	beq.n	801c084 <HAL_DMA_Init+0x174>
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	4a2a      	ldr	r2, [pc, #168]	@ (801c0ec <HAL_DMA_Init+0x1dc>)
 801c044:	4293      	cmp	r3, r2
 801c046:	d01d      	beq.n	801c084 <HAL_DMA_Init+0x174>
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	681b      	ldr	r3, [r3, #0]
 801c04c:	4a28      	ldr	r2, [pc, #160]	@ (801c0f0 <HAL_DMA_Init+0x1e0>)
 801c04e:	4293      	cmp	r3, r2
 801c050:	d018      	beq.n	801c084 <HAL_DMA_Init+0x174>
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	681b      	ldr	r3, [r3, #0]
 801c056:	4a27      	ldr	r2, [pc, #156]	@ (801c0f4 <HAL_DMA_Init+0x1e4>)
 801c058:	4293      	cmp	r3, r2
 801c05a:	d013      	beq.n	801c084 <HAL_DMA_Init+0x174>
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	4a25      	ldr	r2, [pc, #148]	@ (801c0f8 <HAL_DMA_Init+0x1e8>)
 801c062:	4293      	cmp	r3, r2
 801c064:	d00e      	beq.n	801c084 <HAL_DMA_Init+0x174>
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	4a24      	ldr	r2, [pc, #144]	@ (801c0fc <HAL_DMA_Init+0x1ec>)
 801c06c:	4293      	cmp	r3, r2
 801c06e:	d009      	beq.n	801c084 <HAL_DMA_Init+0x174>
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	4a22      	ldr	r2, [pc, #136]	@ (801c100 <HAL_DMA_Init+0x1f0>)
 801c076:	4293      	cmp	r3, r2
 801c078:	d004      	beq.n	801c084 <HAL_DMA_Init+0x174>
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	681b      	ldr	r3, [r3, #0]
 801c07e:	4a21      	ldr	r2, [pc, #132]	@ (801c104 <HAL_DMA_Init+0x1f4>)
 801c080:	4293      	cmp	r3, r2
 801c082:	d108      	bne.n	801c096 <HAL_DMA_Init+0x186>
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	681b      	ldr	r3, [r3, #0]
 801c088:	681a      	ldr	r2, [r3, #0]
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	f022 0201 	bic.w	r2, r2, #1
 801c092:	601a      	str	r2, [r3, #0]
 801c094:	e007      	b.n	801c0a6 <HAL_DMA_Init+0x196>
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	681a      	ldr	r2, [r3, #0]
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	681b      	ldr	r3, [r3, #0]
 801c0a0:	f022 0201 	bic.w	r2, r2, #1
 801c0a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801c0a6:	e02f      	b.n	801c108 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801c0a8:	f7ff fd54 	bl	801bb54 <HAL_GetTick>
 801c0ac:	4602      	mov	r2, r0
 801c0ae:	693b      	ldr	r3, [r7, #16]
 801c0b0:	1ad3      	subs	r3, r2, r3
 801c0b2:	2b05      	cmp	r3, #5
 801c0b4:	d928      	bls.n	801c108 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	2220      	movs	r2, #32
 801c0ba:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	2203      	movs	r2, #3
 801c0c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 801c0c4:	2301      	movs	r3, #1
 801c0c6:	e246      	b.n	801c556 <HAL_DMA_Init+0x646>
 801c0c8:	40020010 	.word	0x40020010
 801c0cc:	40020028 	.word	0x40020028
 801c0d0:	40020040 	.word	0x40020040
 801c0d4:	40020058 	.word	0x40020058
 801c0d8:	40020070 	.word	0x40020070
 801c0dc:	40020088 	.word	0x40020088
 801c0e0:	400200a0 	.word	0x400200a0
 801c0e4:	400200b8 	.word	0x400200b8
 801c0e8:	40020410 	.word	0x40020410
 801c0ec:	40020428 	.word	0x40020428
 801c0f0:	40020440 	.word	0x40020440
 801c0f4:	40020458 	.word	0x40020458
 801c0f8:	40020470 	.word	0x40020470
 801c0fc:	40020488 	.word	0x40020488
 801c100:	400204a0 	.word	0x400204a0
 801c104:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	681b      	ldr	r3, [r3, #0]
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	f003 0301 	and.w	r3, r3, #1
 801c112:	2b00      	cmp	r3, #0
 801c114:	d1c8      	bne.n	801c0a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801c116:	687b      	ldr	r3, [r7, #4]
 801c118:	681b      	ldr	r3, [r3, #0]
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801c11e:	697a      	ldr	r2, [r7, #20]
 801c120:	4b83      	ldr	r3, [pc, #524]	@ (801c330 <HAL_DMA_Init+0x420>)
 801c122:	4013      	ands	r3, r2
 801c124:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801c12e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	691b      	ldr	r3, [r3, #16]
 801c134:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c13a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	699b      	ldr	r3, [r3, #24]
 801c140:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c146:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	6a1b      	ldr	r3, [r3, #32]
 801c14c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801c14e:	697a      	ldr	r2, [r7, #20]
 801c150:	4313      	orrs	r3, r2
 801c152:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c158:	2b04      	cmp	r3, #4
 801c15a:	d107      	bne.n	801c16c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c164:	4313      	orrs	r3, r2
 801c166:	697a      	ldr	r2, [r7, #20]
 801c168:	4313      	orrs	r3, r2
 801c16a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 801c16c:	4b71      	ldr	r3, [pc, #452]	@ (801c334 <HAL_DMA_Init+0x424>)
 801c16e:	681a      	ldr	r2, [r3, #0]
 801c170:	4b71      	ldr	r3, [pc, #452]	@ (801c338 <HAL_DMA_Init+0x428>)
 801c172:	4013      	ands	r3, r2
 801c174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c178:	d328      	bcc.n	801c1cc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	685b      	ldr	r3, [r3, #4]
 801c17e:	2b28      	cmp	r3, #40	@ 0x28
 801c180:	d903      	bls.n	801c18a <HAL_DMA_Init+0x27a>
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	685b      	ldr	r3, [r3, #4]
 801c186:	2b2e      	cmp	r3, #46	@ 0x2e
 801c188:	d917      	bls.n	801c1ba <HAL_DMA_Init+0x2aa>
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	685b      	ldr	r3, [r3, #4]
 801c18e:	2b3e      	cmp	r3, #62	@ 0x3e
 801c190:	d903      	bls.n	801c19a <HAL_DMA_Init+0x28a>
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	685b      	ldr	r3, [r3, #4]
 801c196:	2b42      	cmp	r3, #66	@ 0x42
 801c198:	d90f      	bls.n	801c1ba <HAL_DMA_Init+0x2aa>
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	685b      	ldr	r3, [r3, #4]
 801c19e:	2b46      	cmp	r3, #70	@ 0x46
 801c1a0:	d903      	bls.n	801c1aa <HAL_DMA_Init+0x29a>
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	685b      	ldr	r3, [r3, #4]
 801c1a6:	2b48      	cmp	r3, #72	@ 0x48
 801c1a8:	d907      	bls.n	801c1ba <HAL_DMA_Init+0x2aa>
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	685b      	ldr	r3, [r3, #4]
 801c1ae:	2b4e      	cmp	r3, #78	@ 0x4e
 801c1b0:	d905      	bls.n	801c1be <HAL_DMA_Init+0x2ae>
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	685b      	ldr	r3, [r3, #4]
 801c1b6:	2b52      	cmp	r3, #82	@ 0x52
 801c1b8:	d801      	bhi.n	801c1be <HAL_DMA_Init+0x2ae>
 801c1ba:	2301      	movs	r3, #1
 801c1bc:	e000      	b.n	801c1c0 <HAL_DMA_Init+0x2b0>
 801c1be:	2300      	movs	r3, #0
 801c1c0:	2b00      	cmp	r3, #0
 801c1c2:	d003      	beq.n	801c1cc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 801c1c4:	697b      	ldr	r3, [r7, #20]
 801c1c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c1ca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	697a      	ldr	r2, [r7, #20]
 801c1d2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	681b      	ldr	r3, [r3, #0]
 801c1d8:	695b      	ldr	r3, [r3, #20]
 801c1da:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801c1dc:	697b      	ldr	r3, [r7, #20]
 801c1de:	f023 0307 	bic.w	r3, r3, #7
 801c1e2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c1e8:	697a      	ldr	r2, [r7, #20]
 801c1ea:	4313      	orrs	r3, r2
 801c1ec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c1f2:	2b04      	cmp	r3, #4
 801c1f4:	d117      	bne.n	801c226 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c1fa:	697a      	ldr	r2, [r7, #20]
 801c1fc:	4313      	orrs	r3, r2
 801c1fe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c204:	2b00      	cmp	r3, #0
 801c206:	d00e      	beq.n	801c226 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801c208:	6878      	ldr	r0, [r7, #4]
 801c20a:	f001 fc23 	bl	801da54 <DMA_CheckFifoParam>
 801c20e:	4603      	mov	r3, r0
 801c210:	2b00      	cmp	r3, #0
 801c212:	d008      	beq.n	801c226 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	2240      	movs	r2, #64	@ 0x40
 801c218:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	2201      	movs	r2, #1
 801c21e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 801c222:	2301      	movs	r3, #1
 801c224:	e197      	b.n	801c556 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	697a      	ldr	r2, [r7, #20]
 801c22c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801c22e:	6878      	ldr	r0, [r7, #4]
 801c230:	f001 fb5e 	bl	801d8f0 <DMA_CalcBaseAndBitshift>
 801c234:	4603      	mov	r3, r0
 801c236:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c23c:	f003 031f 	and.w	r3, r3, #31
 801c240:	223f      	movs	r2, #63	@ 0x3f
 801c242:	409a      	lsls	r2, r3
 801c244:	68bb      	ldr	r3, [r7, #8]
 801c246:	609a      	str	r2, [r3, #8]
 801c248:	e0cd      	b.n	801c3e6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	681b      	ldr	r3, [r3, #0]
 801c24e:	4a3b      	ldr	r2, [pc, #236]	@ (801c33c <HAL_DMA_Init+0x42c>)
 801c250:	4293      	cmp	r3, r2
 801c252:	d022      	beq.n	801c29a <HAL_DMA_Init+0x38a>
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	4a39      	ldr	r2, [pc, #228]	@ (801c340 <HAL_DMA_Init+0x430>)
 801c25a:	4293      	cmp	r3, r2
 801c25c:	d01d      	beq.n	801c29a <HAL_DMA_Init+0x38a>
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	4a38      	ldr	r2, [pc, #224]	@ (801c344 <HAL_DMA_Init+0x434>)
 801c264:	4293      	cmp	r3, r2
 801c266:	d018      	beq.n	801c29a <HAL_DMA_Init+0x38a>
 801c268:	687b      	ldr	r3, [r7, #4]
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	4a36      	ldr	r2, [pc, #216]	@ (801c348 <HAL_DMA_Init+0x438>)
 801c26e:	4293      	cmp	r3, r2
 801c270:	d013      	beq.n	801c29a <HAL_DMA_Init+0x38a>
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	4a35      	ldr	r2, [pc, #212]	@ (801c34c <HAL_DMA_Init+0x43c>)
 801c278:	4293      	cmp	r3, r2
 801c27a:	d00e      	beq.n	801c29a <HAL_DMA_Init+0x38a>
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	681b      	ldr	r3, [r3, #0]
 801c280:	4a33      	ldr	r2, [pc, #204]	@ (801c350 <HAL_DMA_Init+0x440>)
 801c282:	4293      	cmp	r3, r2
 801c284:	d009      	beq.n	801c29a <HAL_DMA_Init+0x38a>
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	4a32      	ldr	r2, [pc, #200]	@ (801c354 <HAL_DMA_Init+0x444>)
 801c28c:	4293      	cmp	r3, r2
 801c28e:	d004      	beq.n	801c29a <HAL_DMA_Init+0x38a>
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	681b      	ldr	r3, [r3, #0]
 801c294:	4a30      	ldr	r2, [pc, #192]	@ (801c358 <HAL_DMA_Init+0x448>)
 801c296:	4293      	cmp	r3, r2
 801c298:	d101      	bne.n	801c29e <HAL_DMA_Init+0x38e>
 801c29a:	2301      	movs	r3, #1
 801c29c:	e000      	b.n	801c2a0 <HAL_DMA_Init+0x390>
 801c29e:	2300      	movs	r3, #0
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	f000 8097 	beq.w	801c3d4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	681b      	ldr	r3, [r3, #0]
 801c2aa:	4a24      	ldr	r2, [pc, #144]	@ (801c33c <HAL_DMA_Init+0x42c>)
 801c2ac:	4293      	cmp	r3, r2
 801c2ae:	d021      	beq.n	801c2f4 <HAL_DMA_Init+0x3e4>
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	681b      	ldr	r3, [r3, #0]
 801c2b4:	4a22      	ldr	r2, [pc, #136]	@ (801c340 <HAL_DMA_Init+0x430>)
 801c2b6:	4293      	cmp	r3, r2
 801c2b8:	d01c      	beq.n	801c2f4 <HAL_DMA_Init+0x3e4>
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	681b      	ldr	r3, [r3, #0]
 801c2be:	4a21      	ldr	r2, [pc, #132]	@ (801c344 <HAL_DMA_Init+0x434>)
 801c2c0:	4293      	cmp	r3, r2
 801c2c2:	d017      	beq.n	801c2f4 <HAL_DMA_Init+0x3e4>
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	681b      	ldr	r3, [r3, #0]
 801c2c8:	4a1f      	ldr	r2, [pc, #124]	@ (801c348 <HAL_DMA_Init+0x438>)
 801c2ca:	4293      	cmp	r3, r2
 801c2cc:	d012      	beq.n	801c2f4 <HAL_DMA_Init+0x3e4>
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	681b      	ldr	r3, [r3, #0]
 801c2d2:	4a1e      	ldr	r2, [pc, #120]	@ (801c34c <HAL_DMA_Init+0x43c>)
 801c2d4:	4293      	cmp	r3, r2
 801c2d6:	d00d      	beq.n	801c2f4 <HAL_DMA_Init+0x3e4>
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	681b      	ldr	r3, [r3, #0]
 801c2dc:	4a1c      	ldr	r2, [pc, #112]	@ (801c350 <HAL_DMA_Init+0x440>)
 801c2de:	4293      	cmp	r3, r2
 801c2e0:	d008      	beq.n	801c2f4 <HAL_DMA_Init+0x3e4>
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	681b      	ldr	r3, [r3, #0]
 801c2e6:	4a1b      	ldr	r2, [pc, #108]	@ (801c354 <HAL_DMA_Init+0x444>)
 801c2e8:	4293      	cmp	r3, r2
 801c2ea:	d003      	beq.n	801c2f4 <HAL_DMA_Init+0x3e4>
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	681b      	ldr	r3, [r3, #0]
 801c2f0:	4a19      	ldr	r2, [pc, #100]	@ (801c358 <HAL_DMA_Init+0x448>)
 801c2f2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	2202      	movs	r2, #2
 801c2f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	2200      	movs	r2, #0
 801c300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801c304:	687b      	ldr	r3, [r7, #4]
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	681b      	ldr	r3, [r3, #0]
 801c30a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801c30c:	697a      	ldr	r2, [r7, #20]
 801c30e:	4b13      	ldr	r3, [pc, #76]	@ (801c35c <HAL_DMA_Init+0x44c>)
 801c310:	4013      	ands	r3, r2
 801c312:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	689b      	ldr	r3, [r3, #8]
 801c318:	2b40      	cmp	r3, #64	@ 0x40
 801c31a:	d021      	beq.n	801c360 <HAL_DMA_Init+0x450>
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	689b      	ldr	r3, [r3, #8]
 801c320:	2b80      	cmp	r3, #128	@ 0x80
 801c322:	d102      	bne.n	801c32a <HAL_DMA_Init+0x41a>
 801c324:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801c328:	e01b      	b.n	801c362 <HAL_DMA_Init+0x452>
 801c32a:	2300      	movs	r3, #0
 801c32c:	e019      	b.n	801c362 <HAL_DMA_Init+0x452>
 801c32e:	bf00      	nop
 801c330:	fe10803f 	.word	0xfe10803f
 801c334:	5c001000 	.word	0x5c001000
 801c338:	ffff0000 	.word	0xffff0000
 801c33c:	58025408 	.word	0x58025408
 801c340:	5802541c 	.word	0x5802541c
 801c344:	58025430 	.word	0x58025430
 801c348:	58025444 	.word	0x58025444
 801c34c:	58025458 	.word	0x58025458
 801c350:	5802546c 	.word	0x5802546c
 801c354:	58025480 	.word	0x58025480
 801c358:	58025494 	.word	0x58025494
 801c35c:	fffe000f 	.word	0xfffe000f
 801c360:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801c362:	687a      	ldr	r2, [r7, #4]
 801c364:	68d2      	ldr	r2, [r2, #12]
 801c366:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801c368:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801c36a:	687b      	ldr	r3, [r7, #4]
 801c36c:	691b      	ldr	r3, [r3, #16]
 801c36e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801c370:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	695b      	ldr	r3, [r3, #20]
 801c376:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801c378:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	699b      	ldr	r3, [r3, #24]
 801c37e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801c380:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	69db      	ldr	r3, [r3, #28]
 801c386:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801c388:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	6a1b      	ldr	r3, [r3, #32]
 801c38e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801c390:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801c392:	697a      	ldr	r2, [r7, #20]
 801c394:	4313      	orrs	r3, r2
 801c396:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	681b      	ldr	r3, [r3, #0]
 801c39c:	697a      	ldr	r2, [r7, #20]
 801c39e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	681b      	ldr	r3, [r3, #0]
 801c3a4:	461a      	mov	r2, r3
 801c3a6:	4b6e      	ldr	r3, [pc, #440]	@ (801c560 <HAL_DMA_Init+0x650>)
 801c3a8:	4413      	add	r3, r2
 801c3aa:	4a6e      	ldr	r2, [pc, #440]	@ (801c564 <HAL_DMA_Init+0x654>)
 801c3ac:	fba2 2303 	umull	r2, r3, r2, r3
 801c3b0:	091b      	lsrs	r3, r3, #4
 801c3b2:	009a      	lsls	r2, r3, #2
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801c3b8:	6878      	ldr	r0, [r7, #4]
 801c3ba:	f001 fa99 	bl	801d8f0 <DMA_CalcBaseAndBitshift>
 801c3be:	4603      	mov	r3, r0
 801c3c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c3c6:	f003 031f 	and.w	r3, r3, #31
 801c3ca:	2201      	movs	r2, #1
 801c3cc:	409a      	lsls	r2, r3
 801c3ce:	68fb      	ldr	r3, [r7, #12]
 801c3d0:	605a      	str	r2, [r3, #4]
 801c3d2:	e008      	b.n	801c3e6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	2240      	movs	r2, #64	@ 0x40
 801c3d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	2203      	movs	r2, #3
 801c3de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 801c3e2:	2301      	movs	r3, #1
 801c3e4:	e0b7      	b.n	801c556 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	4a5f      	ldr	r2, [pc, #380]	@ (801c568 <HAL_DMA_Init+0x658>)
 801c3ec:	4293      	cmp	r3, r2
 801c3ee:	d072      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	681b      	ldr	r3, [r3, #0]
 801c3f4:	4a5d      	ldr	r2, [pc, #372]	@ (801c56c <HAL_DMA_Init+0x65c>)
 801c3f6:	4293      	cmp	r3, r2
 801c3f8:	d06d      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c3fa:	687b      	ldr	r3, [r7, #4]
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	4a5c      	ldr	r2, [pc, #368]	@ (801c570 <HAL_DMA_Init+0x660>)
 801c400:	4293      	cmp	r3, r2
 801c402:	d068      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	4a5a      	ldr	r2, [pc, #360]	@ (801c574 <HAL_DMA_Init+0x664>)
 801c40a:	4293      	cmp	r3, r2
 801c40c:	d063      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	681b      	ldr	r3, [r3, #0]
 801c412:	4a59      	ldr	r2, [pc, #356]	@ (801c578 <HAL_DMA_Init+0x668>)
 801c414:	4293      	cmp	r3, r2
 801c416:	d05e      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	4a57      	ldr	r2, [pc, #348]	@ (801c57c <HAL_DMA_Init+0x66c>)
 801c41e:	4293      	cmp	r3, r2
 801c420:	d059      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	4a56      	ldr	r2, [pc, #344]	@ (801c580 <HAL_DMA_Init+0x670>)
 801c428:	4293      	cmp	r3, r2
 801c42a:	d054      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	4a54      	ldr	r2, [pc, #336]	@ (801c584 <HAL_DMA_Init+0x674>)
 801c432:	4293      	cmp	r3, r2
 801c434:	d04f      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	4a53      	ldr	r2, [pc, #332]	@ (801c588 <HAL_DMA_Init+0x678>)
 801c43c:	4293      	cmp	r3, r2
 801c43e:	d04a      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	4a51      	ldr	r2, [pc, #324]	@ (801c58c <HAL_DMA_Init+0x67c>)
 801c446:	4293      	cmp	r3, r2
 801c448:	d045      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	681b      	ldr	r3, [r3, #0]
 801c44e:	4a50      	ldr	r2, [pc, #320]	@ (801c590 <HAL_DMA_Init+0x680>)
 801c450:	4293      	cmp	r3, r2
 801c452:	d040      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	4a4e      	ldr	r2, [pc, #312]	@ (801c594 <HAL_DMA_Init+0x684>)
 801c45a:	4293      	cmp	r3, r2
 801c45c:	d03b      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c45e:	687b      	ldr	r3, [r7, #4]
 801c460:	681b      	ldr	r3, [r3, #0]
 801c462:	4a4d      	ldr	r2, [pc, #308]	@ (801c598 <HAL_DMA_Init+0x688>)
 801c464:	4293      	cmp	r3, r2
 801c466:	d036      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	4a4b      	ldr	r2, [pc, #300]	@ (801c59c <HAL_DMA_Init+0x68c>)
 801c46e:	4293      	cmp	r3, r2
 801c470:	d031      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	4a4a      	ldr	r2, [pc, #296]	@ (801c5a0 <HAL_DMA_Init+0x690>)
 801c478:	4293      	cmp	r3, r2
 801c47a:	d02c      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	4a48      	ldr	r2, [pc, #288]	@ (801c5a4 <HAL_DMA_Init+0x694>)
 801c482:	4293      	cmp	r3, r2
 801c484:	d027      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	4a47      	ldr	r2, [pc, #284]	@ (801c5a8 <HAL_DMA_Init+0x698>)
 801c48c:	4293      	cmp	r3, r2
 801c48e:	d022      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	4a45      	ldr	r2, [pc, #276]	@ (801c5ac <HAL_DMA_Init+0x69c>)
 801c496:	4293      	cmp	r3, r2
 801c498:	d01d      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	681b      	ldr	r3, [r3, #0]
 801c49e:	4a44      	ldr	r2, [pc, #272]	@ (801c5b0 <HAL_DMA_Init+0x6a0>)
 801c4a0:	4293      	cmp	r3, r2
 801c4a2:	d018      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	681b      	ldr	r3, [r3, #0]
 801c4a8:	4a42      	ldr	r2, [pc, #264]	@ (801c5b4 <HAL_DMA_Init+0x6a4>)
 801c4aa:	4293      	cmp	r3, r2
 801c4ac:	d013      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	681b      	ldr	r3, [r3, #0]
 801c4b2:	4a41      	ldr	r2, [pc, #260]	@ (801c5b8 <HAL_DMA_Init+0x6a8>)
 801c4b4:	4293      	cmp	r3, r2
 801c4b6:	d00e      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	4a3f      	ldr	r2, [pc, #252]	@ (801c5bc <HAL_DMA_Init+0x6ac>)
 801c4be:	4293      	cmp	r3, r2
 801c4c0:	d009      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	4a3e      	ldr	r2, [pc, #248]	@ (801c5c0 <HAL_DMA_Init+0x6b0>)
 801c4c8:	4293      	cmp	r3, r2
 801c4ca:	d004      	beq.n	801c4d6 <HAL_DMA_Init+0x5c6>
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	4a3c      	ldr	r2, [pc, #240]	@ (801c5c4 <HAL_DMA_Init+0x6b4>)
 801c4d2:	4293      	cmp	r3, r2
 801c4d4:	d101      	bne.n	801c4da <HAL_DMA_Init+0x5ca>
 801c4d6:	2301      	movs	r3, #1
 801c4d8:	e000      	b.n	801c4dc <HAL_DMA_Init+0x5cc>
 801c4da:	2300      	movs	r3, #0
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d032      	beq.n	801c546 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801c4e0:	6878      	ldr	r0, [r7, #4]
 801c4e2:	f001 fb33 	bl	801db4c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	689b      	ldr	r3, [r3, #8]
 801c4ea:	2b80      	cmp	r3, #128	@ 0x80
 801c4ec:	d102      	bne.n	801c4f4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	2200      	movs	r2, #0
 801c4f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	685a      	ldr	r2, [r3, #4]
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c4fc:	b2d2      	uxtb	r2, r2
 801c4fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801c504:	687a      	ldr	r2, [r7, #4]
 801c506:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801c508:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	685b      	ldr	r3, [r3, #4]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d010      	beq.n	801c534 <HAL_DMA_Init+0x624>
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	685b      	ldr	r3, [r3, #4]
 801c516:	2b08      	cmp	r3, #8
 801c518:	d80c      	bhi.n	801c534 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801c51a:	6878      	ldr	r0, [r7, #4]
 801c51c:	f001 fbb0 	bl	801dc80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c524:	2200      	movs	r2, #0
 801c526:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c52c:	687a      	ldr	r2, [r7, #4]
 801c52e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801c530:	605a      	str	r2, [r3, #4]
 801c532:	e008      	b.n	801c546 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	2200      	movs	r2, #0
 801c538:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	2200      	movs	r2, #0
 801c53e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	2200      	movs	r2, #0
 801c544:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	2200      	movs	r2, #0
 801c54a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	2201      	movs	r2, #1
 801c550:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801c554:	2300      	movs	r3, #0
}
 801c556:	4618      	mov	r0, r3
 801c558:	3718      	adds	r7, #24
 801c55a:	46bd      	mov	sp, r7
 801c55c:	bd80      	pop	{r7, pc}
 801c55e:	bf00      	nop
 801c560:	a7fdabf8 	.word	0xa7fdabf8
 801c564:	cccccccd 	.word	0xcccccccd
 801c568:	40020010 	.word	0x40020010
 801c56c:	40020028 	.word	0x40020028
 801c570:	40020040 	.word	0x40020040
 801c574:	40020058 	.word	0x40020058
 801c578:	40020070 	.word	0x40020070
 801c57c:	40020088 	.word	0x40020088
 801c580:	400200a0 	.word	0x400200a0
 801c584:	400200b8 	.word	0x400200b8
 801c588:	40020410 	.word	0x40020410
 801c58c:	40020428 	.word	0x40020428
 801c590:	40020440 	.word	0x40020440
 801c594:	40020458 	.word	0x40020458
 801c598:	40020470 	.word	0x40020470
 801c59c:	40020488 	.word	0x40020488
 801c5a0:	400204a0 	.word	0x400204a0
 801c5a4:	400204b8 	.word	0x400204b8
 801c5a8:	58025408 	.word	0x58025408
 801c5ac:	5802541c 	.word	0x5802541c
 801c5b0:	58025430 	.word	0x58025430
 801c5b4:	58025444 	.word	0x58025444
 801c5b8:	58025458 	.word	0x58025458
 801c5bc:	5802546c 	.word	0x5802546c
 801c5c0:	58025480 	.word	0x58025480
 801c5c4:	58025494 	.word	0x58025494

0801c5c8 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801c5c8:	b580      	push	{r7, lr}
 801c5ca:	b086      	sub	sp, #24
 801c5cc:	af00      	add	r7, sp, #0
 801c5ce:	60f8      	str	r0, [r7, #12]
 801c5d0:	60b9      	str	r1, [r7, #8]
 801c5d2:	607a      	str	r2, [r7, #4]
 801c5d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801c5d6:	2300      	movs	r3, #0
 801c5d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801c5da:	68fb      	ldr	r3, [r7, #12]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d101      	bne.n	801c5e4 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 801c5e0:	2301      	movs	r3, #1
 801c5e2:	e0ec      	b.n	801c7be <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801c5ea:	2b01      	cmp	r3, #1
 801c5ec:	d101      	bne.n	801c5f2 <HAL_DMA_Start+0x2a>
 801c5ee:	2302      	movs	r3, #2
 801c5f0:	e0e5      	b.n	801c7be <HAL_DMA_Start+0x1f6>
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	2201      	movs	r2, #1
 801c5f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801c600:	b2db      	uxtb	r3, r3
 801c602:	2b01      	cmp	r3, #1
 801c604:	f040 80d0 	bne.w	801c7a8 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	2202      	movs	r2, #2
 801c60c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c610:	68fb      	ldr	r3, [r7, #12]
 801c612:	2200      	movs	r2, #0
 801c614:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801c616:	68fb      	ldr	r3, [r7, #12]
 801c618:	681b      	ldr	r3, [r3, #0]
 801c61a:	4a6b      	ldr	r2, [pc, #428]	@ (801c7c8 <HAL_DMA_Start+0x200>)
 801c61c:	4293      	cmp	r3, r2
 801c61e:	d04a      	beq.n	801c6b6 <HAL_DMA_Start+0xee>
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	4a69      	ldr	r2, [pc, #420]	@ (801c7cc <HAL_DMA_Start+0x204>)
 801c626:	4293      	cmp	r3, r2
 801c628:	d045      	beq.n	801c6b6 <HAL_DMA_Start+0xee>
 801c62a:	68fb      	ldr	r3, [r7, #12]
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	4a68      	ldr	r2, [pc, #416]	@ (801c7d0 <HAL_DMA_Start+0x208>)
 801c630:	4293      	cmp	r3, r2
 801c632:	d040      	beq.n	801c6b6 <HAL_DMA_Start+0xee>
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	4a66      	ldr	r2, [pc, #408]	@ (801c7d4 <HAL_DMA_Start+0x20c>)
 801c63a:	4293      	cmp	r3, r2
 801c63c:	d03b      	beq.n	801c6b6 <HAL_DMA_Start+0xee>
 801c63e:	68fb      	ldr	r3, [r7, #12]
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	4a65      	ldr	r2, [pc, #404]	@ (801c7d8 <HAL_DMA_Start+0x210>)
 801c644:	4293      	cmp	r3, r2
 801c646:	d036      	beq.n	801c6b6 <HAL_DMA_Start+0xee>
 801c648:	68fb      	ldr	r3, [r7, #12]
 801c64a:	681b      	ldr	r3, [r3, #0]
 801c64c:	4a63      	ldr	r2, [pc, #396]	@ (801c7dc <HAL_DMA_Start+0x214>)
 801c64e:	4293      	cmp	r3, r2
 801c650:	d031      	beq.n	801c6b6 <HAL_DMA_Start+0xee>
 801c652:	68fb      	ldr	r3, [r7, #12]
 801c654:	681b      	ldr	r3, [r3, #0]
 801c656:	4a62      	ldr	r2, [pc, #392]	@ (801c7e0 <HAL_DMA_Start+0x218>)
 801c658:	4293      	cmp	r3, r2
 801c65a:	d02c      	beq.n	801c6b6 <HAL_DMA_Start+0xee>
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	681b      	ldr	r3, [r3, #0]
 801c660:	4a60      	ldr	r2, [pc, #384]	@ (801c7e4 <HAL_DMA_Start+0x21c>)
 801c662:	4293      	cmp	r3, r2
 801c664:	d027      	beq.n	801c6b6 <HAL_DMA_Start+0xee>
 801c666:	68fb      	ldr	r3, [r7, #12]
 801c668:	681b      	ldr	r3, [r3, #0]
 801c66a:	4a5f      	ldr	r2, [pc, #380]	@ (801c7e8 <HAL_DMA_Start+0x220>)
 801c66c:	4293      	cmp	r3, r2
 801c66e:	d022      	beq.n	801c6b6 <HAL_DMA_Start+0xee>
 801c670:	68fb      	ldr	r3, [r7, #12]
 801c672:	681b      	ldr	r3, [r3, #0]
 801c674:	4a5d      	ldr	r2, [pc, #372]	@ (801c7ec <HAL_DMA_Start+0x224>)
 801c676:	4293      	cmp	r3, r2
 801c678:	d01d      	beq.n	801c6b6 <HAL_DMA_Start+0xee>
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	4a5c      	ldr	r2, [pc, #368]	@ (801c7f0 <HAL_DMA_Start+0x228>)
 801c680:	4293      	cmp	r3, r2
 801c682:	d018      	beq.n	801c6b6 <HAL_DMA_Start+0xee>
 801c684:	68fb      	ldr	r3, [r7, #12]
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	4a5a      	ldr	r2, [pc, #360]	@ (801c7f4 <HAL_DMA_Start+0x22c>)
 801c68a:	4293      	cmp	r3, r2
 801c68c:	d013      	beq.n	801c6b6 <HAL_DMA_Start+0xee>
 801c68e:	68fb      	ldr	r3, [r7, #12]
 801c690:	681b      	ldr	r3, [r3, #0]
 801c692:	4a59      	ldr	r2, [pc, #356]	@ (801c7f8 <HAL_DMA_Start+0x230>)
 801c694:	4293      	cmp	r3, r2
 801c696:	d00e      	beq.n	801c6b6 <HAL_DMA_Start+0xee>
 801c698:	68fb      	ldr	r3, [r7, #12]
 801c69a:	681b      	ldr	r3, [r3, #0]
 801c69c:	4a57      	ldr	r2, [pc, #348]	@ (801c7fc <HAL_DMA_Start+0x234>)
 801c69e:	4293      	cmp	r3, r2
 801c6a0:	d009      	beq.n	801c6b6 <HAL_DMA_Start+0xee>
 801c6a2:	68fb      	ldr	r3, [r7, #12]
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	4a56      	ldr	r2, [pc, #344]	@ (801c800 <HAL_DMA_Start+0x238>)
 801c6a8:	4293      	cmp	r3, r2
 801c6aa:	d004      	beq.n	801c6b6 <HAL_DMA_Start+0xee>
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	681b      	ldr	r3, [r3, #0]
 801c6b0:	4a54      	ldr	r2, [pc, #336]	@ (801c804 <HAL_DMA_Start+0x23c>)
 801c6b2:	4293      	cmp	r3, r2
 801c6b4:	d108      	bne.n	801c6c8 <HAL_DMA_Start+0x100>
 801c6b6:	68fb      	ldr	r3, [r7, #12]
 801c6b8:	681b      	ldr	r3, [r3, #0]
 801c6ba:	681a      	ldr	r2, [r3, #0]
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	681b      	ldr	r3, [r3, #0]
 801c6c0:	f022 0201 	bic.w	r2, r2, #1
 801c6c4:	601a      	str	r2, [r3, #0]
 801c6c6:	e007      	b.n	801c6d8 <HAL_DMA_Start+0x110>
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	681b      	ldr	r3, [r3, #0]
 801c6cc:	681a      	ldr	r2, [r3, #0]
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	f022 0201 	bic.w	r2, r2, #1
 801c6d6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801c6d8:	683b      	ldr	r3, [r7, #0]
 801c6da:	687a      	ldr	r2, [r7, #4]
 801c6dc:	68b9      	ldr	r1, [r7, #8]
 801c6de:	68f8      	ldr	r0, [r7, #12]
 801c6e0:	f000 ff5a 	bl	801d598 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801c6e4:	68fb      	ldr	r3, [r7, #12]
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	4a37      	ldr	r2, [pc, #220]	@ (801c7c8 <HAL_DMA_Start+0x200>)
 801c6ea:	4293      	cmp	r3, r2
 801c6ec:	d04a      	beq.n	801c784 <HAL_DMA_Start+0x1bc>
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	681b      	ldr	r3, [r3, #0]
 801c6f2:	4a36      	ldr	r2, [pc, #216]	@ (801c7cc <HAL_DMA_Start+0x204>)
 801c6f4:	4293      	cmp	r3, r2
 801c6f6:	d045      	beq.n	801c784 <HAL_DMA_Start+0x1bc>
 801c6f8:	68fb      	ldr	r3, [r7, #12]
 801c6fa:	681b      	ldr	r3, [r3, #0]
 801c6fc:	4a34      	ldr	r2, [pc, #208]	@ (801c7d0 <HAL_DMA_Start+0x208>)
 801c6fe:	4293      	cmp	r3, r2
 801c700:	d040      	beq.n	801c784 <HAL_DMA_Start+0x1bc>
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	4a33      	ldr	r2, [pc, #204]	@ (801c7d4 <HAL_DMA_Start+0x20c>)
 801c708:	4293      	cmp	r3, r2
 801c70a:	d03b      	beq.n	801c784 <HAL_DMA_Start+0x1bc>
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	681b      	ldr	r3, [r3, #0]
 801c710:	4a31      	ldr	r2, [pc, #196]	@ (801c7d8 <HAL_DMA_Start+0x210>)
 801c712:	4293      	cmp	r3, r2
 801c714:	d036      	beq.n	801c784 <HAL_DMA_Start+0x1bc>
 801c716:	68fb      	ldr	r3, [r7, #12]
 801c718:	681b      	ldr	r3, [r3, #0]
 801c71a:	4a30      	ldr	r2, [pc, #192]	@ (801c7dc <HAL_DMA_Start+0x214>)
 801c71c:	4293      	cmp	r3, r2
 801c71e:	d031      	beq.n	801c784 <HAL_DMA_Start+0x1bc>
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	681b      	ldr	r3, [r3, #0]
 801c724:	4a2e      	ldr	r2, [pc, #184]	@ (801c7e0 <HAL_DMA_Start+0x218>)
 801c726:	4293      	cmp	r3, r2
 801c728:	d02c      	beq.n	801c784 <HAL_DMA_Start+0x1bc>
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	4a2d      	ldr	r2, [pc, #180]	@ (801c7e4 <HAL_DMA_Start+0x21c>)
 801c730:	4293      	cmp	r3, r2
 801c732:	d027      	beq.n	801c784 <HAL_DMA_Start+0x1bc>
 801c734:	68fb      	ldr	r3, [r7, #12]
 801c736:	681b      	ldr	r3, [r3, #0]
 801c738:	4a2b      	ldr	r2, [pc, #172]	@ (801c7e8 <HAL_DMA_Start+0x220>)
 801c73a:	4293      	cmp	r3, r2
 801c73c:	d022      	beq.n	801c784 <HAL_DMA_Start+0x1bc>
 801c73e:	68fb      	ldr	r3, [r7, #12]
 801c740:	681b      	ldr	r3, [r3, #0]
 801c742:	4a2a      	ldr	r2, [pc, #168]	@ (801c7ec <HAL_DMA_Start+0x224>)
 801c744:	4293      	cmp	r3, r2
 801c746:	d01d      	beq.n	801c784 <HAL_DMA_Start+0x1bc>
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	681b      	ldr	r3, [r3, #0]
 801c74c:	4a28      	ldr	r2, [pc, #160]	@ (801c7f0 <HAL_DMA_Start+0x228>)
 801c74e:	4293      	cmp	r3, r2
 801c750:	d018      	beq.n	801c784 <HAL_DMA_Start+0x1bc>
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	4a27      	ldr	r2, [pc, #156]	@ (801c7f4 <HAL_DMA_Start+0x22c>)
 801c758:	4293      	cmp	r3, r2
 801c75a:	d013      	beq.n	801c784 <HAL_DMA_Start+0x1bc>
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	681b      	ldr	r3, [r3, #0]
 801c760:	4a25      	ldr	r2, [pc, #148]	@ (801c7f8 <HAL_DMA_Start+0x230>)
 801c762:	4293      	cmp	r3, r2
 801c764:	d00e      	beq.n	801c784 <HAL_DMA_Start+0x1bc>
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	681b      	ldr	r3, [r3, #0]
 801c76a:	4a24      	ldr	r2, [pc, #144]	@ (801c7fc <HAL_DMA_Start+0x234>)
 801c76c:	4293      	cmp	r3, r2
 801c76e:	d009      	beq.n	801c784 <HAL_DMA_Start+0x1bc>
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	4a22      	ldr	r2, [pc, #136]	@ (801c800 <HAL_DMA_Start+0x238>)
 801c776:	4293      	cmp	r3, r2
 801c778:	d004      	beq.n	801c784 <HAL_DMA_Start+0x1bc>
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	681b      	ldr	r3, [r3, #0]
 801c77e:	4a21      	ldr	r2, [pc, #132]	@ (801c804 <HAL_DMA_Start+0x23c>)
 801c780:	4293      	cmp	r3, r2
 801c782:	d108      	bne.n	801c796 <HAL_DMA_Start+0x1ce>
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	681b      	ldr	r3, [r3, #0]
 801c788:	681a      	ldr	r2, [r3, #0]
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	681b      	ldr	r3, [r3, #0]
 801c78e:	f042 0201 	orr.w	r2, r2, #1
 801c792:	601a      	str	r2, [r3, #0]
 801c794:	e012      	b.n	801c7bc <HAL_DMA_Start+0x1f4>
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	681a      	ldr	r2, [r3, #0]
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	f042 0201 	orr.w	r2, r2, #1
 801c7a4:	601a      	str	r2, [r3, #0]
 801c7a6:	e009      	b.n	801c7bc <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801c7a8:	68fb      	ldr	r3, [r7, #12]
 801c7aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c7ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	2200      	movs	r2, #0
 801c7b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 801c7b8:	2301      	movs	r3, #1
 801c7ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801c7bc:	7dfb      	ldrb	r3, [r7, #23]
}
 801c7be:	4618      	mov	r0, r3
 801c7c0:	3718      	adds	r7, #24
 801c7c2:	46bd      	mov	sp, r7
 801c7c4:	bd80      	pop	{r7, pc}
 801c7c6:	bf00      	nop
 801c7c8:	40020010 	.word	0x40020010
 801c7cc:	40020028 	.word	0x40020028
 801c7d0:	40020040 	.word	0x40020040
 801c7d4:	40020058 	.word	0x40020058
 801c7d8:	40020070 	.word	0x40020070
 801c7dc:	40020088 	.word	0x40020088
 801c7e0:	400200a0 	.word	0x400200a0
 801c7e4:	400200b8 	.word	0x400200b8
 801c7e8:	40020410 	.word	0x40020410
 801c7ec:	40020428 	.word	0x40020428
 801c7f0:	40020440 	.word	0x40020440
 801c7f4:	40020458 	.word	0x40020458
 801c7f8:	40020470 	.word	0x40020470
 801c7fc:	40020488 	.word	0x40020488
 801c800:	400204a0 	.word	0x400204a0
 801c804:	400204b8 	.word	0x400204b8

0801c808 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801c808:	b580      	push	{r7, lr}
 801c80a:	b086      	sub	sp, #24
 801c80c:	af00      	add	r7, sp, #0
 801c80e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 801c810:	f7ff f9a0 	bl	801bb54 <HAL_GetTick>
 801c814:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	2b00      	cmp	r3, #0
 801c81a:	d101      	bne.n	801c820 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 801c81c:	2301      	movs	r3, #1
 801c81e:	e2dc      	b.n	801cdda <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801c826:	b2db      	uxtb	r3, r3
 801c828:	2b02      	cmp	r3, #2
 801c82a:	d008      	beq.n	801c83e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	2280      	movs	r2, #128	@ 0x80
 801c830:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	2200      	movs	r2, #0
 801c836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 801c83a:	2301      	movs	r3, #1
 801c83c:	e2cd      	b.n	801cdda <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	4a76      	ldr	r2, [pc, #472]	@ (801ca1c <HAL_DMA_Abort+0x214>)
 801c844:	4293      	cmp	r3, r2
 801c846:	d04a      	beq.n	801c8de <HAL_DMA_Abort+0xd6>
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	4a74      	ldr	r2, [pc, #464]	@ (801ca20 <HAL_DMA_Abort+0x218>)
 801c84e:	4293      	cmp	r3, r2
 801c850:	d045      	beq.n	801c8de <HAL_DMA_Abort+0xd6>
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	681b      	ldr	r3, [r3, #0]
 801c856:	4a73      	ldr	r2, [pc, #460]	@ (801ca24 <HAL_DMA_Abort+0x21c>)
 801c858:	4293      	cmp	r3, r2
 801c85a:	d040      	beq.n	801c8de <HAL_DMA_Abort+0xd6>
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	681b      	ldr	r3, [r3, #0]
 801c860:	4a71      	ldr	r2, [pc, #452]	@ (801ca28 <HAL_DMA_Abort+0x220>)
 801c862:	4293      	cmp	r3, r2
 801c864:	d03b      	beq.n	801c8de <HAL_DMA_Abort+0xd6>
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	681b      	ldr	r3, [r3, #0]
 801c86a:	4a70      	ldr	r2, [pc, #448]	@ (801ca2c <HAL_DMA_Abort+0x224>)
 801c86c:	4293      	cmp	r3, r2
 801c86e:	d036      	beq.n	801c8de <HAL_DMA_Abort+0xd6>
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	681b      	ldr	r3, [r3, #0]
 801c874:	4a6e      	ldr	r2, [pc, #440]	@ (801ca30 <HAL_DMA_Abort+0x228>)
 801c876:	4293      	cmp	r3, r2
 801c878:	d031      	beq.n	801c8de <HAL_DMA_Abort+0xd6>
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	681b      	ldr	r3, [r3, #0]
 801c87e:	4a6d      	ldr	r2, [pc, #436]	@ (801ca34 <HAL_DMA_Abort+0x22c>)
 801c880:	4293      	cmp	r3, r2
 801c882:	d02c      	beq.n	801c8de <HAL_DMA_Abort+0xd6>
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	681b      	ldr	r3, [r3, #0]
 801c888:	4a6b      	ldr	r2, [pc, #428]	@ (801ca38 <HAL_DMA_Abort+0x230>)
 801c88a:	4293      	cmp	r3, r2
 801c88c:	d027      	beq.n	801c8de <HAL_DMA_Abort+0xd6>
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	681b      	ldr	r3, [r3, #0]
 801c892:	4a6a      	ldr	r2, [pc, #424]	@ (801ca3c <HAL_DMA_Abort+0x234>)
 801c894:	4293      	cmp	r3, r2
 801c896:	d022      	beq.n	801c8de <HAL_DMA_Abort+0xd6>
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	4a68      	ldr	r2, [pc, #416]	@ (801ca40 <HAL_DMA_Abort+0x238>)
 801c89e:	4293      	cmp	r3, r2
 801c8a0:	d01d      	beq.n	801c8de <HAL_DMA_Abort+0xd6>
 801c8a2:	687b      	ldr	r3, [r7, #4]
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	4a67      	ldr	r2, [pc, #412]	@ (801ca44 <HAL_DMA_Abort+0x23c>)
 801c8a8:	4293      	cmp	r3, r2
 801c8aa:	d018      	beq.n	801c8de <HAL_DMA_Abort+0xd6>
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	4a65      	ldr	r2, [pc, #404]	@ (801ca48 <HAL_DMA_Abort+0x240>)
 801c8b2:	4293      	cmp	r3, r2
 801c8b4:	d013      	beq.n	801c8de <HAL_DMA_Abort+0xd6>
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	4a64      	ldr	r2, [pc, #400]	@ (801ca4c <HAL_DMA_Abort+0x244>)
 801c8bc:	4293      	cmp	r3, r2
 801c8be:	d00e      	beq.n	801c8de <HAL_DMA_Abort+0xd6>
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	681b      	ldr	r3, [r3, #0]
 801c8c4:	4a62      	ldr	r2, [pc, #392]	@ (801ca50 <HAL_DMA_Abort+0x248>)
 801c8c6:	4293      	cmp	r3, r2
 801c8c8:	d009      	beq.n	801c8de <HAL_DMA_Abort+0xd6>
 801c8ca:	687b      	ldr	r3, [r7, #4]
 801c8cc:	681b      	ldr	r3, [r3, #0]
 801c8ce:	4a61      	ldr	r2, [pc, #388]	@ (801ca54 <HAL_DMA_Abort+0x24c>)
 801c8d0:	4293      	cmp	r3, r2
 801c8d2:	d004      	beq.n	801c8de <HAL_DMA_Abort+0xd6>
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	4a5f      	ldr	r2, [pc, #380]	@ (801ca58 <HAL_DMA_Abort+0x250>)
 801c8da:	4293      	cmp	r3, r2
 801c8dc:	d101      	bne.n	801c8e2 <HAL_DMA_Abort+0xda>
 801c8de:	2301      	movs	r3, #1
 801c8e0:	e000      	b.n	801c8e4 <HAL_DMA_Abort+0xdc>
 801c8e2:	2300      	movs	r3, #0
 801c8e4:	2b00      	cmp	r3, #0
 801c8e6:	d013      	beq.n	801c910 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	681a      	ldr	r2, [r3, #0]
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	f022 021e 	bic.w	r2, r2, #30
 801c8f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	681b      	ldr	r3, [r3, #0]
 801c8fc:	695a      	ldr	r2, [r3, #20]
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	681b      	ldr	r3, [r3, #0]
 801c902:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801c906:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	617b      	str	r3, [r7, #20]
 801c90e:	e00a      	b.n	801c926 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	681a      	ldr	r2, [r3, #0]
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	681b      	ldr	r3, [r3, #0]
 801c91a:	f022 020e 	bic.w	r2, r2, #14
 801c91e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	681b      	ldr	r3, [r3, #0]
 801c924:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	681b      	ldr	r3, [r3, #0]
 801c92a:	4a3c      	ldr	r2, [pc, #240]	@ (801ca1c <HAL_DMA_Abort+0x214>)
 801c92c:	4293      	cmp	r3, r2
 801c92e:	d072      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	681b      	ldr	r3, [r3, #0]
 801c934:	4a3a      	ldr	r2, [pc, #232]	@ (801ca20 <HAL_DMA_Abort+0x218>)
 801c936:	4293      	cmp	r3, r2
 801c938:	d06d      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	681b      	ldr	r3, [r3, #0]
 801c93e:	4a39      	ldr	r2, [pc, #228]	@ (801ca24 <HAL_DMA_Abort+0x21c>)
 801c940:	4293      	cmp	r3, r2
 801c942:	d068      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	681b      	ldr	r3, [r3, #0]
 801c948:	4a37      	ldr	r2, [pc, #220]	@ (801ca28 <HAL_DMA_Abort+0x220>)
 801c94a:	4293      	cmp	r3, r2
 801c94c:	d063      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	681b      	ldr	r3, [r3, #0]
 801c952:	4a36      	ldr	r2, [pc, #216]	@ (801ca2c <HAL_DMA_Abort+0x224>)
 801c954:	4293      	cmp	r3, r2
 801c956:	d05e      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	681b      	ldr	r3, [r3, #0]
 801c95c:	4a34      	ldr	r2, [pc, #208]	@ (801ca30 <HAL_DMA_Abort+0x228>)
 801c95e:	4293      	cmp	r3, r2
 801c960:	d059      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	4a33      	ldr	r2, [pc, #204]	@ (801ca34 <HAL_DMA_Abort+0x22c>)
 801c968:	4293      	cmp	r3, r2
 801c96a:	d054      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	681b      	ldr	r3, [r3, #0]
 801c970:	4a31      	ldr	r2, [pc, #196]	@ (801ca38 <HAL_DMA_Abort+0x230>)
 801c972:	4293      	cmp	r3, r2
 801c974:	d04f      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	681b      	ldr	r3, [r3, #0]
 801c97a:	4a30      	ldr	r2, [pc, #192]	@ (801ca3c <HAL_DMA_Abort+0x234>)
 801c97c:	4293      	cmp	r3, r2
 801c97e:	d04a      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	681b      	ldr	r3, [r3, #0]
 801c984:	4a2e      	ldr	r2, [pc, #184]	@ (801ca40 <HAL_DMA_Abort+0x238>)
 801c986:	4293      	cmp	r3, r2
 801c988:	d045      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	681b      	ldr	r3, [r3, #0]
 801c98e:	4a2d      	ldr	r2, [pc, #180]	@ (801ca44 <HAL_DMA_Abort+0x23c>)
 801c990:	4293      	cmp	r3, r2
 801c992:	d040      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c994:	687b      	ldr	r3, [r7, #4]
 801c996:	681b      	ldr	r3, [r3, #0]
 801c998:	4a2b      	ldr	r2, [pc, #172]	@ (801ca48 <HAL_DMA_Abort+0x240>)
 801c99a:	4293      	cmp	r3, r2
 801c99c:	d03b      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c99e:	687b      	ldr	r3, [r7, #4]
 801c9a0:	681b      	ldr	r3, [r3, #0]
 801c9a2:	4a2a      	ldr	r2, [pc, #168]	@ (801ca4c <HAL_DMA_Abort+0x244>)
 801c9a4:	4293      	cmp	r3, r2
 801c9a6:	d036      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	681b      	ldr	r3, [r3, #0]
 801c9ac:	4a28      	ldr	r2, [pc, #160]	@ (801ca50 <HAL_DMA_Abort+0x248>)
 801c9ae:	4293      	cmp	r3, r2
 801c9b0:	d031      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	681b      	ldr	r3, [r3, #0]
 801c9b6:	4a27      	ldr	r2, [pc, #156]	@ (801ca54 <HAL_DMA_Abort+0x24c>)
 801c9b8:	4293      	cmp	r3, r2
 801c9ba:	d02c      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	681b      	ldr	r3, [r3, #0]
 801c9c0:	4a25      	ldr	r2, [pc, #148]	@ (801ca58 <HAL_DMA_Abort+0x250>)
 801c9c2:	4293      	cmp	r3, r2
 801c9c4:	d027      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	681b      	ldr	r3, [r3, #0]
 801c9ca:	4a24      	ldr	r2, [pc, #144]	@ (801ca5c <HAL_DMA_Abort+0x254>)
 801c9cc:	4293      	cmp	r3, r2
 801c9ce:	d022      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	681b      	ldr	r3, [r3, #0]
 801c9d4:	4a22      	ldr	r2, [pc, #136]	@ (801ca60 <HAL_DMA_Abort+0x258>)
 801c9d6:	4293      	cmp	r3, r2
 801c9d8:	d01d      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	4a21      	ldr	r2, [pc, #132]	@ (801ca64 <HAL_DMA_Abort+0x25c>)
 801c9e0:	4293      	cmp	r3, r2
 801c9e2:	d018      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	4a1f      	ldr	r2, [pc, #124]	@ (801ca68 <HAL_DMA_Abort+0x260>)
 801c9ea:	4293      	cmp	r3, r2
 801c9ec:	d013      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	681b      	ldr	r3, [r3, #0]
 801c9f2:	4a1e      	ldr	r2, [pc, #120]	@ (801ca6c <HAL_DMA_Abort+0x264>)
 801c9f4:	4293      	cmp	r3, r2
 801c9f6:	d00e      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	4a1c      	ldr	r2, [pc, #112]	@ (801ca70 <HAL_DMA_Abort+0x268>)
 801c9fe:	4293      	cmp	r3, r2
 801ca00:	d009      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801ca02:	687b      	ldr	r3, [r7, #4]
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	4a1b      	ldr	r2, [pc, #108]	@ (801ca74 <HAL_DMA_Abort+0x26c>)
 801ca08:	4293      	cmp	r3, r2
 801ca0a:	d004      	beq.n	801ca16 <HAL_DMA_Abort+0x20e>
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	4a19      	ldr	r2, [pc, #100]	@ (801ca78 <HAL_DMA_Abort+0x270>)
 801ca12:	4293      	cmp	r3, r2
 801ca14:	d132      	bne.n	801ca7c <HAL_DMA_Abort+0x274>
 801ca16:	2301      	movs	r3, #1
 801ca18:	e031      	b.n	801ca7e <HAL_DMA_Abort+0x276>
 801ca1a:	bf00      	nop
 801ca1c:	40020010 	.word	0x40020010
 801ca20:	40020028 	.word	0x40020028
 801ca24:	40020040 	.word	0x40020040
 801ca28:	40020058 	.word	0x40020058
 801ca2c:	40020070 	.word	0x40020070
 801ca30:	40020088 	.word	0x40020088
 801ca34:	400200a0 	.word	0x400200a0
 801ca38:	400200b8 	.word	0x400200b8
 801ca3c:	40020410 	.word	0x40020410
 801ca40:	40020428 	.word	0x40020428
 801ca44:	40020440 	.word	0x40020440
 801ca48:	40020458 	.word	0x40020458
 801ca4c:	40020470 	.word	0x40020470
 801ca50:	40020488 	.word	0x40020488
 801ca54:	400204a0 	.word	0x400204a0
 801ca58:	400204b8 	.word	0x400204b8
 801ca5c:	58025408 	.word	0x58025408
 801ca60:	5802541c 	.word	0x5802541c
 801ca64:	58025430 	.word	0x58025430
 801ca68:	58025444 	.word	0x58025444
 801ca6c:	58025458 	.word	0x58025458
 801ca70:	5802546c 	.word	0x5802546c
 801ca74:	58025480 	.word	0x58025480
 801ca78:	58025494 	.word	0x58025494
 801ca7c:	2300      	movs	r3, #0
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d007      	beq.n	801ca92 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ca86:	681a      	ldr	r2, [r3, #0]
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ca8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801ca90:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	681b      	ldr	r3, [r3, #0]
 801ca96:	4a6d      	ldr	r2, [pc, #436]	@ (801cc4c <HAL_DMA_Abort+0x444>)
 801ca98:	4293      	cmp	r3, r2
 801ca9a:	d04a      	beq.n	801cb32 <HAL_DMA_Abort+0x32a>
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	4a6b      	ldr	r2, [pc, #428]	@ (801cc50 <HAL_DMA_Abort+0x448>)
 801caa2:	4293      	cmp	r3, r2
 801caa4:	d045      	beq.n	801cb32 <HAL_DMA_Abort+0x32a>
 801caa6:	687b      	ldr	r3, [r7, #4]
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	4a6a      	ldr	r2, [pc, #424]	@ (801cc54 <HAL_DMA_Abort+0x44c>)
 801caac:	4293      	cmp	r3, r2
 801caae:	d040      	beq.n	801cb32 <HAL_DMA_Abort+0x32a>
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	681b      	ldr	r3, [r3, #0]
 801cab4:	4a68      	ldr	r2, [pc, #416]	@ (801cc58 <HAL_DMA_Abort+0x450>)
 801cab6:	4293      	cmp	r3, r2
 801cab8:	d03b      	beq.n	801cb32 <HAL_DMA_Abort+0x32a>
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	4a67      	ldr	r2, [pc, #412]	@ (801cc5c <HAL_DMA_Abort+0x454>)
 801cac0:	4293      	cmp	r3, r2
 801cac2:	d036      	beq.n	801cb32 <HAL_DMA_Abort+0x32a>
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	681b      	ldr	r3, [r3, #0]
 801cac8:	4a65      	ldr	r2, [pc, #404]	@ (801cc60 <HAL_DMA_Abort+0x458>)
 801caca:	4293      	cmp	r3, r2
 801cacc:	d031      	beq.n	801cb32 <HAL_DMA_Abort+0x32a>
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	681b      	ldr	r3, [r3, #0]
 801cad2:	4a64      	ldr	r2, [pc, #400]	@ (801cc64 <HAL_DMA_Abort+0x45c>)
 801cad4:	4293      	cmp	r3, r2
 801cad6:	d02c      	beq.n	801cb32 <HAL_DMA_Abort+0x32a>
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	4a62      	ldr	r2, [pc, #392]	@ (801cc68 <HAL_DMA_Abort+0x460>)
 801cade:	4293      	cmp	r3, r2
 801cae0:	d027      	beq.n	801cb32 <HAL_DMA_Abort+0x32a>
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	681b      	ldr	r3, [r3, #0]
 801cae6:	4a61      	ldr	r2, [pc, #388]	@ (801cc6c <HAL_DMA_Abort+0x464>)
 801cae8:	4293      	cmp	r3, r2
 801caea:	d022      	beq.n	801cb32 <HAL_DMA_Abort+0x32a>
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	4a5f      	ldr	r2, [pc, #380]	@ (801cc70 <HAL_DMA_Abort+0x468>)
 801caf2:	4293      	cmp	r3, r2
 801caf4:	d01d      	beq.n	801cb32 <HAL_DMA_Abort+0x32a>
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	681b      	ldr	r3, [r3, #0]
 801cafa:	4a5e      	ldr	r2, [pc, #376]	@ (801cc74 <HAL_DMA_Abort+0x46c>)
 801cafc:	4293      	cmp	r3, r2
 801cafe:	d018      	beq.n	801cb32 <HAL_DMA_Abort+0x32a>
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	681b      	ldr	r3, [r3, #0]
 801cb04:	4a5c      	ldr	r2, [pc, #368]	@ (801cc78 <HAL_DMA_Abort+0x470>)
 801cb06:	4293      	cmp	r3, r2
 801cb08:	d013      	beq.n	801cb32 <HAL_DMA_Abort+0x32a>
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	681b      	ldr	r3, [r3, #0]
 801cb0e:	4a5b      	ldr	r2, [pc, #364]	@ (801cc7c <HAL_DMA_Abort+0x474>)
 801cb10:	4293      	cmp	r3, r2
 801cb12:	d00e      	beq.n	801cb32 <HAL_DMA_Abort+0x32a>
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	4a59      	ldr	r2, [pc, #356]	@ (801cc80 <HAL_DMA_Abort+0x478>)
 801cb1a:	4293      	cmp	r3, r2
 801cb1c:	d009      	beq.n	801cb32 <HAL_DMA_Abort+0x32a>
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	681b      	ldr	r3, [r3, #0]
 801cb22:	4a58      	ldr	r2, [pc, #352]	@ (801cc84 <HAL_DMA_Abort+0x47c>)
 801cb24:	4293      	cmp	r3, r2
 801cb26:	d004      	beq.n	801cb32 <HAL_DMA_Abort+0x32a>
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	681b      	ldr	r3, [r3, #0]
 801cb2c:	4a56      	ldr	r2, [pc, #344]	@ (801cc88 <HAL_DMA_Abort+0x480>)
 801cb2e:	4293      	cmp	r3, r2
 801cb30:	d108      	bne.n	801cb44 <HAL_DMA_Abort+0x33c>
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	681a      	ldr	r2, [r3, #0]
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	681b      	ldr	r3, [r3, #0]
 801cb3c:	f022 0201 	bic.w	r2, r2, #1
 801cb40:	601a      	str	r2, [r3, #0]
 801cb42:	e007      	b.n	801cb54 <HAL_DMA_Abort+0x34c>
 801cb44:	687b      	ldr	r3, [r7, #4]
 801cb46:	681b      	ldr	r3, [r3, #0]
 801cb48:	681a      	ldr	r2, [r3, #0]
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	681b      	ldr	r3, [r3, #0]
 801cb4e:	f022 0201 	bic.w	r2, r2, #1
 801cb52:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801cb54:	e013      	b.n	801cb7e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801cb56:	f7fe fffd 	bl	801bb54 <HAL_GetTick>
 801cb5a:	4602      	mov	r2, r0
 801cb5c:	693b      	ldr	r3, [r7, #16]
 801cb5e:	1ad3      	subs	r3, r2, r3
 801cb60:	2b05      	cmp	r3, #5
 801cb62:	d90c      	bls.n	801cb7e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	2220      	movs	r2, #32
 801cb68:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	2203      	movs	r2, #3
 801cb6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	2200      	movs	r2, #0
 801cb76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801cb7a:	2301      	movs	r3, #1
 801cb7c:	e12d      	b.n	801cdda <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801cb7e:	697b      	ldr	r3, [r7, #20]
 801cb80:	681b      	ldr	r3, [r3, #0]
 801cb82:	f003 0301 	and.w	r3, r3, #1
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	d1e5      	bne.n	801cb56 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	4a2f      	ldr	r2, [pc, #188]	@ (801cc4c <HAL_DMA_Abort+0x444>)
 801cb90:	4293      	cmp	r3, r2
 801cb92:	d04a      	beq.n	801cc2a <HAL_DMA_Abort+0x422>
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	681b      	ldr	r3, [r3, #0]
 801cb98:	4a2d      	ldr	r2, [pc, #180]	@ (801cc50 <HAL_DMA_Abort+0x448>)
 801cb9a:	4293      	cmp	r3, r2
 801cb9c:	d045      	beq.n	801cc2a <HAL_DMA_Abort+0x422>
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	681b      	ldr	r3, [r3, #0]
 801cba2:	4a2c      	ldr	r2, [pc, #176]	@ (801cc54 <HAL_DMA_Abort+0x44c>)
 801cba4:	4293      	cmp	r3, r2
 801cba6:	d040      	beq.n	801cc2a <HAL_DMA_Abort+0x422>
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	4a2a      	ldr	r2, [pc, #168]	@ (801cc58 <HAL_DMA_Abort+0x450>)
 801cbae:	4293      	cmp	r3, r2
 801cbb0:	d03b      	beq.n	801cc2a <HAL_DMA_Abort+0x422>
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	4a29      	ldr	r2, [pc, #164]	@ (801cc5c <HAL_DMA_Abort+0x454>)
 801cbb8:	4293      	cmp	r3, r2
 801cbba:	d036      	beq.n	801cc2a <HAL_DMA_Abort+0x422>
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	681b      	ldr	r3, [r3, #0]
 801cbc0:	4a27      	ldr	r2, [pc, #156]	@ (801cc60 <HAL_DMA_Abort+0x458>)
 801cbc2:	4293      	cmp	r3, r2
 801cbc4:	d031      	beq.n	801cc2a <HAL_DMA_Abort+0x422>
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	681b      	ldr	r3, [r3, #0]
 801cbca:	4a26      	ldr	r2, [pc, #152]	@ (801cc64 <HAL_DMA_Abort+0x45c>)
 801cbcc:	4293      	cmp	r3, r2
 801cbce:	d02c      	beq.n	801cc2a <HAL_DMA_Abort+0x422>
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	681b      	ldr	r3, [r3, #0]
 801cbd4:	4a24      	ldr	r2, [pc, #144]	@ (801cc68 <HAL_DMA_Abort+0x460>)
 801cbd6:	4293      	cmp	r3, r2
 801cbd8:	d027      	beq.n	801cc2a <HAL_DMA_Abort+0x422>
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	681b      	ldr	r3, [r3, #0]
 801cbde:	4a23      	ldr	r2, [pc, #140]	@ (801cc6c <HAL_DMA_Abort+0x464>)
 801cbe0:	4293      	cmp	r3, r2
 801cbe2:	d022      	beq.n	801cc2a <HAL_DMA_Abort+0x422>
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	4a21      	ldr	r2, [pc, #132]	@ (801cc70 <HAL_DMA_Abort+0x468>)
 801cbea:	4293      	cmp	r3, r2
 801cbec:	d01d      	beq.n	801cc2a <HAL_DMA_Abort+0x422>
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	681b      	ldr	r3, [r3, #0]
 801cbf2:	4a20      	ldr	r2, [pc, #128]	@ (801cc74 <HAL_DMA_Abort+0x46c>)
 801cbf4:	4293      	cmp	r3, r2
 801cbf6:	d018      	beq.n	801cc2a <HAL_DMA_Abort+0x422>
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	681b      	ldr	r3, [r3, #0]
 801cbfc:	4a1e      	ldr	r2, [pc, #120]	@ (801cc78 <HAL_DMA_Abort+0x470>)
 801cbfe:	4293      	cmp	r3, r2
 801cc00:	d013      	beq.n	801cc2a <HAL_DMA_Abort+0x422>
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	681b      	ldr	r3, [r3, #0]
 801cc06:	4a1d      	ldr	r2, [pc, #116]	@ (801cc7c <HAL_DMA_Abort+0x474>)
 801cc08:	4293      	cmp	r3, r2
 801cc0a:	d00e      	beq.n	801cc2a <HAL_DMA_Abort+0x422>
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	4a1b      	ldr	r2, [pc, #108]	@ (801cc80 <HAL_DMA_Abort+0x478>)
 801cc12:	4293      	cmp	r3, r2
 801cc14:	d009      	beq.n	801cc2a <HAL_DMA_Abort+0x422>
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	681b      	ldr	r3, [r3, #0]
 801cc1a:	4a1a      	ldr	r2, [pc, #104]	@ (801cc84 <HAL_DMA_Abort+0x47c>)
 801cc1c:	4293      	cmp	r3, r2
 801cc1e:	d004      	beq.n	801cc2a <HAL_DMA_Abort+0x422>
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	4a18      	ldr	r2, [pc, #96]	@ (801cc88 <HAL_DMA_Abort+0x480>)
 801cc26:	4293      	cmp	r3, r2
 801cc28:	d101      	bne.n	801cc2e <HAL_DMA_Abort+0x426>
 801cc2a:	2301      	movs	r3, #1
 801cc2c:	e000      	b.n	801cc30 <HAL_DMA_Abort+0x428>
 801cc2e:	2300      	movs	r3, #0
 801cc30:	2b00      	cmp	r3, #0
 801cc32:	d02b      	beq.n	801cc8c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cc38:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cc3e:	f003 031f 	and.w	r3, r3, #31
 801cc42:	223f      	movs	r2, #63	@ 0x3f
 801cc44:	409a      	lsls	r2, r3
 801cc46:	68bb      	ldr	r3, [r7, #8]
 801cc48:	609a      	str	r2, [r3, #8]
 801cc4a:	e02a      	b.n	801cca2 <HAL_DMA_Abort+0x49a>
 801cc4c:	40020010 	.word	0x40020010
 801cc50:	40020028 	.word	0x40020028
 801cc54:	40020040 	.word	0x40020040
 801cc58:	40020058 	.word	0x40020058
 801cc5c:	40020070 	.word	0x40020070
 801cc60:	40020088 	.word	0x40020088
 801cc64:	400200a0 	.word	0x400200a0
 801cc68:	400200b8 	.word	0x400200b8
 801cc6c:	40020410 	.word	0x40020410
 801cc70:	40020428 	.word	0x40020428
 801cc74:	40020440 	.word	0x40020440
 801cc78:	40020458 	.word	0x40020458
 801cc7c:	40020470 	.word	0x40020470
 801cc80:	40020488 	.word	0x40020488
 801cc84:	400204a0 	.word	0x400204a0
 801cc88:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cc90:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cc96:	f003 031f 	and.w	r3, r3, #31
 801cc9a:	2201      	movs	r2, #1
 801cc9c:	409a      	lsls	r2, r3
 801cc9e:	68fb      	ldr	r3, [r7, #12]
 801cca0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	4a4f      	ldr	r2, [pc, #316]	@ (801cde4 <HAL_DMA_Abort+0x5dc>)
 801cca8:	4293      	cmp	r3, r2
 801ccaa:	d072      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	681b      	ldr	r3, [r3, #0]
 801ccb0:	4a4d      	ldr	r2, [pc, #308]	@ (801cde8 <HAL_DMA_Abort+0x5e0>)
 801ccb2:	4293      	cmp	r3, r2
 801ccb4:	d06d      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	681b      	ldr	r3, [r3, #0]
 801ccba:	4a4c      	ldr	r2, [pc, #304]	@ (801cdec <HAL_DMA_Abort+0x5e4>)
 801ccbc:	4293      	cmp	r3, r2
 801ccbe:	d068      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	4a4a      	ldr	r2, [pc, #296]	@ (801cdf0 <HAL_DMA_Abort+0x5e8>)
 801ccc6:	4293      	cmp	r3, r2
 801ccc8:	d063      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	681b      	ldr	r3, [r3, #0]
 801ccce:	4a49      	ldr	r2, [pc, #292]	@ (801cdf4 <HAL_DMA_Abort+0x5ec>)
 801ccd0:	4293      	cmp	r3, r2
 801ccd2:	d05e      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801ccd4:	687b      	ldr	r3, [r7, #4]
 801ccd6:	681b      	ldr	r3, [r3, #0]
 801ccd8:	4a47      	ldr	r2, [pc, #284]	@ (801cdf8 <HAL_DMA_Abort+0x5f0>)
 801ccda:	4293      	cmp	r3, r2
 801ccdc:	d059      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	4a46      	ldr	r2, [pc, #280]	@ (801cdfc <HAL_DMA_Abort+0x5f4>)
 801cce4:	4293      	cmp	r3, r2
 801cce6:	d054      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	681b      	ldr	r3, [r3, #0]
 801ccec:	4a44      	ldr	r2, [pc, #272]	@ (801ce00 <HAL_DMA_Abort+0x5f8>)
 801ccee:	4293      	cmp	r3, r2
 801ccf0:	d04f      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	681b      	ldr	r3, [r3, #0]
 801ccf6:	4a43      	ldr	r2, [pc, #268]	@ (801ce04 <HAL_DMA_Abort+0x5fc>)
 801ccf8:	4293      	cmp	r3, r2
 801ccfa:	d04a      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	681b      	ldr	r3, [r3, #0]
 801cd00:	4a41      	ldr	r2, [pc, #260]	@ (801ce08 <HAL_DMA_Abort+0x600>)
 801cd02:	4293      	cmp	r3, r2
 801cd04:	d045      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	681b      	ldr	r3, [r3, #0]
 801cd0a:	4a40      	ldr	r2, [pc, #256]	@ (801ce0c <HAL_DMA_Abort+0x604>)
 801cd0c:	4293      	cmp	r3, r2
 801cd0e:	d040      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	4a3e      	ldr	r2, [pc, #248]	@ (801ce10 <HAL_DMA_Abort+0x608>)
 801cd16:	4293      	cmp	r3, r2
 801cd18:	d03b      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	681b      	ldr	r3, [r3, #0]
 801cd1e:	4a3d      	ldr	r2, [pc, #244]	@ (801ce14 <HAL_DMA_Abort+0x60c>)
 801cd20:	4293      	cmp	r3, r2
 801cd22:	d036      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	681b      	ldr	r3, [r3, #0]
 801cd28:	4a3b      	ldr	r2, [pc, #236]	@ (801ce18 <HAL_DMA_Abort+0x610>)
 801cd2a:	4293      	cmp	r3, r2
 801cd2c:	d031      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	681b      	ldr	r3, [r3, #0]
 801cd32:	4a3a      	ldr	r2, [pc, #232]	@ (801ce1c <HAL_DMA_Abort+0x614>)
 801cd34:	4293      	cmp	r3, r2
 801cd36:	d02c      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	4a38      	ldr	r2, [pc, #224]	@ (801ce20 <HAL_DMA_Abort+0x618>)
 801cd3e:	4293      	cmp	r3, r2
 801cd40:	d027      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	681b      	ldr	r3, [r3, #0]
 801cd46:	4a37      	ldr	r2, [pc, #220]	@ (801ce24 <HAL_DMA_Abort+0x61c>)
 801cd48:	4293      	cmp	r3, r2
 801cd4a:	d022      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	681b      	ldr	r3, [r3, #0]
 801cd50:	4a35      	ldr	r2, [pc, #212]	@ (801ce28 <HAL_DMA_Abort+0x620>)
 801cd52:	4293      	cmp	r3, r2
 801cd54:	d01d      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801cd56:	687b      	ldr	r3, [r7, #4]
 801cd58:	681b      	ldr	r3, [r3, #0]
 801cd5a:	4a34      	ldr	r2, [pc, #208]	@ (801ce2c <HAL_DMA_Abort+0x624>)
 801cd5c:	4293      	cmp	r3, r2
 801cd5e:	d018      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	681b      	ldr	r3, [r3, #0]
 801cd64:	4a32      	ldr	r2, [pc, #200]	@ (801ce30 <HAL_DMA_Abort+0x628>)
 801cd66:	4293      	cmp	r3, r2
 801cd68:	d013      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	681b      	ldr	r3, [r3, #0]
 801cd6e:	4a31      	ldr	r2, [pc, #196]	@ (801ce34 <HAL_DMA_Abort+0x62c>)
 801cd70:	4293      	cmp	r3, r2
 801cd72:	d00e      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	681b      	ldr	r3, [r3, #0]
 801cd78:	4a2f      	ldr	r2, [pc, #188]	@ (801ce38 <HAL_DMA_Abort+0x630>)
 801cd7a:	4293      	cmp	r3, r2
 801cd7c:	d009      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801cd7e:	687b      	ldr	r3, [r7, #4]
 801cd80:	681b      	ldr	r3, [r3, #0]
 801cd82:	4a2e      	ldr	r2, [pc, #184]	@ (801ce3c <HAL_DMA_Abort+0x634>)
 801cd84:	4293      	cmp	r3, r2
 801cd86:	d004      	beq.n	801cd92 <HAL_DMA_Abort+0x58a>
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	681b      	ldr	r3, [r3, #0]
 801cd8c:	4a2c      	ldr	r2, [pc, #176]	@ (801ce40 <HAL_DMA_Abort+0x638>)
 801cd8e:	4293      	cmp	r3, r2
 801cd90:	d101      	bne.n	801cd96 <HAL_DMA_Abort+0x58e>
 801cd92:	2301      	movs	r3, #1
 801cd94:	e000      	b.n	801cd98 <HAL_DMA_Abort+0x590>
 801cd96:	2300      	movs	r3, #0
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d015      	beq.n	801cdc8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801cd9c:	687b      	ldr	r3, [r7, #4]
 801cd9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801cda0:	687a      	ldr	r2, [r7, #4]
 801cda2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801cda4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 801cda6:	687b      	ldr	r3, [r7, #4]
 801cda8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d00c      	beq.n	801cdc8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cdb2:	681a      	ldr	r2, [r3, #0]
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cdb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801cdbc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cdc2:	687a      	ldr	r2, [r7, #4]
 801cdc4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801cdc6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	2201      	movs	r2, #1
 801cdcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	2200      	movs	r2, #0
 801cdd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 801cdd8:	2300      	movs	r3, #0
}
 801cdda:	4618      	mov	r0, r3
 801cddc:	3718      	adds	r7, #24
 801cdde:	46bd      	mov	sp, r7
 801cde0:	bd80      	pop	{r7, pc}
 801cde2:	bf00      	nop
 801cde4:	40020010 	.word	0x40020010
 801cde8:	40020028 	.word	0x40020028
 801cdec:	40020040 	.word	0x40020040
 801cdf0:	40020058 	.word	0x40020058
 801cdf4:	40020070 	.word	0x40020070
 801cdf8:	40020088 	.word	0x40020088
 801cdfc:	400200a0 	.word	0x400200a0
 801ce00:	400200b8 	.word	0x400200b8
 801ce04:	40020410 	.word	0x40020410
 801ce08:	40020428 	.word	0x40020428
 801ce0c:	40020440 	.word	0x40020440
 801ce10:	40020458 	.word	0x40020458
 801ce14:	40020470 	.word	0x40020470
 801ce18:	40020488 	.word	0x40020488
 801ce1c:	400204a0 	.word	0x400204a0
 801ce20:	400204b8 	.word	0x400204b8
 801ce24:	58025408 	.word	0x58025408
 801ce28:	5802541c 	.word	0x5802541c
 801ce2c:	58025430 	.word	0x58025430
 801ce30:	58025444 	.word	0x58025444
 801ce34:	58025458 	.word	0x58025458
 801ce38:	5802546c 	.word	0x5802546c
 801ce3c:	58025480 	.word	0x58025480
 801ce40:	58025494 	.word	0x58025494

0801ce44 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 801ce44:	b580      	push	{r7, lr}
 801ce46:	b08a      	sub	sp, #40	@ 0x28
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	60f8      	str	r0, [r7, #12]
 801ce4c:	460b      	mov	r3, r1
 801ce4e:	607a      	str	r2, [r7, #4]
 801ce50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 801ce52:	2300      	movs	r3, #0
 801ce54:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
 801ce56:	f7fe fe7d 	bl	801bb54 <HAL_GetTick>
 801ce5a:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801ce5c:	68fb      	ldr	r3, [r7, #12]
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d101      	bne.n	801ce66 <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
 801ce62:	2301      	movs	r3, #1
 801ce64:	e374      	b.n	801d550 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
 801ce66:	68fb      	ldr	r3, [r7, #12]
 801ce68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801ce6c:	b2db      	uxtb	r3, r3
 801ce6e:	2b02      	cmp	r3, #2
 801ce70:	d008      	beq.n	801ce84 <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801ce72:	68fb      	ldr	r3, [r7, #12]
 801ce74:	2280      	movs	r2, #128	@ 0x80
 801ce76:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 801ce78:	68fb      	ldr	r3, [r7, #12]
 801ce7a:	2200      	movs	r2, #0
 801ce7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 801ce80:	2301      	movs	r3, #1
 801ce82:	e365      	b.n	801d550 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801ce84:	68fb      	ldr	r3, [r7, #12]
 801ce86:	681b      	ldr	r3, [r3, #0]
 801ce88:	4a7b      	ldr	r2, [pc, #492]	@ (801d078 <HAL_DMA_PollForTransfer+0x234>)
 801ce8a:	4293      	cmp	r3, r2
 801ce8c:	d04a      	beq.n	801cf24 <HAL_DMA_PollForTransfer+0xe0>
 801ce8e:	68fb      	ldr	r3, [r7, #12]
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	4a7a      	ldr	r2, [pc, #488]	@ (801d07c <HAL_DMA_PollForTransfer+0x238>)
 801ce94:	4293      	cmp	r3, r2
 801ce96:	d045      	beq.n	801cf24 <HAL_DMA_PollForTransfer+0xe0>
 801ce98:	68fb      	ldr	r3, [r7, #12]
 801ce9a:	681b      	ldr	r3, [r3, #0]
 801ce9c:	4a78      	ldr	r2, [pc, #480]	@ (801d080 <HAL_DMA_PollForTransfer+0x23c>)
 801ce9e:	4293      	cmp	r3, r2
 801cea0:	d040      	beq.n	801cf24 <HAL_DMA_PollForTransfer+0xe0>
 801cea2:	68fb      	ldr	r3, [r7, #12]
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	4a77      	ldr	r2, [pc, #476]	@ (801d084 <HAL_DMA_PollForTransfer+0x240>)
 801cea8:	4293      	cmp	r3, r2
 801ceaa:	d03b      	beq.n	801cf24 <HAL_DMA_PollForTransfer+0xe0>
 801ceac:	68fb      	ldr	r3, [r7, #12]
 801ceae:	681b      	ldr	r3, [r3, #0]
 801ceb0:	4a75      	ldr	r2, [pc, #468]	@ (801d088 <HAL_DMA_PollForTransfer+0x244>)
 801ceb2:	4293      	cmp	r3, r2
 801ceb4:	d036      	beq.n	801cf24 <HAL_DMA_PollForTransfer+0xe0>
 801ceb6:	68fb      	ldr	r3, [r7, #12]
 801ceb8:	681b      	ldr	r3, [r3, #0]
 801ceba:	4a74      	ldr	r2, [pc, #464]	@ (801d08c <HAL_DMA_PollForTransfer+0x248>)
 801cebc:	4293      	cmp	r3, r2
 801cebe:	d031      	beq.n	801cf24 <HAL_DMA_PollForTransfer+0xe0>
 801cec0:	68fb      	ldr	r3, [r7, #12]
 801cec2:	681b      	ldr	r3, [r3, #0]
 801cec4:	4a72      	ldr	r2, [pc, #456]	@ (801d090 <HAL_DMA_PollForTransfer+0x24c>)
 801cec6:	4293      	cmp	r3, r2
 801cec8:	d02c      	beq.n	801cf24 <HAL_DMA_PollForTransfer+0xe0>
 801ceca:	68fb      	ldr	r3, [r7, #12]
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	4a71      	ldr	r2, [pc, #452]	@ (801d094 <HAL_DMA_PollForTransfer+0x250>)
 801ced0:	4293      	cmp	r3, r2
 801ced2:	d027      	beq.n	801cf24 <HAL_DMA_PollForTransfer+0xe0>
 801ced4:	68fb      	ldr	r3, [r7, #12]
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	4a6f      	ldr	r2, [pc, #444]	@ (801d098 <HAL_DMA_PollForTransfer+0x254>)
 801ceda:	4293      	cmp	r3, r2
 801cedc:	d022      	beq.n	801cf24 <HAL_DMA_PollForTransfer+0xe0>
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	681b      	ldr	r3, [r3, #0]
 801cee2:	4a6e      	ldr	r2, [pc, #440]	@ (801d09c <HAL_DMA_PollForTransfer+0x258>)
 801cee4:	4293      	cmp	r3, r2
 801cee6:	d01d      	beq.n	801cf24 <HAL_DMA_PollForTransfer+0xe0>
 801cee8:	68fb      	ldr	r3, [r7, #12]
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	4a6c      	ldr	r2, [pc, #432]	@ (801d0a0 <HAL_DMA_PollForTransfer+0x25c>)
 801ceee:	4293      	cmp	r3, r2
 801cef0:	d018      	beq.n	801cf24 <HAL_DMA_PollForTransfer+0xe0>
 801cef2:	68fb      	ldr	r3, [r7, #12]
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	4a6b      	ldr	r2, [pc, #428]	@ (801d0a4 <HAL_DMA_PollForTransfer+0x260>)
 801cef8:	4293      	cmp	r3, r2
 801cefa:	d013      	beq.n	801cf24 <HAL_DMA_PollForTransfer+0xe0>
 801cefc:	68fb      	ldr	r3, [r7, #12]
 801cefe:	681b      	ldr	r3, [r3, #0]
 801cf00:	4a69      	ldr	r2, [pc, #420]	@ (801d0a8 <HAL_DMA_PollForTransfer+0x264>)
 801cf02:	4293      	cmp	r3, r2
 801cf04:	d00e      	beq.n	801cf24 <HAL_DMA_PollForTransfer+0xe0>
 801cf06:	68fb      	ldr	r3, [r7, #12]
 801cf08:	681b      	ldr	r3, [r3, #0]
 801cf0a:	4a68      	ldr	r2, [pc, #416]	@ (801d0ac <HAL_DMA_PollForTransfer+0x268>)
 801cf0c:	4293      	cmp	r3, r2
 801cf0e:	d009      	beq.n	801cf24 <HAL_DMA_PollForTransfer+0xe0>
 801cf10:	68fb      	ldr	r3, [r7, #12]
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	4a66      	ldr	r2, [pc, #408]	@ (801d0b0 <HAL_DMA_PollForTransfer+0x26c>)
 801cf16:	4293      	cmp	r3, r2
 801cf18:	d004      	beq.n	801cf24 <HAL_DMA_PollForTransfer+0xe0>
 801cf1a:	68fb      	ldr	r3, [r7, #12]
 801cf1c:	681b      	ldr	r3, [r3, #0]
 801cf1e:	4a65      	ldr	r2, [pc, #404]	@ (801d0b4 <HAL_DMA_PollForTransfer+0x270>)
 801cf20:	4293      	cmp	r3, r2
 801cf22:	d101      	bne.n	801cf28 <HAL_DMA_PollForTransfer+0xe4>
 801cf24:	2301      	movs	r3, #1
 801cf26:	e000      	b.n	801cf2a <HAL_DMA_PollForTransfer+0xe6>
 801cf28:	2300      	movs	r3, #0
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	d028      	beq.n	801cf80 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	681b      	ldr	r3, [r3, #0]
 801cf32:	681b      	ldr	r3, [r3, #0]
 801cf34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	d005      	beq.n	801cf48 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801cf3c:	68fb      	ldr	r3, [r7, #12]
 801cf3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801cf42:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 801cf44:	2301      	movs	r3, #1
 801cf46:	e303      	b.n	801d550 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801cf48:	7afb      	ldrb	r3, [r7, #11]
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	d108      	bne.n	801cf60 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801cf4e:	68fb      	ldr	r3, [r7, #12]
 801cf50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cf52:	f003 031f 	and.w	r3, r3, #31
 801cf56:	2220      	movs	r2, #32
 801cf58:	fa02 f303 	lsl.w	r3, r2, r3
 801cf5c:	627b      	str	r3, [r7, #36]	@ 0x24
 801cf5e:	e007      	b.n	801cf70 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801cf60:	68fb      	ldr	r3, [r7, #12]
 801cf62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cf64:	f003 031f 	and.w	r3, r3, #31
 801cf68:	2210      	movs	r2, #16
 801cf6a:	fa02 f303 	lsl.w	r3, r2, r3
 801cf6e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 801cf70:	68fb      	ldr	r3, [r7, #12]
 801cf72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cf74:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 801cf76:	68fb      	ldr	r3, [r7, #12]
 801cf78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cf7a:	3308      	adds	r3, #8
 801cf7c:	61fb      	str	r3, [r7, #28]
 801cf7e:	e1d5      	b.n	801d32c <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 801cf80:	68fb      	ldr	r3, [r7, #12]
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	681b      	ldr	r3, [r3, #0]
 801cf86:	f003 0320 	and.w	r3, r3, #32
 801cf8a:	2b00      	cmp	r3, #0
 801cf8c:	d005      	beq.n	801cf9a <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801cf8e:	68fb      	ldr	r3, [r7, #12]
 801cf90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801cf94:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 801cf96:	2301      	movs	r3, #1
 801cf98:	e2da      	b.n	801d550 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801cf9a:	7afb      	ldrb	r3, [r7, #11]
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	d108      	bne.n	801cfb2 <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 801cfa0:	68fb      	ldr	r3, [r7, #12]
 801cfa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cfa4:	f003 031f 	and.w	r3, r3, #31
 801cfa8:	2202      	movs	r2, #2
 801cfaa:	fa02 f303 	lsl.w	r3, r2, r3
 801cfae:	627b      	str	r3, [r7, #36]	@ 0x24
 801cfb0:	e007      	b.n	801cfc2 <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 801cfb2:	68fb      	ldr	r3, [r7, #12]
 801cfb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cfb6:	f003 031f 	and.w	r3, r3, #31
 801cfba:	2204      	movs	r2, #4
 801cfbc:	fa02 f303 	lsl.w	r3, r2, r3
 801cfc0:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 801cfc2:	68fb      	ldr	r3, [r7, #12]
 801cfc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cfc6:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 801cfc8:	68fb      	ldr	r3, [r7, #12]
 801cfca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cfcc:	3304      	adds	r3, #4
 801cfce:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
 801cfd0:	e1ac      	b.n	801d32c <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801cfd2:	68fb      	ldr	r3, [r7, #12]
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	4a28      	ldr	r2, [pc, #160]	@ (801d078 <HAL_DMA_PollForTransfer+0x234>)
 801cfd8:	4293      	cmp	r3, r2
 801cfda:	d04a      	beq.n	801d072 <HAL_DMA_PollForTransfer+0x22e>
 801cfdc:	68fb      	ldr	r3, [r7, #12]
 801cfde:	681b      	ldr	r3, [r3, #0]
 801cfe0:	4a26      	ldr	r2, [pc, #152]	@ (801d07c <HAL_DMA_PollForTransfer+0x238>)
 801cfe2:	4293      	cmp	r3, r2
 801cfe4:	d045      	beq.n	801d072 <HAL_DMA_PollForTransfer+0x22e>
 801cfe6:	68fb      	ldr	r3, [r7, #12]
 801cfe8:	681b      	ldr	r3, [r3, #0]
 801cfea:	4a25      	ldr	r2, [pc, #148]	@ (801d080 <HAL_DMA_PollForTransfer+0x23c>)
 801cfec:	4293      	cmp	r3, r2
 801cfee:	d040      	beq.n	801d072 <HAL_DMA_PollForTransfer+0x22e>
 801cff0:	68fb      	ldr	r3, [r7, #12]
 801cff2:	681b      	ldr	r3, [r3, #0]
 801cff4:	4a23      	ldr	r2, [pc, #140]	@ (801d084 <HAL_DMA_PollForTransfer+0x240>)
 801cff6:	4293      	cmp	r3, r2
 801cff8:	d03b      	beq.n	801d072 <HAL_DMA_PollForTransfer+0x22e>
 801cffa:	68fb      	ldr	r3, [r7, #12]
 801cffc:	681b      	ldr	r3, [r3, #0]
 801cffe:	4a22      	ldr	r2, [pc, #136]	@ (801d088 <HAL_DMA_PollForTransfer+0x244>)
 801d000:	4293      	cmp	r3, r2
 801d002:	d036      	beq.n	801d072 <HAL_DMA_PollForTransfer+0x22e>
 801d004:	68fb      	ldr	r3, [r7, #12]
 801d006:	681b      	ldr	r3, [r3, #0]
 801d008:	4a20      	ldr	r2, [pc, #128]	@ (801d08c <HAL_DMA_PollForTransfer+0x248>)
 801d00a:	4293      	cmp	r3, r2
 801d00c:	d031      	beq.n	801d072 <HAL_DMA_PollForTransfer+0x22e>
 801d00e:	68fb      	ldr	r3, [r7, #12]
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	4a1f      	ldr	r2, [pc, #124]	@ (801d090 <HAL_DMA_PollForTransfer+0x24c>)
 801d014:	4293      	cmp	r3, r2
 801d016:	d02c      	beq.n	801d072 <HAL_DMA_PollForTransfer+0x22e>
 801d018:	68fb      	ldr	r3, [r7, #12]
 801d01a:	681b      	ldr	r3, [r3, #0]
 801d01c:	4a1d      	ldr	r2, [pc, #116]	@ (801d094 <HAL_DMA_PollForTransfer+0x250>)
 801d01e:	4293      	cmp	r3, r2
 801d020:	d027      	beq.n	801d072 <HAL_DMA_PollForTransfer+0x22e>
 801d022:	68fb      	ldr	r3, [r7, #12]
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	4a1c      	ldr	r2, [pc, #112]	@ (801d098 <HAL_DMA_PollForTransfer+0x254>)
 801d028:	4293      	cmp	r3, r2
 801d02a:	d022      	beq.n	801d072 <HAL_DMA_PollForTransfer+0x22e>
 801d02c:	68fb      	ldr	r3, [r7, #12]
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	4a1a      	ldr	r2, [pc, #104]	@ (801d09c <HAL_DMA_PollForTransfer+0x258>)
 801d032:	4293      	cmp	r3, r2
 801d034:	d01d      	beq.n	801d072 <HAL_DMA_PollForTransfer+0x22e>
 801d036:	68fb      	ldr	r3, [r7, #12]
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	4a19      	ldr	r2, [pc, #100]	@ (801d0a0 <HAL_DMA_PollForTransfer+0x25c>)
 801d03c:	4293      	cmp	r3, r2
 801d03e:	d018      	beq.n	801d072 <HAL_DMA_PollForTransfer+0x22e>
 801d040:	68fb      	ldr	r3, [r7, #12]
 801d042:	681b      	ldr	r3, [r3, #0]
 801d044:	4a17      	ldr	r2, [pc, #92]	@ (801d0a4 <HAL_DMA_PollForTransfer+0x260>)
 801d046:	4293      	cmp	r3, r2
 801d048:	d013      	beq.n	801d072 <HAL_DMA_PollForTransfer+0x22e>
 801d04a:	68fb      	ldr	r3, [r7, #12]
 801d04c:	681b      	ldr	r3, [r3, #0]
 801d04e:	4a16      	ldr	r2, [pc, #88]	@ (801d0a8 <HAL_DMA_PollForTransfer+0x264>)
 801d050:	4293      	cmp	r3, r2
 801d052:	d00e      	beq.n	801d072 <HAL_DMA_PollForTransfer+0x22e>
 801d054:	68fb      	ldr	r3, [r7, #12]
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	4a14      	ldr	r2, [pc, #80]	@ (801d0ac <HAL_DMA_PollForTransfer+0x268>)
 801d05a:	4293      	cmp	r3, r2
 801d05c:	d009      	beq.n	801d072 <HAL_DMA_PollForTransfer+0x22e>
 801d05e:	68fb      	ldr	r3, [r7, #12]
 801d060:	681b      	ldr	r3, [r3, #0]
 801d062:	4a13      	ldr	r2, [pc, #76]	@ (801d0b0 <HAL_DMA_PollForTransfer+0x26c>)
 801d064:	4293      	cmp	r3, r2
 801d066:	d004      	beq.n	801d072 <HAL_DMA_PollForTransfer+0x22e>
 801d068:	68fb      	ldr	r3, [r7, #12]
 801d06a:	681b      	ldr	r3, [r3, #0]
 801d06c:	4a11      	ldr	r2, [pc, #68]	@ (801d0b4 <HAL_DMA_PollForTransfer+0x270>)
 801d06e:	4293      	cmp	r3, r2
 801d070:	d122      	bne.n	801d0b8 <HAL_DMA_PollForTransfer+0x274>
 801d072:	2301      	movs	r3, #1
 801d074:	e021      	b.n	801d0ba <HAL_DMA_PollForTransfer+0x276>
 801d076:	bf00      	nop
 801d078:	40020010 	.word	0x40020010
 801d07c:	40020028 	.word	0x40020028
 801d080:	40020040 	.word	0x40020040
 801d084:	40020058 	.word	0x40020058
 801d088:	40020070 	.word	0x40020070
 801d08c:	40020088 	.word	0x40020088
 801d090:	400200a0 	.word	0x400200a0
 801d094:	400200b8 	.word	0x400200b8
 801d098:	40020410 	.word	0x40020410
 801d09c:	40020428 	.word	0x40020428
 801d0a0:	40020440 	.word	0x40020440
 801d0a4:	40020458 	.word	0x40020458
 801d0a8:	40020470 	.word	0x40020470
 801d0ac:	40020488 	.word	0x40020488
 801d0b0:	400204a0 	.word	0x400204a0
 801d0b4:	400204b8 	.word	0x400204b8
 801d0b8:	2300      	movs	r3, #0
 801d0ba:	2b00      	cmp	r3, #0
 801d0bc:	d057      	beq.n	801d16e <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801d0be:	6a3b      	ldr	r3, [r7, #32]
 801d0c0:	681a      	ldr	r2, [r3, #0]
 801d0c2:	68fb      	ldr	r3, [r7, #12]
 801d0c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d0c6:	f003 031f 	and.w	r3, r3, #31
 801d0ca:	fa22 f303 	lsr.w	r3, r2, r3
 801d0ce:	f003 0301 	and.w	r3, r3, #1
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d00d      	beq.n	801d0f2 <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801d0d6:	68fb      	ldr	r3, [r7, #12]
 801d0d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d0da:	f043 0202 	orr.w	r2, r3, #2
 801d0de:	68fb      	ldr	r3, [r7, #12]
 801d0e0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801d0e2:	68fb      	ldr	r3, [r7, #12]
 801d0e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d0e6:	f003 031f 	and.w	r3, r3, #31
 801d0ea:	2201      	movs	r2, #1
 801d0ec:	409a      	lsls	r2, r3
 801d0ee:	69fb      	ldr	r3, [r7, #28]
 801d0f0:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801d0f2:	6a3b      	ldr	r3, [r7, #32]
 801d0f4:	681a      	ldr	r2, [r3, #0]
 801d0f6:	68fb      	ldr	r3, [r7, #12]
 801d0f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d0fa:	f003 031f 	and.w	r3, r3, #31
 801d0fe:	2104      	movs	r1, #4
 801d100:	fa01 f303 	lsl.w	r3, r1, r3
 801d104:	4013      	ands	r3, r2
 801d106:	2b00      	cmp	r3, #0
 801d108:	d00d      	beq.n	801d126 <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801d10a:	68fb      	ldr	r3, [r7, #12]
 801d10c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d10e:	f043 0204 	orr.w	r2, r3, #4
 801d112:	68fb      	ldr	r3, [r7, #12]
 801d114:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801d116:	68fb      	ldr	r3, [r7, #12]
 801d118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d11a:	f003 031f 	and.w	r3, r3, #31
 801d11e:	2204      	movs	r2, #4
 801d120:	409a      	lsls	r2, r3
 801d122:	69fb      	ldr	r3, [r7, #28]
 801d124:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801d126:	6a3b      	ldr	r3, [r7, #32]
 801d128:	681a      	ldr	r2, [r3, #0]
 801d12a:	68fb      	ldr	r3, [r7, #12]
 801d12c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d12e:	f003 031f 	and.w	r3, r3, #31
 801d132:	2108      	movs	r1, #8
 801d134:	fa01 f303 	lsl.w	r3, r1, r3
 801d138:	4013      	ands	r3, r2
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	d038      	beq.n	801d1b0 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801d13e:	68fb      	ldr	r3, [r7, #12]
 801d140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d142:	f043 0201 	orr.w	r2, r3, #1
 801d146:	68fb      	ldr	r3, [r7, #12]
 801d148:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801d14a:	68fb      	ldr	r3, [r7, #12]
 801d14c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d14e:	f003 031f 	and.w	r3, r3, #31
 801d152:	2208      	movs	r2, #8
 801d154:	409a      	lsls	r2, r3
 801d156:	69fb      	ldr	r3, [r7, #28]
 801d158:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801d15a:	68fb      	ldr	r3, [r7, #12]
 801d15c:	2201      	movs	r2, #1
 801d15e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801d162:	68fb      	ldr	r3, [r7, #12]
 801d164:	2200      	movs	r2, #0
 801d166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801d16a:	2301      	movs	r3, #1
 801d16c:	e1f0      	b.n	801d550 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801d16e:	6a3b      	ldr	r3, [r7, #32]
 801d170:	681a      	ldr	r2, [r3, #0]
 801d172:	68fb      	ldr	r3, [r7, #12]
 801d174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d176:	f003 031f 	and.w	r3, r3, #31
 801d17a:	2108      	movs	r1, #8
 801d17c:	fa01 f303 	lsl.w	r3, r1, r3
 801d180:	4013      	ands	r3, r2
 801d182:	2b00      	cmp	r3, #0
 801d184:	d014      	beq.n	801d1b0 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 801d186:	68fb      	ldr	r3, [r7, #12]
 801d188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d18a:	f003 031f 	and.w	r3, r3, #31
 801d18e:	2201      	movs	r2, #1
 801d190:	409a      	lsls	r2, r3
 801d192:	6a3b      	ldr	r3, [r7, #32]
 801d194:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	2201      	movs	r2, #1
 801d19a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801d19c:	68fb      	ldr	r3, [r7, #12]
 801d19e:	2201      	movs	r2, #1
 801d1a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801d1a4:	68fb      	ldr	r3, [r7, #12]
 801d1a6:	2200      	movs	r2, #0
 801d1a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801d1ac:	2301      	movs	r3, #1
 801d1ae:	e1cf      	b.n	801d550 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 801d1b0:	687b      	ldr	r3, [r7, #4]
 801d1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d1b6:	d012      	beq.n	801d1de <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 801d1b8:	f7fe fccc 	bl	801bb54 <HAL_GetTick>
 801d1bc:	4602      	mov	r2, r0
 801d1be:	697b      	ldr	r3, [r7, #20]
 801d1c0:	1ad3      	subs	r3, r2, r3
 801d1c2:	687a      	ldr	r2, [r7, #4]
 801d1c4:	429a      	cmp	r2, r3
 801d1c6:	d302      	bcc.n	801d1ce <HAL_DMA_PollForTransfer+0x38a>
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d107      	bne.n	801d1de <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801d1ce:	68fb      	ldr	r3, [r7, #12]
 801d1d0:	2220      	movs	r2, #32
 801d1d2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
 801d1d4:	68f8      	ldr	r0, [r7, #12]
 801d1d6:	f7ff fb17 	bl	801c808 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
 801d1da:	2301      	movs	r3, #1
 801d1dc:	e1b8      	b.n	801d550 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801d1de:	68fb      	ldr	r3, [r7, #12]
 801d1e0:	681b      	ldr	r3, [r3, #0]
 801d1e2:	4a81      	ldr	r2, [pc, #516]	@ (801d3e8 <HAL_DMA_PollForTransfer+0x5a4>)
 801d1e4:	4293      	cmp	r3, r2
 801d1e6:	d072      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d1e8:	68fb      	ldr	r3, [r7, #12]
 801d1ea:	681b      	ldr	r3, [r3, #0]
 801d1ec:	4a7f      	ldr	r2, [pc, #508]	@ (801d3ec <HAL_DMA_PollForTransfer+0x5a8>)
 801d1ee:	4293      	cmp	r3, r2
 801d1f0:	d06d      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d1f2:	68fb      	ldr	r3, [r7, #12]
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	4a7e      	ldr	r2, [pc, #504]	@ (801d3f0 <HAL_DMA_PollForTransfer+0x5ac>)
 801d1f8:	4293      	cmp	r3, r2
 801d1fa:	d068      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d1fc:	68fb      	ldr	r3, [r7, #12]
 801d1fe:	681b      	ldr	r3, [r3, #0]
 801d200:	4a7c      	ldr	r2, [pc, #496]	@ (801d3f4 <HAL_DMA_PollForTransfer+0x5b0>)
 801d202:	4293      	cmp	r3, r2
 801d204:	d063      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d206:	68fb      	ldr	r3, [r7, #12]
 801d208:	681b      	ldr	r3, [r3, #0]
 801d20a:	4a7b      	ldr	r2, [pc, #492]	@ (801d3f8 <HAL_DMA_PollForTransfer+0x5b4>)
 801d20c:	4293      	cmp	r3, r2
 801d20e:	d05e      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d210:	68fb      	ldr	r3, [r7, #12]
 801d212:	681b      	ldr	r3, [r3, #0]
 801d214:	4a79      	ldr	r2, [pc, #484]	@ (801d3fc <HAL_DMA_PollForTransfer+0x5b8>)
 801d216:	4293      	cmp	r3, r2
 801d218:	d059      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d21a:	68fb      	ldr	r3, [r7, #12]
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	4a78      	ldr	r2, [pc, #480]	@ (801d400 <HAL_DMA_PollForTransfer+0x5bc>)
 801d220:	4293      	cmp	r3, r2
 801d222:	d054      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d224:	68fb      	ldr	r3, [r7, #12]
 801d226:	681b      	ldr	r3, [r3, #0]
 801d228:	4a76      	ldr	r2, [pc, #472]	@ (801d404 <HAL_DMA_PollForTransfer+0x5c0>)
 801d22a:	4293      	cmp	r3, r2
 801d22c:	d04f      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d22e:	68fb      	ldr	r3, [r7, #12]
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	4a75      	ldr	r2, [pc, #468]	@ (801d408 <HAL_DMA_PollForTransfer+0x5c4>)
 801d234:	4293      	cmp	r3, r2
 801d236:	d04a      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d238:	68fb      	ldr	r3, [r7, #12]
 801d23a:	681b      	ldr	r3, [r3, #0]
 801d23c:	4a73      	ldr	r2, [pc, #460]	@ (801d40c <HAL_DMA_PollForTransfer+0x5c8>)
 801d23e:	4293      	cmp	r3, r2
 801d240:	d045      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d242:	68fb      	ldr	r3, [r7, #12]
 801d244:	681b      	ldr	r3, [r3, #0]
 801d246:	4a72      	ldr	r2, [pc, #456]	@ (801d410 <HAL_DMA_PollForTransfer+0x5cc>)
 801d248:	4293      	cmp	r3, r2
 801d24a:	d040      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d24c:	68fb      	ldr	r3, [r7, #12]
 801d24e:	681b      	ldr	r3, [r3, #0]
 801d250:	4a70      	ldr	r2, [pc, #448]	@ (801d414 <HAL_DMA_PollForTransfer+0x5d0>)
 801d252:	4293      	cmp	r3, r2
 801d254:	d03b      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d256:	68fb      	ldr	r3, [r7, #12]
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	4a6f      	ldr	r2, [pc, #444]	@ (801d418 <HAL_DMA_PollForTransfer+0x5d4>)
 801d25c:	4293      	cmp	r3, r2
 801d25e:	d036      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d260:	68fb      	ldr	r3, [r7, #12]
 801d262:	681b      	ldr	r3, [r3, #0]
 801d264:	4a6d      	ldr	r2, [pc, #436]	@ (801d41c <HAL_DMA_PollForTransfer+0x5d8>)
 801d266:	4293      	cmp	r3, r2
 801d268:	d031      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d26a:	68fb      	ldr	r3, [r7, #12]
 801d26c:	681b      	ldr	r3, [r3, #0]
 801d26e:	4a6c      	ldr	r2, [pc, #432]	@ (801d420 <HAL_DMA_PollForTransfer+0x5dc>)
 801d270:	4293      	cmp	r3, r2
 801d272:	d02c      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d274:	68fb      	ldr	r3, [r7, #12]
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	4a6a      	ldr	r2, [pc, #424]	@ (801d424 <HAL_DMA_PollForTransfer+0x5e0>)
 801d27a:	4293      	cmp	r3, r2
 801d27c:	d027      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d27e:	68fb      	ldr	r3, [r7, #12]
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	4a69      	ldr	r2, [pc, #420]	@ (801d428 <HAL_DMA_PollForTransfer+0x5e4>)
 801d284:	4293      	cmp	r3, r2
 801d286:	d022      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d288:	68fb      	ldr	r3, [r7, #12]
 801d28a:	681b      	ldr	r3, [r3, #0]
 801d28c:	4a67      	ldr	r2, [pc, #412]	@ (801d42c <HAL_DMA_PollForTransfer+0x5e8>)
 801d28e:	4293      	cmp	r3, r2
 801d290:	d01d      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d292:	68fb      	ldr	r3, [r7, #12]
 801d294:	681b      	ldr	r3, [r3, #0]
 801d296:	4a66      	ldr	r2, [pc, #408]	@ (801d430 <HAL_DMA_PollForTransfer+0x5ec>)
 801d298:	4293      	cmp	r3, r2
 801d29a:	d018      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d29c:	68fb      	ldr	r3, [r7, #12]
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	4a64      	ldr	r2, [pc, #400]	@ (801d434 <HAL_DMA_PollForTransfer+0x5f0>)
 801d2a2:	4293      	cmp	r3, r2
 801d2a4:	d013      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d2a6:	68fb      	ldr	r3, [r7, #12]
 801d2a8:	681b      	ldr	r3, [r3, #0]
 801d2aa:	4a63      	ldr	r2, [pc, #396]	@ (801d438 <HAL_DMA_PollForTransfer+0x5f4>)
 801d2ac:	4293      	cmp	r3, r2
 801d2ae:	d00e      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d2b0:	68fb      	ldr	r3, [r7, #12]
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	4a61      	ldr	r2, [pc, #388]	@ (801d43c <HAL_DMA_PollForTransfer+0x5f8>)
 801d2b6:	4293      	cmp	r3, r2
 801d2b8:	d009      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	681b      	ldr	r3, [r3, #0]
 801d2be:	4a60      	ldr	r2, [pc, #384]	@ (801d440 <HAL_DMA_PollForTransfer+0x5fc>)
 801d2c0:	4293      	cmp	r3, r2
 801d2c2:	d004      	beq.n	801d2ce <HAL_DMA_PollForTransfer+0x48a>
 801d2c4:	68fb      	ldr	r3, [r7, #12]
 801d2c6:	681b      	ldr	r3, [r3, #0]
 801d2c8:	4a5e      	ldr	r2, [pc, #376]	@ (801d444 <HAL_DMA_PollForTransfer+0x600>)
 801d2ca:	4293      	cmp	r3, r2
 801d2cc:	d101      	bne.n	801d2d2 <HAL_DMA_PollForTransfer+0x48e>
 801d2ce:	2301      	movs	r3, #1
 801d2d0:	e000      	b.n	801d2d4 <HAL_DMA_PollForTransfer+0x490>
 801d2d2:	2300      	movs	r3, #0
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	d029      	beq.n	801d32c <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
 801d2d8:	68fb      	ldr	r3, [r7, #12]
 801d2da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d012      	beq.n	801d306 <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 801d2e0:	68fb      	ldr	r3, [r7, #12]
 801d2e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d2e4:	681a      	ldr	r2, [r3, #0]
 801d2e6:	68fb      	ldr	r3, [r7, #12]
 801d2e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d2ea:	4013      	ands	r3, r2
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	d00a      	beq.n	801d306 <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801d2f0:	68fb      	ldr	r3, [r7, #12]
 801d2f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d2f4:	68fa      	ldr	r2, [r7, #12]
 801d2f6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801d2f8:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 801d2fa:	68fb      	ldr	r3, [r7, #12]
 801d2fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d2fe:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 801d302:	68fb      	ldr	r3, [r7, #12]
 801d304:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 801d306:	68fb      	ldr	r3, [r7, #12]
 801d308:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d30a:	681a      	ldr	r2, [r3, #0]
 801d30c:	68fb      	ldr	r3, [r7, #12]
 801d30e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d310:	4013      	ands	r3, r2
 801d312:	2b00      	cmp	r3, #0
 801d314:	d00a      	beq.n	801d32c <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801d316:	68fb      	ldr	r3, [r7, #12]
 801d318:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d31a:	68fa      	ldr	r2, [r7, #12]
 801d31c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801d31e:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 801d320:	68fb      	ldr	r3, [r7, #12]
 801d322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d324:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 801d328:	68fb      	ldr	r3, [r7, #12]
 801d32a:	655a      	str	r2, [r3, #84]	@ 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 801d32c:	6a3b      	ldr	r3, [r7, #32]
 801d32e:	681a      	ldr	r2, [r3, #0]
 801d330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d332:	4013      	ands	r3, r2
 801d334:	2b00      	cmp	r3, #0
 801d336:	f43f ae4c 	beq.w	801cfd2 <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801d33a:	7afb      	ldrb	r3, [r7, #11]
 801d33c:	2b00      	cmp	r3, #0
 801d33e:	f040 80a0 	bne.w	801d482 <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d342:	68fb      	ldr	r3, [r7, #12]
 801d344:	681b      	ldr	r3, [r3, #0]
 801d346:	4a28      	ldr	r2, [pc, #160]	@ (801d3e8 <HAL_DMA_PollForTransfer+0x5a4>)
 801d348:	4293      	cmp	r3, r2
 801d34a:	d04a      	beq.n	801d3e2 <HAL_DMA_PollForTransfer+0x59e>
 801d34c:	68fb      	ldr	r3, [r7, #12]
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	4a26      	ldr	r2, [pc, #152]	@ (801d3ec <HAL_DMA_PollForTransfer+0x5a8>)
 801d352:	4293      	cmp	r3, r2
 801d354:	d045      	beq.n	801d3e2 <HAL_DMA_PollForTransfer+0x59e>
 801d356:	68fb      	ldr	r3, [r7, #12]
 801d358:	681b      	ldr	r3, [r3, #0]
 801d35a:	4a25      	ldr	r2, [pc, #148]	@ (801d3f0 <HAL_DMA_PollForTransfer+0x5ac>)
 801d35c:	4293      	cmp	r3, r2
 801d35e:	d040      	beq.n	801d3e2 <HAL_DMA_PollForTransfer+0x59e>
 801d360:	68fb      	ldr	r3, [r7, #12]
 801d362:	681b      	ldr	r3, [r3, #0]
 801d364:	4a23      	ldr	r2, [pc, #140]	@ (801d3f4 <HAL_DMA_PollForTransfer+0x5b0>)
 801d366:	4293      	cmp	r3, r2
 801d368:	d03b      	beq.n	801d3e2 <HAL_DMA_PollForTransfer+0x59e>
 801d36a:	68fb      	ldr	r3, [r7, #12]
 801d36c:	681b      	ldr	r3, [r3, #0]
 801d36e:	4a22      	ldr	r2, [pc, #136]	@ (801d3f8 <HAL_DMA_PollForTransfer+0x5b4>)
 801d370:	4293      	cmp	r3, r2
 801d372:	d036      	beq.n	801d3e2 <HAL_DMA_PollForTransfer+0x59e>
 801d374:	68fb      	ldr	r3, [r7, #12]
 801d376:	681b      	ldr	r3, [r3, #0]
 801d378:	4a20      	ldr	r2, [pc, #128]	@ (801d3fc <HAL_DMA_PollForTransfer+0x5b8>)
 801d37a:	4293      	cmp	r3, r2
 801d37c:	d031      	beq.n	801d3e2 <HAL_DMA_PollForTransfer+0x59e>
 801d37e:	68fb      	ldr	r3, [r7, #12]
 801d380:	681b      	ldr	r3, [r3, #0]
 801d382:	4a1f      	ldr	r2, [pc, #124]	@ (801d400 <HAL_DMA_PollForTransfer+0x5bc>)
 801d384:	4293      	cmp	r3, r2
 801d386:	d02c      	beq.n	801d3e2 <HAL_DMA_PollForTransfer+0x59e>
 801d388:	68fb      	ldr	r3, [r7, #12]
 801d38a:	681b      	ldr	r3, [r3, #0]
 801d38c:	4a1d      	ldr	r2, [pc, #116]	@ (801d404 <HAL_DMA_PollForTransfer+0x5c0>)
 801d38e:	4293      	cmp	r3, r2
 801d390:	d027      	beq.n	801d3e2 <HAL_DMA_PollForTransfer+0x59e>
 801d392:	68fb      	ldr	r3, [r7, #12]
 801d394:	681b      	ldr	r3, [r3, #0]
 801d396:	4a1c      	ldr	r2, [pc, #112]	@ (801d408 <HAL_DMA_PollForTransfer+0x5c4>)
 801d398:	4293      	cmp	r3, r2
 801d39a:	d022      	beq.n	801d3e2 <HAL_DMA_PollForTransfer+0x59e>
 801d39c:	68fb      	ldr	r3, [r7, #12]
 801d39e:	681b      	ldr	r3, [r3, #0]
 801d3a0:	4a1a      	ldr	r2, [pc, #104]	@ (801d40c <HAL_DMA_PollForTransfer+0x5c8>)
 801d3a2:	4293      	cmp	r3, r2
 801d3a4:	d01d      	beq.n	801d3e2 <HAL_DMA_PollForTransfer+0x59e>
 801d3a6:	68fb      	ldr	r3, [r7, #12]
 801d3a8:	681b      	ldr	r3, [r3, #0]
 801d3aa:	4a19      	ldr	r2, [pc, #100]	@ (801d410 <HAL_DMA_PollForTransfer+0x5cc>)
 801d3ac:	4293      	cmp	r3, r2
 801d3ae:	d018      	beq.n	801d3e2 <HAL_DMA_PollForTransfer+0x59e>
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	681b      	ldr	r3, [r3, #0]
 801d3b4:	4a17      	ldr	r2, [pc, #92]	@ (801d414 <HAL_DMA_PollForTransfer+0x5d0>)
 801d3b6:	4293      	cmp	r3, r2
 801d3b8:	d013      	beq.n	801d3e2 <HAL_DMA_PollForTransfer+0x59e>
 801d3ba:	68fb      	ldr	r3, [r7, #12]
 801d3bc:	681b      	ldr	r3, [r3, #0]
 801d3be:	4a16      	ldr	r2, [pc, #88]	@ (801d418 <HAL_DMA_PollForTransfer+0x5d4>)
 801d3c0:	4293      	cmp	r3, r2
 801d3c2:	d00e      	beq.n	801d3e2 <HAL_DMA_PollForTransfer+0x59e>
 801d3c4:	68fb      	ldr	r3, [r7, #12]
 801d3c6:	681b      	ldr	r3, [r3, #0]
 801d3c8:	4a14      	ldr	r2, [pc, #80]	@ (801d41c <HAL_DMA_PollForTransfer+0x5d8>)
 801d3ca:	4293      	cmp	r3, r2
 801d3cc:	d009      	beq.n	801d3e2 <HAL_DMA_PollForTransfer+0x59e>
 801d3ce:	68fb      	ldr	r3, [r7, #12]
 801d3d0:	681b      	ldr	r3, [r3, #0]
 801d3d2:	4a13      	ldr	r2, [pc, #76]	@ (801d420 <HAL_DMA_PollForTransfer+0x5dc>)
 801d3d4:	4293      	cmp	r3, r2
 801d3d6:	d004      	beq.n	801d3e2 <HAL_DMA_PollForTransfer+0x59e>
 801d3d8:	68fb      	ldr	r3, [r7, #12]
 801d3da:	681b      	ldr	r3, [r3, #0]
 801d3dc:	4a11      	ldr	r2, [pc, #68]	@ (801d424 <HAL_DMA_PollForTransfer+0x5e0>)
 801d3de:	4293      	cmp	r3, r2
 801d3e0:	d132      	bne.n	801d448 <HAL_DMA_PollForTransfer+0x604>
 801d3e2:	2301      	movs	r3, #1
 801d3e4:	e031      	b.n	801d44a <HAL_DMA_PollForTransfer+0x606>
 801d3e6:	bf00      	nop
 801d3e8:	40020010 	.word	0x40020010
 801d3ec:	40020028 	.word	0x40020028
 801d3f0:	40020040 	.word	0x40020040
 801d3f4:	40020058 	.word	0x40020058
 801d3f8:	40020070 	.word	0x40020070
 801d3fc:	40020088 	.word	0x40020088
 801d400:	400200a0 	.word	0x400200a0
 801d404:	400200b8 	.word	0x400200b8
 801d408:	40020410 	.word	0x40020410
 801d40c:	40020428 	.word	0x40020428
 801d410:	40020440 	.word	0x40020440
 801d414:	40020458 	.word	0x40020458
 801d418:	40020470 	.word	0x40020470
 801d41c:	40020488 	.word	0x40020488
 801d420:	400204a0 	.word	0x400204a0
 801d424:	400204b8 	.word	0x400204b8
 801d428:	58025408 	.word	0x58025408
 801d42c:	5802541c 	.word	0x5802541c
 801d430:	58025430 	.word	0x58025430
 801d434:	58025444 	.word	0x58025444
 801d438:	58025458 	.word	0x58025458
 801d43c:	5802546c 	.word	0x5802546c
 801d440:	58025480 	.word	0x58025480
 801d444:	58025494 	.word	0x58025494
 801d448:	2300      	movs	r3, #0
 801d44a:	2b00      	cmp	r3, #0
 801d44c:	d008      	beq.n	801d460 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 801d44e:	68fb      	ldr	r3, [r7, #12]
 801d450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d452:	f003 031f 	and.w	r3, r3, #31
 801d456:	2230      	movs	r2, #48	@ 0x30
 801d458:	409a      	lsls	r2, r3
 801d45a:	69fb      	ldr	r3, [r7, #28]
 801d45c:	601a      	str	r2, [r3, #0]
 801d45e:	e007      	b.n	801d470 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 801d460:	68fb      	ldr	r3, [r7, #12]
 801d462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d464:	f003 031f 	and.w	r3, r3, #31
 801d468:	2202      	movs	r2, #2
 801d46a:	409a      	lsls	r2, r3
 801d46c:	69fb      	ldr	r3, [r7, #28]
 801d46e:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	2201      	movs	r2, #1
 801d474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801d478:	68fb      	ldr	r3, [r7, #12]
 801d47a:	2200      	movs	r2, #0
 801d47c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 801d480:	e065      	b.n	801d54e <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d482:	68fb      	ldr	r3, [r7, #12]
 801d484:	681b      	ldr	r3, [r3, #0]
 801d486:	4a34      	ldr	r2, [pc, #208]	@ (801d558 <HAL_DMA_PollForTransfer+0x714>)
 801d488:	4293      	cmp	r3, r2
 801d48a:	d04a      	beq.n	801d522 <HAL_DMA_PollForTransfer+0x6de>
 801d48c:	68fb      	ldr	r3, [r7, #12]
 801d48e:	681b      	ldr	r3, [r3, #0]
 801d490:	4a32      	ldr	r2, [pc, #200]	@ (801d55c <HAL_DMA_PollForTransfer+0x718>)
 801d492:	4293      	cmp	r3, r2
 801d494:	d045      	beq.n	801d522 <HAL_DMA_PollForTransfer+0x6de>
 801d496:	68fb      	ldr	r3, [r7, #12]
 801d498:	681b      	ldr	r3, [r3, #0]
 801d49a:	4a31      	ldr	r2, [pc, #196]	@ (801d560 <HAL_DMA_PollForTransfer+0x71c>)
 801d49c:	4293      	cmp	r3, r2
 801d49e:	d040      	beq.n	801d522 <HAL_DMA_PollForTransfer+0x6de>
 801d4a0:	68fb      	ldr	r3, [r7, #12]
 801d4a2:	681b      	ldr	r3, [r3, #0]
 801d4a4:	4a2f      	ldr	r2, [pc, #188]	@ (801d564 <HAL_DMA_PollForTransfer+0x720>)
 801d4a6:	4293      	cmp	r3, r2
 801d4a8:	d03b      	beq.n	801d522 <HAL_DMA_PollForTransfer+0x6de>
 801d4aa:	68fb      	ldr	r3, [r7, #12]
 801d4ac:	681b      	ldr	r3, [r3, #0]
 801d4ae:	4a2e      	ldr	r2, [pc, #184]	@ (801d568 <HAL_DMA_PollForTransfer+0x724>)
 801d4b0:	4293      	cmp	r3, r2
 801d4b2:	d036      	beq.n	801d522 <HAL_DMA_PollForTransfer+0x6de>
 801d4b4:	68fb      	ldr	r3, [r7, #12]
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	4a2c      	ldr	r2, [pc, #176]	@ (801d56c <HAL_DMA_PollForTransfer+0x728>)
 801d4ba:	4293      	cmp	r3, r2
 801d4bc:	d031      	beq.n	801d522 <HAL_DMA_PollForTransfer+0x6de>
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	681b      	ldr	r3, [r3, #0]
 801d4c2:	4a2b      	ldr	r2, [pc, #172]	@ (801d570 <HAL_DMA_PollForTransfer+0x72c>)
 801d4c4:	4293      	cmp	r3, r2
 801d4c6:	d02c      	beq.n	801d522 <HAL_DMA_PollForTransfer+0x6de>
 801d4c8:	68fb      	ldr	r3, [r7, #12]
 801d4ca:	681b      	ldr	r3, [r3, #0]
 801d4cc:	4a29      	ldr	r2, [pc, #164]	@ (801d574 <HAL_DMA_PollForTransfer+0x730>)
 801d4ce:	4293      	cmp	r3, r2
 801d4d0:	d027      	beq.n	801d522 <HAL_DMA_PollForTransfer+0x6de>
 801d4d2:	68fb      	ldr	r3, [r7, #12]
 801d4d4:	681b      	ldr	r3, [r3, #0]
 801d4d6:	4a28      	ldr	r2, [pc, #160]	@ (801d578 <HAL_DMA_PollForTransfer+0x734>)
 801d4d8:	4293      	cmp	r3, r2
 801d4da:	d022      	beq.n	801d522 <HAL_DMA_PollForTransfer+0x6de>
 801d4dc:	68fb      	ldr	r3, [r7, #12]
 801d4de:	681b      	ldr	r3, [r3, #0]
 801d4e0:	4a26      	ldr	r2, [pc, #152]	@ (801d57c <HAL_DMA_PollForTransfer+0x738>)
 801d4e2:	4293      	cmp	r3, r2
 801d4e4:	d01d      	beq.n	801d522 <HAL_DMA_PollForTransfer+0x6de>
 801d4e6:	68fb      	ldr	r3, [r7, #12]
 801d4e8:	681b      	ldr	r3, [r3, #0]
 801d4ea:	4a25      	ldr	r2, [pc, #148]	@ (801d580 <HAL_DMA_PollForTransfer+0x73c>)
 801d4ec:	4293      	cmp	r3, r2
 801d4ee:	d018      	beq.n	801d522 <HAL_DMA_PollForTransfer+0x6de>
 801d4f0:	68fb      	ldr	r3, [r7, #12]
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	4a23      	ldr	r2, [pc, #140]	@ (801d584 <HAL_DMA_PollForTransfer+0x740>)
 801d4f6:	4293      	cmp	r3, r2
 801d4f8:	d013      	beq.n	801d522 <HAL_DMA_PollForTransfer+0x6de>
 801d4fa:	68fb      	ldr	r3, [r7, #12]
 801d4fc:	681b      	ldr	r3, [r3, #0]
 801d4fe:	4a22      	ldr	r2, [pc, #136]	@ (801d588 <HAL_DMA_PollForTransfer+0x744>)
 801d500:	4293      	cmp	r3, r2
 801d502:	d00e      	beq.n	801d522 <HAL_DMA_PollForTransfer+0x6de>
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	4a20      	ldr	r2, [pc, #128]	@ (801d58c <HAL_DMA_PollForTransfer+0x748>)
 801d50a:	4293      	cmp	r3, r2
 801d50c:	d009      	beq.n	801d522 <HAL_DMA_PollForTransfer+0x6de>
 801d50e:	68fb      	ldr	r3, [r7, #12]
 801d510:	681b      	ldr	r3, [r3, #0]
 801d512:	4a1f      	ldr	r2, [pc, #124]	@ (801d590 <HAL_DMA_PollForTransfer+0x74c>)
 801d514:	4293      	cmp	r3, r2
 801d516:	d004      	beq.n	801d522 <HAL_DMA_PollForTransfer+0x6de>
 801d518:	68fb      	ldr	r3, [r7, #12]
 801d51a:	681b      	ldr	r3, [r3, #0]
 801d51c:	4a1d      	ldr	r2, [pc, #116]	@ (801d594 <HAL_DMA_PollForTransfer+0x750>)
 801d51e:	4293      	cmp	r3, r2
 801d520:	d101      	bne.n	801d526 <HAL_DMA_PollForTransfer+0x6e2>
 801d522:	2301      	movs	r3, #1
 801d524:	e000      	b.n	801d528 <HAL_DMA_PollForTransfer+0x6e4>
 801d526:	2300      	movs	r3, #0
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d008      	beq.n	801d53e <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 801d52c:	68fb      	ldr	r3, [r7, #12]
 801d52e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d530:	f003 031f 	and.w	r3, r3, #31
 801d534:	2210      	movs	r2, #16
 801d536:	409a      	lsls	r2, r3
 801d538:	69fb      	ldr	r3, [r7, #28]
 801d53a:	601a      	str	r2, [r3, #0]
 801d53c:	e007      	b.n	801d54e <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d542:	f003 031f 	and.w	r3, r3, #31
 801d546:	2204      	movs	r2, #4
 801d548:	409a      	lsls	r2, r3
 801d54a:	69fb      	ldr	r3, [r7, #28]
 801d54c:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 801d54e:	7efb      	ldrb	r3, [r7, #27]
}
 801d550:	4618      	mov	r0, r3
 801d552:	3728      	adds	r7, #40	@ 0x28
 801d554:	46bd      	mov	sp, r7
 801d556:	bd80      	pop	{r7, pc}
 801d558:	40020010 	.word	0x40020010
 801d55c:	40020028 	.word	0x40020028
 801d560:	40020040 	.word	0x40020040
 801d564:	40020058 	.word	0x40020058
 801d568:	40020070 	.word	0x40020070
 801d56c:	40020088 	.word	0x40020088
 801d570:	400200a0 	.word	0x400200a0
 801d574:	400200b8 	.word	0x400200b8
 801d578:	40020410 	.word	0x40020410
 801d57c:	40020428 	.word	0x40020428
 801d580:	40020440 	.word	0x40020440
 801d584:	40020458 	.word	0x40020458
 801d588:	40020470 	.word	0x40020470
 801d58c:	40020488 	.word	0x40020488
 801d590:	400204a0 	.word	0x400204a0
 801d594:	400204b8 	.word	0x400204b8

0801d598 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801d598:	b480      	push	{r7}
 801d59a:	b087      	sub	sp, #28
 801d59c:	af00      	add	r7, sp, #0
 801d59e:	60f8      	str	r0, [r7, #12]
 801d5a0:	60b9      	str	r1, [r7, #8]
 801d5a2:	607a      	str	r2, [r7, #4]
 801d5a4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801d5a6:	68fb      	ldr	r3, [r7, #12]
 801d5a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d5aa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801d5ac:	68fb      	ldr	r3, [r7, #12]
 801d5ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d5b0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801d5b2:	68fb      	ldr	r3, [r7, #12]
 801d5b4:	681b      	ldr	r3, [r3, #0]
 801d5b6:	4a7f      	ldr	r2, [pc, #508]	@ (801d7b4 <DMA_SetConfig+0x21c>)
 801d5b8:	4293      	cmp	r3, r2
 801d5ba:	d072      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d5bc:	68fb      	ldr	r3, [r7, #12]
 801d5be:	681b      	ldr	r3, [r3, #0]
 801d5c0:	4a7d      	ldr	r2, [pc, #500]	@ (801d7b8 <DMA_SetConfig+0x220>)
 801d5c2:	4293      	cmp	r3, r2
 801d5c4:	d06d      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	681b      	ldr	r3, [r3, #0]
 801d5ca:	4a7c      	ldr	r2, [pc, #496]	@ (801d7bc <DMA_SetConfig+0x224>)
 801d5cc:	4293      	cmp	r3, r2
 801d5ce:	d068      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d5d0:	68fb      	ldr	r3, [r7, #12]
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	4a7a      	ldr	r2, [pc, #488]	@ (801d7c0 <DMA_SetConfig+0x228>)
 801d5d6:	4293      	cmp	r3, r2
 801d5d8:	d063      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	681b      	ldr	r3, [r3, #0]
 801d5de:	4a79      	ldr	r2, [pc, #484]	@ (801d7c4 <DMA_SetConfig+0x22c>)
 801d5e0:	4293      	cmp	r3, r2
 801d5e2:	d05e      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d5e4:	68fb      	ldr	r3, [r7, #12]
 801d5e6:	681b      	ldr	r3, [r3, #0]
 801d5e8:	4a77      	ldr	r2, [pc, #476]	@ (801d7c8 <DMA_SetConfig+0x230>)
 801d5ea:	4293      	cmp	r3, r2
 801d5ec:	d059      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	681b      	ldr	r3, [r3, #0]
 801d5f2:	4a76      	ldr	r2, [pc, #472]	@ (801d7cc <DMA_SetConfig+0x234>)
 801d5f4:	4293      	cmp	r3, r2
 801d5f6:	d054      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d5f8:	68fb      	ldr	r3, [r7, #12]
 801d5fa:	681b      	ldr	r3, [r3, #0]
 801d5fc:	4a74      	ldr	r2, [pc, #464]	@ (801d7d0 <DMA_SetConfig+0x238>)
 801d5fe:	4293      	cmp	r3, r2
 801d600:	d04f      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	681b      	ldr	r3, [r3, #0]
 801d606:	4a73      	ldr	r2, [pc, #460]	@ (801d7d4 <DMA_SetConfig+0x23c>)
 801d608:	4293      	cmp	r3, r2
 801d60a:	d04a      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d60c:	68fb      	ldr	r3, [r7, #12]
 801d60e:	681b      	ldr	r3, [r3, #0]
 801d610:	4a71      	ldr	r2, [pc, #452]	@ (801d7d8 <DMA_SetConfig+0x240>)
 801d612:	4293      	cmp	r3, r2
 801d614:	d045      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d616:	68fb      	ldr	r3, [r7, #12]
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	4a70      	ldr	r2, [pc, #448]	@ (801d7dc <DMA_SetConfig+0x244>)
 801d61c:	4293      	cmp	r3, r2
 801d61e:	d040      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d620:	68fb      	ldr	r3, [r7, #12]
 801d622:	681b      	ldr	r3, [r3, #0]
 801d624:	4a6e      	ldr	r2, [pc, #440]	@ (801d7e0 <DMA_SetConfig+0x248>)
 801d626:	4293      	cmp	r3, r2
 801d628:	d03b      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d62a:	68fb      	ldr	r3, [r7, #12]
 801d62c:	681b      	ldr	r3, [r3, #0]
 801d62e:	4a6d      	ldr	r2, [pc, #436]	@ (801d7e4 <DMA_SetConfig+0x24c>)
 801d630:	4293      	cmp	r3, r2
 801d632:	d036      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d634:	68fb      	ldr	r3, [r7, #12]
 801d636:	681b      	ldr	r3, [r3, #0]
 801d638:	4a6b      	ldr	r2, [pc, #428]	@ (801d7e8 <DMA_SetConfig+0x250>)
 801d63a:	4293      	cmp	r3, r2
 801d63c:	d031      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d63e:	68fb      	ldr	r3, [r7, #12]
 801d640:	681b      	ldr	r3, [r3, #0]
 801d642:	4a6a      	ldr	r2, [pc, #424]	@ (801d7ec <DMA_SetConfig+0x254>)
 801d644:	4293      	cmp	r3, r2
 801d646:	d02c      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d648:	68fb      	ldr	r3, [r7, #12]
 801d64a:	681b      	ldr	r3, [r3, #0]
 801d64c:	4a68      	ldr	r2, [pc, #416]	@ (801d7f0 <DMA_SetConfig+0x258>)
 801d64e:	4293      	cmp	r3, r2
 801d650:	d027      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	4a67      	ldr	r2, [pc, #412]	@ (801d7f4 <DMA_SetConfig+0x25c>)
 801d658:	4293      	cmp	r3, r2
 801d65a:	d022      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d65c:	68fb      	ldr	r3, [r7, #12]
 801d65e:	681b      	ldr	r3, [r3, #0]
 801d660:	4a65      	ldr	r2, [pc, #404]	@ (801d7f8 <DMA_SetConfig+0x260>)
 801d662:	4293      	cmp	r3, r2
 801d664:	d01d      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d666:	68fb      	ldr	r3, [r7, #12]
 801d668:	681b      	ldr	r3, [r3, #0]
 801d66a:	4a64      	ldr	r2, [pc, #400]	@ (801d7fc <DMA_SetConfig+0x264>)
 801d66c:	4293      	cmp	r3, r2
 801d66e:	d018      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	681b      	ldr	r3, [r3, #0]
 801d674:	4a62      	ldr	r2, [pc, #392]	@ (801d800 <DMA_SetConfig+0x268>)
 801d676:	4293      	cmp	r3, r2
 801d678:	d013      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d67a:	68fb      	ldr	r3, [r7, #12]
 801d67c:	681b      	ldr	r3, [r3, #0]
 801d67e:	4a61      	ldr	r2, [pc, #388]	@ (801d804 <DMA_SetConfig+0x26c>)
 801d680:	4293      	cmp	r3, r2
 801d682:	d00e      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	681b      	ldr	r3, [r3, #0]
 801d688:	4a5f      	ldr	r2, [pc, #380]	@ (801d808 <DMA_SetConfig+0x270>)
 801d68a:	4293      	cmp	r3, r2
 801d68c:	d009      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d68e:	68fb      	ldr	r3, [r7, #12]
 801d690:	681b      	ldr	r3, [r3, #0]
 801d692:	4a5e      	ldr	r2, [pc, #376]	@ (801d80c <DMA_SetConfig+0x274>)
 801d694:	4293      	cmp	r3, r2
 801d696:	d004      	beq.n	801d6a2 <DMA_SetConfig+0x10a>
 801d698:	68fb      	ldr	r3, [r7, #12]
 801d69a:	681b      	ldr	r3, [r3, #0]
 801d69c:	4a5c      	ldr	r2, [pc, #368]	@ (801d810 <DMA_SetConfig+0x278>)
 801d69e:	4293      	cmp	r3, r2
 801d6a0:	d101      	bne.n	801d6a6 <DMA_SetConfig+0x10e>
 801d6a2:	2301      	movs	r3, #1
 801d6a4:	e000      	b.n	801d6a8 <DMA_SetConfig+0x110>
 801d6a6:	2300      	movs	r3, #0
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	d00d      	beq.n	801d6c8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801d6ac:	68fb      	ldr	r3, [r7, #12]
 801d6ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d6b0:	68fa      	ldr	r2, [r7, #12]
 801d6b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801d6b4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801d6b6:	68fb      	ldr	r3, [r7, #12]
 801d6b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d004      	beq.n	801d6c8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801d6be:	68fb      	ldr	r3, [r7, #12]
 801d6c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d6c2:	68fa      	ldr	r2, [r7, #12]
 801d6c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801d6c6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	681b      	ldr	r3, [r3, #0]
 801d6cc:	4a39      	ldr	r2, [pc, #228]	@ (801d7b4 <DMA_SetConfig+0x21c>)
 801d6ce:	4293      	cmp	r3, r2
 801d6d0:	d04a      	beq.n	801d768 <DMA_SetConfig+0x1d0>
 801d6d2:	68fb      	ldr	r3, [r7, #12]
 801d6d4:	681b      	ldr	r3, [r3, #0]
 801d6d6:	4a38      	ldr	r2, [pc, #224]	@ (801d7b8 <DMA_SetConfig+0x220>)
 801d6d8:	4293      	cmp	r3, r2
 801d6da:	d045      	beq.n	801d768 <DMA_SetConfig+0x1d0>
 801d6dc:	68fb      	ldr	r3, [r7, #12]
 801d6de:	681b      	ldr	r3, [r3, #0]
 801d6e0:	4a36      	ldr	r2, [pc, #216]	@ (801d7bc <DMA_SetConfig+0x224>)
 801d6e2:	4293      	cmp	r3, r2
 801d6e4:	d040      	beq.n	801d768 <DMA_SetConfig+0x1d0>
 801d6e6:	68fb      	ldr	r3, [r7, #12]
 801d6e8:	681b      	ldr	r3, [r3, #0]
 801d6ea:	4a35      	ldr	r2, [pc, #212]	@ (801d7c0 <DMA_SetConfig+0x228>)
 801d6ec:	4293      	cmp	r3, r2
 801d6ee:	d03b      	beq.n	801d768 <DMA_SetConfig+0x1d0>
 801d6f0:	68fb      	ldr	r3, [r7, #12]
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	4a33      	ldr	r2, [pc, #204]	@ (801d7c4 <DMA_SetConfig+0x22c>)
 801d6f6:	4293      	cmp	r3, r2
 801d6f8:	d036      	beq.n	801d768 <DMA_SetConfig+0x1d0>
 801d6fa:	68fb      	ldr	r3, [r7, #12]
 801d6fc:	681b      	ldr	r3, [r3, #0]
 801d6fe:	4a32      	ldr	r2, [pc, #200]	@ (801d7c8 <DMA_SetConfig+0x230>)
 801d700:	4293      	cmp	r3, r2
 801d702:	d031      	beq.n	801d768 <DMA_SetConfig+0x1d0>
 801d704:	68fb      	ldr	r3, [r7, #12]
 801d706:	681b      	ldr	r3, [r3, #0]
 801d708:	4a30      	ldr	r2, [pc, #192]	@ (801d7cc <DMA_SetConfig+0x234>)
 801d70a:	4293      	cmp	r3, r2
 801d70c:	d02c      	beq.n	801d768 <DMA_SetConfig+0x1d0>
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	681b      	ldr	r3, [r3, #0]
 801d712:	4a2f      	ldr	r2, [pc, #188]	@ (801d7d0 <DMA_SetConfig+0x238>)
 801d714:	4293      	cmp	r3, r2
 801d716:	d027      	beq.n	801d768 <DMA_SetConfig+0x1d0>
 801d718:	68fb      	ldr	r3, [r7, #12]
 801d71a:	681b      	ldr	r3, [r3, #0]
 801d71c:	4a2d      	ldr	r2, [pc, #180]	@ (801d7d4 <DMA_SetConfig+0x23c>)
 801d71e:	4293      	cmp	r3, r2
 801d720:	d022      	beq.n	801d768 <DMA_SetConfig+0x1d0>
 801d722:	68fb      	ldr	r3, [r7, #12]
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	4a2c      	ldr	r2, [pc, #176]	@ (801d7d8 <DMA_SetConfig+0x240>)
 801d728:	4293      	cmp	r3, r2
 801d72a:	d01d      	beq.n	801d768 <DMA_SetConfig+0x1d0>
 801d72c:	68fb      	ldr	r3, [r7, #12]
 801d72e:	681b      	ldr	r3, [r3, #0]
 801d730:	4a2a      	ldr	r2, [pc, #168]	@ (801d7dc <DMA_SetConfig+0x244>)
 801d732:	4293      	cmp	r3, r2
 801d734:	d018      	beq.n	801d768 <DMA_SetConfig+0x1d0>
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	4a29      	ldr	r2, [pc, #164]	@ (801d7e0 <DMA_SetConfig+0x248>)
 801d73c:	4293      	cmp	r3, r2
 801d73e:	d013      	beq.n	801d768 <DMA_SetConfig+0x1d0>
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	681b      	ldr	r3, [r3, #0]
 801d744:	4a27      	ldr	r2, [pc, #156]	@ (801d7e4 <DMA_SetConfig+0x24c>)
 801d746:	4293      	cmp	r3, r2
 801d748:	d00e      	beq.n	801d768 <DMA_SetConfig+0x1d0>
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	4a26      	ldr	r2, [pc, #152]	@ (801d7e8 <DMA_SetConfig+0x250>)
 801d750:	4293      	cmp	r3, r2
 801d752:	d009      	beq.n	801d768 <DMA_SetConfig+0x1d0>
 801d754:	68fb      	ldr	r3, [r7, #12]
 801d756:	681b      	ldr	r3, [r3, #0]
 801d758:	4a24      	ldr	r2, [pc, #144]	@ (801d7ec <DMA_SetConfig+0x254>)
 801d75a:	4293      	cmp	r3, r2
 801d75c:	d004      	beq.n	801d768 <DMA_SetConfig+0x1d0>
 801d75e:	68fb      	ldr	r3, [r7, #12]
 801d760:	681b      	ldr	r3, [r3, #0]
 801d762:	4a23      	ldr	r2, [pc, #140]	@ (801d7f0 <DMA_SetConfig+0x258>)
 801d764:	4293      	cmp	r3, r2
 801d766:	d101      	bne.n	801d76c <DMA_SetConfig+0x1d4>
 801d768:	2301      	movs	r3, #1
 801d76a:	e000      	b.n	801d76e <DMA_SetConfig+0x1d6>
 801d76c:	2300      	movs	r3, #0
 801d76e:	2b00      	cmp	r3, #0
 801d770:	d059      	beq.n	801d826 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801d772:	68fb      	ldr	r3, [r7, #12]
 801d774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d776:	f003 031f 	and.w	r3, r3, #31
 801d77a:	223f      	movs	r2, #63	@ 0x3f
 801d77c:	409a      	lsls	r2, r3
 801d77e:	697b      	ldr	r3, [r7, #20]
 801d780:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801d782:	68fb      	ldr	r3, [r7, #12]
 801d784:	681b      	ldr	r3, [r3, #0]
 801d786:	681a      	ldr	r2, [r3, #0]
 801d788:	68fb      	ldr	r3, [r7, #12]
 801d78a:	681b      	ldr	r3, [r3, #0]
 801d78c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801d790:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 801d792:	68fb      	ldr	r3, [r7, #12]
 801d794:	681b      	ldr	r3, [r3, #0]
 801d796:	683a      	ldr	r2, [r7, #0]
 801d798:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801d79a:	68fb      	ldr	r3, [r7, #12]
 801d79c:	689b      	ldr	r3, [r3, #8]
 801d79e:	2b40      	cmp	r3, #64	@ 0x40
 801d7a0:	d138      	bne.n	801d814 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 801d7a2:	68fb      	ldr	r3, [r7, #12]
 801d7a4:	681b      	ldr	r3, [r3, #0]
 801d7a6:	687a      	ldr	r2, [r7, #4]
 801d7a8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 801d7aa:	68fb      	ldr	r3, [r7, #12]
 801d7ac:	681b      	ldr	r3, [r3, #0]
 801d7ae:	68ba      	ldr	r2, [r7, #8]
 801d7b0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 801d7b2:	e086      	b.n	801d8c2 <DMA_SetConfig+0x32a>
 801d7b4:	40020010 	.word	0x40020010
 801d7b8:	40020028 	.word	0x40020028
 801d7bc:	40020040 	.word	0x40020040
 801d7c0:	40020058 	.word	0x40020058
 801d7c4:	40020070 	.word	0x40020070
 801d7c8:	40020088 	.word	0x40020088
 801d7cc:	400200a0 	.word	0x400200a0
 801d7d0:	400200b8 	.word	0x400200b8
 801d7d4:	40020410 	.word	0x40020410
 801d7d8:	40020428 	.word	0x40020428
 801d7dc:	40020440 	.word	0x40020440
 801d7e0:	40020458 	.word	0x40020458
 801d7e4:	40020470 	.word	0x40020470
 801d7e8:	40020488 	.word	0x40020488
 801d7ec:	400204a0 	.word	0x400204a0
 801d7f0:	400204b8 	.word	0x400204b8
 801d7f4:	58025408 	.word	0x58025408
 801d7f8:	5802541c 	.word	0x5802541c
 801d7fc:	58025430 	.word	0x58025430
 801d800:	58025444 	.word	0x58025444
 801d804:	58025458 	.word	0x58025458
 801d808:	5802546c 	.word	0x5802546c
 801d80c:	58025480 	.word	0x58025480
 801d810:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 801d814:	68fb      	ldr	r3, [r7, #12]
 801d816:	681b      	ldr	r3, [r3, #0]
 801d818:	68ba      	ldr	r2, [r7, #8]
 801d81a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 801d81c:	68fb      	ldr	r3, [r7, #12]
 801d81e:	681b      	ldr	r3, [r3, #0]
 801d820:	687a      	ldr	r2, [r7, #4]
 801d822:	60da      	str	r2, [r3, #12]
}
 801d824:	e04d      	b.n	801d8c2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801d826:	68fb      	ldr	r3, [r7, #12]
 801d828:	681b      	ldr	r3, [r3, #0]
 801d82a:	4a29      	ldr	r2, [pc, #164]	@ (801d8d0 <DMA_SetConfig+0x338>)
 801d82c:	4293      	cmp	r3, r2
 801d82e:	d022      	beq.n	801d876 <DMA_SetConfig+0x2de>
 801d830:	68fb      	ldr	r3, [r7, #12]
 801d832:	681b      	ldr	r3, [r3, #0]
 801d834:	4a27      	ldr	r2, [pc, #156]	@ (801d8d4 <DMA_SetConfig+0x33c>)
 801d836:	4293      	cmp	r3, r2
 801d838:	d01d      	beq.n	801d876 <DMA_SetConfig+0x2de>
 801d83a:	68fb      	ldr	r3, [r7, #12]
 801d83c:	681b      	ldr	r3, [r3, #0]
 801d83e:	4a26      	ldr	r2, [pc, #152]	@ (801d8d8 <DMA_SetConfig+0x340>)
 801d840:	4293      	cmp	r3, r2
 801d842:	d018      	beq.n	801d876 <DMA_SetConfig+0x2de>
 801d844:	68fb      	ldr	r3, [r7, #12]
 801d846:	681b      	ldr	r3, [r3, #0]
 801d848:	4a24      	ldr	r2, [pc, #144]	@ (801d8dc <DMA_SetConfig+0x344>)
 801d84a:	4293      	cmp	r3, r2
 801d84c:	d013      	beq.n	801d876 <DMA_SetConfig+0x2de>
 801d84e:	68fb      	ldr	r3, [r7, #12]
 801d850:	681b      	ldr	r3, [r3, #0]
 801d852:	4a23      	ldr	r2, [pc, #140]	@ (801d8e0 <DMA_SetConfig+0x348>)
 801d854:	4293      	cmp	r3, r2
 801d856:	d00e      	beq.n	801d876 <DMA_SetConfig+0x2de>
 801d858:	68fb      	ldr	r3, [r7, #12]
 801d85a:	681b      	ldr	r3, [r3, #0]
 801d85c:	4a21      	ldr	r2, [pc, #132]	@ (801d8e4 <DMA_SetConfig+0x34c>)
 801d85e:	4293      	cmp	r3, r2
 801d860:	d009      	beq.n	801d876 <DMA_SetConfig+0x2de>
 801d862:	68fb      	ldr	r3, [r7, #12]
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	4a20      	ldr	r2, [pc, #128]	@ (801d8e8 <DMA_SetConfig+0x350>)
 801d868:	4293      	cmp	r3, r2
 801d86a:	d004      	beq.n	801d876 <DMA_SetConfig+0x2de>
 801d86c:	68fb      	ldr	r3, [r7, #12]
 801d86e:	681b      	ldr	r3, [r3, #0]
 801d870:	4a1e      	ldr	r2, [pc, #120]	@ (801d8ec <DMA_SetConfig+0x354>)
 801d872:	4293      	cmp	r3, r2
 801d874:	d101      	bne.n	801d87a <DMA_SetConfig+0x2e2>
 801d876:	2301      	movs	r3, #1
 801d878:	e000      	b.n	801d87c <DMA_SetConfig+0x2e4>
 801d87a:	2300      	movs	r3, #0
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	d020      	beq.n	801d8c2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801d880:	68fb      	ldr	r3, [r7, #12]
 801d882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d884:	f003 031f 	and.w	r3, r3, #31
 801d888:	2201      	movs	r2, #1
 801d88a:	409a      	lsls	r2, r3
 801d88c:	693b      	ldr	r3, [r7, #16]
 801d88e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 801d890:	68fb      	ldr	r3, [r7, #12]
 801d892:	681b      	ldr	r3, [r3, #0]
 801d894:	683a      	ldr	r2, [r7, #0]
 801d896:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801d898:	68fb      	ldr	r3, [r7, #12]
 801d89a:	689b      	ldr	r3, [r3, #8]
 801d89c:	2b40      	cmp	r3, #64	@ 0x40
 801d89e:	d108      	bne.n	801d8b2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 801d8a0:	68fb      	ldr	r3, [r7, #12]
 801d8a2:	681b      	ldr	r3, [r3, #0]
 801d8a4:	687a      	ldr	r2, [r7, #4]
 801d8a6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 801d8a8:	68fb      	ldr	r3, [r7, #12]
 801d8aa:	681b      	ldr	r3, [r3, #0]
 801d8ac:	68ba      	ldr	r2, [r7, #8]
 801d8ae:	60da      	str	r2, [r3, #12]
}
 801d8b0:	e007      	b.n	801d8c2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 801d8b2:	68fb      	ldr	r3, [r7, #12]
 801d8b4:	681b      	ldr	r3, [r3, #0]
 801d8b6:	68ba      	ldr	r2, [r7, #8]
 801d8b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	687a      	ldr	r2, [r7, #4]
 801d8c0:	60da      	str	r2, [r3, #12]
}
 801d8c2:	bf00      	nop
 801d8c4:	371c      	adds	r7, #28
 801d8c6:	46bd      	mov	sp, r7
 801d8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8cc:	4770      	bx	lr
 801d8ce:	bf00      	nop
 801d8d0:	58025408 	.word	0x58025408
 801d8d4:	5802541c 	.word	0x5802541c
 801d8d8:	58025430 	.word	0x58025430
 801d8dc:	58025444 	.word	0x58025444
 801d8e0:	58025458 	.word	0x58025458
 801d8e4:	5802546c 	.word	0x5802546c
 801d8e8:	58025480 	.word	0x58025480
 801d8ec:	58025494 	.word	0x58025494

0801d8f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801d8f0:	b480      	push	{r7}
 801d8f2:	b085      	sub	sp, #20
 801d8f4:	af00      	add	r7, sp, #0
 801d8f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	681b      	ldr	r3, [r3, #0]
 801d8fc:	4a42      	ldr	r2, [pc, #264]	@ (801da08 <DMA_CalcBaseAndBitshift+0x118>)
 801d8fe:	4293      	cmp	r3, r2
 801d900:	d04a      	beq.n	801d998 <DMA_CalcBaseAndBitshift+0xa8>
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	681b      	ldr	r3, [r3, #0]
 801d906:	4a41      	ldr	r2, [pc, #260]	@ (801da0c <DMA_CalcBaseAndBitshift+0x11c>)
 801d908:	4293      	cmp	r3, r2
 801d90a:	d045      	beq.n	801d998 <DMA_CalcBaseAndBitshift+0xa8>
 801d90c:	687b      	ldr	r3, [r7, #4]
 801d90e:	681b      	ldr	r3, [r3, #0]
 801d910:	4a3f      	ldr	r2, [pc, #252]	@ (801da10 <DMA_CalcBaseAndBitshift+0x120>)
 801d912:	4293      	cmp	r3, r2
 801d914:	d040      	beq.n	801d998 <DMA_CalcBaseAndBitshift+0xa8>
 801d916:	687b      	ldr	r3, [r7, #4]
 801d918:	681b      	ldr	r3, [r3, #0]
 801d91a:	4a3e      	ldr	r2, [pc, #248]	@ (801da14 <DMA_CalcBaseAndBitshift+0x124>)
 801d91c:	4293      	cmp	r3, r2
 801d91e:	d03b      	beq.n	801d998 <DMA_CalcBaseAndBitshift+0xa8>
 801d920:	687b      	ldr	r3, [r7, #4]
 801d922:	681b      	ldr	r3, [r3, #0]
 801d924:	4a3c      	ldr	r2, [pc, #240]	@ (801da18 <DMA_CalcBaseAndBitshift+0x128>)
 801d926:	4293      	cmp	r3, r2
 801d928:	d036      	beq.n	801d998 <DMA_CalcBaseAndBitshift+0xa8>
 801d92a:	687b      	ldr	r3, [r7, #4]
 801d92c:	681b      	ldr	r3, [r3, #0]
 801d92e:	4a3b      	ldr	r2, [pc, #236]	@ (801da1c <DMA_CalcBaseAndBitshift+0x12c>)
 801d930:	4293      	cmp	r3, r2
 801d932:	d031      	beq.n	801d998 <DMA_CalcBaseAndBitshift+0xa8>
 801d934:	687b      	ldr	r3, [r7, #4]
 801d936:	681b      	ldr	r3, [r3, #0]
 801d938:	4a39      	ldr	r2, [pc, #228]	@ (801da20 <DMA_CalcBaseAndBitshift+0x130>)
 801d93a:	4293      	cmp	r3, r2
 801d93c:	d02c      	beq.n	801d998 <DMA_CalcBaseAndBitshift+0xa8>
 801d93e:	687b      	ldr	r3, [r7, #4]
 801d940:	681b      	ldr	r3, [r3, #0]
 801d942:	4a38      	ldr	r2, [pc, #224]	@ (801da24 <DMA_CalcBaseAndBitshift+0x134>)
 801d944:	4293      	cmp	r3, r2
 801d946:	d027      	beq.n	801d998 <DMA_CalcBaseAndBitshift+0xa8>
 801d948:	687b      	ldr	r3, [r7, #4]
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	4a36      	ldr	r2, [pc, #216]	@ (801da28 <DMA_CalcBaseAndBitshift+0x138>)
 801d94e:	4293      	cmp	r3, r2
 801d950:	d022      	beq.n	801d998 <DMA_CalcBaseAndBitshift+0xa8>
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	681b      	ldr	r3, [r3, #0]
 801d956:	4a35      	ldr	r2, [pc, #212]	@ (801da2c <DMA_CalcBaseAndBitshift+0x13c>)
 801d958:	4293      	cmp	r3, r2
 801d95a:	d01d      	beq.n	801d998 <DMA_CalcBaseAndBitshift+0xa8>
 801d95c:	687b      	ldr	r3, [r7, #4]
 801d95e:	681b      	ldr	r3, [r3, #0]
 801d960:	4a33      	ldr	r2, [pc, #204]	@ (801da30 <DMA_CalcBaseAndBitshift+0x140>)
 801d962:	4293      	cmp	r3, r2
 801d964:	d018      	beq.n	801d998 <DMA_CalcBaseAndBitshift+0xa8>
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	681b      	ldr	r3, [r3, #0]
 801d96a:	4a32      	ldr	r2, [pc, #200]	@ (801da34 <DMA_CalcBaseAndBitshift+0x144>)
 801d96c:	4293      	cmp	r3, r2
 801d96e:	d013      	beq.n	801d998 <DMA_CalcBaseAndBitshift+0xa8>
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	681b      	ldr	r3, [r3, #0]
 801d974:	4a30      	ldr	r2, [pc, #192]	@ (801da38 <DMA_CalcBaseAndBitshift+0x148>)
 801d976:	4293      	cmp	r3, r2
 801d978:	d00e      	beq.n	801d998 <DMA_CalcBaseAndBitshift+0xa8>
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	681b      	ldr	r3, [r3, #0]
 801d97e:	4a2f      	ldr	r2, [pc, #188]	@ (801da3c <DMA_CalcBaseAndBitshift+0x14c>)
 801d980:	4293      	cmp	r3, r2
 801d982:	d009      	beq.n	801d998 <DMA_CalcBaseAndBitshift+0xa8>
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	681b      	ldr	r3, [r3, #0]
 801d988:	4a2d      	ldr	r2, [pc, #180]	@ (801da40 <DMA_CalcBaseAndBitshift+0x150>)
 801d98a:	4293      	cmp	r3, r2
 801d98c:	d004      	beq.n	801d998 <DMA_CalcBaseAndBitshift+0xa8>
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	681b      	ldr	r3, [r3, #0]
 801d992:	4a2c      	ldr	r2, [pc, #176]	@ (801da44 <DMA_CalcBaseAndBitshift+0x154>)
 801d994:	4293      	cmp	r3, r2
 801d996:	d101      	bne.n	801d99c <DMA_CalcBaseAndBitshift+0xac>
 801d998:	2301      	movs	r3, #1
 801d99a:	e000      	b.n	801d99e <DMA_CalcBaseAndBitshift+0xae>
 801d99c:	2300      	movs	r3, #0
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	d024      	beq.n	801d9ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	681b      	ldr	r3, [r3, #0]
 801d9a6:	b2db      	uxtb	r3, r3
 801d9a8:	3b10      	subs	r3, #16
 801d9aa:	4a27      	ldr	r2, [pc, #156]	@ (801da48 <DMA_CalcBaseAndBitshift+0x158>)
 801d9ac:	fba2 2303 	umull	r2, r3, r2, r3
 801d9b0:	091b      	lsrs	r3, r3, #4
 801d9b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801d9b4:	68fb      	ldr	r3, [r7, #12]
 801d9b6:	f003 0307 	and.w	r3, r3, #7
 801d9ba:	4a24      	ldr	r2, [pc, #144]	@ (801da4c <DMA_CalcBaseAndBitshift+0x15c>)
 801d9bc:	5cd3      	ldrb	r3, [r2, r3]
 801d9be:	461a      	mov	r2, r3
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801d9c4:	68fb      	ldr	r3, [r7, #12]
 801d9c6:	2b03      	cmp	r3, #3
 801d9c8:	d908      	bls.n	801d9dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801d9ca:	687b      	ldr	r3, [r7, #4]
 801d9cc:	681b      	ldr	r3, [r3, #0]
 801d9ce:	461a      	mov	r2, r3
 801d9d0:	4b1f      	ldr	r3, [pc, #124]	@ (801da50 <DMA_CalcBaseAndBitshift+0x160>)
 801d9d2:	4013      	ands	r3, r2
 801d9d4:	1d1a      	adds	r2, r3, #4
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	659a      	str	r2, [r3, #88]	@ 0x58
 801d9da:	e00d      	b.n	801d9f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801d9dc:	687b      	ldr	r3, [r7, #4]
 801d9de:	681b      	ldr	r3, [r3, #0]
 801d9e0:	461a      	mov	r2, r3
 801d9e2:	4b1b      	ldr	r3, [pc, #108]	@ (801da50 <DMA_CalcBaseAndBitshift+0x160>)
 801d9e4:	4013      	ands	r3, r2
 801d9e6:	687a      	ldr	r2, [r7, #4]
 801d9e8:	6593      	str	r3, [r2, #88]	@ 0x58
 801d9ea:	e005      	b.n	801d9f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801d9ec:	687b      	ldr	r3, [r7, #4]
 801d9ee:	681b      	ldr	r3, [r3, #0]
 801d9f0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801d9f8:	687b      	ldr	r3, [r7, #4]
 801d9fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801d9fc:	4618      	mov	r0, r3
 801d9fe:	3714      	adds	r7, #20
 801da00:	46bd      	mov	sp, r7
 801da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da06:	4770      	bx	lr
 801da08:	40020010 	.word	0x40020010
 801da0c:	40020028 	.word	0x40020028
 801da10:	40020040 	.word	0x40020040
 801da14:	40020058 	.word	0x40020058
 801da18:	40020070 	.word	0x40020070
 801da1c:	40020088 	.word	0x40020088
 801da20:	400200a0 	.word	0x400200a0
 801da24:	400200b8 	.word	0x400200b8
 801da28:	40020410 	.word	0x40020410
 801da2c:	40020428 	.word	0x40020428
 801da30:	40020440 	.word	0x40020440
 801da34:	40020458 	.word	0x40020458
 801da38:	40020470 	.word	0x40020470
 801da3c:	40020488 	.word	0x40020488
 801da40:	400204a0 	.word	0x400204a0
 801da44:	400204b8 	.word	0x400204b8
 801da48:	aaaaaaab 	.word	0xaaaaaaab
 801da4c:	0802b668 	.word	0x0802b668
 801da50:	fffffc00 	.word	0xfffffc00

0801da54 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801da54:	b480      	push	{r7}
 801da56:	b085      	sub	sp, #20
 801da58:	af00      	add	r7, sp, #0
 801da5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801da5c:	2300      	movs	r3, #0
 801da5e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	699b      	ldr	r3, [r3, #24]
 801da64:	2b00      	cmp	r3, #0
 801da66:	d120      	bne.n	801daaa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801da6c:	2b03      	cmp	r3, #3
 801da6e:	d858      	bhi.n	801db22 <DMA_CheckFifoParam+0xce>
 801da70:	a201      	add	r2, pc, #4	@ (adr r2, 801da78 <DMA_CheckFifoParam+0x24>)
 801da72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801da76:	bf00      	nop
 801da78:	0801da89 	.word	0x0801da89
 801da7c:	0801da9b 	.word	0x0801da9b
 801da80:	0801da89 	.word	0x0801da89
 801da84:	0801db23 	.word	0x0801db23
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801da88:	687b      	ldr	r3, [r7, #4]
 801da8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801da90:	2b00      	cmp	r3, #0
 801da92:	d048      	beq.n	801db26 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801da94:	2301      	movs	r3, #1
 801da96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801da98:	e045      	b.n	801db26 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da9e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801daa2:	d142      	bne.n	801db2a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801daa4:	2301      	movs	r3, #1
 801daa6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801daa8:	e03f      	b.n	801db2a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801daaa:	687b      	ldr	r3, [r7, #4]
 801daac:	699b      	ldr	r3, [r3, #24]
 801daae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801dab2:	d123      	bne.n	801dafc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dab8:	2b03      	cmp	r3, #3
 801daba:	d838      	bhi.n	801db2e <DMA_CheckFifoParam+0xda>
 801dabc:	a201      	add	r2, pc, #4	@ (adr r2, 801dac4 <DMA_CheckFifoParam+0x70>)
 801dabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dac2:	bf00      	nop
 801dac4:	0801dad5 	.word	0x0801dad5
 801dac8:	0801dadb 	.word	0x0801dadb
 801dacc:	0801dad5 	.word	0x0801dad5
 801dad0:	0801daed 	.word	0x0801daed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801dad4:	2301      	movs	r3, #1
 801dad6:	73fb      	strb	r3, [r7, #15]
        break;
 801dad8:	e030      	b.n	801db3c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801dada:	687b      	ldr	r3, [r7, #4]
 801dadc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dade:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	d025      	beq.n	801db32 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801dae6:	2301      	movs	r3, #1
 801dae8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801daea:	e022      	b.n	801db32 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801daec:	687b      	ldr	r3, [r7, #4]
 801daee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801daf0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801daf4:	d11f      	bne.n	801db36 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801daf6:	2301      	movs	r3, #1
 801daf8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801dafa:	e01c      	b.n	801db36 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801db00:	2b02      	cmp	r3, #2
 801db02:	d902      	bls.n	801db0a <DMA_CheckFifoParam+0xb6>
 801db04:	2b03      	cmp	r3, #3
 801db06:	d003      	beq.n	801db10 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801db08:	e018      	b.n	801db3c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801db0a:	2301      	movs	r3, #1
 801db0c:	73fb      	strb	r3, [r7, #15]
        break;
 801db0e:	e015      	b.n	801db3c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801db10:	687b      	ldr	r3, [r7, #4]
 801db12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801db14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801db18:	2b00      	cmp	r3, #0
 801db1a:	d00e      	beq.n	801db3a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801db1c:	2301      	movs	r3, #1
 801db1e:	73fb      	strb	r3, [r7, #15]
    break;
 801db20:	e00b      	b.n	801db3a <DMA_CheckFifoParam+0xe6>
        break;
 801db22:	bf00      	nop
 801db24:	e00a      	b.n	801db3c <DMA_CheckFifoParam+0xe8>
        break;
 801db26:	bf00      	nop
 801db28:	e008      	b.n	801db3c <DMA_CheckFifoParam+0xe8>
        break;
 801db2a:	bf00      	nop
 801db2c:	e006      	b.n	801db3c <DMA_CheckFifoParam+0xe8>
        break;
 801db2e:	bf00      	nop
 801db30:	e004      	b.n	801db3c <DMA_CheckFifoParam+0xe8>
        break;
 801db32:	bf00      	nop
 801db34:	e002      	b.n	801db3c <DMA_CheckFifoParam+0xe8>
        break;
 801db36:	bf00      	nop
 801db38:	e000      	b.n	801db3c <DMA_CheckFifoParam+0xe8>
    break;
 801db3a:	bf00      	nop
    }
  }

  return status;
 801db3c:	7bfb      	ldrb	r3, [r7, #15]
}
 801db3e:	4618      	mov	r0, r3
 801db40:	3714      	adds	r7, #20
 801db42:	46bd      	mov	sp, r7
 801db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db48:	4770      	bx	lr
 801db4a:	bf00      	nop

0801db4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801db4c:	b480      	push	{r7}
 801db4e:	b085      	sub	sp, #20
 801db50:	af00      	add	r7, sp, #0
 801db52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	681b      	ldr	r3, [r3, #0]
 801db58:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	681b      	ldr	r3, [r3, #0]
 801db5e:	4a38      	ldr	r2, [pc, #224]	@ (801dc40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801db60:	4293      	cmp	r3, r2
 801db62:	d022      	beq.n	801dbaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	681b      	ldr	r3, [r3, #0]
 801db68:	4a36      	ldr	r2, [pc, #216]	@ (801dc44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801db6a:	4293      	cmp	r3, r2
 801db6c:	d01d      	beq.n	801dbaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	681b      	ldr	r3, [r3, #0]
 801db72:	4a35      	ldr	r2, [pc, #212]	@ (801dc48 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801db74:	4293      	cmp	r3, r2
 801db76:	d018      	beq.n	801dbaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	4a33      	ldr	r2, [pc, #204]	@ (801dc4c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801db7e:	4293      	cmp	r3, r2
 801db80:	d013      	beq.n	801dbaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801db82:	687b      	ldr	r3, [r7, #4]
 801db84:	681b      	ldr	r3, [r3, #0]
 801db86:	4a32      	ldr	r2, [pc, #200]	@ (801dc50 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801db88:	4293      	cmp	r3, r2
 801db8a:	d00e      	beq.n	801dbaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	681b      	ldr	r3, [r3, #0]
 801db90:	4a30      	ldr	r2, [pc, #192]	@ (801dc54 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801db92:	4293      	cmp	r3, r2
 801db94:	d009      	beq.n	801dbaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	681b      	ldr	r3, [r3, #0]
 801db9a:	4a2f      	ldr	r2, [pc, #188]	@ (801dc58 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801db9c:	4293      	cmp	r3, r2
 801db9e:	d004      	beq.n	801dbaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801dba0:	687b      	ldr	r3, [r7, #4]
 801dba2:	681b      	ldr	r3, [r3, #0]
 801dba4:	4a2d      	ldr	r2, [pc, #180]	@ (801dc5c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801dba6:	4293      	cmp	r3, r2
 801dba8:	d101      	bne.n	801dbae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801dbaa:	2301      	movs	r3, #1
 801dbac:	e000      	b.n	801dbb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801dbae:	2300      	movs	r3, #0
 801dbb0:	2b00      	cmp	r3, #0
 801dbb2:	d01a      	beq.n	801dbea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801dbb4:	687b      	ldr	r3, [r7, #4]
 801dbb6:	681b      	ldr	r3, [r3, #0]
 801dbb8:	b2db      	uxtb	r3, r3
 801dbba:	3b08      	subs	r3, #8
 801dbbc:	4a28      	ldr	r2, [pc, #160]	@ (801dc60 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801dbbe:	fba2 2303 	umull	r2, r3, r2, r3
 801dbc2:	091b      	lsrs	r3, r3, #4
 801dbc4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801dbc6:	68fa      	ldr	r2, [r7, #12]
 801dbc8:	4b26      	ldr	r3, [pc, #152]	@ (801dc64 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801dbca:	4413      	add	r3, r2
 801dbcc:	009b      	lsls	r3, r3, #2
 801dbce:	461a      	mov	r2, r3
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801dbd4:	687b      	ldr	r3, [r7, #4]
 801dbd6:	4a24      	ldr	r2, [pc, #144]	@ (801dc68 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801dbd8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801dbda:	68fb      	ldr	r3, [r7, #12]
 801dbdc:	f003 031f 	and.w	r3, r3, #31
 801dbe0:	2201      	movs	r2, #1
 801dbe2:	409a      	lsls	r2, r3
 801dbe4:	687b      	ldr	r3, [r7, #4]
 801dbe6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801dbe8:	e024      	b.n	801dc34 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	681b      	ldr	r3, [r3, #0]
 801dbee:	b2db      	uxtb	r3, r3
 801dbf0:	3b10      	subs	r3, #16
 801dbf2:	4a1e      	ldr	r2, [pc, #120]	@ (801dc6c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801dbf4:	fba2 2303 	umull	r2, r3, r2, r3
 801dbf8:	091b      	lsrs	r3, r3, #4
 801dbfa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801dbfc:	68bb      	ldr	r3, [r7, #8]
 801dbfe:	4a1c      	ldr	r2, [pc, #112]	@ (801dc70 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801dc00:	4293      	cmp	r3, r2
 801dc02:	d806      	bhi.n	801dc12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801dc04:	68bb      	ldr	r3, [r7, #8]
 801dc06:	4a1b      	ldr	r2, [pc, #108]	@ (801dc74 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801dc08:	4293      	cmp	r3, r2
 801dc0a:	d902      	bls.n	801dc12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801dc0c:	68fb      	ldr	r3, [r7, #12]
 801dc0e:	3308      	adds	r3, #8
 801dc10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801dc12:	68fa      	ldr	r2, [r7, #12]
 801dc14:	4b18      	ldr	r3, [pc, #96]	@ (801dc78 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801dc16:	4413      	add	r3, r2
 801dc18:	009b      	lsls	r3, r3, #2
 801dc1a:	461a      	mov	r2, r3
 801dc1c:	687b      	ldr	r3, [r7, #4]
 801dc1e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	4a16      	ldr	r2, [pc, #88]	@ (801dc7c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801dc24:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801dc26:	68fb      	ldr	r3, [r7, #12]
 801dc28:	f003 031f 	and.w	r3, r3, #31
 801dc2c:	2201      	movs	r2, #1
 801dc2e:	409a      	lsls	r2, r3
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801dc34:	bf00      	nop
 801dc36:	3714      	adds	r7, #20
 801dc38:	46bd      	mov	sp, r7
 801dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc3e:	4770      	bx	lr
 801dc40:	58025408 	.word	0x58025408
 801dc44:	5802541c 	.word	0x5802541c
 801dc48:	58025430 	.word	0x58025430
 801dc4c:	58025444 	.word	0x58025444
 801dc50:	58025458 	.word	0x58025458
 801dc54:	5802546c 	.word	0x5802546c
 801dc58:	58025480 	.word	0x58025480
 801dc5c:	58025494 	.word	0x58025494
 801dc60:	cccccccd 	.word	0xcccccccd
 801dc64:	16009600 	.word	0x16009600
 801dc68:	58025880 	.word	0x58025880
 801dc6c:	aaaaaaab 	.word	0xaaaaaaab
 801dc70:	400204b8 	.word	0x400204b8
 801dc74:	4002040f 	.word	0x4002040f
 801dc78:	10008200 	.word	0x10008200
 801dc7c:	40020880 	.word	0x40020880

0801dc80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801dc80:	b480      	push	{r7}
 801dc82:	b085      	sub	sp, #20
 801dc84:	af00      	add	r7, sp, #0
 801dc86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801dc88:	687b      	ldr	r3, [r7, #4]
 801dc8a:	685b      	ldr	r3, [r3, #4]
 801dc8c:	b2db      	uxtb	r3, r3
 801dc8e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801dc90:	68fb      	ldr	r3, [r7, #12]
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	d04a      	beq.n	801dd2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801dc96:	68fb      	ldr	r3, [r7, #12]
 801dc98:	2b08      	cmp	r3, #8
 801dc9a:	d847      	bhi.n	801dd2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	681b      	ldr	r3, [r3, #0]
 801dca0:	4a25      	ldr	r2, [pc, #148]	@ (801dd38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801dca2:	4293      	cmp	r3, r2
 801dca4:	d022      	beq.n	801dcec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	4a24      	ldr	r2, [pc, #144]	@ (801dd3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801dcac:	4293      	cmp	r3, r2
 801dcae:	d01d      	beq.n	801dcec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	4a22      	ldr	r2, [pc, #136]	@ (801dd40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801dcb6:	4293      	cmp	r3, r2
 801dcb8:	d018      	beq.n	801dcec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dcba:	687b      	ldr	r3, [r7, #4]
 801dcbc:	681b      	ldr	r3, [r3, #0]
 801dcbe:	4a21      	ldr	r2, [pc, #132]	@ (801dd44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801dcc0:	4293      	cmp	r3, r2
 801dcc2:	d013      	beq.n	801dcec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	4a1f      	ldr	r2, [pc, #124]	@ (801dd48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801dcca:	4293      	cmp	r3, r2
 801dccc:	d00e      	beq.n	801dcec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dcce:	687b      	ldr	r3, [r7, #4]
 801dcd0:	681b      	ldr	r3, [r3, #0]
 801dcd2:	4a1e      	ldr	r2, [pc, #120]	@ (801dd4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801dcd4:	4293      	cmp	r3, r2
 801dcd6:	d009      	beq.n	801dcec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	681b      	ldr	r3, [r3, #0]
 801dcdc:	4a1c      	ldr	r2, [pc, #112]	@ (801dd50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801dcde:	4293      	cmp	r3, r2
 801dce0:	d004      	beq.n	801dcec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801dce2:	687b      	ldr	r3, [r7, #4]
 801dce4:	681b      	ldr	r3, [r3, #0]
 801dce6:	4a1b      	ldr	r2, [pc, #108]	@ (801dd54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801dce8:	4293      	cmp	r3, r2
 801dcea:	d101      	bne.n	801dcf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801dcec:	2301      	movs	r3, #1
 801dcee:	e000      	b.n	801dcf2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801dcf0:	2300      	movs	r3, #0
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	d00a      	beq.n	801dd0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801dcf6:	68fa      	ldr	r2, [r7, #12]
 801dcf8:	4b17      	ldr	r3, [pc, #92]	@ (801dd58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801dcfa:	4413      	add	r3, r2
 801dcfc:	009b      	lsls	r3, r3, #2
 801dcfe:	461a      	mov	r2, r3
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	4a15      	ldr	r2, [pc, #84]	@ (801dd5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801dd08:	671a      	str	r2, [r3, #112]	@ 0x70
 801dd0a:	e009      	b.n	801dd20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801dd0c:	68fa      	ldr	r2, [r7, #12]
 801dd0e:	4b14      	ldr	r3, [pc, #80]	@ (801dd60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801dd10:	4413      	add	r3, r2
 801dd12:	009b      	lsls	r3, r3, #2
 801dd14:	461a      	mov	r2, r3
 801dd16:	687b      	ldr	r3, [r7, #4]
 801dd18:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	4a11      	ldr	r2, [pc, #68]	@ (801dd64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801dd1e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801dd20:	68fb      	ldr	r3, [r7, #12]
 801dd22:	3b01      	subs	r3, #1
 801dd24:	2201      	movs	r2, #1
 801dd26:	409a      	lsls	r2, r3
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801dd2c:	bf00      	nop
 801dd2e:	3714      	adds	r7, #20
 801dd30:	46bd      	mov	sp, r7
 801dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd36:	4770      	bx	lr
 801dd38:	58025408 	.word	0x58025408
 801dd3c:	5802541c 	.word	0x5802541c
 801dd40:	58025430 	.word	0x58025430
 801dd44:	58025444 	.word	0x58025444
 801dd48:	58025458 	.word	0x58025458
 801dd4c:	5802546c 	.word	0x5802546c
 801dd50:	58025480 	.word	0x58025480
 801dd54:	58025494 	.word	0x58025494
 801dd58:	1600963f 	.word	0x1600963f
 801dd5c:	58025940 	.word	0x58025940
 801dd60:	1000823f 	.word	0x1000823f
 801dd64:	40020940 	.word	0x40020940

0801dd68 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 801dd68:	b580      	push	{r7, lr}
 801dd6a:	b086      	sub	sp, #24
 801dd6c:	af00      	add	r7, sp, #0
 801dd6e:	60f8      	str	r0, [r7, #12]
 801dd70:	60b9      	str	r1, [r7, #8]
 801dd72:	607a      	str	r2, [r7, #4]
 801dd74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801dd76:	2300      	movs	r3, #0
 801dd78:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801dd7a:	68fb      	ldr	r3, [r7, #12]
 801dd7c:	689b      	ldr	r3, [r3, #8]
 801dd7e:	2b80      	cmp	r3, #128	@ 0x80
 801dd80:	d105      	bne.n	801dd8e <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801dd82:	68fb      	ldr	r3, [r7, #12]
 801dd84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801dd88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801dd8a:	2301      	movs	r3, #1
 801dd8c:	e315      	b.n	801e3ba <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 801dd8e:	68fb      	ldr	r3, [r7, #12]
 801dd90:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801dd94:	2b01      	cmp	r3, #1
 801dd96:	d101      	bne.n	801dd9c <HAL_DMAEx_MultiBufferStart_IT+0x34>
 801dd98:	2302      	movs	r3, #2
 801dd9a:	e30e      	b.n	801e3ba <HAL_DMAEx_MultiBufferStart_IT+0x652>
 801dd9c:	68fb      	ldr	r3, [r7, #12]
 801dd9e:	2201      	movs	r2, #1
 801dda0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801ddaa:	b2db      	uxtb	r3, r3
 801ddac:	2b01      	cmp	r3, #1
 801ddae:	f040 82fd 	bne.w	801e3ac <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801ddb2:	68fb      	ldr	r3, [r7, #12]
 801ddb4:	2202      	movs	r2, #2
 801ddb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801ddba:	68fb      	ldr	r3, [r7, #12]
 801ddbc:	2200      	movs	r2, #0
 801ddbe:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801ddc0:	68fb      	ldr	r3, [r7, #12]
 801ddc2:	681b      	ldr	r3, [r3, #0]
 801ddc4:	4a82      	ldr	r2, [pc, #520]	@ (801dfd0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 801ddc6:	4293      	cmp	r3, r2
 801ddc8:	d04a      	beq.n	801de60 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801ddca:	68fb      	ldr	r3, [r7, #12]
 801ddcc:	681b      	ldr	r3, [r3, #0]
 801ddce:	4a81      	ldr	r2, [pc, #516]	@ (801dfd4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 801ddd0:	4293      	cmp	r3, r2
 801ddd2:	d045      	beq.n	801de60 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801ddd4:	68fb      	ldr	r3, [r7, #12]
 801ddd6:	681b      	ldr	r3, [r3, #0]
 801ddd8:	4a7f      	ldr	r2, [pc, #508]	@ (801dfd8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 801ddda:	4293      	cmp	r3, r2
 801dddc:	d040      	beq.n	801de60 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801ddde:	68fb      	ldr	r3, [r7, #12]
 801dde0:	681b      	ldr	r3, [r3, #0]
 801dde2:	4a7e      	ldr	r2, [pc, #504]	@ (801dfdc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 801dde4:	4293      	cmp	r3, r2
 801dde6:	d03b      	beq.n	801de60 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801dde8:	68fb      	ldr	r3, [r7, #12]
 801ddea:	681b      	ldr	r3, [r3, #0]
 801ddec:	4a7c      	ldr	r2, [pc, #496]	@ (801dfe0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 801ddee:	4293      	cmp	r3, r2
 801ddf0:	d036      	beq.n	801de60 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801ddf2:	68fb      	ldr	r3, [r7, #12]
 801ddf4:	681b      	ldr	r3, [r3, #0]
 801ddf6:	4a7b      	ldr	r2, [pc, #492]	@ (801dfe4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 801ddf8:	4293      	cmp	r3, r2
 801ddfa:	d031      	beq.n	801de60 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801ddfc:	68fb      	ldr	r3, [r7, #12]
 801ddfe:	681b      	ldr	r3, [r3, #0]
 801de00:	4a79      	ldr	r2, [pc, #484]	@ (801dfe8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 801de02:	4293      	cmp	r3, r2
 801de04:	d02c      	beq.n	801de60 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801de06:	68fb      	ldr	r3, [r7, #12]
 801de08:	681b      	ldr	r3, [r3, #0]
 801de0a:	4a78      	ldr	r2, [pc, #480]	@ (801dfec <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 801de0c:	4293      	cmp	r3, r2
 801de0e:	d027      	beq.n	801de60 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801de10:	68fb      	ldr	r3, [r7, #12]
 801de12:	681b      	ldr	r3, [r3, #0]
 801de14:	4a76      	ldr	r2, [pc, #472]	@ (801dff0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 801de16:	4293      	cmp	r3, r2
 801de18:	d022      	beq.n	801de60 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801de1a:	68fb      	ldr	r3, [r7, #12]
 801de1c:	681b      	ldr	r3, [r3, #0]
 801de1e:	4a75      	ldr	r2, [pc, #468]	@ (801dff4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 801de20:	4293      	cmp	r3, r2
 801de22:	d01d      	beq.n	801de60 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801de24:	68fb      	ldr	r3, [r7, #12]
 801de26:	681b      	ldr	r3, [r3, #0]
 801de28:	4a73      	ldr	r2, [pc, #460]	@ (801dff8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 801de2a:	4293      	cmp	r3, r2
 801de2c:	d018      	beq.n	801de60 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801de2e:	68fb      	ldr	r3, [r7, #12]
 801de30:	681b      	ldr	r3, [r3, #0]
 801de32:	4a72      	ldr	r2, [pc, #456]	@ (801dffc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 801de34:	4293      	cmp	r3, r2
 801de36:	d013      	beq.n	801de60 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801de38:	68fb      	ldr	r3, [r7, #12]
 801de3a:	681b      	ldr	r3, [r3, #0]
 801de3c:	4a70      	ldr	r2, [pc, #448]	@ (801e000 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 801de3e:	4293      	cmp	r3, r2
 801de40:	d00e      	beq.n	801de60 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801de42:	68fb      	ldr	r3, [r7, #12]
 801de44:	681b      	ldr	r3, [r3, #0]
 801de46:	4a6f      	ldr	r2, [pc, #444]	@ (801e004 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 801de48:	4293      	cmp	r3, r2
 801de4a:	d009      	beq.n	801de60 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801de4c:	68fb      	ldr	r3, [r7, #12]
 801de4e:	681b      	ldr	r3, [r3, #0]
 801de50:	4a6d      	ldr	r2, [pc, #436]	@ (801e008 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 801de52:	4293      	cmp	r3, r2
 801de54:	d004      	beq.n	801de60 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801de56:	68fb      	ldr	r3, [r7, #12]
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	4a6c      	ldr	r2, [pc, #432]	@ (801e00c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 801de5c:	4293      	cmp	r3, r2
 801de5e:	d101      	bne.n	801de64 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 801de60:	2301      	movs	r3, #1
 801de62:	e000      	b.n	801de66 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 801de64:	2300      	movs	r3, #0
 801de66:	2b00      	cmp	r3, #0
 801de68:	d018      	beq.n	801de9c <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 801de6a:	68fb      	ldr	r3, [r7, #12]
 801de6c:	681b      	ldr	r3, [r3, #0]
 801de6e:	681a      	ldr	r2, [r3, #0]
 801de70:	68fb      	ldr	r3, [r7, #12]
 801de72:	681b      	ldr	r3, [r3, #0]
 801de74:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801de78:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 801de7a:	68fb      	ldr	r3, [r7, #12]
 801de7c:	681b      	ldr	r3, [r3, #0]
 801de7e:	683a      	ldr	r2, [r7, #0]
 801de80:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 801de82:	68fb      	ldr	r3, [r7, #12]
 801de84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801de86:	3308      	adds	r3, #8
 801de88:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801de8a:	68fb      	ldr	r3, [r7, #12]
 801de8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801de8e:	f003 031f 	and.w	r3, r3, #31
 801de92:	223f      	movs	r2, #63	@ 0x3f
 801de94:	409a      	lsls	r2, r3
 801de96:	693b      	ldr	r3, [r7, #16]
 801de98:	601a      	str	r2, [r3, #0]
 801de9a:	e018      	b.n	801dece <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 801de9c:	68fb      	ldr	r3, [r7, #12]
 801de9e:	681b      	ldr	r3, [r3, #0]
 801dea0:	6819      	ldr	r1, [r3, #0]
 801dea2:	68fb      	ldr	r3, [r7, #12]
 801dea4:	681a      	ldr	r2, [r3, #0]
 801dea6:	f248 0320 	movw	r3, #32800	@ 0x8020
 801deaa:	430b      	orrs	r3, r1
 801deac:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 801deae:	68fb      	ldr	r3, [r7, #12]
 801deb0:	681b      	ldr	r3, [r3, #0]
 801deb2:	683a      	ldr	r2, [r7, #0]
 801deb4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 801deb6:	68fb      	ldr	r3, [r7, #12]
 801deb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801deba:	3304      	adds	r3, #4
 801debc:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801debe:	68fb      	ldr	r3, [r7, #12]
 801dec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801dec2:	f003 031f 	and.w	r3, r3, #31
 801dec6:	2201      	movs	r2, #1
 801dec8:	409a      	lsls	r2, r3
 801deca:	693b      	ldr	r3, [r7, #16]
 801decc:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801dece:	6a3b      	ldr	r3, [r7, #32]
 801ded0:	687a      	ldr	r2, [r7, #4]
 801ded2:	68b9      	ldr	r1, [r7, #8]
 801ded4:	68f8      	ldr	r0, [r7, #12]
 801ded6:	f000 faa5 	bl	801e424 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801deda:	68fb      	ldr	r3, [r7, #12]
 801dedc:	681b      	ldr	r3, [r3, #0]
 801dede:	4a3c      	ldr	r2, [pc, #240]	@ (801dfd0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 801dee0:	4293      	cmp	r3, r2
 801dee2:	d072      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dee4:	68fb      	ldr	r3, [r7, #12]
 801dee6:	681b      	ldr	r3, [r3, #0]
 801dee8:	4a3a      	ldr	r2, [pc, #232]	@ (801dfd4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 801deea:	4293      	cmp	r3, r2
 801deec:	d06d      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801deee:	68fb      	ldr	r3, [r7, #12]
 801def0:	681b      	ldr	r3, [r3, #0]
 801def2:	4a39      	ldr	r2, [pc, #228]	@ (801dfd8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 801def4:	4293      	cmp	r3, r2
 801def6:	d068      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801def8:	68fb      	ldr	r3, [r7, #12]
 801defa:	681b      	ldr	r3, [r3, #0]
 801defc:	4a37      	ldr	r2, [pc, #220]	@ (801dfdc <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 801defe:	4293      	cmp	r3, r2
 801df00:	d063      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df02:	68fb      	ldr	r3, [r7, #12]
 801df04:	681b      	ldr	r3, [r3, #0]
 801df06:	4a36      	ldr	r2, [pc, #216]	@ (801dfe0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 801df08:	4293      	cmp	r3, r2
 801df0a:	d05e      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df0c:	68fb      	ldr	r3, [r7, #12]
 801df0e:	681b      	ldr	r3, [r3, #0]
 801df10:	4a34      	ldr	r2, [pc, #208]	@ (801dfe4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 801df12:	4293      	cmp	r3, r2
 801df14:	d059      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df16:	68fb      	ldr	r3, [r7, #12]
 801df18:	681b      	ldr	r3, [r3, #0]
 801df1a:	4a33      	ldr	r2, [pc, #204]	@ (801dfe8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 801df1c:	4293      	cmp	r3, r2
 801df1e:	d054      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df20:	68fb      	ldr	r3, [r7, #12]
 801df22:	681b      	ldr	r3, [r3, #0]
 801df24:	4a31      	ldr	r2, [pc, #196]	@ (801dfec <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 801df26:	4293      	cmp	r3, r2
 801df28:	d04f      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df2a:	68fb      	ldr	r3, [r7, #12]
 801df2c:	681b      	ldr	r3, [r3, #0]
 801df2e:	4a30      	ldr	r2, [pc, #192]	@ (801dff0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 801df30:	4293      	cmp	r3, r2
 801df32:	d04a      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df34:	68fb      	ldr	r3, [r7, #12]
 801df36:	681b      	ldr	r3, [r3, #0]
 801df38:	4a2e      	ldr	r2, [pc, #184]	@ (801dff4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 801df3a:	4293      	cmp	r3, r2
 801df3c:	d045      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df3e:	68fb      	ldr	r3, [r7, #12]
 801df40:	681b      	ldr	r3, [r3, #0]
 801df42:	4a2d      	ldr	r2, [pc, #180]	@ (801dff8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 801df44:	4293      	cmp	r3, r2
 801df46:	d040      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df48:	68fb      	ldr	r3, [r7, #12]
 801df4a:	681b      	ldr	r3, [r3, #0]
 801df4c:	4a2b      	ldr	r2, [pc, #172]	@ (801dffc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 801df4e:	4293      	cmp	r3, r2
 801df50:	d03b      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df52:	68fb      	ldr	r3, [r7, #12]
 801df54:	681b      	ldr	r3, [r3, #0]
 801df56:	4a2a      	ldr	r2, [pc, #168]	@ (801e000 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 801df58:	4293      	cmp	r3, r2
 801df5a:	d036      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df5c:	68fb      	ldr	r3, [r7, #12]
 801df5e:	681b      	ldr	r3, [r3, #0]
 801df60:	4a28      	ldr	r2, [pc, #160]	@ (801e004 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 801df62:	4293      	cmp	r3, r2
 801df64:	d031      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df66:	68fb      	ldr	r3, [r7, #12]
 801df68:	681b      	ldr	r3, [r3, #0]
 801df6a:	4a27      	ldr	r2, [pc, #156]	@ (801e008 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 801df6c:	4293      	cmp	r3, r2
 801df6e:	d02c      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	681b      	ldr	r3, [r3, #0]
 801df74:	4a25      	ldr	r2, [pc, #148]	@ (801e00c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 801df76:	4293      	cmp	r3, r2
 801df78:	d027      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df7a:	68fb      	ldr	r3, [r7, #12]
 801df7c:	681b      	ldr	r3, [r3, #0]
 801df7e:	4a24      	ldr	r2, [pc, #144]	@ (801e010 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 801df80:	4293      	cmp	r3, r2
 801df82:	d022      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df84:	68fb      	ldr	r3, [r7, #12]
 801df86:	681b      	ldr	r3, [r3, #0]
 801df88:	4a22      	ldr	r2, [pc, #136]	@ (801e014 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 801df8a:	4293      	cmp	r3, r2
 801df8c:	d01d      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df8e:	68fb      	ldr	r3, [r7, #12]
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	4a21      	ldr	r2, [pc, #132]	@ (801e018 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 801df94:	4293      	cmp	r3, r2
 801df96:	d018      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801df98:	68fb      	ldr	r3, [r7, #12]
 801df9a:	681b      	ldr	r3, [r3, #0]
 801df9c:	4a1f      	ldr	r2, [pc, #124]	@ (801e01c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 801df9e:	4293      	cmp	r3, r2
 801dfa0:	d013      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dfa2:	68fb      	ldr	r3, [r7, #12]
 801dfa4:	681b      	ldr	r3, [r3, #0]
 801dfa6:	4a1e      	ldr	r2, [pc, #120]	@ (801e020 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 801dfa8:	4293      	cmp	r3, r2
 801dfaa:	d00e      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dfac:	68fb      	ldr	r3, [r7, #12]
 801dfae:	681b      	ldr	r3, [r3, #0]
 801dfb0:	4a1c      	ldr	r2, [pc, #112]	@ (801e024 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 801dfb2:	4293      	cmp	r3, r2
 801dfb4:	d009      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dfb6:	68fb      	ldr	r3, [r7, #12]
 801dfb8:	681b      	ldr	r3, [r3, #0]
 801dfba:	4a1b      	ldr	r2, [pc, #108]	@ (801e028 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 801dfbc:	4293      	cmp	r3, r2
 801dfbe:	d004      	beq.n	801dfca <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801dfc0:	68fb      	ldr	r3, [r7, #12]
 801dfc2:	681b      	ldr	r3, [r3, #0]
 801dfc4:	4a19      	ldr	r2, [pc, #100]	@ (801e02c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 801dfc6:	4293      	cmp	r3, r2
 801dfc8:	d132      	bne.n	801e030 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 801dfca:	2301      	movs	r3, #1
 801dfcc:	e031      	b.n	801e032 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 801dfce:	bf00      	nop
 801dfd0:	40020010 	.word	0x40020010
 801dfd4:	40020028 	.word	0x40020028
 801dfd8:	40020040 	.word	0x40020040
 801dfdc:	40020058 	.word	0x40020058
 801dfe0:	40020070 	.word	0x40020070
 801dfe4:	40020088 	.word	0x40020088
 801dfe8:	400200a0 	.word	0x400200a0
 801dfec:	400200b8 	.word	0x400200b8
 801dff0:	40020410 	.word	0x40020410
 801dff4:	40020428 	.word	0x40020428
 801dff8:	40020440 	.word	0x40020440
 801dffc:	40020458 	.word	0x40020458
 801e000:	40020470 	.word	0x40020470
 801e004:	40020488 	.word	0x40020488
 801e008:	400204a0 	.word	0x400204a0
 801e00c:	400204b8 	.word	0x400204b8
 801e010:	58025408 	.word	0x58025408
 801e014:	5802541c 	.word	0x5802541c
 801e018:	58025430 	.word	0x58025430
 801e01c:	58025444 	.word	0x58025444
 801e020:	58025458 	.word	0x58025458
 801e024:	5802546c 	.word	0x5802546c
 801e028:	58025480 	.word	0x58025480
 801e02c:	58025494 	.word	0x58025494
 801e030:	2300      	movs	r3, #0
 801e032:	2b00      	cmp	r3, #0
 801e034:	d00d      	beq.n	801e052 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801e036:	68fb      	ldr	r3, [r7, #12]
 801e038:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e03a:	68fa      	ldr	r2, [r7, #12]
 801e03c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801e03e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e044:	2b00      	cmp	r3, #0
 801e046:	d004      	beq.n	801e052 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801e048:	68fb      	ldr	r3, [r7, #12]
 801e04a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e04c:	68fa      	ldr	r2, [r7, #12]
 801e04e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801e050:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801e052:	68fb      	ldr	r3, [r7, #12]
 801e054:	681b      	ldr	r3, [r3, #0]
 801e056:	4a3b      	ldr	r2, [pc, #236]	@ (801e144 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 801e058:	4293      	cmp	r3, r2
 801e05a:	d04a      	beq.n	801e0f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e05c:	68fb      	ldr	r3, [r7, #12]
 801e05e:	681b      	ldr	r3, [r3, #0]
 801e060:	4a39      	ldr	r2, [pc, #228]	@ (801e148 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 801e062:	4293      	cmp	r3, r2
 801e064:	d045      	beq.n	801e0f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e066:	68fb      	ldr	r3, [r7, #12]
 801e068:	681b      	ldr	r3, [r3, #0]
 801e06a:	4a38      	ldr	r2, [pc, #224]	@ (801e14c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 801e06c:	4293      	cmp	r3, r2
 801e06e:	d040      	beq.n	801e0f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e070:	68fb      	ldr	r3, [r7, #12]
 801e072:	681b      	ldr	r3, [r3, #0]
 801e074:	4a36      	ldr	r2, [pc, #216]	@ (801e150 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 801e076:	4293      	cmp	r3, r2
 801e078:	d03b      	beq.n	801e0f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e07a:	68fb      	ldr	r3, [r7, #12]
 801e07c:	681b      	ldr	r3, [r3, #0]
 801e07e:	4a35      	ldr	r2, [pc, #212]	@ (801e154 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 801e080:	4293      	cmp	r3, r2
 801e082:	d036      	beq.n	801e0f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e084:	68fb      	ldr	r3, [r7, #12]
 801e086:	681b      	ldr	r3, [r3, #0]
 801e088:	4a33      	ldr	r2, [pc, #204]	@ (801e158 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 801e08a:	4293      	cmp	r3, r2
 801e08c:	d031      	beq.n	801e0f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e08e:	68fb      	ldr	r3, [r7, #12]
 801e090:	681b      	ldr	r3, [r3, #0]
 801e092:	4a32      	ldr	r2, [pc, #200]	@ (801e15c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 801e094:	4293      	cmp	r3, r2
 801e096:	d02c      	beq.n	801e0f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e098:	68fb      	ldr	r3, [r7, #12]
 801e09a:	681b      	ldr	r3, [r3, #0]
 801e09c:	4a30      	ldr	r2, [pc, #192]	@ (801e160 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 801e09e:	4293      	cmp	r3, r2
 801e0a0:	d027      	beq.n	801e0f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e0a2:	68fb      	ldr	r3, [r7, #12]
 801e0a4:	681b      	ldr	r3, [r3, #0]
 801e0a6:	4a2f      	ldr	r2, [pc, #188]	@ (801e164 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 801e0a8:	4293      	cmp	r3, r2
 801e0aa:	d022      	beq.n	801e0f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e0ac:	68fb      	ldr	r3, [r7, #12]
 801e0ae:	681b      	ldr	r3, [r3, #0]
 801e0b0:	4a2d      	ldr	r2, [pc, #180]	@ (801e168 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 801e0b2:	4293      	cmp	r3, r2
 801e0b4:	d01d      	beq.n	801e0f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e0b6:	68fb      	ldr	r3, [r7, #12]
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	4a2c      	ldr	r2, [pc, #176]	@ (801e16c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 801e0bc:	4293      	cmp	r3, r2
 801e0be:	d018      	beq.n	801e0f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e0c0:	68fb      	ldr	r3, [r7, #12]
 801e0c2:	681b      	ldr	r3, [r3, #0]
 801e0c4:	4a2a      	ldr	r2, [pc, #168]	@ (801e170 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 801e0c6:	4293      	cmp	r3, r2
 801e0c8:	d013      	beq.n	801e0f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e0ca:	68fb      	ldr	r3, [r7, #12]
 801e0cc:	681b      	ldr	r3, [r3, #0]
 801e0ce:	4a29      	ldr	r2, [pc, #164]	@ (801e174 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 801e0d0:	4293      	cmp	r3, r2
 801e0d2:	d00e      	beq.n	801e0f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e0d4:	68fb      	ldr	r3, [r7, #12]
 801e0d6:	681b      	ldr	r3, [r3, #0]
 801e0d8:	4a27      	ldr	r2, [pc, #156]	@ (801e178 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 801e0da:	4293      	cmp	r3, r2
 801e0dc:	d009      	beq.n	801e0f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e0de:	68fb      	ldr	r3, [r7, #12]
 801e0e0:	681b      	ldr	r3, [r3, #0]
 801e0e2:	4a26      	ldr	r2, [pc, #152]	@ (801e17c <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 801e0e4:	4293      	cmp	r3, r2
 801e0e6:	d004      	beq.n	801e0f2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e0e8:	68fb      	ldr	r3, [r7, #12]
 801e0ea:	681b      	ldr	r3, [r3, #0]
 801e0ec:	4a24      	ldr	r2, [pc, #144]	@ (801e180 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 801e0ee:	4293      	cmp	r3, r2
 801e0f0:	d101      	bne.n	801e0f6 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 801e0f2:	2301      	movs	r3, #1
 801e0f4:	e000      	b.n	801e0f8 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 801e0f6:	2300      	movs	r3, #0
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	d043      	beq.n	801e184 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 801e0fc:	68fb      	ldr	r3, [r7, #12]
 801e0fe:	681b      	ldr	r3, [r3, #0]
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	f023 021e 	bic.w	r2, r3, #30
 801e106:	68fb      	ldr	r3, [r7, #12]
 801e108:	681b      	ldr	r3, [r3, #0]
 801e10a:	f042 0216 	orr.w	r2, r2, #22
 801e10e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	681b      	ldr	r3, [r3, #0]
 801e114:	695a      	ldr	r2, [r3, #20]
 801e116:	68fb      	ldr	r3, [r7, #12]
 801e118:	681b      	ldr	r3, [r3, #0]
 801e11a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801e11e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e120:	68fb      	ldr	r3, [r7, #12]
 801e122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e124:	2b00      	cmp	r3, #0
 801e126:	d103      	bne.n	801e130 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 801e128:	68fb      	ldr	r3, [r7, #12]
 801e12a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e12c:	2b00      	cmp	r3, #0
 801e12e:	d043      	beq.n	801e1b8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 801e130:	68fb      	ldr	r3, [r7, #12]
 801e132:	681b      	ldr	r3, [r3, #0]
 801e134:	681a      	ldr	r2, [r3, #0]
 801e136:	68fb      	ldr	r3, [r7, #12]
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	f042 0208 	orr.w	r2, r2, #8
 801e13e:	601a      	str	r2, [r3, #0]
 801e140:	e03a      	b.n	801e1b8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 801e142:	bf00      	nop
 801e144:	40020010 	.word	0x40020010
 801e148:	40020028 	.word	0x40020028
 801e14c:	40020040 	.word	0x40020040
 801e150:	40020058 	.word	0x40020058
 801e154:	40020070 	.word	0x40020070
 801e158:	40020088 	.word	0x40020088
 801e15c:	400200a0 	.word	0x400200a0
 801e160:	400200b8 	.word	0x400200b8
 801e164:	40020410 	.word	0x40020410
 801e168:	40020428 	.word	0x40020428
 801e16c:	40020440 	.word	0x40020440
 801e170:	40020458 	.word	0x40020458
 801e174:	40020470 	.word	0x40020470
 801e178:	40020488 	.word	0x40020488
 801e17c:	400204a0 	.word	0x400204a0
 801e180:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 801e184:	68fb      	ldr	r3, [r7, #12]
 801e186:	681b      	ldr	r3, [r3, #0]
 801e188:	681b      	ldr	r3, [r3, #0]
 801e18a:	f023 020e 	bic.w	r2, r3, #14
 801e18e:	68fb      	ldr	r3, [r7, #12]
 801e190:	681b      	ldr	r3, [r3, #0]
 801e192:	f042 020a 	orr.w	r2, r2, #10
 801e196:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e198:	68fb      	ldr	r3, [r7, #12]
 801e19a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e19c:	2b00      	cmp	r3, #0
 801e19e:	d103      	bne.n	801e1a8 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 801e1a0:	68fb      	ldr	r3, [r7, #12]
 801e1a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e1a4:	2b00      	cmp	r3, #0
 801e1a6:	d007      	beq.n	801e1b8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 801e1a8:	68fb      	ldr	r3, [r7, #12]
 801e1aa:	681b      	ldr	r3, [r3, #0]
 801e1ac:	681a      	ldr	r2, [r3, #0]
 801e1ae:	68fb      	ldr	r3, [r7, #12]
 801e1b0:	681b      	ldr	r3, [r3, #0]
 801e1b2:	f042 0204 	orr.w	r2, r2, #4
 801e1b6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801e1b8:	68fb      	ldr	r3, [r7, #12]
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	4a81      	ldr	r2, [pc, #516]	@ (801e3c4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 801e1be:	4293      	cmp	r3, r2
 801e1c0:	d072      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1c2:	68fb      	ldr	r3, [r7, #12]
 801e1c4:	681b      	ldr	r3, [r3, #0]
 801e1c6:	4a80      	ldr	r2, [pc, #512]	@ (801e3c8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 801e1c8:	4293      	cmp	r3, r2
 801e1ca:	d06d      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1cc:	68fb      	ldr	r3, [r7, #12]
 801e1ce:	681b      	ldr	r3, [r3, #0]
 801e1d0:	4a7e      	ldr	r2, [pc, #504]	@ (801e3cc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 801e1d2:	4293      	cmp	r3, r2
 801e1d4:	d068      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1d6:	68fb      	ldr	r3, [r7, #12]
 801e1d8:	681b      	ldr	r3, [r3, #0]
 801e1da:	4a7d      	ldr	r2, [pc, #500]	@ (801e3d0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 801e1dc:	4293      	cmp	r3, r2
 801e1de:	d063      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1e0:	68fb      	ldr	r3, [r7, #12]
 801e1e2:	681b      	ldr	r3, [r3, #0]
 801e1e4:	4a7b      	ldr	r2, [pc, #492]	@ (801e3d4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 801e1e6:	4293      	cmp	r3, r2
 801e1e8:	d05e      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1ea:	68fb      	ldr	r3, [r7, #12]
 801e1ec:	681b      	ldr	r3, [r3, #0]
 801e1ee:	4a7a      	ldr	r2, [pc, #488]	@ (801e3d8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 801e1f0:	4293      	cmp	r3, r2
 801e1f2:	d059      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1f4:	68fb      	ldr	r3, [r7, #12]
 801e1f6:	681b      	ldr	r3, [r3, #0]
 801e1f8:	4a78      	ldr	r2, [pc, #480]	@ (801e3dc <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 801e1fa:	4293      	cmp	r3, r2
 801e1fc:	d054      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e1fe:	68fb      	ldr	r3, [r7, #12]
 801e200:	681b      	ldr	r3, [r3, #0]
 801e202:	4a77      	ldr	r2, [pc, #476]	@ (801e3e0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 801e204:	4293      	cmp	r3, r2
 801e206:	d04f      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e208:	68fb      	ldr	r3, [r7, #12]
 801e20a:	681b      	ldr	r3, [r3, #0]
 801e20c:	4a75      	ldr	r2, [pc, #468]	@ (801e3e4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801e20e:	4293      	cmp	r3, r2
 801e210:	d04a      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e212:	68fb      	ldr	r3, [r7, #12]
 801e214:	681b      	ldr	r3, [r3, #0]
 801e216:	4a74      	ldr	r2, [pc, #464]	@ (801e3e8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 801e218:	4293      	cmp	r3, r2
 801e21a:	d045      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e21c:	68fb      	ldr	r3, [r7, #12]
 801e21e:	681b      	ldr	r3, [r3, #0]
 801e220:	4a72      	ldr	r2, [pc, #456]	@ (801e3ec <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 801e222:	4293      	cmp	r3, r2
 801e224:	d040      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e226:	68fb      	ldr	r3, [r7, #12]
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	4a71      	ldr	r2, [pc, #452]	@ (801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 801e22c:	4293      	cmp	r3, r2
 801e22e:	d03b      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e230:	68fb      	ldr	r3, [r7, #12]
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	4a6f      	ldr	r2, [pc, #444]	@ (801e3f4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 801e236:	4293      	cmp	r3, r2
 801e238:	d036      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e23a:	68fb      	ldr	r3, [r7, #12]
 801e23c:	681b      	ldr	r3, [r3, #0]
 801e23e:	4a6e      	ldr	r2, [pc, #440]	@ (801e3f8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 801e240:	4293      	cmp	r3, r2
 801e242:	d031      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e244:	68fb      	ldr	r3, [r7, #12]
 801e246:	681b      	ldr	r3, [r3, #0]
 801e248:	4a6c      	ldr	r2, [pc, #432]	@ (801e3fc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 801e24a:	4293      	cmp	r3, r2
 801e24c:	d02c      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e24e:	68fb      	ldr	r3, [r7, #12]
 801e250:	681b      	ldr	r3, [r3, #0]
 801e252:	4a6b      	ldr	r2, [pc, #428]	@ (801e400 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 801e254:	4293      	cmp	r3, r2
 801e256:	d027      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e258:	68fb      	ldr	r3, [r7, #12]
 801e25a:	681b      	ldr	r3, [r3, #0]
 801e25c:	4a69      	ldr	r2, [pc, #420]	@ (801e404 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 801e25e:	4293      	cmp	r3, r2
 801e260:	d022      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e262:	68fb      	ldr	r3, [r7, #12]
 801e264:	681b      	ldr	r3, [r3, #0]
 801e266:	4a68      	ldr	r2, [pc, #416]	@ (801e408 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 801e268:	4293      	cmp	r3, r2
 801e26a:	d01d      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e26c:	68fb      	ldr	r3, [r7, #12]
 801e26e:	681b      	ldr	r3, [r3, #0]
 801e270:	4a66      	ldr	r2, [pc, #408]	@ (801e40c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 801e272:	4293      	cmp	r3, r2
 801e274:	d018      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e276:	68fb      	ldr	r3, [r7, #12]
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	4a65      	ldr	r2, [pc, #404]	@ (801e410 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 801e27c:	4293      	cmp	r3, r2
 801e27e:	d013      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e280:	68fb      	ldr	r3, [r7, #12]
 801e282:	681b      	ldr	r3, [r3, #0]
 801e284:	4a63      	ldr	r2, [pc, #396]	@ (801e414 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 801e286:	4293      	cmp	r3, r2
 801e288:	d00e      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e28a:	68fb      	ldr	r3, [r7, #12]
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	4a62      	ldr	r2, [pc, #392]	@ (801e418 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 801e290:	4293      	cmp	r3, r2
 801e292:	d009      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e294:	68fb      	ldr	r3, [r7, #12]
 801e296:	681b      	ldr	r3, [r3, #0]
 801e298:	4a60      	ldr	r2, [pc, #384]	@ (801e41c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 801e29a:	4293      	cmp	r3, r2
 801e29c:	d004      	beq.n	801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e29e:	68fb      	ldr	r3, [r7, #12]
 801e2a0:	681b      	ldr	r3, [r3, #0]
 801e2a2:	4a5f      	ldr	r2, [pc, #380]	@ (801e420 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 801e2a4:	4293      	cmp	r3, r2
 801e2a6:	d101      	bne.n	801e2ac <HAL_DMAEx_MultiBufferStart_IT+0x544>
 801e2a8:	2301      	movs	r3, #1
 801e2aa:	e000      	b.n	801e2ae <HAL_DMAEx_MultiBufferStart_IT+0x546>
 801e2ac:	2300      	movs	r3, #0
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d01a      	beq.n	801e2e8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801e2b2:	68fb      	ldr	r3, [r7, #12]
 801e2b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e2b6:	681b      	ldr	r3, [r3, #0]
 801e2b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	d007      	beq.n	801e2d0 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801e2c0:	68fb      	ldr	r3, [r7, #12]
 801e2c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e2c4:	681a      	ldr	r2, [r3, #0]
 801e2c6:	68fb      	ldr	r3, [r7, #12]
 801e2c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e2ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e2ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 801e2d0:	68fb      	ldr	r3, [r7, #12]
 801e2d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e2d4:	2b00      	cmp	r3, #0
 801e2d6:	d007      	beq.n	801e2e8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801e2d8:	68fb      	ldr	r3, [r7, #12]
 801e2da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e2dc:	681a      	ldr	r2, [r3, #0]
 801e2de:	68fb      	ldr	r3, [r7, #12]
 801e2e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e2e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e2e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 801e2e8:	68fb      	ldr	r3, [r7, #12]
 801e2ea:	681b      	ldr	r3, [r3, #0]
 801e2ec:	4a35      	ldr	r2, [pc, #212]	@ (801e3c4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 801e2ee:	4293      	cmp	r3, r2
 801e2f0:	d04a      	beq.n	801e388 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e2f2:	68fb      	ldr	r3, [r7, #12]
 801e2f4:	681b      	ldr	r3, [r3, #0]
 801e2f6:	4a34      	ldr	r2, [pc, #208]	@ (801e3c8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 801e2f8:	4293      	cmp	r3, r2
 801e2fa:	d045      	beq.n	801e388 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e2fc:	68fb      	ldr	r3, [r7, #12]
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	4a32      	ldr	r2, [pc, #200]	@ (801e3cc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 801e302:	4293      	cmp	r3, r2
 801e304:	d040      	beq.n	801e388 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e306:	68fb      	ldr	r3, [r7, #12]
 801e308:	681b      	ldr	r3, [r3, #0]
 801e30a:	4a31      	ldr	r2, [pc, #196]	@ (801e3d0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 801e30c:	4293      	cmp	r3, r2
 801e30e:	d03b      	beq.n	801e388 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e310:	68fb      	ldr	r3, [r7, #12]
 801e312:	681b      	ldr	r3, [r3, #0]
 801e314:	4a2f      	ldr	r2, [pc, #188]	@ (801e3d4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 801e316:	4293      	cmp	r3, r2
 801e318:	d036      	beq.n	801e388 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e31a:	68fb      	ldr	r3, [r7, #12]
 801e31c:	681b      	ldr	r3, [r3, #0]
 801e31e:	4a2e      	ldr	r2, [pc, #184]	@ (801e3d8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 801e320:	4293      	cmp	r3, r2
 801e322:	d031      	beq.n	801e388 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e324:	68fb      	ldr	r3, [r7, #12]
 801e326:	681b      	ldr	r3, [r3, #0]
 801e328:	4a2c      	ldr	r2, [pc, #176]	@ (801e3dc <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 801e32a:	4293      	cmp	r3, r2
 801e32c:	d02c      	beq.n	801e388 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e32e:	68fb      	ldr	r3, [r7, #12]
 801e330:	681b      	ldr	r3, [r3, #0]
 801e332:	4a2b      	ldr	r2, [pc, #172]	@ (801e3e0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 801e334:	4293      	cmp	r3, r2
 801e336:	d027      	beq.n	801e388 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e338:	68fb      	ldr	r3, [r7, #12]
 801e33a:	681b      	ldr	r3, [r3, #0]
 801e33c:	4a29      	ldr	r2, [pc, #164]	@ (801e3e4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801e33e:	4293      	cmp	r3, r2
 801e340:	d022      	beq.n	801e388 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e342:	68fb      	ldr	r3, [r7, #12]
 801e344:	681b      	ldr	r3, [r3, #0]
 801e346:	4a28      	ldr	r2, [pc, #160]	@ (801e3e8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 801e348:	4293      	cmp	r3, r2
 801e34a:	d01d      	beq.n	801e388 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e34c:	68fb      	ldr	r3, [r7, #12]
 801e34e:	681b      	ldr	r3, [r3, #0]
 801e350:	4a26      	ldr	r2, [pc, #152]	@ (801e3ec <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 801e352:	4293      	cmp	r3, r2
 801e354:	d018      	beq.n	801e388 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e356:	68fb      	ldr	r3, [r7, #12]
 801e358:	681b      	ldr	r3, [r3, #0]
 801e35a:	4a25      	ldr	r2, [pc, #148]	@ (801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 801e35c:	4293      	cmp	r3, r2
 801e35e:	d013      	beq.n	801e388 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e360:	68fb      	ldr	r3, [r7, #12]
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	4a23      	ldr	r2, [pc, #140]	@ (801e3f4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 801e366:	4293      	cmp	r3, r2
 801e368:	d00e      	beq.n	801e388 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e36a:	68fb      	ldr	r3, [r7, #12]
 801e36c:	681b      	ldr	r3, [r3, #0]
 801e36e:	4a22      	ldr	r2, [pc, #136]	@ (801e3f8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 801e370:	4293      	cmp	r3, r2
 801e372:	d009      	beq.n	801e388 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	4a20      	ldr	r2, [pc, #128]	@ (801e3fc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 801e37a:	4293      	cmp	r3, r2
 801e37c:	d004      	beq.n	801e388 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e37e:	68fb      	ldr	r3, [r7, #12]
 801e380:	681b      	ldr	r3, [r3, #0]
 801e382:	4a1f      	ldr	r2, [pc, #124]	@ (801e400 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 801e384:	4293      	cmp	r3, r2
 801e386:	d108      	bne.n	801e39a <HAL_DMAEx_MultiBufferStart_IT+0x632>
 801e388:	68fb      	ldr	r3, [r7, #12]
 801e38a:	681b      	ldr	r3, [r3, #0]
 801e38c:	681a      	ldr	r2, [r3, #0]
 801e38e:	68fb      	ldr	r3, [r7, #12]
 801e390:	681b      	ldr	r3, [r3, #0]
 801e392:	f042 0201 	orr.w	r2, r2, #1
 801e396:	601a      	str	r2, [r3, #0]
 801e398:	e00e      	b.n	801e3b8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 801e39a:	68fb      	ldr	r3, [r7, #12]
 801e39c:	681b      	ldr	r3, [r3, #0]
 801e39e:	681a      	ldr	r2, [r3, #0]
 801e3a0:	68fb      	ldr	r3, [r7, #12]
 801e3a2:	681b      	ldr	r3, [r3, #0]
 801e3a4:	f042 0201 	orr.w	r2, r2, #1
 801e3a8:	601a      	str	r2, [r3, #0]
 801e3aa:	e005      	b.n	801e3b8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801e3ac:	68fb      	ldr	r3, [r7, #12]
 801e3ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801e3b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 801e3b4:	2301      	movs	r3, #1
 801e3b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801e3b8:	7dfb      	ldrb	r3, [r7, #23]
}
 801e3ba:	4618      	mov	r0, r3
 801e3bc:	3718      	adds	r7, #24
 801e3be:	46bd      	mov	sp, r7
 801e3c0:	bd80      	pop	{r7, pc}
 801e3c2:	bf00      	nop
 801e3c4:	40020010 	.word	0x40020010
 801e3c8:	40020028 	.word	0x40020028
 801e3cc:	40020040 	.word	0x40020040
 801e3d0:	40020058 	.word	0x40020058
 801e3d4:	40020070 	.word	0x40020070
 801e3d8:	40020088 	.word	0x40020088
 801e3dc:	400200a0 	.word	0x400200a0
 801e3e0:	400200b8 	.word	0x400200b8
 801e3e4:	40020410 	.word	0x40020410
 801e3e8:	40020428 	.word	0x40020428
 801e3ec:	40020440 	.word	0x40020440
 801e3f0:	40020458 	.word	0x40020458
 801e3f4:	40020470 	.word	0x40020470
 801e3f8:	40020488 	.word	0x40020488
 801e3fc:	400204a0 	.word	0x400204a0
 801e400:	400204b8 	.word	0x400204b8
 801e404:	58025408 	.word	0x58025408
 801e408:	5802541c 	.word	0x5802541c
 801e40c:	58025430 	.word	0x58025430
 801e410:	58025444 	.word	0x58025444
 801e414:	58025458 	.word	0x58025458
 801e418:	5802546c 	.word	0x5802546c
 801e41c:	58025480 	.word	0x58025480
 801e420:	58025494 	.word	0x58025494

0801e424 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801e424:	b480      	push	{r7}
 801e426:	b085      	sub	sp, #20
 801e428:	af00      	add	r7, sp, #0
 801e42a:	60f8      	str	r0, [r7, #12]
 801e42c:	60b9      	str	r1, [r7, #8]
 801e42e:	607a      	str	r2, [r7, #4]
 801e430:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801e432:	68fb      	ldr	r3, [r7, #12]
 801e434:	681b      	ldr	r3, [r3, #0]
 801e436:	4a46      	ldr	r2, [pc, #280]	@ (801e550 <DMA_MultiBufferSetConfig+0x12c>)
 801e438:	4293      	cmp	r3, r2
 801e43a:	d04a      	beq.n	801e4d2 <DMA_MultiBufferSetConfig+0xae>
 801e43c:	68fb      	ldr	r3, [r7, #12]
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	4a44      	ldr	r2, [pc, #272]	@ (801e554 <DMA_MultiBufferSetConfig+0x130>)
 801e442:	4293      	cmp	r3, r2
 801e444:	d045      	beq.n	801e4d2 <DMA_MultiBufferSetConfig+0xae>
 801e446:	68fb      	ldr	r3, [r7, #12]
 801e448:	681b      	ldr	r3, [r3, #0]
 801e44a:	4a43      	ldr	r2, [pc, #268]	@ (801e558 <DMA_MultiBufferSetConfig+0x134>)
 801e44c:	4293      	cmp	r3, r2
 801e44e:	d040      	beq.n	801e4d2 <DMA_MultiBufferSetConfig+0xae>
 801e450:	68fb      	ldr	r3, [r7, #12]
 801e452:	681b      	ldr	r3, [r3, #0]
 801e454:	4a41      	ldr	r2, [pc, #260]	@ (801e55c <DMA_MultiBufferSetConfig+0x138>)
 801e456:	4293      	cmp	r3, r2
 801e458:	d03b      	beq.n	801e4d2 <DMA_MultiBufferSetConfig+0xae>
 801e45a:	68fb      	ldr	r3, [r7, #12]
 801e45c:	681b      	ldr	r3, [r3, #0]
 801e45e:	4a40      	ldr	r2, [pc, #256]	@ (801e560 <DMA_MultiBufferSetConfig+0x13c>)
 801e460:	4293      	cmp	r3, r2
 801e462:	d036      	beq.n	801e4d2 <DMA_MultiBufferSetConfig+0xae>
 801e464:	68fb      	ldr	r3, [r7, #12]
 801e466:	681b      	ldr	r3, [r3, #0]
 801e468:	4a3e      	ldr	r2, [pc, #248]	@ (801e564 <DMA_MultiBufferSetConfig+0x140>)
 801e46a:	4293      	cmp	r3, r2
 801e46c:	d031      	beq.n	801e4d2 <DMA_MultiBufferSetConfig+0xae>
 801e46e:	68fb      	ldr	r3, [r7, #12]
 801e470:	681b      	ldr	r3, [r3, #0]
 801e472:	4a3d      	ldr	r2, [pc, #244]	@ (801e568 <DMA_MultiBufferSetConfig+0x144>)
 801e474:	4293      	cmp	r3, r2
 801e476:	d02c      	beq.n	801e4d2 <DMA_MultiBufferSetConfig+0xae>
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	681b      	ldr	r3, [r3, #0]
 801e47c:	4a3b      	ldr	r2, [pc, #236]	@ (801e56c <DMA_MultiBufferSetConfig+0x148>)
 801e47e:	4293      	cmp	r3, r2
 801e480:	d027      	beq.n	801e4d2 <DMA_MultiBufferSetConfig+0xae>
 801e482:	68fb      	ldr	r3, [r7, #12]
 801e484:	681b      	ldr	r3, [r3, #0]
 801e486:	4a3a      	ldr	r2, [pc, #232]	@ (801e570 <DMA_MultiBufferSetConfig+0x14c>)
 801e488:	4293      	cmp	r3, r2
 801e48a:	d022      	beq.n	801e4d2 <DMA_MultiBufferSetConfig+0xae>
 801e48c:	68fb      	ldr	r3, [r7, #12]
 801e48e:	681b      	ldr	r3, [r3, #0]
 801e490:	4a38      	ldr	r2, [pc, #224]	@ (801e574 <DMA_MultiBufferSetConfig+0x150>)
 801e492:	4293      	cmp	r3, r2
 801e494:	d01d      	beq.n	801e4d2 <DMA_MultiBufferSetConfig+0xae>
 801e496:	68fb      	ldr	r3, [r7, #12]
 801e498:	681b      	ldr	r3, [r3, #0]
 801e49a:	4a37      	ldr	r2, [pc, #220]	@ (801e578 <DMA_MultiBufferSetConfig+0x154>)
 801e49c:	4293      	cmp	r3, r2
 801e49e:	d018      	beq.n	801e4d2 <DMA_MultiBufferSetConfig+0xae>
 801e4a0:	68fb      	ldr	r3, [r7, #12]
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	4a35      	ldr	r2, [pc, #212]	@ (801e57c <DMA_MultiBufferSetConfig+0x158>)
 801e4a6:	4293      	cmp	r3, r2
 801e4a8:	d013      	beq.n	801e4d2 <DMA_MultiBufferSetConfig+0xae>
 801e4aa:	68fb      	ldr	r3, [r7, #12]
 801e4ac:	681b      	ldr	r3, [r3, #0]
 801e4ae:	4a34      	ldr	r2, [pc, #208]	@ (801e580 <DMA_MultiBufferSetConfig+0x15c>)
 801e4b0:	4293      	cmp	r3, r2
 801e4b2:	d00e      	beq.n	801e4d2 <DMA_MultiBufferSetConfig+0xae>
 801e4b4:	68fb      	ldr	r3, [r7, #12]
 801e4b6:	681b      	ldr	r3, [r3, #0]
 801e4b8:	4a32      	ldr	r2, [pc, #200]	@ (801e584 <DMA_MultiBufferSetConfig+0x160>)
 801e4ba:	4293      	cmp	r3, r2
 801e4bc:	d009      	beq.n	801e4d2 <DMA_MultiBufferSetConfig+0xae>
 801e4be:	68fb      	ldr	r3, [r7, #12]
 801e4c0:	681b      	ldr	r3, [r3, #0]
 801e4c2:	4a31      	ldr	r2, [pc, #196]	@ (801e588 <DMA_MultiBufferSetConfig+0x164>)
 801e4c4:	4293      	cmp	r3, r2
 801e4c6:	d004      	beq.n	801e4d2 <DMA_MultiBufferSetConfig+0xae>
 801e4c8:	68fb      	ldr	r3, [r7, #12]
 801e4ca:	681b      	ldr	r3, [r3, #0]
 801e4cc:	4a2f      	ldr	r2, [pc, #188]	@ (801e58c <DMA_MultiBufferSetConfig+0x168>)
 801e4ce:	4293      	cmp	r3, r2
 801e4d0:	d101      	bne.n	801e4d6 <DMA_MultiBufferSetConfig+0xb2>
 801e4d2:	2301      	movs	r3, #1
 801e4d4:	e000      	b.n	801e4d8 <DMA_MultiBufferSetConfig+0xb4>
 801e4d6:	2300      	movs	r3, #0
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	d019      	beq.n	801e510 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 801e4dc:	68fb      	ldr	r3, [r7, #12]
 801e4de:	681b      	ldr	r3, [r3, #0]
 801e4e0:	683a      	ldr	r2, [r7, #0]
 801e4e2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801e4e4:	68fb      	ldr	r3, [r7, #12]
 801e4e6:	689b      	ldr	r3, [r3, #8]
 801e4e8:	2b40      	cmp	r3, #64	@ 0x40
 801e4ea:	d108      	bne.n	801e4fe <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 801e4ec:	68fb      	ldr	r3, [r7, #12]
 801e4ee:	681b      	ldr	r3, [r3, #0]
 801e4f0:	687a      	ldr	r2, [r7, #4]
 801e4f2:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 801e4f4:	68fb      	ldr	r3, [r7, #12]
 801e4f6:	681b      	ldr	r3, [r3, #0]
 801e4f8:	68ba      	ldr	r2, [r7, #8]
 801e4fa:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 801e4fc:	e021      	b.n	801e542 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 801e4fe:	68fb      	ldr	r3, [r7, #12]
 801e500:	681b      	ldr	r3, [r3, #0]
 801e502:	68ba      	ldr	r2, [r7, #8]
 801e504:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 801e506:	68fb      	ldr	r3, [r7, #12]
 801e508:	681b      	ldr	r3, [r3, #0]
 801e50a:	687a      	ldr	r2, [r7, #4]
 801e50c:	60da      	str	r2, [r3, #12]
}
 801e50e:	e018      	b.n	801e542 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 801e510:	68fb      	ldr	r3, [r7, #12]
 801e512:	681b      	ldr	r3, [r3, #0]
 801e514:	683a      	ldr	r2, [r7, #0]
 801e516:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801e518:	68fb      	ldr	r3, [r7, #12]
 801e51a:	689b      	ldr	r3, [r3, #8]
 801e51c:	2b40      	cmp	r3, #64	@ 0x40
 801e51e:	d108      	bne.n	801e532 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 801e520:	68fb      	ldr	r3, [r7, #12]
 801e522:	681b      	ldr	r3, [r3, #0]
 801e524:	687a      	ldr	r2, [r7, #4]
 801e526:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 801e528:	68fb      	ldr	r3, [r7, #12]
 801e52a:	681b      	ldr	r3, [r3, #0]
 801e52c:	68ba      	ldr	r2, [r7, #8]
 801e52e:	60da      	str	r2, [r3, #12]
}
 801e530:	e007      	b.n	801e542 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 801e532:	68fb      	ldr	r3, [r7, #12]
 801e534:	681b      	ldr	r3, [r3, #0]
 801e536:	68ba      	ldr	r2, [r7, #8]
 801e538:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 801e53a:	68fb      	ldr	r3, [r7, #12]
 801e53c:	681b      	ldr	r3, [r3, #0]
 801e53e:	687a      	ldr	r2, [r7, #4]
 801e540:	60da      	str	r2, [r3, #12]
}
 801e542:	bf00      	nop
 801e544:	3714      	adds	r7, #20
 801e546:	46bd      	mov	sp, r7
 801e548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e54c:	4770      	bx	lr
 801e54e:	bf00      	nop
 801e550:	40020010 	.word	0x40020010
 801e554:	40020028 	.word	0x40020028
 801e558:	40020040 	.word	0x40020040
 801e55c:	40020058 	.word	0x40020058
 801e560:	40020070 	.word	0x40020070
 801e564:	40020088 	.word	0x40020088
 801e568:	400200a0 	.word	0x400200a0
 801e56c:	400200b8 	.word	0x400200b8
 801e570:	40020410 	.word	0x40020410
 801e574:	40020428 	.word	0x40020428
 801e578:	40020440 	.word	0x40020440
 801e57c:	40020458 	.word	0x40020458
 801e580:	40020470 	.word	0x40020470
 801e584:	40020488 	.word	0x40020488
 801e588:	400204a0 	.word	0x400204a0
 801e58c:	400204b8 	.word	0x400204b8

0801e590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801e590:	b480      	push	{r7}
 801e592:	b089      	sub	sp, #36	@ 0x24
 801e594:	af00      	add	r7, sp, #0
 801e596:	6078      	str	r0, [r7, #4]
 801e598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801e59a:	2300      	movs	r3, #0
 801e59c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801e59e:	4b89      	ldr	r3, [pc, #548]	@ (801e7c4 <HAL_GPIO_Init+0x234>)
 801e5a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801e5a2:	e194      	b.n	801e8ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801e5a4:	683b      	ldr	r3, [r7, #0]
 801e5a6:	681a      	ldr	r2, [r3, #0]
 801e5a8:	2101      	movs	r1, #1
 801e5aa:	69fb      	ldr	r3, [r7, #28]
 801e5ac:	fa01 f303 	lsl.w	r3, r1, r3
 801e5b0:	4013      	ands	r3, r2
 801e5b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801e5b4:	693b      	ldr	r3, [r7, #16]
 801e5b6:	2b00      	cmp	r3, #0
 801e5b8:	f000 8186 	beq.w	801e8c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801e5bc:	683b      	ldr	r3, [r7, #0]
 801e5be:	685b      	ldr	r3, [r3, #4]
 801e5c0:	f003 0303 	and.w	r3, r3, #3
 801e5c4:	2b01      	cmp	r3, #1
 801e5c6:	d005      	beq.n	801e5d4 <HAL_GPIO_Init+0x44>
 801e5c8:	683b      	ldr	r3, [r7, #0]
 801e5ca:	685b      	ldr	r3, [r3, #4]
 801e5cc:	f003 0303 	and.w	r3, r3, #3
 801e5d0:	2b02      	cmp	r3, #2
 801e5d2:	d130      	bne.n	801e636 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	689b      	ldr	r3, [r3, #8]
 801e5d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801e5da:	69fb      	ldr	r3, [r7, #28]
 801e5dc:	005b      	lsls	r3, r3, #1
 801e5de:	2203      	movs	r2, #3
 801e5e0:	fa02 f303 	lsl.w	r3, r2, r3
 801e5e4:	43db      	mvns	r3, r3
 801e5e6:	69ba      	ldr	r2, [r7, #24]
 801e5e8:	4013      	ands	r3, r2
 801e5ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801e5ec:	683b      	ldr	r3, [r7, #0]
 801e5ee:	68da      	ldr	r2, [r3, #12]
 801e5f0:	69fb      	ldr	r3, [r7, #28]
 801e5f2:	005b      	lsls	r3, r3, #1
 801e5f4:	fa02 f303 	lsl.w	r3, r2, r3
 801e5f8:	69ba      	ldr	r2, [r7, #24]
 801e5fa:	4313      	orrs	r3, r2
 801e5fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801e5fe:	687b      	ldr	r3, [r7, #4]
 801e600:	69ba      	ldr	r2, [r7, #24]
 801e602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	685b      	ldr	r3, [r3, #4]
 801e608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801e60a:	2201      	movs	r2, #1
 801e60c:	69fb      	ldr	r3, [r7, #28]
 801e60e:	fa02 f303 	lsl.w	r3, r2, r3
 801e612:	43db      	mvns	r3, r3
 801e614:	69ba      	ldr	r2, [r7, #24]
 801e616:	4013      	ands	r3, r2
 801e618:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801e61a:	683b      	ldr	r3, [r7, #0]
 801e61c:	685b      	ldr	r3, [r3, #4]
 801e61e:	091b      	lsrs	r3, r3, #4
 801e620:	f003 0201 	and.w	r2, r3, #1
 801e624:	69fb      	ldr	r3, [r7, #28]
 801e626:	fa02 f303 	lsl.w	r3, r2, r3
 801e62a:	69ba      	ldr	r2, [r7, #24]
 801e62c:	4313      	orrs	r3, r2
 801e62e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801e630:	687b      	ldr	r3, [r7, #4]
 801e632:	69ba      	ldr	r2, [r7, #24]
 801e634:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801e636:	683b      	ldr	r3, [r7, #0]
 801e638:	685b      	ldr	r3, [r3, #4]
 801e63a:	f003 0303 	and.w	r3, r3, #3
 801e63e:	2b03      	cmp	r3, #3
 801e640:	d017      	beq.n	801e672 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	68db      	ldr	r3, [r3, #12]
 801e646:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801e648:	69fb      	ldr	r3, [r7, #28]
 801e64a:	005b      	lsls	r3, r3, #1
 801e64c:	2203      	movs	r2, #3
 801e64e:	fa02 f303 	lsl.w	r3, r2, r3
 801e652:	43db      	mvns	r3, r3
 801e654:	69ba      	ldr	r2, [r7, #24]
 801e656:	4013      	ands	r3, r2
 801e658:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801e65a:	683b      	ldr	r3, [r7, #0]
 801e65c:	689a      	ldr	r2, [r3, #8]
 801e65e:	69fb      	ldr	r3, [r7, #28]
 801e660:	005b      	lsls	r3, r3, #1
 801e662:	fa02 f303 	lsl.w	r3, r2, r3
 801e666:	69ba      	ldr	r2, [r7, #24]
 801e668:	4313      	orrs	r3, r2
 801e66a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801e66c:	687b      	ldr	r3, [r7, #4]
 801e66e:	69ba      	ldr	r2, [r7, #24]
 801e670:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801e672:	683b      	ldr	r3, [r7, #0]
 801e674:	685b      	ldr	r3, [r3, #4]
 801e676:	f003 0303 	and.w	r3, r3, #3
 801e67a:	2b02      	cmp	r3, #2
 801e67c:	d123      	bne.n	801e6c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801e67e:	69fb      	ldr	r3, [r7, #28]
 801e680:	08da      	lsrs	r2, r3, #3
 801e682:	687b      	ldr	r3, [r7, #4]
 801e684:	3208      	adds	r2, #8
 801e686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e68a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801e68c:	69fb      	ldr	r3, [r7, #28]
 801e68e:	f003 0307 	and.w	r3, r3, #7
 801e692:	009b      	lsls	r3, r3, #2
 801e694:	220f      	movs	r2, #15
 801e696:	fa02 f303 	lsl.w	r3, r2, r3
 801e69a:	43db      	mvns	r3, r3
 801e69c:	69ba      	ldr	r2, [r7, #24]
 801e69e:	4013      	ands	r3, r2
 801e6a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801e6a2:	683b      	ldr	r3, [r7, #0]
 801e6a4:	691a      	ldr	r2, [r3, #16]
 801e6a6:	69fb      	ldr	r3, [r7, #28]
 801e6a8:	f003 0307 	and.w	r3, r3, #7
 801e6ac:	009b      	lsls	r3, r3, #2
 801e6ae:	fa02 f303 	lsl.w	r3, r2, r3
 801e6b2:	69ba      	ldr	r2, [r7, #24]
 801e6b4:	4313      	orrs	r3, r2
 801e6b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801e6b8:	69fb      	ldr	r3, [r7, #28]
 801e6ba:	08da      	lsrs	r2, r3, #3
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	3208      	adds	r2, #8
 801e6c0:	69b9      	ldr	r1, [r7, #24]
 801e6c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	681b      	ldr	r3, [r3, #0]
 801e6ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801e6cc:	69fb      	ldr	r3, [r7, #28]
 801e6ce:	005b      	lsls	r3, r3, #1
 801e6d0:	2203      	movs	r2, #3
 801e6d2:	fa02 f303 	lsl.w	r3, r2, r3
 801e6d6:	43db      	mvns	r3, r3
 801e6d8:	69ba      	ldr	r2, [r7, #24]
 801e6da:	4013      	ands	r3, r2
 801e6dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801e6de:	683b      	ldr	r3, [r7, #0]
 801e6e0:	685b      	ldr	r3, [r3, #4]
 801e6e2:	f003 0203 	and.w	r2, r3, #3
 801e6e6:	69fb      	ldr	r3, [r7, #28]
 801e6e8:	005b      	lsls	r3, r3, #1
 801e6ea:	fa02 f303 	lsl.w	r3, r2, r3
 801e6ee:	69ba      	ldr	r2, [r7, #24]
 801e6f0:	4313      	orrs	r3, r2
 801e6f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801e6f4:	687b      	ldr	r3, [r7, #4]
 801e6f6:	69ba      	ldr	r2, [r7, #24]
 801e6f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801e6fa:	683b      	ldr	r3, [r7, #0]
 801e6fc:	685b      	ldr	r3, [r3, #4]
 801e6fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801e702:	2b00      	cmp	r3, #0
 801e704:	f000 80e0 	beq.w	801e8c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801e708:	4b2f      	ldr	r3, [pc, #188]	@ (801e7c8 <HAL_GPIO_Init+0x238>)
 801e70a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801e70e:	4a2e      	ldr	r2, [pc, #184]	@ (801e7c8 <HAL_GPIO_Init+0x238>)
 801e710:	f043 0302 	orr.w	r3, r3, #2
 801e714:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801e718:	4b2b      	ldr	r3, [pc, #172]	@ (801e7c8 <HAL_GPIO_Init+0x238>)
 801e71a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801e71e:	f003 0302 	and.w	r3, r3, #2
 801e722:	60fb      	str	r3, [r7, #12]
 801e724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801e726:	4a29      	ldr	r2, [pc, #164]	@ (801e7cc <HAL_GPIO_Init+0x23c>)
 801e728:	69fb      	ldr	r3, [r7, #28]
 801e72a:	089b      	lsrs	r3, r3, #2
 801e72c:	3302      	adds	r3, #2
 801e72e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801e734:	69fb      	ldr	r3, [r7, #28]
 801e736:	f003 0303 	and.w	r3, r3, #3
 801e73a:	009b      	lsls	r3, r3, #2
 801e73c:	220f      	movs	r2, #15
 801e73e:	fa02 f303 	lsl.w	r3, r2, r3
 801e742:	43db      	mvns	r3, r3
 801e744:	69ba      	ldr	r2, [r7, #24]
 801e746:	4013      	ands	r3, r2
 801e748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	4a20      	ldr	r2, [pc, #128]	@ (801e7d0 <HAL_GPIO_Init+0x240>)
 801e74e:	4293      	cmp	r3, r2
 801e750:	d052      	beq.n	801e7f8 <HAL_GPIO_Init+0x268>
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	4a1f      	ldr	r2, [pc, #124]	@ (801e7d4 <HAL_GPIO_Init+0x244>)
 801e756:	4293      	cmp	r3, r2
 801e758:	d031      	beq.n	801e7be <HAL_GPIO_Init+0x22e>
 801e75a:	687b      	ldr	r3, [r7, #4]
 801e75c:	4a1e      	ldr	r2, [pc, #120]	@ (801e7d8 <HAL_GPIO_Init+0x248>)
 801e75e:	4293      	cmp	r3, r2
 801e760:	d02b      	beq.n	801e7ba <HAL_GPIO_Init+0x22a>
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	4a1d      	ldr	r2, [pc, #116]	@ (801e7dc <HAL_GPIO_Init+0x24c>)
 801e766:	4293      	cmp	r3, r2
 801e768:	d025      	beq.n	801e7b6 <HAL_GPIO_Init+0x226>
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	4a1c      	ldr	r2, [pc, #112]	@ (801e7e0 <HAL_GPIO_Init+0x250>)
 801e76e:	4293      	cmp	r3, r2
 801e770:	d01f      	beq.n	801e7b2 <HAL_GPIO_Init+0x222>
 801e772:	687b      	ldr	r3, [r7, #4]
 801e774:	4a1b      	ldr	r2, [pc, #108]	@ (801e7e4 <HAL_GPIO_Init+0x254>)
 801e776:	4293      	cmp	r3, r2
 801e778:	d019      	beq.n	801e7ae <HAL_GPIO_Init+0x21e>
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	4a1a      	ldr	r2, [pc, #104]	@ (801e7e8 <HAL_GPIO_Init+0x258>)
 801e77e:	4293      	cmp	r3, r2
 801e780:	d013      	beq.n	801e7aa <HAL_GPIO_Init+0x21a>
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	4a19      	ldr	r2, [pc, #100]	@ (801e7ec <HAL_GPIO_Init+0x25c>)
 801e786:	4293      	cmp	r3, r2
 801e788:	d00d      	beq.n	801e7a6 <HAL_GPIO_Init+0x216>
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	4a18      	ldr	r2, [pc, #96]	@ (801e7f0 <HAL_GPIO_Init+0x260>)
 801e78e:	4293      	cmp	r3, r2
 801e790:	d007      	beq.n	801e7a2 <HAL_GPIO_Init+0x212>
 801e792:	687b      	ldr	r3, [r7, #4]
 801e794:	4a17      	ldr	r2, [pc, #92]	@ (801e7f4 <HAL_GPIO_Init+0x264>)
 801e796:	4293      	cmp	r3, r2
 801e798:	d101      	bne.n	801e79e <HAL_GPIO_Init+0x20e>
 801e79a:	2309      	movs	r3, #9
 801e79c:	e02d      	b.n	801e7fa <HAL_GPIO_Init+0x26a>
 801e79e:	230a      	movs	r3, #10
 801e7a0:	e02b      	b.n	801e7fa <HAL_GPIO_Init+0x26a>
 801e7a2:	2308      	movs	r3, #8
 801e7a4:	e029      	b.n	801e7fa <HAL_GPIO_Init+0x26a>
 801e7a6:	2307      	movs	r3, #7
 801e7a8:	e027      	b.n	801e7fa <HAL_GPIO_Init+0x26a>
 801e7aa:	2306      	movs	r3, #6
 801e7ac:	e025      	b.n	801e7fa <HAL_GPIO_Init+0x26a>
 801e7ae:	2305      	movs	r3, #5
 801e7b0:	e023      	b.n	801e7fa <HAL_GPIO_Init+0x26a>
 801e7b2:	2304      	movs	r3, #4
 801e7b4:	e021      	b.n	801e7fa <HAL_GPIO_Init+0x26a>
 801e7b6:	2303      	movs	r3, #3
 801e7b8:	e01f      	b.n	801e7fa <HAL_GPIO_Init+0x26a>
 801e7ba:	2302      	movs	r3, #2
 801e7bc:	e01d      	b.n	801e7fa <HAL_GPIO_Init+0x26a>
 801e7be:	2301      	movs	r3, #1
 801e7c0:	e01b      	b.n	801e7fa <HAL_GPIO_Init+0x26a>
 801e7c2:	bf00      	nop
 801e7c4:	58000080 	.word	0x58000080
 801e7c8:	58024400 	.word	0x58024400
 801e7cc:	58000400 	.word	0x58000400
 801e7d0:	58020000 	.word	0x58020000
 801e7d4:	58020400 	.word	0x58020400
 801e7d8:	58020800 	.word	0x58020800
 801e7dc:	58020c00 	.word	0x58020c00
 801e7e0:	58021000 	.word	0x58021000
 801e7e4:	58021400 	.word	0x58021400
 801e7e8:	58021800 	.word	0x58021800
 801e7ec:	58021c00 	.word	0x58021c00
 801e7f0:	58022000 	.word	0x58022000
 801e7f4:	58022400 	.word	0x58022400
 801e7f8:	2300      	movs	r3, #0
 801e7fa:	69fa      	ldr	r2, [r7, #28]
 801e7fc:	f002 0203 	and.w	r2, r2, #3
 801e800:	0092      	lsls	r2, r2, #2
 801e802:	4093      	lsls	r3, r2
 801e804:	69ba      	ldr	r2, [r7, #24]
 801e806:	4313      	orrs	r3, r2
 801e808:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801e80a:	4938      	ldr	r1, [pc, #224]	@ (801e8ec <HAL_GPIO_Init+0x35c>)
 801e80c:	69fb      	ldr	r3, [r7, #28]
 801e80e:	089b      	lsrs	r3, r3, #2
 801e810:	3302      	adds	r3, #2
 801e812:	69ba      	ldr	r2, [r7, #24]
 801e814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801e818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801e81c:	681b      	ldr	r3, [r3, #0]
 801e81e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801e820:	693b      	ldr	r3, [r7, #16]
 801e822:	43db      	mvns	r3, r3
 801e824:	69ba      	ldr	r2, [r7, #24]
 801e826:	4013      	ands	r3, r2
 801e828:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801e82a:	683b      	ldr	r3, [r7, #0]
 801e82c:	685b      	ldr	r3, [r3, #4]
 801e82e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801e832:	2b00      	cmp	r3, #0
 801e834:	d003      	beq.n	801e83e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801e836:	69ba      	ldr	r2, [r7, #24]
 801e838:	693b      	ldr	r3, [r7, #16]
 801e83a:	4313      	orrs	r3, r2
 801e83c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801e83e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801e842:	69bb      	ldr	r3, [r7, #24]
 801e844:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801e846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801e84a:	685b      	ldr	r3, [r3, #4]
 801e84c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801e84e:	693b      	ldr	r3, [r7, #16]
 801e850:	43db      	mvns	r3, r3
 801e852:	69ba      	ldr	r2, [r7, #24]
 801e854:	4013      	ands	r3, r2
 801e856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801e858:	683b      	ldr	r3, [r7, #0]
 801e85a:	685b      	ldr	r3, [r3, #4]
 801e85c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801e860:	2b00      	cmp	r3, #0
 801e862:	d003      	beq.n	801e86c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801e864:	69ba      	ldr	r2, [r7, #24]
 801e866:	693b      	ldr	r3, [r7, #16]
 801e868:	4313      	orrs	r3, r2
 801e86a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801e86c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801e870:	69bb      	ldr	r3, [r7, #24]
 801e872:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801e874:	697b      	ldr	r3, [r7, #20]
 801e876:	685b      	ldr	r3, [r3, #4]
 801e878:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801e87a:	693b      	ldr	r3, [r7, #16]
 801e87c:	43db      	mvns	r3, r3
 801e87e:	69ba      	ldr	r2, [r7, #24]
 801e880:	4013      	ands	r3, r2
 801e882:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801e884:	683b      	ldr	r3, [r7, #0]
 801e886:	685b      	ldr	r3, [r3, #4]
 801e888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e88c:	2b00      	cmp	r3, #0
 801e88e:	d003      	beq.n	801e898 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801e890:	69ba      	ldr	r2, [r7, #24]
 801e892:	693b      	ldr	r3, [r7, #16]
 801e894:	4313      	orrs	r3, r2
 801e896:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801e898:	697b      	ldr	r3, [r7, #20]
 801e89a:	69ba      	ldr	r2, [r7, #24]
 801e89c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801e89e:	697b      	ldr	r3, [r7, #20]
 801e8a0:	681b      	ldr	r3, [r3, #0]
 801e8a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801e8a4:	693b      	ldr	r3, [r7, #16]
 801e8a6:	43db      	mvns	r3, r3
 801e8a8:	69ba      	ldr	r2, [r7, #24]
 801e8aa:	4013      	ands	r3, r2
 801e8ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801e8ae:	683b      	ldr	r3, [r7, #0]
 801e8b0:	685b      	ldr	r3, [r3, #4]
 801e8b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801e8b6:	2b00      	cmp	r3, #0
 801e8b8:	d003      	beq.n	801e8c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801e8ba:	69ba      	ldr	r2, [r7, #24]
 801e8bc:	693b      	ldr	r3, [r7, #16]
 801e8be:	4313      	orrs	r3, r2
 801e8c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801e8c2:	697b      	ldr	r3, [r7, #20]
 801e8c4:	69ba      	ldr	r2, [r7, #24]
 801e8c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801e8c8:	69fb      	ldr	r3, [r7, #28]
 801e8ca:	3301      	adds	r3, #1
 801e8cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801e8ce:	683b      	ldr	r3, [r7, #0]
 801e8d0:	681a      	ldr	r2, [r3, #0]
 801e8d2:	69fb      	ldr	r3, [r7, #28]
 801e8d4:	fa22 f303 	lsr.w	r3, r2, r3
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	f47f ae63 	bne.w	801e5a4 <HAL_GPIO_Init+0x14>
  }
}
 801e8de:	bf00      	nop
 801e8e0:	bf00      	nop
 801e8e2:	3724      	adds	r7, #36	@ 0x24
 801e8e4:	46bd      	mov	sp, r7
 801e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8ea:	4770      	bx	lr
 801e8ec:	58000400 	.word	0x58000400

0801e8f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801e8f0:	b480      	push	{r7}
 801e8f2:	b085      	sub	sp, #20
 801e8f4:	af00      	add	r7, sp, #0
 801e8f6:	6078      	str	r0, [r7, #4]
 801e8f8:	460b      	mov	r3, r1
 801e8fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801e8fc:	687b      	ldr	r3, [r7, #4]
 801e8fe:	691a      	ldr	r2, [r3, #16]
 801e900:	887b      	ldrh	r3, [r7, #2]
 801e902:	4013      	ands	r3, r2
 801e904:	2b00      	cmp	r3, #0
 801e906:	d002      	beq.n	801e90e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801e908:	2301      	movs	r3, #1
 801e90a:	73fb      	strb	r3, [r7, #15]
 801e90c:	e001      	b.n	801e912 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801e90e:	2300      	movs	r3, #0
 801e910:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801e912:	7bfb      	ldrb	r3, [r7, #15]
}
 801e914:	4618      	mov	r0, r3
 801e916:	3714      	adds	r7, #20
 801e918:	46bd      	mov	sp, r7
 801e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e91e:	4770      	bx	lr

0801e920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801e920:	b480      	push	{r7}
 801e922:	b083      	sub	sp, #12
 801e924:	af00      	add	r7, sp, #0
 801e926:	6078      	str	r0, [r7, #4]
 801e928:	460b      	mov	r3, r1
 801e92a:	807b      	strh	r3, [r7, #2]
 801e92c:	4613      	mov	r3, r2
 801e92e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801e930:	787b      	ldrb	r3, [r7, #1]
 801e932:	2b00      	cmp	r3, #0
 801e934:	d003      	beq.n	801e93e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801e936:	887a      	ldrh	r2, [r7, #2]
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801e93c:	e003      	b.n	801e946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801e93e:	887b      	ldrh	r3, [r7, #2]
 801e940:	041a      	lsls	r2, r3, #16
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	619a      	str	r2, [r3, #24]
}
 801e946:	bf00      	nop
 801e948:	370c      	adds	r7, #12
 801e94a:	46bd      	mov	sp, r7
 801e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e950:	4770      	bx	lr
	...

0801e954 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801e954:	b580      	push	{r7, lr}
 801e956:	b084      	sub	sp, #16
 801e958:	af00      	add	r7, sp, #0
 801e95a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801e95c:	4b19      	ldr	r3, [pc, #100]	@ (801e9c4 <HAL_PWREx_ConfigSupply+0x70>)
 801e95e:	68db      	ldr	r3, [r3, #12]
 801e960:	f003 0304 	and.w	r3, r3, #4
 801e964:	2b04      	cmp	r3, #4
 801e966:	d00a      	beq.n	801e97e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801e968:	4b16      	ldr	r3, [pc, #88]	@ (801e9c4 <HAL_PWREx_ConfigSupply+0x70>)
 801e96a:	68db      	ldr	r3, [r3, #12]
 801e96c:	f003 0307 	and.w	r3, r3, #7
 801e970:	687a      	ldr	r2, [r7, #4]
 801e972:	429a      	cmp	r2, r3
 801e974:	d001      	beq.n	801e97a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801e976:	2301      	movs	r3, #1
 801e978:	e01f      	b.n	801e9ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801e97a:	2300      	movs	r3, #0
 801e97c:	e01d      	b.n	801e9ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801e97e:	4b11      	ldr	r3, [pc, #68]	@ (801e9c4 <HAL_PWREx_ConfigSupply+0x70>)
 801e980:	68db      	ldr	r3, [r3, #12]
 801e982:	f023 0207 	bic.w	r2, r3, #7
 801e986:	490f      	ldr	r1, [pc, #60]	@ (801e9c4 <HAL_PWREx_ConfigSupply+0x70>)
 801e988:	687b      	ldr	r3, [r7, #4]
 801e98a:	4313      	orrs	r3, r2
 801e98c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801e98e:	f7fd f8e1 	bl	801bb54 <HAL_GetTick>
 801e992:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801e994:	e009      	b.n	801e9aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801e996:	f7fd f8dd 	bl	801bb54 <HAL_GetTick>
 801e99a:	4602      	mov	r2, r0
 801e99c:	68fb      	ldr	r3, [r7, #12]
 801e99e:	1ad3      	subs	r3, r2, r3
 801e9a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801e9a4:	d901      	bls.n	801e9aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801e9a6:	2301      	movs	r3, #1
 801e9a8:	e007      	b.n	801e9ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801e9aa:	4b06      	ldr	r3, [pc, #24]	@ (801e9c4 <HAL_PWREx_ConfigSupply+0x70>)
 801e9ac:	685b      	ldr	r3, [r3, #4]
 801e9ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801e9b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e9b6:	d1ee      	bne.n	801e996 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801e9b8:	2300      	movs	r3, #0
}
 801e9ba:	4618      	mov	r0, r3
 801e9bc:	3710      	adds	r7, #16
 801e9be:	46bd      	mov	sp, r7
 801e9c0:	bd80      	pop	{r7, pc}
 801e9c2:	bf00      	nop
 801e9c4:	58024800 	.word	0x58024800

0801e9c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801e9c8:	b580      	push	{r7, lr}
 801e9ca:	b08c      	sub	sp, #48	@ 0x30
 801e9cc:	af00      	add	r7, sp, #0
 801e9ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801e9d0:	687b      	ldr	r3, [r7, #4]
 801e9d2:	2b00      	cmp	r3, #0
 801e9d4:	d102      	bne.n	801e9dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801e9d6:	2301      	movs	r3, #1
 801e9d8:	f000 bc48 	b.w	801f26c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801e9dc:	687b      	ldr	r3, [r7, #4]
 801e9de:	681b      	ldr	r3, [r3, #0]
 801e9e0:	f003 0301 	and.w	r3, r3, #1
 801e9e4:	2b00      	cmp	r3, #0
 801e9e6:	f000 8088 	beq.w	801eafa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801e9ea:	4b99      	ldr	r3, [pc, #612]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801e9ec:	691b      	ldr	r3, [r3, #16]
 801e9ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801e9f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801e9f4:	4b96      	ldr	r3, [pc, #600]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801e9f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e9f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801e9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e9fc:	2b10      	cmp	r3, #16
 801e9fe:	d007      	beq.n	801ea10 <HAL_RCC_OscConfig+0x48>
 801ea00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea02:	2b18      	cmp	r3, #24
 801ea04:	d111      	bne.n	801ea2a <HAL_RCC_OscConfig+0x62>
 801ea06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ea08:	f003 0303 	and.w	r3, r3, #3
 801ea0c:	2b02      	cmp	r3, #2
 801ea0e:	d10c      	bne.n	801ea2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801ea10:	4b8f      	ldr	r3, [pc, #572]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ea12:	681b      	ldr	r3, [r3, #0]
 801ea14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ea18:	2b00      	cmp	r3, #0
 801ea1a:	d06d      	beq.n	801eaf8 <HAL_RCC_OscConfig+0x130>
 801ea1c:	687b      	ldr	r3, [r7, #4]
 801ea1e:	685b      	ldr	r3, [r3, #4]
 801ea20:	2b00      	cmp	r3, #0
 801ea22:	d169      	bne.n	801eaf8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801ea24:	2301      	movs	r3, #1
 801ea26:	f000 bc21 	b.w	801f26c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801ea2a:	687b      	ldr	r3, [r7, #4]
 801ea2c:	685b      	ldr	r3, [r3, #4]
 801ea2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ea32:	d106      	bne.n	801ea42 <HAL_RCC_OscConfig+0x7a>
 801ea34:	4b86      	ldr	r3, [pc, #536]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ea36:	681b      	ldr	r3, [r3, #0]
 801ea38:	4a85      	ldr	r2, [pc, #532]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ea3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ea3e:	6013      	str	r3, [r2, #0]
 801ea40:	e02e      	b.n	801eaa0 <HAL_RCC_OscConfig+0xd8>
 801ea42:	687b      	ldr	r3, [r7, #4]
 801ea44:	685b      	ldr	r3, [r3, #4]
 801ea46:	2b00      	cmp	r3, #0
 801ea48:	d10c      	bne.n	801ea64 <HAL_RCC_OscConfig+0x9c>
 801ea4a:	4b81      	ldr	r3, [pc, #516]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ea4c:	681b      	ldr	r3, [r3, #0]
 801ea4e:	4a80      	ldr	r2, [pc, #512]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ea50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ea54:	6013      	str	r3, [r2, #0]
 801ea56:	4b7e      	ldr	r3, [pc, #504]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ea58:	681b      	ldr	r3, [r3, #0]
 801ea5a:	4a7d      	ldr	r2, [pc, #500]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ea5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801ea60:	6013      	str	r3, [r2, #0]
 801ea62:	e01d      	b.n	801eaa0 <HAL_RCC_OscConfig+0xd8>
 801ea64:	687b      	ldr	r3, [r7, #4]
 801ea66:	685b      	ldr	r3, [r3, #4]
 801ea68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801ea6c:	d10c      	bne.n	801ea88 <HAL_RCC_OscConfig+0xc0>
 801ea6e:	4b78      	ldr	r3, [pc, #480]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ea70:	681b      	ldr	r3, [r3, #0]
 801ea72:	4a77      	ldr	r2, [pc, #476]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ea74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801ea78:	6013      	str	r3, [r2, #0]
 801ea7a:	4b75      	ldr	r3, [pc, #468]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ea7c:	681b      	ldr	r3, [r3, #0]
 801ea7e:	4a74      	ldr	r2, [pc, #464]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ea80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ea84:	6013      	str	r3, [r2, #0]
 801ea86:	e00b      	b.n	801eaa0 <HAL_RCC_OscConfig+0xd8>
 801ea88:	4b71      	ldr	r3, [pc, #452]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ea8a:	681b      	ldr	r3, [r3, #0]
 801ea8c:	4a70      	ldr	r2, [pc, #448]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ea8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ea92:	6013      	str	r3, [r2, #0]
 801ea94:	4b6e      	ldr	r3, [pc, #440]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	4a6d      	ldr	r2, [pc, #436]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ea9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801ea9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	685b      	ldr	r3, [r3, #4]
 801eaa4:	2b00      	cmp	r3, #0
 801eaa6:	d013      	beq.n	801ead0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801eaa8:	f7fd f854 	bl	801bb54 <HAL_GetTick>
 801eaac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801eaae:	e008      	b.n	801eac2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801eab0:	f7fd f850 	bl	801bb54 <HAL_GetTick>
 801eab4:	4602      	mov	r2, r0
 801eab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eab8:	1ad3      	subs	r3, r2, r3
 801eaba:	2b64      	cmp	r3, #100	@ 0x64
 801eabc:	d901      	bls.n	801eac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801eabe:	2303      	movs	r3, #3
 801eac0:	e3d4      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801eac2:	4b63      	ldr	r3, [pc, #396]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801eac4:	681b      	ldr	r3, [r3, #0]
 801eac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	d0f0      	beq.n	801eab0 <HAL_RCC_OscConfig+0xe8>
 801eace:	e014      	b.n	801eafa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ead0:	f7fd f840 	bl	801bb54 <HAL_GetTick>
 801ead4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801ead6:	e008      	b.n	801eaea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801ead8:	f7fd f83c 	bl	801bb54 <HAL_GetTick>
 801eadc:	4602      	mov	r2, r0
 801eade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eae0:	1ad3      	subs	r3, r2, r3
 801eae2:	2b64      	cmp	r3, #100	@ 0x64
 801eae4:	d901      	bls.n	801eaea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801eae6:	2303      	movs	r3, #3
 801eae8:	e3c0      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801eaea:	4b59      	ldr	r3, [pc, #356]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801eaec:	681b      	ldr	r3, [r3, #0]
 801eaee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	d1f0      	bne.n	801ead8 <HAL_RCC_OscConfig+0x110>
 801eaf6:	e000      	b.n	801eafa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801eaf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801eafa:	687b      	ldr	r3, [r7, #4]
 801eafc:	681b      	ldr	r3, [r3, #0]
 801eafe:	f003 0302 	and.w	r3, r3, #2
 801eb02:	2b00      	cmp	r3, #0
 801eb04:	f000 80ca 	beq.w	801ec9c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801eb08:	4b51      	ldr	r3, [pc, #324]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801eb0a:	691b      	ldr	r3, [r3, #16]
 801eb0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801eb10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801eb12:	4b4f      	ldr	r3, [pc, #316]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801eb14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801eb18:	6a3b      	ldr	r3, [r7, #32]
 801eb1a:	2b00      	cmp	r3, #0
 801eb1c:	d007      	beq.n	801eb2e <HAL_RCC_OscConfig+0x166>
 801eb1e:	6a3b      	ldr	r3, [r7, #32]
 801eb20:	2b18      	cmp	r3, #24
 801eb22:	d156      	bne.n	801ebd2 <HAL_RCC_OscConfig+0x20a>
 801eb24:	69fb      	ldr	r3, [r7, #28]
 801eb26:	f003 0303 	and.w	r3, r3, #3
 801eb2a:	2b00      	cmp	r3, #0
 801eb2c:	d151      	bne.n	801ebd2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801eb2e:	4b48      	ldr	r3, [pc, #288]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801eb30:	681b      	ldr	r3, [r3, #0]
 801eb32:	f003 0304 	and.w	r3, r3, #4
 801eb36:	2b00      	cmp	r3, #0
 801eb38:	d005      	beq.n	801eb46 <HAL_RCC_OscConfig+0x17e>
 801eb3a:	687b      	ldr	r3, [r7, #4]
 801eb3c:	68db      	ldr	r3, [r3, #12]
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	d101      	bne.n	801eb46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801eb42:	2301      	movs	r3, #1
 801eb44:	e392      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801eb46:	4b42      	ldr	r3, [pc, #264]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801eb48:	681b      	ldr	r3, [r3, #0]
 801eb4a:	f023 0219 	bic.w	r2, r3, #25
 801eb4e:	687b      	ldr	r3, [r7, #4]
 801eb50:	68db      	ldr	r3, [r3, #12]
 801eb52:	493f      	ldr	r1, [pc, #252]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801eb54:	4313      	orrs	r3, r2
 801eb56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801eb58:	f7fc fffc 	bl	801bb54 <HAL_GetTick>
 801eb5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801eb5e:	e008      	b.n	801eb72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801eb60:	f7fc fff8 	bl	801bb54 <HAL_GetTick>
 801eb64:	4602      	mov	r2, r0
 801eb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eb68:	1ad3      	subs	r3, r2, r3
 801eb6a:	2b02      	cmp	r3, #2
 801eb6c:	d901      	bls.n	801eb72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801eb6e:	2303      	movs	r3, #3
 801eb70:	e37c      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801eb72:	4b37      	ldr	r3, [pc, #220]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801eb74:	681b      	ldr	r3, [r3, #0]
 801eb76:	f003 0304 	and.w	r3, r3, #4
 801eb7a:	2b00      	cmp	r3, #0
 801eb7c:	d0f0      	beq.n	801eb60 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801eb7e:	f7fd f819 	bl	801bbb4 <HAL_GetREVID>
 801eb82:	4603      	mov	r3, r0
 801eb84:	f241 0203 	movw	r2, #4099	@ 0x1003
 801eb88:	4293      	cmp	r3, r2
 801eb8a:	d817      	bhi.n	801ebbc <HAL_RCC_OscConfig+0x1f4>
 801eb8c:	687b      	ldr	r3, [r7, #4]
 801eb8e:	691b      	ldr	r3, [r3, #16]
 801eb90:	2b40      	cmp	r3, #64	@ 0x40
 801eb92:	d108      	bne.n	801eba6 <HAL_RCC_OscConfig+0x1de>
 801eb94:	4b2e      	ldr	r3, [pc, #184]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801eb96:	685b      	ldr	r3, [r3, #4]
 801eb98:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801eb9c:	4a2c      	ldr	r2, [pc, #176]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801eb9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801eba2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801eba4:	e07a      	b.n	801ec9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801eba6:	4b2a      	ldr	r3, [pc, #168]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801eba8:	685b      	ldr	r3, [r3, #4]
 801ebaa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801ebae:	687b      	ldr	r3, [r7, #4]
 801ebb0:	691b      	ldr	r3, [r3, #16]
 801ebb2:	031b      	lsls	r3, r3, #12
 801ebb4:	4926      	ldr	r1, [pc, #152]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ebb6:	4313      	orrs	r3, r2
 801ebb8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801ebba:	e06f      	b.n	801ec9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ebbc:	4b24      	ldr	r3, [pc, #144]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ebbe:	685b      	ldr	r3, [r3, #4]
 801ebc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801ebc4:	687b      	ldr	r3, [r7, #4]
 801ebc6:	691b      	ldr	r3, [r3, #16]
 801ebc8:	061b      	lsls	r3, r3, #24
 801ebca:	4921      	ldr	r1, [pc, #132]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ebcc:	4313      	orrs	r3, r2
 801ebce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801ebd0:	e064      	b.n	801ec9c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801ebd2:	687b      	ldr	r3, [r7, #4]
 801ebd4:	68db      	ldr	r3, [r3, #12]
 801ebd6:	2b00      	cmp	r3, #0
 801ebd8:	d047      	beq.n	801ec6a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801ebda:	4b1d      	ldr	r3, [pc, #116]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ebdc:	681b      	ldr	r3, [r3, #0]
 801ebde:	f023 0219 	bic.w	r2, r3, #25
 801ebe2:	687b      	ldr	r3, [r7, #4]
 801ebe4:	68db      	ldr	r3, [r3, #12]
 801ebe6:	491a      	ldr	r1, [pc, #104]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ebe8:	4313      	orrs	r3, r2
 801ebea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ebec:	f7fc ffb2 	bl	801bb54 <HAL_GetTick>
 801ebf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ebf2:	e008      	b.n	801ec06 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ebf4:	f7fc ffae 	bl	801bb54 <HAL_GetTick>
 801ebf8:	4602      	mov	r2, r0
 801ebfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebfc:	1ad3      	subs	r3, r2, r3
 801ebfe:	2b02      	cmp	r3, #2
 801ec00:	d901      	bls.n	801ec06 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801ec02:	2303      	movs	r3, #3
 801ec04:	e332      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ec06:	4b12      	ldr	r3, [pc, #72]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ec08:	681b      	ldr	r3, [r3, #0]
 801ec0a:	f003 0304 	and.w	r3, r3, #4
 801ec0e:	2b00      	cmp	r3, #0
 801ec10:	d0f0      	beq.n	801ebf4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ec12:	f7fc ffcf 	bl	801bbb4 <HAL_GetREVID>
 801ec16:	4603      	mov	r3, r0
 801ec18:	f241 0203 	movw	r2, #4099	@ 0x1003
 801ec1c:	4293      	cmp	r3, r2
 801ec1e:	d819      	bhi.n	801ec54 <HAL_RCC_OscConfig+0x28c>
 801ec20:	687b      	ldr	r3, [r7, #4]
 801ec22:	691b      	ldr	r3, [r3, #16]
 801ec24:	2b40      	cmp	r3, #64	@ 0x40
 801ec26:	d108      	bne.n	801ec3a <HAL_RCC_OscConfig+0x272>
 801ec28:	4b09      	ldr	r3, [pc, #36]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ec2a:	685b      	ldr	r3, [r3, #4]
 801ec2c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801ec30:	4a07      	ldr	r2, [pc, #28]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ec32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ec36:	6053      	str	r3, [r2, #4]
 801ec38:	e030      	b.n	801ec9c <HAL_RCC_OscConfig+0x2d4>
 801ec3a:	4b05      	ldr	r3, [pc, #20]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ec3c:	685b      	ldr	r3, [r3, #4]
 801ec3e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801ec42:	687b      	ldr	r3, [r7, #4]
 801ec44:	691b      	ldr	r3, [r3, #16]
 801ec46:	031b      	lsls	r3, r3, #12
 801ec48:	4901      	ldr	r1, [pc, #4]	@ (801ec50 <HAL_RCC_OscConfig+0x288>)
 801ec4a:	4313      	orrs	r3, r2
 801ec4c:	604b      	str	r3, [r1, #4]
 801ec4e:	e025      	b.n	801ec9c <HAL_RCC_OscConfig+0x2d4>
 801ec50:	58024400 	.word	0x58024400
 801ec54:	4b9a      	ldr	r3, [pc, #616]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ec56:	685b      	ldr	r3, [r3, #4]
 801ec58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	691b      	ldr	r3, [r3, #16]
 801ec60:	061b      	lsls	r3, r3, #24
 801ec62:	4997      	ldr	r1, [pc, #604]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ec64:	4313      	orrs	r3, r2
 801ec66:	604b      	str	r3, [r1, #4]
 801ec68:	e018      	b.n	801ec9c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801ec6a:	4b95      	ldr	r3, [pc, #596]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ec6c:	681b      	ldr	r3, [r3, #0]
 801ec6e:	4a94      	ldr	r2, [pc, #592]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ec70:	f023 0301 	bic.w	r3, r3, #1
 801ec74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ec76:	f7fc ff6d 	bl	801bb54 <HAL_GetTick>
 801ec7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801ec7c:	e008      	b.n	801ec90 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ec7e:	f7fc ff69 	bl	801bb54 <HAL_GetTick>
 801ec82:	4602      	mov	r2, r0
 801ec84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec86:	1ad3      	subs	r3, r2, r3
 801ec88:	2b02      	cmp	r3, #2
 801ec8a:	d901      	bls.n	801ec90 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801ec8c:	2303      	movs	r3, #3
 801ec8e:	e2ed      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801ec90:	4b8b      	ldr	r3, [pc, #556]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ec92:	681b      	ldr	r3, [r3, #0]
 801ec94:	f003 0304 	and.w	r3, r3, #4
 801ec98:	2b00      	cmp	r3, #0
 801ec9a:	d1f0      	bne.n	801ec7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	681b      	ldr	r3, [r3, #0]
 801eca0:	f003 0310 	and.w	r3, r3, #16
 801eca4:	2b00      	cmp	r3, #0
 801eca6:	f000 80a9 	beq.w	801edfc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ecaa:	4b85      	ldr	r3, [pc, #532]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ecac:	691b      	ldr	r3, [r3, #16]
 801ecae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801ecb2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801ecb4:	4b82      	ldr	r3, [pc, #520]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ecb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ecb8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801ecba:	69bb      	ldr	r3, [r7, #24]
 801ecbc:	2b08      	cmp	r3, #8
 801ecbe:	d007      	beq.n	801ecd0 <HAL_RCC_OscConfig+0x308>
 801ecc0:	69bb      	ldr	r3, [r7, #24]
 801ecc2:	2b18      	cmp	r3, #24
 801ecc4:	d13a      	bne.n	801ed3c <HAL_RCC_OscConfig+0x374>
 801ecc6:	697b      	ldr	r3, [r7, #20]
 801ecc8:	f003 0303 	and.w	r3, r3, #3
 801eccc:	2b01      	cmp	r3, #1
 801ecce:	d135      	bne.n	801ed3c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ecd0:	4b7b      	ldr	r3, [pc, #492]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ecd2:	681b      	ldr	r3, [r3, #0]
 801ecd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ecd8:	2b00      	cmp	r3, #0
 801ecda:	d005      	beq.n	801ece8 <HAL_RCC_OscConfig+0x320>
 801ecdc:	687b      	ldr	r3, [r7, #4]
 801ecde:	69db      	ldr	r3, [r3, #28]
 801ece0:	2b80      	cmp	r3, #128	@ 0x80
 801ece2:	d001      	beq.n	801ece8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801ece4:	2301      	movs	r3, #1
 801ece6:	e2c1      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ece8:	f7fc ff64 	bl	801bbb4 <HAL_GetREVID>
 801ecec:	4603      	mov	r3, r0
 801ecee:	f241 0203 	movw	r2, #4099	@ 0x1003
 801ecf2:	4293      	cmp	r3, r2
 801ecf4:	d817      	bhi.n	801ed26 <HAL_RCC_OscConfig+0x35e>
 801ecf6:	687b      	ldr	r3, [r7, #4]
 801ecf8:	6a1b      	ldr	r3, [r3, #32]
 801ecfa:	2b20      	cmp	r3, #32
 801ecfc:	d108      	bne.n	801ed10 <HAL_RCC_OscConfig+0x348>
 801ecfe:	4b70      	ldr	r3, [pc, #448]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ed00:	685b      	ldr	r3, [r3, #4]
 801ed02:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801ed06:	4a6e      	ldr	r2, [pc, #440]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ed08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ed0c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ed0e:	e075      	b.n	801edfc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ed10:	4b6b      	ldr	r3, [pc, #428]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ed12:	685b      	ldr	r3, [r3, #4]
 801ed14:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801ed18:	687b      	ldr	r3, [r7, #4]
 801ed1a:	6a1b      	ldr	r3, [r3, #32]
 801ed1c:	069b      	lsls	r3, r3, #26
 801ed1e:	4968      	ldr	r1, [pc, #416]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ed20:	4313      	orrs	r3, r2
 801ed22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ed24:	e06a      	b.n	801edfc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ed26:	4b66      	ldr	r3, [pc, #408]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ed28:	68db      	ldr	r3, [r3, #12]
 801ed2a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801ed2e:	687b      	ldr	r3, [r7, #4]
 801ed30:	6a1b      	ldr	r3, [r3, #32]
 801ed32:	061b      	lsls	r3, r3, #24
 801ed34:	4962      	ldr	r1, [pc, #392]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ed36:	4313      	orrs	r3, r2
 801ed38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ed3a:	e05f      	b.n	801edfc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801ed3c:	687b      	ldr	r3, [r7, #4]
 801ed3e:	69db      	ldr	r3, [r3, #28]
 801ed40:	2b00      	cmp	r3, #0
 801ed42:	d042      	beq.n	801edca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801ed44:	4b5e      	ldr	r3, [pc, #376]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ed46:	681b      	ldr	r3, [r3, #0]
 801ed48:	4a5d      	ldr	r2, [pc, #372]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ed4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ed4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ed50:	f7fc ff00 	bl	801bb54 <HAL_GetTick>
 801ed54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801ed56:	e008      	b.n	801ed6a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801ed58:	f7fc fefc 	bl	801bb54 <HAL_GetTick>
 801ed5c:	4602      	mov	r2, r0
 801ed5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed60:	1ad3      	subs	r3, r2, r3
 801ed62:	2b02      	cmp	r3, #2
 801ed64:	d901      	bls.n	801ed6a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801ed66:	2303      	movs	r3, #3
 801ed68:	e280      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801ed6a:	4b55      	ldr	r3, [pc, #340]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ed6c:	681b      	ldr	r3, [r3, #0]
 801ed6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ed72:	2b00      	cmp	r3, #0
 801ed74:	d0f0      	beq.n	801ed58 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ed76:	f7fc ff1d 	bl	801bbb4 <HAL_GetREVID>
 801ed7a:	4603      	mov	r3, r0
 801ed7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 801ed80:	4293      	cmp	r3, r2
 801ed82:	d817      	bhi.n	801edb4 <HAL_RCC_OscConfig+0x3ec>
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	6a1b      	ldr	r3, [r3, #32]
 801ed88:	2b20      	cmp	r3, #32
 801ed8a:	d108      	bne.n	801ed9e <HAL_RCC_OscConfig+0x3d6>
 801ed8c:	4b4c      	ldr	r3, [pc, #304]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ed8e:	685b      	ldr	r3, [r3, #4]
 801ed90:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801ed94:	4a4a      	ldr	r2, [pc, #296]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ed96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ed9a:	6053      	str	r3, [r2, #4]
 801ed9c:	e02e      	b.n	801edfc <HAL_RCC_OscConfig+0x434>
 801ed9e:	4b48      	ldr	r3, [pc, #288]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801eda0:	685b      	ldr	r3, [r3, #4]
 801eda2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801eda6:	687b      	ldr	r3, [r7, #4]
 801eda8:	6a1b      	ldr	r3, [r3, #32]
 801edaa:	069b      	lsls	r3, r3, #26
 801edac:	4944      	ldr	r1, [pc, #272]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801edae:	4313      	orrs	r3, r2
 801edb0:	604b      	str	r3, [r1, #4]
 801edb2:	e023      	b.n	801edfc <HAL_RCC_OscConfig+0x434>
 801edb4:	4b42      	ldr	r3, [pc, #264]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801edb6:	68db      	ldr	r3, [r3, #12]
 801edb8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801edbc:	687b      	ldr	r3, [r7, #4]
 801edbe:	6a1b      	ldr	r3, [r3, #32]
 801edc0:	061b      	lsls	r3, r3, #24
 801edc2:	493f      	ldr	r1, [pc, #252]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801edc4:	4313      	orrs	r3, r2
 801edc6:	60cb      	str	r3, [r1, #12]
 801edc8:	e018      	b.n	801edfc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801edca:	4b3d      	ldr	r3, [pc, #244]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801edcc:	681b      	ldr	r3, [r3, #0]
 801edce:	4a3c      	ldr	r2, [pc, #240]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801edd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801edd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801edd6:	f7fc febd 	bl	801bb54 <HAL_GetTick>
 801edda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801eddc:	e008      	b.n	801edf0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801edde:	f7fc feb9 	bl	801bb54 <HAL_GetTick>
 801ede2:	4602      	mov	r2, r0
 801ede4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ede6:	1ad3      	subs	r3, r2, r3
 801ede8:	2b02      	cmp	r3, #2
 801edea:	d901      	bls.n	801edf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801edec:	2303      	movs	r3, #3
 801edee:	e23d      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801edf0:	4b33      	ldr	r3, [pc, #204]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801edf2:	681b      	ldr	r3, [r3, #0]
 801edf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801edf8:	2b00      	cmp	r3, #0
 801edfa:	d1f0      	bne.n	801edde <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	681b      	ldr	r3, [r3, #0]
 801ee00:	f003 0308 	and.w	r3, r3, #8
 801ee04:	2b00      	cmp	r3, #0
 801ee06:	d036      	beq.n	801ee76 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801ee08:	687b      	ldr	r3, [r7, #4]
 801ee0a:	695b      	ldr	r3, [r3, #20]
 801ee0c:	2b00      	cmp	r3, #0
 801ee0e:	d019      	beq.n	801ee44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801ee10:	4b2b      	ldr	r3, [pc, #172]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ee12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ee14:	4a2a      	ldr	r2, [pc, #168]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ee16:	f043 0301 	orr.w	r3, r3, #1
 801ee1a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ee1c:	f7fc fe9a 	bl	801bb54 <HAL_GetTick>
 801ee20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801ee22:	e008      	b.n	801ee36 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801ee24:	f7fc fe96 	bl	801bb54 <HAL_GetTick>
 801ee28:	4602      	mov	r2, r0
 801ee2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ee2c:	1ad3      	subs	r3, r2, r3
 801ee2e:	2b02      	cmp	r3, #2
 801ee30:	d901      	bls.n	801ee36 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801ee32:	2303      	movs	r3, #3
 801ee34:	e21a      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801ee36:	4b22      	ldr	r3, [pc, #136]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ee38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ee3a:	f003 0302 	and.w	r3, r3, #2
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	d0f0      	beq.n	801ee24 <HAL_RCC_OscConfig+0x45c>
 801ee42:	e018      	b.n	801ee76 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801ee44:	4b1e      	ldr	r3, [pc, #120]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ee46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ee48:	4a1d      	ldr	r2, [pc, #116]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ee4a:	f023 0301 	bic.w	r3, r3, #1
 801ee4e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ee50:	f7fc fe80 	bl	801bb54 <HAL_GetTick>
 801ee54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801ee56:	e008      	b.n	801ee6a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801ee58:	f7fc fe7c 	bl	801bb54 <HAL_GetTick>
 801ee5c:	4602      	mov	r2, r0
 801ee5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ee60:	1ad3      	subs	r3, r2, r3
 801ee62:	2b02      	cmp	r3, #2
 801ee64:	d901      	bls.n	801ee6a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801ee66:	2303      	movs	r3, #3
 801ee68:	e200      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801ee6a:	4b15      	ldr	r3, [pc, #84]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ee6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ee6e:	f003 0302 	and.w	r3, r3, #2
 801ee72:	2b00      	cmp	r3, #0
 801ee74:	d1f0      	bne.n	801ee58 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801ee76:	687b      	ldr	r3, [r7, #4]
 801ee78:	681b      	ldr	r3, [r3, #0]
 801ee7a:	f003 0320 	and.w	r3, r3, #32
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	d039      	beq.n	801eef6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	699b      	ldr	r3, [r3, #24]
 801ee86:	2b00      	cmp	r3, #0
 801ee88:	d01c      	beq.n	801eec4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801ee8a:	4b0d      	ldr	r3, [pc, #52]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ee8c:	681b      	ldr	r3, [r3, #0]
 801ee8e:	4a0c      	ldr	r2, [pc, #48]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801ee90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801ee94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801ee96:	f7fc fe5d 	bl	801bb54 <HAL_GetTick>
 801ee9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801ee9c:	e008      	b.n	801eeb0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801ee9e:	f7fc fe59 	bl	801bb54 <HAL_GetTick>
 801eea2:	4602      	mov	r2, r0
 801eea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eea6:	1ad3      	subs	r3, r2, r3
 801eea8:	2b02      	cmp	r3, #2
 801eeaa:	d901      	bls.n	801eeb0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801eeac:	2303      	movs	r3, #3
 801eeae:	e1dd      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801eeb0:	4b03      	ldr	r3, [pc, #12]	@ (801eec0 <HAL_RCC_OscConfig+0x4f8>)
 801eeb2:	681b      	ldr	r3, [r3, #0]
 801eeb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801eeb8:	2b00      	cmp	r3, #0
 801eeba:	d0f0      	beq.n	801ee9e <HAL_RCC_OscConfig+0x4d6>
 801eebc:	e01b      	b.n	801eef6 <HAL_RCC_OscConfig+0x52e>
 801eebe:	bf00      	nop
 801eec0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801eec4:	4b9b      	ldr	r3, [pc, #620]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801eec6:	681b      	ldr	r3, [r3, #0]
 801eec8:	4a9a      	ldr	r2, [pc, #616]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801eeca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801eece:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801eed0:	f7fc fe40 	bl	801bb54 <HAL_GetTick>
 801eed4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801eed6:	e008      	b.n	801eeea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801eed8:	f7fc fe3c 	bl	801bb54 <HAL_GetTick>
 801eedc:	4602      	mov	r2, r0
 801eede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eee0:	1ad3      	subs	r3, r2, r3
 801eee2:	2b02      	cmp	r3, #2
 801eee4:	d901      	bls.n	801eeea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801eee6:	2303      	movs	r3, #3
 801eee8:	e1c0      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801eeea:	4b92      	ldr	r3, [pc, #584]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801eeec:	681b      	ldr	r3, [r3, #0]
 801eeee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801eef2:	2b00      	cmp	r3, #0
 801eef4:	d1f0      	bne.n	801eed8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	681b      	ldr	r3, [r3, #0]
 801eefa:	f003 0304 	and.w	r3, r3, #4
 801eefe:	2b00      	cmp	r3, #0
 801ef00:	f000 8081 	beq.w	801f006 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801ef04:	4b8c      	ldr	r3, [pc, #560]	@ (801f138 <HAL_RCC_OscConfig+0x770>)
 801ef06:	681b      	ldr	r3, [r3, #0]
 801ef08:	4a8b      	ldr	r2, [pc, #556]	@ (801f138 <HAL_RCC_OscConfig+0x770>)
 801ef0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801ef0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801ef10:	f7fc fe20 	bl	801bb54 <HAL_GetTick>
 801ef14:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801ef16:	e008      	b.n	801ef2a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ef18:	f7fc fe1c 	bl	801bb54 <HAL_GetTick>
 801ef1c:	4602      	mov	r2, r0
 801ef1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef20:	1ad3      	subs	r3, r2, r3
 801ef22:	2b64      	cmp	r3, #100	@ 0x64
 801ef24:	d901      	bls.n	801ef2a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801ef26:	2303      	movs	r3, #3
 801ef28:	e1a0      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801ef2a:	4b83      	ldr	r3, [pc, #524]	@ (801f138 <HAL_RCC_OscConfig+0x770>)
 801ef2c:	681b      	ldr	r3, [r3, #0]
 801ef2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ef32:	2b00      	cmp	r3, #0
 801ef34:	d0f0      	beq.n	801ef18 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801ef36:	687b      	ldr	r3, [r7, #4]
 801ef38:	689b      	ldr	r3, [r3, #8]
 801ef3a:	2b01      	cmp	r3, #1
 801ef3c:	d106      	bne.n	801ef4c <HAL_RCC_OscConfig+0x584>
 801ef3e:	4b7d      	ldr	r3, [pc, #500]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801ef40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef42:	4a7c      	ldr	r2, [pc, #496]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801ef44:	f043 0301 	orr.w	r3, r3, #1
 801ef48:	6713      	str	r3, [r2, #112]	@ 0x70
 801ef4a:	e02d      	b.n	801efa8 <HAL_RCC_OscConfig+0x5e0>
 801ef4c:	687b      	ldr	r3, [r7, #4]
 801ef4e:	689b      	ldr	r3, [r3, #8]
 801ef50:	2b00      	cmp	r3, #0
 801ef52:	d10c      	bne.n	801ef6e <HAL_RCC_OscConfig+0x5a6>
 801ef54:	4b77      	ldr	r3, [pc, #476]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801ef56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef58:	4a76      	ldr	r2, [pc, #472]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801ef5a:	f023 0301 	bic.w	r3, r3, #1
 801ef5e:	6713      	str	r3, [r2, #112]	@ 0x70
 801ef60:	4b74      	ldr	r3, [pc, #464]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801ef62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef64:	4a73      	ldr	r2, [pc, #460]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801ef66:	f023 0304 	bic.w	r3, r3, #4
 801ef6a:	6713      	str	r3, [r2, #112]	@ 0x70
 801ef6c:	e01c      	b.n	801efa8 <HAL_RCC_OscConfig+0x5e0>
 801ef6e:	687b      	ldr	r3, [r7, #4]
 801ef70:	689b      	ldr	r3, [r3, #8]
 801ef72:	2b05      	cmp	r3, #5
 801ef74:	d10c      	bne.n	801ef90 <HAL_RCC_OscConfig+0x5c8>
 801ef76:	4b6f      	ldr	r3, [pc, #444]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801ef78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef7a:	4a6e      	ldr	r2, [pc, #440]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801ef7c:	f043 0304 	orr.w	r3, r3, #4
 801ef80:	6713      	str	r3, [r2, #112]	@ 0x70
 801ef82:	4b6c      	ldr	r3, [pc, #432]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801ef84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef86:	4a6b      	ldr	r2, [pc, #428]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801ef88:	f043 0301 	orr.w	r3, r3, #1
 801ef8c:	6713      	str	r3, [r2, #112]	@ 0x70
 801ef8e:	e00b      	b.n	801efa8 <HAL_RCC_OscConfig+0x5e0>
 801ef90:	4b68      	ldr	r3, [pc, #416]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801ef92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ef94:	4a67      	ldr	r2, [pc, #412]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801ef96:	f023 0301 	bic.w	r3, r3, #1
 801ef9a:	6713      	str	r3, [r2, #112]	@ 0x70
 801ef9c:	4b65      	ldr	r3, [pc, #404]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801ef9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801efa0:	4a64      	ldr	r2, [pc, #400]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801efa2:	f023 0304 	bic.w	r3, r3, #4
 801efa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801efa8:	687b      	ldr	r3, [r7, #4]
 801efaa:	689b      	ldr	r3, [r3, #8]
 801efac:	2b00      	cmp	r3, #0
 801efae:	d015      	beq.n	801efdc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801efb0:	f7fc fdd0 	bl	801bb54 <HAL_GetTick>
 801efb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801efb6:	e00a      	b.n	801efce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801efb8:	f7fc fdcc 	bl	801bb54 <HAL_GetTick>
 801efbc:	4602      	mov	r2, r0
 801efbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efc0:	1ad3      	subs	r3, r2, r3
 801efc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 801efc6:	4293      	cmp	r3, r2
 801efc8:	d901      	bls.n	801efce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801efca:	2303      	movs	r3, #3
 801efcc:	e14e      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801efce:	4b59      	ldr	r3, [pc, #356]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801efd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801efd2:	f003 0302 	and.w	r3, r3, #2
 801efd6:	2b00      	cmp	r3, #0
 801efd8:	d0ee      	beq.n	801efb8 <HAL_RCC_OscConfig+0x5f0>
 801efda:	e014      	b.n	801f006 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801efdc:	f7fc fdba 	bl	801bb54 <HAL_GetTick>
 801efe0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801efe2:	e00a      	b.n	801effa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801efe4:	f7fc fdb6 	bl	801bb54 <HAL_GetTick>
 801efe8:	4602      	mov	r2, r0
 801efea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efec:	1ad3      	subs	r3, r2, r3
 801efee:	f241 3288 	movw	r2, #5000	@ 0x1388
 801eff2:	4293      	cmp	r3, r2
 801eff4:	d901      	bls.n	801effa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801eff6:	2303      	movs	r3, #3
 801eff8:	e138      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801effa:	4b4e      	ldr	r3, [pc, #312]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801effc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801effe:	f003 0302 	and.w	r3, r3, #2
 801f002:	2b00      	cmp	r3, #0
 801f004:	d1ee      	bne.n	801efe4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801f006:	687b      	ldr	r3, [r7, #4]
 801f008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f00a:	2b00      	cmp	r3, #0
 801f00c:	f000 812d 	beq.w	801f26a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801f010:	4b48      	ldr	r3, [pc, #288]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f012:	691b      	ldr	r3, [r3, #16]
 801f014:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801f018:	2b18      	cmp	r3, #24
 801f01a:	f000 80bd 	beq.w	801f198 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801f01e:	687b      	ldr	r3, [r7, #4]
 801f020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f022:	2b02      	cmp	r3, #2
 801f024:	f040 809e 	bne.w	801f164 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f028:	4b42      	ldr	r3, [pc, #264]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f02a:	681b      	ldr	r3, [r3, #0]
 801f02c:	4a41      	ldr	r2, [pc, #260]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f02e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801f032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f034:	f7fc fd8e 	bl	801bb54 <HAL_GetTick>
 801f038:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801f03a:	e008      	b.n	801f04e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801f03c:	f7fc fd8a 	bl	801bb54 <HAL_GetTick>
 801f040:	4602      	mov	r2, r0
 801f042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f044:	1ad3      	subs	r3, r2, r3
 801f046:	2b02      	cmp	r3, #2
 801f048:	d901      	bls.n	801f04e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801f04a:	2303      	movs	r3, #3
 801f04c:	e10e      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801f04e:	4b39      	ldr	r3, [pc, #228]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f050:	681b      	ldr	r3, [r3, #0]
 801f052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f056:	2b00      	cmp	r3, #0
 801f058:	d1f0      	bne.n	801f03c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801f05a:	4b36      	ldr	r3, [pc, #216]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f05c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801f05e:	4b37      	ldr	r3, [pc, #220]	@ (801f13c <HAL_RCC_OscConfig+0x774>)
 801f060:	4013      	ands	r3, r2
 801f062:	687a      	ldr	r2, [r7, #4]
 801f064:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801f066:	687a      	ldr	r2, [r7, #4]
 801f068:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801f06a:	0112      	lsls	r2, r2, #4
 801f06c:	430a      	orrs	r2, r1
 801f06e:	4931      	ldr	r1, [pc, #196]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f070:	4313      	orrs	r3, r2
 801f072:	628b      	str	r3, [r1, #40]	@ 0x28
 801f074:	687b      	ldr	r3, [r7, #4]
 801f076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f078:	3b01      	subs	r3, #1
 801f07a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f07e:	687b      	ldr	r3, [r7, #4]
 801f080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f082:	3b01      	subs	r3, #1
 801f084:	025b      	lsls	r3, r3, #9
 801f086:	b29b      	uxth	r3, r3
 801f088:	431a      	orrs	r2, r3
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f08e:	3b01      	subs	r3, #1
 801f090:	041b      	lsls	r3, r3, #16
 801f092:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f096:	431a      	orrs	r2, r3
 801f098:	687b      	ldr	r3, [r7, #4]
 801f09a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f09c:	3b01      	subs	r3, #1
 801f09e:	061b      	lsls	r3, r3, #24
 801f0a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f0a4:	4923      	ldr	r1, [pc, #140]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f0a6:	4313      	orrs	r3, r2
 801f0a8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801f0aa:	4b22      	ldr	r3, [pc, #136]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0ae:	4a21      	ldr	r2, [pc, #132]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f0b0:	f023 0301 	bic.w	r3, r3, #1
 801f0b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801f0b6:	4b1f      	ldr	r3, [pc, #124]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f0b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f0ba:	4b21      	ldr	r3, [pc, #132]	@ (801f140 <HAL_RCC_OscConfig+0x778>)
 801f0bc:	4013      	ands	r3, r2
 801f0be:	687a      	ldr	r2, [r7, #4]
 801f0c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801f0c2:	00d2      	lsls	r2, r2, #3
 801f0c4:	491b      	ldr	r1, [pc, #108]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f0c6:	4313      	orrs	r3, r2
 801f0c8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801f0ca:	4b1a      	ldr	r3, [pc, #104]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0ce:	f023 020c 	bic.w	r2, r3, #12
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f0d6:	4917      	ldr	r1, [pc, #92]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f0d8:	4313      	orrs	r3, r2
 801f0da:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801f0dc:	4b15      	ldr	r3, [pc, #84]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0e0:	f023 0202 	bic.w	r2, r3, #2
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f0e8:	4912      	ldr	r1, [pc, #72]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f0ea:	4313      	orrs	r3, r2
 801f0ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801f0ee:	4b11      	ldr	r3, [pc, #68]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0f2:	4a10      	ldr	r2, [pc, #64]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f0f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f0f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f0fa:	4b0e      	ldr	r3, [pc, #56]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f0fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0fe:	4a0d      	ldr	r2, [pc, #52]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801f104:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801f106:	4b0b      	ldr	r3, [pc, #44]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f10a:	4a0a      	ldr	r2, [pc, #40]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f10c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801f110:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801f112:	4b08      	ldr	r3, [pc, #32]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f116:	4a07      	ldr	r2, [pc, #28]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f118:	f043 0301 	orr.w	r3, r3, #1
 801f11c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801f11e:	4b05      	ldr	r3, [pc, #20]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	4a04      	ldr	r2, [pc, #16]	@ (801f134 <HAL_RCC_OscConfig+0x76c>)
 801f124:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801f128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f12a:	f7fc fd13 	bl	801bb54 <HAL_GetTick>
 801f12e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801f130:	e011      	b.n	801f156 <HAL_RCC_OscConfig+0x78e>
 801f132:	bf00      	nop
 801f134:	58024400 	.word	0x58024400
 801f138:	58024800 	.word	0x58024800
 801f13c:	fffffc0c 	.word	0xfffffc0c
 801f140:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801f144:	f7fc fd06 	bl	801bb54 <HAL_GetTick>
 801f148:	4602      	mov	r2, r0
 801f14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f14c:	1ad3      	subs	r3, r2, r3
 801f14e:	2b02      	cmp	r3, #2
 801f150:	d901      	bls.n	801f156 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801f152:	2303      	movs	r3, #3
 801f154:	e08a      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801f156:	4b47      	ldr	r3, [pc, #284]	@ (801f274 <HAL_RCC_OscConfig+0x8ac>)
 801f158:	681b      	ldr	r3, [r3, #0]
 801f15a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f15e:	2b00      	cmp	r3, #0
 801f160:	d0f0      	beq.n	801f144 <HAL_RCC_OscConfig+0x77c>
 801f162:	e082      	b.n	801f26a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f164:	4b43      	ldr	r3, [pc, #268]	@ (801f274 <HAL_RCC_OscConfig+0x8ac>)
 801f166:	681b      	ldr	r3, [r3, #0]
 801f168:	4a42      	ldr	r2, [pc, #264]	@ (801f274 <HAL_RCC_OscConfig+0x8ac>)
 801f16a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801f16e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f170:	f7fc fcf0 	bl	801bb54 <HAL_GetTick>
 801f174:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801f176:	e008      	b.n	801f18a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801f178:	f7fc fcec 	bl	801bb54 <HAL_GetTick>
 801f17c:	4602      	mov	r2, r0
 801f17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f180:	1ad3      	subs	r3, r2, r3
 801f182:	2b02      	cmp	r3, #2
 801f184:	d901      	bls.n	801f18a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801f186:	2303      	movs	r3, #3
 801f188:	e070      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801f18a:	4b3a      	ldr	r3, [pc, #232]	@ (801f274 <HAL_RCC_OscConfig+0x8ac>)
 801f18c:	681b      	ldr	r3, [r3, #0]
 801f18e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f192:	2b00      	cmp	r3, #0
 801f194:	d1f0      	bne.n	801f178 <HAL_RCC_OscConfig+0x7b0>
 801f196:	e068      	b.n	801f26a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801f198:	4b36      	ldr	r3, [pc, #216]	@ (801f274 <HAL_RCC_OscConfig+0x8ac>)
 801f19a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f19c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801f19e:	4b35      	ldr	r3, [pc, #212]	@ (801f274 <HAL_RCC_OscConfig+0x8ac>)
 801f1a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f1a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801f1a4:	687b      	ldr	r3, [r7, #4]
 801f1a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f1a8:	2b01      	cmp	r3, #1
 801f1aa:	d031      	beq.n	801f210 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f1ac:	693b      	ldr	r3, [r7, #16]
 801f1ae:	f003 0203 	and.w	r2, r3, #3
 801f1b2:	687b      	ldr	r3, [r7, #4]
 801f1b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801f1b6:	429a      	cmp	r2, r3
 801f1b8:	d12a      	bne.n	801f210 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801f1ba:	693b      	ldr	r3, [r7, #16]
 801f1bc:	091b      	lsrs	r3, r3, #4
 801f1be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f1c6:	429a      	cmp	r2, r3
 801f1c8:	d122      	bne.n	801f210 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801f1ca:	68fb      	ldr	r3, [r7, #12]
 801f1cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f1d0:	687b      	ldr	r3, [r7, #4]
 801f1d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f1d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801f1d6:	429a      	cmp	r2, r3
 801f1d8:	d11a      	bne.n	801f210 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801f1da:	68fb      	ldr	r3, [r7, #12]
 801f1dc:	0a5b      	lsrs	r3, r3, #9
 801f1de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f1e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801f1e8:	429a      	cmp	r2, r3
 801f1ea:	d111      	bne.n	801f210 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801f1ec:	68fb      	ldr	r3, [r7, #12]
 801f1ee:	0c1b      	lsrs	r3, r3, #16
 801f1f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f1f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801f1fa:	429a      	cmp	r2, r3
 801f1fc:	d108      	bne.n	801f210 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801f1fe:	68fb      	ldr	r3, [r7, #12]
 801f200:	0e1b      	lsrs	r3, r3, #24
 801f202:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801f206:	687b      	ldr	r3, [r7, #4]
 801f208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f20a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801f20c:	429a      	cmp	r2, r3
 801f20e:	d001      	beq.n	801f214 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801f210:	2301      	movs	r3, #1
 801f212:	e02b      	b.n	801f26c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801f214:	4b17      	ldr	r3, [pc, #92]	@ (801f274 <HAL_RCC_OscConfig+0x8ac>)
 801f216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f218:	08db      	lsrs	r3, r3, #3
 801f21a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f21e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801f224:	693a      	ldr	r2, [r7, #16]
 801f226:	429a      	cmp	r2, r3
 801f228:	d01f      	beq.n	801f26a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801f22a:	4b12      	ldr	r3, [pc, #72]	@ (801f274 <HAL_RCC_OscConfig+0x8ac>)
 801f22c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f22e:	4a11      	ldr	r2, [pc, #68]	@ (801f274 <HAL_RCC_OscConfig+0x8ac>)
 801f230:	f023 0301 	bic.w	r3, r3, #1
 801f234:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801f236:	f7fc fc8d 	bl	801bb54 <HAL_GetTick>
 801f23a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801f23c:	bf00      	nop
 801f23e:	f7fc fc89 	bl	801bb54 <HAL_GetTick>
 801f242:	4602      	mov	r2, r0
 801f244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f246:	4293      	cmp	r3, r2
 801f248:	d0f9      	beq.n	801f23e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801f24a:	4b0a      	ldr	r3, [pc, #40]	@ (801f274 <HAL_RCC_OscConfig+0x8ac>)
 801f24c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f24e:	4b0a      	ldr	r3, [pc, #40]	@ (801f278 <HAL_RCC_OscConfig+0x8b0>)
 801f250:	4013      	ands	r3, r2
 801f252:	687a      	ldr	r2, [r7, #4]
 801f254:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801f256:	00d2      	lsls	r2, r2, #3
 801f258:	4906      	ldr	r1, [pc, #24]	@ (801f274 <HAL_RCC_OscConfig+0x8ac>)
 801f25a:	4313      	orrs	r3, r2
 801f25c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801f25e:	4b05      	ldr	r3, [pc, #20]	@ (801f274 <HAL_RCC_OscConfig+0x8ac>)
 801f260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f262:	4a04      	ldr	r2, [pc, #16]	@ (801f274 <HAL_RCC_OscConfig+0x8ac>)
 801f264:	f043 0301 	orr.w	r3, r3, #1
 801f268:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801f26a:	2300      	movs	r3, #0
}
 801f26c:	4618      	mov	r0, r3
 801f26e:	3730      	adds	r7, #48	@ 0x30
 801f270:	46bd      	mov	sp, r7
 801f272:	bd80      	pop	{r7, pc}
 801f274:	58024400 	.word	0x58024400
 801f278:	ffff0007 	.word	0xffff0007

0801f27c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801f27c:	b580      	push	{r7, lr}
 801f27e:	b086      	sub	sp, #24
 801f280:	af00      	add	r7, sp, #0
 801f282:	6078      	str	r0, [r7, #4]
 801f284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801f286:	687b      	ldr	r3, [r7, #4]
 801f288:	2b00      	cmp	r3, #0
 801f28a:	d101      	bne.n	801f290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801f28c:	2301      	movs	r3, #1
 801f28e:	e19c      	b.n	801f5ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801f290:	4b8a      	ldr	r3, [pc, #552]	@ (801f4bc <HAL_RCC_ClockConfig+0x240>)
 801f292:	681b      	ldr	r3, [r3, #0]
 801f294:	f003 030f 	and.w	r3, r3, #15
 801f298:	683a      	ldr	r2, [r7, #0]
 801f29a:	429a      	cmp	r2, r3
 801f29c:	d910      	bls.n	801f2c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f29e:	4b87      	ldr	r3, [pc, #540]	@ (801f4bc <HAL_RCC_ClockConfig+0x240>)
 801f2a0:	681b      	ldr	r3, [r3, #0]
 801f2a2:	f023 020f 	bic.w	r2, r3, #15
 801f2a6:	4985      	ldr	r1, [pc, #532]	@ (801f4bc <HAL_RCC_ClockConfig+0x240>)
 801f2a8:	683b      	ldr	r3, [r7, #0]
 801f2aa:	4313      	orrs	r3, r2
 801f2ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801f2ae:	4b83      	ldr	r3, [pc, #524]	@ (801f4bc <HAL_RCC_ClockConfig+0x240>)
 801f2b0:	681b      	ldr	r3, [r3, #0]
 801f2b2:	f003 030f 	and.w	r3, r3, #15
 801f2b6:	683a      	ldr	r2, [r7, #0]
 801f2b8:	429a      	cmp	r2, r3
 801f2ba:	d001      	beq.n	801f2c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801f2bc:	2301      	movs	r3, #1
 801f2be:	e184      	b.n	801f5ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801f2c0:	687b      	ldr	r3, [r7, #4]
 801f2c2:	681b      	ldr	r3, [r3, #0]
 801f2c4:	f003 0304 	and.w	r3, r3, #4
 801f2c8:	2b00      	cmp	r3, #0
 801f2ca:	d010      	beq.n	801f2ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801f2cc:	687b      	ldr	r3, [r7, #4]
 801f2ce:	691a      	ldr	r2, [r3, #16]
 801f2d0:	4b7b      	ldr	r3, [pc, #492]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f2d2:	699b      	ldr	r3, [r3, #24]
 801f2d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f2d8:	429a      	cmp	r2, r3
 801f2da:	d908      	bls.n	801f2ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801f2dc:	4b78      	ldr	r3, [pc, #480]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f2de:	699b      	ldr	r3, [r3, #24]
 801f2e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	691b      	ldr	r3, [r3, #16]
 801f2e8:	4975      	ldr	r1, [pc, #468]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f2ea:	4313      	orrs	r3, r2
 801f2ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f2ee:	687b      	ldr	r3, [r7, #4]
 801f2f0:	681b      	ldr	r3, [r3, #0]
 801f2f2:	f003 0308 	and.w	r3, r3, #8
 801f2f6:	2b00      	cmp	r3, #0
 801f2f8:	d010      	beq.n	801f31c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801f2fa:	687b      	ldr	r3, [r7, #4]
 801f2fc:	695a      	ldr	r2, [r3, #20]
 801f2fe:	4b70      	ldr	r3, [pc, #448]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f300:	69db      	ldr	r3, [r3, #28]
 801f302:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f306:	429a      	cmp	r2, r3
 801f308:	d908      	bls.n	801f31c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801f30a:	4b6d      	ldr	r3, [pc, #436]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f30c:	69db      	ldr	r3, [r3, #28]
 801f30e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f312:	687b      	ldr	r3, [r7, #4]
 801f314:	695b      	ldr	r3, [r3, #20]
 801f316:	496a      	ldr	r1, [pc, #424]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f318:	4313      	orrs	r3, r2
 801f31a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	f003 0310 	and.w	r3, r3, #16
 801f324:	2b00      	cmp	r3, #0
 801f326:	d010      	beq.n	801f34a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801f328:	687b      	ldr	r3, [r7, #4]
 801f32a:	699a      	ldr	r2, [r3, #24]
 801f32c:	4b64      	ldr	r3, [pc, #400]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f32e:	69db      	ldr	r3, [r3, #28]
 801f330:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801f334:	429a      	cmp	r2, r3
 801f336:	d908      	bls.n	801f34a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801f338:	4b61      	ldr	r3, [pc, #388]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f33a:	69db      	ldr	r3, [r3, #28]
 801f33c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801f340:	687b      	ldr	r3, [r7, #4]
 801f342:	699b      	ldr	r3, [r3, #24]
 801f344:	495e      	ldr	r1, [pc, #376]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f346:	4313      	orrs	r3, r2
 801f348:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801f34a:	687b      	ldr	r3, [r7, #4]
 801f34c:	681b      	ldr	r3, [r3, #0]
 801f34e:	f003 0320 	and.w	r3, r3, #32
 801f352:	2b00      	cmp	r3, #0
 801f354:	d010      	beq.n	801f378 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801f356:	687b      	ldr	r3, [r7, #4]
 801f358:	69da      	ldr	r2, [r3, #28]
 801f35a:	4b59      	ldr	r3, [pc, #356]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f35c:	6a1b      	ldr	r3, [r3, #32]
 801f35e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f362:	429a      	cmp	r2, r3
 801f364:	d908      	bls.n	801f378 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801f366:	4b56      	ldr	r3, [pc, #344]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f368:	6a1b      	ldr	r3, [r3, #32]
 801f36a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f36e:	687b      	ldr	r3, [r7, #4]
 801f370:	69db      	ldr	r3, [r3, #28]
 801f372:	4953      	ldr	r1, [pc, #332]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f374:	4313      	orrs	r3, r2
 801f376:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801f378:	687b      	ldr	r3, [r7, #4]
 801f37a:	681b      	ldr	r3, [r3, #0]
 801f37c:	f003 0302 	and.w	r3, r3, #2
 801f380:	2b00      	cmp	r3, #0
 801f382:	d010      	beq.n	801f3a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801f384:	687b      	ldr	r3, [r7, #4]
 801f386:	68da      	ldr	r2, [r3, #12]
 801f388:	4b4d      	ldr	r3, [pc, #308]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f38a:	699b      	ldr	r3, [r3, #24]
 801f38c:	f003 030f 	and.w	r3, r3, #15
 801f390:	429a      	cmp	r2, r3
 801f392:	d908      	bls.n	801f3a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801f394:	4b4a      	ldr	r3, [pc, #296]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f396:	699b      	ldr	r3, [r3, #24]
 801f398:	f023 020f 	bic.w	r2, r3, #15
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	68db      	ldr	r3, [r3, #12]
 801f3a0:	4947      	ldr	r1, [pc, #284]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f3a2:	4313      	orrs	r3, r2
 801f3a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801f3a6:	687b      	ldr	r3, [r7, #4]
 801f3a8:	681b      	ldr	r3, [r3, #0]
 801f3aa:	f003 0301 	and.w	r3, r3, #1
 801f3ae:	2b00      	cmp	r3, #0
 801f3b0:	d055      	beq.n	801f45e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801f3b2:	4b43      	ldr	r3, [pc, #268]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f3b4:	699b      	ldr	r3, [r3, #24]
 801f3b6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801f3ba:	687b      	ldr	r3, [r7, #4]
 801f3bc:	689b      	ldr	r3, [r3, #8]
 801f3be:	4940      	ldr	r1, [pc, #256]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f3c0:	4313      	orrs	r3, r2
 801f3c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	685b      	ldr	r3, [r3, #4]
 801f3c8:	2b02      	cmp	r3, #2
 801f3ca:	d107      	bne.n	801f3dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801f3cc:	4b3c      	ldr	r3, [pc, #240]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f3ce:	681b      	ldr	r3, [r3, #0]
 801f3d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801f3d4:	2b00      	cmp	r3, #0
 801f3d6:	d121      	bne.n	801f41c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801f3d8:	2301      	movs	r3, #1
 801f3da:	e0f6      	b.n	801f5ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801f3dc:	687b      	ldr	r3, [r7, #4]
 801f3de:	685b      	ldr	r3, [r3, #4]
 801f3e0:	2b03      	cmp	r3, #3
 801f3e2:	d107      	bne.n	801f3f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801f3e4:	4b36      	ldr	r3, [pc, #216]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f3e6:	681b      	ldr	r3, [r3, #0]
 801f3e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	d115      	bne.n	801f41c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801f3f0:	2301      	movs	r3, #1
 801f3f2:	e0ea      	b.n	801f5ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801f3f4:	687b      	ldr	r3, [r7, #4]
 801f3f6:	685b      	ldr	r3, [r3, #4]
 801f3f8:	2b01      	cmp	r3, #1
 801f3fa:	d107      	bne.n	801f40c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801f3fc:	4b30      	ldr	r3, [pc, #192]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f3fe:	681b      	ldr	r3, [r3, #0]
 801f400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f404:	2b00      	cmp	r3, #0
 801f406:	d109      	bne.n	801f41c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801f408:	2301      	movs	r3, #1
 801f40a:	e0de      	b.n	801f5ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801f40c:	4b2c      	ldr	r3, [pc, #176]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f40e:	681b      	ldr	r3, [r3, #0]
 801f410:	f003 0304 	and.w	r3, r3, #4
 801f414:	2b00      	cmp	r3, #0
 801f416:	d101      	bne.n	801f41c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801f418:	2301      	movs	r3, #1
 801f41a:	e0d6      	b.n	801f5ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801f41c:	4b28      	ldr	r3, [pc, #160]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f41e:	691b      	ldr	r3, [r3, #16]
 801f420:	f023 0207 	bic.w	r2, r3, #7
 801f424:	687b      	ldr	r3, [r7, #4]
 801f426:	685b      	ldr	r3, [r3, #4]
 801f428:	4925      	ldr	r1, [pc, #148]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f42a:	4313      	orrs	r3, r2
 801f42c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f42e:	f7fc fb91 	bl	801bb54 <HAL_GetTick>
 801f432:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f434:	e00a      	b.n	801f44c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801f436:	f7fc fb8d 	bl	801bb54 <HAL_GetTick>
 801f43a:	4602      	mov	r2, r0
 801f43c:	697b      	ldr	r3, [r7, #20]
 801f43e:	1ad3      	subs	r3, r2, r3
 801f440:	f241 3288 	movw	r2, #5000	@ 0x1388
 801f444:	4293      	cmp	r3, r2
 801f446:	d901      	bls.n	801f44c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801f448:	2303      	movs	r3, #3
 801f44a:	e0be      	b.n	801f5ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f44c:	4b1c      	ldr	r3, [pc, #112]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f44e:	691b      	ldr	r3, [r3, #16]
 801f450:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801f454:	687b      	ldr	r3, [r7, #4]
 801f456:	685b      	ldr	r3, [r3, #4]
 801f458:	00db      	lsls	r3, r3, #3
 801f45a:	429a      	cmp	r2, r3
 801f45c:	d1eb      	bne.n	801f436 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801f45e:	687b      	ldr	r3, [r7, #4]
 801f460:	681b      	ldr	r3, [r3, #0]
 801f462:	f003 0302 	and.w	r3, r3, #2
 801f466:	2b00      	cmp	r3, #0
 801f468:	d010      	beq.n	801f48c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801f46a:	687b      	ldr	r3, [r7, #4]
 801f46c:	68da      	ldr	r2, [r3, #12]
 801f46e:	4b14      	ldr	r3, [pc, #80]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f470:	699b      	ldr	r3, [r3, #24]
 801f472:	f003 030f 	and.w	r3, r3, #15
 801f476:	429a      	cmp	r2, r3
 801f478:	d208      	bcs.n	801f48c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801f47a:	4b11      	ldr	r3, [pc, #68]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f47c:	699b      	ldr	r3, [r3, #24]
 801f47e:	f023 020f 	bic.w	r2, r3, #15
 801f482:	687b      	ldr	r3, [r7, #4]
 801f484:	68db      	ldr	r3, [r3, #12]
 801f486:	490e      	ldr	r1, [pc, #56]	@ (801f4c0 <HAL_RCC_ClockConfig+0x244>)
 801f488:	4313      	orrs	r3, r2
 801f48a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801f48c:	4b0b      	ldr	r3, [pc, #44]	@ (801f4bc <HAL_RCC_ClockConfig+0x240>)
 801f48e:	681b      	ldr	r3, [r3, #0]
 801f490:	f003 030f 	and.w	r3, r3, #15
 801f494:	683a      	ldr	r2, [r7, #0]
 801f496:	429a      	cmp	r2, r3
 801f498:	d214      	bcs.n	801f4c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f49a:	4b08      	ldr	r3, [pc, #32]	@ (801f4bc <HAL_RCC_ClockConfig+0x240>)
 801f49c:	681b      	ldr	r3, [r3, #0]
 801f49e:	f023 020f 	bic.w	r2, r3, #15
 801f4a2:	4906      	ldr	r1, [pc, #24]	@ (801f4bc <HAL_RCC_ClockConfig+0x240>)
 801f4a4:	683b      	ldr	r3, [r7, #0]
 801f4a6:	4313      	orrs	r3, r2
 801f4a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801f4aa:	4b04      	ldr	r3, [pc, #16]	@ (801f4bc <HAL_RCC_ClockConfig+0x240>)
 801f4ac:	681b      	ldr	r3, [r3, #0]
 801f4ae:	f003 030f 	and.w	r3, r3, #15
 801f4b2:	683a      	ldr	r2, [r7, #0]
 801f4b4:	429a      	cmp	r2, r3
 801f4b6:	d005      	beq.n	801f4c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801f4b8:	2301      	movs	r3, #1
 801f4ba:	e086      	b.n	801f5ca <HAL_RCC_ClockConfig+0x34e>
 801f4bc:	52002000 	.word	0x52002000
 801f4c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801f4c4:	687b      	ldr	r3, [r7, #4]
 801f4c6:	681b      	ldr	r3, [r3, #0]
 801f4c8:	f003 0304 	and.w	r3, r3, #4
 801f4cc:	2b00      	cmp	r3, #0
 801f4ce:	d010      	beq.n	801f4f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	691a      	ldr	r2, [r3, #16]
 801f4d4:	4b3f      	ldr	r3, [pc, #252]	@ (801f5d4 <HAL_RCC_ClockConfig+0x358>)
 801f4d6:	699b      	ldr	r3, [r3, #24]
 801f4d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f4dc:	429a      	cmp	r2, r3
 801f4de:	d208      	bcs.n	801f4f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801f4e0:	4b3c      	ldr	r3, [pc, #240]	@ (801f5d4 <HAL_RCC_ClockConfig+0x358>)
 801f4e2:	699b      	ldr	r3, [r3, #24]
 801f4e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f4e8:	687b      	ldr	r3, [r7, #4]
 801f4ea:	691b      	ldr	r3, [r3, #16]
 801f4ec:	4939      	ldr	r1, [pc, #228]	@ (801f5d4 <HAL_RCC_ClockConfig+0x358>)
 801f4ee:	4313      	orrs	r3, r2
 801f4f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f4f2:	687b      	ldr	r3, [r7, #4]
 801f4f4:	681b      	ldr	r3, [r3, #0]
 801f4f6:	f003 0308 	and.w	r3, r3, #8
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d010      	beq.n	801f520 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801f4fe:	687b      	ldr	r3, [r7, #4]
 801f500:	695a      	ldr	r2, [r3, #20]
 801f502:	4b34      	ldr	r3, [pc, #208]	@ (801f5d4 <HAL_RCC_ClockConfig+0x358>)
 801f504:	69db      	ldr	r3, [r3, #28]
 801f506:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f50a:	429a      	cmp	r2, r3
 801f50c:	d208      	bcs.n	801f520 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801f50e:	4b31      	ldr	r3, [pc, #196]	@ (801f5d4 <HAL_RCC_ClockConfig+0x358>)
 801f510:	69db      	ldr	r3, [r3, #28]
 801f512:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	695b      	ldr	r3, [r3, #20]
 801f51a:	492e      	ldr	r1, [pc, #184]	@ (801f5d4 <HAL_RCC_ClockConfig+0x358>)
 801f51c:	4313      	orrs	r3, r2
 801f51e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	681b      	ldr	r3, [r3, #0]
 801f524:	f003 0310 	and.w	r3, r3, #16
 801f528:	2b00      	cmp	r3, #0
 801f52a:	d010      	beq.n	801f54e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801f52c:	687b      	ldr	r3, [r7, #4]
 801f52e:	699a      	ldr	r2, [r3, #24]
 801f530:	4b28      	ldr	r3, [pc, #160]	@ (801f5d4 <HAL_RCC_ClockConfig+0x358>)
 801f532:	69db      	ldr	r3, [r3, #28]
 801f534:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801f538:	429a      	cmp	r2, r3
 801f53a:	d208      	bcs.n	801f54e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801f53c:	4b25      	ldr	r3, [pc, #148]	@ (801f5d4 <HAL_RCC_ClockConfig+0x358>)
 801f53e:	69db      	ldr	r3, [r3, #28]
 801f540:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801f544:	687b      	ldr	r3, [r7, #4]
 801f546:	699b      	ldr	r3, [r3, #24]
 801f548:	4922      	ldr	r1, [pc, #136]	@ (801f5d4 <HAL_RCC_ClockConfig+0x358>)
 801f54a:	4313      	orrs	r3, r2
 801f54c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801f54e:	687b      	ldr	r3, [r7, #4]
 801f550:	681b      	ldr	r3, [r3, #0]
 801f552:	f003 0320 	and.w	r3, r3, #32
 801f556:	2b00      	cmp	r3, #0
 801f558:	d010      	beq.n	801f57c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801f55a:	687b      	ldr	r3, [r7, #4]
 801f55c:	69da      	ldr	r2, [r3, #28]
 801f55e:	4b1d      	ldr	r3, [pc, #116]	@ (801f5d4 <HAL_RCC_ClockConfig+0x358>)
 801f560:	6a1b      	ldr	r3, [r3, #32]
 801f562:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f566:	429a      	cmp	r2, r3
 801f568:	d208      	bcs.n	801f57c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801f56a:	4b1a      	ldr	r3, [pc, #104]	@ (801f5d4 <HAL_RCC_ClockConfig+0x358>)
 801f56c:	6a1b      	ldr	r3, [r3, #32]
 801f56e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f572:	687b      	ldr	r3, [r7, #4]
 801f574:	69db      	ldr	r3, [r3, #28]
 801f576:	4917      	ldr	r1, [pc, #92]	@ (801f5d4 <HAL_RCC_ClockConfig+0x358>)
 801f578:	4313      	orrs	r3, r2
 801f57a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801f57c:	f000 f834 	bl	801f5e8 <HAL_RCC_GetSysClockFreq>
 801f580:	4602      	mov	r2, r0
 801f582:	4b14      	ldr	r3, [pc, #80]	@ (801f5d4 <HAL_RCC_ClockConfig+0x358>)
 801f584:	699b      	ldr	r3, [r3, #24]
 801f586:	0a1b      	lsrs	r3, r3, #8
 801f588:	f003 030f 	and.w	r3, r3, #15
 801f58c:	4912      	ldr	r1, [pc, #72]	@ (801f5d8 <HAL_RCC_ClockConfig+0x35c>)
 801f58e:	5ccb      	ldrb	r3, [r1, r3]
 801f590:	f003 031f 	and.w	r3, r3, #31
 801f594:	fa22 f303 	lsr.w	r3, r2, r3
 801f598:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801f59a:	4b0e      	ldr	r3, [pc, #56]	@ (801f5d4 <HAL_RCC_ClockConfig+0x358>)
 801f59c:	699b      	ldr	r3, [r3, #24]
 801f59e:	f003 030f 	and.w	r3, r3, #15
 801f5a2:	4a0d      	ldr	r2, [pc, #52]	@ (801f5d8 <HAL_RCC_ClockConfig+0x35c>)
 801f5a4:	5cd3      	ldrb	r3, [r2, r3]
 801f5a6:	f003 031f 	and.w	r3, r3, #31
 801f5aa:	693a      	ldr	r2, [r7, #16]
 801f5ac:	fa22 f303 	lsr.w	r3, r2, r3
 801f5b0:	4a0a      	ldr	r2, [pc, #40]	@ (801f5dc <HAL_RCC_ClockConfig+0x360>)
 801f5b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801f5b4:	4a0a      	ldr	r2, [pc, #40]	@ (801f5e0 <HAL_RCC_ClockConfig+0x364>)
 801f5b6:	693b      	ldr	r3, [r7, #16]
 801f5b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801f5ba:	4b0a      	ldr	r3, [pc, #40]	@ (801f5e4 <HAL_RCC_ClockConfig+0x368>)
 801f5bc:	681b      	ldr	r3, [r3, #0]
 801f5be:	4618      	mov	r0, r3
 801f5c0:	f7fc fa7e 	bl	801bac0 <HAL_InitTick>
 801f5c4:	4603      	mov	r3, r0
 801f5c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801f5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 801f5ca:	4618      	mov	r0, r3
 801f5cc:	3718      	adds	r7, #24
 801f5ce:	46bd      	mov	sp, r7
 801f5d0:	bd80      	pop	{r7, pc}
 801f5d2:	bf00      	nop
 801f5d4:	58024400 	.word	0x58024400
 801f5d8:	0802b3a0 	.word	0x0802b3a0
 801f5dc:	24000020 	.word	0x24000020
 801f5e0:	2400001c 	.word	0x2400001c
 801f5e4:	24000024 	.word	0x24000024

0801f5e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801f5e8:	b480      	push	{r7}
 801f5ea:	b089      	sub	sp, #36	@ 0x24
 801f5ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801f5ee:	4bb3      	ldr	r3, [pc, #716]	@ (801f8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f5f0:	691b      	ldr	r3, [r3, #16]
 801f5f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801f5f6:	2b18      	cmp	r3, #24
 801f5f8:	f200 8155 	bhi.w	801f8a6 <HAL_RCC_GetSysClockFreq+0x2be>
 801f5fc:	a201      	add	r2, pc, #4	@ (adr r2, 801f604 <HAL_RCC_GetSysClockFreq+0x1c>)
 801f5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f602:	bf00      	nop
 801f604:	0801f669 	.word	0x0801f669
 801f608:	0801f8a7 	.word	0x0801f8a7
 801f60c:	0801f8a7 	.word	0x0801f8a7
 801f610:	0801f8a7 	.word	0x0801f8a7
 801f614:	0801f8a7 	.word	0x0801f8a7
 801f618:	0801f8a7 	.word	0x0801f8a7
 801f61c:	0801f8a7 	.word	0x0801f8a7
 801f620:	0801f8a7 	.word	0x0801f8a7
 801f624:	0801f68f 	.word	0x0801f68f
 801f628:	0801f8a7 	.word	0x0801f8a7
 801f62c:	0801f8a7 	.word	0x0801f8a7
 801f630:	0801f8a7 	.word	0x0801f8a7
 801f634:	0801f8a7 	.word	0x0801f8a7
 801f638:	0801f8a7 	.word	0x0801f8a7
 801f63c:	0801f8a7 	.word	0x0801f8a7
 801f640:	0801f8a7 	.word	0x0801f8a7
 801f644:	0801f695 	.word	0x0801f695
 801f648:	0801f8a7 	.word	0x0801f8a7
 801f64c:	0801f8a7 	.word	0x0801f8a7
 801f650:	0801f8a7 	.word	0x0801f8a7
 801f654:	0801f8a7 	.word	0x0801f8a7
 801f658:	0801f8a7 	.word	0x0801f8a7
 801f65c:	0801f8a7 	.word	0x0801f8a7
 801f660:	0801f8a7 	.word	0x0801f8a7
 801f664:	0801f69b 	.word	0x0801f69b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f668:	4b94      	ldr	r3, [pc, #592]	@ (801f8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f66a:	681b      	ldr	r3, [r3, #0]
 801f66c:	f003 0320 	and.w	r3, r3, #32
 801f670:	2b00      	cmp	r3, #0
 801f672:	d009      	beq.n	801f688 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f674:	4b91      	ldr	r3, [pc, #580]	@ (801f8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f676:	681b      	ldr	r3, [r3, #0]
 801f678:	08db      	lsrs	r3, r3, #3
 801f67a:	f003 0303 	and.w	r3, r3, #3
 801f67e:	4a90      	ldr	r2, [pc, #576]	@ (801f8c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801f680:	fa22 f303 	lsr.w	r3, r2, r3
 801f684:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801f686:	e111      	b.n	801f8ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801f688:	4b8d      	ldr	r3, [pc, #564]	@ (801f8c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801f68a:	61bb      	str	r3, [r7, #24]
      break;
 801f68c:	e10e      	b.n	801f8ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801f68e:	4b8d      	ldr	r3, [pc, #564]	@ (801f8c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801f690:	61bb      	str	r3, [r7, #24]
      break;
 801f692:	e10b      	b.n	801f8ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801f694:	4b8c      	ldr	r3, [pc, #560]	@ (801f8c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801f696:	61bb      	str	r3, [r7, #24]
      break;
 801f698:	e108      	b.n	801f8ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f69a:	4b88      	ldr	r3, [pc, #544]	@ (801f8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f69c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f69e:	f003 0303 	and.w	r3, r3, #3
 801f6a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801f6a4:	4b85      	ldr	r3, [pc, #532]	@ (801f8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f6a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f6a8:	091b      	lsrs	r3, r3, #4
 801f6aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f6ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801f6b0:	4b82      	ldr	r3, [pc, #520]	@ (801f8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f6b4:	f003 0301 	and.w	r3, r3, #1
 801f6b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801f6ba:	4b80      	ldr	r3, [pc, #512]	@ (801f8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f6bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f6be:	08db      	lsrs	r3, r3, #3
 801f6c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f6c4:	68fa      	ldr	r2, [r7, #12]
 801f6c6:	fb02 f303 	mul.w	r3, r2, r3
 801f6ca:	ee07 3a90 	vmov	s15, r3
 801f6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f6d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801f6d6:	693b      	ldr	r3, [r7, #16]
 801f6d8:	2b00      	cmp	r3, #0
 801f6da:	f000 80e1 	beq.w	801f8a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 801f6de:	697b      	ldr	r3, [r7, #20]
 801f6e0:	2b02      	cmp	r3, #2
 801f6e2:	f000 8083 	beq.w	801f7ec <HAL_RCC_GetSysClockFreq+0x204>
 801f6e6:	697b      	ldr	r3, [r7, #20]
 801f6e8:	2b02      	cmp	r3, #2
 801f6ea:	f200 80a1 	bhi.w	801f830 <HAL_RCC_GetSysClockFreq+0x248>
 801f6ee:	697b      	ldr	r3, [r7, #20]
 801f6f0:	2b00      	cmp	r3, #0
 801f6f2:	d003      	beq.n	801f6fc <HAL_RCC_GetSysClockFreq+0x114>
 801f6f4:	697b      	ldr	r3, [r7, #20]
 801f6f6:	2b01      	cmp	r3, #1
 801f6f8:	d056      	beq.n	801f7a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 801f6fa:	e099      	b.n	801f830 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f6fc:	4b6f      	ldr	r3, [pc, #444]	@ (801f8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f6fe:	681b      	ldr	r3, [r3, #0]
 801f700:	f003 0320 	and.w	r3, r3, #32
 801f704:	2b00      	cmp	r3, #0
 801f706:	d02d      	beq.n	801f764 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f708:	4b6c      	ldr	r3, [pc, #432]	@ (801f8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f70a:	681b      	ldr	r3, [r3, #0]
 801f70c:	08db      	lsrs	r3, r3, #3
 801f70e:	f003 0303 	and.w	r3, r3, #3
 801f712:	4a6b      	ldr	r2, [pc, #428]	@ (801f8c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801f714:	fa22 f303 	lsr.w	r3, r2, r3
 801f718:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f71a:	687b      	ldr	r3, [r7, #4]
 801f71c:	ee07 3a90 	vmov	s15, r3
 801f720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f724:	693b      	ldr	r3, [r7, #16]
 801f726:	ee07 3a90 	vmov	s15, r3
 801f72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f72e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f732:	4b62      	ldr	r3, [pc, #392]	@ (801f8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f73a:	ee07 3a90 	vmov	s15, r3
 801f73e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f742:	ed97 6a02 	vldr	s12, [r7, #8]
 801f746:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801f8cc <HAL_RCC_GetSysClockFreq+0x2e4>
 801f74a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f74e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f75a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f75e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801f762:	e087      	b.n	801f874 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f764:	693b      	ldr	r3, [r7, #16]
 801f766:	ee07 3a90 	vmov	s15, r3
 801f76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f76e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801f8d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 801f772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f776:	4b51      	ldr	r3, [pc, #324]	@ (801f8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f77e:	ee07 3a90 	vmov	s15, r3
 801f782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f786:	ed97 6a02 	vldr	s12, [r7, #8]
 801f78a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801f8cc <HAL_RCC_GetSysClockFreq+0x2e4>
 801f78e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f79a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f79e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f7a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801f7a6:	e065      	b.n	801f874 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f7a8:	693b      	ldr	r3, [r7, #16]
 801f7aa:	ee07 3a90 	vmov	s15, r3
 801f7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f7b2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801f8d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801f7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f7ba:	4b40      	ldr	r3, [pc, #256]	@ (801f8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f7bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f7c2:	ee07 3a90 	vmov	s15, r3
 801f7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f7ca:	ed97 6a02 	vldr	s12, [r7, #8]
 801f7ce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801f8cc <HAL_RCC_GetSysClockFreq+0x2e4>
 801f7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f7da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f7e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801f7ea:	e043      	b.n	801f874 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f7ec:	693b      	ldr	r3, [r7, #16]
 801f7ee:	ee07 3a90 	vmov	s15, r3
 801f7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f7f6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801f8d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 801f7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f7fe:	4b2f      	ldr	r3, [pc, #188]	@ (801f8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f806:	ee07 3a90 	vmov	s15, r3
 801f80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f80e:	ed97 6a02 	vldr	s12, [r7, #8]
 801f812:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801f8cc <HAL_RCC_GetSysClockFreq+0x2e4>
 801f816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f81e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f826:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f82a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801f82e:	e021      	b.n	801f874 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f830:	693b      	ldr	r3, [r7, #16]
 801f832:	ee07 3a90 	vmov	s15, r3
 801f836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f83a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801f8d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801f83e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f842:	4b1e      	ldr	r3, [pc, #120]	@ (801f8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f84a:	ee07 3a90 	vmov	s15, r3
 801f84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f852:	ed97 6a02 	vldr	s12, [r7, #8]
 801f856:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801f8cc <HAL_RCC_GetSysClockFreq+0x2e4>
 801f85a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f85e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f86e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801f872:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801f874:	4b11      	ldr	r3, [pc, #68]	@ (801f8bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f878:	0a5b      	lsrs	r3, r3, #9
 801f87a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f87e:	3301      	adds	r3, #1
 801f880:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801f882:	683b      	ldr	r3, [r7, #0]
 801f884:	ee07 3a90 	vmov	s15, r3
 801f888:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f88c:	edd7 6a07 	vldr	s13, [r7, #28]
 801f890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f898:	ee17 3a90 	vmov	r3, s15
 801f89c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801f89e:	e005      	b.n	801f8ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801f8a0:	2300      	movs	r3, #0
 801f8a2:	61bb      	str	r3, [r7, #24]
      break;
 801f8a4:	e002      	b.n	801f8ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801f8a6:	4b07      	ldr	r3, [pc, #28]	@ (801f8c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801f8a8:	61bb      	str	r3, [r7, #24]
      break;
 801f8aa:	bf00      	nop
  }

  return sysclockfreq;
 801f8ac:	69bb      	ldr	r3, [r7, #24]
}
 801f8ae:	4618      	mov	r0, r3
 801f8b0:	3724      	adds	r7, #36	@ 0x24
 801f8b2:	46bd      	mov	sp, r7
 801f8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8b8:	4770      	bx	lr
 801f8ba:	bf00      	nop
 801f8bc:	58024400 	.word	0x58024400
 801f8c0:	03d09000 	.word	0x03d09000
 801f8c4:	003d0900 	.word	0x003d0900
 801f8c8:	017d7840 	.word	0x017d7840
 801f8cc:	46000000 	.word	0x46000000
 801f8d0:	4c742400 	.word	0x4c742400
 801f8d4:	4a742400 	.word	0x4a742400
 801f8d8:	4bbebc20 	.word	0x4bbebc20

0801f8dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801f8dc:	b580      	push	{r7, lr}
 801f8de:	b082      	sub	sp, #8
 801f8e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801f8e2:	f7ff fe81 	bl	801f5e8 <HAL_RCC_GetSysClockFreq>
 801f8e6:	4602      	mov	r2, r0
 801f8e8:	4b10      	ldr	r3, [pc, #64]	@ (801f92c <HAL_RCC_GetHCLKFreq+0x50>)
 801f8ea:	699b      	ldr	r3, [r3, #24]
 801f8ec:	0a1b      	lsrs	r3, r3, #8
 801f8ee:	f003 030f 	and.w	r3, r3, #15
 801f8f2:	490f      	ldr	r1, [pc, #60]	@ (801f930 <HAL_RCC_GetHCLKFreq+0x54>)
 801f8f4:	5ccb      	ldrb	r3, [r1, r3]
 801f8f6:	f003 031f 	and.w	r3, r3, #31
 801f8fa:	fa22 f303 	lsr.w	r3, r2, r3
 801f8fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801f900:	4b0a      	ldr	r3, [pc, #40]	@ (801f92c <HAL_RCC_GetHCLKFreq+0x50>)
 801f902:	699b      	ldr	r3, [r3, #24]
 801f904:	f003 030f 	and.w	r3, r3, #15
 801f908:	4a09      	ldr	r2, [pc, #36]	@ (801f930 <HAL_RCC_GetHCLKFreq+0x54>)
 801f90a:	5cd3      	ldrb	r3, [r2, r3]
 801f90c:	f003 031f 	and.w	r3, r3, #31
 801f910:	687a      	ldr	r2, [r7, #4]
 801f912:	fa22 f303 	lsr.w	r3, r2, r3
 801f916:	4a07      	ldr	r2, [pc, #28]	@ (801f934 <HAL_RCC_GetHCLKFreq+0x58>)
 801f918:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801f91a:	4a07      	ldr	r2, [pc, #28]	@ (801f938 <HAL_RCC_GetHCLKFreq+0x5c>)
 801f91c:	687b      	ldr	r3, [r7, #4]
 801f91e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801f920:	4b04      	ldr	r3, [pc, #16]	@ (801f934 <HAL_RCC_GetHCLKFreq+0x58>)
 801f922:	681b      	ldr	r3, [r3, #0]
}
 801f924:	4618      	mov	r0, r3
 801f926:	3708      	adds	r7, #8
 801f928:	46bd      	mov	sp, r7
 801f92a:	bd80      	pop	{r7, pc}
 801f92c:	58024400 	.word	0x58024400
 801f930:	0802b3a0 	.word	0x0802b3a0
 801f934:	24000020 	.word	0x24000020
 801f938:	2400001c 	.word	0x2400001c

0801f93c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801f93c:	b580      	push	{r7, lr}
 801f93e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801f940:	f7ff ffcc 	bl	801f8dc <HAL_RCC_GetHCLKFreq>
 801f944:	4602      	mov	r2, r0
 801f946:	4b06      	ldr	r3, [pc, #24]	@ (801f960 <HAL_RCC_GetPCLK1Freq+0x24>)
 801f948:	69db      	ldr	r3, [r3, #28]
 801f94a:	091b      	lsrs	r3, r3, #4
 801f94c:	f003 0307 	and.w	r3, r3, #7
 801f950:	4904      	ldr	r1, [pc, #16]	@ (801f964 <HAL_RCC_GetPCLK1Freq+0x28>)
 801f952:	5ccb      	ldrb	r3, [r1, r3]
 801f954:	f003 031f 	and.w	r3, r3, #31
 801f958:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801f95c:	4618      	mov	r0, r3
 801f95e:	bd80      	pop	{r7, pc}
 801f960:	58024400 	.word	0x58024400
 801f964:	0802b3a0 	.word	0x0802b3a0

0801f968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801f968:	b580      	push	{r7, lr}
 801f96a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801f96c:	f7ff ffb6 	bl	801f8dc <HAL_RCC_GetHCLKFreq>
 801f970:	4602      	mov	r2, r0
 801f972:	4b06      	ldr	r3, [pc, #24]	@ (801f98c <HAL_RCC_GetPCLK2Freq+0x24>)
 801f974:	69db      	ldr	r3, [r3, #28]
 801f976:	0a1b      	lsrs	r3, r3, #8
 801f978:	f003 0307 	and.w	r3, r3, #7
 801f97c:	4904      	ldr	r1, [pc, #16]	@ (801f990 <HAL_RCC_GetPCLK2Freq+0x28>)
 801f97e:	5ccb      	ldrb	r3, [r1, r3]
 801f980:	f003 031f 	and.w	r3, r3, #31
 801f984:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801f988:	4618      	mov	r0, r3
 801f98a:	bd80      	pop	{r7, pc}
 801f98c:	58024400 	.word	0x58024400
 801f990:	0802b3a0 	.word	0x0802b3a0

0801f994 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801f994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f998:	b0ca      	sub	sp, #296	@ 0x128
 801f99a:	af00      	add	r7, sp, #0
 801f99c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801f9a0:	2300      	movs	r3, #0
 801f9a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801f9a6:	2300      	movs	r3, #0
 801f9a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801f9ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f9b4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801f9b8:	2500      	movs	r5, #0
 801f9ba:	ea54 0305 	orrs.w	r3, r4, r5
 801f9be:	d049      	beq.n	801fa54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801f9c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f9c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801f9c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801f9ca:	d02f      	beq.n	801fa2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 801f9cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801f9d0:	d828      	bhi.n	801fa24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801f9d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801f9d6:	d01a      	beq.n	801fa0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801f9d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801f9dc:	d822      	bhi.n	801fa24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801f9de:	2b00      	cmp	r3, #0
 801f9e0:	d003      	beq.n	801f9ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 801f9e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801f9e6:	d007      	beq.n	801f9f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801f9e8:	e01c      	b.n	801fa24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f9ea:	4bb8      	ldr	r3, [pc, #736]	@ (801fccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801f9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9ee:	4ab7      	ldr	r2, [pc, #732]	@ (801fccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801f9f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801f9f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801f9f6:	e01a      	b.n	801fa2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801f9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f9fc:	3308      	adds	r3, #8
 801f9fe:	2102      	movs	r1, #2
 801fa00:	4618      	mov	r0, r3
 801fa02:	f002 fb61 	bl	80220c8 <RCCEx_PLL2_Config>
 801fa06:	4603      	mov	r3, r0
 801fa08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801fa0c:	e00f      	b.n	801fa2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801fa0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fa12:	3328      	adds	r3, #40	@ 0x28
 801fa14:	2102      	movs	r1, #2
 801fa16:	4618      	mov	r0, r3
 801fa18:	f002 fc08 	bl	802222c <RCCEx_PLL3_Config>
 801fa1c:	4603      	mov	r3, r0
 801fa1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801fa22:	e004      	b.n	801fa2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801fa24:	2301      	movs	r3, #1
 801fa26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fa2a:	e000      	b.n	801fa2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801fa2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fa2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fa32:	2b00      	cmp	r3, #0
 801fa34:	d10a      	bne.n	801fa4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801fa36:	4ba5      	ldr	r3, [pc, #660]	@ (801fccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fa38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801fa3a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801fa3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fa42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fa44:	4aa1      	ldr	r2, [pc, #644]	@ (801fccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fa46:	430b      	orrs	r3, r1
 801fa48:	6513      	str	r3, [r2, #80]	@ 0x50
 801fa4a:	e003      	b.n	801fa54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fa4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fa50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801fa54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa5c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801fa60:	f04f 0900 	mov.w	r9, #0
 801fa64:	ea58 0309 	orrs.w	r3, r8, r9
 801fa68:	d047      	beq.n	801fafa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801fa6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fa6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fa70:	2b04      	cmp	r3, #4
 801fa72:	d82a      	bhi.n	801faca <HAL_RCCEx_PeriphCLKConfig+0x136>
 801fa74:	a201      	add	r2, pc, #4	@ (adr r2, 801fa7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801fa76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fa7a:	bf00      	nop
 801fa7c:	0801fa91 	.word	0x0801fa91
 801fa80:	0801fa9f 	.word	0x0801fa9f
 801fa84:	0801fab5 	.word	0x0801fab5
 801fa88:	0801fad3 	.word	0x0801fad3
 801fa8c:	0801fad3 	.word	0x0801fad3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fa90:	4b8e      	ldr	r3, [pc, #568]	@ (801fccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fa92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa94:	4a8d      	ldr	r2, [pc, #564]	@ (801fccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fa96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fa9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fa9c:	e01a      	b.n	801fad4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fa9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801faa2:	3308      	adds	r3, #8
 801faa4:	2100      	movs	r1, #0
 801faa6:	4618      	mov	r0, r3
 801faa8:	f002 fb0e 	bl	80220c8 <RCCEx_PLL2_Config>
 801faac:	4603      	mov	r3, r0
 801faae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fab2:	e00f      	b.n	801fad4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fab8:	3328      	adds	r3, #40	@ 0x28
 801faba:	2100      	movs	r1, #0
 801fabc:	4618      	mov	r0, r3
 801fabe:	f002 fbb5 	bl	802222c <RCCEx_PLL3_Config>
 801fac2:	4603      	mov	r3, r0
 801fac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fac8:	e004      	b.n	801fad4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801faca:	2301      	movs	r3, #1
 801facc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fad0:	e000      	b.n	801fad4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801fad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fad8:	2b00      	cmp	r3, #0
 801fada:	d10a      	bne.n	801faf2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801fadc:	4b7b      	ldr	r3, [pc, #492]	@ (801fccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801fae0:	f023 0107 	bic.w	r1, r3, #7
 801fae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801faea:	4a78      	ldr	r2, [pc, #480]	@ (801fccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801faec:	430b      	orrs	r3, r1
 801faee:	6513      	str	r3, [r2, #80]	@ 0x50
 801faf0:	e003      	b.n	801fafa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801faf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801faf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801fafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fb02:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801fb06:	f04f 0b00 	mov.w	fp, #0
 801fb0a:	ea5a 030b 	orrs.w	r3, sl, fp
 801fb0e:	d04c      	beq.n	801fbaa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801fb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801fb16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801fb1a:	d030      	beq.n	801fb7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801fb1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801fb20:	d829      	bhi.n	801fb76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801fb22:	2bc0      	cmp	r3, #192	@ 0xc0
 801fb24:	d02d      	beq.n	801fb82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801fb26:	2bc0      	cmp	r3, #192	@ 0xc0
 801fb28:	d825      	bhi.n	801fb76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801fb2a:	2b80      	cmp	r3, #128	@ 0x80
 801fb2c:	d018      	beq.n	801fb60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801fb2e:	2b80      	cmp	r3, #128	@ 0x80
 801fb30:	d821      	bhi.n	801fb76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801fb32:	2b00      	cmp	r3, #0
 801fb34:	d002      	beq.n	801fb3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801fb36:	2b40      	cmp	r3, #64	@ 0x40
 801fb38:	d007      	beq.n	801fb4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801fb3a:	e01c      	b.n	801fb76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fb3c:	4b63      	ldr	r3, [pc, #396]	@ (801fccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fb3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb40:	4a62      	ldr	r2, [pc, #392]	@ (801fccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fb42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fb46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801fb48:	e01c      	b.n	801fb84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fb4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb4e:	3308      	adds	r3, #8
 801fb50:	2100      	movs	r1, #0
 801fb52:	4618      	mov	r0, r3
 801fb54:	f002 fab8 	bl	80220c8 <RCCEx_PLL2_Config>
 801fb58:	4603      	mov	r3, r0
 801fb5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801fb5e:	e011      	b.n	801fb84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fb60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb64:	3328      	adds	r3, #40	@ 0x28
 801fb66:	2100      	movs	r1, #0
 801fb68:	4618      	mov	r0, r3
 801fb6a:	f002 fb5f 	bl	802222c <RCCEx_PLL3_Config>
 801fb6e:	4603      	mov	r3, r0
 801fb70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801fb74:	e006      	b.n	801fb84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801fb76:	2301      	movs	r3, #1
 801fb78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fb7c:	e002      	b.n	801fb84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801fb7e:	bf00      	nop
 801fb80:	e000      	b.n	801fb84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801fb82:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fb84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fb88:	2b00      	cmp	r3, #0
 801fb8a:	d10a      	bne.n	801fba2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801fb8c:	4b4f      	ldr	r3, [pc, #316]	@ (801fccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fb8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801fb90:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801fb94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801fb9a:	4a4c      	ldr	r2, [pc, #304]	@ (801fccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fb9c:	430b      	orrs	r3, r1
 801fb9e:	6513      	str	r3, [r2, #80]	@ 0x50
 801fba0:	e003      	b.n	801fbaa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801fbaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fbb2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801fbb6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801fbba:	2300      	movs	r3, #0
 801fbbc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801fbc0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801fbc4:	460b      	mov	r3, r1
 801fbc6:	4313      	orrs	r3, r2
 801fbc8:	d053      	beq.n	801fc72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801fbca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fbce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801fbd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801fbd6:	d035      	beq.n	801fc44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801fbd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801fbdc:	d82e      	bhi.n	801fc3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801fbde:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801fbe2:	d031      	beq.n	801fc48 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801fbe4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801fbe8:	d828      	bhi.n	801fc3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801fbea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801fbee:	d01a      	beq.n	801fc26 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801fbf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801fbf4:	d822      	bhi.n	801fc3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801fbf6:	2b00      	cmp	r3, #0
 801fbf8:	d003      	beq.n	801fc02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801fbfa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801fbfe:	d007      	beq.n	801fc10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801fc00:	e01c      	b.n	801fc3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fc02:	4b32      	ldr	r3, [pc, #200]	@ (801fccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fc04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc06:	4a31      	ldr	r2, [pc, #196]	@ (801fccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fc08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fc0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fc0e:	e01c      	b.n	801fc4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fc10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc14:	3308      	adds	r3, #8
 801fc16:	2100      	movs	r1, #0
 801fc18:	4618      	mov	r0, r3
 801fc1a:	f002 fa55 	bl	80220c8 <RCCEx_PLL2_Config>
 801fc1e:	4603      	mov	r3, r0
 801fc20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801fc24:	e011      	b.n	801fc4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fc26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc2a:	3328      	adds	r3, #40	@ 0x28
 801fc2c:	2100      	movs	r1, #0
 801fc2e:	4618      	mov	r0, r3
 801fc30:	f002 fafc 	bl	802222c <RCCEx_PLL3_Config>
 801fc34:	4603      	mov	r3, r0
 801fc36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fc3a:	e006      	b.n	801fc4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801fc3c:	2301      	movs	r3, #1
 801fc3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fc42:	e002      	b.n	801fc4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801fc44:	bf00      	nop
 801fc46:	e000      	b.n	801fc4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801fc48:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fc4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fc4e:	2b00      	cmp	r3, #0
 801fc50:	d10b      	bne.n	801fc6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801fc52:	4b1e      	ldr	r3, [pc, #120]	@ (801fccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fc54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fc56:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801fc5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801fc62:	4a1a      	ldr	r2, [pc, #104]	@ (801fccc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fc64:	430b      	orrs	r3, r1
 801fc66:	6593      	str	r3, [r2, #88]	@ 0x58
 801fc68:	e003      	b.n	801fc72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fc6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fc6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801fc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc7a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801fc7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801fc82:	2300      	movs	r3, #0
 801fc84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801fc88:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801fc8c:	460b      	mov	r3, r1
 801fc8e:	4313      	orrs	r3, r2
 801fc90:	d056      	beq.n	801fd40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801fc92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801fc9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801fc9e:	d038      	beq.n	801fd12 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801fca0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801fca4:	d831      	bhi.n	801fd0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801fca6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801fcaa:	d034      	beq.n	801fd16 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801fcac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801fcb0:	d82b      	bhi.n	801fd0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801fcb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801fcb6:	d01d      	beq.n	801fcf4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801fcb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801fcbc:	d825      	bhi.n	801fd0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801fcbe:	2b00      	cmp	r3, #0
 801fcc0:	d006      	beq.n	801fcd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801fcc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801fcc6:	d00a      	beq.n	801fcde <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801fcc8:	e01f      	b.n	801fd0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801fcca:	bf00      	nop
 801fccc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fcd0:	4ba2      	ldr	r3, [pc, #648]	@ (801ff5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fcd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fcd4:	4aa1      	ldr	r2, [pc, #644]	@ (801ff5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fcd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fcda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fcdc:	e01c      	b.n	801fd18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fcde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fce2:	3308      	adds	r3, #8
 801fce4:	2100      	movs	r1, #0
 801fce6:	4618      	mov	r0, r3
 801fce8:	f002 f9ee 	bl	80220c8 <RCCEx_PLL2_Config>
 801fcec:	4603      	mov	r3, r0
 801fcee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801fcf2:	e011      	b.n	801fd18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fcf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fcf8:	3328      	adds	r3, #40	@ 0x28
 801fcfa:	2100      	movs	r1, #0
 801fcfc:	4618      	mov	r0, r3
 801fcfe:	f002 fa95 	bl	802222c <RCCEx_PLL3_Config>
 801fd02:	4603      	mov	r3, r0
 801fd04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fd08:	e006      	b.n	801fd18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801fd0a:	2301      	movs	r3, #1
 801fd0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fd10:	e002      	b.n	801fd18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801fd12:	bf00      	nop
 801fd14:	e000      	b.n	801fd18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801fd16:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fd18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fd1c:	2b00      	cmp	r3, #0
 801fd1e:	d10b      	bne.n	801fd38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801fd20:	4b8e      	ldr	r3, [pc, #568]	@ (801ff5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fd22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fd24:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801fd28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fd2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801fd30:	4a8a      	ldr	r2, [pc, #552]	@ (801ff5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fd32:	430b      	orrs	r3, r1
 801fd34:	6593      	str	r3, [r2, #88]	@ 0x58
 801fd36:	e003      	b.n	801fd40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fd38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fd3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801fd40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fd48:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801fd4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801fd50:	2300      	movs	r3, #0
 801fd52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801fd56:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801fd5a:	460b      	mov	r3, r1
 801fd5c:	4313      	orrs	r3, r2
 801fd5e:	d03a      	beq.n	801fdd6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801fd60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fd64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801fd66:	2b30      	cmp	r3, #48	@ 0x30
 801fd68:	d01f      	beq.n	801fdaa <HAL_RCCEx_PeriphCLKConfig+0x416>
 801fd6a:	2b30      	cmp	r3, #48	@ 0x30
 801fd6c:	d819      	bhi.n	801fda2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801fd6e:	2b20      	cmp	r3, #32
 801fd70:	d00c      	beq.n	801fd8c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801fd72:	2b20      	cmp	r3, #32
 801fd74:	d815      	bhi.n	801fda2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801fd76:	2b00      	cmp	r3, #0
 801fd78:	d019      	beq.n	801fdae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801fd7a:	2b10      	cmp	r3, #16
 801fd7c:	d111      	bne.n	801fda2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fd7e:	4b77      	ldr	r3, [pc, #476]	@ (801ff5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fd80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fd82:	4a76      	ldr	r2, [pc, #472]	@ (801ff5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fd84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fd88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801fd8a:	e011      	b.n	801fdb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801fd8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fd90:	3308      	adds	r3, #8
 801fd92:	2102      	movs	r1, #2
 801fd94:	4618      	mov	r0, r3
 801fd96:	f002 f997 	bl	80220c8 <RCCEx_PLL2_Config>
 801fd9a:	4603      	mov	r3, r0
 801fd9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801fda0:	e006      	b.n	801fdb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801fda2:	2301      	movs	r3, #1
 801fda4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fda8:	e002      	b.n	801fdb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801fdaa:	bf00      	nop
 801fdac:	e000      	b.n	801fdb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801fdae:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fdb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fdb4:	2b00      	cmp	r3, #0
 801fdb6:	d10a      	bne.n	801fdce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801fdb8:	4b68      	ldr	r3, [pc, #416]	@ (801ff5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fdba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801fdbc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801fdc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fdc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801fdc6:	4a65      	ldr	r2, [pc, #404]	@ (801ff5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fdc8:	430b      	orrs	r3, r1
 801fdca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801fdcc:	e003      	b.n	801fdd6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fdce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fdd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801fdd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdde:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801fde2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801fde6:	2300      	movs	r3, #0
 801fde8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801fdec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801fdf0:	460b      	mov	r3, r1
 801fdf2:	4313      	orrs	r3, r2
 801fdf4:	d051      	beq.n	801fe9a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801fdf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fdfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801fdfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801fe00:	d035      	beq.n	801fe6e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801fe02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801fe06:	d82e      	bhi.n	801fe66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801fe08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801fe0c:	d031      	beq.n	801fe72 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801fe0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801fe12:	d828      	bhi.n	801fe66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801fe14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801fe18:	d01a      	beq.n	801fe50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801fe1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801fe1e:	d822      	bhi.n	801fe66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801fe20:	2b00      	cmp	r3, #0
 801fe22:	d003      	beq.n	801fe2c <HAL_RCCEx_PeriphCLKConfig+0x498>
 801fe24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801fe28:	d007      	beq.n	801fe3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801fe2a:	e01c      	b.n	801fe66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fe2c:	4b4b      	ldr	r3, [pc, #300]	@ (801ff5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fe2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fe30:	4a4a      	ldr	r2, [pc, #296]	@ (801ff5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fe32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fe36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801fe38:	e01c      	b.n	801fe74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fe3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fe3e:	3308      	adds	r3, #8
 801fe40:	2100      	movs	r1, #0
 801fe42:	4618      	mov	r0, r3
 801fe44:	f002 f940 	bl	80220c8 <RCCEx_PLL2_Config>
 801fe48:	4603      	mov	r3, r0
 801fe4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801fe4e:	e011      	b.n	801fe74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fe50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fe54:	3328      	adds	r3, #40	@ 0x28
 801fe56:	2100      	movs	r1, #0
 801fe58:	4618      	mov	r0, r3
 801fe5a:	f002 f9e7 	bl	802222c <RCCEx_PLL3_Config>
 801fe5e:	4603      	mov	r3, r0
 801fe60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801fe64:	e006      	b.n	801fe74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801fe66:	2301      	movs	r3, #1
 801fe68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fe6c:	e002      	b.n	801fe74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801fe6e:	bf00      	nop
 801fe70:	e000      	b.n	801fe74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801fe72:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fe74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fe78:	2b00      	cmp	r3, #0
 801fe7a:	d10a      	bne.n	801fe92 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801fe7c:	4b37      	ldr	r3, [pc, #220]	@ (801ff5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fe7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801fe80:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801fe84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fe88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801fe8a:	4a34      	ldr	r2, [pc, #208]	@ (801ff5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fe8c:	430b      	orrs	r3, r1
 801fe8e:	6513      	str	r3, [r2, #80]	@ 0x50
 801fe90:	e003      	b.n	801fe9a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fe92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fe96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801fe9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fe9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fea2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801fea6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801feaa:	2300      	movs	r3, #0
 801feac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801feb0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801feb4:	460b      	mov	r3, r1
 801feb6:	4313      	orrs	r3, r2
 801feb8:	d056      	beq.n	801ff68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801feba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801febe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801fec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801fec4:	d033      	beq.n	801ff2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801fec6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801feca:	d82c      	bhi.n	801ff26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801fecc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801fed0:	d02f      	beq.n	801ff32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801fed2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801fed6:	d826      	bhi.n	801ff26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801fed8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801fedc:	d02b      	beq.n	801ff36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801fede:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801fee2:	d820      	bhi.n	801ff26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801fee4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801fee8:	d012      	beq.n	801ff10 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801feea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801feee:	d81a      	bhi.n	801ff26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801fef0:	2b00      	cmp	r3, #0
 801fef2:	d022      	beq.n	801ff3a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801fef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801fef8:	d115      	bne.n	801ff26 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801fefa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fefe:	3308      	adds	r3, #8
 801ff00:	2101      	movs	r1, #1
 801ff02:	4618      	mov	r0, r3
 801ff04:	f002 f8e0 	bl	80220c8 <RCCEx_PLL2_Config>
 801ff08:	4603      	mov	r3, r0
 801ff0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801ff0e:	e015      	b.n	801ff3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ff10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff14:	3328      	adds	r3, #40	@ 0x28
 801ff16:	2101      	movs	r1, #1
 801ff18:	4618      	mov	r0, r3
 801ff1a:	f002 f987 	bl	802222c <RCCEx_PLL3_Config>
 801ff1e:	4603      	mov	r3, r0
 801ff20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801ff24:	e00a      	b.n	801ff3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ff26:	2301      	movs	r3, #1
 801ff28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ff2c:	e006      	b.n	801ff3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801ff2e:	bf00      	nop
 801ff30:	e004      	b.n	801ff3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801ff32:	bf00      	nop
 801ff34:	e002      	b.n	801ff3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801ff36:	bf00      	nop
 801ff38:	e000      	b.n	801ff3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801ff3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ff3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ff40:	2b00      	cmp	r3, #0
 801ff42:	d10d      	bne.n	801ff60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801ff44:	4b05      	ldr	r3, [pc, #20]	@ (801ff5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ff46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ff48:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801ff4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ff52:	4a02      	ldr	r2, [pc, #8]	@ (801ff5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ff54:	430b      	orrs	r3, r1
 801ff56:	6513      	str	r3, [r2, #80]	@ 0x50
 801ff58:	e006      	b.n	801ff68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801ff5a:	bf00      	nop
 801ff5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ff60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ff64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801ff68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff70:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801ff74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801ff78:	2300      	movs	r3, #0
 801ff7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801ff7e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801ff82:	460b      	mov	r3, r1
 801ff84:	4313      	orrs	r3, r2
 801ff86:	d055      	beq.n	8020034 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801ff88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801ff90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801ff94:	d033      	beq.n	801fffe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801ff96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801ff9a:	d82c      	bhi.n	801fff6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801ff9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ffa0:	d02f      	beq.n	8020002 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801ffa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ffa6:	d826      	bhi.n	801fff6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801ffa8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801ffac:	d02b      	beq.n	8020006 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801ffae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801ffb2:	d820      	bhi.n	801fff6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801ffb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ffb8:	d012      	beq.n	801ffe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801ffba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ffbe:	d81a      	bhi.n	801fff6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801ffc0:	2b00      	cmp	r3, #0
 801ffc2:	d022      	beq.n	802000a <HAL_RCCEx_PeriphCLKConfig+0x676>
 801ffc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ffc8:	d115      	bne.n	801fff6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801ffca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ffce:	3308      	adds	r3, #8
 801ffd0:	2101      	movs	r1, #1
 801ffd2:	4618      	mov	r0, r3
 801ffd4:	f002 f878 	bl	80220c8 <RCCEx_PLL2_Config>
 801ffd8:	4603      	mov	r3, r0
 801ffda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801ffde:	e015      	b.n	802000c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ffe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ffe4:	3328      	adds	r3, #40	@ 0x28
 801ffe6:	2101      	movs	r1, #1
 801ffe8:	4618      	mov	r0, r3
 801ffea:	f002 f91f 	bl	802222c <RCCEx_PLL3_Config>
 801ffee:	4603      	mov	r3, r0
 801fff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801fff4:	e00a      	b.n	802000c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801fff6:	2301      	movs	r3, #1
 801fff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fffc:	e006      	b.n	802000c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801fffe:	bf00      	nop
 8020000:	e004      	b.n	802000c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8020002:	bf00      	nop
 8020004:	e002      	b.n	802000c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8020006:	bf00      	nop
 8020008:	e000      	b.n	802000c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 802000a:	bf00      	nop
    }

    if (ret == HAL_OK)
 802000c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020010:	2b00      	cmp	r3, #0
 8020012:	d10b      	bne.n	802002c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8020014:	4ba3      	ldr	r3, [pc, #652]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020018:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 802001c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020020:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8020024:	4a9f      	ldr	r2, [pc, #636]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020026:	430b      	orrs	r3, r1
 8020028:	6593      	str	r3, [r2, #88]	@ 0x58
 802002a:	e003      	b.n	8020034 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802002c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020030:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8020034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020038:	e9d3 2300 	ldrd	r2, r3, [r3]
 802003c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8020040:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8020044:	2300      	movs	r3, #0
 8020046:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 802004a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 802004e:	460b      	mov	r3, r1
 8020050:	4313      	orrs	r3, r2
 8020052:	d037      	beq.n	80200c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8020054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802005a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802005e:	d00e      	beq.n	802007e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8020060:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020064:	d816      	bhi.n	8020094 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8020066:	2b00      	cmp	r3, #0
 8020068:	d018      	beq.n	802009c <HAL_RCCEx_PeriphCLKConfig+0x708>
 802006a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802006e:	d111      	bne.n	8020094 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8020070:	4b8c      	ldr	r3, [pc, #560]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020074:	4a8b      	ldr	r2, [pc, #556]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802007a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 802007c:	e00f      	b.n	802009e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802007e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020082:	3308      	adds	r3, #8
 8020084:	2101      	movs	r1, #1
 8020086:	4618      	mov	r0, r3
 8020088:	f002 f81e 	bl	80220c8 <RCCEx_PLL2_Config>
 802008c:	4603      	mov	r3, r0
 802008e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8020092:	e004      	b.n	802009e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020094:	2301      	movs	r3, #1
 8020096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802009a:	e000      	b.n	802009e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 802009c:	bf00      	nop
    }

    if (ret == HAL_OK)
 802009e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80200a2:	2b00      	cmp	r3, #0
 80200a4:	d10a      	bne.n	80200bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80200a6:	4b7f      	ldr	r3, [pc, #508]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80200a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80200aa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80200ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80200b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80200b4:	4a7b      	ldr	r2, [pc, #492]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80200b6:	430b      	orrs	r3, r1
 80200b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80200ba:	e003      	b.n	80200c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80200bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80200c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80200c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80200c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200cc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80200d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80200d4:	2300      	movs	r3, #0
 80200d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80200da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80200de:	460b      	mov	r3, r1
 80200e0:	4313      	orrs	r3, r2
 80200e2:	d039      	beq.n	8020158 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80200e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80200e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80200ea:	2b03      	cmp	r3, #3
 80200ec:	d81c      	bhi.n	8020128 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80200ee:	a201      	add	r2, pc, #4	@ (adr r2, 80200f4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80200f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80200f4:	08020131 	.word	0x08020131
 80200f8:	08020105 	.word	0x08020105
 80200fc:	08020113 	.word	0x08020113
 8020100:	08020131 	.word	0x08020131
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8020104:	4b67      	ldr	r3, [pc, #412]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020108:	4a66      	ldr	r2, [pc, #408]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802010a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802010e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8020110:	e00f      	b.n	8020132 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8020112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020116:	3308      	adds	r3, #8
 8020118:	2102      	movs	r1, #2
 802011a:	4618      	mov	r0, r3
 802011c:	f001 ffd4 	bl	80220c8 <RCCEx_PLL2_Config>
 8020120:	4603      	mov	r3, r0
 8020122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8020126:	e004      	b.n	8020132 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8020128:	2301      	movs	r3, #1
 802012a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802012e:	e000      	b.n	8020132 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8020130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020136:	2b00      	cmp	r3, #0
 8020138:	d10a      	bne.n	8020150 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 802013a:	4b5a      	ldr	r3, [pc, #360]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802013c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802013e:	f023 0103 	bic.w	r1, r3, #3
 8020142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8020148:	4a56      	ldr	r2, [pc, #344]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802014a:	430b      	orrs	r3, r1
 802014c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 802014e:	e003      	b.n	8020158 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020154:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8020158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802015c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020160:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8020164:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8020168:	2300      	movs	r3, #0
 802016a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 802016e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8020172:	460b      	mov	r3, r1
 8020174:	4313      	orrs	r3, r2
 8020176:	f000 809f 	beq.w	80202b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 802017a:	4b4b      	ldr	r3, [pc, #300]	@ (80202a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 802017c:	681b      	ldr	r3, [r3, #0]
 802017e:	4a4a      	ldr	r2, [pc, #296]	@ (80202a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8020180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020184:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8020186:	f7fb fce5 	bl	801bb54 <HAL_GetTick>
 802018a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802018e:	e00b      	b.n	80201a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8020190:	f7fb fce0 	bl	801bb54 <HAL_GetTick>
 8020194:	4602      	mov	r2, r0
 8020196:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 802019a:	1ad3      	subs	r3, r2, r3
 802019c:	2b64      	cmp	r3, #100	@ 0x64
 802019e:	d903      	bls.n	80201a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80201a0:	2303      	movs	r3, #3
 80201a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80201a6:	e005      	b.n	80201b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80201a8:	4b3f      	ldr	r3, [pc, #252]	@ (80202a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80201aa:	681b      	ldr	r3, [r3, #0]
 80201ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80201b0:	2b00      	cmp	r3, #0
 80201b2:	d0ed      	beq.n	8020190 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80201b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80201b8:	2b00      	cmp	r3, #0
 80201ba:	d179      	bne.n	80202b0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80201bc:	4b39      	ldr	r3, [pc, #228]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80201c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80201c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80201c8:	4053      	eors	r3, r2
 80201ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80201ce:	2b00      	cmp	r3, #0
 80201d0:	d015      	beq.n	80201fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80201d2:	4b34      	ldr	r3, [pc, #208]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80201d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80201da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80201de:	4b31      	ldr	r3, [pc, #196]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80201e2:	4a30      	ldr	r2, [pc, #192]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80201e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80201ea:	4b2e      	ldr	r3, [pc, #184]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80201ee:	4a2d      	ldr	r2, [pc, #180]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80201f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80201f6:	4a2b      	ldr	r2, [pc, #172]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80201fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80201fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020202:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802020a:	d118      	bne.n	802023e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802020c:	f7fb fca2 	bl	801bb54 <HAL_GetTick>
 8020210:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8020214:	e00d      	b.n	8020232 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8020216:	f7fb fc9d 	bl	801bb54 <HAL_GetTick>
 802021a:	4602      	mov	r2, r0
 802021c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8020220:	1ad2      	subs	r2, r2, r3
 8020222:	f241 3388 	movw	r3, #5000	@ 0x1388
 8020226:	429a      	cmp	r2, r3
 8020228:	d903      	bls.n	8020232 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 802022a:	2303      	movs	r3, #3
 802022c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8020230:	e005      	b.n	802023e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8020232:	4b1c      	ldr	r3, [pc, #112]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020236:	f003 0302 	and.w	r3, r3, #2
 802023a:	2b00      	cmp	r3, #0
 802023c:	d0eb      	beq.n	8020216 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 802023e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020242:	2b00      	cmp	r3, #0
 8020244:	d129      	bne.n	802029a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8020246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802024a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 802024e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8020252:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020256:	d10e      	bne.n	8020276 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8020258:	4b12      	ldr	r3, [pc, #72]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802025a:	691b      	ldr	r3, [r3, #16]
 802025c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8020260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020264:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020268:	091a      	lsrs	r2, r3, #4
 802026a:	4b10      	ldr	r3, [pc, #64]	@ (80202ac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 802026c:	4013      	ands	r3, r2
 802026e:	4a0d      	ldr	r2, [pc, #52]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020270:	430b      	orrs	r3, r1
 8020272:	6113      	str	r3, [r2, #16]
 8020274:	e005      	b.n	8020282 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8020276:	4b0b      	ldr	r3, [pc, #44]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020278:	691b      	ldr	r3, [r3, #16]
 802027a:	4a0a      	ldr	r2, [pc, #40]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802027c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8020280:	6113      	str	r3, [r2, #16]
 8020282:	4b08      	ldr	r3, [pc, #32]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020284:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8020286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802028a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 802028e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020292:	4a04      	ldr	r2, [pc, #16]	@ (80202a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020294:	430b      	orrs	r3, r1
 8020296:	6713      	str	r3, [r2, #112]	@ 0x70
 8020298:	e00e      	b.n	80202b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 802029a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802029e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80202a2:	e009      	b.n	80202b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80202a4:	58024400 	.word	0x58024400
 80202a8:	58024800 	.word	0x58024800
 80202ac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80202b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80202b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80202b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80202bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202c0:	f002 0301 	and.w	r3, r2, #1
 80202c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80202c8:	2300      	movs	r3, #0
 80202ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80202ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80202d2:	460b      	mov	r3, r1
 80202d4:	4313      	orrs	r3, r2
 80202d6:	f000 8089 	beq.w	80203ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80202da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80202de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80202e0:	2b28      	cmp	r3, #40	@ 0x28
 80202e2:	d86b      	bhi.n	80203bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80202e4:	a201      	add	r2, pc, #4	@ (adr r2, 80202ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80202e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80202ea:	bf00      	nop
 80202ec:	080203c5 	.word	0x080203c5
 80202f0:	080203bd 	.word	0x080203bd
 80202f4:	080203bd 	.word	0x080203bd
 80202f8:	080203bd 	.word	0x080203bd
 80202fc:	080203bd 	.word	0x080203bd
 8020300:	080203bd 	.word	0x080203bd
 8020304:	080203bd 	.word	0x080203bd
 8020308:	080203bd 	.word	0x080203bd
 802030c:	08020391 	.word	0x08020391
 8020310:	080203bd 	.word	0x080203bd
 8020314:	080203bd 	.word	0x080203bd
 8020318:	080203bd 	.word	0x080203bd
 802031c:	080203bd 	.word	0x080203bd
 8020320:	080203bd 	.word	0x080203bd
 8020324:	080203bd 	.word	0x080203bd
 8020328:	080203bd 	.word	0x080203bd
 802032c:	080203a7 	.word	0x080203a7
 8020330:	080203bd 	.word	0x080203bd
 8020334:	080203bd 	.word	0x080203bd
 8020338:	080203bd 	.word	0x080203bd
 802033c:	080203bd 	.word	0x080203bd
 8020340:	080203bd 	.word	0x080203bd
 8020344:	080203bd 	.word	0x080203bd
 8020348:	080203bd 	.word	0x080203bd
 802034c:	080203c5 	.word	0x080203c5
 8020350:	080203bd 	.word	0x080203bd
 8020354:	080203bd 	.word	0x080203bd
 8020358:	080203bd 	.word	0x080203bd
 802035c:	080203bd 	.word	0x080203bd
 8020360:	080203bd 	.word	0x080203bd
 8020364:	080203bd 	.word	0x080203bd
 8020368:	080203bd 	.word	0x080203bd
 802036c:	080203c5 	.word	0x080203c5
 8020370:	080203bd 	.word	0x080203bd
 8020374:	080203bd 	.word	0x080203bd
 8020378:	080203bd 	.word	0x080203bd
 802037c:	080203bd 	.word	0x080203bd
 8020380:	080203bd 	.word	0x080203bd
 8020384:	080203bd 	.word	0x080203bd
 8020388:	080203bd 	.word	0x080203bd
 802038c:	080203c5 	.word	0x080203c5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8020390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020394:	3308      	adds	r3, #8
 8020396:	2101      	movs	r1, #1
 8020398:	4618      	mov	r0, r3
 802039a:	f001 fe95 	bl	80220c8 <RCCEx_PLL2_Config>
 802039e:	4603      	mov	r3, r0
 80203a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80203a4:	e00f      	b.n	80203c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80203a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80203aa:	3328      	adds	r3, #40	@ 0x28
 80203ac:	2101      	movs	r1, #1
 80203ae:	4618      	mov	r0, r3
 80203b0:	f001 ff3c 	bl	802222c <RCCEx_PLL3_Config>
 80203b4:	4603      	mov	r3, r0
 80203b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80203ba:	e004      	b.n	80203c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80203bc:	2301      	movs	r3, #1
 80203be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80203c2:	e000      	b.n	80203c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80203c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80203c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80203ca:	2b00      	cmp	r3, #0
 80203cc:	d10a      	bne.n	80203e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80203ce:	4bbf      	ldr	r3, [pc, #764]	@ (80206cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80203d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80203d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80203d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80203da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80203dc:	4abb      	ldr	r2, [pc, #748]	@ (80206cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80203de:	430b      	orrs	r3, r1
 80203e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80203e2:	e003      	b.n	80203ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80203e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80203e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80203ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80203f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203f4:	f002 0302 	and.w	r3, r2, #2
 80203f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80203fc:	2300      	movs	r3, #0
 80203fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8020402:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8020406:	460b      	mov	r3, r1
 8020408:	4313      	orrs	r3, r2
 802040a:	d041      	beq.n	8020490 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 802040c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020410:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8020412:	2b05      	cmp	r3, #5
 8020414:	d824      	bhi.n	8020460 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8020416:	a201      	add	r2, pc, #4	@ (adr r2, 802041c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8020418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802041c:	08020469 	.word	0x08020469
 8020420:	08020435 	.word	0x08020435
 8020424:	0802044b 	.word	0x0802044b
 8020428:	08020469 	.word	0x08020469
 802042c:	08020469 	.word	0x08020469
 8020430:	08020469 	.word	0x08020469
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8020434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020438:	3308      	adds	r3, #8
 802043a:	2101      	movs	r1, #1
 802043c:	4618      	mov	r0, r3
 802043e:	f001 fe43 	bl	80220c8 <RCCEx_PLL2_Config>
 8020442:	4603      	mov	r3, r0
 8020444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8020448:	e00f      	b.n	802046a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802044a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802044e:	3328      	adds	r3, #40	@ 0x28
 8020450:	2101      	movs	r1, #1
 8020452:	4618      	mov	r0, r3
 8020454:	f001 feea 	bl	802222c <RCCEx_PLL3_Config>
 8020458:	4603      	mov	r3, r0
 802045a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 802045e:	e004      	b.n	802046a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020460:	2301      	movs	r3, #1
 8020462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020466:	e000      	b.n	802046a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8020468:	bf00      	nop
    }

    if (ret == HAL_OK)
 802046a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802046e:	2b00      	cmp	r3, #0
 8020470:	d10a      	bne.n	8020488 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8020472:	4b96      	ldr	r3, [pc, #600]	@ (80206cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8020474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020476:	f023 0107 	bic.w	r1, r3, #7
 802047a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802047e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8020480:	4a92      	ldr	r2, [pc, #584]	@ (80206cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8020482:	430b      	orrs	r3, r1
 8020484:	6553      	str	r3, [r2, #84]	@ 0x54
 8020486:	e003      	b.n	8020490 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802048c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8020490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020498:	f002 0304 	and.w	r3, r2, #4
 802049c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80204a0:	2300      	movs	r3, #0
 80204a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80204a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80204aa:	460b      	mov	r3, r1
 80204ac:	4313      	orrs	r3, r2
 80204ae:	d044      	beq.n	802053a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80204b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80204b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80204b8:	2b05      	cmp	r3, #5
 80204ba:	d825      	bhi.n	8020508 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80204bc:	a201      	add	r2, pc, #4	@ (adr r2, 80204c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80204be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80204c2:	bf00      	nop
 80204c4:	08020511 	.word	0x08020511
 80204c8:	080204dd 	.word	0x080204dd
 80204cc:	080204f3 	.word	0x080204f3
 80204d0:	08020511 	.word	0x08020511
 80204d4:	08020511 	.word	0x08020511
 80204d8:	08020511 	.word	0x08020511
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80204dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80204e0:	3308      	adds	r3, #8
 80204e2:	2101      	movs	r1, #1
 80204e4:	4618      	mov	r0, r3
 80204e6:	f001 fdef 	bl	80220c8 <RCCEx_PLL2_Config>
 80204ea:	4603      	mov	r3, r0
 80204ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80204f0:	e00f      	b.n	8020512 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80204f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80204f6:	3328      	adds	r3, #40	@ 0x28
 80204f8:	2101      	movs	r1, #1
 80204fa:	4618      	mov	r0, r3
 80204fc:	f001 fe96 	bl	802222c <RCCEx_PLL3_Config>
 8020500:	4603      	mov	r3, r0
 8020502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8020506:	e004      	b.n	8020512 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020508:	2301      	movs	r3, #1
 802050a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802050e:	e000      	b.n	8020512 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8020510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020516:	2b00      	cmp	r3, #0
 8020518:	d10b      	bne.n	8020532 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 802051a:	4b6c      	ldr	r3, [pc, #432]	@ (80206cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802051c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802051e:	f023 0107 	bic.w	r1, r3, #7
 8020522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 802052a:	4a68      	ldr	r2, [pc, #416]	@ (80206cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802052c:	430b      	orrs	r3, r1
 802052e:	6593      	str	r3, [r2, #88]	@ 0x58
 8020530:	e003      	b.n	802053a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 802053a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802053e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020542:	f002 0320 	and.w	r3, r2, #32
 8020546:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 802054a:	2300      	movs	r3, #0
 802054c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8020550:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8020554:	460b      	mov	r3, r1
 8020556:	4313      	orrs	r3, r2
 8020558:	d055      	beq.n	8020606 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 802055a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802055e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020562:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8020566:	d033      	beq.n	80205d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8020568:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 802056c:	d82c      	bhi.n	80205c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802056e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020572:	d02f      	beq.n	80205d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8020574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020578:	d826      	bhi.n	80205c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 802057a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 802057e:	d02b      	beq.n	80205d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8020580:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8020584:	d820      	bhi.n	80205c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8020586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802058a:	d012      	beq.n	80205b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 802058c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020590:	d81a      	bhi.n	80205c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8020592:	2b00      	cmp	r3, #0
 8020594:	d022      	beq.n	80205dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8020596:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802059a:	d115      	bne.n	80205c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802059c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80205a0:	3308      	adds	r3, #8
 80205a2:	2100      	movs	r1, #0
 80205a4:	4618      	mov	r0, r3
 80205a6:	f001 fd8f 	bl	80220c8 <RCCEx_PLL2_Config>
 80205aa:	4603      	mov	r3, r0
 80205ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80205b0:	e015      	b.n	80205de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80205b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80205b6:	3328      	adds	r3, #40	@ 0x28
 80205b8:	2102      	movs	r1, #2
 80205ba:	4618      	mov	r0, r3
 80205bc:	f001 fe36 	bl	802222c <RCCEx_PLL3_Config>
 80205c0:	4603      	mov	r3, r0
 80205c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80205c6:	e00a      	b.n	80205de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80205c8:	2301      	movs	r3, #1
 80205ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80205ce:	e006      	b.n	80205de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80205d0:	bf00      	nop
 80205d2:	e004      	b.n	80205de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80205d4:	bf00      	nop
 80205d6:	e002      	b.n	80205de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80205d8:	bf00      	nop
 80205da:	e000      	b.n	80205de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80205dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80205de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80205e2:	2b00      	cmp	r3, #0
 80205e4:	d10b      	bne.n	80205fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80205e6:	4b39      	ldr	r3, [pc, #228]	@ (80206cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80205e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80205ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80205ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80205f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80205f6:	4a35      	ldr	r2, [pc, #212]	@ (80206cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80205f8:	430b      	orrs	r3, r1
 80205fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80205fc:	e003      	b.n	8020606 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80205fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020602:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8020606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802060a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802060e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8020612:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8020616:	2300      	movs	r3, #0
 8020618:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 802061c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8020620:	460b      	mov	r3, r1
 8020622:	4313      	orrs	r3, r2
 8020624:	d058      	beq.n	80206d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8020626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802062a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 802062e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8020632:	d033      	beq.n	802069c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8020634:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8020638:	d82c      	bhi.n	8020694 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802063a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802063e:	d02f      	beq.n	80206a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8020640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020644:	d826      	bhi.n	8020694 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8020646:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 802064a:	d02b      	beq.n	80206a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 802064c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8020650:	d820      	bhi.n	8020694 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8020652:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8020656:	d012      	beq.n	802067e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8020658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802065c:	d81a      	bhi.n	8020694 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802065e:	2b00      	cmp	r3, #0
 8020660:	d022      	beq.n	80206a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8020662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020666:	d115      	bne.n	8020694 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8020668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802066c:	3308      	adds	r3, #8
 802066e:	2100      	movs	r1, #0
 8020670:	4618      	mov	r0, r3
 8020672:	f001 fd29 	bl	80220c8 <RCCEx_PLL2_Config>
 8020676:	4603      	mov	r3, r0
 8020678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 802067c:	e015      	b.n	80206aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 802067e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020682:	3328      	adds	r3, #40	@ 0x28
 8020684:	2102      	movs	r1, #2
 8020686:	4618      	mov	r0, r3
 8020688:	f001 fdd0 	bl	802222c <RCCEx_PLL3_Config>
 802068c:	4603      	mov	r3, r0
 802068e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8020692:	e00a      	b.n	80206aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020694:	2301      	movs	r3, #1
 8020696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802069a:	e006      	b.n	80206aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 802069c:	bf00      	nop
 802069e:	e004      	b.n	80206aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80206a0:	bf00      	nop
 80206a2:	e002      	b.n	80206aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80206a4:	bf00      	nop
 80206a6:	e000      	b.n	80206aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80206a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80206aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80206ae:	2b00      	cmp	r3, #0
 80206b0:	d10e      	bne.n	80206d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80206b2:	4b06      	ldr	r3, [pc, #24]	@ (80206cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80206b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80206b6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80206ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80206be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80206c2:	4a02      	ldr	r2, [pc, #8]	@ (80206cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80206c4:	430b      	orrs	r3, r1
 80206c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80206c8:	e006      	b.n	80206d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80206ca:	bf00      	nop
 80206cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80206d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80206d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80206d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80206dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80206e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80206e8:	2300      	movs	r3, #0
 80206ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80206ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80206f2:	460b      	mov	r3, r1
 80206f4:	4313      	orrs	r3, r2
 80206f6:	d055      	beq.n	80207a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80206f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80206fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8020700:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8020704:	d033      	beq.n	802076e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8020706:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 802070a:	d82c      	bhi.n	8020766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 802070c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020710:	d02f      	beq.n	8020772 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8020712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020716:	d826      	bhi.n	8020766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8020718:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 802071c:	d02b      	beq.n	8020776 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 802071e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8020722:	d820      	bhi.n	8020766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8020724:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8020728:	d012      	beq.n	8020750 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 802072a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 802072e:	d81a      	bhi.n	8020766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8020730:	2b00      	cmp	r3, #0
 8020732:	d022      	beq.n	802077a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8020734:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020738:	d115      	bne.n	8020766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802073a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802073e:	3308      	adds	r3, #8
 8020740:	2100      	movs	r1, #0
 8020742:	4618      	mov	r0, r3
 8020744:	f001 fcc0 	bl	80220c8 <RCCEx_PLL2_Config>
 8020748:	4603      	mov	r3, r0
 802074a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 802074e:	e015      	b.n	802077c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8020750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020754:	3328      	adds	r3, #40	@ 0x28
 8020756:	2102      	movs	r1, #2
 8020758:	4618      	mov	r0, r3
 802075a:	f001 fd67 	bl	802222c <RCCEx_PLL3_Config>
 802075e:	4603      	mov	r3, r0
 8020760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8020764:	e00a      	b.n	802077c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020766:	2301      	movs	r3, #1
 8020768:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802076c:	e006      	b.n	802077c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802076e:	bf00      	nop
 8020770:	e004      	b.n	802077c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8020772:	bf00      	nop
 8020774:	e002      	b.n	802077c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8020776:	bf00      	nop
 8020778:	e000      	b.n	802077c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 802077a:	bf00      	nop
    }

    if (ret == HAL_OK)
 802077c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020780:	2b00      	cmp	r3, #0
 8020782:	d10b      	bne.n	802079c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8020784:	4ba1      	ldr	r3, [pc, #644]	@ (8020a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020788:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 802078c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020790:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8020794:	4a9d      	ldr	r2, [pc, #628]	@ (8020a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020796:	430b      	orrs	r3, r1
 8020798:	6593      	str	r3, [r2, #88]	@ 0x58
 802079a:	e003      	b.n	80207a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802079c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80207a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80207a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80207a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207ac:	f002 0308 	and.w	r3, r2, #8
 80207b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80207b4:	2300      	movs	r3, #0
 80207b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80207ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80207be:	460b      	mov	r3, r1
 80207c0:	4313      	orrs	r3, r2
 80207c2:	d01e      	beq.n	8020802 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80207c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80207c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80207cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80207d0:	d10c      	bne.n	80207ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80207d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80207d6:	3328      	adds	r3, #40	@ 0x28
 80207d8:	2102      	movs	r1, #2
 80207da:	4618      	mov	r0, r3
 80207dc:	f001 fd26 	bl	802222c <RCCEx_PLL3_Config>
 80207e0:	4603      	mov	r3, r0
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d002      	beq.n	80207ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80207e6:	2301      	movs	r3, #1
 80207e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80207ec:	4b87      	ldr	r3, [pc, #540]	@ (8020a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80207ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80207f0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80207f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80207f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80207fc:	4a83      	ldr	r2, [pc, #524]	@ (8020a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80207fe:	430b      	orrs	r3, r1
 8020800:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8020802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020806:	e9d3 2300 	ldrd	r2, r3, [r3]
 802080a:	f002 0310 	and.w	r3, r2, #16
 802080e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8020812:	2300      	movs	r3, #0
 8020814:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8020818:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 802081c:	460b      	mov	r3, r1
 802081e:	4313      	orrs	r3, r2
 8020820:	d01e      	beq.n	8020860 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8020822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020826:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 802082a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802082e:	d10c      	bne.n	802084a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8020830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020834:	3328      	adds	r3, #40	@ 0x28
 8020836:	2102      	movs	r1, #2
 8020838:	4618      	mov	r0, r3
 802083a:	f001 fcf7 	bl	802222c <RCCEx_PLL3_Config>
 802083e:	4603      	mov	r3, r0
 8020840:	2b00      	cmp	r3, #0
 8020842:	d002      	beq.n	802084a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8020844:	2301      	movs	r3, #1
 8020846:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 802084a:	4b70      	ldr	r3, [pc, #448]	@ (8020a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802084c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802084e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8020852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020856:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 802085a:	4a6c      	ldr	r2, [pc, #432]	@ (8020a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802085c:	430b      	orrs	r3, r1
 802085e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8020860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020868:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 802086c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8020870:	2300      	movs	r3, #0
 8020872:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8020876:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 802087a:	460b      	mov	r3, r1
 802087c:	4313      	orrs	r3, r2
 802087e:	d03e      	beq.n	80208fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8020880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020884:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8020888:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802088c:	d022      	beq.n	80208d4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 802088e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8020892:	d81b      	bhi.n	80208cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8020894:	2b00      	cmp	r3, #0
 8020896:	d003      	beq.n	80208a0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8020898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802089c:	d00b      	beq.n	80208b6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 802089e:	e015      	b.n	80208cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80208a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80208a4:	3308      	adds	r3, #8
 80208a6:	2100      	movs	r1, #0
 80208a8:	4618      	mov	r0, r3
 80208aa:	f001 fc0d 	bl	80220c8 <RCCEx_PLL2_Config>
 80208ae:	4603      	mov	r3, r0
 80208b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80208b4:	e00f      	b.n	80208d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80208b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80208ba:	3328      	adds	r3, #40	@ 0x28
 80208bc:	2102      	movs	r1, #2
 80208be:	4618      	mov	r0, r3
 80208c0:	f001 fcb4 	bl	802222c <RCCEx_PLL3_Config>
 80208c4:	4603      	mov	r3, r0
 80208c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80208ca:	e004      	b.n	80208d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80208cc:	2301      	movs	r3, #1
 80208ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80208d2:	e000      	b.n	80208d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80208d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80208d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80208da:	2b00      	cmp	r3, #0
 80208dc:	d10b      	bne.n	80208f6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80208de:	4b4b      	ldr	r3, [pc, #300]	@ (8020a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80208e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80208e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80208e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80208ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80208ee:	4a47      	ldr	r2, [pc, #284]	@ (8020a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80208f0:	430b      	orrs	r3, r1
 80208f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80208f4:	e003      	b.n	80208fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80208f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80208fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80208fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020906:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 802090a:	67bb      	str	r3, [r7, #120]	@ 0x78
 802090c:	2300      	movs	r3, #0
 802090e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8020910:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8020914:	460b      	mov	r3, r1
 8020916:	4313      	orrs	r3, r2
 8020918:	d03b      	beq.n	8020992 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 802091a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020922:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8020926:	d01f      	beq.n	8020968 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8020928:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 802092c:	d818      	bhi.n	8020960 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 802092e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020932:	d003      	beq.n	802093c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8020934:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8020938:	d007      	beq.n	802094a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 802093a:	e011      	b.n	8020960 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802093c:	4b33      	ldr	r3, [pc, #204]	@ (8020a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 802093e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020940:	4a32      	ldr	r2, [pc, #200]	@ (8020a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8020948:	e00f      	b.n	802096a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802094a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802094e:	3328      	adds	r3, #40	@ 0x28
 8020950:	2101      	movs	r1, #1
 8020952:	4618      	mov	r0, r3
 8020954:	f001 fc6a 	bl	802222c <RCCEx_PLL3_Config>
 8020958:	4603      	mov	r3, r0
 802095a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 802095e:	e004      	b.n	802096a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020960:	2301      	movs	r3, #1
 8020962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020966:	e000      	b.n	802096a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8020968:	bf00      	nop
    }

    if (ret == HAL_OK)
 802096a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802096e:	2b00      	cmp	r3, #0
 8020970:	d10b      	bne.n	802098a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8020972:	4b26      	ldr	r3, [pc, #152]	@ (8020a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020976:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 802097a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020982:	4a22      	ldr	r2, [pc, #136]	@ (8020a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020984:	430b      	orrs	r3, r1
 8020986:	6553      	str	r3, [r2, #84]	@ 0x54
 8020988:	e003      	b.n	8020992 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802098a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802098e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8020992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020996:	e9d3 2300 	ldrd	r2, r3, [r3]
 802099a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 802099e:	673b      	str	r3, [r7, #112]	@ 0x70
 80209a0:	2300      	movs	r3, #0
 80209a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80209a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80209a8:	460b      	mov	r3, r1
 80209aa:	4313      	orrs	r3, r2
 80209ac:	d034      	beq.n	8020a18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80209ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80209b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80209b4:	2b00      	cmp	r3, #0
 80209b6:	d003      	beq.n	80209c0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80209b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80209bc:	d007      	beq.n	80209ce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80209be:	e011      	b.n	80209e4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80209c0:	4b12      	ldr	r3, [pc, #72]	@ (8020a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80209c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80209c4:	4a11      	ldr	r2, [pc, #68]	@ (8020a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80209c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80209ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80209cc:	e00e      	b.n	80209ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80209ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80209d2:	3308      	adds	r3, #8
 80209d4:	2102      	movs	r1, #2
 80209d6:	4618      	mov	r0, r3
 80209d8:	f001 fb76 	bl	80220c8 <RCCEx_PLL2_Config>
 80209dc:	4603      	mov	r3, r0
 80209de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80209e2:	e003      	b.n	80209ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80209e4:	2301      	movs	r3, #1
 80209e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80209ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80209ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80209f0:	2b00      	cmp	r3, #0
 80209f2:	d10d      	bne.n	8020a10 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80209f4:	4b05      	ldr	r3, [pc, #20]	@ (8020a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80209f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80209f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80209fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020a02:	4a02      	ldr	r2, [pc, #8]	@ (8020a0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020a04:	430b      	orrs	r3, r1
 8020a06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8020a08:	e006      	b.n	8020a18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8020a0a:	bf00      	nop
 8020a0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020a14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8020a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a20:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8020a24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8020a26:	2300      	movs	r3, #0
 8020a28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8020a2a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8020a2e:	460b      	mov	r3, r1
 8020a30:	4313      	orrs	r3, r2
 8020a32:	d00c      	beq.n	8020a4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8020a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a38:	3328      	adds	r3, #40	@ 0x28
 8020a3a:	2102      	movs	r1, #2
 8020a3c:	4618      	mov	r0, r3
 8020a3e:	f001 fbf5 	bl	802222c <RCCEx_PLL3_Config>
 8020a42:	4603      	mov	r3, r0
 8020a44:	2b00      	cmp	r3, #0
 8020a46:	d002      	beq.n	8020a4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8020a48:	2301      	movs	r3, #1
 8020a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8020a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a56:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8020a5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8020a5c:	2300      	movs	r3, #0
 8020a5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8020a60:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8020a64:	460b      	mov	r3, r1
 8020a66:	4313      	orrs	r3, r2
 8020a68:	d038      	beq.n	8020adc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8020a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020a72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020a76:	d018      	beq.n	8020aaa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8020a78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020a7c:	d811      	bhi.n	8020aa2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8020a7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020a82:	d014      	beq.n	8020aae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8020a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020a88:	d80b      	bhi.n	8020aa2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8020a8a:	2b00      	cmp	r3, #0
 8020a8c:	d011      	beq.n	8020ab2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8020a8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020a92:	d106      	bne.n	8020aa2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8020a94:	4bc3      	ldr	r3, [pc, #780]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020a98:	4ac2      	ldr	r2, [pc, #776]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8020aa0:	e008      	b.n	8020ab4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020aa2:	2301      	movs	r3, #1
 8020aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020aa8:	e004      	b.n	8020ab4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8020aaa:	bf00      	nop
 8020aac:	e002      	b.n	8020ab4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8020aae:	bf00      	nop
 8020ab0:	e000      	b.n	8020ab4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8020ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020ab8:	2b00      	cmp	r3, #0
 8020aba:	d10b      	bne.n	8020ad4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8020abc:	4bb9      	ldr	r3, [pc, #740]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020ac0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8020ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020acc:	4ab5      	ldr	r2, [pc, #724]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020ace:	430b      	orrs	r3, r1
 8020ad0:	6553      	str	r3, [r2, #84]	@ 0x54
 8020ad2:	e003      	b.n	8020adc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020ad8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8020adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ae4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8020ae8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8020aea:	2300      	movs	r3, #0
 8020aec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8020aee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8020af2:	460b      	mov	r3, r1
 8020af4:	4313      	orrs	r3, r2
 8020af6:	d009      	beq.n	8020b0c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8020af8:	4baa      	ldr	r3, [pc, #680]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020afc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8020b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8020b06:	4aa7      	ldr	r2, [pc, #668]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b08:	430b      	orrs	r3, r1
 8020b0a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8020b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b14:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8020b18:	653b      	str	r3, [r7, #80]	@ 0x50
 8020b1a:	2300      	movs	r3, #0
 8020b1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8020b1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8020b22:	460b      	mov	r3, r1
 8020b24:	4313      	orrs	r3, r2
 8020b26:	d00a      	beq.n	8020b3e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8020b28:	4b9e      	ldr	r3, [pc, #632]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b2a:	691b      	ldr	r3, [r3, #16]
 8020b2c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8020b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8020b38:	4a9a      	ldr	r2, [pc, #616]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b3a:	430b      	orrs	r3, r1
 8020b3c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8020b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b46:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8020b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020b4c:	2300      	movs	r3, #0
 8020b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020b50:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8020b54:	460b      	mov	r3, r1
 8020b56:	4313      	orrs	r3, r2
 8020b58:	d009      	beq.n	8020b6e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8020b5a:	4b92      	ldr	r3, [pc, #584]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020b5e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8020b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020b68:	4a8e      	ldr	r2, [pc, #568]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b6a:	430b      	orrs	r3, r1
 8020b6c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8020b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b76:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8020b7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8020b7c:	2300      	movs	r3, #0
 8020b7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8020b80:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8020b84:	460b      	mov	r3, r1
 8020b86:	4313      	orrs	r3, r2
 8020b88:	d00e      	beq.n	8020ba8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8020b8a:	4b86      	ldr	r3, [pc, #536]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b8c:	691b      	ldr	r3, [r3, #16]
 8020b8e:	4a85      	ldr	r2, [pc, #532]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b90:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8020b94:	6113      	str	r3, [r2, #16]
 8020b96:	4b83      	ldr	r3, [pc, #524]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020b98:	6919      	ldr	r1, [r3, #16]
 8020b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8020ba2:	4a80      	ldr	r2, [pc, #512]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020ba4:	430b      	orrs	r3, r1
 8020ba6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8020ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bb0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8020bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020bb6:	2300      	movs	r3, #0
 8020bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020bba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8020bbe:	460b      	mov	r3, r1
 8020bc0:	4313      	orrs	r3, r2
 8020bc2:	d009      	beq.n	8020bd8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8020bc4:	4b77      	ldr	r3, [pc, #476]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020bc8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8020bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020bd2:	4a74      	ldr	r2, [pc, #464]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020bd4:	430b      	orrs	r3, r1
 8020bd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8020bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020be0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8020be4:	633b      	str	r3, [r7, #48]	@ 0x30
 8020be6:	2300      	movs	r3, #0
 8020be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8020bea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8020bee:	460b      	mov	r3, r1
 8020bf0:	4313      	orrs	r3, r2
 8020bf2:	d00a      	beq.n	8020c0a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8020bf4:	4b6b      	ldr	r3, [pc, #428]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020bf8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8020bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8020c04:	4a67      	ldr	r2, [pc, #412]	@ (8020da4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020c06:	430b      	orrs	r3, r1
 8020c08:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8020c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c12:	2100      	movs	r1, #0
 8020c14:	62b9      	str	r1, [r7, #40]	@ 0x28
 8020c16:	f003 0301 	and.w	r3, r3, #1
 8020c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020c1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8020c20:	460b      	mov	r3, r1
 8020c22:	4313      	orrs	r3, r2
 8020c24:	d011      	beq.n	8020c4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8020c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c2a:	3308      	adds	r3, #8
 8020c2c:	2100      	movs	r1, #0
 8020c2e:	4618      	mov	r0, r3
 8020c30:	f001 fa4a 	bl	80220c8 <RCCEx_PLL2_Config>
 8020c34:	4603      	mov	r3, r0
 8020c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020c3e:	2b00      	cmp	r3, #0
 8020c40:	d003      	beq.n	8020c4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020c46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8020c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c52:	2100      	movs	r1, #0
 8020c54:	6239      	str	r1, [r7, #32]
 8020c56:	f003 0302 	and.w	r3, r3, #2
 8020c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8020c5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8020c60:	460b      	mov	r3, r1
 8020c62:	4313      	orrs	r3, r2
 8020c64:	d011      	beq.n	8020c8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8020c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c6a:	3308      	adds	r3, #8
 8020c6c:	2101      	movs	r1, #1
 8020c6e:	4618      	mov	r0, r3
 8020c70:	f001 fa2a 	bl	80220c8 <RCCEx_PLL2_Config>
 8020c74:	4603      	mov	r3, r0
 8020c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020c7e:	2b00      	cmp	r3, #0
 8020c80:	d003      	beq.n	8020c8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020c86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8020c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c92:	2100      	movs	r1, #0
 8020c94:	61b9      	str	r1, [r7, #24]
 8020c96:	f003 0304 	and.w	r3, r3, #4
 8020c9a:	61fb      	str	r3, [r7, #28]
 8020c9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8020ca0:	460b      	mov	r3, r1
 8020ca2:	4313      	orrs	r3, r2
 8020ca4:	d011      	beq.n	8020cca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8020ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020caa:	3308      	adds	r3, #8
 8020cac:	2102      	movs	r1, #2
 8020cae:	4618      	mov	r0, r3
 8020cb0:	f001 fa0a 	bl	80220c8 <RCCEx_PLL2_Config>
 8020cb4:	4603      	mov	r3, r0
 8020cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020cbe:	2b00      	cmp	r3, #0
 8020cc0:	d003      	beq.n	8020cca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020cc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8020cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cd2:	2100      	movs	r1, #0
 8020cd4:	6139      	str	r1, [r7, #16]
 8020cd6:	f003 0308 	and.w	r3, r3, #8
 8020cda:	617b      	str	r3, [r7, #20]
 8020cdc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8020ce0:	460b      	mov	r3, r1
 8020ce2:	4313      	orrs	r3, r2
 8020ce4:	d011      	beq.n	8020d0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8020ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020cea:	3328      	adds	r3, #40	@ 0x28
 8020cec:	2100      	movs	r1, #0
 8020cee:	4618      	mov	r0, r3
 8020cf0:	f001 fa9c 	bl	802222c <RCCEx_PLL3_Config>
 8020cf4:	4603      	mov	r3, r0
 8020cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8020cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	d003      	beq.n	8020d0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020d06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8020d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d12:	2100      	movs	r1, #0
 8020d14:	60b9      	str	r1, [r7, #8]
 8020d16:	f003 0310 	and.w	r3, r3, #16
 8020d1a:	60fb      	str	r3, [r7, #12]
 8020d1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020d20:	460b      	mov	r3, r1
 8020d22:	4313      	orrs	r3, r2
 8020d24:	d011      	beq.n	8020d4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8020d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d2a:	3328      	adds	r3, #40	@ 0x28
 8020d2c:	2101      	movs	r1, #1
 8020d2e:	4618      	mov	r0, r3
 8020d30:	f001 fa7c 	bl	802222c <RCCEx_PLL3_Config>
 8020d34:	4603      	mov	r3, r0
 8020d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020d3e:	2b00      	cmp	r3, #0
 8020d40:	d003      	beq.n	8020d4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020d46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8020d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d52:	2100      	movs	r1, #0
 8020d54:	6039      	str	r1, [r7, #0]
 8020d56:	f003 0320 	and.w	r3, r3, #32
 8020d5a:	607b      	str	r3, [r7, #4]
 8020d5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8020d60:	460b      	mov	r3, r1
 8020d62:	4313      	orrs	r3, r2
 8020d64:	d011      	beq.n	8020d8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8020d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d6a:	3328      	adds	r3, #40	@ 0x28
 8020d6c:	2102      	movs	r1, #2
 8020d6e:	4618      	mov	r0, r3
 8020d70:	f001 fa5c 	bl	802222c <RCCEx_PLL3_Config>
 8020d74:	4603      	mov	r3, r0
 8020d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	d003      	beq.n	8020d8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020d86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8020d8a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8020d8e:	2b00      	cmp	r3, #0
 8020d90:	d101      	bne.n	8020d96 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8020d92:	2300      	movs	r3, #0
 8020d94:	e000      	b.n	8020d98 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8020d96:	2301      	movs	r3, #1
}
 8020d98:	4618      	mov	r0, r3
 8020d9a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8020d9e:	46bd      	mov	sp, r7
 8020da0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020da4:	58024400 	.word	0x58024400

08020da8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8020da8:	b580      	push	{r7, lr}
 8020daa:	b090      	sub	sp, #64	@ 0x40
 8020dac:	af00      	add	r7, sp, #0
 8020dae:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8020db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020db6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8020dba:	430b      	orrs	r3, r1
 8020dbc:	f040 8094 	bne.w	8020ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8020dc0:	4b9e      	ldr	r3, [pc, #632]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020dc4:	f003 0307 	and.w	r3, r3, #7
 8020dc8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8020dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020dcc:	2b04      	cmp	r3, #4
 8020dce:	f200 8087 	bhi.w	8020ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8020dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8020dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8020dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020dd8:	08020ded 	.word	0x08020ded
 8020ddc:	08020e15 	.word	0x08020e15
 8020de0:	08020e3d 	.word	0x08020e3d
 8020de4:	08020ed9 	.word	0x08020ed9
 8020de8:	08020e65 	.word	0x08020e65
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8020dec:	4b93      	ldr	r3, [pc, #588]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020dee:	681b      	ldr	r3, [r3, #0]
 8020df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020df4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8020df8:	d108      	bne.n	8020e0c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8020dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020dfe:	4618      	mov	r0, r3
 8020e00:	f001 f810 	bl	8021e24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8020e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020e08:	f000 bd45 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020e0c:	2300      	movs	r3, #0
 8020e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020e10:	f000 bd41 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8020e14:	4b89      	ldr	r3, [pc, #548]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020e16:	681b      	ldr	r3, [r3, #0]
 8020e18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8020e1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8020e20:	d108      	bne.n	8020e34 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020e22:	f107 0318 	add.w	r3, r7, #24
 8020e26:	4618      	mov	r0, r3
 8020e28:	f000 fd54 	bl	80218d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8020e2c:	69bb      	ldr	r3, [r7, #24]
 8020e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020e30:	f000 bd31 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020e34:	2300      	movs	r3, #0
 8020e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020e38:	f000 bd2d 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8020e3c:	4b7f      	ldr	r3, [pc, #508]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020e3e:	681b      	ldr	r3, [r3, #0]
 8020e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8020e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020e48:	d108      	bne.n	8020e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020e4a:	f107 030c 	add.w	r3, r7, #12
 8020e4e:	4618      	mov	r0, r3
 8020e50:	f000 fe94 	bl	8021b7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8020e54:	68fb      	ldr	r3, [r7, #12]
 8020e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020e58:	f000 bd1d 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020e5c:	2300      	movs	r3, #0
 8020e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020e60:	f000 bd19 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8020e64:	4b75      	ldr	r3, [pc, #468]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020e68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8020e6c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8020e6e:	4b73      	ldr	r3, [pc, #460]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020e70:	681b      	ldr	r3, [r3, #0]
 8020e72:	f003 0304 	and.w	r3, r3, #4
 8020e76:	2b04      	cmp	r3, #4
 8020e78:	d10c      	bne.n	8020e94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8020e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020e7c:	2b00      	cmp	r3, #0
 8020e7e:	d109      	bne.n	8020e94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8020e80:	4b6e      	ldr	r3, [pc, #440]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020e82:	681b      	ldr	r3, [r3, #0]
 8020e84:	08db      	lsrs	r3, r3, #3
 8020e86:	f003 0303 	and.w	r3, r3, #3
 8020e8a:	4a6d      	ldr	r2, [pc, #436]	@ (8021040 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8020e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8020e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020e92:	e01f      	b.n	8020ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8020e94:	4b69      	ldr	r3, [pc, #420]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020e96:	681b      	ldr	r3, [r3, #0]
 8020e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020e9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020ea0:	d106      	bne.n	8020eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8020ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020ea4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020ea8:	d102      	bne.n	8020eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8020eaa:	4b66      	ldr	r3, [pc, #408]	@ (8021044 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8020eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020eae:	e011      	b.n	8020ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8020eb0:	4b62      	ldr	r3, [pc, #392]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020eb2:	681b      	ldr	r3, [r3, #0]
 8020eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8020eb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8020ebc:	d106      	bne.n	8020ecc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8020ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020ec0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020ec4:	d102      	bne.n	8020ecc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8020ec6:	4b60      	ldr	r3, [pc, #384]	@ (8021048 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8020ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020eca:	e003      	b.n	8020ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8020ecc:	2300      	movs	r3, #0
 8020ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8020ed0:	f000 bce1 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8020ed4:	f000 bcdf 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8020ed8:	4b5c      	ldr	r3, [pc, #368]	@ (802104c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8020eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020edc:	f000 bcdb 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8020ee0:	2300      	movs	r3, #0
 8020ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020ee4:	f000 bcd7 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8020ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020eec:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8020ef0:	430b      	orrs	r3, r1
 8020ef2:	f040 80ad 	bne.w	8021050 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8020ef6:	4b51      	ldr	r3, [pc, #324]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020efa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8020efe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8020f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020f06:	d056      	beq.n	8020fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8020f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020f0e:	f200 8090 	bhi.w	8021032 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8020f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f14:	2bc0      	cmp	r3, #192	@ 0xc0
 8020f16:	f000 8088 	beq.w	802102a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8020f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f1c:	2bc0      	cmp	r3, #192	@ 0xc0
 8020f1e:	f200 8088 	bhi.w	8021032 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8020f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f24:	2b80      	cmp	r3, #128	@ 0x80
 8020f26:	d032      	beq.n	8020f8e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8020f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f2a:	2b80      	cmp	r3, #128	@ 0x80
 8020f2c:	f200 8081 	bhi.w	8021032 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8020f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f32:	2b00      	cmp	r3, #0
 8020f34:	d003      	beq.n	8020f3e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8020f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f38:	2b40      	cmp	r3, #64	@ 0x40
 8020f3a:	d014      	beq.n	8020f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8020f3c:	e079      	b.n	8021032 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8020f3e:	4b3f      	ldr	r3, [pc, #252]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f40:	681b      	ldr	r3, [r3, #0]
 8020f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020f46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8020f4a:	d108      	bne.n	8020f5e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8020f4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020f50:	4618      	mov	r0, r3
 8020f52:	f000 ff67 	bl	8021e24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8020f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020f5a:	f000 bc9c 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020f5e:	2300      	movs	r3, #0
 8020f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f62:	f000 bc98 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8020f66:	4b35      	ldr	r3, [pc, #212]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f68:	681b      	ldr	r3, [r3, #0]
 8020f6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8020f6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8020f72:	d108      	bne.n	8020f86 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020f74:	f107 0318 	add.w	r3, r7, #24
 8020f78:	4618      	mov	r0, r3
 8020f7a:	f000 fcab 	bl	80218d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8020f7e:	69bb      	ldr	r3, [r7, #24]
 8020f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020f82:	f000 bc88 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020f86:	2300      	movs	r3, #0
 8020f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f8a:	f000 bc84 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8020f8e:	4b2b      	ldr	r3, [pc, #172]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f90:	681b      	ldr	r3, [r3, #0]
 8020f92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8020f96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020f9a:	d108      	bne.n	8020fae <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020f9c:	f107 030c 	add.w	r3, r7, #12
 8020fa0:	4618      	mov	r0, r3
 8020fa2:	f000 fdeb 	bl	8021b7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8020fa6:	68fb      	ldr	r3, [r7, #12]
 8020fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020faa:	f000 bc74 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020fae:	2300      	movs	r3, #0
 8020fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020fb2:	f000 bc70 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8020fb6:	4b21      	ldr	r3, [pc, #132]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020fba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8020fbe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8020fc0:	4b1e      	ldr	r3, [pc, #120]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020fc2:	681b      	ldr	r3, [r3, #0]
 8020fc4:	f003 0304 	and.w	r3, r3, #4
 8020fc8:	2b04      	cmp	r3, #4
 8020fca:	d10c      	bne.n	8020fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8020fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020fce:	2b00      	cmp	r3, #0
 8020fd0:	d109      	bne.n	8020fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8020fd2:	4b1a      	ldr	r3, [pc, #104]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020fd4:	681b      	ldr	r3, [r3, #0]
 8020fd6:	08db      	lsrs	r3, r3, #3
 8020fd8:	f003 0303 	and.w	r3, r3, #3
 8020fdc:	4a18      	ldr	r2, [pc, #96]	@ (8021040 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8020fde:	fa22 f303 	lsr.w	r3, r2, r3
 8020fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020fe4:	e01f      	b.n	8021026 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8020fe6:	4b15      	ldr	r3, [pc, #84]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020fe8:	681b      	ldr	r3, [r3, #0]
 8020fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020ff2:	d106      	bne.n	8021002 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8020ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020ff6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020ffa:	d102      	bne.n	8021002 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8020ffc:	4b11      	ldr	r3, [pc, #68]	@ (8021044 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8020ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021000:	e011      	b.n	8021026 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8021002:	4b0e      	ldr	r3, [pc, #56]	@ (802103c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8021004:	681b      	ldr	r3, [r3, #0]
 8021006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802100a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802100e:	d106      	bne.n	802101e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8021010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021012:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021016:	d102      	bne.n	802101e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8021018:	4b0b      	ldr	r3, [pc, #44]	@ (8021048 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 802101a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802101c:	e003      	b.n	8021026 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 802101e:	2300      	movs	r3, #0
 8021020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8021022:	f000 bc38 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021026:	f000 bc36 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 802102a:	4b08      	ldr	r3, [pc, #32]	@ (802104c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 802102c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802102e:	f000 bc32 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8021032:	2300      	movs	r3, #0
 8021034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021036:	f000 bc2e 	b.w	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 802103a:	bf00      	nop
 802103c:	58024400 	.word	0x58024400
 8021040:	03d09000 	.word	0x03d09000
 8021044:	003d0900 	.word	0x003d0900
 8021048:	017d7840 	.word	0x017d7840
 802104c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8021050:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021054:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8021058:	430b      	orrs	r3, r1
 802105a:	f040 809c 	bne.w	8021196 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 802105e:	4b9e      	ldr	r3, [pc, #632]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021062:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8021066:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8021068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802106a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 802106e:	d054      	beq.n	802111a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8021070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021072:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8021076:	f200 808b 	bhi.w	8021190 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 802107a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802107c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8021080:	f000 8083 	beq.w	802118a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8021084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021086:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 802108a:	f200 8081 	bhi.w	8021190 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 802108e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021090:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8021094:	d02f      	beq.n	80210f6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8021096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021098:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 802109c:	d878      	bhi.n	8021190 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 802109e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80210a0:	2b00      	cmp	r3, #0
 80210a2:	d004      	beq.n	80210ae <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80210a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80210a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80210aa:	d012      	beq.n	80210d2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80210ac:	e070      	b.n	8021190 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80210ae:	4b8a      	ldr	r3, [pc, #552]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80210b0:	681b      	ldr	r3, [r3, #0]
 80210b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80210b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80210ba:	d107      	bne.n	80210cc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80210bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80210c0:	4618      	mov	r0, r3
 80210c2:	f000 feaf 	bl	8021e24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80210c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80210c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80210ca:	e3e4      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80210cc:	2300      	movs	r3, #0
 80210ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80210d0:	e3e1      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80210d2:	4b81      	ldr	r3, [pc, #516]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80210d4:	681b      	ldr	r3, [r3, #0]
 80210d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80210da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80210de:	d107      	bne.n	80210f0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80210e0:	f107 0318 	add.w	r3, r7, #24
 80210e4:	4618      	mov	r0, r3
 80210e6:	f000 fbf5 	bl	80218d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80210ea:	69bb      	ldr	r3, [r7, #24]
 80210ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80210ee:	e3d2      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80210f0:	2300      	movs	r3, #0
 80210f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80210f4:	e3cf      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80210f6:	4b78      	ldr	r3, [pc, #480]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80210f8:	681b      	ldr	r3, [r3, #0]
 80210fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80210fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021102:	d107      	bne.n	8021114 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021104:	f107 030c 	add.w	r3, r7, #12
 8021108:	4618      	mov	r0, r3
 802110a:	f000 fd37 	bl	8021b7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 802110e:	68fb      	ldr	r3, [r7, #12]
 8021110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021112:	e3c0      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021114:	2300      	movs	r3, #0
 8021116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021118:	e3bd      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 802111a:	4b6f      	ldr	r3, [pc, #444]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 802111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802111e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8021122:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8021124:	4b6c      	ldr	r3, [pc, #432]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021126:	681b      	ldr	r3, [r3, #0]
 8021128:	f003 0304 	and.w	r3, r3, #4
 802112c:	2b04      	cmp	r3, #4
 802112e:	d10c      	bne.n	802114a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8021130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021132:	2b00      	cmp	r3, #0
 8021134:	d109      	bne.n	802114a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021136:	4b68      	ldr	r3, [pc, #416]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021138:	681b      	ldr	r3, [r3, #0]
 802113a:	08db      	lsrs	r3, r3, #3
 802113c:	f003 0303 	and.w	r3, r3, #3
 8021140:	4a66      	ldr	r2, [pc, #408]	@ (80212dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8021142:	fa22 f303 	lsr.w	r3, r2, r3
 8021146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021148:	e01e      	b.n	8021188 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 802114a:	4b63      	ldr	r3, [pc, #396]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 802114c:	681b      	ldr	r3, [r3, #0]
 802114e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021156:	d106      	bne.n	8021166 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8021158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802115a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802115e:	d102      	bne.n	8021166 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8021160:	4b5f      	ldr	r3, [pc, #380]	@ (80212e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8021162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021164:	e010      	b.n	8021188 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8021166:	4b5c      	ldr	r3, [pc, #368]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021168:	681b      	ldr	r3, [r3, #0]
 802116a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802116e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021172:	d106      	bne.n	8021182 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8021174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021176:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802117a:	d102      	bne.n	8021182 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 802117c:	4b59      	ldr	r3, [pc, #356]	@ (80212e4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 802117e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021180:	e002      	b.n	8021188 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8021182:	2300      	movs	r3, #0
 8021184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8021186:	e386      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021188:	e385      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 802118a:	4b57      	ldr	r3, [pc, #348]	@ (80212e8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 802118c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802118e:	e382      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8021190:	2300      	movs	r3, #0
 8021192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021194:	e37f      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8021196:	e9d7 2300 	ldrd	r2, r3, [r7]
 802119a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 802119e:	430b      	orrs	r3, r1
 80211a0:	f040 80a7 	bne.w	80212f2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80211a4:	4b4c      	ldr	r3, [pc, #304]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80211a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80211a8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80211ac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80211ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80211b4:	d055      	beq.n	8021262 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80211b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80211bc:	f200 8096 	bhi.w	80212ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80211c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80211c6:	f000 8084 	beq.w	80212d2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80211ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80211d0:	f200 808c 	bhi.w	80212ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80211d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80211da:	d030      	beq.n	802123e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80211dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80211e2:	f200 8083 	bhi.w	80212ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80211e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211e8:	2b00      	cmp	r3, #0
 80211ea:	d004      	beq.n	80211f6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80211ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80211f2:	d012      	beq.n	802121a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80211f4:	e07a      	b.n	80212ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80211f6:	4b38      	ldr	r3, [pc, #224]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80211f8:	681b      	ldr	r3, [r3, #0]
 80211fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80211fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8021202:	d107      	bne.n	8021214 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8021204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021208:	4618      	mov	r0, r3
 802120a:	f000 fe0b 	bl	8021e24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 802120e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021212:	e340      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021214:	2300      	movs	r3, #0
 8021216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021218:	e33d      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 802121a:	4b2f      	ldr	r3, [pc, #188]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 802121c:	681b      	ldr	r3, [r3, #0]
 802121e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8021222:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021226:	d107      	bne.n	8021238 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021228:	f107 0318 	add.w	r3, r7, #24
 802122c:	4618      	mov	r0, r3
 802122e:	f000 fb51 	bl	80218d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8021232:	69bb      	ldr	r3, [r7, #24]
 8021234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021236:	e32e      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021238:	2300      	movs	r3, #0
 802123a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802123c:	e32b      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 802123e:	4b26      	ldr	r3, [pc, #152]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021240:	681b      	ldr	r3, [r3, #0]
 8021242:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8021246:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802124a:	d107      	bne.n	802125c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802124c:	f107 030c 	add.w	r3, r7, #12
 8021250:	4618      	mov	r0, r3
 8021252:	f000 fc93 	bl	8021b7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8021256:	68fb      	ldr	r3, [r7, #12]
 8021258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802125a:	e31c      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802125c:	2300      	movs	r3, #0
 802125e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021260:	e319      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8021262:	4b1d      	ldr	r3, [pc, #116]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021266:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 802126a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 802126c:	4b1a      	ldr	r3, [pc, #104]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 802126e:	681b      	ldr	r3, [r3, #0]
 8021270:	f003 0304 	and.w	r3, r3, #4
 8021274:	2b04      	cmp	r3, #4
 8021276:	d10c      	bne.n	8021292 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8021278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802127a:	2b00      	cmp	r3, #0
 802127c:	d109      	bne.n	8021292 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802127e:	4b16      	ldr	r3, [pc, #88]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021280:	681b      	ldr	r3, [r3, #0]
 8021282:	08db      	lsrs	r3, r3, #3
 8021284:	f003 0303 	and.w	r3, r3, #3
 8021288:	4a14      	ldr	r2, [pc, #80]	@ (80212dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 802128a:	fa22 f303 	lsr.w	r3, r2, r3
 802128e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021290:	e01e      	b.n	80212d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8021292:	4b11      	ldr	r3, [pc, #68]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021294:	681b      	ldr	r3, [r3, #0]
 8021296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802129a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802129e:	d106      	bne.n	80212ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80212a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80212a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80212a6:	d102      	bne.n	80212ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80212a8:	4b0d      	ldr	r3, [pc, #52]	@ (80212e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80212aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80212ac:	e010      	b.n	80212d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80212ae:	4b0a      	ldr	r3, [pc, #40]	@ (80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80212b0:	681b      	ldr	r3, [r3, #0]
 80212b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80212b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80212ba:	d106      	bne.n	80212ca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80212bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80212be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80212c2:	d102      	bne.n	80212ca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80212c4:	4b07      	ldr	r3, [pc, #28]	@ (80212e4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80212c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80212c8:	e002      	b.n	80212d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80212ca:	2300      	movs	r3, #0
 80212cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80212ce:	e2e2      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80212d0:	e2e1      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80212d2:	4b05      	ldr	r3, [pc, #20]	@ (80212e8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80212d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80212d6:	e2de      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80212d8:	58024400 	.word	0x58024400
 80212dc:	03d09000 	.word	0x03d09000
 80212e0:	003d0900 	.word	0x003d0900
 80212e4:	017d7840 	.word	0x017d7840
 80212e8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80212ec:	2300      	movs	r3, #0
 80212ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80212f0:	e2d1      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80212f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80212f6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80212fa:	430b      	orrs	r3, r1
 80212fc:	f040 809c 	bne.w	8021438 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8021300:	4b93      	ldr	r3, [pc, #588]	@ (8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021304:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8021308:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 802130a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802130c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8021310:	d054      	beq.n	80213bc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8021312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021314:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8021318:	f200 808b 	bhi.w	8021432 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 802131c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802131e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8021322:	f000 8083 	beq.w	802142c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8021326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021328:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 802132c:	f200 8081 	bhi.w	8021432 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8021330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021336:	d02f      	beq.n	8021398 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8021338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802133a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802133e:	d878      	bhi.n	8021432 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8021340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021342:	2b00      	cmp	r3, #0
 8021344:	d004      	beq.n	8021350 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8021346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802134c:	d012      	beq.n	8021374 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 802134e:	e070      	b.n	8021432 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8021350:	4b7f      	ldr	r3, [pc, #508]	@ (8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021352:	681b      	ldr	r3, [r3, #0]
 8021354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021358:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802135c:	d107      	bne.n	802136e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 802135e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021362:	4618      	mov	r0, r3
 8021364:	f000 fd5e 	bl	8021e24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8021368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802136a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802136c:	e293      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802136e:	2300      	movs	r3, #0
 8021370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021372:	e290      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8021374:	4b76      	ldr	r3, [pc, #472]	@ (8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021376:	681b      	ldr	r3, [r3, #0]
 8021378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 802137c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021380:	d107      	bne.n	8021392 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021382:	f107 0318 	add.w	r3, r7, #24
 8021386:	4618      	mov	r0, r3
 8021388:	f000 faa4 	bl	80218d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 802138c:	69bb      	ldr	r3, [r7, #24]
 802138e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021390:	e281      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021392:	2300      	movs	r3, #0
 8021394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021396:	e27e      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8021398:	4b6d      	ldr	r3, [pc, #436]	@ (8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 802139a:	681b      	ldr	r3, [r3, #0]
 802139c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80213a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80213a4:	d107      	bne.n	80213b6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80213a6:	f107 030c 	add.w	r3, r7, #12
 80213aa:	4618      	mov	r0, r3
 80213ac:	f000 fbe6 	bl	8021b7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80213b0:	68fb      	ldr	r3, [r7, #12]
 80213b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80213b4:	e26f      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80213b6:	2300      	movs	r3, #0
 80213b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80213ba:	e26c      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80213bc:	4b64      	ldr	r3, [pc, #400]	@ (8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80213be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80213c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80213c4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80213c6:	4b62      	ldr	r3, [pc, #392]	@ (8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80213c8:	681b      	ldr	r3, [r3, #0]
 80213ca:	f003 0304 	and.w	r3, r3, #4
 80213ce:	2b04      	cmp	r3, #4
 80213d0:	d10c      	bne.n	80213ec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80213d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80213d4:	2b00      	cmp	r3, #0
 80213d6:	d109      	bne.n	80213ec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80213d8:	4b5d      	ldr	r3, [pc, #372]	@ (8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80213da:	681b      	ldr	r3, [r3, #0]
 80213dc:	08db      	lsrs	r3, r3, #3
 80213de:	f003 0303 	and.w	r3, r3, #3
 80213e2:	4a5c      	ldr	r2, [pc, #368]	@ (8021554 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80213e4:	fa22 f303 	lsr.w	r3, r2, r3
 80213e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80213ea:	e01e      	b.n	802142a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80213ec:	4b58      	ldr	r3, [pc, #352]	@ (8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80213ee:	681b      	ldr	r3, [r3, #0]
 80213f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80213f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80213f8:	d106      	bne.n	8021408 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80213fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80213fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021400:	d102      	bne.n	8021408 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8021402:	4b55      	ldr	r3, [pc, #340]	@ (8021558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8021404:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021406:	e010      	b.n	802142a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8021408:	4b51      	ldr	r3, [pc, #324]	@ (8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 802140a:	681b      	ldr	r3, [r3, #0]
 802140c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021410:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021414:	d106      	bne.n	8021424 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8021416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021418:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802141c:	d102      	bne.n	8021424 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 802141e:	4b4f      	ldr	r3, [pc, #316]	@ (802155c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8021420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021422:	e002      	b.n	802142a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8021424:	2300      	movs	r3, #0
 8021426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8021428:	e235      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 802142a:	e234      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 802142c:	4b4c      	ldr	r3, [pc, #304]	@ (8021560 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 802142e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021430:	e231      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8021432:	2300      	movs	r3, #0
 8021434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021436:	e22e      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8021438:	e9d7 2300 	ldrd	r2, r3, [r7]
 802143c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8021440:	430b      	orrs	r3, r1
 8021442:	f040 808f 	bne.w	8021564 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8021446:	4b42      	ldr	r3, [pc, #264]	@ (8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802144a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 802144e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8021450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021452:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8021456:	d06b      	beq.n	8021530 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8021458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802145a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 802145e:	d874      	bhi.n	802154a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8021460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021462:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8021466:	d056      	beq.n	8021516 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8021468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802146a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 802146e:	d86c      	bhi.n	802154a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8021470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021472:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8021476:	d03b      	beq.n	80214f0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8021478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802147a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 802147e:	d864      	bhi.n	802154a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8021480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021482:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021486:	d021      	beq.n	80214cc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8021488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802148a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802148e:	d85c      	bhi.n	802154a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8021490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021492:	2b00      	cmp	r3, #0
 8021494:	d004      	beq.n	80214a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8021496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802149c:	d004      	beq.n	80214a8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 802149e:	e054      	b.n	802154a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80214a0:	f7fe fa4c 	bl	801f93c <HAL_RCC_GetPCLK1Freq>
 80214a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80214a6:	e1f6      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80214a8:	4b29      	ldr	r3, [pc, #164]	@ (8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80214aa:	681b      	ldr	r3, [r3, #0]
 80214ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80214b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80214b4:	d107      	bne.n	80214c6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80214b6:	f107 0318 	add.w	r3, r7, #24
 80214ba:	4618      	mov	r0, r3
 80214bc:	f000 fa0a 	bl	80218d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80214c0:	69fb      	ldr	r3, [r7, #28]
 80214c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80214c4:	e1e7      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80214c6:	2300      	movs	r3, #0
 80214c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80214ca:	e1e4      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80214cc:	4b20      	ldr	r3, [pc, #128]	@ (8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80214ce:	681b      	ldr	r3, [r3, #0]
 80214d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80214d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80214d8:	d107      	bne.n	80214ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80214da:	f107 030c 	add.w	r3, r7, #12
 80214de:	4618      	mov	r0, r3
 80214e0:	f000 fb4c 	bl	8021b7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80214e4:	693b      	ldr	r3, [r7, #16]
 80214e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80214e8:	e1d5      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80214ea:	2300      	movs	r3, #0
 80214ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80214ee:	e1d2      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80214f0:	4b17      	ldr	r3, [pc, #92]	@ (8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80214f2:	681b      	ldr	r3, [r3, #0]
 80214f4:	f003 0304 	and.w	r3, r3, #4
 80214f8:	2b04      	cmp	r3, #4
 80214fa:	d109      	bne.n	8021510 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80214fc:	4b14      	ldr	r3, [pc, #80]	@ (8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80214fe:	681b      	ldr	r3, [r3, #0]
 8021500:	08db      	lsrs	r3, r3, #3
 8021502:	f003 0303 	and.w	r3, r3, #3
 8021506:	4a13      	ldr	r2, [pc, #76]	@ (8021554 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8021508:	fa22 f303 	lsr.w	r3, r2, r3
 802150c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802150e:	e1c2      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021510:	2300      	movs	r3, #0
 8021512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021514:	e1bf      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8021516:	4b0e      	ldr	r3, [pc, #56]	@ (8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021518:	681b      	ldr	r3, [r3, #0]
 802151a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802151e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021522:	d102      	bne.n	802152a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8021524:	4b0c      	ldr	r3, [pc, #48]	@ (8021558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8021526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021528:	e1b5      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802152a:	2300      	movs	r3, #0
 802152c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802152e:	e1b2      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8021530:	4b07      	ldr	r3, [pc, #28]	@ (8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021532:	681b      	ldr	r3, [r3, #0]
 8021534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021538:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802153c:	d102      	bne.n	8021544 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 802153e:	4b07      	ldr	r3, [pc, #28]	@ (802155c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8021540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021542:	e1a8      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021544:	2300      	movs	r3, #0
 8021546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021548:	e1a5      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 802154a:	2300      	movs	r3, #0
 802154c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802154e:	e1a2      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021550:	58024400 	.word	0x58024400
 8021554:	03d09000 	.word	0x03d09000
 8021558:	003d0900 	.word	0x003d0900
 802155c:	017d7840 	.word	0x017d7840
 8021560:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8021564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021568:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 802156c:	430b      	orrs	r3, r1
 802156e:	d173      	bne.n	8021658 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8021570:	4b9c      	ldr	r3, [pc, #624]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021574:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8021578:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 802157a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802157c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021580:	d02f      	beq.n	80215e2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8021582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021584:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021588:	d863      	bhi.n	8021652 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 802158a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802158c:	2b00      	cmp	r3, #0
 802158e:	d004      	beq.n	802159a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8021590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021596:	d012      	beq.n	80215be <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8021598:	e05b      	b.n	8021652 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 802159a:	4b92      	ldr	r3, [pc, #584]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 802159c:	681b      	ldr	r3, [r3, #0]
 802159e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80215a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80215a6:	d107      	bne.n	80215b8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80215a8:	f107 0318 	add.w	r3, r7, #24
 80215ac:	4618      	mov	r0, r3
 80215ae:	f000 f991 	bl	80218d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80215b2:	69bb      	ldr	r3, [r7, #24]
 80215b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80215b6:	e16e      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80215b8:	2300      	movs	r3, #0
 80215ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80215bc:	e16b      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80215be:	4b89      	ldr	r3, [pc, #548]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80215c0:	681b      	ldr	r3, [r3, #0]
 80215c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80215c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80215ca:	d107      	bne.n	80215dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80215cc:	f107 030c 	add.w	r3, r7, #12
 80215d0:	4618      	mov	r0, r3
 80215d2:	f000 fad3 	bl	8021b7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80215d6:	697b      	ldr	r3, [r7, #20]
 80215d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80215da:	e15c      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80215dc:	2300      	movs	r3, #0
 80215de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80215e0:	e159      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80215e2:	4b80      	ldr	r3, [pc, #512]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80215e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80215e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80215ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80215ec:	4b7d      	ldr	r3, [pc, #500]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80215ee:	681b      	ldr	r3, [r3, #0]
 80215f0:	f003 0304 	and.w	r3, r3, #4
 80215f4:	2b04      	cmp	r3, #4
 80215f6:	d10c      	bne.n	8021612 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80215f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80215fa:	2b00      	cmp	r3, #0
 80215fc:	d109      	bne.n	8021612 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80215fe:	4b79      	ldr	r3, [pc, #484]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021600:	681b      	ldr	r3, [r3, #0]
 8021602:	08db      	lsrs	r3, r3, #3
 8021604:	f003 0303 	and.w	r3, r3, #3
 8021608:	4a77      	ldr	r2, [pc, #476]	@ (80217e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 802160a:	fa22 f303 	lsr.w	r3, r2, r3
 802160e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021610:	e01e      	b.n	8021650 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8021612:	4b74      	ldr	r3, [pc, #464]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021614:	681b      	ldr	r3, [r3, #0]
 8021616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802161a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802161e:	d106      	bne.n	802162e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8021620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021626:	d102      	bne.n	802162e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8021628:	4b70      	ldr	r3, [pc, #448]	@ (80217ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 802162a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802162c:	e010      	b.n	8021650 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 802162e:	4b6d      	ldr	r3, [pc, #436]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021630:	681b      	ldr	r3, [r3, #0]
 8021632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021636:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802163a:	d106      	bne.n	802164a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 802163c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802163e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021642:	d102      	bne.n	802164a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8021644:	4b6a      	ldr	r3, [pc, #424]	@ (80217f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8021646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021648:	e002      	b.n	8021650 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 802164a:	2300      	movs	r3, #0
 802164c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 802164e:	e122      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021650:	e121      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8021652:	2300      	movs	r3, #0
 8021654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021656:	e11e      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8021658:	e9d7 2300 	ldrd	r2, r3, [r7]
 802165c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8021660:	430b      	orrs	r3, r1
 8021662:	d133      	bne.n	80216cc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8021664:	4b5f      	ldr	r3, [pc, #380]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802166c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 802166e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021670:	2b00      	cmp	r3, #0
 8021672:	d004      	beq.n	802167e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8021674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802167a:	d012      	beq.n	80216a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 802167c:	e023      	b.n	80216c6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 802167e:	4b59      	ldr	r3, [pc, #356]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021680:	681b      	ldr	r3, [r3, #0]
 8021682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021686:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802168a:	d107      	bne.n	802169c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 802168c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021690:	4618      	mov	r0, r3
 8021692:	f000 fbc7 	bl	8021e24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8021696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802169a:	e0fc      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802169c:	2300      	movs	r3, #0
 802169e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80216a0:	e0f9      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80216a2:	4b50      	ldr	r3, [pc, #320]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80216a4:	681b      	ldr	r3, [r3, #0]
 80216a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80216aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80216ae:	d107      	bne.n	80216c0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80216b0:	f107 0318 	add.w	r3, r7, #24
 80216b4:	4618      	mov	r0, r3
 80216b6:	f000 f90d 	bl	80218d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80216ba:	6a3b      	ldr	r3, [r7, #32]
 80216bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80216be:	e0ea      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80216c0:	2300      	movs	r3, #0
 80216c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80216c4:	e0e7      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80216c6:	2300      	movs	r3, #0
 80216c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80216ca:	e0e4      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80216cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80216d0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80216d4:	430b      	orrs	r3, r1
 80216d6:	f040 808d 	bne.w	80217f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80216da:	4b42      	ldr	r3, [pc, #264]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80216dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80216de:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80216e2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80216e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80216ea:	d06b      	beq.n	80217c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80216ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80216f2:	d874      	bhi.n	80217de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80216f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80216fa:	d056      	beq.n	80217aa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80216fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8021702:	d86c      	bhi.n	80217de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8021704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021706:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 802170a:	d03b      	beq.n	8021784 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 802170c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802170e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8021712:	d864      	bhi.n	80217de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8021714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021716:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802171a:	d021      	beq.n	8021760 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 802171c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802171e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021722:	d85c      	bhi.n	80217de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8021724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021726:	2b00      	cmp	r3, #0
 8021728:	d004      	beq.n	8021734 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 802172a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802172c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021730:	d004      	beq.n	802173c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8021732:	e054      	b.n	80217de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8021734:	f000 f8b8 	bl	80218a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8021738:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 802173a:	e0ac      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 802173c:	4b29      	ldr	r3, [pc, #164]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 802173e:	681b      	ldr	r3, [r3, #0]
 8021740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8021744:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021748:	d107      	bne.n	802175a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802174a:	f107 0318 	add.w	r3, r7, #24
 802174e:	4618      	mov	r0, r3
 8021750:	f000 f8c0 	bl	80218d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8021754:	69fb      	ldr	r3, [r7, #28]
 8021756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021758:	e09d      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802175a:	2300      	movs	r3, #0
 802175c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802175e:	e09a      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8021760:	4b20      	ldr	r3, [pc, #128]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021762:	681b      	ldr	r3, [r3, #0]
 8021764:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8021768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802176c:	d107      	bne.n	802177e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802176e:	f107 030c 	add.w	r3, r7, #12
 8021772:	4618      	mov	r0, r3
 8021774:	f000 fa02 	bl	8021b7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8021778:	693b      	ldr	r3, [r7, #16]
 802177a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802177c:	e08b      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802177e:	2300      	movs	r3, #0
 8021780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021782:	e088      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8021784:	4b17      	ldr	r3, [pc, #92]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021786:	681b      	ldr	r3, [r3, #0]
 8021788:	f003 0304 	and.w	r3, r3, #4
 802178c:	2b04      	cmp	r3, #4
 802178e:	d109      	bne.n	80217a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021790:	4b14      	ldr	r3, [pc, #80]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021792:	681b      	ldr	r3, [r3, #0]
 8021794:	08db      	lsrs	r3, r3, #3
 8021796:	f003 0303 	and.w	r3, r3, #3
 802179a:	4a13      	ldr	r2, [pc, #76]	@ (80217e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 802179c:	fa22 f303 	lsr.w	r3, r2, r3
 80217a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80217a2:	e078      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80217a4:	2300      	movs	r3, #0
 80217a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80217a8:	e075      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80217aa:	4b0e      	ldr	r3, [pc, #56]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80217ac:	681b      	ldr	r3, [r3, #0]
 80217ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80217b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80217b6:	d102      	bne.n	80217be <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80217b8:	4b0c      	ldr	r3, [pc, #48]	@ (80217ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80217ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80217bc:	e06b      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80217be:	2300      	movs	r3, #0
 80217c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80217c2:	e068      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80217c4:	4b07      	ldr	r3, [pc, #28]	@ (80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80217c6:	681b      	ldr	r3, [r3, #0]
 80217c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80217cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80217d0:	d102      	bne.n	80217d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80217d2:	4b07      	ldr	r3, [pc, #28]	@ (80217f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80217d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80217d6:	e05e      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80217d8:	2300      	movs	r3, #0
 80217da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80217dc:	e05b      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80217de:	2300      	movs	r3, #0
 80217e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80217e2:	e058      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80217e4:	58024400 	.word	0x58024400
 80217e8:	03d09000 	.word	0x03d09000
 80217ec:	003d0900 	.word	0x003d0900
 80217f0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80217f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80217f8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80217fc:	430b      	orrs	r3, r1
 80217fe:	d148      	bne.n	8021892 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8021800:	4b27      	ldr	r3, [pc, #156]	@ (80218a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8021802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021804:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8021808:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 802180a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802180c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021810:	d02a      	beq.n	8021868 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8021812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021814:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021818:	d838      	bhi.n	802188c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 802181a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802181c:	2b00      	cmp	r3, #0
 802181e:	d004      	beq.n	802182a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8021820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021822:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021826:	d00d      	beq.n	8021844 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8021828:	e030      	b.n	802188c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 802182a:	4b1d      	ldr	r3, [pc, #116]	@ (80218a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 802182c:	681b      	ldr	r3, [r3, #0]
 802182e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021832:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021836:	d102      	bne.n	802183e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8021838:	4b1a      	ldr	r3, [pc, #104]	@ (80218a4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 802183a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802183c:	e02b      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802183e:	2300      	movs	r3, #0
 8021840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021842:	e028      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8021844:	4b16      	ldr	r3, [pc, #88]	@ (80218a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8021846:	681b      	ldr	r3, [r3, #0]
 8021848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802184c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8021850:	d107      	bne.n	8021862 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8021852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021856:	4618      	mov	r0, r3
 8021858:	f000 fae4 	bl	8021e24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 802185c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802185e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021860:	e019      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021862:	2300      	movs	r3, #0
 8021864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021866:	e016      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8021868:	4b0d      	ldr	r3, [pc, #52]	@ (80218a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 802186a:	681b      	ldr	r3, [r3, #0]
 802186c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8021870:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021874:	d107      	bne.n	8021886 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021876:	f107 0318 	add.w	r3, r7, #24
 802187a:	4618      	mov	r0, r3
 802187c:	f000 f82a 	bl	80218d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8021880:	69fb      	ldr	r3, [r7, #28]
 8021882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021884:	e007      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021886:	2300      	movs	r3, #0
 8021888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802188a:	e004      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 802188c:	2300      	movs	r3, #0
 802188e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021890:	e001      	b.n	8021896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8021892:	2300      	movs	r3, #0
 8021894:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8021896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8021898:	4618      	mov	r0, r3
 802189a:	3740      	adds	r7, #64	@ 0x40
 802189c:	46bd      	mov	sp, r7
 802189e:	bd80      	pop	{r7, pc}
 80218a0:	58024400 	.word	0x58024400
 80218a4:	017d7840 	.word	0x017d7840

080218a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80218a8:	b580      	push	{r7, lr}
 80218aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80218ac:	f7fe f816 	bl	801f8dc <HAL_RCC_GetHCLKFreq>
 80218b0:	4602      	mov	r2, r0
 80218b2:	4b06      	ldr	r3, [pc, #24]	@ (80218cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80218b4:	6a1b      	ldr	r3, [r3, #32]
 80218b6:	091b      	lsrs	r3, r3, #4
 80218b8:	f003 0307 	and.w	r3, r3, #7
 80218bc:	4904      	ldr	r1, [pc, #16]	@ (80218d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80218be:	5ccb      	ldrb	r3, [r1, r3]
 80218c0:	f003 031f 	and.w	r3, r3, #31
 80218c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80218c8:	4618      	mov	r0, r3
 80218ca:	bd80      	pop	{r7, pc}
 80218cc:	58024400 	.word	0x58024400
 80218d0:	0802b3a0 	.word	0x0802b3a0

080218d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80218d4:	b480      	push	{r7}
 80218d6:	b089      	sub	sp, #36	@ 0x24
 80218d8:	af00      	add	r7, sp, #0
 80218da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80218dc:	4ba1      	ldr	r3, [pc, #644]	@ (8021b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80218de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80218e0:	f003 0303 	and.w	r3, r3, #3
 80218e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80218e6:	4b9f      	ldr	r3, [pc, #636]	@ (8021b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80218e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80218ea:	0b1b      	lsrs	r3, r3, #12
 80218ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80218f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80218f2:	4b9c      	ldr	r3, [pc, #624]	@ (8021b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80218f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80218f6:	091b      	lsrs	r3, r3, #4
 80218f8:	f003 0301 	and.w	r3, r3, #1
 80218fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80218fe:	4b99      	ldr	r3, [pc, #612]	@ (8021b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021902:	08db      	lsrs	r3, r3, #3
 8021904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021908:	693a      	ldr	r2, [r7, #16]
 802190a:	fb02 f303 	mul.w	r3, r2, r3
 802190e:	ee07 3a90 	vmov	s15, r3
 8021912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021916:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 802191a:	697b      	ldr	r3, [r7, #20]
 802191c:	2b00      	cmp	r3, #0
 802191e:	f000 8111 	beq.w	8021b44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8021922:	69bb      	ldr	r3, [r7, #24]
 8021924:	2b02      	cmp	r3, #2
 8021926:	f000 8083 	beq.w	8021a30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 802192a:	69bb      	ldr	r3, [r7, #24]
 802192c:	2b02      	cmp	r3, #2
 802192e:	f200 80a1 	bhi.w	8021a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8021932:	69bb      	ldr	r3, [r7, #24]
 8021934:	2b00      	cmp	r3, #0
 8021936:	d003      	beq.n	8021940 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8021938:	69bb      	ldr	r3, [r7, #24]
 802193a:	2b01      	cmp	r3, #1
 802193c:	d056      	beq.n	80219ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 802193e:	e099      	b.n	8021a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021940:	4b88      	ldr	r3, [pc, #544]	@ (8021b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021942:	681b      	ldr	r3, [r3, #0]
 8021944:	f003 0320 	and.w	r3, r3, #32
 8021948:	2b00      	cmp	r3, #0
 802194a:	d02d      	beq.n	80219a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802194c:	4b85      	ldr	r3, [pc, #532]	@ (8021b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802194e:	681b      	ldr	r3, [r3, #0]
 8021950:	08db      	lsrs	r3, r3, #3
 8021952:	f003 0303 	and.w	r3, r3, #3
 8021956:	4a84      	ldr	r2, [pc, #528]	@ (8021b68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8021958:	fa22 f303 	lsr.w	r3, r2, r3
 802195c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802195e:	68bb      	ldr	r3, [r7, #8]
 8021960:	ee07 3a90 	vmov	s15, r3
 8021964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021968:	697b      	ldr	r3, [r7, #20]
 802196a:	ee07 3a90 	vmov	s15, r3
 802196e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021976:	4b7b      	ldr	r3, [pc, #492]	@ (8021b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802197a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802197e:	ee07 3a90 	vmov	s15, r3
 8021982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021986:	ed97 6a03 	vldr	s12, [r7, #12]
 802198a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8021b6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802198e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802199a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802199e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80219a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80219a6:	e087      	b.n	8021ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80219a8:	697b      	ldr	r3, [r7, #20]
 80219aa:	ee07 3a90 	vmov	s15, r3
 80219ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80219b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8021b70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80219b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80219ba:	4b6a      	ldr	r3, [pc, #424]	@ (8021b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80219bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80219be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80219c2:	ee07 3a90 	vmov	s15, r3
 80219c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80219ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80219ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8021b6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80219d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80219d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80219da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80219de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80219e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80219e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80219ea:	e065      	b.n	8021ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80219ec:	697b      	ldr	r3, [r7, #20]
 80219ee:	ee07 3a90 	vmov	s15, r3
 80219f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80219f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8021b74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80219fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80219fe:	4b59      	ldr	r3, [pc, #356]	@ (8021b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021a06:	ee07 3a90 	vmov	s15, r3
 8021a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8021a12:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8021b6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8021a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021a2e:	e043      	b.n	8021ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8021a30:	697b      	ldr	r3, [r7, #20]
 8021a32:	ee07 3a90 	vmov	s15, r3
 8021a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021a3a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8021b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8021a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021a42:	4b48      	ldr	r3, [pc, #288]	@ (8021b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021a4a:	ee07 3a90 	vmov	s15, r3
 8021a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8021a56:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8021b6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8021a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021a72:	e021      	b.n	8021ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8021a74:	697b      	ldr	r3, [r7, #20]
 8021a76:	ee07 3a90 	vmov	s15, r3
 8021a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021a7e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8021b74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8021a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021a86:	4b37      	ldr	r3, [pc, #220]	@ (8021b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021a8e:	ee07 3a90 	vmov	s15, r3
 8021a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8021a9a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8021b6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8021a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021ab6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8021ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8021b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021abc:	0a5b      	lsrs	r3, r3, #9
 8021abe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021ac2:	ee07 3a90 	vmov	s15, r3
 8021ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021aca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021ace:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021ad2:	edd7 6a07 	vldr	s13, [r7, #28]
 8021ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021ade:	ee17 2a90 	vmov	r2, s15
 8021ae2:	687b      	ldr	r3, [r7, #4]
 8021ae4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8021ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8021b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021aea:	0c1b      	lsrs	r3, r3, #16
 8021aec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021af0:	ee07 3a90 	vmov	s15, r3
 8021af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021af8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021afc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021b00:	edd7 6a07 	vldr	s13, [r7, #28]
 8021b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021b0c:	ee17 2a90 	vmov	r2, s15
 8021b10:	687b      	ldr	r3, [r7, #4]
 8021b12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8021b14:	4b13      	ldr	r3, [pc, #76]	@ (8021b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021b18:	0e1b      	lsrs	r3, r3, #24
 8021b1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021b1e:	ee07 3a90 	vmov	s15, r3
 8021b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021b26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021b2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021b2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8021b32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021b3a:	ee17 2a90 	vmov	r2, s15
 8021b3e:	687b      	ldr	r3, [r7, #4]
 8021b40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8021b42:	e008      	b.n	8021b56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8021b44:	687b      	ldr	r3, [r7, #4]
 8021b46:	2200      	movs	r2, #0
 8021b48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8021b4a:	687b      	ldr	r3, [r7, #4]
 8021b4c:	2200      	movs	r2, #0
 8021b4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8021b50:	687b      	ldr	r3, [r7, #4]
 8021b52:	2200      	movs	r2, #0
 8021b54:	609a      	str	r2, [r3, #8]
}
 8021b56:	bf00      	nop
 8021b58:	3724      	adds	r7, #36	@ 0x24
 8021b5a:	46bd      	mov	sp, r7
 8021b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b60:	4770      	bx	lr
 8021b62:	bf00      	nop
 8021b64:	58024400 	.word	0x58024400
 8021b68:	03d09000 	.word	0x03d09000
 8021b6c:	46000000 	.word	0x46000000
 8021b70:	4c742400 	.word	0x4c742400
 8021b74:	4a742400 	.word	0x4a742400
 8021b78:	4bbebc20 	.word	0x4bbebc20

08021b7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8021b7c:	b480      	push	{r7}
 8021b7e:	b089      	sub	sp, #36	@ 0x24
 8021b80:	af00      	add	r7, sp, #0
 8021b82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8021b84:	4ba1      	ldr	r3, [pc, #644]	@ (8021e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021b88:	f003 0303 	and.w	r3, r3, #3
 8021b8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8021b8e:	4b9f      	ldr	r3, [pc, #636]	@ (8021e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021b92:	0d1b      	lsrs	r3, r3, #20
 8021b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021b98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8021b9a:	4b9c      	ldr	r3, [pc, #624]	@ (8021e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021b9e:	0a1b      	lsrs	r3, r3, #8
 8021ba0:	f003 0301 	and.w	r3, r3, #1
 8021ba4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8021ba6:	4b99      	ldr	r3, [pc, #612]	@ (8021e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021baa:	08db      	lsrs	r3, r3, #3
 8021bac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021bb0:	693a      	ldr	r2, [r7, #16]
 8021bb2:	fb02 f303 	mul.w	r3, r2, r3
 8021bb6:	ee07 3a90 	vmov	s15, r3
 8021bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021bbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8021bc2:	697b      	ldr	r3, [r7, #20]
 8021bc4:	2b00      	cmp	r3, #0
 8021bc6:	f000 8111 	beq.w	8021dec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8021bca:	69bb      	ldr	r3, [r7, #24]
 8021bcc:	2b02      	cmp	r3, #2
 8021bce:	f000 8083 	beq.w	8021cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8021bd2:	69bb      	ldr	r3, [r7, #24]
 8021bd4:	2b02      	cmp	r3, #2
 8021bd6:	f200 80a1 	bhi.w	8021d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8021bda:	69bb      	ldr	r3, [r7, #24]
 8021bdc:	2b00      	cmp	r3, #0
 8021bde:	d003      	beq.n	8021be8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8021be0:	69bb      	ldr	r3, [r7, #24]
 8021be2:	2b01      	cmp	r3, #1
 8021be4:	d056      	beq.n	8021c94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8021be6:	e099      	b.n	8021d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021be8:	4b88      	ldr	r3, [pc, #544]	@ (8021e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021bea:	681b      	ldr	r3, [r3, #0]
 8021bec:	f003 0320 	and.w	r3, r3, #32
 8021bf0:	2b00      	cmp	r3, #0
 8021bf2:	d02d      	beq.n	8021c50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021bf4:	4b85      	ldr	r3, [pc, #532]	@ (8021e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021bf6:	681b      	ldr	r3, [r3, #0]
 8021bf8:	08db      	lsrs	r3, r3, #3
 8021bfa:	f003 0303 	and.w	r3, r3, #3
 8021bfe:	4a84      	ldr	r2, [pc, #528]	@ (8021e10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8021c00:	fa22 f303 	lsr.w	r3, r2, r3
 8021c04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021c06:	68bb      	ldr	r3, [r7, #8]
 8021c08:	ee07 3a90 	vmov	s15, r3
 8021c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021c10:	697b      	ldr	r3, [r7, #20]
 8021c12:	ee07 3a90 	vmov	s15, r3
 8021c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021c1e:	4b7b      	ldr	r3, [pc, #492]	@ (8021e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021c26:	ee07 3a90 	vmov	s15, r3
 8021c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8021c32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8021e14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8021c4e:	e087      	b.n	8021d60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021c50:	697b      	ldr	r3, [r7, #20]
 8021c52:	ee07 3a90 	vmov	s15, r3
 8021c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021c5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8021e18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8021c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021c62:	4b6a      	ldr	r3, [pc, #424]	@ (8021e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021c6a:	ee07 3a90 	vmov	s15, r3
 8021c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8021c76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8021e14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021c92:	e065      	b.n	8021d60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021c94:	697b      	ldr	r3, [r7, #20]
 8021c96:	ee07 3a90 	vmov	s15, r3
 8021c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021c9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8021e1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8021ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021ca6:	4b59      	ldr	r3, [pc, #356]	@ (8021e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021cae:	ee07 3a90 	vmov	s15, r3
 8021cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8021cba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8021e14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021cd6:	e043      	b.n	8021d60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021cd8:	697b      	ldr	r3, [r7, #20]
 8021cda:	ee07 3a90 	vmov	s15, r3
 8021cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021ce2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8021e20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8021ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021cea:	4b48      	ldr	r3, [pc, #288]	@ (8021e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021cf2:	ee07 3a90 	vmov	s15, r3
 8021cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8021cfe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8021e14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021d1a:	e021      	b.n	8021d60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021d1c:	697b      	ldr	r3, [r7, #20]
 8021d1e:	ee07 3a90 	vmov	s15, r3
 8021d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021d26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8021e1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8021d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021d2e:	4b37      	ldr	r3, [pc, #220]	@ (8021e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021d36:	ee07 3a90 	vmov	s15, r3
 8021d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8021d42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8021e14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021d5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8021d60:	4b2a      	ldr	r3, [pc, #168]	@ (8021e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021d64:	0a5b      	lsrs	r3, r3, #9
 8021d66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021d6a:	ee07 3a90 	vmov	s15, r3
 8021d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021d72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021d76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021d7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8021d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021d86:	ee17 2a90 	vmov	r2, s15
 8021d8a:	687b      	ldr	r3, [r7, #4]
 8021d8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8021d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8021e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021d92:	0c1b      	lsrs	r3, r3, #16
 8021d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021d98:	ee07 3a90 	vmov	s15, r3
 8021d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021da0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021da4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021da8:	edd7 6a07 	vldr	s13, [r7, #28]
 8021dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021db4:	ee17 2a90 	vmov	r2, s15
 8021db8:	687b      	ldr	r3, [r7, #4]
 8021dba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8021dbc:	4b13      	ldr	r3, [pc, #76]	@ (8021e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021dc0:	0e1b      	lsrs	r3, r3, #24
 8021dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021dc6:	ee07 3a90 	vmov	s15, r3
 8021dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021dce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021dd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021dd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8021dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021de2:	ee17 2a90 	vmov	r2, s15
 8021de6:	687b      	ldr	r3, [r7, #4]
 8021de8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8021dea:	e008      	b.n	8021dfe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8021dec:	687b      	ldr	r3, [r7, #4]
 8021dee:	2200      	movs	r2, #0
 8021df0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8021df2:	687b      	ldr	r3, [r7, #4]
 8021df4:	2200      	movs	r2, #0
 8021df6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8021df8:	687b      	ldr	r3, [r7, #4]
 8021dfa:	2200      	movs	r2, #0
 8021dfc:	609a      	str	r2, [r3, #8]
}
 8021dfe:	bf00      	nop
 8021e00:	3724      	adds	r7, #36	@ 0x24
 8021e02:	46bd      	mov	sp, r7
 8021e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e08:	4770      	bx	lr
 8021e0a:	bf00      	nop
 8021e0c:	58024400 	.word	0x58024400
 8021e10:	03d09000 	.word	0x03d09000
 8021e14:	46000000 	.word	0x46000000
 8021e18:	4c742400 	.word	0x4c742400
 8021e1c:	4a742400 	.word	0x4a742400
 8021e20:	4bbebc20 	.word	0x4bbebc20

08021e24 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8021e24:	b480      	push	{r7}
 8021e26:	b089      	sub	sp, #36	@ 0x24
 8021e28:	af00      	add	r7, sp, #0
 8021e2a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8021e2c:	4ba0      	ldr	r3, [pc, #640]	@ (80220b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021e30:	f003 0303 	and.w	r3, r3, #3
 8021e34:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8021e36:	4b9e      	ldr	r3, [pc, #632]	@ (80220b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021e3a:	091b      	lsrs	r3, r3, #4
 8021e3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021e40:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8021e42:	4b9b      	ldr	r3, [pc, #620]	@ (80220b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021e46:	f003 0301 	and.w	r3, r3, #1
 8021e4a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8021e4c:	4b98      	ldr	r3, [pc, #608]	@ (80220b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021e50:	08db      	lsrs	r3, r3, #3
 8021e52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021e56:	693a      	ldr	r2, [r7, #16]
 8021e58:	fb02 f303 	mul.w	r3, r2, r3
 8021e5c:	ee07 3a90 	vmov	s15, r3
 8021e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021e64:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8021e68:	697b      	ldr	r3, [r7, #20]
 8021e6a:	2b00      	cmp	r3, #0
 8021e6c:	f000 8111 	beq.w	8022092 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8021e70:	69bb      	ldr	r3, [r7, #24]
 8021e72:	2b02      	cmp	r3, #2
 8021e74:	f000 8083 	beq.w	8021f7e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8021e78:	69bb      	ldr	r3, [r7, #24]
 8021e7a:	2b02      	cmp	r3, #2
 8021e7c:	f200 80a1 	bhi.w	8021fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8021e80:	69bb      	ldr	r3, [r7, #24]
 8021e82:	2b00      	cmp	r3, #0
 8021e84:	d003      	beq.n	8021e8e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8021e86:	69bb      	ldr	r3, [r7, #24]
 8021e88:	2b01      	cmp	r3, #1
 8021e8a:	d056      	beq.n	8021f3a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8021e8c:	e099      	b.n	8021fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021e8e:	4b88      	ldr	r3, [pc, #544]	@ (80220b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021e90:	681b      	ldr	r3, [r3, #0]
 8021e92:	f003 0320 	and.w	r3, r3, #32
 8021e96:	2b00      	cmp	r3, #0
 8021e98:	d02d      	beq.n	8021ef6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021e9a:	4b85      	ldr	r3, [pc, #532]	@ (80220b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021e9c:	681b      	ldr	r3, [r3, #0]
 8021e9e:	08db      	lsrs	r3, r3, #3
 8021ea0:	f003 0303 	and.w	r3, r3, #3
 8021ea4:	4a83      	ldr	r2, [pc, #524]	@ (80220b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8021ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8021eaa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8021eac:	68bb      	ldr	r3, [r7, #8]
 8021eae:	ee07 3a90 	vmov	s15, r3
 8021eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021eb6:	697b      	ldr	r3, [r7, #20]
 8021eb8:	ee07 3a90 	vmov	s15, r3
 8021ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021ec4:	4b7a      	ldr	r3, [pc, #488]	@ (80220b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021ecc:	ee07 3a90 	vmov	s15, r3
 8021ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021ed4:	ed97 6a03 	vldr	s12, [r7, #12]
 8021ed8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80220b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8021edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021ee4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021ef0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8021ef4:	e087      	b.n	8022006 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8021ef6:	697b      	ldr	r3, [r7, #20]
 8021ef8:	ee07 3a90 	vmov	s15, r3
 8021efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021f00:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80220bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8021f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021f08:	4b69      	ldr	r3, [pc, #420]	@ (80220b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021f10:	ee07 3a90 	vmov	s15, r3
 8021f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021f18:	ed97 6a03 	vldr	s12, [r7, #12]
 8021f1c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80220b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8021f20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021f28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021f2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021f34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021f38:	e065      	b.n	8022006 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8021f3a:	697b      	ldr	r3, [r7, #20]
 8021f3c:	ee07 3a90 	vmov	s15, r3
 8021f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021f44:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80220c0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8021f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021f4c:	4b58      	ldr	r3, [pc, #352]	@ (80220b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021f54:	ee07 3a90 	vmov	s15, r3
 8021f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021f5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8021f60:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80220b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8021f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021f6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021f78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021f7c:	e043      	b.n	8022006 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8021f7e:	697b      	ldr	r3, [r7, #20]
 8021f80:	ee07 3a90 	vmov	s15, r3
 8021f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021f88:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80220c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8021f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021f90:	4b47      	ldr	r3, [pc, #284]	@ (80220b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021f98:	ee07 3a90 	vmov	s15, r3
 8021f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021fa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8021fa4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80220b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8021fa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021fac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021fb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021fbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021fc0:	e021      	b.n	8022006 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8021fc2:	697b      	ldr	r3, [r7, #20]
 8021fc4:	ee07 3a90 	vmov	s15, r3
 8021fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021fcc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80220bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8021fd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021fd4:	4b36      	ldr	r3, [pc, #216]	@ (80220b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021fdc:	ee07 3a90 	vmov	s15, r3
 8021fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021fe4:	ed97 6a03 	vldr	s12, [r7, #12]
 8021fe8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80220b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8021fec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021ff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021ff4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021ff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022000:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8022004:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8022006:	4b2a      	ldr	r3, [pc, #168]	@ (80220b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8022008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802200a:	0a5b      	lsrs	r3, r3, #9
 802200c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022010:	ee07 3a90 	vmov	s15, r3
 8022014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022018:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802201c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8022020:	edd7 6a07 	vldr	s13, [r7, #28]
 8022024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802202c:	ee17 2a90 	vmov	r2, s15
 8022030:	687b      	ldr	r3, [r7, #4]
 8022032:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8022034:	4b1e      	ldr	r3, [pc, #120]	@ (80220b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8022036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022038:	0c1b      	lsrs	r3, r3, #16
 802203a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802203e:	ee07 3a90 	vmov	s15, r3
 8022042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022046:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802204a:	ee37 7a87 	vadd.f32	s14, s15, s14
 802204e:	edd7 6a07 	vldr	s13, [r7, #28]
 8022052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802205a:	ee17 2a90 	vmov	r2, s15
 802205e:	687b      	ldr	r3, [r7, #4]
 8022060:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8022062:	4b13      	ldr	r3, [pc, #76]	@ (80220b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8022064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022066:	0e1b      	lsrs	r3, r3, #24
 8022068:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802206c:	ee07 3a90 	vmov	s15, r3
 8022070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022074:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022078:	ee37 7a87 	vadd.f32	s14, s15, s14
 802207c:	edd7 6a07 	vldr	s13, [r7, #28]
 8022080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022088:	ee17 2a90 	vmov	r2, s15
 802208c:	687b      	ldr	r3, [r7, #4]
 802208e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8022090:	e008      	b.n	80220a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8022092:	687b      	ldr	r3, [r7, #4]
 8022094:	2200      	movs	r2, #0
 8022096:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8022098:	687b      	ldr	r3, [r7, #4]
 802209a:	2200      	movs	r2, #0
 802209c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 802209e:	687b      	ldr	r3, [r7, #4]
 80220a0:	2200      	movs	r2, #0
 80220a2:	609a      	str	r2, [r3, #8]
}
 80220a4:	bf00      	nop
 80220a6:	3724      	adds	r7, #36	@ 0x24
 80220a8:	46bd      	mov	sp, r7
 80220aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220ae:	4770      	bx	lr
 80220b0:	58024400 	.word	0x58024400
 80220b4:	03d09000 	.word	0x03d09000
 80220b8:	46000000 	.word	0x46000000
 80220bc:	4c742400 	.word	0x4c742400
 80220c0:	4a742400 	.word	0x4a742400
 80220c4:	4bbebc20 	.word	0x4bbebc20

080220c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80220c8:	b580      	push	{r7, lr}
 80220ca:	b084      	sub	sp, #16
 80220cc:	af00      	add	r7, sp, #0
 80220ce:	6078      	str	r0, [r7, #4]
 80220d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80220d2:	2300      	movs	r3, #0
 80220d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80220d6:	4b53      	ldr	r3, [pc, #332]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 80220d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80220da:	f003 0303 	and.w	r3, r3, #3
 80220de:	2b03      	cmp	r3, #3
 80220e0:	d101      	bne.n	80220e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80220e2:	2301      	movs	r3, #1
 80220e4:	e099      	b.n	802221a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80220e6:	4b4f      	ldr	r3, [pc, #316]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 80220e8:	681b      	ldr	r3, [r3, #0]
 80220ea:	4a4e      	ldr	r2, [pc, #312]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 80220ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80220f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80220f2:	f7f9 fd2f 	bl	801bb54 <HAL_GetTick>
 80220f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80220f8:	e008      	b.n	802210c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80220fa:	f7f9 fd2b 	bl	801bb54 <HAL_GetTick>
 80220fe:	4602      	mov	r2, r0
 8022100:	68bb      	ldr	r3, [r7, #8]
 8022102:	1ad3      	subs	r3, r2, r3
 8022104:	2b02      	cmp	r3, #2
 8022106:	d901      	bls.n	802210c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8022108:	2303      	movs	r3, #3
 802210a:	e086      	b.n	802221a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 802210c:	4b45      	ldr	r3, [pc, #276]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 802210e:	681b      	ldr	r3, [r3, #0]
 8022110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8022114:	2b00      	cmp	r3, #0
 8022116:	d1f0      	bne.n	80220fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8022118:	4b42      	ldr	r3, [pc, #264]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 802211a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802211c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8022120:	687b      	ldr	r3, [r7, #4]
 8022122:	681b      	ldr	r3, [r3, #0]
 8022124:	031b      	lsls	r3, r3, #12
 8022126:	493f      	ldr	r1, [pc, #252]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 8022128:	4313      	orrs	r3, r2
 802212a:	628b      	str	r3, [r1, #40]	@ 0x28
 802212c:	687b      	ldr	r3, [r7, #4]
 802212e:	685b      	ldr	r3, [r3, #4]
 8022130:	3b01      	subs	r3, #1
 8022132:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8022136:	687b      	ldr	r3, [r7, #4]
 8022138:	689b      	ldr	r3, [r3, #8]
 802213a:	3b01      	subs	r3, #1
 802213c:	025b      	lsls	r3, r3, #9
 802213e:	b29b      	uxth	r3, r3
 8022140:	431a      	orrs	r2, r3
 8022142:	687b      	ldr	r3, [r7, #4]
 8022144:	68db      	ldr	r3, [r3, #12]
 8022146:	3b01      	subs	r3, #1
 8022148:	041b      	lsls	r3, r3, #16
 802214a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 802214e:	431a      	orrs	r2, r3
 8022150:	687b      	ldr	r3, [r7, #4]
 8022152:	691b      	ldr	r3, [r3, #16]
 8022154:	3b01      	subs	r3, #1
 8022156:	061b      	lsls	r3, r3, #24
 8022158:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 802215c:	4931      	ldr	r1, [pc, #196]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 802215e:	4313      	orrs	r3, r2
 8022160:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8022162:	4b30      	ldr	r3, [pc, #192]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 8022164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022166:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 802216a:	687b      	ldr	r3, [r7, #4]
 802216c:	695b      	ldr	r3, [r3, #20]
 802216e:	492d      	ldr	r1, [pc, #180]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 8022170:	4313      	orrs	r3, r2
 8022172:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8022174:	4b2b      	ldr	r3, [pc, #172]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 8022176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022178:	f023 0220 	bic.w	r2, r3, #32
 802217c:	687b      	ldr	r3, [r7, #4]
 802217e:	699b      	ldr	r3, [r3, #24]
 8022180:	4928      	ldr	r1, [pc, #160]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 8022182:	4313      	orrs	r3, r2
 8022184:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8022186:	4b27      	ldr	r3, [pc, #156]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 8022188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802218a:	4a26      	ldr	r2, [pc, #152]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 802218c:	f023 0310 	bic.w	r3, r3, #16
 8022190:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8022192:	4b24      	ldr	r3, [pc, #144]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 8022194:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022196:	4b24      	ldr	r3, [pc, #144]	@ (8022228 <RCCEx_PLL2_Config+0x160>)
 8022198:	4013      	ands	r3, r2
 802219a:	687a      	ldr	r2, [r7, #4]
 802219c:	69d2      	ldr	r2, [r2, #28]
 802219e:	00d2      	lsls	r2, r2, #3
 80221a0:	4920      	ldr	r1, [pc, #128]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 80221a2:	4313      	orrs	r3, r2
 80221a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80221a6:	4b1f      	ldr	r3, [pc, #124]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 80221a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80221aa:	4a1e      	ldr	r2, [pc, #120]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 80221ac:	f043 0310 	orr.w	r3, r3, #16
 80221b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80221b2:	683b      	ldr	r3, [r7, #0]
 80221b4:	2b00      	cmp	r3, #0
 80221b6:	d106      	bne.n	80221c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80221b8:	4b1a      	ldr	r3, [pc, #104]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 80221ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80221bc:	4a19      	ldr	r2, [pc, #100]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 80221be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80221c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80221c4:	e00f      	b.n	80221e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80221c6:	683b      	ldr	r3, [r7, #0]
 80221c8:	2b01      	cmp	r3, #1
 80221ca:	d106      	bne.n	80221da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80221cc:	4b15      	ldr	r3, [pc, #84]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 80221ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80221d0:	4a14      	ldr	r2, [pc, #80]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 80221d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80221d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80221d8:	e005      	b.n	80221e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80221da:	4b12      	ldr	r3, [pc, #72]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 80221dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80221de:	4a11      	ldr	r2, [pc, #68]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 80221e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80221e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80221e6:	4b0f      	ldr	r3, [pc, #60]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 80221e8:	681b      	ldr	r3, [r3, #0]
 80221ea:	4a0e      	ldr	r2, [pc, #56]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 80221ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80221f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80221f2:	f7f9 fcaf 	bl	801bb54 <HAL_GetTick>
 80221f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80221f8:	e008      	b.n	802220c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80221fa:	f7f9 fcab 	bl	801bb54 <HAL_GetTick>
 80221fe:	4602      	mov	r2, r0
 8022200:	68bb      	ldr	r3, [r7, #8]
 8022202:	1ad3      	subs	r3, r2, r3
 8022204:	2b02      	cmp	r3, #2
 8022206:	d901      	bls.n	802220c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8022208:	2303      	movs	r3, #3
 802220a:	e006      	b.n	802221a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 802220c:	4b05      	ldr	r3, [pc, #20]	@ (8022224 <RCCEx_PLL2_Config+0x15c>)
 802220e:	681b      	ldr	r3, [r3, #0]
 8022210:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8022214:	2b00      	cmp	r3, #0
 8022216:	d0f0      	beq.n	80221fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8022218:	7bfb      	ldrb	r3, [r7, #15]
}
 802221a:	4618      	mov	r0, r3
 802221c:	3710      	adds	r7, #16
 802221e:	46bd      	mov	sp, r7
 8022220:	bd80      	pop	{r7, pc}
 8022222:	bf00      	nop
 8022224:	58024400 	.word	0x58024400
 8022228:	ffff0007 	.word	0xffff0007

0802222c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 802222c:	b580      	push	{r7, lr}
 802222e:	b084      	sub	sp, #16
 8022230:	af00      	add	r7, sp, #0
 8022232:	6078      	str	r0, [r7, #4]
 8022234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8022236:	2300      	movs	r3, #0
 8022238:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 802223a:	4b53      	ldr	r3, [pc, #332]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 802223c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802223e:	f003 0303 	and.w	r3, r3, #3
 8022242:	2b03      	cmp	r3, #3
 8022244:	d101      	bne.n	802224a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8022246:	2301      	movs	r3, #1
 8022248:	e099      	b.n	802237e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 802224a:	4b4f      	ldr	r3, [pc, #316]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 802224c:	681b      	ldr	r3, [r3, #0]
 802224e:	4a4e      	ldr	r2, [pc, #312]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 8022250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8022254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022256:	f7f9 fc7d 	bl	801bb54 <HAL_GetTick>
 802225a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 802225c:	e008      	b.n	8022270 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 802225e:	f7f9 fc79 	bl	801bb54 <HAL_GetTick>
 8022262:	4602      	mov	r2, r0
 8022264:	68bb      	ldr	r3, [r7, #8]
 8022266:	1ad3      	subs	r3, r2, r3
 8022268:	2b02      	cmp	r3, #2
 802226a:	d901      	bls.n	8022270 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 802226c:	2303      	movs	r3, #3
 802226e:	e086      	b.n	802237e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8022270:	4b45      	ldr	r3, [pc, #276]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 8022272:	681b      	ldr	r3, [r3, #0]
 8022274:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8022278:	2b00      	cmp	r3, #0
 802227a:	d1f0      	bne.n	802225e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 802227c:	4b42      	ldr	r3, [pc, #264]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 802227e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022280:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8022284:	687b      	ldr	r3, [r7, #4]
 8022286:	681b      	ldr	r3, [r3, #0]
 8022288:	051b      	lsls	r3, r3, #20
 802228a:	493f      	ldr	r1, [pc, #252]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 802228c:	4313      	orrs	r3, r2
 802228e:	628b      	str	r3, [r1, #40]	@ 0x28
 8022290:	687b      	ldr	r3, [r7, #4]
 8022292:	685b      	ldr	r3, [r3, #4]
 8022294:	3b01      	subs	r3, #1
 8022296:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802229a:	687b      	ldr	r3, [r7, #4]
 802229c:	689b      	ldr	r3, [r3, #8]
 802229e:	3b01      	subs	r3, #1
 80222a0:	025b      	lsls	r3, r3, #9
 80222a2:	b29b      	uxth	r3, r3
 80222a4:	431a      	orrs	r2, r3
 80222a6:	687b      	ldr	r3, [r7, #4]
 80222a8:	68db      	ldr	r3, [r3, #12]
 80222aa:	3b01      	subs	r3, #1
 80222ac:	041b      	lsls	r3, r3, #16
 80222ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80222b2:	431a      	orrs	r2, r3
 80222b4:	687b      	ldr	r3, [r7, #4]
 80222b6:	691b      	ldr	r3, [r3, #16]
 80222b8:	3b01      	subs	r3, #1
 80222ba:	061b      	lsls	r3, r3, #24
 80222bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80222c0:	4931      	ldr	r1, [pc, #196]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 80222c2:	4313      	orrs	r3, r2
 80222c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80222c6:	4b30      	ldr	r3, [pc, #192]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 80222c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80222ce:	687b      	ldr	r3, [r7, #4]
 80222d0:	695b      	ldr	r3, [r3, #20]
 80222d2:	492d      	ldr	r1, [pc, #180]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 80222d4:	4313      	orrs	r3, r2
 80222d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80222d8:	4b2b      	ldr	r3, [pc, #172]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 80222da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80222e0:	687b      	ldr	r3, [r7, #4]
 80222e2:	699b      	ldr	r3, [r3, #24]
 80222e4:	4928      	ldr	r1, [pc, #160]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 80222e6:	4313      	orrs	r3, r2
 80222e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80222ea:	4b27      	ldr	r3, [pc, #156]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 80222ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222ee:	4a26      	ldr	r2, [pc, #152]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 80222f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80222f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80222f6:	4b24      	ldr	r3, [pc, #144]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 80222f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80222fa:	4b24      	ldr	r3, [pc, #144]	@ (802238c <RCCEx_PLL3_Config+0x160>)
 80222fc:	4013      	ands	r3, r2
 80222fe:	687a      	ldr	r2, [r7, #4]
 8022300:	69d2      	ldr	r2, [r2, #28]
 8022302:	00d2      	lsls	r2, r2, #3
 8022304:	4920      	ldr	r1, [pc, #128]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 8022306:	4313      	orrs	r3, r2
 8022308:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 802230a:	4b1f      	ldr	r3, [pc, #124]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 802230c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802230e:	4a1e      	ldr	r2, [pc, #120]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 8022310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8022314:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8022316:	683b      	ldr	r3, [r7, #0]
 8022318:	2b00      	cmp	r3, #0
 802231a:	d106      	bne.n	802232a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 802231c:	4b1a      	ldr	r3, [pc, #104]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 802231e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022320:	4a19      	ldr	r2, [pc, #100]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 8022322:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8022326:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8022328:	e00f      	b.n	802234a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 802232a:	683b      	ldr	r3, [r7, #0]
 802232c:	2b01      	cmp	r3, #1
 802232e:	d106      	bne.n	802233e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8022330:	4b15      	ldr	r3, [pc, #84]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 8022332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022334:	4a14      	ldr	r2, [pc, #80]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 8022336:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802233a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 802233c:	e005      	b.n	802234a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 802233e:	4b12      	ldr	r3, [pc, #72]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 8022340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022342:	4a11      	ldr	r2, [pc, #68]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 8022344:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8022348:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 802234a:	4b0f      	ldr	r3, [pc, #60]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 802234c:	681b      	ldr	r3, [r3, #0]
 802234e:	4a0e      	ldr	r2, [pc, #56]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 8022350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8022354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022356:	f7f9 fbfd 	bl	801bb54 <HAL_GetTick>
 802235a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 802235c:	e008      	b.n	8022370 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 802235e:	f7f9 fbf9 	bl	801bb54 <HAL_GetTick>
 8022362:	4602      	mov	r2, r0
 8022364:	68bb      	ldr	r3, [r7, #8]
 8022366:	1ad3      	subs	r3, r2, r3
 8022368:	2b02      	cmp	r3, #2
 802236a:	d901      	bls.n	8022370 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 802236c:	2303      	movs	r3, #3
 802236e:	e006      	b.n	802237e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8022370:	4b05      	ldr	r3, [pc, #20]	@ (8022388 <RCCEx_PLL3_Config+0x15c>)
 8022372:	681b      	ldr	r3, [r3, #0]
 8022374:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8022378:	2b00      	cmp	r3, #0
 802237a:	d0f0      	beq.n	802235e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 802237c:	7bfb      	ldrb	r3, [r7, #15]
}
 802237e:	4618      	mov	r0, r3
 8022380:	3710      	adds	r7, #16
 8022382:	46bd      	mov	sp, r7
 8022384:	bd80      	pop	{r7, pc}
 8022386:	bf00      	nop
 8022388:	58024400 	.word	0x58024400
 802238c:	ffff0007 	.word	0xffff0007

08022390 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8022390:	b580      	push	{r7, lr}
 8022392:	b08a      	sub	sp, #40	@ 0x28
 8022394:	af00      	add	r7, sp, #0
 8022396:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8022398:	687b      	ldr	r3, [r7, #4]
 802239a:	2b00      	cmp	r3, #0
 802239c:	d101      	bne.n	80223a2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 802239e:	2301      	movs	r3, #1
 80223a0:	e075      	b.n	802248e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80223a2:	687b      	ldr	r3, [r7, #4]
 80223a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80223a8:	b2db      	uxtb	r3, r3
 80223aa:	2b00      	cmp	r3, #0
 80223ac:	d105      	bne.n	80223ba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80223ae:	687b      	ldr	r3, [r7, #4]
 80223b0:	2200      	movs	r2, #0
 80223b2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80223b4:	6878      	ldr	r0, [r7, #4]
 80223b6:	f7ec fbe3 	bl	800eb80 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80223ba:	687b      	ldr	r3, [r7, #4]
 80223bc:	2204      	movs	r2, #4
 80223be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80223c2:	6878      	ldr	r0, [r7, #4]
 80223c4:	f000 f868 	bl	8022498 <HAL_SD_InitCard>
 80223c8:	4603      	mov	r3, r0
 80223ca:	2b00      	cmp	r3, #0
 80223cc:	d001      	beq.n	80223d2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80223ce:	2301      	movs	r3, #1
 80223d0:	e05d      	b.n	802248e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80223d2:	f107 0308 	add.w	r3, r7, #8
 80223d6:	4619      	mov	r1, r3
 80223d8:	6878      	ldr	r0, [r7, #4]
 80223da:	f000 fdaf 	bl	8022f3c <HAL_SD_GetCardStatus>
 80223de:	4603      	mov	r3, r0
 80223e0:	2b00      	cmp	r3, #0
 80223e2:	d001      	beq.n	80223e8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80223e4:	2301      	movs	r3, #1
 80223e6:	e052      	b.n	802248e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80223e8:	7e3b      	ldrb	r3, [r7, #24]
 80223ea:	b2db      	uxtb	r3, r3
 80223ec:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80223ee:	7e7b      	ldrb	r3, [r7, #25]
 80223f0:	b2db      	uxtb	r3, r3
 80223f2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80223f4:	687b      	ldr	r3, [r7, #4]
 80223f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80223f8:	2b01      	cmp	r3, #1
 80223fa:	d10a      	bne.n	8022412 <HAL_SD_Init+0x82>
 80223fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80223fe:	2b00      	cmp	r3, #0
 8022400:	d102      	bne.n	8022408 <HAL_SD_Init+0x78>
 8022402:	6a3b      	ldr	r3, [r7, #32]
 8022404:	2b00      	cmp	r3, #0
 8022406:	d004      	beq.n	8022412 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8022408:	687b      	ldr	r3, [r7, #4]
 802240a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 802240e:	659a      	str	r2, [r3, #88]	@ 0x58
 8022410:	e00b      	b.n	802242a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8022412:	687b      	ldr	r3, [r7, #4]
 8022414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022416:	2b01      	cmp	r3, #1
 8022418:	d104      	bne.n	8022424 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 802241a:	687b      	ldr	r3, [r7, #4]
 802241c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8022420:	659a      	str	r2, [r3, #88]	@ 0x58
 8022422:	e002      	b.n	802242a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8022424:	687b      	ldr	r3, [r7, #4]
 8022426:	2200      	movs	r2, #0
 8022428:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 802242a:	687b      	ldr	r3, [r7, #4]
 802242c:	68db      	ldr	r3, [r3, #12]
 802242e:	4619      	mov	r1, r3
 8022430:	6878      	ldr	r0, [r7, #4]
 8022432:	f000 fe6d 	bl	8023110 <HAL_SD_ConfigWideBusOperation>
 8022436:	4603      	mov	r3, r0
 8022438:	2b00      	cmp	r3, #0
 802243a:	d001      	beq.n	8022440 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 802243c:	2301      	movs	r3, #1
 802243e:	e026      	b.n	802248e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8022440:	f7f9 fb88 	bl	801bb54 <HAL_GetTick>
 8022444:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8022446:	e011      	b.n	802246c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8022448:	f7f9 fb84 	bl	801bb54 <HAL_GetTick>
 802244c:	4602      	mov	r2, r0
 802244e:	69fb      	ldr	r3, [r7, #28]
 8022450:	1ad3      	subs	r3, r2, r3
 8022452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022456:	d109      	bne.n	802246c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8022458:	687b      	ldr	r3, [r7, #4]
 802245a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 802245e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8022460:	687b      	ldr	r3, [r7, #4]
 8022462:	2201      	movs	r2, #1
 8022464:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8022468:	2303      	movs	r3, #3
 802246a:	e010      	b.n	802248e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 802246c:	6878      	ldr	r0, [r7, #4]
 802246e:	f000 ff61 	bl	8023334 <HAL_SD_GetCardState>
 8022472:	4603      	mov	r3, r0
 8022474:	2b04      	cmp	r3, #4
 8022476:	d1e7      	bne.n	8022448 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8022478:	687b      	ldr	r3, [r7, #4]
 802247a:	2200      	movs	r2, #0
 802247c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 802247e:	687b      	ldr	r3, [r7, #4]
 8022480:	2200      	movs	r2, #0
 8022482:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8022484:	687b      	ldr	r3, [r7, #4]
 8022486:	2201      	movs	r2, #1
 8022488:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 802248c:	2300      	movs	r3, #0
}
 802248e:	4618      	mov	r0, r3
 8022490:	3728      	adds	r7, #40	@ 0x28
 8022492:	46bd      	mov	sp, r7
 8022494:	bd80      	pop	{r7, pc}
	...

08022498 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8022498:	b590      	push	{r4, r7, lr}
 802249a:	b08d      	sub	sp, #52	@ 0x34
 802249c:	af02      	add	r7, sp, #8
 802249e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80224a0:	2300      	movs	r3, #0
 80224a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80224a4:	2300      	movs	r3, #0
 80224a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80224a8:	2300      	movs	r3, #0
 80224aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80224ac:	2300      	movs	r3, #0
 80224ae:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80224b0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80224b4:	f04f 0100 	mov.w	r1, #0
 80224b8:	f7fe fc76 	bl	8020da8 <HAL_RCCEx_GetPeriphCLKFreq>
 80224bc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80224be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224c0:	2b00      	cmp	r3, #0
 80224c2:	d109      	bne.n	80224d8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80224c4:	687b      	ldr	r3, [r7, #4]
 80224c6:	2201      	movs	r2, #1
 80224c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80224cc:	687b      	ldr	r3, [r7, #4]
 80224ce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80224d2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80224d4:	2301      	movs	r3, #1
 80224d6:	e070      	b.n	80225ba <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80224d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224da:	0a1b      	lsrs	r3, r3, #8
 80224dc:	4a39      	ldr	r2, [pc, #228]	@ (80225c4 <HAL_SD_InitCard+0x12c>)
 80224de:	fba2 2303 	umull	r2, r3, r2, r3
 80224e2:	091b      	lsrs	r3, r3, #4
 80224e4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80224e6:	687b      	ldr	r3, [r7, #4]
 80224e8:	681c      	ldr	r4, [r3, #0]
 80224ea:	466a      	mov	r2, sp
 80224ec:	f107 0318 	add.w	r3, r7, #24
 80224f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80224f4:	e882 0003 	stmia.w	r2, {r0, r1}
 80224f8:	f107 030c 	add.w	r3, r7, #12
 80224fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80224fe:	4620      	mov	r0, r4
 8022500:	f002 fe5e 	bl	80251c0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8022504:	687b      	ldr	r3, [r7, #4]
 8022506:	681b      	ldr	r3, [r3, #0]
 8022508:	4618      	mov	r0, r3
 802250a:	f002 fea1 	bl	8025250 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 802250e:	69fb      	ldr	r3, [r7, #28]
 8022510:	2b00      	cmp	r3, #0
 8022512:	d005      	beq.n	8022520 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8022514:	69fb      	ldr	r3, [r7, #28]
 8022516:	005b      	lsls	r3, r3, #1
 8022518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802251a:	fbb2 f3f3 	udiv	r3, r2, r3
 802251e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8022520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022522:	2b00      	cmp	r3, #0
 8022524:	d007      	beq.n	8022536 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8022526:	4a28      	ldr	r2, [pc, #160]	@ (80225c8 <HAL_SD_InitCard+0x130>)
 8022528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802252a:	fbb2 f3f3 	udiv	r3, r2, r3
 802252e:	3301      	adds	r3, #1
 8022530:	4618      	mov	r0, r3
 8022532:	f7f9 fb1b 	bl	801bb6c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8022536:	6878      	ldr	r0, [r7, #4]
 8022538:	f000 ffea 	bl	8023510 <SD_PowerON>
 802253c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 802253e:	6a3b      	ldr	r3, [r7, #32]
 8022540:	2b00      	cmp	r3, #0
 8022542:	d00b      	beq.n	802255c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8022544:	687b      	ldr	r3, [r7, #4]
 8022546:	2201      	movs	r2, #1
 8022548:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022550:	6a3b      	ldr	r3, [r7, #32]
 8022552:	431a      	orrs	r2, r3
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8022558:	2301      	movs	r3, #1
 802255a:	e02e      	b.n	80225ba <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 802255c:	6878      	ldr	r0, [r7, #4]
 802255e:	f000 ff09 	bl	8023374 <SD_InitCard>
 8022562:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8022564:	6a3b      	ldr	r3, [r7, #32]
 8022566:	2b00      	cmp	r3, #0
 8022568:	d00b      	beq.n	8022582 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 802256a:	687b      	ldr	r3, [r7, #4]
 802256c:	2201      	movs	r2, #1
 802256e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8022572:	687b      	ldr	r3, [r7, #4]
 8022574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022576:	6a3b      	ldr	r3, [r7, #32]
 8022578:	431a      	orrs	r2, r3
 802257a:	687b      	ldr	r3, [r7, #4]
 802257c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 802257e:	2301      	movs	r3, #1
 8022580:	e01b      	b.n	80225ba <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8022582:	687b      	ldr	r3, [r7, #4]
 8022584:	681b      	ldr	r3, [r3, #0]
 8022586:	f44f 7100 	mov.w	r1, #512	@ 0x200
 802258a:	4618      	mov	r0, r3
 802258c:	f002 fef6 	bl	802537c <SDMMC_CmdBlockLength>
 8022590:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8022592:	6a3b      	ldr	r3, [r7, #32]
 8022594:	2b00      	cmp	r3, #0
 8022596:	d00f      	beq.n	80225b8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022598:	687b      	ldr	r3, [r7, #4]
 802259a:	681b      	ldr	r3, [r3, #0]
 802259c:	4a0b      	ldr	r2, [pc, #44]	@ (80225cc <HAL_SD_InitCard+0x134>)
 802259e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80225a0:	687b      	ldr	r3, [r7, #4]
 80225a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80225a4:	6a3b      	ldr	r3, [r7, #32]
 80225a6:	431a      	orrs	r2, r3
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80225ac:	687b      	ldr	r3, [r7, #4]
 80225ae:	2201      	movs	r2, #1
 80225b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80225b4:	2301      	movs	r3, #1
 80225b6:	e000      	b.n	80225ba <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80225b8:	2300      	movs	r3, #0
}
 80225ba:	4618      	mov	r0, r3
 80225bc:	372c      	adds	r7, #44	@ 0x2c
 80225be:	46bd      	mov	sp, r7
 80225c0:	bd90      	pop	{r4, r7, pc}
 80225c2:	bf00      	nop
 80225c4:	014f8b59 	.word	0x014f8b59
 80225c8:	00012110 	.word	0x00012110
 80225cc:	1fe00fff 	.word	0x1fe00fff

080225d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80225d0:	b580      	push	{r7, lr}
 80225d2:	b08c      	sub	sp, #48	@ 0x30
 80225d4:	af00      	add	r7, sp, #0
 80225d6:	60f8      	str	r0, [r7, #12]
 80225d8:	60b9      	str	r1, [r7, #8]
 80225da:	607a      	str	r2, [r7, #4]
 80225dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80225de:	687b      	ldr	r3, [r7, #4]
 80225e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80225e2:	68bb      	ldr	r3, [r7, #8]
 80225e4:	2b00      	cmp	r3, #0
 80225e6:	d107      	bne.n	80225f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80225e8:	68fb      	ldr	r3, [r7, #12]
 80225ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80225ec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80225f0:	68fb      	ldr	r3, [r7, #12]
 80225f2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80225f4:	2301      	movs	r3, #1
 80225f6:	e08d      	b.n	8022714 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80225f8:	68fb      	ldr	r3, [r7, #12]
 80225fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80225fe:	b2db      	uxtb	r3, r3
 8022600:	2b01      	cmp	r3, #1
 8022602:	f040 8086 	bne.w	8022712 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8022606:	68fb      	ldr	r3, [r7, #12]
 8022608:	2200      	movs	r2, #0
 802260a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 802260c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802260e:	683b      	ldr	r3, [r7, #0]
 8022610:	441a      	add	r2, r3
 8022612:	68fb      	ldr	r3, [r7, #12]
 8022614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022616:	429a      	cmp	r2, r3
 8022618:	d907      	bls.n	802262a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 802261a:	68fb      	ldr	r3, [r7, #12]
 802261c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802261e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8022622:	68fb      	ldr	r3, [r7, #12]
 8022624:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8022626:	2301      	movs	r3, #1
 8022628:	e074      	b.n	8022714 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 802262a:	68fb      	ldr	r3, [r7, #12]
 802262c:	2203      	movs	r2, #3
 802262e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8022632:	68fb      	ldr	r3, [r7, #12]
 8022634:	681b      	ldr	r3, [r3, #0]
 8022636:	2200      	movs	r2, #0
 8022638:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 802263a:	68fb      	ldr	r3, [r7, #12]
 802263c:	68ba      	ldr	r2, [r7, #8]
 802263e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8022640:	683b      	ldr	r3, [r7, #0]
 8022642:	025a      	lsls	r2, r3, #9
 8022644:	68fb      	ldr	r3, [r7, #12]
 8022646:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8022648:	68fb      	ldr	r3, [r7, #12]
 802264a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802264c:	2b01      	cmp	r3, #1
 802264e:	d002      	beq.n	8022656 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8022650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022652:	025b      	lsls	r3, r3, #9
 8022654:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8022656:	f04f 33ff 	mov.w	r3, #4294967295
 802265a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 802265c:	683b      	ldr	r3, [r7, #0]
 802265e:	025b      	lsls	r3, r3, #9
 8022660:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8022662:	2390      	movs	r3, #144	@ 0x90
 8022664:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8022666:	2302      	movs	r3, #2
 8022668:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 802266a:	2300      	movs	r3, #0
 802266c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 802266e:	2300      	movs	r3, #0
 8022670:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8022672:	68fb      	ldr	r3, [r7, #12]
 8022674:	681b      	ldr	r3, [r3, #0]
 8022676:	f107 0210 	add.w	r2, r7, #16
 802267a:	4611      	mov	r1, r2
 802267c:	4618      	mov	r0, r3
 802267e:	f002 fe51 	bl	8025324 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8022682:	68fb      	ldr	r3, [r7, #12]
 8022684:	681b      	ldr	r3, [r3, #0]
 8022686:	68da      	ldr	r2, [r3, #12]
 8022688:	68fb      	ldr	r3, [r7, #12]
 802268a:	681b      	ldr	r3, [r3, #0]
 802268c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8022690:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8022692:	68fb      	ldr	r3, [r7, #12]
 8022694:	681b      	ldr	r3, [r3, #0]
 8022696:	68ba      	ldr	r2, [r7, #8]
 8022698:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 802269a:	68fb      	ldr	r3, [r7, #12]
 802269c:	681b      	ldr	r3, [r3, #0]
 802269e:	2201      	movs	r2, #1
 80226a0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80226a2:	683b      	ldr	r3, [r7, #0]
 80226a4:	2b01      	cmp	r3, #1
 80226a6:	d90a      	bls.n	80226be <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80226a8:	68fb      	ldr	r3, [r7, #12]
 80226aa:	2282      	movs	r2, #130	@ 0x82
 80226ac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80226ae:	68fb      	ldr	r3, [r7, #12]
 80226b0:	681b      	ldr	r3, [r3, #0]
 80226b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80226b4:	4618      	mov	r0, r3
 80226b6:	f002 fea7 	bl	8025408 <SDMMC_CmdReadMultiBlock>
 80226ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80226bc:	e009      	b.n	80226d2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80226be:	68fb      	ldr	r3, [r7, #12]
 80226c0:	2281      	movs	r2, #129	@ 0x81
 80226c2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80226c4:	68fb      	ldr	r3, [r7, #12]
 80226c6:	681b      	ldr	r3, [r3, #0]
 80226c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80226ca:	4618      	mov	r0, r3
 80226cc:	f002 fe79 	bl	80253c2 <SDMMC_CmdReadSingleBlock>
 80226d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80226d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80226d4:	2b00      	cmp	r3, #0
 80226d6:	d012      	beq.n	80226fe <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80226d8:	68fb      	ldr	r3, [r7, #12]
 80226da:	681b      	ldr	r3, [r3, #0]
 80226dc:	4a0f      	ldr	r2, [pc, #60]	@ (802271c <HAL_SD_ReadBlocks_DMA+0x14c>)
 80226de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80226e0:	68fb      	ldr	r3, [r7, #12]
 80226e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80226e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80226e6:	431a      	orrs	r2, r3
 80226e8:	68fb      	ldr	r3, [r7, #12]
 80226ea:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80226ec:	68fb      	ldr	r3, [r7, #12]
 80226ee:	2201      	movs	r2, #1
 80226f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80226f4:	68fb      	ldr	r3, [r7, #12]
 80226f6:	2200      	movs	r2, #0
 80226f8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80226fa:	2301      	movs	r3, #1
 80226fc:	e00a      	b.n	8022714 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80226fe:	68fb      	ldr	r3, [r7, #12]
 8022700:	681b      	ldr	r3, [r3, #0]
 8022702:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022704:	68fb      	ldr	r3, [r7, #12]
 8022706:	681b      	ldr	r3, [r3, #0]
 8022708:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 802270c:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 802270e:	2300      	movs	r3, #0
 8022710:	e000      	b.n	8022714 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8022712:	2302      	movs	r3, #2
  }
}
 8022714:	4618      	mov	r0, r3
 8022716:	3730      	adds	r7, #48	@ 0x30
 8022718:	46bd      	mov	sp, r7
 802271a:	bd80      	pop	{r7, pc}
 802271c:	1fe00fff 	.word	0x1fe00fff

08022720 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8022720:	b580      	push	{r7, lr}
 8022722:	b08c      	sub	sp, #48	@ 0x30
 8022724:	af00      	add	r7, sp, #0
 8022726:	60f8      	str	r0, [r7, #12]
 8022728:	60b9      	str	r1, [r7, #8]
 802272a:	607a      	str	r2, [r7, #4]
 802272c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 802272e:	687b      	ldr	r3, [r7, #4]
 8022730:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8022732:	68bb      	ldr	r3, [r7, #8]
 8022734:	2b00      	cmp	r3, #0
 8022736:	d107      	bne.n	8022748 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8022738:	68fb      	ldr	r3, [r7, #12]
 802273a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802273c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8022740:	68fb      	ldr	r3, [r7, #12]
 8022742:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8022744:	2301      	movs	r3, #1
 8022746:	e08d      	b.n	8022864 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8022748:	68fb      	ldr	r3, [r7, #12]
 802274a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 802274e:	b2db      	uxtb	r3, r3
 8022750:	2b01      	cmp	r3, #1
 8022752:	f040 8086 	bne.w	8022862 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8022756:	68fb      	ldr	r3, [r7, #12]
 8022758:	2200      	movs	r2, #0
 802275a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 802275c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802275e:	683b      	ldr	r3, [r7, #0]
 8022760:	441a      	add	r2, r3
 8022762:	68fb      	ldr	r3, [r7, #12]
 8022764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022766:	429a      	cmp	r2, r3
 8022768:	d907      	bls.n	802277a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 802276a:	68fb      	ldr	r3, [r7, #12]
 802276c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802276e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8022772:	68fb      	ldr	r3, [r7, #12]
 8022774:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8022776:	2301      	movs	r3, #1
 8022778:	e074      	b.n	8022864 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 802277a:	68fb      	ldr	r3, [r7, #12]
 802277c:	2203      	movs	r2, #3
 802277e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8022782:	68fb      	ldr	r3, [r7, #12]
 8022784:	681b      	ldr	r3, [r3, #0]
 8022786:	2200      	movs	r2, #0
 8022788:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 802278a:	68fb      	ldr	r3, [r7, #12]
 802278c:	68ba      	ldr	r2, [r7, #8]
 802278e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8022790:	683b      	ldr	r3, [r7, #0]
 8022792:	025a      	lsls	r2, r3, #9
 8022794:	68fb      	ldr	r3, [r7, #12]
 8022796:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8022798:	68fb      	ldr	r3, [r7, #12]
 802279a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802279c:	2b01      	cmp	r3, #1
 802279e:	d002      	beq.n	80227a6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80227a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80227a2:	025b      	lsls	r3, r3, #9
 80227a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80227a6:	f04f 33ff 	mov.w	r3, #4294967295
 80227aa:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80227ac:	683b      	ldr	r3, [r7, #0]
 80227ae:	025b      	lsls	r3, r3, #9
 80227b0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80227b2:	2390      	movs	r3, #144	@ 0x90
 80227b4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80227b6:	2300      	movs	r3, #0
 80227b8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80227ba:	2300      	movs	r3, #0
 80227bc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80227be:	2300      	movs	r3, #0
 80227c0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80227c2:	68fb      	ldr	r3, [r7, #12]
 80227c4:	681b      	ldr	r3, [r3, #0]
 80227c6:	f107 0210 	add.w	r2, r7, #16
 80227ca:	4611      	mov	r1, r2
 80227cc:	4618      	mov	r0, r3
 80227ce:	f002 fda9 	bl	8025324 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80227d2:	68fb      	ldr	r3, [r7, #12]
 80227d4:	681b      	ldr	r3, [r3, #0]
 80227d6:	68da      	ldr	r2, [r3, #12]
 80227d8:	68fb      	ldr	r3, [r7, #12]
 80227da:	681b      	ldr	r3, [r3, #0]
 80227dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80227e0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80227e2:	68fb      	ldr	r3, [r7, #12]
 80227e4:	681b      	ldr	r3, [r3, #0]
 80227e6:	68ba      	ldr	r2, [r7, #8]
 80227e8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80227ea:	68fb      	ldr	r3, [r7, #12]
 80227ec:	681b      	ldr	r3, [r3, #0]
 80227ee:	2201      	movs	r2, #1
 80227f0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80227f2:	683b      	ldr	r3, [r7, #0]
 80227f4:	2b01      	cmp	r3, #1
 80227f6:	d90a      	bls.n	802280e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80227f8:	68fb      	ldr	r3, [r7, #12]
 80227fa:	22a0      	movs	r2, #160	@ 0xa0
 80227fc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80227fe:	68fb      	ldr	r3, [r7, #12]
 8022800:	681b      	ldr	r3, [r3, #0]
 8022802:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022804:	4618      	mov	r0, r3
 8022806:	f002 fe45 	bl	8025494 <SDMMC_CmdWriteMultiBlock>
 802280a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 802280c:	e009      	b.n	8022822 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 802280e:	68fb      	ldr	r3, [r7, #12]
 8022810:	2290      	movs	r2, #144	@ 0x90
 8022812:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8022814:	68fb      	ldr	r3, [r7, #12]
 8022816:	681b      	ldr	r3, [r3, #0]
 8022818:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802281a:	4618      	mov	r0, r3
 802281c:	f002 fe17 	bl	802544e <SDMMC_CmdWriteSingleBlock>
 8022820:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8022822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022824:	2b00      	cmp	r3, #0
 8022826:	d012      	beq.n	802284e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022828:	68fb      	ldr	r3, [r7, #12]
 802282a:	681b      	ldr	r3, [r3, #0]
 802282c:	4a0f      	ldr	r2, [pc, #60]	@ (802286c <HAL_SD_WriteBlocks_DMA+0x14c>)
 802282e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8022830:	68fb      	ldr	r3, [r7, #12]
 8022832:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022836:	431a      	orrs	r2, r3
 8022838:	68fb      	ldr	r3, [r7, #12]
 802283a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 802283c:	68fb      	ldr	r3, [r7, #12]
 802283e:	2201      	movs	r2, #1
 8022840:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8022844:	68fb      	ldr	r3, [r7, #12]
 8022846:	2200      	movs	r2, #0
 8022848:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 802284a:	2301      	movs	r3, #1
 802284c:	e00a      	b.n	8022864 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 802284e:	68fb      	ldr	r3, [r7, #12]
 8022850:	681b      	ldr	r3, [r3, #0]
 8022852:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022854:	68fb      	ldr	r3, [r7, #12]
 8022856:	681b      	ldr	r3, [r3, #0]
 8022858:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 802285c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 802285e:	2300      	movs	r3, #0
 8022860:	e000      	b.n	8022864 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8022862:	2302      	movs	r3, #2
  }
}
 8022864:	4618      	mov	r0, r3
 8022866:	3730      	adds	r7, #48	@ 0x30
 8022868:	46bd      	mov	sp, r7
 802286a:	bd80      	pop	{r7, pc}
 802286c:	1fe00fff 	.word	0x1fe00fff

08022870 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8022870:	b580      	push	{r7, lr}
 8022872:	b084      	sub	sp, #16
 8022874:	af00      	add	r7, sp, #0
 8022876:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8022878:	687b      	ldr	r3, [r7, #4]
 802287a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802287c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 802287e:	687b      	ldr	r3, [r7, #4]
 8022880:	681b      	ldr	r3, [r3, #0]
 8022882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8022888:	2b00      	cmp	r3, #0
 802288a:	d008      	beq.n	802289e <HAL_SD_IRQHandler+0x2e>
 802288c:	68fb      	ldr	r3, [r7, #12]
 802288e:	f003 0308 	and.w	r3, r3, #8
 8022892:	2b00      	cmp	r3, #0
 8022894:	d003      	beq.n	802289e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8022896:	6878      	ldr	r0, [r7, #4]
 8022898:	f001 f926 	bl	8023ae8 <SD_Read_IT>
 802289c:	e19a      	b.n	8022bd4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 802289e:	687b      	ldr	r3, [r7, #4]
 80228a0:	681b      	ldr	r3, [r3, #0]
 80228a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80228a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80228a8:	2b00      	cmp	r3, #0
 80228aa:	f000 80ac 	beq.w	8022a06 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80228ae:	687b      	ldr	r3, [r7, #4]
 80228b0:	681b      	ldr	r3, [r3, #0]
 80228b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80228b6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	681b      	ldr	r3, [r3, #0]
 80228bc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80228be:	687b      	ldr	r3, [r7, #4]
 80228c0:	681a      	ldr	r2, [r3, #0]
 80228c2:	4b59      	ldr	r3, [pc, #356]	@ (8022a28 <HAL_SD_IRQHandler+0x1b8>)
 80228c4:	400b      	ands	r3, r1
 80228c6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80228c8:	687b      	ldr	r3, [r7, #4]
 80228ca:	681b      	ldr	r3, [r3, #0]
 80228cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80228ce:	687b      	ldr	r3, [r7, #4]
 80228d0:	681b      	ldr	r3, [r3, #0]
 80228d2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80228d6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80228d8:	687b      	ldr	r3, [r7, #4]
 80228da:	681b      	ldr	r3, [r3, #0]
 80228dc:	68da      	ldr	r2, [r3, #12]
 80228de:	687b      	ldr	r3, [r7, #4]
 80228e0:	681b      	ldr	r3, [r3, #0]
 80228e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80228e6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80228e8:	68fb      	ldr	r3, [r7, #12]
 80228ea:	f003 0308 	and.w	r3, r3, #8
 80228ee:	2b00      	cmp	r3, #0
 80228f0:	d038      	beq.n	8022964 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80228f2:	68fb      	ldr	r3, [r7, #12]
 80228f4:	f003 0302 	and.w	r3, r3, #2
 80228f8:	2b00      	cmp	r3, #0
 80228fa:	d104      	bne.n	8022906 <HAL_SD_IRQHandler+0x96>
 80228fc:	68fb      	ldr	r3, [r7, #12]
 80228fe:	f003 0320 	and.w	r3, r3, #32
 8022902:	2b00      	cmp	r3, #0
 8022904:	d011      	beq.n	802292a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8022906:	687b      	ldr	r3, [r7, #4]
 8022908:	681b      	ldr	r3, [r3, #0]
 802290a:	4618      	mov	r0, r3
 802290c:	f002 fde6 	bl	80254dc <SDMMC_CmdStopTransfer>
 8022910:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8022912:	68bb      	ldr	r3, [r7, #8]
 8022914:	2b00      	cmp	r3, #0
 8022916:	d008      	beq.n	802292a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8022918:	687b      	ldr	r3, [r7, #4]
 802291a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802291c:	68bb      	ldr	r3, [r7, #8]
 802291e:	431a      	orrs	r2, r3
 8022920:	687b      	ldr	r3, [r7, #4]
 8022922:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8022924:	6878      	ldr	r0, [r7, #4]
 8022926:	f000 f95b 	bl	8022be0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 802292a:	687b      	ldr	r3, [r7, #4]
 802292c:	681b      	ldr	r3, [r3, #0]
 802292e:	4a3f      	ldr	r2, [pc, #252]	@ (8022a2c <HAL_SD_IRQHandler+0x1bc>)
 8022930:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8022932:	687b      	ldr	r3, [r7, #4]
 8022934:	2201      	movs	r2, #1
 8022936:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 802293a:	687b      	ldr	r3, [r7, #4]
 802293c:	2200      	movs	r2, #0
 802293e:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8022940:	68fb      	ldr	r3, [r7, #12]
 8022942:	f003 0301 	and.w	r3, r3, #1
 8022946:	2b00      	cmp	r3, #0
 8022948:	d104      	bne.n	8022954 <HAL_SD_IRQHandler+0xe4>
 802294a:	68fb      	ldr	r3, [r7, #12]
 802294c:	f003 0302 	and.w	r3, r3, #2
 8022950:	2b00      	cmp	r3, #0
 8022952:	d003      	beq.n	802295c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8022954:	6878      	ldr	r0, [r7, #4]
 8022956:	f003 fa73 	bl	8025e40 <HAL_SD_RxCpltCallback>
 802295a:	e13b      	b.n	8022bd4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 802295c:	6878      	ldr	r0, [r7, #4]
 802295e:	f003 fa65 	bl	8025e2c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8022962:	e137      	b.n	8022bd4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8022964:	68fb      	ldr	r3, [r7, #12]
 8022966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802296a:	2b00      	cmp	r3, #0
 802296c:	f000 8132 	beq.w	8022bd4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	681b      	ldr	r3, [r3, #0]
 8022974:	2200      	movs	r2, #0
 8022976:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8022978:	687b      	ldr	r3, [r7, #4]
 802297a:	681b      	ldr	r3, [r3, #0]
 802297c:	2200      	movs	r2, #0
 802297e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	681b      	ldr	r3, [r3, #0]
 8022984:	2200      	movs	r2, #0
 8022986:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8022988:	68fb      	ldr	r3, [r7, #12]
 802298a:	f003 0302 	and.w	r3, r3, #2
 802298e:	2b00      	cmp	r3, #0
 8022990:	d104      	bne.n	802299c <HAL_SD_IRQHandler+0x12c>
 8022992:	68fb      	ldr	r3, [r7, #12]
 8022994:	f003 0320 	and.w	r3, r3, #32
 8022998:	2b00      	cmp	r3, #0
 802299a:	d011      	beq.n	80229c0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 802299c:	687b      	ldr	r3, [r7, #4]
 802299e:	681b      	ldr	r3, [r3, #0]
 80229a0:	4618      	mov	r0, r3
 80229a2:	f002 fd9b 	bl	80254dc <SDMMC_CmdStopTransfer>
 80229a6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80229a8:	68bb      	ldr	r3, [r7, #8]
 80229aa:	2b00      	cmp	r3, #0
 80229ac:	d008      	beq.n	80229c0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80229ae:	687b      	ldr	r3, [r7, #4]
 80229b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80229b2:	68bb      	ldr	r3, [r7, #8]
 80229b4:	431a      	orrs	r2, r3
 80229b6:	687b      	ldr	r3, [r7, #4]
 80229b8:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 80229ba:	6878      	ldr	r0, [r7, #4]
 80229bc:	f000 f910 	bl	8022be0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80229c0:	687b      	ldr	r3, [r7, #4]
 80229c2:	2201      	movs	r2, #1
 80229c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80229c8:	687b      	ldr	r3, [r7, #4]
 80229ca:	2200      	movs	r2, #0
 80229cc:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80229ce:	68fb      	ldr	r3, [r7, #12]
 80229d0:	f003 0310 	and.w	r3, r3, #16
 80229d4:	2b00      	cmp	r3, #0
 80229d6:	d104      	bne.n	80229e2 <HAL_SD_IRQHandler+0x172>
 80229d8:	68fb      	ldr	r3, [r7, #12]
 80229da:	f003 0320 	and.w	r3, r3, #32
 80229de:	2b00      	cmp	r3, #0
 80229e0:	d002      	beq.n	80229e8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80229e2:	6878      	ldr	r0, [r7, #4]
 80229e4:	f003 fa22 	bl	8025e2c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80229e8:	68fb      	ldr	r3, [r7, #12]
 80229ea:	f003 0301 	and.w	r3, r3, #1
 80229ee:	2b00      	cmp	r3, #0
 80229f0:	d105      	bne.n	80229fe <HAL_SD_IRQHandler+0x18e>
 80229f2:	68fb      	ldr	r3, [r7, #12]
 80229f4:	f003 0302 	and.w	r3, r3, #2
 80229f8:	2b00      	cmp	r3, #0
 80229fa:	f000 80eb 	beq.w	8022bd4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80229fe:	6878      	ldr	r0, [r7, #4]
 8022a00:	f003 fa1e 	bl	8025e40 <HAL_SD_RxCpltCallback>
}
 8022a04:	e0e6      	b.n	8022bd4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8022a06:	687b      	ldr	r3, [r7, #4]
 8022a08:	681b      	ldr	r3, [r3, #0]
 8022a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8022a10:	2b00      	cmp	r3, #0
 8022a12:	d00d      	beq.n	8022a30 <HAL_SD_IRQHandler+0x1c0>
 8022a14:	68fb      	ldr	r3, [r7, #12]
 8022a16:	f003 0308 	and.w	r3, r3, #8
 8022a1a:	2b00      	cmp	r3, #0
 8022a1c:	d008      	beq.n	8022a30 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8022a1e:	6878      	ldr	r0, [r7, #4]
 8022a20:	f001 f8a8 	bl	8023b74 <SD_Write_IT>
 8022a24:	e0d6      	b.n	8022bd4 <HAL_SD_IRQHandler+0x364>
 8022a26:	bf00      	nop
 8022a28:	ffff3ec5 	.word	0xffff3ec5
 8022a2c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8022a30:	687b      	ldr	r3, [r7, #4]
 8022a32:	681b      	ldr	r3, [r3, #0]
 8022a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a36:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8022a3a:	2b00      	cmp	r3, #0
 8022a3c:	f000 809d 	beq.w	8022b7a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8022a40:	687b      	ldr	r3, [r7, #4]
 8022a42:	681b      	ldr	r3, [r3, #0]
 8022a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a46:	f003 0302 	and.w	r3, r3, #2
 8022a4a:	2b00      	cmp	r3, #0
 8022a4c:	d005      	beq.n	8022a5a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8022a4e:	687b      	ldr	r3, [r7, #4]
 8022a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a52:	f043 0202 	orr.w	r2, r3, #2
 8022a56:	687b      	ldr	r3, [r7, #4]
 8022a58:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8022a5a:	687b      	ldr	r3, [r7, #4]
 8022a5c:	681b      	ldr	r3, [r3, #0]
 8022a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a60:	f003 0308 	and.w	r3, r3, #8
 8022a64:	2b00      	cmp	r3, #0
 8022a66:	d005      	beq.n	8022a74 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8022a68:	687b      	ldr	r3, [r7, #4]
 8022a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a6c:	f043 0208 	orr.w	r2, r3, #8
 8022a70:	687b      	ldr	r3, [r7, #4]
 8022a72:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8022a74:	687b      	ldr	r3, [r7, #4]
 8022a76:	681b      	ldr	r3, [r3, #0]
 8022a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a7a:	f003 0320 	and.w	r3, r3, #32
 8022a7e:	2b00      	cmp	r3, #0
 8022a80:	d005      	beq.n	8022a8e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8022a82:	687b      	ldr	r3, [r7, #4]
 8022a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a86:	f043 0220 	orr.w	r2, r3, #32
 8022a8a:	687b      	ldr	r3, [r7, #4]
 8022a8c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8022a8e:	687b      	ldr	r3, [r7, #4]
 8022a90:	681b      	ldr	r3, [r3, #0]
 8022a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022a94:	f003 0310 	and.w	r3, r3, #16
 8022a98:	2b00      	cmp	r3, #0
 8022a9a:	d005      	beq.n	8022aa8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8022a9c:	687b      	ldr	r3, [r7, #4]
 8022a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022aa0:	f043 0210 	orr.w	r2, r3, #16
 8022aa4:	687b      	ldr	r3, [r7, #4]
 8022aa6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8022aa8:	687b      	ldr	r3, [r7, #4]
 8022aaa:	681b      	ldr	r3, [r3, #0]
 8022aac:	4a4b      	ldr	r2, [pc, #300]	@ (8022bdc <HAL_SD_IRQHandler+0x36c>)
 8022aae:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8022ab0:	687b      	ldr	r3, [r7, #4]
 8022ab2:	681b      	ldr	r3, [r3, #0]
 8022ab4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022ab6:	687b      	ldr	r3, [r7, #4]
 8022ab8:	681b      	ldr	r3, [r3, #0]
 8022aba:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8022abe:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8022ac0:	687b      	ldr	r3, [r7, #4]
 8022ac2:	681b      	ldr	r3, [r3, #0]
 8022ac4:	68da      	ldr	r2, [r3, #12]
 8022ac6:	687b      	ldr	r3, [r7, #4]
 8022ac8:	681b      	ldr	r3, [r3, #0]
 8022aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8022ace:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8022ad0:	687b      	ldr	r3, [r7, #4]
 8022ad2:	681b      	ldr	r3, [r3, #0]
 8022ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022ad6:	687b      	ldr	r3, [r7, #4]
 8022ad8:	681b      	ldr	r3, [r3, #0]
 8022ada:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8022ade:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8022ae0:	687b      	ldr	r3, [r7, #4]
 8022ae2:	681b      	ldr	r3, [r3, #0]
 8022ae4:	68da      	ldr	r2, [r3, #12]
 8022ae6:	687b      	ldr	r3, [r7, #4]
 8022ae8:	681b      	ldr	r3, [r3, #0]
 8022aea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8022aee:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8022af0:	687b      	ldr	r3, [r7, #4]
 8022af2:	681b      	ldr	r3, [r3, #0]
 8022af4:	4618      	mov	r0, r3
 8022af6:	f002 fcf1 	bl	80254dc <SDMMC_CmdStopTransfer>
 8022afa:	4602      	mov	r2, r0
 8022afc:	687b      	ldr	r3, [r7, #4]
 8022afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b00:	431a      	orrs	r2, r3
 8022b02:	687b      	ldr	r3, [r7, #4]
 8022b04:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8022b06:	687b      	ldr	r3, [r7, #4]
 8022b08:	681b      	ldr	r3, [r3, #0]
 8022b0a:	68da      	ldr	r2, [r3, #12]
 8022b0c:	687b      	ldr	r3, [r7, #4]
 8022b0e:	681b      	ldr	r3, [r3, #0]
 8022b10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8022b14:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8022b16:	687b      	ldr	r3, [r7, #4]
 8022b18:	681b      	ldr	r3, [r3, #0]
 8022b1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8022b1e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8022b20:	68fb      	ldr	r3, [r7, #12]
 8022b22:	f003 0308 	and.w	r3, r3, #8
 8022b26:	2b00      	cmp	r3, #0
 8022b28:	d00a      	beq.n	8022b40 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8022b2a:	687b      	ldr	r3, [r7, #4]
 8022b2c:	2201      	movs	r2, #1
 8022b2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8022b32:	687b      	ldr	r3, [r7, #4]
 8022b34:	2200      	movs	r2, #0
 8022b36:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8022b38:	6878      	ldr	r0, [r7, #4]
 8022b3a:	f000 f851 	bl	8022be0 <HAL_SD_ErrorCallback>
}
 8022b3e:	e049      	b.n	8022bd4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8022b40:	68fb      	ldr	r3, [r7, #12]
 8022b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022b46:	2b00      	cmp	r3, #0
 8022b48:	d044      	beq.n	8022bd4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8022b4a:	687b      	ldr	r3, [r7, #4]
 8022b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b4e:	2b00      	cmp	r3, #0
 8022b50:	d040      	beq.n	8022bd4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8022b52:	687b      	ldr	r3, [r7, #4]
 8022b54:	681b      	ldr	r3, [r3, #0]
 8022b56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022b58:	687b      	ldr	r3, [r7, #4]
 8022b5a:	681b      	ldr	r3, [r3, #0]
 8022b5c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8022b60:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8022b62:	687b      	ldr	r3, [r7, #4]
 8022b64:	681b      	ldr	r3, [r3, #0]
 8022b66:	2200      	movs	r2, #0
 8022b68:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8022b6a:	687b      	ldr	r3, [r7, #4]
 8022b6c:	2201      	movs	r2, #1
 8022b6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8022b72:	6878      	ldr	r0, [r7, #4]
 8022b74:	f000 f834 	bl	8022be0 <HAL_SD_ErrorCallback>
}
 8022b78:	e02c      	b.n	8022bd4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8022b7a:	687b      	ldr	r3, [r7, #4]
 8022b7c:	681b      	ldr	r3, [r3, #0]
 8022b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8022b84:	2b00      	cmp	r3, #0
 8022b86:	d025      	beq.n	8022bd4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8022b88:	687b      	ldr	r3, [r7, #4]
 8022b8a:	681b      	ldr	r3, [r3, #0]
 8022b8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8022b90:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8022b92:	687b      	ldr	r3, [r7, #4]
 8022b94:	681b      	ldr	r3, [r3, #0]
 8022b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022b98:	f003 0304 	and.w	r3, r3, #4
 8022b9c:	2b00      	cmp	r3, #0
 8022b9e:	d10c      	bne.n	8022bba <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8022ba0:	68fb      	ldr	r3, [r7, #12]
 8022ba2:	f003 0320 	and.w	r3, r3, #32
 8022ba6:	2b00      	cmp	r3, #0
 8022ba8:	d003      	beq.n	8022bb2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8022baa:	6878      	ldr	r0, [r7, #4]
 8022bac:	f001 f84a 	bl	8023c44 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8022bb0:	e010      	b.n	8022bd4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8022bb2:	6878      	ldr	r0, [r7, #4]
 8022bb4:	f001 f832 	bl	8023c1c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8022bb8:	e00c      	b.n	8022bd4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8022bba:	68fb      	ldr	r3, [r7, #12]
 8022bbc:	f003 0320 	and.w	r3, r3, #32
 8022bc0:	2b00      	cmp	r3, #0
 8022bc2:	d003      	beq.n	8022bcc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8022bc4:	6878      	ldr	r0, [r7, #4]
 8022bc6:	f001 f833 	bl	8023c30 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8022bca:	e003      	b.n	8022bd4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8022bcc:	6878      	ldr	r0, [r7, #4]
 8022bce:	f001 f81b 	bl	8023c08 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8022bd2:	e7ff      	b.n	8022bd4 <HAL_SD_IRQHandler+0x364>
 8022bd4:	bf00      	nop
 8022bd6:	3710      	adds	r7, #16
 8022bd8:	46bd      	mov	sp, r7
 8022bda:	bd80      	pop	{r7, pc}
 8022bdc:	18000f3a 	.word	0x18000f3a

08022be0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8022be0:	b480      	push	{r7}
 8022be2:	b083      	sub	sp, #12
 8022be4:	af00      	add	r7, sp, #0
 8022be6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8022be8:	bf00      	nop
 8022bea:	370c      	adds	r7, #12
 8022bec:	46bd      	mov	sp, r7
 8022bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bf2:	4770      	bx	lr

08022bf4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8022bf4:	b480      	push	{r7}
 8022bf6:	b083      	sub	sp, #12
 8022bf8:	af00      	add	r7, sp, #0
 8022bfa:	6078      	str	r0, [r7, #4]
 8022bfc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8022bfe:	687b      	ldr	r3, [r7, #4]
 8022c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022c02:	0f9b      	lsrs	r3, r3, #30
 8022c04:	b2da      	uxtb	r2, r3
 8022c06:	683b      	ldr	r3, [r7, #0]
 8022c08:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8022c0a:	687b      	ldr	r3, [r7, #4]
 8022c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022c0e:	0e9b      	lsrs	r3, r3, #26
 8022c10:	b2db      	uxtb	r3, r3
 8022c12:	f003 030f 	and.w	r3, r3, #15
 8022c16:	b2da      	uxtb	r2, r3
 8022c18:	683b      	ldr	r3, [r7, #0]
 8022c1a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8022c1c:	687b      	ldr	r3, [r7, #4]
 8022c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022c20:	0e1b      	lsrs	r3, r3, #24
 8022c22:	b2db      	uxtb	r3, r3
 8022c24:	f003 0303 	and.w	r3, r3, #3
 8022c28:	b2da      	uxtb	r2, r3
 8022c2a:	683b      	ldr	r3, [r7, #0]
 8022c2c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8022c2e:	687b      	ldr	r3, [r7, #4]
 8022c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022c32:	0c1b      	lsrs	r3, r3, #16
 8022c34:	b2da      	uxtb	r2, r3
 8022c36:	683b      	ldr	r3, [r7, #0]
 8022c38:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8022c3a:	687b      	ldr	r3, [r7, #4]
 8022c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022c3e:	0a1b      	lsrs	r3, r3, #8
 8022c40:	b2da      	uxtb	r2, r3
 8022c42:	683b      	ldr	r3, [r7, #0]
 8022c44:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8022c46:	687b      	ldr	r3, [r7, #4]
 8022c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022c4a:	b2da      	uxtb	r2, r3
 8022c4c:	683b      	ldr	r3, [r7, #0]
 8022c4e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8022c50:	687b      	ldr	r3, [r7, #4]
 8022c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022c54:	0d1b      	lsrs	r3, r3, #20
 8022c56:	b29a      	uxth	r2, r3
 8022c58:	683b      	ldr	r3, [r7, #0]
 8022c5a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8022c5c:	687b      	ldr	r3, [r7, #4]
 8022c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022c60:	0c1b      	lsrs	r3, r3, #16
 8022c62:	b2db      	uxtb	r3, r3
 8022c64:	f003 030f 	and.w	r3, r3, #15
 8022c68:	b2da      	uxtb	r2, r3
 8022c6a:	683b      	ldr	r3, [r7, #0]
 8022c6c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8022c6e:	687b      	ldr	r3, [r7, #4]
 8022c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022c72:	0bdb      	lsrs	r3, r3, #15
 8022c74:	b2db      	uxtb	r3, r3
 8022c76:	f003 0301 	and.w	r3, r3, #1
 8022c7a:	b2da      	uxtb	r2, r3
 8022c7c:	683b      	ldr	r3, [r7, #0]
 8022c7e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8022c80:	687b      	ldr	r3, [r7, #4]
 8022c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022c84:	0b9b      	lsrs	r3, r3, #14
 8022c86:	b2db      	uxtb	r3, r3
 8022c88:	f003 0301 	and.w	r3, r3, #1
 8022c8c:	b2da      	uxtb	r2, r3
 8022c8e:	683b      	ldr	r3, [r7, #0]
 8022c90:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8022c92:	687b      	ldr	r3, [r7, #4]
 8022c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022c96:	0b5b      	lsrs	r3, r3, #13
 8022c98:	b2db      	uxtb	r3, r3
 8022c9a:	f003 0301 	and.w	r3, r3, #1
 8022c9e:	b2da      	uxtb	r2, r3
 8022ca0:	683b      	ldr	r3, [r7, #0]
 8022ca2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8022ca4:	687b      	ldr	r3, [r7, #4]
 8022ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022ca8:	0b1b      	lsrs	r3, r3, #12
 8022caa:	b2db      	uxtb	r3, r3
 8022cac:	f003 0301 	and.w	r3, r3, #1
 8022cb0:	b2da      	uxtb	r2, r3
 8022cb2:	683b      	ldr	r3, [r7, #0]
 8022cb4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8022cb6:	683b      	ldr	r3, [r7, #0]
 8022cb8:	2200      	movs	r2, #0
 8022cba:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8022cbc:	687b      	ldr	r3, [r7, #4]
 8022cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022cc0:	2b00      	cmp	r3, #0
 8022cc2:	d163      	bne.n	8022d8c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8022cc4:	687b      	ldr	r3, [r7, #4]
 8022cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022cc8:	009a      	lsls	r2, r3, #2
 8022cca:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8022cce:	4013      	ands	r3, r2
 8022cd0:	687a      	ldr	r2, [r7, #4]
 8022cd2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8022cd4:	0f92      	lsrs	r2, r2, #30
 8022cd6:	431a      	orrs	r2, r3
 8022cd8:	683b      	ldr	r3, [r7, #0]
 8022cda:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8022cdc:	687b      	ldr	r3, [r7, #4]
 8022cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022ce0:	0edb      	lsrs	r3, r3, #27
 8022ce2:	b2db      	uxtb	r3, r3
 8022ce4:	f003 0307 	and.w	r3, r3, #7
 8022ce8:	b2da      	uxtb	r2, r3
 8022cea:	683b      	ldr	r3, [r7, #0]
 8022cec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8022cee:	687b      	ldr	r3, [r7, #4]
 8022cf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022cf2:	0e1b      	lsrs	r3, r3, #24
 8022cf4:	b2db      	uxtb	r3, r3
 8022cf6:	f003 0307 	and.w	r3, r3, #7
 8022cfa:	b2da      	uxtb	r2, r3
 8022cfc:	683b      	ldr	r3, [r7, #0]
 8022cfe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8022d00:	687b      	ldr	r3, [r7, #4]
 8022d02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022d04:	0d5b      	lsrs	r3, r3, #21
 8022d06:	b2db      	uxtb	r3, r3
 8022d08:	f003 0307 	and.w	r3, r3, #7
 8022d0c:	b2da      	uxtb	r2, r3
 8022d0e:	683b      	ldr	r3, [r7, #0]
 8022d10:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8022d12:	687b      	ldr	r3, [r7, #4]
 8022d14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022d16:	0c9b      	lsrs	r3, r3, #18
 8022d18:	b2db      	uxtb	r3, r3
 8022d1a:	f003 0307 	and.w	r3, r3, #7
 8022d1e:	b2da      	uxtb	r2, r3
 8022d20:	683b      	ldr	r3, [r7, #0]
 8022d22:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8022d24:	687b      	ldr	r3, [r7, #4]
 8022d26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022d28:	0bdb      	lsrs	r3, r3, #15
 8022d2a:	b2db      	uxtb	r3, r3
 8022d2c:	f003 0307 	and.w	r3, r3, #7
 8022d30:	b2da      	uxtb	r2, r3
 8022d32:	683b      	ldr	r3, [r7, #0]
 8022d34:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8022d36:	683b      	ldr	r3, [r7, #0]
 8022d38:	691b      	ldr	r3, [r3, #16]
 8022d3a:	1c5a      	adds	r2, r3, #1
 8022d3c:	687b      	ldr	r3, [r7, #4]
 8022d3e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8022d40:	683b      	ldr	r3, [r7, #0]
 8022d42:	7e1b      	ldrb	r3, [r3, #24]
 8022d44:	b2db      	uxtb	r3, r3
 8022d46:	f003 0307 	and.w	r3, r3, #7
 8022d4a:	3302      	adds	r3, #2
 8022d4c:	2201      	movs	r2, #1
 8022d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8022d52:	687a      	ldr	r2, [r7, #4]
 8022d54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8022d56:	fb03 f202 	mul.w	r2, r3, r2
 8022d5a:	687b      	ldr	r3, [r7, #4]
 8022d5c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8022d5e:	683b      	ldr	r3, [r7, #0]
 8022d60:	7a1b      	ldrb	r3, [r3, #8]
 8022d62:	b2db      	uxtb	r3, r3
 8022d64:	f003 030f 	and.w	r3, r3, #15
 8022d68:	2201      	movs	r2, #1
 8022d6a:	409a      	lsls	r2, r3
 8022d6c:	687b      	ldr	r3, [r7, #4]
 8022d6e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8022d70:	687b      	ldr	r3, [r7, #4]
 8022d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8022d74:	687a      	ldr	r2, [r7, #4]
 8022d76:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8022d78:	0a52      	lsrs	r2, r2, #9
 8022d7a:	fb03 f202 	mul.w	r2, r3, r2
 8022d7e:	687b      	ldr	r3, [r7, #4]
 8022d80:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8022d82:	687b      	ldr	r3, [r7, #4]
 8022d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022d88:	655a      	str	r2, [r3, #84]	@ 0x54
 8022d8a:	e031      	b.n	8022df0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8022d8c:	687b      	ldr	r3, [r7, #4]
 8022d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022d90:	2b01      	cmp	r3, #1
 8022d92:	d11d      	bne.n	8022dd0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8022d94:	687b      	ldr	r3, [r7, #4]
 8022d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022d98:	041b      	lsls	r3, r3, #16
 8022d9a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8022d9e:	687b      	ldr	r3, [r7, #4]
 8022da0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022da2:	0c1b      	lsrs	r3, r3, #16
 8022da4:	431a      	orrs	r2, r3
 8022da6:	683b      	ldr	r3, [r7, #0]
 8022da8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8022daa:	683b      	ldr	r3, [r7, #0]
 8022dac:	691b      	ldr	r3, [r3, #16]
 8022dae:	3301      	adds	r3, #1
 8022db0:	029a      	lsls	r2, r3, #10
 8022db2:	687b      	ldr	r3, [r7, #4]
 8022db4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8022db6:	687b      	ldr	r3, [r7, #4]
 8022db8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8022dba:	687b      	ldr	r3, [r7, #4]
 8022dbc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8022dbe:	687b      	ldr	r3, [r7, #4]
 8022dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022dc4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8022dc6:	687b      	ldr	r3, [r7, #4]
 8022dc8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8022dca:	687b      	ldr	r3, [r7, #4]
 8022dcc:	655a      	str	r2, [r3, #84]	@ 0x54
 8022dce:	e00f      	b.n	8022df0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022dd0:	687b      	ldr	r3, [r7, #4]
 8022dd2:	681b      	ldr	r3, [r3, #0]
 8022dd4:	4a58      	ldr	r2, [pc, #352]	@ (8022f38 <HAL_SD_GetCardCSD+0x344>)
 8022dd6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8022dd8:	687b      	ldr	r3, [r7, #4]
 8022dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022ddc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8022de0:	687b      	ldr	r3, [r7, #4]
 8022de2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8022de4:	687b      	ldr	r3, [r7, #4]
 8022de6:	2201      	movs	r2, #1
 8022de8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8022dec:	2301      	movs	r3, #1
 8022dee:	e09d      	b.n	8022f2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8022df0:	687b      	ldr	r3, [r7, #4]
 8022df2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022df4:	0b9b      	lsrs	r3, r3, #14
 8022df6:	b2db      	uxtb	r3, r3
 8022df8:	f003 0301 	and.w	r3, r3, #1
 8022dfc:	b2da      	uxtb	r2, r3
 8022dfe:	683b      	ldr	r3, [r7, #0]
 8022e00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8022e02:	687b      	ldr	r3, [r7, #4]
 8022e04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022e06:	09db      	lsrs	r3, r3, #7
 8022e08:	b2db      	uxtb	r3, r3
 8022e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022e0e:	b2da      	uxtb	r2, r3
 8022e10:	683b      	ldr	r3, [r7, #0]
 8022e12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8022e14:	687b      	ldr	r3, [r7, #4]
 8022e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022e18:	b2db      	uxtb	r3, r3
 8022e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022e1e:	b2da      	uxtb	r2, r3
 8022e20:	683b      	ldr	r3, [r7, #0]
 8022e22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8022e24:	687b      	ldr	r3, [r7, #4]
 8022e26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022e28:	0fdb      	lsrs	r3, r3, #31
 8022e2a:	b2da      	uxtb	r2, r3
 8022e2c:	683b      	ldr	r3, [r7, #0]
 8022e2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8022e30:	687b      	ldr	r3, [r7, #4]
 8022e32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022e34:	0f5b      	lsrs	r3, r3, #29
 8022e36:	b2db      	uxtb	r3, r3
 8022e38:	f003 0303 	and.w	r3, r3, #3
 8022e3c:	b2da      	uxtb	r2, r3
 8022e3e:	683b      	ldr	r3, [r7, #0]
 8022e40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8022e42:	687b      	ldr	r3, [r7, #4]
 8022e44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022e46:	0e9b      	lsrs	r3, r3, #26
 8022e48:	b2db      	uxtb	r3, r3
 8022e4a:	f003 0307 	and.w	r3, r3, #7
 8022e4e:	b2da      	uxtb	r2, r3
 8022e50:	683b      	ldr	r3, [r7, #0]
 8022e52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8022e54:	687b      	ldr	r3, [r7, #4]
 8022e56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022e58:	0d9b      	lsrs	r3, r3, #22
 8022e5a:	b2db      	uxtb	r3, r3
 8022e5c:	f003 030f 	and.w	r3, r3, #15
 8022e60:	b2da      	uxtb	r2, r3
 8022e62:	683b      	ldr	r3, [r7, #0]
 8022e64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8022e66:	687b      	ldr	r3, [r7, #4]
 8022e68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022e6a:	0d5b      	lsrs	r3, r3, #21
 8022e6c:	b2db      	uxtb	r3, r3
 8022e6e:	f003 0301 	and.w	r3, r3, #1
 8022e72:	b2da      	uxtb	r2, r3
 8022e74:	683b      	ldr	r3, [r7, #0]
 8022e76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8022e7a:	683b      	ldr	r3, [r7, #0]
 8022e7c:	2200      	movs	r2, #0
 8022e7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8022e82:	687b      	ldr	r3, [r7, #4]
 8022e84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022e86:	0c1b      	lsrs	r3, r3, #16
 8022e88:	b2db      	uxtb	r3, r3
 8022e8a:	f003 0301 	and.w	r3, r3, #1
 8022e8e:	b2da      	uxtb	r2, r3
 8022e90:	683b      	ldr	r3, [r7, #0]
 8022e92:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8022e96:	687b      	ldr	r3, [r7, #4]
 8022e98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022e9a:	0bdb      	lsrs	r3, r3, #15
 8022e9c:	b2db      	uxtb	r3, r3
 8022e9e:	f003 0301 	and.w	r3, r3, #1
 8022ea2:	b2da      	uxtb	r2, r3
 8022ea4:	683b      	ldr	r3, [r7, #0]
 8022ea6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8022eaa:	687b      	ldr	r3, [r7, #4]
 8022eac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022eae:	0b9b      	lsrs	r3, r3, #14
 8022eb0:	b2db      	uxtb	r3, r3
 8022eb2:	f003 0301 	and.w	r3, r3, #1
 8022eb6:	b2da      	uxtb	r2, r3
 8022eb8:	683b      	ldr	r3, [r7, #0]
 8022eba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8022ebe:	687b      	ldr	r3, [r7, #4]
 8022ec0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022ec2:	0b5b      	lsrs	r3, r3, #13
 8022ec4:	b2db      	uxtb	r3, r3
 8022ec6:	f003 0301 	and.w	r3, r3, #1
 8022eca:	b2da      	uxtb	r2, r3
 8022ecc:	683b      	ldr	r3, [r7, #0]
 8022ece:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8022ed2:	687b      	ldr	r3, [r7, #4]
 8022ed4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022ed6:	0b1b      	lsrs	r3, r3, #12
 8022ed8:	b2db      	uxtb	r3, r3
 8022eda:	f003 0301 	and.w	r3, r3, #1
 8022ede:	b2da      	uxtb	r2, r3
 8022ee0:	683b      	ldr	r3, [r7, #0]
 8022ee2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8022ee6:	687b      	ldr	r3, [r7, #4]
 8022ee8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022eea:	0a9b      	lsrs	r3, r3, #10
 8022eec:	b2db      	uxtb	r3, r3
 8022eee:	f003 0303 	and.w	r3, r3, #3
 8022ef2:	b2da      	uxtb	r2, r3
 8022ef4:	683b      	ldr	r3, [r7, #0]
 8022ef6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8022efa:	687b      	ldr	r3, [r7, #4]
 8022efc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022efe:	0a1b      	lsrs	r3, r3, #8
 8022f00:	b2db      	uxtb	r3, r3
 8022f02:	f003 0303 	and.w	r3, r3, #3
 8022f06:	b2da      	uxtb	r2, r3
 8022f08:	683b      	ldr	r3, [r7, #0]
 8022f0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8022f0e:	687b      	ldr	r3, [r7, #4]
 8022f10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022f12:	085b      	lsrs	r3, r3, #1
 8022f14:	b2db      	uxtb	r3, r3
 8022f16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022f1a:	b2da      	uxtb	r2, r3
 8022f1c:	683b      	ldr	r3, [r7, #0]
 8022f1e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8022f22:	683b      	ldr	r3, [r7, #0]
 8022f24:	2201      	movs	r2, #1
 8022f26:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8022f2a:	2300      	movs	r3, #0
}
 8022f2c:	4618      	mov	r0, r3
 8022f2e:	370c      	adds	r7, #12
 8022f30:	46bd      	mov	sp, r7
 8022f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f36:	4770      	bx	lr
 8022f38:	1fe00fff 	.word	0x1fe00fff

08022f3c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8022f3c:	b580      	push	{r7, lr}
 8022f3e:	b094      	sub	sp, #80	@ 0x50
 8022f40:	af00      	add	r7, sp, #0
 8022f42:	6078      	str	r0, [r7, #4]
 8022f44:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8022f46:	2300      	movs	r3, #0
 8022f48:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8022f4c:	687b      	ldr	r3, [r7, #4]
 8022f4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8022f52:	b2db      	uxtb	r3, r3
 8022f54:	2b03      	cmp	r3, #3
 8022f56:	d101      	bne.n	8022f5c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8022f58:	2301      	movs	r3, #1
 8022f5a:	e0a7      	b.n	80230ac <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8022f5c:	f107 0308 	add.w	r3, r7, #8
 8022f60:	4619      	mov	r1, r3
 8022f62:	6878      	ldr	r0, [r7, #4]
 8022f64:	f000 fb62 	bl	802362c <SD_SendSDStatus>
 8022f68:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8022f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8022f6c:	2b00      	cmp	r3, #0
 8022f6e:	d011      	beq.n	8022f94 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022f70:	687b      	ldr	r3, [r7, #4]
 8022f72:	681b      	ldr	r3, [r3, #0]
 8022f74:	4a4f      	ldr	r2, [pc, #316]	@ (80230b4 <HAL_SD_GetCardStatus+0x178>)
 8022f76:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8022f78:	687b      	ldr	r3, [r7, #4]
 8022f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8022f7e:	431a      	orrs	r2, r3
 8022f80:	687b      	ldr	r3, [r7, #4]
 8022f82:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8022f84:	687b      	ldr	r3, [r7, #4]
 8022f86:	2201      	movs	r2, #1
 8022f88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8022f8c:	2301      	movs	r3, #1
 8022f8e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8022f92:	e070      	b.n	8023076 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8022f94:	68bb      	ldr	r3, [r7, #8]
 8022f96:	099b      	lsrs	r3, r3, #6
 8022f98:	b2db      	uxtb	r3, r3
 8022f9a:	f003 0303 	and.w	r3, r3, #3
 8022f9e:	b2da      	uxtb	r2, r3
 8022fa0:	683b      	ldr	r3, [r7, #0]
 8022fa2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8022fa4:	68bb      	ldr	r3, [r7, #8]
 8022fa6:	095b      	lsrs	r3, r3, #5
 8022fa8:	b2db      	uxtb	r3, r3
 8022faa:	f003 0301 	and.w	r3, r3, #1
 8022fae:	b2da      	uxtb	r2, r3
 8022fb0:	683b      	ldr	r3, [r7, #0]
 8022fb2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8022fb4:	68bb      	ldr	r3, [r7, #8]
 8022fb6:	0a1b      	lsrs	r3, r3, #8
 8022fb8:	b29b      	uxth	r3, r3
 8022fba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8022fbe:	b29a      	uxth	r2, r3
 8022fc0:	68bb      	ldr	r3, [r7, #8]
 8022fc2:	0e1b      	lsrs	r3, r3, #24
 8022fc4:	b29b      	uxth	r3, r3
 8022fc6:	4313      	orrs	r3, r2
 8022fc8:	b29a      	uxth	r2, r3
 8022fca:	683b      	ldr	r3, [r7, #0]
 8022fcc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8022fce:	68fb      	ldr	r3, [r7, #12]
 8022fd0:	061a      	lsls	r2, r3, #24
 8022fd2:	68fb      	ldr	r3, [r7, #12]
 8022fd4:	021b      	lsls	r3, r3, #8
 8022fd6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8022fda:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8022fdc:	68fb      	ldr	r3, [r7, #12]
 8022fde:	0a1b      	lsrs	r3, r3, #8
 8022fe0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8022fe4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8022fe6:	68fb      	ldr	r3, [r7, #12]
 8022fe8:	0e1b      	lsrs	r3, r3, #24
 8022fea:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8022fec:	683b      	ldr	r3, [r7, #0]
 8022fee:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8022ff0:	693b      	ldr	r3, [r7, #16]
 8022ff2:	b2da      	uxtb	r2, r3
 8022ff4:	683b      	ldr	r3, [r7, #0]
 8022ff6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8022ff8:	693b      	ldr	r3, [r7, #16]
 8022ffa:	0a1b      	lsrs	r3, r3, #8
 8022ffc:	b2da      	uxtb	r2, r3
 8022ffe:	683b      	ldr	r3, [r7, #0]
 8023000:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8023002:	693b      	ldr	r3, [r7, #16]
 8023004:	0d1b      	lsrs	r3, r3, #20
 8023006:	b2db      	uxtb	r3, r3
 8023008:	f003 030f 	and.w	r3, r3, #15
 802300c:	b2da      	uxtb	r2, r3
 802300e:	683b      	ldr	r3, [r7, #0]
 8023010:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8023012:	693b      	ldr	r3, [r7, #16]
 8023014:	0c1b      	lsrs	r3, r3, #16
 8023016:	b29b      	uxth	r3, r3
 8023018:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802301c:	b29a      	uxth	r2, r3
 802301e:	697b      	ldr	r3, [r7, #20]
 8023020:	b29b      	uxth	r3, r3
 8023022:	b2db      	uxtb	r3, r3
 8023024:	b29b      	uxth	r3, r3
 8023026:	4313      	orrs	r3, r2
 8023028:	b29a      	uxth	r2, r3
 802302a:	683b      	ldr	r3, [r7, #0]
 802302c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 802302e:	697b      	ldr	r3, [r7, #20]
 8023030:	0a9b      	lsrs	r3, r3, #10
 8023032:	b2db      	uxtb	r3, r3
 8023034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023038:	b2da      	uxtb	r2, r3
 802303a:	683b      	ldr	r3, [r7, #0]
 802303c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 802303e:	697b      	ldr	r3, [r7, #20]
 8023040:	0a1b      	lsrs	r3, r3, #8
 8023042:	b2db      	uxtb	r3, r3
 8023044:	f003 0303 	and.w	r3, r3, #3
 8023048:	b2da      	uxtb	r2, r3
 802304a:	683b      	ldr	r3, [r7, #0]
 802304c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 802304e:	697b      	ldr	r3, [r7, #20]
 8023050:	091b      	lsrs	r3, r3, #4
 8023052:	b2db      	uxtb	r3, r3
 8023054:	f003 030f 	and.w	r3, r3, #15
 8023058:	b2da      	uxtb	r2, r3
 802305a:	683b      	ldr	r3, [r7, #0]
 802305c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 802305e:	697b      	ldr	r3, [r7, #20]
 8023060:	b2db      	uxtb	r3, r3
 8023062:	f003 030f 	and.w	r3, r3, #15
 8023066:	b2da      	uxtb	r2, r3
 8023068:	683b      	ldr	r3, [r7, #0]
 802306a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 802306c:	69bb      	ldr	r3, [r7, #24]
 802306e:	0e1b      	lsrs	r3, r3, #24
 8023070:	b2da      	uxtb	r2, r3
 8023072:	683b      	ldr	r3, [r7, #0]
 8023074:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8023076:	687b      	ldr	r3, [r7, #4]
 8023078:	681b      	ldr	r3, [r3, #0]
 802307a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 802307e:	4618      	mov	r0, r3
 8023080:	f002 f97c 	bl	802537c <SDMMC_CmdBlockLength>
 8023084:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8023086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023088:	2b00      	cmp	r3, #0
 802308a:	d00d      	beq.n	80230a8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802308c:	687b      	ldr	r3, [r7, #4]
 802308e:	681b      	ldr	r3, [r3, #0]
 8023090:	4a08      	ldr	r2, [pc, #32]	@ (80230b4 <HAL_SD_GetCardStatus+0x178>)
 8023092:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8023094:	687b      	ldr	r3, [r7, #4]
 8023096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8023098:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 802309a:	687b      	ldr	r3, [r7, #4]
 802309c:	2201      	movs	r2, #1
 802309e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80230a2:	2301      	movs	r3, #1
 80230a4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80230a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80230ac:	4618      	mov	r0, r3
 80230ae:	3750      	adds	r7, #80	@ 0x50
 80230b0:	46bd      	mov	sp, r7
 80230b2:	bd80      	pop	{r7, pc}
 80230b4:	1fe00fff 	.word	0x1fe00fff

080230b8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80230b8:	b480      	push	{r7}
 80230ba:	b083      	sub	sp, #12
 80230bc:	af00      	add	r7, sp, #0
 80230be:	6078      	str	r0, [r7, #4]
 80230c0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80230c2:	687b      	ldr	r3, [r7, #4]
 80230c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80230c6:	683b      	ldr	r3, [r7, #0]
 80230c8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80230ca:	687b      	ldr	r3, [r7, #4]
 80230cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80230ce:	683b      	ldr	r3, [r7, #0]
 80230d0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80230d2:	687b      	ldr	r3, [r7, #4]
 80230d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80230d6:	683b      	ldr	r3, [r7, #0]
 80230d8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80230da:	687b      	ldr	r3, [r7, #4]
 80230dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80230de:	683b      	ldr	r3, [r7, #0]
 80230e0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80230e2:	687b      	ldr	r3, [r7, #4]
 80230e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80230e6:	683b      	ldr	r3, [r7, #0]
 80230e8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80230ea:	687b      	ldr	r3, [r7, #4]
 80230ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80230ee:	683b      	ldr	r3, [r7, #0]
 80230f0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80230f2:	687b      	ldr	r3, [r7, #4]
 80230f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80230f6:	683b      	ldr	r3, [r7, #0]
 80230f8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80230fa:	687b      	ldr	r3, [r7, #4]
 80230fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80230fe:	683b      	ldr	r3, [r7, #0]
 8023100:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8023102:	2300      	movs	r3, #0
}
 8023104:	4618      	mov	r0, r3
 8023106:	370c      	adds	r7, #12
 8023108:	46bd      	mov	sp, r7
 802310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802310e:	4770      	bx	lr

08023110 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8023110:	b590      	push	{r4, r7, lr}
 8023112:	b08d      	sub	sp, #52	@ 0x34
 8023114:	af02      	add	r7, sp, #8
 8023116:	6078      	str	r0, [r7, #4]
 8023118:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 802311a:	2300      	movs	r3, #0
 802311c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8023120:	687b      	ldr	r3, [r7, #4]
 8023122:	2203      	movs	r2, #3
 8023124:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8023128:	687b      	ldr	r3, [r7, #4]
 802312a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802312c:	2b03      	cmp	r3, #3
 802312e:	d02e      	beq.n	802318e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8023130:	683b      	ldr	r3, [r7, #0]
 8023132:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8023136:	d106      	bne.n	8023146 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8023138:	687b      	ldr	r3, [r7, #4]
 802313a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802313c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8023140:	687b      	ldr	r3, [r7, #4]
 8023142:	635a      	str	r2, [r3, #52]	@ 0x34
 8023144:	e029      	b.n	802319a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8023146:	683b      	ldr	r3, [r7, #0]
 8023148:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 802314c:	d10a      	bne.n	8023164 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 802314e:	6878      	ldr	r0, [r7, #4]
 8023150:	f000 fb64 	bl	802381c <SD_WideBus_Enable>
 8023154:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8023156:	687b      	ldr	r3, [r7, #4]
 8023158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802315a:	6a3b      	ldr	r3, [r7, #32]
 802315c:	431a      	orrs	r2, r3
 802315e:	687b      	ldr	r3, [r7, #4]
 8023160:	635a      	str	r2, [r3, #52]	@ 0x34
 8023162:	e01a      	b.n	802319a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8023164:	683b      	ldr	r3, [r7, #0]
 8023166:	2b00      	cmp	r3, #0
 8023168:	d10a      	bne.n	8023180 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 802316a:	6878      	ldr	r0, [r7, #4]
 802316c:	f000 fba1 	bl	80238b2 <SD_WideBus_Disable>
 8023170:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8023172:	687b      	ldr	r3, [r7, #4]
 8023174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023176:	6a3b      	ldr	r3, [r7, #32]
 8023178:	431a      	orrs	r2, r3
 802317a:	687b      	ldr	r3, [r7, #4]
 802317c:	635a      	str	r2, [r3, #52]	@ 0x34
 802317e:	e00c      	b.n	802319a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8023180:	687b      	ldr	r3, [r7, #4]
 8023182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023184:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8023188:	687b      	ldr	r3, [r7, #4]
 802318a:	635a      	str	r2, [r3, #52]	@ 0x34
 802318c:	e005      	b.n	802319a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 802318e:	687b      	ldr	r3, [r7, #4]
 8023190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023192:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8023196:	687b      	ldr	r3, [r7, #4]
 8023198:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 802319a:	687b      	ldr	r3, [r7, #4]
 802319c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802319e:	2b00      	cmp	r3, #0
 80231a0:	d007      	beq.n	80231b2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80231a2:	687b      	ldr	r3, [r7, #4]
 80231a4:	681b      	ldr	r3, [r3, #0]
 80231a6:	4a5f      	ldr	r2, [pc, #380]	@ (8023324 <HAL_SD_ConfigWideBusOperation+0x214>)
 80231a8:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80231aa:	2301      	movs	r3, #1
 80231ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80231b0:	e096      	b.n	80232e0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80231b2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80231b6:	f04f 0100 	mov.w	r1, #0
 80231ba:	f7fd fdf5 	bl	8020da8 <HAL_RCCEx_GetPeriphCLKFreq>
 80231be:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80231c0:	69fb      	ldr	r3, [r7, #28]
 80231c2:	2b00      	cmp	r3, #0
 80231c4:	f000 8083 	beq.w	80232ce <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80231c8:	687b      	ldr	r3, [r7, #4]
 80231ca:	685b      	ldr	r3, [r3, #4]
 80231cc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80231ce:	687b      	ldr	r3, [r7, #4]
 80231d0:	689b      	ldr	r3, [r3, #8]
 80231d2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80231d4:	683b      	ldr	r3, [r7, #0]
 80231d6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80231d8:	687b      	ldr	r3, [r7, #4]
 80231da:	691b      	ldr	r3, [r3, #16]
 80231dc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80231de:	687b      	ldr	r3, [r7, #4]
 80231e0:	695a      	ldr	r2, [r3, #20]
 80231e2:	69fb      	ldr	r3, [r7, #28]
 80231e4:	4950      	ldr	r1, [pc, #320]	@ (8023328 <HAL_SD_ConfigWideBusOperation+0x218>)
 80231e6:	fba1 1303 	umull	r1, r3, r1, r3
 80231ea:	0e1b      	lsrs	r3, r3, #24
 80231ec:	429a      	cmp	r2, r3
 80231ee:	d303      	bcc.n	80231f8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80231f0:	687b      	ldr	r3, [r7, #4]
 80231f2:	695b      	ldr	r3, [r3, #20]
 80231f4:	61bb      	str	r3, [r7, #24]
 80231f6:	e05a      	b.n	80232ae <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80231f8:	687b      	ldr	r3, [r7, #4]
 80231fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80231fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023200:	d103      	bne.n	802320a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8023202:	687b      	ldr	r3, [r7, #4]
 8023204:	695b      	ldr	r3, [r3, #20]
 8023206:	61bb      	str	r3, [r7, #24]
 8023208:	e051      	b.n	80232ae <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 802320a:	687b      	ldr	r3, [r7, #4]
 802320c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802320e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8023212:	d126      	bne.n	8023262 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8023214:	687b      	ldr	r3, [r7, #4]
 8023216:	695b      	ldr	r3, [r3, #20]
 8023218:	2b00      	cmp	r3, #0
 802321a:	d10e      	bne.n	802323a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 802321c:	69fb      	ldr	r3, [r7, #28]
 802321e:	4a43      	ldr	r2, [pc, #268]	@ (802332c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8023220:	4293      	cmp	r3, r2
 8023222:	d906      	bls.n	8023232 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8023224:	69fb      	ldr	r3, [r7, #28]
 8023226:	4a40      	ldr	r2, [pc, #256]	@ (8023328 <HAL_SD_ConfigWideBusOperation+0x218>)
 8023228:	fba2 2303 	umull	r2, r3, r2, r3
 802322c:	0e5b      	lsrs	r3, r3, #25
 802322e:	61bb      	str	r3, [r7, #24]
 8023230:	e03d      	b.n	80232ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8023232:	687b      	ldr	r3, [r7, #4]
 8023234:	695b      	ldr	r3, [r3, #20]
 8023236:	61bb      	str	r3, [r7, #24]
 8023238:	e039      	b.n	80232ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 802323a:	687b      	ldr	r3, [r7, #4]
 802323c:	695b      	ldr	r3, [r3, #20]
 802323e:	005b      	lsls	r3, r3, #1
 8023240:	69fa      	ldr	r2, [r7, #28]
 8023242:	fbb2 f3f3 	udiv	r3, r2, r3
 8023246:	4a39      	ldr	r2, [pc, #228]	@ (802332c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8023248:	4293      	cmp	r3, r2
 802324a:	d906      	bls.n	802325a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 802324c:	69fb      	ldr	r3, [r7, #28]
 802324e:	4a36      	ldr	r2, [pc, #216]	@ (8023328 <HAL_SD_ConfigWideBusOperation+0x218>)
 8023250:	fba2 2303 	umull	r2, r3, r2, r3
 8023254:	0e5b      	lsrs	r3, r3, #25
 8023256:	61bb      	str	r3, [r7, #24]
 8023258:	e029      	b.n	80232ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 802325a:	687b      	ldr	r3, [r7, #4]
 802325c:	695b      	ldr	r3, [r3, #20]
 802325e:	61bb      	str	r3, [r7, #24]
 8023260:	e025      	b.n	80232ae <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8023262:	687b      	ldr	r3, [r7, #4]
 8023264:	695b      	ldr	r3, [r3, #20]
 8023266:	2b00      	cmp	r3, #0
 8023268:	d10e      	bne.n	8023288 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 802326a:	69fb      	ldr	r3, [r7, #28]
 802326c:	4a30      	ldr	r2, [pc, #192]	@ (8023330 <HAL_SD_ConfigWideBusOperation+0x220>)
 802326e:	4293      	cmp	r3, r2
 8023270:	d906      	bls.n	8023280 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8023272:	69fb      	ldr	r3, [r7, #28]
 8023274:	4a2c      	ldr	r2, [pc, #176]	@ (8023328 <HAL_SD_ConfigWideBusOperation+0x218>)
 8023276:	fba2 2303 	umull	r2, r3, r2, r3
 802327a:	0e1b      	lsrs	r3, r3, #24
 802327c:	61bb      	str	r3, [r7, #24]
 802327e:	e016      	b.n	80232ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8023280:	687b      	ldr	r3, [r7, #4]
 8023282:	695b      	ldr	r3, [r3, #20]
 8023284:	61bb      	str	r3, [r7, #24]
 8023286:	e012      	b.n	80232ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8023288:	687b      	ldr	r3, [r7, #4]
 802328a:	695b      	ldr	r3, [r3, #20]
 802328c:	005b      	lsls	r3, r3, #1
 802328e:	69fa      	ldr	r2, [r7, #28]
 8023290:	fbb2 f3f3 	udiv	r3, r2, r3
 8023294:	4a26      	ldr	r2, [pc, #152]	@ (8023330 <HAL_SD_ConfigWideBusOperation+0x220>)
 8023296:	4293      	cmp	r3, r2
 8023298:	d906      	bls.n	80232a8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 802329a:	69fb      	ldr	r3, [r7, #28]
 802329c:	4a22      	ldr	r2, [pc, #136]	@ (8023328 <HAL_SD_ConfigWideBusOperation+0x218>)
 802329e:	fba2 2303 	umull	r2, r3, r2, r3
 80232a2:	0e1b      	lsrs	r3, r3, #24
 80232a4:	61bb      	str	r3, [r7, #24]
 80232a6:	e002      	b.n	80232ae <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80232a8:	687b      	ldr	r3, [r7, #4]
 80232aa:	695b      	ldr	r3, [r3, #20]
 80232ac:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80232ae:	687b      	ldr	r3, [r7, #4]
 80232b0:	681c      	ldr	r4, [r3, #0]
 80232b2:	466a      	mov	r2, sp
 80232b4:	f107 0314 	add.w	r3, r7, #20
 80232b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80232bc:	e882 0003 	stmia.w	r2, {r0, r1}
 80232c0:	f107 0308 	add.w	r3, r7, #8
 80232c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80232c6:	4620      	mov	r0, r4
 80232c8:	f001 ff7a 	bl	80251c0 <SDMMC_Init>
 80232cc:	e008      	b.n	80232e0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80232ce:	687b      	ldr	r3, [r7, #4]
 80232d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80232d2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80232d6:	687b      	ldr	r3, [r7, #4]
 80232d8:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80232da:	2301      	movs	r3, #1
 80232dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80232e0:	687b      	ldr	r3, [r7, #4]
 80232e2:	681b      	ldr	r3, [r3, #0]
 80232e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80232e8:	4618      	mov	r0, r3
 80232ea:	f002 f847 	bl	802537c <SDMMC_CmdBlockLength>
 80232ee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80232f0:	6a3b      	ldr	r3, [r7, #32]
 80232f2:	2b00      	cmp	r3, #0
 80232f4:	d00c      	beq.n	8023310 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80232f6:	687b      	ldr	r3, [r7, #4]
 80232f8:	681b      	ldr	r3, [r3, #0]
 80232fa:	4a0a      	ldr	r2, [pc, #40]	@ (8023324 <HAL_SD_ConfigWideBusOperation+0x214>)
 80232fc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80232fe:	687b      	ldr	r3, [r7, #4]
 8023300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023302:	6a3b      	ldr	r3, [r7, #32]
 8023304:	431a      	orrs	r2, r3
 8023306:	687b      	ldr	r3, [r7, #4]
 8023308:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 802330a:	2301      	movs	r3, #1
 802330c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8023310:	687b      	ldr	r3, [r7, #4]
 8023312:	2201      	movs	r2, #1
 8023314:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8023318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 802331c:	4618      	mov	r0, r3
 802331e:	372c      	adds	r7, #44	@ 0x2c
 8023320:	46bd      	mov	sp, r7
 8023322:	bd90      	pop	{r4, r7, pc}
 8023324:	1fe00fff 	.word	0x1fe00fff
 8023328:	55e63b89 	.word	0x55e63b89
 802332c:	02faf080 	.word	0x02faf080
 8023330:	017d7840 	.word	0x017d7840

08023334 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8023334:	b580      	push	{r7, lr}
 8023336:	b086      	sub	sp, #24
 8023338:	af00      	add	r7, sp, #0
 802333a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 802333c:	2300      	movs	r3, #0
 802333e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8023340:	f107 030c 	add.w	r3, r7, #12
 8023344:	4619      	mov	r1, r3
 8023346:	6878      	ldr	r0, [r7, #4]
 8023348:	f000 fa40 	bl	80237cc <SD_SendStatus>
 802334c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 802334e:	697b      	ldr	r3, [r7, #20]
 8023350:	2b00      	cmp	r3, #0
 8023352:	d005      	beq.n	8023360 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8023354:	687b      	ldr	r3, [r7, #4]
 8023356:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023358:	697b      	ldr	r3, [r7, #20]
 802335a:	431a      	orrs	r2, r3
 802335c:	687b      	ldr	r3, [r7, #4]
 802335e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8023360:	68fb      	ldr	r3, [r7, #12]
 8023362:	0a5b      	lsrs	r3, r3, #9
 8023364:	f003 030f 	and.w	r3, r3, #15
 8023368:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 802336a:	693b      	ldr	r3, [r7, #16]
}
 802336c:	4618      	mov	r0, r3
 802336e:	3718      	adds	r7, #24
 8023370:	46bd      	mov	sp, r7
 8023372:	bd80      	pop	{r7, pc}

08023374 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8023374:	b580      	push	{r7, lr}
 8023376:	b090      	sub	sp, #64	@ 0x40
 8023378:	af00      	add	r7, sp, #0
 802337a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 802337c:	2300      	movs	r3, #0
 802337e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8023380:	f7f8 fbe8 	bl	801bb54 <HAL_GetTick>
 8023384:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8023386:	687b      	ldr	r3, [r7, #4]
 8023388:	681b      	ldr	r3, [r3, #0]
 802338a:	4618      	mov	r0, r3
 802338c:	f001 ff71 	bl	8025272 <SDMMC_GetPowerState>
 8023390:	4603      	mov	r3, r0
 8023392:	2b00      	cmp	r3, #0
 8023394:	d102      	bne.n	802339c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8023396:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 802339a:	e0b5      	b.n	8023508 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 802339c:	687b      	ldr	r3, [r7, #4]
 802339e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80233a0:	2b03      	cmp	r3, #3
 80233a2:	d02e      	beq.n	8023402 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80233a4:	687b      	ldr	r3, [r7, #4]
 80233a6:	681b      	ldr	r3, [r3, #0]
 80233a8:	4618      	mov	r0, r3
 80233aa:	f002 f9bc 	bl	8025726 <SDMMC_CmdSendCID>
 80233ae:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80233b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	d001      	beq.n	80233ba <SD_InitCard+0x46>
    {
      return errorstate;
 80233b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80233b8:	e0a6      	b.n	8023508 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80233ba:	687b      	ldr	r3, [r7, #4]
 80233bc:	681b      	ldr	r3, [r3, #0]
 80233be:	2100      	movs	r1, #0
 80233c0:	4618      	mov	r0, r3
 80233c2:	f001 ff9c 	bl	80252fe <SDMMC_GetResponse>
 80233c6:	4602      	mov	r2, r0
 80233c8:	687b      	ldr	r3, [r7, #4]
 80233ca:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80233cc:	687b      	ldr	r3, [r7, #4]
 80233ce:	681b      	ldr	r3, [r3, #0]
 80233d0:	2104      	movs	r1, #4
 80233d2:	4618      	mov	r0, r3
 80233d4:	f001 ff93 	bl	80252fe <SDMMC_GetResponse>
 80233d8:	4602      	mov	r2, r0
 80233da:	687b      	ldr	r3, [r7, #4]
 80233dc:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80233de:	687b      	ldr	r3, [r7, #4]
 80233e0:	681b      	ldr	r3, [r3, #0]
 80233e2:	2108      	movs	r1, #8
 80233e4:	4618      	mov	r0, r3
 80233e6:	f001 ff8a 	bl	80252fe <SDMMC_GetResponse>
 80233ea:	4602      	mov	r2, r0
 80233ec:	687b      	ldr	r3, [r7, #4]
 80233ee:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80233f0:	687b      	ldr	r3, [r7, #4]
 80233f2:	681b      	ldr	r3, [r3, #0]
 80233f4:	210c      	movs	r1, #12
 80233f6:	4618      	mov	r0, r3
 80233f8:	f001 ff81 	bl	80252fe <SDMMC_GetResponse>
 80233fc:	4602      	mov	r2, r0
 80233fe:	687b      	ldr	r3, [r7, #4]
 8023400:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8023402:	687b      	ldr	r3, [r7, #4]
 8023404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023406:	2b03      	cmp	r3, #3
 8023408:	d01d      	beq.n	8023446 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 802340a:	e019      	b.n	8023440 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 802340c:	687b      	ldr	r3, [r7, #4]
 802340e:	681b      	ldr	r3, [r3, #0]
 8023410:	f107 020a 	add.w	r2, r7, #10
 8023414:	4611      	mov	r1, r2
 8023416:	4618      	mov	r0, r3
 8023418:	f002 f9c4 	bl	80257a4 <SDMMC_CmdSetRelAdd>
 802341c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 802341e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023420:	2b00      	cmp	r3, #0
 8023422:	d001      	beq.n	8023428 <SD_InitCard+0xb4>
      {
        return errorstate;
 8023424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023426:	e06f      	b.n	8023508 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8023428:	f7f8 fb94 	bl	801bb54 <HAL_GetTick>
 802342c:	4602      	mov	r2, r0
 802342e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023430:	1ad3      	subs	r3, r2, r3
 8023432:	f241 3287 	movw	r2, #4999	@ 0x1387
 8023436:	4293      	cmp	r3, r2
 8023438:	d902      	bls.n	8023440 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 802343a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 802343e:	e063      	b.n	8023508 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8023440:	897b      	ldrh	r3, [r7, #10]
 8023442:	2b00      	cmp	r3, #0
 8023444:	d0e2      	beq.n	802340c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8023446:	687b      	ldr	r3, [r7, #4]
 8023448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802344a:	2b03      	cmp	r3, #3
 802344c:	d036      	beq.n	80234bc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 802344e:	897b      	ldrh	r3, [r7, #10]
 8023450:	461a      	mov	r2, r3
 8023452:	687b      	ldr	r3, [r7, #4]
 8023454:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8023456:	687b      	ldr	r3, [r7, #4]
 8023458:	681a      	ldr	r2, [r3, #0]
 802345a:	687b      	ldr	r3, [r7, #4]
 802345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802345e:	041b      	lsls	r3, r3, #16
 8023460:	4619      	mov	r1, r3
 8023462:	4610      	mov	r0, r2
 8023464:	f002 f97e 	bl	8025764 <SDMMC_CmdSendCSD>
 8023468:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 802346a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802346c:	2b00      	cmp	r3, #0
 802346e:	d001      	beq.n	8023474 <SD_InitCard+0x100>
    {
      return errorstate;
 8023470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023472:	e049      	b.n	8023508 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8023474:	687b      	ldr	r3, [r7, #4]
 8023476:	681b      	ldr	r3, [r3, #0]
 8023478:	2100      	movs	r1, #0
 802347a:	4618      	mov	r0, r3
 802347c:	f001 ff3f 	bl	80252fe <SDMMC_GetResponse>
 8023480:	4602      	mov	r2, r0
 8023482:	687b      	ldr	r3, [r7, #4]
 8023484:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8023486:	687b      	ldr	r3, [r7, #4]
 8023488:	681b      	ldr	r3, [r3, #0]
 802348a:	2104      	movs	r1, #4
 802348c:	4618      	mov	r0, r3
 802348e:	f001 ff36 	bl	80252fe <SDMMC_GetResponse>
 8023492:	4602      	mov	r2, r0
 8023494:	687b      	ldr	r3, [r7, #4]
 8023496:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8023498:	687b      	ldr	r3, [r7, #4]
 802349a:	681b      	ldr	r3, [r3, #0]
 802349c:	2108      	movs	r1, #8
 802349e:	4618      	mov	r0, r3
 80234a0:	f001 ff2d 	bl	80252fe <SDMMC_GetResponse>
 80234a4:	4602      	mov	r2, r0
 80234a6:	687b      	ldr	r3, [r7, #4]
 80234a8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80234aa:	687b      	ldr	r3, [r7, #4]
 80234ac:	681b      	ldr	r3, [r3, #0]
 80234ae:	210c      	movs	r1, #12
 80234b0:	4618      	mov	r0, r3
 80234b2:	f001 ff24 	bl	80252fe <SDMMC_GetResponse>
 80234b6:	4602      	mov	r2, r0
 80234b8:	687b      	ldr	r3, [r7, #4]
 80234ba:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80234bc:	687b      	ldr	r3, [r7, #4]
 80234be:	681b      	ldr	r3, [r3, #0]
 80234c0:	2104      	movs	r1, #4
 80234c2:	4618      	mov	r0, r3
 80234c4:	f001 ff1b 	bl	80252fe <SDMMC_GetResponse>
 80234c8:	4603      	mov	r3, r0
 80234ca:	0d1a      	lsrs	r2, r3, #20
 80234cc:	687b      	ldr	r3, [r7, #4]
 80234ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80234d0:	f107 030c 	add.w	r3, r7, #12
 80234d4:	4619      	mov	r1, r3
 80234d6:	6878      	ldr	r0, [r7, #4]
 80234d8:	f7ff fb8c 	bl	8022bf4 <HAL_SD_GetCardCSD>
 80234dc:	4603      	mov	r3, r0
 80234de:	2b00      	cmp	r3, #0
 80234e0:	d002      	beq.n	80234e8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80234e2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80234e6:	e00f      	b.n	8023508 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80234e8:	687b      	ldr	r3, [r7, #4]
 80234ea:	681a      	ldr	r2, [r3, #0]
 80234ec:	687b      	ldr	r3, [r7, #4]
 80234ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80234f0:	041b      	lsls	r3, r3, #16
 80234f2:	4619      	mov	r1, r3
 80234f4:	4610      	mov	r0, r2
 80234f6:	f002 f82d 	bl	8025554 <SDMMC_CmdSelDesel>
 80234fa:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80234fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80234fe:	2b00      	cmp	r3, #0
 8023500:	d001      	beq.n	8023506 <SD_InitCard+0x192>
  {
    return errorstate;
 8023502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023504:	e000      	b.n	8023508 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8023506:	2300      	movs	r3, #0
}
 8023508:	4618      	mov	r0, r3
 802350a:	3740      	adds	r7, #64	@ 0x40
 802350c:	46bd      	mov	sp, r7
 802350e:	bd80      	pop	{r7, pc}

08023510 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8023510:	b580      	push	{r7, lr}
 8023512:	b086      	sub	sp, #24
 8023514:	af00      	add	r7, sp, #0
 8023516:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8023518:	2300      	movs	r3, #0
 802351a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 802351c:	2300      	movs	r3, #0
 802351e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8023520:	2300      	movs	r3, #0
 8023522:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8023524:	687b      	ldr	r3, [r7, #4]
 8023526:	681b      	ldr	r3, [r3, #0]
 8023528:	4618      	mov	r0, r3
 802352a:	f002 f836 	bl	802559a <SDMMC_CmdGoIdleState>
 802352e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8023530:	68fb      	ldr	r3, [r7, #12]
 8023532:	2b00      	cmp	r3, #0
 8023534:	d001      	beq.n	802353a <SD_PowerON+0x2a>
  {
    return errorstate;
 8023536:	68fb      	ldr	r3, [r7, #12]
 8023538:	e072      	b.n	8023620 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 802353a:	687b      	ldr	r3, [r7, #4]
 802353c:	681b      	ldr	r3, [r3, #0]
 802353e:	4618      	mov	r0, r3
 8023540:	f002 f849 	bl	80255d6 <SDMMC_CmdOperCond>
 8023544:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8023546:	68fb      	ldr	r3, [r7, #12]
 8023548:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 802354c:	d10d      	bne.n	802356a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 802354e:	687b      	ldr	r3, [r7, #4]
 8023550:	2200      	movs	r2, #0
 8023552:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8023554:	687b      	ldr	r3, [r7, #4]
 8023556:	681b      	ldr	r3, [r3, #0]
 8023558:	4618      	mov	r0, r3
 802355a:	f002 f81e 	bl	802559a <SDMMC_CmdGoIdleState>
 802355e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8023560:	68fb      	ldr	r3, [r7, #12]
 8023562:	2b00      	cmp	r3, #0
 8023564:	d004      	beq.n	8023570 <SD_PowerON+0x60>
    {
      return errorstate;
 8023566:	68fb      	ldr	r3, [r7, #12]
 8023568:	e05a      	b.n	8023620 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 802356a:	687b      	ldr	r3, [r7, #4]
 802356c:	2201      	movs	r2, #1
 802356e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8023570:	687b      	ldr	r3, [r7, #4]
 8023572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023574:	2b01      	cmp	r3, #1
 8023576:	d137      	bne.n	80235e8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8023578:	687b      	ldr	r3, [r7, #4]
 802357a:	681b      	ldr	r3, [r3, #0]
 802357c:	2100      	movs	r1, #0
 802357e:	4618      	mov	r0, r3
 8023580:	f002 f849 	bl	8025616 <SDMMC_CmdAppCommand>
 8023584:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8023586:	68fb      	ldr	r3, [r7, #12]
 8023588:	2b00      	cmp	r3, #0
 802358a:	d02d      	beq.n	80235e8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 802358c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8023590:	e046      	b.n	8023620 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8023592:	687b      	ldr	r3, [r7, #4]
 8023594:	681b      	ldr	r3, [r3, #0]
 8023596:	2100      	movs	r1, #0
 8023598:	4618      	mov	r0, r3
 802359a:	f002 f83c 	bl	8025616 <SDMMC_CmdAppCommand>
 802359e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80235a0:	68fb      	ldr	r3, [r7, #12]
 80235a2:	2b00      	cmp	r3, #0
 80235a4:	d001      	beq.n	80235aa <SD_PowerON+0x9a>
    {
      return errorstate;
 80235a6:	68fb      	ldr	r3, [r7, #12]
 80235a8:	e03a      	b.n	8023620 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80235aa:	687b      	ldr	r3, [r7, #4]
 80235ac:	681b      	ldr	r3, [r3, #0]
 80235ae:	491e      	ldr	r1, [pc, #120]	@ (8023628 <SD_PowerON+0x118>)
 80235b0:	4618      	mov	r0, r3
 80235b2:	f002 f853 	bl	802565c <SDMMC_CmdAppOperCommand>
 80235b6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80235b8:	68fb      	ldr	r3, [r7, #12]
 80235ba:	2b00      	cmp	r3, #0
 80235bc:	d002      	beq.n	80235c4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80235be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80235c2:	e02d      	b.n	8023620 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80235c4:	687b      	ldr	r3, [r7, #4]
 80235c6:	681b      	ldr	r3, [r3, #0]
 80235c8:	2100      	movs	r1, #0
 80235ca:	4618      	mov	r0, r3
 80235cc:	f001 fe97 	bl	80252fe <SDMMC_GetResponse>
 80235d0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80235d2:	697b      	ldr	r3, [r7, #20]
 80235d4:	0fdb      	lsrs	r3, r3, #31
 80235d6:	2b01      	cmp	r3, #1
 80235d8:	d101      	bne.n	80235de <SD_PowerON+0xce>
 80235da:	2301      	movs	r3, #1
 80235dc:	e000      	b.n	80235e0 <SD_PowerON+0xd0>
 80235de:	2300      	movs	r3, #0
 80235e0:	613b      	str	r3, [r7, #16]

    count++;
 80235e2:	68bb      	ldr	r3, [r7, #8]
 80235e4:	3301      	adds	r3, #1
 80235e6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80235e8:	68bb      	ldr	r3, [r7, #8]
 80235ea:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80235ee:	4293      	cmp	r3, r2
 80235f0:	d802      	bhi.n	80235f8 <SD_PowerON+0xe8>
 80235f2:	693b      	ldr	r3, [r7, #16]
 80235f4:	2b00      	cmp	r3, #0
 80235f6:	d0cc      	beq.n	8023592 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80235f8:	68bb      	ldr	r3, [r7, #8]
 80235fa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80235fe:	4293      	cmp	r3, r2
 8023600:	d902      	bls.n	8023608 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8023602:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8023606:	e00b      	b.n	8023620 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8023608:	687b      	ldr	r3, [r7, #4]
 802360a:	2200      	movs	r2, #0
 802360c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 802360e:	697b      	ldr	r3, [r7, #20]
 8023610:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8023614:	2b00      	cmp	r3, #0
 8023616:	d002      	beq.n	802361e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8023618:	687b      	ldr	r3, [r7, #4]
 802361a:	2201      	movs	r2, #1
 802361c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 802361e:	2300      	movs	r3, #0
}
 8023620:	4618      	mov	r0, r3
 8023622:	3718      	adds	r7, #24
 8023624:	46bd      	mov	sp, r7
 8023626:	bd80      	pop	{r7, pc}
 8023628:	c1100000 	.word	0xc1100000

0802362c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 802362c:	b580      	push	{r7, lr}
 802362e:	b08c      	sub	sp, #48	@ 0x30
 8023630:	af00      	add	r7, sp, #0
 8023632:	6078      	str	r0, [r7, #4]
 8023634:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8023636:	f7f8 fa8d 	bl	801bb54 <HAL_GetTick>
 802363a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 802363c:	683b      	ldr	r3, [r7, #0]
 802363e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8023640:	687b      	ldr	r3, [r7, #4]
 8023642:	681b      	ldr	r3, [r3, #0]
 8023644:	2100      	movs	r1, #0
 8023646:	4618      	mov	r0, r3
 8023648:	f001 fe59 	bl	80252fe <SDMMC_GetResponse>
 802364c:	4603      	mov	r3, r0
 802364e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8023652:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8023656:	d102      	bne.n	802365e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8023658:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 802365c:	e0b0      	b.n	80237c0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 802365e:	687b      	ldr	r3, [r7, #4]
 8023660:	681b      	ldr	r3, [r3, #0]
 8023662:	2140      	movs	r1, #64	@ 0x40
 8023664:	4618      	mov	r0, r3
 8023666:	f001 fe89 	bl	802537c <SDMMC_CmdBlockLength>
 802366a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 802366c:	6a3b      	ldr	r3, [r7, #32]
 802366e:	2b00      	cmp	r3, #0
 8023670:	d005      	beq.n	802367e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8023672:	687b      	ldr	r3, [r7, #4]
 8023674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023676:	687b      	ldr	r3, [r7, #4]
 8023678:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 802367a:	6a3b      	ldr	r3, [r7, #32]
 802367c:	e0a0      	b.n	80237c0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802367e:	687b      	ldr	r3, [r7, #4]
 8023680:	681a      	ldr	r2, [r3, #0]
 8023682:	687b      	ldr	r3, [r7, #4]
 8023684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023686:	041b      	lsls	r3, r3, #16
 8023688:	4619      	mov	r1, r3
 802368a:	4610      	mov	r0, r2
 802368c:	f001 ffc3 	bl	8025616 <SDMMC_CmdAppCommand>
 8023690:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8023692:	6a3b      	ldr	r3, [r7, #32]
 8023694:	2b00      	cmp	r3, #0
 8023696:	d005      	beq.n	80236a4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8023698:	687b      	ldr	r3, [r7, #4]
 802369a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802369c:	687b      	ldr	r3, [r7, #4]
 802369e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80236a0:	6a3b      	ldr	r3, [r7, #32]
 80236a2:	e08d      	b.n	80237c0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80236a4:	f04f 33ff 	mov.w	r3, #4294967295
 80236a8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80236aa:	2340      	movs	r3, #64	@ 0x40
 80236ac:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80236ae:	2360      	movs	r3, #96	@ 0x60
 80236b0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80236b2:	2302      	movs	r3, #2
 80236b4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80236b6:	2300      	movs	r3, #0
 80236b8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80236ba:	2301      	movs	r3, #1
 80236bc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80236be:	687b      	ldr	r3, [r7, #4]
 80236c0:	681b      	ldr	r3, [r3, #0]
 80236c2:	f107 0208 	add.w	r2, r7, #8
 80236c6:	4611      	mov	r1, r2
 80236c8:	4618      	mov	r0, r3
 80236ca:	f001 fe2b 	bl	8025324 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80236ce:	687b      	ldr	r3, [r7, #4]
 80236d0:	681b      	ldr	r3, [r3, #0]
 80236d2:	4618      	mov	r0, r3
 80236d4:	f002 f8ab 	bl	802582e <SDMMC_CmdStatusRegister>
 80236d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80236da:	6a3b      	ldr	r3, [r7, #32]
 80236dc:	2b00      	cmp	r3, #0
 80236de:	d02b      	beq.n	8023738 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80236e0:	687b      	ldr	r3, [r7, #4]
 80236e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80236e4:	687b      	ldr	r3, [r7, #4]
 80236e6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80236e8:	6a3b      	ldr	r3, [r7, #32]
 80236ea:	e069      	b.n	80237c0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80236ec:	687b      	ldr	r3, [r7, #4]
 80236ee:	681b      	ldr	r3, [r3, #0]
 80236f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80236f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80236f6:	2b00      	cmp	r3, #0
 80236f8:	d013      	beq.n	8023722 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80236fa:	2300      	movs	r3, #0
 80236fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80236fe:	e00d      	b.n	802371c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8023700:	687b      	ldr	r3, [r7, #4]
 8023702:	681b      	ldr	r3, [r3, #0]
 8023704:	4618      	mov	r0, r3
 8023706:	f001 fd85 	bl	8025214 <SDMMC_ReadFIFO>
 802370a:	4602      	mov	r2, r0
 802370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802370e:	601a      	str	r2, [r3, #0]
        pData++;
 8023710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023712:	3304      	adds	r3, #4
 8023714:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8023716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023718:	3301      	adds	r3, #1
 802371a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802371c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802371e:	2b07      	cmp	r3, #7
 8023720:	d9ee      	bls.n	8023700 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8023722:	f7f8 fa17 	bl	801bb54 <HAL_GetTick>
 8023726:	4602      	mov	r2, r0
 8023728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802372a:	1ad3      	subs	r3, r2, r3
 802372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023730:	d102      	bne.n	8023738 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8023732:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8023736:	e043      	b.n	80237c0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8023738:	687b      	ldr	r3, [r7, #4]
 802373a:	681b      	ldr	r3, [r3, #0]
 802373c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802373e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8023742:	2b00      	cmp	r3, #0
 8023744:	d0d2      	beq.n	80236ec <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8023746:	687b      	ldr	r3, [r7, #4]
 8023748:	681b      	ldr	r3, [r3, #0]
 802374a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802374c:	f003 0308 	and.w	r3, r3, #8
 8023750:	2b00      	cmp	r3, #0
 8023752:	d001      	beq.n	8023758 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8023754:	2308      	movs	r3, #8
 8023756:	e033      	b.n	80237c0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8023758:	687b      	ldr	r3, [r7, #4]
 802375a:	681b      	ldr	r3, [r3, #0]
 802375c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802375e:	f003 0302 	and.w	r3, r3, #2
 8023762:	2b00      	cmp	r3, #0
 8023764:	d001      	beq.n	802376a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8023766:	2302      	movs	r3, #2
 8023768:	e02a      	b.n	80237c0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 802376a:	687b      	ldr	r3, [r7, #4]
 802376c:	681b      	ldr	r3, [r3, #0]
 802376e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023770:	f003 0320 	and.w	r3, r3, #32
 8023774:	2b00      	cmp	r3, #0
 8023776:	d017      	beq.n	80237a8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8023778:	2320      	movs	r3, #32
 802377a:	e021      	b.n	80237c0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 802377c:	687b      	ldr	r3, [r7, #4]
 802377e:	681b      	ldr	r3, [r3, #0]
 8023780:	4618      	mov	r0, r3
 8023782:	f001 fd47 	bl	8025214 <SDMMC_ReadFIFO>
 8023786:	4602      	mov	r2, r0
 8023788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802378a:	601a      	str	r2, [r3, #0]
    pData++;
 802378c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802378e:	3304      	adds	r3, #4
 8023790:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8023792:	f7f8 f9df 	bl	801bb54 <HAL_GetTick>
 8023796:	4602      	mov	r2, r0
 8023798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802379a:	1ad3      	subs	r3, r2, r3
 802379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80237a0:	d102      	bne.n	80237a8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80237a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80237a6:	e00b      	b.n	80237c0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80237a8:	687b      	ldr	r3, [r7, #4]
 80237aa:	681b      	ldr	r3, [r3, #0]
 80237ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80237ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80237b2:	2b00      	cmp	r3, #0
 80237b4:	d1e2      	bne.n	802377c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80237b6:	687b      	ldr	r3, [r7, #4]
 80237b8:	681b      	ldr	r3, [r3, #0]
 80237ba:	4a03      	ldr	r2, [pc, #12]	@ (80237c8 <SD_SendSDStatus+0x19c>)
 80237bc:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 80237be:	2300      	movs	r3, #0
}
 80237c0:	4618      	mov	r0, r3
 80237c2:	3730      	adds	r7, #48	@ 0x30
 80237c4:	46bd      	mov	sp, r7
 80237c6:	bd80      	pop	{r7, pc}
 80237c8:	18000f3a 	.word	0x18000f3a

080237cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80237cc:	b580      	push	{r7, lr}
 80237ce:	b084      	sub	sp, #16
 80237d0:	af00      	add	r7, sp, #0
 80237d2:	6078      	str	r0, [r7, #4]
 80237d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80237d6:	683b      	ldr	r3, [r7, #0]
 80237d8:	2b00      	cmp	r3, #0
 80237da:	d102      	bne.n	80237e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80237dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80237e0:	e018      	b.n	8023814 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80237e2:	687b      	ldr	r3, [r7, #4]
 80237e4:	681a      	ldr	r2, [r3, #0]
 80237e6:	687b      	ldr	r3, [r7, #4]
 80237e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80237ea:	041b      	lsls	r3, r3, #16
 80237ec:	4619      	mov	r1, r3
 80237ee:	4610      	mov	r0, r2
 80237f0:	f001 fffa 	bl	80257e8 <SDMMC_CmdSendStatus>
 80237f4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80237f6:	68fb      	ldr	r3, [r7, #12]
 80237f8:	2b00      	cmp	r3, #0
 80237fa:	d001      	beq.n	8023800 <SD_SendStatus+0x34>
  {
    return errorstate;
 80237fc:	68fb      	ldr	r3, [r7, #12]
 80237fe:	e009      	b.n	8023814 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8023800:	687b      	ldr	r3, [r7, #4]
 8023802:	681b      	ldr	r3, [r3, #0]
 8023804:	2100      	movs	r1, #0
 8023806:	4618      	mov	r0, r3
 8023808:	f001 fd79 	bl	80252fe <SDMMC_GetResponse>
 802380c:	4602      	mov	r2, r0
 802380e:	683b      	ldr	r3, [r7, #0]
 8023810:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8023812:	2300      	movs	r3, #0
}
 8023814:	4618      	mov	r0, r3
 8023816:	3710      	adds	r7, #16
 8023818:	46bd      	mov	sp, r7
 802381a:	bd80      	pop	{r7, pc}

0802381c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 802381c:	b580      	push	{r7, lr}
 802381e:	b086      	sub	sp, #24
 8023820:	af00      	add	r7, sp, #0
 8023822:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8023824:	2300      	movs	r3, #0
 8023826:	60fb      	str	r3, [r7, #12]
 8023828:	2300      	movs	r3, #0
 802382a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 802382c:	687b      	ldr	r3, [r7, #4]
 802382e:	681b      	ldr	r3, [r3, #0]
 8023830:	2100      	movs	r1, #0
 8023832:	4618      	mov	r0, r3
 8023834:	f001 fd63 	bl	80252fe <SDMMC_GetResponse>
 8023838:	4603      	mov	r3, r0
 802383a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802383e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8023842:	d102      	bne.n	802384a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8023844:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8023848:	e02f      	b.n	80238aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 802384a:	f107 030c 	add.w	r3, r7, #12
 802384e:	4619      	mov	r1, r3
 8023850:	6878      	ldr	r0, [r7, #4]
 8023852:	f000 f879 	bl	8023948 <SD_FindSCR>
 8023856:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8023858:	697b      	ldr	r3, [r7, #20]
 802385a:	2b00      	cmp	r3, #0
 802385c:	d001      	beq.n	8023862 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 802385e:	697b      	ldr	r3, [r7, #20]
 8023860:	e023      	b.n	80238aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8023862:	693b      	ldr	r3, [r7, #16]
 8023864:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8023868:	2b00      	cmp	r3, #0
 802386a:	d01c      	beq.n	80238a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802386c:	687b      	ldr	r3, [r7, #4]
 802386e:	681a      	ldr	r2, [r3, #0]
 8023870:	687b      	ldr	r3, [r7, #4]
 8023872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023874:	041b      	lsls	r3, r3, #16
 8023876:	4619      	mov	r1, r3
 8023878:	4610      	mov	r0, r2
 802387a:	f001 fecc 	bl	8025616 <SDMMC_CmdAppCommand>
 802387e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8023880:	697b      	ldr	r3, [r7, #20]
 8023882:	2b00      	cmp	r3, #0
 8023884:	d001      	beq.n	802388a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8023886:	697b      	ldr	r3, [r7, #20]
 8023888:	e00f      	b.n	80238aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 802388a:	687b      	ldr	r3, [r7, #4]
 802388c:	681b      	ldr	r3, [r3, #0]
 802388e:	2102      	movs	r1, #2
 8023890:	4618      	mov	r0, r3
 8023892:	f001 ff03 	bl	802569c <SDMMC_CmdBusWidth>
 8023896:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8023898:	697b      	ldr	r3, [r7, #20]
 802389a:	2b00      	cmp	r3, #0
 802389c:	d001      	beq.n	80238a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 802389e:	697b      	ldr	r3, [r7, #20]
 80238a0:	e003      	b.n	80238aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80238a2:	2300      	movs	r3, #0
 80238a4:	e001      	b.n	80238aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80238a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80238aa:	4618      	mov	r0, r3
 80238ac:	3718      	adds	r7, #24
 80238ae:	46bd      	mov	sp, r7
 80238b0:	bd80      	pop	{r7, pc}

080238b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80238b2:	b580      	push	{r7, lr}
 80238b4:	b086      	sub	sp, #24
 80238b6:	af00      	add	r7, sp, #0
 80238b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80238ba:	2300      	movs	r3, #0
 80238bc:	60fb      	str	r3, [r7, #12]
 80238be:	2300      	movs	r3, #0
 80238c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80238c2:	687b      	ldr	r3, [r7, #4]
 80238c4:	681b      	ldr	r3, [r3, #0]
 80238c6:	2100      	movs	r1, #0
 80238c8:	4618      	mov	r0, r3
 80238ca:	f001 fd18 	bl	80252fe <SDMMC_GetResponse>
 80238ce:	4603      	mov	r3, r0
 80238d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80238d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80238d8:	d102      	bne.n	80238e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80238da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80238de:	e02f      	b.n	8023940 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80238e0:	f107 030c 	add.w	r3, r7, #12
 80238e4:	4619      	mov	r1, r3
 80238e6:	6878      	ldr	r0, [r7, #4]
 80238e8:	f000 f82e 	bl	8023948 <SD_FindSCR>
 80238ec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80238ee:	697b      	ldr	r3, [r7, #20]
 80238f0:	2b00      	cmp	r3, #0
 80238f2:	d001      	beq.n	80238f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80238f4:	697b      	ldr	r3, [r7, #20]
 80238f6:	e023      	b.n	8023940 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80238f8:	693b      	ldr	r3, [r7, #16]
 80238fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80238fe:	2b00      	cmp	r3, #0
 8023900:	d01c      	beq.n	802393c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8023902:	687b      	ldr	r3, [r7, #4]
 8023904:	681a      	ldr	r2, [r3, #0]
 8023906:	687b      	ldr	r3, [r7, #4]
 8023908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802390a:	041b      	lsls	r3, r3, #16
 802390c:	4619      	mov	r1, r3
 802390e:	4610      	mov	r0, r2
 8023910:	f001 fe81 	bl	8025616 <SDMMC_CmdAppCommand>
 8023914:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8023916:	697b      	ldr	r3, [r7, #20]
 8023918:	2b00      	cmp	r3, #0
 802391a:	d001      	beq.n	8023920 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 802391c:	697b      	ldr	r3, [r7, #20]
 802391e:	e00f      	b.n	8023940 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8023920:	687b      	ldr	r3, [r7, #4]
 8023922:	681b      	ldr	r3, [r3, #0]
 8023924:	2100      	movs	r1, #0
 8023926:	4618      	mov	r0, r3
 8023928:	f001 feb8 	bl	802569c <SDMMC_CmdBusWidth>
 802392c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 802392e:	697b      	ldr	r3, [r7, #20]
 8023930:	2b00      	cmp	r3, #0
 8023932:	d001      	beq.n	8023938 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8023934:	697b      	ldr	r3, [r7, #20]
 8023936:	e003      	b.n	8023940 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8023938:	2300      	movs	r3, #0
 802393a:	e001      	b.n	8023940 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 802393c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8023940:	4618      	mov	r0, r3
 8023942:	3718      	adds	r7, #24
 8023944:	46bd      	mov	sp, r7
 8023946:	bd80      	pop	{r7, pc}

08023948 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8023948:	b580      	push	{r7, lr}
 802394a:	b08e      	sub	sp, #56	@ 0x38
 802394c:	af00      	add	r7, sp, #0
 802394e:	6078      	str	r0, [r7, #4]
 8023950:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8023952:	f7f8 f8ff 	bl	801bb54 <HAL_GetTick>
 8023956:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8023958:	2300      	movs	r3, #0
 802395a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 802395c:	2300      	movs	r3, #0
 802395e:	60bb      	str	r3, [r7, #8]
 8023960:	2300      	movs	r3, #0
 8023962:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8023964:	683b      	ldr	r3, [r7, #0]
 8023966:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8023968:	687b      	ldr	r3, [r7, #4]
 802396a:	681b      	ldr	r3, [r3, #0]
 802396c:	2108      	movs	r1, #8
 802396e:	4618      	mov	r0, r3
 8023970:	f001 fd04 	bl	802537c <SDMMC_CmdBlockLength>
 8023974:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8023976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023978:	2b00      	cmp	r3, #0
 802397a:	d001      	beq.n	8023980 <SD_FindSCR+0x38>
  {
    return errorstate;
 802397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802397e:	e0ad      	b.n	8023adc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8023980:	687b      	ldr	r3, [r7, #4]
 8023982:	681a      	ldr	r2, [r3, #0]
 8023984:	687b      	ldr	r3, [r7, #4]
 8023986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023988:	041b      	lsls	r3, r3, #16
 802398a:	4619      	mov	r1, r3
 802398c:	4610      	mov	r0, r2
 802398e:	f001 fe42 	bl	8025616 <SDMMC_CmdAppCommand>
 8023992:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8023994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023996:	2b00      	cmp	r3, #0
 8023998:	d001      	beq.n	802399e <SD_FindSCR+0x56>
  {
    return errorstate;
 802399a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802399c:	e09e      	b.n	8023adc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 802399e:	f04f 33ff 	mov.w	r3, #4294967295
 80239a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80239a4:	2308      	movs	r3, #8
 80239a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80239a8:	2330      	movs	r3, #48	@ 0x30
 80239aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80239ac:	2302      	movs	r3, #2
 80239ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80239b0:	2300      	movs	r3, #0
 80239b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80239b4:	2301      	movs	r3, #1
 80239b6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80239b8:	687b      	ldr	r3, [r7, #4]
 80239ba:	681b      	ldr	r3, [r3, #0]
 80239bc:	f107 0210 	add.w	r2, r7, #16
 80239c0:	4611      	mov	r1, r2
 80239c2:	4618      	mov	r0, r3
 80239c4:	f001 fcae 	bl	8025324 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80239c8:	687b      	ldr	r3, [r7, #4]
 80239ca:	681b      	ldr	r3, [r3, #0]
 80239cc:	4618      	mov	r0, r3
 80239ce:	f001 fe88 	bl	80256e2 <SDMMC_CmdSendSCR>
 80239d2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80239d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80239d6:	2b00      	cmp	r3, #0
 80239d8:	d027      	beq.n	8023a2a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80239da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80239dc:	e07e      	b.n	8023adc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80239de:	687b      	ldr	r3, [r7, #4]
 80239e0:	681b      	ldr	r3, [r3, #0]
 80239e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80239e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80239e8:	2b00      	cmp	r3, #0
 80239ea:	d113      	bne.n	8023a14 <SD_FindSCR+0xcc>
 80239ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80239ee:	2b00      	cmp	r3, #0
 80239f0:	d110      	bne.n	8023a14 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80239f2:	687b      	ldr	r3, [r7, #4]
 80239f4:	681b      	ldr	r3, [r3, #0]
 80239f6:	4618      	mov	r0, r3
 80239f8:	f001 fc0c 	bl	8025214 <SDMMC_ReadFIFO>
 80239fc:	4603      	mov	r3, r0
 80239fe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8023a00:	687b      	ldr	r3, [r7, #4]
 8023a02:	681b      	ldr	r3, [r3, #0]
 8023a04:	4618      	mov	r0, r3
 8023a06:	f001 fc05 	bl	8025214 <SDMMC_ReadFIFO>
 8023a0a:	4603      	mov	r3, r0
 8023a0c:	60fb      	str	r3, [r7, #12]
      index++;
 8023a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023a10:	3301      	adds	r3, #1
 8023a12:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8023a14:	f7f8 f89e 	bl	801bb54 <HAL_GetTick>
 8023a18:	4602      	mov	r2, r0
 8023a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023a1c:	1ad3      	subs	r3, r2, r3
 8023a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023a22:	d102      	bne.n	8023a2a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8023a24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8023a28:	e058      	b.n	8023adc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8023a2a:	687b      	ldr	r3, [r7, #4]
 8023a2c:	681b      	ldr	r3, [r3, #0]
 8023a2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023a30:	f240 532a 	movw	r3, #1322	@ 0x52a
 8023a34:	4013      	ands	r3, r2
 8023a36:	2b00      	cmp	r3, #0
 8023a38:	d0d1      	beq.n	80239de <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8023a3a:	687b      	ldr	r3, [r7, #4]
 8023a3c:	681b      	ldr	r3, [r3, #0]
 8023a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023a40:	f003 0308 	and.w	r3, r3, #8
 8023a44:	2b00      	cmp	r3, #0
 8023a46:	d005      	beq.n	8023a54 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8023a48:	687b      	ldr	r3, [r7, #4]
 8023a4a:	681b      	ldr	r3, [r3, #0]
 8023a4c:	2208      	movs	r2, #8
 8023a4e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8023a50:	2308      	movs	r3, #8
 8023a52:	e043      	b.n	8023adc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8023a54:	687b      	ldr	r3, [r7, #4]
 8023a56:	681b      	ldr	r3, [r3, #0]
 8023a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023a5a:	f003 0302 	and.w	r3, r3, #2
 8023a5e:	2b00      	cmp	r3, #0
 8023a60:	d005      	beq.n	8023a6e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8023a62:	687b      	ldr	r3, [r7, #4]
 8023a64:	681b      	ldr	r3, [r3, #0]
 8023a66:	2202      	movs	r2, #2
 8023a68:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8023a6a:	2302      	movs	r3, #2
 8023a6c:	e036      	b.n	8023adc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8023a6e:	687b      	ldr	r3, [r7, #4]
 8023a70:	681b      	ldr	r3, [r3, #0]
 8023a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023a74:	f003 0320 	and.w	r3, r3, #32
 8023a78:	2b00      	cmp	r3, #0
 8023a7a:	d005      	beq.n	8023a88 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8023a7c:	687b      	ldr	r3, [r7, #4]
 8023a7e:	681b      	ldr	r3, [r3, #0]
 8023a80:	2220      	movs	r2, #32
 8023a82:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8023a84:	2320      	movs	r3, #32
 8023a86:	e029      	b.n	8023adc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8023a88:	687b      	ldr	r3, [r7, #4]
 8023a8a:	681b      	ldr	r3, [r3, #0]
 8023a8c:	4a15      	ldr	r2, [pc, #84]	@ (8023ae4 <SD_FindSCR+0x19c>)
 8023a8e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8023a90:	68fb      	ldr	r3, [r7, #12]
 8023a92:	061a      	lsls	r2, r3, #24
 8023a94:	68fb      	ldr	r3, [r7, #12]
 8023a96:	021b      	lsls	r3, r3, #8
 8023a98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8023a9c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8023a9e:	68fb      	ldr	r3, [r7, #12]
 8023aa0:	0a1b      	lsrs	r3, r3, #8
 8023aa2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8023aa6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8023aa8:	68fb      	ldr	r3, [r7, #12]
 8023aaa:	0e1b      	lsrs	r3, r3, #24
 8023aac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8023aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023ab0:	601a      	str	r2, [r3, #0]
    scr++;
 8023ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023ab4:	3304      	adds	r3, #4
 8023ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8023ab8:	68bb      	ldr	r3, [r7, #8]
 8023aba:	061a      	lsls	r2, r3, #24
 8023abc:	68bb      	ldr	r3, [r7, #8]
 8023abe:	021b      	lsls	r3, r3, #8
 8023ac0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8023ac4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8023ac6:	68bb      	ldr	r3, [r7, #8]
 8023ac8:	0a1b      	lsrs	r3, r3, #8
 8023aca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8023ace:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8023ad0:	68bb      	ldr	r3, [r7, #8]
 8023ad2:	0e1b      	lsrs	r3, r3, #24
 8023ad4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8023ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023ad8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8023ada:	2300      	movs	r3, #0
}
 8023adc:	4618      	mov	r0, r3
 8023ade:	3738      	adds	r7, #56	@ 0x38
 8023ae0:	46bd      	mov	sp, r7
 8023ae2:	bd80      	pop	{r7, pc}
 8023ae4:	18000f3a 	.word	0x18000f3a

08023ae8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8023ae8:	b580      	push	{r7, lr}
 8023aea:	b086      	sub	sp, #24
 8023aec:	af00      	add	r7, sp, #0
 8023aee:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8023af0:	687b      	ldr	r3, [r7, #4]
 8023af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023af4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8023af6:	687b      	ldr	r3, [r7, #4]
 8023af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023afa:	2b1f      	cmp	r3, #31
 8023afc:	d936      	bls.n	8023b6c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8023afe:	2300      	movs	r3, #0
 8023b00:	617b      	str	r3, [r7, #20]
 8023b02:	e027      	b.n	8023b54 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8023b04:	687b      	ldr	r3, [r7, #4]
 8023b06:	681b      	ldr	r3, [r3, #0]
 8023b08:	4618      	mov	r0, r3
 8023b0a:	f001 fb83 	bl	8025214 <SDMMC_ReadFIFO>
 8023b0e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8023b10:	68fb      	ldr	r3, [r7, #12]
 8023b12:	b2da      	uxtb	r2, r3
 8023b14:	693b      	ldr	r3, [r7, #16]
 8023b16:	701a      	strb	r2, [r3, #0]
      tmp++;
 8023b18:	693b      	ldr	r3, [r7, #16]
 8023b1a:	3301      	adds	r3, #1
 8023b1c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8023b1e:	68fb      	ldr	r3, [r7, #12]
 8023b20:	0a1b      	lsrs	r3, r3, #8
 8023b22:	b2da      	uxtb	r2, r3
 8023b24:	693b      	ldr	r3, [r7, #16]
 8023b26:	701a      	strb	r2, [r3, #0]
      tmp++;
 8023b28:	693b      	ldr	r3, [r7, #16]
 8023b2a:	3301      	adds	r3, #1
 8023b2c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8023b2e:	68fb      	ldr	r3, [r7, #12]
 8023b30:	0c1b      	lsrs	r3, r3, #16
 8023b32:	b2da      	uxtb	r2, r3
 8023b34:	693b      	ldr	r3, [r7, #16]
 8023b36:	701a      	strb	r2, [r3, #0]
      tmp++;
 8023b38:	693b      	ldr	r3, [r7, #16]
 8023b3a:	3301      	adds	r3, #1
 8023b3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8023b3e:	68fb      	ldr	r3, [r7, #12]
 8023b40:	0e1b      	lsrs	r3, r3, #24
 8023b42:	b2da      	uxtb	r2, r3
 8023b44:	693b      	ldr	r3, [r7, #16]
 8023b46:	701a      	strb	r2, [r3, #0]
      tmp++;
 8023b48:	693b      	ldr	r3, [r7, #16]
 8023b4a:	3301      	adds	r3, #1
 8023b4c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8023b4e:	697b      	ldr	r3, [r7, #20]
 8023b50:	3301      	adds	r3, #1
 8023b52:	617b      	str	r3, [r7, #20]
 8023b54:	697b      	ldr	r3, [r7, #20]
 8023b56:	2b07      	cmp	r3, #7
 8023b58:	d9d4      	bls.n	8023b04 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8023b5a:	687b      	ldr	r3, [r7, #4]
 8023b5c:	693a      	ldr	r2, [r7, #16]
 8023b5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8023b60:	687b      	ldr	r3, [r7, #4]
 8023b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023b64:	f1a3 0220 	sub.w	r2, r3, #32
 8023b68:	687b      	ldr	r3, [r7, #4]
 8023b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8023b6c:	bf00      	nop
 8023b6e:	3718      	adds	r7, #24
 8023b70:	46bd      	mov	sp, r7
 8023b72:	bd80      	pop	{r7, pc}

08023b74 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8023b74:	b580      	push	{r7, lr}
 8023b76:	b086      	sub	sp, #24
 8023b78:	af00      	add	r7, sp, #0
 8023b7a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8023b7c:	687b      	ldr	r3, [r7, #4]
 8023b7e:	69db      	ldr	r3, [r3, #28]
 8023b80:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8023b82:	687b      	ldr	r3, [r7, #4]
 8023b84:	6a1b      	ldr	r3, [r3, #32]
 8023b86:	2b1f      	cmp	r3, #31
 8023b88:	d93a      	bls.n	8023c00 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8023b8a:	2300      	movs	r3, #0
 8023b8c:	617b      	str	r3, [r7, #20]
 8023b8e:	e02b      	b.n	8023be8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8023b90:	693b      	ldr	r3, [r7, #16]
 8023b92:	781b      	ldrb	r3, [r3, #0]
 8023b94:	60fb      	str	r3, [r7, #12]
      tmp++;
 8023b96:	693b      	ldr	r3, [r7, #16]
 8023b98:	3301      	adds	r3, #1
 8023b9a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8023b9c:	693b      	ldr	r3, [r7, #16]
 8023b9e:	781b      	ldrb	r3, [r3, #0]
 8023ba0:	021a      	lsls	r2, r3, #8
 8023ba2:	68fb      	ldr	r3, [r7, #12]
 8023ba4:	4313      	orrs	r3, r2
 8023ba6:	60fb      	str	r3, [r7, #12]
      tmp++;
 8023ba8:	693b      	ldr	r3, [r7, #16]
 8023baa:	3301      	adds	r3, #1
 8023bac:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8023bae:	693b      	ldr	r3, [r7, #16]
 8023bb0:	781b      	ldrb	r3, [r3, #0]
 8023bb2:	041a      	lsls	r2, r3, #16
 8023bb4:	68fb      	ldr	r3, [r7, #12]
 8023bb6:	4313      	orrs	r3, r2
 8023bb8:	60fb      	str	r3, [r7, #12]
      tmp++;
 8023bba:	693b      	ldr	r3, [r7, #16]
 8023bbc:	3301      	adds	r3, #1
 8023bbe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8023bc0:	693b      	ldr	r3, [r7, #16]
 8023bc2:	781b      	ldrb	r3, [r3, #0]
 8023bc4:	061a      	lsls	r2, r3, #24
 8023bc6:	68fb      	ldr	r3, [r7, #12]
 8023bc8:	4313      	orrs	r3, r2
 8023bca:	60fb      	str	r3, [r7, #12]
      tmp++;
 8023bcc:	693b      	ldr	r3, [r7, #16]
 8023bce:	3301      	adds	r3, #1
 8023bd0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8023bd2:	687b      	ldr	r3, [r7, #4]
 8023bd4:	681b      	ldr	r3, [r3, #0]
 8023bd6:	f107 020c 	add.w	r2, r7, #12
 8023bda:	4611      	mov	r1, r2
 8023bdc:	4618      	mov	r0, r3
 8023bde:	f001 fb26 	bl	802522e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8023be2:	697b      	ldr	r3, [r7, #20]
 8023be4:	3301      	adds	r3, #1
 8023be6:	617b      	str	r3, [r7, #20]
 8023be8:	697b      	ldr	r3, [r7, #20]
 8023bea:	2b07      	cmp	r3, #7
 8023bec:	d9d0      	bls.n	8023b90 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8023bee:	687b      	ldr	r3, [r7, #4]
 8023bf0:	693a      	ldr	r2, [r7, #16]
 8023bf2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8023bf4:	687b      	ldr	r3, [r7, #4]
 8023bf6:	6a1b      	ldr	r3, [r3, #32]
 8023bf8:	f1a3 0220 	sub.w	r2, r3, #32
 8023bfc:	687b      	ldr	r3, [r7, #4]
 8023bfe:	621a      	str	r2, [r3, #32]
  }
}
 8023c00:	bf00      	nop
 8023c02:	3718      	adds	r7, #24
 8023c04:	46bd      	mov	sp, r7
 8023c06:	bd80      	pop	{r7, pc}

08023c08 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8023c08:	b480      	push	{r7}
 8023c0a:	b083      	sub	sp, #12
 8023c0c:	af00      	add	r7, sp, #0
 8023c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8023c10:	bf00      	nop
 8023c12:	370c      	adds	r7, #12
 8023c14:	46bd      	mov	sp, r7
 8023c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c1a:	4770      	bx	lr

08023c1c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8023c1c:	b480      	push	{r7}
 8023c1e:	b083      	sub	sp, #12
 8023c20:	af00      	add	r7, sp, #0
 8023c22:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8023c24:	bf00      	nop
 8023c26:	370c      	adds	r7, #12
 8023c28:	46bd      	mov	sp, r7
 8023c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c2e:	4770      	bx	lr

08023c30 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8023c30:	b480      	push	{r7}
 8023c32:	b083      	sub	sp, #12
 8023c34:	af00      	add	r7, sp, #0
 8023c36:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8023c38:	bf00      	nop
 8023c3a:	370c      	adds	r7, #12
 8023c3c:	46bd      	mov	sp, r7
 8023c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c42:	4770      	bx	lr

08023c44 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8023c44:	b480      	push	{r7}
 8023c46:	b083      	sub	sp, #12
 8023c48:	af00      	add	r7, sp, #0
 8023c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8023c4c:	bf00      	nop
 8023c4e:	370c      	adds	r7, #12
 8023c50:	46bd      	mov	sp, r7
 8023c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c56:	4770      	bx	lr

08023c58 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8023c58:	b580      	push	{r7, lr}
 8023c5a:	b084      	sub	sp, #16
 8023c5c:	af00      	add	r7, sp, #0
 8023c5e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8023c60:	687b      	ldr	r3, [r7, #4]
 8023c62:	2b00      	cmp	r3, #0
 8023c64:	d101      	bne.n	8023c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8023c66:	2301      	movs	r3, #1
 8023c68:	e10f      	b.n	8023e8a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8023c6a:	687b      	ldr	r3, [r7, #4]
 8023c6c:	2200      	movs	r2, #0
 8023c6e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8023c70:	687b      	ldr	r3, [r7, #4]
 8023c72:	681b      	ldr	r3, [r3, #0]
 8023c74:	4a87      	ldr	r2, [pc, #540]	@ (8023e94 <HAL_SPI_Init+0x23c>)
 8023c76:	4293      	cmp	r3, r2
 8023c78:	d00f      	beq.n	8023c9a <HAL_SPI_Init+0x42>
 8023c7a:	687b      	ldr	r3, [r7, #4]
 8023c7c:	681b      	ldr	r3, [r3, #0]
 8023c7e:	4a86      	ldr	r2, [pc, #536]	@ (8023e98 <HAL_SPI_Init+0x240>)
 8023c80:	4293      	cmp	r3, r2
 8023c82:	d00a      	beq.n	8023c9a <HAL_SPI_Init+0x42>
 8023c84:	687b      	ldr	r3, [r7, #4]
 8023c86:	681b      	ldr	r3, [r3, #0]
 8023c88:	4a84      	ldr	r2, [pc, #528]	@ (8023e9c <HAL_SPI_Init+0x244>)
 8023c8a:	4293      	cmp	r3, r2
 8023c8c:	d005      	beq.n	8023c9a <HAL_SPI_Init+0x42>
 8023c8e:	687b      	ldr	r3, [r7, #4]
 8023c90:	68db      	ldr	r3, [r3, #12]
 8023c92:	2b0f      	cmp	r3, #15
 8023c94:	d901      	bls.n	8023c9a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8023c96:	2301      	movs	r3, #1
 8023c98:	e0f7      	b.n	8023e8a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8023c9a:	6878      	ldr	r0, [r7, #4]
 8023c9c:	f000 f90a 	bl	8023eb4 <SPI_GetPacketSize>
 8023ca0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8023ca2:	687b      	ldr	r3, [r7, #4]
 8023ca4:	681b      	ldr	r3, [r3, #0]
 8023ca6:	4a7b      	ldr	r2, [pc, #492]	@ (8023e94 <HAL_SPI_Init+0x23c>)
 8023ca8:	4293      	cmp	r3, r2
 8023caa:	d00c      	beq.n	8023cc6 <HAL_SPI_Init+0x6e>
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	681b      	ldr	r3, [r3, #0]
 8023cb0:	4a79      	ldr	r2, [pc, #484]	@ (8023e98 <HAL_SPI_Init+0x240>)
 8023cb2:	4293      	cmp	r3, r2
 8023cb4:	d007      	beq.n	8023cc6 <HAL_SPI_Init+0x6e>
 8023cb6:	687b      	ldr	r3, [r7, #4]
 8023cb8:	681b      	ldr	r3, [r3, #0]
 8023cba:	4a78      	ldr	r2, [pc, #480]	@ (8023e9c <HAL_SPI_Init+0x244>)
 8023cbc:	4293      	cmp	r3, r2
 8023cbe:	d002      	beq.n	8023cc6 <HAL_SPI_Init+0x6e>
 8023cc0:	68fb      	ldr	r3, [r7, #12]
 8023cc2:	2b08      	cmp	r3, #8
 8023cc4:	d811      	bhi.n	8023cea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8023cc6:	687b      	ldr	r3, [r7, #4]
 8023cc8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8023cca:	4a72      	ldr	r2, [pc, #456]	@ (8023e94 <HAL_SPI_Init+0x23c>)
 8023ccc:	4293      	cmp	r3, r2
 8023cce:	d009      	beq.n	8023ce4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8023cd0:	687b      	ldr	r3, [r7, #4]
 8023cd2:	681b      	ldr	r3, [r3, #0]
 8023cd4:	4a70      	ldr	r2, [pc, #448]	@ (8023e98 <HAL_SPI_Init+0x240>)
 8023cd6:	4293      	cmp	r3, r2
 8023cd8:	d004      	beq.n	8023ce4 <HAL_SPI_Init+0x8c>
 8023cda:	687b      	ldr	r3, [r7, #4]
 8023cdc:	681b      	ldr	r3, [r3, #0]
 8023cde:	4a6f      	ldr	r2, [pc, #444]	@ (8023e9c <HAL_SPI_Init+0x244>)
 8023ce0:	4293      	cmp	r3, r2
 8023ce2:	d104      	bne.n	8023cee <HAL_SPI_Init+0x96>
 8023ce4:	68fb      	ldr	r3, [r7, #12]
 8023ce6:	2b10      	cmp	r3, #16
 8023ce8:	d901      	bls.n	8023cee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8023cea:	2301      	movs	r3, #1
 8023cec:	e0cd      	b.n	8023e8a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8023cee:	687b      	ldr	r3, [r7, #4]
 8023cf0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8023cf4:	b2db      	uxtb	r3, r3
 8023cf6:	2b00      	cmp	r3, #0
 8023cf8:	d106      	bne.n	8023d08 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8023cfa:	687b      	ldr	r3, [r7, #4]
 8023cfc:	2200      	movs	r2, #0
 8023cfe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8023d02:	6878      	ldr	r0, [r7, #4]
 8023d04:	f000 f8cc 	bl	8023ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8023d08:	687b      	ldr	r3, [r7, #4]
 8023d0a:	2202      	movs	r2, #2
 8023d0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8023d10:	687b      	ldr	r3, [r7, #4]
 8023d12:	681b      	ldr	r3, [r3, #0]
 8023d14:	681a      	ldr	r2, [r3, #0]
 8023d16:	687b      	ldr	r3, [r7, #4]
 8023d18:	681b      	ldr	r3, [r3, #0]
 8023d1a:	f022 0201 	bic.w	r2, r2, #1
 8023d1e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8023d20:	687b      	ldr	r3, [r7, #4]
 8023d22:	681b      	ldr	r3, [r3, #0]
 8023d24:	689b      	ldr	r3, [r3, #8]
 8023d26:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8023d2a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8023d2c:	687b      	ldr	r3, [r7, #4]
 8023d2e:	699b      	ldr	r3, [r3, #24]
 8023d30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8023d34:	d119      	bne.n	8023d6a <HAL_SPI_Init+0x112>
 8023d36:	687b      	ldr	r3, [r7, #4]
 8023d38:	685b      	ldr	r3, [r3, #4]
 8023d3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8023d3e:	d103      	bne.n	8023d48 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8023d40:	687b      	ldr	r3, [r7, #4]
 8023d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8023d44:	2b00      	cmp	r3, #0
 8023d46:	d008      	beq.n	8023d5a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8023d48:	687b      	ldr	r3, [r7, #4]
 8023d4a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8023d4c:	2b00      	cmp	r3, #0
 8023d4e:	d10c      	bne.n	8023d6a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8023d50:	687b      	ldr	r3, [r7, #4]
 8023d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8023d54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8023d58:	d107      	bne.n	8023d6a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8023d5a:	687b      	ldr	r3, [r7, #4]
 8023d5c:	681b      	ldr	r3, [r3, #0]
 8023d5e:	681a      	ldr	r2, [r3, #0]
 8023d60:	687b      	ldr	r3, [r7, #4]
 8023d62:	681b      	ldr	r3, [r3, #0]
 8023d64:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8023d68:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8023d6a:	687b      	ldr	r3, [r7, #4]
 8023d6c:	685b      	ldr	r3, [r3, #4]
 8023d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8023d72:	2b00      	cmp	r3, #0
 8023d74:	d00f      	beq.n	8023d96 <HAL_SPI_Init+0x13e>
 8023d76:	687b      	ldr	r3, [r7, #4]
 8023d78:	68db      	ldr	r3, [r3, #12]
 8023d7a:	2b06      	cmp	r3, #6
 8023d7c:	d90b      	bls.n	8023d96 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8023d7e:	687b      	ldr	r3, [r7, #4]
 8023d80:	681b      	ldr	r3, [r3, #0]
 8023d82:	681b      	ldr	r3, [r3, #0]
 8023d84:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8023d88:	687b      	ldr	r3, [r7, #4]
 8023d8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8023d8c:	687b      	ldr	r3, [r7, #4]
 8023d8e:	681b      	ldr	r3, [r3, #0]
 8023d90:	430a      	orrs	r2, r1
 8023d92:	601a      	str	r2, [r3, #0]
 8023d94:	e007      	b.n	8023da6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8023d96:	687b      	ldr	r3, [r7, #4]
 8023d98:	681b      	ldr	r3, [r3, #0]
 8023d9a:	681a      	ldr	r2, [r3, #0]
 8023d9c:	687b      	ldr	r3, [r7, #4]
 8023d9e:	681b      	ldr	r3, [r3, #0]
 8023da0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8023da4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8023da6:	687b      	ldr	r3, [r7, #4]
 8023da8:	69da      	ldr	r2, [r3, #28]
 8023daa:	687b      	ldr	r3, [r7, #4]
 8023dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023dae:	431a      	orrs	r2, r3
 8023db0:	68bb      	ldr	r3, [r7, #8]
 8023db2:	431a      	orrs	r2, r3
 8023db4:	687b      	ldr	r3, [r7, #4]
 8023db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023db8:	ea42 0103 	orr.w	r1, r2, r3
 8023dbc:	687b      	ldr	r3, [r7, #4]
 8023dbe:	68da      	ldr	r2, [r3, #12]
 8023dc0:	687b      	ldr	r3, [r7, #4]
 8023dc2:	681b      	ldr	r3, [r3, #0]
 8023dc4:	430a      	orrs	r2, r1
 8023dc6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8023dc8:	687b      	ldr	r3, [r7, #4]
 8023dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023dcc:	687b      	ldr	r3, [r7, #4]
 8023dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023dd0:	431a      	orrs	r2, r3
 8023dd2:	687b      	ldr	r3, [r7, #4]
 8023dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023dd6:	431a      	orrs	r2, r3
 8023dd8:	687b      	ldr	r3, [r7, #4]
 8023dda:	699b      	ldr	r3, [r3, #24]
 8023ddc:	431a      	orrs	r2, r3
 8023dde:	687b      	ldr	r3, [r7, #4]
 8023de0:	691b      	ldr	r3, [r3, #16]
 8023de2:	431a      	orrs	r2, r3
 8023de4:	687b      	ldr	r3, [r7, #4]
 8023de6:	695b      	ldr	r3, [r3, #20]
 8023de8:	431a      	orrs	r2, r3
 8023dea:	687b      	ldr	r3, [r7, #4]
 8023dec:	6a1b      	ldr	r3, [r3, #32]
 8023dee:	431a      	orrs	r2, r3
 8023df0:	687b      	ldr	r3, [r7, #4]
 8023df2:	685b      	ldr	r3, [r3, #4]
 8023df4:	431a      	orrs	r2, r3
 8023df6:	687b      	ldr	r3, [r7, #4]
 8023df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8023dfa:	431a      	orrs	r2, r3
 8023dfc:	687b      	ldr	r3, [r7, #4]
 8023dfe:	689b      	ldr	r3, [r3, #8]
 8023e00:	431a      	orrs	r2, r3
 8023e02:	687b      	ldr	r3, [r7, #4]
 8023e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8023e06:	ea42 0103 	orr.w	r1, r2, r3
 8023e0a:	687b      	ldr	r3, [r7, #4]
 8023e0c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8023e0e:	687b      	ldr	r3, [r7, #4]
 8023e10:	681b      	ldr	r3, [r3, #0]
 8023e12:	430a      	orrs	r2, r1
 8023e14:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8023e16:	687b      	ldr	r3, [r7, #4]
 8023e18:	685b      	ldr	r3, [r3, #4]
 8023e1a:	2b00      	cmp	r3, #0
 8023e1c:	d113      	bne.n	8023e46 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8023e1e:	687b      	ldr	r3, [r7, #4]
 8023e20:	681b      	ldr	r3, [r3, #0]
 8023e22:	689b      	ldr	r3, [r3, #8]
 8023e24:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8023e28:	687b      	ldr	r3, [r7, #4]
 8023e2a:	681b      	ldr	r3, [r3, #0]
 8023e2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8023e30:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8023e32:	687b      	ldr	r3, [r7, #4]
 8023e34:	681b      	ldr	r3, [r3, #0]
 8023e36:	689b      	ldr	r3, [r3, #8]
 8023e38:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8023e3c:	687b      	ldr	r3, [r7, #4]
 8023e3e:	681b      	ldr	r3, [r3, #0]
 8023e40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8023e44:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8023e46:	687b      	ldr	r3, [r7, #4]
 8023e48:	681b      	ldr	r3, [r3, #0]
 8023e4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8023e4c:	687b      	ldr	r3, [r7, #4]
 8023e4e:	681b      	ldr	r3, [r3, #0]
 8023e50:	f022 0201 	bic.w	r2, r2, #1
 8023e54:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8023e56:	687b      	ldr	r3, [r7, #4]
 8023e58:	685b      	ldr	r3, [r3, #4]
 8023e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8023e5e:	2b00      	cmp	r3, #0
 8023e60:	d00a      	beq.n	8023e78 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8023e62:	687b      	ldr	r3, [r7, #4]
 8023e64:	681b      	ldr	r3, [r3, #0]
 8023e66:	68db      	ldr	r3, [r3, #12]
 8023e68:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8023e6c:	687b      	ldr	r3, [r7, #4]
 8023e6e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8023e70:	687b      	ldr	r3, [r7, #4]
 8023e72:	681b      	ldr	r3, [r3, #0]
 8023e74:	430a      	orrs	r2, r1
 8023e76:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8023e78:	687b      	ldr	r3, [r7, #4]
 8023e7a:	2200      	movs	r2, #0
 8023e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8023e80:	687b      	ldr	r3, [r7, #4]
 8023e82:	2201      	movs	r2, #1
 8023e84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8023e88:	2300      	movs	r3, #0
}
 8023e8a:	4618      	mov	r0, r3
 8023e8c:	3710      	adds	r7, #16
 8023e8e:	46bd      	mov	sp, r7
 8023e90:	bd80      	pop	{r7, pc}
 8023e92:	bf00      	nop
 8023e94:	40013000 	.word	0x40013000
 8023e98:	40003800 	.word	0x40003800
 8023e9c:	40003c00 	.word	0x40003c00

08023ea0 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8023ea0:	b480      	push	{r7}
 8023ea2:	b083      	sub	sp, #12
 8023ea4:	af00      	add	r7, sp, #0
 8023ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8023ea8:	bf00      	nop
 8023eaa:	370c      	adds	r7, #12
 8023eac:	46bd      	mov	sp, r7
 8023eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023eb2:	4770      	bx	lr

08023eb4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8023eb4:	b480      	push	{r7}
 8023eb6:	b085      	sub	sp, #20
 8023eb8:	af00      	add	r7, sp, #0
 8023eba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8023ebc:	687b      	ldr	r3, [r7, #4]
 8023ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023ec0:	095b      	lsrs	r3, r3, #5
 8023ec2:	3301      	adds	r3, #1
 8023ec4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8023ec6:	687b      	ldr	r3, [r7, #4]
 8023ec8:	68db      	ldr	r3, [r3, #12]
 8023eca:	3301      	adds	r3, #1
 8023ecc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8023ece:	68bb      	ldr	r3, [r7, #8]
 8023ed0:	3307      	adds	r3, #7
 8023ed2:	08db      	lsrs	r3, r3, #3
 8023ed4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8023ed6:	68bb      	ldr	r3, [r7, #8]
 8023ed8:	68fa      	ldr	r2, [r7, #12]
 8023eda:	fb02 f303 	mul.w	r3, r2, r3
}
 8023ede:	4618      	mov	r0, r3
 8023ee0:	3714      	adds	r7, #20
 8023ee2:	46bd      	mov	sp, r7
 8023ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ee8:	4770      	bx	lr

08023eea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8023eea:	b580      	push	{r7, lr}
 8023eec:	b082      	sub	sp, #8
 8023eee:	af00      	add	r7, sp, #0
 8023ef0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8023ef2:	687b      	ldr	r3, [r7, #4]
 8023ef4:	2b00      	cmp	r3, #0
 8023ef6:	d101      	bne.n	8023efc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8023ef8:	2301      	movs	r3, #1
 8023efa:	e042      	b.n	8023f82 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8023efc:	687b      	ldr	r3, [r7, #4]
 8023efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8023f02:	2b00      	cmp	r3, #0
 8023f04:	d106      	bne.n	8023f14 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8023f06:	687b      	ldr	r3, [r7, #4]
 8023f08:	2200      	movs	r2, #0
 8023f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8023f0e:	6878      	ldr	r0, [r7, #4]
 8023f10:	f7ea fecc 	bl	800ecac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8023f14:	687b      	ldr	r3, [r7, #4]
 8023f16:	2224      	movs	r2, #36	@ 0x24
 8023f18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8023f1c:	687b      	ldr	r3, [r7, #4]
 8023f1e:	681b      	ldr	r3, [r3, #0]
 8023f20:	681a      	ldr	r2, [r3, #0]
 8023f22:	687b      	ldr	r3, [r7, #4]
 8023f24:	681b      	ldr	r3, [r3, #0]
 8023f26:	f022 0201 	bic.w	r2, r2, #1
 8023f2a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8023f2c:	687b      	ldr	r3, [r7, #4]
 8023f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023f30:	2b00      	cmp	r3, #0
 8023f32:	d002      	beq.n	8023f3a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8023f34:	6878      	ldr	r0, [r7, #4]
 8023f36:	f000 fe1f 	bl	8024b78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8023f3a:	6878      	ldr	r0, [r7, #4]
 8023f3c:	f000 f8b4 	bl	80240a8 <UART_SetConfig>
 8023f40:	4603      	mov	r3, r0
 8023f42:	2b01      	cmp	r3, #1
 8023f44:	d101      	bne.n	8023f4a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8023f46:	2301      	movs	r3, #1
 8023f48:	e01b      	b.n	8023f82 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8023f4a:	687b      	ldr	r3, [r7, #4]
 8023f4c:	681b      	ldr	r3, [r3, #0]
 8023f4e:	685a      	ldr	r2, [r3, #4]
 8023f50:	687b      	ldr	r3, [r7, #4]
 8023f52:	681b      	ldr	r3, [r3, #0]
 8023f54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8023f58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8023f5a:	687b      	ldr	r3, [r7, #4]
 8023f5c:	681b      	ldr	r3, [r3, #0]
 8023f5e:	689a      	ldr	r2, [r3, #8]
 8023f60:	687b      	ldr	r3, [r7, #4]
 8023f62:	681b      	ldr	r3, [r3, #0]
 8023f64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8023f68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8023f6a:	687b      	ldr	r3, [r7, #4]
 8023f6c:	681b      	ldr	r3, [r3, #0]
 8023f6e:	681a      	ldr	r2, [r3, #0]
 8023f70:	687b      	ldr	r3, [r7, #4]
 8023f72:	681b      	ldr	r3, [r3, #0]
 8023f74:	f042 0201 	orr.w	r2, r2, #1
 8023f78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8023f7a:	6878      	ldr	r0, [r7, #4]
 8023f7c:	f000 fe9e 	bl	8024cbc <UART_CheckIdleState>
 8023f80:	4603      	mov	r3, r0
}
 8023f82:	4618      	mov	r0, r3
 8023f84:	3708      	adds	r7, #8
 8023f86:	46bd      	mov	sp, r7
 8023f88:	bd80      	pop	{r7, pc}

08023f8a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8023f8a:	b580      	push	{r7, lr}
 8023f8c:	b08a      	sub	sp, #40	@ 0x28
 8023f8e:	af02      	add	r7, sp, #8
 8023f90:	60f8      	str	r0, [r7, #12]
 8023f92:	60b9      	str	r1, [r7, #8]
 8023f94:	603b      	str	r3, [r7, #0]
 8023f96:	4613      	mov	r3, r2
 8023f98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8023f9a:	68fb      	ldr	r3, [r7, #12]
 8023f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8023fa0:	2b20      	cmp	r3, #32
 8023fa2:	d17b      	bne.n	802409c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8023fa4:	68bb      	ldr	r3, [r7, #8]
 8023fa6:	2b00      	cmp	r3, #0
 8023fa8:	d002      	beq.n	8023fb0 <HAL_UART_Transmit+0x26>
 8023faa:	88fb      	ldrh	r3, [r7, #6]
 8023fac:	2b00      	cmp	r3, #0
 8023fae:	d101      	bne.n	8023fb4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8023fb0:	2301      	movs	r3, #1
 8023fb2:	e074      	b.n	802409e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023fb4:	68fb      	ldr	r3, [r7, #12]
 8023fb6:	2200      	movs	r2, #0
 8023fb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8023fbc:	68fb      	ldr	r3, [r7, #12]
 8023fbe:	2221      	movs	r2, #33	@ 0x21
 8023fc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8023fc4:	f7f7 fdc6 	bl	801bb54 <HAL_GetTick>
 8023fc8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8023fca:	68fb      	ldr	r3, [r7, #12]
 8023fcc:	88fa      	ldrh	r2, [r7, #6]
 8023fce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8023fd2:	68fb      	ldr	r3, [r7, #12]
 8023fd4:	88fa      	ldrh	r2, [r7, #6]
 8023fd6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8023fda:	68fb      	ldr	r3, [r7, #12]
 8023fdc:	689b      	ldr	r3, [r3, #8]
 8023fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8023fe2:	d108      	bne.n	8023ff6 <HAL_UART_Transmit+0x6c>
 8023fe4:	68fb      	ldr	r3, [r7, #12]
 8023fe6:	691b      	ldr	r3, [r3, #16]
 8023fe8:	2b00      	cmp	r3, #0
 8023fea:	d104      	bne.n	8023ff6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8023fec:	2300      	movs	r3, #0
 8023fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8023ff0:	68bb      	ldr	r3, [r7, #8]
 8023ff2:	61bb      	str	r3, [r7, #24]
 8023ff4:	e003      	b.n	8023ffe <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8023ff6:	68bb      	ldr	r3, [r7, #8]
 8023ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8023ffa:	2300      	movs	r3, #0
 8023ffc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8023ffe:	e030      	b.n	8024062 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8024000:	683b      	ldr	r3, [r7, #0]
 8024002:	9300      	str	r3, [sp, #0]
 8024004:	697b      	ldr	r3, [r7, #20]
 8024006:	2200      	movs	r2, #0
 8024008:	2180      	movs	r1, #128	@ 0x80
 802400a:	68f8      	ldr	r0, [r7, #12]
 802400c:	f000 ff00 	bl	8024e10 <UART_WaitOnFlagUntilTimeout>
 8024010:	4603      	mov	r3, r0
 8024012:	2b00      	cmp	r3, #0
 8024014:	d005      	beq.n	8024022 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8024016:	68fb      	ldr	r3, [r7, #12]
 8024018:	2220      	movs	r2, #32
 802401a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 802401e:	2303      	movs	r3, #3
 8024020:	e03d      	b.n	802409e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8024022:	69fb      	ldr	r3, [r7, #28]
 8024024:	2b00      	cmp	r3, #0
 8024026:	d10b      	bne.n	8024040 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8024028:	69bb      	ldr	r3, [r7, #24]
 802402a:	881b      	ldrh	r3, [r3, #0]
 802402c:	461a      	mov	r2, r3
 802402e:	68fb      	ldr	r3, [r7, #12]
 8024030:	681b      	ldr	r3, [r3, #0]
 8024032:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8024036:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8024038:	69bb      	ldr	r3, [r7, #24]
 802403a:	3302      	adds	r3, #2
 802403c:	61bb      	str	r3, [r7, #24]
 802403e:	e007      	b.n	8024050 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8024040:	69fb      	ldr	r3, [r7, #28]
 8024042:	781a      	ldrb	r2, [r3, #0]
 8024044:	68fb      	ldr	r3, [r7, #12]
 8024046:	681b      	ldr	r3, [r3, #0]
 8024048:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 802404a:	69fb      	ldr	r3, [r7, #28]
 802404c:	3301      	adds	r3, #1
 802404e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8024050:	68fb      	ldr	r3, [r7, #12]
 8024052:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8024056:	b29b      	uxth	r3, r3
 8024058:	3b01      	subs	r3, #1
 802405a:	b29a      	uxth	r2, r3
 802405c:	68fb      	ldr	r3, [r7, #12]
 802405e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8024062:	68fb      	ldr	r3, [r7, #12]
 8024064:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8024068:	b29b      	uxth	r3, r3
 802406a:	2b00      	cmp	r3, #0
 802406c:	d1c8      	bne.n	8024000 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802406e:	683b      	ldr	r3, [r7, #0]
 8024070:	9300      	str	r3, [sp, #0]
 8024072:	697b      	ldr	r3, [r7, #20]
 8024074:	2200      	movs	r2, #0
 8024076:	2140      	movs	r1, #64	@ 0x40
 8024078:	68f8      	ldr	r0, [r7, #12]
 802407a:	f000 fec9 	bl	8024e10 <UART_WaitOnFlagUntilTimeout>
 802407e:	4603      	mov	r3, r0
 8024080:	2b00      	cmp	r3, #0
 8024082:	d005      	beq.n	8024090 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8024084:	68fb      	ldr	r3, [r7, #12]
 8024086:	2220      	movs	r2, #32
 8024088:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 802408c:	2303      	movs	r3, #3
 802408e:	e006      	b.n	802409e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8024090:	68fb      	ldr	r3, [r7, #12]
 8024092:	2220      	movs	r2, #32
 8024094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8024098:	2300      	movs	r3, #0
 802409a:	e000      	b.n	802409e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 802409c:	2302      	movs	r3, #2
  }
}
 802409e:	4618      	mov	r0, r3
 80240a0:	3720      	adds	r7, #32
 80240a2:	46bd      	mov	sp, r7
 80240a4:	bd80      	pop	{r7, pc}
	...

080240a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80240a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80240ac:	b092      	sub	sp, #72	@ 0x48
 80240ae:	af00      	add	r7, sp, #0
 80240b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80240b2:	2300      	movs	r3, #0
 80240b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80240b8:	697b      	ldr	r3, [r7, #20]
 80240ba:	689a      	ldr	r2, [r3, #8]
 80240bc:	697b      	ldr	r3, [r7, #20]
 80240be:	691b      	ldr	r3, [r3, #16]
 80240c0:	431a      	orrs	r2, r3
 80240c2:	697b      	ldr	r3, [r7, #20]
 80240c4:	695b      	ldr	r3, [r3, #20]
 80240c6:	431a      	orrs	r2, r3
 80240c8:	697b      	ldr	r3, [r7, #20]
 80240ca:	69db      	ldr	r3, [r3, #28]
 80240cc:	4313      	orrs	r3, r2
 80240ce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80240d0:	697b      	ldr	r3, [r7, #20]
 80240d2:	681b      	ldr	r3, [r3, #0]
 80240d4:	681a      	ldr	r2, [r3, #0]
 80240d6:	4bbe      	ldr	r3, [pc, #760]	@ (80243d0 <UART_SetConfig+0x328>)
 80240d8:	4013      	ands	r3, r2
 80240da:	697a      	ldr	r2, [r7, #20]
 80240dc:	6812      	ldr	r2, [r2, #0]
 80240de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80240e0:	430b      	orrs	r3, r1
 80240e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80240e4:	697b      	ldr	r3, [r7, #20]
 80240e6:	681b      	ldr	r3, [r3, #0]
 80240e8:	685b      	ldr	r3, [r3, #4]
 80240ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80240ee:	697b      	ldr	r3, [r7, #20]
 80240f0:	68da      	ldr	r2, [r3, #12]
 80240f2:	697b      	ldr	r3, [r7, #20]
 80240f4:	681b      	ldr	r3, [r3, #0]
 80240f6:	430a      	orrs	r2, r1
 80240f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80240fa:	697b      	ldr	r3, [r7, #20]
 80240fc:	699b      	ldr	r3, [r3, #24]
 80240fe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8024100:	697b      	ldr	r3, [r7, #20]
 8024102:	681b      	ldr	r3, [r3, #0]
 8024104:	4ab3      	ldr	r2, [pc, #716]	@ (80243d4 <UART_SetConfig+0x32c>)
 8024106:	4293      	cmp	r3, r2
 8024108:	d004      	beq.n	8024114 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 802410a:	697b      	ldr	r3, [r7, #20]
 802410c:	6a1b      	ldr	r3, [r3, #32]
 802410e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8024110:	4313      	orrs	r3, r2
 8024112:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8024114:	697b      	ldr	r3, [r7, #20]
 8024116:	681b      	ldr	r3, [r3, #0]
 8024118:	689a      	ldr	r2, [r3, #8]
 802411a:	4baf      	ldr	r3, [pc, #700]	@ (80243d8 <UART_SetConfig+0x330>)
 802411c:	4013      	ands	r3, r2
 802411e:	697a      	ldr	r2, [r7, #20]
 8024120:	6812      	ldr	r2, [r2, #0]
 8024122:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8024124:	430b      	orrs	r3, r1
 8024126:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8024128:	697b      	ldr	r3, [r7, #20]
 802412a:	681b      	ldr	r3, [r3, #0]
 802412c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802412e:	f023 010f 	bic.w	r1, r3, #15
 8024132:	697b      	ldr	r3, [r7, #20]
 8024134:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8024136:	697b      	ldr	r3, [r7, #20]
 8024138:	681b      	ldr	r3, [r3, #0]
 802413a:	430a      	orrs	r2, r1
 802413c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 802413e:	697b      	ldr	r3, [r7, #20]
 8024140:	681b      	ldr	r3, [r3, #0]
 8024142:	4aa6      	ldr	r2, [pc, #664]	@ (80243dc <UART_SetConfig+0x334>)
 8024144:	4293      	cmp	r3, r2
 8024146:	d177      	bne.n	8024238 <UART_SetConfig+0x190>
 8024148:	4ba5      	ldr	r3, [pc, #660]	@ (80243e0 <UART_SetConfig+0x338>)
 802414a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802414c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8024150:	2b28      	cmp	r3, #40	@ 0x28
 8024152:	d86d      	bhi.n	8024230 <UART_SetConfig+0x188>
 8024154:	a201      	add	r2, pc, #4	@ (adr r2, 802415c <UART_SetConfig+0xb4>)
 8024156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802415a:	bf00      	nop
 802415c:	08024201 	.word	0x08024201
 8024160:	08024231 	.word	0x08024231
 8024164:	08024231 	.word	0x08024231
 8024168:	08024231 	.word	0x08024231
 802416c:	08024231 	.word	0x08024231
 8024170:	08024231 	.word	0x08024231
 8024174:	08024231 	.word	0x08024231
 8024178:	08024231 	.word	0x08024231
 802417c:	08024209 	.word	0x08024209
 8024180:	08024231 	.word	0x08024231
 8024184:	08024231 	.word	0x08024231
 8024188:	08024231 	.word	0x08024231
 802418c:	08024231 	.word	0x08024231
 8024190:	08024231 	.word	0x08024231
 8024194:	08024231 	.word	0x08024231
 8024198:	08024231 	.word	0x08024231
 802419c:	08024211 	.word	0x08024211
 80241a0:	08024231 	.word	0x08024231
 80241a4:	08024231 	.word	0x08024231
 80241a8:	08024231 	.word	0x08024231
 80241ac:	08024231 	.word	0x08024231
 80241b0:	08024231 	.word	0x08024231
 80241b4:	08024231 	.word	0x08024231
 80241b8:	08024231 	.word	0x08024231
 80241bc:	08024219 	.word	0x08024219
 80241c0:	08024231 	.word	0x08024231
 80241c4:	08024231 	.word	0x08024231
 80241c8:	08024231 	.word	0x08024231
 80241cc:	08024231 	.word	0x08024231
 80241d0:	08024231 	.word	0x08024231
 80241d4:	08024231 	.word	0x08024231
 80241d8:	08024231 	.word	0x08024231
 80241dc:	08024221 	.word	0x08024221
 80241e0:	08024231 	.word	0x08024231
 80241e4:	08024231 	.word	0x08024231
 80241e8:	08024231 	.word	0x08024231
 80241ec:	08024231 	.word	0x08024231
 80241f0:	08024231 	.word	0x08024231
 80241f4:	08024231 	.word	0x08024231
 80241f8:	08024231 	.word	0x08024231
 80241fc:	08024229 	.word	0x08024229
 8024200:	2301      	movs	r3, #1
 8024202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024206:	e222      	b.n	802464e <UART_SetConfig+0x5a6>
 8024208:	2304      	movs	r3, #4
 802420a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802420e:	e21e      	b.n	802464e <UART_SetConfig+0x5a6>
 8024210:	2308      	movs	r3, #8
 8024212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024216:	e21a      	b.n	802464e <UART_SetConfig+0x5a6>
 8024218:	2310      	movs	r3, #16
 802421a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802421e:	e216      	b.n	802464e <UART_SetConfig+0x5a6>
 8024220:	2320      	movs	r3, #32
 8024222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024226:	e212      	b.n	802464e <UART_SetConfig+0x5a6>
 8024228:	2340      	movs	r3, #64	@ 0x40
 802422a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802422e:	e20e      	b.n	802464e <UART_SetConfig+0x5a6>
 8024230:	2380      	movs	r3, #128	@ 0x80
 8024232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024236:	e20a      	b.n	802464e <UART_SetConfig+0x5a6>
 8024238:	697b      	ldr	r3, [r7, #20]
 802423a:	681b      	ldr	r3, [r3, #0]
 802423c:	4a69      	ldr	r2, [pc, #420]	@ (80243e4 <UART_SetConfig+0x33c>)
 802423e:	4293      	cmp	r3, r2
 8024240:	d130      	bne.n	80242a4 <UART_SetConfig+0x1fc>
 8024242:	4b67      	ldr	r3, [pc, #412]	@ (80243e0 <UART_SetConfig+0x338>)
 8024244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024246:	f003 0307 	and.w	r3, r3, #7
 802424a:	2b05      	cmp	r3, #5
 802424c:	d826      	bhi.n	802429c <UART_SetConfig+0x1f4>
 802424e:	a201      	add	r2, pc, #4	@ (adr r2, 8024254 <UART_SetConfig+0x1ac>)
 8024250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024254:	0802426d 	.word	0x0802426d
 8024258:	08024275 	.word	0x08024275
 802425c:	0802427d 	.word	0x0802427d
 8024260:	08024285 	.word	0x08024285
 8024264:	0802428d 	.word	0x0802428d
 8024268:	08024295 	.word	0x08024295
 802426c:	2300      	movs	r3, #0
 802426e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024272:	e1ec      	b.n	802464e <UART_SetConfig+0x5a6>
 8024274:	2304      	movs	r3, #4
 8024276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802427a:	e1e8      	b.n	802464e <UART_SetConfig+0x5a6>
 802427c:	2308      	movs	r3, #8
 802427e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024282:	e1e4      	b.n	802464e <UART_SetConfig+0x5a6>
 8024284:	2310      	movs	r3, #16
 8024286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802428a:	e1e0      	b.n	802464e <UART_SetConfig+0x5a6>
 802428c:	2320      	movs	r3, #32
 802428e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024292:	e1dc      	b.n	802464e <UART_SetConfig+0x5a6>
 8024294:	2340      	movs	r3, #64	@ 0x40
 8024296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802429a:	e1d8      	b.n	802464e <UART_SetConfig+0x5a6>
 802429c:	2380      	movs	r3, #128	@ 0x80
 802429e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242a2:	e1d4      	b.n	802464e <UART_SetConfig+0x5a6>
 80242a4:	697b      	ldr	r3, [r7, #20]
 80242a6:	681b      	ldr	r3, [r3, #0]
 80242a8:	4a4f      	ldr	r2, [pc, #316]	@ (80243e8 <UART_SetConfig+0x340>)
 80242aa:	4293      	cmp	r3, r2
 80242ac:	d130      	bne.n	8024310 <UART_SetConfig+0x268>
 80242ae:	4b4c      	ldr	r3, [pc, #304]	@ (80243e0 <UART_SetConfig+0x338>)
 80242b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80242b2:	f003 0307 	and.w	r3, r3, #7
 80242b6:	2b05      	cmp	r3, #5
 80242b8:	d826      	bhi.n	8024308 <UART_SetConfig+0x260>
 80242ba:	a201      	add	r2, pc, #4	@ (adr r2, 80242c0 <UART_SetConfig+0x218>)
 80242bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80242c0:	080242d9 	.word	0x080242d9
 80242c4:	080242e1 	.word	0x080242e1
 80242c8:	080242e9 	.word	0x080242e9
 80242cc:	080242f1 	.word	0x080242f1
 80242d0:	080242f9 	.word	0x080242f9
 80242d4:	08024301 	.word	0x08024301
 80242d8:	2300      	movs	r3, #0
 80242da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242de:	e1b6      	b.n	802464e <UART_SetConfig+0x5a6>
 80242e0:	2304      	movs	r3, #4
 80242e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242e6:	e1b2      	b.n	802464e <UART_SetConfig+0x5a6>
 80242e8:	2308      	movs	r3, #8
 80242ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242ee:	e1ae      	b.n	802464e <UART_SetConfig+0x5a6>
 80242f0:	2310      	movs	r3, #16
 80242f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242f6:	e1aa      	b.n	802464e <UART_SetConfig+0x5a6>
 80242f8:	2320      	movs	r3, #32
 80242fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80242fe:	e1a6      	b.n	802464e <UART_SetConfig+0x5a6>
 8024300:	2340      	movs	r3, #64	@ 0x40
 8024302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024306:	e1a2      	b.n	802464e <UART_SetConfig+0x5a6>
 8024308:	2380      	movs	r3, #128	@ 0x80
 802430a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802430e:	e19e      	b.n	802464e <UART_SetConfig+0x5a6>
 8024310:	697b      	ldr	r3, [r7, #20]
 8024312:	681b      	ldr	r3, [r3, #0]
 8024314:	4a35      	ldr	r2, [pc, #212]	@ (80243ec <UART_SetConfig+0x344>)
 8024316:	4293      	cmp	r3, r2
 8024318:	d130      	bne.n	802437c <UART_SetConfig+0x2d4>
 802431a:	4b31      	ldr	r3, [pc, #196]	@ (80243e0 <UART_SetConfig+0x338>)
 802431c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802431e:	f003 0307 	and.w	r3, r3, #7
 8024322:	2b05      	cmp	r3, #5
 8024324:	d826      	bhi.n	8024374 <UART_SetConfig+0x2cc>
 8024326:	a201      	add	r2, pc, #4	@ (adr r2, 802432c <UART_SetConfig+0x284>)
 8024328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802432c:	08024345 	.word	0x08024345
 8024330:	0802434d 	.word	0x0802434d
 8024334:	08024355 	.word	0x08024355
 8024338:	0802435d 	.word	0x0802435d
 802433c:	08024365 	.word	0x08024365
 8024340:	0802436d 	.word	0x0802436d
 8024344:	2300      	movs	r3, #0
 8024346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802434a:	e180      	b.n	802464e <UART_SetConfig+0x5a6>
 802434c:	2304      	movs	r3, #4
 802434e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024352:	e17c      	b.n	802464e <UART_SetConfig+0x5a6>
 8024354:	2308      	movs	r3, #8
 8024356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802435a:	e178      	b.n	802464e <UART_SetConfig+0x5a6>
 802435c:	2310      	movs	r3, #16
 802435e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024362:	e174      	b.n	802464e <UART_SetConfig+0x5a6>
 8024364:	2320      	movs	r3, #32
 8024366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802436a:	e170      	b.n	802464e <UART_SetConfig+0x5a6>
 802436c:	2340      	movs	r3, #64	@ 0x40
 802436e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024372:	e16c      	b.n	802464e <UART_SetConfig+0x5a6>
 8024374:	2380      	movs	r3, #128	@ 0x80
 8024376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802437a:	e168      	b.n	802464e <UART_SetConfig+0x5a6>
 802437c:	697b      	ldr	r3, [r7, #20]
 802437e:	681b      	ldr	r3, [r3, #0]
 8024380:	4a1b      	ldr	r2, [pc, #108]	@ (80243f0 <UART_SetConfig+0x348>)
 8024382:	4293      	cmp	r3, r2
 8024384:	d142      	bne.n	802440c <UART_SetConfig+0x364>
 8024386:	4b16      	ldr	r3, [pc, #88]	@ (80243e0 <UART_SetConfig+0x338>)
 8024388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802438a:	f003 0307 	and.w	r3, r3, #7
 802438e:	2b05      	cmp	r3, #5
 8024390:	d838      	bhi.n	8024404 <UART_SetConfig+0x35c>
 8024392:	a201      	add	r2, pc, #4	@ (adr r2, 8024398 <UART_SetConfig+0x2f0>)
 8024394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024398:	080243b1 	.word	0x080243b1
 802439c:	080243b9 	.word	0x080243b9
 80243a0:	080243c1 	.word	0x080243c1
 80243a4:	080243c9 	.word	0x080243c9
 80243a8:	080243f5 	.word	0x080243f5
 80243ac:	080243fd 	.word	0x080243fd
 80243b0:	2300      	movs	r3, #0
 80243b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243b6:	e14a      	b.n	802464e <UART_SetConfig+0x5a6>
 80243b8:	2304      	movs	r3, #4
 80243ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243be:	e146      	b.n	802464e <UART_SetConfig+0x5a6>
 80243c0:	2308      	movs	r3, #8
 80243c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243c6:	e142      	b.n	802464e <UART_SetConfig+0x5a6>
 80243c8:	2310      	movs	r3, #16
 80243ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243ce:	e13e      	b.n	802464e <UART_SetConfig+0x5a6>
 80243d0:	cfff69f3 	.word	0xcfff69f3
 80243d4:	58000c00 	.word	0x58000c00
 80243d8:	11fff4ff 	.word	0x11fff4ff
 80243dc:	40011000 	.word	0x40011000
 80243e0:	58024400 	.word	0x58024400
 80243e4:	40004400 	.word	0x40004400
 80243e8:	40004800 	.word	0x40004800
 80243ec:	40004c00 	.word	0x40004c00
 80243f0:	40005000 	.word	0x40005000
 80243f4:	2320      	movs	r3, #32
 80243f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243fa:	e128      	b.n	802464e <UART_SetConfig+0x5a6>
 80243fc:	2340      	movs	r3, #64	@ 0x40
 80243fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024402:	e124      	b.n	802464e <UART_SetConfig+0x5a6>
 8024404:	2380      	movs	r3, #128	@ 0x80
 8024406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802440a:	e120      	b.n	802464e <UART_SetConfig+0x5a6>
 802440c:	697b      	ldr	r3, [r7, #20]
 802440e:	681b      	ldr	r3, [r3, #0]
 8024410:	4acb      	ldr	r2, [pc, #812]	@ (8024740 <UART_SetConfig+0x698>)
 8024412:	4293      	cmp	r3, r2
 8024414:	d176      	bne.n	8024504 <UART_SetConfig+0x45c>
 8024416:	4bcb      	ldr	r3, [pc, #812]	@ (8024744 <UART_SetConfig+0x69c>)
 8024418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802441a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 802441e:	2b28      	cmp	r3, #40	@ 0x28
 8024420:	d86c      	bhi.n	80244fc <UART_SetConfig+0x454>
 8024422:	a201      	add	r2, pc, #4	@ (adr r2, 8024428 <UART_SetConfig+0x380>)
 8024424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024428:	080244cd 	.word	0x080244cd
 802442c:	080244fd 	.word	0x080244fd
 8024430:	080244fd 	.word	0x080244fd
 8024434:	080244fd 	.word	0x080244fd
 8024438:	080244fd 	.word	0x080244fd
 802443c:	080244fd 	.word	0x080244fd
 8024440:	080244fd 	.word	0x080244fd
 8024444:	080244fd 	.word	0x080244fd
 8024448:	080244d5 	.word	0x080244d5
 802444c:	080244fd 	.word	0x080244fd
 8024450:	080244fd 	.word	0x080244fd
 8024454:	080244fd 	.word	0x080244fd
 8024458:	080244fd 	.word	0x080244fd
 802445c:	080244fd 	.word	0x080244fd
 8024460:	080244fd 	.word	0x080244fd
 8024464:	080244fd 	.word	0x080244fd
 8024468:	080244dd 	.word	0x080244dd
 802446c:	080244fd 	.word	0x080244fd
 8024470:	080244fd 	.word	0x080244fd
 8024474:	080244fd 	.word	0x080244fd
 8024478:	080244fd 	.word	0x080244fd
 802447c:	080244fd 	.word	0x080244fd
 8024480:	080244fd 	.word	0x080244fd
 8024484:	080244fd 	.word	0x080244fd
 8024488:	080244e5 	.word	0x080244e5
 802448c:	080244fd 	.word	0x080244fd
 8024490:	080244fd 	.word	0x080244fd
 8024494:	080244fd 	.word	0x080244fd
 8024498:	080244fd 	.word	0x080244fd
 802449c:	080244fd 	.word	0x080244fd
 80244a0:	080244fd 	.word	0x080244fd
 80244a4:	080244fd 	.word	0x080244fd
 80244a8:	080244ed 	.word	0x080244ed
 80244ac:	080244fd 	.word	0x080244fd
 80244b0:	080244fd 	.word	0x080244fd
 80244b4:	080244fd 	.word	0x080244fd
 80244b8:	080244fd 	.word	0x080244fd
 80244bc:	080244fd 	.word	0x080244fd
 80244c0:	080244fd 	.word	0x080244fd
 80244c4:	080244fd 	.word	0x080244fd
 80244c8:	080244f5 	.word	0x080244f5
 80244cc:	2301      	movs	r3, #1
 80244ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244d2:	e0bc      	b.n	802464e <UART_SetConfig+0x5a6>
 80244d4:	2304      	movs	r3, #4
 80244d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244da:	e0b8      	b.n	802464e <UART_SetConfig+0x5a6>
 80244dc:	2308      	movs	r3, #8
 80244de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244e2:	e0b4      	b.n	802464e <UART_SetConfig+0x5a6>
 80244e4:	2310      	movs	r3, #16
 80244e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244ea:	e0b0      	b.n	802464e <UART_SetConfig+0x5a6>
 80244ec:	2320      	movs	r3, #32
 80244ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244f2:	e0ac      	b.n	802464e <UART_SetConfig+0x5a6>
 80244f4:	2340      	movs	r3, #64	@ 0x40
 80244f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244fa:	e0a8      	b.n	802464e <UART_SetConfig+0x5a6>
 80244fc:	2380      	movs	r3, #128	@ 0x80
 80244fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024502:	e0a4      	b.n	802464e <UART_SetConfig+0x5a6>
 8024504:	697b      	ldr	r3, [r7, #20]
 8024506:	681b      	ldr	r3, [r3, #0]
 8024508:	4a8f      	ldr	r2, [pc, #572]	@ (8024748 <UART_SetConfig+0x6a0>)
 802450a:	4293      	cmp	r3, r2
 802450c:	d130      	bne.n	8024570 <UART_SetConfig+0x4c8>
 802450e:	4b8d      	ldr	r3, [pc, #564]	@ (8024744 <UART_SetConfig+0x69c>)
 8024510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024512:	f003 0307 	and.w	r3, r3, #7
 8024516:	2b05      	cmp	r3, #5
 8024518:	d826      	bhi.n	8024568 <UART_SetConfig+0x4c0>
 802451a:	a201      	add	r2, pc, #4	@ (adr r2, 8024520 <UART_SetConfig+0x478>)
 802451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024520:	08024539 	.word	0x08024539
 8024524:	08024541 	.word	0x08024541
 8024528:	08024549 	.word	0x08024549
 802452c:	08024551 	.word	0x08024551
 8024530:	08024559 	.word	0x08024559
 8024534:	08024561 	.word	0x08024561
 8024538:	2300      	movs	r3, #0
 802453a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802453e:	e086      	b.n	802464e <UART_SetConfig+0x5a6>
 8024540:	2304      	movs	r3, #4
 8024542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024546:	e082      	b.n	802464e <UART_SetConfig+0x5a6>
 8024548:	2308      	movs	r3, #8
 802454a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802454e:	e07e      	b.n	802464e <UART_SetConfig+0x5a6>
 8024550:	2310      	movs	r3, #16
 8024552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024556:	e07a      	b.n	802464e <UART_SetConfig+0x5a6>
 8024558:	2320      	movs	r3, #32
 802455a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802455e:	e076      	b.n	802464e <UART_SetConfig+0x5a6>
 8024560:	2340      	movs	r3, #64	@ 0x40
 8024562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024566:	e072      	b.n	802464e <UART_SetConfig+0x5a6>
 8024568:	2380      	movs	r3, #128	@ 0x80
 802456a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802456e:	e06e      	b.n	802464e <UART_SetConfig+0x5a6>
 8024570:	697b      	ldr	r3, [r7, #20]
 8024572:	681b      	ldr	r3, [r3, #0]
 8024574:	4a75      	ldr	r2, [pc, #468]	@ (802474c <UART_SetConfig+0x6a4>)
 8024576:	4293      	cmp	r3, r2
 8024578:	d130      	bne.n	80245dc <UART_SetConfig+0x534>
 802457a:	4b72      	ldr	r3, [pc, #456]	@ (8024744 <UART_SetConfig+0x69c>)
 802457c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802457e:	f003 0307 	and.w	r3, r3, #7
 8024582:	2b05      	cmp	r3, #5
 8024584:	d826      	bhi.n	80245d4 <UART_SetConfig+0x52c>
 8024586:	a201      	add	r2, pc, #4	@ (adr r2, 802458c <UART_SetConfig+0x4e4>)
 8024588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802458c:	080245a5 	.word	0x080245a5
 8024590:	080245ad 	.word	0x080245ad
 8024594:	080245b5 	.word	0x080245b5
 8024598:	080245bd 	.word	0x080245bd
 802459c:	080245c5 	.word	0x080245c5
 80245a0:	080245cd 	.word	0x080245cd
 80245a4:	2300      	movs	r3, #0
 80245a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245aa:	e050      	b.n	802464e <UART_SetConfig+0x5a6>
 80245ac:	2304      	movs	r3, #4
 80245ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245b2:	e04c      	b.n	802464e <UART_SetConfig+0x5a6>
 80245b4:	2308      	movs	r3, #8
 80245b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245ba:	e048      	b.n	802464e <UART_SetConfig+0x5a6>
 80245bc:	2310      	movs	r3, #16
 80245be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245c2:	e044      	b.n	802464e <UART_SetConfig+0x5a6>
 80245c4:	2320      	movs	r3, #32
 80245c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245ca:	e040      	b.n	802464e <UART_SetConfig+0x5a6>
 80245cc:	2340      	movs	r3, #64	@ 0x40
 80245ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245d2:	e03c      	b.n	802464e <UART_SetConfig+0x5a6>
 80245d4:	2380      	movs	r3, #128	@ 0x80
 80245d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80245da:	e038      	b.n	802464e <UART_SetConfig+0x5a6>
 80245dc:	697b      	ldr	r3, [r7, #20]
 80245de:	681b      	ldr	r3, [r3, #0]
 80245e0:	4a5b      	ldr	r2, [pc, #364]	@ (8024750 <UART_SetConfig+0x6a8>)
 80245e2:	4293      	cmp	r3, r2
 80245e4:	d130      	bne.n	8024648 <UART_SetConfig+0x5a0>
 80245e6:	4b57      	ldr	r3, [pc, #348]	@ (8024744 <UART_SetConfig+0x69c>)
 80245e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80245ea:	f003 0307 	and.w	r3, r3, #7
 80245ee:	2b05      	cmp	r3, #5
 80245f0:	d826      	bhi.n	8024640 <UART_SetConfig+0x598>
 80245f2:	a201      	add	r2, pc, #4	@ (adr r2, 80245f8 <UART_SetConfig+0x550>)
 80245f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80245f8:	08024611 	.word	0x08024611
 80245fc:	08024619 	.word	0x08024619
 8024600:	08024621 	.word	0x08024621
 8024604:	08024629 	.word	0x08024629
 8024608:	08024631 	.word	0x08024631
 802460c:	08024639 	.word	0x08024639
 8024610:	2302      	movs	r3, #2
 8024612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024616:	e01a      	b.n	802464e <UART_SetConfig+0x5a6>
 8024618:	2304      	movs	r3, #4
 802461a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802461e:	e016      	b.n	802464e <UART_SetConfig+0x5a6>
 8024620:	2308      	movs	r3, #8
 8024622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024626:	e012      	b.n	802464e <UART_SetConfig+0x5a6>
 8024628:	2310      	movs	r3, #16
 802462a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802462e:	e00e      	b.n	802464e <UART_SetConfig+0x5a6>
 8024630:	2320      	movs	r3, #32
 8024632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024636:	e00a      	b.n	802464e <UART_SetConfig+0x5a6>
 8024638:	2340      	movs	r3, #64	@ 0x40
 802463a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802463e:	e006      	b.n	802464e <UART_SetConfig+0x5a6>
 8024640:	2380      	movs	r3, #128	@ 0x80
 8024642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024646:	e002      	b.n	802464e <UART_SetConfig+0x5a6>
 8024648:	2380      	movs	r3, #128	@ 0x80
 802464a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802464e:	697b      	ldr	r3, [r7, #20]
 8024650:	681b      	ldr	r3, [r3, #0]
 8024652:	4a3f      	ldr	r2, [pc, #252]	@ (8024750 <UART_SetConfig+0x6a8>)
 8024654:	4293      	cmp	r3, r2
 8024656:	f040 80f8 	bne.w	802484a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 802465a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802465e:	2b20      	cmp	r3, #32
 8024660:	dc46      	bgt.n	80246f0 <UART_SetConfig+0x648>
 8024662:	2b02      	cmp	r3, #2
 8024664:	f2c0 8082 	blt.w	802476c <UART_SetConfig+0x6c4>
 8024668:	3b02      	subs	r3, #2
 802466a:	2b1e      	cmp	r3, #30
 802466c:	d87e      	bhi.n	802476c <UART_SetConfig+0x6c4>
 802466e:	a201      	add	r2, pc, #4	@ (adr r2, 8024674 <UART_SetConfig+0x5cc>)
 8024670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024674:	080246f7 	.word	0x080246f7
 8024678:	0802476d 	.word	0x0802476d
 802467c:	080246ff 	.word	0x080246ff
 8024680:	0802476d 	.word	0x0802476d
 8024684:	0802476d 	.word	0x0802476d
 8024688:	0802476d 	.word	0x0802476d
 802468c:	0802470f 	.word	0x0802470f
 8024690:	0802476d 	.word	0x0802476d
 8024694:	0802476d 	.word	0x0802476d
 8024698:	0802476d 	.word	0x0802476d
 802469c:	0802476d 	.word	0x0802476d
 80246a0:	0802476d 	.word	0x0802476d
 80246a4:	0802476d 	.word	0x0802476d
 80246a8:	0802476d 	.word	0x0802476d
 80246ac:	0802471f 	.word	0x0802471f
 80246b0:	0802476d 	.word	0x0802476d
 80246b4:	0802476d 	.word	0x0802476d
 80246b8:	0802476d 	.word	0x0802476d
 80246bc:	0802476d 	.word	0x0802476d
 80246c0:	0802476d 	.word	0x0802476d
 80246c4:	0802476d 	.word	0x0802476d
 80246c8:	0802476d 	.word	0x0802476d
 80246cc:	0802476d 	.word	0x0802476d
 80246d0:	0802476d 	.word	0x0802476d
 80246d4:	0802476d 	.word	0x0802476d
 80246d8:	0802476d 	.word	0x0802476d
 80246dc:	0802476d 	.word	0x0802476d
 80246e0:	0802476d 	.word	0x0802476d
 80246e4:	0802476d 	.word	0x0802476d
 80246e8:	0802476d 	.word	0x0802476d
 80246ec:	0802475f 	.word	0x0802475f
 80246f0:	2b40      	cmp	r3, #64	@ 0x40
 80246f2:	d037      	beq.n	8024764 <UART_SetConfig+0x6bc>
 80246f4:	e03a      	b.n	802476c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80246f6:	f7fd f8d7 	bl	80218a8 <HAL_RCCEx_GetD3PCLK1Freq>
 80246fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80246fc:	e03c      	b.n	8024778 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80246fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8024702:	4618      	mov	r0, r3
 8024704:	f7fd f8e6 	bl	80218d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8024708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802470a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802470c:	e034      	b.n	8024778 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802470e:	f107 0318 	add.w	r3, r7, #24
 8024712:	4618      	mov	r0, r3
 8024714:	f7fd fa32 	bl	8021b7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8024718:	69fb      	ldr	r3, [r7, #28]
 802471a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802471c:	e02c      	b.n	8024778 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802471e:	4b09      	ldr	r3, [pc, #36]	@ (8024744 <UART_SetConfig+0x69c>)
 8024720:	681b      	ldr	r3, [r3, #0]
 8024722:	f003 0320 	and.w	r3, r3, #32
 8024726:	2b00      	cmp	r3, #0
 8024728:	d016      	beq.n	8024758 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802472a:	4b06      	ldr	r3, [pc, #24]	@ (8024744 <UART_SetConfig+0x69c>)
 802472c:	681b      	ldr	r3, [r3, #0]
 802472e:	08db      	lsrs	r3, r3, #3
 8024730:	f003 0303 	and.w	r3, r3, #3
 8024734:	4a07      	ldr	r2, [pc, #28]	@ (8024754 <UART_SetConfig+0x6ac>)
 8024736:	fa22 f303 	lsr.w	r3, r2, r3
 802473a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802473c:	e01c      	b.n	8024778 <UART_SetConfig+0x6d0>
 802473e:	bf00      	nop
 8024740:	40011400 	.word	0x40011400
 8024744:	58024400 	.word	0x58024400
 8024748:	40007800 	.word	0x40007800
 802474c:	40007c00 	.word	0x40007c00
 8024750:	58000c00 	.word	0x58000c00
 8024754:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8024758:	4b9d      	ldr	r3, [pc, #628]	@ (80249d0 <UART_SetConfig+0x928>)
 802475a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802475c:	e00c      	b.n	8024778 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802475e:	4b9d      	ldr	r3, [pc, #628]	@ (80249d4 <UART_SetConfig+0x92c>)
 8024760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024762:	e009      	b.n	8024778 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8024764:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8024768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802476a:	e005      	b.n	8024778 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 802476c:	2300      	movs	r3, #0
 802476e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8024770:	2301      	movs	r3, #1
 8024772:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8024776:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8024778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802477a:	2b00      	cmp	r3, #0
 802477c:	f000 81de 	beq.w	8024b3c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8024780:	697b      	ldr	r3, [r7, #20]
 8024782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024784:	4a94      	ldr	r2, [pc, #592]	@ (80249d8 <UART_SetConfig+0x930>)
 8024786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802478a:	461a      	mov	r2, r3
 802478c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802478e:	fbb3 f3f2 	udiv	r3, r3, r2
 8024792:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8024794:	697b      	ldr	r3, [r7, #20]
 8024796:	685a      	ldr	r2, [r3, #4]
 8024798:	4613      	mov	r3, r2
 802479a:	005b      	lsls	r3, r3, #1
 802479c:	4413      	add	r3, r2
 802479e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80247a0:	429a      	cmp	r2, r3
 80247a2:	d305      	bcc.n	80247b0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80247a4:	697b      	ldr	r3, [r7, #20]
 80247a6:	685b      	ldr	r3, [r3, #4]
 80247a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80247aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80247ac:	429a      	cmp	r2, r3
 80247ae:	d903      	bls.n	80247b8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80247b0:	2301      	movs	r3, #1
 80247b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80247b6:	e1c1      	b.n	8024b3c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80247b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80247ba:	2200      	movs	r2, #0
 80247bc:	60bb      	str	r3, [r7, #8]
 80247be:	60fa      	str	r2, [r7, #12]
 80247c0:	697b      	ldr	r3, [r7, #20]
 80247c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80247c4:	4a84      	ldr	r2, [pc, #528]	@ (80249d8 <UART_SetConfig+0x930>)
 80247c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80247ca:	b29b      	uxth	r3, r3
 80247cc:	2200      	movs	r2, #0
 80247ce:	603b      	str	r3, [r7, #0]
 80247d0:	607a      	str	r2, [r7, #4]
 80247d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80247d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80247da:	f7dc f8b3 	bl	8000944 <__aeabi_uldivmod>
 80247de:	4602      	mov	r2, r0
 80247e0:	460b      	mov	r3, r1
 80247e2:	4610      	mov	r0, r2
 80247e4:	4619      	mov	r1, r3
 80247e6:	f04f 0200 	mov.w	r2, #0
 80247ea:	f04f 0300 	mov.w	r3, #0
 80247ee:	020b      	lsls	r3, r1, #8
 80247f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80247f4:	0202      	lsls	r2, r0, #8
 80247f6:	6979      	ldr	r1, [r7, #20]
 80247f8:	6849      	ldr	r1, [r1, #4]
 80247fa:	0849      	lsrs	r1, r1, #1
 80247fc:	2000      	movs	r0, #0
 80247fe:	460c      	mov	r4, r1
 8024800:	4605      	mov	r5, r0
 8024802:	eb12 0804 	adds.w	r8, r2, r4
 8024806:	eb43 0905 	adc.w	r9, r3, r5
 802480a:	697b      	ldr	r3, [r7, #20]
 802480c:	685b      	ldr	r3, [r3, #4]
 802480e:	2200      	movs	r2, #0
 8024810:	469a      	mov	sl, r3
 8024812:	4693      	mov	fp, r2
 8024814:	4652      	mov	r2, sl
 8024816:	465b      	mov	r3, fp
 8024818:	4640      	mov	r0, r8
 802481a:	4649      	mov	r1, r9
 802481c:	f7dc f892 	bl	8000944 <__aeabi_uldivmod>
 8024820:	4602      	mov	r2, r0
 8024822:	460b      	mov	r3, r1
 8024824:	4613      	mov	r3, r2
 8024826:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8024828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802482a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 802482e:	d308      	bcc.n	8024842 <UART_SetConfig+0x79a>
 8024830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024832:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8024836:	d204      	bcs.n	8024842 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8024838:	697b      	ldr	r3, [r7, #20]
 802483a:	681b      	ldr	r3, [r3, #0]
 802483c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802483e:	60da      	str	r2, [r3, #12]
 8024840:	e17c      	b.n	8024b3c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8024842:	2301      	movs	r3, #1
 8024844:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8024848:	e178      	b.n	8024b3c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802484a:	697b      	ldr	r3, [r7, #20]
 802484c:	69db      	ldr	r3, [r3, #28]
 802484e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8024852:	f040 80c5 	bne.w	80249e0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8024856:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802485a:	2b20      	cmp	r3, #32
 802485c:	dc48      	bgt.n	80248f0 <UART_SetConfig+0x848>
 802485e:	2b00      	cmp	r3, #0
 8024860:	db7b      	blt.n	802495a <UART_SetConfig+0x8b2>
 8024862:	2b20      	cmp	r3, #32
 8024864:	d879      	bhi.n	802495a <UART_SetConfig+0x8b2>
 8024866:	a201      	add	r2, pc, #4	@ (adr r2, 802486c <UART_SetConfig+0x7c4>)
 8024868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802486c:	080248f7 	.word	0x080248f7
 8024870:	080248ff 	.word	0x080248ff
 8024874:	0802495b 	.word	0x0802495b
 8024878:	0802495b 	.word	0x0802495b
 802487c:	08024907 	.word	0x08024907
 8024880:	0802495b 	.word	0x0802495b
 8024884:	0802495b 	.word	0x0802495b
 8024888:	0802495b 	.word	0x0802495b
 802488c:	08024917 	.word	0x08024917
 8024890:	0802495b 	.word	0x0802495b
 8024894:	0802495b 	.word	0x0802495b
 8024898:	0802495b 	.word	0x0802495b
 802489c:	0802495b 	.word	0x0802495b
 80248a0:	0802495b 	.word	0x0802495b
 80248a4:	0802495b 	.word	0x0802495b
 80248a8:	0802495b 	.word	0x0802495b
 80248ac:	08024927 	.word	0x08024927
 80248b0:	0802495b 	.word	0x0802495b
 80248b4:	0802495b 	.word	0x0802495b
 80248b8:	0802495b 	.word	0x0802495b
 80248bc:	0802495b 	.word	0x0802495b
 80248c0:	0802495b 	.word	0x0802495b
 80248c4:	0802495b 	.word	0x0802495b
 80248c8:	0802495b 	.word	0x0802495b
 80248cc:	0802495b 	.word	0x0802495b
 80248d0:	0802495b 	.word	0x0802495b
 80248d4:	0802495b 	.word	0x0802495b
 80248d8:	0802495b 	.word	0x0802495b
 80248dc:	0802495b 	.word	0x0802495b
 80248e0:	0802495b 	.word	0x0802495b
 80248e4:	0802495b 	.word	0x0802495b
 80248e8:	0802495b 	.word	0x0802495b
 80248ec:	0802494d 	.word	0x0802494d
 80248f0:	2b40      	cmp	r3, #64	@ 0x40
 80248f2:	d02e      	beq.n	8024952 <UART_SetConfig+0x8aa>
 80248f4:	e031      	b.n	802495a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80248f6:	f7fb f821 	bl	801f93c <HAL_RCC_GetPCLK1Freq>
 80248fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80248fc:	e033      	b.n	8024966 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80248fe:	f7fb f833 	bl	801f968 <HAL_RCC_GetPCLK2Freq>
 8024902:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8024904:	e02f      	b.n	8024966 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8024906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802490a:	4618      	mov	r0, r3
 802490c:	f7fc ffe2 	bl	80218d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8024910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024914:	e027      	b.n	8024966 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8024916:	f107 0318 	add.w	r3, r7, #24
 802491a:	4618      	mov	r0, r3
 802491c:	f7fd f92e 	bl	8021b7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8024920:	69fb      	ldr	r3, [r7, #28]
 8024922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024924:	e01f      	b.n	8024966 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8024926:	4b2d      	ldr	r3, [pc, #180]	@ (80249dc <UART_SetConfig+0x934>)
 8024928:	681b      	ldr	r3, [r3, #0]
 802492a:	f003 0320 	and.w	r3, r3, #32
 802492e:	2b00      	cmp	r3, #0
 8024930:	d009      	beq.n	8024946 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8024932:	4b2a      	ldr	r3, [pc, #168]	@ (80249dc <UART_SetConfig+0x934>)
 8024934:	681b      	ldr	r3, [r3, #0]
 8024936:	08db      	lsrs	r3, r3, #3
 8024938:	f003 0303 	and.w	r3, r3, #3
 802493c:	4a24      	ldr	r2, [pc, #144]	@ (80249d0 <UART_SetConfig+0x928>)
 802493e:	fa22 f303 	lsr.w	r3, r2, r3
 8024942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8024944:	e00f      	b.n	8024966 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8024946:	4b22      	ldr	r3, [pc, #136]	@ (80249d0 <UART_SetConfig+0x928>)
 8024948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802494a:	e00c      	b.n	8024966 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802494c:	4b21      	ldr	r3, [pc, #132]	@ (80249d4 <UART_SetConfig+0x92c>)
 802494e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024950:	e009      	b.n	8024966 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8024952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8024956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024958:	e005      	b.n	8024966 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 802495a:	2300      	movs	r3, #0
 802495c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 802495e:	2301      	movs	r3, #1
 8024960:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8024964:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8024966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024968:	2b00      	cmp	r3, #0
 802496a:	f000 80e7 	beq.w	8024b3c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802496e:	697b      	ldr	r3, [r7, #20]
 8024970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024972:	4a19      	ldr	r2, [pc, #100]	@ (80249d8 <UART_SetConfig+0x930>)
 8024974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8024978:	461a      	mov	r2, r3
 802497a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802497c:	fbb3 f3f2 	udiv	r3, r3, r2
 8024980:	005a      	lsls	r2, r3, #1
 8024982:	697b      	ldr	r3, [r7, #20]
 8024984:	685b      	ldr	r3, [r3, #4]
 8024986:	085b      	lsrs	r3, r3, #1
 8024988:	441a      	add	r2, r3
 802498a:	697b      	ldr	r3, [r7, #20]
 802498c:	685b      	ldr	r3, [r3, #4]
 802498e:	fbb2 f3f3 	udiv	r3, r2, r3
 8024992:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8024994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024996:	2b0f      	cmp	r3, #15
 8024998:	d916      	bls.n	80249c8 <UART_SetConfig+0x920>
 802499a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802499c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80249a0:	d212      	bcs.n	80249c8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80249a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80249a4:	b29b      	uxth	r3, r3
 80249a6:	f023 030f 	bic.w	r3, r3, #15
 80249aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80249ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80249ae:	085b      	lsrs	r3, r3, #1
 80249b0:	b29b      	uxth	r3, r3
 80249b2:	f003 0307 	and.w	r3, r3, #7
 80249b6:	b29a      	uxth	r2, r3
 80249b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80249ba:	4313      	orrs	r3, r2
 80249bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80249be:	697b      	ldr	r3, [r7, #20]
 80249c0:	681b      	ldr	r3, [r3, #0]
 80249c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80249c4:	60da      	str	r2, [r3, #12]
 80249c6:	e0b9      	b.n	8024b3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80249c8:	2301      	movs	r3, #1
 80249ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80249ce:	e0b5      	b.n	8024b3c <UART_SetConfig+0xa94>
 80249d0:	03d09000 	.word	0x03d09000
 80249d4:	003d0900 	.word	0x003d0900
 80249d8:	0802b670 	.word	0x0802b670
 80249dc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80249e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80249e4:	2b20      	cmp	r3, #32
 80249e6:	dc49      	bgt.n	8024a7c <UART_SetConfig+0x9d4>
 80249e8:	2b00      	cmp	r3, #0
 80249ea:	db7c      	blt.n	8024ae6 <UART_SetConfig+0xa3e>
 80249ec:	2b20      	cmp	r3, #32
 80249ee:	d87a      	bhi.n	8024ae6 <UART_SetConfig+0xa3e>
 80249f0:	a201      	add	r2, pc, #4	@ (adr r2, 80249f8 <UART_SetConfig+0x950>)
 80249f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80249f6:	bf00      	nop
 80249f8:	08024a83 	.word	0x08024a83
 80249fc:	08024a8b 	.word	0x08024a8b
 8024a00:	08024ae7 	.word	0x08024ae7
 8024a04:	08024ae7 	.word	0x08024ae7
 8024a08:	08024a93 	.word	0x08024a93
 8024a0c:	08024ae7 	.word	0x08024ae7
 8024a10:	08024ae7 	.word	0x08024ae7
 8024a14:	08024ae7 	.word	0x08024ae7
 8024a18:	08024aa3 	.word	0x08024aa3
 8024a1c:	08024ae7 	.word	0x08024ae7
 8024a20:	08024ae7 	.word	0x08024ae7
 8024a24:	08024ae7 	.word	0x08024ae7
 8024a28:	08024ae7 	.word	0x08024ae7
 8024a2c:	08024ae7 	.word	0x08024ae7
 8024a30:	08024ae7 	.word	0x08024ae7
 8024a34:	08024ae7 	.word	0x08024ae7
 8024a38:	08024ab3 	.word	0x08024ab3
 8024a3c:	08024ae7 	.word	0x08024ae7
 8024a40:	08024ae7 	.word	0x08024ae7
 8024a44:	08024ae7 	.word	0x08024ae7
 8024a48:	08024ae7 	.word	0x08024ae7
 8024a4c:	08024ae7 	.word	0x08024ae7
 8024a50:	08024ae7 	.word	0x08024ae7
 8024a54:	08024ae7 	.word	0x08024ae7
 8024a58:	08024ae7 	.word	0x08024ae7
 8024a5c:	08024ae7 	.word	0x08024ae7
 8024a60:	08024ae7 	.word	0x08024ae7
 8024a64:	08024ae7 	.word	0x08024ae7
 8024a68:	08024ae7 	.word	0x08024ae7
 8024a6c:	08024ae7 	.word	0x08024ae7
 8024a70:	08024ae7 	.word	0x08024ae7
 8024a74:	08024ae7 	.word	0x08024ae7
 8024a78:	08024ad9 	.word	0x08024ad9
 8024a7c:	2b40      	cmp	r3, #64	@ 0x40
 8024a7e:	d02e      	beq.n	8024ade <UART_SetConfig+0xa36>
 8024a80:	e031      	b.n	8024ae6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8024a82:	f7fa ff5b 	bl	801f93c <HAL_RCC_GetPCLK1Freq>
 8024a86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8024a88:	e033      	b.n	8024af2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8024a8a:	f7fa ff6d 	bl	801f968 <HAL_RCC_GetPCLK2Freq>
 8024a8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8024a90:	e02f      	b.n	8024af2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8024a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8024a96:	4618      	mov	r0, r3
 8024a98:	f7fc ff1c 	bl	80218d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8024a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024aa0:	e027      	b.n	8024af2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8024aa2:	f107 0318 	add.w	r3, r7, #24
 8024aa6:	4618      	mov	r0, r3
 8024aa8:	f7fd f868 	bl	8021b7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8024aac:	69fb      	ldr	r3, [r7, #28]
 8024aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024ab0:	e01f      	b.n	8024af2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8024ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8024b68 <UART_SetConfig+0xac0>)
 8024ab4:	681b      	ldr	r3, [r3, #0]
 8024ab6:	f003 0320 	and.w	r3, r3, #32
 8024aba:	2b00      	cmp	r3, #0
 8024abc:	d009      	beq.n	8024ad2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8024abe:	4b2a      	ldr	r3, [pc, #168]	@ (8024b68 <UART_SetConfig+0xac0>)
 8024ac0:	681b      	ldr	r3, [r3, #0]
 8024ac2:	08db      	lsrs	r3, r3, #3
 8024ac4:	f003 0303 	and.w	r3, r3, #3
 8024ac8:	4a28      	ldr	r2, [pc, #160]	@ (8024b6c <UART_SetConfig+0xac4>)
 8024aca:	fa22 f303 	lsr.w	r3, r2, r3
 8024ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8024ad0:	e00f      	b.n	8024af2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8024ad2:	4b26      	ldr	r3, [pc, #152]	@ (8024b6c <UART_SetConfig+0xac4>)
 8024ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024ad6:	e00c      	b.n	8024af2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8024ad8:	4b25      	ldr	r3, [pc, #148]	@ (8024b70 <UART_SetConfig+0xac8>)
 8024ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024adc:	e009      	b.n	8024af2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8024ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8024ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024ae4:	e005      	b.n	8024af2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8024ae6:	2300      	movs	r3, #0
 8024ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8024aea:	2301      	movs	r3, #1
 8024aec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8024af0:	bf00      	nop
    }

    if (pclk != 0U)
 8024af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024af4:	2b00      	cmp	r3, #0
 8024af6:	d021      	beq.n	8024b3c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8024af8:	697b      	ldr	r3, [r7, #20]
 8024afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024afc:	4a1d      	ldr	r2, [pc, #116]	@ (8024b74 <UART_SetConfig+0xacc>)
 8024afe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8024b02:	461a      	mov	r2, r3
 8024b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024b06:	fbb3 f2f2 	udiv	r2, r3, r2
 8024b0a:	697b      	ldr	r3, [r7, #20]
 8024b0c:	685b      	ldr	r3, [r3, #4]
 8024b0e:	085b      	lsrs	r3, r3, #1
 8024b10:	441a      	add	r2, r3
 8024b12:	697b      	ldr	r3, [r7, #20]
 8024b14:	685b      	ldr	r3, [r3, #4]
 8024b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8024b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8024b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024b1e:	2b0f      	cmp	r3, #15
 8024b20:	d909      	bls.n	8024b36 <UART_SetConfig+0xa8e>
 8024b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8024b28:	d205      	bcs.n	8024b36 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8024b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024b2c:	b29a      	uxth	r2, r3
 8024b2e:	697b      	ldr	r3, [r7, #20]
 8024b30:	681b      	ldr	r3, [r3, #0]
 8024b32:	60da      	str	r2, [r3, #12]
 8024b34:	e002      	b.n	8024b3c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8024b36:	2301      	movs	r3, #1
 8024b38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8024b3c:	697b      	ldr	r3, [r7, #20]
 8024b3e:	2201      	movs	r2, #1
 8024b40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8024b44:	697b      	ldr	r3, [r7, #20]
 8024b46:	2201      	movs	r2, #1
 8024b48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8024b4c:	697b      	ldr	r3, [r7, #20]
 8024b4e:	2200      	movs	r2, #0
 8024b50:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8024b52:	697b      	ldr	r3, [r7, #20]
 8024b54:	2200      	movs	r2, #0
 8024b56:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8024b58:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8024b5c:	4618      	mov	r0, r3
 8024b5e:	3748      	adds	r7, #72	@ 0x48
 8024b60:	46bd      	mov	sp, r7
 8024b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8024b66:	bf00      	nop
 8024b68:	58024400 	.word	0x58024400
 8024b6c:	03d09000 	.word	0x03d09000
 8024b70:	003d0900 	.word	0x003d0900
 8024b74:	0802b670 	.word	0x0802b670

08024b78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8024b78:	b480      	push	{r7}
 8024b7a:	b083      	sub	sp, #12
 8024b7c:	af00      	add	r7, sp, #0
 8024b7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8024b80:	687b      	ldr	r3, [r7, #4]
 8024b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024b84:	f003 0308 	and.w	r3, r3, #8
 8024b88:	2b00      	cmp	r3, #0
 8024b8a:	d00a      	beq.n	8024ba2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8024b8c:	687b      	ldr	r3, [r7, #4]
 8024b8e:	681b      	ldr	r3, [r3, #0]
 8024b90:	685b      	ldr	r3, [r3, #4]
 8024b92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8024b96:	687b      	ldr	r3, [r7, #4]
 8024b98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8024b9a:	687b      	ldr	r3, [r7, #4]
 8024b9c:	681b      	ldr	r3, [r3, #0]
 8024b9e:	430a      	orrs	r2, r1
 8024ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8024ba2:	687b      	ldr	r3, [r7, #4]
 8024ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024ba6:	f003 0301 	and.w	r3, r3, #1
 8024baa:	2b00      	cmp	r3, #0
 8024bac:	d00a      	beq.n	8024bc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8024bae:	687b      	ldr	r3, [r7, #4]
 8024bb0:	681b      	ldr	r3, [r3, #0]
 8024bb2:	685b      	ldr	r3, [r3, #4]
 8024bb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8024bb8:	687b      	ldr	r3, [r7, #4]
 8024bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024bbc:	687b      	ldr	r3, [r7, #4]
 8024bbe:	681b      	ldr	r3, [r3, #0]
 8024bc0:	430a      	orrs	r2, r1
 8024bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8024bc4:	687b      	ldr	r3, [r7, #4]
 8024bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024bc8:	f003 0302 	and.w	r3, r3, #2
 8024bcc:	2b00      	cmp	r3, #0
 8024bce:	d00a      	beq.n	8024be6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8024bd0:	687b      	ldr	r3, [r7, #4]
 8024bd2:	681b      	ldr	r3, [r3, #0]
 8024bd4:	685b      	ldr	r3, [r3, #4]
 8024bd6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8024bda:	687b      	ldr	r3, [r7, #4]
 8024bdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8024bde:	687b      	ldr	r3, [r7, #4]
 8024be0:	681b      	ldr	r3, [r3, #0]
 8024be2:	430a      	orrs	r2, r1
 8024be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8024be6:	687b      	ldr	r3, [r7, #4]
 8024be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024bea:	f003 0304 	and.w	r3, r3, #4
 8024bee:	2b00      	cmp	r3, #0
 8024bf0:	d00a      	beq.n	8024c08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8024bf2:	687b      	ldr	r3, [r7, #4]
 8024bf4:	681b      	ldr	r3, [r3, #0]
 8024bf6:	685b      	ldr	r3, [r3, #4]
 8024bf8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8024bfc:	687b      	ldr	r3, [r7, #4]
 8024bfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8024c00:	687b      	ldr	r3, [r7, #4]
 8024c02:	681b      	ldr	r3, [r3, #0]
 8024c04:	430a      	orrs	r2, r1
 8024c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8024c08:	687b      	ldr	r3, [r7, #4]
 8024c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024c0c:	f003 0310 	and.w	r3, r3, #16
 8024c10:	2b00      	cmp	r3, #0
 8024c12:	d00a      	beq.n	8024c2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8024c14:	687b      	ldr	r3, [r7, #4]
 8024c16:	681b      	ldr	r3, [r3, #0]
 8024c18:	689b      	ldr	r3, [r3, #8]
 8024c1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8024c1e:	687b      	ldr	r3, [r7, #4]
 8024c20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8024c22:	687b      	ldr	r3, [r7, #4]
 8024c24:	681b      	ldr	r3, [r3, #0]
 8024c26:	430a      	orrs	r2, r1
 8024c28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8024c2a:	687b      	ldr	r3, [r7, #4]
 8024c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024c2e:	f003 0320 	and.w	r3, r3, #32
 8024c32:	2b00      	cmp	r3, #0
 8024c34:	d00a      	beq.n	8024c4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8024c36:	687b      	ldr	r3, [r7, #4]
 8024c38:	681b      	ldr	r3, [r3, #0]
 8024c3a:	689b      	ldr	r3, [r3, #8]
 8024c3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8024c40:	687b      	ldr	r3, [r7, #4]
 8024c42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8024c44:	687b      	ldr	r3, [r7, #4]
 8024c46:	681b      	ldr	r3, [r3, #0]
 8024c48:	430a      	orrs	r2, r1
 8024c4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8024c4c:	687b      	ldr	r3, [r7, #4]
 8024c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024c54:	2b00      	cmp	r3, #0
 8024c56:	d01a      	beq.n	8024c8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8024c58:	687b      	ldr	r3, [r7, #4]
 8024c5a:	681b      	ldr	r3, [r3, #0]
 8024c5c:	685b      	ldr	r3, [r3, #4]
 8024c5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8024c62:	687b      	ldr	r3, [r7, #4]
 8024c64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8024c66:	687b      	ldr	r3, [r7, #4]
 8024c68:	681b      	ldr	r3, [r3, #0]
 8024c6a:	430a      	orrs	r2, r1
 8024c6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8024c6e:	687b      	ldr	r3, [r7, #4]
 8024c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8024c72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8024c76:	d10a      	bne.n	8024c8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8024c78:	687b      	ldr	r3, [r7, #4]
 8024c7a:	681b      	ldr	r3, [r3, #0]
 8024c7c:	685b      	ldr	r3, [r3, #4]
 8024c7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8024c82:	687b      	ldr	r3, [r7, #4]
 8024c84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8024c86:	687b      	ldr	r3, [r7, #4]
 8024c88:	681b      	ldr	r3, [r3, #0]
 8024c8a:	430a      	orrs	r2, r1
 8024c8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8024c8e:	687b      	ldr	r3, [r7, #4]
 8024c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8024c96:	2b00      	cmp	r3, #0
 8024c98:	d00a      	beq.n	8024cb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8024c9a:	687b      	ldr	r3, [r7, #4]
 8024c9c:	681b      	ldr	r3, [r3, #0]
 8024c9e:	685b      	ldr	r3, [r3, #4]
 8024ca0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8024ca4:	687b      	ldr	r3, [r7, #4]
 8024ca6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8024ca8:	687b      	ldr	r3, [r7, #4]
 8024caa:	681b      	ldr	r3, [r3, #0]
 8024cac:	430a      	orrs	r2, r1
 8024cae:	605a      	str	r2, [r3, #4]
  }
}
 8024cb0:	bf00      	nop
 8024cb2:	370c      	adds	r7, #12
 8024cb4:	46bd      	mov	sp, r7
 8024cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cba:	4770      	bx	lr

08024cbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8024cbc:	b580      	push	{r7, lr}
 8024cbe:	b098      	sub	sp, #96	@ 0x60
 8024cc0:	af02      	add	r7, sp, #8
 8024cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8024cc4:	687b      	ldr	r3, [r7, #4]
 8024cc6:	2200      	movs	r2, #0
 8024cc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8024ccc:	f7f6 ff42 	bl	801bb54 <HAL_GetTick>
 8024cd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8024cd2:	687b      	ldr	r3, [r7, #4]
 8024cd4:	681b      	ldr	r3, [r3, #0]
 8024cd6:	681b      	ldr	r3, [r3, #0]
 8024cd8:	f003 0308 	and.w	r3, r3, #8
 8024cdc:	2b08      	cmp	r3, #8
 8024cde:	d12f      	bne.n	8024d40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8024ce0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8024ce4:	9300      	str	r3, [sp, #0]
 8024ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8024ce8:	2200      	movs	r2, #0
 8024cea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8024cee:	6878      	ldr	r0, [r7, #4]
 8024cf0:	f000 f88e 	bl	8024e10 <UART_WaitOnFlagUntilTimeout>
 8024cf4:	4603      	mov	r3, r0
 8024cf6:	2b00      	cmp	r3, #0
 8024cf8:	d022      	beq.n	8024d40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8024cfa:	687b      	ldr	r3, [r7, #4]
 8024cfc:	681b      	ldr	r3, [r3, #0]
 8024cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024d02:	e853 3f00 	ldrex	r3, [r3]
 8024d06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8024d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024d0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8024d0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8024d10:	687b      	ldr	r3, [r7, #4]
 8024d12:	681b      	ldr	r3, [r3, #0]
 8024d14:	461a      	mov	r2, r3
 8024d16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8024d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8024d1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024d1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8024d1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8024d20:	e841 2300 	strex	r3, r2, [r1]
 8024d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8024d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024d28:	2b00      	cmp	r3, #0
 8024d2a:	d1e6      	bne.n	8024cfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8024d2c:	687b      	ldr	r3, [r7, #4]
 8024d2e:	2220      	movs	r2, #32
 8024d30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8024d34:	687b      	ldr	r3, [r7, #4]
 8024d36:	2200      	movs	r2, #0
 8024d38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8024d3c:	2303      	movs	r3, #3
 8024d3e:	e063      	b.n	8024e08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8024d40:	687b      	ldr	r3, [r7, #4]
 8024d42:	681b      	ldr	r3, [r3, #0]
 8024d44:	681b      	ldr	r3, [r3, #0]
 8024d46:	f003 0304 	and.w	r3, r3, #4
 8024d4a:	2b04      	cmp	r3, #4
 8024d4c:	d149      	bne.n	8024de2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8024d4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8024d52:	9300      	str	r3, [sp, #0]
 8024d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8024d56:	2200      	movs	r2, #0
 8024d58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8024d5c:	6878      	ldr	r0, [r7, #4]
 8024d5e:	f000 f857 	bl	8024e10 <UART_WaitOnFlagUntilTimeout>
 8024d62:	4603      	mov	r3, r0
 8024d64:	2b00      	cmp	r3, #0
 8024d66:	d03c      	beq.n	8024de2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8024d68:	687b      	ldr	r3, [r7, #4]
 8024d6a:	681b      	ldr	r3, [r3, #0]
 8024d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024d70:	e853 3f00 	ldrex	r3, [r3]
 8024d74:	623b      	str	r3, [r7, #32]
   return(result);
 8024d76:	6a3b      	ldr	r3, [r7, #32]
 8024d78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8024d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8024d7e:	687b      	ldr	r3, [r7, #4]
 8024d80:	681b      	ldr	r3, [r3, #0]
 8024d82:	461a      	mov	r2, r3
 8024d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8024d86:	633b      	str	r3, [r7, #48]	@ 0x30
 8024d88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024d8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8024d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024d8e:	e841 2300 	strex	r3, r2, [r1]
 8024d92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8024d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024d96:	2b00      	cmp	r3, #0
 8024d98:	d1e6      	bne.n	8024d68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8024d9a:	687b      	ldr	r3, [r7, #4]
 8024d9c:	681b      	ldr	r3, [r3, #0]
 8024d9e:	3308      	adds	r3, #8
 8024da0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024da2:	693b      	ldr	r3, [r7, #16]
 8024da4:	e853 3f00 	ldrex	r3, [r3]
 8024da8:	60fb      	str	r3, [r7, #12]
   return(result);
 8024daa:	68fb      	ldr	r3, [r7, #12]
 8024dac:	f023 0301 	bic.w	r3, r3, #1
 8024db0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8024db2:	687b      	ldr	r3, [r7, #4]
 8024db4:	681b      	ldr	r3, [r3, #0]
 8024db6:	3308      	adds	r3, #8
 8024db8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8024dba:	61fa      	str	r2, [r7, #28]
 8024dbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024dbe:	69b9      	ldr	r1, [r7, #24]
 8024dc0:	69fa      	ldr	r2, [r7, #28]
 8024dc2:	e841 2300 	strex	r3, r2, [r1]
 8024dc6:	617b      	str	r3, [r7, #20]
   return(result);
 8024dc8:	697b      	ldr	r3, [r7, #20]
 8024dca:	2b00      	cmp	r3, #0
 8024dcc:	d1e5      	bne.n	8024d9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8024dce:	687b      	ldr	r3, [r7, #4]
 8024dd0:	2220      	movs	r2, #32
 8024dd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8024dd6:	687b      	ldr	r3, [r7, #4]
 8024dd8:	2200      	movs	r2, #0
 8024dda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8024dde:	2303      	movs	r3, #3
 8024de0:	e012      	b.n	8024e08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8024de2:	687b      	ldr	r3, [r7, #4]
 8024de4:	2220      	movs	r2, #32
 8024de6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8024dea:	687b      	ldr	r3, [r7, #4]
 8024dec:	2220      	movs	r2, #32
 8024dee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8024df2:	687b      	ldr	r3, [r7, #4]
 8024df4:	2200      	movs	r2, #0
 8024df6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8024df8:	687b      	ldr	r3, [r7, #4]
 8024dfa:	2200      	movs	r2, #0
 8024dfc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8024dfe:	687b      	ldr	r3, [r7, #4]
 8024e00:	2200      	movs	r2, #0
 8024e02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8024e06:	2300      	movs	r3, #0
}
 8024e08:	4618      	mov	r0, r3
 8024e0a:	3758      	adds	r7, #88	@ 0x58
 8024e0c:	46bd      	mov	sp, r7
 8024e0e:	bd80      	pop	{r7, pc}

08024e10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8024e10:	b580      	push	{r7, lr}
 8024e12:	b084      	sub	sp, #16
 8024e14:	af00      	add	r7, sp, #0
 8024e16:	60f8      	str	r0, [r7, #12]
 8024e18:	60b9      	str	r1, [r7, #8]
 8024e1a:	603b      	str	r3, [r7, #0]
 8024e1c:	4613      	mov	r3, r2
 8024e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8024e20:	e04f      	b.n	8024ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8024e22:	69bb      	ldr	r3, [r7, #24]
 8024e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024e28:	d04b      	beq.n	8024ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8024e2a:	f7f6 fe93 	bl	801bb54 <HAL_GetTick>
 8024e2e:	4602      	mov	r2, r0
 8024e30:	683b      	ldr	r3, [r7, #0]
 8024e32:	1ad3      	subs	r3, r2, r3
 8024e34:	69ba      	ldr	r2, [r7, #24]
 8024e36:	429a      	cmp	r2, r3
 8024e38:	d302      	bcc.n	8024e40 <UART_WaitOnFlagUntilTimeout+0x30>
 8024e3a:	69bb      	ldr	r3, [r7, #24]
 8024e3c:	2b00      	cmp	r3, #0
 8024e3e:	d101      	bne.n	8024e44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8024e40:	2303      	movs	r3, #3
 8024e42:	e04e      	b.n	8024ee2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8024e44:	68fb      	ldr	r3, [r7, #12]
 8024e46:	681b      	ldr	r3, [r3, #0]
 8024e48:	681b      	ldr	r3, [r3, #0]
 8024e4a:	f003 0304 	and.w	r3, r3, #4
 8024e4e:	2b00      	cmp	r3, #0
 8024e50:	d037      	beq.n	8024ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8024e52:	68bb      	ldr	r3, [r7, #8]
 8024e54:	2b80      	cmp	r3, #128	@ 0x80
 8024e56:	d034      	beq.n	8024ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8024e58:	68bb      	ldr	r3, [r7, #8]
 8024e5a:	2b40      	cmp	r3, #64	@ 0x40
 8024e5c:	d031      	beq.n	8024ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8024e5e:	68fb      	ldr	r3, [r7, #12]
 8024e60:	681b      	ldr	r3, [r3, #0]
 8024e62:	69db      	ldr	r3, [r3, #28]
 8024e64:	f003 0308 	and.w	r3, r3, #8
 8024e68:	2b08      	cmp	r3, #8
 8024e6a:	d110      	bne.n	8024e8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8024e6c:	68fb      	ldr	r3, [r7, #12]
 8024e6e:	681b      	ldr	r3, [r3, #0]
 8024e70:	2208      	movs	r2, #8
 8024e72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8024e74:	68f8      	ldr	r0, [r7, #12]
 8024e76:	f000 f839 	bl	8024eec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8024e7a:	68fb      	ldr	r3, [r7, #12]
 8024e7c:	2208      	movs	r2, #8
 8024e7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8024e82:	68fb      	ldr	r3, [r7, #12]
 8024e84:	2200      	movs	r2, #0
 8024e86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8024e8a:	2301      	movs	r3, #1
 8024e8c:	e029      	b.n	8024ee2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8024e8e:	68fb      	ldr	r3, [r7, #12]
 8024e90:	681b      	ldr	r3, [r3, #0]
 8024e92:	69db      	ldr	r3, [r3, #28]
 8024e94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8024e98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8024e9c:	d111      	bne.n	8024ec2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8024e9e:	68fb      	ldr	r3, [r7, #12]
 8024ea0:	681b      	ldr	r3, [r3, #0]
 8024ea2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8024ea6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8024ea8:	68f8      	ldr	r0, [r7, #12]
 8024eaa:	f000 f81f 	bl	8024eec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8024eae:	68fb      	ldr	r3, [r7, #12]
 8024eb0:	2220      	movs	r2, #32
 8024eb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8024eb6:	68fb      	ldr	r3, [r7, #12]
 8024eb8:	2200      	movs	r2, #0
 8024eba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8024ebe:	2303      	movs	r3, #3
 8024ec0:	e00f      	b.n	8024ee2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8024ec2:	68fb      	ldr	r3, [r7, #12]
 8024ec4:	681b      	ldr	r3, [r3, #0]
 8024ec6:	69da      	ldr	r2, [r3, #28]
 8024ec8:	68bb      	ldr	r3, [r7, #8]
 8024eca:	4013      	ands	r3, r2
 8024ecc:	68ba      	ldr	r2, [r7, #8]
 8024ece:	429a      	cmp	r2, r3
 8024ed0:	bf0c      	ite	eq
 8024ed2:	2301      	moveq	r3, #1
 8024ed4:	2300      	movne	r3, #0
 8024ed6:	b2db      	uxtb	r3, r3
 8024ed8:	461a      	mov	r2, r3
 8024eda:	79fb      	ldrb	r3, [r7, #7]
 8024edc:	429a      	cmp	r2, r3
 8024ede:	d0a0      	beq.n	8024e22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8024ee0:	2300      	movs	r3, #0
}
 8024ee2:	4618      	mov	r0, r3
 8024ee4:	3710      	adds	r7, #16
 8024ee6:	46bd      	mov	sp, r7
 8024ee8:	bd80      	pop	{r7, pc}
	...

08024eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8024eec:	b480      	push	{r7}
 8024eee:	b095      	sub	sp, #84	@ 0x54
 8024ef0:	af00      	add	r7, sp, #0
 8024ef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8024ef4:	687b      	ldr	r3, [r7, #4]
 8024ef6:	681b      	ldr	r3, [r3, #0]
 8024ef8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024efc:	e853 3f00 	ldrex	r3, [r3]
 8024f00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8024f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024f04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8024f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8024f0a:	687b      	ldr	r3, [r7, #4]
 8024f0c:	681b      	ldr	r3, [r3, #0]
 8024f0e:	461a      	mov	r2, r3
 8024f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8024f12:	643b      	str	r3, [r7, #64]	@ 0x40
 8024f14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024f16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8024f18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8024f1a:	e841 2300 	strex	r3, r2, [r1]
 8024f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8024f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024f22:	2b00      	cmp	r3, #0
 8024f24:	d1e6      	bne.n	8024ef4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8024f26:	687b      	ldr	r3, [r7, #4]
 8024f28:	681b      	ldr	r3, [r3, #0]
 8024f2a:	3308      	adds	r3, #8
 8024f2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024f2e:	6a3b      	ldr	r3, [r7, #32]
 8024f30:	e853 3f00 	ldrex	r3, [r3]
 8024f34:	61fb      	str	r3, [r7, #28]
   return(result);
 8024f36:	69fa      	ldr	r2, [r7, #28]
 8024f38:	4b1e      	ldr	r3, [pc, #120]	@ (8024fb4 <UART_EndRxTransfer+0xc8>)
 8024f3a:	4013      	ands	r3, r2
 8024f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8024f3e:	687b      	ldr	r3, [r7, #4]
 8024f40:	681b      	ldr	r3, [r3, #0]
 8024f42:	3308      	adds	r3, #8
 8024f44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8024f46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8024f48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024f4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8024f4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8024f4e:	e841 2300 	strex	r3, r2, [r1]
 8024f52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8024f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024f56:	2b00      	cmp	r3, #0
 8024f58:	d1e5      	bne.n	8024f26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8024f5a:	687b      	ldr	r3, [r7, #4]
 8024f5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8024f5e:	2b01      	cmp	r3, #1
 8024f60:	d118      	bne.n	8024f94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8024f62:	687b      	ldr	r3, [r7, #4]
 8024f64:	681b      	ldr	r3, [r3, #0]
 8024f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024f68:	68fb      	ldr	r3, [r7, #12]
 8024f6a:	e853 3f00 	ldrex	r3, [r3]
 8024f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8024f70:	68bb      	ldr	r3, [r7, #8]
 8024f72:	f023 0310 	bic.w	r3, r3, #16
 8024f76:	647b      	str	r3, [r7, #68]	@ 0x44
 8024f78:	687b      	ldr	r3, [r7, #4]
 8024f7a:	681b      	ldr	r3, [r3, #0]
 8024f7c:	461a      	mov	r2, r3
 8024f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8024f80:	61bb      	str	r3, [r7, #24]
 8024f82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024f84:	6979      	ldr	r1, [r7, #20]
 8024f86:	69ba      	ldr	r2, [r7, #24]
 8024f88:	e841 2300 	strex	r3, r2, [r1]
 8024f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8024f8e:	693b      	ldr	r3, [r7, #16]
 8024f90:	2b00      	cmp	r3, #0
 8024f92:	d1e6      	bne.n	8024f62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8024f94:	687b      	ldr	r3, [r7, #4]
 8024f96:	2220      	movs	r2, #32
 8024f98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8024f9c:	687b      	ldr	r3, [r7, #4]
 8024f9e:	2200      	movs	r2, #0
 8024fa0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8024fa2:	687b      	ldr	r3, [r7, #4]
 8024fa4:	2200      	movs	r2, #0
 8024fa6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8024fa8:	bf00      	nop
 8024faa:	3754      	adds	r7, #84	@ 0x54
 8024fac:	46bd      	mov	sp, r7
 8024fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fb2:	4770      	bx	lr
 8024fb4:	effffffe 	.word	0xeffffffe

08024fb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8024fb8:	b480      	push	{r7}
 8024fba:	b085      	sub	sp, #20
 8024fbc:	af00      	add	r7, sp, #0
 8024fbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8024fc0:	687b      	ldr	r3, [r7, #4]
 8024fc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8024fc6:	2b01      	cmp	r3, #1
 8024fc8:	d101      	bne.n	8024fce <HAL_UARTEx_DisableFifoMode+0x16>
 8024fca:	2302      	movs	r3, #2
 8024fcc:	e027      	b.n	802501e <HAL_UARTEx_DisableFifoMode+0x66>
 8024fce:	687b      	ldr	r3, [r7, #4]
 8024fd0:	2201      	movs	r2, #1
 8024fd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8024fd6:	687b      	ldr	r3, [r7, #4]
 8024fd8:	2224      	movs	r2, #36	@ 0x24
 8024fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8024fde:	687b      	ldr	r3, [r7, #4]
 8024fe0:	681b      	ldr	r3, [r3, #0]
 8024fe2:	681b      	ldr	r3, [r3, #0]
 8024fe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8024fe6:	687b      	ldr	r3, [r7, #4]
 8024fe8:	681b      	ldr	r3, [r3, #0]
 8024fea:	681a      	ldr	r2, [r3, #0]
 8024fec:	687b      	ldr	r3, [r7, #4]
 8024fee:	681b      	ldr	r3, [r3, #0]
 8024ff0:	f022 0201 	bic.w	r2, r2, #1
 8024ff4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8024ff6:	68fb      	ldr	r3, [r7, #12]
 8024ff8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8024ffc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8024ffe:	687b      	ldr	r3, [r7, #4]
 8025000:	2200      	movs	r2, #0
 8025002:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8025004:	687b      	ldr	r3, [r7, #4]
 8025006:	681b      	ldr	r3, [r3, #0]
 8025008:	68fa      	ldr	r2, [r7, #12]
 802500a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802500c:	687b      	ldr	r3, [r7, #4]
 802500e:	2220      	movs	r2, #32
 8025010:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8025014:	687b      	ldr	r3, [r7, #4]
 8025016:	2200      	movs	r2, #0
 8025018:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802501c:	2300      	movs	r3, #0
}
 802501e:	4618      	mov	r0, r3
 8025020:	3714      	adds	r7, #20
 8025022:	46bd      	mov	sp, r7
 8025024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025028:	4770      	bx	lr

0802502a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802502a:	b580      	push	{r7, lr}
 802502c:	b084      	sub	sp, #16
 802502e:	af00      	add	r7, sp, #0
 8025030:	6078      	str	r0, [r7, #4]
 8025032:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8025034:	687b      	ldr	r3, [r7, #4]
 8025036:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802503a:	2b01      	cmp	r3, #1
 802503c:	d101      	bne.n	8025042 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 802503e:	2302      	movs	r3, #2
 8025040:	e02d      	b.n	802509e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8025042:	687b      	ldr	r3, [r7, #4]
 8025044:	2201      	movs	r2, #1
 8025046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802504a:	687b      	ldr	r3, [r7, #4]
 802504c:	2224      	movs	r2, #36	@ 0x24
 802504e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8025052:	687b      	ldr	r3, [r7, #4]
 8025054:	681b      	ldr	r3, [r3, #0]
 8025056:	681b      	ldr	r3, [r3, #0]
 8025058:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802505a:	687b      	ldr	r3, [r7, #4]
 802505c:	681b      	ldr	r3, [r3, #0]
 802505e:	681a      	ldr	r2, [r3, #0]
 8025060:	687b      	ldr	r3, [r7, #4]
 8025062:	681b      	ldr	r3, [r3, #0]
 8025064:	f022 0201 	bic.w	r2, r2, #1
 8025068:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802506a:	687b      	ldr	r3, [r7, #4]
 802506c:	681b      	ldr	r3, [r3, #0]
 802506e:	689b      	ldr	r3, [r3, #8]
 8025070:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8025074:	687b      	ldr	r3, [r7, #4]
 8025076:	681b      	ldr	r3, [r3, #0]
 8025078:	683a      	ldr	r2, [r7, #0]
 802507a:	430a      	orrs	r2, r1
 802507c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802507e:	6878      	ldr	r0, [r7, #4]
 8025080:	f000 f850 	bl	8025124 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8025084:	687b      	ldr	r3, [r7, #4]
 8025086:	681b      	ldr	r3, [r3, #0]
 8025088:	68fa      	ldr	r2, [r7, #12]
 802508a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802508c:	687b      	ldr	r3, [r7, #4]
 802508e:	2220      	movs	r2, #32
 8025090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8025094:	687b      	ldr	r3, [r7, #4]
 8025096:	2200      	movs	r2, #0
 8025098:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802509c:	2300      	movs	r3, #0
}
 802509e:	4618      	mov	r0, r3
 80250a0:	3710      	adds	r7, #16
 80250a2:	46bd      	mov	sp, r7
 80250a4:	bd80      	pop	{r7, pc}

080250a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80250a6:	b580      	push	{r7, lr}
 80250a8:	b084      	sub	sp, #16
 80250aa:	af00      	add	r7, sp, #0
 80250ac:	6078      	str	r0, [r7, #4]
 80250ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80250b0:	687b      	ldr	r3, [r7, #4]
 80250b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80250b6:	2b01      	cmp	r3, #1
 80250b8:	d101      	bne.n	80250be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80250ba:	2302      	movs	r3, #2
 80250bc:	e02d      	b.n	802511a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80250be:	687b      	ldr	r3, [r7, #4]
 80250c0:	2201      	movs	r2, #1
 80250c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80250c6:	687b      	ldr	r3, [r7, #4]
 80250c8:	2224      	movs	r2, #36	@ 0x24
 80250ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80250ce:	687b      	ldr	r3, [r7, #4]
 80250d0:	681b      	ldr	r3, [r3, #0]
 80250d2:	681b      	ldr	r3, [r3, #0]
 80250d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80250d6:	687b      	ldr	r3, [r7, #4]
 80250d8:	681b      	ldr	r3, [r3, #0]
 80250da:	681a      	ldr	r2, [r3, #0]
 80250dc:	687b      	ldr	r3, [r7, #4]
 80250de:	681b      	ldr	r3, [r3, #0]
 80250e0:	f022 0201 	bic.w	r2, r2, #1
 80250e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80250e6:	687b      	ldr	r3, [r7, #4]
 80250e8:	681b      	ldr	r3, [r3, #0]
 80250ea:	689b      	ldr	r3, [r3, #8]
 80250ec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80250f0:	687b      	ldr	r3, [r7, #4]
 80250f2:	681b      	ldr	r3, [r3, #0]
 80250f4:	683a      	ldr	r2, [r7, #0]
 80250f6:	430a      	orrs	r2, r1
 80250f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80250fa:	6878      	ldr	r0, [r7, #4]
 80250fc:	f000 f812 	bl	8025124 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8025100:	687b      	ldr	r3, [r7, #4]
 8025102:	681b      	ldr	r3, [r3, #0]
 8025104:	68fa      	ldr	r2, [r7, #12]
 8025106:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8025108:	687b      	ldr	r3, [r7, #4]
 802510a:	2220      	movs	r2, #32
 802510c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8025110:	687b      	ldr	r3, [r7, #4]
 8025112:	2200      	movs	r2, #0
 8025114:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8025118:	2300      	movs	r3, #0
}
 802511a:	4618      	mov	r0, r3
 802511c:	3710      	adds	r7, #16
 802511e:	46bd      	mov	sp, r7
 8025120:	bd80      	pop	{r7, pc}
	...

08025124 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8025124:	b480      	push	{r7}
 8025126:	b085      	sub	sp, #20
 8025128:	af00      	add	r7, sp, #0
 802512a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 802512c:	687b      	ldr	r3, [r7, #4]
 802512e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8025130:	2b00      	cmp	r3, #0
 8025132:	d108      	bne.n	8025146 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8025134:	687b      	ldr	r3, [r7, #4]
 8025136:	2201      	movs	r2, #1
 8025138:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 802513c:	687b      	ldr	r3, [r7, #4]
 802513e:	2201      	movs	r2, #1
 8025140:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8025144:	e031      	b.n	80251aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8025146:	2310      	movs	r3, #16
 8025148:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 802514a:	2310      	movs	r3, #16
 802514c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 802514e:	687b      	ldr	r3, [r7, #4]
 8025150:	681b      	ldr	r3, [r3, #0]
 8025152:	689b      	ldr	r3, [r3, #8]
 8025154:	0e5b      	lsrs	r3, r3, #25
 8025156:	b2db      	uxtb	r3, r3
 8025158:	f003 0307 	and.w	r3, r3, #7
 802515c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 802515e:	687b      	ldr	r3, [r7, #4]
 8025160:	681b      	ldr	r3, [r3, #0]
 8025162:	689b      	ldr	r3, [r3, #8]
 8025164:	0f5b      	lsrs	r3, r3, #29
 8025166:	b2db      	uxtb	r3, r3
 8025168:	f003 0307 	and.w	r3, r3, #7
 802516c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802516e:	7bbb      	ldrb	r3, [r7, #14]
 8025170:	7b3a      	ldrb	r2, [r7, #12]
 8025172:	4911      	ldr	r1, [pc, #68]	@ (80251b8 <UARTEx_SetNbDataToProcess+0x94>)
 8025174:	5c8a      	ldrb	r2, [r1, r2]
 8025176:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 802517a:	7b3a      	ldrb	r2, [r7, #12]
 802517c:	490f      	ldr	r1, [pc, #60]	@ (80251bc <UARTEx_SetNbDataToProcess+0x98>)
 802517e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8025180:	fb93 f3f2 	sdiv	r3, r3, r2
 8025184:	b29a      	uxth	r2, r3
 8025186:	687b      	ldr	r3, [r7, #4]
 8025188:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802518c:	7bfb      	ldrb	r3, [r7, #15]
 802518e:	7b7a      	ldrb	r2, [r7, #13]
 8025190:	4909      	ldr	r1, [pc, #36]	@ (80251b8 <UARTEx_SetNbDataToProcess+0x94>)
 8025192:	5c8a      	ldrb	r2, [r1, r2]
 8025194:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8025198:	7b7a      	ldrb	r2, [r7, #13]
 802519a:	4908      	ldr	r1, [pc, #32]	@ (80251bc <UARTEx_SetNbDataToProcess+0x98>)
 802519c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802519e:	fb93 f3f2 	sdiv	r3, r3, r2
 80251a2:	b29a      	uxth	r2, r3
 80251a4:	687b      	ldr	r3, [r7, #4]
 80251a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80251aa:	bf00      	nop
 80251ac:	3714      	adds	r7, #20
 80251ae:	46bd      	mov	sp, r7
 80251b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251b4:	4770      	bx	lr
 80251b6:	bf00      	nop
 80251b8:	0802b688 	.word	0x0802b688
 80251bc:	0802b690 	.word	0x0802b690

080251c0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80251c0:	b084      	sub	sp, #16
 80251c2:	b480      	push	{r7}
 80251c4:	b085      	sub	sp, #20
 80251c6:	af00      	add	r7, sp, #0
 80251c8:	6078      	str	r0, [r7, #4]
 80251ca:	f107 001c 	add.w	r0, r7, #28
 80251ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80251d2:	2300      	movs	r3, #0
 80251d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80251d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80251d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80251da:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80251dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 80251de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80251e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 80251e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80251e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 80251e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80251e8:	68fa      	ldr	r2, [r7, #12]
 80251ea:	4313      	orrs	r3, r2
 80251ec:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80251ee:	687b      	ldr	r3, [r7, #4]
 80251f0:	685a      	ldr	r2, [r3, #4]
 80251f2:	4b07      	ldr	r3, [pc, #28]	@ (8025210 <SDMMC_Init+0x50>)
 80251f4:	4013      	ands	r3, r2
 80251f6:	68fa      	ldr	r2, [r7, #12]
 80251f8:	431a      	orrs	r2, r3
 80251fa:	687b      	ldr	r3, [r7, #4]
 80251fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80251fe:	2300      	movs	r3, #0
}
 8025200:	4618      	mov	r0, r3
 8025202:	3714      	adds	r7, #20
 8025204:	46bd      	mov	sp, r7
 8025206:	f85d 7b04 	ldr.w	r7, [sp], #4
 802520a:	b004      	add	sp, #16
 802520c:	4770      	bx	lr
 802520e:	bf00      	nop
 8025210:	ffc02c00 	.word	0xffc02c00

08025214 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8025214:	b480      	push	{r7}
 8025216:	b083      	sub	sp, #12
 8025218:	af00      	add	r7, sp, #0
 802521a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 802521c:	687b      	ldr	r3, [r7, #4]
 802521e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8025222:	4618      	mov	r0, r3
 8025224:	370c      	adds	r7, #12
 8025226:	46bd      	mov	sp, r7
 8025228:	f85d 7b04 	ldr.w	r7, [sp], #4
 802522c:	4770      	bx	lr

0802522e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 802522e:	b480      	push	{r7}
 8025230:	b083      	sub	sp, #12
 8025232:	af00      	add	r7, sp, #0
 8025234:	6078      	str	r0, [r7, #4]
 8025236:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8025238:	683b      	ldr	r3, [r7, #0]
 802523a:	681a      	ldr	r2, [r3, #0]
 802523c:	687b      	ldr	r3, [r7, #4]
 802523e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8025242:	2300      	movs	r3, #0
}
 8025244:	4618      	mov	r0, r3
 8025246:	370c      	adds	r7, #12
 8025248:	46bd      	mov	sp, r7
 802524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802524e:	4770      	bx	lr

08025250 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8025250:	b480      	push	{r7}
 8025252:	b083      	sub	sp, #12
 8025254:	af00      	add	r7, sp, #0
 8025256:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8025258:	687b      	ldr	r3, [r7, #4]
 802525a:	681b      	ldr	r3, [r3, #0]
 802525c:	f043 0203 	orr.w	r2, r3, #3
 8025260:	687b      	ldr	r3, [r7, #4]
 8025262:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8025264:	2300      	movs	r3, #0
}
 8025266:	4618      	mov	r0, r3
 8025268:	370c      	adds	r7, #12
 802526a:	46bd      	mov	sp, r7
 802526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025270:	4770      	bx	lr

08025272 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8025272:	b480      	push	{r7}
 8025274:	b083      	sub	sp, #12
 8025276:	af00      	add	r7, sp, #0
 8025278:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 802527a:	687b      	ldr	r3, [r7, #4]
 802527c:	681b      	ldr	r3, [r3, #0]
 802527e:	f003 0303 	and.w	r3, r3, #3
}
 8025282:	4618      	mov	r0, r3
 8025284:	370c      	adds	r7, #12
 8025286:	46bd      	mov	sp, r7
 8025288:	f85d 7b04 	ldr.w	r7, [sp], #4
 802528c:	4770      	bx	lr
	...

08025290 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8025290:	b480      	push	{r7}
 8025292:	b085      	sub	sp, #20
 8025294:	af00      	add	r7, sp, #0
 8025296:	6078      	str	r0, [r7, #4]
 8025298:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 802529a:	2300      	movs	r3, #0
 802529c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 802529e:	683b      	ldr	r3, [r7, #0]
 80252a0:	681a      	ldr	r2, [r3, #0]
 80252a2:	687b      	ldr	r3, [r7, #4]
 80252a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80252a6:	683b      	ldr	r3, [r7, #0]
 80252a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80252aa:	683b      	ldr	r3, [r7, #0]
 80252ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80252ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80252b0:	683b      	ldr	r3, [r7, #0]
 80252b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80252b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80252b6:	683b      	ldr	r3, [r7, #0]
 80252b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80252ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80252bc:	68fa      	ldr	r2, [r7, #12]
 80252be:	4313      	orrs	r3, r2
 80252c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80252c2:	687b      	ldr	r3, [r7, #4]
 80252c4:	68da      	ldr	r2, [r3, #12]
 80252c6:	4b06      	ldr	r3, [pc, #24]	@ (80252e0 <SDMMC_SendCommand+0x50>)
 80252c8:	4013      	ands	r3, r2
 80252ca:	68fa      	ldr	r2, [r7, #12]
 80252cc:	431a      	orrs	r2, r3
 80252ce:	687b      	ldr	r3, [r7, #4]
 80252d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80252d2:	2300      	movs	r3, #0
}
 80252d4:	4618      	mov	r0, r3
 80252d6:	3714      	adds	r7, #20
 80252d8:	46bd      	mov	sp, r7
 80252da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252de:	4770      	bx	lr
 80252e0:	fffee0c0 	.word	0xfffee0c0

080252e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80252e4:	b480      	push	{r7}
 80252e6:	b083      	sub	sp, #12
 80252e8:	af00      	add	r7, sp, #0
 80252ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80252ec:	687b      	ldr	r3, [r7, #4]
 80252ee:	691b      	ldr	r3, [r3, #16]
 80252f0:	b2db      	uxtb	r3, r3
}
 80252f2:	4618      	mov	r0, r3
 80252f4:	370c      	adds	r7, #12
 80252f6:	46bd      	mov	sp, r7
 80252f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252fc:	4770      	bx	lr

080252fe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80252fe:	b480      	push	{r7}
 8025300:	b085      	sub	sp, #20
 8025302:	af00      	add	r7, sp, #0
 8025304:	6078      	str	r0, [r7, #4]
 8025306:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8025308:	687b      	ldr	r3, [r7, #4]
 802530a:	3314      	adds	r3, #20
 802530c:	461a      	mov	r2, r3
 802530e:	683b      	ldr	r3, [r7, #0]
 8025310:	4413      	add	r3, r2
 8025312:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8025314:	68fb      	ldr	r3, [r7, #12]
 8025316:	681b      	ldr	r3, [r3, #0]
}
 8025318:	4618      	mov	r0, r3
 802531a:	3714      	adds	r7, #20
 802531c:	46bd      	mov	sp, r7
 802531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025322:	4770      	bx	lr

08025324 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8025324:	b480      	push	{r7}
 8025326:	b085      	sub	sp, #20
 8025328:	af00      	add	r7, sp, #0
 802532a:	6078      	str	r0, [r7, #4]
 802532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 802532e:	2300      	movs	r3, #0
 8025330:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8025332:	683b      	ldr	r3, [r7, #0]
 8025334:	681a      	ldr	r2, [r3, #0]
 8025336:	687b      	ldr	r3, [r7, #4]
 8025338:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 802533a:	683b      	ldr	r3, [r7, #0]
 802533c:	685a      	ldr	r2, [r3, #4]
 802533e:	687b      	ldr	r3, [r7, #4]
 8025340:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8025342:	683b      	ldr	r3, [r7, #0]
 8025344:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8025346:	683b      	ldr	r3, [r7, #0]
 8025348:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 802534a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 802534c:	683b      	ldr	r3, [r7, #0]
 802534e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8025350:	431a      	orrs	r2, r3
                       Data->DPSM);
 8025352:	683b      	ldr	r3, [r7, #0]
 8025354:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8025356:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8025358:	68fa      	ldr	r2, [r7, #12]
 802535a:	4313      	orrs	r3, r2
 802535c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 802535e:	687b      	ldr	r3, [r7, #4]
 8025360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025362:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8025366:	68fb      	ldr	r3, [r7, #12]
 8025368:	431a      	orrs	r2, r3
 802536a:	687b      	ldr	r3, [r7, #4]
 802536c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 802536e:	2300      	movs	r3, #0

}
 8025370:	4618      	mov	r0, r3
 8025372:	3714      	adds	r7, #20
 8025374:	46bd      	mov	sp, r7
 8025376:	f85d 7b04 	ldr.w	r7, [sp], #4
 802537a:	4770      	bx	lr

0802537c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 802537c:	b580      	push	{r7, lr}
 802537e:	b088      	sub	sp, #32
 8025380:	af00      	add	r7, sp, #0
 8025382:	6078      	str	r0, [r7, #4]
 8025384:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8025386:	683b      	ldr	r3, [r7, #0]
 8025388:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 802538a:	2310      	movs	r3, #16
 802538c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802538e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025392:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025394:	2300      	movs	r3, #0
 8025396:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025398:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802539c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802539e:	f107 0308 	add.w	r3, r7, #8
 80253a2:	4619      	mov	r1, r3
 80253a4:	6878      	ldr	r0, [r7, #4]
 80253a6:	f7ff ff73 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80253aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80253ae:	2110      	movs	r1, #16
 80253b0:	6878      	ldr	r0, [r7, #4]
 80253b2:	f000 fa5f 	bl	8025874 <SDMMC_GetCmdResp1>
 80253b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80253b8:	69fb      	ldr	r3, [r7, #28]
}
 80253ba:	4618      	mov	r0, r3
 80253bc:	3720      	adds	r7, #32
 80253be:	46bd      	mov	sp, r7
 80253c0:	bd80      	pop	{r7, pc}

080253c2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80253c2:	b580      	push	{r7, lr}
 80253c4:	b088      	sub	sp, #32
 80253c6:	af00      	add	r7, sp, #0
 80253c8:	6078      	str	r0, [r7, #4]
 80253ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80253cc:	683b      	ldr	r3, [r7, #0]
 80253ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80253d0:	2311      	movs	r3, #17
 80253d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80253d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80253d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80253da:	2300      	movs	r3, #0
 80253dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80253de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80253e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80253e4:	f107 0308 	add.w	r3, r7, #8
 80253e8:	4619      	mov	r1, r3
 80253ea:	6878      	ldr	r0, [r7, #4]
 80253ec:	f7ff ff50 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80253f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80253f4:	2111      	movs	r1, #17
 80253f6:	6878      	ldr	r0, [r7, #4]
 80253f8:	f000 fa3c 	bl	8025874 <SDMMC_GetCmdResp1>
 80253fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80253fe:	69fb      	ldr	r3, [r7, #28]
}
 8025400:	4618      	mov	r0, r3
 8025402:	3720      	adds	r7, #32
 8025404:	46bd      	mov	sp, r7
 8025406:	bd80      	pop	{r7, pc}

08025408 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8025408:	b580      	push	{r7, lr}
 802540a:	b088      	sub	sp, #32
 802540c:	af00      	add	r7, sp, #0
 802540e:	6078      	str	r0, [r7, #4]
 8025410:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8025412:	683b      	ldr	r3, [r7, #0]
 8025414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8025416:	2312      	movs	r3, #18
 8025418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802541a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802541e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025420:	2300      	movs	r3, #0
 8025422:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025428:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802542a:	f107 0308 	add.w	r3, r7, #8
 802542e:	4619      	mov	r1, r3
 8025430:	6878      	ldr	r0, [r7, #4]
 8025432:	f7ff ff2d 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8025436:	f241 3288 	movw	r2, #5000	@ 0x1388
 802543a:	2112      	movs	r1, #18
 802543c:	6878      	ldr	r0, [r7, #4]
 802543e:	f000 fa19 	bl	8025874 <SDMMC_GetCmdResp1>
 8025442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025444:	69fb      	ldr	r3, [r7, #28]
}
 8025446:	4618      	mov	r0, r3
 8025448:	3720      	adds	r7, #32
 802544a:	46bd      	mov	sp, r7
 802544c:	bd80      	pop	{r7, pc}

0802544e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 802544e:	b580      	push	{r7, lr}
 8025450:	b088      	sub	sp, #32
 8025452:	af00      	add	r7, sp, #0
 8025454:	6078      	str	r0, [r7, #4]
 8025456:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8025458:	683b      	ldr	r3, [r7, #0]
 802545a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 802545c:	2318      	movs	r3, #24
 802545e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025460:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025466:	2300      	movs	r3, #0
 8025468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802546a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802546e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025470:	f107 0308 	add.w	r3, r7, #8
 8025474:	4619      	mov	r1, r3
 8025476:	6878      	ldr	r0, [r7, #4]
 8025478:	f7ff ff0a 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 802547c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025480:	2118      	movs	r1, #24
 8025482:	6878      	ldr	r0, [r7, #4]
 8025484:	f000 f9f6 	bl	8025874 <SDMMC_GetCmdResp1>
 8025488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802548a:	69fb      	ldr	r3, [r7, #28]
}
 802548c:	4618      	mov	r0, r3
 802548e:	3720      	adds	r7, #32
 8025490:	46bd      	mov	sp, r7
 8025492:	bd80      	pop	{r7, pc}

08025494 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8025494:	b580      	push	{r7, lr}
 8025496:	b088      	sub	sp, #32
 8025498:	af00      	add	r7, sp, #0
 802549a:	6078      	str	r0, [r7, #4]
 802549c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 802549e:	683b      	ldr	r3, [r7, #0]
 80254a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80254a2:	2319      	movs	r3, #25
 80254a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80254a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80254aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80254ac:	2300      	movs	r3, #0
 80254ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80254b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80254b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80254b6:	f107 0308 	add.w	r3, r7, #8
 80254ba:	4619      	mov	r1, r3
 80254bc:	6878      	ldr	r0, [r7, #4]
 80254be:	f7ff fee7 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80254c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80254c6:	2119      	movs	r1, #25
 80254c8:	6878      	ldr	r0, [r7, #4]
 80254ca:	f000 f9d3 	bl	8025874 <SDMMC_GetCmdResp1>
 80254ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80254d0:	69fb      	ldr	r3, [r7, #28]
}
 80254d2:	4618      	mov	r0, r3
 80254d4:	3720      	adds	r7, #32
 80254d6:	46bd      	mov	sp, r7
 80254d8:	bd80      	pop	{r7, pc}
	...

080254dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80254dc:	b580      	push	{r7, lr}
 80254de:	b088      	sub	sp, #32
 80254e0:	af00      	add	r7, sp, #0
 80254e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80254e4:	2300      	movs	r3, #0
 80254e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80254e8:	230c      	movs	r3, #12
 80254ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80254ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80254f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80254f2:	2300      	movs	r3, #0
 80254f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80254f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80254fa:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80254fc:	687b      	ldr	r3, [r7, #4]
 80254fe:	68db      	ldr	r3, [r3, #12]
 8025500:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8025504:	687b      	ldr	r3, [r7, #4]
 8025506:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8025508:	687b      	ldr	r3, [r7, #4]
 802550a:	68db      	ldr	r3, [r3, #12]
 802550c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8025510:	687b      	ldr	r3, [r7, #4]
 8025512:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025514:	f107 0308 	add.w	r3, r7, #8
 8025518:	4619      	mov	r1, r3
 802551a:	6878      	ldr	r0, [r7, #4]
 802551c:	f7ff feb8 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8025520:	4a0b      	ldr	r2, [pc, #44]	@ (8025550 <SDMMC_CmdStopTransfer+0x74>)
 8025522:	210c      	movs	r1, #12
 8025524:	6878      	ldr	r0, [r7, #4]
 8025526:	f000 f9a5 	bl	8025874 <SDMMC_GetCmdResp1>
 802552a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 802552c:	687b      	ldr	r3, [r7, #4]
 802552e:	68db      	ldr	r3, [r3, #12]
 8025530:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8025534:	687b      	ldr	r3, [r7, #4]
 8025536:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8025538:	69fb      	ldr	r3, [r7, #28]
 802553a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802553e:	d101      	bne.n	8025544 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8025540:	2300      	movs	r3, #0
 8025542:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8025544:	69fb      	ldr	r3, [r7, #28]
}
 8025546:	4618      	mov	r0, r3
 8025548:	3720      	adds	r7, #32
 802554a:	46bd      	mov	sp, r7
 802554c:	bd80      	pop	{r7, pc}
 802554e:	bf00      	nop
 8025550:	05f5e100 	.word	0x05f5e100

08025554 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8025554:	b580      	push	{r7, lr}
 8025556:	b088      	sub	sp, #32
 8025558:	af00      	add	r7, sp, #0
 802555a:	6078      	str	r0, [r7, #4]
 802555c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 802555e:	683b      	ldr	r3, [r7, #0]
 8025560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8025562:	2307      	movs	r3, #7
 8025564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025566:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802556a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802556c:	2300      	movs	r3, #0
 802556e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025570:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025574:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025576:	f107 0308 	add.w	r3, r7, #8
 802557a:	4619      	mov	r1, r3
 802557c:	6878      	ldr	r0, [r7, #4]
 802557e:	f7ff fe87 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8025582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025586:	2107      	movs	r1, #7
 8025588:	6878      	ldr	r0, [r7, #4]
 802558a:	f000 f973 	bl	8025874 <SDMMC_GetCmdResp1>
 802558e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025590:	69fb      	ldr	r3, [r7, #28]
}
 8025592:	4618      	mov	r0, r3
 8025594:	3720      	adds	r7, #32
 8025596:	46bd      	mov	sp, r7
 8025598:	bd80      	pop	{r7, pc}

0802559a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 802559a:	b580      	push	{r7, lr}
 802559c:	b088      	sub	sp, #32
 802559e:	af00      	add	r7, sp, #0
 80255a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80255a2:	2300      	movs	r3, #0
 80255a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80255a6:	2300      	movs	r3, #0
 80255a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80255aa:	2300      	movs	r3, #0
 80255ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80255ae:	2300      	movs	r3, #0
 80255b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80255b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80255b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80255b8:	f107 0308 	add.w	r3, r7, #8
 80255bc:	4619      	mov	r1, r3
 80255be:	6878      	ldr	r0, [r7, #4]
 80255c0:	f7ff fe66 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80255c4:	6878      	ldr	r0, [r7, #4]
 80255c6:	f000 fb97 	bl	8025cf8 <SDMMC_GetCmdError>
 80255ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80255cc:	69fb      	ldr	r3, [r7, #28]
}
 80255ce:	4618      	mov	r0, r3
 80255d0:	3720      	adds	r7, #32
 80255d2:	46bd      	mov	sp, r7
 80255d4:	bd80      	pop	{r7, pc}

080255d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80255d6:	b580      	push	{r7, lr}
 80255d8:	b088      	sub	sp, #32
 80255da:	af00      	add	r7, sp, #0
 80255dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80255de:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80255e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80255e4:	2308      	movs	r3, #8
 80255e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80255e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80255ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80255ee:	2300      	movs	r3, #0
 80255f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80255f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80255f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80255f8:	f107 0308 	add.w	r3, r7, #8
 80255fc:	4619      	mov	r1, r3
 80255fe:	6878      	ldr	r0, [r7, #4]
 8025600:	f7ff fe46 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8025604:	6878      	ldr	r0, [r7, #4]
 8025606:	f000 fb29 	bl	8025c5c <SDMMC_GetCmdResp7>
 802560a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802560c:	69fb      	ldr	r3, [r7, #28]
}
 802560e:	4618      	mov	r0, r3
 8025610:	3720      	adds	r7, #32
 8025612:	46bd      	mov	sp, r7
 8025614:	bd80      	pop	{r7, pc}

08025616 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8025616:	b580      	push	{r7, lr}
 8025618:	b088      	sub	sp, #32
 802561a:	af00      	add	r7, sp, #0
 802561c:	6078      	str	r0, [r7, #4]
 802561e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8025620:	683b      	ldr	r3, [r7, #0]
 8025622:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8025624:	2337      	movs	r3, #55	@ 0x37
 8025626:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025628:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802562c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802562e:	2300      	movs	r3, #0
 8025630:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025632:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025636:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025638:	f107 0308 	add.w	r3, r7, #8
 802563c:	4619      	mov	r1, r3
 802563e:	6878      	ldr	r0, [r7, #4]
 8025640:	f7ff fe26 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8025644:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025648:	2137      	movs	r1, #55	@ 0x37
 802564a:	6878      	ldr	r0, [r7, #4]
 802564c:	f000 f912 	bl	8025874 <SDMMC_GetCmdResp1>
 8025650:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025652:	69fb      	ldr	r3, [r7, #28]
}
 8025654:	4618      	mov	r0, r3
 8025656:	3720      	adds	r7, #32
 8025658:	46bd      	mov	sp, r7
 802565a:	bd80      	pop	{r7, pc}

0802565c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 802565c:	b580      	push	{r7, lr}
 802565e:	b088      	sub	sp, #32
 8025660:	af00      	add	r7, sp, #0
 8025662:	6078      	str	r0, [r7, #4]
 8025664:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8025666:	683b      	ldr	r3, [r7, #0]
 8025668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 802566a:	2329      	movs	r3, #41	@ 0x29
 802566c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802566e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025672:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025674:	2300      	movs	r3, #0
 8025676:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025678:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802567c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802567e:	f107 0308 	add.w	r3, r7, #8
 8025682:	4619      	mov	r1, r3
 8025684:	6878      	ldr	r0, [r7, #4]
 8025686:	f7ff fe03 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 802568a:	6878      	ldr	r0, [r7, #4]
 802568c:	f000 fa2e 	bl	8025aec <SDMMC_GetCmdResp3>
 8025690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025692:	69fb      	ldr	r3, [r7, #28]
}
 8025694:	4618      	mov	r0, r3
 8025696:	3720      	adds	r7, #32
 8025698:	46bd      	mov	sp, r7
 802569a:	bd80      	pop	{r7, pc}

0802569c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 802569c:	b580      	push	{r7, lr}
 802569e:	b088      	sub	sp, #32
 80256a0:	af00      	add	r7, sp, #0
 80256a2:	6078      	str	r0, [r7, #4]
 80256a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80256a6:	683b      	ldr	r3, [r7, #0]
 80256a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80256aa:	2306      	movs	r3, #6
 80256ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80256ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80256b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80256b4:	2300      	movs	r3, #0
 80256b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80256b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80256bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80256be:	f107 0308 	add.w	r3, r7, #8
 80256c2:	4619      	mov	r1, r3
 80256c4:	6878      	ldr	r0, [r7, #4]
 80256c6:	f7ff fde3 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80256ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80256ce:	2106      	movs	r1, #6
 80256d0:	6878      	ldr	r0, [r7, #4]
 80256d2:	f000 f8cf 	bl	8025874 <SDMMC_GetCmdResp1>
 80256d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80256d8:	69fb      	ldr	r3, [r7, #28]
}
 80256da:	4618      	mov	r0, r3
 80256dc:	3720      	adds	r7, #32
 80256de:	46bd      	mov	sp, r7
 80256e0:	bd80      	pop	{r7, pc}

080256e2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80256e2:	b580      	push	{r7, lr}
 80256e4:	b088      	sub	sp, #32
 80256e6:	af00      	add	r7, sp, #0
 80256e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80256ea:	2300      	movs	r3, #0
 80256ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80256ee:	2333      	movs	r3, #51	@ 0x33
 80256f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80256f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80256f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80256f8:	2300      	movs	r3, #0
 80256fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80256fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025700:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025702:	f107 0308 	add.w	r3, r7, #8
 8025706:	4619      	mov	r1, r3
 8025708:	6878      	ldr	r0, [r7, #4]
 802570a:	f7ff fdc1 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 802570e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025712:	2133      	movs	r1, #51	@ 0x33
 8025714:	6878      	ldr	r0, [r7, #4]
 8025716:	f000 f8ad 	bl	8025874 <SDMMC_GetCmdResp1>
 802571a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802571c:	69fb      	ldr	r3, [r7, #28]
}
 802571e:	4618      	mov	r0, r3
 8025720:	3720      	adds	r7, #32
 8025722:	46bd      	mov	sp, r7
 8025724:	bd80      	pop	{r7, pc}

08025726 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8025726:	b580      	push	{r7, lr}
 8025728:	b088      	sub	sp, #32
 802572a:	af00      	add	r7, sp, #0
 802572c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 802572e:	2300      	movs	r3, #0
 8025730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8025732:	2302      	movs	r3, #2
 8025734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8025736:	f44f 7340 	mov.w	r3, #768	@ 0x300
 802573a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802573c:	2300      	movs	r3, #0
 802573e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025744:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025746:	f107 0308 	add.w	r3, r7, #8
 802574a:	4619      	mov	r1, r3
 802574c:	6878      	ldr	r0, [r7, #4]
 802574e:	f7ff fd9f 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8025752:	6878      	ldr	r0, [r7, #4]
 8025754:	f000 f980 	bl	8025a58 <SDMMC_GetCmdResp2>
 8025758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802575a:	69fb      	ldr	r3, [r7, #28]
}
 802575c:	4618      	mov	r0, r3
 802575e:	3720      	adds	r7, #32
 8025760:	46bd      	mov	sp, r7
 8025762:	bd80      	pop	{r7, pc}

08025764 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8025764:	b580      	push	{r7, lr}
 8025766:	b088      	sub	sp, #32
 8025768:	af00      	add	r7, sp, #0
 802576a:	6078      	str	r0, [r7, #4]
 802576c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 802576e:	683b      	ldr	r3, [r7, #0]
 8025770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8025772:	2309      	movs	r3, #9
 8025774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8025776:	f44f 7340 	mov.w	r3, #768	@ 0x300
 802577a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802577c:	2300      	movs	r3, #0
 802577e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025780:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025784:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025786:	f107 0308 	add.w	r3, r7, #8
 802578a:	4619      	mov	r1, r3
 802578c:	6878      	ldr	r0, [r7, #4]
 802578e:	f7ff fd7f 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8025792:	6878      	ldr	r0, [r7, #4]
 8025794:	f000 f960 	bl	8025a58 <SDMMC_GetCmdResp2>
 8025798:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802579a:	69fb      	ldr	r3, [r7, #28]
}
 802579c:	4618      	mov	r0, r3
 802579e:	3720      	adds	r7, #32
 80257a0:	46bd      	mov	sp, r7
 80257a2:	bd80      	pop	{r7, pc}

080257a4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80257a4:	b580      	push	{r7, lr}
 80257a6:	b088      	sub	sp, #32
 80257a8:	af00      	add	r7, sp, #0
 80257aa:	6078      	str	r0, [r7, #4]
 80257ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80257ae:	2300      	movs	r3, #0
 80257b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80257b2:	2303      	movs	r3, #3
 80257b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80257b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80257ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80257bc:	2300      	movs	r3, #0
 80257be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80257c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80257c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80257c6:	f107 0308 	add.w	r3, r7, #8
 80257ca:	4619      	mov	r1, r3
 80257cc:	6878      	ldr	r0, [r7, #4]
 80257ce:	f7ff fd5f 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80257d2:	683a      	ldr	r2, [r7, #0]
 80257d4:	2103      	movs	r1, #3
 80257d6:	6878      	ldr	r0, [r7, #4]
 80257d8:	f000 f9c8 	bl	8025b6c <SDMMC_GetCmdResp6>
 80257dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80257de:	69fb      	ldr	r3, [r7, #28]
}
 80257e0:	4618      	mov	r0, r3
 80257e2:	3720      	adds	r7, #32
 80257e4:	46bd      	mov	sp, r7
 80257e6:	bd80      	pop	{r7, pc}

080257e8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80257e8:	b580      	push	{r7, lr}
 80257ea:	b088      	sub	sp, #32
 80257ec:	af00      	add	r7, sp, #0
 80257ee:	6078      	str	r0, [r7, #4]
 80257f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80257f2:	683b      	ldr	r3, [r7, #0]
 80257f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80257f6:	230d      	movs	r3, #13
 80257f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80257fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80257fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025800:	2300      	movs	r3, #0
 8025802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025808:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802580a:	f107 0308 	add.w	r3, r7, #8
 802580e:	4619      	mov	r1, r3
 8025810:	6878      	ldr	r0, [r7, #4]
 8025812:	f7ff fd3d 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8025816:	f241 3288 	movw	r2, #5000	@ 0x1388
 802581a:	210d      	movs	r1, #13
 802581c:	6878      	ldr	r0, [r7, #4]
 802581e:	f000 f829 	bl	8025874 <SDMMC_GetCmdResp1>
 8025822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025824:	69fb      	ldr	r3, [r7, #28]
}
 8025826:	4618      	mov	r0, r3
 8025828:	3720      	adds	r7, #32
 802582a:	46bd      	mov	sp, r7
 802582c:	bd80      	pop	{r7, pc}

0802582e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 802582e:	b580      	push	{r7, lr}
 8025830:	b088      	sub	sp, #32
 8025832:	af00      	add	r7, sp, #0
 8025834:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8025836:	2300      	movs	r3, #0
 8025838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 802583a:	230d      	movs	r3, #13
 802583c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802583e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025844:	2300      	movs	r3, #0
 8025846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025848:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802584c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802584e:	f107 0308 	add.w	r3, r7, #8
 8025852:	4619      	mov	r1, r3
 8025854:	6878      	ldr	r0, [r7, #4]
 8025856:	f7ff fd1b 	bl	8025290 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 802585a:	f241 3288 	movw	r2, #5000	@ 0x1388
 802585e:	210d      	movs	r1, #13
 8025860:	6878      	ldr	r0, [r7, #4]
 8025862:	f000 f807 	bl	8025874 <SDMMC_GetCmdResp1>
 8025866:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025868:	69fb      	ldr	r3, [r7, #28]
}
 802586a:	4618      	mov	r0, r3
 802586c:	3720      	adds	r7, #32
 802586e:	46bd      	mov	sp, r7
 8025870:	bd80      	pop	{r7, pc}
	...

08025874 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8025874:	b580      	push	{r7, lr}
 8025876:	b088      	sub	sp, #32
 8025878:	af00      	add	r7, sp, #0
 802587a:	60f8      	str	r0, [r7, #12]
 802587c:	460b      	mov	r3, r1
 802587e:	607a      	str	r2, [r7, #4]
 8025880:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8025882:	4b70      	ldr	r3, [pc, #448]	@ (8025a44 <SDMMC_GetCmdResp1+0x1d0>)
 8025884:	681b      	ldr	r3, [r3, #0]
 8025886:	4a70      	ldr	r2, [pc, #448]	@ (8025a48 <SDMMC_GetCmdResp1+0x1d4>)
 8025888:	fba2 2303 	umull	r2, r3, r2, r3
 802588c:	0a5a      	lsrs	r2, r3, #9
 802588e:	687b      	ldr	r3, [r7, #4]
 8025890:	fb02 f303 	mul.w	r3, r2, r3
 8025894:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8025896:	69fb      	ldr	r3, [r7, #28]
 8025898:	1e5a      	subs	r2, r3, #1
 802589a:	61fa      	str	r2, [r7, #28]
 802589c:	2b00      	cmp	r3, #0
 802589e:	d102      	bne.n	80258a6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80258a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80258a4:	e0c9      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80258a6:	68fb      	ldr	r3, [r7, #12]
 80258a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80258aa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80258ac:	69ba      	ldr	r2, [r7, #24]
 80258ae:	4b67      	ldr	r3, [pc, #412]	@ (8025a4c <SDMMC_GetCmdResp1+0x1d8>)
 80258b0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80258b2:	2b00      	cmp	r3, #0
 80258b4:	d0ef      	beq.n	8025896 <SDMMC_GetCmdResp1+0x22>
 80258b6:	69bb      	ldr	r3, [r7, #24]
 80258b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80258bc:	2b00      	cmp	r3, #0
 80258be:	d1ea      	bne.n	8025896 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80258c0:	68fb      	ldr	r3, [r7, #12]
 80258c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80258c4:	f003 0304 	and.w	r3, r3, #4
 80258c8:	2b00      	cmp	r3, #0
 80258ca:	d004      	beq.n	80258d6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80258cc:	68fb      	ldr	r3, [r7, #12]
 80258ce:	2204      	movs	r2, #4
 80258d0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80258d2:	2304      	movs	r3, #4
 80258d4:	e0b1      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80258d6:	68fb      	ldr	r3, [r7, #12]
 80258d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80258da:	f003 0301 	and.w	r3, r3, #1
 80258de:	2b00      	cmp	r3, #0
 80258e0:	d004      	beq.n	80258ec <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80258e2:	68fb      	ldr	r3, [r7, #12]
 80258e4:	2201      	movs	r2, #1
 80258e6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80258e8:	2301      	movs	r3, #1
 80258ea:	e0a6      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80258ec:	68fb      	ldr	r3, [r7, #12]
 80258ee:	4a58      	ldr	r2, [pc, #352]	@ (8025a50 <SDMMC_GetCmdResp1+0x1dc>)
 80258f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80258f2:	68f8      	ldr	r0, [r7, #12]
 80258f4:	f7ff fcf6 	bl	80252e4 <SDMMC_GetCommandResponse>
 80258f8:	4603      	mov	r3, r0
 80258fa:	461a      	mov	r2, r3
 80258fc:	7afb      	ldrb	r3, [r7, #11]
 80258fe:	4293      	cmp	r3, r2
 8025900:	d001      	beq.n	8025906 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025902:	2301      	movs	r3, #1
 8025904:	e099      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8025906:	2100      	movs	r1, #0
 8025908:	68f8      	ldr	r0, [r7, #12]
 802590a:	f7ff fcf8 	bl	80252fe <SDMMC_GetResponse>
 802590e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8025910:	697a      	ldr	r2, [r7, #20]
 8025912:	4b50      	ldr	r3, [pc, #320]	@ (8025a54 <SDMMC_GetCmdResp1+0x1e0>)
 8025914:	4013      	ands	r3, r2
 8025916:	2b00      	cmp	r3, #0
 8025918:	d101      	bne.n	802591e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 802591a:	2300      	movs	r3, #0
 802591c:	e08d      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 802591e:	697b      	ldr	r3, [r7, #20]
 8025920:	2b00      	cmp	r3, #0
 8025922:	da02      	bge.n	802592a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8025924:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8025928:	e087      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 802592a:	697b      	ldr	r3, [r7, #20]
 802592c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8025930:	2b00      	cmp	r3, #0
 8025932:	d001      	beq.n	8025938 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8025934:	2340      	movs	r3, #64	@ 0x40
 8025936:	e080      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8025938:	697b      	ldr	r3, [r7, #20]
 802593a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 802593e:	2b00      	cmp	r3, #0
 8025940:	d001      	beq.n	8025946 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8025942:	2380      	movs	r3, #128	@ 0x80
 8025944:	e079      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8025946:	697b      	ldr	r3, [r7, #20]
 8025948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 802594c:	2b00      	cmp	r3, #0
 802594e:	d002      	beq.n	8025956 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8025950:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025954:	e071      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8025956:	697b      	ldr	r3, [r7, #20]
 8025958:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 802595c:	2b00      	cmp	r3, #0
 802595e:	d002      	beq.n	8025966 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8025960:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8025964:	e069      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8025966:	697b      	ldr	r3, [r7, #20]
 8025968:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 802596c:	2b00      	cmp	r3, #0
 802596e:	d002      	beq.n	8025976 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8025970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8025974:	e061      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8025976:	697b      	ldr	r3, [r7, #20]
 8025978:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 802597c:	2b00      	cmp	r3, #0
 802597e:	d002      	beq.n	8025986 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8025980:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8025984:	e059      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8025986:	697b      	ldr	r3, [r7, #20]
 8025988:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 802598c:	2b00      	cmp	r3, #0
 802598e:	d002      	beq.n	8025996 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8025990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025994:	e051      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8025996:	697b      	ldr	r3, [r7, #20]
 8025998:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802599c:	2b00      	cmp	r3, #0
 802599e:	d002      	beq.n	80259a6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80259a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80259a4:	e049      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80259a6:	697b      	ldr	r3, [r7, #20]
 80259a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80259ac:	2b00      	cmp	r3, #0
 80259ae:	d002      	beq.n	80259b6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80259b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80259b4:	e041      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80259b6:	697b      	ldr	r3, [r7, #20]
 80259b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80259bc:	2b00      	cmp	r3, #0
 80259be:	d002      	beq.n	80259c6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80259c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80259c4:	e039      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80259c6:	697b      	ldr	r3, [r7, #20]
 80259c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80259cc:	2b00      	cmp	r3, #0
 80259ce:	d002      	beq.n	80259d6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80259d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80259d4:	e031      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80259d6:	697b      	ldr	r3, [r7, #20]
 80259d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80259dc:	2b00      	cmp	r3, #0
 80259de:	d002      	beq.n	80259e6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80259e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80259e4:	e029      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80259e6:	697b      	ldr	r3, [r7, #20]
 80259e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80259ec:	2b00      	cmp	r3, #0
 80259ee:	d002      	beq.n	80259f6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80259f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80259f4:	e021      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80259f6:	697b      	ldr	r3, [r7, #20]
 80259f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80259fc:	2b00      	cmp	r3, #0
 80259fe:	d002      	beq.n	8025a06 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8025a00:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8025a04:	e019      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8025a06:	697b      	ldr	r3, [r7, #20]
 8025a08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8025a0c:	2b00      	cmp	r3, #0
 8025a0e:	d002      	beq.n	8025a16 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8025a10:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8025a14:	e011      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8025a16:	697b      	ldr	r3, [r7, #20]
 8025a18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8025a1c:	2b00      	cmp	r3, #0
 8025a1e:	d002      	beq.n	8025a26 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8025a20:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8025a24:	e009      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8025a26:	697b      	ldr	r3, [r7, #20]
 8025a28:	f003 0308 	and.w	r3, r3, #8
 8025a2c:	2b00      	cmp	r3, #0
 8025a2e:	d002      	beq.n	8025a36 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8025a30:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8025a34:	e001      	b.n	8025a3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8025a36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8025a3a:	4618      	mov	r0, r3
 8025a3c:	3720      	adds	r7, #32
 8025a3e:	46bd      	mov	sp, r7
 8025a40:	bd80      	pop	{r7, pc}
 8025a42:	bf00      	nop
 8025a44:	2400001c 	.word	0x2400001c
 8025a48:	10624dd3 	.word	0x10624dd3
 8025a4c:	00200045 	.word	0x00200045
 8025a50:	002000c5 	.word	0x002000c5
 8025a54:	fdffe008 	.word	0xfdffe008

08025a58 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8025a58:	b480      	push	{r7}
 8025a5a:	b085      	sub	sp, #20
 8025a5c:	af00      	add	r7, sp, #0
 8025a5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025a60:	4b1f      	ldr	r3, [pc, #124]	@ (8025ae0 <SDMMC_GetCmdResp2+0x88>)
 8025a62:	681b      	ldr	r3, [r3, #0]
 8025a64:	4a1f      	ldr	r2, [pc, #124]	@ (8025ae4 <SDMMC_GetCmdResp2+0x8c>)
 8025a66:	fba2 2303 	umull	r2, r3, r2, r3
 8025a6a:	0a5b      	lsrs	r3, r3, #9
 8025a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025a70:	fb02 f303 	mul.w	r3, r2, r3
 8025a74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8025a76:	68fb      	ldr	r3, [r7, #12]
 8025a78:	1e5a      	subs	r2, r3, #1
 8025a7a:	60fa      	str	r2, [r7, #12]
 8025a7c:	2b00      	cmp	r3, #0
 8025a7e:	d102      	bne.n	8025a86 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025a80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025a84:	e026      	b.n	8025ad4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8025a86:	687b      	ldr	r3, [r7, #4]
 8025a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025a8a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025a8c:	68bb      	ldr	r3, [r7, #8]
 8025a8e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8025a92:	2b00      	cmp	r3, #0
 8025a94:	d0ef      	beq.n	8025a76 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025a96:	68bb      	ldr	r3, [r7, #8]
 8025a98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025a9c:	2b00      	cmp	r3, #0
 8025a9e:	d1ea      	bne.n	8025a76 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025aa0:	687b      	ldr	r3, [r7, #4]
 8025aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025aa4:	f003 0304 	and.w	r3, r3, #4
 8025aa8:	2b00      	cmp	r3, #0
 8025aaa:	d004      	beq.n	8025ab6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025aac:	687b      	ldr	r3, [r7, #4]
 8025aae:	2204      	movs	r2, #4
 8025ab0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025ab2:	2304      	movs	r3, #4
 8025ab4:	e00e      	b.n	8025ad4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8025ab6:	687b      	ldr	r3, [r7, #4]
 8025ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025aba:	f003 0301 	and.w	r3, r3, #1
 8025abe:	2b00      	cmp	r3, #0
 8025ac0:	d004      	beq.n	8025acc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8025ac2:	687b      	ldr	r3, [r7, #4]
 8025ac4:	2201      	movs	r2, #1
 8025ac6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025ac8:	2301      	movs	r3, #1
 8025aca:	e003      	b.n	8025ad4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025acc:	687b      	ldr	r3, [r7, #4]
 8025ace:	4a06      	ldr	r2, [pc, #24]	@ (8025ae8 <SDMMC_GetCmdResp2+0x90>)
 8025ad0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8025ad2:	2300      	movs	r3, #0
}
 8025ad4:	4618      	mov	r0, r3
 8025ad6:	3714      	adds	r7, #20
 8025ad8:	46bd      	mov	sp, r7
 8025ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ade:	4770      	bx	lr
 8025ae0:	2400001c 	.word	0x2400001c
 8025ae4:	10624dd3 	.word	0x10624dd3
 8025ae8:	002000c5 	.word	0x002000c5

08025aec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8025aec:	b480      	push	{r7}
 8025aee:	b085      	sub	sp, #20
 8025af0:	af00      	add	r7, sp, #0
 8025af2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025af4:	4b1a      	ldr	r3, [pc, #104]	@ (8025b60 <SDMMC_GetCmdResp3+0x74>)
 8025af6:	681b      	ldr	r3, [r3, #0]
 8025af8:	4a1a      	ldr	r2, [pc, #104]	@ (8025b64 <SDMMC_GetCmdResp3+0x78>)
 8025afa:	fba2 2303 	umull	r2, r3, r2, r3
 8025afe:	0a5b      	lsrs	r3, r3, #9
 8025b00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025b04:	fb02 f303 	mul.w	r3, r2, r3
 8025b08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8025b0a:	68fb      	ldr	r3, [r7, #12]
 8025b0c:	1e5a      	subs	r2, r3, #1
 8025b0e:	60fa      	str	r2, [r7, #12]
 8025b10:	2b00      	cmp	r3, #0
 8025b12:	d102      	bne.n	8025b1a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025b14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025b18:	e01b      	b.n	8025b52 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8025b1a:	687b      	ldr	r3, [r7, #4]
 8025b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025b1e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025b20:	68bb      	ldr	r3, [r7, #8]
 8025b22:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8025b26:	2b00      	cmp	r3, #0
 8025b28:	d0ef      	beq.n	8025b0a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025b2a:	68bb      	ldr	r3, [r7, #8]
 8025b2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025b30:	2b00      	cmp	r3, #0
 8025b32:	d1ea      	bne.n	8025b0a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025b34:	687b      	ldr	r3, [r7, #4]
 8025b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025b38:	f003 0304 	and.w	r3, r3, #4
 8025b3c:	2b00      	cmp	r3, #0
 8025b3e:	d004      	beq.n	8025b4a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025b40:	687b      	ldr	r3, [r7, #4]
 8025b42:	2204      	movs	r2, #4
 8025b44:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025b46:	2304      	movs	r3, #4
 8025b48:	e003      	b.n	8025b52 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025b4a:	687b      	ldr	r3, [r7, #4]
 8025b4c:	4a06      	ldr	r2, [pc, #24]	@ (8025b68 <SDMMC_GetCmdResp3+0x7c>)
 8025b4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8025b50:	2300      	movs	r3, #0
}
 8025b52:	4618      	mov	r0, r3
 8025b54:	3714      	adds	r7, #20
 8025b56:	46bd      	mov	sp, r7
 8025b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b5c:	4770      	bx	lr
 8025b5e:	bf00      	nop
 8025b60:	2400001c 	.word	0x2400001c
 8025b64:	10624dd3 	.word	0x10624dd3
 8025b68:	002000c5 	.word	0x002000c5

08025b6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8025b6c:	b580      	push	{r7, lr}
 8025b6e:	b088      	sub	sp, #32
 8025b70:	af00      	add	r7, sp, #0
 8025b72:	60f8      	str	r0, [r7, #12]
 8025b74:	460b      	mov	r3, r1
 8025b76:	607a      	str	r2, [r7, #4]
 8025b78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025b7a:	4b35      	ldr	r3, [pc, #212]	@ (8025c50 <SDMMC_GetCmdResp6+0xe4>)
 8025b7c:	681b      	ldr	r3, [r3, #0]
 8025b7e:	4a35      	ldr	r2, [pc, #212]	@ (8025c54 <SDMMC_GetCmdResp6+0xe8>)
 8025b80:	fba2 2303 	umull	r2, r3, r2, r3
 8025b84:	0a5b      	lsrs	r3, r3, #9
 8025b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025b8a:	fb02 f303 	mul.w	r3, r2, r3
 8025b8e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8025b90:	69fb      	ldr	r3, [r7, #28]
 8025b92:	1e5a      	subs	r2, r3, #1
 8025b94:	61fa      	str	r2, [r7, #28]
 8025b96:	2b00      	cmp	r3, #0
 8025b98:	d102      	bne.n	8025ba0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025b9a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025b9e:	e052      	b.n	8025c46 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8025ba0:	68fb      	ldr	r3, [r7, #12]
 8025ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025ba4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025ba6:	69bb      	ldr	r3, [r7, #24]
 8025ba8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8025bac:	2b00      	cmp	r3, #0
 8025bae:	d0ef      	beq.n	8025b90 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025bb0:	69bb      	ldr	r3, [r7, #24]
 8025bb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025bb6:	2b00      	cmp	r3, #0
 8025bb8:	d1ea      	bne.n	8025b90 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025bba:	68fb      	ldr	r3, [r7, #12]
 8025bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025bbe:	f003 0304 	and.w	r3, r3, #4
 8025bc2:	2b00      	cmp	r3, #0
 8025bc4:	d004      	beq.n	8025bd0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025bc6:	68fb      	ldr	r3, [r7, #12]
 8025bc8:	2204      	movs	r2, #4
 8025bca:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025bcc:	2304      	movs	r3, #4
 8025bce:	e03a      	b.n	8025c46 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8025bd0:	68fb      	ldr	r3, [r7, #12]
 8025bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025bd4:	f003 0301 	and.w	r3, r3, #1
 8025bd8:	2b00      	cmp	r3, #0
 8025bda:	d004      	beq.n	8025be6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8025bdc:	68fb      	ldr	r3, [r7, #12]
 8025bde:	2201      	movs	r2, #1
 8025be0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025be2:	2301      	movs	r3, #1
 8025be4:	e02f      	b.n	8025c46 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8025be6:	68f8      	ldr	r0, [r7, #12]
 8025be8:	f7ff fb7c 	bl	80252e4 <SDMMC_GetCommandResponse>
 8025bec:	4603      	mov	r3, r0
 8025bee:	461a      	mov	r2, r3
 8025bf0:	7afb      	ldrb	r3, [r7, #11]
 8025bf2:	4293      	cmp	r3, r2
 8025bf4:	d001      	beq.n	8025bfa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025bf6:	2301      	movs	r3, #1
 8025bf8:	e025      	b.n	8025c46 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025bfa:	68fb      	ldr	r3, [r7, #12]
 8025bfc:	4a16      	ldr	r2, [pc, #88]	@ (8025c58 <SDMMC_GetCmdResp6+0xec>)
 8025bfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8025c00:	2100      	movs	r1, #0
 8025c02:	68f8      	ldr	r0, [r7, #12]
 8025c04:	f7ff fb7b 	bl	80252fe <SDMMC_GetResponse>
 8025c08:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8025c0a:	697b      	ldr	r3, [r7, #20]
 8025c0c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8025c10:	2b00      	cmp	r3, #0
 8025c12:	d106      	bne.n	8025c22 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8025c14:	697b      	ldr	r3, [r7, #20]
 8025c16:	0c1b      	lsrs	r3, r3, #16
 8025c18:	b29a      	uxth	r2, r3
 8025c1a:	687b      	ldr	r3, [r7, #4]
 8025c1c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8025c1e:	2300      	movs	r3, #0
 8025c20:	e011      	b.n	8025c46 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8025c22:	697b      	ldr	r3, [r7, #20]
 8025c24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8025c28:	2b00      	cmp	r3, #0
 8025c2a:	d002      	beq.n	8025c32 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8025c2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8025c30:	e009      	b.n	8025c46 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8025c32:	697b      	ldr	r3, [r7, #20]
 8025c34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8025c38:	2b00      	cmp	r3, #0
 8025c3a:	d002      	beq.n	8025c42 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8025c3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025c40:	e001      	b.n	8025c46 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8025c42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8025c46:	4618      	mov	r0, r3
 8025c48:	3720      	adds	r7, #32
 8025c4a:	46bd      	mov	sp, r7
 8025c4c:	bd80      	pop	{r7, pc}
 8025c4e:	bf00      	nop
 8025c50:	2400001c 	.word	0x2400001c
 8025c54:	10624dd3 	.word	0x10624dd3
 8025c58:	002000c5 	.word	0x002000c5

08025c5c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8025c5c:	b480      	push	{r7}
 8025c5e:	b085      	sub	sp, #20
 8025c60:	af00      	add	r7, sp, #0
 8025c62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025c64:	4b22      	ldr	r3, [pc, #136]	@ (8025cf0 <SDMMC_GetCmdResp7+0x94>)
 8025c66:	681b      	ldr	r3, [r3, #0]
 8025c68:	4a22      	ldr	r2, [pc, #136]	@ (8025cf4 <SDMMC_GetCmdResp7+0x98>)
 8025c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8025c6e:	0a5b      	lsrs	r3, r3, #9
 8025c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025c74:	fb02 f303 	mul.w	r3, r2, r3
 8025c78:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8025c7a:	68fb      	ldr	r3, [r7, #12]
 8025c7c:	1e5a      	subs	r2, r3, #1
 8025c7e:	60fa      	str	r2, [r7, #12]
 8025c80:	2b00      	cmp	r3, #0
 8025c82:	d102      	bne.n	8025c8a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025c84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025c88:	e02c      	b.n	8025ce4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8025c8a:	687b      	ldr	r3, [r7, #4]
 8025c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025c8e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025c90:	68bb      	ldr	r3, [r7, #8]
 8025c92:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8025c96:	2b00      	cmp	r3, #0
 8025c98:	d0ef      	beq.n	8025c7a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025c9a:	68bb      	ldr	r3, [r7, #8]
 8025c9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025ca0:	2b00      	cmp	r3, #0
 8025ca2:	d1ea      	bne.n	8025c7a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025ca4:	687b      	ldr	r3, [r7, #4]
 8025ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025ca8:	f003 0304 	and.w	r3, r3, #4
 8025cac:	2b00      	cmp	r3, #0
 8025cae:	d004      	beq.n	8025cba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025cb0:	687b      	ldr	r3, [r7, #4]
 8025cb2:	2204      	movs	r2, #4
 8025cb4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025cb6:	2304      	movs	r3, #4
 8025cb8:	e014      	b.n	8025ce4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8025cba:	687b      	ldr	r3, [r7, #4]
 8025cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025cbe:	f003 0301 	and.w	r3, r3, #1
 8025cc2:	2b00      	cmp	r3, #0
 8025cc4:	d004      	beq.n	8025cd0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8025cc6:	687b      	ldr	r3, [r7, #4]
 8025cc8:	2201      	movs	r2, #1
 8025cca:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025ccc:	2301      	movs	r3, #1
 8025cce:	e009      	b.n	8025ce4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8025cd0:	687b      	ldr	r3, [r7, #4]
 8025cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8025cd8:	2b00      	cmp	r3, #0
 8025cda:	d002      	beq.n	8025ce2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8025cdc:	687b      	ldr	r3, [r7, #4]
 8025cde:	2240      	movs	r2, #64	@ 0x40
 8025ce0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8025ce2:	2300      	movs	r3, #0

}
 8025ce4:	4618      	mov	r0, r3
 8025ce6:	3714      	adds	r7, #20
 8025ce8:	46bd      	mov	sp, r7
 8025cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025cee:	4770      	bx	lr
 8025cf0:	2400001c 	.word	0x2400001c
 8025cf4:	10624dd3 	.word	0x10624dd3

08025cf8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8025cf8:	b480      	push	{r7}
 8025cfa:	b085      	sub	sp, #20
 8025cfc:	af00      	add	r7, sp, #0
 8025cfe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025d00:	4b11      	ldr	r3, [pc, #68]	@ (8025d48 <SDMMC_GetCmdError+0x50>)
 8025d02:	681b      	ldr	r3, [r3, #0]
 8025d04:	4a11      	ldr	r2, [pc, #68]	@ (8025d4c <SDMMC_GetCmdError+0x54>)
 8025d06:	fba2 2303 	umull	r2, r3, r2, r3
 8025d0a:	0a5b      	lsrs	r3, r3, #9
 8025d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025d10:	fb02 f303 	mul.w	r3, r2, r3
 8025d14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8025d16:	68fb      	ldr	r3, [r7, #12]
 8025d18:	1e5a      	subs	r2, r3, #1
 8025d1a:	60fa      	str	r2, [r7, #12]
 8025d1c:	2b00      	cmp	r3, #0
 8025d1e:	d102      	bne.n	8025d26 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025d20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025d24:	e009      	b.n	8025d3a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8025d26:	687b      	ldr	r3, [r7, #4]
 8025d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8025d2e:	2b00      	cmp	r3, #0
 8025d30:	d0f1      	beq.n	8025d16 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025d32:	687b      	ldr	r3, [r7, #4]
 8025d34:	4a06      	ldr	r2, [pc, #24]	@ (8025d50 <SDMMC_GetCmdError+0x58>)
 8025d36:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8025d38:	2300      	movs	r3, #0
}
 8025d3a:	4618      	mov	r0, r3
 8025d3c:	3714      	adds	r7, #20
 8025d3e:	46bd      	mov	sp, r7
 8025d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d44:	4770      	bx	lr
 8025d46:	bf00      	nop
 8025d48:	2400001c 	.word	0x2400001c
 8025d4c:	10624dd3 	.word	0x10624dd3
 8025d50:	002000c5 	.word	0x002000c5

08025d54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8025d54:	b580      	push	{r7, lr}
 8025d56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8025d58:	4904      	ldr	r1, [pc, #16]	@ (8025d6c <MX_FATFS_Init+0x18>)
 8025d5a:	4805      	ldr	r0, [pc, #20]	@ (8025d70 <MX_FATFS_Init+0x1c>)
 8025d5c:	f002 fc08 	bl	8028570 <FATFS_LinkDriver>
 8025d60:	4603      	mov	r3, r0
 8025d62:	461a      	mov	r2, r3
 8025d64:	4b03      	ldr	r3, [pc, #12]	@ (8025d74 <MX_FATFS_Init+0x20>)
 8025d66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8025d68:	bf00      	nop
 8025d6a:	bd80      	pop	{r7, pc}
 8025d6c:	24000420 	.word	0x24000420
 8025d70:	0802b698 	.word	0x0802b698
 8025d74:	2400041c 	.word	0x2400041c

08025d78 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8025d78:	b480      	push	{r7}
 8025d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8025d7c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8025d7e:	4618      	mov	r0, r3
 8025d80:	46bd      	mov	sp, r7
 8025d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d86:	4770      	bx	lr

08025d88 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8025d88:	b580      	push	{r7, lr}
 8025d8a:	b086      	sub	sp, #24
 8025d8c:	af00      	add	r7, sp, #0
 8025d8e:	60f8      	str	r0, [r7, #12]
 8025d90:	60b9      	str	r1, [r7, #8]
 8025d92:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8025d94:	2300      	movs	r3, #0
 8025d96:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8025d98:	687b      	ldr	r3, [r7, #4]
 8025d9a:	68ba      	ldr	r2, [r7, #8]
 8025d9c:	68f9      	ldr	r1, [r7, #12]
 8025d9e:	4806      	ldr	r0, [pc, #24]	@ (8025db8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8025da0:	f7fc fc16 	bl	80225d0 <HAL_SD_ReadBlocks_DMA>
 8025da4:	4603      	mov	r3, r0
 8025da6:	2b00      	cmp	r3, #0
 8025da8:	d001      	beq.n	8025dae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8025daa:	2301      	movs	r3, #1
 8025dac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8025dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8025db0:	4618      	mov	r0, r3
 8025db2:	3718      	adds	r7, #24
 8025db4:	46bd      	mov	sp, r7
 8025db6:	bd80      	pop	{r7, pc}
 8025db8:	240002fc 	.word	0x240002fc

08025dbc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8025dbc:	b580      	push	{r7, lr}
 8025dbe:	b086      	sub	sp, #24
 8025dc0:	af00      	add	r7, sp, #0
 8025dc2:	60f8      	str	r0, [r7, #12]
 8025dc4:	60b9      	str	r1, [r7, #8]
 8025dc6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8025dc8:	2300      	movs	r3, #0
 8025dca:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8025dcc:	687b      	ldr	r3, [r7, #4]
 8025dce:	68ba      	ldr	r2, [r7, #8]
 8025dd0:	68f9      	ldr	r1, [r7, #12]
 8025dd2:	4806      	ldr	r0, [pc, #24]	@ (8025dec <BSP_SD_WriteBlocks_DMA+0x30>)
 8025dd4:	f7fc fca4 	bl	8022720 <HAL_SD_WriteBlocks_DMA>
 8025dd8:	4603      	mov	r3, r0
 8025dda:	2b00      	cmp	r3, #0
 8025ddc:	d001      	beq.n	8025de2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8025dde:	2301      	movs	r3, #1
 8025de0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8025de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8025de4:	4618      	mov	r0, r3
 8025de6:	3718      	adds	r7, #24
 8025de8:	46bd      	mov	sp, r7
 8025dea:	bd80      	pop	{r7, pc}
 8025dec:	240002fc 	.word	0x240002fc

08025df0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8025df0:	b580      	push	{r7, lr}
 8025df2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8025df4:	4805      	ldr	r0, [pc, #20]	@ (8025e0c <BSP_SD_GetCardState+0x1c>)
 8025df6:	f7fd fa9d 	bl	8023334 <HAL_SD_GetCardState>
 8025dfa:	4603      	mov	r3, r0
 8025dfc:	2b04      	cmp	r3, #4
 8025dfe:	bf14      	ite	ne
 8025e00:	2301      	movne	r3, #1
 8025e02:	2300      	moveq	r3, #0
 8025e04:	b2db      	uxtb	r3, r3
}
 8025e06:	4618      	mov	r0, r3
 8025e08:	bd80      	pop	{r7, pc}
 8025e0a:	bf00      	nop
 8025e0c:	240002fc 	.word	0x240002fc

08025e10 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8025e10:	b580      	push	{r7, lr}
 8025e12:	b082      	sub	sp, #8
 8025e14:	af00      	add	r7, sp, #0
 8025e16:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8025e18:	6879      	ldr	r1, [r7, #4]
 8025e1a:	4803      	ldr	r0, [pc, #12]	@ (8025e28 <BSP_SD_GetCardInfo+0x18>)
 8025e1c:	f7fd f94c 	bl	80230b8 <HAL_SD_GetCardInfo>
}
 8025e20:	bf00      	nop
 8025e22:	3708      	adds	r7, #8
 8025e24:	46bd      	mov	sp, r7
 8025e26:	bd80      	pop	{r7, pc}
 8025e28:	240002fc 	.word	0x240002fc

08025e2c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8025e2c:	b580      	push	{r7, lr}
 8025e2e:	b082      	sub	sp, #8
 8025e30:	af00      	add	r7, sp, #0
 8025e32:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8025e34:	f000 fa14 	bl	8026260 <BSP_SD_WriteCpltCallback>
}
 8025e38:	bf00      	nop
 8025e3a:	3708      	adds	r7, #8
 8025e3c:	46bd      	mov	sp, r7
 8025e3e:	bd80      	pop	{r7, pc}

08025e40 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8025e40:	b580      	push	{r7, lr}
 8025e42:	b082      	sub	sp, #8
 8025e44:	af00      	add	r7, sp, #0
 8025e46:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8025e48:	f000 fa16 	bl	8026278 <BSP_SD_ReadCpltCallback>
}
 8025e4c:	bf00      	nop
 8025e4e:	3708      	adds	r7, #8
 8025e50:	46bd      	mov	sp, r7
 8025e52:	bd80      	pop	{r7, pc}

08025e54 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8025e54:	b580      	push	{r7, lr}
 8025e56:	b084      	sub	sp, #16
 8025e58:	af00      	add	r7, sp, #0
 8025e5a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8025e5c:	f7f5 fe7a 	bl	801bb54 <HAL_GetTick>
 8025e60:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8025e62:	e006      	b.n	8025e72 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8025e64:	f7ff ffc4 	bl	8025df0 <BSP_SD_GetCardState>
 8025e68:	4603      	mov	r3, r0
 8025e6a:	2b00      	cmp	r3, #0
 8025e6c:	d101      	bne.n	8025e72 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8025e6e:	2300      	movs	r3, #0
 8025e70:	e009      	b.n	8025e86 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8025e72:	f7f5 fe6f 	bl	801bb54 <HAL_GetTick>
 8025e76:	4602      	mov	r2, r0
 8025e78:	68fb      	ldr	r3, [r7, #12]
 8025e7a:	1ad3      	subs	r3, r2, r3
 8025e7c:	687a      	ldr	r2, [r7, #4]
 8025e7e:	429a      	cmp	r2, r3
 8025e80:	d8f0      	bhi.n	8025e64 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8025e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8025e86:	4618      	mov	r0, r3
 8025e88:	3710      	adds	r7, #16
 8025e8a:	46bd      	mov	sp, r7
 8025e8c:	bd80      	pop	{r7, pc}
	...

08025e90 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8025e90:	b580      	push	{r7, lr}
 8025e92:	b082      	sub	sp, #8
 8025e94:	af00      	add	r7, sp, #0
 8025e96:	4603      	mov	r3, r0
 8025e98:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8025e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8025ec8 <SD_CheckStatus+0x38>)
 8025e9c:	2201      	movs	r2, #1
 8025e9e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8025ea0:	f7ff ffa6 	bl	8025df0 <BSP_SD_GetCardState>
 8025ea4:	4603      	mov	r3, r0
 8025ea6:	2b00      	cmp	r3, #0
 8025ea8:	d107      	bne.n	8025eba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8025eaa:	4b07      	ldr	r3, [pc, #28]	@ (8025ec8 <SD_CheckStatus+0x38>)
 8025eac:	781b      	ldrb	r3, [r3, #0]
 8025eae:	b2db      	uxtb	r3, r3
 8025eb0:	f023 0301 	bic.w	r3, r3, #1
 8025eb4:	b2da      	uxtb	r2, r3
 8025eb6:	4b04      	ldr	r3, [pc, #16]	@ (8025ec8 <SD_CheckStatus+0x38>)
 8025eb8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8025eba:	4b03      	ldr	r3, [pc, #12]	@ (8025ec8 <SD_CheckStatus+0x38>)
 8025ebc:	781b      	ldrb	r3, [r3, #0]
 8025ebe:	b2db      	uxtb	r3, r3
}
 8025ec0:	4618      	mov	r0, r3
 8025ec2:	3708      	adds	r7, #8
 8025ec4:	46bd      	mov	sp, r7
 8025ec6:	bd80      	pop	{r7, pc}
 8025ec8:	24000029 	.word	0x24000029

08025ecc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8025ecc:	b580      	push	{r7, lr}
 8025ece:	b082      	sub	sp, #8
 8025ed0:	af00      	add	r7, sp, #0
 8025ed2:	4603      	mov	r3, r0
 8025ed4:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 8025ed6:	79fb      	ldrb	r3, [r7, #7]
 8025ed8:	4618      	mov	r0, r3
 8025eda:	f7ff ffd9 	bl	8025e90 <SD_CheckStatus>
 8025ede:	4603      	mov	r3, r0
 8025ee0:	461a      	mov	r2, r3
 8025ee2:	4b04      	ldr	r3, [pc, #16]	@ (8025ef4 <SD_initialize+0x28>)
 8025ee4:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 8025ee6:	4b03      	ldr	r3, [pc, #12]	@ (8025ef4 <SD_initialize+0x28>)
 8025ee8:	781b      	ldrb	r3, [r3, #0]
 8025eea:	b2db      	uxtb	r3, r3
}
 8025eec:	4618      	mov	r0, r3
 8025eee:	3708      	adds	r7, #8
 8025ef0:	46bd      	mov	sp, r7
 8025ef2:	bd80      	pop	{r7, pc}
 8025ef4:	24000029 	.word	0x24000029

08025ef8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8025ef8:	b580      	push	{r7, lr}
 8025efa:	b082      	sub	sp, #8
 8025efc:	af00      	add	r7, sp, #0
 8025efe:	4603      	mov	r3, r0
 8025f00:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8025f02:	79fb      	ldrb	r3, [r7, #7]
 8025f04:	4618      	mov	r0, r3
 8025f06:	f7ff ffc3 	bl	8025e90 <SD_CheckStatus>
 8025f0a:	4603      	mov	r3, r0
}
 8025f0c:	4618      	mov	r0, r3
 8025f0e:	3708      	adds	r7, #8
 8025f10:	46bd      	mov	sp, r7
 8025f12:	bd80      	pop	{r7, pc}

08025f14 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8025f14:	b580      	push	{r7, lr}
 8025f16:	b088      	sub	sp, #32
 8025f18:	af00      	add	r7, sp, #0
 8025f1a:	60b9      	str	r1, [r7, #8]
 8025f1c:	607a      	str	r2, [r7, #4]
 8025f1e:	603b      	str	r3, [r7, #0]
 8025f20:	4603      	mov	r3, r0
 8025f22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8025f24:	2301      	movs	r3, #1
 8025f26:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8025f28:	f247 5030 	movw	r0, #30000	@ 0x7530
 8025f2c:	f7ff ff92 	bl	8025e54 <SD_CheckStatusWithTimeout>
 8025f30:	4603      	mov	r3, r0
 8025f32:	2b00      	cmp	r3, #0
 8025f34:	da01      	bge.n	8025f3a <SD_read+0x26>
  {
    return res;
 8025f36:	7ffb      	ldrb	r3, [r7, #31]
 8025f38:	e08b      	b.n	8026052 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8025f3a:	68bb      	ldr	r3, [r7, #8]
 8025f3c:	f003 0303 	and.w	r3, r3, #3
 8025f40:	2b00      	cmp	r3, #0
 8025f42:	d13b      	bne.n	8025fbc <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8025f44:	683a      	ldr	r2, [r7, #0]
 8025f46:	6879      	ldr	r1, [r7, #4]
 8025f48:	68b8      	ldr	r0, [r7, #8]
 8025f4a:	f7ff ff1d 	bl	8025d88 <BSP_SD_ReadBlocks_DMA>
 8025f4e:	4603      	mov	r3, r0
 8025f50:	2b00      	cmp	r3, #0
 8025f52:	d17d      	bne.n	8026050 <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8025f54:	4b41      	ldr	r3, [pc, #260]	@ (802605c <SD_read+0x148>)
 8025f56:	2200      	movs	r2, #0
 8025f58:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8025f5a:	f7f5 fdfb 	bl	801bb54 <HAL_GetTick>
 8025f5e:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8025f60:	bf00      	nop
 8025f62:	4b3e      	ldr	r3, [pc, #248]	@ (802605c <SD_read+0x148>)
 8025f64:	681b      	ldr	r3, [r3, #0]
 8025f66:	2b00      	cmp	r3, #0
 8025f68:	d108      	bne.n	8025f7c <SD_read+0x68>
 8025f6a:	f7f5 fdf3 	bl	801bb54 <HAL_GetTick>
 8025f6e:	4602      	mov	r2, r0
 8025f70:	697b      	ldr	r3, [r7, #20]
 8025f72:	1ad3      	subs	r3, r2, r3
 8025f74:	f247 522f 	movw	r2, #29999	@ 0x752f
 8025f78:	4293      	cmp	r3, r2
 8025f7a:	d9f2      	bls.n	8025f62 <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8025f7c:	4b37      	ldr	r3, [pc, #220]	@ (802605c <SD_read+0x148>)
 8025f7e:	681b      	ldr	r3, [r3, #0]
 8025f80:	2b00      	cmp	r3, #0
 8025f82:	d102      	bne.n	8025f8a <SD_read+0x76>
      {
        res = RES_ERROR;
 8025f84:	2301      	movs	r3, #1
 8025f86:	77fb      	strb	r3, [r7, #31]
 8025f88:	e062      	b.n	8026050 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8025f8a:	4b34      	ldr	r3, [pc, #208]	@ (802605c <SD_read+0x148>)
 8025f8c:	2200      	movs	r2, #0
 8025f8e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8025f90:	f7f5 fde0 	bl	801bb54 <HAL_GetTick>
 8025f94:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8025f96:	e007      	b.n	8025fa8 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8025f98:	f7ff ff2a 	bl	8025df0 <BSP_SD_GetCardState>
 8025f9c:	4603      	mov	r3, r0
 8025f9e:	2b00      	cmp	r3, #0
 8025fa0:	d102      	bne.n	8025fa8 <SD_read+0x94>
          {
            res = RES_OK;
 8025fa2:	2300      	movs	r3, #0
 8025fa4:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8025fa6:	e053      	b.n	8026050 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8025fa8:	f7f5 fdd4 	bl	801bb54 <HAL_GetTick>
 8025fac:	4602      	mov	r2, r0
 8025fae:	697b      	ldr	r3, [r7, #20]
 8025fb0:	1ad3      	subs	r3, r2, r3
 8025fb2:	f247 522f 	movw	r2, #29999	@ 0x752f
 8025fb6:	4293      	cmp	r3, r2
 8025fb8:	d9ee      	bls.n	8025f98 <SD_read+0x84>
 8025fba:	e049      	b.n	8026050 <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8025fbc:	2300      	movs	r3, #0
 8025fbe:	61bb      	str	r3, [r7, #24]
 8025fc0:	e037      	b.n	8026032 <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8025fc2:	687b      	ldr	r3, [r7, #4]
 8025fc4:	1c5a      	adds	r2, r3, #1
 8025fc6:	607a      	str	r2, [r7, #4]
 8025fc8:	2201      	movs	r2, #1
 8025fca:	4619      	mov	r1, r3
 8025fcc:	4824      	ldr	r0, [pc, #144]	@ (8026060 <SD_read+0x14c>)
 8025fce:	f7ff fedb 	bl	8025d88 <BSP_SD_ReadBlocks_DMA>
 8025fd2:	4603      	mov	r3, r0
 8025fd4:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8025fd6:	7fbb      	ldrb	r3, [r7, #30]
 8025fd8:	2b00      	cmp	r3, #0
 8025fda:	d12f      	bne.n	802603c <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 8025fdc:	f7f5 fdba 	bl	801bb54 <HAL_GetTick>
 8025fe0:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8025fe2:	bf00      	nop
 8025fe4:	4b1d      	ldr	r3, [pc, #116]	@ (802605c <SD_read+0x148>)
 8025fe6:	681b      	ldr	r3, [r3, #0]
 8025fe8:	2b00      	cmp	r3, #0
 8025fea:	d108      	bne.n	8025ffe <SD_read+0xea>
 8025fec:	f7f5 fdb2 	bl	801bb54 <HAL_GetTick>
 8025ff0:	4602      	mov	r2, r0
 8025ff2:	697b      	ldr	r3, [r7, #20]
 8025ff4:	1ad3      	subs	r3, r2, r3
 8025ff6:	f247 522f 	movw	r2, #29999	@ 0x752f
 8025ffa:	4293      	cmp	r3, r2
 8025ffc:	d9f2      	bls.n	8025fe4 <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 8025ffe:	4b17      	ldr	r3, [pc, #92]	@ (802605c <SD_read+0x148>)
 8026000:	681b      	ldr	r3, [r3, #0]
 8026002:	2b00      	cmp	r3, #0
 8026004:	d102      	bne.n	802600c <SD_read+0xf8>
          {
            res = RES_ERROR;
 8026006:	2301      	movs	r3, #1
 8026008:	77fb      	strb	r3, [r7, #31]
            break;
 802600a:	e018      	b.n	802603e <SD_read+0x12a>
          }
          ReadStatus = 0;
 802600c:	4b13      	ldr	r3, [pc, #76]	@ (802605c <SD_read+0x148>)
 802600e:	2200      	movs	r2, #0
 8026010:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8026012:	68bb      	ldr	r3, [r7, #8]
 8026014:	4a12      	ldr	r2, [pc, #72]	@ (8026060 <SD_read+0x14c>)
 8026016:	4618      	mov	r0, r3
 8026018:	4611      	mov	r1, r2
 802601a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802601e:	461a      	mov	r2, r3
 8026020:	f003 fbb9 	bl	8029796 <memcpy>
          buff += BLOCKSIZE;
 8026024:	68bb      	ldr	r3, [r7, #8]
 8026026:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 802602a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 802602c:	69bb      	ldr	r3, [r7, #24]
 802602e:	3301      	adds	r3, #1
 8026030:	61bb      	str	r3, [r7, #24]
 8026032:	69bb      	ldr	r3, [r7, #24]
 8026034:	683a      	ldr	r2, [r7, #0]
 8026036:	429a      	cmp	r2, r3
 8026038:	d8c3      	bhi.n	8025fc2 <SD_read+0xae>
 802603a:	e000      	b.n	802603e <SD_read+0x12a>
        }
        else
        {
          break;
 802603c:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 802603e:	69bb      	ldr	r3, [r7, #24]
 8026040:	683a      	ldr	r2, [r7, #0]
 8026042:	429a      	cmp	r2, r3
 8026044:	d104      	bne.n	8026050 <SD_read+0x13c>
 8026046:	7fbb      	ldrb	r3, [r7, #30]
 8026048:	2b00      	cmp	r3, #0
 802604a:	d101      	bne.n	8026050 <SD_read+0x13c>
        res = RES_OK;
 802604c:	2300      	movs	r3, #0
 802604e:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 8026050:	7ffb      	ldrb	r3, [r7, #31]
}
 8026052:	4618      	mov	r0, r3
 8026054:	3720      	adds	r7, #32
 8026056:	46bd      	mov	sp, r7
 8026058:	bd80      	pop	{r7, pc}
 802605a:	bf00      	nop
 802605c:	24000a88 	.word	0x24000a88
 8026060:	24000884 	.word	0x24000884

08026064 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8026064:	b580      	push	{r7, lr}
 8026066:	b088      	sub	sp, #32
 8026068:	af00      	add	r7, sp, #0
 802606a:	60b9      	str	r1, [r7, #8]
 802606c:	607a      	str	r2, [r7, #4]
 802606e:	603b      	str	r3, [r7, #0]
 8026070:	4603      	mov	r3, r0
 8026072:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8026074:	2301      	movs	r3, #1
 8026076:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8026078:	4b4b      	ldr	r3, [pc, #300]	@ (80261a8 <SD_write+0x144>)
 802607a:	2200      	movs	r2, #0
 802607c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 802607e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8026082:	f7ff fee7 	bl	8025e54 <SD_CheckStatusWithTimeout>
 8026086:	4603      	mov	r3, r0
 8026088:	2b00      	cmp	r3, #0
 802608a:	da01      	bge.n	8026090 <SD_write+0x2c>
  {
    return res;
 802608c:	7ffb      	ldrb	r3, [r7, #31]
 802608e:	e087      	b.n	80261a0 <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8026090:	68bb      	ldr	r3, [r7, #8]
 8026092:	f003 0303 	and.w	r3, r3, #3
 8026096:	2b00      	cmp	r3, #0
 8026098:	d138      	bne.n	802610c <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 802609a:	683a      	ldr	r2, [r7, #0]
 802609c:	6879      	ldr	r1, [r7, #4]
 802609e:	68b8      	ldr	r0, [r7, #8]
 80260a0:	f7ff fe8c 	bl	8025dbc <BSP_SD_WriteBlocks_DMA>
 80260a4:	4603      	mov	r3, r0
 80260a6:	2b00      	cmp	r3, #0
 80260a8:	d179      	bne.n	802619e <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80260aa:	f7f5 fd53 	bl	801bb54 <HAL_GetTick>
 80260ae:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80260b0:	bf00      	nop
 80260b2:	4b3d      	ldr	r3, [pc, #244]	@ (80261a8 <SD_write+0x144>)
 80260b4:	681b      	ldr	r3, [r3, #0]
 80260b6:	2b00      	cmp	r3, #0
 80260b8:	d108      	bne.n	80260cc <SD_write+0x68>
 80260ba:	f7f5 fd4b 	bl	801bb54 <HAL_GetTick>
 80260be:	4602      	mov	r2, r0
 80260c0:	697b      	ldr	r3, [r7, #20]
 80260c2:	1ad3      	subs	r3, r2, r3
 80260c4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80260c8:	4293      	cmp	r3, r2
 80260ca:	d9f2      	bls.n	80260b2 <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80260cc:	4b36      	ldr	r3, [pc, #216]	@ (80261a8 <SD_write+0x144>)
 80260ce:	681b      	ldr	r3, [r3, #0]
 80260d0:	2b00      	cmp	r3, #0
 80260d2:	d102      	bne.n	80260da <SD_write+0x76>
      {
        res = RES_ERROR;
 80260d4:	2301      	movs	r3, #1
 80260d6:	77fb      	strb	r3, [r7, #31]
 80260d8:	e061      	b.n	802619e <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 80260da:	4b33      	ldr	r3, [pc, #204]	@ (80261a8 <SD_write+0x144>)
 80260dc:	2200      	movs	r2, #0
 80260de:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80260e0:	f7f5 fd38 	bl	801bb54 <HAL_GetTick>
 80260e4:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80260e6:	e007      	b.n	80260f8 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80260e8:	f7ff fe82 	bl	8025df0 <BSP_SD_GetCardState>
 80260ec:	4603      	mov	r3, r0
 80260ee:	2b00      	cmp	r3, #0
 80260f0:	d102      	bne.n	80260f8 <SD_write+0x94>
          {
            res = RES_OK;
 80260f2:	2300      	movs	r3, #0
 80260f4:	77fb      	strb	r3, [r7, #31]
            break;
 80260f6:	e052      	b.n	802619e <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80260f8:	f7f5 fd2c 	bl	801bb54 <HAL_GetTick>
 80260fc:	4602      	mov	r2, r0
 80260fe:	697b      	ldr	r3, [r7, #20]
 8026100:	1ad3      	subs	r3, r2, r3
 8026102:	f247 522f 	movw	r2, #29999	@ 0x752f
 8026106:	4293      	cmp	r3, r2
 8026108:	d9ee      	bls.n	80260e8 <SD_write+0x84>
 802610a:	e048      	b.n	802619e <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 802610c:	2300      	movs	r3, #0
 802610e:	61bb      	str	r3, [r7, #24]
 8026110:	e034      	b.n	802617c <SD_write+0x118>
      {
        WriteStatus = 0;
 8026112:	4b25      	ldr	r3, [pc, #148]	@ (80261a8 <SD_write+0x144>)
 8026114:	2200      	movs	r2, #0
 8026116:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 8026118:	4a24      	ldr	r2, [pc, #144]	@ (80261ac <SD_write+0x148>)
 802611a:	68bb      	ldr	r3, [r7, #8]
 802611c:	4610      	mov	r0, r2
 802611e:	4619      	mov	r1, r3
 8026120:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8026124:	461a      	mov	r2, r3
 8026126:	f003 fb36 	bl	8029796 <memcpy>
        buff += BLOCKSIZE;
 802612a:	68bb      	ldr	r3, [r7, #8]
 802612c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8026130:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8026132:	687b      	ldr	r3, [r7, #4]
 8026134:	1c5a      	adds	r2, r3, #1
 8026136:	607a      	str	r2, [r7, #4]
 8026138:	2201      	movs	r2, #1
 802613a:	4619      	mov	r1, r3
 802613c:	481b      	ldr	r0, [pc, #108]	@ (80261ac <SD_write+0x148>)
 802613e:	f7ff fe3d 	bl	8025dbc <BSP_SD_WriteBlocks_DMA>
 8026142:	4603      	mov	r3, r0
 8026144:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8026146:	7fbb      	ldrb	r3, [r7, #30]
 8026148:	2b00      	cmp	r3, #0
 802614a:	d11c      	bne.n	8026186 <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 802614c:	f7f5 fd02 	bl	801bb54 <HAL_GetTick>
 8026150:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8026152:	bf00      	nop
 8026154:	4b14      	ldr	r3, [pc, #80]	@ (80261a8 <SD_write+0x144>)
 8026156:	681b      	ldr	r3, [r3, #0]
 8026158:	2b00      	cmp	r3, #0
 802615a:	d108      	bne.n	802616e <SD_write+0x10a>
 802615c:	f7f5 fcfa 	bl	801bb54 <HAL_GetTick>
 8026160:	4602      	mov	r2, r0
 8026162:	697b      	ldr	r3, [r7, #20]
 8026164:	1ad3      	subs	r3, r2, r3
 8026166:	f247 522f 	movw	r2, #29999	@ 0x752f
 802616a:	4293      	cmp	r3, r2
 802616c:	d9f2      	bls.n	8026154 <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 802616e:	4b0e      	ldr	r3, [pc, #56]	@ (80261a8 <SD_write+0x144>)
 8026170:	681b      	ldr	r3, [r3, #0]
 8026172:	2b00      	cmp	r3, #0
 8026174:	d009      	beq.n	802618a <SD_write+0x126>
      for (i = 0; i < count; i++)
 8026176:	69bb      	ldr	r3, [r7, #24]
 8026178:	3301      	adds	r3, #1
 802617a:	61bb      	str	r3, [r7, #24]
 802617c:	69bb      	ldr	r3, [r7, #24]
 802617e:	683a      	ldr	r2, [r7, #0]
 8026180:	429a      	cmp	r2, r3
 8026182:	d8c6      	bhi.n	8026112 <SD_write+0xae>
 8026184:	e002      	b.n	802618c <SD_write+0x128>
          }

        }
        else
        {
          break;
 8026186:	bf00      	nop
 8026188:	e000      	b.n	802618c <SD_write+0x128>
            break;
 802618a:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 802618c:	69bb      	ldr	r3, [r7, #24]
 802618e:	683a      	ldr	r2, [r7, #0]
 8026190:	429a      	cmp	r2, r3
 8026192:	d104      	bne.n	802619e <SD_write+0x13a>
 8026194:	7fbb      	ldrb	r3, [r7, #30]
 8026196:	2b00      	cmp	r3, #0
 8026198:	d101      	bne.n	802619e <SD_write+0x13a>
        res = RES_OK;
 802619a:	2300      	movs	r3, #0
 802619c:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 802619e:	7ffb      	ldrb	r3, [r7, #31]
}
 80261a0:	4618      	mov	r0, r3
 80261a2:	3720      	adds	r7, #32
 80261a4:	46bd      	mov	sp, r7
 80261a6:	bd80      	pop	{r7, pc}
 80261a8:	24000a84 	.word	0x24000a84
 80261ac:	24000884 	.word	0x24000884

080261b0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80261b0:	b580      	push	{r7, lr}
 80261b2:	b08c      	sub	sp, #48	@ 0x30
 80261b4:	af00      	add	r7, sp, #0
 80261b6:	4603      	mov	r3, r0
 80261b8:	603a      	str	r2, [r7, #0]
 80261ba:	71fb      	strb	r3, [r7, #7]
 80261bc:	460b      	mov	r3, r1
 80261be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80261c0:	2301      	movs	r3, #1
 80261c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80261c6:	4b25      	ldr	r3, [pc, #148]	@ (802625c <SD_ioctl+0xac>)
 80261c8:	781b      	ldrb	r3, [r3, #0]
 80261ca:	b2db      	uxtb	r3, r3
 80261cc:	f003 0301 	and.w	r3, r3, #1
 80261d0:	2b00      	cmp	r3, #0
 80261d2:	d001      	beq.n	80261d8 <SD_ioctl+0x28>
 80261d4:	2303      	movs	r3, #3
 80261d6:	e03c      	b.n	8026252 <SD_ioctl+0xa2>

  switch (cmd)
 80261d8:	79bb      	ldrb	r3, [r7, #6]
 80261da:	2b03      	cmp	r3, #3
 80261dc:	d834      	bhi.n	8026248 <SD_ioctl+0x98>
 80261de:	a201      	add	r2, pc, #4	@ (adr r2, 80261e4 <SD_ioctl+0x34>)
 80261e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80261e4:	080261f5 	.word	0x080261f5
 80261e8:	080261fd 	.word	0x080261fd
 80261ec:	08026215 	.word	0x08026215
 80261f0:	0802622f 	.word	0x0802622f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80261f4:	2300      	movs	r3, #0
 80261f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80261fa:	e028      	b.n	802624e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80261fc:	f107 0308 	add.w	r3, r7, #8
 8026200:	4618      	mov	r0, r3
 8026202:	f7ff fe05 	bl	8025e10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8026206:	6a3a      	ldr	r2, [r7, #32]
 8026208:	683b      	ldr	r3, [r7, #0]
 802620a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 802620c:	2300      	movs	r3, #0
 802620e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8026212:	e01c      	b.n	802624e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8026214:	f107 0308 	add.w	r3, r7, #8
 8026218:	4618      	mov	r0, r3
 802621a:	f7ff fdf9 	bl	8025e10 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 802621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026220:	b29a      	uxth	r2, r3
 8026222:	683b      	ldr	r3, [r7, #0]
 8026224:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8026226:	2300      	movs	r3, #0
 8026228:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 802622c:	e00f      	b.n	802624e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 802622e:	f107 0308 	add.w	r3, r7, #8
 8026232:	4618      	mov	r0, r3
 8026234:	f7ff fdec 	bl	8025e10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8026238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802623a:	0a5a      	lsrs	r2, r3, #9
 802623c:	683b      	ldr	r3, [r7, #0]
 802623e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8026240:	2300      	movs	r3, #0
 8026242:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8026246:	e002      	b.n	802624e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8026248:	2304      	movs	r3, #4
 802624a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 802624e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8026252:	4618      	mov	r0, r3
 8026254:	3730      	adds	r7, #48	@ 0x30
 8026256:	46bd      	mov	sp, r7
 8026258:	bd80      	pop	{r7, pc}
 802625a:	bf00      	nop
 802625c:	24000029 	.word	0x24000029

08026260 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8026260:	b480      	push	{r7}
 8026262:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8026264:	4b03      	ldr	r3, [pc, #12]	@ (8026274 <BSP_SD_WriteCpltCallback+0x14>)
 8026266:	2201      	movs	r2, #1
 8026268:	601a      	str	r2, [r3, #0]
}
 802626a:	bf00      	nop
 802626c:	46bd      	mov	sp, r7
 802626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026272:	4770      	bx	lr
 8026274:	24000a84 	.word	0x24000a84

08026278 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8026278:	b480      	push	{r7}
 802627a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 802627c:	4b03      	ldr	r3, [pc, #12]	@ (802628c <BSP_SD_ReadCpltCallback+0x14>)
 802627e:	2201      	movs	r2, #1
 8026280:	601a      	str	r2, [r3, #0]
}
 8026282:	bf00      	nop
 8026284:	46bd      	mov	sp, r7
 8026286:	f85d 7b04 	ldr.w	r7, [sp], #4
 802628a:	4770      	bx	lr
 802628c:	24000a88 	.word	0x24000a88

08026290 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8026290:	b580      	push	{r7, lr}
 8026292:	b084      	sub	sp, #16
 8026294:	af00      	add	r7, sp, #0
 8026296:	4603      	mov	r3, r0
 8026298:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 802629a:	79fb      	ldrb	r3, [r7, #7]
 802629c:	4a08      	ldr	r2, [pc, #32]	@ (80262c0 <disk_status+0x30>)
 802629e:	009b      	lsls	r3, r3, #2
 80262a0:	4413      	add	r3, r2
 80262a2:	685b      	ldr	r3, [r3, #4]
 80262a4:	685b      	ldr	r3, [r3, #4]
 80262a6:	79fa      	ldrb	r2, [r7, #7]
 80262a8:	4905      	ldr	r1, [pc, #20]	@ (80262c0 <disk_status+0x30>)
 80262aa:	440a      	add	r2, r1
 80262ac:	7a12      	ldrb	r2, [r2, #8]
 80262ae:	4610      	mov	r0, r2
 80262b0:	4798      	blx	r3
 80262b2:	4603      	mov	r3, r0
 80262b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80262b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80262b8:	4618      	mov	r0, r3
 80262ba:	3710      	adds	r7, #16
 80262bc:	46bd      	mov	sp, r7
 80262be:	bd80      	pop	{r7, pc}
 80262c0:	24000ab4 	.word	0x24000ab4

080262c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80262c4:	b580      	push	{r7, lr}
 80262c6:	b084      	sub	sp, #16
 80262c8:	af00      	add	r7, sp, #0
 80262ca:	4603      	mov	r3, r0
 80262cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80262ce:	2300      	movs	r3, #0
 80262d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80262d2:	79fb      	ldrb	r3, [r7, #7]
 80262d4:	4a0e      	ldr	r2, [pc, #56]	@ (8026310 <disk_initialize+0x4c>)
 80262d6:	5cd3      	ldrb	r3, [r2, r3]
 80262d8:	2b00      	cmp	r3, #0
 80262da:	d114      	bne.n	8026306 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80262dc:	79fb      	ldrb	r3, [r7, #7]
 80262de:	4a0c      	ldr	r2, [pc, #48]	@ (8026310 <disk_initialize+0x4c>)
 80262e0:	009b      	lsls	r3, r3, #2
 80262e2:	4413      	add	r3, r2
 80262e4:	685b      	ldr	r3, [r3, #4]
 80262e6:	681b      	ldr	r3, [r3, #0]
 80262e8:	79fa      	ldrb	r2, [r7, #7]
 80262ea:	4909      	ldr	r1, [pc, #36]	@ (8026310 <disk_initialize+0x4c>)
 80262ec:	440a      	add	r2, r1
 80262ee:	7a12      	ldrb	r2, [r2, #8]
 80262f0:	4610      	mov	r0, r2
 80262f2:	4798      	blx	r3
 80262f4:	4603      	mov	r3, r0
 80262f6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80262f8:	7bfb      	ldrb	r3, [r7, #15]
 80262fa:	2b00      	cmp	r3, #0
 80262fc:	d103      	bne.n	8026306 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80262fe:	79fb      	ldrb	r3, [r7, #7]
 8026300:	4a03      	ldr	r2, [pc, #12]	@ (8026310 <disk_initialize+0x4c>)
 8026302:	2101      	movs	r1, #1
 8026304:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8026306:	7bfb      	ldrb	r3, [r7, #15]
}
 8026308:	4618      	mov	r0, r3
 802630a:	3710      	adds	r7, #16
 802630c:	46bd      	mov	sp, r7
 802630e:	bd80      	pop	{r7, pc}
 8026310:	24000ab4 	.word	0x24000ab4

08026314 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8026314:	b590      	push	{r4, r7, lr}
 8026316:	b087      	sub	sp, #28
 8026318:	af00      	add	r7, sp, #0
 802631a:	60b9      	str	r1, [r7, #8]
 802631c:	607a      	str	r2, [r7, #4]
 802631e:	603b      	str	r3, [r7, #0]
 8026320:	4603      	mov	r3, r0
 8026322:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8026324:	7bfb      	ldrb	r3, [r7, #15]
 8026326:	4a0a      	ldr	r2, [pc, #40]	@ (8026350 <disk_read+0x3c>)
 8026328:	009b      	lsls	r3, r3, #2
 802632a:	4413      	add	r3, r2
 802632c:	685b      	ldr	r3, [r3, #4]
 802632e:	689c      	ldr	r4, [r3, #8]
 8026330:	7bfb      	ldrb	r3, [r7, #15]
 8026332:	4a07      	ldr	r2, [pc, #28]	@ (8026350 <disk_read+0x3c>)
 8026334:	4413      	add	r3, r2
 8026336:	7a18      	ldrb	r0, [r3, #8]
 8026338:	683b      	ldr	r3, [r7, #0]
 802633a:	687a      	ldr	r2, [r7, #4]
 802633c:	68b9      	ldr	r1, [r7, #8]
 802633e:	47a0      	blx	r4
 8026340:	4603      	mov	r3, r0
 8026342:	75fb      	strb	r3, [r7, #23]
  return res;
 8026344:	7dfb      	ldrb	r3, [r7, #23]
}
 8026346:	4618      	mov	r0, r3
 8026348:	371c      	adds	r7, #28
 802634a:	46bd      	mov	sp, r7
 802634c:	bd90      	pop	{r4, r7, pc}
 802634e:	bf00      	nop
 8026350:	24000ab4 	.word	0x24000ab4

08026354 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8026354:	b590      	push	{r4, r7, lr}
 8026356:	b087      	sub	sp, #28
 8026358:	af00      	add	r7, sp, #0
 802635a:	60b9      	str	r1, [r7, #8]
 802635c:	607a      	str	r2, [r7, #4]
 802635e:	603b      	str	r3, [r7, #0]
 8026360:	4603      	mov	r3, r0
 8026362:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8026364:	7bfb      	ldrb	r3, [r7, #15]
 8026366:	4a0a      	ldr	r2, [pc, #40]	@ (8026390 <disk_write+0x3c>)
 8026368:	009b      	lsls	r3, r3, #2
 802636a:	4413      	add	r3, r2
 802636c:	685b      	ldr	r3, [r3, #4]
 802636e:	68dc      	ldr	r4, [r3, #12]
 8026370:	7bfb      	ldrb	r3, [r7, #15]
 8026372:	4a07      	ldr	r2, [pc, #28]	@ (8026390 <disk_write+0x3c>)
 8026374:	4413      	add	r3, r2
 8026376:	7a18      	ldrb	r0, [r3, #8]
 8026378:	683b      	ldr	r3, [r7, #0]
 802637a:	687a      	ldr	r2, [r7, #4]
 802637c:	68b9      	ldr	r1, [r7, #8]
 802637e:	47a0      	blx	r4
 8026380:	4603      	mov	r3, r0
 8026382:	75fb      	strb	r3, [r7, #23]
  return res;
 8026384:	7dfb      	ldrb	r3, [r7, #23]
}
 8026386:	4618      	mov	r0, r3
 8026388:	371c      	adds	r7, #28
 802638a:	46bd      	mov	sp, r7
 802638c:	bd90      	pop	{r4, r7, pc}
 802638e:	bf00      	nop
 8026390:	24000ab4 	.word	0x24000ab4

08026394 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8026394:	b580      	push	{r7, lr}
 8026396:	b084      	sub	sp, #16
 8026398:	af00      	add	r7, sp, #0
 802639a:	4603      	mov	r3, r0
 802639c:	603a      	str	r2, [r7, #0]
 802639e:	71fb      	strb	r3, [r7, #7]
 80263a0:	460b      	mov	r3, r1
 80263a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80263a4:	79fb      	ldrb	r3, [r7, #7]
 80263a6:	4a09      	ldr	r2, [pc, #36]	@ (80263cc <disk_ioctl+0x38>)
 80263a8:	009b      	lsls	r3, r3, #2
 80263aa:	4413      	add	r3, r2
 80263ac:	685b      	ldr	r3, [r3, #4]
 80263ae:	691b      	ldr	r3, [r3, #16]
 80263b0:	79fa      	ldrb	r2, [r7, #7]
 80263b2:	4906      	ldr	r1, [pc, #24]	@ (80263cc <disk_ioctl+0x38>)
 80263b4:	440a      	add	r2, r1
 80263b6:	7a10      	ldrb	r0, [r2, #8]
 80263b8:	79b9      	ldrb	r1, [r7, #6]
 80263ba:	683a      	ldr	r2, [r7, #0]
 80263bc:	4798      	blx	r3
 80263be:	4603      	mov	r3, r0
 80263c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80263c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80263c4:	4618      	mov	r0, r3
 80263c6:	3710      	adds	r7, #16
 80263c8:	46bd      	mov	sp, r7
 80263ca:	bd80      	pop	{r7, pc}
 80263cc:	24000ab4 	.word	0x24000ab4

080263d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80263d0:	b480      	push	{r7}
 80263d2:	b085      	sub	sp, #20
 80263d4:	af00      	add	r7, sp, #0
 80263d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80263d8:	687b      	ldr	r3, [r7, #4]
 80263da:	3301      	adds	r3, #1
 80263dc:	781b      	ldrb	r3, [r3, #0]
 80263de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80263e0:	89fb      	ldrh	r3, [r7, #14]
 80263e2:	021b      	lsls	r3, r3, #8
 80263e4:	b21a      	sxth	r2, r3
 80263e6:	687b      	ldr	r3, [r7, #4]
 80263e8:	781b      	ldrb	r3, [r3, #0]
 80263ea:	b21b      	sxth	r3, r3
 80263ec:	4313      	orrs	r3, r2
 80263ee:	b21b      	sxth	r3, r3
 80263f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80263f2:	89fb      	ldrh	r3, [r7, #14]
}
 80263f4:	4618      	mov	r0, r3
 80263f6:	3714      	adds	r7, #20
 80263f8:	46bd      	mov	sp, r7
 80263fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263fe:	4770      	bx	lr

08026400 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8026400:	b480      	push	{r7}
 8026402:	b085      	sub	sp, #20
 8026404:	af00      	add	r7, sp, #0
 8026406:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8026408:	687b      	ldr	r3, [r7, #4]
 802640a:	3303      	adds	r3, #3
 802640c:	781b      	ldrb	r3, [r3, #0]
 802640e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8026410:	68fb      	ldr	r3, [r7, #12]
 8026412:	021b      	lsls	r3, r3, #8
 8026414:	687a      	ldr	r2, [r7, #4]
 8026416:	3202      	adds	r2, #2
 8026418:	7812      	ldrb	r2, [r2, #0]
 802641a:	4313      	orrs	r3, r2
 802641c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 802641e:	68fb      	ldr	r3, [r7, #12]
 8026420:	021b      	lsls	r3, r3, #8
 8026422:	687a      	ldr	r2, [r7, #4]
 8026424:	3201      	adds	r2, #1
 8026426:	7812      	ldrb	r2, [r2, #0]
 8026428:	4313      	orrs	r3, r2
 802642a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 802642c:	68fb      	ldr	r3, [r7, #12]
 802642e:	021b      	lsls	r3, r3, #8
 8026430:	687a      	ldr	r2, [r7, #4]
 8026432:	7812      	ldrb	r2, [r2, #0]
 8026434:	4313      	orrs	r3, r2
 8026436:	60fb      	str	r3, [r7, #12]
	return rv;
 8026438:	68fb      	ldr	r3, [r7, #12]
}
 802643a:	4618      	mov	r0, r3
 802643c:	3714      	adds	r7, #20
 802643e:	46bd      	mov	sp, r7
 8026440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026444:	4770      	bx	lr

08026446 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8026446:	b480      	push	{r7}
 8026448:	b083      	sub	sp, #12
 802644a:	af00      	add	r7, sp, #0
 802644c:	6078      	str	r0, [r7, #4]
 802644e:	460b      	mov	r3, r1
 8026450:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8026452:	687b      	ldr	r3, [r7, #4]
 8026454:	1c5a      	adds	r2, r3, #1
 8026456:	607a      	str	r2, [r7, #4]
 8026458:	887a      	ldrh	r2, [r7, #2]
 802645a:	b2d2      	uxtb	r2, r2
 802645c:	701a      	strb	r2, [r3, #0]
 802645e:	887b      	ldrh	r3, [r7, #2]
 8026460:	0a1b      	lsrs	r3, r3, #8
 8026462:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8026464:	687b      	ldr	r3, [r7, #4]
 8026466:	1c5a      	adds	r2, r3, #1
 8026468:	607a      	str	r2, [r7, #4]
 802646a:	887a      	ldrh	r2, [r7, #2]
 802646c:	b2d2      	uxtb	r2, r2
 802646e:	701a      	strb	r2, [r3, #0]
}
 8026470:	bf00      	nop
 8026472:	370c      	adds	r7, #12
 8026474:	46bd      	mov	sp, r7
 8026476:	f85d 7b04 	ldr.w	r7, [sp], #4
 802647a:	4770      	bx	lr

0802647c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 802647c:	b480      	push	{r7}
 802647e:	b083      	sub	sp, #12
 8026480:	af00      	add	r7, sp, #0
 8026482:	6078      	str	r0, [r7, #4]
 8026484:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8026486:	687b      	ldr	r3, [r7, #4]
 8026488:	1c5a      	adds	r2, r3, #1
 802648a:	607a      	str	r2, [r7, #4]
 802648c:	683a      	ldr	r2, [r7, #0]
 802648e:	b2d2      	uxtb	r2, r2
 8026490:	701a      	strb	r2, [r3, #0]
 8026492:	683b      	ldr	r3, [r7, #0]
 8026494:	0a1b      	lsrs	r3, r3, #8
 8026496:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8026498:	687b      	ldr	r3, [r7, #4]
 802649a:	1c5a      	adds	r2, r3, #1
 802649c:	607a      	str	r2, [r7, #4]
 802649e:	683a      	ldr	r2, [r7, #0]
 80264a0:	b2d2      	uxtb	r2, r2
 80264a2:	701a      	strb	r2, [r3, #0]
 80264a4:	683b      	ldr	r3, [r7, #0]
 80264a6:	0a1b      	lsrs	r3, r3, #8
 80264a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80264aa:	687b      	ldr	r3, [r7, #4]
 80264ac:	1c5a      	adds	r2, r3, #1
 80264ae:	607a      	str	r2, [r7, #4]
 80264b0:	683a      	ldr	r2, [r7, #0]
 80264b2:	b2d2      	uxtb	r2, r2
 80264b4:	701a      	strb	r2, [r3, #0]
 80264b6:	683b      	ldr	r3, [r7, #0]
 80264b8:	0a1b      	lsrs	r3, r3, #8
 80264ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80264bc:	687b      	ldr	r3, [r7, #4]
 80264be:	1c5a      	adds	r2, r3, #1
 80264c0:	607a      	str	r2, [r7, #4]
 80264c2:	683a      	ldr	r2, [r7, #0]
 80264c4:	b2d2      	uxtb	r2, r2
 80264c6:	701a      	strb	r2, [r3, #0]
}
 80264c8:	bf00      	nop
 80264ca:	370c      	adds	r7, #12
 80264cc:	46bd      	mov	sp, r7
 80264ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264d2:	4770      	bx	lr

080264d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80264d4:	b480      	push	{r7}
 80264d6:	b087      	sub	sp, #28
 80264d8:	af00      	add	r7, sp, #0
 80264da:	60f8      	str	r0, [r7, #12]
 80264dc:	60b9      	str	r1, [r7, #8]
 80264de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80264e0:	68fb      	ldr	r3, [r7, #12]
 80264e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80264e4:	68bb      	ldr	r3, [r7, #8]
 80264e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80264e8:	687b      	ldr	r3, [r7, #4]
 80264ea:	2b00      	cmp	r3, #0
 80264ec:	d00d      	beq.n	802650a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80264ee:	693a      	ldr	r2, [r7, #16]
 80264f0:	1c53      	adds	r3, r2, #1
 80264f2:	613b      	str	r3, [r7, #16]
 80264f4:	697b      	ldr	r3, [r7, #20]
 80264f6:	1c59      	adds	r1, r3, #1
 80264f8:	6179      	str	r1, [r7, #20]
 80264fa:	7812      	ldrb	r2, [r2, #0]
 80264fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80264fe:	687b      	ldr	r3, [r7, #4]
 8026500:	3b01      	subs	r3, #1
 8026502:	607b      	str	r3, [r7, #4]
 8026504:	687b      	ldr	r3, [r7, #4]
 8026506:	2b00      	cmp	r3, #0
 8026508:	d1f1      	bne.n	80264ee <mem_cpy+0x1a>
	}
}
 802650a:	bf00      	nop
 802650c:	371c      	adds	r7, #28
 802650e:	46bd      	mov	sp, r7
 8026510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026514:	4770      	bx	lr

08026516 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8026516:	b480      	push	{r7}
 8026518:	b087      	sub	sp, #28
 802651a:	af00      	add	r7, sp, #0
 802651c:	60f8      	str	r0, [r7, #12]
 802651e:	60b9      	str	r1, [r7, #8]
 8026520:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8026522:	68fb      	ldr	r3, [r7, #12]
 8026524:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8026526:	697b      	ldr	r3, [r7, #20]
 8026528:	1c5a      	adds	r2, r3, #1
 802652a:	617a      	str	r2, [r7, #20]
 802652c:	68ba      	ldr	r2, [r7, #8]
 802652e:	b2d2      	uxtb	r2, r2
 8026530:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8026532:	687b      	ldr	r3, [r7, #4]
 8026534:	3b01      	subs	r3, #1
 8026536:	607b      	str	r3, [r7, #4]
 8026538:	687b      	ldr	r3, [r7, #4]
 802653a:	2b00      	cmp	r3, #0
 802653c:	d1f3      	bne.n	8026526 <mem_set+0x10>
}
 802653e:	bf00      	nop
 8026540:	bf00      	nop
 8026542:	371c      	adds	r7, #28
 8026544:	46bd      	mov	sp, r7
 8026546:	f85d 7b04 	ldr.w	r7, [sp], #4
 802654a:	4770      	bx	lr

0802654c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 802654c:	b480      	push	{r7}
 802654e:	b089      	sub	sp, #36	@ 0x24
 8026550:	af00      	add	r7, sp, #0
 8026552:	60f8      	str	r0, [r7, #12]
 8026554:	60b9      	str	r1, [r7, #8]
 8026556:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8026558:	68fb      	ldr	r3, [r7, #12]
 802655a:	61fb      	str	r3, [r7, #28]
 802655c:	68bb      	ldr	r3, [r7, #8]
 802655e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8026560:	2300      	movs	r3, #0
 8026562:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8026564:	69fb      	ldr	r3, [r7, #28]
 8026566:	1c5a      	adds	r2, r3, #1
 8026568:	61fa      	str	r2, [r7, #28]
 802656a:	781b      	ldrb	r3, [r3, #0]
 802656c:	4619      	mov	r1, r3
 802656e:	69bb      	ldr	r3, [r7, #24]
 8026570:	1c5a      	adds	r2, r3, #1
 8026572:	61ba      	str	r2, [r7, #24]
 8026574:	781b      	ldrb	r3, [r3, #0]
 8026576:	1acb      	subs	r3, r1, r3
 8026578:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 802657a:	687b      	ldr	r3, [r7, #4]
 802657c:	3b01      	subs	r3, #1
 802657e:	607b      	str	r3, [r7, #4]
 8026580:	687b      	ldr	r3, [r7, #4]
 8026582:	2b00      	cmp	r3, #0
 8026584:	d002      	beq.n	802658c <mem_cmp+0x40>
 8026586:	697b      	ldr	r3, [r7, #20]
 8026588:	2b00      	cmp	r3, #0
 802658a:	d0eb      	beq.n	8026564 <mem_cmp+0x18>

	return r;
 802658c:	697b      	ldr	r3, [r7, #20]
}
 802658e:	4618      	mov	r0, r3
 8026590:	3724      	adds	r7, #36	@ 0x24
 8026592:	46bd      	mov	sp, r7
 8026594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026598:	4770      	bx	lr

0802659a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 802659a:	b480      	push	{r7}
 802659c:	b083      	sub	sp, #12
 802659e:	af00      	add	r7, sp, #0
 80265a0:	6078      	str	r0, [r7, #4]
 80265a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80265a4:	e002      	b.n	80265ac <chk_chr+0x12>
 80265a6:	687b      	ldr	r3, [r7, #4]
 80265a8:	3301      	adds	r3, #1
 80265aa:	607b      	str	r3, [r7, #4]
 80265ac:	687b      	ldr	r3, [r7, #4]
 80265ae:	781b      	ldrb	r3, [r3, #0]
 80265b0:	2b00      	cmp	r3, #0
 80265b2:	d005      	beq.n	80265c0 <chk_chr+0x26>
 80265b4:	687b      	ldr	r3, [r7, #4]
 80265b6:	781b      	ldrb	r3, [r3, #0]
 80265b8:	461a      	mov	r2, r3
 80265ba:	683b      	ldr	r3, [r7, #0]
 80265bc:	4293      	cmp	r3, r2
 80265be:	d1f2      	bne.n	80265a6 <chk_chr+0xc>
	return *str;
 80265c0:	687b      	ldr	r3, [r7, #4]
 80265c2:	781b      	ldrb	r3, [r3, #0]
}
 80265c4:	4618      	mov	r0, r3
 80265c6:	370c      	adds	r7, #12
 80265c8:	46bd      	mov	sp, r7
 80265ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265ce:	4770      	bx	lr

080265d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80265d0:	b480      	push	{r7}
 80265d2:	b085      	sub	sp, #20
 80265d4:	af00      	add	r7, sp, #0
 80265d6:	6078      	str	r0, [r7, #4]
 80265d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80265da:	2300      	movs	r3, #0
 80265dc:	60bb      	str	r3, [r7, #8]
 80265de:	68bb      	ldr	r3, [r7, #8]
 80265e0:	60fb      	str	r3, [r7, #12]
 80265e2:	e029      	b.n	8026638 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80265e4:	4a27      	ldr	r2, [pc, #156]	@ (8026684 <chk_lock+0xb4>)
 80265e6:	68fb      	ldr	r3, [r7, #12]
 80265e8:	011b      	lsls	r3, r3, #4
 80265ea:	4413      	add	r3, r2
 80265ec:	681b      	ldr	r3, [r3, #0]
 80265ee:	2b00      	cmp	r3, #0
 80265f0:	d01d      	beq.n	802662e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80265f2:	4a24      	ldr	r2, [pc, #144]	@ (8026684 <chk_lock+0xb4>)
 80265f4:	68fb      	ldr	r3, [r7, #12]
 80265f6:	011b      	lsls	r3, r3, #4
 80265f8:	4413      	add	r3, r2
 80265fa:	681a      	ldr	r2, [r3, #0]
 80265fc:	687b      	ldr	r3, [r7, #4]
 80265fe:	681b      	ldr	r3, [r3, #0]
 8026600:	429a      	cmp	r2, r3
 8026602:	d116      	bne.n	8026632 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8026604:	4a1f      	ldr	r2, [pc, #124]	@ (8026684 <chk_lock+0xb4>)
 8026606:	68fb      	ldr	r3, [r7, #12]
 8026608:	011b      	lsls	r3, r3, #4
 802660a:	4413      	add	r3, r2
 802660c:	3304      	adds	r3, #4
 802660e:	681a      	ldr	r2, [r3, #0]
 8026610:	687b      	ldr	r3, [r7, #4]
 8026612:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8026614:	429a      	cmp	r2, r3
 8026616:	d10c      	bne.n	8026632 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8026618:	4a1a      	ldr	r2, [pc, #104]	@ (8026684 <chk_lock+0xb4>)
 802661a:	68fb      	ldr	r3, [r7, #12]
 802661c:	011b      	lsls	r3, r3, #4
 802661e:	4413      	add	r3, r2
 8026620:	3308      	adds	r3, #8
 8026622:	681a      	ldr	r2, [r3, #0]
 8026624:	687b      	ldr	r3, [r7, #4]
 8026626:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8026628:	429a      	cmp	r2, r3
 802662a:	d102      	bne.n	8026632 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 802662c:	e007      	b.n	802663e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 802662e:	2301      	movs	r3, #1
 8026630:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8026632:	68fb      	ldr	r3, [r7, #12]
 8026634:	3301      	adds	r3, #1
 8026636:	60fb      	str	r3, [r7, #12]
 8026638:	68fb      	ldr	r3, [r7, #12]
 802663a:	2b01      	cmp	r3, #1
 802663c:	d9d2      	bls.n	80265e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 802663e:	68fb      	ldr	r3, [r7, #12]
 8026640:	2b02      	cmp	r3, #2
 8026642:	d109      	bne.n	8026658 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8026644:	68bb      	ldr	r3, [r7, #8]
 8026646:	2b00      	cmp	r3, #0
 8026648:	d102      	bne.n	8026650 <chk_lock+0x80>
 802664a:	683b      	ldr	r3, [r7, #0]
 802664c:	2b02      	cmp	r3, #2
 802664e:	d101      	bne.n	8026654 <chk_lock+0x84>
 8026650:	2300      	movs	r3, #0
 8026652:	e010      	b.n	8026676 <chk_lock+0xa6>
 8026654:	2312      	movs	r3, #18
 8026656:	e00e      	b.n	8026676 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8026658:	683b      	ldr	r3, [r7, #0]
 802665a:	2b00      	cmp	r3, #0
 802665c:	d108      	bne.n	8026670 <chk_lock+0xa0>
 802665e:	4a09      	ldr	r2, [pc, #36]	@ (8026684 <chk_lock+0xb4>)
 8026660:	68fb      	ldr	r3, [r7, #12]
 8026662:	011b      	lsls	r3, r3, #4
 8026664:	4413      	add	r3, r2
 8026666:	330c      	adds	r3, #12
 8026668:	881b      	ldrh	r3, [r3, #0]
 802666a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802666e:	d101      	bne.n	8026674 <chk_lock+0xa4>
 8026670:	2310      	movs	r3, #16
 8026672:	e000      	b.n	8026676 <chk_lock+0xa6>
 8026674:	2300      	movs	r3, #0
}
 8026676:	4618      	mov	r0, r3
 8026678:	3714      	adds	r7, #20
 802667a:	46bd      	mov	sp, r7
 802667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026680:	4770      	bx	lr
 8026682:	bf00      	nop
 8026684:	24000a94 	.word	0x24000a94

08026688 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8026688:	b480      	push	{r7}
 802668a:	b083      	sub	sp, #12
 802668c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 802668e:	2300      	movs	r3, #0
 8026690:	607b      	str	r3, [r7, #4]
 8026692:	e002      	b.n	802669a <enq_lock+0x12>
 8026694:	687b      	ldr	r3, [r7, #4]
 8026696:	3301      	adds	r3, #1
 8026698:	607b      	str	r3, [r7, #4]
 802669a:	687b      	ldr	r3, [r7, #4]
 802669c:	2b01      	cmp	r3, #1
 802669e:	d806      	bhi.n	80266ae <enq_lock+0x26>
 80266a0:	4a09      	ldr	r2, [pc, #36]	@ (80266c8 <enq_lock+0x40>)
 80266a2:	687b      	ldr	r3, [r7, #4]
 80266a4:	011b      	lsls	r3, r3, #4
 80266a6:	4413      	add	r3, r2
 80266a8:	681b      	ldr	r3, [r3, #0]
 80266aa:	2b00      	cmp	r3, #0
 80266ac:	d1f2      	bne.n	8026694 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80266ae:	687b      	ldr	r3, [r7, #4]
 80266b0:	2b02      	cmp	r3, #2
 80266b2:	bf14      	ite	ne
 80266b4:	2301      	movne	r3, #1
 80266b6:	2300      	moveq	r3, #0
 80266b8:	b2db      	uxtb	r3, r3
}
 80266ba:	4618      	mov	r0, r3
 80266bc:	370c      	adds	r7, #12
 80266be:	46bd      	mov	sp, r7
 80266c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266c4:	4770      	bx	lr
 80266c6:	bf00      	nop
 80266c8:	24000a94 	.word	0x24000a94

080266cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80266cc:	b480      	push	{r7}
 80266ce:	b085      	sub	sp, #20
 80266d0:	af00      	add	r7, sp, #0
 80266d2:	6078      	str	r0, [r7, #4]
 80266d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80266d6:	2300      	movs	r3, #0
 80266d8:	60fb      	str	r3, [r7, #12]
 80266da:	e01f      	b.n	802671c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80266dc:	4a41      	ldr	r2, [pc, #260]	@ (80267e4 <inc_lock+0x118>)
 80266de:	68fb      	ldr	r3, [r7, #12]
 80266e0:	011b      	lsls	r3, r3, #4
 80266e2:	4413      	add	r3, r2
 80266e4:	681a      	ldr	r2, [r3, #0]
 80266e6:	687b      	ldr	r3, [r7, #4]
 80266e8:	681b      	ldr	r3, [r3, #0]
 80266ea:	429a      	cmp	r2, r3
 80266ec:	d113      	bne.n	8026716 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80266ee:	4a3d      	ldr	r2, [pc, #244]	@ (80267e4 <inc_lock+0x118>)
 80266f0:	68fb      	ldr	r3, [r7, #12]
 80266f2:	011b      	lsls	r3, r3, #4
 80266f4:	4413      	add	r3, r2
 80266f6:	3304      	adds	r3, #4
 80266f8:	681a      	ldr	r2, [r3, #0]
 80266fa:	687b      	ldr	r3, [r7, #4]
 80266fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80266fe:	429a      	cmp	r2, r3
 8026700:	d109      	bne.n	8026716 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8026702:	4a38      	ldr	r2, [pc, #224]	@ (80267e4 <inc_lock+0x118>)
 8026704:	68fb      	ldr	r3, [r7, #12]
 8026706:	011b      	lsls	r3, r3, #4
 8026708:	4413      	add	r3, r2
 802670a:	3308      	adds	r3, #8
 802670c:	681a      	ldr	r2, [r3, #0]
 802670e:	687b      	ldr	r3, [r7, #4]
 8026710:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8026712:	429a      	cmp	r2, r3
 8026714:	d006      	beq.n	8026724 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8026716:	68fb      	ldr	r3, [r7, #12]
 8026718:	3301      	adds	r3, #1
 802671a:	60fb      	str	r3, [r7, #12]
 802671c:	68fb      	ldr	r3, [r7, #12]
 802671e:	2b01      	cmp	r3, #1
 8026720:	d9dc      	bls.n	80266dc <inc_lock+0x10>
 8026722:	e000      	b.n	8026726 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8026724:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8026726:	68fb      	ldr	r3, [r7, #12]
 8026728:	2b02      	cmp	r3, #2
 802672a:	d132      	bne.n	8026792 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 802672c:	2300      	movs	r3, #0
 802672e:	60fb      	str	r3, [r7, #12]
 8026730:	e002      	b.n	8026738 <inc_lock+0x6c>
 8026732:	68fb      	ldr	r3, [r7, #12]
 8026734:	3301      	adds	r3, #1
 8026736:	60fb      	str	r3, [r7, #12]
 8026738:	68fb      	ldr	r3, [r7, #12]
 802673a:	2b01      	cmp	r3, #1
 802673c:	d806      	bhi.n	802674c <inc_lock+0x80>
 802673e:	4a29      	ldr	r2, [pc, #164]	@ (80267e4 <inc_lock+0x118>)
 8026740:	68fb      	ldr	r3, [r7, #12]
 8026742:	011b      	lsls	r3, r3, #4
 8026744:	4413      	add	r3, r2
 8026746:	681b      	ldr	r3, [r3, #0]
 8026748:	2b00      	cmp	r3, #0
 802674a:	d1f2      	bne.n	8026732 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 802674c:	68fb      	ldr	r3, [r7, #12]
 802674e:	2b02      	cmp	r3, #2
 8026750:	d101      	bne.n	8026756 <inc_lock+0x8a>
 8026752:	2300      	movs	r3, #0
 8026754:	e040      	b.n	80267d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8026756:	687b      	ldr	r3, [r7, #4]
 8026758:	681a      	ldr	r2, [r3, #0]
 802675a:	4922      	ldr	r1, [pc, #136]	@ (80267e4 <inc_lock+0x118>)
 802675c:	68fb      	ldr	r3, [r7, #12]
 802675e:	011b      	lsls	r3, r3, #4
 8026760:	440b      	add	r3, r1
 8026762:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8026764:	687b      	ldr	r3, [r7, #4]
 8026766:	689a      	ldr	r2, [r3, #8]
 8026768:	491e      	ldr	r1, [pc, #120]	@ (80267e4 <inc_lock+0x118>)
 802676a:	68fb      	ldr	r3, [r7, #12]
 802676c:	011b      	lsls	r3, r3, #4
 802676e:	440b      	add	r3, r1
 8026770:	3304      	adds	r3, #4
 8026772:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8026774:	687b      	ldr	r3, [r7, #4]
 8026776:	695a      	ldr	r2, [r3, #20]
 8026778:	491a      	ldr	r1, [pc, #104]	@ (80267e4 <inc_lock+0x118>)
 802677a:	68fb      	ldr	r3, [r7, #12]
 802677c:	011b      	lsls	r3, r3, #4
 802677e:	440b      	add	r3, r1
 8026780:	3308      	adds	r3, #8
 8026782:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8026784:	4a17      	ldr	r2, [pc, #92]	@ (80267e4 <inc_lock+0x118>)
 8026786:	68fb      	ldr	r3, [r7, #12]
 8026788:	011b      	lsls	r3, r3, #4
 802678a:	4413      	add	r3, r2
 802678c:	330c      	adds	r3, #12
 802678e:	2200      	movs	r2, #0
 8026790:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8026792:	683b      	ldr	r3, [r7, #0]
 8026794:	2b00      	cmp	r3, #0
 8026796:	d009      	beq.n	80267ac <inc_lock+0xe0>
 8026798:	4a12      	ldr	r2, [pc, #72]	@ (80267e4 <inc_lock+0x118>)
 802679a:	68fb      	ldr	r3, [r7, #12]
 802679c:	011b      	lsls	r3, r3, #4
 802679e:	4413      	add	r3, r2
 80267a0:	330c      	adds	r3, #12
 80267a2:	881b      	ldrh	r3, [r3, #0]
 80267a4:	2b00      	cmp	r3, #0
 80267a6:	d001      	beq.n	80267ac <inc_lock+0xe0>
 80267a8:	2300      	movs	r3, #0
 80267aa:	e015      	b.n	80267d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80267ac:	683b      	ldr	r3, [r7, #0]
 80267ae:	2b00      	cmp	r3, #0
 80267b0:	d108      	bne.n	80267c4 <inc_lock+0xf8>
 80267b2:	4a0c      	ldr	r2, [pc, #48]	@ (80267e4 <inc_lock+0x118>)
 80267b4:	68fb      	ldr	r3, [r7, #12]
 80267b6:	011b      	lsls	r3, r3, #4
 80267b8:	4413      	add	r3, r2
 80267ba:	330c      	adds	r3, #12
 80267bc:	881b      	ldrh	r3, [r3, #0]
 80267be:	3301      	adds	r3, #1
 80267c0:	b29a      	uxth	r2, r3
 80267c2:	e001      	b.n	80267c8 <inc_lock+0xfc>
 80267c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80267c8:	4906      	ldr	r1, [pc, #24]	@ (80267e4 <inc_lock+0x118>)
 80267ca:	68fb      	ldr	r3, [r7, #12]
 80267cc:	011b      	lsls	r3, r3, #4
 80267ce:	440b      	add	r3, r1
 80267d0:	330c      	adds	r3, #12
 80267d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80267d4:	68fb      	ldr	r3, [r7, #12]
 80267d6:	3301      	adds	r3, #1
}
 80267d8:	4618      	mov	r0, r3
 80267da:	3714      	adds	r7, #20
 80267dc:	46bd      	mov	sp, r7
 80267de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267e2:	4770      	bx	lr
 80267e4:	24000a94 	.word	0x24000a94

080267e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80267e8:	b480      	push	{r7}
 80267ea:	b085      	sub	sp, #20
 80267ec:	af00      	add	r7, sp, #0
 80267ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80267f0:	687b      	ldr	r3, [r7, #4]
 80267f2:	3b01      	subs	r3, #1
 80267f4:	607b      	str	r3, [r7, #4]
 80267f6:	687b      	ldr	r3, [r7, #4]
 80267f8:	2b01      	cmp	r3, #1
 80267fa:	d825      	bhi.n	8026848 <dec_lock+0x60>
		n = Files[i].ctr;
 80267fc:	4a17      	ldr	r2, [pc, #92]	@ (802685c <dec_lock+0x74>)
 80267fe:	687b      	ldr	r3, [r7, #4]
 8026800:	011b      	lsls	r3, r3, #4
 8026802:	4413      	add	r3, r2
 8026804:	330c      	adds	r3, #12
 8026806:	881b      	ldrh	r3, [r3, #0]
 8026808:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 802680a:	89fb      	ldrh	r3, [r7, #14]
 802680c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8026810:	d101      	bne.n	8026816 <dec_lock+0x2e>
 8026812:	2300      	movs	r3, #0
 8026814:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8026816:	89fb      	ldrh	r3, [r7, #14]
 8026818:	2b00      	cmp	r3, #0
 802681a:	d002      	beq.n	8026822 <dec_lock+0x3a>
 802681c:	89fb      	ldrh	r3, [r7, #14]
 802681e:	3b01      	subs	r3, #1
 8026820:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8026822:	4a0e      	ldr	r2, [pc, #56]	@ (802685c <dec_lock+0x74>)
 8026824:	687b      	ldr	r3, [r7, #4]
 8026826:	011b      	lsls	r3, r3, #4
 8026828:	4413      	add	r3, r2
 802682a:	330c      	adds	r3, #12
 802682c:	89fa      	ldrh	r2, [r7, #14]
 802682e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8026830:	89fb      	ldrh	r3, [r7, #14]
 8026832:	2b00      	cmp	r3, #0
 8026834:	d105      	bne.n	8026842 <dec_lock+0x5a>
 8026836:	4a09      	ldr	r2, [pc, #36]	@ (802685c <dec_lock+0x74>)
 8026838:	687b      	ldr	r3, [r7, #4]
 802683a:	011b      	lsls	r3, r3, #4
 802683c:	4413      	add	r3, r2
 802683e:	2200      	movs	r2, #0
 8026840:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8026842:	2300      	movs	r3, #0
 8026844:	737b      	strb	r3, [r7, #13]
 8026846:	e001      	b.n	802684c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8026848:	2302      	movs	r3, #2
 802684a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 802684c:	7b7b      	ldrb	r3, [r7, #13]
}
 802684e:	4618      	mov	r0, r3
 8026850:	3714      	adds	r7, #20
 8026852:	46bd      	mov	sp, r7
 8026854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026858:	4770      	bx	lr
 802685a:	bf00      	nop
 802685c:	24000a94 	.word	0x24000a94

08026860 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8026860:	b480      	push	{r7}
 8026862:	b085      	sub	sp, #20
 8026864:	af00      	add	r7, sp, #0
 8026866:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8026868:	2300      	movs	r3, #0
 802686a:	60fb      	str	r3, [r7, #12]
 802686c:	e010      	b.n	8026890 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 802686e:	4a0d      	ldr	r2, [pc, #52]	@ (80268a4 <clear_lock+0x44>)
 8026870:	68fb      	ldr	r3, [r7, #12]
 8026872:	011b      	lsls	r3, r3, #4
 8026874:	4413      	add	r3, r2
 8026876:	681b      	ldr	r3, [r3, #0]
 8026878:	687a      	ldr	r2, [r7, #4]
 802687a:	429a      	cmp	r2, r3
 802687c:	d105      	bne.n	802688a <clear_lock+0x2a>
 802687e:	4a09      	ldr	r2, [pc, #36]	@ (80268a4 <clear_lock+0x44>)
 8026880:	68fb      	ldr	r3, [r7, #12]
 8026882:	011b      	lsls	r3, r3, #4
 8026884:	4413      	add	r3, r2
 8026886:	2200      	movs	r2, #0
 8026888:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 802688a:	68fb      	ldr	r3, [r7, #12]
 802688c:	3301      	adds	r3, #1
 802688e:	60fb      	str	r3, [r7, #12]
 8026890:	68fb      	ldr	r3, [r7, #12]
 8026892:	2b01      	cmp	r3, #1
 8026894:	d9eb      	bls.n	802686e <clear_lock+0xe>
	}
}
 8026896:	bf00      	nop
 8026898:	bf00      	nop
 802689a:	3714      	adds	r7, #20
 802689c:	46bd      	mov	sp, r7
 802689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268a2:	4770      	bx	lr
 80268a4:	24000a94 	.word	0x24000a94

080268a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80268a8:	b580      	push	{r7, lr}
 80268aa:	b086      	sub	sp, #24
 80268ac:	af00      	add	r7, sp, #0
 80268ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80268b0:	2300      	movs	r3, #0
 80268b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80268b4:	687b      	ldr	r3, [r7, #4]
 80268b6:	78db      	ldrb	r3, [r3, #3]
 80268b8:	2b00      	cmp	r3, #0
 80268ba:	d034      	beq.n	8026926 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80268bc:	687b      	ldr	r3, [r7, #4]
 80268be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80268c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80268c2:	687b      	ldr	r3, [r7, #4]
 80268c4:	7858      	ldrb	r0, [r3, #1]
 80268c6:	687b      	ldr	r3, [r7, #4]
 80268c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80268cc:	2301      	movs	r3, #1
 80268ce:	697a      	ldr	r2, [r7, #20]
 80268d0:	f7ff fd40 	bl	8026354 <disk_write>
 80268d4:	4603      	mov	r3, r0
 80268d6:	2b00      	cmp	r3, #0
 80268d8:	d002      	beq.n	80268e0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80268da:	2301      	movs	r3, #1
 80268dc:	73fb      	strb	r3, [r7, #15]
 80268de:	e022      	b.n	8026926 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80268e0:	687b      	ldr	r3, [r7, #4]
 80268e2:	2200      	movs	r2, #0
 80268e4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80268e6:	687b      	ldr	r3, [r7, #4]
 80268e8:	6a1b      	ldr	r3, [r3, #32]
 80268ea:	697a      	ldr	r2, [r7, #20]
 80268ec:	1ad2      	subs	r2, r2, r3
 80268ee:	687b      	ldr	r3, [r7, #4]
 80268f0:	699b      	ldr	r3, [r3, #24]
 80268f2:	429a      	cmp	r2, r3
 80268f4:	d217      	bcs.n	8026926 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80268f6:	687b      	ldr	r3, [r7, #4]
 80268f8:	789b      	ldrb	r3, [r3, #2]
 80268fa:	613b      	str	r3, [r7, #16]
 80268fc:	e010      	b.n	8026920 <sync_window+0x78>
					wsect += fs->fsize;
 80268fe:	687b      	ldr	r3, [r7, #4]
 8026900:	699b      	ldr	r3, [r3, #24]
 8026902:	697a      	ldr	r2, [r7, #20]
 8026904:	4413      	add	r3, r2
 8026906:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8026908:	687b      	ldr	r3, [r7, #4]
 802690a:	7858      	ldrb	r0, [r3, #1]
 802690c:	687b      	ldr	r3, [r7, #4]
 802690e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8026912:	2301      	movs	r3, #1
 8026914:	697a      	ldr	r2, [r7, #20]
 8026916:	f7ff fd1d 	bl	8026354 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 802691a:	693b      	ldr	r3, [r7, #16]
 802691c:	3b01      	subs	r3, #1
 802691e:	613b      	str	r3, [r7, #16]
 8026920:	693b      	ldr	r3, [r7, #16]
 8026922:	2b01      	cmp	r3, #1
 8026924:	d8eb      	bhi.n	80268fe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8026926:	7bfb      	ldrb	r3, [r7, #15]
}
 8026928:	4618      	mov	r0, r3
 802692a:	3718      	adds	r7, #24
 802692c:	46bd      	mov	sp, r7
 802692e:	bd80      	pop	{r7, pc}

08026930 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8026930:	b580      	push	{r7, lr}
 8026932:	b084      	sub	sp, #16
 8026934:	af00      	add	r7, sp, #0
 8026936:	6078      	str	r0, [r7, #4]
 8026938:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 802693a:	2300      	movs	r3, #0
 802693c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 802693e:	687b      	ldr	r3, [r7, #4]
 8026940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026942:	683a      	ldr	r2, [r7, #0]
 8026944:	429a      	cmp	r2, r3
 8026946:	d01b      	beq.n	8026980 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8026948:	6878      	ldr	r0, [r7, #4]
 802694a:	f7ff ffad 	bl	80268a8 <sync_window>
 802694e:	4603      	mov	r3, r0
 8026950:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8026952:	7bfb      	ldrb	r3, [r7, #15]
 8026954:	2b00      	cmp	r3, #0
 8026956:	d113      	bne.n	8026980 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8026958:	687b      	ldr	r3, [r7, #4]
 802695a:	7858      	ldrb	r0, [r3, #1]
 802695c:	687b      	ldr	r3, [r7, #4]
 802695e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8026962:	2301      	movs	r3, #1
 8026964:	683a      	ldr	r2, [r7, #0]
 8026966:	f7ff fcd5 	bl	8026314 <disk_read>
 802696a:	4603      	mov	r3, r0
 802696c:	2b00      	cmp	r3, #0
 802696e:	d004      	beq.n	802697a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8026970:	f04f 33ff 	mov.w	r3, #4294967295
 8026974:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8026976:	2301      	movs	r3, #1
 8026978:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 802697a:	687b      	ldr	r3, [r7, #4]
 802697c:	683a      	ldr	r2, [r7, #0]
 802697e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8026980:	7bfb      	ldrb	r3, [r7, #15]
}
 8026982:	4618      	mov	r0, r3
 8026984:	3710      	adds	r7, #16
 8026986:	46bd      	mov	sp, r7
 8026988:	bd80      	pop	{r7, pc}
	...

0802698c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 802698c:	b580      	push	{r7, lr}
 802698e:	b084      	sub	sp, #16
 8026990:	af00      	add	r7, sp, #0
 8026992:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8026994:	6878      	ldr	r0, [r7, #4]
 8026996:	f7ff ff87 	bl	80268a8 <sync_window>
 802699a:	4603      	mov	r3, r0
 802699c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 802699e:	7bfb      	ldrb	r3, [r7, #15]
 80269a0:	2b00      	cmp	r3, #0
 80269a2:	d158      	bne.n	8026a56 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80269a4:	687b      	ldr	r3, [r7, #4]
 80269a6:	781b      	ldrb	r3, [r3, #0]
 80269a8:	2b03      	cmp	r3, #3
 80269aa:	d148      	bne.n	8026a3e <sync_fs+0xb2>
 80269ac:	687b      	ldr	r3, [r7, #4]
 80269ae:	791b      	ldrb	r3, [r3, #4]
 80269b0:	2b01      	cmp	r3, #1
 80269b2:	d144      	bne.n	8026a3e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80269b4:	687b      	ldr	r3, [r7, #4]
 80269b6:	3330      	adds	r3, #48	@ 0x30
 80269b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80269bc:	2100      	movs	r1, #0
 80269be:	4618      	mov	r0, r3
 80269c0:	f7ff fda9 	bl	8026516 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80269c4:	687b      	ldr	r3, [r7, #4]
 80269c6:	3330      	adds	r3, #48	@ 0x30
 80269c8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80269cc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80269d0:	4618      	mov	r0, r3
 80269d2:	f7ff fd38 	bl	8026446 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80269d6:	687b      	ldr	r3, [r7, #4]
 80269d8:	3330      	adds	r3, #48	@ 0x30
 80269da:	4921      	ldr	r1, [pc, #132]	@ (8026a60 <sync_fs+0xd4>)
 80269dc:	4618      	mov	r0, r3
 80269de:	f7ff fd4d 	bl	802647c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80269e2:	687b      	ldr	r3, [r7, #4]
 80269e4:	3330      	adds	r3, #48	@ 0x30
 80269e6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80269ea:	491e      	ldr	r1, [pc, #120]	@ (8026a64 <sync_fs+0xd8>)
 80269ec:	4618      	mov	r0, r3
 80269ee:	f7ff fd45 	bl	802647c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80269f2:	687b      	ldr	r3, [r7, #4]
 80269f4:	3330      	adds	r3, #48	@ 0x30
 80269f6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80269fa:	687b      	ldr	r3, [r7, #4]
 80269fc:	691b      	ldr	r3, [r3, #16]
 80269fe:	4619      	mov	r1, r3
 8026a00:	4610      	mov	r0, r2
 8026a02:	f7ff fd3b 	bl	802647c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8026a06:	687b      	ldr	r3, [r7, #4]
 8026a08:	3330      	adds	r3, #48	@ 0x30
 8026a0a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8026a0e:	687b      	ldr	r3, [r7, #4]
 8026a10:	68db      	ldr	r3, [r3, #12]
 8026a12:	4619      	mov	r1, r3
 8026a14:	4610      	mov	r0, r2
 8026a16:	f7ff fd31 	bl	802647c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8026a1a:	687b      	ldr	r3, [r7, #4]
 8026a1c:	69db      	ldr	r3, [r3, #28]
 8026a1e:	1c5a      	adds	r2, r3, #1
 8026a20:	687b      	ldr	r3, [r7, #4]
 8026a22:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8026a24:	687b      	ldr	r3, [r7, #4]
 8026a26:	7858      	ldrb	r0, [r3, #1]
 8026a28:	687b      	ldr	r3, [r7, #4]
 8026a2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8026a2e:	687b      	ldr	r3, [r7, #4]
 8026a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8026a32:	2301      	movs	r3, #1
 8026a34:	f7ff fc8e 	bl	8026354 <disk_write>
			fs->fsi_flag = 0;
 8026a38:	687b      	ldr	r3, [r7, #4]
 8026a3a:	2200      	movs	r2, #0
 8026a3c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8026a3e:	687b      	ldr	r3, [r7, #4]
 8026a40:	785b      	ldrb	r3, [r3, #1]
 8026a42:	2200      	movs	r2, #0
 8026a44:	2100      	movs	r1, #0
 8026a46:	4618      	mov	r0, r3
 8026a48:	f7ff fca4 	bl	8026394 <disk_ioctl>
 8026a4c:	4603      	mov	r3, r0
 8026a4e:	2b00      	cmp	r3, #0
 8026a50:	d001      	beq.n	8026a56 <sync_fs+0xca>
 8026a52:	2301      	movs	r3, #1
 8026a54:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8026a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8026a58:	4618      	mov	r0, r3
 8026a5a:	3710      	adds	r7, #16
 8026a5c:	46bd      	mov	sp, r7
 8026a5e:	bd80      	pop	{r7, pc}
 8026a60:	41615252 	.word	0x41615252
 8026a64:	61417272 	.word	0x61417272

08026a68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8026a68:	b480      	push	{r7}
 8026a6a:	b083      	sub	sp, #12
 8026a6c:	af00      	add	r7, sp, #0
 8026a6e:	6078      	str	r0, [r7, #4]
 8026a70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8026a72:	683b      	ldr	r3, [r7, #0]
 8026a74:	3b02      	subs	r3, #2
 8026a76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8026a78:	687b      	ldr	r3, [r7, #4]
 8026a7a:	695b      	ldr	r3, [r3, #20]
 8026a7c:	3b02      	subs	r3, #2
 8026a7e:	683a      	ldr	r2, [r7, #0]
 8026a80:	429a      	cmp	r2, r3
 8026a82:	d301      	bcc.n	8026a88 <clust2sect+0x20>
 8026a84:	2300      	movs	r3, #0
 8026a86:	e008      	b.n	8026a9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8026a88:	687b      	ldr	r3, [r7, #4]
 8026a8a:	895b      	ldrh	r3, [r3, #10]
 8026a8c:	461a      	mov	r2, r3
 8026a8e:	683b      	ldr	r3, [r7, #0]
 8026a90:	fb03 f202 	mul.w	r2, r3, r2
 8026a94:	687b      	ldr	r3, [r7, #4]
 8026a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026a98:	4413      	add	r3, r2
}
 8026a9a:	4618      	mov	r0, r3
 8026a9c:	370c      	adds	r7, #12
 8026a9e:	46bd      	mov	sp, r7
 8026aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026aa4:	4770      	bx	lr

08026aa6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8026aa6:	b580      	push	{r7, lr}
 8026aa8:	b086      	sub	sp, #24
 8026aaa:	af00      	add	r7, sp, #0
 8026aac:	6078      	str	r0, [r7, #4]
 8026aae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8026ab0:	687b      	ldr	r3, [r7, #4]
 8026ab2:	681b      	ldr	r3, [r3, #0]
 8026ab4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8026ab6:	683b      	ldr	r3, [r7, #0]
 8026ab8:	2b01      	cmp	r3, #1
 8026aba:	d904      	bls.n	8026ac6 <get_fat+0x20>
 8026abc:	693b      	ldr	r3, [r7, #16]
 8026abe:	695b      	ldr	r3, [r3, #20]
 8026ac0:	683a      	ldr	r2, [r7, #0]
 8026ac2:	429a      	cmp	r2, r3
 8026ac4:	d302      	bcc.n	8026acc <get_fat+0x26>
		val = 1;	/* Internal error */
 8026ac6:	2301      	movs	r3, #1
 8026ac8:	617b      	str	r3, [r7, #20]
 8026aca:	e08e      	b.n	8026bea <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8026acc:	f04f 33ff 	mov.w	r3, #4294967295
 8026ad0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8026ad2:	693b      	ldr	r3, [r7, #16]
 8026ad4:	781b      	ldrb	r3, [r3, #0]
 8026ad6:	2b03      	cmp	r3, #3
 8026ad8:	d061      	beq.n	8026b9e <get_fat+0xf8>
 8026ada:	2b03      	cmp	r3, #3
 8026adc:	dc7b      	bgt.n	8026bd6 <get_fat+0x130>
 8026ade:	2b01      	cmp	r3, #1
 8026ae0:	d002      	beq.n	8026ae8 <get_fat+0x42>
 8026ae2:	2b02      	cmp	r3, #2
 8026ae4:	d041      	beq.n	8026b6a <get_fat+0xc4>
 8026ae6:	e076      	b.n	8026bd6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8026ae8:	683b      	ldr	r3, [r7, #0]
 8026aea:	60fb      	str	r3, [r7, #12]
 8026aec:	68fb      	ldr	r3, [r7, #12]
 8026aee:	085b      	lsrs	r3, r3, #1
 8026af0:	68fa      	ldr	r2, [r7, #12]
 8026af2:	4413      	add	r3, r2
 8026af4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8026af6:	693b      	ldr	r3, [r7, #16]
 8026af8:	6a1a      	ldr	r2, [r3, #32]
 8026afa:	68fb      	ldr	r3, [r7, #12]
 8026afc:	0a5b      	lsrs	r3, r3, #9
 8026afe:	4413      	add	r3, r2
 8026b00:	4619      	mov	r1, r3
 8026b02:	6938      	ldr	r0, [r7, #16]
 8026b04:	f7ff ff14 	bl	8026930 <move_window>
 8026b08:	4603      	mov	r3, r0
 8026b0a:	2b00      	cmp	r3, #0
 8026b0c:	d166      	bne.n	8026bdc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8026b0e:	68fb      	ldr	r3, [r7, #12]
 8026b10:	1c5a      	adds	r2, r3, #1
 8026b12:	60fa      	str	r2, [r7, #12]
 8026b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026b18:	693a      	ldr	r2, [r7, #16]
 8026b1a:	4413      	add	r3, r2
 8026b1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8026b20:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8026b22:	693b      	ldr	r3, [r7, #16]
 8026b24:	6a1a      	ldr	r2, [r3, #32]
 8026b26:	68fb      	ldr	r3, [r7, #12]
 8026b28:	0a5b      	lsrs	r3, r3, #9
 8026b2a:	4413      	add	r3, r2
 8026b2c:	4619      	mov	r1, r3
 8026b2e:	6938      	ldr	r0, [r7, #16]
 8026b30:	f7ff fefe 	bl	8026930 <move_window>
 8026b34:	4603      	mov	r3, r0
 8026b36:	2b00      	cmp	r3, #0
 8026b38:	d152      	bne.n	8026be0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8026b3a:	68fb      	ldr	r3, [r7, #12]
 8026b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026b40:	693a      	ldr	r2, [r7, #16]
 8026b42:	4413      	add	r3, r2
 8026b44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8026b48:	021b      	lsls	r3, r3, #8
 8026b4a:	68ba      	ldr	r2, [r7, #8]
 8026b4c:	4313      	orrs	r3, r2
 8026b4e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8026b50:	683b      	ldr	r3, [r7, #0]
 8026b52:	f003 0301 	and.w	r3, r3, #1
 8026b56:	2b00      	cmp	r3, #0
 8026b58:	d002      	beq.n	8026b60 <get_fat+0xba>
 8026b5a:	68bb      	ldr	r3, [r7, #8]
 8026b5c:	091b      	lsrs	r3, r3, #4
 8026b5e:	e002      	b.n	8026b66 <get_fat+0xc0>
 8026b60:	68bb      	ldr	r3, [r7, #8]
 8026b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026b66:	617b      	str	r3, [r7, #20]
			break;
 8026b68:	e03f      	b.n	8026bea <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8026b6a:	693b      	ldr	r3, [r7, #16]
 8026b6c:	6a1a      	ldr	r2, [r3, #32]
 8026b6e:	683b      	ldr	r3, [r7, #0]
 8026b70:	0a1b      	lsrs	r3, r3, #8
 8026b72:	4413      	add	r3, r2
 8026b74:	4619      	mov	r1, r3
 8026b76:	6938      	ldr	r0, [r7, #16]
 8026b78:	f7ff feda 	bl	8026930 <move_window>
 8026b7c:	4603      	mov	r3, r0
 8026b7e:	2b00      	cmp	r3, #0
 8026b80:	d130      	bne.n	8026be4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8026b82:	693b      	ldr	r3, [r7, #16]
 8026b84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026b88:	683b      	ldr	r3, [r7, #0]
 8026b8a:	005b      	lsls	r3, r3, #1
 8026b8c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8026b90:	4413      	add	r3, r2
 8026b92:	4618      	mov	r0, r3
 8026b94:	f7ff fc1c 	bl	80263d0 <ld_word>
 8026b98:	4603      	mov	r3, r0
 8026b9a:	617b      	str	r3, [r7, #20]
			break;
 8026b9c:	e025      	b.n	8026bea <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8026b9e:	693b      	ldr	r3, [r7, #16]
 8026ba0:	6a1a      	ldr	r2, [r3, #32]
 8026ba2:	683b      	ldr	r3, [r7, #0]
 8026ba4:	09db      	lsrs	r3, r3, #7
 8026ba6:	4413      	add	r3, r2
 8026ba8:	4619      	mov	r1, r3
 8026baa:	6938      	ldr	r0, [r7, #16]
 8026bac:	f7ff fec0 	bl	8026930 <move_window>
 8026bb0:	4603      	mov	r3, r0
 8026bb2:	2b00      	cmp	r3, #0
 8026bb4:	d118      	bne.n	8026be8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8026bb6:	693b      	ldr	r3, [r7, #16]
 8026bb8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026bbc:	683b      	ldr	r3, [r7, #0]
 8026bbe:	009b      	lsls	r3, r3, #2
 8026bc0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8026bc4:	4413      	add	r3, r2
 8026bc6:	4618      	mov	r0, r3
 8026bc8:	f7ff fc1a 	bl	8026400 <ld_dword>
 8026bcc:	4603      	mov	r3, r0
 8026bce:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8026bd2:	617b      	str	r3, [r7, #20]
			break;
 8026bd4:	e009      	b.n	8026bea <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8026bd6:	2301      	movs	r3, #1
 8026bd8:	617b      	str	r3, [r7, #20]
 8026bda:	e006      	b.n	8026bea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8026bdc:	bf00      	nop
 8026bde:	e004      	b.n	8026bea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8026be0:	bf00      	nop
 8026be2:	e002      	b.n	8026bea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8026be4:	bf00      	nop
 8026be6:	e000      	b.n	8026bea <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8026be8:	bf00      	nop
		}
	}

	return val;
 8026bea:	697b      	ldr	r3, [r7, #20]
}
 8026bec:	4618      	mov	r0, r3
 8026bee:	3718      	adds	r7, #24
 8026bf0:	46bd      	mov	sp, r7
 8026bf2:	bd80      	pop	{r7, pc}

08026bf4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8026bf4:	b590      	push	{r4, r7, lr}
 8026bf6:	b089      	sub	sp, #36	@ 0x24
 8026bf8:	af00      	add	r7, sp, #0
 8026bfa:	60f8      	str	r0, [r7, #12]
 8026bfc:	60b9      	str	r1, [r7, #8]
 8026bfe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8026c00:	2302      	movs	r3, #2
 8026c02:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8026c04:	68bb      	ldr	r3, [r7, #8]
 8026c06:	2b01      	cmp	r3, #1
 8026c08:	f240 80d9 	bls.w	8026dbe <put_fat+0x1ca>
 8026c0c:	68fb      	ldr	r3, [r7, #12]
 8026c0e:	695b      	ldr	r3, [r3, #20]
 8026c10:	68ba      	ldr	r2, [r7, #8]
 8026c12:	429a      	cmp	r2, r3
 8026c14:	f080 80d3 	bcs.w	8026dbe <put_fat+0x1ca>
		switch (fs->fs_type) {
 8026c18:	68fb      	ldr	r3, [r7, #12]
 8026c1a:	781b      	ldrb	r3, [r3, #0]
 8026c1c:	2b03      	cmp	r3, #3
 8026c1e:	f000 8096 	beq.w	8026d4e <put_fat+0x15a>
 8026c22:	2b03      	cmp	r3, #3
 8026c24:	f300 80cb 	bgt.w	8026dbe <put_fat+0x1ca>
 8026c28:	2b01      	cmp	r3, #1
 8026c2a:	d002      	beq.n	8026c32 <put_fat+0x3e>
 8026c2c:	2b02      	cmp	r3, #2
 8026c2e:	d06e      	beq.n	8026d0e <put_fat+0x11a>
 8026c30:	e0c5      	b.n	8026dbe <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8026c32:	68bb      	ldr	r3, [r7, #8]
 8026c34:	61bb      	str	r3, [r7, #24]
 8026c36:	69bb      	ldr	r3, [r7, #24]
 8026c38:	085b      	lsrs	r3, r3, #1
 8026c3a:	69ba      	ldr	r2, [r7, #24]
 8026c3c:	4413      	add	r3, r2
 8026c3e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8026c40:	68fb      	ldr	r3, [r7, #12]
 8026c42:	6a1a      	ldr	r2, [r3, #32]
 8026c44:	69bb      	ldr	r3, [r7, #24]
 8026c46:	0a5b      	lsrs	r3, r3, #9
 8026c48:	4413      	add	r3, r2
 8026c4a:	4619      	mov	r1, r3
 8026c4c:	68f8      	ldr	r0, [r7, #12]
 8026c4e:	f7ff fe6f 	bl	8026930 <move_window>
 8026c52:	4603      	mov	r3, r0
 8026c54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8026c56:	7ffb      	ldrb	r3, [r7, #31]
 8026c58:	2b00      	cmp	r3, #0
 8026c5a:	f040 80a9 	bne.w	8026db0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8026c5e:	68fb      	ldr	r3, [r7, #12]
 8026c60:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026c64:	69bb      	ldr	r3, [r7, #24]
 8026c66:	1c59      	adds	r1, r3, #1
 8026c68:	61b9      	str	r1, [r7, #24]
 8026c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026c6e:	4413      	add	r3, r2
 8026c70:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8026c72:	68bb      	ldr	r3, [r7, #8]
 8026c74:	f003 0301 	and.w	r3, r3, #1
 8026c78:	2b00      	cmp	r3, #0
 8026c7a:	d00d      	beq.n	8026c98 <put_fat+0xa4>
 8026c7c:	697b      	ldr	r3, [r7, #20]
 8026c7e:	781b      	ldrb	r3, [r3, #0]
 8026c80:	b25b      	sxtb	r3, r3
 8026c82:	f003 030f 	and.w	r3, r3, #15
 8026c86:	b25a      	sxtb	r2, r3
 8026c88:	687b      	ldr	r3, [r7, #4]
 8026c8a:	b2db      	uxtb	r3, r3
 8026c8c:	011b      	lsls	r3, r3, #4
 8026c8e:	b25b      	sxtb	r3, r3
 8026c90:	4313      	orrs	r3, r2
 8026c92:	b25b      	sxtb	r3, r3
 8026c94:	b2db      	uxtb	r3, r3
 8026c96:	e001      	b.n	8026c9c <put_fat+0xa8>
 8026c98:	687b      	ldr	r3, [r7, #4]
 8026c9a:	b2db      	uxtb	r3, r3
 8026c9c:	697a      	ldr	r2, [r7, #20]
 8026c9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8026ca0:	68fb      	ldr	r3, [r7, #12]
 8026ca2:	2201      	movs	r2, #1
 8026ca4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8026ca6:	68fb      	ldr	r3, [r7, #12]
 8026ca8:	6a1a      	ldr	r2, [r3, #32]
 8026caa:	69bb      	ldr	r3, [r7, #24]
 8026cac:	0a5b      	lsrs	r3, r3, #9
 8026cae:	4413      	add	r3, r2
 8026cb0:	4619      	mov	r1, r3
 8026cb2:	68f8      	ldr	r0, [r7, #12]
 8026cb4:	f7ff fe3c 	bl	8026930 <move_window>
 8026cb8:	4603      	mov	r3, r0
 8026cba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8026cbc:	7ffb      	ldrb	r3, [r7, #31]
 8026cbe:	2b00      	cmp	r3, #0
 8026cc0:	d178      	bne.n	8026db4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8026cc2:	68fb      	ldr	r3, [r7, #12]
 8026cc4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026cc8:	69bb      	ldr	r3, [r7, #24]
 8026cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026cce:	4413      	add	r3, r2
 8026cd0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8026cd2:	68bb      	ldr	r3, [r7, #8]
 8026cd4:	f003 0301 	and.w	r3, r3, #1
 8026cd8:	2b00      	cmp	r3, #0
 8026cda:	d003      	beq.n	8026ce4 <put_fat+0xf0>
 8026cdc:	687b      	ldr	r3, [r7, #4]
 8026cde:	091b      	lsrs	r3, r3, #4
 8026ce0:	b2db      	uxtb	r3, r3
 8026ce2:	e00e      	b.n	8026d02 <put_fat+0x10e>
 8026ce4:	697b      	ldr	r3, [r7, #20]
 8026ce6:	781b      	ldrb	r3, [r3, #0]
 8026ce8:	b25b      	sxtb	r3, r3
 8026cea:	f023 030f 	bic.w	r3, r3, #15
 8026cee:	b25a      	sxtb	r2, r3
 8026cf0:	687b      	ldr	r3, [r7, #4]
 8026cf2:	0a1b      	lsrs	r3, r3, #8
 8026cf4:	b25b      	sxtb	r3, r3
 8026cf6:	f003 030f 	and.w	r3, r3, #15
 8026cfa:	b25b      	sxtb	r3, r3
 8026cfc:	4313      	orrs	r3, r2
 8026cfe:	b25b      	sxtb	r3, r3
 8026d00:	b2db      	uxtb	r3, r3
 8026d02:	697a      	ldr	r2, [r7, #20]
 8026d04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8026d06:	68fb      	ldr	r3, [r7, #12]
 8026d08:	2201      	movs	r2, #1
 8026d0a:	70da      	strb	r2, [r3, #3]
			break;
 8026d0c:	e057      	b.n	8026dbe <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8026d0e:	68fb      	ldr	r3, [r7, #12]
 8026d10:	6a1a      	ldr	r2, [r3, #32]
 8026d12:	68bb      	ldr	r3, [r7, #8]
 8026d14:	0a1b      	lsrs	r3, r3, #8
 8026d16:	4413      	add	r3, r2
 8026d18:	4619      	mov	r1, r3
 8026d1a:	68f8      	ldr	r0, [r7, #12]
 8026d1c:	f7ff fe08 	bl	8026930 <move_window>
 8026d20:	4603      	mov	r3, r0
 8026d22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8026d24:	7ffb      	ldrb	r3, [r7, #31]
 8026d26:	2b00      	cmp	r3, #0
 8026d28:	d146      	bne.n	8026db8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8026d2a:	68fb      	ldr	r3, [r7, #12]
 8026d2c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026d30:	68bb      	ldr	r3, [r7, #8]
 8026d32:	005b      	lsls	r3, r3, #1
 8026d34:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8026d38:	4413      	add	r3, r2
 8026d3a:	687a      	ldr	r2, [r7, #4]
 8026d3c:	b292      	uxth	r2, r2
 8026d3e:	4611      	mov	r1, r2
 8026d40:	4618      	mov	r0, r3
 8026d42:	f7ff fb80 	bl	8026446 <st_word>
			fs->wflag = 1;
 8026d46:	68fb      	ldr	r3, [r7, #12]
 8026d48:	2201      	movs	r2, #1
 8026d4a:	70da      	strb	r2, [r3, #3]
			break;
 8026d4c:	e037      	b.n	8026dbe <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8026d4e:	68fb      	ldr	r3, [r7, #12]
 8026d50:	6a1a      	ldr	r2, [r3, #32]
 8026d52:	68bb      	ldr	r3, [r7, #8]
 8026d54:	09db      	lsrs	r3, r3, #7
 8026d56:	4413      	add	r3, r2
 8026d58:	4619      	mov	r1, r3
 8026d5a:	68f8      	ldr	r0, [r7, #12]
 8026d5c:	f7ff fde8 	bl	8026930 <move_window>
 8026d60:	4603      	mov	r3, r0
 8026d62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8026d64:	7ffb      	ldrb	r3, [r7, #31]
 8026d66:	2b00      	cmp	r3, #0
 8026d68:	d128      	bne.n	8026dbc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8026d6a:	687b      	ldr	r3, [r7, #4]
 8026d6c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8026d70:	68fb      	ldr	r3, [r7, #12]
 8026d72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026d76:	68bb      	ldr	r3, [r7, #8]
 8026d78:	009b      	lsls	r3, r3, #2
 8026d7a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8026d7e:	4413      	add	r3, r2
 8026d80:	4618      	mov	r0, r3
 8026d82:	f7ff fb3d 	bl	8026400 <ld_dword>
 8026d86:	4603      	mov	r3, r0
 8026d88:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8026d8c:	4323      	orrs	r3, r4
 8026d8e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8026d90:	68fb      	ldr	r3, [r7, #12]
 8026d92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026d96:	68bb      	ldr	r3, [r7, #8]
 8026d98:	009b      	lsls	r3, r3, #2
 8026d9a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8026d9e:	4413      	add	r3, r2
 8026da0:	6879      	ldr	r1, [r7, #4]
 8026da2:	4618      	mov	r0, r3
 8026da4:	f7ff fb6a 	bl	802647c <st_dword>
			fs->wflag = 1;
 8026da8:	68fb      	ldr	r3, [r7, #12]
 8026daa:	2201      	movs	r2, #1
 8026dac:	70da      	strb	r2, [r3, #3]
			break;
 8026dae:	e006      	b.n	8026dbe <put_fat+0x1ca>
			if (res != FR_OK) break;
 8026db0:	bf00      	nop
 8026db2:	e004      	b.n	8026dbe <put_fat+0x1ca>
			if (res != FR_OK) break;
 8026db4:	bf00      	nop
 8026db6:	e002      	b.n	8026dbe <put_fat+0x1ca>
			if (res != FR_OK) break;
 8026db8:	bf00      	nop
 8026dba:	e000      	b.n	8026dbe <put_fat+0x1ca>
			if (res != FR_OK) break;
 8026dbc:	bf00      	nop
		}
	}
	return res;
 8026dbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8026dc0:	4618      	mov	r0, r3
 8026dc2:	3724      	adds	r7, #36	@ 0x24
 8026dc4:	46bd      	mov	sp, r7
 8026dc6:	bd90      	pop	{r4, r7, pc}

08026dc8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8026dc8:	b580      	push	{r7, lr}
 8026dca:	b088      	sub	sp, #32
 8026dcc:	af00      	add	r7, sp, #0
 8026dce:	60f8      	str	r0, [r7, #12]
 8026dd0:	60b9      	str	r1, [r7, #8]
 8026dd2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8026dd4:	2300      	movs	r3, #0
 8026dd6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8026dd8:	68fb      	ldr	r3, [r7, #12]
 8026dda:	681b      	ldr	r3, [r3, #0]
 8026ddc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8026dde:	68bb      	ldr	r3, [r7, #8]
 8026de0:	2b01      	cmp	r3, #1
 8026de2:	d904      	bls.n	8026dee <remove_chain+0x26>
 8026de4:	69bb      	ldr	r3, [r7, #24]
 8026de6:	695b      	ldr	r3, [r3, #20]
 8026de8:	68ba      	ldr	r2, [r7, #8]
 8026dea:	429a      	cmp	r2, r3
 8026dec:	d301      	bcc.n	8026df2 <remove_chain+0x2a>
 8026dee:	2302      	movs	r3, #2
 8026df0:	e04b      	b.n	8026e8a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8026df2:	687b      	ldr	r3, [r7, #4]
 8026df4:	2b00      	cmp	r3, #0
 8026df6:	d00c      	beq.n	8026e12 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8026df8:	f04f 32ff 	mov.w	r2, #4294967295
 8026dfc:	6879      	ldr	r1, [r7, #4]
 8026dfe:	69b8      	ldr	r0, [r7, #24]
 8026e00:	f7ff fef8 	bl	8026bf4 <put_fat>
 8026e04:	4603      	mov	r3, r0
 8026e06:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8026e08:	7ffb      	ldrb	r3, [r7, #31]
 8026e0a:	2b00      	cmp	r3, #0
 8026e0c:	d001      	beq.n	8026e12 <remove_chain+0x4a>
 8026e0e:	7ffb      	ldrb	r3, [r7, #31]
 8026e10:	e03b      	b.n	8026e8a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8026e12:	68b9      	ldr	r1, [r7, #8]
 8026e14:	68f8      	ldr	r0, [r7, #12]
 8026e16:	f7ff fe46 	bl	8026aa6 <get_fat>
 8026e1a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8026e1c:	697b      	ldr	r3, [r7, #20]
 8026e1e:	2b00      	cmp	r3, #0
 8026e20:	d031      	beq.n	8026e86 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8026e22:	697b      	ldr	r3, [r7, #20]
 8026e24:	2b01      	cmp	r3, #1
 8026e26:	d101      	bne.n	8026e2c <remove_chain+0x64>
 8026e28:	2302      	movs	r3, #2
 8026e2a:	e02e      	b.n	8026e8a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8026e2c:	697b      	ldr	r3, [r7, #20]
 8026e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026e32:	d101      	bne.n	8026e38 <remove_chain+0x70>
 8026e34:	2301      	movs	r3, #1
 8026e36:	e028      	b.n	8026e8a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8026e38:	2200      	movs	r2, #0
 8026e3a:	68b9      	ldr	r1, [r7, #8]
 8026e3c:	69b8      	ldr	r0, [r7, #24]
 8026e3e:	f7ff fed9 	bl	8026bf4 <put_fat>
 8026e42:	4603      	mov	r3, r0
 8026e44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8026e46:	7ffb      	ldrb	r3, [r7, #31]
 8026e48:	2b00      	cmp	r3, #0
 8026e4a:	d001      	beq.n	8026e50 <remove_chain+0x88>
 8026e4c:	7ffb      	ldrb	r3, [r7, #31]
 8026e4e:	e01c      	b.n	8026e8a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8026e50:	69bb      	ldr	r3, [r7, #24]
 8026e52:	691a      	ldr	r2, [r3, #16]
 8026e54:	69bb      	ldr	r3, [r7, #24]
 8026e56:	695b      	ldr	r3, [r3, #20]
 8026e58:	3b02      	subs	r3, #2
 8026e5a:	429a      	cmp	r2, r3
 8026e5c:	d20b      	bcs.n	8026e76 <remove_chain+0xae>
			fs->free_clst++;
 8026e5e:	69bb      	ldr	r3, [r7, #24]
 8026e60:	691b      	ldr	r3, [r3, #16]
 8026e62:	1c5a      	adds	r2, r3, #1
 8026e64:	69bb      	ldr	r3, [r7, #24]
 8026e66:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8026e68:	69bb      	ldr	r3, [r7, #24]
 8026e6a:	791b      	ldrb	r3, [r3, #4]
 8026e6c:	f043 0301 	orr.w	r3, r3, #1
 8026e70:	b2da      	uxtb	r2, r3
 8026e72:	69bb      	ldr	r3, [r7, #24]
 8026e74:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8026e76:	697b      	ldr	r3, [r7, #20]
 8026e78:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8026e7a:	69bb      	ldr	r3, [r7, #24]
 8026e7c:	695b      	ldr	r3, [r3, #20]
 8026e7e:	68ba      	ldr	r2, [r7, #8]
 8026e80:	429a      	cmp	r2, r3
 8026e82:	d3c6      	bcc.n	8026e12 <remove_chain+0x4a>
 8026e84:	e000      	b.n	8026e88 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8026e86:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8026e88:	2300      	movs	r3, #0
}
 8026e8a:	4618      	mov	r0, r3
 8026e8c:	3720      	adds	r7, #32
 8026e8e:	46bd      	mov	sp, r7
 8026e90:	bd80      	pop	{r7, pc}

08026e92 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8026e92:	b580      	push	{r7, lr}
 8026e94:	b088      	sub	sp, #32
 8026e96:	af00      	add	r7, sp, #0
 8026e98:	6078      	str	r0, [r7, #4]
 8026e9a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8026e9c:	687b      	ldr	r3, [r7, #4]
 8026e9e:	681b      	ldr	r3, [r3, #0]
 8026ea0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8026ea2:	683b      	ldr	r3, [r7, #0]
 8026ea4:	2b00      	cmp	r3, #0
 8026ea6:	d10d      	bne.n	8026ec4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8026ea8:	693b      	ldr	r3, [r7, #16]
 8026eaa:	68db      	ldr	r3, [r3, #12]
 8026eac:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8026eae:	69bb      	ldr	r3, [r7, #24]
 8026eb0:	2b00      	cmp	r3, #0
 8026eb2:	d004      	beq.n	8026ebe <create_chain+0x2c>
 8026eb4:	693b      	ldr	r3, [r7, #16]
 8026eb6:	695b      	ldr	r3, [r3, #20]
 8026eb8:	69ba      	ldr	r2, [r7, #24]
 8026eba:	429a      	cmp	r2, r3
 8026ebc:	d31b      	bcc.n	8026ef6 <create_chain+0x64>
 8026ebe:	2301      	movs	r3, #1
 8026ec0:	61bb      	str	r3, [r7, #24]
 8026ec2:	e018      	b.n	8026ef6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8026ec4:	6839      	ldr	r1, [r7, #0]
 8026ec6:	6878      	ldr	r0, [r7, #4]
 8026ec8:	f7ff fded 	bl	8026aa6 <get_fat>
 8026ecc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8026ece:	68fb      	ldr	r3, [r7, #12]
 8026ed0:	2b01      	cmp	r3, #1
 8026ed2:	d801      	bhi.n	8026ed8 <create_chain+0x46>
 8026ed4:	2301      	movs	r3, #1
 8026ed6:	e070      	b.n	8026fba <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8026ed8:	68fb      	ldr	r3, [r7, #12]
 8026eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026ede:	d101      	bne.n	8026ee4 <create_chain+0x52>
 8026ee0:	68fb      	ldr	r3, [r7, #12]
 8026ee2:	e06a      	b.n	8026fba <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8026ee4:	693b      	ldr	r3, [r7, #16]
 8026ee6:	695b      	ldr	r3, [r3, #20]
 8026ee8:	68fa      	ldr	r2, [r7, #12]
 8026eea:	429a      	cmp	r2, r3
 8026eec:	d201      	bcs.n	8026ef2 <create_chain+0x60>
 8026eee:	68fb      	ldr	r3, [r7, #12]
 8026ef0:	e063      	b.n	8026fba <create_chain+0x128>
		scl = clst;
 8026ef2:	683b      	ldr	r3, [r7, #0]
 8026ef4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8026ef6:	69bb      	ldr	r3, [r7, #24]
 8026ef8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8026efa:	69fb      	ldr	r3, [r7, #28]
 8026efc:	3301      	adds	r3, #1
 8026efe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8026f00:	693b      	ldr	r3, [r7, #16]
 8026f02:	695b      	ldr	r3, [r3, #20]
 8026f04:	69fa      	ldr	r2, [r7, #28]
 8026f06:	429a      	cmp	r2, r3
 8026f08:	d307      	bcc.n	8026f1a <create_chain+0x88>
				ncl = 2;
 8026f0a:	2302      	movs	r3, #2
 8026f0c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8026f0e:	69fa      	ldr	r2, [r7, #28]
 8026f10:	69bb      	ldr	r3, [r7, #24]
 8026f12:	429a      	cmp	r2, r3
 8026f14:	d901      	bls.n	8026f1a <create_chain+0x88>
 8026f16:	2300      	movs	r3, #0
 8026f18:	e04f      	b.n	8026fba <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8026f1a:	69f9      	ldr	r1, [r7, #28]
 8026f1c:	6878      	ldr	r0, [r7, #4]
 8026f1e:	f7ff fdc2 	bl	8026aa6 <get_fat>
 8026f22:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8026f24:	68fb      	ldr	r3, [r7, #12]
 8026f26:	2b00      	cmp	r3, #0
 8026f28:	d00e      	beq.n	8026f48 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8026f2a:	68fb      	ldr	r3, [r7, #12]
 8026f2c:	2b01      	cmp	r3, #1
 8026f2e:	d003      	beq.n	8026f38 <create_chain+0xa6>
 8026f30:	68fb      	ldr	r3, [r7, #12]
 8026f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026f36:	d101      	bne.n	8026f3c <create_chain+0xaa>
 8026f38:	68fb      	ldr	r3, [r7, #12]
 8026f3a:	e03e      	b.n	8026fba <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8026f3c:	69fa      	ldr	r2, [r7, #28]
 8026f3e:	69bb      	ldr	r3, [r7, #24]
 8026f40:	429a      	cmp	r2, r3
 8026f42:	d1da      	bne.n	8026efa <create_chain+0x68>
 8026f44:	2300      	movs	r3, #0
 8026f46:	e038      	b.n	8026fba <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8026f48:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8026f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8026f4e:	69f9      	ldr	r1, [r7, #28]
 8026f50:	6938      	ldr	r0, [r7, #16]
 8026f52:	f7ff fe4f 	bl	8026bf4 <put_fat>
 8026f56:	4603      	mov	r3, r0
 8026f58:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8026f5a:	7dfb      	ldrb	r3, [r7, #23]
 8026f5c:	2b00      	cmp	r3, #0
 8026f5e:	d109      	bne.n	8026f74 <create_chain+0xe2>
 8026f60:	683b      	ldr	r3, [r7, #0]
 8026f62:	2b00      	cmp	r3, #0
 8026f64:	d006      	beq.n	8026f74 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8026f66:	69fa      	ldr	r2, [r7, #28]
 8026f68:	6839      	ldr	r1, [r7, #0]
 8026f6a:	6938      	ldr	r0, [r7, #16]
 8026f6c:	f7ff fe42 	bl	8026bf4 <put_fat>
 8026f70:	4603      	mov	r3, r0
 8026f72:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8026f74:	7dfb      	ldrb	r3, [r7, #23]
 8026f76:	2b00      	cmp	r3, #0
 8026f78:	d116      	bne.n	8026fa8 <create_chain+0x116>
		fs->last_clst = ncl;
 8026f7a:	693b      	ldr	r3, [r7, #16]
 8026f7c:	69fa      	ldr	r2, [r7, #28]
 8026f7e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8026f80:	693b      	ldr	r3, [r7, #16]
 8026f82:	691a      	ldr	r2, [r3, #16]
 8026f84:	693b      	ldr	r3, [r7, #16]
 8026f86:	695b      	ldr	r3, [r3, #20]
 8026f88:	3b02      	subs	r3, #2
 8026f8a:	429a      	cmp	r2, r3
 8026f8c:	d804      	bhi.n	8026f98 <create_chain+0x106>
 8026f8e:	693b      	ldr	r3, [r7, #16]
 8026f90:	691b      	ldr	r3, [r3, #16]
 8026f92:	1e5a      	subs	r2, r3, #1
 8026f94:	693b      	ldr	r3, [r7, #16]
 8026f96:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8026f98:	693b      	ldr	r3, [r7, #16]
 8026f9a:	791b      	ldrb	r3, [r3, #4]
 8026f9c:	f043 0301 	orr.w	r3, r3, #1
 8026fa0:	b2da      	uxtb	r2, r3
 8026fa2:	693b      	ldr	r3, [r7, #16]
 8026fa4:	711a      	strb	r2, [r3, #4]
 8026fa6:	e007      	b.n	8026fb8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8026fa8:	7dfb      	ldrb	r3, [r7, #23]
 8026faa:	2b01      	cmp	r3, #1
 8026fac:	d102      	bne.n	8026fb4 <create_chain+0x122>
 8026fae:	f04f 33ff 	mov.w	r3, #4294967295
 8026fb2:	e000      	b.n	8026fb6 <create_chain+0x124>
 8026fb4:	2301      	movs	r3, #1
 8026fb6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8026fb8:	69fb      	ldr	r3, [r7, #28]
}
 8026fba:	4618      	mov	r0, r3
 8026fbc:	3720      	adds	r7, #32
 8026fbe:	46bd      	mov	sp, r7
 8026fc0:	bd80      	pop	{r7, pc}

08026fc2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8026fc2:	b480      	push	{r7}
 8026fc4:	b087      	sub	sp, #28
 8026fc6:	af00      	add	r7, sp, #0
 8026fc8:	6078      	str	r0, [r7, #4]
 8026fca:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8026fcc:	687b      	ldr	r3, [r7, #4]
 8026fce:	681b      	ldr	r3, [r3, #0]
 8026fd0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8026fd2:	687b      	ldr	r3, [r7, #4]
 8026fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026fd6:	3304      	adds	r3, #4
 8026fd8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8026fda:	683b      	ldr	r3, [r7, #0]
 8026fdc:	0a5b      	lsrs	r3, r3, #9
 8026fde:	68fa      	ldr	r2, [r7, #12]
 8026fe0:	8952      	ldrh	r2, [r2, #10]
 8026fe2:	fbb3 f3f2 	udiv	r3, r3, r2
 8026fe6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8026fe8:	693b      	ldr	r3, [r7, #16]
 8026fea:	1d1a      	adds	r2, r3, #4
 8026fec:	613a      	str	r2, [r7, #16]
 8026fee:	681b      	ldr	r3, [r3, #0]
 8026ff0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8026ff2:	68bb      	ldr	r3, [r7, #8]
 8026ff4:	2b00      	cmp	r3, #0
 8026ff6:	d101      	bne.n	8026ffc <clmt_clust+0x3a>
 8026ff8:	2300      	movs	r3, #0
 8026ffa:	e010      	b.n	802701e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8026ffc:	697a      	ldr	r2, [r7, #20]
 8026ffe:	68bb      	ldr	r3, [r7, #8]
 8027000:	429a      	cmp	r2, r3
 8027002:	d307      	bcc.n	8027014 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8027004:	697a      	ldr	r2, [r7, #20]
 8027006:	68bb      	ldr	r3, [r7, #8]
 8027008:	1ad3      	subs	r3, r2, r3
 802700a:	617b      	str	r3, [r7, #20]
 802700c:	693b      	ldr	r3, [r7, #16]
 802700e:	3304      	adds	r3, #4
 8027010:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8027012:	e7e9      	b.n	8026fe8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8027014:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8027016:	693b      	ldr	r3, [r7, #16]
 8027018:	681a      	ldr	r2, [r3, #0]
 802701a:	697b      	ldr	r3, [r7, #20]
 802701c:	4413      	add	r3, r2
}
 802701e:	4618      	mov	r0, r3
 8027020:	371c      	adds	r7, #28
 8027022:	46bd      	mov	sp, r7
 8027024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027028:	4770      	bx	lr

0802702a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 802702a:	b580      	push	{r7, lr}
 802702c:	b086      	sub	sp, #24
 802702e:	af00      	add	r7, sp, #0
 8027030:	6078      	str	r0, [r7, #4]
 8027032:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8027034:	687b      	ldr	r3, [r7, #4]
 8027036:	681b      	ldr	r3, [r3, #0]
 8027038:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 802703a:	683b      	ldr	r3, [r7, #0]
 802703c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8027040:	d204      	bcs.n	802704c <dir_sdi+0x22>
 8027042:	683b      	ldr	r3, [r7, #0]
 8027044:	f003 031f 	and.w	r3, r3, #31
 8027048:	2b00      	cmp	r3, #0
 802704a:	d001      	beq.n	8027050 <dir_sdi+0x26>
		return FR_INT_ERR;
 802704c:	2302      	movs	r3, #2
 802704e:	e063      	b.n	8027118 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8027050:	687b      	ldr	r3, [r7, #4]
 8027052:	683a      	ldr	r2, [r7, #0]
 8027054:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8027056:	687b      	ldr	r3, [r7, #4]
 8027058:	689b      	ldr	r3, [r3, #8]
 802705a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 802705c:	697b      	ldr	r3, [r7, #20]
 802705e:	2b00      	cmp	r3, #0
 8027060:	d106      	bne.n	8027070 <dir_sdi+0x46>
 8027062:	693b      	ldr	r3, [r7, #16]
 8027064:	781b      	ldrb	r3, [r3, #0]
 8027066:	2b02      	cmp	r3, #2
 8027068:	d902      	bls.n	8027070 <dir_sdi+0x46>
		clst = fs->dirbase;
 802706a:	693b      	ldr	r3, [r7, #16]
 802706c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802706e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8027070:	697b      	ldr	r3, [r7, #20]
 8027072:	2b00      	cmp	r3, #0
 8027074:	d10c      	bne.n	8027090 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8027076:	683b      	ldr	r3, [r7, #0]
 8027078:	095b      	lsrs	r3, r3, #5
 802707a:	693a      	ldr	r2, [r7, #16]
 802707c:	8912      	ldrh	r2, [r2, #8]
 802707e:	4293      	cmp	r3, r2
 8027080:	d301      	bcc.n	8027086 <dir_sdi+0x5c>
 8027082:	2302      	movs	r3, #2
 8027084:	e048      	b.n	8027118 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8027086:	693b      	ldr	r3, [r7, #16]
 8027088:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802708a:	687b      	ldr	r3, [r7, #4]
 802708c:	61da      	str	r2, [r3, #28]
 802708e:	e029      	b.n	80270e4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8027090:	693b      	ldr	r3, [r7, #16]
 8027092:	895b      	ldrh	r3, [r3, #10]
 8027094:	025b      	lsls	r3, r3, #9
 8027096:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8027098:	e019      	b.n	80270ce <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 802709a:	687b      	ldr	r3, [r7, #4]
 802709c:	6979      	ldr	r1, [r7, #20]
 802709e:	4618      	mov	r0, r3
 80270a0:	f7ff fd01 	bl	8026aa6 <get_fat>
 80270a4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80270a6:	697b      	ldr	r3, [r7, #20]
 80270a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80270ac:	d101      	bne.n	80270b2 <dir_sdi+0x88>
 80270ae:	2301      	movs	r3, #1
 80270b0:	e032      	b.n	8027118 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80270b2:	697b      	ldr	r3, [r7, #20]
 80270b4:	2b01      	cmp	r3, #1
 80270b6:	d904      	bls.n	80270c2 <dir_sdi+0x98>
 80270b8:	693b      	ldr	r3, [r7, #16]
 80270ba:	695b      	ldr	r3, [r3, #20]
 80270bc:	697a      	ldr	r2, [r7, #20]
 80270be:	429a      	cmp	r2, r3
 80270c0:	d301      	bcc.n	80270c6 <dir_sdi+0x9c>
 80270c2:	2302      	movs	r3, #2
 80270c4:	e028      	b.n	8027118 <dir_sdi+0xee>
			ofs -= csz;
 80270c6:	683a      	ldr	r2, [r7, #0]
 80270c8:	68fb      	ldr	r3, [r7, #12]
 80270ca:	1ad3      	subs	r3, r2, r3
 80270cc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80270ce:	683a      	ldr	r2, [r7, #0]
 80270d0:	68fb      	ldr	r3, [r7, #12]
 80270d2:	429a      	cmp	r2, r3
 80270d4:	d2e1      	bcs.n	802709a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80270d6:	6979      	ldr	r1, [r7, #20]
 80270d8:	6938      	ldr	r0, [r7, #16]
 80270da:	f7ff fcc5 	bl	8026a68 <clust2sect>
 80270de:	4602      	mov	r2, r0
 80270e0:	687b      	ldr	r3, [r7, #4]
 80270e2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80270e4:	687b      	ldr	r3, [r7, #4]
 80270e6:	697a      	ldr	r2, [r7, #20]
 80270e8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80270ea:	687b      	ldr	r3, [r7, #4]
 80270ec:	69db      	ldr	r3, [r3, #28]
 80270ee:	2b00      	cmp	r3, #0
 80270f0:	d101      	bne.n	80270f6 <dir_sdi+0xcc>
 80270f2:	2302      	movs	r3, #2
 80270f4:	e010      	b.n	8027118 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80270f6:	687b      	ldr	r3, [r7, #4]
 80270f8:	69da      	ldr	r2, [r3, #28]
 80270fa:	683b      	ldr	r3, [r7, #0]
 80270fc:	0a5b      	lsrs	r3, r3, #9
 80270fe:	441a      	add	r2, r3
 8027100:	687b      	ldr	r3, [r7, #4]
 8027102:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8027104:	693b      	ldr	r3, [r7, #16]
 8027106:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 802710a:	683b      	ldr	r3, [r7, #0]
 802710c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8027110:	441a      	add	r2, r3
 8027112:	687b      	ldr	r3, [r7, #4]
 8027114:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8027116:	2300      	movs	r3, #0
}
 8027118:	4618      	mov	r0, r3
 802711a:	3718      	adds	r7, #24
 802711c:	46bd      	mov	sp, r7
 802711e:	bd80      	pop	{r7, pc}

08027120 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8027120:	b580      	push	{r7, lr}
 8027122:	b086      	sub	sp, #24
 8027124:	af00      	add	r7, sp, #0
 8027126:	6078      	str	r0, [r7, #4]
 8027128:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 802712a:	687b      	ldr	r3, [r7, #4]
 802712c:	681b      	ldr	r3, [r3, #0]
 802712e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8027130:	687b      	ldr	r3, [r7, #4]
 8027132:	695b      	ldr	r3, [r3, #20]
 8027134:	3320      	adds	r3, #32
 8027136:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8027138:	687b      	ldr	r3, [r7, #4]
 802713a:	69db      	ldr	r3, [r3, #28]
 802713c:	2b00      	cmp	r3, #0
 802713e:	d003      	beq.n	8027148 <dir_next+0x28>
 8027140:	68bb      	ldr	r3, [r7, #8]
 8027142:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8027146:	d301      	bcc.n	802714c <dir_next+0x2c>
 8027148:	2304      	movs	r3, #4
 802714a:	e0aa      	b.n	80272a2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 802714c:	68bb      	ldr	r3, [r7, #8]
 802714e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8027152:	2b00      	cmp	r3, #0
 8027154:	f040 8098 	bne.w	8027288 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8027158:	687b      	ldr	r3, [r7, #4]
 802715a:	69db      	ldr	r3, [r3, #28]
 802715c:	1c5a      	adds	r2, r3, #1
 802715e:	687b      	ldr	r3, [r7, #4]
 8027160:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8027162:	687b      	ldr	r3, [r7, #4]
 8027164:	699b      	ldr	r3, [r3, #24]
 8027166:	2b00      	cmp	r3, #0
 8027168:	d10b      	bne.n	8027182 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 802716a:	68bb      	ldr	r3, [r7, #8]
 802716c:	095b      	lsrs	r3, r3, #5
 802716e:	68fa      	ldr	r2, [r7, #12]
 8027170:	8912      	ldrh	r2, [r2, #8]
 8027172:	4293      	cmp	r3, r2
 8027174:	f0c0 8088 	bcc.w	8027288 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8027178:	687b      	ldr	r3, [r7, #4]
 802717a:	2200      	movs	r2, #0
 802717c:	61da      	str	r2, [r3, #28]
 802717e:	2304      	movs	r3, #4
 8027180:	e08f      	b.n	80272a2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8027182:	68bb      	ldr	r3, [r7, #8]
 8027184:	0a5b      	lsrs	r3, r3, #9
 8027186:	68fa      	ldr	r2, [r7, #12]
 8027188:	8952      	ldrh	r2, [r2, #10]
 802718a:	3a01      	subs	r2, #1
 802718c:	4013      	ands	r3, r2
 802718e:	2b00      	cmp	r3, #0
 8027190:	d17a      	bne.n	8027288 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8027192:	687a      	ldr	r2, [r7, #4]
 8027194:	687b      	ldr	r3, [r7, #4]
 8027196:	699b      	ldr	r3, [r3, #24]
 8027198:	4619      	mov	r1, r3
 802719a:	4610      	mov	r0, r2
 802719c:	f7ff fc83 	bl	8026aa6 <get_fat>
 80271a0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80271a2:	697b      	ldr	r3, [r7, #20]
 80271a4:	2b01      	cmp	r3, #1
 80271a6:	d801      	bhi.n	80271ac <dir_next+0x8c>
 80271a8:	2302      	movs	r3, #2
 80271aa:	e07a      	b.n	80272a2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80271ac:	697b      	ldr	r3, [r7, #20]
 80271ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80271b2:	d101      	bne.n	80271b8 <dir_next+0x98>
 80271b4:	2301      	movs	r3, #1
 80271b6:	e074      	b.n	80272a2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80271b8:	68fb      	ldr	r3, [r7, #12]
 80271ba:	695b      	ldr	r3, [r3, #20]
 80271bc:	697a      	ldr	r2, [r7, #20]
 80271be:	429a      	cmp	r2, r3
 80271c0:	d358      	bcc.n	8027274 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80271c2:	683b      	ldr	r3, [r7, #0]
 80271c4:	2b00      	cmp	r3, #0
 80271c6:	d104      	bne.n	80271d2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80271c8:	687b      	ldr	r3, [r7, #4]
 80271ca:	2200      	movs	r2, #0
 80271cc:	61da      	str	r2, [r3, #28]
 80271ce:	2304      	movs	r3, #4
 80271d0:	e067      	b.n	80272a2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80271d2:	687a      	ldr	r2, [r7, #4]
 80271d4:	687b      	ldr	r3, [r7, #4]
 80271d6:	699b      	ldr	r3, [r3, #24]
 80271d8:	4619      	mov	r1, r3
 80271da:	4610      	mov	r0, r2
 80271dc:	f7ff fe59 	bl	8026e92 <create_chain>
 80271e0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80271e2:	697b      	ldr	r3, [r7, #20]
 80271e4:	2b00      	cmp	r3, #0
 80271e6:	d101      	bne.n	80271ec <dir_next+0xcc>
 80271e8:	2307      	movs	r3, #7
 80271ea:	e05a      	b.n	80272a2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80271ec:	697b      	ldr	r3, [r7, #20]
 80271ee:	2b01      	cmp	r3, #1
 80271f0:	d101      	bne.n	80271f6 <dir_next+0xd6>
 80271f2:	2302      	movs	r3, #2
 80271f4:	e055      	b.n	80272a2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80271f6:	697b      	ldr	r3, [r7, #20]
 80271f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80271fc:	d101      	bne.n	8027202 <dir_next+0xe2>
 80271fe:	2301      	movs	r3, #1
 8027200:	e04f      	b.n	80272a2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8027202:	68f8      	ldr	r0, [r7, #12]
 8027204:	f7ff fb50 	bl	80268a8 <sync_window>
 8027208:	4603      	mov	r3, r0
 802720a:	2b00      	cmp	r3, #0
 802720c:	d001      	beq.n	8027212 <dir_next+0xf2>
 802720e:	2301      	movs	r3, #1
 8027210:	e047      	b.n	80272a2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8027212:	68fb      	ldr	r3, [r7, #12]
 8027214:	3330      	adds	r3, #48	@ 0x30
 8027216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 802721a:	2100      	movs	r1, #0
 802721c:	4618      	mov	r0, r3
 802721e:	f7ff f97a 	bl	8026516 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8027222:	2300      	movs	r3, #0
 8027224:	613b      	str	r3, [r7, #16]
 8027226:	6979      	ldr	r1, [r7, #20]
 8027228:	68f8      	ldr	r0, [r7, #12]
 802722a:	f7ff fc1d 	bl	8026a68 <clust2sect>
 802722e:	4602      	mov	r2, r0
 8027230:	68fb      	ldr	r3, [r7, #12]
 8027232:	62da      	str	r2, [r3, #44]	@ 0x2c
 8027234:	e012      	b.n	802725c <dir_next+0x13c>
						fs->wflag = 1;
 8027236:	68fb      	ldr	r3, [r7, #12]
 8027238:	2201      	movs	r2, #1
 802723a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 802723c:	68f8      	ldr	r0, [r7, #12]
 802723e:	f7ff fb33 	bl	80268a8 <sync_window>
 8027242:	4603      	mov	r3, r0
 8027244:	2b00      	cmp	r3, #0
 8027246:	d001      	beq.n	802724c <dir_next+0x12c>
 8027248:	2301      	movs	r3, #1
 802724a:	e02a      	b.n	80272a2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 802724c:	693b      	ldr	r3, [r7, #16]
 802724e:	3301      	adds	r3, #1
 8027250:	613b      	str	r3, [r7, #16]
 8027252:	68fb      	ldr	r3, [r7, #12]
 8027254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027256:	1c5a      	adds	r2, r3, #1
 8027258:	68fb      	ldr	r3, [r7, #12]
 802725a:	62da      	str	r2, [r3, #44]	@ 0x2c
 802725c:	68fb      	ldr	r3, [r7, #12]
 802725e:	895b      	ldrh	r3, [r3, #10]
 8027260:	461a      	mov	r2, r3
 8027262:	693b      	ldr	r3, [r7, #16]
 8027264:	4293      	cmp	r3, r2
 8027266:	d3e6      	bcc.n	8027236 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8027268:	68fb      	ldr	r3, [r7, #12]
 802726a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802726c:	693b      	ldr	r3, [r7, #16]
 802726e:	1ad2      	subs	r2, r2, r3
 8027270:	68fb      	ldr	r3, [r7, #12]
 8027272:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8027274:	687b      	ldr	r3, [r7, #4]
 8027276:	697a      	ldr	r2, [r7, #20]
 8027278:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 802727a:	6979      	ldr	r1, [r7, #20]
 802727c:	68f8      	ldr	r0, [r7, #12]
 802727e:	f7ff fbf3 	bl	8026a68 <clust2sect>
 8027282:	4602      	mov	r2, r0
 8027284:	687b      	ldr	r3, [r7, #4]
 8027286:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8027288:	687b      	ldr	r3, [r7, #4]
 802728a:	68ba      	ldr	r2, [r7, #8]
 802728c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 802728e:	68fb      	ldr	r3, [r7, #12]
 8027290:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8027294:	68bb      	ldr	r3, [r7, #8]
 8027296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802729a:	441a      	add	r2, r3
 802729c:	687b      	ldr	r3, [r7, #4]
 802729e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80272a0:	2300      	movs	r3, #0
}
 80272a2:	4618      	mov	r0, r3
 80272a4:	3718      	adds	r7, #24
 80272a6:	46bd      	mov	sp, r7
 80272a8:	bd80      	pop	{r7, pc}

080272aa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80272aa:	b580      	push	{r7, lr}
 80272ac:	b086      	sub	sp, #24
 80272ae:	af00      	add	r7, sp, #0
 80272b0:	6078      	str	r0, [r7, #4]
 80272b2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80272b4:	687b      	ldr	r3, [r7, #4]
 80272b6:	681b      	ldr	r3, [r3, #0]
 80272b8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80272ba:	2100      	movs	r1, #0
 80272bc:	6878      	ldr	r0, [r7, #4]
 80272be:	f7ff feb4 	bl	802702a <dir_sdi>
 80272c2:	4603      	mov	r3, r0
 80272c4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80272c6:	7dfb      	ldrb	r3, [r7, #23]
 80272c8:	2b00      	cmp	r3, #0
 80272ca:	d12b      	bne.n	8027324 <dir_alloc+0x7a>
		n = 0;
 80272cc:	2300      	movs	r3, #0
 80272ce:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80272d0:	687b      	ldr	r3, [r7, #4]
 80272d2:	69db      	ldr	r3, [r3, #28]
 80272d4:	4619      	mov	r1, r3
 80272d6:	68f8      	ldr	r0, [r7, #12]
 80272d8:	f7ff fb2a 	bl	8026930 <move_window>
 80272dc:	4603      	mov	r3, r0
 80272de:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80272e0:	7dfb      	ldrb	r3, [r7, #23]
 80272e2:	2b00      	cmp	r3, #0
 80272e4:	d11d      	bne.n	8027322 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80272e6:	687b      	ldr	r3, [r7, #4]
 80272e8:	6a1b      	ldr	r3, [r3, #32]
 80272ea:	781b      	ldrb	r3, [r3, #0]
 80272ec:	2be5      	cmp	r3, #229	@ 0xe5
 80272ee:	d004      	beq.n	80272fa <dir_alloc+0x50>
 80272f0:	687b      	ldr	r3, [r7, #4]
 80272f2:	6a1b      	ldr	r3, [r3, #32]
 80272f4:	781b      	ldrb	r3, [r3, #0]
 80272f6:	2b00      	cmp	r3, #0
 80272f8:	d107      	bne.n	802730a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80272fa:	693b      	ldr	r3, [r7, #16]
 80272fc:	3301      	adds	r3, #1
 80272fe:	613b      	str	r3, [r7, #16]
 8027300:	693a      	ldr	r2, [r7, #16]
 8027302:	683b      	ldr	r3, [r7, #0]
 8027304:	429a      	cmp	r2, r3
 8027306:	d102      	bne.n	802730e <dir_alloc+0x64>
 8027308:	e00c      	b.n	8027324 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 802730a:	2300      	movs	r3, #0
 802730c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 802730e:	2101      	movs	r1, #1
 8027310:	6878      	ldr	r0, [r7, #4]
 8027312:	f7ff ff05 	bl	8027120 <dir_next>
 8027316:	4603      	mov	r3, r0
 8027318:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 802731a:	7dfb      	ldrb	r3, [r7, #23]
 802731c:	2b00      	cmp	r3, #0
 802731e:	d0d7      	beq.n	80272d0 <dir_alloc+0x26>
 8027320:	e000      	b.n	8027324 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8027322:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8027324:	7dfb      	ldrb	r3, [r7, #23]
 8027326:	2b04      	cmp	r3, #4
 8027328:	d101      	bne.n	802732e <dir_alloc+0x84>
 802732a:	2307      	movs	r3, #7
 802732c:	75fb      	strb	r3, [r7, #23]
	return res;
 802732e:	7dfb      	ldrb	r3, [r7, #23]
}
 8027330:	4618      	mov	r0, r3
 8027332:	3718      	adds	r7, #24
 8027334:	46bd      	mov	sp, r7
 8027336:	bd80      	pop	{r7, pc}

08027338 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8027338:	b580      	push	{r7, lr}
 802733a:	b084      	sub	sp, #16
 802733c:	af00      	add	r7, sp, #0
 802733e:	6078      	str	r0, [r7, #4]
 8027340:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8027342:	683b      	ldr	r3, [r7, #0]
 8027344:	331a      	adds	r3, #26
 8027346:	4618      	mov	r0, r3
 8027348:	f7ff f842 	bl	80263d0 <ld_word>
 802734c:	4603      	mov	r3, r0
 802734e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8027350:	687b      	ldr	r3, [r7, #4]
 8027352:	781b      	ldrb	r3, [r3, #0]
 8027354:	2b03      	cmp	r3, #3
 8027356:	d109      	bne.n	802736c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8027358:	683b      	ldr	r3, [r7, #0]
 802735a:	3314      	adds	r3, #20
 802735c:	4618      	mov	r0, r3
 802735e:	f7ff f837 	bl	80263d0 <ld_word>
 8027362:	4603      	mov	r3, r0
 8027364:	041b      	lsls	r3, r3, #16
 8027366:	68fa      	ldr	r2, [r7, #12]
 8027368:	4313      	orrs	r3, r2
 802736a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 802736c:	68fb      	ldr	r3, [r7, #12]
}
 802736e:	4618      	mov	r0, r3
 8027370:	3710      	adds	r7, #16
 8027372:	46bd      	mov	sp, r7
 8027374:	bd80      	pop	{r7, pc}

08027376 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8027376:	b580      	push	{r7, lr}
 8027378:	b084      	sub	sp, #16
 802737a:	af00      	add	r7, sp, #0
 802737c:	60f8      	str	r0, [r7, #12]
 802737e:	60b9      	str	r1, [r7, #8]
 8027380:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8027382:	68bb      	ldr	r3, [r7, #8]
 8027384:	331a      	adds	r3, #26
 8027386:	687a      	ldr	r2, [r7, #4]
 8027388:	b292      	uxth	r2, r2
 802738a:	4611      	mov	r1, r2
 802738c:	4618      	mov	r0, r3
 802738e:	f7ff f85a 	bl	8026446 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8027392:	68fb      	ldr	r3, [r7, #12]
 8027394:	781b      	ldrb	r3, [r3, #0]
 8027396:	2b03      	cmp	r3, #3
 8027398:	d109      	bne.n	80273ae <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 802739a:	68bb      	ldr	r3, [r7, #8]
 802739c:	f103 0214 	add.w	r2, r3, #20
 80273a0:	687b      	ldr	r3, [r7, #4]
 80273a2:	0c1b      	lsrs	r3, r3, #16
 80273a4:	b29b      	uxth	r3, r3
 80273a6:	4619      	mov	r1, r3
 80273a8:	4610      	mov	r0, r2
 80273aa:	f7ff f84c 	bl	8026446 <st_word>
	}
}
 80273ae:	bf00      	nop
 80273b0:	3710      	adds	r7, #16
 80273b2:	46bd      	mov	sp, r7
 80273b4:	bd80      	pop	{r7, pc}

080273b6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80273b6:	b580      	push	{r7, lr}
 80273b8:	b086      	sub	sp, #24
 80273ba:	af00      	add	r7, sp, #0
 80273bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80273be:	687b      	ldr	r3, [r7, #4]
 80273c0:	681b      	ldr	r3, [r3, #0]
 80273c2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80273c4:	2100      	movs	r1, #0
 80273c6:	6878      	ldr	r0, [r7, #4]
 80273c8:	f7ff fe2f 	bl	802702a <dir_sdi>
 80273cc:	4603      	mov	r3, r0
 80273ce:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80273d0:	7dfb      	ldrb	r3, [r7, #23]
 80273d2:	2b00      	cmp	r3, #0
 80273d4:	d001      	beq.n	80273da <dir_find+0x24>
 80273d6:	7dfb      	ldrb	r3, [r7, #23]
 80273d8:	e03e      	b.n	8027458 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80273da:	687b      	ldr	r3, [r7, #4]
 80273dc:	69db      	ldr	r3, [r3, #28]
 80273de:	4619      	mov	r1, r3
 80273e0:	6938      	ldr	r0, [r7, #16]
 80273e2:	f7ff faa5 	bl	8026930 <move_window>
 80273e6:	4603      	mov	r3, r0
 80273e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80273ea:	7dfb      	ldrb	r3, [r7, #23]
 80273ec:	2b00      	cmp	r3, #0
 80273ee:	d12f      	bne.n	8027450 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80273f0:	687b      	ldr	r3, [r7, #4]
 80273f2:	6a1b      	ldr	r3, [r3, #32]
 80273f4:	781b      	ldrb	r3, [r3, #0]
 80273f6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80273f8:	7bfb      	ldrb	r3, [r7, #15]
 80273fa:	2b00      	cmp	r3, #0
 80273fc:	d102      	bne.n	8027404 <dir_find+0x4e>
 80273fe:	2304      	movs	r3, #4
 8027400:	75fb      	strb	r3, [r7, #23]
 8027402:	e028      	b.n	8027456 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8027404:	687b      	ldr	r3, [r7, #4]
 8027406:	6a1b      	ldr	r3, [r3, #32]
 8027408:	330b      	adds	r3, #11
 802740a:	781b      	ldrb	r3, [r3, #0]
 802740c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8027410:	b2da      	uxtb	r2, r3
 8027412:	687b      	ldr	r3, [r7, #4]
 8027414:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8027416:	687b      	ldr	r3, [r7, #4]
 8027418:	6a1b      	ldr	r3, [r3, #32]
 802741a:	330b      	adds	r3, #11
 802741c:	781b      	ldrb	r3, [r3, #0]
 802741e:	f003 0308 	and.w	r3, r3, #8
 8027422:	2b00      	cmp	r3, #0
 8027424:	d10a      	bne.n	802743c <dir_find+0x86>
 8027426:	687b      	ldr	r3, [r7, #4]
 8027428:	6a18      	ldr	r0, [r3, #32]
 802742a:	687b      	ldr	r3, [r7, #4]
 802742c:	3324      	adds	r3, #36	@ 0x24
 802742e:	220b      	movs	r2, #11
 8027430:	4619      	mov	r1, r3
 8027432:	f7ff f88b 	bl	802654c <mem_cmp>
 8027436:	4603      	mov	r3, r0
 8027438:	2b00      	cmp	r3, #0
 802743a:	d00b      	beq.n	8027454 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 802743c:	2100      	movs	r1, #0
 802743e:	6878      	ldr	r0, [r7, #4]
 8027440:	f7ff fe6e 	bl	8027120 <dir_next>
 8027444:	4603      	mov	r3, r0
 8027446:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8027448:	7dfb      	ldrb	r3, [r7, #23]
 802744a:	2b00      	cmp	r3, #0
 802744c:	d0c5      	beq.n	80273da <dir_find+0x24>
 802744e:	e002      	b.n	8027456 <dir_find+0xa0>
		if (res != FR_OK) break;
 8027450:	bf00      	nop
 8027452:	e000      	b.n	8027456 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8027454:	bf00      	nop

	return res;
 8027456:	7dfb      	ldrb	r3, [r7, #23]
}
 8027458:	4618      	mov	r0, r3
 802745a:	3718      	adds	r7, #24
 802745c:	46bd      	mov	sp, r7
 802745e:	bd80      	pop	{r7, pc}

08027460 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8027460:	b580      	push	{r7, lr}
 8027462:	b084      	sub	sp, #16
 8027464:	af00      	add	r7, sp, #0
 8027466:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8027468:	687b      	ldr	r3, [r7, #4]
 802746a:	681b      	ldr	r3, [r3, #0]
 802746c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 802746e:	2101      	movs	r1, #1
 8027470:	6878      	ldr	r0, [r7, #4]
 8027472:	f7ff ff1a 	bl	80272aa <dir_alloc>
 8027476:	4603      	mov	r3, r0
 8027478:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 802747a:	7bfb      	ldrb	r3, [r7, #15]
 802747c:	2b00      	cmp	r3, #0
 802747e:	d11c      	bne.n	80274ba <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8027480:	687b      	ldr	r3, [r7, #4]
 8027482:	69db      	ldr	r3, [r3, #28]
 8027484:	4619      	mov	r1, r3
 8027486:	68b8      	ldr	r0, [r7, #8]
 8027488:	f7ff fa52 	bl	8026930 <move_window>
 802748c:	4603      	mov	r3, r0
 802748e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8027490:	7bfb      	ldrb	r3, [r7, #15]
 8027492:	2b00      	cmp	r3, #0
 8027494:	d111      	bne.n	80274ba <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8027496:	687b      	ldr	r3, [r7, #4]
 8027498:	6a1b      	ldr	r3, [r3, #32]
 802749a:	2220      	movs	r2, #32
 802749c:	2100      	movs	r1, #0
 802749e:	4618      	mov	r0, r3
 80274a0:	f7ff f839 	bl	8026516 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80274a4:	687b      	ldr	r3, [r7, #4]
 80274a6:	6a18      	ldr	r0, [r3, #32]
 80274a8:	687b      	ldr	r3, [r7, #4]
 80274aa:	3324      	adds	r3, #36	@ 0x24
 80274ac:	220b      	movs	r2, #11
 80274ae:	4619      	mov	r1, r3
 80274b0:	f7ff f810 	bl	80264d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80274b4:	68bb      	ldr	r3, [r7, #8]
 80274b6:	2201      	movs	r2, #1
 80274b8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80274ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80274bc:	4618      	mov	r0, r3
 80274be:	3710      	adds	r7, #16
 80274c0:	46bd      	mov	sp, r7
 80274c2:	bd80      	pop	{r7, pc}

080274c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80274c4:	b580      	push	{r7, lr}
 80274c6:	b088      	sub	sp, #32
 80274c8:	af00      	add	r7, sp, #0
 80274ca:	6078      	str	r0, [r7, #4]
 80274cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80274ce:	683b      	ldr	r3, [r7, #0]
 80274d0:	681b      	ldr	r3, [r3, #0]
 80274d2:	60fb      	str	r3, [r7, #12]
 80274d4:	687b      	ldr	r3, [r7, #4]
 80274d6:	3324      	adds	r3, #36	@ 0x24
 80274d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80274da:	220b      	movs	r2, #11
 80274dc:	2120      	movs	r1, #32
 80274de:	68b8      	ldr	r0, [r7, #8]
 80274e0:	f7ff f819 	bl	8026516 <mem_set>
	si = i = 0; ni = 8;
 80274e4:	2300      	movs	r3, #0
 80274e6:	613b      	str	r3, [r7, #16]
 80274e8:	693b      	ldr	r3, [r7, #16]
 80274ea:	61fb      	str	r3, [r7, #28]
 80274ec:	2308      	movs	r3, #8
 80274ee:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80274f0:	69fb      	ldr	r3, [r7, #28]
 80274f2:	1c5a      	adds	r2, r3, #1
 80274f4:	61fa      	str	r2, [r7, #28]
 80274f6:	68fa      	ldr	r2, [r7, #12]
 80274f8:	4413      	add	r3, r2
 80274fa:	781b      	ldrb	r3, [r3, #0]
 80274fc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80274fe:	7efb      	ldrb	r3, [r7, #27]
 8027500:	2b20      	cmp	r3, #32
 8027502:	d94e      	bls.n	80275a2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8027504:	7efb      	ldrb	r3, [r7, #27]
 8027506:	2b2f      	cmp	r3, #47	@ 0x2f
 8027508:	d006      	beq.n	8027518 <create_name+0x54>
 802750a:	7efb      	ldrb	r3, [r7, #27]
 802750c:	2b5c      	cmp	r3, #92	@ 0x5c
 802750e:	d110      	bne.n	8027532 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8027510:	e002      	b.n	8027518 <create_name+0x54>
 8027512:	69fb      	ldr	r3, [r7, #28]
 8027514:	3301      	adds	r3, #1
 8027516:	61fb      	str	r3, [r7, #28]
 8027518:	68fa      	ldr	r2, [r7, #12]
 802751a:	69fb      	ldr	r3, [r7, #28]
 802751c:	4413      	add	r3, r2
 802751e:	781b      	ldrb	r3, [r3, #0]
 8027520:	2b2f      	cmp	r3, #47	@ 0x2f
 8027522:	d0f6      	beq.n	8027512 <create_name+0x4e>
 8027524:	68fa      	ldr	r2, [r7, #12]
 8027526:	69fb      	ldr	r3, [r7, #28]
 8027528:	4413      	add	r3, r2
 802752a:	781b      	ldrb	r3, [r3, #0]
 802752c:	2b5c      	cmp	r3, #92	@ 0x5c
 802752e:	d0f0      	beq.n	8027512 <create_name+0x4e>
			break;
 8027530:	e038      	b.n	80275a4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8027532:	7efb      	ldrb	r3, [r7, #27]
 8027534:	2b2e      	cmp	r3, #46	@ 0x2e
 8027536:	d003      	beq.n	8027540 <create_name+0x7c>
 8027538:	693a      	ldr	r2, [r7, #16]
 802753a:	697b      	ldr	r3, [r7, #20]
 802753c:	429a      	cmp	r2, r3
 802753e:	d30c      	bcc.n	802755a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8027540:	697b      	ldr	r3, [r7, #20]
 8027542:	2b0b      	cmp	r3, #11
 8027544:	d002      	beq.n	802754c <create_name+0x88>
 8027546:	7efb      	ldrb	r3, [r7, #27]
 8027548:	2b2e      	cmp	r3, #46	@ 0x2e
 802754a:	d001      	beq.n	8027550 <create_name+0x8c>
 802754c:	2306      	movs	r3, #6
 802754e:	e044      	b.n	80275da <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8027550:	2308      	movs	r3, #8
 8027552:	613b      	str	r3, [r7, #16]
 8027554:	230b      	movs	r3, #11
 8027556:	617b      	str	r3, [r7, #20]
			continue;
 8027558:	e022      	b.n	80275a0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 802755a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 802755e:	2b00      	cmp	r3, #0
 8027560:	da04      	bge.n	802756c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8027562:	7efb      	ldrb	r3, [r7, #27]
 8027564:	3b80      	subs	r3, #128	@ 0x80
 8027566:	4a1f      	ldr	r2, [pc, #124]	@ (80275e4 <create_name+0x120>)
 8027568:	5cd3      	ldrb	r3, [r2, r3]
 802756a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 802756c:	7efb      	ldrb	r3, [r7, #27]
 802756e:	4619      	mov	r1, r3
 8027570:	481d      	ldr	r0, [pc, #116]	@ (80275e8 <create_name+0x124>)
 8027572:	f7ff f812 	bl	802659a <chk_chr>
 8027576:	4603      	mov	r3, r0
 8027578:	2b00      	cmp	r3, #0
 802757a:	d001      	beq.n	8027580 <create_name+0xbc>
 802757c:	2306      	movs	r3, #6
 802757e:	e02c      	b.n	80275da <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8027580:	7efb      	ldrb	r3, [r7, #27]
 8027582:	2b60      	cmp	r3, #96	@ 0x60
 8027584:	d905      	bls.n	8027592 <create_name+0xce>
 8027586:	7efb      	ldrb	r3, [r7, #27]
 8027588:	2b7a      	cmp	r3, #122	@ 0x7a
 802758a:	d802      	bhi.n	8027592 <create_name+0xce>
 802758c:	7efb      	ldrb	r3, [r7, #27]
 802758e:	3b20      	subs	r3, #32
 8027590:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8027592:	693b      	ldr	r3, [r7, #16]
 8027594:	1c5a      	adds	r2, r3, #1
 8027596:	613a      	str	r2, [r7, #16]
 8027598:	68ba      	ldr	r2, [r7, #8]
 802759a:	4413      	add	r3, r2
 802759c:	7efa      	ldrb	r2, [r7, #27]
 802759e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80275a0:	e7a6      	b.n	80274f0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80275a2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80275a4:	68fa      	ldr	r2, [r7, #12]
 80275a6:	69fb      	ldr	r3, [r7, #28]
 80275a8:	441a      	add	r2, r3
 80275aa:	683b      	ldr	r3, [r7, #0]
 80275ac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80275ae:	693b      	ldr	r3, [r7, #16]
 80275b0:	2b00      	cmp	r3, #0
 80275b2:	d101      	bne.n	80275b8 <create_name+0xf4>
 80275b4:	2306      	movs	r3, #6
 80275b6:	e010      	b.n	80275da <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80275b8:	68bb      	ldr	r3, [r7, #8]
 80275ba:	781b      	ldrb	r3, [r3, #0]
 80275bc:	2be5      	cmp	r3, #229	@ 0xe5
 80275be:	d102      	bne.n	80275c6 <create_name+0x102>
 80275c0:	68bb      	ldr	r3, [r7, #8]
 80275c2:	2205      	movs	r2, #5
 80275c4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80275c6:	7efb      	ldrb	r3, [r7, #27]
 80275c8:	2b20      	cmp	r3, #32
 80275ca:	d801      	bhi.n	80275d0 <create_name+0x10c>
 80275cc:	2204      	movs	r2, #4
 80275ce:	e000      	b.n	80275d2 <create_name+0x10e>
 80275d0:	2200      	movs	r2, #0
 80275d2:	68bb      	ldr	r3, [r7, #8]
 80275d4:	330b      	adds	r3, #11
 80275d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80275d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80275da:	4618      	mov	r0, r3
 80275dc:	3720      	adds	r7, #32
 80275de:	46bd      	mov	sp, r7
 80275e0:	bd80      	pop	{r7, pc}
 80275e2:	bf00      	nop
 80275e4:	0802b6ac 	.word	0x0802b6ac
 80275e8:	0802b05c 	.word	0x0802b05c

080275ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80275ec:	b580      	push	{r7, lr}
 80275ee:	b086      	sub	sp, #24
 80275f0:	af00      	add	r7, sp, #0
 80275f2:	6078      	str	r0, [r7, #4]
 80275f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80275f6:	687b      	ldr	r3, [r7, #4]
 80275f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80275fa:	693b      	ldr	r3, [r7, #16]
 80275fc:	681b      	ldr	r3, [r3, #0]
 80275fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8027600:	e002      	b.n	8027608 <follow_path+0x1c>
 8027602:	683b      	ldr	r3, [r7, #0]
 8027604:	3301      	adds	r3, #1
 8027606:	603b      	str	r3, [r7, #0]
 8027608:	683b      	ldr	r3, [r7, #0]
 802760a:	781b      	ldrb	r3, [r3, #0]
 802760c:	2b2f      	cmp	r3, #47	@ 0x2f
 802760e:	d0f8      	beq.n	8027602 <follow_path+0x16>
 8027610:	683b      	ldr	r3, [r7, #0]
 8027612:	781b      	ldrb	r3, [r3, #0]
 8027614:	2b5c      	cmp	r3, #92	@ 0x5c
 8027616:	d0f4      	beq.n	8027602 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8027618:	693b      	ldr	r3, [r7, #16]
 802761a:	2200      	movs	r2, #0
 802761c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 802761e:	683b      	ldr	r3, [r7, #0]
 8027620:	781b      	ldrb	r3, [r3, #0]
 8027622:	2b1f      	cmp	r3, #31
 8027624:	d80a      	bhi.n	802763c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8027626:	687b      	ldr	r3, [r7, #4]
 8027628:	2280      	movs	r2, #128	@ 0x80
 802762a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 802762e:	2100      	movs	r1, #0
 8027630:	6878      	ldr	r0, [r7, #4]
 8027632:	f7ff fcfa 	bl	802702a <dir_sdi>
 8027636:	4603      	mov	r3, r0
 8027638:	75fb      	strb	r3, [r7, #23]
 802763a:	e043      	b.n	80276c4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 802763c:	463b      	mov	r3, r7
 802763e:	4619      	mov	r1, r3
 8027640:	6878      	ldr	r0, [r7, #4]
 8027642:	f7ff ff3f 	bl	80274c4 <create_name>
 8027646:	4603      	mov	r3, r0
 8027648:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 802764a:	7dfb      	ldrb	r3, [r7, #23]
 802764c:	2b00      	cmp	r3, #0
 802764e:	d134      	bne.n	80276ba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8027650:	6878      	ldr	r0, [r7, #4]
 8027652:	f7ff feb0 	bl	80273b6 <dir_find>
 8027656:	4603      	mov	r3, r0
 8027658:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 802765a:	687b      	ldr	r3, [r7, #4]
 802765c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8027660:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8027662:	7dfb      	ldrb	r3, [r7, #23]
 8027664:	2b00      	cmp	r3, #0
 8027666:	d00a      	beq.n	802767e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8027668:	7dfb      	ldrb	r3, [r7, #23]
 802766a:	2b04      	cmp	r3, #4
 802766c:	d127      	bne.n	80276be <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 802766e:	7afb      	ldrb	r3, [r7, #11]
 8027670:	f003 0304 	and.w	r3, r3, #4
 8027674:	2b00      	cmp	r3, #0
 8027676:	d122      	bne.n	80276be <follow_path+0xd2>
 8027678:	2305      	movs	r3, #5
 802767a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 802767c:	e01f      	b.n	80276be <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 802767e:	7afb      	ldrb	r3, [r7, #11]
 8027680:	f003 0304 	and.w	r3, r3, #4
 8027684:	2b00      	cmp	r3, #0
 8027686:	d11c      	bne.n	80276c2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8027688:	693b      	ldr	r3, [r7, #16]
 802768a:	799b      	ldrb	r3, [r3, #6]
 802768c:	f003 0310 	and.w	r3, r3, #16
 8027690:	2b00      	cmp	r3, #0
 8027692:	d102      	bne.n	802769a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8027694:	2305      	movs	r3, #5
 8027696:	75fb      	strb	r3, [r7, #23]
 8027698:	e014      	b.n	80276c4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 802769a:	68fb      	ldr	r3, [r7, #12]
 802769c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80276a0:	687b      	ldr	r3, [r7, #4]
 80276a2:	695b      	ldr	r3, [r3, #20]
 80276a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80276a8:	4413      	add	r3, r2
 80276aa:	4619      	mov	r1, r3
 80276ac:	68f8      	ldr	r0, [r7, #12]
 80276ae:	f7ff fe43 	bl	8027338 <ld_clust>
 80276b2:	4602      	mov	r2, r0
 80276b4:	693b      	ldr	r3, [r7, #16]
 80276b6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80276b8:	e7c0      	b.n	802763c <follow_path+0x50>
			if (res != FR_OK) break;
 80276ba:	bf00      	nop
 80276bc:	e002      	b.n	80276c4 <follow_path+0xd8>
				break;
 80276be:	bf00      	nop
 80276c0:	e000      	b.n	80276c4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80276c2:	bf00      	nop
			}
		}
	}

	return res;
 80276c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80276c6:	4618      	mov	r0, r3
 80276c8:	3718      	adds	r7, #24
 80276ca:	46bd      	mov	sp, r7
 80276cc:	bd80      	pop	{r7, pc}

080276ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80276ce:	b480      	push	{r7}
 80276d0:	b087      	sub	sp, #28
 80276d2:	af00      	add	r7, sp, #0
 80276d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80276d6:	f04f 33ff 	mov.w	r3, #4294967295
 80276da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80276dc:	687b      	ldr	r3, [r7, #4]
 80276de:	681b      	ldr	r3, [r3, #0]
 80276e0:	2b00      	cmp	r3, #0
 80276e2:	d031      	beq.n	8027748 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80276e4:	687b      	ldr	r3, [r7, #4]
 80276e6:	681b      	ldr	r3, [r3, #0]
 80276e8:	617b      	str	r3, [r7, #20]
 80276ea:	e002      	b.n	80276f2 <get_ldnumber+0x24>
 80276ec:	697b      	ldr	r3, [r7, #20]
 80276ee:	3301      	adds	r3, #1
 80276f0:	617b      	str	r3, [r7, #20]
 80276f2:	697b      	ldr	r3, [r7, #20]
 80276f4:	781b      	ldrb	r3, [r3, #0]
 80276f6:	2b20      	cmp	r3, #32
 80276f8:	d903      	bls.n	8027702 <get_ldnumber+0x34>
 80276fa:	697b      	ldr	r3, [r7, #20]
 80276fc:	781b      	ldrb	r3, [r3, #0]
 80276fe:	2b3a      	cmp	r3, #58	@ 0x3a
 8027700:	d1f4      	bne.n	80276ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8027702:	697b      	ldr	r3, [r7, #20]
 8027704:	781b      	ldrb	r3, [r3, #0]
 8027706:	2b3a      	cmp	r3, #58	@ 0x3a
 8027708:	d11c      	bne.n	8027744 <get_ldnumber+0x76>
			tp = *path;
 802770a:	687b      	ldr	r3, [r7, #4]
 802770c:	681b      	ldr	r3, [r3, #0]
 802770e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8027710:	68fb      	ldr	r3, [r7, #12]
 8027712:	1c5a      	adds	r2, r3, #1
 8027714:	60fa      	str	r2, [r7, #12]
 8027716:	781b      	ldrb	r3, [r3, #0]
 8027718:	3b30      	subs	r3, #48	@ 0x30
 802771a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 802771c:	68bb      	ldr	r3, [r7, #8]
 802771e:	2b09      	cmp	r3, #9
 8027720:	d80e      	bhi.n	8027740 <get_ldnumber+0x72>
 8027722:	68fa      	ldr	r2, [r7, #12]
 8027724:	697b      	ldr	r3, [r7, #20]
 8027726:	429a      	cmp	r2, r3
 8027728:	d10a      	bne.n	8027740 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 802772a:	68bb      	ldr	r3, [r7, #8]
 802772c:	2b00      	cmp	r3, #0
 802772e:	d107      	bne.n	8027740 <get_ldnumber+0x72>
					vol = (int)i;
 8027730:	68bb      	ldr	r3, [r7, #8]
 8027732:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8027734:	697b      	ldr	r3, [r7, #20]
 8027736:	3301      	adds	r3, #1
 8027738:	617b      	str	r3, [r7, #20]
 802773a:	687b      	ldr	r3, [r7, #4]
 802773c:	697a      	ldr	r2, [r7, #20]
 802773e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8027740:	693b      	ldr	r3, [r7, #16]
 8027742:	e002      	b.n	802774a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8027744:	2300      	movs	r3, #0
 8027746:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8027748:	693b      	ldr	r3, [r7, #16]
}
 802774a:	4618      	mov	r0, r3
 802774c:	371c      	adds	r7, #28
 802774e:	46bd      	mov	sp, r7
 8027750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027754:	4770      	bx	lr
	...

08027758 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8027758:	b580      	push	{r7, lr}
 802775a:	b082      	sub	sp, #8
 802775c:	af00      	add	r7, sp, #0
 802775e:	6078      	str	r0, [r7, #4]
 8027760:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8027762:	687b      	ldr	r3, [r7, #4]
 8027764:	2200      	movs	r2, #0
 8027766:	70da      	strb	r2, [r3, #3]
 8027768:	687b      	ldr	r3, [r7, #4]
 802776a:	f04f 32ff 	mov.w	r2, #4294967295
 802776e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8027770:	6839      	ldr	r1, [r7, #0]
 8027772:	6878      	ldr	r0, [r7, #4]
 8027774:	f7ff f8dc 	bl	8026930 <move_window>
 8027778:	4603      	mov	r3, r0
 802777a:	2b00      	cmp	r3, #0
 802777c:	d001      	beq.n	8027782 <check_fs+0x2a>
 802777e:	2304      	movs	r3, #4
 8027780:	e038      	b.n	80277f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8027782:	687b      	ldr	r3, [r7, #4]
 8027784:	3330      	adds	r3, #48	@ 0x30
 8027786:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 802778a:	4618      	mov	r0, r3
 802778c:	f7fe fe20 	bl	80263d0 <ld_word>
 8027790:	4603      	mov	r3, r0
 8027792:	461a      	mov	r2, r3
 8027794:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8027798:	429a      	cmp	r2, r3
 802779a:	d001      	beq.n	80277a0 <check_fs+0x48>
 802779c:	2303      	movs	r3, #3
 802779e:	e029      	b.n	80277f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80277a0:	687b      	ldr	r3, [r7, #4]
 80277a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80277a6:	2be9      	cmp	r3, #233	@ 0xe9
 80277a8:	d009      	beq.n	80277be <check_fs+0x66>
 80277aa:	687b      	ldr	r3, [r7, #4]
 80277ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80277b0:	2beb      	cmp	r3, #235	@ 0xeb
 80277b2:	d11e      	bne.n	80277f2 <check_fs+0x9a>
 80277b4:	687b      	ldr	r3, [r7, #4]
 80277b6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80277ba:	2b90      	cmp	r3, #144	@ 0x90
 80277bc:	d119      	bne.n	80277f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80277be:	687b      	ldr	r3, [r7, #4]
 80277c0:	3330      	adds	r3, #48	@ 0x30
 80277c2:	3336      	adds	r3, #54	@ 0x36
 80277c4:	4618      	mov	r0, r3
 80277c6:	f7fe fe1b 	bl	8026400 <ld_dword>
 80277ca:	4603      	mov	r3, r0
 80277cc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80277d0:	4a0a      	ldr	r2, [pc, #40]	@ (80277fc <check_fs+0xa4>)
 80277d2:	4293      	cmp	r3, r2
 80277d4:	d101      	bne.n	80277da <check_fs+0x82>
 80277d6:	2300      	movs	r3, #0
 80277d8:	e00c      	b.n	80277f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80277da:	687b      	ldr	r3, [r7, #4]
 80277dc:	3330      	adds	r3, #48	@ 0x30
 80277de:	3352      	adds	r3, #82	@ 0x52
 80277e0:	4618      	mov	r0, r3
 80277e2:	f7fe fe0d 	bl	8026400 <ld_dword>
 80277e6:	4603      	mov	r3, r0
 80277e8:	4a05      	ldr	r2, [pc, #20]	@ (8027800 <check_fs+0xa8>)
 80277ea:	4293      	cmp	r3, r2
 80277ec:	d101      	bne.n	80277f2 <check_fs+0x9a>
 80277ee:	2300      	movs	r3, #0
 80277f0:	e000      	b.n	80277f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80277f2:	2302      	movs	r3, #2
}
 80277f4:	4618      	mov	r0, r3
 80277f6:	3708      	adds	r7, #8
 80277f8:	46bd      	mov	sp, r7
 80277fa:	bd80      	pop	{r7, pc}
 80277fc:	00544146 	.word	0x00544146
 8027800:	33544146 	.word	0x33544146

08027804 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8027804:	b580      	push	{r7, lr}
 8027806:	b096      	sub	sp, #88	@ 0x58
 8027808:	af00      	add	r7, sp, #0
 802780a:	60f8      	str	r0, [r7, #12]
 802780c:	60b9      	str	r1, [r7, #8]
 802780e:	4613      	mov	r3, r2
 8027810:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8027812:	68bb      	ldr	r3, [r7, #8]
 8027814:	2200      	movs	r2, #0
 8027816:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8027818:	68f8      	ldr	r0, [r7, #12]
 802781a:	f7ff ff58 	bl	80276ce <get_ldnumber>
 802781e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8027820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8027822:	2b00      	cmp	r3, #0
 8027824:	da01      	bge.n	802782a <find_volume+0x26>
 8027826:	230b      	movs	r3, #11
 8027828:	e22d      	b.n	8027c86 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 802782a:	4aa1      	ldr	r2, [pc, #644]	@ (8027ab0 <find_volume+0x2ac>)
 802782c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802782e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027832:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8027834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027836:	2b00      	cmp	r3, #0
 8027838:	d101      	bne.n	802783e <find_volume+0x3a>
 802783a:	230c      	movs	r3, #12
 802783c:	e223      	b.n	8027c86 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 802783e:	68bb      	ldr	r3, [r7, #8]
 8027840:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8027842:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8027844:	79fb      	ldrb	r3, [r7, #7]
 8027846:	f023 0301 	bic.w	r3, r3, #1
 802784a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 802784c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802784e:	781b      	ldrb	r3, [r3, #0]
 8027850:	2b00      	cmp	r3, #0
 8027852:	d01a      	beq.n	802788a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8027854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027856:	785b      	ldrb	r3, [r3, #1]
 8027858:	4618      	mov	r0, r3
 802785a:	f7fe fd19 	bl	8026290 <disk_status>
 802785e:	4603      	mov	r3, r0
 8027860:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8027864:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8027868:	f003 0301 	and.w	r3, r3, #1
 802786c:	2b00      	cmp	r3, #0
 802786e:	d10c      	bne.n	802788a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8027870:	79fb      	ldrb	r3, [r7, #7]
 8027872:	2b00      	cmp	r3, #0
 8027874:	d007      	beq.n	8027886 <find_volume+0x82>
 8027876:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 802787a:	f003 0304 	and.w	r3, r3, #4
 802787e:	2b00      	cmp	r3, #0
 8027880:	d001      	beq.n	8027886 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8027882:	230a      	movs	r3, #10
 8027884:	e1ff      	b.n	8027c86 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8027886:	2300      	movs	r3, #0
 8027888:	e1fd      	b.n	8027c86 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 802788a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802788c:	2200      	movs	r2, #0
 802788e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8027890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8027892:	b2da      	uxtb	r2, r3
 8027894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027896:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8027898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802789a:	785b      	ldrb	r3, [r3, #1]
 802789c:	4618      	mov	r0, r3
 802789e:	f7fe fd11 	bl	80262c4 <disk_initialize>
 80278a2:	4603      	mov	r3, r0
 80278a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80278a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80278ac:	f003 0301 	and.w	r3, r3, #1
 80278b0:	2b00      	cmp	r3, #0
 80278b2:	d001      	beq.n	80278b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80278b4:	2303      	movs	r3, #3
 80278b6:	e1e6      	b.n	8027c86 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80278b8:	79fb      	ldrb	r3, [r7, #7]
 80278ba:	2b00      	cmp	r3, #0
 80278bc:	d007      	beq.n	80278ce <find_volume+0xca>
 80278be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80278c2:	f003 0304 	and.w	r3, r3, #4
 80278c6:	2b00      	cmp	r3, #0
 80278c8:	d001      	beq.n	80278ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80278ca:	230a      	movs	r3, #10
 80278cc:	e1db      	b.n	8027c86 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80278ce:	2300      	movs	r3, #0
 80278d0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80278d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80278d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80278d6:	f7ff ff3f 	bl	8027758 <check_fs>
 80278da:	4603      	mov	r3, r0
 80278dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80278e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80278e4:	2b02      	cmp	r3, #2
 80278e6:	d149      	bne.n	802797c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80278e8:	2300      	movs	r3, #0
 80278ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80278ec:	e01e      	b.n	802792c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80278ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80278f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80278f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80278f6:	011b      	lsls	r3, r3, #4
 80278f8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80278fc:	4413      	add	r3, r2
 80278fe:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8027900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027902:	3304      	adds	r3, #4
 8027904:	781b      	ldrb	r3, [r3, #0]
 8027906:	2b00      	cmp	r3, #0
 8027908:	d006      	beq.n	8027918 <find_volume+0x114>
 802790a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802790c:	3308      	adds	r3, #8
 802790e:	4618      	mov	r0, r3
 8027910:	f7fe fd76 	bl	8026400 <ld_dword>
 8027914:	4602      	mov	r2, r0
 8027916:	e000      	b.n	802791a <find_volume+0x116>
 8027918:	2200      	movs	r2, #0
 802791a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802791c:	009b      	lsls	r3, r3, #2
 802791e:	3358      	adds	r3, #88	@ 0x58
 8027920:	443b      	add	r3, r7
 8027922:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8027926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027928:	3301      	adds	r3, #1
 802792a:	643b      	str	r3, [r7, #64]	@ 0x40
 802792c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802792e:	2b03      	cmp	r3, #3
 8027930:	d9dd      	bls.n	80278ee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8027932:	2300      	movs	r3, #0
 8027934:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8027936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027938:	2b00      	cmp	r3, #0
 802793a:	d002      	beq.n	8027942 <find_volume+0x13e>
 802793c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802793e:	3b01      	subs	r3, #1
 8027940:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8027942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027944:	009b      	lsls	r3, r3, #2
 8027946:	3358      	adds	r3, #88	@ 0x58
 8027948:	443b      	add	r3, r7
 802794a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 802794e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8027950:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8027952:	2b00      	cmp	r3, #0
 8027954:	d005      	beq.n	8027962 <find_volume+0x15e>
 8027956:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8027958:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 802795a:	f7ff fefd 	bl	8027758 <check_fs>
 802795e:	4603      	mov	r3, r0
 8027960:	e000      	b.n	8027964 <find_volume+0x160>
 8027962:	2303      	movs	r3, #3
 8027964:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8027968:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 802796c:	2b01      	cmp	r3, #1
 802796e:	d905      	bls.n	802797c <find_volume+0x178>
 8027970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027972:	3301      	adds	r3, #1
 8027974:	643b      	str	r3, [r7, #64]	@ 0x40
 8027976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027978:	2b03      	cmp	r3, #3
 802797a:	d9e2      	bls.n	8027942 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 802797c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027980:	2b04      	cmp	r3, #4
 8027982:	d101      	bne.n	8027988 <find_volume+0x184>
 8027984:	2301      	movs	r3, #1
 8027986:	e17e      	b.n	8027c86 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8027988:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 802798c:	2b01      	cmp	r3, #1
 802798e:	d901      	bls.n	8027994 <find_volume+0x190>
 8027990:	230d      	movs	r3, #13
 8027992:	e178      	b.n	8027c86 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8027994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027996:	3330      	adds	r3, #48	@ 0x30
 8027998:	330b      	adds	r3, #11
 802799a:	4618      	mov	r0, r3
 802799c:	f7fe fd18 	bl	80263d0 <ld_word>
 80279a0:	4603      	mov	r3, r0
 80279a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80279a6:	d001      	beq.n	80279ac <find_volume+0x1a8>
 80279a8:	230d      	movs	r3, #13
 80279aa:	e16c      	b.n	8027c86 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80279ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279ae:	3330      	adds	r3, #48	@ 0x30
 80279b0:	3316      	adds	r3, #22
 80279b2:	4618      	mov	r0, r3
 80279b4:	f7fe fd0c 	bl	80263d0 <ld_word>
 80279b8:	4603      	mov	r3, r0
 80279ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80279bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80279be:	2b00      	cmp	r3, #0
 80279c0:	d106      	bne.n	80279d0 <find_volume+0x1cc>
 80279c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279c4:	3330      	adds	r3, #48	@ 0x30
 80279c6:	3324      	adds	r3, #36	@ 0x24
 80279c8:	4618      	mov	r0, r3
 80279ca:	f7fe fd19 	bl	8026400 <ld_dword>
 80279ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80279d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80279d4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80279d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279d8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80279dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80279e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279e2:	789b      	ldrb	r3, [r3, #2]
 80279e4:	2b01      	cmp	r3, #1
 80279e6:	d005      	beq.n	80279f4 <find_volume+0x1f0>
 80279e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279ea:	789b      	ldrb	r3, [r3, #2]
 80279ec:	2b02      	cmp	r3, #2
 80279ee:	d001      	beq.n	80279f4 <find_volume+0x1f0>
 80279f0:	230d      	movs	r3, #13
 80279f2:	e148      	b.n	8027c86 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80279f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279f6:	789b      	ldrb	r3, [r3, #2]
 80279f8:	461a      	mov	r2, r3
 80279fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80279fc:	fb02 f303 	mul.w	r3, r2, r3
 8027a00:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8027a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8027a08:	461a      	mov	r2, r3
 8027a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a0c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8027a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a10:	895b      	ldrh	r3, [r3, #10]
 8027a12:	2b00      	cmp	r3, #0
 8027a14:	d008      	beq.n	8027a28 <find_volume+0x224>
 8027a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a18:	895b      	ldrh	r3, [r3, #10]
 8027a1a:	461a      	mov	r2, r3
 8027a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a1e:	895b      	ldrh	r3, [r3, #10]
 8027a20:	3b01      	subs	r3, #1
 8027a22:	4013      	ands	r3, r2
 8027a24:	2b00      	cmp	r3, #0
 8027a26:	d001      	beq.n	8027a2c <find_volume+0x228>
 8027a28:	230d      	movs	r3, #13
 8027a2a:	e12c      	b.n	8027c86 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8027a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a2e:	3330      	adds	r3, #48	@ 0x30
 8027a30:	3311      	adds	r3, #17
 8027a32:	4618      	mov	r0, r3
 8027a34:	f7fe fccc 	bl	80263d0 <ld_word>
 8027a38:	4603      	mov	r3, r0
 8027a3a:	461a      	mov	r2, r3
 8027a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a3e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8027a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a42:	891b      	ldrh	r3, [r3, #8]
 8027a44:	f003 030f 	and.w	r3, r3, #15
 8027a48:	b29b      	uxth	r3, r3
 8027a4a:	2b00      	cmp	r3, #0
 8027a4c:	d001      	beq.n	8027a52 <find_volume+0x24e>
 8027a4e:	230d      	movs	r3, #13
 8027a50:	e119      	b.n	8027c86 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8027a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a54:	3330      	adds	r3, #48	@ 0x30
 8027a56:	3313      	adds	r3, #19
 8027a58:	4618      	mov	r0, r3
 8027a5a:	f7fe fcb9 	bl	80263d0 <ld_word>
 8027a5e:	4603      	mov	r3, r0
 8027a60:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8027a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8027a64:	2b00      	cmp	r3, #0
 8027a66:	d106      	bne.n	8027a76 <find_volume+0x272>
 8027a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a6a:	3330      	adds	r3, #48	@ 0x30
 8027a6c:	3320      	adds	r3, #32
 8027a6e:	4618      	mov	r0, r3
 8027a70:	f7fe fcc6 	bl	8026400 <ld_dword>
 8027a74:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8027a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a78:	3330      	adds	r3, #48	@ 0x30
 8027a7a:	330e      	adds	r3, #14
 8027a7c:	4618      	mov	r0, r3
 8027a7e:	f7fe fca7 	bl	80263d0 <ld_word>
 8027a82:	4603      	mov	r3, r0
 8027a84:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8027a86:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8027a88:	2b00      	cmp	r3, #0
 8027a8a:	d101      	bne.n	8027a90 <find_volume+0x28c>
 8027a8c:	230d      	movs	r3, #13
 8027a8e:	e0fa      	b.n	8027c86 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8027a90:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8027a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027a94:	4413      	add	r3, r2
 8027a96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8027a98:	8912      	ldrh	r2, [r2, #8]
 8027a9a:	0912      	lsrs	r2, r2, #4
 8027a9c:	b292      	uxth	r2, r2
 8027a9e:	4413      	add	r3, r2
 8027aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8027aa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8027aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027aa6:	429a      	cmp	r2, r3
 8027aa8:	d204      	bcs.n	8027ab4 <find_volume+0x2b0>
 8027aaa:	230d      	movs	r3, #13
 8027aac:	e0eb      	b.n	8027c86 <find_volume+0x482>
 8027aae:	bf00      	nop
 8027ab0:	24000a8c 	.word	0x24000a8c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8027ab4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8027ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027ab8:	1ad3      	subs	r3, r2, r3
 8027aba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8027abc:	8952      	ldrh	r2, [r2, #10]
 8027abe:	fbb3 f3f2 	udiv	r3, r3, r2
 8027ac2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8027ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027ac6:	2b00      	cmp	r3, #0
 8027ac8:	d101      	bne.n	8027ace <find_volume+0x2ca>
 8027aca:	230d      	movs	r3, #13
 8027acc:	e0db      	b.n	8027c86 <find_volume+0x482>
		fmt = FS_FAT32;
 8027ace:	2303      	movs	r3, #3
 8027ad0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8027ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027ad6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8027ada:	4293      	cmp	r3, r2
 8027adc:	d802      	bhi.n	8027ae4 <find_volume+0x2e0>
 8027ade:	2302      	movs	r3, #2
 8027ae0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8027ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027ae6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8027aea:	4293      	cmp	r3, r2
 8027aec:	d802      	bhi.n	8027af4 <find_volume+0x2f0>
 8027aee:	2301      	movs	r3, #1
 8027af0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8027af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027af6:	1c9a      	adds	r2, r3, #2
 8027af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027afa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8027afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027afe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8027b00:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8027b02:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8027b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8027b06:	441a      	add	r2, r3
 8027b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b0a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8027b0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8027b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027b10:	441a      	add	r2, r3
 8027b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b14:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8027b16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027b1a:	2b03      	cmp	r3, #3
 8027b1c:	d11e      	bne.n	8027b5c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8027b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b20:	3330      	adds	r3, #48	@ 0x30
 8027b22:	332a      	adds	r3, #42	@ 0x2a
 8027b24:	4618      	mov	r0, r3
 8027b26:	f7fe fc53 	bl	80263d0 <ld_word>
 8027b2a:	4603      	mov	r3, r0
 8027b2c:	2b00      	cmp	r3, #0
 8027b2e:	d001      	beq.n	8027b34 <find_volume+0x330>
 8027b30:	230d      	movs	r3, #13
 8027b32:	e0a8      	b.n	8027c86 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8027b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b36:	891b      	ldrh	r3, [r3, #8]
 8027b38:	2b00      	cmp	r3, #0
 8027b3a:	d001      	beq.n	8027b40 <find_volume+0x33c>
 8027b3c:	230d      	movs	r3, #13
 8027b3e:	e0a2      	b.n	8027c86 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8027b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b42:	3330      	adds	r3, #48	@ 0x30
 8027b44:	332c      	adds	r3, #44	@ 0x2c
 8027b46:	4618      	mov	r0, r3
 8027b48:	f7fe fc5a 	bl	8026400 <ld_dword>
 8027b4c:	4602      	mov	r2, r0
 8027b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b50:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8027b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b54:	695b      	ldr	r3, [r3, #20]
 8027b56:	009b      	lsls	r3, r3, #2
 8027b58:	647b      	str	r3, [r7, #68]	@ 0x44
 8027b5a:	e01f      	b.n	8027b9c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8027b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b5e:	891b      	ldrh	r3, [r3, #8]
 8027b60:	2b00      	cmp	r3, #0
 8027b62:	d101      	bne.n	8027b68 <find_volume+0x364>
 8027b64:	230d      	movs	r3, #13
 8027b66:	e08e      	b.n	8027c86 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8027b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b6a:	6a1a      	ldr	r2, [r3, #32]
 8027b6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027b6e:	441a      	add	r2, r3
 8027b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b72:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8027b74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027b78:	2b02      	cmp	r3, #2
 8027b7a:	d103      	bne.n	8027b84 <find_volume+0x380>
 8027b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b7e:	695b      	ldr	r3, [r3, #20]
 8027b80:	005b      	lsls	r3, r3, #1
 8027b82:	e00a      	b.n	8027b9a <find_volume+0x396>
 8027b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b86:	695a      	ldr	r2, [r3, #20]
 8027b88:	4613      	mov	r3, r2
 8027b8a:	005b      	lsls	r3, r3, #1
 8027b8c:	4413      	add	r3, r2
 8027b8e:	085a      	lsrs	r2, r3, #1
 8027b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b92:	695b      	ldr	r3, [r3, #20]
 8027b94:	f003 0301 	and.w	r3, r3, #1
 8027b98:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8027b9a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8027b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b9e:	699a      	ldr	r2, [r3, #24]
 8027ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8027ba2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8027ba6:	0a5b      	lsrs	r3, r3, #9
 8027ba8:	429a      	cmp	r2, r3
 8027baa:	d201      	bcs.n	8027bb0 <find_volume+0x3ac>
 8027bac:	230d      	movs	r3, #13
 8027bae:	e06a      	b.n	8027c86 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8027bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8027bb6:	611a      	str	r2, [r3, #16]
 8027bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bba:	691a      	ldr	r2, [r3, #16]
 8027bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bbe:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8027bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bc2:	2280      	movs	r2, #128	@ 0x80
 8027bc4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8027bc6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027bca:	2b03      	cmp	r3, #3
 8027bcc:	d149      	bne.n	8027c62 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8027bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bd0:	3330      	adds	r3, #48	@ 0x30
 8027bd2:	3330      	adds	r3, #48	@ 0x30
 8027bd4:	4618      	mov	r0, r3
 8027bd6:	f7fe fbfb 	bl	80263d0 <ld_word>
 8027bda:	4603      	mov	r3, r0
 8027bdc:	2b01      	cmp	r3, #1
 8027bde:	d140      	bne.n	8027c62 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8027be0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8027be2:	3301      	adds	r3, #1
 8027be4:	4619      	mov	r1, r3
 8027be6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8027be8:	f7fe fea2 	bl	8026930 <move_window>
 8027bec:	4603      	mov	r3, r0
 8027bee:	2b00      	cmp	r3, #0
 8027bf0:	d137      	bne.n	8027c62 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8027bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bf4:	2200      	movs	r2, #0
 8027bf6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8027bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bfa:	3330      	adds	r3, #48	@ 0x30
 8027bfc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8027c00:	4618      	mov	r0, r3
 8027c02:	f7fe fbe5 	bl	80263d0 <ld_word>
 8027c06:	4603      	mov	r3, r0
 8027c08:	461a      	mov	r2, r3
 8027c0a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8027c0e:	429a      	cmp	r2, r3
 8027c10:	d127      	bne.n	8027c62 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8027c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c14:	3330      	adds	r3, #48	@ 0x30
 8027c16:	4618      	mov	r0, r3
 8027c18:	f7fe fbf2 	bl	8026400 <ld_dword>
 8027c1c:	4603      	mov	r3, r0
 8027c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8027c90 <find_volume+0x48c>)
 8027c20:	4293      	cmp	r3, r2
 8027c22:	d11e      	bne.n	8027c62 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8027c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c26:	3330      	adds	r3, #48	@ 0x30
 8027c28:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8027c2c:	4618      	mov	r0, r3
 8027c2e:	f7fe fbe7 	bl	8026400 <ld_dword>
 8027c32:	4603      	mov	r3, r0
 8027c34:	4a17      	ldr	r2, [pc, #92]	@ (8027c94 <find_volume+0x490>)
 8027c36:	4293      	cmp	r3, r2
 8027c38:	d113      	bne.n	8027c62 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8027c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c3c:	3330      	adds	r3, #48	@ 0x30
 8027c3e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8027c42:	4618      	mov	r0, r3
 8027c44:	f7fe fbdc 	bl	8026400 <ld_dword>
 8027c48:	4602      	mov	r2, r0
 8027c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c4c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8027c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c50:	3330      	adds	r3, #48	@ 0x30
 8027c52:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8027c56:	4618      	mov	r0, r3
 8027c58:	f7fe fbd2 	bl	8026400 <ld_dword>
 8027c5c:	4602      	mov	r2, r0
 8027c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c60:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8027c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c64:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8027c68:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8027c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8027c98 <find_volume+0x494>)
 8027c6c:	881b      	ldrh	r3, [r3, #0]
 8027c6e:	3301      	adds	r3, #1
 8027c70:	b29a      	uxth	r2, r3
 8027c72:	4b09      	ldr	r3, [pc, #36]	@ (8027c98 <find_volume+0x494>)
 8027c74:	801a      	strh	r2, [r3, #0]
 8027c76:	4b08      	ldr	r3, [pc, #32]	@ (8027c98 <find_volume+0x494>)
 8027c78:	881a      	ldrh	r2, [r3, #0]
 8027c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c7c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8027c7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8027c80:	f7fe fdee 	bl	8026860 <clear_lock>
#endif
	return FR_OK;
 8027c84:	2300      	movs	r3, #0
}
 8027c86:	4618      	mov	r0, r3
 8027c88:	3758      	adds	r7, #88	@ 0x58
 8027c8a:	46bd      	mov	sp, r7
 8027c8c:	bd80      	pop	{r7, pc}
 8027c8e:	bf00      	nop
 8027c90:	41615252 	.word	0x41615252
 8027c94:	61417272 	.word	0x61417272
 8027c98:	24000a90 	.word	0x24000a90

08027c9c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8027c9c:	b580      	push	{r7, lr}
 8027c9e:	b084      	sub	sp, #16
 8027ca0:	af00      	add	r7, sp, #0
 8027ca2:	6078      	str	r0, [r7, #4]
 8027ca4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8027ca6:	2309      	movs	r3, #9
 8027ca8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8027caa:	687b      	ldr	r3, [r7, #4]
 8027cac:	2b00      	cmp	r3, #0
 8027cae:	d01c      	beq.n	8027cea <validate+0x4e>
 8027cb0:	687b      	ldr	r3, [r7, #4]
 8027cb2:	681b      	ldr	r3, [r3, #0]
 8027cb4:	2b00      	cmp	r3, #0
 8027cb6:	d018      	beq.n	8027cea <validate+0x4e>
 8027cb8:	687b      	ldr	r3, [r7, #4]
 8027cba:	681b      	ldr	r3, [r3, #0]
 8027cbc:	781b      	ldrb	r3, [r3, #0]
 8027cbe:	2b00      	cmp	r3, #0
 8027cc0:	d013      	beq.n	8027cea <validate+0x4e>
 8027cc2:	687b      	ldr	r3, [r7, #4]
 8027cc4:	889a      	ldrh	r2, [r3, #4]
 8027cc6:	687b      	ldr	r3, [r7, #4]
 8027cc8:	681b      	ldr	r3, [r3, #0]
 8027cca:	88db      	ldrh	r3, [r3, #6]
 8027ccc:	429a      	cmp	r2, r3
 8027cce:	d10c      	bne.n	8027cea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8027cd0:	687b      	ldr	r3, [r7, #4]
 8027cd2:	681b      	ldr	r3, [r3, #0]
 8027cd4:	785b      	ldrb	r3, [r3, #1]
 8027cd6:	4618      	mov	r0, r3
 8027cd8:	f7fe fada 	bl	8026290 <disk_status>
 8027cdc:	4603      	mov	r3, r0
 8027cde:	f003 0301 	and.w	r3, r3, #1
 8027ce2:	2b00      	cmp	r3, #0
 8027ce4:	d101      	bne.n	8027cea <validate+0x4e>
			res = FR_OK;
 8027ce6:	2300      	movs	r3, #0
 8027ce8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8027cea:	7bfb      	ldrb	r3, [r7, #15]
 8027cec:	2b00      	cmp	r3, #0
 8027cee:	d102      	bne.n	8027cf6 <validate+0x5a>
 8027cf0:	687b      	ldr	r3, [r7, #4]
 8027cf2:	681b      	ldr	r3, [r3, #0]
 8027cf4:	e000      	b.n	8027cf8 <validate+0x5c>
 8027cf6:	2300      	movs	r3, #0
 8027cf8:	683a      	ldr	r2, [r7, #0]
 8027cfa:	6013      	str	r3, [r2, #0]
	return res;
 8027cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8027cfe:	4618      	mov	r0, r3
 8027d00:	3710      	adds	r7, #16
 8027d02:	46bd      	mov	sp, r7
 8027d04:	bd80      	pop	{r7, pc}
	...

08027d08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8027d08:	b580      	push	{r7, lr}
 8027d0a:	b088      	sub	sp, #32
 8027d0c:	af00      	add	r7, sp, #0
 8027d0e:	60f8      	str	r0, [r7, #12]
 8027d10:	60b9      	str	r1, [r7, #8]
 8027d12:	4613      	mov	r3, r2
 8027d14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8027d16:	68bb      	ldr	r3, [r7, #8]
 8027d18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8027d1a:	f107 0310 	add.w	r3, r7, #16
 8027d1e:	4618      	mov	r0, r3
 8027d20:	f7ff fcd5 	bl	80276ce <get_ldnumber>
 8027d24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8027d26:	69fb      	ldr	r3, [r7, #28]
 8027d28:	2b00      	cmp	r3, #0
 8027d2a:	da01      	bge.n	8027d30 <f_mount+0x28>
 8027d2c:	230b      	movs	r3, #11
 8027d2e:	e02b      	b.n	8027d88 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8027d30:	4a17      	ldr	r2, [pc, #92]	@ (8027d90 <f_mount+0x88>)
 8027d32:	69fb      	ldr	r3, [r7, #28]
 8027d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027d38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8027d3a:	69bb      	ldr	r3, [r7, #24]
 8027d3c:	2b00      	cmp	r3, #0
 8027d3e:	d005      	beq.n	8027d4c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8027d40:	69b8      	ldr	r0, [r7, #24]
 8027d42:	f7fe fd8d 	bl	8026860 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8027d46:	69bb      	ldr	r3, [r7, #24]
 8027d48:	2200      	movs	r2, #0
 8027d4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8027d4c:	68fb      	ldr	r3, [r7, #12]
 8027d4e:	2b00      	cmp	r3, #0
 8027d50:	d002      	beq.n	8027d58 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8027d52:	68fb      	ldr	r3, [r7, #12]
 8027d54:	2200      	movs	r2, #0
 8027d56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8027d58:	68fa      	ldr	r2, [r7, #12]
 8027d5a:	490d      	ldr	r1, [pc, #52]	@ (8027d90 <f_mount+0x88>)
 8027d5c:	69fb      	ldr	r3, [r7, #28]
 8027d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8027d62:	68fb      	ldr	r3, [r7, #12]
 8027d64:	2b00      	cmp	r3, #0
 8027d66:	d002      	beq.n	8027d6e <f_mount+0x66>
 8027d68:	79fb      	ldrb	r3, [r7, #7]
 8027d6a:	2b01      	cmp	r3, #1
 8027d6c:	d001      	beq.n	8027d72 <f_mount+0x6a>
 8027d6e:	2300      	movs	r3, #0
 8027d70:	e00a      	b.n	8027d88 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8027d72:	f107 010c 	add.w	r1, r7, #12
 8027d76:	f107 0308 	add.w	r3, r7, #8
 8027d7a:	2200      	movs	r2, #0
 8027d7c:	4618      	mov	r0, r3
 8027d7e:	f7ff fd41 	bl	8027804 <find_volume>
 8027d82:	4603      	mov	r3, r0
 8027d84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8027d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8027d88:	4618      	mov	r0, r3
 8027d8a:	3720      	adds	r7, #32
 8027d8c:	46bd      	mov	sp, r7
 8027d8e:	bd80      	pop	{r7, pc}
 8027d90:	24000a8c 	.word	0x24000a8c

08027d94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8027d94:	b580      	push	{r7, lr}
 8027d96:	b098      	sub	sp, #96	@ 0x60
 8027d98:	af00      	add	r7, sp, #0
 8027d9a:	60f8      	str	r0, [r7, #12]
 8027d9c:	60b9      	str	r1, [r7, #8]
 8027d9e:	4613      	mov	r3, r2
 8027da0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8027da2:	68fb      	ldr	r3, [r7, #12]
 8027da4:	2b00      	cmp	r3, #0
 8027da6:	d101      	bne.n	8027dac <f_open+0x18>
 8027da8:	2309      	movs	r3, #9
 8027daa:	e1a9      	b.n	8028100 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8027dac:	79fb      	ldrb	r3, [r7, #7]
 8027dae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8027db2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8027db4:	79fa      	ldrb	r2, [r7, #7]
 8027db6:	f107 0110 	add.w	r1, r7, #16
 8027dba:	f107 0308 	add.w	r3, r7, #8
 8027dbe:	4618      	mov	r0, r3
 8027dc0:	f7ff fd20 	bl	8027804 <find_volume>
 8027dc4:	4603      	mov	r3, r0
 8027dc6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8027dca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027dce:	2b00      	cmp	r3, #0
 8027dd0:	f040 818d 	bne.w	80280ee <f_open+0x35a>
		dj.obj.fs = fs;
 8027dd4:	693b      	ldr	r3, [r7, #16]
 8027dd6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8027dd8:	68ba      	ldr	r2, [r7, #8]
 8027dda:	f107 0314 	add.w	r3, r7, #20
 8027dde:	4611      	mov	r1, r2
 8027de0:	4618      	mov	r0, r3
 8027de2:	f7ff fc03 	bl	80275ec <follow_path>
 8027de6:	4603      	mov	r3, r0
 8027de8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8027dec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027df0:	2b00      	cmp	r3, #0
 8027df2:	d118      	bne.n	8027e26 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8027df4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8027df8:	b25b      	sxtb	r3, r3
 8027dfa:	2b00      	cmp	r3, #0
 8027dfc:	da03      	bge.n	8027e06 <f_open+0x72>
				res = FR_INVALID_NAME;
 8027dfe:	2306      	movs	r3, #6
 8027e00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8027e04:	e00f      	b.n	8027e26 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8027e06:	79fb      	ldrb	r3, [r7, #7]
 8027e08:	2b01      	cmp	r3, #1
 8027e0a:	bf8c      	ite	hi
 8027e0c:	2301      	movhi	r3, #1
 8027e0e:	2300      	movls	r3, #0
 8027e10:	b2db      	uxtb	r3, r3
 8027e12:	461a      	mov	r2, r3
 8027e14:	f107 0314 	add.w	r3, r7, #20
 8027e18:	4611      	mov	r1, r2
 8027e1a:	4618      	mov	r0, r3
 8027e1c:	f7fe fbd8 	bl	80265d0 <chk_lock>
 8027e20:	4603      	mov	r3, r0
 8027e22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8027e26:	79fb      	ldrb	r3, [r7, #7]
 8027e28:	f003 031c 	and.w	r3, r3, #28
 8027e2c:	2b00      	cmp	r3, #0
 8027e2e:	d07f      	beq.n	8027f30 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8027e30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027e34:	2b00      	cmp	r3, #0
 8027e36:	d017      	beq.n	8027e68 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8027e38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027e3c:	2b04      	cmp	r3, #4
 8027e3e:	d10e      	bne.n	8027e5e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8027e40:	f7fe fc22 	bl	8026688 <enq_lock>
 8027e44:	4603      	mov	r3, r0
 8027e46:	2b00      	cmp	r3, #0
 8027e48:	d006      	beq.n	8027e58 <f_open+0xc4>
 8027e4a:	f107 0314 	add.w	r3, r7, #20
 8027e4e:	4618      	mov	r0, r3
 8027e50:	f7ff fb06 	bl	8027460 <dir_register>
 8027e54:	4603      	mov	r3, r0
 8027e56:	e000      	b.n	8027e5a <f_open+0xc6>
 8027e58:	2312      	movs	r3, #18
 8027e5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8027e5e:	79fb      	ldrb	r3, [r7, #7]
 8027e60:	f043 0308 	orr.w	r3, r3, #8
 8027e64:	71fb      	strb	r3, [r7, #7]
 8027e66:	e010      	b.n	8027e8a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8027e68:	7ebb      	ldrb	r3, [r7, #26]
 8027e6a:	f003 0311 	and.w	r3, r3, #17
 8027e6e:	2b00      	cmp	r3, #0
 8027e70:	d003      	beq.n	8027e7a <f_open+0xe6>
					res = FR_DENIED;
 8027e72:	2307      	movs	r3, #7
 8027e74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8027e78:	e007      	b.n	8027e8a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8027e7a:	79fb      	ldrb	r3, [r7, #7]
 8027e7c:	f003 0304 	and.w	r3, r3, #4
 8027e80:	2b00      	cmp	r3, #0
 8027e82:	d002      	beq.n	8027e8a <f_open+0xf6>
 8027e84:	2308      	movs	r3, #8
 8027e86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8027e8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027e8e:	2b00      	cmp	r3, #0
 8027e90:	d168      	bne.n	8027f64 <f_open+0x1d0>
 8027e92:	79fb      	ldrb	r3, [r7, #7]
 8027e94:	f003 0308 	and.w	r3, r3, #8
 8027e98:	2b00      	cmp	r3, #0
 8027e9a:	d063      	beq.n	8027f64 <f_open+0x1d0>
				dw = GET_FATTIME();
 8027e9c:	f7fd ff6c 	bl	8025d78 <get_fattime>
 8027ea0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8027ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027ea4:	330e      	adds	r3, #14
 8027ea6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8027ea8:	4618      	mov	r0, r3
 8027eaa:	f7fe fae7 	bl	802647c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8027eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027eb0:	3316      	adds	r3, #22
 8027eb2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8027eb4:	4618      	mov	r0, r3
 8027eb6:	f7fe fae1 	bl	802647c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8027eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027ebc:	330b      	adds	r3, #11
 8027ebe:	2220      	movs	r2, #32
 8027ec0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8027ec2:	693b      	ldr	r3, [r7, #16]
 8027ec4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8027ec6:	4611      	mov	r1, r2
 8027ec8:	4618      	mov	r0, r3
 8027eca:	f7ff fa35 	bl	8027338 <ld_clust>
 8027ece:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8027ed0:	693b      	ldr	r3, [r7, #16]
 8027ed2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8027ed4:	2200      	movs	r2, #0
 8027ed6:	4618      	mov	r0, r3
 8027ed8:	f7ff fa4d 	bl	8027376 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8027edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027ede:	331c      	adds	r3, #28
 8027ee0:	2100      	movs	r1, #0
 8027ee2:	4618      	mov	r0, r3
 8027ee4:	f7fe faca 	bl	802647c <st_dword>
					fs->wflag = 1;
 8027ee8:	693b      	ldr	r3, [r7, #16]
 8027eea:	2201      	movs	r2, #1
 8027eec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8027eee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027ef0:	2b00      	cmp	r3, #0
 8027ef2:	d037      	beq.n	8027f64 <f_open+0x1d0>
						dw = fs->winsect;
 8027ef4:	693b      	ldr	r3, [r7, #16]
 8027ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8027ef8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8027efa:	f107 0314 	add.w	r3, r7, #20
 8027efe:	2200      	movs	r2, #0
 8027f00:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8027f02:	4618      	mov	r0, r3
 8027f04:	f7fe ff60 	bl	8026dc8 <remove_chain>
 8027f08:	4603      	mov	r3, r0
 8027f0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8027f0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027f12:	2b00      	cmp	r3, #0
 8027f14:	d126      	bne.n	8027f64 <f_open+0x1d0>
							res = move_window(fs, dw);
 8027f16:	693b      	ldr	r3, [r7, #16]
 8027f18:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8027f1a:	4618      	mov	r0, r3
 8027f1c:	f7fe fd08 	bl	8026930 <move_window>
 8027f20:	4603      	mov	r3, r0
 8027f22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8027f26:	693b      	ldr	r3, [r7, #16]
 8027f28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8027f2a:	3a01      	subs	r2, #1
 8027f2c:	60da      	str	r2, [r3, #12]
 8027f2e:	e019      	b.n	8027f64 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8027f30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027f34:	2b00      	cmp	r3, #0
 8027f36:	d115      	bne.n	8027f64 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8027f38:	7ebb      	ldrb	r3, [r7, #26]
 8027f3a:	f003 0310 	and.w	r3, r3, #16
 8027f3e:	2b00      	cmp	r3, #0
 8027f40:	d003      	beq.n	8027f4a <f_open+0x1b6>
					res = FR_NO_FILE;
 8027f42:	2304      	movs	r3, #4
 8027f44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8027f48:	e00c      	b.n	8027f64 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8027f4a:	79fb      	ldrb	r3, [r7, #7]
 8027f4c:	f003 0302 	and.w	r3, r3, #2
 8027f50:	2b00      	cmp	r3, #0
 8027f52:	d007      	beq.n	8027f64 <f_open+0x1d0>
 8027f54:	7ebb      	ldrb	r3, [r7, #26]
 8027f56:	f003 0301 	and.w	r3, r3, #1
 8027f5a:	2b00      	cmp	r3, #0
 8027f5c:	d002      	beq.n	8027f64 <f_open+0x1d0>
						res = FR_DENIED;
 8027f5e:	2307      	movs	r3, #7
 8027f60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8027f64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027f68:	2b00      	cmp	r3, #0
 8027f6a:	d126      	bne.n	8027fba <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8027f6c:	79fb      	ldrb	r3, [r7, #7]
 8027f6e:	f003 0308 	and.w	r3, r3, #8
 8027f72:	2b00      	cmp	r3, #0
 8027f74:	d003      	beq.n	8027f7e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8027f76:	79fb      	ldrb	r3, [r7, #7]
 8027f78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8027f7c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8027f7e:	693b      	ldr	r3, [r7, #16]
 8027f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8027f82:	68fb      	ldr	r3, [r7, #12]
 8027f84:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8027f86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8027f88:	68fb      	ldr	r3, [r7, #12]
 8027f8a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8027f8c:	79fb      	ldrb	r3, [r7, #7]
 8027f8e:	2b01      	cmp	r3, #1
 8027f90:	bf8c      	ite	hi
 8027f92:	2301      	movhi	r3, #1
 8027f94:	2300      	movls	r3, #0
 8027f96:	b2db      	uxtb	r3, r3
 8027f98:	461a      	mov	r2, r3
 8027f9a:	f107 0314 	add.w	r3, r7, #20
 8027f9e:	4611      	mov	r1, r2
 8027fa0:	4618      	mov	r0, r3
 8027fa2:	f7fe fb93 	bl	80266cc <inc_lock>
 8027fa6:	4602      	mov	r2, r0
 8027fa8:	68fb      	ldr	r3, [r7, #12]
 8027faa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8027fac:	68fb      	ldr	r3, [r7, #12]
 8027fae:	691b      	ldr	r3, [r3, #16]
 8027fb0:	2b00      	cmp	r3, #0
 8027fb2:	d102      	bne.n	8027fba <f_open+0x226>
 8027fb4:	2302      	movs	r3, #2
 8027fb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8027fba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027fbe:	2b00      	cmp	r3, #0
 8027fc0:	f040 8095 	bne.w	80280ee <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8027fc4:	693b      	ldr	r3, [r7, #16]
 8027fc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8027fc8:	4611      	mov	r1, r2
 8027fca:	4618      	mov	r0, r3
 8027fcc:	f7ff f9b4 	bl	8027338 <ld_clust>
 8027fd0:	4602      	mov	r2, r0
 8027fd2:	68fb      	ldr	r3, [r7, #12]
 8027fd4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8027fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027fd8:	331c      	adds	r3, #28
 8027fda:	4618      	mov	r0, r3
 8027fdc:	f7fe fa10 	bl	8026400 <ld_dword>
 8027fe0:	4602      	mov	r2, r0
 8027fe2:	68fb      	ldr	r3, [r7, #12]
 8027fe4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8027fe6:	68fb      	ldr	r3, [r7, #12]
 8027fe8:	2200      	movs	r2, #0
 8027fea:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8027fec:	693a      	ldr	r2, [r7, #16]
 8027fee:	68fb      	ldr	r3, [r7, #12]
 8027ff0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8027ff2:	693b      	ldr	r3, [r7, #16]
 8027ff4:	88da      	ldrh	r2, [r3, #6]
 8027ff6:	68fb      	ldr	r3, [r7, #12]
 8027ff8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8027ffa:	68fb      	ldr	r3, [r7, #12]
 8027ffc:	79fa      	ldrb	r2, [r7, #7]
 8027ffe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8028000:	68fb      	ldr	r3, [r7, #12]
 8028002:	2200      	movs	r2, #0
 8028004:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8028006:	68fb      	ldr	r3, [r7, #12]
 8028008:	2200      	movs	r2, #0
 802800a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 802800c:	68fb      	ldr	r3, [r7, #12]
 802800e:	2200      	movs	r2, #0
 8028010:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8028012:	68fb      	ldr	r3, [r7, #12]
 8028014:	3330      	adds	r3, #48	@ 0x30
 8028016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 802801a:	2100      	movs	r1, #0
 802801c:	4618      	mov	r0, r3
 802801e:	f7fe fa7a 	bl	8026516 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8028022:	79fb      	ldrb	r3, [r7, #7]
 8028024:	f003 0320 	and.w	r3, r3, #32
 8028028:	2b00      	cmp	r3, #0
 802802a:	d060      	beq.n	80280ee <f_open+0x35a>
 802802c:	68fb      	ldr	r3, [r7, #12]
 802802e:	68db      	ldr	r3, [r3, #12]
 8028030:	2b00      	cmp	r3, #0
 8028032:	d05c      	beq.n	80280ee <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8028034:	68fb      	ldr	r3, [r7, #12]
 8028036:	68da      	ldr	r2, [r3, #12]
 8028038:	68fb      	ldr	r3, [r7, #12]
 802803a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 802803c:	693b      	ldr	r3, [r7, #16]
 802803e:	895b      	ldrh	r3, [r3, #10]
 8028040:	025b      	lsls	r3, r3, #9
 8028042:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8028044:	68fb      	ldr	r3, [r7, #12]
 8028046:	689b      	ldr	r3, [r3, #8]
 8028048:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 802804a:	68fb      	ldr	r3, [r7, #12]
 802804c:	68db      	ldr	r3, [r3, #12]
 802804e:	657b      	str	r3, [r7, #84]	@ 0x54
 8028050:	e016      	b.n	8028080 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8028052:	68fb      	ldr	r3, [r7, #12]
 8028054:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8028056:	4618      	mov	r0, r3
 8028058:	f7fe fd25 	bl	8026aa6 <get_fat>
 802805c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 802805e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8028060:	2b01      	cmp	r3, #1
 8028062:	d802      	bhi.n	802806a <f_open+0x2d6>
 8028064:	2302      	movs	r3, #2
 8028066:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 802806a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802806c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028070:	d102      	bne.n	8028078 <f_open+0x2e4>
 8028072:	2301      	movs	r3, #1
 8028074:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8028078:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802807a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802807c:	1ad3      	subs	r3, r2, r3
 802807e:	657b      	str	r3, [r7, #84]	@ 0x54
 8028080:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8028084:	2b00      	cmp	r3, #0
 8028086:	d103      	bne.n	8028090 <f_open+0x2fc>
 8028088:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802808a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802808c:	429a      	cmp	r2, r3
 802808e:	d8e0      	bhi.n	8028052 <f_open+0x2be>
				}
				fp->clust = clst;
 8028090:	68fb      	ldr	r3, [r7, #12]
 8028092:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8028094:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8028096:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802809a:	2b00      	cmp	r3, #0
 802809c:	d127      	bne.n	80280ee <f_open+0x35a>
 802809e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80280a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80280a4:	2b00      	cmp	r3, #0
 80280a6:	d022      	beq.n	80280ee <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80280a8:	693b      	ldr	r3, [r7, #16]
 80280aa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80280ac:	4618      	mov	r0, r3
 80280ae:	f7fe fcdb 	bl	8026a68 <clust2sect>
 80280b2:	6478      	str	r0, [r7, #68]	@ 0x44
 80280b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80280b6:	2b00      	cmp	r3, #0
 80280b8:	d103      	bne.n	80280c2 <f_open+0x32e>
						res = FR_INT_ERR;
 80280ba:	2302      	movs	r3, #2
 80280bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80280c0:	e015      	b.n	80280ee <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80280c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80280c4:	0a5a      	lsrs	r2, r3, #9
 80280c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80280c8:	441a      	add	r2, r3
 80280ca:	68fb      	ldr	r3, [r7, #12]
 80280cc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80280ce:	693b      	ldr	r3, [r7, #16]
 80280d0:	7858      	ldrb	r0, [r3, #1]
 80280d2:	68fb      	ldr	r3, [r7, #12]
 80280d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80280d8:	68fb      	ldr	r3, [r7, #12]
 80280da:	6a1a      	ldr	r2, [r3, #32]
 80280dc:	2301      	movs	r3, #1
 80280de:	f7fe f919 	bl	8026314 <disk_read>
 80280e2:	4603      	mov	r3, r0
 80280e4:	2b00      	cmp	r3, #0
 80280e6:	d002      	beq.n	80280ee <f_open+0x35a>
 80280e8:	2301      	movs	r3, #1
 80280ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80280ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80280f2:	2b00      	cmp	r3, #0
 80280f4:	d002      	beq.n	80280fc <f_open+0x368>
 80280f6:	68fb      	ldr	r3, [r7, #12]
 80280f8:	2200      	movs	r2, #0
 80280fa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80280fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8028100:	4618      	mov	r0, r3
 8028102:	3760      	adds	r7, #96	@ 0x60
 8028104:	46bd      	mov	sp, r7
 8028106:	bd80      	pop	{r7, pc}

08028108 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8028108:	b580      	push	{r7, lr}
 802810a:	b08e      	sub	sp, #56	@ 0x38
 802810c:	af00      	add	r7, sp, #0
 802810e:	60f8      	str	r0, [r7, #12]
 8028110:	60b9      	str	r1, [r7, #8]
 8028112:	607a      	str	r2, [r7, #4]
 8028114:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8028116:	68bb      	ldr	r3, [r7, #8]
 8028118:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 802811a:	683b      	ldr	r3, [r7, #0]
 802811c:	2200      	movs	r2, #0
 802811e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8028120:	68fb      	ldr	r3, [r7, #12]
 8028122:	f107 0214 	add.w	r2, r7, #20
 8028126:	4611      	mov	r1, r2
 8028128:	4618      	mov	r0, r3
 802812a:	f7ff fdb7 	bl	8027c9c <validate>
 802812e:	4603      	mov	r3, r0
 8028130:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8028134:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8028138:	2b00      	cmp	r3, #0
 802813a:	d107      	bne.n	802814c <f_read+0x44>
 802813c:	68fb      	ldr	r3, [r7, #12]
 802813e:	7d5b      	ldrb	r3, [r3, #21]
 8028140:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8028144:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8028148:	2b00      	cmp	r3, #0
 802814a:	d002      	beq.n	8028152 <f_read+0x4a>
 802814c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8028150:	e115      	b.n	802837e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8028152:	68fb      	ldr	r3, [r7, #12]
 8028154:	7d1b      	ldrb	r3, [r3, #20]
 8028156:	f003 0301 	and.w	r3, r3, #1
 802815a:	2b00      	cmp	r3, #0
 802815c:	d101      	bne.n	8028162 <f_read+0x5a>
 802815e:	2307      	movs	r3, #7
 8028160:	e10d      	b.n	802837e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8028162:	68fb      	ldr	r3, [r7, #12]
 8028164:	68da      	ldr	r2, [r3, #12]
 8028166:	68fb      	ldr	r3, [r7, #12]
 8028168:	699b      	ldr	r3, [r3, #24]
 802816a:	1ad3      	subs	r3, r2, r3
 802816c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 802816e:	687a      	ldr	r2, [r7, #4]
 8028170:	6a3b      	ldr	r3, [r7, #32]
 8028172:	429a      	cmp	r2, r3
 8028174:	f240 80fe 	bls.w	8028374 <f_read+0x26c>
 8028178:	6a3b      	ldr	r3, [r7, #32]
 802817a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 802817c:	e0fa      	b.n	8028374 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 802817e:	68fb      	ldr	r3, [r7, #12]
 8028180:	699b      	ldr	r3, [r3, #24]
 8028182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028186:	2b00      	cmp	r3, #0
 8028188:	f040 80c6 	bne.w	8028318 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 802818c:	68fb      	ldr	r3, [r7, #12]
 802818e:	699b      	ldr	r3, [r3, #24]
 8028190:	0a5b      	lsrs	r3, r3, #9
 8028192:	697a      	ldr	r2, [r7, #20]
 8028194:	8952      	ldrh	r2, [r2, #10]
 8028196:	3a01      	subs	r2, #1
 8028198:	4013      	ands	r3, r2
 802819a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 802819c:	69fb      	ldr	r3, [r7, #28]
 802819e:	2b00      	cmp	r3, #0
 80281a0:	d12f      	bne.n	8028202 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80281a2:	68fb      	ldr	r3, [r7, #12]
 80281a4:	699b      	ldr	r3, [r3, #24]
 80281a6:	2b00      	cmp	r3, #0
 80281a8:	d103      	bne.n	80281b2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80281aa:	68fb      	ldr	r3, [r7, #12]
 80281ac:	689b      	ldr	r3, [r3, #8]
 80281ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80281b0:	e013      	b.n	80281da <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80281b2:	68fb      	ldr	r3, [r7, #12]
 80281b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80281b6:	2b00      	cmp	r3, #0
 80281b8:	d007      	beq.n	80281ca <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80281ba:	68fb      	ldr	r3, [r7, #12]
 80281bc:	699b      	ldr	r3, [r3, #24]
 80281be:	4619      	mov	r1, r3
 80281c0:	68f8      	ldr	r0, [r7, #12]
 80281c2:	f7fe fefe 	bl	8026fc2 <clmt_clust>
 80281c6:	6338      	str	r0, [r7, #48]	@ 0x30
 80281c8:	e007      	b.n	80281da <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80281ca:	68fa      	ldr	r2, [r7, #12]
 80281cc:	68fb      	ldr	r3, [r7, #12]
 80281ce:	69db      	ldr	r3, [r3, #28]
 80281d0:	4619      	mov	r1, r3
 80281d2:	4610      	mov	r0, r2
 80281d4:	f7fe fc67 	bl	8026aa6 <get_fat>
 80281d8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80281da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80281dc:	2b01      	cmp	r3, #1
 80281de:	d804      	bhi.n	80281ea <f_read+0xe2>
 80281e0:	68fb      	ldr	r3, [r7, #12]
 80281e2:	2202      	movs	r2, #2
 80281e4:	755a      	strb	r2, [r3, #21]
 80281e6:	2302      	movs	r3, #2
 80281e8:	e0c9      	b.n	802837e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80281ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80281ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80281f0:	d104      	bne.n	80281fc <f_read+0xf4>
 80281f2:	68fb      	ldr	r3, [r7, #12]
 80281f4:	2201      	movs	r2, #1
 80281f6:	755a      	strb	r2, [r3, #21]
 80281f8:	2301      	movs	r3, #1
 80281fa:	e0c0      	b.n	802837e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80281fc:	68fb      	ldr	r3, [r7, #12]
 80281fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8028200:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8028202:	697a      	ldr	r2, [r7, #20]
 8028204:	68fb      	ldr	r3, [r7, #12]
 8028206:	69db      	ldr	r3, [r3, #28]
 8028208:	4619      	mov	r1, r3
 802820a:	4610      	mov	r0, r2
 802820c:	f7fe fc2c 	bl	8026a68 <clust2sect>
 8028210:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8028212:	69bb      	ldr	r3, [r7, #24]
 8028214:	2b00      	cmp	r3, #0
 8028216:	d104      	bne.n	8028222 <f_read+0x11a>
 8028218:	68fb      	ldr	r3, [r7, #12]
 802821a:	2202      	movs	r2, #2
 802821c:	755a      	strb	r2, [r3, #21]
 802821e:	2302      	movs	r3, #2
 8028220:	e0ad      	b.n	802837e <f_read+0x276>
			sect += csect;
 8028222:	69ba      	ldr	r2, [r7, #24]
 8028224:	69fb      	ldr	r3, [r7, #28]
 8028226:	4413      	add	r3, r2
 8028228:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 802822a:	687b      	ldr	r3, [r7, #4]
 802822c:	0a5b      	lsrs	r3, r3, #9
 802822e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8028230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8028232:	2b00      	cmp	r3, #0
 8028234:	d039      	beq.n	80282aa <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8028236:	69fa      	ldr	r2, [r7, #28]
 8028238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802823a:	4413      	add	r3, r2
 802823c:	697a      	ldr	r2, [r7, #20]
 802823e:	8952      	ldrh	r2, [r2, #10]
 8028240:	4293      	cmp	r3, r2
 8028242:	d905      	bls.n	8028250 <f_read+0x148>
					cc = fs->csize - csect;
 8028244:	697b      	ldr	r3, [r7, #20]
 8028246:	895b      	ldrh	r3, [r3, #10]
 8028248:	461a      	mov	r2, r3
 802824a:	69fb      	ldr	r3, [r7, #28]
 802824c:	1ad3      	subs	r3, r2, r3
 802824e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8028250:	697b      	ldr	r3, [r7, #20]
 8028252:	7858      	ldrb	r0, [r3, #1]
 8028254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8028256:	69ba      	ldr	r2, [r7, #24]
 8028258:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 802825a:	f7fe f85b 	bl	8026314 <disk_read>
 802825e:	4603      	mov	r3, r0
 8028260:	2b00      	cmp	r3, #0
 8028262:	d004      	beq.n	802826e <f_read+0x166>
 8028264:	68fb      	ldr	r3, [r7, #12]
 8028266:	2201      	movs	r2, #1
 8028268:	755a      	strb	r2, [r3, #21]
 802826a:	2301      	movs	r3, #1
 802826c:	e087      	b.n	802837e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 802826e:	68fb      	ldr	r3, [r7, #12]
 8028270:	7d1b      	ldrb	r3, [r3, #20]
 8028272:	b25b      	sxtb	r3, r3
 8028274:	2b00      	cmp	r3, #0
 8028276:	da14      	bge.n	80282a2 <f_read+0x19a>
 8028278:	68fb      	ldr	r3, [r7, #12]
 802827a:	6a1a      	ldr	r2, [r3, #32]
 802827c:	69bb      	ldr	r3, [r7, #24]
 802827e:	1ad3      	subs	r3, r2, r3
 8028280:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8028282:	429a      	cmp	r2, r3
 8028284:	d90d      	bls.n	80282a2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8028286:	68fb      	ldr	r3, [r7, #12]
 8028288:	6a1a      	ldr	r2, [r3, #32]
 802828a:	69bb      	ldr	r3, [r7, #24]
 802828c:	1ad3      	subs	r3, r2, r3
 802828e:	025b      	lsls	r3, r3, #9
 8028290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8028292:	18d0      	adds	r0, r2, r3
 8028294:	68fb      	ldr	r3, [r7, #12]
 8028296:	3330      	adds	r3, #48	@ 0x30
 8028298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 802829c:	4619      	mov	r1, r3
 802829e:	f7fe f919 	bl	80264d4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80282a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80282a4:	025b      	lsls	r3, r3, #9
 80282a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80282a8:	e050      	b.n	802834c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80282aa:	68fb      	ldr	r3, [r7, #12]
 80282ac:	6a1b      	ldr	r3, [r3, #32]
 80282ae:	69ba      	ldr	r2, [r7, #24]
 80282b0:	429a      	cmp	r2, r3
 80282b2:	d02e      	beq.n	8028312 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80282b4:	68fb      	ldr	r3, [r7, #12]
 80282b6:	7d1b      	ldrb	r3, [r3, #20]
 80282b8:	b25b      	sxtb	r3, r3
 80282ba:	2b00      	cmp	r3, #0
 80282bc:	da18      	bge.n	80282f0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80282be:	697b      	ldr	r3, [r7, #20]
 80282c0:	7858      	ldrb	r0, [r3, #1]
 80282c2:	68fb      	ldr	r3, [r7, #12]
 80282c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80282c8:	68fb      	ldr	r3, [r7, #12]
 80282ca:	6a1a      	ldr	r2, [r3, #32]
 80282cc:	2301      	movs	r3, #1
 80282ce:	f7fe f841 	bl	8026354 <disk_write>
 80282d2:	4603      	mov	r3, r0
 80282d4:	2b00      	cmp	r3, #0
 80282d6:	d004      	beq.n	80282e2 <f_read+0x1da>
 80282d8:	68fb      	ldr	r3, [r7, #12]
 80282da:	2201      	movs	r2, #1
 80282dc:	755a      	strb	r2, [r3, #21]
 80282de:	2301      	movs	r3, #1
 80282e0:	e04d      	b.n	802837e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80282e2:	68fb      	ldr	r3, [r7, #12]
 80282e4:	7d1b      	ldrb	r3, [r3, #20]
 80282e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80282ea:	b2da      	uxtb	r2, r3
 80282ec:	68fb      	ldr	r3, [r7, #12]
 80282ee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80282f0:	697b      	ldr	r3, [r7, #20]
 80282f2:	7858      	ldrb	r0, [r3, #1]
 80282f4:	68fb      	ldr	r3, [r7, #12]
 80282f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80282fa:	2301      	movs	r3, #1
 80282fc:	69ba      	ldr	r2, [r7, #24]
 80282fe:	f7fe f809 	bl	8026314 <disk_read>
 8028302:	4603      	mov	r3, r0
 8028304:	2b00      	cmp	r3, #0
 8028306:	d004      	beq.n	8028312 <f_read+0x20a>
 8028308:	68fb      	ldr	r3, [r7, #12]
 802830a:	2201      	movs	r2, #1
 802830c:	755a      	strb	r2, [r3, #21]
 802830e:	2301      	movs	r3, #1
 8028310:	e035      	b.n	802837e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8028312:	68fb      	ldr	r3, [r7, #12]
 8028314:	69ba      	ldr	r2, [r7, #24]
 8028316:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8028318:	68fb      	ldr	r3, [r7, #12]
 802831a:	699b      	ldr	r3, [r3, #24]
 802831c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028320:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8028324:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8028326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8028328:	687b      	ldr	r3, [r7, #4]
 802832a:	429a      	cmp	r2, r3
 802832c:	d901      	bls.n	8028332 <f_read+0x22a>
 802832e:	687b      	ldr	r3, [r7, #4]
 8028330:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8028332:	68fb      	ldr	r3, [r7, #12]
 8028334:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8028338:	68fb      	ldr	r3, [r7, #12]
 802833a:	699b      	ldr	r3, [r3, #24]
 802833c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028340:	4413      	add	r3, r2
 8028342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8028344:	4619      	mov	r1, r3
 8028346:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8028348:	f7fe f8c4 	bl	80264d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 802834c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802834e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8028350:	4413      	add	r3, r2
 8028352:	627b      	str	r3, [r7, #36]	@ 0x24
 8028354:	68fb      	ldr	r3, [r7, #12]
 8028356:	699a      	ldr	r2, [r3, #24]
 8028358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802835a:	441a      	add	r2, r3
 802835c:	68fb      	ldr	r3, [r7, #12]
 802835e:	619a      	str	r2, [r3, #24]
 8028360:	683b      	ldr	r3, [r7, #0]
 8028362:	681a      	ldr	r2, [r3, #0]
 8028364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8028366:	441a      	add	r2, r3
 8028368:	683b      	ldr	r3, [r7, #0]
 802836a:	601a      	str	r2, [r3, #0]
 802836c:	687a      	ldr	r2, [r7, #4]
 802836e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8028370:	1ad3      	subs	r3, r2, r3
 8028372:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8028374:	687b      	ldr	r3, [r7, #4]
 8028376:	2b00      	cmp	r3, #0
 8028378:	f47f af01 	bne.w	802817e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 802837c:	2300      	movs	r3, #0
}
 802837e:	4618      	mov	r0, r3
 8028380:	3738      	adds	r7, #56	@ 0x38
 8028382:	46bd      	mov	sp, r7
 8028384:	bd80      	pop	{r7, pc}

08028386 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8028386:	b580      	push	{r7, lr}
 8028388:	b086      	sub	sp, #24
 802838a:	af00      	add	r7, sp, #0
 802838c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 802838e:	687b      	ldr	r3, [r7, #4]
 8028390:	f107 0208 	add.w	r2, r7, #8
 8028394:	4611      	mov	r1, r2
 8028396:	4618      	mov	r0, r3
 8028398:	f7ff fc80 	bl	8027c9c <validate>
 802839c:	4603      	mov	r3, r0
 802839e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80283a0:	7dfb      	ldrb	r3, [r7, #23]
 80283a2:	2b00      	cmp	r3, #0
 80283a4:	d168      	bne.n	8028478 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80283a6:	687b      	ldr	r3, [r7, #4]
 80283a8:	7d1b      	ldrb	r3, [r3, #20]
 80283aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80283ae:	2b00      	cmp	r3, #0
 80283b0:	d062      	beq.n	8028478 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80283b2:	687b      	ldr	r3, [r7, #4]
 80283b4:	7d1b      	ldrb	r3, [r3, #20]
 80283b6:	b25b      	sxtb	r3, r3
 80283b8:	2b00      	cmp	r3, #0
 80283ba:	da15      	bge.n	80283e8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80283bc:	68bb      	ldr	r3, [r7, #8]
 80283be:	7858      	ldrb	r0, [r3, #1]
 80283c0:	687b      	ldr	r3, [r7, #4]
 80283c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80283c6:	687b      	ldr	r3, [r7, #4]
 80283c8:	6a1a      	ldr	r2, [r3, #32]
 80283ca:	2301      	movs	r3, #1
 80283cc:	f7fd ffc2 	bl	8026354 <disk_write>
 80283d0:	4603      	mov	r3, r0
 80283d2:	2b00      	cmp	r3, #0
 80283d4:	d001      	beq.n	80283da <f_sync+0x54>
 80283d6:	2301      	movs	r3, #1
 80283d8:	e04f      	b.n	802847a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80283da:	687b      	ldr	r3, [r7, #4]
 80283dc:	7d1b      	ldrb	r3, [r3, #20]
 80283de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80283e2:	b2da      	uxtb	r2, r3
 80283e4:	687b      	ldr	r3, [r7, #4]
 80283e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80283e8:	f7fd fcc6 	bl	8025d78 <get_fattime>
 80283ec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80283ee:	68ba      	ldr	r2, [r7, #8]
 80283f0:	687b      	ldr	r3, [r7, #4]
 80283f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80283f4:	4619      	mov	r1, r3
 80283f6:	4610      	mov	r0, r2
 80283f8:	f7fe fa9a 	bl	8026930 <move_window>
 80283fc:	4603      	mov	r3, r0
 80283fe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8028400:	7dfb      	ldrb	r3, [r7, #23]
 8028402:	2b00      	cmp	r3, #0
 8028404:	d138      	bne.n	8028478 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8028406:	687b      	ldr	r3, [r7, #4]
 8028408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802840a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 802840c:	68fb      	ldr	r3, [r7, #12]
 802840e:	330b      	adds	r3, #11
 8028410:	781a      	ldrb	r2, [r3, #0]
 8028412:	68fb      	ldr	r3, [r7, #12]
 8028414:	330b      	adds	r3, #11
 8028416:	f042 0220 	orr.w	r2, r2, #32
 802841a:	b2d2      	uxtb	r2, r2
 802841c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 802841e:	687b      	ldr	r3, [r7, #4]
 8028420:	6818      	ldr	r0, [r3, #0]
 8028422:	687b      	ldr	r3, [r7, #4]
 8028424:	689b      	ldr	r3, [r3, #8]
 8028426:	461a      	mov	r2, r3
 8028428:	68f9      	ldr	r1, [r7, #12]
 802842a:	f7fe ffa4 	bl	8027376 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 802842e:	68fb      	ldr	r3, [r7, #12]
 8028430:	f103 021c 	add.w	r2, r3, #28
 8028434:	687b      	ldr	r3, [r7, #4]
 8028436:	68db      	ldr	r3, [r3, #12]
 8028438:	4619      	mov	r1, r3
 802843a:	4610      	mov	r0, r2
 802843c:	f7fe f81e 	bl	802647c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8028440:	68fb      	ldr	r3, [r7, #12]
 8028442:	3316      	adds	r3, #22
 8028444:	6939      	ldr	r1, [r7, #16]
 8028446:	4618      	mov	r0, r3
 8028448:	f7fe f818 	bl	802647c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 802844c:	68fb      	ldr	r3, [r7, #12]
 802844e:	3312      	adds	r3, #18
 8028450:	2100      	movs	r1, #0
 8028452:	4618      	mov	r0, r3
 8028454:	f7fd fff7 	bl	8026446 <st_word>
					fs->wflag = 1;
 8028458:	68bb      	ldr	r3, [r7, #8]
 802845a:	2201      	movs	r2, #1
 802845c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 802845e:	68bb      	ldr	r3, [r7, #8]
 8028460:	4618      	mov	r0, r3
 8028462:	f7fe fa93 	bl	802698c <sync_fs>
 8028466:	4603      	mov	r3, r0
 8028468:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 802846a:	687b      	ldr	r3, [r7, #4]
 802846c:	7d1b      	ldrb	r3, [r3, #20]
 802846e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8028472:	b2da      	uxtb	r2, r3
 8028474:	687b      	ldr	r3, [r7, #4]
 8028476:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8028478:	7dfb      	ldrb	r3, [r7, #23]
}
 802847a:	4618      	mov	r0, r3
 802847c:	3718      	adds	r7, #24
 802847e:	46bd      	mov	sp, r7
 8028480:	bd80      	pop	{r7, pc}

08028482 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8028482:	b580      	push	{r7, lr}
 8028484:	b084      	sub	sp, #16
 8028486:	af00      	add	r7, sp, #0
 8028488:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 802848a:	6878      	ldr	r0, [r7, #4]
 802848c:	f7ff ff7b 	bl	8028386 <f_sync>
 8028490:	4603      	mov	r3, r0
 8028492:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8028494:	7bfb      	ldrb	r3, [r7, #15]
 8028496:	2b00      	cmp	r3, #0
 8028498:	d118      	bne.n	80284cc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 802849a:	687b      	ldr	r3, [r7, #4]
 802849c:	f107 0208 	add.w	r2, r7, #8
 80284a0:	4611      	mov	r1, r2
 80284a2:	4618      	mov	r0, r3
 80284a4:	f7ff fbfa 	bl	8027c9c <validate>
 80284a8:	4603      	mov	r3, r0
 80284aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80284ac:	7bfb      	ldrb	r3, [r7, #15]
 80284ae:	2b00      	cmp	r3, #0
 80284b0:	d10c      	bne.n	80284cc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80284b2:	687b      	ldr	r3, [r7, #4]
 80284b4:	691b      	ldr	r3, [r3, #16]
 80284b6:	4618      	mov	r0, r3
 80284b8:	f7fe f996 	bl	80267e8 <dec_lock>
 80284bc:	4603      	mov	r3, r0
 80284be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80284c0:	7bfb      	ldrb	r3, [r7, #15]
 80284c2:	2b00      	cmp	r3, #0
 80284c4:	d102      	bne.n	80284cc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80284c6:	687b      	ldr	r3, [r7, #4]
 80284c8:	2200      	movs	r2, #0
 80284ca:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80284cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80284ce:	4618      	mov	r0, r3
 80284d0:	3710      	adds	r7, #16
 80284d2:	46bd      	mov	sp, r7
 80284d4:	bd80      	pop	{r7, pc}
	...

080284d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80284d8:	b480      	push	{r7}
 80284da:	b087      	sub	sp, #28
 80284dc:	af00      	add	r7, sp, #0
 80284de:	60f8      	str	r0, [r7, #12]
 80284e0:	60b9      	str	r1, [r7, #8]
 80284e2:	4613      	mov	r3, r2
 80284e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80284e6:	2301      	movs	r3, #1
 80284e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80284ea:	2300      	movs	r3, #0
 80284ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80284ee:	4b1f      	ldr	r3, [pc, #124]	@ (802856c <FATFS_LinkDriverEx+0x94>)
 80284f0:	7a5b      	ldrb	r3, [r3, #9]
 80284f2:	b2db      	uxtb	r3, r3
 80284f4:	2b00      	cmp	r3, #0
 80284f6:	d131      	bne.n	802855c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80284f8:	4b1c      	ldr	r3, [pc, #112]	@ (802856c <FATFS_LinkDriverEx+0x94>)
 80284fa:	7a5b      	ldrb	r3, [r3, #9]
 80284fc:	b2db      	uxtb	r3, r3
 80284fe:	461a      	mov	r2, r3
 8028500:	4b1a      	ldr	r3, [pc, #104]	@ (802856c <FATFS_LinkDriverEx+0x94>)
 8028502:	2100      	movs	r1, #0
 8028504:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8028506:	4b19      	ldr	r3, [pc, #100]	@ (802856c <FATFS_LinkDriverEx+0x94>)
 8028508:	7a5b      	ldrb	r3, [r3, #9]
 802850a:	b2db      	uxtb	r3, r3
 802850c:	4a17      	ldr	r2, [pc, #92]	@ (802856c <FATFS_LinkDriverEx+0x94>)
 802850e:	009b      	lsls	r3, r3, #2
 8028510:	4413      	add	r3, r2
 8028512:	68fa      	ldr	r2, [r7, #12]
 8028514:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8028516:	4b15      	ldr	r3, [pc, #84]	@ (802856c <FATFS_LinkDriverEx+0x94>)
 8028518:	7a5b      	ldrb	r3, [r3, #9]
 802851a:	b2db      	uxtb	r3, r3
 802851c:	461a      	mov	r2, r3
 802851e:	4b13      	ldr	r3, [pc, #76]	@ (802856c <FATFS_LinkDriverEx+0x94>)
 8028520:	4413      	add	r3, r2
 8028522:	79fa      	ldrb	r2, [r7, #7]
 8028524:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8028526:	4b11      	ldr	r3, [pc, #68]	@ (802856c <FATFS_LinkDriverEx+0x94>)
 8028528:	7a5b      	ldrb	r3, [r3, #9]
 802852a:	b2db      	uxtb	r3, r3
 802852c:	1c5a      	adds	r2, r3, #1
 802852e:	b2d1      	uxtb	r1, r2
 8028530:	4a0e      	ldr	r2, [pc, #56]	@ (802856c <FATFS_LinkDriverEx+0x94>)
 8028532:	7251      	strb	r1, [r2, #9]
 8028534:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8028536:	7dbb      	ldrb	r3, [r7, #22]
 8028538:	3330      	adds	r3, #48	@ 0x30
 802853a:	b2da      	uxtb	r2, r3
 802853c:	68bb      	ldr	r3, [r7, #8]
 802853e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8028540:	68bb      	ldr	r3, [r7, #8]
 8028542:	3301      	adds	r3, #1
 8028544:	223a      	movs	r2, #58	@ 0x3a
 8028546:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8028548:	68bb      	ldr	r3, [r7, #8]
 802854a:	3302      	adds	r3, #2
 802854c:	222f      	movs	r2, #47	@ 0x2f
 802854e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8028550:	68bb      	ldr	r3, [r7, #8]
 8028552:	3303      	adds	r3, #3
 8028554:	2200      	movs	r2, #0
 8028556:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8028558:	2300      	movs	r3, #0
 802855a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 802855c:	7dfb      	ldrb	r3, [r7, #23]
}
 802855e:	4618      	mov	r0, r3
 8028560:	371c      	adds	r7, #28
 8028562:	46bd      	mov	sp, r7
 8028564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028568:	4770      	bx	lr
 802856a:	bf00      	nop
 802856c:	24000ab4 	.word	0x24000ab4

08028570 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8028570:	b580      	push	{r7, lr}
 8028572:	b082      	sub	sp, #8
 8028574:	af00      	add	r7, sp, #0
 8028576:	6078      	str	r0, [r7, #4]
 8028578:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 802857a:	2200      	movs	r2, #0
 802857c:	6839      	ldr	r1, [r7, #0]
 802857e:	6878      	ldr	r0, [r7, #4]
 8028580:	f7ff ffaa 	bl	80284d8 <FATFS_LinkDriverEx>
 8028584:	4603      	mov	r3, r0
}
 8028586:	4618      	mov	r0, r3
 8028588:	3708      	adds	r7, #8
 802858a:	46bd      	mov	sp, r7
 802858c:	bd80      	pop	{r7, pc}

0802858e <_ZdlPvj>:
 802858e:	f000 bbd3 	b.w	8028d38 <_ZdlPv>

08028592 <__cxa_guard_acquire>:
 8028592:	6802      	ldr	r2, [r0, #0]
 8028594:	07d2      	lsls	r2, r2, #31
 8028596:	4603      	mov	r3, r0
 8028598:	d405      	bmi.n	80285a6 <__cxa_guard_acquire+0x14>
 802859a:	7842      	ldrb	r2, [r0, #1]
 802859c:	b102      	cbz	r2, 80285a0 <__cxa_guard_acquire+0xe>
 802859e:	deff      	udf	#255	@ 0xff
 80285a0:	2001      	movs	r0, #1
 80285a2:	7058      	strb	r0, [r3, #1]
 80285a4:	4770      	bx	lr
 80285a6:	2000      	movs	r0, #0
 80285a8:	4770      	bx	lr

080285aa <__cxa_guard_release>:
 80285aa:	2301      	movs	r3, #1
 80285ac:	6003      	str	r3, [r0, #0]
 80285ae:	4770      	bx	lr

080285b0 <_Znwj>:
 80285b0:	2801      	cmp	r0, #1
 80285b2:	bf38      	it	cc
 80285b4:	2001      	movcc	r0, #1
 80285b6:	b510      	push	{r4, lr}
 80285b8:	4604      	mov	r4, r0
 80285ba:	4620      	mov	r0, r4
 80285bc:	f000 fc68 	bl	8028e90 <malloc>
 80285c0:	b100      	cbz	r0, 80285c4 <_Znwj+0x14>
 80285c2:	bd10      	pop	{r4, pc}
 80285c4:	f000 fbba 	bl	8028d3c <_ZSt15get_new_handlerv>
 80285c8:	b908      	cbnz	r0, 80285ce <_Znwj+0x1e>
 80285ca:	f000 fc59 	bl	8028e80 <abort>
 80285ce:	4780      	blx	r0
 80285d0:	e7f3      	b.n	80285ba <_Znwj+0xa>

080285d2 <_ZNSaIcEC1Ev>:
 80285d2:	4770      	bx	lr

080285d4 <_ZNSaIcED1Ev>:
 80285d4:	4770      	bx	lr

080285d6 <_ZSt17__throw_bad_allocv>:
 80285d6:	b508      	push	{r3, lr}
 80285d8:	f000 fc52 	bl	8028e80 <abort>

080285dc <_ZSt28__throw_bad_array_new_lengthv>:
 80285dc:	b508      	push	{r3, lr}
 80285de:	f000 fc4f 	bl	8028e80 <abort>

080285e2 <_ZSt19__throw_logic_errorPKc>:
 80285e2:	b508      	push	{r3, lr}
 80285e4:	f000 fc4c 	bl	8028e80 <abort>

080285e8 <_ZSt24__throw_invalid_argumentPKc>:
 80285e8:	b508      	push	{r3, lr}
 80285ea:	f000 fc49 	bl	8028e80 <abort>

080285ee <_ZSt20__throw_length_errorPKc>:
 80285ee:	b508      	push	{r3, lr}
 80285f0:	f000 fc46 	bl	8028e80 <abort>

080285f4 <_ZSt20__throw_out_of_rangePKc>:
 80285f4:	b508      	push	{r3, lr}
 80285f6:	f000 fc43 	bl	8028e80 <abort>

080285fa <_ZSt24__throw_out_of_range_fmtPKcz>:
 80285fa:	b40f      	push	{r0, r1, r2, r3}
 80285fc:	b508      	push	{r3, lr}
 80285fe:	f000 fc3f 	bl	8028e80 <abort>

08028602 <_ZSt25__throw_bad_function_callv>:
 8028602:	b508      	push	{r3, lr}
 8028604:	f000 fc3c 	bl	8028e80 <abort>

08028608 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 8028608:	4901      	ldr	r1, [pc, #4]	@ (8028610 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 802860a:	f000 bc23 	b.w	8028e54 <_ZNKSt9type_info7__equalERKS_>
 802860e:	bf00      	nop
 8028610:	0802b744 	.word	0x0802b744

08028614 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8028614:	b10a      	cbz	r2, 802861a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8028616:	f001 b8be 	b.w	8029796 <memcpy>
 802861a:	4770      	bx	lr

0802861c <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 802861c:	b10a      	cbz	r2, 8028622 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 802861e:	f000 bfc1 	b.w	80295a4 <memcmp>
 8028622:	4610      	mov	r0, r2
 8028624:	4770      	bx	lr

08028626 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8028626:	6001      	str	r1, [r0, #0]
 8028628:	4770      	bx	lr

0802862a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 802862a:	6800      	ldr	r0, [r0, #0]
 802862c:	4770      	bx	lr

0802862e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 802862e:	3008      	adds	r0, #8
 8028630:	4770      	bx	lr

08028632 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8028632:	6081      	str	r1, [r0, #8]
 8028634:	4770      	bx	lr

08028636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8028636:	6803      	ldr	r3, [r0, #0]
 8028638:	6041      	str	r1, [r0, #4]
 802863a:	2200      	movs	r2, #0
 802863c:	545a      	strb	r2, [r3, r1]
 802863e:	4770      	bx	lr

08028640 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8028640:	f850 3b08 	ldr.w	r3, [r0], #8
 8028644:	1a1b      	subs	r3, r3, r0
 8028646:	4258      	negs	r0, r3
 8028648:	4158      	adcs	r0, r3
 802864a:	4770      	bx	lr

0802864c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 802864c:	b508      	push	{r3, lr}
 802864e:	680b      	ldr	r3, [r1, #0]
 8028650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8028654:	d302      	bcc.n	802865c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8028656:	480d      	ldr	r0, [pc, #52]	@ (802868c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8028658:	f7ff ffc9 	bl	80285ee <_ZSt20__throw_length_errorPKc>
 802865c:	4293      	cmp	r3, r2
 802865e:	d90b      	bls.n	8028678 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8028660:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8028664:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8028668:	d206      	bcs.n	8028678 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 802866a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 802866e:	bf2a      	itet	cs
 8028670:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8028674:	6008      	strcc	r0, [r1, #0]
 8028676:	600b      	strcs	r3, [r1, #0]
 8028678:	6808      	ldr	r0, [r1, #0]
 802867a:	3001      	adds	r0, #1
 802867c:	d501      	bpl.n	8028682 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 802867e:	f7ff ffaa 	bl	80285d6 <_ZSt17__throw_bad_allocv>
 8028682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8028686:	f7ff bf93 	b.w	80285b0 <_Znwj>
 802868a:	bf00      	nop
 802868c:	0802b74c 	.word	0x0802b74c

08028690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8028690:	b510      	push	{r4, lr}
 8028692:	4604      	mov	r4, r0
 8028694:	f7ff ffd4 	bl	8028640 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8028698:	b920      	cbnz	r0, 80286a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 802869a:	6820      	ldr	r0, [r4, #0]
 802869c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80286a0:	f000 bb4a 	b.w	8028d38 <_ZdlPv>
 80286a4:	bd10      	pop	{r4, pc}
	...

080286a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80286a8:	b508      	push	{r3, lr}
 80286aa:	4603      	mov	r3, r0
 80286ac:	4608      	mov	r0, r1
 80286ae:	685b      	ldr	r3, [r3, #4]
 80286b0:	4298      	cmp	r0, r3
 80286b2:	4611      	mov	r1, r2
 80286b4:	d903      	bls.n	80286be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 80286b6:	4602      	mov	r2, r0
 80286b8:	4801      	ldr	r0, [pc, #4]	@ (80286c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80286ba:	f7ff ff9e 	bl	80285fa <_ZSt24__throw_out_of_range_fmtPKcz>
 80286be:	bd08      	pop	{r3, pc}
 80286c0:	0802b764 	.word	0x0802b764

080286c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80286c4:	6840      	ldr	r0, [r0, #4]
 80286c6:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80286ca:	3901      	subs	r1, #1
 80286cc:	1a09      	subs	r1, r1, r0
 80286ce:	4291      	cmp	r1, r2
 80286d0:	b508      	push	{r3, lr}
 80286d2:	d202      	bcs.n	80286da <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80286d4:	4618      	mov	r0, r3
 80286d6:	f7ff ff8a 	bl	80285ee <_ZSt20__throw_length_errorPKc>
 80286da:	bd08      	pop	{r3, pc}

080286dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80286dc:	6803      	ldr	r3, [r0, #0]
 80286de:	428b      	cmp	r3, r1
 80286e0:	d806      	bhi.n	80286f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80286e2:	6842      	ldr	r2, [r0, #4]
 80286e4:	4413      	add	r3, r2
 80286e6:	4299      	cmp	r1, r3
 80286e8:	bf94      	ite	ls
 80286ea:	2000      	movls	r0, #0
 80286ec:	2001      	movhi	r0, #1
 80286ee:	4770      	bx	lr
 80286f0:	2001      	movs	r0, #1
 80286f2:	4770      	bx	lr

080286f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80286f4:	2a01      	cmp	r2, #1
 80286f6:	b410      	push	{r4}
 80286f8:	d104      	bne.n	8028704 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 80286fa:	780a      	ldrb	r2, [r1, #0]
 80286fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028700:	7002      	strb	r2, [r0, #0]
 8028702:	4770      	bx	lr
 8028704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028708:	f7ff bf84 	b.w	8028614 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0802870c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 802870c:	2a01      	cmp	r2, #1
 802870e:	b430      	push	{r4, r5}
 8028710:	d103      	bne.n	802871a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8028712:	780b      	ldrb	r3, [r1, #0]
 8028714:	7003      	strb	r3, [r0, #0]
 8028716:	bc30      	pop	{r4, r5}
 8028718:	4770      	bx	lr
 802871a:	2a00      	cmp	r2, #0
 802871c:	d0fb      	beq.n	8028716 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 802871e:	bc30      	pop	{r4, r5}
 8028720:	f000 bf50 	b.w	80295c4 <memmove>

08028724 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8028724:	460b      	mov	r3, r1
 8028726:	2b01      	cmp	r3, #1
 8028728:	b410      	push	{r4}
 802872a:	4611      	mov	r1, r2
 802872c:	4604      	mov	r4, r0
 802872e:	d103      	bne.n	8028738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8028730:	7022      	strb	r2, [r4, #0]
 8028732:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028736:	4770      	bx	lr
 8028738:	2b00      	cmp	r3, #0
 802873a:	d0fa      	beq.n	8028732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 802873c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028740:	461a      	mov	r2, r3
 8028742:	f000 bf59 	b.w	80295f8 <memset>

08028746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8028746:	b508      	push	{r3, lr}
 8028748:	1a52      	subs	r2, r2, r1
 802874a:	f7ff ffd3 	bl	80286f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 802874e:	bd08      	pop	{r3, pc}

08028750 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8028750:	b508      	push	{r3, lr}
 8028752:	1a52      	subs	r2, r2, r1
 8028754:	f7ff ffce 	bl	80286f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028758:	bd08      	pop	{r3, pc}

0802875a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 802875a:	f100 0208 	add.w	r2, r0, #8
 802875e:	6002      	str	r2, [r0, #0]
 8028760:	2200      	movs	r2, #0
 8028762:	6042      	str	r2, [r0, #4]
 8028764:	7202      	strb	r2, [r0, #8]
 8028766:	4770      	bx	lr

08028768 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8028768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802876a:	f100 0708 	add.w	r7, r0, #8
 802876e:	6007      	str	r7, [r0, #0]
 8028770:	4605      	mov	r5, r0
 8028772:	4608      	mov	r0, r1
 8028774:	460c      	mov	r4, r1
 8028776:	f7ff ff63 	bl	8028640 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 802877a:	f104 0608 	add.w	r6, r4, #8
 802877e:	6862      	ldr	r2, [r4, #4]
 8028780:	b160      	cbz	r0, 802879c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 8028782:	3201      	adds	r2, #1
 8028784:	4631      	mov	r1, r6
 8028786:	4638      	mov	r0, r7
 8028788:	f7ff ff44 	bl	8028614 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 802878c:	6863      	ldr	r3, [r4, #4]
 802878e:	606b      	str	r3, [r5, #4]
 8028790:	2300      	movs	r3, #0
 8028792:	7223      	strb	r3, [r4, #8]
 8028794:	6026      	str	r6, [r4, #0]
 8028796:	6063      	str	r3, [r4, #4]
 8028798:	4628      	mov	r0, r5
 802879a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802879c:	6823      	ldr	r3, [r4, #0]
 802879e:	602b      	str	r3, [r5, #0]
 80287a0:	68a3      	ldr	r3, [r4, #8]
 80287a2:	60ab      	str	r3, [r5, #8]
 80287a4:	e7f2      	b.n	802878c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

080287a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80287a6:	b510      	push	{r4, lr}
 80287a8:	4604      	mov	r4, r0
 80287aa:	f7ff ff71 	bl	8028690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80287ae:	4620      	mov	r0, r4
 80287b0:	bd10      	pop	{r4, pc}

080287b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80287b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80287b4:	460c      	mov	r4, r1
 80287b6:	4605      	mov	r5, r0
 80287b8:	f7ff ff42 	bl	8028640 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80287bc:	4606      	mov	r6, r0
 80287be:	4620      	mov	r0, r4
 80287c0:	f7ff ff3e 	bl	8028640 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80287c4:	b190      	cbz	r0, 80287ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 80287c6:	42a5      	cmp	r5, r4
 80287c8:	d00a      	beq.n	80287e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 80287ca:	6862      	ldr	r2, [r4, #4]
 80287cc:	b11a      	cbz	r2, 80287d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 80287ce:	6821      	ldr	r1, [r4, #0]
 80287d0:	6828      	ldr	r0, [r5, #0]
 80287d2:	f7ff ff8f 	bl	80286f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80287d6:	6863      	ldr	r3, [r4, #4]
 80287d8:	682a      	ldr	r2, [r5, #0]
 80287da:	606b      	str	r3, [r5, #4]
 80287dc:	2100      	movs	r1, #0
 80287de:	54d1      	strb	r1, [r2, r3]
 80287e0:	6822      	ldr	r2, [r4, #0]
 80287e2:	2300      	movs	r3, #0
 80287e4:	6063      	str	r3, [r4, #4]
 80287e6:	7013      	strb	r3, [r2, #0]
 80287e8:	4628      	mov	r0, r5
 80287ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80287ec:	b90e      	cbnz	r6, 80287f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80287ee:	6828      	ldr	r0, [r5, #0]
 80287f0:	68af      	ldr	r7, [r5, #8]
 80287f2:	6823      	ldr	r3, [r4, #0]
 80287f4:	602b      	str	r3, [r5, #0]
 80287f6:	6863      	ldr	r3, [r4, #4]
 80287f8:	606b      	str	r3, [r5, #4]
 80287fa:	68a3      	ldr	r3, [r4, #8]
 80287fc:	60ab      	str	r3, [r5, #8]
 80287fe:	b110      	cbz	r0, 8028806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 8028800:	6020      	str	r0, [r4, #0]
 8028802:	60a7      	str	r7, [r4, #8]
 8028804:	e7ec      	b.n	80287e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8028806:	f104 0308 	add.w	r3, r4, #8
 802880a:	6023      	str	r3, [r4, #0]
 802880c:	e7e8      	b.n	80287e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

0802880e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 802880e:	b510      	push	{r4, lr}
 8028810:	4604      	mov	r4, r0
 8028812:	f7ff ff15 	bl	8028640 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8028816:	b908      	cbnz	r0, 802881c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8028818:	68a0      	ldr	r0, [r4, #8]
 802881a:	bd10      	pop	{r4, pc}
 802881c:	200f      	movs	r0, #15
 802881e:	e7fc      	b.n	802881a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08028820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8028820:	4288      	cmp	r0, r1
 8028822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028824:	4604      	mov	r4, r0
 8028826:	460e      	mov	r6, r1
 8028828:	d01d      	beq.n	8028866 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x46>
 802882a:	684d      	ldr	r5, [r1, #4]
 802882c:	f7ff ffef 	bl	802880e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028830:	42a8      	cmp	r0, r5
 8028832:	4602      	mov	r2, r0
 8028834:	d211      	bcs.n	802885a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3a>
 8028836:	a901      	add	r1, sp, #4
 8028838:	4620      	mov	r0, r4
 802883a:	9501      	str	r5, [sp, #4]
 802883c:	f7ff ff06 	bl	802864c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8028840:	4607      	mov	r7, r0
 8028842:	4620      	mov	r0, r4
 8028844:	f7ff ff24 	bl	8028690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8028848:	9b01      	ldr	r3, [sp, #4]
 802884a:	6027      	str	r7, [r4, #0]
 802884c:	60a3      	str	r3, [r4, #8]
 802884e:	6831      	ldr	r1, [r6, #0]
 8028850:	6820      	ldr	r0, [r4, #0]
 8028852:	462a      	mov	r2, r5
 8028854:	f7ff ff4e 	bl	80286f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028858:	e001      	b.n	802885e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3e>
 802885a:	2d00      	cmp	r5, #0
 802885c:	d1f7      	bne.n	802884e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x2e>
 802885e:	6823      	ldr	r3, [r4, #0]
 8028860:	6065      	str	r5, [r4, #4]
 8028862:	2200      	movs	r2, #0
 8028864:	555a      	strb	r2, [r3, r5]
 8028866:	b003      	add	sp, #12
 8028868:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802886a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 802886a:	b510      	push	{r4, lr}
 802886c:	4604      	mov	r4, r0
 802886e:	f7ff ffd7 	bl	8028820 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8028872:	4620      	mov	r0, r4
 8028874:	bd10      	pop	{r4, pc}

08028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8028876:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 802887a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802887c:	461f      	mov	r7, r3
 802887e:	6843      	ldr	r3, [r0, #4]
 8028880:	eb01 0802 	add.w	r8, r1, r2
 8028884:	1ab2      	subs	r2, r6, r2
 8028886:	441a      	add	r2, r3
 8028888:	4604      	mov	r4, r0
 802888a:	460d      	mov	r5, r1
 802888c:	eba3 0908 	sub.w	r9, r3, r8
 8028890:	9201      	str	r2, [sp, #4]
 8028892:	f7ff ffbc 	bl	802880e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028896:	a901      	add	r1, sp, #4
 8028898:	4602      	mov	r2, r0
 802889a:	4620      	mov	r0, r4
 802889c:	f7ff fed6 	bl	802864c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80288a0:	4682      	mov	sl, r0
 80288a2:	b11d      	cbz	r5, 80288ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 80288a4:	6821      	ldr	r1, [r4, #0]
 80288a6:	462a      	mov	r2, r5
 80288a8:	f7ff ff24 	bl	80286f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80288ac:	b137      	cbz	r7, 80288bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 80288ae:	b12e      	cbz	r6, 80288bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 80288b0:	4632      	mov	r2, r6
 80288b2:	4639      	mov	r1, r7
 80288b4:	eb0a 0005 	add.w	r0, sl, r5
 80288b8:	f7ff ff1c 	bl	80286f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80288bc:	f1b9 0f00 	cmp.w	r9, #0
 80288c0:	d007      	beq.n	80288d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 80288c2:	6821      	ldr	r1, [r4, #0]
 80288c4:	4435      	add	r5, r6
 80288c6:	464a      	mov	r2, r9
 80288c8:	4441      	add	r1, r8
 80288ca:	eb0a 0005 	add.w	r0, sl, r5
 80288ce:	f7ff ff11 	bl	80286f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80288d2:	4620      	mov	r0, r4
 80288d4:	f7ff fedc 	bl	8028690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80288d8:	9b01      	ldr	r3, [sp, #4]
 80288da:	f8c4 a000 	str.w	sl, [r4]
 80288de:	60a3      	str	r3, [r4, #8]
 80288e0:	b002      	add	sp, #8
 80288e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080288e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 80288e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80288e8:	4604      	mov	r4, r0
 80288ea:	9101      	str	r1, [sp, #4]
 80288ec:	f7ff ff8f 	bl	802880e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80288f0:	9b01      	ldr	r3, [sp, #4]
 80288f2:	4283      	cmp	r3, r0
 80288f4:	4602      	mov	r2, r0
 80288f6:	d90f      	bls.n	8028918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 80288f8:	a901      	add	r1, sp, #4
 80288fa:	4620      	mov	r0, r4
 80288fc:	f7ff fea6 	bl	802864c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8028900:	6862      	ldr	r2, [r4, #4]
 8028902:	6821      	ldr	r1, [r4, #0]
 8028904:	3201      	adds	r2, #1
 8028906:	4605      	mov	r5, r0
 8028908:	f7ff fef4 	bl	80286f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 802890c:	4620      	mov	r0, r4
 802890e:	f7ff febf 	bl	8028690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8028912:	9b01      	ldr	r3, [sp, #4]
 8028914:	6025      	str	r5, [r4, #0]
 8028916:	60a3      	str	r3, [r4, #8]
 8028918:	b003      	add	sp, #12
 802891a:	bd30      	pop	{r4, r5, pc}

0802891c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 802891c:	6802      	ldr	r2, [r0, #0]
 802891e:	2300      	movs	r3, #0
 8028920:	6043      	str	r3, [r0, #4]
 8028922:	7013      	strb	r3, [r2, #0]
 8028924:	4770      	bx	lr

08028926 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 8028926:	6840      	ldr	r0, [r0, #4]
 8028928:	fab0 f080 	clz	r0, r0
 802892c:	0940      	lsrs	r0, r0, #5
 802892e:	4770      	bx	lr

08028930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8028930:	6800      	ldr	r0, [r0, #0]
 8028932:	4408      	add	r0, r1
 8028934:	4770      	bx	lr

08028936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8028936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028938:	6846      	ldr	r6, [r0, #4]
 802893a:	4604      	mov	r4, r0
 802893c:	460f      	mov	r7, r1
 802893e:	f7ff ff66 	bl	802880e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028942:	1c75      	adds	r5, r6, #1
 8028944:	4285      	cmp	r5, r0
 8028946:	d907      	bls.n	8028958 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x22>
 8028948:	2301      	movs	r3, #1
 802894a:	9300      	str	r3, [sp, #0]
 802894c:	2300      	movs	r3, #0
 802894e:	461a      	mov	r2, r3
 8028950:	4631      	mov	r1, r6
 8028952:	4620      	mov	r0, r4
 8028954:	f7ff ff8f 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8028958:	6823      	ldr	r3, [r4, #0]
 802895a:	559f      	strb	r7, [r3, r6]
 802895c:	6823      	ldr	r3, [r4, #0]
 802895e:	6065      	str	r5, [r4, #4]
 8028960:	2200      	movs	r2, #0
 8028962:	555a      	strb	r2, [r3, r5]
 8028964:	b003      	add	sp, #12
 8028966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08028968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8028968:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802896c:	4616      	mov	r6, r2
 802896e:	461d      	mov	r5, r3
 8028970:	4604      	mov	r4, r0
 8028972:	4b1b      	ldr	r3, [pc, #108]	@ (80289e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 8028974:	462a      	mov	r2, r5
 8028976:	460f      	mov	r7, r1
 8028978:	4631      	mov	r1, r6
 802897a:	f7ff fea3 	bl	80286c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 802897e:	4620      	mov	r0, r4
 8028980:	f7ff ff45 	bl	802880e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028984:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8028988:	eba5 0806 	sub.w	r8, r5, r6
 802898c:	44c8      	add	r8, r9
 802898e:	4540      	cmp	r0, r8
 8028990:	d31d      	bcc.n	80289ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 8028992:	19f3      	adds	r3, r6, r7
 8028994:	ebb9 0203 	subs.w	r2, r9, r3
 8028998:	d007      	beq.n	80289aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 802899a:	42ae      	cmp	r6, r5
 802899c:	d005      	beq.n	80289aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 802899e:	6820      	ldr	r0, [r4, #0]
 80289a0:	4438      	add	r0, r7
 80289a2:	1981      	adds	r1, r0, r6
 80289a4:	4428      	add	r0, r5
 80289a6:	f7ff feb1 	bl	802870c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80289aa:	b135      	cbz	r5, 80289ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 80289ac:	6820      	ldr	r0, [r4, #0]
 80289ae:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 80289b2:	4629      	mov	r1, r5
 80289b4:	4438      	add	r0, r7
 80289b6:	f7ff feb5 	bl	8028724 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 80289ba:	6823      	ldr	r3, [r4, #0]
 80289bc:	f8c4 8004 	str.w	r8, [r4, #4]
 80289c0:	2200      	movs	r2, #0
 80289c2:	4620      	mov	r0, r4
 80289c4:	f803 2008 	strb.w	r2, [r3, r8]
 80289c8:	b003      	add	sp, #12
 80289ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80289ce:	9500      	str	r5, [sp, #0]
 80289d0:	2300      	movs	r3, #0
 80289d2:	4632      	mov	r2, r6
 80289d4:	4639      	mov	r1, r7
 80289d6:	4620      	mov	r0, r4
 80289d8:	f7ff ff4d 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80289dc:	e7e5      	b.n	80289aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 80289de:	bf00      	nop
 80289e0:	0802b79b 	.word	0x0802b79b

080289e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 80289e4:	b507      	push	{r0, r1, r2, lr}
 80289e6:	9200      	str	r2, [sp, #0]
 80289e8:	460b      	mov	r3, r1
 80289ea:	2200      	movs	r2, #0
 80289ec:	6841      	ldr	r1, [r0, #4]
 80289ee:	f7ff ffbb 	bl	8028968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 80289f2:	b003      	add	sp, #12
 80289f4:	f85d fb04 	ldr.w	pc, [sp], #4

080289f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80289f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80289fc:	b085      	sub	sp, #20
 80289fe:	4680      	mov	r8, r0
 8028a00:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028a02:	4614      	mov	r4, r2
 8028a04:	4689      	mov	r9, r1
 8028a06:	462a      	mov	r2, r5
 8028a08:	4621      	mov	r1, r4
 8028a0a:	461f      	mov	r7, r3
 8028a0c:	4b37      	ldr	r3, [pc, #220]	@ (8028aec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 8028a0e:	f7ff fe59 	bl	80286c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8028a12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8028a16:	9303      	str	r3, [sp, #12]
 8028a18:	eba5 0b04 	sub.w	fp, r5, r4
 8028a1c:	4640      	mov	r0, r8
 8028a1e:	eb03 0a0b 	add.w	sl, r3, fp
 8028a22:	f7ff fef4 	bl	802880e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028a26:	4550      	cmp	r0, sl
 8028a28:	d354      	bcc.n	8028ad4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8028a2a:	f8d8 6000 	ldr.w	r6, [r8]
 8028a2e:	9b03      	ldr	r3, [sp, #12]
 8028a30:	444e      	add	r6, r9
 8028a32:	4639      	mov	r1, r7
 8028a34:	44a1      	add	r9, r4
 8028a36:	4640      	mov	r0, r8
 8028a38:	eba3 0909 	sub.w	r9, r3, r9
 8028a3c:	f7ff fe4e 	bl	80286dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8028a40:	b180      	cbz	r0, 8028a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 8028a42:	f1b9 0f00 	cmp.w	r9, #0
 8028a46:	d006      	beq.n	8028a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8028a48:	42ac      	cmp	r4, r5
 8028a4a:	d004      	beq.n	8028a56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8028a4c:	464a      	mov	r2, r9
 8028a4e:	1931      	adds	r1, r6, r4
 8028a50:	1970      	adds	r0, r6, r5
 8028a52:	f7ff fe5b 	bl	802870c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028a56:	b315      	cbz	r5, 8028a9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028a58:	462a      	mov	r2, r5
 8028a5a:	4639      	mov	r1, r7
 8028a5c:	4630      	mov	r0, r6
 8028a5e:	f7ff fe49 	bl	80286f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028a62:	e01c      	b.n	8028a9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028a64:	b135      	cbz	r5, 8028a74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 8028a66:	42ac      	cmp	r4, r5
 8028a68:	d33c      	bcc.n	8028ae4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8028a6a:	462a      	mov	r2, r5
 8028a6c:	4639      	mov	r1, r7
 8028a6e:	4630      	mov	r0, r6
 8028a70:	f7ff fe4c 	bl	802870c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028a74:	f1b9 0f00 	cmp.w	r9, #0
 8028a78:	d011      	beq.n	8028a9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028a7a:	42ac      	cmp	r4, r5
 8028a7c:	d00f      	beq.n	8028a9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028a7e:	464a      	mov	r2, r9
 8028a80:	1931      	adds	r1, r6, r4
 8028a82:	1970      	adds	r0, r6, r5
 8028a84:	f7ff fe42 	bl	802870c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028a88:	42ac      	cmp	r4, r5
 8028a8a:	d208      	bcs.n	8028a9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028a8c:	4434      	add	r4, r6
 8028a8e:	197b      	adds	r3, r7, r5
 8028a90:	429c      	cmp	r4, r3
 8028a92:	d30f      	bcc.n	8028ab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 8028a94:	462a      	mov	r2, r5
 8028a96:	4639      	mov	r1, r7
 8028a98:	4630      	mov	r0, r6
 8028a9a:	f7ff fe37 	bl	802870c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8028aa2:	f8c8 a004 	str.w	sl, [r8, #4]
 8028aa6:	2200      	movs	r2, #0
 8028aa8:	4640      	mov	r0, r8
 8028aaa:	f803 200a 	strb.w	r2, [r3, sl]
 8028aae:	b005      	add	sp, #20
 8028ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028ab4:	42bc      	cmp	r4, r7
 8028ab6:	d803      	bhi.n	8028ac0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 8028ab8:	462a      	mov	r2, r5
 8028aba:	eb07 010b 	add.w	r1, r7, fp
 8028abe:	e7cd      	b.n	8028a5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8028ac0:	1be4      	subs	r4, r4, r7
 8028ac2:	4622      	mov	r2, r4
 8028ac4:	4639      	mov	r1, r7
 8028ac6:	4630      	mov	r0, r6
 8028ac8:	f7ff fe20 	bl	802870c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028acc:	1b2a      	subs	r2, r5, r4
 8028ace:	1971      	adds	r1, r6, r5
 8028ad0:	1930      	adds	r0, r6, r4
 8028ad2:	e7c4      	b.n	8028a5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8028ad4:	9500      	str	r5, [sp, #0]
 8028ad6:	463b      	mov	r3, r7
 8028ad8:	4622      	mov	r2, r4
 8028ada:	4649      	mov	r1, r9
 8028adc:	4640      	mov	r0, r8
 8028ade:	f7ff feca 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8028ae2:	e7dc      	b.n	8028a9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028ae4:	f1b9 0f00 	cmp.w	r9, #0
 8028ae8:	d0d0      	beq.n	8028a8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 8028aea:	e7c8      	b.n	8028a7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8028aec:	0802b7b8 	.word	0x0802b7b8

08028af0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcj>:
 8028af0:	b507      	push	{r0, r1, r2, lr}
 8028af2:	9200      	str	r2, [sp, #0]
 8028af4:	460b      	mov	r3, r1
 8028af6:	6842      	ldr	r2, [r0, #4]
 8028af8:	2100      	movs	r1, #0
 8028afa:	f7ff ff7d 	bl	80289f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8028afe:	b003      	add	sp, #12
 8028b00:	f85d fb04 	ldr.w	pc, [sp], #4

08028b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8028b04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8028b08:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8028b0c:	4604      	mov	r4, r0
 8028b0e:	eb02 0708 	add.w	r7, r2, r8
 8028b12:	460e      	mov	r6, r1
 8028b14:	4615      	mov	r5, r2
 8028b16:	f7ff fe7a 	bl	802880e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028b1a:	42b8      	cmp	r0, r7
 8028b1c:	d30e      	bcc.n	8028b3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x38>
 8028b1e:	b12d      	cbz	r5, 8028b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
 8028b20:	6820      	ldr	r0, [r4, #0]
 8028b22:	462a      	mov	r2, r5
 8028b24:	4631      	mov	r1, r6
 8028b26:	4440      	add	r0, r8
 8028b28:	f7ff fde4 	bl	80286f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028b2c:	6823      	ldr	r3, [r4, #0]
 8028b2e:	6067      	str	r7, [r4, #4]
 8028b30:	2200      	movs	r2, #0
 8028b32:	4620      	mov	r0, r4
 8028b34:	55da      	strb	r2, [r3, r7]
 8028b36:	b002      	add	sp, #8
 8028b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028b3c:	9500      	str	r5, [sp, #0]
 8028b3e:	4633      	mov	r3, r6
 8028b40:	2200      	movs	r2, #0
 8028b42:	4641      	mov	r1, r8
 8028b44:	4620      	mov	r0, r4
 8028b46:	f7ff fe96 	bl	8028876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8028b4a:	e7ef      	b.n	8028b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>

08028b4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8028b4c:	b570      	push	{r4, r5, r6, lr}
 8028b4e:	4b06      	ldr	r3, [pc, #24]	@ (8028b68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8028b50:	4604      	mov	r4, r0
 8028b52:	460d      	mov	r5, r1
 8028b54:	4616      	mov	r6, r2
 8028b56:	2100      	movs	r1, #0
 8028b58:	f7ff fdb4 	bl	80286c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8028b5c:	4632      	mov	r2, r6
 8028b5e:	4629      	mov	r1, r5
 8028b60:	4620      	mov	r0, r4
 8028b62:	f7ff ffcf 	bl	8028b04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8028b66:	bd70      	pop	{r4, r5, r6, pc}
 8028b68:	0802b7d1 	.word	0x0802b7d1

08028b6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8028b6c:	6800      	ldr	r0, [r0, #0]
 8028b6e:	4770      	bx	lr

08028b70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 8028b70:	b538      	push	{r3, r4, r5, lr}
 8028b72:	6845      	ldr	r5, [r0, #4]
 8028b74:	684c      	ldr	r4, [r1, #4]
 8028b76:	6800      	ldr	r0, [r0, #0]
 8028b78:	6809      	ldr	r1, [r1, #0]
 8028b7a:	42a5      	cmp	r5, r4
 8028b7c:	462a      	mov	r2, r5
 8028b7e:	bf28      	it	cs
 8028b80:	4622      	movcs	r2, r4
 8028b82:	f7ff fd4b 	bl	802861c <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8028b86:	b900      	cbnz	r0, 8028b8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 8028b88:	1b28      	subs	r0, r5, r4
 8028b8a:	bd38      	pop	{r3, r4, r5, pc}

08028b8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8028b8c:	6001      	str	r1, [r0, #0]
 8028b8e:	4770      	bx	lr

08028b90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8028b90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028b92:	1a53      	subs	r3, r2, r1
 8028b94:	2b0f      	cmp	r3, #15
 8028b96:	4604      	mov	r4, r0
 8028b98:	460d      	mov	r5, r1
 8028b9a:	4616      	mov	r6, r2
 8028b9c:	9301      	str	r3, [sp, #4]
 8028b9e:	d906      	bls.n	8028bae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8028ba0:	2200      	movs	r2, #0
 8028ba2:	a901      	add	r1, sp, #4
 8028ba4:	f7ff fd52 	bl	802864c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8028ba8:	9b01      	ldr	r3, [sp, #4]
 8028baa:	6020      	str	r0, [r4, #0]
 8028bac:	60a3      	str	r3, [r4, #8]
 8028bae:	4632      	mov	r2, r6
 8028bb0:	4629      	mov	r1, r5
 8028bb2:	6820      	ldr	r0, [r4, #0]
 8028bb4:	f7ff fdc7 	bl	8028746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8028bb8:	9b01      	ldr	r3, [sp, #4]
 8028bba:	6822      	ldr	r2, [r4, #0]
 8028bbc:	6063      	str	r3, [r4, #4]
 8028bbe:	2100      	movs	r1, #0
 8028bc0:	54d1      	strb	r1, [r2, r3]
 8028bc2:	b002      	add	sp, #8
 8028bc4:	bd70      	pop	{r4, r5, r6, pc}

08028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8028bc6:	f100 0208 	add.w	r2, r0, #8
 8028bca:	b510      	push	{r4, lr}
 8028bcc:	6002      	str	r2, [r0, #0]
 8028bce:	e9d1 1200 	ldrd	r1, r2, [r1]
 8028bd2:	4604      	mov	r4, r0
 8028bd4:	f04f 0300 	mov.w	r3, #0
 8028bd8:	440a      	add	r2, r1
 8028bda:	f7ff ffd9 	bl	8028b90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8028bde:	4620      	mov	r0, r4
 8028be0:	bd10      	pop	{r4, pc}
	...

08028be4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 8028be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028be8:	4698      	mov	r8, r3
 8028bea:	f100 0308 	add.w	r3, r0, #8
 8028bee:	460d      	mov	r5, r1
 8028bf0:	4617      	mov	r7, r2
 8028bf2:	6003      	str	r3, [r0, #0]
 8028bf4:	680e      	ldr	r6, [r1, #0]
 8028bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8028c24 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 8028bf8:	4604      	mov	r4, r0
 8028bfa:	4639      	mov	r1, r7
 8028bfc:	4628      	mov	r0, r5
 8028bfe:	f7ff fd53 	bl	80286a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8028c02:	686a      	ldr	r2, [r5, #4]
 8028c04:	1831      	adds	r1, r6, r0
 8028c06:	1bd2      	subs	r2, r2, r7
 8028c08:	4620      	mov	r0, r4
 8028c0a:	f04f 0300 	mov.w	r3, #0
 8028c0e:	4542      	cmp	r2, r8
 8028c10:	bf94      	ite	ls
 8028c12:	188a      	addls	r2, r1, r2
 8028c14:	eb01 0208 	addhi.w	r2, r1, r8
 8028c18:	f7da fe4b 	bl	80038b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8028c1c:	4620      	mov	r0, r4
 8028c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028c22:	bf00      	nop
 8028c24:	0802b7e6 	.word	0x0802b7e6

08028c28 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8028c28:	b570      	push	{r4, r5, r6, lr}
 8028c2a:	460d      	mov	r5, r1
 8028c2c:	4604      	mov	r4, r0
 8028c2e:	4611      	mov	r1, r2
 8028c30:	4628      	mov	r0, r5
 8028c32:	4a06      	ldr	r2, [pc, #24]	@ (8028c4c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8028c34:	461e      	mov	r6, r3
 8028c36:	f7ff fd37 	bl	80286a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8028c3a:	4633      	mov	r3, r6
 8028c3c:	4602      	mov	r2, r0
 8028c3e:	4629      	mov	r1, r5
 8028c40:	4620      	mov	r0, r4
 8028c42:	f7ff ffcf 	bl	8028be4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8028c46:	4620      	mov	r0, r4
 8028c48:	bd70      	pop	{r4, r5, r6, pc}
 8028c4a:	bf00      	nop
 8028c4c:	0802b801 	.word	0x0802b801

08028c50 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8028c50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8028c52:	2400      	movs	r4, #0
 8028c54:	2310      	movs	r3, #16
 8028c56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8028c5a:	6803      	ldr	r3, [r0, #0]
 8028c5c:	4615      	mov	r5, r2
 8028c5e:	699e      	ldr	r6, [r3, #24]
 8028c60:	6812      	ldr	r2, [r2, #0]
 8028c62:	466b      	mov	r3, sp
 8028c64:	e9cd 4400 	strd	r4, r4, [sp]
 8028c68:	47b0      	blx	r6
 8028c6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8028c6e:	f003 0306 	and.w	r3, r3, #6
 8028c72:	2b06      	cmp	r3, #6
 8028c74:	bf03      	ittte	eq
 8028c76:	9b00      	ldreq	r3, [sp, #0]
 8028c78:	602b      	streq	r3, [r5, #0]
 8028c7a:	2001      	moveq	r0, #1
 8028c7c:	4620      	movne	r0, r4
 8028c7e:	b004      	add	sp, #16
 8028c80:	bd70      	pop	{r4, r5, r6, pc}

08028c82 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8028c82:	9800      	ldr	r0, [sp, #0]
 8028c84:	4290      	cmp	r0, r2
 8028c86:	bf0c      	ite	eq
 8028c88:	2006      	moveq	r0, #6
 8028c8a:	2001      	movne	r0, #1
 8028c8c:	4770      	bx	lr
	...

08028c90 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8028c90:	b510      	push	{r4, lr}
 8028c92:	4b03      	ldr	r3, [pc, #12]	@ (8028ca0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8028c94:	6003      	str	r3, [r0, #0]
 8028c96:	4604      	mov	r4, r0
 8028c98:	f000 f8d9 	bl	8028e4e <_ZNSt9type_infoD1Ev>
 8028c9c:	4620      	mov	r0, r4
 8028c9e:	bd10      	pop	{r4, pc}
 8028ca0:	0802b84c 	.word	0x0802b84c

08028ca4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8028ca4:	b510      	push	{r4, lr}
 8028ca6:	4604      	mov	r4, r0
 8028ca8:	f7ff fff2 	bl	8028c90 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8028cac:	4620      	mov	r0, r4
 8028cae:	2108      	movs	r1, #8
 8028cb0:	f7ff fc6d 	bl	802858e <_ZdlPvj>
 8028cb4:	4620      	mov	r0, r4
 8028cb6:	bd10      	pop	{r4, pc}

08028cb8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8028cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028cbc:	461f      	mov	r7, r3
 8028cbe:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8028cc2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8028cc6:	4598      	cmp	r8, r3
 8028cc8:	4606      	mov	r6, r0
 8028cca:	4615      	mov	r5, r2
 8028ccc:	d107      	bne.n	8028cde <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8028cce:	9907      	ldr	r1, [sp, #28]
 8028cd0:	f000 f8c0 	bl	8028e54 <_ZNKSt9type_info7__equalERKS_>
 8028cd4:	b118      	cbz	r0, 8028cde <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8028cd6:	7165      	strb	r5, [r4, #5]
 8028cd8:	2000      	movs	r0, #0
 8028cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028cde:	4639      	mov	r1, r7
 8028ce0:	4630      	mov	r0, r6
 8028ce2:	f000 f8b7 	bl	8028e54 <_ZNKSt9type_info7__equalERKS_>
 8028ce6:	2800      	cmp	r0, #0
 8028ce8:	d0f6      	beq.n	8028cd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8028cea:	2301      	movs	r3, #1
 8028cec:	f8c4 8000 	str.w	r8, [r4]
 8028cf0:	7125      	strb	r5, [r4, #4]
 8028cf2:	71a3      	strb	r3, [r4, #6]
 8028cf4:	e7f0      	b.n	8028cd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08028cf6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8028cf6:	b538      	push	{r3, r4, r5, lr}
 8028cf8:	4615      	mov	r5, r2
 8028cfa:	461c      	mov	r4, r3
 8028cfc:	f000 f8aa 	bl	8028e54 <_ZNKSt9type_info7__equalERKS_>
 8028d00:	b120      	cbz	r0, 8028d0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8028d02:	2308      	movs	r3, #8
 8028d04:	60e3      	str	r3, [r4, #12]
 8028d06:	2306      	movs	r3, #6
 8028d08:	6025      	str	r5, [r4, #0]
 8028d0a:	7123      	strb	r3, [r4, #4]
 8028d0c:	bd38      	pop	{r3, r4, r5, pc}

08028d0e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8028d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028d12:	4605      	mov	r5, r0
 8028d14:	460c      	mov	r4, r1
 8028d16:	4616      	mov	r6, r2
 8028d18:	461f      	mov	r7, r3
 8028d1a:	f000 f89b 	bl	8028e54 <_ZNKSt9type_info7__equalERKS_>
 8028d1e:	b948      	cbnz	r0, 8028d34 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8028d20:	2f03      	cmp	r7, #3
 8028d22:	d807      	bhi.n	8028d34 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8028d24:	6823      	ldr	r3, [r4, #0]
 8028d26:	4632      	mov	r2, r6
 8028d28:	4629      	mov	r1, r5
 8028d2a:	4620      	mov	r0, r4
 8028d2c:	695b      	ldr	r3, [r3, #20]
 8028d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028d32:	4718      	bx	r3
 8028d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028d38 <_ZdlPv>:
 8028d38:	f000 b8b2 	b.w	8028ea0 <free>

08028d3c <_ZSt15get_new_handlerv>:
 8028d3c:	4b02      	ldr	r3, [pc, #8]	@ (8028d48 <_ZSt15get_new_handlerv+0xc>)
 8028d3e:	6818      	ldr	r0, [r3, #0]
 8028d40:	f3bf 8f5b 	dmb	ish
 8028d44:	4770      	bx	lr
 8028d46:	bf00      	nop
 8028d48:	24000ac0 	.word	0x24000ac0

08028d4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8028d4c:	b510      	push	{r4, lr}
 8028d4e:	4b03      	ldr	r3, [pc, #12]	@ (8028d5c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8028d50:	6003      	str	r3, [r0, #0]
 8028d52:	4604      	mov	r4, r0
 8028d54:	f7ff ff9c 	bl	8028c90 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8028d58:	4620      	mov	r0, r4
 8028d5a:	bd10      	pop	{r4, pc}
 8028d5c:	0802b8ac 	.word	0x0802b8ac

08028d60 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8028d60:	b510      	push	{r4, lr}
 8028d62:	4604      	mov	r4, r0
 8028d64:	f7ff fff2 	bl	8028d4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8028d68:	4620      	mov	r0, r4
 8028d6a:	210c      	movs	r1, #12
 8028d6c:	f7ff fc0f 	bl	802858e <_ZdlPvj>
 8028d70:	4620      	mov	r0, r4
 8028d72:	bd10      	pop	{r4, pc}

08028d74 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8028d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028d78:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8028d7c:	4590      	cmp	r8, r2
 8028d7e:	4606      	mov	r6, r0
 8028d80:	460f      	mov	r7, r1
 8028d82:	4615      	mov	r5, r2
 8028d84:	461c      	mov	r4, r3
 8028d86:	d00b      	beq.n	8028da0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8028d88:	68b0      	ldr	r0, [r6, #8]
 8028d8a:	6803      	ldr	r3, [r0, #0]
 8028d8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8028d90:	6a1e      	ldr	r6, [r3, #32]
 8028d92:	462a      	mov	r2, r5
 8028d94:	4623      	mov	r3, r4
 8028d96:	4639      	mov	r1, r7
 8028d98:	46b4      	mov	ip, r6
 8028d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028d9e:	4760      	bx	ip
 8028da0:	4619      	mov	r1, r3
 8028da2:	f000 f857 	bl	8028e54 <_ZNKSt9type_info7__equalERKS_>
 8028da6:	2800      	cmp	r0, #0
 8028da8:	d0ee      	beq.n	8028d88 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8028daa:	2006      	movs	r0, #6
 8028dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028db0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8028db0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028db4:	460d      	mov	r5, r1
 8028db6:	4619      	mov	r1, r3
 8028db8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 8028dbc:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 8028dc0:	4681      	mov	r9, r0
 8028dc2:	4617      	mov	r7, r2
 8028dc4:	4698      	mov	r8, r3
 8028dc6:	f000 f845 	bl	8028e54 <_ZNKSt9type_info7__equalERKS_>
 8028dca:	b190      	cbz	r0, 8028df2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8028dcc:	2d00      	cmp	r5, #0
 8028dce:	6034      	str	r4, [r6, #0]
 8028dd0:	7137      	strb	r7, [r6, #4]
 8028dd2:	db09      	blt.n	8028de8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8028dd4:	442c      	add	r4, r5
 8028dd6:	45a2      	cmp	sl, r4
 8028dd8:	bf14      	ite	ne
 8028dda:	2401      	movne	r4, #1
 8028ddc:	2406      	moveq	r4, #6
 8028dde:	71b4      	strb	r4, [r6, #6]
 8028de0:	2000      	movs	r0, #0
 8028de2:	b001      	add	sp, #4
 8028de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028de8:	3502      	adds	r5, #2
 8028dea:	d1f9      	bne.n	8028de0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8028dec:	2301      	movs	r3, #1
 8028dee:	71b3      	strb	r3, [r6, #6]
 8028df0:	e7f6      	b.n	8028de0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8028df2:	4554      	cmp	r4, sl
 8028df4:	d106      	bne.n	8028e04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8028df6:	4659      	mov	r1, fp
 8028df8:	4648      	mov	r0, r9
 8028dfa:	f000 f82b 	bl	8028e54 <_ZNKSt9type_info7__equalERKS_>
 8028dfe:	b108      	cbz	r0, 8028e04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8028e00:	7177      	strb	r7, [r6, #5]
 8028e02:	e7ed      	b.n	8028de0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8028e04:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8028e08:	6803      	ldr	r3, [r0, #0]
 8028e0a:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 8028e0e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 8028e12:	69dc      	ldr	r4, [r3, #28]
 8028e14:	463a      	mov	r2, r7
 8028e16:	4643      	mov	r3, r8
 8028e18:	4629      	mov	r1, r5
 8028e1a:	46a4      	mov	ip, r4
 8028e1c:	b001      	add	sp, #4
 8028e1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e22:	4760      	bx	ip

08028e24 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8028e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028e28:	4607      	mov	r7, r0
 8028e2a:	460c      	mov	r4, r1
 8028e2c:	4615      	mov	r5, r2
 8028e2e:	461e      	mov	r6, r3
 8028e30:	f7ff ff61 	bl	8028cf6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8028e34:	b948      	cbnz	r0, 8028e4a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8028e36:	68b8      	ldr	r0, [r7, #8]
 8028e38:	6803      	ldr	r3, [r0, #0]
 8028e3a:	699f      	ldr	r7, [r3, #24]
 8028e3c:	462a      	mov	r2, r5
 8028e3e:	4633      	mov	r3, r6
 8028e40:	4621      	mov	r1, r4
 8028e42:	46bc      	mov	ip, r7
 8028e44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028e48:	4760      	bx	ip
 8028e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028e4e <_ZNSt9type_infoD1Ev>:
 8028e4e:	4770      	bx	lr

08028e50 <_ZNKSt9type_info14__is_pointer_pEv>:
 8028e50:	2000      	movs	r0, #0
 8028e52:	4770      	bx	lr

08028e54 <_ZNKSt9type_info7__equalERKS_>:
 8028e54:	4281      	cmp	r1, r0
 8028e56:	b508      	push	{r3, lr}
 8028e58:	d00e      	beq.n	8028e78 <_ZNKSt9type_info7__equalERKS_+0x24>
 8028e5a:	6840      	ldr	r0, [r0, #4]
 8028e5c:	7803      	ldrb	r3, [r0, #0]
 8028e5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8028e60:	d00c      	beq.n	8028e7c <_ZNKSt9type_info7__equalERKS_+0x28>
 8028e62:	6849      	ldr	r1, [r1, #4]
 8028e64:	780b      	ldrb	r3, [r1, #0]
 8028e66:	2b2a      	cmp	r3, #42	@ 0x2a
 8028e68:	bf08      	it	eq
 8028e6a:	3101      	addeq	r1, #1
 8028e6c:	f7d7 fa38 	bl	80002e0 <strcmp>
 8028e70:	fab0 f080 	clz	r0, r0
 8028e74:	0940      	lsrs	r0, r0, #5
 8028e76:	bd08      	pop	{r3, pc}
 8028e78:	2001      	movs	r0, #1
 8028e7a:	e7fc      	b.n	8028e76 <_ZNKSt9type_info7__equalERKS_+0x22>
 8028e7c:	2000      	movs	r0, #0
 8028e7e:	e7fa      	b.n	8028e76 <_ZNKSt9type_info7__equalERKS_+0x22>

08028e80 <abort>:
 8028e80:	b508      	push	{r3, lr}
 8028e82:	2006      	movs	r0, #6
 8028e84:	f000 fbe8 	bl	8029658 <raise>
 8028e88:	2001      	movs	r0, #1
 8028e8a:	f7e5 ffcb 	bl	800ee24 <_exit>
	...

08028e90 <malloc>:
 8028e90:	4b02      	ldr	r3, [pc, #8]	@ (8028e9c <malloc+0xc>)
 8028e92:	4601      	mov	r1, r0
 8028e94:	6818      	ldr	r0, [r3, #0]
 8028e96:	f000 b82d 	b.w	8028ef4 <_malloc_r>
 8028e9a:	bf00      	nop
 8028e9c:	24000038 	.word	0x24000038

08028ea0 <free>:
 8028ea0:	4b02      	ldr	r3, [pc, #8]	@ (8028eac <free+0xc>)
 8028ea2:	4601      	mov	r1, r0
 8028ea4:	6818      	ldr	r0, [r3, #0]
 8028ea6:	f000 bc85 	b.w	80297b4 <_free_r>
 8028eaa:	bf00      	nop
 8028eac:	24000038 	.word	0x24000038

08028eb0 <sbrk_aligned>:
 8028eb0:	b570      	push	{r4, r5, r6, lr}
 8028eb2:	4e0f      	ldr	r6, [pc, #60]	@ (8028ef0 <sbrk_aligned+0x40>)
 8028eb4:	460c      	mov	r4, r1
 8028eb6:	6831      	ldr	r1, [r6, #0]
 8028eb8:	4605      	mov	r5, r0
 8028eba:	b911      	cbnz	r1, 8028ec2 <sbrk_aligned+0x12>
 8028ebc:	f000 fc1c 	bl	80296f8 <_sbrk_r>
 8028ec0:	6030      	str	r0, [r6, #0]
 8028ec2:	4621      	mov	r1, r4
 8028ec4:	4628      	mov	r0, r5
 8028ec6:	f000 fc17 	bl	80296f8 <_sbrk_r>
 8028eca:	1c43      	adds	r3, r0, #1
 8028ecc:	d103      	bne.n	8028ed6 <sbrk_aligned+0x26>
 8028ece:	f04f 34ff 	mov.w	r4, #4294967295
 8028ed2:	4620      	mov	r0, r4
 8028ed4:	bd70      	pop	{r4, r5, r6, pc}
 8028ed6:	1cc4      	adds	r4, r0, #3
 8028ed8:	f024 0403 	bic.w	r4, r4, #3
 8028edc:	42a0      	cmp	r0, r4
 8028ede:	d0f8      	beq.n	8028ed2 <sbrk_aligned+0x22>
 8028ee0:	1a21      	subs	r1, r4, r0
 8028ee2:	4628      	mov	r0, r5
 8028ee4:	f000 fc08 	bl	80296f8 <_sbrk_r>
 8028ee8:	3001      	adds	r0, #1
 8028eea:	d1f2      	bne.n	8028ed2 <sbrk_aligned+0x22>
 8028eec:	e7ef      	b.n	8028ece <sbrk_aligned+0x1e>
 8028eee:	bf00      	nop
 8028ef0:	24000ac4 	.word	0x24000ac4

08028ef4 <_malloc_r>:
 8028ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028ef8:	1ccd      	adds	r5, r1, #3
 8028efa:	f025 0503 	bic.w	r5, r5, #3
 8028efe:	3508      	adds	r5, #8
 8028f00:	2d0c      	cmp	r5, #12
 8028f02:	bf38      	it	cc
 8028f04:	250c      	movcc	r5, #12
 8028f06:	2d00      	cmp	r5, #0
 8028f08:	4606      	mov	r6, r0
 8028f0a:	db01      	blt.n	8028f10 <_malloc_r+0x1c>
 8028f0c:	42a9      	cmp	r1, r5
 8028f0e:	d904      	bls.n	8028f1a <_malloc_r+0x26>
 8028f10:	230c      	movs	r3, #12
 8028f12:	6033      	str	r3, [r6, #0]
 8028f14:	2000      	movs	r0, #0
 8028f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028f1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8028ff0 <_malloc_r+0xfc>
 8028f1e:	f000 f869 	bl	8028ff4 <__malloc_lock>
 8028f22:	f8d8 3000 	ldr.w	r3, [r8]
 8028f26:	461c      	mov	r4, r3
 8028f28:	bb44      	cbnz	r4, 8028f7c <_malloc_r+0x88>
 8028f2a:	4629      	mov	r1, r5
 8028f2c:	4630      	mov	r0, r6
 8028f2e:	f7ff ffbf 	bl	8028eb0 <sbrk_aligned>
 8028f32:	1c43      	adds	r3, r0, #1
 8028f34:	4604      	mov	r4, r0
 8028f36:	d158      	bne.n	8028fea <_malloc_r+0xf6>
 8028f38:	f8d8 4000 	ldr.w	r4, [r8]
 8028f3c:	4627      	mov	r7, r4
 8028f3e:	2f00      	cmp	r7, #0
 8028f40:	d143      	bne.n	8028fca <_malloc_r+0xd6>
 8028f42:	2c00      	cmp	r4, #0
 8028f44:	d04b      	beq.n	8028fde <_malloc_r+0xea>
 8028f46:	6823      	ldr	r3, [r4, #0]
 8028f48:	4639      	mov	r1, r7
 8028f4a:	4630      	mov	r0, r6
 8028f4c:	eb04 0903 	add.w	r9, r4, r3
 8028f50:	f000 fbd2 	bl	80296f8 <_sbrk_r>
 8028f54:	4581      	cmp	r9, r0
 8028f56:	d142      	bne.n	8028fde <_malloc_r+0xea>
 8028f58:	6821      	ldr	r1, [r4, #0]
 8028f5a:	1a6d      	subs	r5, r5, r1
 8028f5c:	4629      	mov	r1, r5
 8028f5e:	4630      	mov	r0, r6
 8028f60:	f7ff ffa6 	bl	8028eb0 <sbrk_aligned>
 8028f64:	3001      	adds	r0, #1
 8028f66:	d03a      	beq.n	8028fde <_malloc_r+0xea>
 8028f68:	6823      	ldr	r3, [r4, #0]
 8028f6a:	442b      	add	r3, r5
 8028f6c:	6023      	str	r3, [r4, #0]
 8028f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8028f72:	685a      	ldr	r2, [r3, #4]
 8028f74:	bb62      	cbnz	r2, 8028fd0 <_malloc_r+0xdc>
 8028f76:	f8c8 7000 	str.w	r7, [r8]
 8028f7a:	e00f      	b.n	8028f9c <_malloc_r+0xa8>
 8028f7c:	6822      	ldr	r2, [r4, #0]
 8028f7e:	1b52      	subs	r2, r2, r5
 8028f80:	d420      	bmi.n	8028fc4 <_malloc_r+0xd0>
 8028f82:	2a0b      	cmp	r2, #11
 8028f84:	d917      	bls.n	8028fb6 <_malloc_r+0xc2>
 8028f86:	1961      	adds	r1, r4, r5
 8028f88:	42a3      	cmp	r3, r4
 8028f8a:	6025      	str	r5, [r4, #0]
 8028f8c:	bf18      	it	ne
 8028f8e:	6059      	strne	r1, [r3, #4]
 8028f90:	6863      	ldr	r3, [r4, #4]
 8028f92:	bf08      	it	eq
 8028f94:	f8c8 1000 	streq.w	r1, [r8]
 8028f98:	5162      	str	r2, [r4, r5]
 8028f9a:	604b      	str	r3, [r1, #4]
 8028f9c:	4630      	mov	r0, r6
 8028f9e:	f000 f82f 	bl	8029000 <__malloc_unlock>
 8028fa2:	f104 000b 	add.w	r0, r4, #11
 8028fa6:	1d23      	adds	r3, r4, #4
 8028fa8:	f020 0007 	bic.w	r0, r0, #7
 8028fac:	1ac2      	subs	r2, r0, r3
 8028fae:	bf1c      	itt	ne
 8028fb0:	1a1b      	subne	r3, r3, r0
 8028fb2:	50a3      	strne	r3, [r4, r2]
 8028fb4:	e7af      	b.n	8028f16 <_malloc_r+0x22>
 8028fb6:	6862      	ldr	r2, [r4, #4]
 8028fb8:	42a3      	cmp	r3, r4
 8028fba:	bf0c      	ite	eq
 8028fbc:	f8c8 2000 	streq.w	r2, [r8]
 8028fc0:	605a      	strne	r2, [r3, #4]
 8028fc2:	e7eb      	b.n	8028f9c <_malloc_r+0xa8>
 8028fc4:	4623      	mov	r3, r4
 8028fc6:	6864      	ldr	r4, [r4, #4]
 8028fc8:	e7ae      	b.n	8028f28 <_malloc_r+0x34>
 8028fca:	463c      	mov	r4, r7
 8028fcc:	687f      	ldr	r7, [r7, #4]
 8028fce:	e7b6      	b.n	8028f3e <_malloc_r+0x4a>
 8028fd0:	461a      	mov	r2, r3
 8028fd2:	685b      	ldr	r3, [r3, #4]
 8028fd4:	42a3      	cmp	r3, r4
 8028fd6:	d1fb      	bne.n	8028fd0 <_malloc_r+0xdc>
 8028fd8:	2300      	movs	r3, #0
 8028fda:	6053      	str	r3, [r2, #4]
 8028fdc:	e7de      	b.n	8028f9c <_malloc_r+0xa8>
 8028fde:	230c      	movs	r3, #12
 8028fe0:	6033      	str	r3, [r6, #0]
 8028fe2:	4630      	mov	r0, r6
 8028fe4:	f000 f80c 	bl	8029000 <__malloc_unlock>
 8028fe8:	e794      	b.n	8028f14 <_malloc_r+0x20>
 8028fea:	6005      	str	r5, [r0, #0]
 8028fec:	e7d6      	b.n	8028f9c <_malloc_r+0xa8>
 8028fee:	bf00      	nop
 8028ff0:	24000ac8 	.word	0x24000ac8

08028ff4 <__malloc_lock>:
 8028ff4:	4801      	ldr	r0, [pc, #4]	@ (8028ffc <__malloc_lock+0x8>)
 8028ff6:	f000 bbcc 	b.w	8029792 <__retarget_lock_acquire_recursive>
 8028ffa:	bf00      	nop
 8028ffc:	24000c0c 	.word	0x24000c0c

08029000 <__malloc_unlock>:
 8029000:	4801      	ldr	r0, [pc, #4]	@ (8029008 <__malloc_unlock+0x8>)
 8029002:	f000 bbc7 	b.w	8029794 <__retarget_lock_release_recursive>
 8029006:	bf00      	nop
 8029008:	24000c0c 	.word	0x24000c0c

0802900c <realloc>:
 802900c:	4b02      	ldr	r3, [pc, #8]	@ (8029018 <realloc+0xc>)
 802900e:	460a      	mov	r2, r1
 8029010:	4601      	mov	r1, r0
 8029012:	6818      	ldr	r0, [r3, #0]
 8029014:	f000 b802 	b.w	802901c <_realloc_r>
 8029018:	24000038 	.word	0x24000038

0802901c <_realloc_r>:
 802901c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029020:	4680      	mov	r8, r0
 8029022:	4615      	mov	r5, r2
 8029024:	460c      	mov	r4, r1
 8029026:	b921      	cbnz	r1, 8029032 <_realloc_r+0x16>
 8029028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802902c:	4611      	mov	r1, r2
 802902e:	f7ff bf61 	b.w	8028ef4 <_malloc_r>
 8029032:	b92a      	cbnz	r2, 8029040 <_realloc_r+0x24>
 8029034:	f000 fbbe 	bl	80297b4 <_free_r>
 8029038:	2400      	movs	r4, #0
 802903a:	4620      	mov	r0, r4
 802903c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029040:	f000 fc02 	bl	8029848 <_malloc_usable_size_r>
 8029044:	4285      	cmp	r5, r0
 8029046:	4606      	mov	r6, r0
 8029048:	d802      	bhi.n	8029050 <_realloc_r+0x34>
 802904a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802904e:	d8f4      	bhi.n	802903a <_realloc_r+0x1e>
 8029050:	4629      	mov	r1, r5
 8029052:	4640      	mov	r0, r8
 8029054:	f7ff ff4e 	bl	8028ef4 <_malloc_r>
 8029058:	4607      	mov	r7, r0
 802905a:	2800      	cmp	r0, #0
 802905c:	d0ec      	beq.n	8029038 <_realloc_r+0x1c>
 802905e:	42b5      	cmp	r5, r6
 8029060:	462a      	mov	r2, r5
 8029062:	4621      	mov	r1, r4
 8029064:	bf28      	it	cs
 8029066:	4632      	movcs	r2, r6
 8029068:	f000 fb95 	bl	8029796 <memcpy>
 802906c:	4621      	mov	r1, r4
 802906e:	4640      	mov	r0, r8
 8029070:	f000 fba0 	bl	80297b4 <_free_r>
 8029074:	463c      	mov	r4, r7
 8029076:	e7e0      	b.n	802903a <_realloc_r+0x1e>

08029078 <_strtol_l.constprop.0>:
 8029078:	2b24      	cmp	r3, #36	@ 0x24
 802907a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802907e:	4686      	mov	lr, r0
 8029080:	4690      	mov	r8, r2
 8029082:	d801      	bhi.n	8029088 <_strtol_l.constprop.0+0x10>
 8029084:	2b01      	cmp	r3, #1
 8029086:	d106      	bne.n	8029096 <_strtol_l.constprop.0+0x1e>
 8029088:	f000 fb58 	bl	802973c <__errno>
 802908c:	2316      	movs	r3, #22
 802908e:	6003      	str	r3, [r0, #0]
 8029090:	2000      	movs	r0, #0
 8029092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029096:	4834      	ldr	r0, [pc, #208]	@ (8029168 <_strtol_l.constprop.0+0xf0>)
 8029098:	460d      	mov	r5, r1
 802909a:	462a      	mov	r2, r5
 802909c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80290a0:	5d06      	ldrb	r6, [r0, r4]
 80290a2:	f016 0608 	ands.w	r6, r6, #8
 80290a6:	d1f8      	bne.n	802909a <_strtol_l.constprop.0+0x22>
 80290a8:	2c2d      	cmp	r4, #45	@ 0x2d
 80290aa:	d12d      	bne.n	8029108 <_strtol_l.constprop.0+0x90>
 80290ac:	782c      	ldrb	r4, [r5, #0]
 80290ae:	2601      	movs	r6, #1
 80290b0:	1c95      	adds	r5, r2, #2
 80290b2:	f033 0210 	bics.w	r2, r3, #16
 80290b6:	d109      	bne.n	80290cc <_strtol_l.constprop.0+0x54>
 80290b8:	2c30      	cmp	r4, #48	@ 0x30
 80290ba:	d12a      	bne.n	8029112 <_strtol_l.constprop.0+0x9a>
 80290bc:	782a      	ldrb	r2, [r5, #0]
 80290be:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80290c2:	2a58      	cmp	r2, #88	@ 0x58
 80290c4:	d125      	bne.n	8029112 <_strtol_l.constprop.0+0x9a>
 80290c6:	786c      	ldrb	r4, [r5, #1]
 80290c8:	2310      	movs	r3, #16
 80290ca:	3502      	adds	r5, #2
 80290cc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80290d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80290d4:	2200      	movs	r2, #0
 80290d6:	fbbc f9f3 	udiv	r9, ip, r3
 80290da:	4610      	mov	r0, r2
 80290dc:	fb03 ca19 	mls	sl, r3, r9, ip
 80290e0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80290e4:	2f09      	cmp	r7, #9
 80290e6:	d81b      	bhi.n	8029120 <_strtol_l.constprop.0+0xa8>
 80290e8:	463c      	mov	r4, r7
 80290ea:	42a3      	cmp	r3, r4
 80290ec:	dd27      	ble.n	802913e <_strtol_l.constprop.0+0xc6>
 80290ee:	1c57      	adds	r7, r2, #1
 80290f0:	d007      	beq.n	8029102 <_strtol_l.constprop.0+0x8a>
 80290f2:	4581      	cmp	r9, r0
 80290f4:	d320      	bcc.n	8029138 <_strtol_l.constprop.0+0xc0>
 80290f6:	d101      	bne.n	80290fc <_strtol_l.constprop.0+0x84>
 80290f8:	45a2      	cmp	sl, r4
 80290fa:	db1d      	blt.n	8029138 <_strtol_l.constprop.0+0xc0>
 80290fc:	fb00 4003 	mla	r0, r0, r3, r4
 8029100:	2201      	movs	r2, #1
 8029102:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029106:	e7eb      	b.n	80290e0 <_strtol_l.constprop.0+0x68>
 8029108:	2c2b      	cmp	r4, #43	@ 0x2b
 802910a:	bf04      	itt	eq
 802910c:	782c      	ldrbeq	r4, [r5, #0]
 802910e:	1c95      	addeq	r5, r2, #2
 8029110:	e7cf      	b.n	80290b2 <_strtol_l.constprop.0+0x3a>
 8029112:	2b00      	cmp	r3, #0
 8029114:	d1da      	bne.n	80290cc <_strtol_l.constprop.0+0x54>
 8029116:	2c30      	cmp	r4, #48	@ 0x30
 8029118:	bf0c      	ite	eq
 802911a:	2308      	moveq	r3, #8
 802911c:	230a      	movne	r3, #10
 802911e:	e7d5      	b.n	80290cc <_strtol_l.constprop.0+0x54>
 8029120:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8029124:	2f19      	cmp	r7, #25
 8029126:	d801      	bhi.n	802912c <_strtol_l.constprop.0+0xb4>
 8029128:	3c37      	subs	r4, #55	@ 0x37
 802912a:	e7de      	b.n	80290ea <_strtol_l.constprop.0+0x72>
 802912c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8029130:	2f19      	cmp	r7, #25
 8029132:	d804      	bhi.n	802913e <_strtol_l.constprop.0+0xc6>
 8029134:	3c57      	subs	r4, #87	@ 0x57
 8029136:	e7d8      	b.n	80290ea <_strtol_l.constprop.0+0x72>
 8029138:	f04f 32ff 	mov.w	r2, #4294967295
 802913c:	e7e1      	b.n	8029102 <_strtol_l.constprop.0+0x8a>
 802913e:	1c53      	adds	r3, r2, #1
 8029140:	d108      	bne.n	8029154 <_strtol_l.constprop.0+0xdc>
 8029142:	2322      	movs	r3, #34	@ 0x22
 8029144:	f8ce 3000 	str.w	r3, [lr]
 8029148:	4660      	mov	r0, ip
 802914a:	f1b8 0f00 	cmp.w	r8, #0
 802914e:	d0a0      	beq.n	8029092 <_strtol_l.constprop.0+0x1a>
 8029150:	1e69      	subs	r1, r5, #1
 8029152:	e006      	b.n	8029162 <_strtol_l.constprop.0+0xea>
 8029154:	b106      	cbz	r6, 8029158 <_strtol_l.constprop.0+0xe0>
 8029156:	4240      	negs	r0, r0
 8029158:	f1b8 0f00 	cmp.w	r8, #0
 802915c:	d099      	beq.n	8029092 <_strtol_l.constprop.0+0x1a>
 802915e:	2a00      	cmp	r2, #0
 8029160:	d1f6      	bne.n	8029150 <_strtol_l.constprop.0+0xd8>
 8029162:	f8c8 1000 	str.w	r1, [r8]
 8029166:	e794      	b.n	8029092 <_strtol_l.constprop.0+0x1a>
 8029168:	0802b8e9 	.word	0x0802b8e9

0802916c <strtol>:
 802916c:	4613      	mov	r3, r2
 802916e:	460a      	mov	r2, r1
 8029170:	4601      	mov	r1, r0
 8029172:	4802      	ldr	r0, [pc, #8]	@ (802917c <strtol+0x10>)
 8029174:	6800      	ldr	r0, [r0, #0]
 8029176:	f7ff bf7f 	b.w	8029078 <_strtol_l.constprop.0>
 802917a:	bf00      	nop
 802917c:	24000038 	.word	0x24000038

08029180 <std>:
 8029180:	2300      	movs	r3, #0
 8029182:	b510      	push	{r4, lr}
 8029184:	4604      	mov	r4, r0
 8029186:	e9c0 3300 	strd	r3, r3, [r0]
 802918a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802918e:	6083      	str	r3, [r0, #8]
 8029190:	8181      	strh	r1, [r0, #12]
 8029192:	6643      	str	r3, [r0, #100]	@ 0x64
 8029194:	81c2      	strh	r2, [r0, #14]
 8029196:	6183      	str	r3, [r0, #24]
 8029198:	4619      	mov	r1, r3
 802919a:	2208      	movs	r2, #8
 802919c:	305c      	adds	r0, #92	@ 0x5c
 802919e:	f000 fa2b 	bl	80295f8 <memset>
 80291a2:	4b0d      	ldr	r3, [pc, #52]	@ (80291d8 <std+0x58>)
 80291a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80291a6:	4b0d      	ldr	r3, [pc, #52]	@ (80291dc <std+0x5c>)
 80291a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80291aa:	4b0d      	ldr	r3, [pc, #52]	@ (80291e0 <std+0x60>)
 80291ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80291ae:	4b0d      	ldr	r3, [pc, #52]	@ (80291e4 <std+0x64>)
 80291b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80291b2:	4b0d      	ldr	r3, [pc, #52]	@ (80291e8 <std+0x68>)
 80291b4:	6224      	str	r4, [r4, #32]
 80291b6:	429c      	cmp	r4, r3
 80291b8:	d006      	beq.n	80291c8 <std+0x48>
 80291ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80291be:	4294      	cmp	r4, r2
 80291c0:	d002      	beq.n	80291c8 <std+0x48>
 80291c2:	33d0      	adds	r3, #208	@ 0xd0
 80291c4:	429c      	cmp	r4, r3
 80291c6:	d105      	bne.n	80291d4 <std+0x54>
 80291c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80291cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80291d0:	f000 bade 	b.w	8029790 <__retarget_lock_init_recursive>
 80291d4:	bd10      	pop	{r4, pc}
 80291d6:	bf00      	nop
 80291d8:	080293f5 	.word	0x080293f5
 80291dc:	08029417 	.word	0x08029417
 80291e0:	0802944f 	.word	0x0802944f
 80291e4:	08029473 	.word	0x08029473
 80291e8:	24000acc 	.word	0x24000acc

080291ec <stdio_exit_handler>:
 80291ec:	4a02      	ldr	r2, [pc, #8]	@ (80291f8 <stdio_exit_handler+0xc>)
 80291ee:	4903      	ldr	r1, [pc, #12]	@ (80291fc <stdio_exit_handler+0x10>)
 80291f0:	4803      	ldr	r0, [pc, #12]	@ (8029200 <stdio_exit_handler+0x14>)
 80291f2:	f000 b869 	b.w	80292c8 <_fwalk_sglue>
 80291f6:	bf00      	nop
 80291f8:	2400002c 	.word	0x2400002c
 80291fc:	08029f01 	.word	0x08029f01
 8029200:	2400003c 	.word	0x2400003c

08029204 <cleanup_stdio>:
 8029204:	6841      	ldr	r1, [r0, #4]
 8029206:	4b0c      	ldr	r3, [pc, #48]	@ (8029238 <cleanup_stdio+0x34>)
 8029208:	4299      	cmp	r1, r3
 802920a:	b510      	push	{r4, lr}
 802920c:	4604      	mov	r4, r0
 802920e:	d001      	beq.n	8029214 <cleanup_stdio+0x10>
 8029210:	f000 fe76 	bl	8029f00 <_fflush_r>
 8029214:	68a1      	ldr	r1, [r4, #8]
 8029216:	4b09      	ldr	r3, [pc, #36]	@ (802923c <cleanup_stdio+0x38>)
 8029218:	4299      	cmp	r1, r3
 802921a:	d002      	beq.n	8029222 <cleanup_stdio+0x1e>
 802921c:	4620      	mov	r0, r4
 802921e:	f000 fe6f 	bl	8029f00 <_fflush_r>
 8029222:	68e1      	ldr	r1, [r4, #12]
 8029224:	4b06      	ldr	r3, [pc, #24]	@ (8029240 <cleanup_stdio+0x3c>)
 8029226:	4299      	cmp	r1, r3
 8029228:	d004      	beq.n	8029234 <cleanup_stdio+0x30>
 802922a:	4620      	mov	r0, r4
 802922c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029230:	f000 be66 	b.w	8029f00 <_fflush_r>
 8029234:	bd10      	pop	{r4, pc}
 8029236:	bf00      	nop
 8029238:	24000acc 	.word	0x24000acc
 802923c:	24000b34 	.word	0x24000b34
 8029240:	24000b9c 	.word	0x24000b9c

08029244 <global_stdio_init.part.0>:
 8029244:	b510      	push	{r4, lr}
 8029246:	4b0b      	ldr	r3, [pc, #44]	@ (8029274 <global_stdio_init.part.0+0x30>)
 8029248:	4c0b      	ldr	r4, [pc, #44]	@ (8029278 <global_stdio_init.part.0+0x34>)
 802924a:	4a0c      	ldr	r2, [pc, #48]	@ (802927c <global_stdio_init.part.0+0x38>)
 802924c:	601a      	str	r2, [r3, #0]
 802924e:	4620      	mov	r0, r4
 8029250:	2200      	movs	r2, #0
 8029252:	2104      	movs	r1, #4
 8029254:	f7ff ff94 	bl	8029180 <std>
 8029258:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802925c:	2201      	movs	r2, #1
 802925e:	2109      	movs	r1, #9
 8029260:	f7ff ff8e 	bl	8029180 <std>
 8029264:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8029268:	2202      	movs	r2, #2
 802926a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802926e:	2112      	movs	r1, #18
 8029270:	f7ff bf86 	b.w	8029180 <std>
 8029274:	24000c04 	.word	0x24000c04
 8029278:	24000acc 	.word	0x24000acc
 802927c:	080291ed 	.word	0x080291ed

08029280 <__sfp_lock_acquire>:
 8029280:	4801      	ldr	r0, [pc, #4]	@ (8029288 <__sfp_lock_acquire+0x8>)
 8029282:	f000 ba86 	b.w	8029792 <__retarget_lock_acquire_recursive>
 8029286:	bf00      	nop
 8029288:	24000c0d 	.word	0x24000c0d

0802928c <__sfp_lock_release>:
 802928c:	4801      	ldr	r0, [pc, #4]	@ (8029294 <__sfp_lock_release+0x8>)
 802928e:	f000 ba81 	b.w	8029794 <__retarget_lock_release_recursive>
 8029292:	bf00      	nop
 8029294:	24000c0d 	.word	0x24000c0d

08029298 <__sinit>:
 8029298:	b510      	push	{r4, lr}
 802929a:	4604      	mov	r4, r0
 802929c:	f7ff fff0 	bl	8029280 <__sfp_lock_acquire>
 80292a0:	6a23      	ldr	r3, [r4, #32]
 80292a2:	b11b      	cbz	r3, 80292ac <__sinit+0x14>
 80292a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80292a8:	f7ff bff0 	b.w	802928c <__sfp_lock_release>
 80292ac:	4b04      	ldr	r3, [pc, #16]	@ (80292c0 <__sinit+0x28>)
 80292ae:	6223      	str	r3, [r4, #32]
 80292b0:	4b04      	ldr	r3, [pc, #16]	@ (80292c4 <__sinit+0x2c>)
 80292b2:	681b      	ldr	r3, [r3, #0]
 80292b4:	2b00      	cmp	r3, #0
 80292b6:	d1f5      	bne.n	80292a4 <__sinit+0xc>
 80292b8:	f7ff ffc4 	bl	8029244 <global_stdio_init.part.0>
 80292bc:	e7f2      	b.n	80292a4 <__sinit+0xc>
 80292be:	bf00      	nop
 80292c0:	08029205 	.word	0x08029205
 80292c4:	24000c04 	.word	0x24000c04

080292c8 <_fwalk_sglue>:
 80292c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80292cc:	4607      	mov	r7, r0
 80292ce:	4688      	mov	r8, r1
 80292d0:	4614      	mov	r4, r2
 80292d2:	2600      	movs	r6, #0
 80292d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80292d8:	f1b9 0901 	subs.w	r9, r9, #1
 80292dc:	d505      	bpl.n	80292ea <_fwalk_sglue+0x22>
 80292de:	6824      	ldr	r4, [r4, #0]
 80292e0:	2c00      	cmp	r4, #0
 80292e2:	d1f7      	bne.n	80292d4 <_fwalk_sglue+0xc>
 80292e4:	4630      	mov	r0, r6
 80292e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80292ea:	89ab      	ldrh	r3, [r5, #12]
 80292ec:	2b01      	cmp	r3, #1
 80292ee:	d907      	bls.n	8029300 <_fwalk_sglue+0x38>
 80292f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80292f4:	3301      	adds	r3, #1
 80292f6:	d003      	beq.n	8029300 <_fwalk_sglue+0x38>
 80292f8:	4629      	mov	r1, r5
 80292fa:	4638      	mov	r0, r7
 80292fc:	47c0      	blx	r8
 80292fe:	4306      	orrs	r6, r0
 8029300:	3568      	adds	r5, #104	@ 0x68
 8029302:	e7e9      	b.n	80292d8 <_fwalk_sglue+0x10>

08029304 <iprintf>:
 8029304:	b40f      	push	{r0, r1, r2, r3}
 8029306:	b507      	push	{r0, r1, r2, lr}
 8029308:	4906      	ldr	r1, [pc, #24]	@ (8029324 <iprintf+0x20>)
 802930a:	ab04      	add	r3, sp, #16
 802930c:	6808      	ldr	r0, [r1, #0]
 802930e:	f853 2b04 	ldr.w	r2, [r3], #4
 8029312:	6881      	ldr	r1, [r0, #8]
 8029314:	9301      	str	r3, [sp, #4]
 8029316:	f000 fac9 	bl	80298ac <_vfiprintf_r>
 802931a:	b003      	add	sp, #12
 802931c:	f85d eb04 	ldr.w	lr, [sp], #4
 8029320:	b004      	add	sp, #16
 8029322:	4770      	bx	lr
 8029324:	24000038 	.word	0x24000038

08029328 <putchar>:
 8029328:	4b02      	ldr	r3, [pc, #8]	@ (8029334 <putchar+0xc>)
 802932a:	4601      	mov	r1, r0
 802932c:	6818      	ldr	r0, [r3, #0]
 802932e:	6882      	ldr	r2, [r0, #8]
 8029330:	f000 be70 	b.w	802a014 <_putc_r>
 8029334:	24000038 	.word	0x24000038

08029338 <_puts_r>:
 8029338:	6a03      	ldr	r3, [r0, #32]
 802933a:	b570      	push	{r4, r5, r6, lr}
 802933c:	6884      	ldr	r4, [r0, #8]
 802933e:	4605      	mov	r5, r0
 8029340:	460e      	mov	r6, r1
 8029342:	b90b      	cbnz	r3, 8029348 <_puts_r+0x10>
 8029344:	f7ff ffa8 	bl	8029298 <__sinit>
 8029348:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802934a:	07db      	lsls	r3, r3, #31
 802934c:	d405      	bmi.n	802935a <_puts_r+0x22>
 802934e:	89a3      	ldrh	r3, [r4, #12]
 8029350:	0598      	lsls	r0, r3, #22
 8029352:	d402      	bmi.n	802935a <_puts_r+0x22>
 8029354:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029356:	f000 fa1c 	bl	8029792 <__retarget_lock_acquire_recursive>
 802935a:	89a3      	ldrh	r3, [r4, #12]
 802935c:	0719      	lsls	r1, r3, #28
 802935e:	d502      	bpl.n	8029366 <_puts_r+0x2e>
 8029360:	6923      	ldr	r3, [r4, #16]
 8029362:	2b00      	cmp	r3, #0
 8029364:	d135      	bne.n	80293d2 <_puts_r+0x9a>
 8029366:	4621      	mov	r1, r4
 8029368:	4628      	mov	r0, r5
 802936a:	f000 f8c5 	bl	80294f8 <__swsetup_r>
 802936e:	b380      	cbz	r0, 80293d2 <_puts_r+0x9a>
 8029370:	f04f 35ff 	mov.w	r5, #4294967295
 8029374:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029376:	07da      	lsls	r2, r3, #31
 8029378:	d405      	bmi.n	8029386 <_puts_r+0x4e>
 802937a:	89a3      	ldrh	r3, [r4, #12]
 802937c:	059b      	lsls	r3, r3, #22
 802937e:	d402      	bmi.n	8029386 <_puts_r+0x4e>
 8029380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029382:	f000 fa07 	bl	8029794 <__retarget_lock_release_recursive>
 8029386:	4628      	mov	r0, r5
 8029388:	bd70      	pop	{r4, r5, r6, pc}
 802938a:	2b00      	cmp	r3, #0
 802938c:	da04      	bge.n	8029398 <_puts_r+0x60>
 802938e:	69a2      	ldr	r2, [r4, #24]
 8029390:	429a      	cmp	r2, r3
 8029392:	dc17      	bgt.n	80293c4 <_puts_r+0x8c>
 8029394:	290a      	cmp	r1, #10
 8029396:	d015      	beq.n	80293c4 <_puts_r+0x8c>
 8029398:	6823      	ldr	r3, [r4, #0]
 802939a:	1c5a      	adds	r2, r3, #1
 802939c:	6022      	str	r2, [r4, #0]
 802939e:	7019      	strb	r1, [r3, #0]
 80293a0:	68a3      	ldr	r3, [r4, #8]
 80293a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80293a6:	3b01      	subs	r3, #1
 80293a8:	60a3      	str	r3, [r4, #8]
 80293aa:	2900      	cmp	r1, #0
 80293ac:	d1ed      	bne.n	802938a <_puts_r+0x52>
 80293ae:	2b00      	cmp	r3, #0
 80293b0:	da11      	bge.n	80293d6 <_puts_r+0x9e>
 80293b2:	4622      	mov	r2, r4
 80293b4:	210a      	movs	r1, #10
 80293b6:	4628      	mov	r0, r5
 80293b8:	f000 f85f 	bl	802947a <__swbuf_r>
 80293bc:	3001      	adds	r0, #1
 80293be:	d0d7      	beq.n	8029370 <_puts_r+0x38>
 80293c0:	250a      	movs	r5, #10
 80293c2:	e7d7      	b.n	8029374 <_puts_r+0x3c>
 80293c4:	4622      	mov	r2, r4
 80293c6:	4628      	mov	r0, r5
 80293c8:	f000 f857 	bl	802947a <__swbuf_r>
 80293cc:	3001      	adds	r0, #1
 80293ce:	d1e7      	bne.n	80293a0 <_puts_r+0x68>
 80293d0:	e7ce      	b.n	8029370 <_puts_r+0x38>
 80293d2:	3e01      	subs	r6, #1
 80293d4:	e7e4      	b.n	80293a0 <_puts_r+0x68>
 80293d6:	6823      	ldr	r3, [r4, #0]
 80293d8:	1c5a      	adds	r2, r3, #1
 80293da:	6022      	str	r2, [r4, #0]
 80293dc:	220a      	movs	r2, #10
 80293de:	701a      	strb	r2, [r3, #0]
 80293e0:	e7ee      	b.n	80293c0 <_puts_r+0x88>
	...

080293e4 <puts>:
 80293e4:	4b02      	ldr	r3, [pc, #8]	@ (80293f0 <puts+0xc>)
 80293e6:	4601      	mov	r1, r0
 80293e8:	6818      	ldr	r0, [r3, #0]
 80293ea:	f7ff bfa5 	b.w	8029338 <_puts_r>
 80293ee:	bf00      	nop
 80293f0:	24000038 	.word	0x24000038

080293f4 <__sread>:
 80293f4:	b510      	push	{r4, lr}
 80293f6:	460c      	mov	r4, r1
 80293f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80293fc:	f000 f956 	bl	80296ac <_read_r>
 8029400:	2800      	cmp	r0, #0
 8029402:	bfab      	itete	ge
 8029404:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8029406:	89a3      	ldrhlt	r3, [r4, #12]
 8029408:	181b      	addge	r3, r3, r0
 802940a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802940e:	bfac      	ite	ge
 8029410:	6563      	strge	r3, [r4, #84]	@ 0x54
 8029412:	81a3      	strhlt	r3, [r4, #12]
 8029414:	bd10      	pop	{r4, pc}

08029416 <__swrite>:
 8029416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802941a:	461f      	mov	r7, r3
 802941c:	898b      	ldrh	r3, [r1, #12]
 802941e:	05db      	lsls	r3, r3, #23
 8029420:	4605      	mov	r5, r0
 8029422:	460c      	mov	r4, r1
 8029424:	4616      	mov	r6, r2
 8029426:	d505      	bpl.n	8029434 <__swrite+0x1e>
 8029428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802942c:	2302      	movs	r3, #2
 802942e:	2200      	movs	r2, #0
 8029430:	f000 f92a 	bl	8029688 <_lseek_r>
 8029434:	89a3      	ldrh	r3, [r4, #12]
 8029436:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802943a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802943e:	81a3      	strh	r3, [r4, #12]
 8029440:	4632      	mov	r2, r6
 8029442:	463b      	mov	r3, r7
 8029444:	4628      	mov	r0, r5
 8029446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802944a:	f000 b965 	b.w	8029718 <_write_r>

0802944e <__sseek>:
 802944e:	b510      	push	{r4, lr}
 8029450:	460c      	mov	r4, r1
 8029452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029456:	f000 f917 	bl	8029688 <_lseek_r>
 802945a:	1c43      	adds	r3, r0, #1
 802945c:	89a3      	ldrh	r3, [r4, #12]
 802945e:	bf15      	itete	ne
 8029460:	6560      	strne	r0, [r4, #84]	@ 0x54
 8029462:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8029466:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802946a:	81a3      	strheq	r3, [r4, #12]
 802946c:	bf18      	it	ne
 802946e:	81a3      	strhne	r3, [r4, #12]
 8029470:	bd10      	pop	{r4, pc}

08029472 <__sclose>:
 8029472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029476:	f000 b8f7 	b.w	8029668 <_close_r>

0802947a <__swbuf_r>:
 802947a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802947c:	460e      	mov	r6, r1
 802947e:	4614      	mov	r4, r2
 8029480:	4605      	mov	r5, r0
 8029482:	b118      	cbz	r0, 802948c <__swbuf_r+0x12>
 8029484:	6a03      	ldr	r3, [r0, #32]
 8029486:	b90b      	cbnz	r3, 802948c <__swbuf_r+0x12>
 8029488:	f7ff ff06 	bl	8029298 <__sinit>
 802948c:	69a3      	ldr	r3, [r4, #24]
 802948e:	60a3      	str	r3, [r4, #8]
 8029490:	89a3      	ldrh	r3, [r4, #12]
 8029492:	071a      	lsls	r2, r3, #28
 8029494:	d501      	bpl.n	802949a <__swbuf_r+0x20>
 8029496:	6923      	ldr	r3, [r4, #16]
 8029498:	b943      	cbnz	r3, 80294ac <__swbuf_r+0x32>
 802949a:	4621      	mov	r1, r4
 802949c:	4628      	mov	r0, r5
 802949e:	f000 f82b 	bl	80294f8 <__swsetup_r>
 80294a2:	b118      	cbz	r0, 80294ac <__swbuf_r+0x32>
 80294a4:	f04f 37ff 	mov.w	r7, #4294967295
 80294a8:	4638      	mov	r0, r7
 80294aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80294ac:	6823      	ldr	r3, [r4, #0]
 80294ae:	6922      	ldr	r2, [r4, #16]
 80294b0:	1a98      	subs	r0, r3, r2
 80294b2:	6963      	ldr	r3, [r4, #20]
 80294b4:	b2f6      	uxtb	r6, r6
 80294b6:	4283      	cmp	r3, r0
 80294b8:	4637      	mov	r7, r6
 80294ba:	dc05      	bgt.n	80294c8 <__swbuf_r+0x4e>
 80294bc:	4621      	mov	r1, r4
 80294be:	4628      	mov	r0, r5
 80294c0:	f000 fd1e 	bl	8029f00 <_fflush_r>
 80294c4:	2800      	cmp	r0, #0
 80294c6:	d1ed      	bne.n	80294a4 <__swbuf_r+0x2a>
 80294c8:	68a3      	ldr	r3, [r4, #8]
 80294ca:	3b01      	subs	r3, #1
 80294cc:	60a3      	str	r3, [r4, #8]
 80294ce:	6823      	ldr	r3, [r4, #0]
 80294d0:	1c5a      	adds	r2, r3, #1
 80294d2:	6022      	str	r2, [r4, #0]
 80294d4:	701e      	strb	r6, [r3, #0]
 80294d6:	6962      	ldr	r2, [r4, #20]
 80294d8:	1c43      	adds	r3, r0, #1
 80294da:	429a      	cmp	r2, r3
 80294dc:	d004      	beq.n	80294e8 <__swbuf_r+0x6e>
 80294de:	89a3      	ldrh	r3, [r4, #12]
 80294e0:	07db      	lsls	r3, r3, #31
 80294e2:	d5e1      	bpl.n	80294a8 <__swbuf_r+0x2e>
 80294e4:	2e0a      	cmp	r6, #10
 80294e6:	d1df      	bne.n	80294a8 <__swbuf_r+0x2e>
 80294e8:	4621      	mov	r1, r4
 80294ea:	4628      	mov	r0, r5
 80294ec:	f000 fd08 	bl	8029f00 <_fflush_r>
 80294f0:	2800      	cmp	r0, #0
 80294f2:	d0d9      	beq.n	80294a8 <__swbuf_r+0x2e>
 80294f4:	e7d6      	b.n	80294a4 <__swbuf_r+0x2a>
	...

080294f8 <__swsetup_r>:
 80294f8:	b538      	push	{r3, r4, r5, lr}
 80294fa:	4b29      	ldr	r3, [pc, #164]	@ (80295a0 <__swsetup_r+0xa8>)
 80294fc:	4605      	mov	r5, r0
 80294fe:	6818      	ldr	r0, [r3, #0]
 8029500:	460c      	mov	r4, r1
 8029502:	b118      	cbz	r0, 802950c <__swsetup_r+0x14>
 8029504:	6a03      	ldr	r3, [r0, #32]
 8029506:	b90b      	cbnz	r3, 802950c <__swsetup_r+0x14>
 8029508:	f7ff fec6 	bl	8029298 <__sinit>
 802950c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029510:	0719      	lsls	r1, r3, #28
 8029512:	d422      	bmi.n	802955a <__swsetup_r+0x62>
 8029514:	06da      	lsls	r2, r3, #27
 8029516:	d407      	bmi.n	8029528 <__swsetup_r+0x30>
 8029518:	2209      	movs	r2, #9
 802951a:	602a      	str	r2, [r5, #0]
 802951c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029520:	81a3      	strh	r3, [r4, #12]
 8029522:	f04f 30ff 	mov.w	r0, #4294967295
 8029526:	e033      	b.n	8029590 <__swsetup_r+0x98>
 8029528:	0758      	lsls	r0, r3, #29
 802952a:	d512      	bpl.n	8029552 <__swsetup_r+0x5a>
 802952c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802952e:	b141      	cbz	r1, 8029542 <__swsetup_r+0x4a>
 8029530:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8029534:	4299      	cmp	r1, r3
 8029536:	d002      	beq.n	802953e <__swsetup_r+0x46>
 8029538:	4628      	mov	r0, r5
 802953a:	f000 f93b 	bl	80297b4 <_free_r>
 802953e:	2300      	movs	r3, #0
 8029540:	6363      	str	r3, [r4, #52]	@ 0x34
 8029542:	89a3      	ldrh	r3, [r4, #12]
 8029544:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8029548:	81a3      	strh	r3, [r4, #12]
 802954a:	2300      	movs	r3, #0
 802954c:	6063      	str	r3, [r4, #4]
 802954e:	6923      	ldr	r3, [r4, #16]
 8029550:	6023      	str	r3, [r4, #0]
 8029552:	89a3      	ldrh	r3, [r4, #12]
 8029554:	f043 0308 	orr.w	r3, r3, #8
 8029558:	81a3      	strh	r3, [r4, #12]
 802955a:	6923      	ldr	r3, [r4, #16]
 802955c:	b94b      	cbnz	r3, 8029572 <__swsetup_r+0x7a>
 802955e:	89a3      	ldrh	r3, [r4, #12]
 8029560:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8029564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8029568:	d003      	beq.n	8029572 <__swsetup_r+0x7a>
 802956a:	4621      	mov	r1, r4
 802956c:	4628      	mov	r0, r5
 802956e:	f000 fd15 	bl	8029f9c <__smakebuf_r>
 8029572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029576:	f013 0201 	ands.w	r2, r3, #1
 802957a:	d00a      	beq.n	8029592 <__swsetup_r+0x9a>
 802957c:	2200      	movs	r2, #0
 802957e:	60a2      	str	r2, [r4, #8]
 8029580:	6962      	ldr	r2, [r4, #20]
 8029582:	4252      	negs	r2, r2
 8029584:	61a2      	str	r2, [r4, #24]
 8029586:	6922      	ldr	r2, [r4, #16]
 8029588:	b942      	cbnz	r2, 802959c <__swsetup_r+0xa4>
 802958a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802958e:	d1c5      	bne.n	802951c <__swsetup_r+0x24>
 8029590:	bd38      	pop	{r3, r4, r5, pc}
 8029592:	0799      	lsls	r1, r3, #30
 8029594:	bf58      	it	pl
 8029596:	6962      	ldrpl	r2, [r4, #20]
 8029598:	60a2      	str	r2, [r4, #8]
 802959a:	e7f4      	b.n	8029586 <__swsetup_r+0x8e>
 802959c:	2000      	movs	r0, #0
 802959e:	e7f7      	b.n	8029590 <__swsetup_r+0x98>
 80295a0:	24000038 	.word	0x24000038

080295a4 <memcmp>:
 80295a4:	b510      	push	{r4, lr}
 80295a6:	3901      	subs	r1, #1
 80295a8:	4402      	add	r2, r0
 80295aa:	4290      	cmp	r0, r2
 80295ac:	d101      	bne.n	80295b2 <memcmp+0xe>
 80295ae:	2000      	movs	r0, #0
 80295b0:	e005      	b.n	80295be <memcmp+0x1a>
 80295b2:	7803      	ldrb	r3, [r0, #0]
 80295b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80295b8:	42a3      	cmp	r3, r4
 80295ba:	d001      	beq.n	80295c0 <memcmp+0x1c>
 80295bc:	1b18      	subs	r0, r3, r4
 80295be:	bd10      	pop	{r4, pc}
 80295c0:	3001      	adds	r0, #1
 80295c2:	e7f2      	b.n	80295aa <memcmp+0x6>

080295c4 <memmove>:
 80295c4:	4288      	cmp	r0, r1
 80295c6:	b510      	push	{r4, lr}
 80295c8:	eb01 0402 	add.w	r4, r1, r2
 80295cc:	d902      	bls.n	80295d4 <memmove+0x10>
 80295ce:	4284      	cmp	r4, r0
 80295d0:	4623      	mov	r3, r4
 80295d2:	d807      	bhi.n	80295e4 <memmove+0x20>
 80295d4:	1e43      	subs	r3, r0, #1
 80295d6:	42a1      	cmp	r1, r4
 80295d8:	d008      	beq.n	80295ec <memmove+0x28>
 80295da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80295de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80295e2:	e7f8      	b.n	80295d6 <memmove+0x12>
 80295e4:	4402      	add	r2, r0
 80295e6:	4601      	mov	r1, r0
 80295e8:	428a      	cmp	r2, r1
 80295ea:	d100      	bne.n	80295ee <memmove+0x2a>
 80295ec:	bd10      	pop	{r4, pc}
 80295ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80295f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80295f6:	e7f7      	b.n	80295e8 <memmove+0x24>

080295f8 <memset>:
 80295f8:	4402      	add	r2, r0
 80295fa:	4603      	mov	r3, r0
 80295fc:	4293      	cmp	r3, r2
 80295fe:	d100      	bne.n	8029602 <memset+0xa>
 8029600:	4770      	bx	lr
 8029602:	f803 1b01 	strb.w	r1, [r3], #1
 8029606:	e7f9      	b.n	80295fc <memset+0x4>

08029608 <_raise_r>:
 8029608:	291f      	cmp	r1, #31
 802960a:	b538      	push	{r3, r4, r5, lr}
 802960c:	4605      	mov	r5, r0
 802960e:	460c      	mov	r4, r1
 8029610:	d904      	bls.n	802961c <_raise_r+0x14>
 8029612:	2316      	movs	r3, #22
 8029614:	6003      	str	r3, [r0, #0]
 8029616:	f04f 30ff 	mov.w	r0, #4294967295
 802961a:	bd38      	pop	{r3, r4, r5, pc}
 802961c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802961e:	b112      	cbz	r2, 8029626 <_raise_r+0x1e>
 8029620:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029624:	b94b      	cbnz	r3, 802963a <_raise_r+0x32>
 8029626:	4628      	mov	r0, r5
 8029628:	f000 f864 	bl	80296f4 <_getpid_r>
 802962c:	4622      	mov	r2, r4
 802962e:	4601      	mov	r1, r0
 8029630:	4628      	mov	r0, r5
 8029632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029636:	f000 b84b 	b.w	80296d0 <_kill_r>
 802963a:	2b01      	cmp	r3, #1
 802963c:	d00a      	beq.n	8029654 <_raise_r+0x4c>
 802963e:	1c59      	adds	r1, r3, #1
 8029640:	d103      	bne.n	802964a <_raise_r+0x42>
 8029642:	2316      	movs	r3, #22
 8029644:	6003      	str	r3, [r0, #0]
 8029646:	2001      	movs	r0, #1
 8029648:	e7e7      	b.n	802961a <_raise_r+0x12>
 802964a:	2100      	movs	r1, #0
 802964c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8029650:	4620      	mov	r0, r4
 8029652:	4798      	blx	r3
 8029654:	2000      	movs	r0, #0
 8029656:	e7e0      	b.n	802961a <_raise_r+0x12>

08029658 <raise>:
 8029658:	4b02      	ldr	r3, [pc, #8]	@ (8029664 <raise+0xc>)
 802965a:	4601      	mov	r1, r0
 802965c:	6818      	ldr	r0, [r3, #0]
 802965e:	f7ff bfd3 	b.w	8029608 <_raise_r>
 8029662:	bf00      	nop
 8029664:	24000038 	.word	0x24000038

08029668 <_close_r>:
 8029668:	b538      	push	{r3, r4, r5, lr}
 802966a:	4d06      	ldr	r5, [pc, #24]	@ (8029684 <_close_r+0x1c>)
 802966c:	2300      	movs	r3, #0
 802966e:	4604      	mov	r4, r0
 8029670:	4608      	mov	r0, r1
 8029672:	602b      	str	r3, [r5, #0]
 8029674:	f7e5 fc1a 	bl	800eeac <_close>
 8029678:	1c43      	adds	r3, r0, #1
 802967a:	d102      	bne.n	8029682 <_close_r+0x1a>
 802967c:	682b      	ldr	r3, [r5, #0]
 802967e:	b103      	cbz	r3, 8029682 <_close_r+0x1a>
 8029680:	6023      	str	r3, [r4, #0]
 8029682:	bd38      	pop	{r3, r4, r5, pc}
 8029684:	24000c08 	.word	0x24000c08

08029688 <_lseek_r>:
 8029688:	b538      	push	{r3, r4, r5, lr}
 802968a:	4d07      	ldr	r5, [pc, #28]	@ (80296a8 <_lseek_r+0x20>)
 802968c:	4604      	mov	r4, r0
 802968e:	4608      	mov	r0, r1
 8029690:	4611      	mov	r1, r2
 8029692:	2200      	movs	r2, #0
 8029694:	602a      	str	r2, [r5, #0]
 8029696:	461a      	mov	r2, r3
 8029698:	f7e5 fc2f 	bl	800eefa <_lseek>
 802969c:	1c43      	adds	r3, r0, #1
 802969e:	d102      	bne.n	80296a6 <_lseek_r+0x1e>
 80296a0:	682b      	ldr	r3, [r5, #0]
 80296a2:	b103      	cbz	r3, 80296a6 <_lseek_r+0x1e>
 80296a4:	6023      	str	r3, [r4, #0]
 80296a6:	bd38      	pop	{r3, r4, r5, pc}
 80296a8:	24000c08 	.word	0x24000c08

080296ac <_read_r>:
 80296ac:	b538      	push	{r3, r4, r5, lr}
 80296ae:	4d07      	ldr	r5, [pc, #28]	@ (80296cc <_read_r+0x20>)
 80296b0:	4604      	mov	r4, r0
 80296b2:	4608      	mov	r0, r1
 80296b4:	4611      	mov	r1, r2
 80296b6:	2200      	movs	r2, #0
 80296b8:	602a      	str	r2, [r5, #0]
 80296ba:	461a      	mov	r2, r3
 80296bc:	f7e5 fbbd 	bl	800ee3a <_read>
 80296c0:	1c43      	adds	r3, r0, #1
 80296c2:	d102      	bne.n	80296ca <_read_r+0x1e>
 80296c4:	682b      	ldr	r3, [r5, #0]
 80296c6:	b103      	cbz	r3, 80296ca <_read_r+0x1e>
 80296c8:	6023      	str	r3, [r4, #0]
 80296ca:	bd38      	pop	{r3, r4, r5, pc}
 80296cc:	24000c08 	.word	0x24000c08

080296d0 <_kill_r>:
 80296d0:	b538      	push	{r3, r4, r5, lr}
 80296d2:	4d07      	ldr	r5, [pc, #28]	@ (80296f0 <_kill_r+0x20>)
 80296d4:	2300      	movs	r3, #0
 80296d6:	4604      	mov	r4, r0
 80296d8:	4608      	mov	r0, r1
 80296da:	4611      	mov	r1, r2
 80296dc:	602b      	str	r3, [r5, #0]
 80296de:	f7e5 fb91 	bl	800ee04 <_kill>
 80296e2:	1c43      	adds	r3, r0, #1
 80296e4:	d102      	bne.n	80296ec <_kill_r+0x1c>
 80296e6:	682b      	ldr	r3, [r5, #0]
 80296e8:	b103      	cbz	r3, 80296ec <_kill_r+0x1c>
 80296ea:	6023      	str	r3, [r4, #0]
 80296ec:	bd38      	pop	{r3, r4, r5, pc}
 80296ee:	bf00      	nop
 80296f0:	24000c08 	.word	0x24000c08

080296f4 <_getpid_r>:
 80296f4:	f7e5 bb7e 	b.w	800edf4 <_getpid>

080296f8 <_sbrk_r>:
 80296f8:	b538      	push	{r3, r4, r5, lr}
 80296fa:	4d06      	ldr	r5, [pc, #24]	@ (8029714 <_sbrk_r+0x1c>)
 80296fc:	2300      	movs	r3, #0
 80296fe:	4604      	mov	r4, r0
 8029700:	4608      	mov	r0, r1
 8029702:	602b      	str	r3, [r5, #0]
 8029704:	f7e5 fc06 	bl	800ef14 <_sbrk>
 8029708:	1c43      	adds	r3, r0, #1
 802970a:	d102      	bne.n	8029712 <_sbrk_r+0x1a>
 802970c:	682b      	ldr	r3, [r5, #0]
 802970e:	b103      	cbz	r3, 8029712 <_sbrk_r+0x1a>
 8029710:	6023      	str	r3, [r4, #0]
 8029712:	bd38      	pop	{r3, r4, r5, pc}
 8029714:	24000c08 	.word	0x24000c08

08029718 <_write_r>:
 8029718:	b538      	push	{r3, r4, r5, lr}
 802971a:	4d07      	ldr	r5, [pc, #28]	@ (8029738 <_write_r+0x20>)
 802971c:	4604      	mov	r4, r0
 802971e:	4608      	mov	r0, r1
 8029720:	4611      	mov	r1, r2
 8029722:	2200      	movs	r2, #0
 8029724:	602a      	str	r2, [r5, #0]
 8029726:	461a      	mov	r2, r3
 8029728:	f7e5 fba4 	bl	800ee74 <_write>
 802972c:	1c43      	adds	r3, r0, #1
 802972e:	d102      	bne.n	8029736 <_write_r+0x1e>
 8029730:	682b      	ldr	r3, [r5, #0]
 8029732:	b103      	cbz	r3, 8029736 <_write_r+0x1e>
 8029734:	6023      	str	r3, [r4, #0]
 8029736:	bd38      	pop	{r3, r4, r5, pc}
 8029738:	24000c08 	.word	0x24000c08

0802973c <__errno>:
 802973c:	4b01      	ldr	r3, [pc, #4]	@ (8029744 <__errno+0x8>)
 802973e:	6818      	ldr	r0, [r3, #0]
 8029740:	4770      	bx	lr
 8029742:	bf00      	nop
 8029744:	24000038 	.word	0x24000038

08029748 <__libc_init_array>:
 8029748:	b570      	push	{r4, r5, r6, lr}
 802974a:	4d0d      	ldr	r5, [pc, #52]	@ (8029780 <__libc_init_array+0x38>)
 802974c:	4c0d      	ldr	r4, [pc, #52]	@ (8029784 <__libc_init_array+0x3c>)
 802974e:	1b64      	subs	r4, r4, r5
 8029750:	10a4      	asrs	r4, r4, #2
 8029752:	2600      	movs	r6, #0
 8029754:	42a6      	cmp	r6, r4
 8029756:	d109      	bne.n	802976c <__libc_init_array+0x24>
 8029758:	4d0b      	ldr	r5, [pc, #44]	@ (8029788 <__libc_init_array+0x40>)
 802975a:	4c0c      	ldr	r4, [pc, #48]	@ (802978c <__libc_init_array+0x44>)
 802975c:	f000 fcb0 	bl	802a0c0 <_init>
 8029760:	1b64      	subs	r4, r4, r5
 8029762:	10a4      	asrs	r4, r4, #2
 8029764:	2600      	movs	r6, #0
 8029766:	42a6      	cmp	r6, r4
 8029768:	d105      	bne.n	8029776 <__libc_init_array+0x2e>
 802976a:	bd70      	pop	{r4, r5, r6, pc}
 802976c:	f855 3b04 	ldr.w	r3, [r5], #4
 8029770:	4798      	blx	r3
 8029772:	3601      	adds	r6, #1
 8029774:	e7ee      	b.n	8029754 <__libc_init_array+0xc>
 8029776:	f855 3b04 	ldr.w	r3, [r5], #4
 802977a:	4798      	blx	r3
 802977c:	3601      	adds	r6, #1
 802977e:	e7f2      	b.n	8029766 <__libc_init_array+0x1e>
 8029780:	0802ba24 	.word	0x0802ba24
 8029784:	0802ba24 	.word	0x0802ba24
 8029788:	0802ba24 	.word	0x0802ba24
 802978c:	0802ba30 	.word	0x0802ba30

08029790 <__retarget_lock_init_recursive>:
 8029790:	4770      	bx	lr

08029792 <__retarget_lock_acquire_recursive>:
 8029792:	4770      	bx	lr

08029794 <__retarget_lock_release_recursive>:
 8029794:	4770      	bx	lr

08029796 <memcpy>:
 8029796:	440a      	add	r2, r1
 8029798:	4291      	cmp	r1, r2
 802979a:	f100 33ff 	add.w	r3, r0, #4294967295
 802979e:	d100      	bne.n	80297a2 <memcpy+0xc>
 80297a0:	4770      	bx	lr
 80297a2:	b510      	push	{r4, lr}
 80297a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80297a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80297ac:	4291      	cmp	r1, r2
 80297ae:	d1f9      	bne.n	80297a4 <memcpy+0xe>
 80297b0:	bd10      	pop	{r4, pc}
	...

080297b4 <_free_r>:
 80297b4:	b538      	push	{r3, r4, r5, lr}
 80297b6:	4605      	mov	r5, r0
 80297b8:	2900      	cmp	r1, #0
 80297ba:	d041      	beq.n	8029840 <_free_r+0x8c>
 80297bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80297c0:	1f0c      	subs	r4, r1, #4
 80297c2:	2b00      	cmp	r3, #0
 80297c4:	bfb8      	it	lt
 80297c6:	18e4      	addlt	r4, r4, r3
 80297c8:	f7ff fc14 	bl	8028ff4 <__malloc_lock>
 80297cc:	4a1d      	ldr	r2, [pc, #116]	@ (8029844 <_free_r+0x90>)
 80297ce:	6813      	ldr	r3, [r2, #0]
 80297d0:	b933      	cbnz	r3, 80297e0 <_free_r+0x2c>
 80297d2:	6063      	str	r3, [r4, #4]
 80297d4:	6014      	str	r4, [r2, #0]
 80297d6:	4628      	mov	r0, r5
 80297d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80297dc:	f7ff bc10 	b.w	8029000 <__malloc_unlock>
 80297e0:	42a3      	cmp	r3, r4
 80297e2:	d908      	bls.n	80297f6 <_free_r+0x42>
 80297e4:	6820      	ldr	r0, [r4, #0]
 80297e6:	1821      	adds	r1, r4, r0
 80297e8:	428b      	cmp	r3, r1
 80297ea:	bf01      	itttt	eq
 80297ec:	6819      	ldreq	r1, [r3, #0]
 80297ee:	685b      	ldreq	r3, [r3, #4]
 80297f0:	1809      	addeq	r1, r1, r0
 80297f2:	6021      	streq	r1, [r4, #0]
 80297f4:	e7ed      	b.n	80297d2 <_free_r+0x1e>
 80297f6:	461a      	mov	r2, r3
 80297f8:	685b      	ldr	r3, [r3, #4]
 80297fa:	b10b      	cbz	r3, 8029800 <_free_r+0x4c>
 80297fc:	42a3      	cmp	r3, r4
 80297fe:	d9fa      	bls.n	80297f6 <_free_r+0x42>
 8029800:	6811      	ldr	r1, [r2, #0]
 8029802:	1850      	adds	r0, r2, r1
 8029804:	42a0      	cmp	r0, r4
 8029806:	d10b      	bne.n	8029820 <_free_r+0x6c>
 8029808:	6820      	ldr	r0, [r4, #0]
 802980a:	4401      	add	r1, r0
 802980c:	1850      	adds	r0, r2, r1
 802980e:	4283      	cmp	r3, r0
 8029810:	6011      	str	r1, [r2, #0]
 8029812:	d1e0      	bne.n	80297d6 <_free_r+0x22>
 8029814:	6818      	ldr	r0, [r3, #0]
 8029816:	685b      	ldr	r3, [r3, #4]
 8029818:	6053      	str	r3, [r2, #4]
 802981a:	4408      	add	r0, r1
 802981c:	6010      	str	r0, [r2, #0]
 802981e:	e7da      	b.n	80297d6 <_free_r+0x22>
 8029820:	d902      	bls.n	8029828 <_free_r+0x74>
 8029822:	230c      	movs	r3, #12
 8029824:	602b      	str	r3, [r5, #0]
 8029826:	e7d6      	b.n	80297d6 <_free_r+0x22>
 8029828:	6820      	ldr	r0, [r4, #0]
 802982a:	1821      	adds	r1, r4, r0
 802982c:	428b      	cmp	r3, r1
 802982e:	bf04      	itt	eq
 8029830:	6819      	ldreq	r1, [r3, #0]
 8029832:	685b      	ldreq	r3, [r3, #4]
 8029834:	6063      	str	r3, [r4, #4]
 8029836:	bf04      	itt	eq
 8029838:	1809      	addeq	r1, r1, r0
 802983a:	6021      	streq	r1, [r4, #0]
 802983c:	6054      	str	r4, [r2, #4]
 802983e:	e7ca      	b.n	80297d6 <_free_r+0x22>
 8029840:	bd38      	pop	{r3, r4, r5, pc}
 8029842:	bf00      	nop
 8029844:	24000ac8 	.word	0x24000ac8

08029848 <_malloc_usable_size_r>:
 8029848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802984c:	1f18      	subs	r0, r3, #4
 802984e:	2b00      	cmp	r3, #0
 8029850:	bfbc      	itt	lt
 8029852:	580b      	ldrlt	r3, [r1, r0]
 8029854:	18c0      	addlt	r0, r0, r3
 8029856:	4770      	bx	lr

08029858 <__sfputc_r>:
 8029858:	6893      	ldr	r3, [r2, #8]
 802985a:	3b01      	subs	r3, #1
 802985c:	2b00      	cmp	r3, #0
 802985e:	b410      	push	{r4}
 8029860:	6093      	str	r3, [r2, #8]
 8029862:	da08      	bge.n	8029876 <__sfputc_r+0x1e>
 8029864:	6994      	ldr	r4, [r2, #24]
 8029866:	42a3      	cmp	r3, r4
 8029868:	db01      	blt.n	802986e <__sfputc_r+0x16>
 802986a:	290a      	cmp	r1, #10
 802986c:	d103      	bne.n	8029876 <__sfputc_r+0x1e>
 802986e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029872:	f7ff be02 	b.w	802947a <__swbuf_r>
 8029876:	6813      	ldr	r3, [r2, #0]
 8029878:	1c58      	adds	r0, r3, #1
 802987a:	6010      	str	r0, [r2, #0]
 802987c:	7019      	strb	r1, [r3, #0]
 802987e:	4608      	mov	r0, r1
 8029880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029884:	4770      	bx	lr

08029886 <__sfputs_r>:
 8029886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029888:	4606      	mov	r6, r0
 802988a:	460f      	mov	r7, r1
 802988c:	4614      	mov	r4, r2
 802988e:	18d5      	adds	r5, r2, r3
 8029890:	42ac      	cmp	r4, r5
 8029892:	d101      	bne.n	8029898 <__sfputs_r+0x12>
 8029894:	2000      	movs	r0, #0
 8029896:	e007      	b.n	80298a8 <__sfputs_r+0x22>
 8029898:	f814 1b01 	ldrb.w	r1, [r4], #1
 802989c:	463a      	mov	r2, r7
 802989e:	4630      	mov	r0, r6
 80298a0:	f7ff ffda 	bl	8029858 <__sfputc_r>
 80298a4:	1c43      	adds	r3, r0, #1
 80298a6:	d1f3      	bne.n	8029890 <__sfputs_r+0xa>
 80298a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080298ac <_vfiprintf_r>:
 80298ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80298b0:	460d      	mov	r5, r1
 80298b2:	b09d      	sub	sp, #116	@ 0x74
 80298b4:	4614      	mov	r4, r2
 80298b6:	4698      	mov	r8, r3
 80298b8:	4606      	mov	r6, r0
 80298ba:	b118      	cbz	r0, 80298c4 <_vfiprintf_r+0x18>
 80298bc:	6a03      	ldr	r3, [r0, #32]
 80298be:	b90b      	cbnz	r3, 80298c4 <_vfiprintf_r+0x18>
 80298c0:	f7ff fcea 	bl	8029298 <__sinit>
 80298c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80298c6:	07d9      	lsls	r1, r3, #31
 80298c8:	d405      	bmi.n	80298d6 <_vfiprintf_r+0x2a>
 80298ca:	89ab      	ldrh	r3, [r5, #12]
 80298cc:	059a      	lsls	r2, r3, #22
 80298ce:	d402      	bmi.n	80298d6 <_vfiprintf_r+0x2a>
 80298d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80298d2:	f7ff ff5e 	bl	8029792 <__retarget_lock_acquire_recursive>
 80298d6:	89ab      	ldrh	r3, [r5, #12]
 80298d8:	071b      	lsls	r3, r3, #28
 80298da:	d501      	bpl.n	80298e0 <_vfiprintf_r+0x34>
 80298dc:	692b      	ldr	r3, [r5, #16]
 80298de:	b99b      	cbnz	r3, 8029908 <_vfiprintf_r+0x5c>
 80298e0:	4629      	mov	r1, r5
 80298e2:	4630      	mov	r0, r6
 80298e4:	f7ff fe08 	bl	80294f8 <__swsetup_r>
 80298e8:	b170      	cbz	r0, 8029908 <_vfiprintf_r+0x5c>
 80298ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80298ec:	07dc      	lsls	r4, r3, #31
 80298ee:	d504      	bpl.n	80298fa <_vfiprintf_r+0x4e>
 80298f0:	f04f 30ff 	mov.w	r0, #4294967295
 80298f4:	b01d      	add	sp, #116	@ 0x74
 80298f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80298fa:	89ab      	ldrh	r3, [r5, #12]
 80298fc:	0598      	lsls	r0, r3, #22
 80298fe:	d4f7      	bmi.n	80298f0 <_vfiprintf_r+0x44>
 8029900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029902:	f7ff ff47 	bl	8029794 <__retarget_lock_release_recursive>
 8029906:	e7f3      	b.n	80298f0 <_vfiprintf_r+0x44>
 8029908:	2300      	movs	r3, #0
 802990a:	9309      	str	r3, [sp, #36]	@ 0x24
 802990c:	2320      	movs	r3, #32
 802990e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8029912:	f8cd 800c 	str.w	r8, [sp, #12]
 8029916:	2330      	movs	r3, #48	@ 0x30
 8029918:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8029ac8 <_vfiprintf_r+0x21c>
 802991c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8029920:	f04f 0901 	mov.w	r9, #1
 8029924:	4623      	mov	r3, r4
 8029926:	469a      	mov	sl, r3
 8029928:	f813 2b01 	ldrb.w	r2, [r3], #1
 802992c:	b10a      	cbz	r2, 8029932 <_vfiprintf_r+0x86>
 802992e:	2a25      	cmp	r2, #37	@ 0x25
 8029930:	d1f9      	bne.n	8029926 <_vfiprintf_r+0x7a>
 8029932:	ebba 0b04 	subs.w	fp, sl, r4
 8029936:	d00b      	beq.n	8029950 <_vfiprintf_r+0xa4>
 8029938:	465b      	mov	r3, fp
 802993a:	4622      	mov	r2, r4
 802993c:	4629      	mov	r1, r5
 802993e:	4630      	mov	r0, r6
 8029940:	f7ff ffa1 	bl	8029886 <__sfputs_r>
 8029944:	3001      	adds	r0, #1
 8029946:	f000 80a7 	beq.w	8029a98 <_vfiprintf_r+0x1ec>
 802994a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802994c:	445a      	add	r2, fp
 802994e:	9209      	str	r2, [sp, #36]	@ 0x24
 8029950:	f89a 3000 	ldrb.w	r3, [sl]
 8029954:	2b00      	cmp	r3, #0
 8029956:	f000 809f 	beq.w	8029a98 <_vfiprintf_r+0x1ec>
 802995a:	2300      	movs	r3, #0
 802995c:	f04f 32ff 	mov.w	r2, #4294967295
 8029960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029964:	f10a 0a01 	add.w	sl, sl, #1
 8029968:	9304      	str	r3, [sp, #16]
 802996a:	9307      	str	r3, [sp, #28]
 802996c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8029970:	931a      	str	r3, [sp, #104]	@ 0x68
 8029972:	4654      	mov	r4, sl
 8029974:	2205      	movs	r2, #5
 8029976:	f814 1b01 	ldrb.w	r1, [r4], #1
 802997a:	4853      	ldr	r0, [pc, #332]	@ (8029ac8 <_vfiprintf_r+0x21c>)
 802997c:	f7d6 fcc0 	bl	8000300 <memchr>
 8029980:	9a04      	ldr	r2, [sp, #16]
 8029982:	b9d8      	cbnz	r0, 80299bc <_vfiprintf_r+0x110>
 8029984:	06d1      	lsls	r1, r2, #27
 8029986:	bf44      	itt	mi
 8029988:	2320      	movmi	r3, #32
 802998a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802998e:	0713      	lsls	r3, r2, #28
 8029990:	bf44      	itt	mi
 8029992:	232b      	movmi	r3, #43	@ 0x2b
 8029994:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029998:	f89a 3000 	ldrb.w	r3, [sl]
 802999c:	2b2a      	cmp	r3, #42	@ 0x2a
 802999e:	d015      	beq.n	80299cc <_vfiprintf_r+0x120>
 80299a0:	9a07      	ldr	r2, [sp, #28]
 80299a2:	4654      	mov	r4, sl
 80299a4:	2000      	movs	r0, #0
 80299a6:	f04f 0c0a 	mov.w	ip, #10
 80299aa:	4621      	mov	r1, r4
 80299ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80299b0:	3b30      	subs	r3, #48	@ 0x30
 80299b2:	2b09      	cmp	r3, #9
 80299b4:	d94b      	bls.n	8029a4e <_vfiprintf_r+0x1a2>
 80299b6:	b1b0      	cbz	r0, 80299e6 <_vfiprintf_r+0x13a>
 80299b8:	9207      	str	r2, [sp, #28]
 80299ba:	e014      	b.n	80299e6 <_vfiprintf_r+0x13a>
 80299bc:	eba0 0308 	sub.w	r3, r0, r8
 80299c0:	fa09 f303 	lsl.w	r3, r9, r3
 80299c4:	4313      	orrs	r3, r2
 80299c6:	9304      	str	r3, [sp, #16]
 80299c8:	46a2      	mov	sl, r4
 80299ca:	e7d2      	b.n	8029972 <_vfiprintf_r+0xc6>
 80299cc:	9b03      	ldr	r3, [sp, #12]
 80299ce:	1d19      	adds	r1, r3, #4
 80299d0:	681b      	ldr	r3, [r3, #0]
 80299d2:	9103      	str	r1, [sp, #12]
 80299d4:	2b00      	cmp	r3, #0
 80299d6:	bfbb      	ittet	lt
 80299d8:	425b      	neglt	r3, r3
 80299da:	f042 0202 	orrlt.w	r2, r2, #2
 80299de:	9307      	strge	r3, [sp, #28]
 80299e0:	9307      	strlt	r3, [sp, #28]
 80299e2:	bfb8      	it	lt
 80299e4:	9204      	strlt	r2, [sp, #16]
 80299e6:	7823      	ldrb	r3, [r4, #0]
 80299e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80299ea:	d10a      	bne.n	8029a02 <_vfiprintf_r+0x156>
 80299ec:	7863      	ldrb	r3, [r4, #1]
 80299ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80299f0:	d132      	bne.n	8029a58 <_vfiprintf_r+0x1ac>
 80299f2:	9b03      	ldr	r3, [sp, #12]
 80299f4:	1d1a      	adds	r2, r3, #4
 80299f6:	681b      	ldr	r3, [r3, #0]
 80299f8:	9203      	str	r2, [sp, #12]
 80299fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80299fe:	3402      	adds	r4, #2
 8029a00:	9305      	str	r3, [sp, #20]
 8029a02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8029ad8 <_vfiprintf_r+0x22c>
 8029a06:	7821      	ldrb	r1, [r4, #0]
 8029a08:	2203      	movs	r2, #3
 8029a0a:	4650      	mov	r0, sl
 8029a0c:	f7d6 fc78 	bl	8000300 <memchr>
 8029a10:	b138      	cbz	r0, 8029a22 <_vfiprintf_r+0x176>
 8029a12:	9b04      	ldr	r3, [sp, #16]
 8029a14:	eba0 000a 	sub.w	r0, r0, sl
 8029a18:	2240      	movs	r2, #64	@ 0x40
 8029a1a:	4082      	lsls	r2, r0
 8029a1c:	4313      	orrs	r3, r2
 8029a1e:	3401      	adds	r4, #1
 8029a20:	9304      	str	r3, [sp, #16]
 8029a22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029a26:	4829      	ldr	r0, [pc, #164]	@ (8029acc <_vfiprintf_r+0x220>)
 8029a28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8029a2c:	2206      	movs	r2, #6
 8029a2e:	f7d6 fc67 	bl	8000300 <memchr>
 8029a32:	2800      	cmp	r0, #0
 8029a34:	d03f      	beq.n	8029ab6 <_vfiprintf_r+0x20a>
 8029a36:	4b26      	ldr	r3, [pc, #152]	@ (8029ad0 <_vfiprintf_r+0x224>)
 8029a38:	bb1b      	cbnz	r3, 8029a82 <_vfiprintf_r+0x1d6>
 8029a3a:	9b03      	ldr	r3, [sp, #12]
 8029a3c:	3307      	adds	r3, #7
 8029a3e:	f023 0307 	bic.w	r3, r3, #7
 8029a42:	3308      	adds	r3, #8
 8029a44:	9303      	str	r3, [sp, #12]
 8029a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029a48:	443b      	add	r3, r7
 8029a4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8029a4c:	e76a      	b.n	8029924 <_vfiprintf_r+0x78>
 8029a4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8029a52:	460c      	mov	r4, r1
 8029a54:	2001      	movs	r0, #1
 8029a56:	e7a8      	b.n	80299aa <_vfiprintf_r+0xfe>
 8029a58:	2300      	movs	r3, #0
 8029a5a:	3401      	adds	r4, #1
 8029a5c:	9305      	str	r3, [sp, #20]
 8029a5e:	4619      	mov	r1, r3
 8029a60:	f04f 0c0a 	mov.w	ip, #10
 8029a64:	4620      	mov	r0, r4
 8029a66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029a6a:	3a30      	subs	r2, #48	@ 0x30
 8029a6c:	2a09      	cmp	r2, #9
 8029a6e:	d903      	bls.n	8029a78 <_vfiprintf_r+0x1cc>
 8029a70:	2b00      	cmp	r3, #0
 8029a72:	d0c6      	beq.n	8029a02 <_vfiprintf_r+0x156>
 8029a74:	9105      	str	r1, [sp, #20]
 8029a76:	e7c4      	b.n	8029a02 <_vfiprintf_r+0x156>
 8029a78:	fb0c 2101 	mla	r1, ip, r1, r2
 8029a7c:	4604      	mov	r4, r0
 8029a7e:	2301      	movs	r3, #1
 8029a80:	e7f0      	b.n	8029a64 <_vfiprintf_r+0x1b8>
 8029a82:	ab03      	add	r3, sp, #12
 8029a84:	9300      	str	r3, [sp, #0]
 8029a86:	462a      	mov	r2, r5
 8029a88:	4b12      	ldr	r3, [pc, #72]	@ (8029ad4 <_vfiprintf_r+0x228>)
 8029a8a:	a904      	add	r1, sp, #16
 8029a8c:	4630      	mov	r0, r6
 8029a8e:	f3af 8000 	nop.w
 8029a92:	4607      	mov	r7, r0
 8029a94:	1c78      	adds	r0, r7, #1
 8029a96:	d1d6      	bne.n	8029a46 <_vfiprintf_r+0x19a>
 8029a98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029a9a:	07d9      	lsls	r1, r3, #31
 8029a9c:	d405      	bmi.n	8029aaa <_vfiprintf_r+0x1fe>
 8029a9e:	89ab      	ldrh	r3, [r5, #12]
 8029aa0:	059a      	lsls	r2, r3, #22
 8029aa2:	d402      	bmi.n	8029aaa <_vfiprintf_r+0x1fe>
 8029aa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029aa6:	f7ff fe75 	bl	8029794 <__retarget_lock_release_recursive>
 8029aaa:	89ab      	ldrh	r3, [r5, #12]
 8029aac:	065b      	lsls	r3, r3, #25
 8029aae:	f53f af1f 	bmi.w	80298f0 <_vfiprintf_r+0x44>
 8029ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029ab4:	e71e      	b.n	80298f4 <_vfiprintf_r+0x48>
 8029ab6:	ab03      	add	r3, sp, #12
 8029ab8:	9300      	str	r3, [sp, #0]
 8029aba:	462a      	mov	r2, r5
 8029abc:	4b05      	ldr	r3, [pc, #20]	@ (8029ad4 <_vfiprintf_r+0x228>)
 8029abe:	a904      	add	r1, sp, #16
 8029ac0:	4630      	mov	r0, r6
 8029ac2:	f000 f879 	bl	8029bb8 <_printf_i>
 8029ac6:	e7e4      	b.n	8029a92 <_vfiprintf_r+0x1e6>
 8029ac8:	0802b9e9 	.word	0x0802b9e9
 8029acc:	0802b9f3 	.word	0x0802b9f3
 8029ad0:	00000000 	.word	0x00000000
 8029ad4:	08029887 	.word	0x08029887
 8029ad8:	0802b9ef 	.word	0x0802b9ef

08029adc <_printf_common>:
 8029adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029ae0:	4616      	mov	r6, r2
 8029ae2:	4698      	mov	r8, r3
 8029ae4:	688a      	ldr	r2, [r1, #8]
 8029ae6:	690b      	ldr	r3, [r1, #16]
 8029ae8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8029aec:	4293      	cmp	r3, r2
 8029aee:	bfb8      	it	lt
 8029af0:	4613      	movlt	r3, r2
 8029af2:	6033      	str	r3, [r6, #0]
 8029af4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8029af8:	4607      	mov	r7, r0
 8029afa:	460c      	mov	r4, r1
 8029afc:	b10a      	cbz	r2, 8029b02 <_printf_common+0x26>
 8029afe:	3301      	adds	r3, #1
 8029b00:	6033      	str	r3, [r6, #0]
 8029b02:	6823      	ldr	r3, [r4, #0]
 8029b04:	0699      	lsls	r1, r3, #26
 8029b06:	bf42      	ittt	mi
 8029b08:	6833      	ldrmi	r3, [r6, #0]
 8029b0a:	3302      	addmi	r3, #2
 8029b0c:	6033      	strmi	r3, [r6, #0]
 8029b0e:	6825      	ldr	r5, [r4, #0]
 8029b10:	f015 0506 	ands.w	r5, r5, #6
 8029b14:	d106      	bne.n	8029b24 <_printf_common+0x48>
 8029b16:	f104 0a19 	add.w	sl, r4, #25
 8029b1a:	68e3      	ldr	r3, [r4, #12]
 8029b1c:	6832      	ldr	r2, [r6, #0]
 8029b1e:	1a9b      	subs	r3, r3, r2
 8029b20:	42ab      	cmp	r3, r5
 8029b22:	dc26      	bgt.n	8029b72 <_printf_common+0x96>
 8029b24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8029b28:	6822      	ldr	r2, [r4, #0]
 8029b2a:	3b00      	subs	r3, #0
 8029b2c:	bf18      	it	ne
 8029b2e:	2301      	movne	r3, #1
 8029b30:	0692      	lsls	r2, r2, #26
 8029b32:	d42b      	bmi.n	8029b8c <_printf_common+0xb0>
 8029b34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8029b38:	4641      	mov	r1, r8
 8029b3a:	4638      	mov	r0, r7
 8029b3c:	47c8      	blx	r9
 8029b3e:	3001      	adds	r0, #1
 8029b40:	d01e      	beq.n	8029b80 <_printf_common+0xa4>
 8029b42:	6823      	ldr	r3, [r4, #0]
 8029b44:	6922      	ldr	r2, [r4, #16]
 8029b46:	f003 0306 	and.w	r3, r3, #6
 8029b4a:	2b04      	cmp	r3, #4
 8029b4c:	bf02      	ittt	eq
 8029b4e:	68e5      	ldreq	r5, [r4, #12]
 8029b50:	6833      	ldreq	r3, [r6, #0]
 8029b52:	1aed      	subeq	r5, r5, r3
 8029b54:	68a3      	ldr	r3, [r4, #8]
 8029b56:	bf0c      	ite	eq
 8029b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029b5c:	2500      	movne	r5, #0
 8029b5e:	4293      	cmp	r3, r2
 8029b60:	bfc4      	itt	gt
 8029b62:	1a9b      	subgt	r3, r3, r2
 8029b64:	18ed      	addgt	r5, r5, r3
 8029b66:	2600      	movs	r6, #0
 8029b68:	341a      	adds	r4, #26
 8029b6a:	42b5      	cmp	r5, r6
 8029b6c:	d11a      	bne.n	8029ba4 <_printf_common+0xc8>
 8029b6e:	2000      	movs	r0, #0
 8029b70:	e008      	b.n	8029b84 <_printf_common+0xa8>
 8029b72:	2301      	movs	r3, #1
 8029b74:	4652      	mov	r2, sl
 8029b76:	4641      	mov	r1, r8
 8029b78:	4638      	mov	r0, r7
 8029b7a:	47c8      	blx	r9
 8029b7c:	3001      	adds	r0, #1
 8029b7e:	d103      	bne.n	8029b88 <_printf_common+0xac>
 8029b80:	f04f 30ff 	mov.w	r0, #4294967295
 8029b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029b88:	3501      	adds	r5, #1
 8029b8a:	e7c6      	b.n	8029b1a <_printf_common+0x3e>
 8029b8c:	18e1      	adds	r1, r4, r3
 8029b8e:	1c5a      	adds	r2, r3, #1
 8029b90:	2030      	movs	r0, #48	@ 0x30
 8029b92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8029b96:	4422      	add	r2, r4
 8029b98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8029b9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8029ba0:	3302      	adds	r3, #2
 8029ba2:	e7c7      	b.n	8029b34 <_printf_common+0x58>
 8029ba4:	2301      	movs	r3, #1
 8029ba6:	4622      	mov	r2, r4
 8029ba8:	4641      	mov	r1, r8
 8029baa:	4638      	mov	r0, r7
 8029bac:	47c8      	blx	r9
 8029bae:	3001      	adds	r0, #1
 8029bb0:	d0e6      	beq.n	8029b80 <_printf_common+0xa4>
 8029bb2:	3601      	adds	r6, #1
 8029bb4:	e7d9      	b.n	8029b6a <_printf_common+0x8e>
	...

08029bb8 <_printf_i>:
 8029bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029bbc:	7e0f      	ldrb	r7, [r1, #24]
 8029bbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8029bc0:	2f78      	cmp	r7, #120	@ 0x78
 8029bc2:	4691      	mov	r9, r2
 8029bc4:	4680      	mov	r8, r0
 8029bc6:	460c      	mov	r4, r1
 8029bc8:	469a      	mov	sl, r3
 8029bca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8029bce:	d807      	bhi.n	8029be0 <_printf_i+0x28>
 8029bd0:	2f62      	cmp	r7, #98	@ 0x62
 8029bd2:	d80a      	bhi.n	8029bea <_printf_i+0x32>
 8029bd4:	2f00      	cmp	r7, #0
 8029bd6:	f000 80d2 	beq.w	8029d7e <_printf_i+0x1c6>
 8029bda:	2f58      	cmp	r7, #88	@ 0x58
 8029bdc:	f000 80b9 	beq.w	8029d52 <_printf_i+0x19a>
 8029be0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8029be4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8029be8:	e03a      	b.n	8029c60 <_printf_i+0xa8>
 8029bea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8029bee:	2b15      	cmp	r3, #21
 8029bf0:	d8f6      	bhi.n	8029be0 <_printf_i+0x28>
 8029bf2:	a101      	add	r1, pc, #4	@ (adr r1, 8029bf8 <_printf_i+0x40>)
 8029bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8029bf8:	08029c51 	.word	0x08029c51
 8029bfc:	08029c65 	.word	0x08029c65
 8029c00:	08029be1 	.word	0x08029be1
 8029c04:	08029be1 	.word	0x08029be1
 8029c08:	08029be1 	.word	0x08029be1
 8029c0c:	08029be1 	.word	0x08029be1
 8029c10:	08029c65 	.word	0x08029c65
 8029c14:	08029be1 	.word	0x08029be1
 8029c18:	08029be1 	.word	0x08029be1
 8029c1c:	08029be1 	.word	0x08029be1
 8029c20:	08029be1 	.word	0x08029be1
 8029c24:	08029d65 	.word	0x08029d65
 8029c28:	08029c8f 	.word	0x08029c8f
 8029c2c:	08029d1f 	.word	0x08029d1f
 8029c30:	08029be1 	.word	0x08029be1
 8029c34:	08029be1 	.word	0x08029be1
 8029c38:	08029d87 	.word	0x08029d87
 8029c3c:	08029be1 	.word	0x08029be1
 8029c40:	08029c8f 	.word	0x08029c8f
 8029c44:	08029be1 	.word	0x08029be1
 8029c48:	08029be1 	.word	0x08029be1
 8029c4c:	08029d27 	.word	0x08029d27
 8029c50:	6833      	ldr	r3, [r6, #0]
 8029c52:	1d1a      	adds	r2, r3, #4
 8029c54:	681b      	ldr	r3, [r3, #0]
 8029c56:	6032      	str	r2, [r6, #0]
 8029c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8029c5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8029c60:	2301      	movs	r3, #1
 8029c62:	e09d      	b.n	8029da0 <_printf_i+0x1e8>
 8029c64:	6833      	ldr	r3, [r6, #0]
 8029c66:	6820      	ldr	r0, [r4, #0]
 8029c68:	1d19      	adds	r1, r3, #4
 8029c6a:	6031      	str	r1, [r6, #0]
 8029c6c:	0606      	lsls	r6, r0, #24
 8029c6e:	d501      	bpl.n	8029c74 <_printf_i+0xbc>
 8029c70:	681d      	ldr	r5, [r3, #0]
 8029c72:	e003      	b.n	8029c7c <_printf_i+0xc4>
 8029c74:	0645      	lsls	r5, r0, #25
 8029c76:	d5fb      	bpl.n	8029c70 <_printf_i+0xb8>
 8029c78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8029c7c:	2d00      	cmp	r5, #0
 8029c7e:	da03      	bge.n	8029c88 <_printf_i+0xd0>
 8029c80:	232d      	movs	r3, #45	@ 0x2d
 8029c82:	426d      	negs	r5, r5
 8029c84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8029c88:	4859      	ldr	r0, [pc, #356]	@ (8029df0 <_printf_i+0x238>)
 8029c8a:	230a      	movs	r3, #10
 8029c8c:	e011      	b.n	8029cb2 <_printf_i+0xfa>
 8029c8e:	6821      	ldr	r1, [r4, #0]
 8029c90:	6833      	ldr	r3, [r6, #0]
 8029c92:	0608      	lsls	r0, r1, #24
 8029c94:	f853 5b04 	ldr.w	r5, [r3], #4
 8029c98:	d402      	bmi.n	8029ca0 <_printf_i+0xe8>
 8029c9a:	0649      	lsls	r1, r1, #25
 8029c9c:	bf48      	it	mi
 8029c9e:	b2ad      	uxthmi	r5, r5
 8029ca0:	2f6f      	cmp	r7, #111	@ 0x6f
 8029ca2:	4853      	ldr	r0, [pc, #332]	@ (8029df0 <_printf_i+0x238>)
 8029ca4:	6033      	str	r3, [r6, #0]
 8029ca6:	bf14      	ite	ne
 8029ca8:	230a      	movne	r3, #10
 8029caa:	2308      	moveq	r3, #8
 8029cac:	2100      	movs	r1, #0
 8029cae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8029cb2:	6866      	ldr	r6, [r4, #4]
 8029cb4:	60a6      	str	r6, [r4, #8]
 8029cb6:	2e00      	cmp	r6, #0
 8029cb8:	bfa2      	ittt	ge
 8029cba:	6821      	ldrge	r1, [r4, #0]
 8029cbc:	f021 0104 	bicge.w	r1, r1, #4
 8029cc0:	6021      	strge	r1, [r4, #0]
 8029cc2:	b90d      	cbnz	r5, 8029cc8 <_printf_i+0x110>
 8029cc4:	2e00      	cmp	r6, #0
 8029cc6:	d04b      	beq.n	8029d60 <_printf_i+0x1a8>
 8029cc8:	4616      	mov	r6, r2
 8029cca:	fbb5 f1f3 	udiv	r1, r5, r3
 8029cce:	fb03 5711 	mls	r7, r3, r1, r5
 8029cd2:	5dc7      	ldrb	r7, [r0, r7]
 8029cd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8029cd8:	462f      	mov	r7, r5
 8029cda:	42bb      	cmp	r3, r7
 8029cdc:	460d      	mov	r5, r1
 8029cde:	d9f4      	bls.n	8029cca <_printf_i+0x112>
 8029ce0:	2b08      	cmp	r3, #8
 8029ce2:	d10b      	bne.n	8029cfc <_printf_i+0x144>
 8029ce4:	6823      	ldr	r3, [r4, #0]
 8029ce6:	07df      	lsls	r7, r3, #31
 8029ce8:	d508      	bpl.n	8029cfc <_printf_i+0x144>
 8029cea:	6923      	ldr	r3, [r4, #16]
 8029cec:	6861      	ldr	r1, [r4, #4]
 8029cee:	4299      	cmp	r1, r3
 8029cf0:	bfde      	ittt	le
 8029cf2:	2330      	movle	r3, #48	@ 0x30
 8029cf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8029cf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8029cfc:	1b92      	subs	r2, r2, r6
 8029cfe:	6122      	str	r2, [r4, #16]
 8029d00:	f8cd a000 	str.w	sl, [sp]
 8029d04:	464b      	mov	r3, r9
 8029d06:	aa03      	add	r2, sp, #12
 8029d08:	4621      	mov	r1, r4
 8029d0a:	4640      	mov	r0, r8
 8029d0c:	f7ff fee6 	bl	8029adc <_printf_common>
 8029d10:	3001      	adds	r0, #1
 8029d12:	d14a      	bne.n	8029daa <_printf_i+0x1f2>
 8029d14:	f04f 30ff 	mov.w	r0, #4294967295
 8029d18:	b004      	add	sp, #16
 8029d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029d1e:	6823      	ldr	r3, [r4, #0]
 8029d20:	f043 0320 	orr.w	r3, r3, #32
 8029d24:	6023      	str	r3, [r4, #0]
 8029d26:	4833      	ldr	r0, [pc, #204]	@ (8029df4 <_printf_i+0x23c>)
 8029d28:	2778      	movs	r7, #120	@ 0x78
 8029d2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8029d2e:	6823      	ldr	r3, [r4, #0]
 8029d30:	6831      	ldr	r1, [r6, #0]
 8029d32:	061f      	lsls	r7, r3, #24
 8029d34:	f851 5b04 	ldr.w	r5, [r1], #4
 8029d38:	d402      	bmi.n	8029d40 <_printf_i+0x188>
 8029d3a:	065f      	lsls	r7, r3, #25
 8029d3c:	bf48      	it	mi
 8029d3e:	b2ad      	uxthmi	r5, r5
 8029d40:	6031      	str	r1, [r6, #0]
 8029d42:	07d9      	lsls	r1, r3, #31
 8029d44:	bf44      	itt	mi
 8029d46:	f043 0320 	orrmi.w	r3, r3, #32
 8029d4a:	6023      	strmi	r3, [r4, #0]
 8029d4c:	b11d      	cbz	r5, 8029d56 <_printf_i+0x19e>
 8029d4e:	2310      	movs	r3, #16
 8029d50:	e7ac      	b.n	8029cac <_printf_i+0xf4>
 8029d52:	4827      	ldr	r0, [pc, #156]	@ (8029df0 <_printf_i+0x238>)
 8029d54:	e7e9      	b.n	8029d2a <_printf_i+0x172>
 8029d56:	6823      	ldr	r3, [r4, #0]
 8029d58:	f023 0320 	bic.w	r3, r3, #32
 8029d5c:	6023      	str	r3, [r4, #0]
 8029d5e:	e7f6      	b.n	8029d4e <_printf_i+0x196>
 8029d60:	4616      	mov	r6, r2
 8029d62:	e7bd      	b.n	8029ce0 <_printf_i+0x128>
 8029d64:	6833      	ldr	r3, [r6, #0]
 8029d66:	6825      	ldr	r5, [r4, #0]
 8029d68:	6961      	ldr	r1, [r4, #20]
 8029d6a:	1d18      	adds	r0, r3, #4
 8029d6c:	6030      	str	r0, [r6, #0]
 8029d6e:	062e      	lsls	r6, r5, #24
 8029d70:	681b      	ldr	r3, [r3, #0]
 8029d72:	d501      	bpl.n	8029d78 <_printf_i+0x1c0>
 8029d74:	6019      	str	r1, [r3, #0]
 8029d76:	e002      	b.n	8029d7e <_printf_i+0x1c6>
 8029d78:	0668      	lsls	r0, r5, #25
 8029d7a:	d5fb      	bpl.n	8029d74 <_printf_i+0x1bc>
 8029d7c:	8019      	strh	r1, [r3, #0]
 8029d7e:	2300      	movs	r3, #0
 8029d80:	6123      	str	r3, [r4, #16]
 8029d82:	4616      	mov	r6, r2
 8029d84:	e7bc      	b.n	8029d00 <_printf_i+0x148>
 8029d86:	6833      	ldr	r3, [r6, #0]
 8029d88:	1d1a      	adds	r2, r3, #4
 8029d8a:	6032      	str	r2, [r6, #0]
 8029d8c:	681e      	ldr	r6, [r3, #0]
 8029d8e:	6862      	ldr	r2, [r4, #4]
 8029d90:	2100      	movs	r1, #0
 8029d92:	4630      	mov	r0, r6
 8029d94:	f7d6 fab4 	bl	8000300 <memchr>
 8029d98:	b108      	cbz	r0, 8029d9e <_printf_i+0x1e6>
 8029d9a:	1b80      	subs	r0, r0, r6
 8029d9c:	6060      	str	r0, [r4, #4]
 8029d9e:	6863      	ldr	r3, [r4, #4]
 8029da0:	6123      	str	r3, [r4, #16]
 8029da2:	2300      	movs	r3, #0
 8029da4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8029da8:	e7aa      	b.n	8029d00 <_printf_i+0x148>
 8029daa:	6923      	ldr	r3, [r4, #16]
 8029dac:	4632      	mov	r2, r6
 8029dae:	4649      	mov	r1, r9
 8029db0:	4640      	mov	r0, r8
 8029db2:	47d0      	blx	sl
 8029db4:	3001      	adds	r0, #1
 8029db6:	d0ad      	beq.n	8029d14 <_printf_i+0x15c>
 8029db8:	6823      	ldr	r3, [r4, #0]
 8029dba:	079b      	lsls	r3, r3, #30
 8029dbc:	d413      	bmi.n	8029de6 <_printf_i+0x22e>
 8029dbe:	68e0      	ldr	r0, [r4, #12]
 8029dc0:	9b03      	ldr	r3, [sp, #12]
 8029dc2:	4298      	cmp	r0, r3
 8029dc4:	bfb8      	it	lt
 8029dc6:	4618      	movlt	r0, r3
 8029dc8:	e7a6      	b.n	8029d18 <_printf_i+0x160>
 8029dca:	2301      	movs	r3, #1
 8029dcc:	4632      	mov	r2, r6
 8029dce:	4649      	mov	r1, r9
 8029dd0:	4640      	mov	r0, r8
 8029dd2:	47d0      	blx	sl
 8029dd4:	3001      	adds	r0, #1
 8029dd6:	d09d      	beq.n	8029d14 <_printf_i+0x15c>
 8029dd8:	3501      	adds	r5, #1
 8029dda:	68e3      	ldr	r3, [r4, #12]
 8029ddc:	9903      	ldr	r1, [sp, #12]
 8029dde:	1a5b      	subs	r3, r3, r1
 8029de0:	42ab      	cmp	r3, r5
 8029de2:	dcf2      	bgt.n	8029dca <_printf_i+0x212>
 8029de4:	e7eb      	b.n	8029dbe <_printf_i+0x206>
 8029de6:	2500      	movs	r5, #0
 8029de8:	f104 0619 	add.w	r6, r4, #25
 8029dec:	e7f5      	b.n	8029dda <_printf_i+0x222>
 8029dee:	bf00      	nop
 8029df0:	0802b9fa 	.word	0x0802b9fa
 8029df4:	0802ba0b 	.word	0x0802ba0b

08029df8 <__sflush_r>:
 8029df8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8029dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029e00:	0716      	lsls	r6, r2, #28
 8029e02:	4605      	mov	r5, r0
 8029e04:	460c      	mov	r4, r1
 8029e06:	d454      	bmi.n	8029eb2 <__sflush_r+0xba>
 8029e08:	684b      	ldr	r3, [r1, #4]
 8029e0a:	2b00      	cmp	r3, #0
 8029e0c:	dc02      	bgt.n	8029e14 <__sflush_r+0x1c>
 8029e0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8029e10:	2b00      	cmp	r3, #0
 8029e12:	dd48      	ble.n	8029ea6 <__sflush_r+0xae>
 8029e14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8029e16:	2e00      	cmp	r6, #0
 8029e18:	d045      	beq.n	8029ea6 <__sflush_r+0xae>
 8029e1a:	2300      	movs	r3, #0
 8029e1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8029e20:	682f      	ldr	r7, [r5, #0]
 8029e22:	6a21      	ldr	r1, [r4, #32]
 8029e24:	602b      	str	r3, [r5, #0]
 8029e26:	d030      	beq.n	8029e8a <__sflush_r+0x92>
 8029e28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8029e2a:	89a3      	ldrh	r3, [r4, #12]
 8029e2c:	0759      	lsls	r1, r3, #29
 8029e2e:	d505      	bpl.n	8029e3c <__sflush_r+0x44>
 8029e30:	6863      	ldr	r3, [r4, #4]
 8029e32:	1ad2      	subs	r2, r2, r3
 8029e34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8029e36:	b10b      	cbz	r3, 8029e3c <__sflush_r+0x44>
 8029e38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8029e3a:	1ad2      	subs	r2, r2, r3
 8029e3c:	2300      	movs	r3, #0
 8029e3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8029e40:	6a21      	ldr	r1, [r4, #32]
 8029e42:	4628      	mov	r0, r5
 8029e44:	47b0      	blx	r6
 8029e46:	1c43      	adds	r3, r0, #1
 8029e48:	89a3      	ldrh	r3, [r4, #12]
 8029e4a:	d106      	bne.n	8029e5a <__sflush_r+0x62>
 8029e4c:	6829      	ldr	r1, [r5, #0]
 8029e4e:	291d      	cmp	r1, #29
 8029e50:	d82b      	bhi.n	8029eaa <__sflush_r+0xb2>
 8029e52:	4a2a      	ldr	r2, [pc, #168]	@ (8029efc <__sflush_r+0x104>)
 8029e54:	410a      	asrs	r2, r1
 8029e56:	07d6      	lsls	r6, r2, #31
 8029e58:	d427      	bmi.n	8029eaa <__sflush_r+0xb2>
 8029e5a:	2200      	movs	r2, #0
 8029e5c:	6062      	str	r2, [r4, #4]
 8029e5e:	04d9      	lsls	r1, r3, #19
 8029e60:	6922      	ldr	r2, [r4, #16]
 8029e62:	6022      	str	r2, [r4, #0]
 8029e64:	d504      	bpl.n	8029e70 <__sflush_r+0x78>
 8029e66:	1c42      	adds	r2, r0, #1
 8029e68:	d101      	bne.n	8029e6e <__sflush_r+0x76>
 8029e6a:	682b      	ldr	r3, [r5, #0]
 8029e6c:	b903      	cbnz	r3, 8029e70 <__sflush_r+0x78>
 8029e6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8029e70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029e72:	602f      	str	r7, [r5, #0]
 8029e74:	b1b9      	cbz	r1, 8029ea6 <__sflush_r+0xae>
 8029e76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8029e7a:	4299      	cmp	r1, r3
 8029e7c:	d002      	beq.n	8029e84 <__sflush_r+0x8c>
 8029e7e:	4628      	mov	r0, r5
 8029e80:	f7ff fc98 	bl	80297b4 <_free_r>
 8029e84:	2300      	movs	r3, #0
 8029e86:	6363      	str	r3, [r4, #52]	@ 0x34
 8029e88:	e00d      	b.n	8029ea6 <__sflush_r+0xae>
 8029e8a:	2301      	movs	r3, #1
 8029e8c:	4628      	mov	r0, r5
 8029e8e:	47b0      	blx	r6
 8029e90:	4602      	mov	r2, r0
 8029e92:	1c50      	adds	r0, r2, #1
 8029e94:	d1c9      	bne.n	8029e2a <__sflush_r+0x32>
 8029e96:	682b      	ldr	r3, [r5, #0]
 8029e98:	2b00      	cmp	r3, #0
 8029e9a:	d0c6      	beq.n	8029e2a <__sflush_r+0x32>
 8029e9c:	2b1d      	cmp	r3, #29
 8029e9e:	d001      	beq.n	8029ea4 <__sflush_r+0xac>
 8029ea0:	2b16      	cmp	r3, #22
 8029ea2:	d11e      	bne.n	8029ee2 <__sflush_r+0xea>
 8029ea4:	602f      	str	r7, [r5, #0]
 8029ea6:	2000      	movs	r0, #0
 8029ea8:	e022      	b.n	8029ef0 <__sflush_r+0xf8>
 8029eaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029eae:	b21b      	sxth	r3, r3
 8029eb0:	e01b      	b.n	8029eea <__sflush_r+0xf2>
 8029eb2:	690f      	ldr	r7, [r1, #16]
 8029eb4:	2f00      	cmp	r7, #0
 8029eb6:	d0f6      	beq.n	8029ea6 <__sflush_r+0xae>
 8029eb8:	0793      	lsls	r3, r2, #30
 8029eba:	680e      	ldr	r6, [r1, #0]
 8029ebc:	bf08      	it	eq
 8029ebe:	694b      	ldreq	r3, [r1, #20]
 8029ec0:	600f      	str	r7, [r1, #0]
 8029ec2:	bf18      	it	ne
 8029ec4:	2300      	movne	r3, #0
 8029ec6:	eba6 0807 	sub.w	r8, r6, r7
 8029eca:	608b      	str	r3, [r1, #8]
 8029ecc:	f1b8 0f00 	cmp.w	r8, #0
 8029ed0:	dde9      	ble.n	8029ea6 <__sflush_r+0xae>
 8029ed2:	6a21      	ldr	r1, [r4, #32]
 8029ed4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8029ed6:	4643      	mov	r3, r8
 8029ed8:	463a      	mov	r2, r7
 8029eda:	4628      	mov	r0, r5
 8029edc:	47b0      	blx	r6
 8029ede:	2800      	cmp	r0, #0
 8029ee0:	dc08      	bgt.n	8029ef4 <__sflush_r+0xfc>
 8029ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029eea:	81a3      	strh	r3, [r4, #12]
 8029eec:	f04f 30ff 	mov.w	r0, #4294967295
 8029ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029ef4:	4407      	add	r7, r0
 8029ef6:	eba8 0800 	sub.w	r8, r8, r0
 8029efa:	e7e7      	b.n	8029ecc <__sflush_r+0xd4>
 8029efc:	dfbffffe 	.word	0xdfbffffe

08029f00 <_fflush_r>:
 8029f00:	b538      	push	{r3, r4, r5, lr}
 8029f02:	690b      	ldr	r3, [r1, #16]
 8029f04:	4605      	mov	r5, r0
 8029f06:	460c      	mov	r4, r1
 8029f08:	b913      	cbnz	r3, 8029f10 <_fflush_r+0x10>
 8029f0a:	2500      	movs	r5, #0
 8029f0c:	4628      	mov	r0, r5
 8029f0e:	bd38      	pop	{r3, r4, r5, pc}
 8029f10:	b118      	cbz	r0, 8029f1a <_fflush_r+0x1a>
 8029f12:	6a03      	ldr	r3, [r0, #32]
 8029f14:	b90b      	cbnz	r3, 8029f1a <_fflush_r+0x1a>
 8029f16:	f7ff f9bf 	bl	8029298 <__sinit>
 8029f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029f1e:	2b00      	cmp	r3, #0
 8029f20:	d0f3      	beq.n	8029f0a <_fflush_r+0xa>
 8029f22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8029f24:	07d0      	lsls	r0, r2, #31
 8029f26:	d404      	bmi.n	8029f32 <_fflush_r+0x32>
 8029f28:	0599      	lsls	r1, r3, #22
 8029f2a:	d402      	bmi.n	8029f32 <_fflush_r+0x32>
 8029f2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029f2e:	f7ff fc30 	bl	8029792 <__retarget_lock_acquire_recursive>
 8029f32:	4628      	mov	r0, r5
 8029f34:	4621      	mov	r1, r4
 8029f36:	f7ff ff5f 	bl	8029df8 <__sflush_r>
 8029f3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029f3c:	07da      	lsls	r2, r3, #31
 8029f3e:	4605      	mov	r5, r0
 8029f40:	d4e4      	bmi.n	8029f0c <_fflush_r+0xc>
 8029f42:	89a3      	ldrh	r3, [r4, #12]
 8029f44:	059b      	lsls	r3, r3, #22
 8029f46:	d4e1      	bmi.n	8029f0c <_fflush_r+0xc>
 8029f48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8029f4a:	f7ff fc23 	bl	8029794 <__retarget_lock_release_recursive>
 8029f4e:	e7dd      	b.n	8029f0c <_fflush_r+0xc>

08029f50 <__swhatbuf_r>:
 8029f50:	b570      	push	{r4, r5, r6, lr}
 8029f52:	460c      	mov	r4, r1
 8029f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029f58:	2900      	cmp	r1, #0
 8029f5a:	b096      	sub	sp, #88	@ 0x58
 8029f5c:	4615      	mov	r5, r2
 8029f5e:	461e      	mov	r6, r3
 8029f60:	da0d      	bge.n	8029f7e <__swhatbuf_r+0x2e>
 8029f62:	89a3      	ldrh	r3, [r4, #12]
 8029f64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8029f68:	f04f 0100 	mov.w	r1, #0
 8029f6c:	bf14      	ite	ne
 8029f6e:	2340      	movne	r3, #64	@ 0x40
 8029f70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8029f74:	2000      	movs	r0, #0
 8029f76:	6031      	str	r1, [r6, #0]
 8029f78:	602b      	str	r3, [r5, #0]
 8029f7a:	b016      	add	sp, #88	@ 0x58
 8029f7c:	bd70      	pop	{r4, r5, r6, pc}
 8029f7e:	466a      	mov	r2, sp
 8029f80:	f000 f87c 	bl	802a07c <_fstat_r>
 8029f84:	2800      	cmp	r0, #0
 8029f86:	dbec      	blt.n	8029f62 <__swhatbuf_r+0x12>
 8029f88:	9901      	ldr	r1, [sp, #4]
 8029f8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8029f8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8029f92:	4259      	negs	r1, r3
 8029f94:	4159      	adcs	r1, r3
 8029f96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8029f9a:	e7eb      	b.n	8029f74 <__swhatbuf_r+0x24>

08029f9c <__smakebuf_r>:
 8029f9c:	898b      	ldrh	r3, [r1, #12]
 8029f9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029fa0:	079d      	lsls	r5, r3, #30
 8029fa2:	4606      	mov	r6, r0
 8029fa4:	460c      	mov	r4, r1
 8029fa6:	d507      	bpl.n	8029fb8 <__smakebuf_r+0x1c>
 8029fa8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8029fac:	6023      	str	r3, [r4, #0]
 8029fae:	6123      	str	r3, [r4, #16]
 8029fb0:	2301      	movs	r3, #1
 8029fb2:	6163      	str	r3, [r4, #20]
 8029fb4:	b003      	add	sp, #12
 8029fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029fb8:	ab01      	add	r3, sp, #4
 8029fba:	466a      	mov	r2, sp
 8029fbc:	f7ff ffc8 	bl	8029f50 <__swhatbuf_r>
 8029fc0:	9f00      	ldr	r7, [sp, #0]
 8029fc2:	4605      	mov	r5, r0
 8029fc4:	4639      	mov	r1, r7
 8029fc6:	4630      	mov	r0, r6
 8029fc8:	f7fe ff94 	bl	8028ef4 <_malloc_r>
 8029fcc:	b948      	cbnz	r0, 8029fe2 <__smakebuf_r+0x46>
 8029fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029fd2:	059a      	lsls	r2, r3, #22
 8029fd4:	d4ee      	bmi.n	8029fb4 <__smakebuf_r+0x18>
 8029fd6:	f023 0303 	bic.w	r3, r3, #3
 8029fda:	f043 0302 	orr.w	r3, r3, #2
 8029fde:	81a3      	strh	r3, [r4, #12]
 8029fe0:	e7e2      	b.n	8029fa8 <__smakebuf_r+0xc>
 8029fe2:	89a3      	ldrh	r3, [r4, #12]
 8029fe4:	6020      	str	r0, [r4, #0]
 8029fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8029fea:	81a3      	strh	r3, [r4, #12]
 8029fec:	9b01      	ldr	r3, [sp, #4]
 8029fee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8029ff2:	b15b      	cbz	r3, 802a00c <__smakebuf_r+0x70>
 8029ff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029ff8:	4630      	mov	r0, r6
 8029ffa:	f000 f851 	bl	802a0a0 <_isatty_r>
 8029ffe:	b128      	cbz	r0, 802a00c <__smakebuf_r+0x70>
 802a000:	89a3      	ldrh	r3, [r4, #12]
 802a002:	f023 0303 	bic.w	r3, r3, #3
 802a006:	f043 0301 	orr.w	r3, r3, #1
 802a00a:	81a3      	strh	r3, [r4, #12]
 802a00c:	89a3      	ldrh	r3, [r4, #12]
 802a00e:	431d      	orrs	r5, r3
 802a010:	81a5      	strh	r5, [r4, #12]
 802a012:	e7cf      	b.n	8029fb4 <__smakebuf_r+0x18>

0802a014 <_putc_r>:
 802a014:	b570      	push	{r4, r5, r6, lr}
 802a016:	460d      	mov	r5, r1
 802a018:	4614      	mov	r4, r2
 802a01a:	4606      	mov	r6, r0
 802a01c:	b118      	cbz	r0, 802a026 <_putc_r+0x12>
 802a01e:	6a03      	ldr	r3, [r0, #32]
 802a020:	b90b      	cbnz	r3, 802a026 <_putc_r+0x12>
 802a022:	f7ff f939 	bl	8029298 <__sinit>
 802a026:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802a028:	07d8      	lsls	r0, r3, #31
 802a02a:	d405      	bmi.n	802a038 <_putc_r+0x24>
 802a02c:	89a3      	ldrh	r3, [r4, #12]
 802a02e:	0599      	lsls	r1, r3, #22
 802a030:	d402      	bmi.n	802a038 <_putc_r+0x24>
 802a032:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a034:	f7ff fbad 	bl	8029792 <__retarget_lock_acquire_recursive>
 802a038:	68a3      	ldr	r3, [r4, #8]
 802a03a:	3b01      	subs	r3, #1
 802a03c:	2b00      	cmp	r3, #0
 802a03e:	60a3      	str	r3, [r4, #8]
 802a040:	da05      	bge.n	802a04e <_putc_r+0x3a>
 802a042:	69a2      	ldr	r2, [r4, #24]
 802a044:	4293      	cmp	r3, r2
 802a046:	db12      	blt.n	802a06e <_putc_r+0x5a>
 802a048:	b2eb      	uxtb	r3, r5
 802a04a:	2b0a      	cmp	r3, #10
 802a04c:	d00f      	beq.n	802a06e <_putc_r+0x5a>
 802a04e:	6823      	ldr	r3, [r4, #0]
 802a050:	1c5a      	adds	r2, r3, #1
 802a052:	6022      	str	r2, [r4, #0]
 802a054:	701d      	strb	r5, [r3, #0]
 802a056:	b2ed      	uxtb	r5, r5
 802a058:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802a05a:	07da      	lsls	r2, r3, #31
 802a05c:	d405      	bmi.n	802a06a <_putc_r+0x56>
 802a05e:	89a3      	ldrh	r3, [r4, #12]
 802a060:	059b      	lsls	r3, r3, #22
 802a062:	d402      	bmi.n	802a06a <_putc_r+0x56>
 802a064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a066:	f7ff fb95 	bl	8029794 <__retarget_lock_release_recursive>
 802a06a:	4628      	mov	r0, r5
 802a06c:	bd70      	pop	{r4, r5, r6, pc}
 802a06e:	4629      	mov	r1, r5
 802a070:	4622      	mov	r2, r4
 802a072:	4630      	mov	r0, r6
 802a074:	f7ff fa01 	bl	802947a <__swbuf_r>
 802a078:	4605      	mov	r5, r0
 802a07a:	e7ed      	b.n	802a058 <_putc_r+0x44>

0802a07c <_fstat_r>:
 802a07c:	b538      	push	{r3, r4, r5, lr}
 802a07e:	4d07      	ldr	r5, [pc, #28]	@ (802a09c <_fstat_r+0x20>)
 802a080:	2300      	movs	r3, #0
 802a082:	4604      	mov	r4, r0
 802a084:	4608      	mov	r0, r1
 802a086:	4611      	mov	r1, r2
 802a088:	602b      	str	r3, [r5, #0]
 802a08a:	f7e4 ff1b 	bl	800eec4 <_fstat>
 802a08e:	1c43      	adds	r3, r0, #1
 802a090:	d102      	bne.n	802a098 <_fstat_r+0x1c>
 802a092:	682b      	ldr	r3, [r5, #0]
 802a094:	b103      	cbz	r3, 802a098 <_fstat_r+0x1c>
 802a096:	6023      	str	r3, [r4, #0]
 802a098:	bd38      	pop	{r3, r4, r5, pc}
 802a09a:	bf00      	nop
 802a09c:	24000c08 	.word	0x24000c08

0802a0a0 <_isatty_r>:
 802a0a0:	b538      	push	{r3, r4, r5, lr}
 802a0a2:	4d06      	ldr	r5, [pc, #24]	@ (802a0bc <_isatty_r+0x1c>)
 802a0a4:	2300      	movs	r3, #0
 802a0a6:	4604      	mov	r4, r0
 802a0a8:	4608      	mov	r0, r1
 802a0aa:	602b      	str	r3, [r5, #0]
 802a0ac:	f7e4 ff1a 	bl	800eee4 <_isatty>
 802a0b0:	1c43      	adds	r3, r0, #1
 802a0b2:	d102      	bne.n	802a0ba <_isatty_r+0x1a>
 802a0b4:	682b      	ldr	r3, [r5, #0]
 802a0b6:	b103      	cbz	r3, 802a0ba <_isatty_r+0x1a>
 802a0b8:	6023      	str	r3, [r4, #0]
 802a0ba:	bd38      	pop	{r3, r4, r5, pc}
 802a0bc:	24000c08 	.word	0x24000c08

0802a0c0 <_init>:
 802a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a0c2:	bf00      	nop
 802a0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a0c6:	bc08      	pop	{r3}
 802a0c8:	469e      	mov	lr, r3
 802a0ca:	4770      	bx	lr

0802a0cc <_fini>:
 802a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a0ce:	bf00      	nop
 802a0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a0d2:	bc08      	pop	{r3}
 802a0d4:	469e      	mov	lr, r3
 802a0d6:	4770      	bx	lr
