
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029f80  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001914  0802a220  0802a220  0002b220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802bb34  0802bb34  0002cb34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  0802bb3c  0802bb3c  0002cb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802bb48  0802bb48  0002cb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  24000000  0802bb4c  0002d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b88  24000088  0802bbd4  0002d088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000c10  0802bbd4  0002dc10  2**0
                  ALLOC
  9 .dma_buffers  00000100  30000000  00000000  00001000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0002d088  2**0
                  CONTENTS, READONLY
 11 .debug_info   001e943b  00000000  00000000  0002d0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0001bea5  00000000  00000000  002164f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000091a0  00000000  00000000  00232398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00006f00  00000000  00000000  0023b538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00057481  00000000  00000000  00242438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0009c557  00000000  00000000  002998b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001d98dc  00000000  00000000  00335e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0050f6ec  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0002b9d0  00000000  00000000  0050f730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  0053b100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802a208 	.word	0x0802a208

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0802a208 	.word	0x0802a208

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_frsub>:
 8000728:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800072c:	e002      	b.n	8000734 <__addsf3>
 800072e:	bf00      	nop

08000730 <__aeabi_fsub>:
 8000730:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000734 <__addsf3>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	bf1f      	itttt	ne
 8000738:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800073c:	ea92 0f03 	teqne	r2, r3
 8000740:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000744:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000748:	d06a      	beq.n	8000820 <__addsf3+0xec>
 800074a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800074e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000752:	bfc1      	itttt	gt
 8000754:	18d2      	addgt	r2, r2, r3
 8000756:	4041      	eorgt	r1, r0
 8000758:	4048      	eorgt	r0, r1
 800075a:	4041      	eorgt	r1, r0
 800075c:	bfb8      	it	lt
 800075e:	425b      	neglt	r3, r3
 8000760:	2b19      	cmp	r3, #25
 8000762:	bf88      	it	hi
 8000764:	4770      	bxhi	lr
 8000766:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800076a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000772:	bf18      	it	ne
 8000774:	4240      	negne	r0, r0
 8000776:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800077a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800077e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000782:	bf18      	it	ne
 8000784:	4249      	negne	r1, r1
 8000786:	ea92 0f03 	teq	r2, r3
 800078a:	d03f      	beq.n	800080c <__addsf3+0xd8>
 800078c:	f1a2 0201 	sub.w	r2, r2, #1
 8000790:	fa41 fc03 	asr.w	ip, r1, r3
 8000794:	eb10 000c 	adds.w	r0, r0, ip
 8000798:	f1c3 0320 	rsb	r3, r3, #32
 800079c:	fa01 f103 	lsl.w	r1, r1, r3
 80007a0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__addsf3+0x78>
 80007a6:	4249      	negs	r1, r1
 80007a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007ac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007b0:	d313      	bcc.n	80007da <__addsf3+0xa6>
 80007b2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007b6:	d306      	bcc.n	80007c6 <__addsf3+0x92>
 80007b8:	0840      	lsrs	r0, r0, #1
 80007ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80007be:	f102 0201 	add.w	r2, r2, #1
 80007c2:	2afe      	cmp	r2, #254	@ 0xfe
 80007c4:	d251      	bcs.n	800086a <__addsf3+0x136>
 80007c6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	ea40 0003 	orr.w	r0, r0, r3
 80007d8:	4770      	bx	lr
 80007da:	0049      	lsls	r1, r1, #1
 80007dc:	eb40 0000 	adc.w	r0, r0, r0
 80007e0:	3a01      	subs	r2, #1
 80007e2:	bf28      	it	cs
 80007e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007e8:	d2ed      	bcs.n	80007c6 <__addsf3+0x92>
 80007ea:	fab0 fc80 	clz	ip, r0
 80007ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80007f2:	ebb2 020c 	subs.w	r2, r2, ip
 80007f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007fa:	bfaa      	itet	ge
 80007fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000800:	4252      	neglt	r2, r2
 8000802:	4318      	orrge	r0, r3
 8000804:	bfbc      	itt	lt
 8000806:	40d0      	lsrlt	r0, r2
 8000808:	4318      	orrlt	r0, r3
 800080a:	4770      	bx	lr
 800080c:	f092 0f00 	teq	r2, #0
 8000810:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000814:	bf06      	itte	eq
 8000816:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800081a:	3201      	addeq	r2, #1
 800081c:	3b01      	subne	r3, #1
 800081e:	e7b5      	b.n	800078c <__addsf3+0x58>
 8000820:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000824:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000828:	bf18      	it	ne
 800082a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800082e:	d021      	beq.n	8000874 <__addsf3+0x140>
 8000830:	ea92 0f03 	teq	r2, r3
 8000834:	d004      	beq.n	8000840 <__addsf3+0x10c>
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	bf08      	it	eq
 800083c:	4608      	moveq	r0, r1
 800083e:	4770      	bx	lr
 8000840:	ea90 0f01 	teq	r0, r1
 8000844:	bf1c      	itt	ne
 8000846:	2000      	movne	r0, #0
 8000848:	4770      	bxne	lr
 800084a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800084e:	d104      	bne.n	800085a <__addsf3+0x126>
 8000850:	0040      	lsls	r0, r0, #1
 8000852:	bf28      	it	cs
 8000854:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000858:	4770      	bx	lr
 800085a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800085e:	bf3c      	itt	cc
 8000860:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000864:	4770      	bxcc	lr
 8000866:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800086a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800086e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000872:	4770      	bx	lr
 8000874:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000878:	bf16      	itet	ne
 800087a:	4608      	movne	r0, r1
 800087c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000880:	4601      	movne	r1, r0
 8000882:	0242      	lsls	r2, r0, #9
 8000884:	bf06      	itte	eq
 8000886:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800088a:	ea90 0f01 	teqeq	r0, r1
 800088e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000892:	4770      	bx	lr

08000894 <__aeabi_ui2f>:
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	e004      	b.n	80008a4 <__aeabi_i2f+0x8>
 800089a:	bf00      	nop

0800089c <__aeabi_i2f>:
 800089c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008a0:	bf48      	it	mi
 80008a2:	4240      	negmi	r0, r0
 80008a4:	ea5f 0c00 	movs.w	ip, r0
 80008a8:	bf08      	it	eq
 80008aa:	4770      	bxeq	lr
 80008ac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008b0:	4601      	mov	r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	e01c      	b.n	80008f2 <__aeabi_l2f+0x2a>

080008b8 <__aeabi_ul2f>:
 80008b8:	ea50 0201 	orrs.w	r2, r0, r1
 80008bc:	bf08      	it	eq
 80008be:	4770      	bxeq	lr
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	e00a      	b.n	80008dc <__aeabi_l2f+0x14>
 80008c6:	bf00      	nop

080008c8 <__aeabi_l2f>:
 80008c8:	ea50 0201 	orrs.w	r2, r0, r1
 80008cc:	bf08      	it	eq
 80008ce:	4770      	bxeq	lr
 80008d0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008d4:	d502      	bpl.n	80008dc <__aeabi_l2f+0x14>
 80008d6:	4240      	negs	r0, r0
 80008d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008dc:	ea5f 0c01 	movs.w	ip, r1
 80008e0:	bf02      	ittt	eq
 80008e2:	4684      	moveq	ip, r0
 80008e4:	4601      	moveq	r1, r0
 80008e6:	2000      	moveq	r0, #0
 80008e8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008ec:	bf08      	it	eq
 80008ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008f6:	fabc f28c 	clz	r2, ip
 80008fa:	3a08      	subs	r2, #8
 80008fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000900:	db10      	blt.n	8000924 <__aeabi_l2f+0x5c>
 8000902:	fa01 fc02 	lsl.w	ip, r1, r2
 8000906:	4463      	add	r3, ip
 8000908:	fa00 fc02 	lsl.w	ip, r0, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000914:	fa20 f202 	lsr.w	r2, r0, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f102 0220 	add.w	r2, r2, #32
 8000928:	fa01 fc02 	lsl.w	ip, r1, r2
 800092c:	f1c2 0220 	rsb	r2, r2, #32
 8000930:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000934:	fa21 f202 	lsr.w	r2, r1, r2
 8000938:	eb43 0002 	adc.w	r0, r3, r2
 800093c:	bf08      	it	eq
 800093e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000942:	4770      	bx	lr

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b96a 	b.w	8000c30 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f806 	bl	8000974 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__udivmoddi4>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	9d08      	ldr	r5, [sp, #32]
 800097a:	460c      	mov	r4, r1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d14e      	bne.n	8000a1e <__udivmoddi4+0xaa>
 8000980:	4694      	mov	ip, r2
 8000982:	458c      	cmp	ip, r1
 8000984:	4686      	mov	lr, r0
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	d962      	bls.n	8000a52 <__udivmoddi4+0xde>
 800098c:	b14a      	cbz	r2, 80009a2 <__udivmoddi4+0x2e>
 800098e:	f1c2 0320 	rsb	r3, r2, #32
 8000992:	4091      	lsls	r1, r2
 8000994:	fa20 f303 	lsr.w	r3, r0, r3
 8000998:	fa0c fc02 	lsl.w	ip, ip, r2
 800099c:	4319      	orrs	r1, r3
 800099e:	fa00 fe02 	lsl.w	lr, r0, r2
 80009a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a6:	fa1f f68c 	uxth.w	r6, ip
 80009aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80009ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b2:	fb07 1114 	mls	r1, r7, r4, r1
 80009b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ba:	fb04 f106 	mul.w	r1, r4, r6
 80009be:	4299      	cmp	r1, r3
 80009c0:	d90a      	bls.n	80009d8 <__udivmoddi4+0x64>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80009ca:	f080 8112 	bcs.w	8000bf2 <__udivmoddi4+0x27e>
 80009ce:	4299      	cmp	r1, r3
 80009d0:	f240 810f 	bls.w	8000bf2 <__udivmoddi4+0x27e>
 80009d4:	3c02      	subs	r4, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	1a59      	subs	r1, r3, r1
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e2:	fb07 1110 	mls	r1, r7, r0, r1
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f606 	mul.w	r6, r0, r6
 80009ee:	429e      	cmp	r6, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x94>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80009fa:	f080 80fc 	bcs.w	8000bf6 <__udivmoddi4+0x282>
 80009fe:	429e      	cmp	r6, r3
 8000a00:	f240 80f9 	bls.w	8000bf6 <__udivmoddi4+0x282>
 8000a04:	4463      	add	r3, ip
 8000a06:	3802      	subs	r0, #2
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a0e:	2100      	movs	r1, #0
 8000a10:	b11d      	cbz	r5, 8000a1a <__udivmoddi4+0xa6>
 8000a12:	40d3      	lsrs	r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	e9c5 3200 	strd	r3, r2, [r5]
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d905      	bls.n	8000a2e <__udivmoddi4+0xba>
 8000a22:	b10d      	cbz	r5, 8000a28 <__udivmoddi4+0xb4>
 8000a24:	e9c5 0100 	strd	r0, r1, [r5]
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e7f5      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a2e:	fab3 f183 	clz	r1, r3
 8000a32:	2900      	cmp	r1, #0
 8000a34:	d146      	bne.n	8000ac4 <__udivmoddi4+0x150>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d302      	bcc.n	8000a40 <__udivmoddi4+0xcc>
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	f0c0 80f0 	bcc.w	8000c20 <__udivmoddi4+0x2ac>
 8000a40:	1a86      	subs	r6, r0, r2
 8000a42:	eb64 0303 	sbc.w	r3, r4, r3
 8000a46:	2001      	movs	r0, #1
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d0e6      	beq.n	8000a1a <__udivmoddi4+0xa6>
 8000a4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a50:	e7e3      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	f040 8090 	bne.w	8000b78 <__udivmoddi4+0x204>
 8000a58:	eba1 040c 	sub.w	r4, r1, ip
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	2101      	movs	r1, #1
 8000a66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000a72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a76:	fb07 f006 	mul.w	r0, r7, r6
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x11c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x11a>
 8000a88:	4298      	cmp	r0, r3
 8000a8a:	f200 80cd 	bhi.w	8000c28 <__udivmoddi4+0x2b4>
 8000a8e:	4626      	mov	r6, r4
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	fa1f f38e 	uxth.w	r3, lr
 8000a96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aa2:	fb00 f707 	mul.w	r7, r0, r7
 8000aa6:	429f      	cmp	r7, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x148>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab2:	d202      	bcs.n	8000aba <__udivmoddi4+0x146>
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	f200 80b0 	bhi.w	8000c1a <__udivmoddi4+0x2a6>
 8000aba:	4620      	mov	r0, r4
 8000abc:	1bdb      	subs	r3, r3, r7
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	e7a5      	b.n	8000a10 <__udivmoddi4+0x9c>
 8000ac4:	f1c1 0620 	rsb	r6, r1, #32
 8000ac8:	408b      	lsls	r3, r1
 8000aca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ace:	431f      	orrs	r7, r3
 8000ad0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ad4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ad8:	ea43 030c 	orr.w	r3, r3, ip
 8000adc:	40f4      	lsrs	r4, r6
 8000ade:	fa00 f801 	lsl.w	r8, r0, r1
 8000ae2:	0c38      	lsrs	r0, r7, #16
 8000ae4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ae8:	fbb4 fef0 	udiv	lr, r4, r0
 8000aec:	fa1f fc87 	uxth.w	ip, r7
 8000af0:	fb00 441e 	mls	r4, r0, lr, r4
 8000af4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af8:	fb0e f90c 	mul.w	r9, lr, ip
 8000afc:	45a1      	cmp	r9, r4
 8000afe:	fa02 f201 	lsl.w	r2, r2, r1
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x1a6>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b0a:	f080 8084 	bcs.w	8000c16 <__udivmoddi4+0x2a2>
 8000b0e:	45a1      	cmp	r9, r4
 8000b10:	f240 8081 	bls.w	8000c16 <__udivmoddi4+0x2a2>
 8000b14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	eba4 0409 	sub.w	r4, r4, r9
 8000b1e:	fa1f f983 	uxth.w	r9, r3
 8000b22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b26:	fb00 4413 	mls	r4, r0, r3, r4
 8000b2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b32:	45a4      	cmp	ip, r4
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x1d2>
 8000b36:	193c      	adds	r4, r7, r4
 8000b38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b3c:	d267      	bcs.n	8000c0e <__udivmoddi4+0x29a>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0x29a>
 8000b42:	3b02      	subs	r3, #2
 8000b44:	443c      	add	r4, r7
 8000b46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b4e:	eba4 040c 	sub.w	r4, r4, ip
 8000b52:	429c      	cmp	r4, r3
 8000b54:	46ce      	mov	lr, r9
 8000b56:	469c      	mov	ip, r3
 8000b58:	d351      	bcc.n	8000bfe <__udivmoddi4+0x28a>
 8000b5a:	d04e      	beq.n	8000bfa <__udivmoddi4+0x286>
 8000b5c:	b155      	cbz	r5, 8000b74 <__udivmoddi4+0x200>
 8000b5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000b62:	eb64 040c 	sbc.w	r4, r4, ip
 8000b66:	fa04 f606 	lsl.w	r6, r4, r6
 8000b6a:	40cb      	lsrs	r3, r1
 8000b6c:	431e      	orrs	r6, r3
 8000b6e:	40cc      	lsrs	r4, r1
 8000b70:	e9c5 6400 	strd	r6, r4, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	e750      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	fa24 f303 	lsr.w	r3, r4, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	430c      	orrs	r4, r1
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b94:	fa1f f78c 	uxth.w	r7, ip
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ba0:	0c23      	lsrs	r3, r4, #16
 8000ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba6:	fb00 f107 	mul.w	r1, r0, r7
 8000baa:	4299      	cmp	r1, r3
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x24c>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bb6:	d22c      	bcs.n	8000c12 <__udivmoddi4+0x29e>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d92a      	bls.n	8000c12 <__udivmoddi4+0x29e>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb01 f307 	mul.w	r3, r1, r7
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x276>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000be0:	d213      	bcs.n	8000c0a <__udivmoddi4+0x296>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d911      	bls.n	8000c0a <__udivmoddi4+0x296>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4464      	add	r4, ip
 8000bea:	1ae4      	subs	r4, r4, r3
 8000bec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bf0:	e739      	b.n	8000a66 <__udivmoddi4+0xf2>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	e6f0      	b.n	80009d8 <__udivmoddi4+0x64>
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e706      	b.n	8000a08 <__udivmoddi4+0x94>
 8000bfa:	45c8      	cmp	r8, r9
 8000bfc:	d2ae      	bcs.n	8000b5c <__udivmoddi4+0x1e8>
 8000bfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c06:	3801      	subs	r0, #1
 8000c08:	e7a8      	b.n	8000b5c <__udivmoddi4+0x1e8>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	e7ed      	b.n	8000bea <__udivmoddi4+0x276>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	e799      	b.n	8000b46 <__udivmoddi4+0x1d2>
 8000c12:	4630      	mov	r0, r6
 8000c14:	e7d4      	b.n	8000bc0 <__udivmoddi4+0x24c>
 8000c16:	46d6      	mov	lr, sl
 8000c18:	e77f      	b.n	8000b1a <__udivmoddi4+0x1a6>
 8000c1a:	4463      	add	r3, ip
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	e74d      	b.n	8000abc <__udivmoddi4+0x148>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	e70f      	b.n	8000a48 <__udivmoddi4+0xd4>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	e730      	b.n	8000a90 <__udivmoddi4+0x11c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <_ZN8rxData_tC1Ev>:
    uint8_t jointEnable;
    uint16_t outputs;
    uint8_t spare0;
  };

  rxData_t() {
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
      header = 0;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
      outputs = 0;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      jointEnable = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e008      	b.n	8000c70 <_ZN8rxData_tC1Ev+0x3c>
         jointFreqCmd[i] = 0;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d9f3      	bls.n	8000c5e <_ZN8rxData_tC1Ev+0x2a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	73bb      	strb	r3, [r7, #14]
 8000c7a:	e00b      	b.n	8000c94 <_ZN8rxData_tC1Ev+0x60>
         setPoint[i] = 0.0;
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	3308      	adds	r3, #8
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3304      	adds	r3, #4
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	3301      	adds	r3, #1
 8000c92:	73bb      	strb	r3, [r7, #14]
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	d9f0      	bls.n	8000c7c <_ZN8rxData_tC1Ev+0x48>
     }
  }
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4798      	blx	r3
    }
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf0c      	ite	eq
 8000cde:	2301      	moveq	r3, #1
 8000ce0:	2300      	movne	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_ZNK6Module17getUsesModulePostEv>:
		virtual void update();		// the standard interface for update of the module - use for stepgen, PWM etc
		virtual void updatePost();
		virtual void slowUpdate();	// the standard interface for the slow update - use for PID controller etc
        virtual void configure();   // the standard interface for one off configuration

        virtual bool getUsesModulePost() const { return usesModulePost; }
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7d1b      	ldrb	r3, [r3, #20]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>:

  size_t size() const {
    return size_;
  }

  char operator[](size_t i) const {
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
  }
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_ZN14DMA_RxBuffer_tC1Ev>:
} __attribute__((aligned(32))) txData_t;


typedef struct {
    volatile rxData_t buffer[2]; // DMA RX buffers
} DMA_RxBuffer_t;
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2401      	movs	r4, #1
 8000d34:	461d      	mov	r5, r3
 8000d36:	e004      	b.n	8000d42 <_ZN14DMA_RxBuffer_tC1Ev+0x1a>
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f7ff ff7b 	bl	8000c34 <_ZN8rxData_tC1Ev>
 8000d3e:	3c01      	subs	r4, #1
 8000d40:	3540      	adds	r5, #64	@ 0x40
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	daf8      	bge.n	8000d38 <_ZN14DMA_RxBuffer_tC1Ev+0x10>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bdb0      	pop	{r4, r5, r7, pc}

08000d50 <_ZNSt8functionIFvbEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ffa4 	bl	8000ca8 <_ZNSt14_Function_baseD1Ev>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <_ZN14CommsInterfaceD1Ev>:

#include <functional>

#include "../../modules/module.h"

class CommsInterface : public Module {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <_ZN14CommsInterfaceD1Ev+0x2c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3318      	adds	r3, #24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ffe6 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f011 f8c0 	bl	8011f0c <_ZN6ModuleD1Ev>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	0802b1fc 	.word	0x0802b1fc

08000d9c <_ZN14CommsInterfaceD0Ev>:
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ffe1 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000daa:	2128      	movs	r1, #40	@ 0x28
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f027 fc92 	bl	80286d6 <_ZdlPvj>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "SPIComms.h"

__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;


SPIComms::SPIComms(volatile rxData_t* _ptrRxData, volatile txData_t* _ptrTxData, SPI_TypeDef* _spiType) :
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
	ptrRxData(_ptrRxData),
	ptrTxData(_ptrTxData),
	spiType(_spiType)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 f9fd 	bl	80021cc <_ZN14CommsInterfaceC1Ev>
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x60>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	601a      	str	r2, [r3, #0]
	ptrRxData(_ptrRxData),
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
	ptrTxData(_ptrTxData),
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
	spiType(_spiType)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	635a      	str	r2, [r3, #52]	@ 0x34
{
    spiHandle.Instance = spiType;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	651a      	str	r2, [r3, #80]	@ 0x50
    ptrRxDMABuffer = &rxDMABuffer;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x64>)
 8000df6:	631a      	str	r2, [r3, #48]	@ 0x30

    irqNss = EXTI4_IRQn;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	220a      	movs	r2, #10
 8000dfc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    irqDMAtx = DMA1_Stream0_IRQn;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	220b      	movs	r2, #11
 8000e04:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    irqDMArx = DMA1_Stream1_IRQn;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	0802b1b8 	.word	0x0802b1b8
 8000e20:	30000000 	.word	0x30000000

08000e24 <_ZN8SPICommsD1Ev>:

SPIComms::~SPIComms() {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_ZN8SPICommsD1Ev+0x20>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]

}
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff99 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	0802b1b8 	.word	0x0802b1b8

08000e48 <_ZN8SPICommsD0Ev>:
SPIComms::~SPIComms() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
}
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ffe7 	bl	8000e24 <_ZN8SPICommsD1Ev>
 8000e56:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f027 fc3b 	bl	80286d6 <_ZdlPvj>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <_ZN8SPIComms4initEv>:

void SPIComms::init() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

    if(spiHandle.Instance == SPI1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e88:	4ab1      	ldr	r2, [pc, #708]	@ (8001150 <_ZN8SPIComms4initEv+0x2e4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	f040 815c 	bne.w	8001148 <_ZN8SPIComms4initEv+0x2dc>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	4bb0      	ldr	r3, [pc, #704]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	4aaf      	ldr	r2, [pc, #700]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ea0:	4bac      	ldr	r3, [pc, #688]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eae:	2310      	movs	r3, #16
 8000eb0:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eb6:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	48a5      	ldr	r0, [pc, #660]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000ec4:	f01d fc08 	bl	801e6d8 <HAL_GPIO_Init>

        printf("	Initialising SPI1 slave\n");
 8000ec8:	48a4      	ldr	r0, [pc, #656]	@ (800115c <_ZN8SPIComms4initEv+0x2f0>)
 8000eca:	f028 fb2f 	bl	802952c <puts>

        spiHandle.Init.Mode           			= SPI_MODE_SLAVE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	655a      	str	r2, [r3, #84]	@ 0x54
        spiHandle.Init.Direction      			= SPI_DIRECTION_2LINES;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	659a      	str	r2, [r3, #88]	@ 0x58
        spiHandle.Init.DataSize       			= SPI_DATASIZE_8BIT;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2207      	movs	r2, #7
 8000ede:	65da      	str	r2, [r3, #92]	@ 0x5c
        spiHandle.Init.CLKPolarity    			= SPI_POLARITY_LOW;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	661a      	str	r2, [r3, #96]	@ 0x60
        spiHandle.Init.CLKPhase       			= SPI_PHASE_1EDGE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	665a      	str	r2, [r3, #100]	@ 0x64
        spiHandle.Init.NSS            			= SPI_NSS_HARD_INPUT;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	669a      	str	r2, [r3, #104]	@ 0x68
        spiHandle.Init.FirstBit       			= SPI_FIRSTBIT_MSB;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	671a      	str	r2, [r3, #112]	@ 0x70
        spiHandle.Init.TIMode         			= SPI_TIMODE_DISABLE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	675a      	str	r2, [r3, #116]	@ 0x74
        spiHandle.Init.CRCCalculation 			= SPI_CRCCALCULATION_DISABLE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	679a      	str	r2, [r3, #120]	@ 0x78
        spiHandle.Init.CRCPolynomial  			= 0x0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	67da      	str	r2, [r3, #124]	@ 0x7c
        spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        spiHandle.Init.NSSPolarity 				= SPI_NSS_POLARITY_LOW;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        spiHandle.Init.MasterInterDataIdleness 	= SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        spiHandle.Init.MasterReceiverAutoSusp 	= SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        spiHandle.Init.IOSwap 					= SPI_IO_SWAP_DISABLE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

        HAL_SPI_Init(&this->spiHandle);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3350      	adds	r3, #80	@ 0x50
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f022 ff1e 	bl	8023da0 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8000f64:	4b7b      	ldr	r3, [pc, #492]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f74:	4b77      	ldr	r3, [pc, #476]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 8000f82:	4877      	ldr	r0, [pc, #476]	@ (8001160 <_ZN8SPIComms4initEv+0x2f4>)
 8000f84:	f028 fad2 	bl	802952c <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b72      	ldr	r3, [pc, #456]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	4a71      	ldr	r2, [pc, #452]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f98:	4b6e      	ldr	r3, [pc, #440]	@ (8001154 <_ZN8SPIComms4initEv+0x2e8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fb6:	23f0      	movs	r3, #240	@ 0xf0
 8000fb8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc6:	2305      	movs	r3, #5
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4861      	ldr	r0, [pc, #388]	@ (8001158 <_ZN8SPIComms4initEv+0x2ec>)
 8000fd2:	f01d fb81 	bl	801e6d8 <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 8000fd6:	4863      	ldr	r0, [pc, #396]	@ (8001164 <_ZN8SPIComms4initEv+0x2f8>)
 8000fd8:	f028 faa8 	bl	802952c <puts>

        hdma_spi_tx.Instance 					= DMA1_Stream0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a62      	ldr	r2, [pc, #392]	@ (8001168 <_ZN8SPIComms4initEv+0x2fc>)
 8000fe0:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2226      	movs	r2, #38	@ 0x26
 8000fe8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        hdma_spi_tx.Init.Direction 				= DMA_MEMORY_TO_PERIPH;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2240      	movs	r2, #64	@ 0x40
 8000ff0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        hdma_spi_tx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001002:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        hdma_spi_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        hdma_spi_tx.Init.Mode 					= DMA_CIRCULAR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        hdma_spi_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        hdma_spi_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

        HAL_DMA_Init(&hdma_spi_tx);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	33d8      	adds	r3, #216	@ 0xd8
 8001034:	4618      	mov	r0, r3
 8001036:	f01b f80f 	bl	801c058 <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmatx, hdma_spi_tx);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

        hdma_spi_rx.Instance 					= DMA1_Stream1;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a45      	ldr	r2, [pc, #276]	@ (800116c <_ZN8SPIComms4initEv+0x300>)
 8001056:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2225      	movs	r2, #37	@ 0x25
 800105e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        hdma_spi_rx.Init.Direction 				= DMA_PERIPH_TO_MEMORY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        hdma_spi_rx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001078:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        hdma_spi_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        hdma_spi_rx.Init.Mode 					= DMA_CIRCULAR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001092:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        hdma_spi_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        hdma_spi_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

        HAL_DMA_Init(&hdma_spi_rx);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80010ac:	4618      	mov	r0, r3
 80010ae:	f01a ffd3 	bl	801c058 <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmarx, hdma_spi_rx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 72a8 	add.w	r2, r3, #336	@ 0x150
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188

        printf("	Initialising DMA for Memory to Memory transfer\n");
 80010ca:	4829      	ldr	r0, [pc, #164]	@ (8001170 <_ZN8SPIComms4initEv+0x304>)
 80010cc:	f028 fa2e 	bl	802952c <puts>

        hdma_memtomem.Instance 					= DMA1_Stream2;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a28      	ldr	r2, [pc, #160]	@ (8001174 <_ZN8SPIComms4initEv+0x308>)
 80010d4:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
        hdma_memtomem.Init.Request 				= DMA_REQUEST_MEM2MEM;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
        hdma_memtomem.Init.Direction 			= DMA_MEMORY_TO_MEMORY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
        hdma_memtomem.Init.PeriphInc 			= DMA_PINC_ENABLE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ee:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
        hdma_memtomem.Init.MemInc 				= DMA_MINC_ENABLE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f8:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
        hdma_memtomem.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
        hdma_memtomem.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        hdma_memtomem.Init.Mode 				= DMA_NORMAL;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        hdma_memtomem.Init.Priority 			= DMA_PRIORITY_LOW;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
        hdma_memtomem.Init.FIFOMode 			= DMA_FIFOMODE_ENABLE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2204      	movs	r2, #4
 8001120:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        hdma_memtomem.Init.FIFOThreshold 		= DMA_FIFO_THRESHOLD_FULL;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
        hdma_memtomem.Init.MemBurst 			= DMA_MBURST_SINGLE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
        hdma_memtomem.Init.PeriphBurst 			= DMA_PBURST_SINGLE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

        HAL_DMA_Init(&hdma_memtomem);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001142:	4618      	mov	r0, r3
 8001144:	f01a ff88 	bl	801c058 <HAL_DMA_Init>
    }
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40013000 	.word	0x40013000
 8001154:	58024400 	.word	0x58024400
 8001158:	58020000 	.word	0x58020000
 800115c:	0802a220 	.word	0x0802a220
 8001160:	0802a23c 	.word	0x0802a23c
 8001164:	0802a258 	.word	0x0802a258
 8001168:	40020010 	.word	0x40020010
 800116c:	40020028 	.word	0x40020028
 8001170:	0802a274 	.word	0x0802a274
 8001174:	40020040 	.word	0x40020040

08001178 <_ZN8SPIComms5startEv>:

void SPIComms::start() {
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08f      	sub	sp, #60	@ 0x3c
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
    // Register the NSS (slave select) interrupt
    NssInterrupt = new ModuleInterrupt<SPIComms>(
        irqNss,
        this,
        &SPIComms::handleNssInterrupt
    );
 8001180:	2010      	movs	r0, #16
 8001182:	f027 fab9 	bl	80286f8 <_Znwj>
 8001186:	4603      	mov	r3, r0
 8001188:	461c      	mov	r4, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	@ 0x48
 8001190:	4b6d      	ldr	r3, [pc, #436]	@ (8001348 <_ZN8SPIComms5startEv+0x1d0>)
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4620      	mov	r0, r4
 80011a2:	f000 fef5 	bl	8001f90 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    NssInterrupt = new ModuleInterrupt<SPIComms>(
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	63dc      	str	r4, [r3, #60]	@ 0x3c
    HAL_NVIC_SetPriority(irqNss, Config::spiNssIrqPriority, 0);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011b0:	2200      	movs	r2, #0
 80011b2:	2106      	movs	r1, #6
 80011b4:	4618      	mov	r0, r3
 80011b6:	f01a fe9e 	bl	801bef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNss);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011c0:	4618      	mov	r0, r3
 80011c2:	f01a feb2 	bl	801bf2a <HAL_NVIC_EnableIRQ>
    // Register the DMA Rx interrupt
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMArx,
        this,
        &SPIComms::handleRxInterrupt
    );
 80011c6:	2010      	movs	r0, #16
 80011c8:	f027 fa96 	bl	80286f8 <_Znwj>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461c      	mov	r4, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f9b3 104a 	ldrsh.w	r1, [r3, #74]	@ 0x4a
 80011d6:	4b5d      	ldr	r3, [pc, #372]	@ (800134c <_ZN8SPIComms5startEv+0x1d4>)
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4620      	mov	r0, r4
 80011e8:	f000 fed2 	bl	8001f90 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	645c      	str	r4, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(irqDMArx, Config::spiDmaRxIrqPriority, 0);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 80011f6:	2200      	movs	r2, #0
 80011f8:	2105      	movs	r1, #5
 80011fa:	4618      	mov	r0, r3
 80011fc:	f01a fe7b 	bl	801bef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMArx);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001206:	4618      	mov	r0, r3
 8001208:	f01a fe8f 	bl	801bf2a <HAL_NVIC_EnableIRQ>
    // Register the DMA Tx interrupt
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMAtx,
        this,
        &SPIComms::handleTxInterrupt
    );
 800120c:	2010      	movs	r0, #16
 800120e:	f027 fa73 	bl	80286f8 <_Znwj>
 8001212:	4603      	mov	r3, r0
 8001214:	461c      	mov	r4, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f9b3 104c 	ldrsh.w	r1, [r3, #76]	@ 0x4c
 800121c:	4b4c      	ldr	r3, [pc, #304]	@ (8001350 <_ZN8SPIComms5startEv+0x1d8>)
 800121e:	61bb      	str	r3, [r7, #24]
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4620      	mov	r0, r4
 800122e:	f000 feaf 	bl	8001f90 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641c      	str	r4, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(irqDMAtx, Config::spiDmaTxIrqPriority, 0); // TX needs higher priority than RX
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800123c:	2200      	movs	r2, #0
 800123e:	2104      	movs	r1, #4
 8001240:	4618      	mov	r0, r3
 8001242:	f01a fe58 	bl	801bef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMAtx);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 800124c:	4618      	mov	r0, r3
 800124e:	f01a fe6c 	bl	801bf2a <HAL_NVIC_EnableIRQ>

    // Initialize the data buffers
    std::fill(std::begin(ptrTxData->txBuffer), std::end(ptrTxData->txBuffer), 0);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fec6 	bl	8001fe8 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 800125c:	4604      	mov	r4, r0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fecb 	bl	8001ffe <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001268:	4601      	mov	r1, r0
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	461a      	mov	r2, r3
 8001274:	4620      	mov	r0, r4
 8001276:	f000 fece 	bl	8002016 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxData->rxBuffer), std::end(ptrRxData->rxBuffer), 0);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	4618      	mov	r0, r3
 8001280:	f000 feb2 	bl	8001fe8 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 8001284:	4604      	mov	r4, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128a:	4618      	mov	r0, r3
 800128c:	f000 feb7 	bl	8001ffe <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001290:	4601      	mov	r1, r0
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	461a      	mov	r2, r3
 800129c:	4620      	mov	r0, r4
 800129e:	f000 feba 	bl	8002016 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[0].rxBuffer), std::end(ptrRxDMABuffer->buffer[0].rxBuffer), 0);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fe9e 	bl	8001fe8 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012ac:	4604      	mov	r4, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fea3 	bl	8001ffe <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012b8:	4601      	mov	r1, r0
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c2:	461a      	mov	r2, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f000 fea6 	bl	8002016 <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[1].rxBuffer), std::end(ptrRxDMABuffer->buffer[1].rxBuffer), 0);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	3340      	adds	r3, #64	@ 0x40
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fe89 	bl	8001fe8 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012d6:	4604      	mov	r4, r0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012dc:	3340      	adds	r3, #64	@ 0x40
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fe8d 	bl	8001ffe <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012e4:	4601      	mov	r1, r0
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ee:	461a      	mov	r2, r3
 80012f0:	4620      	mov	r0, r4
 80012f2:	f000 fe90 	bl	8002016 <_ZSt4fillIPVhiEvT_S2_RKT0_>

    ptrTxData->header = Config::pruData;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fa:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <_ZN8SPIComms5startEv+0x1dc>)
 80012fc:	601a      	str	r2, [r3, #0]

    // Start the multi-buffer DMA SPI communication
    dmaStatus = startMultiBufferDMASPI(
        (uint8_t*)ptrTxData->txBuffer,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001302:	4619      	mov	r1, r3
        (uint8_t*)ptrTxData->txBuffer,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001308:	4618      	mov	r0, r3
        (uint8_t*)ptrRxDMABuffer->buffer[0].rxBuffer,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	461c      	mov	r4, r3
        (uint8_t*)ptrRxDMABuffer->buffer[1].rxBuffer,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	3340      	adds	r3, #64	@ 0x40
    dmaStatus = startMultiBufferDMASPI(
 8001316:	2240      	movs	r2, #64	@ 0x40
 8001318:	9201      	str	r2, [sp, #4]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4623      	mov	r3, r4
 800131e:	4602      	mov	r2, r0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f81b 	bl	800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
        Config::dataBuffSize
    );

    // Check for DMA initialization errors
    if (dmaStatus != HAL_OK) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <_ZN8SPIComms5startEv+0x1c8>
        printf("DMA SPI error\n");
 800133a:	4807      	ldr	r0, [pc, #28]	@ (8001358 <_ZN8SPIComms5startEv+0x1e0>)
 800133c:	f028 f8f6 	bl	802952c <puts>
    }
}
 8001340:	bf00      	nop
 8001342:	3734      	adds	r7, #52	@ 0x34
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	08001d7f 	.word	0x08001d7f
 800134c:	08001dd5 	.word	0x08001dd5
 8001350:	08001dad 	.word	0x08001dad
 8001354:	64617461 	.word	0x64617461
 8001358:	0802a2a4 	.word	0x0802a2a4

0800135c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>:

HAL_StatusTypeDef SPIComms::startMultiBufferDMASPI(uint8_t *pTxBuffer0, uint8_t *pTxBuffer1,
                                                   uint8_t *pRxBuffer0, uint8_t *pRxBuffer1,
                                                   uint16_t Size)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b087      	sub	sp, #28
 8001360:	af02      	add	r7, sp, #8
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES(spiHandle.Init.Direction));

    if (spiHandle.State != HAL_SPI_STATE_READY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b01      	cmp	r3, #1
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x28>
    {
        return HAL_BUSY;
 8001380:	2302      	movs	r3, #2
 8001382:	e13e      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    if ((pTxBuffer0 == NULL) || (pRxBuffer0 == NULL) || (Size == 0UL))
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 8001390:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3e>
    {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e133      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* If secondary Tx or Rx buffer is not provided, use the primary buffer */
    if (pTxBuffer1 == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x48>
    {
        pTxBuffer1 = pTxBuffer0;
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	607b      	str	r3, [r7, #4]
    }

    if (pRxBuffer1 == NULL)
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x52>
    {
        pRxBuffer1 = pRxBuffer0;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	623b      	str	r3, [r7, #32]
    }

    /* Lock the process */
    __HAL_LOCK(&spiHandle);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x60>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e122      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    /* Set the transaction information */
    spiHandle.State       = HAL_SPI_STATE_BUSY_TX_RX;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2205      	movs	r2, #5
 80013c8:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
    spiHandle.ErrorCode   = HAL_SPI_ERROR_NONE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    spiHandle.TxXferSize  = Size;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013d8:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    spiHandle.TxXferCount = Size;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e0:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
    spiHandle.RxXferSize  = Size;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e8:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
    spiHandle.RxXferCount = Size;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013f0:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba

    /* Init unused fields in handle to zero */
    spiHandle.RxISR       = NULL;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    spiHandle.TxISR       = NULL;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    /* Set Full-Duplex mode */
    SPI_2LINES(&spiHandle);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800140e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8001412:	60da      	str	r2, [r3, #12]

    /* Reset the Tx/Rx DMA bits */
    CLEAR_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800141e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001422:	609a      	str	r2, [r3, #8]

    /* Adjust XferCount according to DMA alignment / Data size */
    if (spiHandle.Init.DataSize <= SPI_DATASIZE_8BIT)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	2b07      	cmp	r3, #7
 800142a:	d820      	bhi.n	800146e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x112>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001436:	d109      	bne.n	800144c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0xf0>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 800143e:	b29b      	uxth	r3, r3
 8001440:	3301      	adds	r3, #1
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001456:	d12e      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800145e:	b29b      	uxth	r3, r3
 8001460:	3301      	adds	r3, #1
 8001462:	085b      	lsrs	r3, r3, #1
 8001464:	b29a      	uxth	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
 800146c:	e023      	b.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        }
    }
    else if (spiHandle.Init.DataSize <= SPI_DATASIZE_16BIT)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001472:	2b0f      	cmp	r3, #15
 8001474:	d81f      	bhi.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800147c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001480:	d109      	bne.n	8001496 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x13a>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8001488:	b29b      	uxth	r3, r3
 800148a:	3301      	adds	r3, #1
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 800149c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014a0:	d109      	bne.n	80014b6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        }
    }

    /* Configure Tx DMA with Multi-Buffer */
    hdma_spi_tx.XferHalfCpltCallback = NULL;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    hdma_spi_tx.XferCpltCallback     = NULL;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    hdma_spi_tx.XferErrorCallback    = NULL;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 80014d4:	68b9      	ldr	r1, [r7, #8]
                                                (uint32_t)pTxBuffer0,
                                                (uint32_t)&spiHandle.Instance->TXDR,
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014da:	3320      	adds	r3, #32
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014dc:	461c      	mov	r4, r3
 80014de:	687a      	ldr	r2, [r7, #4]
                                                (uint32_t)pTxBuffer1,
                                                spiHandle.TxXferCount))
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80014e6:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4613      	mov	r3, r2
 80014ec:	4622      	mov	r2, r4
 80014ee:	f01c fcdf 	bl	801deb0 <HAL_DMAEx_MultiBufferStart_IT>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bf14      	ite	ne
 80014f8:	2301      	movne	r3, #1
 80014fa:	2300      	moveq	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x1b2>
    {
        __HAL_UNLOCK(&spiHandle);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e079      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure Rx DMA with Multi-Buffer */
    hdma_spi_rx.XferHalfCpltCallback = NULL;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    hdma_spi_rx.XferCpltCallback     = NULL;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    hdma_spi_rx.XferErrorCallback    = NULL;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f503 70a8 	add.w	r0, r3, #336	@ 0x150
                                                (uint32_t)&spiHandle.Instance->RXDR,
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001530:	3330      	adds	r3, #48	@ 0x30
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001532:	461c      	mov	r4, r3
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	6a39      	ldr	r1, [r7, #32]
                                                (uint32_t)pRxBuffer0,
                                                (uint32_t)pRxBuffer1,
                                                spiHandle.RxXferCount))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800153e:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	460b      	mov	r3, r1
 8001544:	4621      	mov	r1, r4
 8001546:	f01c fcb3 	bl	801deb0 <HAL_DMAEx_MultiBufferStart_IT>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00a      	beq.n	8001570 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x214>
    {
        (void)HAL_DMA_Abort(&hdma_spi_tx);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	33d8      	adds	r3, #216	@ 0xd8
 800155e:	4618      	mov	r0, r3
 8001560:	f01b f9f6 	bl	801c950 <HAL_DMA_Abort>
        __HAL_UNLOCK(&spiHandle);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e048      	b.n	8001602 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure SPI TSIZE for full transfer or circular mode */
    if (hdma_spi_rx.Init.Mode == DMA_CIRCULAR || hdma_spi_tx.Init.Mode == DMA_CIRCULAR)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8001576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800157a:	d005      	beq.n	8001588 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x22c>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001586:	d108      	bne.n	800159a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x23e>
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800158c:	6859      	ldr	r1, [r3, #4]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 8001594:	400b      	ands	r3, r1
 8001596:	6053      	str	r3, [r2, #4]
 8001598:	e009      	b.n	80015ae <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x252>
    }
    else
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, Size);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015aa:	430b      	orrs	r3, r1
 80015ac:	6053      	str	r3, [r2, #4]
    }

    /* Enable Tx and Rx DMA Requests */
    SET_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80015bc:	609a      	str	r2, [r3, #8]

    /* Enable SPI error interrupt */
    __HAL_SPI_ENABLE_IT(&spiHandle, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c8:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80015cc:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&spiHandle);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

    if (spiHandle.Init.Mode == SPI_MODE_MASTER)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015e6:	d107      	bne.n	80015f8 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x29c>
    {
        SET_BIT(spiHandle.Instance->CR1, SPI_CR1_CSTART);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015f6:	601a      	str	r2, [r3, #0]
    }

    __HAL_UNLOCK(&spiHandle);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
 800160a:	bf00      	nop
 800160c:	ffff0000 	.word	0xffff0000

08001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>:

int SPIComms::DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr_dma;
  int interrupt;

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	613b      	str	r3, [r7, #16]

  tmpisr_dma  = regs_dma->ISR;
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5a      	ldr	r2, [pc, #360]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d04a      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a58      	ldr	r2, [pc, #352]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d045      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a57      	ldr	r2, [pc, #348]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d040      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a55      	ldr	r2, [pc, #340]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d03b      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a54      	ldr	r2, [pc, #336]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d036      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a52      	ldr	r2, [pc, #328]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d031      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a51      	ldr	r2, [pc, #324]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d02c      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a4f      	ldr	r2, [pc, #316]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d027      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a4e      	ldr	r2, [pc, #312]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4c      	ldr	r2, [pc, #304]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01d      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4b      	ldr	r2, [pc, #300]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d018      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a49      	ldr	r2, [pc, #292]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a48      	ldr	r2, [pc, #288]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00e      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a46      	ldr	r2, [pc, #280]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d009      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a45      	ldr	r2, [pc, #276]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d004      	beq.n	80016c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a43      	ldr	r2, [pc, #268]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d101      	bne.n	80016ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xba>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xbc>
 80016ca:	2300      	movs	r3, #0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 8338 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	2208      	movs	r2, #8
 80016dc:	409a      	lsls	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 809a 	beq.w	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a29      	ldr	r2, [pc, #164]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d04a      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d045      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a26      	ldr	r2, [pc, #152]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d040      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a25      	ldr	r2, [pc, #148]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d03b      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d036      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d031      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a20      	ldr	r2, [pc, #128]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d02c      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1f      	ldr	r2, [pc, #124]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d027      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d022      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a1c      	ldr	r2, [pc, #112]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d01d      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1a      	ldr	r2, [pc, #104]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d018      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d013      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00e      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	@ (80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d009      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a14      	ldr	r2, [pc, #80]	@ (80017cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d004      	beq.n	8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d125      	bne.n	80017d4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	e024      	b.n	80017de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ce>
 8001794:	40020010 	.word	0x40020010
 8001798:	40020028 	.word	0x40020028
 800179c:	40020040 	.word	0x40020040
 80017a0:	40020058 	.word	0x40020058
 80017a4:	40020070 	.word	0x40020070
 80017a8:	40020088 	.word	0x40020088
 80017ac:	400200a0 	.word	0x400200a0
 80017b0:	400200b8 	.word	0x400200b8
 80017b4:	40020410 	.word	0x40020410
 80017b8:	40020428 	.word	0x40020428
 80017bc:	40020440 	.word	0x40020440
 80017c0:	40020458 	.word	0x40020458
 80017c4:	40020470 	.word	0x40020470
 80017c8:	40020488 	.word	0x40020488
 80017cc:	400204a0 	.word	0x400204a0
 80017d0:	400204b8 	.word	0x400204b8
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	bf14      	ite	ne
 80017e2:	2301      	movne	r3, #1
 80017e4:	2300      	moveq	r3, #0
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d017      	beq.n	800181c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	2208      	movs	r2, #8
 8001806:	409a      	lsls	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001818:	2303      	movs	r3, #3
 800181a:	617b      	str	r3, [r7, #20]
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d070      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a68      	ldr	r2, [pc, #416]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04a      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a66      	ldr	r2, [pc, #408]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d045      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a65      	ldr	r2, [pc, #404]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d040      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a63      	ldr	r2, [pc, #396]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d03b      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a62      	ldr	r2, [pc, #392]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d036      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a60      	ldr	r2, [pc, #384]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d031      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5f      	ldr	r2, [pc, #380]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d02c      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5d      	ldr	r2, [pc, #372]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d027      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a5c      	ldr	r2, [pc, #368]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d022      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5a      	ldr	r2, [pc, #360]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01d      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a59      	ldr	r2, [pc, #356]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d018      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a57      	ldr	r2, [pc, #348]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00e      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a54      	ldr	r2, [pc, #336]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d009      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a53      	ldr	r2, [pc, #332]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a51      	ldr	r2, [pc, #324]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d105      	bne.n	80018de <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2ce>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018dc:	e003      	b.n	80018e6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2d6>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00f      	beq.n	8001914 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2201      	movs	r2, #1
 80018fe:	409a      	lsls	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001908:	f043 0202 	orr.w	r2, r3, #2
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001910:	2303      	movs	r3, #3
 8001912:	617b      	str	r3, [r7, #20]
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	2204      	movs	r2, #4
 800191e:	409a      	lsls	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8092 	beq.w	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2a      	ldr	r2, [pc, #168]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d04a      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a28      	ldr	r2, [pc, #160]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d045      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a27      	ldr	r2, [pc, #156]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d040      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a25      	ldr	r2, [pc, #148]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d03b      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a24      	ldr	r2, [pc, #144]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d036      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a22      	ldr	r2, [pc, #136]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a21      	ldr	r2, [pc, #132]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d02c      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1f      	ldr	r2, [pc, #124]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d027      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d022      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01d      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1b      	ldr	r2, [pc, #108]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d018      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a18      	ldr	r2, [pc, #96]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00e      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d009      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a15      	ldr	r2, [pc, #84]	@ (8001a10 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d004      	beq.n	80019ca <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a13      	ldr	r2, [pc, #76]	@ (8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d126      	bne.n	8001a18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	e024      	b.n	8001a20 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>
 80019d6:	bf00      	nop
 80019d8:	40020010 	.word	0x40020010
 80019dc:	40020028 	.word	0x40020028
 80019e0:	40020040 	.word	0x40020040
 80019e4:	40020058 	.word	0x40020058
 80019e8:	40020070 	.word	0x40020070
 80019ec:	40020088 	.word	0x40020088
 80019f0:	400200a0 	.word	0x400200a0
 80019f4:	400200b8 	.word	0x400200b8
 80019f8:	40020410 	.word	0x40020410
 80019fc:	40020428 	.word	0x40020428
 8001a00:	40020440 	.word	0x40020440
 8001a04:	40020458 	.word	0x40020458
 8001a08:	40020470 	.word	0x40020470
 8001a0c:	40020488 	.word	0x40020488
 8001a10:	400204a0 	.word	0x400204a0
 8001a14:	400204b8 	.word	0x400204b8
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf14      	ite	ne
 8001a24:	2301      	movne	r3, #1
 8001a26:	2300      	moveq	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00f      	beq.n	8001a4e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2204      	movs	r2, #4
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a42:	f043 0204 	orr.w	r2, r3, #4
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	617b      	str	r3, [r7, #20]
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2210      	movs	r2, #16
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d07f      	beq.n	8001b62 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x552>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6f      	ldr	r2, [pc, #444]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d04a      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6d      	ldr	r2, [pc, #436]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d045      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d040      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6a      	ldr	r2, [pc, #424]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d03b      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a69      	ldr	r2, [pc, #420]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d036      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a67      	ldr	r2, [pc, #412]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d031      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a66      	ldr	r2, [pc, #408]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d02c      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a64      	ldr	r2, [pc, #400]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d027      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a63      	ldr	r2, [pc, #396]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a61      	ldr	r2, [pc, #388]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01d      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a60      	ldr	r2, [pc, #384]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d018      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a5e      	ldr	r2, [pc, #376]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a5d      	ldr	r2, [pc, #372]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00e      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a5b      	ldr	r2, [pc, #364]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a58      	ldr	r2, [pc, #352]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d105      	bne.n	8001b0e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4fe>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	e004      	b.n	8001b18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x508>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01b      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2210      	movs	r2, #16
 8001b30:	409a      	lsls	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	609a      	str	r2, [r3, #8]

        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf0c      	ite	eq
 8001b44:	2301      	moveq	r3, #1
 8001b46:	2300      	movne	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
        {
          /* Disable the half transfer interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0208 	bic.w	r2, r2, #8
 8001b5c:	601a      	str	r2, [r3, #0]
        }

      }
      interrupt = DMA_HALF_TRANSFER;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80e5 	beq.w	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a29      	ldr	r2, [pc, #164]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d04a      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a28      	ldr	r2, [pc, #160]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d045      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a26      	ldr	r2, [pc, #152]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d040      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a25      	ldr	r2, [pc, #148]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d03b      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d036      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a22      	ldr	r2, [pc, #136]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d031      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a20      	ldr	r2, [pc, #128]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d02c      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d027      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d022      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d01d      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d018      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a19      	ldr	r2, [pc, #100]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00e      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d009      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d125      	bne.n	8001c64 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x654>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	e024      	b.n	8001c6e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65e>
 8001c24:	40020010 	.word	0x40020010
 8001c28:	40020028 	.word	0x40020028
 8001c2c:	40020040 	.word	0x40020040
 8001c30:	40020058 	.word	0x40020058
 8001c34:	40020070 	.word	0x40020070
 8001c38:	40020088 	.word	0x40020088
 8001c3c:	400200a0 	.word	0x400200a0
 8001c40:	400200b8 	.word	0x400200b8
 8001c44:	40020410 	.word	0x40020410
 8001c48:	40020428 	.word	0x40020428
 8001c4c:	40020440 	.word	0x40020440
 8001c50:	40020458 	.word	0x40020458
 8001c54:	40020470 	.word	0x40020470
 8001c58:	40020488 	.word	0x40020488
 8001c5c:	400204a0 	.word	0x400204a0
 8001c60:	400204b8 	.word	0x400204b8
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	2300      	moveq	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d062      	beq.n	8001d42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2220      	movs	r2, #32
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d031      	beq.n	8001d06 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6f6>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0216 	bic.w	r2, r2, #22
 8001cb0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6c2>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6d2>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	223f      	movs	r2, #63	@ 0x3f
 8001cec:	409a      	lsls	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          interrupt = DMA_TRANSFER_COMPLETE;
 8001d02:	2302      	movs	r3, #2
 8001d04:	617b      	str	r3, [r7, #20]
        }

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00f      	beq.n	8001d3e <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x72e>
        {
          /* Disable the transfer complete interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0210 	bic.w	r2, r2, #16
 8001d2c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }
        interrupt =  2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return interrupt;
 8001d42:	697b      	ldr	r3, [r7, #20]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>:

int SPIComms::getActiveDMAmemory(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    DMA_Stream_TypeDef *dmaStream = (DMA_Stream_TypeDef *)hdma->Instance;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]

    return (dmaStream->CR & DMA_SxCR_CT) ? 1 : 0;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x20>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x22>
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <_ZN8SPIComms18handleNssInterruptEv>:

void SPIComms::handleNssInterrupt()
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	// SPI packet has been fully received
	// Flag the copy the RX buffer if new WRITE data has been received
	// DMA copy is performed during the servo thread update
	if (newWriteData)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <_ZN8SPIComms18handleNssInterruptEv+0x22>
	{
		copyRXbuffer = true;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		newWriteData = false;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
	}
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_ZN8SPIComms17handleTxInterruptEv>:

void SPIComms::handleTxInterrupt()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	DMA_IRQHandler(&hdma_spi_tx);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	33d8      	adds	r3, #216	@ 0xd8
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff fc28 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
	HAL_NVIC_EnableIRQ(irqDMAtx);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f01a f8af 	bl	801bf2a <HAL_NVIC_EnableIRQ>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_ZN8SPIComms17handleRxInterruptEv>:

void SPIComms::handleRxInterrupt()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    // Handle the interrupt and determine the type of interrupt
    interruptType = DMA_IRQHandler(&hdma_spi_rx);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fc13 	bl	8001610 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241

    RxDMAmemoryIdx = getActiveDMAmemory(&hdma_spi_rx);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ffa7 	bl	8001d50 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if (interruptType == DMA_HALF_TRANSFER) // Use the HTC interrupt to check the packet being received
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d12d      	bne.n	8001e72 <_ZN8SPIComms17handleRxInterruptEv+0x9e>
    {
        switch (ptrRxDMABuffer->buffer[RxDMAmemoryIdx].header)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	4413      	add	r3, r2
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <_ZN8SPIComms17handleRxInterruptEv+0xc4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <_ZN8SPIComms17handleRxInterruptEv+0x60>
 8001e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e9c <_ZN8SPIComms17handleRxInterruptEv+0xc8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <_ZN8SPIComms17handleRxInterruptEv+0x6e>
 8001e32:	e017      	b.n	8001e64 <_ZN8SPIComms17handleRxInterruptEv+0x90>
        {
            case Config::pruRead:
                // No action needed for PRU_READ.
            	dataCallback(true);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3318      	adds	r3, #24
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f8fa 	bl	8002034 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e40:	e01f      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            case Config::pruWrite:
            	// Valid PRU_WRITE header, flag RX data transfer.
            	dataCallback(true);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3318      	adds	r3, #24
 8001e46:	2101      	movs	r1, #1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f8f3 	bl	8002034 <_ZNKSt8functionIFvbEEclEb>
            	newWriteData = true;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
                RXbufferIdx = RxDMAmemoryIdx;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                break;
 8001e62:	e00e      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            default:
            	dataCallback(false);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3318      	adds	r3, #24
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f8e2 	bl	8002034 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e70:	e007      	b.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
        }
    }
    else if (interruptType == DMA_TRANSFER_COMPLETE) // Transfer complete interrupt
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d002      	beq.n	8001e82 <_ZN8SPIComms17handleRxInterruptEv+0xae>
    {
        // Placeholder for transfer complete handling if needed in the future.
    }
    else // Other interrupt sources
    {
        printf("DMA SPI Rx error\n");
 8001e7c:	4808      	ldr	r0, [pc, #32]	@ (8001ea0 <_ZN8SPIComms17handleRxInterruptEv+0xcc>)
 8001e7e:	f027 fb55 	bl	802952c <puts>
    }

    HAL_NVIC_EnableIRQ(irqDMArx);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f01a f84e 	bl	801bf2a <HAL_NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	72656164 	.word	0x72656164
 8001e9c:	77726974 	.word	0x77726974
 8001ea0:	0802a2b4 	.word	0x0802a2b4

08001ea4 <_ZN8SPIComms5tasksEv>:

void SPIComms::tasks() {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

	if (copyRXbuffer == true)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d138      	bne.n	8001f28 <_ZN8SPIComms5tasksEv+0x84>
    {
	    uint8_t* srcBuffer = (uint8_t*)ptrRxDMABuffer->buffer[RXbufferIdx].rxBuffer;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ec0:	019b      	lsls	r3, r3, #6
 8001ec2:	4413      	add	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
	    uint8_t* destBuffer = (uint8_t*)ptrRxData->rxBuffer;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eca:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop

	    __disable_irq();

	    dmaStatus = HAL_DMA_Start(
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 70e4 	add.w	r0, r3, #456	@ 0x1c8
 8001ed6:	68f9      	ldr	r1, [r7, #12]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	2340      	movs	r3, #64	@ 0x40
 8001edc:	f01a fc18 	bl	801c710 <HAL_DMA_Start>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
									(uint32_t)srcBuffer,
									(uint32_t)destBuffer,
									Config::dataBuffSize
	    							);

	    if (dmaStatus == HAL_OK) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10d      	bne.n	8001f10 <_ZN8SPIComms5tasksEv+0x6c>
	        dmaStatus = HAL_DMA_PollForTransfer(&hdma_memtomem, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001efa:	f04f 32ff 	mov.w	r2, #4294967295
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f01b f843 	bl	801cf8c <HAL_DMA_PollForTransfer>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
  __ASM volatile ("cpsie i" : : : "memory");
 8001f10:	b662      	cpsie	i
}
 8001f12:	bf00      	nop
	    }

	    __enable_irq();
	    HAL_DMA_Abort(&hdma_memtomem);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f01a fd18 	bl	801c950 <HAL_DMA_Abort>
		copyRXbuffer = false;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_ZN9InterruptC1Ev>:
class Interrupt {
protected:
    static Interrupt* ISRVectorTable[];

public:
    Interrupt() = default;
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <_ZN9InterruptC1Ev+0x1c>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	0802b1e8 	.word	0x0802b1e8

08001f50 <_ZN9InterruptD1Ev>:
    virtual ~Interrupt() = default;
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	4a04      	ldr	r2, [pc, #16]	@ (8001f6c <_ZN9InterruptD1Ev+0x1c>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	0802b1e8 	.word	0x0802b1e8

08001f70 <_ZN9InterruptD0Ev>:
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ffe9 	bl	8001f50 <_ZN9InterruptD1Ev>
 8001f7e:	2104      	movs	r1, #4
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f026 fba8 	bl	80286d6 <_ZdlPvj>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>:
private:
	DerivedModule* InterruptOwnerPtr;                                // Pointer to the owning module
	void (DerivedModule::*InterruptHandler)();                       // Member function pointer for the ISR
	
public:
    ModuleInterrupt(IRQn_Type interruptNumber, DerivedModule* ownerPtr, void (DerivedModule::*handler)())
 8001f90:	b082      	sub	sp, #8
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	817b      	strh	r3, [r7, #10]
        : InterruptOwnerPtr(ownerPtr), InterruptHandler(handler)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ffc3 	bl	8001f30 <_ZN9InterruptC1Ev>
 8001faa:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe4 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE+0x54>)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	3308      	adds	r3, #8
 8001fba:	f107 021c 	add.w	r2, r7, #28
 8001fbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fc2:	e883 0003 	stmia.w	r3, {r0, r1}
    {
        // Register the interrupt
        Interrupt::Register(interruptNumber, this);
 8001fc6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 f85e 	bl	8005090 <_ZN9Interrupt8RegisterEmPS_>
    }
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fe0:	b002      	add	sp, #8
 8001fe2:	4770      	bx	lr
 8001fe4:	0802b1a4 	.word	0x0802b1a4

08001fe8 <_ZSt5beginIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
    { return __arr; }
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <_ZSt3endIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3340      	adds	r3, #64	@ 0x40
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <_ZSt4fillIPVhiEvT_S2_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f82d 	bl	8002086 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>
    }
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_ZNKSt8functionIFvbEEclEb>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fe43 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <_ZNKSt8functionIFvbEEclEb+0x1e>
	  __throw_bad_function_call();
 800204e:	f026 fb7c 	bl	802874a <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68dc      	ldr	r4, [r3, #12]
 8002056:	687d      	ldr	r5, [r7, #4]
 8002058:	1cfb      	adds	r3, r7, #3
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f808 	bl	8002070 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8002060:	4603      	mov	r3, r0
 8002062:	4619      	mov	r1, r3
 8002064:	4628      	mov	r0, r5
 8002066:	47a0      	blx	r4
 8002068:	bf00      	nop
      }
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bdb0      	pop	{r4, r5, r7, pc}

08002070 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f804 	bl	80020a4 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 80020b6:	e006      	b.n	80020c6 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x22>
	*__first = __tmp;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3301      	adds	r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d1f4      	bne.n	80020b8 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x14>
    }
 80020ce:	bf00      	nop
 80020d0:	bf00      	nop
 80020d2:	371c      	adds	r7, #28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_ZN15ModuleInterruptI8SPICommsED1Ev>:
class ModuleInterrupt : public Interrupt
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	4a05      	ldr	r2, [pc, #20]	@ (80020fc <_ZN15ModuleInterruptI8SPICommsED1Ev+0x20>)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff2f 	bl	8001f50 <_ZN9InterruptD1Ev>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	0802b1a4 	.word	0x0802b1a4

08002100 <_ZN15ModuleInterruptI8SPICommsED0Ev>:
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ffe7 	bl	80020dc <_ZN15ModuleInterruptI8SPICommsED1Ev>
 800210e:	2110      	movs	r1, #16
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f026 fae0 	bl	80286d6 <_ZdlPvj>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_Z41__static_initialization_and_destruction_0ii>:
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d107      	bne.n	8002140 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002136:	4293      	cmp	r3, r2
 8002138:	d102      	bne.n	8002140 <_Z41__static_initialization_and_destruction_0ii+0x20>
__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;
 800213a:	4803      	ldr	r0, [pc, #12]	@ (8002148 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800213c:	f7fe fdf4 	bl	8000d28 <_ZN14DMA_RxBuffer_tC1Ev>
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	30000000 	.word	0x30000000

0800214c <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv>:

    void ISR_Handler(void) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
        if (this->InterruptOwnerPtr && this->InterruptHandler) {
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d02a      	beq.n	80021b2 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d107      	bne.n	8002174 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 8002170:	2301      	movs	r3, #1
 8002172:	e000      	b.n	8002176 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x2a>
 8002174:	2300      	movs	r3, #0
 8002176:	2b01      	cmp	r3, #1
 8002178:	d01b      	beq.n	80021b2 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
            (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x40>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	e00a      	b.n	80021a2 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x56>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68d2      	ldr	r2, [r2, #12]
 8002194:	1052      	asrs	r2, r2, #1
 8002196:	4413      	add	r3, r2
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6892      	ldr	r2, [r2, #8]
 800219e:	4413      	add	r3, r2
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6852      	ldr	r2, [r2, #4]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	68c9      	ldr	r1, [r1, #12]
 80021aa:	1049      	asrs	r1, r1, #1
 80021ac:	440a      	add	r2, r1
 80021ae:	4610      	mov	r0, r2
 80021b0:	4798      	blx	r3
        }
    }
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <_GLOBAL__sub_I_rxDMABuffer>:
 80021ba:	b580      	push	{r7, lr}
 80021bc:	af00      	add	r7, sp, #0
 80021be:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80021c2:	2001      	movs	r0, #1
 80021c4:	f7ff ffac 	bl	8002120 <_Z41__static_initialization_and_destruction_0ii>
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <_ZN14CommsInterfaceC1Ev>:
#include "commsInterface.h"

CommsInterface::CommsInterface() {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f00f fe7c 	bl	8011ed4 <_ZN6ModuleC1Ev>
 80021dc:	4a06      	ldr	r2, [pc, #24]	@ (80021f8 <_ZN14CommsInterfaceC1Ev+0x2c>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3318      	adds	r3, #24
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f839 	bl	800225e <_ZNSt8functionIFvbEEC1Ev>
    // Constructor implementation
}
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	0802b1fc 	.word	0x0802b1fc

080021fc <_ZN14CommsInterface4initEv>:

void CommsInterface::init(){}
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <_ZN14CommsInterface5startEv>:
void CommsInterface::start(){}
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <_ZN14CommsInterface5tasksEv>:
void CommsInterface::tasks(){}
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	461a      	mov	r2, r3
 8002244:	2300      	movs	r3, #0
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	6053      	str	r3, [r2, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	461a      	mov	r2, r3
 800226a:	2300      	movs	r3, #0
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	6053      	str	r3, [r2, #4]
 8002270:	6093      	str	r3, [r2, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ffdf 	bl	8002238 <_ZNSt14_Function_baseC1Ev>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <_ZN11SoftwareSPI5delayEv>:
#include "SoftwareSPI.h"

void SoftwareSPI::delay() {
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < delayTicks; i++) {
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	e003      	b.n	80022a0 <_ZN11SoftwareSPI5delayEv+0x16>
        __asm volatile("nop");
 8002298:	bf00      	nop
    for (volatile uint32_t i = 0; i < delayTicks; i++) {
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3301      	adds	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	bf8c      	ite	hi
 80022ac:	2301      	movhi	r3, #1
 80022ae:	2300      	movls	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <_ZN11SoftwareSPI5delayEv+0xe>
    }
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <_ZN3PinD1Ev>:
#define OPENDRAIN   0b001
#define PULLUP      0b010
#define PULLDOWN    0b011
#define PULLNONE    0b100

class Pin {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f026 fb0d 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <_ZN11SoftwareSPIC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_S7_h8BitOrder9ByteOrder>:
      byteOrder(byteOrder) {
	setSPIMode(mode);
}

// Constructor WITH chip select
SoftwareSPI::SoftwareSPI(const std::string& mosiPin, const std::string& misoPin, const std::string& clkPin, const std::string& csPin,
 80022de:	b590      	push	{r4, r7, lr}
 80022e0:	b085      	sub	sp, #20
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	603b      	str	r3, [r7, #0]
		uint8_t mode = 0, BitOrder bitOrder, ByteOrder byteOrder)
    : mosi(mosiPin, OUTPUT),
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2201      	movs	r2, #1
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 fc5c 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
      miso(misoPin, INPUT, PULLUP),
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80022fe:	2302      	movs	r3, #2
 8002300:	2200      	movs	r2, #0
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	f002 fc7c 	bl	8004c00 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
      clk(clkPin, OUTPUT),
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	3380      	adds	r3, #128	@ 0x80
 800230c:	2201      	movs	r2, #1
 800230e:	6839      	ldr	r1, [r7, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f002 fc4d 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
      cs(new Pin(csPin, OUTPUT)), // Dynamically allocate CS pin
 8002316:	2040      	movs	r0, #64	@ 0x40
 8002318:	f026 f9ee 	bl	80286f8 <_Znwj>
 800231c:	4603      	mov	r3, r0
 800231e:	461c      	mov	r4, r3
 8002320:	2201      	movs	r2, #1
 8002322:	6a39      	ldr	r1, [r7, #32]
 8002324:	4620      	mov	r0, r4
 8002326:	f002 fc43 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f8c3 40c0 	str.w	r4, [r3, #192]	@ 0xc0
      delayTicks(2),
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2202      	movs	r2, #2
 8002334:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
      bitOrder(bitOrder),
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800233e:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
      byteOrder(byteOrder)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002348:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
{
	setSPIMode(mode);
 800234c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002350:	4619      	mov	r1, r3
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f838 	bl	80023c8 <_ZN11SoftwareSPI10setSPIModeEh>
	cs->set(true); // Set CS high (inactive state)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800235e:	2101      	movs	r1, #1
 8002360:	4618      	mov	r0, r3
 8002362:	f002 fdcf 	bl	8004f04 <_ZN3Pin3setEb>
}
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	bd90      	pop	{r4, r7, pc}

08002370 <_ZN11SoftwareSPI5beginEv>:
    if (cs) {
        delete cs; // Clean up CS pin if used
    }
}

void SoftwareSPI::begin() {
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
    mosi.setAsOutput();
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4618      	mov	r0, r3
 800237c:	f002 fdd9 	bl	8004f32 <_ZN3Pin11setAsOutputEv>
    miso.setAsInput();
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3340      	adds	r3, #64	@ 0x40
 8002384:	4618      	mov	r0, r3
 8002386:	f002 fde5 	bl	8004f54 <_ZN3Pin10setAsInputEv>
    clk.setAsOutput();
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3380      	adds	r3, #128	@ 0x80
 800238e:	4618      	mov	r0, r3
 8002390:	f002 fdcf 	bl	8004f32 <_ZN3Pin11setAsOutputEv>
    clk.set(cpol); // Set clock idle state
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 80023a0:	4619      	mov	r1, r3
 80023a2:	4610      	mov	r0, r2
 80023a4:	f002 fdae 	bl	8004f04 <_ZN3Pin3setEb>
    if (cs) cs->set(true); // Ensure CS starts high
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d006      	beq.n	80023c0 <_ZN11SoftwareSPI5beginEv+0x50>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80023b8:	2101      	movs	r1, #1
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 fda2 	bl	8004f04 <_ZN3Pin3setEb>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_ZN11SoftwareSPI10setSPIModeEh>:

void SoftwareSPI::setClockDivider(uint32_t div) {
    delayTicks = div;
}

void SoftwareSPI::setSPIMode(uint8_t mode) {
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	70fb      	strb	r3, [r7, #3]
    cpol = (mode & 0x02) != 0; // CPOL is bit 1
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	bf14      	ite	ne
 80023de:	2301      	movne	r3, #1
 80023e0:	2300      	moveq	r3, #0
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
    cpha = (mode & 0x01) != 0; // CPHA is bit 0
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf14      	ite	ne
 80023f4:	2301      	movne	r3, #1
 80023f6:	2300      	moveq	r3, #0
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_ZN11SoftwareSPI8transferEPhj>:

void SoftwareSPI::transfer(uint8_t* data, size_t length) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
    if (cs) cs->set(false); // Pull CS low to start transaction
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <_ZN11SoftwareSPI8transferEPhj+0x24>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f002 fd6a 	bl	8004f04 <_ZN3Pin3setEb>

    for (size_t byteIdx = 0; byteIdx < length; byteIdx++) {
 8002430:	2300      	movs	r3, #0
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	e0a6      	b.n	8002584 <_ZN11SoftwareSPI8transferEPhj+0x178>
        size_t index = (byteOrder == MSB_FIRST_BYTE) ? byteIdx : (length - 1 - byteIdx);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800243c:	2b00      	cmp	r3, #0
 800243e:	d004      	beq.n	800244a <_ZN11SoftwareSPI8transferEPhj+0x3e>
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	e000      	b.n	800244c <_ZN11SoftwareSPI8transferEPhj+0x40>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	617b      	str	r3, [r7, #20]
        uint8_t received = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	76fb      	strb	r3, [r7, #27]
        uint8_t byteToSend = data[index];
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	4413      	add	r3, r2
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	74fb      	strb	r3, [r7, #19]

        for (uint8_t i = 0; i < 8; i++) {
 800245c:	2300      	movs	r3, #0
 800245e:	76bb      	strb	r3, [r7, #26]
 8002460:	e07b      	b.n	800255a <_ZN11SoftwareSPI8transferEPhj+0x14e>
            uint8_t bitPos = (bitOrder == MSB_FIRST) ? (7 - i) : i;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 30cb 	ldrb.w	r3, [r3, #203]	@ 0xcb
 8002468:	2b00      	cmp	r3, #0
 800246a:	d104      	bne.n	8002476 <_ZN11SoftwareSPI8transferEPhj+0x6a>
 800246c:	7ebb      	ldrb	r3, [r7, #26]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	b2db      	uxtb	r3, r3
 8002474:	e000      	b.n	8002478 <_ZN11SoftwareSPI8transferEPhj+0x6c>
 8002476:	7ebb      	ldrb	r3, [r7, #26]
 8002478:	74bb      	strb	r3, [r7, #18]

            clk.set(!cpol); // Start clock low if CPOL=0, high if CPOL=1
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8002486:	f083 0301 	eor.w	r3, r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f002 fd38 	bl	8004f04 <_ZN3Pin3setEb>
            delay();
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f7ff fef8 	bl	800228a <_ZN11SoftwareSPI5delayEv>
            mosi.set((byteToSend & (1 << bitPos)) ? true : false); // Set data bit
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	7cfa      	ldrb	r2, [r7, #19]
 800249e:	7cbb      	ldrb	r3, [r7, #18]
 80024a0:	fa42 f303 	asr.w	r3, r2, r3
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	4619      	mov	r1, r3
 80024ac:	f002 fd2a 	bl	8004f04 <_ZN3Pin3setEb>

            clk.set(cpol); // Generate clock edge
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 80024bc:	4619      	mov	r1, r3
 80024be:	4610      	mov	r0, r2
 80024c0:	f002 fd20 	bl	8004f04 <_ZN3Pin3setEb>
            delay();
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff fee0 	bl	800228a <_ZN11SoftwareSPI5delayEv>

            if (cpha) { // Read on second clock edge if CPHA=1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 30ca 	ldrb.w	r3, [r3, #202]	@ 0xca
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <_ZN11SoftwareSPI8transferEPhj+0xf0>
                received |= (miso.get() ? 1 : 0) << bitPos;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3340      	adds	r3, #64	@ 0x40
 80024d8:	4618      	mov	r0, r3
 80024da:	f002 fcfd 	bl	8004ed8 <_ZNK3Pin3getEv>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <_ZN11SoftwareSPI8transferEPhj+0xdc>
 80024e4:	2201      	movs	r2, #1
 80024e6:	e000      	b.n	80024ea <_ZN11SoftwareSPI8transferEPhj+0xde>
 80024e8:	2200      	movs	r2, #0
 80024ea:	7cbb      	ldrb	r3, [r7, #18]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	b25a      	sxtb	r2, r3
 80024f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	b25b      	sxtb	r3, r3
 80024fa:	76fb      	strb	r3, [r7, #27]
            }
            clk.set(!cpol);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 8002508:	f083 0301 	eor.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	4619      	mov	r1, r3
 8002510:	4610      	mov	r0, r2
 8002512:	f002 fcf7 	bl	8004f04 <_ZN3Pin3setEb>
            delay();
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f7ff feb7 	bl	800228a <_ZN11SoftwareSPI5delayEv>

            if (!cpha) { // Read on first clock edge if CPHA=0
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 30ca 	ldrb.w	r3, [r3, #202]	@ 0xca
 8002522:	f083 0301 	eor.w	r3, r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d013      	beq.n	8002554 <_ZN11SoftwareSPI8transferEPhj+0x148>
                received |= (miso.get() ? 1 : 0) << bitPos;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3340      	adds	r3, #64	@ 0x40
 8002530:	4618      	mov	r0, r3
 8002532:	f002 fcd1 	bl	8004ed8 <_ZNK3Pin3getEv>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <_ZN11SoftwareSPI8transferEPhj+0x134>
 800253c:	2201      	movs	r2, #1
 800253e:	e000      	b.n	8002542 <_ZN11SoftwareSPI8transferEPhj+0x136>
 8002540:	2200      	movs	r2, #0
 8002542:	7cbb      	ldrb	r3, [r7, #18]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	b25a      	sxtb	r2, r3
 800254a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800254e:	4313      	orrs	r3, r2
 8002550:	b25b      	sxtb	r3, r3
 8002552:	76fb      	strb	r3, [r7, #27]
        for (uint8_t i = 0; i < 8; i++) {
 8002554:	7ebb      	ldrb	r3, [r7, #26]
 8002556:	3301      	adds	r3, #1
 8002558:	76bb      	strb	r3, [r7, #26]
 800255a:	7ebb      	ldrb	r3, [r7, #26]
 800255c:	2b07      	cmp	r3, #7
 800255e:	d980      	bls.n	8002462 <_ZN11SoftwareSPI8transferEPhj+0x56>
            }
        }
        clk.set(cpol);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 800256c:	4619      	mov	r1, r3
 800256e:	4610      	mov	r0, r2
 8002570:	f002 fcc8 	bl	8004f04 <_ZN3Pin3setEb>

        data[index] = received;
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	4413      	add	r3, r2
 800257a:	7efa      	ldrb	r2, [r7, #27]
 800257c:	701a      	strb	r2, [r3, #0]
    for (size_t byteIdx = 0; byteIdx < length; byteIdx++) {
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3301      	adds	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	f4ff af54 	bcc.w	8002436 <_ZN11SoftwareSPI8transferEPhj+0x2a>
    }

    if (cs) cs->set(true); // Pull CS high to end transaction
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d006      	beq.n	80025a6 <_ZN11SoftwareSPI8transferEPhj+0x19a>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800259e:	2101      	movs	r1, #1
 80025a0:	4618      	mov	r0, r3
 80025a2:	f002 fcaf 	bl	8004f04 <_ZN3Pin3setEb>
}
 80025a6:	bf00      	nop
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_ZN14SoftwareSerial4idleEv>:
    bool listen(void);
    void tickerHandler(void);

    void enableTx(void);
    void enableRx(void);
    void idle() {__NOP();}
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	bf00      	nop
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:
#include "SoftwareSerial.h"
#include <cstdint>



SoftwareSerial::SoftwareSerial(std::string tx, std::string rx)
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f026 f965 	bl	80288a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3318      	adds	r3, #24
 80025dc:	4618      	mov	r0, r3
 80025de:	f026 f960 	bl	80288a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
{
    if (!tx.empty()) TXportAndPin = tx;
 80025e2:	68b8      	ldr	r0, [r7, #8]
 80025e4:	f026 fa43 	bl	8028a6e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f083 0301 	eor.w	r3, r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x3a>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	68b9      	ldr	r1, [r7, #8]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f026 f9da 	bl	80289b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    if (!rx.empty()) RXportAndPin = rx;
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f026 fa35 	bl	8028a6e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>
 8002604:	4603      	mov	r3, r0
 8002606:	f083 0301 	eor.w	r3, r3, #1
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x58>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3318      	adds	r3, #24
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4618      	mov	r0, r3
 8002618:	f026 f9cb 	bl	80289b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
    halfDuplex = !TXportAndPin.compare(RXportAndPin);
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3318      	adds	r3, #24
 8002622:	4619      	mov	r1, r3
 8002624:	4610      	mov	r0, r2
 8002626:	f026 fb47 	bl	8028cb8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82

    if(halfDuplex)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8002642:	2b00      	cmp	r3, #0
 8002644:	d015      	beq.n	8002672 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xae>
    {
        this->rxpin = new Pin(RXportAndPin,1);
 8002646:	2040      	movs	r0, #64	@ 0x40
 8002648:	f026 f856 	bl	80286f8 <_Znwj>
 800264c:	4603      	mov	r3, r0
 800264e:	461c      	mov	r4, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3318      	adds	r3, #24
 8002654:	2201      	movs	r2, #1
 8002656:	4619      	mov	r1, r3
 8002658:	4620      	mov	r0, r4
 800265a:	f002 faa9 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	635c      	str	r4, [r3, #52]	@ 0x34
        this->txpin = this->rxpin;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	631a      	str	r2, [r3, #48]	@ 0x30
        setTX();
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f848 	bl	8002700 <_ZN14SoftwareSerial5setTXEv>
 8002670:	e020      	b.n	80026b4 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xf0>
    }
    else
    {
        this->txpin = new Pin(TXportAndPin,0);
 8002672:	2040      	movs	r0, #64	@ 0x40
 8002674:	f026 f840 	bl	80286f8 <_Znwj>
 8002678:	4603      	mov	r3, r0
 800267a:	461c      	mov	r4, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	4619      	mov	r1, r3
 8002682:	4620      	mov	r0, r4
 8002684:	f002 fa94 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	631c      	str	r4, [r3, #48]	@ 0x30
        setTX();
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 f837 	bl	8002700 <_ZN14SoftwareSerial5setTXEv>

        this->rxpin = new Pin(RXportAndPin,1);
 8002692:	2040      	movs	r0, #64	@ 0x40
 8002694:	f026 f830 	bl	80286f8 <_Znwj>
 8002698:	4603      	mov	r3, r0
 800269a:	461c      	mov	r4, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3318      	adds	r3, #24
 80026a0:	2201      	movs	r2, #1
 80026a2:	4619      	mov	r1, r3
 80026a4:	4620      	mov	r0, r4
 80026a6:	f002 fa83 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	635c      	str	r4, [r3, #52]	@ 0x34
        setRX();
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f839 	bl	8002726 <_ZN14SoftwareSerial5setRXEv>
    }
    
    qin = 0;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    qout = 0;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    activeTx = false;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    activeRx = false;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd90      	pop	{r4, r7, pc}

080026de <_ZN14SoftwareSerial5beginEi>:


void SoftwareSerial::begin(int baudrate)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]
    #ifdef FORCE_BAUD_RATE
    baudrate = FORCE_BAUD_RATE;     // 19200 fastest stable baud rate
 80026e8:	f644 4390 	movw	r3, #19600	@ 0x4c90
 80026ec:	603b      	str	r3, [r7, #0]
    #endif
    baudRate = baudrate;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	67da      	str	r2, [r3, #124]	@ 0x7c
    //ticker.attach_us(callback(this, &SoftwareSerial::tickerHandler), 1000000.0 / (baudRate * 3.0));
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <_ZN14SoftwareSerial5setTXEv>:
    //ticker.attach_us(callback(this, &SoftwareSerial::tickerHandler), 1000000.0 / (baudrate * 3.0));
    this->baudRate = baudrate;
}

void SoftwareSerial::setTX(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
    // the pin would be output low for a short while before switching to
    // output hihg. Now, it is input with pullup for a short while, which
    // is fine. With inverse logic, either order is fine.

    //this->txpin->set(1);                  // works for LPC1768 but not STM32
    this->txpin->setAsOutput();
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270c:	4618      	mov	r0, r3
 800270e:	f002 fc10 	bl	8004f32 <_ZN3Pin11setAsOutputEv>
    this->txpin->set(1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	2101      	movs	r1, #1
 8002718:	4618      	mov	r0, r3
 800271a:	f002 fbf3 	bl	8004f04 <_ZN3Pin3setEb>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <_ZN14SoftwareSerial5setRXEv>:

void SoftwareSerial::setRX(void)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]

    this->rxpin->setAsInput();
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002732:	4618      	mov	r0, r3
 8002734:	f002 fc0e 	bl	8004f54 <_ZN3Pin10setAsInputEv>
    this->rxpin->setPullUp();
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800273c:	4618      	mov	r0, r3
 800273e:	f002 fc1a 	bl	8004f76 <_ZN3Pin9setPullUpEv>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <_ZN14SoftwareSerial7setRXTXEb>:

void SoftwareSerial::setRXTX(bool input)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	70fb      	strb	r3, [r7, #3]
    if (halfDuplex)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01f      	beq.n	80027a0 <_ZN14SoftwareSerial7setRXTXEb+0x56>
    {
        if (input)
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d010      	beq.n	8002788 <_ZN14SoftwareSerial7setRXTXEb+0x3e>
        {
            setRX();
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffdd 	bl	8002726 <_ZN14SoftwareSerial5setRXEv>
            rxBitCnt = -1;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f04f 32ff 	mov.w	r2, #4294967295
 8002772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            rxTickCnt = 2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2202      	movs	r2, #2
 800277a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            activeRx = true;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
                setTX();
                activeRx = false;
            }
        }
    }
}
 8002786:	e00b      	b.n	80027a0 <_ZN14SoftwareSerial7setRXTXEb+0x56>
            if (activeRx)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800278e:	2b00      	cmp	r3, #0
 8002790:	d006      	beq.n	80027a0 <_ZN14SoftwareSerial7setRXTXEb+0x56>
                setTX();
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff ffb4 	bl	8002700 <_ZN14SoftwareSerial5setTXEv>
                activeRx = false;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_ZN14SoftwareSerial6listenEv>:

bool SoftwareSerial::listen()
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
    if (rxpin != nullptr)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <_ZN14SoftwareSerial6listenEv+0x1c>
    {
        setRXTX(true);
 80027b8:	2101      	movs	r1, #1
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ffc5 	bl	800274a <_ZN14SoftwareSerial7setRXTXEb>
        return true;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <_ZN14SoftwareSerial6listenEv+0x1e>
    }
    return false;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <_ZN14SoftwareSerial13tickerHandlerEv>:
{
    
}

void SoftwareSerial::tickerHandler(void)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
    if (activeTx) this->send();
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <_ZN14SoftwareSerial13tickerHandlerEv+0x18>
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f80c 	bl	80027fe <_ZN14SoftwareSerial4sendEv>
    if (activeRx) this->receive();
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <_ZN14SoftwareSerial13tickerHandlerEv+0x28>
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f867 	bl	80028c4 <_ZN14SoftwareSerial7receiveEv>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <_ZN14SoftwareSerial4sendEv>:

void SoftwareSerial::send(void)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
    if (--txTickCnt <= 0)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280c:	1e5a      	subs	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281a:	2b00      	cmp	r3, #0
 800281c:	bfd4      	ite	le
 800281e:	2301      	movle	r3, #1
 8002820:	2300      	movgt	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d049      	beq.n	80028bc <_ZN14SoftwareSerial4sendEv+0xbe>
    {
        if (txBitCnt++ < TX_BITS)   // count out the bits in the txBuffer
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800282e:	1c59      	adds	r1, r3, #1
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8002836:	2b09      	cmp	r3, #9
 8002838:	bfd4      	ite	le
 800283a:	2301      	movle	r3, #1
 800283c:	2300      	movgt	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01b      	beq.n	800287c <_ZN14SoftwareSerial4sendEv+0x7e>
        {
            this->txpin->set(txBuffer & 0x01);   // set output equal to the LSB in txBuffer
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf14      	ite	ne
 8002856:	2301      	movne	r3, #1
 8002858:	2300      	moveq	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	4619      	mov	r1, r3
 800285e:	4610      	mov	r0, r2
 8002860:	f002 fb50 	bl	8004f04 <_ZN3Pin3setEb>
            txBuffer >>= 1;                     // shift txBuffer to right
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800286a:	105a      	asrs	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            txTickCnt = Config::oversample;     // reset the tick counter
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2203      	movs	r2, #3
 8002876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                }
                activeTx = false;
            }
        }
    }
}
 800287a:	e01f      	b.n	80028bc <_ZN14SoftwareSerial4sendEv+0xbe>
            txTickCnt = 1;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
            if (outputPending)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 800288a:	2b00      	cmp	r3, #0
 800288c:	d004      	beq.n	8002898 <_ZN14SoftwareSerial4sendEv+0x9a>
                activeTx = false;    // output pending allow new byte to be written to txBuffer from write()
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8002896:	e011      	b.n	80028bc <_ZN14SoftwareSerial4sendEv+0xbe>
            else if (txBitCnt > 10 + Config::oversample*5)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800289e:	2b19      	cmp	r3, #25
 80028a0:	d90c      	bls.n	80028bc <_ZN14SoftwareSerial4sendEv+0xbe>
                if (halfDuplex)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <_ZN14SoftwareSerial4sendEv+0xb6>
                    setRXTX(true);        // switch to receive mode
 80028ac:	2101      	movs	r1, #1
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ff4b 	bl	800274a <_ZN14SoftwareSerial7setRXTXEb>
                activeTx = false;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <_ZN14SoftwareSerial7receiveEv>:

void SoftwareSerial::receive()
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
    if (--rxTickCnt <= 0)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028d2:	1e5a      	subs	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bfd4      	ite	le
 80028e4:	2301      	movle	r3, #1
 80028e6:	2300      	movgt	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d06f      	beq.n	80029ce <_ZN14SoftwareSerial7receiveEv+0x10a>
    {
        uint8_t inbit = this->rxpin->get();   // read the rx line
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 faf0 	bl	8004ed8 <_ZNK3Pin3getEv>
 80028f8:	4603      	mov	r3, r0
 80028fa:	73fb      	strb	r3, [r7, #15]
        if (rxBitCnt == -1)                 // waiting for start bit
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002906:	d114      	bne.n	8002932 <_ZN14SoftwareSerial7receiveEv+0x6e>
        {
            if (!inbit)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <_ZN14SoftwareSerial7receiveEv+0x64>
            {
                // got a start bit
                rxBitCnt = 0;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
                rxTickCnt = Config::oversample + 1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2204      	movs	r2, #4
 800291a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                rxBuffer = 0;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            if (inbit)  rxBuffer |= 0x80;
            rxBitCnt++;
            rxTickCnt = Config::oversample;
        }
    }
}
 8002926:	e052      	b.n	80029ce <_ZN14SoftwareSerial7receiveEv+0x10a>
                rxTickCnt = 1;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8002930:	e04d      	b.n	80029ce <_ZN14SoftwareSerial7receiveEv+0x10a>
        else if (rxBitCnt >= RX_BITS)     // full byte has been read
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002938:	2b07      	cmp	r3, #7
 800293a:	dd2b      	ble.n	8002994 <_ZN14SoftwareSerial7receiveEv+0xd0>
            inbuf[qin] = rxBuffer;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002948:	4619      	mov	r1, r3
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	440b      	add	r3, r1
 8002950:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
			if ( ++qin >= IN_BUF_SIZE )
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800295a:	3301      	adds	r3, #1
 800295c:	b2da      	uxtb	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800296a:	2b3f      	cmp	r3, #63	@ 0x3f
 800296c:	bf8c      	ite	hi
 800296e:	2301      	movhi	r3, #1
 8002970:	2300      	movls	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <_ZN14SoftwareSerial7receiveEv+0xbc>
				qin = 0;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            rxTickCnt = 1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            rxBitCnt = -1;              // flag waiting for start bit
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f04f 32ff 	mov.w	r2, #4294967295
 800298e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
}
 8002992:	e01c      	b.n	80029ce <_ZN14SoftwareSerial7receiveEv+0x10a>
            rxBuffer >>= 1;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800299a:	105a      	asrs	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            if (inbit)  rxBuffer |= 0x80;
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <_ZN14SoftwareSerial7receiveEv+0xf4>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            rxBitCnt++;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            rxTickCnt = Config::oversample;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2203      	movs	r2, #3
 80029ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <_ZN14SoftwareSerial9availableEv>:


int SoftwareSerial::available()
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
    return (qout - qin);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80029e4:	461a      	mov	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80029ec:	1ad3      	subs	r3, r2, r3
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <_ZN14SoftwareSerial5writeEi>:
    }
}


void SoftwareSerial::write(int b)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
    outputPending = true;               // notify ticker handler that there are more bytes to transmit after current
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    while (activeTx)                    // wait for current transmission to complete
 8002a0c:	e002      	b.n	8002a14 <_ZN14SoftwareSerial5writeEi+0x1a>
    {
        idle();
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fdcd 	bl	80025ae <_ZN14SoftwareSerial4idleEv>
    while (activeTx)                    // wait for current transmission to complete
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f7      	bne.n	8002a0e <_ZN14SoftwareSerial5writeEi+0x14>
    }
    txBuffer =      (b << 1) | 0x200;   // add start and stop bits
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    txBitCnt =      0;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    txTickCnt =     Config::oversample;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2203      	movs	r2, #3
 8002a38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    if (halfDuplex) setRXTX(false);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <_ZN14SoftwareSerial5writeEi+0x54>
 8002a46:	2100      	movs	r1, #0
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff fe7e 	bl	800274a <_ZN14SoftwareSerial7setRXTXEb>
    outputPending = false;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
    activeTx =      true;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <_ZN14SoftwareSerial4readEv>:

int16_t SoftwareSerial::read()
{
 8002a66:	b480      	push	{r7}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
    if (qout == qin) return -1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 2079 	ldrb.w	r2, [r3, #121]	@ 0x79
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d102      	bne.n	8002a84 <_ZN14SoftwareSerial4readEv+0x1e>
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a82:	e020      	b.n	8002ac6 <_ZN14SoftwareSerial4readEv+0x60>

    char d = inbuf[qout] & 0xFF;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a94:	73fb      	strb	r3, [r7, #15]

    if ( ++qout >= IN_BUF_SIZE ) {qout = 0;}
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8002aac:	2b3f      	cmp	r3, #63	@ 0x3f
 8002aae:	bf8c      	ite	hi
 8002ab0:	2301      	movhi	r3, #1
 8002ab2:	2300      	movls	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <_ZN14SoftwareSerial4readEv+0x5c>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    
    return d;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	b21b      	sxth	r3, r3
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <_ZN14TMC2130Stepper8CHOPCONFEv>:

#define SET_REG(SETTING) CHOPCONF_register.SETTING = B; write(CHOPCONF_register.address, CHOPCONF_register.sr)

// CHOPCONF

uint32_t TMC2130Stepper::CHOPCONF() {
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
    return read(CHOPCONF_register.address);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	216c      	movs	r1, #108	@ 0x6c
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	4798      	blx	r3
 8002ae8:	4603      	mov	r3, r0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <_ZN14TMC2130Stepper8CHOPCONFEm>:
void TMC2130Stepper::CHOPCONF(uint32_t input) {
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
    CHOPCONF_register.sr = input;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	f8c3 2025 	str.w	r2, [r3, #37]	@ 0x25
    write(CHOPCONF_register.address, CHOPCONF_register.sr);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002b10:	216c      	movs	r1, #108	@ 0x6c
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4798      	blx	r3
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <_ZN14TMC2130Stepper4toffEh>:

void TMC2130Stepper::toff(      uint8_t B ) { SET_REG(toff);    }
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	460b      	mov	r3, r1
 8002b28:	70fb      	strb	r3, [r7, #3]
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	b2d9      	uxtb	r1, r3
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8002b38:	f361 0303 	bfi	r3, r1, #0, #4
 8002b3c:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002b4c:	216c      	movs	r1, #108	@ 0x6c
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <_ZN14TMC2130Stepper5hstrtEh>:
void TMC2130Stepper::hstrt(     uint8_t B ) { SET_REG(hstrt);   }
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	460b      	mov	r3, r1
 8002b64:	70fb      	strb	r3, [r7, #3]
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	b2d9      	uxtb	r1, r3
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8002b74:	f361 1306 	bfi	r3, r1, #4, #3
 8002b78:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002b88:	216c      	movs	r1, #108	@ 0x6c
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	4798      	blx	r3
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <_ZN14TMC2130Stepper4hendEh>:
void TMC2130Stepper::hend(      uint8_t B ) { SET_REG(hend);    }
 8002b96:	b590      	push	{r4, r7, lr}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	70fb      	strb	r3, [r7, #3]
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f002 0101 	and.w	r1, r2, #1
 8002bb0:	01cc      	lsls	r4, r1, #7
 8002bb2:	f893 1025 	ldrb.w	r1, [r3, #37]	@ 0x25
 8002bb6:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002bba:	4608      	mov	r0, r1
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	4301      	orrs	r1, r0
 8002bc0:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
 8002bc4:	0852      	lsrs	r2, r2, #1
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	f002 0207 	and.w	r2, r2, #7
 8002bcc:	f002 0007 	and.w	r0, r2, #7
 8002bd0:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8002bd4:	f022 0207 	bic.w	r2, r2, #7
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4602      	mov	r2, r0
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002bee:	216c      	movs	r1, #108	@ 0x6c
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd90      	pop	{r4, r7, pc}

08002bfc <_ZN14TMC2130Stepper3tblEh>:
//void TMC2130Stepper::fd(      uint8_t B ) { SET_REG(fd);      }
void TMC2130Stepper::disfdcc(   bool    B ) { SET_REG(disfdcc); }
void TMC2130Stepper::rndtf(     bool    B ) { SET_REG(rndtf);   }
void TMC2130Stepper::chm(       bool    B ) { SET_REG(chm);     }
void TMC2130Stepper::tbl(       uint8_t B ) { SET_REG(tbl);     }
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	70fb      	strb	r3, [r7, #3]
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f002 0101 	and.w	r1, r2, #1
 8002c16:	01cc      	lsls	r4, r1, #7
 8002c18:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 8002c1c:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002c20:	4608      	mov	r0, r1
 8002c22:	4621      	mov	r1, r4
 8002c24:	4301      	orrs	r1, r0
 8002c26:	f883 1026 	strb.w	r1, [r3, #38]	@ 0x26
 8002c2a:	0852      	lsrs	r2, r2, #1
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	f002 0201 	and.w	r2, r2, #1
 8002c32:	f002 0001 	and.w	r0, r2, #1
 8002c36:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4602      	mov	r2, r0
 8002c42:	430a      	orrs	r2, r1
 8002c44:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002c54:	216c      	movs	r1, #108	@ 0x6c
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	4798      	blx	r3
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd90      	pop	{r4, r7, pc}

08002c62 <_ZN14TMC2130Stepper6vsenseEb>:
void TMC2130Stepper::vsense(    bool    B ) { SET_REG(vsense);  }
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	70fb      	strb	r3, [r7, #3]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	f892 3027 	ldrb.w	r3, [r2, #39]	@ 0x27
 8002c74:	78f9      	ldrb	r1, [r7, #3]
 8002c76:	f361 0341 	bfi	r3, r1, #1, #1
 8002c7a:	f882 3027 	strb.w	r3, [r2, #39]	@ 0x27
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002c8a:	216c      	movs	r1, #108	@ 0x6c
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4798      	blx	r3
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <_ZN14TMC2130Stepper4mresEh>:
void TMC2130Stepper::vhighfs(   bool    B ) { SET_REG(vhighfs); }
void TMC2130Stepper::vhighchm(  bool    B ) { SET_REG(vhighchm);}
void TMC2130Stepper::sync(      uint8_t B ) { SET_REG(sync);    }
void TMC2130Stepper::mres(      uint8_t B ) { SET_REG(mres);    }
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	70fb      	strb	r3, [r7, #3]
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	b2d9      	uxtb	r1, r3
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8002cb2:	f361 0303 	bfi	r3, r1, #0, #4
 8002cb6:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	f8d2 2025 	ldr.w	r2, [r2, #37]	@ 0x25
 8002cc6:	216c      	movs	r1, #108	@ 0x6c
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <_ZN14TMC2130Stepper5hstrtEv>:
void TMC2130Stepper::intpol(    bool    B ) { SET_REG(intpol);  }
void TMC2130Stepper::dedge(     bool    B ) { SET_REG(dedge);   }
void TMC2130Stepper::diss2g(    bool    B ) { SET_REG(diss2g);  }

uint8_t TMC2130Stepper::toff()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.toff;    }
uint8_t TMC2130Stepper::hstrt()     { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hstrt;   }
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff fef6 	bl	8002ad2 <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	7b3b      	ldrb	r3, [r7, #12]
 8002cec:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <_ZN14TMC2130Stepper4hendEv>:
uint8_t TMC2130Stepper::hend()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hend;    }
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff fee3 	bl	8002ad2 <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	89bb      	ldrh	r3, [r7, #12]
 8002d12:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_ZN14TMC2130Stepper3tblEv>:
//uint8_t TMC2130Stepper::fd()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.fd;      }
bool    TMC2130Stepper::disfdcc()   { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.disfdcc; }
bool    TMC2130Stepper::rndtf()     { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.rndtf;   }
bool    TMC2130Stepper::chm()       { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.chm;     }
uint8_t TMC2130Stepper::tbl()       { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.tbl;     }
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff fed0 	bl	8002ad2 <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002d32:	4603      	mov	r3, r0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f3c3 33c1 	ubfx	r3, r3, #15, #2
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <_ZN14TMC2130Stepper6vsenseEv>:
bool    TMC2130Stepper::vsense()    { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vsense;  }
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff febd 	bl	8002ad2 <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	7bbb      	ldrb	r3, [r7, #14]
 8002d5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <_ZN14TMC2130Stepper4mresEv>:
bool    TMC2130Stepper::vhighfs()   { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vhighfs; }
bool    TMC2130Stepper::vhighchm()  { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vhighchm;}
uint8_t TMC2130Stepper::sync()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.sync;    }
uint8_t TMC2130Stepper::mres()      { CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.mres;    }
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff feaa 	bl	8002ad2 <_ZN14TMC2130Stepper8CHOPCONFEv>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_ZN14TMC2208Stepper8CHOPCONFEv>:

void TMC2208Stepper::CHOPCONF(uint32_t input) {
    CHOPCONF_register.sr = input;
    write(CHOPCONF_register.address, CHOPCONF_register.sr);
}
uint32_t TMC2208Stepper::CHOPCONF() {
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
    return read(CHOPCONF_register.address);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	216c      	movs	r1, #108	@ 0x6c
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	4798      	blx	r3
 8002da8:	4603      	mov	r3, r0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <_ZN14TMC2208Stepper4toffEh>:
void TMC2208Stepper::toff   ( uint8_t  B )  { SET_REG(toff);    }
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	70fb      	strb	r3, [r7, #3]
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	b2d9      	uxtb	r1, r3
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8002dcc:	f361 0303 	bfi	r3, r1, #0, #4
 8002dd0:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002de0:	216c      	movs	r1, #108	@ 0x6c
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <_ZN14TMC2208Stepper5hstrtEh>:
void TMC2208Stepper::hstrt  ( uint8_t  B )  { SET_REG(hstrt);   }
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	70fb      	strb	r3, [r7, #3]
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	b2d9      	uxtb	r1, r3
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	f892 302b 	ldrb.w	r3, [r2, #43]	@ 0x2b
 8002e08:	f361 1306 	bfi	r3, r1, #4, #3
 8002e0c:	f882 302b 	strb.w	r3, [r2, #43]	@ 0x2b
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002e1c:	216c      	movs	r1, #108	@ 0x6c
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4798      	blx	r3
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <_ZN14TMC2208Stepper4hendEh>:
void TMC2208Stepper::hend   ( uint8_t  B )  { SET_REG(hend);    }
 8002e2a:	b590      	push	{r4, r7, lr}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	460b      	mov	r3, r1
 8002e34:	70fb      	strb	r3, [r7, #3]
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f002 0101 	and.w	r1, r2, #1
 8002e44:	01cc      	lsls	r4, r1, #7
 8002e46:	f893 102b 	ldrb.w	r1, [r3, #43]	@ 0x2b
 8002e4a:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002e4e:	4608      	mov	r0, r1
 8002e50:	4621      	mov	r1, r4
 8002e52:	4301      	orrs	r1, r0
 8002e54:	f883 102b 	strb.w	r1, [r3, #43]	@ 0x2b
 8002e58:	0852      	lsrs	r2, r2, #1
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	f002 0207 	and.w	r2, r2, #7
 8002e60:	f002 0007 	and.w	r0, r2, #7
 8002e64:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8002e68:	f022 0207 	bic.w	r2, r2, #7
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4602      	mov	r2, r0
 8002e70:	430a      	orrs	r2, r1
 8002e72:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002e82:	216c      	movs	r1, #108	@ 0x6c
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	4798      	blx	r3
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd90      	pop	{r4, r7, pc}

08002e90 <_ZN14TMC2208Stepper3tblEh>:
void TMC2208Stepper::tbl    ( uint8_t  B )  { SET_REG(tbl);     }
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	70fb      	strb	r3, [r7, #3]
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f002 0101 	and.w	r1, r2, #1
 8002eaa:	01cc      	lsls	r4, r1, #7
 8002eac:	f893 102c 	ldrb.w	r1, [r3, #44]	@ 0x2c
 8002eb0:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8002eb4:	4608      	mov	r0, r1
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	4301      	orrs	r1, r0
 8002eba:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
 8002ebe:	0852      	lsrs	r2, r2, #1
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	f002 0201 	and.w	r2, r2, #1
 8002ec6:	f002 0001 	and.w	r0, r2, #1
 8002eca:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002ee8:	216c      	movs	r1, #108	@ 0x6c
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4798      	blx	r3
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd90      	pop	{r4, r7, pc}

08002ef6 <_ZN14TMC2208Stepper6vsenseEb>:
void TMC2208Stepper::vsense ( bool     B )  { SET_REG(vsense);  }
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	460b      	mov	r3, r1
 8002f00:	70fb      	strb	r3, [r7, #3]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	f892 302d 	ldrb.w	r3, [r2, #45]	@ 0x2d
 8002f08:	78f9      	ldrb	r1, [r7, #3]
 8002f0a:	f361 0341 	bfi	r3, r1, #1, #1
 8002f0e:	f882 302d 	strb.w	r3, [r2, #45]	@ 0x2d
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002f1e:	216c      	movs	r1, #108	@ 0x6c
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <_ZN14TMC2208Stepper4mresEh>:
void TMC2208Stepper::mres   ( uint8_t  B )  { SET_REG(mres);    }
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	70fb      	strb	r3, [r7, #3]
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	b2d9      	uxtb	r1, r3
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	f892 302e 	ldrb.w	r3, [r2, #46]	@ 0x2e
 8002f46:	f361 0303 	bfi	r3, r1, #0, #4
 8002f4a:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	f8d2 202b 	ldr.w	r2, [r2, #43]	@ 0x2b
 8002f5a:	216c      	movs	r1, #108	@ 0x6c
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <_ZN14TMC2208Stepper5hstrtEv>:
void TMC2208Stepper::dedge  ( bool     B )  { SET_REG(dedge);   }
void TMC2208Stepper::diss2g ( bool     B )  { SET_REG(diss2g);  }
void TMC2208Stepper::diss2vs( bool     B )  { SET_REG(diss2vs); }

uint8_t TMC2208Stepper::toff()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.toff;     }
uint8_t TMC2208Stepper::hstrt()     { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hstrt;    }
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff ff0c 	bl	8002d92 <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	7b3b      	ldrb	r3, [r7, #12]
 8002f80:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <_ZN14TMC2208Stepper4hendEv>:
uint8_t TMC2208Stepper::hend()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.hend;     }
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff fef9 	bl	8002d92 <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	89bb      	ldrh	r3, [r7, #12]
 8002fa6:	f3c3 13c3 	ubfx	r3, r3, #7, #4
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_ZN14TMC2208Stepper3tblEv>:
uint8_t TMC2208Stepper::tbl()       { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.tbl;      }
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff fee6 	bl	8002d92 <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f3c3 33c1 	ubfx	r3, r3, #15, #2
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <_ZN14TMC2208Stepper6vsenseEv>:
bool    TMC2208Stepper::vsense()    { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.vsense;   }
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff fed3 	bl	8002d92 <_ZN14TMC2208Stepper8CHOPCONFEv>
 8002fec:	4603      	mov	r3, r0
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	7bbb      	ldrb	r3, [r7, #14]
 8002ff2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_ZN14TMC2208Stepper4mresEv>:
uint8_t TMC2208Stepper::mres()      { TMC2208_n::CHOPCONF_t r{0}; r.sr = CHOPCONF(); return r.mres;     }
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff fec0 	bl	8002d92 <_ZN14TMC2208Stepper8CHOPCONFEv>
 8003012:	4603      	mov	r3, r0
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800301c:	b2db      	uxtb	r3, r3
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <_ZN14TMC2130Stepper8COOLCONFEm>:
#define SET_REG(SETTING) COOLCONF_register.SETTING = B; write(COOLCONF_register.address, COOLCONF_register.sr);
#define GET_REG(SETTING) return COOLCONF_register.SETTING;

// COOLCONF
uint32_t TMC2130Stepper::COOLCONF() { return COOLCONF_register.sr; }
void TMC2130Stepper::COOLCONF(uint32_t input) {
 8003026:	b590      	push	{r4, r7, lr}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
	COOLCONF_register.sr = input;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	b2d1      	uxtb	r1, r2
 800303a:	2000      	movs	r0, #0
 800303c:	4301      	orrs	r1, r0
 800303e:	f883 1029 	strb.w	r1, [r3, #41]	@ 0x29
 8003042:	0a11      	lsrs	r1, r2, #8
 8003044:	b2c9      	uxtb	r1, r1
 8003046:	2000      	movs	r0, #0
 8003048:	4301      	orrs	r1, r0
 800304a:	f883 102a 	strb.w	r1, [r3, #42]	@ 0x2a
 800304e:	0c11      	lsrs	r1, r2, #16
 8003050:	b2c9      	uxtb	r1, r1
 8003052:	2000      	movs	r0, #0
 8003054:	4301      	orrs	r1, r0
 8003056:	f883 102b 	strb.w	r1, [r3, #43]	@ 0x2b
 800305a:	0e12      	lsrs	r2, r2, #24
 800305c:	f002 0201 	and.w	r2, r2, #1
 8003060:	f002 0001 	and.w	r0, r2, #1
 8003064:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003068:	f022 0201 	bic.w	r2, r2, #1
 800306c:	4611      	mov	r1, r2
 800306e:	4602      	mov	r2, r0
 8003070:	430a      	orrs	r2, r1
 8003072:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	write(COOLCONF_register.address, COOLCONF_register.sr);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681c      	ldr	r4, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003080:	0a12      	lsrs	r2, r2, #8
 8003082:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	061b      	lsls	r3, r3, #24
 800308c:	4313      	orrs	r3, r2
 800308e:	461a      	mov	r2, r3
 8003090:	216d      	movs	r1, #109	@ 0x6d
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	47a0      	blx	r4
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bd90      	pop	{r4, r7, pc}

0800309e <_ZN14TMC2130Stepper5seminEh>:

void TMC2130Stepper::semin(	uint8_t B )	{ SET_REG(semin);	}
 800309e:	b590      	push	{r4, r7, lr}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	70fb      	strb	r3, [r7, #3]
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	b2d9      	uxtb	r1, r3
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	f892 3029 	ldrb.w	r3, [r2, #41]	@ 0x29
 80030b8:	f361 0303 	bfi	r3, r1, #0, #4
 80030bc:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681c      	ldr	r4, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ca:	0a12      	lsrs	r2, r2, #8
 80030cc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	4313      	orrs	r3, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	216d      	movs	r1, #109	@ 0x6d
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	47a0      	blx	r4
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd90      	pop	{r4, r7, pc}

080030e8 <_ZN14TMC2130Stepper5semaxEh>:
void TMC2130Stepper::seup(	uint8_t B )	{ SET_REG(seup);	}
void TMC2130Stepper::semax(	uint8_t B )	{ SET_REG(semax);	}
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	70fb      	strb	r3, [r7, #3]
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	b2d9      	uxtb	r1, r3
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	f892 302a 	ldrb.w	r3, [r2, #42]	@ 0x2a
 8003102:	f361 0303 	bfi	r3, r1, #0, #4
 8003106:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681c      	ldr	r4, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003114:	0a12      	lsrs	r2, r2, #8
 8003116:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	061b      	lsls	r3, r3, #24
 8003120:	4313      	orrs	r3, r2
 8003122:	461a      	mov	r2, r3
 8003124:	216d      	movs	r1, #109	@ 0x6d
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	47a0      	blx	r4
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	bd90      	pop	{r4, r7, pc}

08003132 <_ZN14TMC2130Stepper4sednEh>:
void TMC2130Stepper::sedn(	uint8_t B )	{ SET_REG(sedn);	}
 8003132:	b590      	push	{r4, r7, lr}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	70fb      	strb	r3, [r7, #3]
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	b2d9      	uxtb	r1, r3
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	f892 302a 	ldrb.w	r3, [r2, #42]	@ 0x2a
 800314c:	f361 1346 	bfi	r3, r1, #5, #2
 8003150:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681c      	ldr	r4, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800315e:	0a12      	lsrs	r2, r2, #8
 8003160:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	061b      	lsls	r3, r3, #24
 800316a:	4313      	orrs	r3, r2
 800316c:	461a      	mov	r2, r3
 800316e:	216d      	movs	r1, #109	@ 0x6d
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	47a0      	blx	r4
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bd90      	pop	{r4, r7, pc}

0800317c <_ZN14TMC2209Stepper5seminEh>:
void TMC2209Stepper::COOLCONF(uint16_t input) {
	COOLCONF_register.sr = input;
	write(COOLCONF_register.address, COOLCONF_register.sr);
}

void TMC2209Stepper::semin(	uint8_t B )	{ SET_REG(semin);	}
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	70fb      	strb	r3, [r7, #3]
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	b2d9      	uxtb	r1, r3
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8003196:	f361 0303 	bfi	r3, r1, #0, #4
 800319a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 80031ac:	b292      	uxth	r2, r2
 80031ae:	2142      	movs	r1, #66	@ 0x42
 80031b0:	4798      	blx	r3
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <_ZN14TMC2209Stepper5semaxEh>:
void TMC2209Stepper::seup(	uint8_t B )	{ SET_REG(seup);	}
void TMC2209Stepper::semax(	uint8_t B )	{ SET_REG(semax);	}
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	460b      	mov	r3, r1
 80031c4:	70fb      	strb	r3, [r7, #3]
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	b2d9      	uxtb	r1, r3
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80031d4:	f361 0303 	bfi	r3, r1, #0, #4
 80031d8:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 80031ea:	b292      	uxth	r2, r2
 80031ec:	2142      	movs	r1, #66	@ 0x42
 80031ee:	4798      	blx	r3
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <_ZN14TMC2209Stepper4sednEh>:
void TMC2209Stepper::sedn(	uint8_t B )	{ SET_REG(sedn);	}
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	70fb      	strb	r3, [r7, #3]
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	b2d9      	uxtb	r1, r3
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8003212:	f361 1346 	bfi	r3, r1, #5, #2
 8003216:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	f8b2 2069 	ldrh.w	r2, [r2, #105]	@ 0x69
 8003228:	b292      	uxth	r2, r2
 800322a:	2142      	movs	r1, #66	@ 0x42
 800322c:	4798      	blx	r3
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <_ZN14TMC2130Stepper10DRV_STATUSEv>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

#define GET_REG(NS, SETTING) NS::DRV_STATUS_t r{0}; r.sr = DRV_STATUS(); return r.SETTING

uint32_t TMC2130Stepper::DRV_STATUS() { return read(DRV_STATUS_t::address); }
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3304      	adds	r3, #4
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	216f      	movs	r1, #111	@ 0x6f
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	4798      	blx	r3
 800324c:	4603      	mov	r3, r0
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <_ZN14TMC2208Stepper10DRV_STATUSEv>:
bool TMC2130Stepper::s2gb()         { GET_REG(TMC2130_n, s2gb);         }
bool TMC2130Stepper::ola()          { GET_REG(TMC2130_n, ola);          }
bool TMC2130Stepper::olb()          { GET_REG(TMC2130_n, olb);          }
bool TMC2130Stepper::stst()         { GET_REG(TMC2130_n, stst);         }

uint32_t TMC2208Stepper::DRV_STATUS() {
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
    return read(TMC2208_n::DRV_STATUS_t::address);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3304      	adds	r3, #4
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	216f      	movs	r1, #111	@ 0x6f
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4798      	blx	r3
 800326c:	4603      	mov	r3, r0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <_ZN14TMC2130Stepper5GCONFEm>:
// GCONF

uint32_t TMC2130Stepper::GCONF() {
    return read(GCONF_register.address);
}
void TMC2130Stepper::GCONF(uint32_t input) {
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
    GCONF_register.sr = input;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	b2d1      	uxtb	r1, r2
 800328a:	2000      	movs	r0, #0
 800328c:	4301      	orrs	r1, r0
 800328e:	7559      	strb	r1, [r3, #21]
 8003290:	0a11      	lsrs	r1, r2, #8
 8003292:	b2c9      	uxtb	r1, r1
 8003294:	2000      	movs	r0, #0
 8003296:	4301      	orrs	r1, r0
 8003298:	7599      	strb	r1, [r3, #22]
 800329a:	0c12      	lsrs	r2, r2, #16
 800329c:	f002 0203 	and.w	r2, r2, #3
 80032a0:	f002 0003 	and.w	r0, r2, #3
 80032a4:	7dda      	ldrb	r2, [r3, #23]
 80032a6:	f022 0203 	bic.w	r2, r2, #3
 80032aa:	4611      	mov	r1, r2
 80032ac:	4602      	mov	r2, r0
 80032ae:	430a      	orrs	r2, r1
 80032b0:	75da      	strb	r2, [r3, #23]
    write(GCONF_register.address, GCONF_register.sr);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6952      	ldr	r2, [r2, #20]
 80032bc:	f3c2 2211 	ubfx	r2, r2, #8, #18
 80032c0:	2100      	movs	r1, #0
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	4798      	blx	r3
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <_ZN14TMC2208Stepper14en_spreadCycleEb>:
    write(GCONF_register.address, GCONF_register.sr);
}

void TMC2208Stepper::I_scale_analog(bool B)     { SET_REG(i_scale_analog);  }
void TMC2208Stepper::internal_Rsense(bool B)    { SET_REG(internal_rsense); }
void TMC2208Stepper::en_spreadCycle(bool B)     { SET_REG(en_spreadcycle);  }
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	460b      	mov	r3, r1
 80032d8:	70fb      	strb	r3, [r7, #3]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 80032e0:	78f9      	ldrb	r1, [r7, #3]
 80032e2:	f361 0382 	bfi	r3, r1, #2, #1
 80032e6:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6a12      	ldr	r2, [r2, #32]
 80032f4:	f3c2 2209 	ubfx	r2, r2, #8, #10
 80032f8:	b292      	uxth	r2, r2
 80032fa:	2100      	movs	r1, #0
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	4798      	blx	r3
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <_ZN14TMC2208Stepper11pdn_disableEb>:
void TMC2208Stepper::shaft(bool B)              { SET_REG(shaft);           }
void TMC2208Stepper::index_otpw(bool B)         { SET_REG(index_otpw);      }
void TMC2208Stepper::index_step(bool B)         { SET_REG(index_step);      }
void TMC2208Stepper::pdn_disable(bool B)        { SET_REG(pdn_disable);     }
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	70fb      	strb	r3, [r7, #3]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800331a:	78f9      	ldrb	r1, [r7, #3]
 800331c:	f361 1386 	bfi	r3, r1, #6, #1
 8003320:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6a12      	ldr	r2, [r2, #32]
 800332e:	f3c2 2209 	ubfx	r2, r2, #8, #10
 8003332:	b292      	uxth	r2, r2
 8003334:	2100      	movs	r1, #0
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <_ZN14TMC2208Stepper16mstep_reg_selectEb>:
void TMC2208Stepper::mstep_reg_select(bool B)   { SET_REG(mstep_reg_select);}
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	460b      	mov	r3, r1
 800334c:	70fb      	strb	r3, [r7, #3]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003354:	78f9      	ldrb	r1, [r7, #3]
 8003356:	f361 13c7 	bfi	r3, r1, #7, #1
 800335a:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6a12      	ldr	r2, [r2, #32]
 8003368:	f3c2 2209 	ubfx	r2, r2, #8, #10
 800336c:	b292      	uxth	r2, r2
 800336e:	2100      	movs	r1, #0
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	4798      	blx	r3
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <_ZN10TMCStepper10IHOLD_IRUNEm>:
#define SET_REG(SETTING) IHOLD_IRUN_register.SETTING = B; write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
#define GET_REG(SETTING) return IHOLD_IRUN_register.SETTING;

// IHOLD_IRUN
uint32_t TMCStepper::IHOLD_IRUN() { return IHOLD_IRUN_register.sr; }
void TMCStepper::IHOLD_IRUN(uint32_t input) {
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
    IHOLD_IRUN_register.sr = input;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	b291      	uxth	r1, r2
 8003390:	2000      	movs	r0, #0
 8003392:	4301      	orrs	r1, r0
 8003394:	8099      	strh	r1, [r3, #4]
 8003396:	0c12      	lsrs	r2, r2, #16
 8003398:	f002 020f 	and.w	r2, r2, #15
 800339c:	f002 000f 	and.w	r0, r2, #15
 80033a0:	799a      	ldrb	r2, [r3, #6]
 80033a2:	f022 020f 	bic.w	r2, r2, #15
 80033a6:	4611      	mov	r1, r2
 80033a8:	4602      	mov	r2, r0
 80033aa:	430a      	orrs	r2, r1
 80033ac:	719a      	strb	r2, [r3, #6]
    write(IHOLD_IRUN_register.address, IHOLD_IRUN_register.sr);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6852      	ldr	r2, [r2, #4]
 80033b8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80033bc:	2110      	movs	r1, #16
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	4798      	blx	r3
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <_ZN10TMCStepper5iholdEh>:

void    TMCStepper::ihold(uint8_t B)        { SET_REG(ihold);       }
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	70fb      	strb	r3, [r7, #3]
 80033d6:	78fb      	ldrb	r3, [r7, #3]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	b2d9      	uxtb	r1, r3
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	7913      	ldrb	r3, [r2, #4]
 80033e2:	f361 0304 	bfi	r3, r1, #0, #5
 80033e6:	7113      	strb	r3, [r2, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6852      	ldr	r2, [r2, #4]
 80033f2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80033f6:	2110      	movs	r1, #16
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_ZN10TMCStepper4irunEh>:
void    TMCStepper::irun(uint8_t B)         { SET_REG(irun);        }
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	70fb      	strb	r3, [r7, #3]
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	b2d9      	uxtb	r1, r3
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	7953      	ldrb	r3, [r2, #5]
 800341c:	f361 0304 	bfi	r3, r1, #0, #5
 8003420:	7153      	strb	r3, [r2, #5]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6852      	ldr	r2, [r2, #4]
 800342c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003430:	2110      	movs	r1, #16
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	4798      	blx	r3
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <_ZN10TMCStepper10iholddelayEh>:
void    TMCStepper::iholddelay(uint8_t B)   { SET_REG(iholddelay);  }
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	460b      	mov	r3, r1
 8003448:	70fb      	strb	r3, [r7, #3]
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	b2d9      	uxtb	r1, r3
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	7993      	ldrb	r3, [r2, #6]
 8003456:	f361 0303 	bfi	r3, r1, #0, #4
 800345a:	7193      	strb	r3, [r2, #6]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6852      	ldr	r2, [r2, #4]
 8003466:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800346a:	2110      	movs	r1, #16
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <_ZN14TMC2160Stepper7PWMCONFEm>:
uint8_t TMC2130Stepper::freewheel()		{ GET_REG(freewheel);		}

uint32_t TMC2160Stepper::PWMCONF() {
	return PWMCONF_register.sr;
}
void TMC2160Stepper::PWMCONF(uint32_t input) {
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
	PWMCONF_register.sr = input;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	645a      	str	r2, [r3, #68]	@ 0x44
	write(PWMCONF_register.address, PWMCONF_register.sr);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003494:	2170      	movs	r1, #112	@ 0x70
 8003496:	4798      	blx	r3
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <_ZN14TMC2160Stepper13pwm_autoscaleEb>:

void TMC2160Stepper::pwm_ofs		( uint8_t B ) { PWMCONF_register.pwm_ofs = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_grad		( uint8_t B ) { PWMCONF_register.pwm_grad = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_freq		( uint8_t B ) { PWMCONF_register.pwm_freq = B; 		write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2160Stepper::pwm_autoscale	( bool 	  B ) { PWMCONF_register.pwm_autoscale = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	f892 3046 	ldrb.w	r3, [r2, #70]	@ 0x46
 80034b2:	78f9      	ldrb	r1, [r7, #3]
 80034b4:	f361 0382 	bfi	r3, r1, #2, #1
 80034b8:	f882 3046 	strb.w	r3, [r2, #70]	@ 0x46
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80034c8:	2170      	movs	r1, #112	@ 0x70
 80034ca:	4798      	blx	r3
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <_ZN14TMC2208Stepper13pwm_autoscaleEb>:
}

void TMC2208Stepper::pwm_ofs		( uint8_t B ) { PWMCONF_register.pwm_ofs = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_grad		( uint8_t B ) { PWMCONF_register.pwm_grad = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_freq		( uint8_t B ) { PWMCONF_register.pwm_freq = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
void TMC2208Stepper::pwm_autoscale	( bool 	  B ) { PWMCONF_register.pwm_autoscale = B; write(PWMCONF_register.address, PWMCONF_register.sr); }
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	70fb      	strb	r3, [r7, #3]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	f892 3031 	ldrb.w	r3, [r2, #49]	@ 0x31
 80034e6:	78f9      	ldrb	r1, [r7, #3]
 80034e8:	f361 0382 	bfi	r3, r1, #2, #1
 80034ec:	f882 3031 	strb.w	r3, [r2, #49]	@ 0x31
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	f8d2 202f 	ldr.w	r2, [r2, #47]	@ 0x2f
 80034fc:	2170      	movs	r1, #112	@ 0x70
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	4798      	blx	r3
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <_ZN10TMCStepperC1Ef>:
        int16_t cur_b();

		//Timer tmcTimer;

    protected:
        TMCStepper(float RS) : Rsense(RS) {};
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	ed87 0a00 	vstr	s0, [r7]
 8003518:	4a10      	ldr	r2, [pc, #64]	@ (800355c <_ZN10TMCStepperC1Ef+0x50>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3304      	adds	r3, #4
 8003522:	2100      	movs	r1, #0
 8003524:	460a      	mov	r2, r1
 8003526:	801a      	strh	r2, [r3, #0]
 8003528:	460a      	mov	r2, r1
 800352a:	709a      	strb	r2, [r3, #2]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	71da      	strb	r2, [r3, #7]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	811a      	strh	r2, [r3, #8]
 8003538:	7a9a      	ldrb	r2, [r3, #10]
 800353a:	f022 020f 	bic.w	r2, r2, #15
 800353e:	729a      	strb	r2, [r3, #10]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800354c:	611a      	str	r2, [r3, #16]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4618      	mov	r0, r3
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	0802b2a4 	.word	0x0802b2a4

08003560 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>:

// only software SPI supported

int8_t TMC2130Stepper::chain_length = 0;

TMC2130Stepper::TMC2130Stepper(const std::string& pinCS, float RS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link)
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b08b      	sub	sp, #44	@ 0x2c
 8003564:	af04      	add	r7, sp, #16
 8003566:	6178      	str	r0, [r7, #20]
 8003568:	6139      	str	r1, [r7, #16]
 800356a:	ed87 0a03 	vstr	s0, [r7, #12]
 800356e:	60ba      	str	r2, [r7, #8]
 8003570:	607b      	str	r3, [r7, #4]
    : TMCStepper(RS),
      cs(nullptr),
      link_index(link) {
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	ed97 0a03 	vldr	s0, [r7, #12]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ffc7 	bl	800350c <_ZN10TMCStepperC1Ef>
 800357e:	4a51      	ldr	r2, [pc, #324]	@ (80036c4 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x164>)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	3315      	adds	r3, #21
 8003588:	2200      	movs	r2, #0
 800358a:	801a      	strh	r2, [r3, #0]
 800358c:	709a      	strb	r2, [r3, #2]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	831a      	strh	r2, [r3, #24]
 8003594:	7e9a      	ldrb	r2, [r3, #26]
 8003596:	f022 020f 	bic.w	r2, r2, #15
 800359a:	769a      	strb	r2, [r3, #26]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2200      	movs	r2, #0
 80035a0:	76da      	strb	r2, [r3, #27]
 80035a2:	2200      	movs	r2, #0
 80035a4:	771a      	strb	r2, [r3, #28]
 80035a6:	7f5a      	ldrb	r2, [r3, #29]
 80035a8:	f022 020f 	bic.w	r2, r2, #15
 80035ac:	775a      	strb	r2, [r3, #29]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2200      	movs	r2, #0
 80035b2:	83da      	strh	r2, [r3, #30]
 80035b4:	8c1a      	ldrh	r2, [r3, #32]
 80035b6:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	841a      	strh	r2, [r3, #32]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2200      	movs	r2, #0
 80035c4:	845a      	strh	r2, [r3, #34]	@ 0x22
 80035c6:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80035ca:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 80035ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8003600:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	332d      	adds	r3, #45	@ 0x2d
 8003610:	2200      	movs	r2, #0
 8003612:	801a      	strh	r2, [r3, #0]
 8003614:	709a      	strb	r2, [r3, #2]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	3330      	adds	r3, #48	@ 0x30
 800361a:	2100      	movs	r1, #0
 800361c:	460a      	mov	r2, r1
 800361e:	801a      	strh	r2, [r3, #0]
 8003620:	460a      	mov	r2, r1
 8003622:	709a      	strb	r2, [r3, #2]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	f892 3033 	ldrb.w	r3, [r2, #51]	@ 0x33
 800362a:	f36f 0301 	bfc	r3, #0, #2
 800362e:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
      cs(nullptr),
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2200      	movs	r2, #0
 8003636:	635a      	str	r2, [r3, #52]	@ 0x34
      link_index(link) {
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2200      	movs	r2, #0
 800363c:	639a      	str	r2, [r3, #56]	@ 0x38
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	cs = new Pin(pinCS, OUTPUT);
 8003648:	2040      	movs	r0, #64	@ 0x40
 800364a:	f025 f855 	bl	80286f8 <_Znwj>
 800364e:	4603      	mov	r3, r0
 8003650:	461c      	mov	r4, r3
 8003652:	2201      	movs	r2, #1
 8003654:	6939      	ldr	r1, [r7, #16]
 8003656:	4620      	mov	r0, r4
 8003658:	f001 faaa 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	635c      	str	r4, [r3, #52]	@ 0x34

    TMC_SW_SPI = new SoftwareSPI(pinMOSI, pinMISO, pinSCK, pinCS, SPI_MODE_3, MSB_FIRST, MSB_FIRST_BYTE);
 8003660:	20d0      	movs	r0, #208	@ 0xd0
 8003662:	f025 f849 	bl	80286f8 <_Znwj>
 8003666:	4603      	mov	r3, r0
 8003668:	461c      	mov	r4, r3
 800366a:	2300      	movs	r3, #0
 800366c:	9303      	str	r3, [sp, #12]
 800366e:	2300      	movs	r3, #0
 8003670:	9302      	str	r3, [sp, #8]
 8003672:	2303      	movs	r3, #3
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	4620      	mov	r0, r4
 8003682:	f7fe fe2c 	bl	80022de <_ZN11SoftwareSPIC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_S7_h8BitOrder9ByteOrder>
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	639c      	str	r4, [r3, #56]	@ 0x38

    defaults();
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f000 f81e 	bl	80036cc <_ZN14TMC2130Stepper8defaultsEv>

    switchCSpin(HIGH);
 8003690:	2101      	movs	r1, #1
 8003692:	6978      	ldr	r0, [r7, #20]
 8003694:	f000 f831 	bl	80036fa <_ZN14TMC2130Stepper11switchCSpinEb>
    TMC_SW_SPI->begin();
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369c:	4618      	mov	r0, r3
 800369e:	f7fe fe67 	bl	8002370 <_ZN11SoftwareSPI5beginEv>

    if (link > chain_length)
 80036a2:	4b09      	ldr	r3, [pc, #36]	@ (80036c8 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x168>)
 80036a4:	f993 3000 	ldrsb.w	r3, [r3]
 80036a8:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 80036ac:	429a      	cmp	r2, r3
 80036ae:	dd03      	ble.n	80036b8 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x158>
      chain_length = link;
 80036b0:	4a05      	ldr	r2, [pc, #20]	@ (80036c8 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x168>)
 80036b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80036b6:	7013      	strb	r3, [r2, #0]
  }
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	4618      	mov	r0, r3
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd90      	pop	{r4, r7, pc}
 80036c2:	bf00      	nop
 80036c4:	0802b268 	.word	0x0802b268
 80036c8:	240000a4 	.word	0x240000a4

080036cc <_ZN14TMC2130Stepper8defaultsEv>:

    if (link > chain_length)
      chain_length = link;
  }

void TMC2130Stepper::defaults() {
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  //MSLUT4_register.sr = ???;
  //MSLUT5_register.sr = ???;
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSTART_register.start_sin90 = 247;
  PWMCONF_register.sr = 0x00050480;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f442 6290 	orr.w	r2, r2, #1152	@ 0x480
 80036dc:	861a      	strh	r2, [r3, #48]	@ 0x30
 80036de:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80036e2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80036e6:	f042 0205 	orr.w	r2, r2, #5
 80036ea:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <_ZN14TMC2130Stepper11switchCSpinEb>:
void TMC2130Stepper::setSPISpeed(uint32_t speed) {
  spi_speed = speed;
}

__attribute__((weak))
void TMC2130Stepper::switchCSpin(bool state) {
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	460b      	mov	r3, r1
 8003704:	70fb      	strb	r3, [r7, #3]
  cs->set(state);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f001 fbf8 	bl	8004f04 <_ZN3Pin3setEb>
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <_ZN14TMC2130Stepper16beginTransactionEv>:

__attribute__((weak))
void TMC2130Stepper::beginTransaction() {
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  if (TMC_SW_SPI == nullptr) {
    //SPI.beginTransaction(SPISettings(spi_speed, MSBFIRST, SPI_MODE3));
  }
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <_ZN14TMC2130Stepper14endTransactionEv>:
__attribute__((weak))
void TMC2130Stepper::endTransaction() {
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if (TMC_SW_SPI == nullptr) {
    //SPI.endTransaction();
  }
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <_ZN14TMC2130Stepper4readEh>:
    transfer(0x00);
  }
}

__attribute__((weak))
uint32_t TMC2130Stepper::read(uint8_t addressByte) {
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	@ 0x30
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	70fb      	strb	r3, [r7, #3]
    uint32_t out = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	62bb      	str	r3, [r7, #40]	@ 0x28
    int8_t i = 1;
 8003754:	2301      	movs	r3, #1
 8003756:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (!TMC_SW_SPI) return 0; // Ensure SPI instance is valid
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <_ZN14TMC2130Stepper4readEh+0x22>
 8003762:	2300      	movs	r3, #0
 8003764:	e08e      	b.n	8003884 <_ZN14TMC2130Stepper4readEh+0x140>

    beginTransaction();
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff ffd8 	bl	800371c <_ZN14TMC2130Stepper16beginTransactionEv>
    if (cs) cs->set(false); // Pull CS low
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <_ZN14TMC2130Stepper4readEh+0x3c>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f001 fbc2 	bl	8004f04 <_ZN3Pin3setEb>

    uint8_t datagram[5] = { addressByte, 0, 0, 0, 0 };
 8003780:	f107 0320 	add.w	r3, r7, #32
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	711a      	strb	r2, [r3, #4]
 800378a:	78fb      	ldrb	r3, [r7, #3]
 800378c:	f887 3020 	strb.w	r3, [r7, #32]
    TMC_SW_SPI->transfer(datagram, 5); // Send address and receive response
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003794:	f107 0120 	add.w	r1, r7, #32
 8003798:	2205      	movs	r2, #5
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe fe36 	bl	800240c <_ZN11SoftwareSPI8transferEPhj>

    while (i < link_index) {
 80037a0:	e012      	b.n	80037c8 <_ZN14TMC2130Stepper4readEh+0x84>
        uint8_t empty[5] = { 0 };
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	2300      	movs	r3, #0
 80037a8:	753b      	strb	r3, [r7, #20]
        TMC_SW_SPI->transfer(empty, 5); // Shift data for multi-driver chains
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ae:	f107 0110 	add.w	r1, r7, #16
 80037b2:	2205      	movs	r2, #5
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe fe29 	bl	800240c <_ZN11SoftwareSPI8transferEPhj>
        i++;
 80037ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	3301      	adds	r3, #1
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    while (i < link_index) {
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f993 303c 	ldrsb.w	r3, [r3, #60]	@ 0x3c
 80037ce:	f997 202f 	ldrsb.w	r2, [r7, #47]	@ 0x2f
 80037d2:	429a      	cmp	r2, r3
 80037d4:	dbe5      	blt.n	80037a2 <_ZN14TMC2130Stepper4readEh+0x5e>
    }

    if (cs) cs->set(true); // Pull CS high
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <_ZN14TMC2130Stepper4readEh+0xa6>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e2:	2101      	movs	r1, #1
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 fb8d 	bl	8004f04 <_ZN3Pin3setEb>
    if (cs) cs->set(false); // Pull CS low again
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d019      	beq.n	8003826 <_ZN14TMC2130Stepper4readEh+0xe2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f6:	2100      	movs	r1, #0
 80037f8:	4618      	mov	r0, r3
 80037fa:	f001 fb83 	bl	8004f04 <_ZN3Pin3setEb>

    while (i < chain_length) {
 80037fe:	e012      	b.n	8003826 <_ZN14TMC2130Stepper4readEh+0xe2>
        uint8_t empty[5] = { 0 };
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	2300      	movs	r3, #0
 8003806:	733b      	strb	r3, [r7, #12]
        TMC_SW_SPI->transfer(empty, 5);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380c:	f107 0108 	add.w	r1, r7, #8
 8003810:	2205      	movs	r2, #5
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe fdfa 	bl	800240c <_ZN11SoftwareSPI8transferEPhj>
        i++;
 8003818:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800381c:	b2db      	uxtb	r3, r3
 800381e:	3301      	adds	r3, #1
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    while (i < chain_length) {
 8003826:	4b19      	ldr	r3, [pc, #100]	@ (800388c <_ZN14TMC2130Stepper4readEh+0x148>)
 8003828:	f993 3000 	ldrsb.w	r3, [r3]
 800382c:	f997 202f 	ldrsb.w	r2, [r7, #47]	@ 0x2f
 8003830:	429a      	cmp	r2, r3
 8003832:	dbe5      	blt.n	8003800 <_ZN14TMC2130Stepper4readEh+0xbc>
    }

    uint8_t response[5] = { addressByte, 0, 0, 0, 0 };
 8003834:	f107 0318 	add.w	r3, r7, #24
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	711a      	strb	r2, [r3, #4]
 800383e:	78fb      	ldrb	r3, [r7, #3]
 8003840:	763b      	strb	r3, [r7, #24]
    TMC_SW_SPI->transfer(response, 5); // Read response
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003846:	f107 0118 	add.w	r1, r7, #24
 800384a:	2205      	movs	r2, #5
 800384c:	4618      	mov	r0, r3
 800384e:	f7fe fddd 	bl	800240c <_ZN11SoftwareSPI8transferEPhj>

    out = (response[1] << 24) | (response[2] << 16) | (response[3] << 8) | response[4];
 8003852:	7e7b      	ldrb	r3, [r7, #25]
 8003854:	061a      	lsls	r2, r3, #24
 8003856:	7ebb      	ldrb	r3, [r7, #26]
 8003858:	041b      	lsls	r3, r3, #16
 800385a:	431a      	orrs	r2, r3
 800385c:	7efb      	ldrb	r3, [r7, #27]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	4313      	orrs	r3, r2
 8003862:	7f3a      	ldrb	r2, [r7, #28]
 8003864:	4313      	orrs	r3, r2
 8003866:	62bb      	str	r3, [r7, #40]	@ 0x28

    endTransaction();
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ff61 	bl	8003730 <_ZN14TMC2130Stepper14endTransactionEv>
    if (cs) cs->set(true); // Pull CS high
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <_ZN14TMC2130Stepper4readEh+0x13e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800387a:	2101      	movs	r1, #1
 800387c:	4618      	mov	r0, r3
 800387e:	f001 fb41 	bl	8004f04 <_ZN3Pin3setEb>

    return out;
 8003882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8003884:	4618      	mov	r0, r3
 8003886:	3730      	adds	r7, #48	@ 0x30
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	240000a4 	.word	0x240000a4

08003890 <_ZN14TMC2130Stepper5writeEhm>:

__attribute__((weak))
void TMC2130Stepper::write(uint8_t addressByte, uint32_t config) {
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	460b      	mov	r3, r1
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	72fb      	strb	r3, [r7, #11]
    addressByte |= TMC_WRITE;
 800389e:	7afb      	ldrb	r3, [r7, #11]
 80038a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038a4:	72fb      	strb	r3, [r7, #11]
    int8_t i = 1;
 80038a6:	2301      	movs	r3, #1
 80038a8:	77fb      	strb	r3, [r7, #31]

    if (!TMC_SW_SPI) return; // Ensure SPI instance is valid
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d04d      	beq.n	800394e <_ZN14TMC2130Stepper5writeEhm+0xbe>

    beginTransaction();
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f7ff ff32 	bl	800371c <_ZN14TMC2130Stepper16beginTransactionEv>
    if (cs) cs->set(false); // Pull CS low
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <_ZN14TMC2130Stepper5writeEhm+0x3c>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c4:	2100      	movs	r1, #0
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 fb1c 	bl	8004f04 <_ZN3Pin3setEb>

    uint8_t datagram[5] = { addressByte, (uint8_t)(config >> 24), (uint8_t)(config >> 16), (uint8_t)(config >> 8), (uint8_t)config };
 80038cc:	7afb      	ldrb	r3, [r7, #11]
 80038ce:	763b      	strb	r3, [r7, #24]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	0e1b      	lsrs	r3, r3, #24
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	767b      	strb	r3, [r7, #25]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	0c1b      	lsrs	r3, r3, #16
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	76bb      	strb	r3, [r7, #26]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	76fb      	strb	r3, [r7, #27]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	773b      	strb	r3, [r7, #28]
    TMC_SW_SPI->transfer(datagram, 5); // Send data
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f2:	f107 0118 	add.w	r1, r7, #24
 80038f6:	2205      	movs	r2, #5
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe fd87 	bl	800240c <_ZN11SoftwareSPI8transferEPhj>

    while (i < link_index) {
 80038fe:	e011      	b.n	8003924 <_ZN14TMC2130Stepper5writeEhm+0x94>
        uint8_t empty[5] = { 0 };
 8003900:	2300      	movs	r3, #0
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	2300      	movs	r3, #0
 8003906:	753b      	strb	r3, [r7, #20]
        TMC_SW_SPI->transfer(empty, 5);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390c:	f107 0110 	add.w	r1, r7, #16
 8003910:	2205      	movs	r2, #5
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fd7a 	bl	800240c <_ZN11SoftwareSPI8transferEPhj>
        i++;
 8003918:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	3301      	adds	r3, #1
 8003920:	b2db      	uxtb	r3, r3
 8003922:	77fb      	strb	r3, [r7, #31]
    while (i < link_index) {
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f993 303c 	ldrsb.w	r3, [r3, #60]	@ 0x3c
 800392a:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800392e:	429a      	cmp	r2, r3
 8003930:	dbe6      	blt.n	8003900 <_ZN14TMC2130Stepper5writeEhm+0x70>
    }

    endTransaction();
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f7ff fefc 	bl	8003730 <_ZN14TMC2130Stepper14endTransactionEv>
    if (cs) cs->set(true); // Pull CS high
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <_ZN14TMC2130Stepper5writeEhm+0xc0>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003944:	2101      	movs	r1, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f001 fadc 	bl	8004f04 <_ZN3Pin3setEb>
 800394c:	e000      	b.n	8003950 <_ZN14TMC2130Stepper5writeEhm+0xc0>
    if (!TMC_SW_SPI) return; // Ensure SPI instance is valid
 800394e:	bf00      	nop
}
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <_ZN14TMC2130Stepper9TCOOLTHRSEm>:
bool TMC2130Stepper::dco()          { IOIN_t r{0}; r.sr = IOIN(); return r.dco; }
uint8_t TMC2130Stepper::version()   { IOIN_t r{0}; r.sr = IOIN(); return r.version; }
///////////////////////////////////////////////////////////////////////////////////////
// W: TCOOLTHRS
uint32_t TMC2130Stepper::TCOOLTHRS() { return TCOOLTHRS_register.sr; }
void TMC2130Stepper::TCOOLTHRS(uint32_t input) {
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  TCOOLTHRS_register.sr = input;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	b291      	uxth	r1, r2
 800396a:	2000      	movs	r0, #0
 800396c:	4301      	orrs	r1, r0
 800396e:	8319      	strh	r1, [r3, #24]
 8003970:	0c12      	lsrs	r2, r2, #16
 8003972:	f002 020f 	and.w	r2, r2, #15
 8003976:	f002 000f 	and.w	r0, r2, #15
 800397a:	7e9a      	ldrb	r2, [r3, #26]
 800397c:	f022 020f 	bic.w	r2, r2, #15
 8003980:	4611      	mov	r1, r2
 8003982:	4602      	mov	r2, r0
 8003984:	430a      	orrs	r2, r1
 8003986:	769a      	strb	r2, [r3, #26]
  write(TCOOLTHRS_register.address, TCOOLTHRS_register.sr);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6992      	ldr	r2, [r2, #24]
 8003992:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003996:	2114      	movs	r1, #20
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	4798      	blx	r3
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <_ZN14TMC2160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"


TMC2160Stepper::TMC2160Stepper(const std::string& pinCS, float RS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	6178      	str	r0, [r7, #20]
 80039ac:	6139      	str	r1, [r7, #16]
 80039ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80039b2:	60ba      	str	r2, [r7, #8]
 80039b4:	607b      	str	r3, [r7, #4]
  TMC2130Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 80039b6:	6978      	ldr	r0, [r7, #20]
 80039b8:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	ed97 0a03 	vldr	s0, [r7, #12]
 80039ca:	6939      	ldr	r1, [r7, #16]
 80039cc:	f7ff fdc8 	bl	8003560 <_ZN14TMC2130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>
 80039d0:	4a0e      	ldr	r2, [pc, #56]	@ (8003a0c <_ZN14TMC2160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x68>)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	333d      	adds	r3, #61	@ 0x3d
 80039da:	2200      	movs	r2, #0
 80039dc:	801a      	strh	r2, [r3, #0]
 80039de:	709a      	strb	r2, [r3, #2]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	3340      	adds	r3, #64	@ 0x40
 80039e4:	2100      	movs	r1, #0
 80039e6:	460a      	mov	r2, r1
 80039e8:	801a      	strh	r2, [r3, #0]
 80039ea:	460a      	mov	r2, r1
 80039ec:	709a      	strb	r2, [r3, #2]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2200      	movs	r2, #0
 80039fa:	645a      	str	r2, [r3, #68]	@ 0x44
  { defaults(); }
 80039fc:	6978      	ldr	r0, [r7, #20]
 80039fe:	f000 f857 	bl	8003ab0 <_ZN14TMC2160Stepper8defaultsEv>
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	0802b2e0 	.word	0x0802b2e0

08003a10 <_ZN14TMC2160Stepper5beginEv>:

TMC2160Stepper::TMC2160Stepper(const std::string& pinCS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
  TMC2130Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC2160Stepper::begin() {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  //set pins
  switchCSpin(HIGH);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fe6c 	bl	80036fa <_ZN14TMC2130Stepper11switchCSpinEb>

  if (TMC_SW_SPI != nullptr) TMC_SW_SPI->begin();
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d004      	beq.n	8003a34 <_ZN14TMC2160Stepper5beginEv+0x24>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe fc9e 	bl	8002370 <_ZN11SoftwareSPI5beginEv>

  GCONF(GCONF_register.sr);
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f3c3 2311 	ubfx	r3, r3, #8, #18
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4610      	mov	r0, r2
 8003a42:	f7ff fc18 	bl	8003276 <_ZN14TMC2130Stepper5GCONFEm>
  CHOPCONF(CHOPCONF_register.sr);
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 3025 	ldr.w	r3, [r3, #37]	@ 0x25
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4610      	mov	r0, r2
 8003a52:	f7ff f84e 	bl	8002af2 <_ZN14TMC2130Stepper8CHOPCONFEm>
  COOLCONF(COOLCONF_register.sr);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a5c:	0a12      	lsrs	r2, r2, #8
 8003a5e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	061b      	lsls	r3, r3, #24
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	f7ff fadb 	bl	8003026 <_ZN14TMC2130Stepper8COOLCONFEm>
  PWMCONF(PWMCONF_register.sr);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a74:	4619      	mov	r1, r3
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff fcfe 	bl	8003478 <_ZN14TMC2160Stepper7PWMCONFEm>
  IHOLD_IRUN(IHOLD_IRUN_register.sr);
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a86:	4619      	mov	r1, r3
 8003a88:	4610      	mov	r0, r2
 8003a8a:	f7ff fc77 	bl	800337c <_ZN10TMCStepper10IHOLD_IRUNEm>

  toff(8); //off_time(8);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2108      	movs	r1, #8
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff f843 	bl	8002b1e <_ZN14TMC2130Stepper4toffEh>
  tbl(1); //blank_time(24);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	332c      	adds	r3, #44	@ 0x2c
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	4798      	blx	r3
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <_ZN14TMC2160Stepper8defaultsEv>:

void TMC2160Stepper::defaults() {
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  SHORT_CONF_register.s2vs_level = 6;
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	f892 303d 	ldrb.w	r3, [r2, #61]	@ 0x3d
 8003abe:	2106      	movs	r1, #6
 8003ac0:	f361 0303 	bfi	r3, r1, #0, #4
 8003ac4:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  SHORT_CONF_register.s2g_level = 6;
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	f892 303e 	ldrb.w	r3, [r2, #62]	@ 0x3e
 8003ace:	2106      	movs	r1, #6
 8003ad0:	f361 0303 	bfi	r3, r1, #0, #4
 8003ad4:	f882 303e 	strb.w	r3, [r2, #62]	@ 0x3e
  SHORT_CONF_register.shortfilter = 0b01;
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	f892 303f 	ldrb.w	r3, [r2, #63]	@ 0x3f
 8003ade:	2101      	movs	r1, #1
 8003ae0:	f361 0301 	bfi	r3, r1, #0, #2
 8003ae4:	f882 303f 	strb.w	r3, [r2, #63]	@ 0x3f
  SHORT_CONF_register.shortdelay = 0;
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	f892 303f 	ldrb.w	r3, [r2, #63]	@ 0x3f
 8003aee:	f36f 0382 	bfc	r3, #2, #1
 8003af2:	f882 303f 	strb.w	r3, [r2, #63]	@ 0x3f
  DRV_CONF_register.bbmtime = 0;
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 8003afc:	f36f 0304 	bfc	r3, #0, #5
 8003b00:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
  DRV_CONF_register.bbmclks = 4;
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 8003b0a:	2104      	movs	r1, #4
 8003b0c:	f361 0303 	bfi	r3, r1, #0, #4
 8003b10:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
  DRV_CONF_register.otselect = 0b00;
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 8003b1a:	f36f 0301 	bfc	r3, #0, #2
 8003b1e:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
  DRV_CONF_register.drvstrength = 0b10;
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 8003b28:	2102      	movs	r1, #2
 8003b2a:	f361 0383 	bfi	r3, r1, #2, #2
 8003b2e:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
  DRV_CONF_register.filt_isense = 0b00;
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 8003b38:	f36f 1305 	bfc	r3, #4, #2
 8003b3c:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
  TPOWERDOWN_register.sr = 10;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	220a      	movs	r2, #10
 8003b44:	71da      	strb	r2, [r3, #7]
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  CHOPCONF_register.sr = 0x10410150;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8003b4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003b52:	2200      	movs	r2, #0
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f042 0241 	orr.w	r2, r2, #65	@ 0x41
 8003b62:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8003b66:	2200      	movs	r2, #0
 8003b68:	f042 0210 	orr.w	r2, r2, #16
 8003b6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  PWMCONF_register.sr = 0xC40C001E;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a04      	ldr	r2, [pc, #16]	@ (8003b84 <_ZN14TMC2160Stepper8defaultsEv+0xd4>)
 8003b74:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	c40c001e 	.word	0xc40c001e

08003b88 <_ZN14TMC2160Stepper11rms_currentEt>:
                 32 * 256 * sqrt(2) * I_rms * R_sense    |
  GLOBALSCALER = ------------------------------------    |
                           (CS + 1) * V_fs               | V_fs = 0.325

*/
void TMC2160Stepper::rms_current(uint16_t mA) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08a      	sub	sp, #40	@ 0x28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	460b      	mov	r3, r1
 8003b92:	817b      	strh	r3, [r7, #10]
  constexpr uint32_t V_fs = 325; // 0.325 * 1000
 8003b94:	f240 1345 	movw	r3, #325	@ 0x145
 8003b98:	61fb      	str	r3, [r7, #28]
  uint8_t CS = 31;
 8003b9a:	231f      	movs	r3, #31
 8003b9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t scaler = 0; // = 256
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	623b      	str	r3, [r7, #32]

  const uint16_t RS_scaled = Rsense * 0xFFFF; // Scale to 16b
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003baa:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8003c80 <_ZN14TMC2160Stepper11rms_currentEt+0xf8>
 8003bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bb6:	ee17 3a90 	vmov	r3, s15
 8003bba:	837b      	strh	r3, [r7, #26]
  uint32_t numerator = 11585; // 32 * 256 * sqrt(2)
 8003bbc:	f642 5341 	movw	r3, #11585	@ 0x2d41
 8003bc0:	617b      	str	r3, [r7, #20]
  numerator *= RS_scaled;
 8003bc2:	8b7a      	ldrh	r2, [r7, #26]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	fb02 f303 	mul.w	r3, r2, r3
 8003bca:	617b      	str	r3, [r7, #20]
  numerator >>= 8;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	617b      	str	r3, [r7, #20]
  numerator *= mA;
 8003bd2:	897a      	ldrh	r2, [r7, #10]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	617b      	str	r3, [r7, #20]

  do {
    uint32_t denominator = V_fs * 0xFFFF >> 8;
 8003bdc:	4b29      	ldr	r3, [pc, #164]	@ (8003c84 <_ZN14TMC2160Stepper11rms_currentEt+0xfc>)
 8003bde:	613b      	str	r3, [r7, #16]
    denominator *= CS+1;
 8003be0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003be4:	3301      	adds	r3, #1
 8003be6:	461a      	mov	r2, r3
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	613b      	str	r3, [r7, #16]
    scaler = numerator / denominator;
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	623b      	str	r3, [r7, #32]

    if (scaler > 255) scaler = 0; // Maximum
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	2bff      	cmp	r3, #255	@ 0xff
 8003bfe:	d902      	bls.n	8003c06 <_ZN14TMC2160Stepper11rms_currentEt+0x7e>
 8003c00:	2300      	movs	r3, #0
 8003c02:	623b      	str	r3, [r7, #32]
 8003c04:	e007      	b.n	8003c16 <_ZN14TMC2160Stepper11rms_currentEt+0x8e>
    else if (scaler < 128) CS--;  // Try again with smaller CS
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c0a:	d804      	bhi.n	8003c16 <_ZN14TMC2160Stepper11rms_currentEt+0x8e>
 8003c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c10:	3b01      	subs	r3, #1
 8003c12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while(0 < scaler && scaler < 128);
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <_ZN14TMC2160Stepper11rms_currentEt+0x9a>
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c20:	d9dc      	bls.n	8003bdc <_ZN14TMC2160Stepper11rms_currentEt+0x54>


  if (CS > 31)
 8003c22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c26:	2b1f      	cmp	r3, #31
 8003c28:	d902      	bls.n	8003c30 <_ZN14TMC2160Stepper11rms_currentEt+0xa8>
    CS = 31;
 8003c2a:	231f      	movs	r3, #31
 8003c2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  GLOBAL_SCALER(scaler);
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	4619      	mov	r1, r3
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f826 	bl	8003c88 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>
  irun(CS);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fbdd 	bl	8003404 <_ZN10TMCStepper4irunEh>
  ihold(CS*holdMultiplier);
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c50:	ee07 3a90 	vmov	s15, r3
 8003c54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c66:	edc7 7a01 	vstr	s15, [r7, #4]
 8003c6a:	793b      	ldrb	r3, [r7, #4]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4610      	mov	r0, r2
 8003c72:	f7ff fbaa 	bl	80033ca <_ZN10TMCStepper5iholdEh>
}
 8003c76:	bf00      	nop
 8003c78:	3728      	adds	r7, #40	@ 0x28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	477fff00 	.word	0x477fff00
 8003c84:	000144fe 	.word	0x000144fe

08003c88 <_ZN14TMC2160Stepper13GLOBAL_SCALEREh>:
bool    TMC2160Stepper::dco_cfg6()       { TMC2160_n::IOIN_t r{0}; r.sr = IOIN(); return r.dco_cfg6; }
uint8_t TMC2160Stepper::version()        { TMC2160_n::IOIN_t r{0}; r.sr = IOIN(); return r.version; }

// W: GLOBAL_SCALER
uint8_t TMC2160Stepper::GLOBAL_SCALER() { return GLOBAL_SCALER_register.sr; }
void TMC2160Stepper::GLOBAL_SCALER(uint8_t input) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
  GLOBAL_SCALER_register.sr = input;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  write(GLOBAL_SCALER_register.address, GLOBAL_SCALER_register.sr);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8003caa:	210b      	movs	r1, #11
 8003cac:	4798      	blx	r3
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

// Protected
// addr needed for TMC2209
TMC2208Stepper::TMC2208Stepper(std::string SWRXpin, std::string SWTXpin, float RS, uint8_t addr) :
 8003cb8:	b590      	push	{r4, r7, lr}
 8003cba:	b095      	sub	sp, #84	@ 0x54
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6178      	str	r0, [r7, #20]
 8003cc0:	6139      	str	r1, [r7, #16]
 8003cc2:	60fa      	str	r2, [r7, #12]
 8003cc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cc8:	71fb      	strb	r3, [r7, #7]
    SWRXpin(SWRXpin),
    SWTXpin(SWRXpin),
    TMCStepper(RS),
    //RXTX_pin(SW_RX_pin == SW_TX_pin ? SW_RX_pin : 0),
    slave_address(addr)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	ed97 0a02 	vldr	s0, [r7, #8]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fc1b 	bl	800350c <_ZN10TMCStepperC1Ef>
 8003cd6:	4a47      	ldr	r2, [pc, #284]	@ (8003df4 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x13c>)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	831a      	strh	r2, [r3, #24]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	4a44      	ldr	r2, [pc, #272]	@ (8003df8 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x140>)
 8003ce6:	61da      	str	r2, [r3, #28]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2020 	strb.w	r2, [r3, #32]
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8003cf8:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8003cfc:	f022 0203 	bic.w	r2, r2, #3
 8003d00:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8003d0c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8003d10:	f022 020f 	bic.w	r2, r2, #15
 8003d14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    SWTXpin(SWRXpin),
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	3334      	adds	r3, #52	@ 0x34
 8003d78:	6939      	ldr	r1, [r7, #16]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f024 ffc7 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SWRXpin(SWRXpin),
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	334c      	adds	r3, #76	@ 0x4c
 8003d84:	6939      	ldr	r1, [r7, #16]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f024 ffc1 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    slave_address(addr)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	79fa      	ldrb	r2, [r7, #7]
 8003d90:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    {
        SoftwareSerial *SWSerialObj = new SoftwareSerial(SWRXpin, SWTXpin);
 8003d94:	209c      	movs	r0, #156	@ 0x9c
 8003d96:	f024 fcaf 	bl	80286f8 <_Znwj>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	461c      	mov	r4, r3
 8003d9e:	f107 031c 	add.w	r3, r7, #28
 8003da2:	6939      	ldr	r1, [r7, #16]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f024 ffb2 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003daa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003dae:	68f9      	ldr	r1, [r7, #12]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f024 ffac 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003db6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003dba:	f107 031c 	add.w	r3, r7, #28
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f7fe fbff 	bl	80025c4 <_ZN14SoftwareSerialC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8003dc6:	64fc      	str	r4, [r7, #76]	@ 0x4c
 8003dc8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f024 fd8e 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003dd2:	f107 031c 	add.w	r3, r7, #28
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f024 fd89 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        SWSerial = SWSerialObj;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003de0:	615a      	str	r2, [r3, #20]
        defaults();
 8003de2:	6978      	ldr	r0, [r7, #20]
 8003de4:	f000 f832 	bl	8003e4c <_ZN14TMC2208Stepper8defaultsEv>
    }
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	4618      	mov	r0, r3
 8003dec:	3754      	adds	r7, #84	@ 0x54
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd90      	pop	{r4, r7, pc}
 8003df2:	bf00      	nop
 8003df4:	0802b22c 	.word	0x0802b22c
 8003df8:	3de147ae 	.word	0x3de147ae

08003dfc <_ZN14TMC2208Stepper11beginSerialEm>:


void TMC2208Stepper::beginSerial(uint32_t baudrate) {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]

    SWSerial->begin(baudrate);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe fc65 	bl	80026de <_ZN14SoftwareSerial5beginEi>
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <_ZN14TMC2208Stepper5beginEv>:


void TMC2208Stepper::begin() {
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]

    beginSerial(19600);
 8003e24:	f644 4190 	movw	r1, #19600	@ 0x4c90
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff ffe7 	bl	8003dfc <_ZN14TMC2208Stepper11beginSerialEm>
    pdn_disable(true);
 8003e2e:	2101      	movs	r1, #1
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff fa69 	bl	8003308 <_ZN14TMC2208Stepper11pdn_disableEb>
    mstep_reg_select(true);
 8003e36:	2101      	movs	r1, #1
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff fa82 	bl	8003342 <_ZN14TMC2208Stepper16mstep_reg_selectEb>
    //Wait to initialize
    HAL_Delay(replyDelay);
 8003e3e:	2002      	movs	r0, #2
 8003e40:	f017 ff38 	bl	801bcb4 <HAL_Delay>

}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <_ZN14TMC2208Stepper8defaultsEv>:

void TMC2208Stepper::defaults() {
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
    GCONF_register.i_scale_analog = 1;
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.internal_rsense = 0; // OTP
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003e68:	f36f 0341 	bfc	r3, #1, #1
 8003e6c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.en_spreadcycle = 0; // OTP
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003e76:	f36f 0382 	bfc	r3, #2, #1
 8003e7a:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
    GCONF_register.multistep_filt = 1; // OTP
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	f892 3022 	ldrb.w	r3, [r2, #34]	@ 0x22
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22
    IHOLD_IRUN_register.iholddelay = 1; // OTP
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	7993      	ldrb	r3, [r2, #6]
 8003e90:	2101      	movs	r1, #1
 8003e92:	f361 0303 	bfi	r3, r1, #0, #4
 8003e96:	7193      	strb	r3, [r2, #6]
    TPOWERDOWN_register.sr = 20;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2214      	movs	r2, #20
 8003e9c:	71da      	strb	r2, [r3, #7]
    CHOPCONF_register.sr = 0x10000053;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8003ea6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f042 0210 	orr.w	r2, r2, #16
 8003ebc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    PWMCONF_register.sr = 0xC10D0024;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 8003ec8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f042 020d 	orr.w	r2, r2, #13
 8003ed8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8003edc:	2200      	movs	r2, #0
 8003ede:	f062 023e 	orn	r2, r2, #62	@ 0x3e
 8003ee2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  //MSLUT4_register.sr = ???;
  //MSLUT5_register.sr = ???;
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSTART_register.start_sin90 = 247;
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <_ZN14TMC2208Stepper7calcCRCEPhh>:
    PWMCONF(PWMCONF_register.sr);
}

bool TMC2208Stepper::isEnabled() { return !enn() && toff(); }

uint8_t TMC2208Stepper::calcCRC(uint8_t datagram[], uint8_t len) {
 8003ef2:	b480      	push	{r7}
 8003ef4:	b087      	sub	sp, #28
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	4613      	mov	r3, r2
 8003efe:	71fb      	strb	r3, [r7, #7]
    uint8_t crc = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < len; i++) {
 8003f04:	2300      	movs	r3, #0
 8003f06:	75bb      	strb	r3, [r7, #22]
 8003f08:	e027      	b.n	8003f5a <_ZN14TMC2208Stepper7calcCRCEPhh+0x68>
        uint8_t currentByte = datagram[i];
 8003f0a:	7dbb      	ldrb	r3, [r7, #22]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	4413      	add	r3, r2
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	757b      	strb	r3, [r7, #21]
        for (uint8_t j = 0; j < 8; j++) {
 8003f14:	2300      	movs	r3, #0
 8003f16:	753b      	strb	r3, [r7, #20]
 8003f18:	e019      	b.n	8003f4e <_ZN14TMC2208Stepper7calcCRCEPhh+0x5c>
            if ((crc >> 7) ^ (currentByte & 0x01)) {
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
 8003f1c:	09db      	lsrs	r3, r3, #7
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	7d7b      	ldrb	r3, [r7, #21]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d007      	beq.n	8003f3c <_ZN14TMC2208Stepper7calcCRCEPhh+0x4a>
                crc = (crc << 1) ^ 0x07;
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	b25b      	sxtb	r3, r3
 8003f32:	f083 0307 	eor.w	r3, r3, #7
 8003f36:	b25b      	sxtb	r3, r3
 8003f38:	75fb      	strb	r3, [r7, #23]
 8003f3a:	e002      	b.n	8003f42 <_ZN14TMC2208Stepper7calcCRCEPhh+0x50>
            } else {
                crc = (crc << 1);
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	75fb      	strb	r3, [r7, #23]
            }
            crc &= 0xff;
            currentByte = currentByte >> 1;
 8003f42:	7d7b      	ldrb	r3, [r7, #21]
 8003f44:	085b      	lsrs	r3, r3, #1
 8003f46:	757b      	strb	r3, [r7, #21]
        for (uint8_t j = 0; j < 8; j++) {
 8003f48:	7d3b      	ldrb	r3, [r7, #20]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	753b      	strb	r3, [r7, #20]
 8003f4e:	7d3b      	ldrb	r3, [r7, #20]
 8003f50:	2b07      	cmp	r3, #7
 8003f52:	d9e2      	bls.n	8003f1a <_ZN14TMC2208Stepper7calcCRCEPhh+0x28>
    for (uint8_t i = 0; i < len; i++) {
 8003f54:	7dbb      	ldrb	r3, [r7, #22]
 8003f56:	3301      	adds	r3, #1
 8003f58:	75bb      	strb	r3, [r7, #22]
 8003f5a:	7dba      	ldrb	r2, [r7, #22]
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d3d3      	bcc.n	8003f0a <_ZN14TMC2208Stepper7calcCRCEPhh+0x18>
        }
    }
    return crc;
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <_ZN14TMC2208Stepper9availableEv>:

__attribute__((weak))
int TMC2208Stepper::available() {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
    int out = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]

	out = SWSerial->available();
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fe fd28 	bl	80029d6 <_ZN14SoftwareSerial9availableEv>
 8003f86:	60f8      	str	r0, [r7, #12]

    return out;
 8003f88:	68fb      	ldr	r3, [r7, #12]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <_ZN14TMC2208Stepper21preWriteCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::preWriteCommunication() {
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
    //this->debug1->write(1);
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <_ZN14TMC2208Stepper20preReadCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::preReadCommunication() {
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]

	SWSerial->listen();	
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe fbf8 	bl	80027a8 <_ZN14SoftwareSerial6listenEv>
    //this->debug2->write(1);				
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <_ZN14TMC2208Stepper22postWriteCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::postWriteCommunication() {
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
    //this->debug1->write(0);
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <_ZN14TMC2208Stepper21postReadCommunicationEv>:


__attribute__((weak))
void TMC2208Stepper::postReadCommunication() {
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
    //this->debug2->write(0);
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <_ZN14TMC2208Stepper11serial_readEv>:


__attribute__((weak))
int16_t TMC2208Stepper::serial_read() {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
    int16_t out = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	81fb      	strh	r3, [r7, #14]
     
    out = SWSerial->read();
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fe fd34 	bl	8002a66 <_ZN14SoftwareSerial4readEv>
 8003ffe:	4603      	mov	r3, r0
 8004000:	81fb      	strh	r3, [r7, #14]

	return out;
 8004002:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <_ZN14TMC2208Stepper12serial_writeEh>:

__attribute__((weak))
uint8_t TMC2208Stepper::serial_write(const uint8_t data) {
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	460b      	mov	r3, r1
 8004018:	70fb      	strb	r3, [r7, #3]
    int out = 0;
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]

    SWSerial->write(data);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe fce7 	bl	80029fa <_ZN14SoftwareSerial5writeEi>

    return out;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	b2db      	uxtb	r3, r3
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <_ZN14TMC2208Stepper5writeEhm>:


void TMC2208Stepper::write(uint8_t addr, uint32_t regVal) {
 8004038:	b590      	push	{r4, r7, lr}
 800403a:	b089      	sub	sp, #36	@ 0x24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	460b      	mov	r3, r1
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	72fb      	strb	r3, [r7, #11]
    uint8_t len = 7;
 8004046:	2307      	movs	r3, #7
 8004048:	77bb      	strb	r3, [r7, #30]
    addr |= TMC_WRITE;
 800404a:	7afb      	ldrb	r3, [r7, #11]
 800404c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004050:	72fb      	strb	r3, [r7, #11]
    uint8_t datagram[] = {TMC2208_SYNC, slave_address, addr, (uint8_t)(regVal>>24), (uint8_t)(regVal>>16), (uint8_t)(regVal>>8), (uint8_t)(regVal>>0), 0x00};
 8004052:	f107 0314 	add.w	r3, r7, #20
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	605a      	str	r2, [r3, #4]
 800405c:	2305      	movs	r3, #5
 800405e:	753b      	strb	r3, [r7, #20]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8004066:	757b      	strb	r3, [r7, #21]
 8004068:	7afb      	ldrb	r3, [r7, #11]
 800406a:	75bb      	strb	r3, [r7, #22]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	0e1b      	lsrs	r3, r3, #24
 8004070:	b2db      	uxtb	r3, r3
 8004072:	75fb      	strb	r3, [r7, #23]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	0c1b      	lsrs	r3, r3, #16
 8004078:	b2db      	uxtb	r3, r3
 800407a:	763b      	strb	r3, [r7, #24]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	b2db      	uxtb	r3, r3
 8004082:	767b      	strb	r3, [r7, #25]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	76bb      	strb	r3, [r7, #26]
	
    datagram[len] = calcCRC(datagram, len);
 800408a:	7fbc      	ldrb	r4, [r7, #30]
 800408c:	7fba      	ldrb	r2, [r7, #30]
 800408e:	f107 0314 	add.w	r3, r7, #20
 8004092:	4619      	mov	r1, r3
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff ff2c 	bl	8003ef2 <_ZN14TMC2208Stepper7calcCRCEPhh>
 800409a:	4603      	mov	r3, r0
 800409c:	461a      	mov	r2, r3
 800409e:	f104 0320 	add.w	r3, r4, #32
 80040a2:	443b      	add	r3, r7
 80040a4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	
	//printf("write datagram = %x, %x, %x, %x, %x, %x, %x, %x\n", datagram[0], datagram[1], datagram[2], datagram[3], datagram[4], datagram[5], datagram[6], datagram[7]);
    
    preWriteCommunication();
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff ff72 	bl	8003f92 <_ZN14TMC2208Stepper21preWriteCommunicationEv>

    for(uint8_t i=0; i<=len; i++) {
 80040ae:	2300      	movs	r3, #0
 80040b0:	77fb      	strb	r3, [r7, #31]
 80040b2:	e013      	b.n	80040dc <_ZN14TMC2208Stepper5writeEhm+0xa4>
        bytesWritten += serial_write(datagram[i]);
 80040b4:	7ffb      	ldrb	r3, [r7, #31]
 80040b6:	3320      	adds	r3, #32
 80040b8:	443b      	add	r3, r7
 80040ba:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80040be:	4619      	mov	r1, r3
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7ff ffa4 	bl	800400e <_ZN14TMC2208Stepper12serial_writeEh>
 80040c6:	4603      	mov	r3, r0
 80040c8:	461a      	mov	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8b1b      	ldrh	r3, [r3, #24]
 80040ce:	4413      	add	r3, r2
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	831a      	strh	r2, [r3, #24]
    for(uint8_t i=0; i<=len; i++) {
 80040d6:	7ffb      	ldrb	r3, [r7, #31]
 80040d8:	3301      	adds	r3, #1
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	7ffa      	ldrb	r2, [r7, #31]
 80040de:	7fbb      	ldrb	r3, [r7, #30]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d9e7      	bls.n	80040b4 <_ZN14TMC2208Stepper5writeEhm+0x7c>
    }
    postWriteCommunication();
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f7ff ff6b 	bl	8003fc0 <_ZN14TMC2208Stepper22postWriteCommunicationEv>

    //delay(replyDelay);
    //ThisThread::sleep_for(150);
    HAL_Delay(5);
 80040ea:	2005      	movs	r0, #5
 80040ec:	f017 fde2 	bl	801bcb4 <HAL_Delay>
}
 80040f0:	bf00      	nop
 80040f2:	3724      	adds	r7, #36	@ 0x24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd90      	pop	{r4, r7, pc}

080040f8 <_ZN14TMC2208Stepper13_sendDatagramEPhht>:

uint64_t TMC2208Stepper::_sendDatagram(uint8_t datagram[], const uint8_t len, uint16_t timeout) {
 80040f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040fc:	b092      	sub	sp, #72	@ 0x48
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6178      	str	r0, [r7, #20]
 8004102:	6139      	str	r1, [r7, #16]
 8004104:	4611      	mov	r1, r2
 8004106:	461a      	mov	r2, r3
 8004108:	460b      	mov	r3, r1
 800410a:	73fb      	strb	r3, [r7, #15]
 800410c:	4613      	mov	r3, r2
 800410e:	81bb      	strh	r3, [r7, #12]
	
    while (available() > 0) serial_read(); // Flush
 8004110:	e002      	b.n	8004118 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x20>
 8004112:	6978      	ldr	r0, [r7, #20]
 8004114:	f7ff ff68 	bl	8003fe8 <_ZN14TMC2208Stepper11serial_readEv>
 8004118:	6978      	ldr	r0, [r7, #20]
 800411a:	f7ff ff29 	bl	8003f70 <_ZN14TMC2208Stepper9availableEv>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	bfcc      	ite	gt
 8004124:	2301      	movgt	r3, #1
 8004126:	2300      	movle	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f1      	bne.n	8004112 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1a>

    preWriteCommunication();
 800412e:	6978      	ldr	r0, [r7, #20]
 8004130:	f7ff ff2f 	bl	8003f92 <_ZN14TMC2208Stepper21preWriteCommunicationEv>
	for(int i=0; i<=len; i++)
 8004134:	2300      	movs	r3, #0
 8004136:	647b      	str	r3, [r7, #68]	@ 0x44
 8004138:	e00a      	b.n	8004150 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x58>
    {   
        serial_write(datagram[i]);
 800413a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4413      	add	r3, r2
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	4619      	mov	r1, r3
 8004144:	6978      	ldr	r0, [r7, #20]
 8004146:	f7ff ff62 	bl	800400e <_ZN14TMC2208Stepper12serial_writeEh>
	for(int i=0; i<=len; i++)
 800414a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800414c:	3301      	adds	r3, #1
 800414e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004154:	429a      	cmp	r2, r3
 8004156:	ddf0      	ble.n	800413a <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x42>
    }
	//delay(replyDelay);
    //ThisThread::sleep_for(replyDelay);
    postWriteCommunication();
 8004158:	6978      	ldr	r0, [r7, #20]
 800415a:	f7ff ff31 	bl	8003fc0 <_ZN14TMC2208Stepper22postWriteCommunicationEv>

	// scan for the rx frame and read it
	uint32_t ms = HAL_GetTick();
 800415e:	f017 fd9d 	bl	801bc9c <HAL_GetTick>
 8004162:	6438      	str	r0, [r7, #64]	@ 0x40
	uint32_t sync_target = (static_cast<uint32_t>(datagram[0])<<16) | 0xFF00 | datagram[2];
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	041b      	lsls	r3, r3, #16
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	3202      	adds	r2, #2
 800416e:	7812      	ldrb	r2, [r2, #0]
 8004170:	4313      	orrs	r3, r2
 8004172:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 8004176:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t sync = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	63fb      	str	r3, [r7, #60]	@ 0x3c

	do {
		uint32_t ms2 = HAL_GetTick();
 800417c:	f017 fd8e 	bl	801bc9c <HAL_GetTick>
 8004180:	6278      	str	r0, [r7, #36]	@ 0x24
		if (ms2 != ms) {
 8004182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004186:	429a      	cmp	r2, r3
 8004188:	d004      	beq.n	8004194 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x9c>
			// 1ms tick
			ms = ms2;
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	643b      	str	r3, [r7, #64]	@ 0x40
			timeout--;
 800418e:	89bb      	ldrh	r3, [r7, #12]
 8004190:	3b01      	subs	r3, #1
 8004192:	81bb      	strh	r3, [r7, #12]
		}
		if (!timeout) return 0;
 8004194:	89bb      	ldrh	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d104      	bne.n	80041a4 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xac>
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	e080      	b.n	80042a6 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1ae>

		int16_t res = serial_read();
 80041a4:	6978      	ldr	r0, [r7, #20]
 80041a6:	f7ff ff1f 	bl	8003fe8 <_ZN14TMC2208Stepper11serial_readEv>
 80041aa:	4603      	mov	r3, r0
 80041ac:	847b      	strh	r3, [r7, #34]	@ 0x22
		if (res < 0) continue;
 80041ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	db0c      	blt.n	80041d0 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xd8>

		sync <<= 8;
 80041b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041b8:	021b      	lsls	r3, r3, #8
 80041ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sync |= res & 0xFF;
 80041bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041c2:	4313      	orrs	r3, r2
 80041c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		sync &= 0xFFFFFF;
 80041c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041ce:	e000      	b.n	80041d2 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0xda>
		if (res < 0) continue;
 80041d0:	bf00      	nop

	} while (sync != sync_target);
 80041d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d1d0      	bne.n	800417c <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x84>

	uint64_t out = sync;
 80041da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041dc:	2200      	movs	r2, #0
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	607a      	str	r2, [r7, #4]
 80041e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	ms = HAL_GetTick();
 80041ea:	f017 fd57 	bl	801bc9c <HAL_GetTick>
 80041ee:	6438      	str	r0, [r7, #64]	@ 0x40
	timeout = this->abort_window;
 80041f0:	2305      	movs	r3, #5
 80041f2:	81bb      	strh	r3, [r7, #12]
		 
	for(uint8_t i=0; i<5;) {
 80041f4:	2300      	movs	r3, #0
 80041f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80041fa:	e03f      	b.n	800427c <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x184>
		uint32_t ms2 = HAL_GetTick();
 80041fc:	f017 fd4e 	bl	801bc9c <HAL_GetTick>
 8004200:	61f8      	str	r0, [r7, #28]
		if (ms2 != ms) {
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004206:	429a      	cmp	r2, r3
 8004208:	d004      	beq.n	8004214 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x11c>
			// 1ms tick
			ms = ms2;
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	643b      	str	r3, [r7, #64]	@ 0x40
			timeout--;
 800420e:	89bb      	ldrh	r3, [r7, #12]
 8004210:	3b01      	subs	r3, #1
 8004212:	81bb      	strh	r3, [r7, #12]
		}
		if (!timeout) return 0;
 8004214:	89bb      	ldrh	r3, [r7, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d104      	bne.n	8004224 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x12c>
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	e040      	b.n	80042a6 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x1ae>

		int16_t res = serial_read();
 8004224:	6978      	ldr	r0, [r7, #20]
 8004226:	f7ff fedf 	bl	8003fe8 <_ZN14TMC2208Stepper11serial_readEv>
 800422a:	4603      	mov	r3, r0
 800422c:	837b      	strh	r3, [r7, #26]
		if (res < 0) continue;
 800422e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004232:	2b00      	cmp	r3, #0
 8004234:	db21      	blt.n	800427a <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x182>

		out <<= 8;
 8004236:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	020b      	lsls	r3, r1, #8
 8004244:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004248:	0202      	lsls	r2, r0, #8
 800424a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		out |= res & 0xFF;
 800424e:	8b7b      	ldrh	r3, [r7, #26]
 8004250:	b29b      	uxth	r3, r3
 8004252:	2200      	movs	r2, #0
 8004254:	469a      	mov	sl, r3
 8004256:	4693      	mov	fp, r2
 8004258:	f00a 04ff 	and.w	r4, sl, #255	@ 0xff
 800425c:	2500      	movs	r5, #0
 800425e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004262:	ea42 0804 	orr.w	r8, r2, r4
 8004266:	ea43 0905 	orr.w	r9, r3, r5
 800426a:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
		i++;
 800426e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004272:	3301      	adds	r3, #1
 8004274:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004278:	e000      	b.n	800427c <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x184>
		if (res < 0) continue;
 800427a:	bf00      	nop
	for(uint8_t i=0; i<5;) {
 800427c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004280:	2b04      	cmp	r3, #4
 8004282:	d9bb      	bls.n	80041fc <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x104>
	}

	while (available() > 0) serial_read(); // Flush
 8004284:	e002      	b.n	800428c <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x194>
 8004286:	6978      	ldr	r0, [r7, #20]
 8004288:	f7ff feae 	bl	8003fe8 <_ZN14TMC2208Stepper11serial_readEv>
 800428c:	6978      	ldr	r0, [r7, #20]
 800428e:	f7ff fe6f 	bl	8003f70 <_ZN14TMC2208Stepper9availableEv>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	bfcc      	ite	gt
 8004298:	2301      	movgt	r3, #1
 800429a:	2300      	movle	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f1      	bne.n	8004286 <_ZN14TMC2208Stepper13_sendDatagramEPhht+0x18e>

	return out;
 80042a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 80042a6:	4610      	mov	r0, r2
 80042a8:	4619      	mov	r1, r3
 80042aa:	3748      	adds	r7, #72	@ 0x48
 80042ac:	46bd      	mov	sp, r7
 80042ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080042b2 <_ZN14TMC2208Stepper4readEh>:

uint32_t TMC2208Stepper::read(uint8_t addr) {
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b088      	sub	sp, #32
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	460b      	mov	r3, r1
 80042bc:	70fb      	strb	r3, [r7, #3]
    constexpr uint8_t len = 3;
 80042be:	2303      	movs	r3, #3
 80042c0:	75bb      	strb	r3, [r7, #22]
    addr |= TMC_READ;
    uint8_t datagram[] = {TMC2208_SYNC, slave_address, addr, 0x00};
 80042c2:	2300      	movs	r3, #0
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	2305      	movs	r3, #5
 80042c8:	743b      	strb	r3, [r7, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80042d0:	747b      	strb	r3, [r7, #17]
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	74bb      	strb	r3, [r7, #18]
    datagram[len] = calcCRC(datagram, len);
 80042d6:	f107 0310 	add.w	r3, r7, #16
 80042da:	2203      	movs	r2, #3
 80042dc:	4619      	mov	r1, r3
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff fe07 	bl	8003ef2 <_ZN14TMC2208Stepper7calcCRCEPhh>
 80042e4:	4603      	mov	r3, r0
 80042e6:	74fb      	strb	r3, [r7, #19]
    uint64_t out = 0x00000000UL;
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for (uint8_t i = 0; i < max_retries; i++) {			 
 80042f4:	2300      	movs	r3, #0
 80042f6:	75fb      	strb	r3, [r7, #23]
 80042f8:	e080      	b.n	80043fc <_ZN14TMC2208Stepper4readEh+0x14a>
        preReadCommunication();
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff fe53 	bl	8003fa6 <_ZN14TMC2208Stepper20preReadCommunicationEv>
        out = _sendDatagram(datagram, len, abort_window);
 8004300:	f107 0110 	add.w	r1, r7, #16
 8004304:	2305      	movs	r3, #5
 8004306:	2203      	movs	r2, #3
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff fef5 	bl	80040f8 <_ZN14TMC2208Stepper13_sendDatagramEPhht>
 800430e:	e9c7 0106 	strd	r0, r1, [r7, #24]
        postReadCommunication();
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff fe5e 	bl	8003fd4 <_ZN14TMC2208Stepper21postReadCommunicationEv>

//        delay(replyDelay);
        //ThisThread::sleep_for(replyDelay);
        HAL_Delay(5);
 8004318:	2005      	movs	r0, #5
 800431a:	f017 fccb 	bl	801bcb4 <HAL_Delay>

        CRCerror = false;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2020 	strb.w	r2, [r3, #32]
        uint8_t out_datagram[] = {
            static_cast<uint8_t>(out>>56),
 8004326:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	0e0a      	lsrs	r2, r1, #24
 8004334:	2300      	movs	r3, #0
            static_cast<uint8_t>(out>>32),
            static_cast<uint8_t>(out>>24),
            static_cast<uint8_t>(out>>16),
            static_cast<uint8_t>(out>> 8),
            static_cast<uint8_t>(out>> 0)
        };
 8004336:	b2d3      	uxtb	r3, r2
 8004338:	723b      	strb	r3, [r7, #8]
            static_cast<uint8_t>(out>>48),
 800433a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	0c0a      	lsrs	r2, r1, #16
 8004348:	2300      	movs	r3, #0
        };
 800434a:	b2d3      	uxtb	r3, r2
 800434c:	727b      	strb	r3, [r7, #9]
            static_cast<uint8_t>(out>>40),
 800434e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	0a0a      	lsrs	r2, r1, #8
 800435c:	2300      	movs	r3, #0
        };
 800435e:	b2d3      	uxtb	r3, r2
 8004360:	72bb      	strb	r3, [r7, #10]
            static_cast<uint8_t>(out>>32),
 8004362:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	000a      	movs	r2, r1
 8004370:	2300      	movs	r3, #0
        };
 8004372:	b2d3      	uxtb	r3, r2
 8004374:	72fb      	strb	r3, [r7, #11]
            static_cast<uint8_t>(out>>24),
 8004376:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	0e02      	lsrs	r2, r0, #24
 8004384:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004388:	0e0b      	lsrs	r3, r1, #24
        };
 800438a:	b2d3      	uxtb	r3, r2
 800438c:	733b      	strb	r3, [r7, #12]
            static_cast<uint8_t>(out>>16),
 800438e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	0c02      	lsrs	r2, r0, #16
 800439c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80043a0:	0c0b      	lsrs	r3, r1, #16
        };
 80043a2:	b2d3      	uxtb	r3, r2
 80043a4:	737b      	strb	r3, [r7, #13]
            static_cast<uint8_t>(out>> 8),
 80043a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	0a02      	lsrs	r2, r0, #8
 80043b4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80043b8:	0a0b      	lsrs	r3, r1, #8
        };
 80043ba:	b2d3      	uxtb	r3, r2
 80043bc:	73bb      	strb	r3, [r7, #14]
 80043be:	7e3b      	ldrb	r3, [r7, #24]
 80043c0:	73fb      	strb	r3, [r7, #15]
        //printf("read  datagram = %x, %x, %x, %x, %x, %x, %x, %x\n", out_datagram[0], out_datagram[1], out_datagram[2], out_datagram[3], out_datagram[4], out_datagram[5], out_datagram[6], out_datagram[7]);
		
        uint8_t crc = calcCRC(out_datagram, 7);
 80043c2:	f107 0308 	add.w	r3, r7, #8
 80043c6:	2207      	movs	r2, #7
 80043c8:	4619      	mov	r1, r3
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff fd91 	bl	8003ef2 <_ZN14TMC2208Stepper7calcCRCEPhh>
 80043d0:	4603      	mov	r3, r0
 80043d2:	757b      	strb	r3, [r7, #21]
        if ((crc != static_cast<uint8_t>(out)) || crc == 0 ) {
 80043d4:	7e3b      	ldrb	r3, [r7, #24]
 80043d6:	7d7a      	ldrb	r2, [r7, #21]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d102      	bne.n	80043e2 <_ZN14TMC2208Stepper4readEh+0x130>
 80043dc:	7d7b      	ldrb	r3, [r7, #21]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d110      	bne.n	8004404 <_ZN14TMC2208Stepper4readEh+0x152>
            CRCerror = true;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2020 	strb.w	r2, [r3, #32]
            out = 0;
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (uint8_t i = 0; i < max_retries; i++) {			 
 80043f6:	7dfb      	ldrb	r3, [r7, #23]
 80043f8:	3301      	adds	r3, #1
 80043fa:	75fb      	strb	r3, [r7, #23]
 80043fc:	7dfb      	ldrb	r3, [r7, #23]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	f67f af7b 	bls.w	80042fa <_ZN14TMC2208Stepper4readEh+0x48>
        } else {
            break;
        }
    }

    return out>>8;
 8004404:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	0a02      	lsrs	r2, r0, #8
 8004412:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004416:	0a0b      	lsrs	r3, r1, #8
 8004418:	4613      	mov	r3, r2
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <_ZN14TMC2209Stepper6SGTHRSEh>:
    CHOPCONF(CHOPCONF_register.sr);
    PWMCONF(PWMCONF_register.sr);
    TCOOLTHRS(TCOOLTHRS_register.sr);
}

void TMC2209Stepper::SGTHRS(uint8_t input) {
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	460b      	mov	r3, r1
 800442c:	70fb      	strb	r3, [r7, #3]
    SGTHRS_register.sr = input;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	78fa      	ldrb	r2, [r7, #3]
 8004432:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    write(SGTHRS_register.address, SGTHRS_register.sr);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 8004444:	2140      	movs	r1, #64	@ 0x40
 8004446:	4798      	blx	r3
}
 8004448:	bf00      	nop
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <_ZN14TMC2209Stepper9TCOOLTHRSEm>:
    return SGTHRS_register.sr;
}

// W: TCOOLTHRS
uint32_t TMC2209Stepper::TCOOLTHRS() { return TCOOLTHRS_register.sr; }
void TMC2209Stepper::TCOOLTHRS(uint32_t input) {
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  TCOOLTHRS_register.sr = input;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	b2d1      	uxtb	r1, r2
 8004464:	2000      	movs	r0, #0
 8004466:	4301      	orrs	r1, r0
 8004468:	f883 1065 	strb.w	r1, [r3, #101]	@ 0x65
 800446c:	0a11      	lsrs	r1, r2, #8
 800446e:	b2c9      	uxtb	r1, r1
 8004470:	2000      	movs	r0, #0
 8004472:	4301      	orrs	r1, r0
 8004474:	f883 1066 	strb.w	r1, [r3, #102]	@ 0x66
 8004478:	0c12      	lsrs	r2, r2, #16
 800447a:	f002 020f 	and.w	r2, r2, #15
 800447e:	f002 000f 	and.w	r0, r2, #15
 8004482:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 8004486:	f022 020f 	bic.w	r2, r2, #15
 800448a:	4611      	mov	r1, r2
 800448c:	4602      	mov	r2, r0
 800448e:	430a      	orrs	r2, r1
 8004490:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  write(TCOOLTHRS_register.address, TCOOLTHRS_register.sr);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80044a0:	f3c2 2213 	ubfx	r2, r2, #8, #20
 80044a4:	2114      	movs	r1, #20
 80044a6:	4798      	blx	r3
}
 80044a8:	bf00      	nop
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <_ZN14TMC5130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC5130Stepper::TMC5130Stepper(const std::string& pinCS, float RS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	6178      	str	r0, [r7, #20]
 80044b8:	6139      	str	r1, [r7, #16]
 80044ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80044be:	60ba      	str	r2, [r7, #8]
 80044c0:	607b      	str	r3, [r7, #4]
  TMC2160Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 80044c2:	6978      	ldr	r0, [r7, #20]
 80044c4:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	ed97 0a03 	vldr	s0, [r7, #12]
 80044d6:	6939      	ldr	r1, [r7, #16]
 80044d8:	f7ff fa64 	bl	80039a4 <_ZN14TMC2160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>
 80044dc:	4a47      	ldr	r2, [pc, #284]	@ (80045fc <_ZN14TMC5130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x14c>)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	f8b2 3048 	ldrh.w	r3, [r2, #72]	@ 0x48
 80044e8:	f36f 030b 	bfc	r3, #0, #12
 80044ec:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	f892 304a 	ldrb.w	r3, [r2, #74]	@ 0x4a
 80044f6:	f36f 0300 	bfc	r3, #0, #1
 80044fa:	f882 304a 	strb.w	r3, [r2, #74]	@ 0x4a
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
 8004506:	2200      	movs	r2, #0
 8004508:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800450c:	2200      	movs	r2, #0
 800450e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8004512:	2200      	movs	r2, #0
 8004514:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	f892 304f 	ldrb.w	r3, [r2, #79]	@ 0x4f
 800451e:	f36f 0301 	bfc	r3, #0, #2
 8004522:	f882 304f 	strb.w	r3, [r2, #79]	@ 0x4f
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2200      	movs	r2, #0
 800452a:	651a      	str	r2, [r3, #80]	@ 0x50
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2200      	movs	r2, #0
 8004530:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8004534:	f893 2056 	ldrb.w	r2, [r3, #86]	@ 0x56
 8004538:	f022 0203 	bic.w	r2, r2, #3
 800453c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
 8004556:	2200      	movs	r2, #0
 8004558:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
 800455c:	f893 205b 	ldrb.w	r2, [r3, #91]	@ 0x5b
 8004560:	f022 020f 	bic.w	r2, r2, #15
 8004564:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2200      	movs	r2, #0
 800456c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2200      	movs	r2, #0
 8004574:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 8004578:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 800457c:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8004580:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 80045ae:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 80045b2:	f022 0203 	bic.w	r2, r2, #3
 80045b6:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2200      	movs	r2, #0
 80045be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	f8b2 306a 	ldrh.w	r3, [r2, #106]	@ 0x6a
 80045c8:	f36f 030b 	bfc	r3, #0, #12
 80045cc:	f8a2 306a 	strh.w	r3, [r2, #106]	@ 0x6a
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	f8b2 306c 	ldrh.w	r3, [r2, #108]	@ 0x6c
 80045d6:	f36f 030a 	bfc	r3, #0, #11
 80045da:	f8a2 306c 	strh.w	r3, [r2, #108]	@ 0x6c
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  { defaults(); }
 80045ec:	6978      	ldr	r0, [r7, #20]
 80045ee:	f000 f81b 	bl	8004628 <_ZN14TMC5130Stepper8defaultsEv>
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	0802b31c 	.word	0x0802b31c

08004600 <_ZN14TMC5130Stepper5beginEv>:

TMC5130Stepper::TMC5130Stepper(const std::string& pinCS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
  TMC2160Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC5130Stepper::begin() {
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  TMC2160Stepper::begin();
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff fa00 	bl	8003a10 <_ZN14TMC2160Stepper5beginEv>

  XTARGET(0);
 8004610:	2100      	movs	r1, #0
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f838 	bl	8004688 <_ZN14TMC5130Stepper7XTARGETEl>
  XACTUAL(0);
 8004618:	2100      	movs	r1, #0
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f824 	bl	8004668 <_ZN14TMC5130Stepper7XACTUALEl>
  //while (( RAMP_STAT() & cfg.VZERO_bm) != cfg.VZERO_bm) {}
}
 8004620:	bf00      	nop
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <_ZN14TMC5130Stepper8defaultsEv>:

void TMC5130Stepper::defaults() {
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  OUTPUT_register.sr = 1;
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	f892 304a 	ldrb.w	r3, [r2, #74]	@ 0x4a
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	f882 304a 	strb.w	r3, [r2, #74]	@ 0x4a
  ENC_CONST_register.sr = 65536;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
 8004646:	2200      	movs	r2, #0
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  PWMCONF_register.sr = 0x00050480;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a04      	ldr	r2, [pc, #16]	@ (8004664 <_ZN14TMC5130Stepper8defaultsEv+0x3c>)
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	00050480 	.word	0x00050480

08004668 <_ZN14TMC5130Stepper7XACTUALEl>:
  write(RAMPMODE_register.address, RAMPMODE_register.sr);
}
///////////////////////////////////////////////////////////////////////////////////////
// RW: XACTUAL
int32_t TMC5130Stepper::XACTUAL() { return read(XACTUAL_register.address); }
void TMC5130Stepper::XACTUAL(int32_t input) {
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  write(XACTUAL_register.address, input);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	2121      	movs	r1, #33	@ 0x21
 800467e:	4798      	blx	r3
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <_ZN14TMC5130Stepper7XTARGETEl>:
  write(TZEROWAIT_register.address, TZEROWAIT_register.sr);
}
///////////////////////////////////////////////////////////////////////////////////////
// RW: XTARGET
int32_t TMC5130Stepper::XTARGET() { return read(XTARGET_t::address); }
void TMC5130Stepper::XTARGET(int32_t input) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  write(XTARGET_t::address, input);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	212d      	movs	r1, #45	@ 0x2d
 800469e:	4798      	blx	r3
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <_ZN14TMC5160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>:
#include "TMCStepper.h"
#include "TMC_MACROS.h"

TMC5160Stepper::TMC5160Stepper(const std::string& pinCS, float RS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	6178      	str	r0, [r7, #20]
 80046b0:	6139      	str	r1, [r7, #16]
 80046b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80046b6:	60ba      	str	r2, [r7, #8]
 80046b8:	607b      	str	r3, [r7, #4]
  TMC5130Stepper(pinCS, RS, pinMOSI, pinMISO, pinSCK, link)
 80046ba:	6978      	ldr	r0, [r7, #20]
 80046bc:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	ed97 0a03 	vldr	s0, [r7, #12]
 80046ce:	6939      	ldr	r1, [r7, #16]
 80046d0:	f7ff feee 	bl	80044b0 <_ZN14TMC5130StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>
 80046d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004700 <_ZN14TMC5160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a+0x58>)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2200      	movs	r2, #0
 80046de:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80046e2:	f893 2074 	ldrb.w	r2, [r3, #116]	@ 0x74
 80046e6:	f022 020f 	bic.w	r2, r2, #15
 80046ea:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  { defaults(); }
 80046ee:	6978      	ldr	r0, [r7, #20]
 80046f0:	f000 f808 	bl	8004704 <_ZN14TMC5160Stepper8defaultsEv>
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	0802b358 	.word	0x0802b358

08004704 <_ZN14TMC5160Stepper8defaultsEv>:

TMC5160Stepper::TMC5160Stepper(const std::string& pinCS, const std::string& pinMOSI, const std::string& pinMISO, const std::string& pinSCK, int8_t link) :
  TMC5130Stepper(pinCS, default_RS, pinMOSI, pinMISO, pinSCK, link)
  { defaults(); }

void TMC5160Stepper::defaults() {
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  SHORT_CONF_register.s2vs_level = 6;
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	f892 303d 	ldrb.w	r3, [r2, #61]	@ 0x3d
 8004712:	2106      	movs	r1, #6
 8004714:	f361 0303 	bfi	r3, r1, #0, #4
 8004718:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  SHORT_CONF_register.s2g_level = 6;
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	f892 303e 	ldrb.w	r3, [r2, #62]	@ 0x3e
 8004722:	2106      	movs	r1, #6
 8004724:	f361 0303 	bfi	r3, r1, #0, #4
 8004728:	f882 303e 	strb.w	r3, [r2, #62]	@ 0x3e
  SHORT_CONF_register.shortfilter = 0b01;
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	f892 303f 	ldrb.w	r3, [r2, #63]	@ 0x3f
 8004732:	2101      	movs	r1, #1
 8004734:	f361 0301 	bfi	r3, r1, #0, #2
 8004738:	f882 303f 	strb.w	r3, [r2, #63]	@ 0x3f
  SHORT_CONF_register.shortdelay = 0;
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	f892 303f 	ldrb.w	r3, [r2, #63]	@ 0x3f
 8004742:	f36f 0382 	bfc	r3, #2, #1
 8004746:	f882 303f 	strb.w	r3, [r2, #63]	@ 0x3f
  DRV_CONF_register.bbmtime = 0;
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 8004750:	f36f 0304 	bfc	r3, #0, #5
 8004754:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
  DRV_CONF_register.bbmclks = 4;
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 800475e:	2104      	movs	r1, #4
 8004760:	f361 0303 	bfi	r3, r1, #0, #4
 8004764:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
  DRV_CONF_register.otselect = 0b00;
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 800476e:	f36f 0301 	bfc	r3, #0, #2
 8004772:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
  DRV_CONF_register.drvstrength = 0b10;
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 800477c:	2102      	movs	r1, #2
 800477e:	f361 0383 	bfi	r3, r1, #2, #2
 8004782:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
  DRV_CONF_register.filt_isense = 0b00;
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 800478c:	f36f 1305 	bfc	r3, #4, #2
 8004790:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
  TPOWERDOWN_register.sr = 10;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	220a      	movs	r2, #10
 8004798:	71da      	strb	r2, [r3, #7]
  VSTOP_register.sr = 1;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 80047ac:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 80047b0:	f022 0203 	bic.w	r2, r2, #3
 80047b4:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  ENC_CONST_register.sr = 65536;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
 80047c0:	2200      	movs	r2, #0
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  //MSLUT6_register.sr = ???;
  //MSLUT7_register.sr = ???;
  //MSLUTSEL_register.sr = ???;
  //MSLUTSTART_register.start_sin = 0;
  //MSLUTSTART_register.start_sin90 = 247;
  CHOPCONF_register.sr = 0x10410150;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80047d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 80047d6:	2200      	movs	r2, #0
 80047d8:	f042 0201 	orr.w	r2, r2, #1
 80047dc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 80047e0:	2200      	movs	r2, #0
 80047e2:	f042 0241 	orr.w	r2, r2, #65	@ 0x41
 80047e6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 80047ea:	2200      	movs	r2, #0
 80047ec:	f042 0210 	orr.w	r2, r2, #16
 80047f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  PWMCONF_register.sr = 0xC40C001E;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a04      	ldr	r2, [pc, #16]	@ (8004808 <_ZN14TMC5160Stepper8defaultsEv+0x104>)
 80047f8:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	c40c001e 	.word	0xc40c001e
 800480c:	00000000 	.word	0x00000000

08004810 <_ZN10TMCStepper11rms_currentEt>:

uint16_t TMCStepper::cs2rms(uint8_t CS) {
  return (float)(CS+1)/32.0 * (vsense() ? 0.180 : 0.325)/(Rsense+0.02) / 1.41421 * 1000;
}

void TMCStepper::rms_current(uint16_t mA) {
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	460b      	mov	r3, r1
 800481a:	817b      	strh	r3, [r7, #10]
  uint8_t CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.325 - 1;
 800481c:	897b      	ldrh	r3, [r7, #10]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004826:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8004920 <_ZN10TMCStepper11rms_currentEt+0x110>
 800482a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800482e:	ed9f 5b3e 	vldr	d5, [pc, #248]	@ 8004928 <_ZN10TMCStepper11rms_currentEt+0x118>
 8004832:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	edd3 7a03 	vldr	s15, [r3, #12]
 800483c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004840:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8004930 <_ZN10TMCStepper11rms_currentEt+0x120>
 8004844:	ee37 7b05 	vadd.f64	d7, d7, d5
 8004848:	ee26 6b07 	vmul.f64	d6, d6, d7
 800484c:	ed9f 5b3a 	vldr	d5, [pc, #232]	@ 8004938 <_ZN10TMCStepper11rms_currentEt+0x128>
 8004850:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004854:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8004858:	ee37 7b46 	vsub.f64	d7, d7, d6
 800485c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004860:	edc7 7a01 	vstr	s15, [r7, #4]
 8004864:	793b      	ldrb	r3, [r7, #4]
 8004866:	75fb      	strb	r3, [r7, #23]
  // If Current Scale is too low, turn on high sensitivity R_sense and calculate again
  if (CS < 16) {
 8004868:	7dfb      	ldrb	r3, [r7, #23]
 800486a:	2b0f      	cmp	r3, #15
 800486c:	d82d      	bhi.n	80048ca <_ZN10TMCStepper11rms_currentEt+0xba>
    vsense(true);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3308      	adds	r3, #8
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2101      	movs	r1, #1
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	4798      	blx	r3
    CS = 32.0*1.41421*mA/1000.0*(Rsense+0.02)/0.180 - 1;
 800487c:	897b      	ldrh	r3, [r7, #10]
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004886:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8004920 <_ZN10TMCStepper11rms_currentEt+0x110>
 800488a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800488e:	ed9f 5b26 	vldr	d5, [pc, #152]	@ 8004928 <_ZN10TMCStepper11rms_currentEt+0x118>
 8004892:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	edd3 7a03 	vldr	s15, [r3, #12]
 800489c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048a0:	ed9f 5b23 	vldr	d5, [pc, #140]	@ 8004930 <_ZN10TMCStepper11rms_currentEt+0x120>
 80048a4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80048a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80048ac:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8004940 <_ZN10TMCStepper11rms_currentEt+0x130>
 80048b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80048b4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80048b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80048bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80048c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80048c4:	793b      	ldrb	r3, [r7, #4]
 80048c6:	75fb      	strb	r3, [r7, #23]
 80048c8:	e006      	b.n	80048d8 <_ZN10TMCStepper11rms_currentEt+0xc8>
  } else { // If CS >= 16, turn off high_sense_r
    vsense(false);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3308      	adds	r3, #8
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2100      	movs	r1, #0
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	4798      	blx	r3
  }

  if (CS > 31)
 80048d8:	7dfb      	ldrb	r3, [r7, #23]
 80048da:	2b1f      	cmp	r3, #31
 80048dc:	d901      	bls.n	80048e2 <_ZN10TMCStepper11rms_currentEt+0xd2>
    CS = 31;
 80048de:	231f      	movs	r3, #31
 80048e0:	75fb      	strb	r3, [r7, #23]

  irun(CS);
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	4619      	mov	r1, r3
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7fe fd8c 	bl	8003404 <_ZN10TMCStepper4irunEh>
  ihold(CS*holdMultiplier);
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80048fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004904:	edc7 7a01 	vstr	s15, [r7, #4]
 8004908:	793b      	ldrb	r3, [r7, #4]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	4619      	mov	r1, r3
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f7fe fd5b 	bl	80033ca <_ZN10TMCStepper5iholdEh>
  //val_mA = mA;
}
 8004914:	bf00      	nop
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	f3af 8000 	nop.w
 8004920:	aa3ad18d 	.word	0xaa3ad18d
 8004924:	4046a09a 	.word	0x4046a09a
 8004928:	00000000 	.word	0x00000000
 800492c:	408f4000 	.word	0x408f4000
 8004930:	47ae147b 	.word	0x47ae147b
 8004934:	3f947ae1 	.word	0x3f947ae1
 8004938:	cccccccd 	.word	0xcccccccd
 800493c:	3fd4cccc 	.word	0x3fd4cccc
 8004940:	70a3d70a 	.word	0x70a3d70a
 8004944:	3fc70a3d 	.word	0x3fc70a3d

08004948 <_ZN10TMCStepper15test_connectionEv>:

uint16_t TMCStepper::rms_current() {
  return cs2rms(irun());
}

uint8_t TMCStepper::test_connection() {
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t drv_status = DRV_STATUS();
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3310      	adds	r3, #16
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	4798      	blx	r3
 800495c:	60f8      	str	r0, [r7, #12]
  switch (drv_status) {
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <_ZN10TMCStepper15test_connectionEv+0x28>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496a:	d103      	bne.n	8004974 <_ZN10TMCStepper15test_connectionEv+0x2c>
      case 0xFFFFFFFF: return 1;
 800496c:	2301      	movs	r3, #1
 800496e:	e002      	b.n	8004976 <_ZN10TMCStepper15test_connectionEv+0x2e>
      case 0: return 2;
 8004970:	2302      	movs	r3, #2
 8004972:	e000      	b.n	8004976 <_ZN10TMCStepper15test_connectionEv+0x2e>
      default: return 0;
 8004974:	2300      	movs	r3, #0
  }
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <_ZN10TMCStepper10microstepsEt>:
int8_t TMCStepper::hysteresis_end() { return hend()-3; };

void TMCStepper::hysteresis_start(uint8_t value) { hstrt(value-1); }
uint8_t TMCStepper::hysteresis_start() { return hstrt()+1; }

void TMCStepper::microsteps(uint16_t ms) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	807b      	strh	r3, [r7, #2]
  switch(ms) {
 800498c:	887b      	ldrh	r3, [r7, #2]
 800498e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004992:	d058      	beq.n	8004a46 <_ZN10TMCStepper10microstepsEt+0xc6>
 8004994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004998:	f300 809d 	bgt.w	8004ad6 <_ZN10TMCStepper10microstepsEt+0x156>
 800499c:	2b80      	cmp	r3, #128	@ 0x80
 800499e:	d05a      	beq.n	8004a56 <_ZN10TMCStepper10microstepsEt+0xd6>
 80049a0:	2b80      	cmp	r3, #128	@ 0x80
 80049a2:	f300 8098 	bgt.w	8004ad6 <_ZN10TMCStepper10microstepsEt+0x156>
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	dc4a      	bgt.n	8004a40 <_ZN10TMCStepper10microstepsEt+0xc0>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f340 8093 	ble.w	8004ad6 <_ZN10TMCStepper10microstepsEt+0x156>
 80049b0:	3b01      	subs	r3, #1
 80049b2:	2b1f      	cmp	r3, #31
 80049b4:	f200 808f 	bhi.w	8004ad6 <_ZN10TMCStepper10microstepsEt+0x156>
 80049b8:	a201      	add	r2, pc, #4	@ (adr r2, 80049c0 <_ZN10TMCStepper10microstepsEt+0x40>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	08004ac7 	.word	0x08004ac7
 80049c4:	08004ab7 	.word	0x08004ab7
 80049c8:	08004ad7 	.word	0x08004ad7
 80049cc:	08004aa7 	.word	0x08004aa7
 80049d0:	08004ad7 	.word	0x08004ad7
 80049d4:	08004ad7 	.word	0x08004ad7
 80049d8:	08004ad7 	.word	0x08004ad7
 80049dc:	08004a97 	.word	0x08004a97
 80049e0:	08004ad7 	.word	0x08004ad7
 80049e4:	08004ad7 	.word	0x08004ad7
 80049e8:	08004ad7 	.word	0x08004ad7
 80049ec:	08004ad7 	.word	0x08004ad7
 80049f0:	08004ad7 	.word	0x08004ad7
 80049f4:	08004ad7 	.word	0x08004ad7
 80049f8:	08004ad7 	.word	0x08004ad7
 80049fc:	08004a87 	.word	0x08004a87
 8004a00:	08004ad7 	.word	0x08004ad7
 8004a04:	08004ad7 	.word	0x08004ad7
 8004a08:	08004ad7 	.word	0x08004ad7
 8004a0c:	08004ad7 	.word	0x08004ad7
 8004a10:	08004ad7 	.word	0x08004ad7
 8004a14:	08004ad7 	.word	0x08004ad7
 8004a18:	08004ad7 	.word	0x08004ad7
 8004a1c:	08004ad7 	.word	0x08004ad7
 8004a20:	08004ad7 	.word	0x08004ad7
 8004a24:	08004ad7 	.word	0x08004ad7
 8004a28:	08004ad7 	.word	0x08004ad7
 8004a2c:	08004ad7 	.word	0x08004ad7
 8004a30:	08004ad7 	.word	0x08004ad7
 8004a34:	08004ad7 	.word	0x08004ad7
 8004a38:	08004ad7 	.word	0x08004ad7
 8004a3c:	08004a77 	.word	0x08004a77
 8004a40:	2b40      	cmp	r3, #64	@ 0x40
 8004a42:	d010      	beq.n	8004a66 <_ZN10TMCStepper10microstepsEt+0xe6>
    case  16: mres(4); break;
    case   8: mres(5); break;
    case   4: mres(6); break;
    case   2: mres(7); break;
    case   1: mres(8); break;
    default: break;
 8004a44:	e047      	b.n	8004ad6 <_ZN10TMCStepper10microstepsEt+0x156>
    case 256: mres(0); break;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3324      	adds	r3, #36	@ 0x24
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2100      	movs	r1, #0
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	4798      	blx	r3
 8004a54:	e040      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    case 128: mres(1); break;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3324      	adds	r3, #36	@ 0x24
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2101      	movs	r1, #1
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
 8004a64:	e038      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    case  64: mres(2); break;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3324      	adds	r3, #36	@ 0x24
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2102      	movs	r1, #2
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4798      	blx	r3
 8004a74:	e030      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    case  32: mres(3); break;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3324      	adds	r3, #36	@ 0x24
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2103      	movs	r1, #3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	4798      	blx	r3
 8004a84:	e028      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    case  16: mres(4); break;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3324      	adds	r3, #36	@ 0x24
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2104      	movs	r1, #4
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	4798      	blx	r3
 8004a94:	e020      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    case   8: mres(5); break;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3324      	adds	r3, #36	@ 0x24
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2105      	movs	r1, #5
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	4798      	blx	r3
 8004aa4:	e018      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    case   4: mres(6); break;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3324      	adds	r3, #36	@ 0x24
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2106      	movs	r1, #6
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
 8004ab4:	e010      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    case   2: mres(7); break;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3324      	adds	r3, #36	@ 0x24
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2107      	movs	r1, #7
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	4798      	blx	r3
 8004ac4:	e008      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    case   1: mres(8); break;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3324      	adds	r3, #36	@ 0x24
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2108      	movs	r1, #8
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	4798      	blx	r3
 8004ad4:	e000      	b.n	8004ad8 <_ZN10TMCStepper10microstepsEt+0x158>
    default: break;
 8004ad6:	bf00      	nop
  }
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <_ZN10TMCStepper10blank_timeEh>:
    case 8: return   1;
  }
  return 1;
}

void TMCStepper::blank_time(uint8_t value) {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	70fb      	strb	r3, [r7, #3]
  switch (value) {
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	2b36      	cmp	r3, #54	@ 0x36
 8004af0:	d022      	beq.n	8004b38 <_ZN10TMCStepper10blank_timeEh+0x58>
 8004af2:	2b36      	cmp	r3, #54	@ 0x36
 8004af4:	dc28      	bgt.n	8004b48 <_ZN10TMCStepper10blank_timeEh+0x68>
 8004af6:	2b24      	cmp	r3, #36	@ 0x24
 8004af8:	d016      	beq.n	8004b28 <_ZN10TMCStepper10blank_timeEh+0x48>
 8004afa:	2b24      	cmp	r3, #36	@ 0x24
 8004afc:	dc24      	bgt.n	8004b48 <_ZN10TMCStepper10blank_timeEh+0x68>
 8004afe:	2b10      	cmp	r3, #16
 8004b00:	d002      	beq.n	8004b08 <_ZN10TMCStepper10blank_timeEh+0x28>
 8004b02:	2b18      	cmp	r3, #24
 8004b04:	d008      	beq.n	8004b18 <_ZN10TMCStepper10blank_timeEh+0x38>
    case 16: tbl(0b00); break;
    case 24: tbl(0b01); break;
    case 36: tbl(0b10); break;
    case 54: tbl(0b11); break;
  }
}
 8004b06:	e01f      	b.n	8004b48 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 16: tbl(0b00); break;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	332c      	adds	r3, #44	@ 0x2c
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2100      	movs	r1, #0
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	4798      	blx	r3
 8004b16:	e017      	b.n	8004b48 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 24: tbl(0b01); break;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	332c      	adds	r3, #44	@ 0x2c
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2101      	movs	r1, #1
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	4798      	blx	r3
 8004b26:	e00f      	b.n	8004b48 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 36: tbl(0b10); break;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	332c      	adds	r3, #44	@ 0x2c
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2102      	movs	r1, #2
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	4798      	blx	r3
 8004b36:	e007      	b.n	8004b48 <_ZN10TMCStepper10blank_timeEh+0x68>
    case 54: tbl(0b11); break;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	332c      	adds	r3, #44	@ 0x2c
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2103      	movs	r1, #3
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4798      	blx	r3
 8004b46:	bf00      	nop
}
 8004b48:	bf00      	nop
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <_ZN10TMCStepper10TPOWERDOWNEh>:
bool  TMCStepper::drv_err()  { GSTAT_t r; r.sr = GSTAT(); return r.drv_err; }
bool  TMCStepper::uv_cp()    { GSTAT_t r; r.sr = GSTAT(); return r.uv_cp; }
///////////////////////////////////////////////////////////////////////////////////////
// W: TPOWERDOWN
uint8_t TMCStepper::TPOWERDOWN() { return TPOWERDOWN_register.sr; }
void TMCStepper::TPOWERDOWN(uint8_t input) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	70fb      	strb	r3, [r7, #3]
  TPOWERDOWN_register.sr = input;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	71da      	strb	r2, [r3, #7]
  write(TPOWERDOWN_register.address, TPOWERDOWN_register.sr);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	79d2      	ldrb	r2, [r2, #7]
 8004b6c:	2111      	movs	r1, #17
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	4798      	blx	r3
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f024 f893 	bl	8028cb4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4904      	ldr	r1, [pc, #16]	@ (8004ba8 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8004b98:	4804      	ldr	r0, [pc, #16]	@ (8004bac <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8004b9a:	f000 fa34 	bl	8005006 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8004b9e:	4603      	mov	r3, r0
					__idx, __base); }
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	0802a2c8 	.word	0x0802a2c8
 8004bac:	080292b5 	.word	0x080292b5

08004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include "pin.h"
#include <cstdio>

Pin::Pin(const std::string& portAndPin, int dir) 
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
    : portAndPin(portAndPin), dir(dir), modifier(NONE) {
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f024 f8a4 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	761a      	strb	r2, [r3, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	765a      	strb	r2, [r3, #25]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	332c      	adds	r3, #44	@ 0x2c
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	605a      	str	r2, [r3, #4]
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	611a      	str	r2, [r3, #16]
    configurePin();
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f835 	bl	8004c54 <_ZN3Pin12configurePinEv>
    enableClock();
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f8a8 	bl	8004d40 <_ZN3Pin11enableClockEv>
    initialisePin();
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f949 	bl	8004e88 <_ZN3Pin13initialisePinEv>
}
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>:

Pin::Pin(const std::string& portAndPin, int dir, int modifier) 
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
    : portAndPin(portAndPin), dir(dir), modifier(modifier) {
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	68b9      	ldr	r1, [r7, #8]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f024 f87b 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	761a      	strb	r2, [r3, #24]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	765a      	strb	r2, [r3, #25]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	332c      	adds	r3, #44	@ 0x2c
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	605a      	str	r2, [r3, #4]
 8004c32:	609a      	str	r2, [r3, #8]
 8004c34:	60da      	str	r2, [r3, #12]
 8004c36:	611a      	str	r2, [r3, #16]
    configurePin();
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f80b 	bl	8004c54 <_ZN3Pin12configurePinEv>
    enableClock();
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 f87e 	bl	8004d40 <_ZN3Pin11enableClockEv>
    initialisePin();
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f91f 	bl	8004e88 <_ZN3Pin13initialisePinEv>
}
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <_ZN3Pin12configurePinEv>:

void Pin::configurePin() {
 8004c54:	b5b0      	push	{r4, r5, r7, lr}
 8004c56:	b090      	sub	sp, #64	@ 0x40
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef* gpioPorts[8] = {GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF, GPIOG, GPIOH};
 8004c5c:	4b36      	ldr	r3, [pc, #216]	@ (8004d38 <_ZN3Pin12configurePinEv+0xe4>)
 8004c5e:	f107 0408 	add.w	r4, r7, #8
 8004c62:	461d      	mov	r5, r3
 8004c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004c6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    if (portAndPin[0] == 'P') {
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f023 feff 	bl	8028a78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b50      	cmp	r3, #80	@ 0x50
 8004c80:	bf0c      	ite	eq
 8004c82:	2301      	moveq	r3, #1
 8004c84:	2300      	movne	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d042      	beq.n	8004d12 <_ZN3Pin12configurePinEv+0xbe>
        portIndex = portAndPin[1] - 'A';
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2101      	movs	r1, #1
 8004c90:	4618      	mov	r0, r3
 8004c92:	f023 fef1 	bl	8028a78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8004c96:	4603      	mov	r3, r0
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	3b41      	subs	r3, #65	@ 0x41
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	769a      	strb	r2, [r3, #26]
        pinNumber = std::stoi(portAndPin.substr(3));
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8004ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cac:	2203      	movs	r2, #3
 8004cae:	f024 f85f 	bl	8028d70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8004cb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004cb6:	220a      	movs	r2, #10
 8004cb8:	2100      	movs	r1, #0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff ff5e 	bl	8004b7c <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	839a      	strh	r2, [r3, #28]
 8004cc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f023 fe0e 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
        pin = 1 << pinNumber;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	8b9b      	ldrh	r3, [r3, #28]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	2301      	movs	r3, #1
 8004cda:	4093      	lsls	r3, r2
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	83da      	strh	r2, [r3, #30]
    } else {
        printf("Invalid port and pin definition\n");
        return;
    }
    
    GPIOx = gpioPorts[portIndex];
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	7e9b      	ldrb	r3, [r3, #26]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	3340      	adds	r3, #64	@ 0x40
 8004cea:	443b      	add	r3, r7
 8004cec:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    mode = (dir == INPUT) ? GPIO_MODE_INPUT : GPIO_MODE_OUTPUT_PP;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	7e1b      	ldrb	r3, [r3, #24]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bf14      	ite	ne
 8004cfc:	2301      	movne	r3, #1
 8004cfe:	2300      	moveq	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	461a      	mov	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	621a      	str	r2, [r3, #32]
    pull = (modifier == PULLUP) ? GPIO_PULLUP :
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	7e5b      	ldrb	r3, [r3, #25]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d00c      	beq.n	8004d2a <_ZN3Pin12configurePinEv+0xd6>
 8004d10:	e003      	b.n	8004d1a <_ZN3Pin12configurePinEv+0xc6>
        printf("Invalid port and pin definition\n");
 8004d12:	480a      	ldr	r0, [pc, #40]	@ (8004d3c <_ZN3Pin12configurePinEv+0xe8>)
 8004d14:	f024 fc0a 	bl	802952c <puts>
 8004d18:	e00a      	b.n	8004d30 <_ZN3Pin12configurePinEv+0xdc>
           (modifier == PULLDOWN) ? GPIO_PULLDOWN :
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	7e5b      	ldrb	r3, [r3, #25]
    pull = (modifier == PULLUP) ? GPIO_PULLUP :
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d101      	bne.n	8004d26 <_ZN3Pin12configurePinEv+0xd2>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e002      	b.n	8004d2c <_ZN3Pin12configurePinEv+0xd8>
 8004d26:	2300      	movs	r3, #0
 8004d28:	e000      	b.n	8004d2c <_ZN3Pin12configurePinEv+0xd8>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6253      	str	r3, [r2, #36]	@ 0x24
           GPIO_NOPULL;
}
 8004d30:	3740      	adds	r7, #64	@ 0x40
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bdb0      	pop	{r4, r5, r7, pc}
 8004d36:	bf00      	nop
 8004d38:	0802a2f0 	.word	0x0802a2f0
 8004d3c:	0802a2d0 	.word	0x0802a2d0

08004d40 <_ZN3Pin11enableClockEv>:

void Pin::enableClock() {
 8004d40:	b480      	push	{r7}
 8004d42:	b08b      	sub	sp, #44	@ 0x2c
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
    switch (portIndex) {
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	7e9b      	ldrb	r3, [r3, #26]
 8004d4c:	2b07      	cmp	r3, #7
 8004d4e:	f200 8093 	bhi.w	8004e78 <_ZN3Pin11enableClockEv+0x138>
 8004d52:	a201      	add	r2, pc, #4	@ (adr r2, 8004d58 <_ZN3Pin11enableClockEv+0x18>)
 8004d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d58:	08004d79 	.word	0x08004d79
 8004d5c:	08004d99 	.word	0x08004d99
 8004d60:	08004db9 	.word	0x08004db9
 8004d64:	08004dd9 	.word	0x08004dd9
 8004d68:	08004df9 	.word	0x08004df9
 8004d6c:	08004e19 	.word	0x08004e19
 8004d70:	08004e39 	.word	0x08004e39
 8004d74:	08004e59 	.word	0x08004e59
        case 0: __HAL_RCC_GPIOA_CLK_ENABLE(); break;
 8004d78:	4b42      	ldr	r3, [pc, #264]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d7e:	4a41      	ldr	r2, [pc, #260]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d88:	4b3e      	ldr	r3, [pc, #248]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	e06f      	b.n	8004e78 <_ZN3Pin11enableClockEv+0x138>
        case 1: __HAL_RCC_GPIOB_CLK_ENABLE(); break;
 8004d98:	4b3a      	ldr	r3, [pc, #232]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d9e:	4a39      	ldr	r2, [pc, #228]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004da0:	f043 0302 	orr.w	r3, r3, #2
 8004da4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004da8:	4b36      	ldr	r3, [pc, #216]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	623b      	str	r3, [r7, #32]
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	e05f      	b.n	8004e78 <_ZN3Pin11enableClockEv+0x138>
        case 2: __HAL_RCC_GPIOC_CLK_ENABLE(); break;
 8004db8:	4b32      	ldr	r3, [pc, #200]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dbe:	4a31      	ldr	r2, [pc, #196]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004dc0:	f043 0304 	orr.w	r3, r3, #4
 8004dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	e04f      	b.n	8004e78 <_ZN3Pin11enableClockEv+0x138>
        case 3: __HAL_RCC_GPIOD_CLK_ENABLE(); break;
 8004dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dde:	4a29      	ldr	r2, [pc, #164]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004de0:	f043 0308 	orr.w	r3, r3, #8
 8004de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004de8:	4b26      	ldr	r3, [pc, #152]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	e03f      	b.n	8004e78 <_ZN3Pin11enableClockEv+0x138>
        case 4: __HAL_RCC_GPIOE_CLK_ENABLE(); break;
 8004df8:	4b22      	ldr	r3, [pc, #136]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dfe:	4a21      	ldr	r2, [pc, #132]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e00:	f043 0310 	orr.w	r3, r3, #16
 8004e04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e08:	4b1e      	ldr	r3, [pc, #120]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e0e:	f003 0310 	and.w	r3, r3, #16
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	e02f      	b.n	8004e78 <_ZN3Pin11enableClockEv+0x138>
        case 5: __HAL_RCC_GPIOF_CLK_ENABLE(); break;
 8004e18:	4b1a      	ldr	r3, [pc, #104]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e1e:	4a19      	ldr	r2, [pc, #100]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e20:	f043 0320 	orr.w	r3, r3, #32
 8004e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e28:	4b16      	ldr	r3, [pc, #88]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	e01f      	b.n	8004e78 <_ZN3Pin11enableClockEv+0x138>
        case 6: __HAL_RCC_GPIOG_CLK_ENABLE(); break;
 8004e38:	4b12      	ldr	r3, [pc, #72]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e3e:	4a11      	ldr	r2, [pc, #68]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e48:	4b0e      	ldr	r3, [pc, #56]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	e00f      	b.n	8004e78 <_ZN3Pin11enableClockEv+0x138>
        case 7: __HAL_RCC_GPIOH_CLK_ENABLE(); break;
 8004e58:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e5e:	4a09      	ldr	r2, [pc, #36]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e68:	4b06      	ldr	r3, [pc, #24]	@ (8004e84 <_ZN3Pin11enableClockEv+0x144>)
 8004e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e72:	60bb      	str	r3, [r7, #8]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	bf00      	nop
    }
}
 8004e78:	bf00      	nop
 8004e7a:	372c      	adds	r7, #44	@ 0x2c
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	58024400 	.word	0x58024400

08004e88 <_ZN3Pin13initialisePinEv>:

void Pin::initialisePin() {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8bdb      	ldrh	r3, [r3, #30]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	f019 fde4 	bl	801ea68 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = pin;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8bdb      	ldrh	r3, [r3, #30]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
    GPIO_InitStruct.Mode = mode;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1a      	ldr	r2, [r3, #32]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pull = pull;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	635a      	str	r2, [r3, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	332c      	adds	r3, #44	@ 0x2c
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	f019 fc04 	bl	801e6d8 <HAL_GPIO_Init>
}
 8004ed0:	bf00      	nop
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <_ZNK3Pin3getEv>:

bool Pin::get() const {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
    return HAL_GPIO_ReadPin(GPIOx, pin);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8bdb      	ldrh	r3, [r3, #30]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4610      	mov	r0, r2
 8004eec:	f019 fda4 	bl	801ea38 <HAL_GPIO_ReadPin>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	bf14      	ite	ne
 8004ef6:	2301      	movne	r3, #1
 8004ef8:	2300      	moveq	r3, #0
 8004efa:	b2db      	uxtb	r3, r3
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <_ZN3Pin3setEb>:

void Pin::set(bool value) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(GPIOx, pin, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8bd9      	ldrh	r1, [r3, #30]
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <_ZN3Pin3setEb+0x1e>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <_ZN3Pin3setEb+0x20>
 8004f22:	2300      	movs	r3, #0
 8004f24:	461a      	mov	r2, r3
 8004f26:	f019 fd9f 	bl	801ea68 <HAL_GPIO_WritePin>
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <_ZN3Pin11setAsOutputEv>:

void Pin::setAsOutput() {
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
    mode = GPIO_MODE_OUTPUT_PP;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	621a      	str	r2, [r3, #32]
    pull = GPIO_NOPULL;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff ff9e 	bl	8004e88 <_ZN3Pin13initialisePinEv>
}
 8004f4c:	bf00      	nop
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <_ZN3Pin10setAsInputEv>:

void Pin::setAsInput() {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
    mode = GPIO_MODE_INPUT;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	621a      	str	r2, [r3, #32]
    pull = GPIO_NOPULL;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff ff8d 	bl	8004e88 <_ZN3Pin13initialisePinEv>
}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <_ZN3Pin9setPullUpEv>:
void Pin::setPullNone() {
    pull = GPIO_NOPULL;
    initialisePin();
}

void Pin::setPullUp() {
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
    pull = GPIO_PULLUP;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	625a      	str	r2, [r3, #36]	@ 0x24
    initialisePin();
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff ff7f 	bl	8004e88 <_ZN3Pin13initialisePinEv>
}
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	f024 fc73 	bl	8029884 <__errno>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	f024 fc6d 	bl	8029884 <__errno>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8004fba:	b590      	push	{r4, r7, lr}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	f024 fc5f 	bl	8029884 <__errno>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	bf0c      	ite	eq
 8004fce:	2301      	moveq	r3, #1
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681c      	ldr	r4, [r3, #0]
 8004fdc:	f024 fc52 	bl	8029884 <__errno>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	601c      	str	r4, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd90      	pop	{r4, r7, pc}

08004fee <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8004ff8:	2300      	movs	r3, #0
	  }
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8005006:	b590      	push	{r4, r7, lr}
 8005008:	b08b      	sub	sp, #44	@ 0x2c
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8005014:	f107 0314 	add.w	r3, r7, #20
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff ffba 	bl	8004f92 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f107 0118 	add.w	r1, r7, #24
 8005024:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	4798      	blx	r3
 800502a:	6278      	str	r0, [r7, #36]	@ 0x24

      if (__endptr == __str)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d102      	bne.n	800503a <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8005034:	68b8      	ldr	r0, [r7, #8]
 8005036:	f023 fb7b 	bl	8028730 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 800503a:	f024 fc23 	bl	8029884 <__errno>
 800503e:	4603      	mov	r3, r0
 8005040:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8005042:	2b22      	cmp	r3, #34	@ 0x22
 8005044:	d006      	beq.n	8005054 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8005046:	4621      	mov	r1, r4
 8005048:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800504a:	f7ff ffd0 	bl	8004fee <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8005058:	2300      	movs	r3, #0
      else if (errno == ERANGE
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 800505e:	68b8      	ldr	r0, [r7, #8]
 8005060:	f023 fb6c 	bl	802873c <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	623b      	str	r3, [r7, #32]

      if (__idx)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	461a      	mov	r2, r3
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	601a      	str	r2, [r3, #0]

      return __ret;
 800507a:	6a3c      	ldr	r4, [r7, #32]
    }
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff ff9a 	bl	8004fba <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8005086:	4623      	mov	r3, r4
    }
 8005088:	4618      	mov	r0, r3
 800508a:	372c      	adds	r7, #44	@ 0x2c
 800508c:	46bd      	mov	sp, r7
 800508e:	bd90      	pop	{r4, r7, pc}

08005090 <_ZN9Interrupt8RegisterEmPS_>:
#include <cstdio>

Interrupt* Interrupt::ISRVectorTable[PERIPH_COUNT_IRQn] = {nullptr};

// Register an interrupt with a specific IRQ number
void Interrupt::Register(uint32_t interruptNumber, Interrupt* intThisPtr) {
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
    if (interruptNumber < PERIPH_COUNT_IRQn) {
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b94      	cmp	r3, #148	@ 0x94
 800509e:	d808      	bhi.n	80050b2 <_ZN9Interrupt8RegisterEmPS_+0x22>
        printf("Registering interrupt for IRQ %ld\n", interruptNumber);
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4806      	ldr	r0, [pc, #24]	@ (80050bc <_ZN9Interrupt8RegisterEmPS_+0x2c>)
 80050a4:	f024 f9d2 	bl	802944c <iprintf>
        ISRVectorTable[interruptNumber] = intThisPtr;
 80050a8:	4905      	ldr	r1, [pc, #20]	@ (80050c0 <_ZN9Interrupt8RegisterEmPS_+0x30>)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 80050b2:	bf00      	nop
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	0802a310 	.word	0x0802a310
 80050c0:	240000a8 	.word	0x240000a8

080050c4 <_ZN9Interrupt13InvokeHandlerEm>:

// Generic IRQ dispatcher
void Interrupt::InvokeHandler(uint32_t interruptNumber) {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
    if (interruptNumber < PERIPH_COUNT_IRQn && ISRVectorTable[interruptNumber]) {
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b94      	cmp	r3, #148	@ 0x94
 80050d0:	d812      	bhi.n	80050f8 <_ZN9Interrupt13InvokeHandlerEm+0x34>
 80050d2:	4a0b      	ldr	r2, [pc, #44]	@ (8005100 <_ZN9Interrupt13InvokeHandlerEm+0x3c>)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00c      	beq.n	80050f8 <_ZN9Interrupt13InvokeHandlerEm+0x34>
        ISRVectorTable[interruptNumber]->ISR_Handler();
 80050de:	4a08      	ldr	r2, [pc, #32]	@ (8005100 <_ZN9Interrupt13InvokeHandlerEm+0x3c>)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3308      	adds	r3, #8
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4904      	ldr	r1, [pc, #16]	@ (8005100 <_ZN9Interrupt13InvokeHandlerEm+0x3c>)
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80050f4:	4610      	mov	r0, r2
 80050f6:	4798      	blx	r3
    }
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	240000a8 	.word	0x240000a8

08005104 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8005108:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 800510a:	4618      	mov	r0, r3
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
 800511c:	f7ff fff2 	bl	8005104 <_ZSt23__is_constant_evaluatedv>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d004      	beq.n	8005130 <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f002 f948 	bl	80073bc <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 800512c:	4603      	mov	r3, r0
 800512e:	e004      	b.n	800513a <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7fb f935 	bl	80003a0 <strlen>
 8005136:	4603      	mov	r3, r0
 8005138:	bf00      	nop
      }
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8allocateEj>:
};

namespace detail {
class DefaultAllocator : public Allocator {
 public:
  void* allocate(size_t size) override {
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
    return malloc(size);
 800514c:	6838      	ldr	r0, [r7, #0]
 800514e:	f023 ff43 	bl	8028fd8 <malloc>
 8005152:	4603      	mov	r3, r0
  }
 8005154:	4618      	mov	r0, r3
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10deallocateEPv>:

  void deallocate(void* ptr) override {
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
    free(ptr);
 8005166:	6838      	ldr	r0, [r7, #0]
 8005168:	f023 ff3e 	bl	8028fe8 <free>
  }
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10reallocateEPvj>:

  void* reallocate(void* ptr, size_t new_size) override {
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
    return realloc(ptr, new_size);
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	68b8      	ldr	r0, [r7, #8]
 8005184:	f023 ffe6 	bl	8029154 <realloc>
 8005188:	4603      	mov	r3, r0
  }
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>:

  static Allocator* instance() {
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
    static DefaultAllocator allocator;
    return &allocator;
 8005198:	4b02      	ldr	r3, [pc, #8]	@ (80051a4 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv+0x10>)
  }
 800519a:	4618      	mov	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	24000000 	.word	0x24000000

080051a8 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>:
  length_type length;
  char data[1];

  static constexpr size_t maxLength = numeric_limits<length_type>::highest();

  static constexpr size_t sizeForLength(size_t n) {
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
    return n + 1 + offsetof(StringNode, data);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3309      	adds	r3, #9
  }
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>:

  static StringNode* create(size_t length, Allocator* allocator) {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
    if (length > maxLength)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d0:	d301      	bcc.n	80051d6 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x16>
      return nullptr;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e01b      	b.n	800520e <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto size = sizeForLength(length);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff ffe6 	bl	80051a8 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 80051dc:	60f8      	str	r0, [r7, #12]
    if (size < length)  // integer overflow
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d201      	bcs.n	80051ea <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x2a>
      return nullptr;   // (not testable on 64-bit)
 80051e6:	2300      	movs	r3, #0
 80051e8:	e011      	b.n	800520e <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto node = reinterpret_cast<StringNode*>(allocator->allocate(size));
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68f9      	ldr	r1, [r7, #12]
 80051f2:	6838      	ldr	r0, [r7, #0]
 80051f4:	4798      	blx	r3
 80051f6:	60b8      	str	r0, [r7, #8]
    if (node) {
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d006      	beq.n	800520c <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4c>
      node->length = length_type(length);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	b29a      	uxth	r2, r3
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	80da      	strh	r2, [r3, #6]
      node->references = 1;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2201      	movs	r2, #1
 800520a:	809a      	strh	r2, [r3, #4]
    }
    return node;
 800520c:	68bb      	ldr	r3, [r7, #8]
  }
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>:

  static StringNode* resize(StringNode* node, size_t length,
 8005216:	b5b0      	push	{r4, r5, r7, lr}
 8005218:	b086      	sub	sp, #24
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
                            Allocator* allocator) {
    ARDUINOJSON_ASSERT(node != nullptr);
    StringNode* newNode;
    if (length <= maxLength)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005228:	d20e      	bcs.n	8005248 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x32>
      newNode = reinterpret_cast<StringNode*>(
          allocator->reallocate(node, sizeForLength(length)));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3308      	adds	r3, #8
 8005230:	681c      	ldr	r4, [r3, #0]
 8005232:	687d      	ldr	r5, [r7, #4]
 8005234:	68b8      	ldr	r0, [r7, #8]
 8005236:	f7ff ffb7 	bl	80051a8 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 800523a:	4603      	mov	r3, r0
 800523c:	461a      	mov	r2, r3
 800523e:	68f9      	ldr	r1, [r7, #12]
 8005240:	4628      	mov	r0, r5
 8005242:	47a0      	blx	r4
 8005244:	6178      	str	r0, [r7, #20]
 8005246:	e001      	b.n	800524c <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x36>
    else
      newNode = nullptr;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
    if (newNode)
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d004      	beq.n	800525c <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x46>
      newNode->length = length_type(length);
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	b29a      	uxth	r2, r3
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	80da      	strh	r2, [r3, #6]
 800525a:	e006      	b.n	800526a <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x54>
    else
      allocator->deallocate(node);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3304      	adds	r3, #4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68f9      	ldr	r1, [r7, #12]
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	4798      	blx	r3
    return newNode;
 800526a:	697b      	ldr	r3, [r7, #20]
  }
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bdb0      	pop	{r4, r5, r7, pc}

08005274 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>:

  static void destroy(StringNode* node, Allocator* allocator) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
    allocator->deallocate(node);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3304      	adds	r3, #4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	6838      	ldr	r0, [r7, #0]
 800528a:	4798      	blx	r3
  }
 800528c:	bf00      	nop
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>:
  RamString(const char* str, size_t sz, bool isStatic = false)
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	70fb      	strb	r3, [r7, #3]
      : str_(str), size_(sz & sizeMask), static_(isStatic) {
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	605a      	str	r2, [r3, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	78fa      	ldrb	r2, [r7, #3]
 80052b2:	721a      	strb	r2, [r3, #8]
  }
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>:
  bool isNull() const {
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
    return !str_;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	bf0c      	ite	eq
 80052d2:	2301      	moveq	r3, #1
 80052d4:	2300      	movne	r3, #0
 80052d6:	b2db      	uxtb	r3, r3
  }
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>:
  size_t size() const {
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
    return size_;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
  }
 80052f0:	4618      	mov	r0, r3
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>:

  const char* data() const {
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
    return str_;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
  }
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>:

  friend void swap(StringPool& a, StringPool& b) {
    swap_(a.strings_, b.strings_);
  }

  void clear(Allocator* allocator) {
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
    while (strings_) {
 800531e:	e00a      	b.n	8005336 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0x22>
      auto node = strings_;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	60fb      	str	r3, [r7, #12]
      strings_ = node->next;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	601a      	str	r2, [r3, #0]
      StringNode::destroy(node, allocator);
 800532e:	6839      	ldr	r1, [r7, #0]
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f7ff ff9f 	bl	8005274 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
    while (strings_) {
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0xc>
    }
  }
 800533e:	bf00      	nop
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>:
    node->data[n] = 0;  // force NUL terminator
    add(node);
    return node;
  }

  void add(StringNode* node) {
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node != nullptr);
    node->next = strings_;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	601a      	str	r2, [r3, #0]
    strings_ = node;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	601a      	str	r2, [r3, #0]
  }
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>:
        return node;
    }
    return nullptr;
  }

  void dereference(const char* s, Allocator* allocator) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
    StringNode* prev = nullptr;
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	e029      	b.n	80053d8 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x6c>
      if (node->data == s) {
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	3308      	adds	r3, #8
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	429a      	cmp	r2, r3
 800538c:	d11f      	bne.n	80053ce <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x62>
        if (--node->references == 0) {
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	889b      	ldrh	r3, [r3, #4]
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	809a      	strh	r2, [r3, #4]
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	889b      	ldrh	r3, [r3, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	bf0c      	ite	eq
 80053a2:	2301      	moveq	r3, #1
 80053a4:	2300      	movne	r3, #0
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d019      	beq.n	80053e0 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
          if (prev)
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d004      	beq.n	80053bc <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x50>
            prev->next = node->next;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	e003      	b.n	80053c4 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x58>
          else
            strings_ = node->next;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	601a      	str	r2, [r3, #0]
          StringNode::destroy(node, allocator);
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	6938      	ldr	r0, [r7, #16]
 80053c8:	f7ff ff54 	bl	8005274 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
        }
        return;
 80053cc:	e008      	b.n	80053e0 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
      }
      prev = node;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1d2      	bne.n	8005384 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x18>
 80053de:	e000      	b.n	80053e2 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x76>
        return;
 80053e0:	bf00      	nop
    }
  }
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>:
// https://arduinojson.org/v7/api/jsonstring/
class JsonString {
  friend struct detail::StringAdapter<JsonString>;

 public:
  JsonString() : str_(nullptr, 0, true) {}
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	2301      	movs	r3, #1
 80053f4:	2200      	movs	r2, #0
 80053f6:	2100      	movs	r1, #0
 80053f8:	f7ff ff4c 	bl	8005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>:

  JsonString(const char* data, bool isStatic = false)
 8005406:	b590      	push	{r4, r7, lr}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	4613      	mov	r3, r2
 8005412:	71fb      	strb	r3, [r7, #7]
      : str_(data, data ? ::strlen(data) : 0, isStatic) {}
 8005414:	68fc      	ldr	r4, [r7, #12]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x20>
 800541c:	68b8      	ldr	r0, [r7, #8]
 800541e:	f7fa ffbf 	bl	80003a0 <strlen>
 8005422:	4602      	mov	r2, r0
 8005424:	e000      	b.n	8005428 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x22>
 8005426:	2200      	movs	r2, #0
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	4620      	mov	r0, r4
 800542e:	f7ff ff31 	bl	8005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	bd90      	pop	{r4, r7, pc}

0800543c <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>:
                                int> = 0>
  JsonString(const char* data, TSize sz, bool isStatic = false)
      : str_(data, size_t(sz), isStatic) {}

  // Returns a pointer to the characters.
  const char* c_str() const {
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
    return str_.data();
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff ff58 	bl	80052fc <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 800544c:	4603      	mov	r3, r0
  }
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>:
namespace detail {
template <>
struct StringAdapter<JsonString> {
  using AdaptedString = RamString;

  static const AdaptedString& adapt(const JsonString& s) {
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
    return s.str_;
 800545e:	687b      	ldr	r3, [r7, #4]
  }
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>:

class CollectionIterator {
  friend class CollectionData;

 public:
  CollectionIterator() : slot_(nullptr), currentId_(NULL_SLOT) {}
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005480:	809a      	strh	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4618      	mov	r0, r3
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>:

  void next(const ResourceManager* resources);

  bool done() const {
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
    return slot_ == nullptr;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
  }
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>:

  bool operator==(const CollectionIterator& other) const {
    return slot_ == other.slot_;
  }

  bool operator!=(const CollectionIterator& other) const {
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
    return slot_ != other.slot_;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	bf14      	ite	ne
 80054c8:	2301      	movne	r3, #1
 80054ca:	2300      	moveq	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
  }
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>:

  VariantData* operator->() {
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return data();
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f805 	bl	80054f2 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 80054e8:	4603      	mov	r3, r0
  }
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>:
  const VariantData& operator*() const {
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return *data();
  }

  VariantData* data() {
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(slot_);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
  }
 80054fe:	4618      	mov	r0, r3
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>:
  SlotId head_ = NULL_SLOT;
  SlotId tail_ = NULL_SLOT;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	6039      	str	r1, [r7, #0]
    return p;
 8005514:	683b      	ldr	r3, [r7, #0]
  }
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>:
    const CollectionData* collection) {
  const void* data = collection;  // prevent warning cast-align
  return reinterpret_cast<const VariantData*>(data);
}

inline VariantData* collectionToVariant(CollectionData* collection) {
 8005522:	b480      	push	{r7}
 8005524:	b085      	sub	sp, #20
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  void* data = collection;  // prevent warning cast-align
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60fb      	str	r3, [r7, #12]
  return reinterpret_cast<VariantData*>(data);
 800552e:	68fb      	ldr	r3, [r7, #12]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>:
#endif
  Object = 0x20,
  Array = 0x40,
};

inline bool operator&(VariantType type, VariantTypeBits bit) {
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	4603      	mov	r3, r0
 8005544:	460a      	mov	r2, r1
 8005546:	71fb      	strb	r3, [r7, #7]
 8005548:	4613      	mov	r3, r2
 800554a:	71bb      	strb	r3, [r7, #6]
  return (uint8_t(type) & uint8_t(bit)) != 0;
 800554c:	79fa      	ldrb	r2, [r7, #7]
 800554e:	79bb      	ldrb	r3, [r7, #6]
 8005550:	4013      	ands	r3, r2
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	bf14      	ite	ne
 8005558:	2301      	movne	r3, #1
 800555a:	2300      	moveq	r3, #0
 800555c:	b2db      	uxtb	r3, r3
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>:

union VariantContent {
  VariantContent() {}
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>:
  VariantType type_;
  SlotId next_;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
    return p;
 800558a:	683b      	ldr	r3, [r7, #0]
  }
 800558c:	4618      	mov	r0, r3
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>:

  static void operator delete(void*, void*) noexcept {}

  VariantData() : type_(VariantType::Null), next_(NULL_SLOT) {}
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff ffe1 	bl	800556a <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	711a      	strb	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055b4:	80da      	strh	r2, [r3, #6]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4618      	mov	r0, r3
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>:

  SlotId next() const {
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
    return next_;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	88db      	ldrh	r3, [r3, #6]
  }
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>:

  void setNext(SlotId slot) {
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	807b      	strh	r3, [r7, #2]
    next_ = slot;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	887a      	ldrh	r2, [r7, #2]
 80055e8:	80da      	strh	r2, [r3, #6]
  }
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
      default:
        return true;
    }
  }

  ArrayData* asArray() {
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b082      	sub	sp, #8
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
    return isArray() ? &content_.asArray : 0;
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f85f 	bl	80056c2 <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x18>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	e000      	b.n	8005610 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x1a>
 800560e:	2300      	movs	r3, #0
  }
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>:

  const ArrayData* asArray() const {
    return const_cast<VariantData*>(this)->asArray();
  }

  CollectionData* asCollection() {
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
    return isCollection() ? &content_.asCollection : 0;
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f85f 	bl	80056e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x18>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	e000      	b.n	8005632 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x1a>
 8005630:	2300      	movs	r3, #0
  }
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:
      default:
        return 0;
    }
  }

  ObjectData* asObject() {
 800563a:	b580      	push	{r7, lr}
 800563c:	b082      	sub	sp, #8
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asObject : 0;
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f86c 	bl	8005720 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x18>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	e000      	b.n	8005654 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x1a>
 8005652:	2300      	movs	r3, #0
  }
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:

  const ObjectData* asObject() const {
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff ffe8 	bl	800563a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 800566a:	4603      	mov	r3, r0
  }
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>:
      default:
        return JsonString();
    }
  }

  JsonString asString() const {
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
    switch (type_) {
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	791b      	ldrb	r3, [r3, #4]
 8005682:	2b04      	cmp	r3, #4
 8005684:	d002      	beq.n	800568c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x18>
 8005686:	2b05      	cmp	r3, #5
 8005688:	d008      	beq.n	800569c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x28>
 800568a:	e013      	b.n	80056b4 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x40>
      case VariantType::LinkedString:
        return JsonString(content_.asLinkedString, true);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2201      	movs	r2, #1
 8005692:	4619      	mov	r1, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff feb6 	bl	8005406 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 800569a:	e00e      	b.n	80056ba <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      case VariantType::OwnedString:
        return JsonString(content_.asOwnedString->data,
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f103 0108 	add.w	r1, r3, #8
                          content_.asOwnedString->length);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	88da      	ldrh	r2, [r3, #6]
 80056aa:	2300      	movs	r3, #0
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f001 fea5 	bl	80073fc <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 80056b2:	e002      	b.n	80056ba <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      default:
        return JsonString();
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff fe97 	bl	80053e8 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
    }
  }
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>:
    if (!obj)
      return nullptr;
    return obj->getOrAddMember(key, resources);
  }

  bool isArray() const {
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Array;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	791b      	ldrb	r3, [r3, #4]
 80056ce:	2b40      	cmp	r3, #64	@ 0x40
 80056d0:	bf0c      	ite	eq
 80056d2:	2301      	moveq	r3, #1
 80056d4:	2300      	movne	r3, #0
 80056d6:	b2db      	uxtb	r3, r3
  }
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>:

  bool isBoolean() const {
    return type_ == VariantType::Boolean;
  }

  bool isCollection() const {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::CollectionMask;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	791b      	ldrb	r3, [r3, #4]
 80056f0:	2160      	movs	r1, #96	@ 0x60
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff ff22 	bl	800553c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80056f8:	4603      	mov	r3, r0
  }
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>:

  bool isFloat() const {
 8005702:	b580      	push	{r7, lr}
 8005704:	b082      	sub	sp, #8
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::NumberBit;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	791b      	ldrb	r3, [r3, #4]
 800570e:	2108      	movs	r1, #8
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff ff13 	bl	800553c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8005716:	4603      	mov	r3, r0
  }
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>:
    if (!var)
      return true;
    return var->isNull();
  }

  bool isObject() const {
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Object;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	791b      	ldrb	r3, [r3, #4]
 800572c:	2b20      	cmp	r3, #32
 800572e:	bf0c      	ite	eq
 8005730:	2301      	moveq	r3, #1
 8005732:	2300      	movne	r3, #0
 8005734:	b2db      	uxtb	r3, r3
  }
 8005736:	4618      	mov	r0, r3
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>:
    if (!var)
      return;
    var->removeMember(key, resources);
  }

  void reset() {  // TODO: remove
 8005742:	b480      	push	{r7}
 8005744:	b083      	sub	sp, #12
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
    type_ = VariantType::Null;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	711a      	strb	r2, [r3, #4]
  }
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>:

  void setBoolean(bool value) {
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	460b      	mov	r3, r1
 8005766:	70fb      	strb	r3, [r7, #3]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Boolean;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2206      	movs	r2, #6
 800576c:	711a      	strb	r2, [r3, #4]
    content_.asBoolean = value;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	78fa      	ldrb	r2, [r7, #3]
 8005772:	701a      	strb	r2, [r3, #0]
  }
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>:
  }

  template <typename TAdaptedString>
  bool setString(TAdaptedString value, ResourceManager* resources);

  bool setString(StringNode* s, ResourceManager*) {
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
    setOwnedString(s);
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f805 	bl	800579e <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 8005794:	2301      	movs	r3, #1
  }
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>:
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::LinkedString;
    content_.asLinkedString = s;
  }

  void setOwnedString(StringNode* s) {
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::OwnedString;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2205      	movs	r2, #5
 80057ac:	711a      	strb	r2, [r3, #4]
    content_.asOwnedString = s;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	601a      	str	r2, [r3, #0]
  }
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>:
class CollectionData {
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057ce:	801a      	strh	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057d6:	805a      	strh	r2, [r3, #2]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ArrayData : public CollectionData {
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff ffe5 	bl	80057c0 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>:

  static size_t size(const VariantData* var, const ResourceManager* resources) {
    return var != 0 ? var->size(resources) : 0;
  }

  ArrayData& toArray() {
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Array;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2240      	movs	r2, #64	@ 0x40
 800580c:	711a      	strb	r2, [r3, #4]
    new (&content_.asArray) ArrayData();
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4619      	mov	r1, r3
 8005812:	2004      	movs	r0, #4
 8005814:	f7ff fe79 	bl	800550a <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d006      	beq.n	800582c <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv+0x2c>
 800581e:	2200      	movs	r2, #0
 8005820:	801a      	strh	r2, [r3, #0]
 8005822:	2200      	movs	r2, #0
 8005824:	805a      	strh	r2, [r3, #2]
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff ffdd 	bl	80057e6 <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>
    return content_.asArray;
 800582c:	687b      	ldr	r3, [r7, #4]
  }
 800582e:	4618      	mov	r0, r3
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ObjectData : public CollectionData {
 8005836:	b580      	push	{r7, lr}
 8005838:	b082      	sub	sp, #8
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff ffbd 	bl	80057c0 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>:
      return 0;
    var->clear(resources);
    return &var->toArray();
  }

  ObjectData& toObject() {
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Object;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	711a      	strb	r2, [r3, #4]
    new (&content_.asObject) ObjectData();
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4619      	mov	r1, r3
 8005862:	2004      	movs	r0, #4
 8005864:	f7ff fe51 	bl	800550a <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d006      	beq.n	800587c <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv+0x2c>
 800586e:	2200      	movs	r2, #0
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	2200      	movs	r2, #0
 8005874:	805a      	strh	r2, [r3, #2]
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff ffdd 	bl	8005836 <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>
    return content_.asObject;
 800587c:	687b      	ldr	r3, [r7, #4]
  }
 800587e:	4618      	mov	r0, r3
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>:
  StringPool() = default;
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4618      	mov	r0, r3
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>:
  static_assert(sizeof(FreeSlot) <= sizeof(T), "T is too small");

 public:
  using Pool = MemoryPool<T>;

  MemoryPoolList() = default;
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	621a      	str	r2, [r3, #32]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2204      	movs	r2, #4
 80058ba:	84da      	strh	r2, [r3, #38]	@ 0x26
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80058c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>:
  };

 public:
  constexpr static size_t slotSize = sizeof(SlotData);

  ResourceManager(Allocator* allocator = DefaultAllocator::instance())
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]
      : allocator_(allocator), overflowed_(false) {}
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	711a      	strb	r2, [r3, #4]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3308      	adds	r3, #8
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff ffca 	bl	8005886 <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	330c      	adds	r3, #12
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff ffd3 	bl	80058a2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4618      	mov	r0, r3
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>:
      overflowed_ = true;

    return node;
  }

  void saveString(StringNode* node) {
 8005906:	b580      	push	{r7, lr}
 8005908:	b082      	sub	sp, #8
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6039      	str	r1, [r7, #0]
    stringPool_.add(node);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3308      	adds	r3, #8
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff fd16 	bl	8005348 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
  }
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>:
  template <typename TAdaptedString>
  StringNode* getString(const TAdaptedString& str) const {
    return stringPool_.get(str);
  }

  StringNode* createString(size_t length) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
    auto node = StringNode::create(length, allocator_);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4619      	mov	r1, r3
 8005934:	6838      	ldr	r0, [r7, #0]
 8005936:	f7ff fc43 	bl	80051c0 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800593a:	60f8      	str	r0, [r7, #12]
    if (!node)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d102      	bne.n	8005948 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj+0x24>
      overflowed_ = true;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	711a      	strb	r2, [r3, #4]
    return node;
 8005948:	68fb      	ldr	r3, [r7, #12]
  }
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>:

  StringNode* resizeString(StringNode* node, size_t length) {
 8005952:	b580      	push	{r7, lr}
 8005954:	b084      	sub	sp, #16
 8005956:	af00      	add	r7, sp, #0
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	607a      	str	r2, [r7, #4]
    node = StringNode::resize(node, length, allocator_);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	68b8      	ldr	r0, [r7, #8]
 8005968:	f7ff fc55 	bl	8005216 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>
 800596c:	60b8      	str	r0, [r7, #8]
    if (!node)
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d102      	bne.n	800597a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj+0x28>
      overflowed_ = true;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	711a      	strb	r2, [r3, #4]
    return node;
 800597a:	68bb      	ldr	r3, [r7, #8]
  }
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>:

  void destroyString(StringNode* node) {
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
    StringNode::destroy(node, allocator_);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4619      	mov	r1, r3
 8005994:	6838      	ldr	r0, [r7, #0]
 8005996:	f7ff fc6d 	bl	8005274 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
  }
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>:

  void dereferenceString(const char* s) {
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
    stringPool_.dereference(s, allocator_);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f103 0008 	add.w	r0, r3, #8
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	f7ff fcd7 	bl	800536c <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>
  }
 80059be:	bf00      	nop
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>:

  void clear() {
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b082      	sub	sp, #8
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
    variantPools_.clear(allocator_);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f103 020c 	add.w	r2, r3, #12
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4619      	mov	r1, r3
 80059da:	4610      	mov	r0, r2
 80059dc:	f001 fd24 	bl	8007428 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
    overflowed_ = false;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	711a      	strb	r2, [r3, #4]
    stringPool_.clear(allocator_);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f103 0208 	add.w	r2, r3, #8
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4619      	mov	r1, r3
 80059f2:	4610      	mov	r0, r2
 80059f4:	f7ff fc8e 	bl	8005314 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
  }
 80059f8:	bf00      	nop
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>:

  void shrinkToFit() {
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
    variantPools_.shrinkToFit(allocator_);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f103 020c 	add.w	r2, r3, #12
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4619      	mov	r1, r3
 8005a14:	4610      	mov	r0, r2
 8005a16:	f001 fd3f 	bl	8007498 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
  }
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(nullptr), resources_(nullptr) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data,
 8005a22:	b480      	push	{r7}
 8005a24:	b085      	sub	sp, #20
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	607a      	str	r2, [r7, #4]
                            const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>:
  size_t memoryUsage() const {
    return 0;
  }

 protected:
  const detail::VariantData* getData() const {
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
    return data_;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
  }
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>:

  const detail::ResourceManager* getResourceManager() const {
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
    return resources_;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
  }
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::VariantData* data, detail::ResourceManager* resources)
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	605a      	str	r2, [r3, #4]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>:

 private:
  detail::ResourceManager* getResourceManager() const {
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
    return resources_;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
  }
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>:

  detail::VariantData* getData() const {
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
    return data_;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
  }
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>:

  static JsonVariant fromJson(JsonVariant src) {
    return src;
  }

  static bool checkJson(JsonVariant src) {
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8005ada:	463b      	mov	r3, r7
 8005adc:	4618      	mov	r0, r3
 8005ade:	f001 fd13 	bl	8007508 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8005ae2:	60f8      	str	r0, [r7, #12]
    return !!data;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	bf14      	ite	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	2300      	moveq	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
  }
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>:

class JsonArrayIterator {
  friend class JsonArray;

 public:
  JsonArrayIterator() {}
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff fcb2 	bl	800546c <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>:
  explicit JsonArrayIterator(detail::ArrayData::iterator iterator,
 8005b12:	b480      	push	{r7}
 8005b14:	b085      	sub	sp, #20
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	1d38      	adds	r0, r7, #4
 8005b1c:	e880 0006 	stmia.w	r0, {r1, r2}
 8005b20:	603b      	str	r3, [r7, #0]
                             detail::ResourceManager* resources)
      : iterator_(iterator), resources_(resources) {}
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	461a      	mov	r2, r3
 8005b26:	1d3b      	adds	r3, r7, #4
 8005b28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005b2c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	609a      	str	r2, [r3, #8]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>:

  JsonVariant operator*() {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
    return JsonVariant(iterator_.data(), resources_);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7ff fcce 	bl	80054f2 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8005b56:	4601      	mov	r1, r0
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7ff ff8a 	bl	8005a78 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>:

  bool operator==(const JsonArrayIterator& other) const {
    return iterator_ == other.iterator_;
  }

  bool operator!=(const JsonArrayIterator& other) const {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
    return iterator_ != other.iterator_;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff fc98 	bl	80054b2 <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>
 8005b82:	4603      	mov	r3, r0
  }
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>:

  JsonArrayIterator& operator++() {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
    iterator_.next(resources_);
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	f000 f936 	bl	8005e0e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    return *this;
 8005ba2:	687b      	ldr	r3, [r7, #4]
  }
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>:

 public:
  using iterator = JsonArrayIterator;

  // Constructs an unbound reference.
  JsonArray() : data_(0), resources_(0) {}
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	605a      	str	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonArray(detail::ArrayData* data, detail::ResourceManager* resources)
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>:
    return detail::ArrayData::addValue(data_, value, resources_);
  }

  // Returns an iterator to the first element of the array.
  // https://arduinojson.org/v7/api/jsonarray/begin/
  iterator begin() const {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
    if (!data_)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d103      	bne.n	8005c0e <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x1a>
      return iterator();
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff ff76 	bl	8005af8 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
 8005c0c:	e011      	b.n	8005c32 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x3e>
    return iterator(data_->createIterator(resources_), resources_);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4619      	mov	r1, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	f107 0308 	add.w	r3, r7, #8
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 f919 	bl	8005e54 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f107 0208 	add.w	r2, r7, #8
 8005c2a:	ca06      	ldmia	r2, {r1, r2}
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff ff70 	bl	8005b12 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>
  }
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>:

  // Returns an iterator following the last element of the array.
  // https://arduinojson.org/v7/api/jsonarray/end/
  iterator end() const {
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
    return iterator();
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7ff ff57 	bl	8005af8 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
  }
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>:

 public:
  using iterator = JsonObjectIterator;

  // Creates an unbound reference.
  JsonObject() : data_(0), resources_(0) {}
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	605a      	str	r2, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonObject(detail::ObjectData* data, detail::ResourceManager* resource)
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resource) {}
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	605a      	str	r2, [r3, #4]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
    return resources_;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
  }
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>:

  detail::VariantData* getData() const {
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
    return detail::collectionToVariant(data_);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff fc2f 	bl	8005522 <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8005cc4:	4603      	mov	r3, r0
  }
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>:
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
  friend class detail::VariantAttorney;

 public:
  explicit JsonDocument(Allocator* alloc = detail::DefaultAllocator::instance())
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	6039      	str	r1, [r7, #0]
      : resources_(alloc) {}
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fdf8 	bl	80058d2 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3338      	adds	r3, #56	@ 0x38
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff fc56 	bl	8005598 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3708      	adds	r7, #8
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>:
    return resources_.allocator();
  }

  // Reduces the capacity of the memory pool to match the current usage.
  // https://arduinojson.org/v7/api/jsondocument/shrinktofit/
  void shrinkToFit() {
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b082      	sub	sp, #8
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
    resources_.shrinkToFit();
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff fe7d 	bl	8005a00 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>
  }
 8005d06:	bf00      	nop
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>:
    return getVariant().template as<T>();
  }

  // Empties the document and resets the memory pool
  // https://arduinojson.org/v7/api/jsondocument/clear/
  void clear() {
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
    resources_.clear();
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fe54 	bl	80059c6 <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>
    data_.reset();
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3338      	adds	r3, #56	@ 0x38
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff fd0d 	bl	8005742 <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>
  }
 8005d28:	bf00      	nop
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>:

  JsonVariantConst getVariant() const {
    return JsonVariantConst(&data_, &resources_);
  }

  detail::ResourceManager* getResourceManager() {
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
    return &resources_;
 8005d38:	687b      	ldr	r3, [r7, #4]
  }
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
    return &data_;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3338      	adds	r3, #56	@ 0x38
  }
 8005d52:	4618      	mov	r0, r3
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
    return &data_;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	3338      	adds	r3, #56	@ 0x38
  }
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>:
    --index;
  }
  return it;
}

inline VariantData* ArrayData::addElement(ResourceManager* resources) {
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	6039      	str	r1, [r7, #0]
  auto slot = resources->allocVariant();
 8005d80:	f107 0308 	add.w	r3, r7, #8
 8005d84:	6839      	ldr	r1, [r7, #0]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 f93e 	bl	8006008 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!slot)
 8005d8c:	f107 0308 	add.w	r3, r7, #8
 8005d90:	4618      	mov	r0, r3
 8005d92:	f001 fbdd 	bl	8007550 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f083 0301 	eor.w	r3, r3, #1
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x30>
    return nullptr;
 8005da2:	2300      	movs	r3, #0
 8005da4:	e00d      	b.n	8005dc2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x4c>
  CollectionData::appendOne(slot, resources);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f107 0208 	add.w	r2, r7, #8
 8005dae:	ca06      	ldmia	r2, {r1, r2}
 8005db0:	f000 f867 	bl	8005e82 <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>
  return slot.ptr();
 8005db4:	f107 0308 	add.w	r3, r7, #8
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 fbda 	bl	8007572 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	bf00      	nop
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>:
#include <ArduinoJson/Variant/VariantCompare.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline CollectionIterator::CollectionIterator(VariantData* slot, SlotId slotId)
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	80fb      	strh	r3, [r7, #6]
    : slot_(slot), currentId_(slotId) {
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	88fa      	ldrh	r2, [r7, #6]
 8005de2:	809a      	strh	r2, [r3, #4]
  nextId_ = slot_ ? slot_->next() : NULL_SLOT;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x32>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff fbe5 	bl	80055c0 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8005df6:	4603      	mov	r3, r0
 8005df8:	461a      	mov	r2, r3
 8005dfa:	e001      	b.n	8005e00 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x36>
 8005dfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	80da      	strh	r2, [r3, #6]
}
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>:

inline void CollectionIterator::next(const ResourceManager* resources) {
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
  ARDUINOJSON_ASSERT(currentId_ != NULL_SLOT);
  slot_ = resources->getVariant(nextId_);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	88db      	ldrh	r3, [r3, #6]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6838      	ldr	r0, [r7, #0]
 8005e20:	f000 f965 	bl	80060ee <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005e24:	4602      	mov	r2, r0
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	601a      	str	r2, [r3, #0]
  currentId_ = nextId_;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	88da      	ldrh	r2, [r3, #6]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	809a      	strh	r2, [r3, #4]
  if (slot_)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d008      	beq.n	8005e4c <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE+0x3e>
    nextId_ = slot_->next();
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff fbbe 	bl	80055c0 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8005e44:	4603      	mov	r3, r0
 8005e46:	461a      	mov	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	80da      	strh	r2, [r3, #6]
}
 8005e4c:	bf00      	nop
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>:

inline CollectionData::iterator CollectionData::createIterator(
    const ResourceManager* resources) const {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  return iterator(resources->getVariant(head_), head_);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f941 	bl	80060ee <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005e6c:	4601      	mov	r1, r0
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f7ff ffa8 	bl	8005dca <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>
}
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>:

inline void CollectionData::appendOne(Slot<VariantData> slot,
                                      const ResourceManager* resources) {
 8005e82:	b590      	push	{r4, r7, lr}
 8005e84:	b087      	sub	sp, #28
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	1d38      	adds	r0, r7, #4
 8005e8c:	e880 0006 	stmia.w	r0, {r1, r2}
 8005e90:	603b      	str	r3, [r7, #0]
  if (tail_ != NULL_SLOT) {
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	885b      	ldrh	r3, [r3, #2]
 8005e96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d019      	beq.n	8005ed2 <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x50>
    auto tail = resources->getVariant(tail_);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	885b      	ldrh	r3, [r3, #2]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6838      	ldr	r0, [r7, #0]
 8005ea6:	f000 f922 	bl	80060ee <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005eaa:	6178      	str	r0, [r7, #20]
    tail->setNext(slot.id());
 8005eac:	697c      	ldr	r4, [r7, #20]
 8005eae:	1d3b      	adds	r3, r7, #4
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f001 fb6a 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f7ff fb8c 	bl	80055d8 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = slot.id();
 8005ec0:	1d3b      	adds	r3, r7, #4
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f001 fb61 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	461a      	mov	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = slot.id();
    tail_ = slot.id();
  }
}
 8005ed0:	e00f      	b.n	8005ef2 <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x70>
    head_ = slot.id();
 8005ed2:	1d3b      	adds	r3, r7, #4
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f001 fb58 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005eda:	4603      	mov	r3, r0
 8005edc:	461a      	mov	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	801a      	strh	r2, [r3, #0]
    tail_ = slot.id();
 8005ee2:	1d3b      	adds	r3, r7, #4
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f001 fb50 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005eea:	4603      	mov	r3, r0
 8005eec:	461a      	mov	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	805a      	strh	r2, [r3, #2]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd90      	pop	{r4, r7, pc}

08005efa <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>:

inline void CollectionData::appendPair(Slot<VariantData> key,
                                       Slot<VariantData> value,
                                       const ResourceManager* resources) {
 8005efa:	b082      	sub	sp, #8
 8005efc:	b590      	push	{r4, r7, lr}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	1d38      	adds	r0, r7, #4
 8005f06:	e880 0006 	stmia.w	r0, {r1, r2}
 8005f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  key->setNext(value.id());
 8005f0c:	1d3b      	adds	r3, r7, #4
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 fb47 	bl	80075a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8005f14:	4604      	mov	r4, r0
 8005f16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 fb35 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005f20:	4603      	mov	r3, r0
 8005f22:	4619      	mov	r1, r3
 8005f24:	4620      	mov	r0, r4
 8005f26:	f7ff fb57 	bl	80055d8 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>

  if (tail_ != NULL_SLOT) {
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	885b      	ldrh	r3, [r3, #2]
 8005f2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d01a      	beq.n	8005f6c <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x72>
    auto tail = resources->getVariant(tail_);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	885b      	ldrh	r3, [r3, #2]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005f3e:	f000 f8d6 	bl	80060ee <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005f42:	6178      	str	r0, [r7, #20]
    tail->setNext(key.id());
 8005f44:	697c      	ldr	r4, [r7, #20]
 8005f46:	1d3b      	adds	r3, r7, #4
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f001 fb1e 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4619      	mov	r1, r3
 8005f52:	4620      	mov	r0, r4
 8005f54:	f7ff fb40 	bl	80055d8 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = value.id();
 8005f58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 fb14 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005f62:	4603      	mov	r3, r0
 8005f64:	461a      	mov	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = key.id();
    tail_ = value.id();
  }
}
 8005f6a:	e010      	b.n	8005f8e <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x94>
    head_ = key.id();
 8005f6c:	1d3b      	adds	r3, r7, #4
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f001 fb0b 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005f74:	4603      	mov	r3, r0
 8005f76:	461a      	mov	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	801a      	strh	r2, [r3, #0]
    tail_ = value.id();
 8005f7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005f80:	4618      	mov	r0, r3
 8005f82:	f001 fb02 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8005f86:	4603      	mov	r3, r0
 8005f88:	461a      	mov	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	805a      	strh	r2, [r3, #2]
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005f98:	b002      	add	sp, #8
 8005f9a:	4770      	bx	lr

08005f9c <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>:

inline void CollectionData::clear(ResourceManager* resources) {
 8005f9c:	b590      	push	{r4, r7, lr}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  auto next = head_;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	82fb      	strh	r3, [r7, #22]
  while (next != NULL_SLOT) {
 8005fac:	e01b      	b.n	8005fe6 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x4a>
    auto currId = next;
 8005fae:	8afb      	ldrh	r3, [r7, #22]
 8005fb0:	82bb      	strh	r3, [r7, #20]
    auto slot = resources->getVariant(next);
 8005fb2:	8afb      	ldrh	r3, [r7, #22]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6838      	ldr	r0, [r7, #0]
 8005fb8:	f000 f899 	bl	80060ee <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8005fbc:	6138      	str	r0, [r7, #16]
    next = slot->next();
 8005fbe:	6938      	ldr	r0, [r7, #16]
 8005fc0:	f7ff fafe 	bl	80055c0 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	82fb      	strh	r3, [r7, #22]
    resources->freeVariant({slot, currId});
 8005fc8:	683c      	ldr	r4, [r7, #0]
 8005fca:	8aba      	ldrh	r2, [r7, #20]
 8005fcc:	f107 0308 	add.w	r3, r7, #8
 8005fd0:	6939      	ldr	r1, [r7, #16]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f001 faf1 	bl	80075ba <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 8005fd8:	f107 0308 	add.w	r3, r7, #8
 8005fdc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f000 f851 	bl	8006088 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>
  while (next != NULL_SLOT) {
 8005fe6:	8afb      	ldrh	r3, [r7, #22]
 8005fe8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d1de      	bne.n	8005fae <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x12>
  }

  head_ = NULL_SLOT;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ff6:	801a      	strh	r2, [r3, #0]
  tail_ = NULL_SLOT;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ffe:	805a      	strh	r2, [r3, #2]
}
 8006000:	bf00      	nop
 8006002:	371c      	adds	r7, #28
 8006004:	46bd      	mov	sp, r7
 8006006:	bd90      	pop	{r4, r7, pc}

08006008 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>:
#include <ArduinoJson/Polyfills/alias_cast.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline Slot<VariantData> ResourceManager::allocVariant() {
 8006008:	b590      	push	{r4, r7, lr}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	f103 010c 	add.w	r1, r3, #12
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	f107 0308 	add.w	r3, r7, #8
 8006020:	4618      	mov	r0, r3
 8006022:	f001 faf0 	bl	8007606 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8006026:	f107 0308 	add.w	r3, r7, #8
 800602a:	4618      	mov	r0, r3
 800602c:	f001 fb2e 	bl	800768c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8006030:	4603      	mov	r3, r0
 8006032:	f083 0301 	eor.w	r3, r3, #1
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	d006      	beq.n	800604a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x42>
    overflowed_ = true;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2201      	movs	r2, #1
 8006040:	711a      	strb	r2, [r3, #4]
    return {};
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f001 facd 	bl	80075e2 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>
 8006048:	e01a      	b.n	8006080 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x78>
  }
  return {new (&p->variant) VariantData, p.id()};
 800604a:	f107 0308 	add.w	r3, r7, #8
 800604e:	4618      	mov	r0, r3
 8006050:	f001 fb2d 	bl	80076ae <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 8006054:	4603      	mov	r3, r0
 8006056:	4619      	mov	r1, r3
 8006058:	2008      	movs	r0, #8
 800605a:	f7ff fa91 	bl	8005580 <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>
 800605e:	4604      	mov	r4, r0
 8006060:	2c00      	cmp	r4, #0
 8006062:	d002      	beq.n	800606a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x62>
 8006064:	4620      	mov	r0, r4
 8006066:	f7ff fa97 	bl	8005598 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 800606a:	f107 0308 	add.w	r3, r7, #8
 800606e:	4618      	mov	r0, r3
 8006070:	f001 fb29 	bl	80076c6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8006074:	4603      	mov	r3, r0
 8006076:	461a      	mov	r2, r3
 8006078:	4621      	mov	r1, r4
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f001 fa9d 	bl	80075ba <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
}
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	bd90      	pop	{r4, r7, pc}

08006088 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>:

inline void ResourceManager::freeVariant(Slot<VariantData> variant) {
 8006088:	b5b0      	push	{r4, r5, r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	1d3b      	adds	r3, r7, #4
 8006092:	e883 0006 	stmia.w	r3, {r1, r2}
  variant->clear(this);
 8006096:	1d3b      	adds	r3, r7, #4
 8006098:	4618      	mov	r0, r3
 800609a:	f001 fa82 	bl	80075a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 800609e:	4603      	mov	r3, r0
 80060a0:	68f9      	ldr	r1, [r7, #12]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fa1c 	bl	80064e0 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
  variantPools_.freeSlot({alias_cast<SlotData*>(variant.ptr()), variant.id()});
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f103 040c 	add.w	r4, r3, #12
 80060ae:	1d3b      	adds	r3, r7, #4
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 fa5e 	bl	8007572 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 80060b6:	4603      	mov	r3, r0
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 fb10 	bl	80076de <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>
 80060be:	4605      	mov	r5, r0
 80060c0:	1d3b      	adds	r3, r7, #4
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 fa61 	bl	800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80060c8:	4603      	mov	r3, r0
 80060ca:	461a      	mov	r2, r3
 80060cc:	f107 0310 	add.w	r3, r7, #16
 80060d0:	4629      	mov	r1, r5
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 fb10 	bl	80076f8 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 80060d8:	f107 0310 	add.w	r3, r7, #16
 80060dc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80060e0:	4620      	mov	r0, r4
 80060e2:	f001 fb1d 	bl	8007720 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 80060e6:	bf00      	nop
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bdb0      	pop	{r4, r5, r7, pc}

080060ee <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>:

inline VariantData* ResourceManager::getVariant(SlotId id) const {
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	460b      	mov	r3, r1
 80060f8:	807b      	strh	r3, [r7, #2]
  return reinterpret_cast<VariantData*>(variantPools_.getSlot(id));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	330c      	adds	r3, #12
 80060fe:	887a      	ldrh	r2, [r7, #2]
 8006100:	4611      	mov	r1, r2
 8006102:	4618      	mov	r0, r3
 8006104:	f001 fb28 	bl	8007758 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8006108:	4603      	mov	r3, r0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>:

#if ARDUINOJSON_USE_EXTENSIONS
inline Slot<VariantExtension> ResourceManager::allocExtension() {
 8006112:	b590      	push	{r4, r7, lr}
 8006114:	b085      	sub	sp, #20
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	f103 010c 	add.w	r1, r3, #12
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	f107 0308 	add.w	r3, r7, #8
 800612a:	4618      	mov	r0, r3
 800612c:	f001 fa6b 	bl	8007606 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8006130:	f107 0308 	add.w	r3, r7, #8
 8006134:	4618      	mov	r0, r3
 8006136:	f001 faa9 	bl	800768c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 800613a:	4603      	mov	r3, r0
 800613c:	f083 0301 	eor.w	r3, r3, #1
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d006      	beq.n	8006154 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x42>
    overflowed_ = true;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2201      	movs	r2, #1
 800614a:	711a      	strb	r2, [r3, #4]
    return {};
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 fb27 	bl	80077a0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>
 8006152:	e011      	b.n	8006178 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x66>
  }
  return {&p->extension, p.id()};
 8006154:	f107 0308 	add.w	r3, r7, #8
 8006158:	4618      	mov	r0, r3
 800615a:	f001 faa8 	bl	80076ae <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 800615e:	4603      	mov	r3, r0
 8006160:	461c      	mov	r4, r3
 8006162:	f107 0308 	add.w	r3, r7, #8
 8006166:	4618      	mov	r0, r3
 8006168:	f001 faad 	bl	80076c6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 800616c:	4603      	mov	r3, r0
 800616e:	461a      	mov	r2, r3
 8006170:	4621      	mov	r1, r4
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 fb26 	bl	80077c4 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>
}
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	bd90      	pop	{r4, r7, pc}

08006180 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>:

inline void ResourceManager::freeExtension(SlotId id) {
 8006180:	b590      	push	{r4, r7, lr}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	807b      	strh	r3, [r7, #2]
  auto p = getExtension(id);
 800618c:	887b      	ldrh	r3, [r7, #2]
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f816 	bl	80061c2 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 8006196:	6178      	str	r0, [r7, #20]
  variantPools_.freeSlot({reinterpret_cast<SlotData*>(p), id});
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f103 040c 	add.w	r4, r3, #12
 800619e:	887a      	ldrh	r2, [r7, #2]
 80061a0:	f107 030c 	add.w	r3, r7, #12
 80061a4:	6979      	ldr	r1, [r7, #20]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f001 faa6 	bl	80076f8 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 80061ac:	f107 030c 	add.w	r3, r7, #12
 80061b0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80061b4:	4620      	mov	r0, r4
 80061b6:	f001 fab3 	bl	8007720 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 80061ba:	bf00      	nop
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd90      	pop	{r4, r7, pc}

080061c2 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>:

inline VariantExtension* ResourceManager::getExtension(SlotId id) const {
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	460b      	mov	r3, r1
 80061cc:	807b      	strh	r3, [r7, #2]
  return &variantPools_.getSlot(id)->extension;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	330c      	adds	r3, #12
 80061d2:	887a      	ldrh	r2, [r7, #2]
 80061d4:	4611      	mov	r1, r2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 fabe 	bl	8007758 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 80061dc:	4603      	mov	r3, r0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	4603      	mov	r3, r0
 80061ee:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(false);
 80061f0:	2000      	movs	r0, #0
 80061f2:	f000 f819 	bl	8006228 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 80061f6:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0')
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x1e>
        return 0;
 8006200:	2300      	movs	r3, #0
 8006202:	e00c      	b.n	800621e <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	79fa      	ldrb	r2, [r7, #7]
 800620a:	429a      	cmp	r2, r3
 800620c:	d103      	bne.n	8006216 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x30>
        return p[1];
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3301      	adds	r3, #1
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	e003      	b.n	800621e <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3302      	adds	r3, #2
 800621a:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0')
 800621c:	e7ec      	b.n	80061f8 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x12>
    }
  }
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>:

 private:
  static const char* escapeTable(bool isSerializing) {
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	4603      	mov	r3, r0
 8006230:	71fb      	strb	r3, [r7, #7]
    return &"//''\"\"\\\\b\bf\fn\nr\rt\t"[isSerializing ? 4 : 0];
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x14>
 8006238:	2304      	movs	r3, #4
 800623a:	e000      	b.n	800623e <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x16>
 800623c:	2300      	movs	r3, #0
 800623e:	4a04      	ldr	r2, [pc, #16]	@ (8006250 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x28>)
 8006240:	4413      	add	r3, r2
  }
 8006242:	4618      	mov	r0, r3
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	0802a334 	.word	0x0802a334

08006254 <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>:

class StringBuilder {
 public:
  static const size_t initialCapacity = 31;

  StringBuilder(ResourceManager* resources) : resources_(resources) {}
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	605a      	str	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	609a      	str	r2, [r3, #8]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>:

  ~StringBuilder() {
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
    if (node_)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d007      	beq.n	800629e <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev+0x20>
      resources_->destroyString(node_);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	4619      	mov	r1, r3
 8006298:	4610      	mov	r0, r2
 800629a:	f7ff fb73 	bl	8005984 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>
  }
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>:

  void startString() {
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
    size_ = 0;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	609a      	str	r2, [r3, #8]
    if (!node_)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d108      	bne.n	80062d0 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv+0x28>
      node_ = resources_->createString(initialCapacity);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	211f      	movs	r1, #31
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff fb2d 	bl	8005924 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>
 80062ca:	4602      	mov	r2, r0
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	605a      	str	r2, [r3, #4]
  }
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>:

  StringNode* save() {
 80062d8:	b590      	push	{r4, r7, lr}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	4413      	add	r3, r2
 80062ea:	2200      	movs	r2, #0
 80062ec:	721a      	strb	r2, [r3, #8]
    StringNode* node = resources_->getString(adaptString(node_->data, size_));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681c      	ldr	r4, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f103 0108 	add.w	r1, r3, #8
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	f107 0308 	add.w	r3, r7, #8
 8006302:	4618      	mov	r0, r3
 8006304:	f001 fa72 	bl	80077ec <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8006308:	f107 0308 	add.w	r3, r7, #8
 800630c:	4619      	mov	r1, r3
 800630e:	4620      	mov	r0, r4
 8006310:	f001 fa7d 	bl	800780e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8006314:	6178      	str	r0, [r7, #20]
    if (!node) {
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d113      	bne.n	8006344 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x6c>
      node = resources_->resizeString(node_, size_);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6818      	ldr	r0, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6859      	ldr	r1, [r3, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	461a      	mov	r2, r3
 800632a:	f7ff fb12 	bl	8005952 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 800632e:	6178      	str	r0, [r7, #20]
      ARDUINOJSON_ASSERT(node != nullptr);  // realloc to smaller can't fail
      resources_->saveString(node);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6979      	ldr	r1, [r7, #20]
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff fae5 	bl	8005906 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>
      node_ = nullptr;  // next time we need a new string
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	605a      	str	r2, [r3, #4]
 8006342:	e005      	b.n	8006350 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x78>
    } else {
      node->references++;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	889b      	ldrh	r3, [r3, #4]
 8006348:	3301      	adds	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	809a      	strh	r2, [r3, #4]
    }
    return node;
 8006350:	697b      	ldr	r3, [r7, #20]
  }
 8006352:	4618      	mov	r0, r3
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	bd90      	pop	{r4, r7, pc}

0800635a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0)  // TODO: memcpy
      append(*s++);
  }

  void append(char c) {
 800635a:	b590      	push	{r4, r7, lr}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
 8006362:	460b      	mov	r3, r1
 8006364:	70fb      	strb	r3, [r7, #3]
    if (node_ && size_ == node_->length)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d014      	beq.n	8006398 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6852      	ldr	r2, [r2, #4]
 8006376:	88d2      	ldrh	r2, [r2, #6]
 8006378:	4293      	cmp	r3, r2
 800637a:	d10d      	bne.n	8006398 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
      node_ = resources_->resizeString(node_, size_ * 2U + 1);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6859      	ldr	r1, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	3301      	adds	r3, #1
 800638c:	461a      	mov	r2, r3
 800638e:	f7ff fae0 	bl	8005952 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 8006392:	4602      	mov	r2, r0
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	605a      	str	r2, [r3, #4]
    if (node_)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00a      	beq.n	80063b6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x5c>
      node_->data[size_++] = c;
 80063a0:	78fc      	ldrb	r4, [r7, #3]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	1c58      	adds	r0, r3, #1
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	6088      	str	r0, [r1, #8]
 80063b0:	4413      	add	r3, r2
 80063b2:	4622      	mov	r2, r4
 80063b4:	721a      	strb	r2, [r3, #8]
  }
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd90      	pop	{r4, r7, pc}

080063be <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>:

  bool isValid() const {
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
    return node_ != nullptr;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bf14      	ite	ne
 80063ce:	2301      	movne	r3, #1
 80063d0:	2300      	moveq	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
  }
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>:

  size_t size() const {
    return size_;
  }

  JsonString str() const {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	4413      	add	r3, r2
 80063f4:	2200      	movs	r2, #0
 80063f6:	721a      	strb	r2, [r3, #8]
    return JsonString(node_->data, size_);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f103 0108 	add.w	r1, r3, #8
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	2300      	movs	r3, #0
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f001 fa11 	bl	800782e <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>
  }
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(const char* src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static const char* fromJson(JsonVariantConst src) {
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	463b      	mov	r3, r7
 800641c:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8006420:	463b      	mov	r3, r7
 8006422:	4618      	mov	r0, r3
 8006424:	f001 f87c 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8006428:	6178      	str	r0, [r7, #20]
    return data ? data->asString().c_str() : 0;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00c      	beq.n	800644a <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x36>
 8006430:	f107 0308 	add.w	r3, r7, #8
 8006434:	6979      	ldr	r1, [r7, #20]
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff f91c 	bl	8005674 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 800643c:	f107 0308 	add.w	r3, r7, #8
 8006440:	4618      	mov	r0, r3
 8006442:	f7fe fffb 	bl	800543c <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8006446:	4603      	mov	r3, r0
 8006448:	e000      	b.n	800644c <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x38>
 800644a:	2300      	movs	r3, #0
  }
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonArray>().set(src);
  }

  static JsonArray fromJson(JsonVariant src) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	1d3b      	adds	r3, r7, #4
 800645e:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 8006462:	1d3b      	adds	r3, r7, #4
 8006464:	4618      	mov	r0, r3
 8006466:	f001 f84f 	bl	8007508 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800646a:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 800646c:	1d3b      	adds	r3, r7, #4
 800646e:	4618      	mov	r0, r3
 8006470:	f001 f9ef 	bl	8007852 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8006474:	6138      	str	r0, [r7, #16]
    return JsonArray(data != 0 ? data->asArray() : 0, resources);
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d004      	beq.n	8006486 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x32>
 800647c:	6978      	ldr	r0, [r7, #20]
 800647e:	f7ff f8ba 	bl	80055f6 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8006482:	4603      	mov	r3, r0
 8006484:	e000      	b.n	8006488 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x34>
 8006486:	2300      	movs	r3, #0
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4619      	mov	r1, r3
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f7ff fb9e 	bl	8005bce <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>
  }
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	3718      	adds	r7, #24
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonObject>().set(src);
  }

  static JsonObject fromJson(JsonVariant src) {
 800649a:	b580      	push	{r7, lr}
 800649c:	b086      	sub	sp, #24
 800649e:	af00      	add	r7, sp, #0
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	1d3b      	adds	r3, r7, #4
 80064a4:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 80064a8:	1d3b      	adds	r3, r7, #4
 80064aa:	4618      	mov	r0, r3
 80064ac:	f001 f82c 	bl	8007508 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80064b0:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 80064b2:	1d3b      	adds	r3, r7, #4
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 f9cc 	bl	8007852 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80064ba:	6138      	str	r0, [r7, #16]
    return JsonObject(data != 0 ? data->asObject() : 0, resources);
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d004      	beq.n	80064cc <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x32>
 80064c2:	6978      	ldr	r0, [r7, #20]
 80064c4:	f7ff f8b9 	bl	800563a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 80064c8:	4603      	mov	r3, r0
 80064ca:	e000      	b.n	80064ce <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x34>
 80064cc:	2300      	movs	r3, #0
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4619      	mov	r1, r3
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f7ff fbce 	bl	8005c74 <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>
  }
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>:
  }

  return false;
}

inline void VariantData::clear(ResourceManager* resources) {
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  if (type_ & VariantTypeBits::OwnedStringBit)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	791b      	ldrb	r3, [r3, #4]
 80064ee:	2101      	movs	r1, #1
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff f823 	bl	800553c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d006      	beq.n	800650a <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x2a>
    resources->dereferenceString(content_.asOwnedString->data);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3308      	adds	r3, #8
 8006502:	4619      	mov	r1, r3
 8006504:	6838      	ldr	r0, [r7, #0]
 8006506:	f7ff fa4c 	bl	80059a2 <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>

#if ARDUINOJSON_USE_EXTENSIONS
  if (type_ & VariantTypeBits::ExtensionBit)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	791b      	ldrb	r3, [r3, #4]
 800650e:	2110      	movs	r1, #16
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff f813 	bl	800553c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x48>
    resources->freeExtension(content_.asSlotId);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	4619      	mov	r1, r3
 8006522:	6838      	ldr	r0, [r7, #0]
 8006524:	f7ff fe2c 	bl	8006180 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>
#endif

  auto collection = asCollection();
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff f875 	bl	8005618 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>
 800652e:	60f8      	str	r0, [r7, #12]
  if (collection)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x5e>
    collection->clear(resources);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f7ff fd2f 	bl	8005f9c <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>

  type_ = VariantType::Null;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	711a      	strb	r2, [r3, #4]
}
 8006544:	bf00      	nop
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>:

#if ARDUINOJSON_USE_EXTENSIONS
inline const VariantExtension* VariantData::getExtension(
    const ResourceManager* resources) const {
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  return type_ & VariantTypeBits::ExtensionBit
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	791b      	ldrb	r3, [r3, #4]
 800655a:	2110      	movs	r1, #16
 800655c:	4618      	mov	r0, r3
 800655e:	f7fe ffed 	bl	800553c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8006562:	4603      	mov	r3, r0
             ? resources->getExtension(content_.asSlotId)
 8006564:	2b00      	cmp	r3, #0
 8006566:	d007      	beq.n	8006578 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2c>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	4619      	mov	r1, r3
 800656e:	6838      	ldr	r0, [r7, #0]
 8006570:	f7ff fe27 	bl	80061c2 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 8006574:	4603      	mov	r3, r0
             : nullptr;
 8006576:	e000      	b.n	800657a <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2e>
             ? resources->getExtension(content_.asSlotId)
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>:
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : code_(c) {}
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	460b      	mov	r3, r1
 800658c:	70fb      	strb	r3, [r7, #3]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	78fa      	ldrb	r2, [r7, #3]
 8006592:	701a      	strb	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>:
  explicit operator bool() const {
    return code_ != Ok;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
    return code_;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	781b      	ldrb	r3, [r3, #0]
  }
 80065ae:	4618      	mov	r0, r3
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>:

  const char* c_str() const {
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
    static const char* messages[] = {
        "Ok",           "EmptyInput", "IncompleteInput",
        "InvalidInput", "NoMemory",   "TooDeep"};
    ARDUINOJSON_ASSERT(static_cast<size_t>(code_) <
                       sizeof(messages) / sizeof(messages[0]));
    return messages[code_];
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	461a      	mov	r2, r3
 80065ca:	4b04      	ldr	r3, [pc, #16]	@ (80065dc <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv+0x20>)
 80065cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  }
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	24000004 	.word	0x24000004

080065e0 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>:
};
}  // namespace DeserializationOption

namespace detail {
struct AllowAllFilter {
  bool allow() const {
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
    return true;
 80065e8:	2301      	movs	r3, #1
  }
 80065ea:	4618      	mov	r0, r3
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>:

  bool allowArray() const {
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
    return true;
 80065fe:	2301      	movs	r3, #1
  }
 8006600:	4618      	mov	r0, r3
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>:

  bool allowObject() const {
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
    return true;
 8006614:	2301      	movs	r3, #1
  }
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>:

  bool allowValue() const {
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
    return true;
 800662a:	2301      	movs	r3, #1
  }
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

namespace DeserializationOption {
class NestingLimit {
 public:
  NestingLimit() : value_(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	220a      	movs	r2, #10
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>:
  explicit NestingLimit(uint8_t n) : value_(n) {}
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	78fa      	ldrb	r2, [r7, #3]
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4618      	mov	r0, r3
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>:

  NestingLimit decrement() const {
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(value_ > 0);
    return NestingLimit(static_cast<uint8_t>(value_ - 1));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	3b01      	subs	r3, #1
 8006682:	b2da      	uxtb	r2, r3
 8006684:	f107 030c 	add.w	r3, r7, #12
 8006688:	4611      	mov	r1, r2
 800668a:	4618      	mov	r0, r3
 800668c:	f7ff ffe2 	bl	8006654 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>
 8006690:	7b3b      	ldrb	r3, [r7, #12]
  }
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>:

  bool reached() const {
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
    return value_ == 0;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bf0c      	ite	eq
 80066aa:	2301      	moveq	r3, #1
 80066ac:	2300      	movne	r3, #0
 80066ae:	b2db      	uxtb	r3, r3
  }
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>:
    DeserializationOption::NestingLimit nestingLimit, TFilter filter) {
  return {filter, nestingLimit};
}

inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions(
    DeserializationOption::NestingLimit nestingLimit = {}) {
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	7138      	strb	r0, [r7, #4]
  return {{}, nestingLimit};
 80066c4:	793b      	ldrb	r3, [r7, #4]
 80066c6:	737b      	strb	r3, [r7, #13]
 80066c8:	2300      	movs	r3, #0
 80066ca:	7b3a      	ldrb	r2, [r7, #12]
 80066cc:	f362 0307 	bfi	r3, r2, #0, #8
 80066d0:	7b7a      	ldrb	r2, [r7, #13]
 80066d2:	f362 230f 	bfi	r3, r2, #8, #8
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>:
inline void shrinkJsonDocument(TDestination&) {
  // no-op by default
}

#if ARDUINOJSON_AUTO_SHRINK
inline void shrinkJsonDocument(JsonDocument& doc) {
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b082      	sub	sp, #8
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  doc.shrinkToFit();
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7ff fb03 	bl	8005cf6 <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>
}
 80066f0:	bf00      	nop
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	4603      	mov	r3, r0
 8006700:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xD800 && codeunit < 0xDC00;
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8006708:	d305      	bcc.n	8006716 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8006710:	d201      	bcs.n	8006716 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 8006712:	2301      	movs	r3, #1
 8006714:	e000      	b.n	8006718 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x20>
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>:

inline bool isLowSurrogate(uint16_t codeunit) {
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xDC00 && codeunit < 0xE000;
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8006734:	d305      	bcc.n	8006742 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 8006736:	88fb      	ldrh	r3, [r7, #6]
 8006738:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800673c:	d201      	bcs.n	8006742 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x20>
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>:

class Codepoint {
 public:
  Codepoint() : highSurrogate_(0), codepoint_(0) {}
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	801a      	strh	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	605a      	str	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4618      	mov	r0, r3
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>:

  bool append(uint16_t codeunit) {
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	807b      	strh	r3, [r7, #2]
    if (isHighSurrogate(codeunit)) {
 800677e:	887b      	ldrh	r3, [r7, #2]
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff ffb9 	bl	80066f8 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d007      	beq.n	800679c <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x2a>
      highSurrogate_ = codeunit & 0x3FF;
 800678c:	887b      	ldrh	r3, [r7, #2]
 800678e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006792:	b29a      	uxth	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	801a      	strh	r2, [r3, #0]
      return false;
 8006798:	2300      	movs	r3, #0
 800679a:	e018      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    if (isLowSurrogate(codeunit)) {
 800679c:	887b      	ldrh	r3, [r7, #2]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff ffc0 	bl	8006724 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00d      	beq.n	80067c6 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x54>
      codepoint_ =
          uint32_t(0x10000 + ((highSurrogate_ << 10) | (codeunit & 0x3FF)));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	029a      	lsls	r2, r3, #10
 80067b0:	887b      	ldrh	r3, [r7, #2]
 80067b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80067bc:	461a      	mov	r2, r3
      codepoint_ =
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	605a      	str	r2, [r3, #4]
      return true;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e003      	b.n	80067ce <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    codepoint_ = codeunit;
 80067c6:	887a      	ldrh	r2, [r7, #2]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	605a      	str	r2, [r3, #4]
    return true;
 80067cc:	2301      	movs	r3, #1
  }
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>:

  uint32_t value() const {
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
    return codepoint_;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
  }
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <_ZN11ArduinoJson8V730HB226detail7isdigitEc>:
#include <ArduinoJson/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	4603      	mov	r3, r0
 80067f6:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 80067f8:	79fb      	ldrb	r3, [r7, #7]
 80067fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80067fc:	d904      	bls.n	8006808 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	2b39      	cmp	r3, #57	@ 0x39
 8006802:	d801      	bhi.n	8006808 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1c>
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>:
  Double,
#endif
};

union NumberValue {
  NumberValue() {}
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>:
  NumberValue(float x) : asFloat(x) {}
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	ed87 0a00 	vstr	s0, [r7]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>:
  NumberValue(JsonInteger x) : asSignedInteger(x) {}
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	e9c7 2300 	strd	r2, r3, [r7]
 8006858:	68f9      	ldr	r1, [r7, #12]
 800685a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800685e:	e9c1 2300 	strd	r2, r3, [r1]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4618      	mov	r0, r3
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>:
  NumberValue(JsonUInt x) : asUnsignedInteger(x) {}
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	e9c7 2300 	strd	r2, r3, [r7]
 800687c:	68f9      	ldr	r1, [r7, #12]
 800687e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006882:	e9c1 2300 	strd	r2, r3, [r1]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  NumberValue(double x) : asDouble(x) {}
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	ed87 0b00 	vstr	d0, [r7]
 80068a0:	68f9      	ldr	r1, [r7, #12]
 80068a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068a6:	e9c1 2300 	strd	r2, r3, [r1]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>:
class Number {
  NumberType type_;
  NumberValue value_;

 public:
  Number() : type_(NumberType::Invalid) {}
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3308      	adds	r3, #8
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff ffa3 	bl	8006816 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>:
  Number(float value) : type_(NumberType::Float), value_(value) {}
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	ed87 0a00 	vstr	s0, [r7]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	3308      	adds	r3, #8
 80068f0:	ed97 0a00 	vldr	s0, [r7]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff ff99 	bl	800682c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>:
  Number(JsonInteger value) : type_(NumberType::SignedInteger), value_(value) {}
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	e9c7 2300 	strd	r2, r3, [r7]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2202      	movs	r2, #2
 8006914:	701a      	strb	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f103 0108 	add.w	r1, r3, #8
 800691c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006920:	4608      	mov	r0, r1
 8006922:	f7ff ff93 	bl	800684c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>:
  Number(JsonUInt value) : type_(NumberType::UnsignedInteger), value_(value) {}
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	e9c7 2300 	strd	r2, r3, [r7]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2203      	movs	r2, #3
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f103 0108 	add.w	r1, r3, #8
 8006948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800694c:	4608      	mov	r0, r1
 800694e:	f7ff ff8f 	bl	8006870 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  Number(double value) : type_(NumberType::Double), value_(value) {}
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	ed87 0b00 	vstr	d0, [r7]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2204      	movs	r2, #4
 800696c:	701a      	strb	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3308      	adds	r3, #8
 8006972:	ed97 0b00 	vldr	d0, [r7]
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff ff8c 	bl	8006894 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>:
      default:
        return T();
    }
  }

  NumberType type() const {
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
    return type_;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	781b      	ldrb	r3, [r3, #0]
  }
 8006992:	4618      	mov	r0, r3
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>:

  JsonInteger asSignedInteger() const {
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::SignedInteger);
    return value_.asSignedInteger;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 80069ac:	4610      	mov	r0, r2
 80069ae:	4619      	mov	r1, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>:

  JsonUInt asUnsignedInteger() const {
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::UnsignedInteger);
    return value_.asUnsignedInteger;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 80069c8:	4610      	mov	r0, r2
 80069ca:	4619      	mov	r1, r3
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>:

  float asFloat() const {
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Float);
    return value_.asFloat;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	ee07 3a90 	vmov	s15, r3
  }
 80069e6:	eeb0 0a67 	vmov.f32	s0, s15
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>:

#if ARDUINOJSON_USE_DOUBLE
  double asDouble() const {
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Double);
    return value_.asDouble;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006a02:	ec43 2b17 	vmov	d7, r2, r3
  }
 8006a06:	eeb0 0b47 	vmov.f64	d0, d7
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>:
#endif
};

inline Number parseNumber(const char* s) {
 8006a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a18:	b0a6      	sub	sp, #152	@ 0x98
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8006a1e:	64b9      	str	r1, [r7, #72]	@ 0x48
  using mantissa_t = largest_type<traits::mantissa_type, JsonUInt>;
  using exponent_t = traits::exponent_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8006a20:	2300      	movs	r3, #0
 8006a22:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  switch (*s) {
 8006a26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	2b2b      	cmp	r3, #43	@ 0x2b
 8006a2c:	d008      	beq.n	8006a40 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c>
 8006a2e:	2b2d      	cmp	r3, #45	@ 0x2d
 8006a30:	d10a      	bne.n	8006a48 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '-':
      is_negative = true;
 8006a32:	2301      	movs	r3, #1
 8006a34:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      s++;
 8006a38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a3e:	e003      	b.n	8006a48 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '+':
      s++;
 8006a40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a42:	3301      	adds	r3, #1
 8006a44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a46:	bf00      	nop
  if (*s == 'i' || *s == 'I') {
    return Number(is_negative ? -traits::inf() : traits::inf());
  }
#endif

  if (!isdigit(*s) && *s != '.')
 8006a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7ff fece 	bl	80067ee <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006a52:	4603      	mov	r3, r0
 8006a54:	f083 0301 	eor.w	r3, r3, #1
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d005      	beq.n	8006a6a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8006a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a64:	d001      	beq.n	8006a6a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e000      	b.n	8006a6c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x58>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x64>
    return Number();
 8006a70:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006a72:	f7ff ff21 	bl	80068b8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8006a76:	e1f5      	b.n	8006e64 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

  mantissa_t mantissa = 0;
 8006a78:	f04f 0200 	mov.w	r2, #0
 8006a7c:	f04f 0300 	mov.w	r3, #0
 8006a80:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  exponent_t exponent_offset = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  const mantissa_t maxUint = JsonUInt(-1);
 8006a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a92:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  while (isdigit(*s)) {
 8006a96:	e054      	b.n	8006b42 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x12e>
    uint8_t digit = uint8_t(*s - '0');
 8006a98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	3b30      	subs	r3, #48	@ 0x30
 8006a9e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (mantissa > maxUint / 10)
 8006aa2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006aa6:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8006aaa:	49ae      	ldr	r1, [pc, #696]	@ (8006d64 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x350>)
 8006aac:	418b      	sbcs	r3, r1
 8006aae:	d251      	bcs.n	8006b54 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x140>
      break;
    mantissa *= 10;
 8006ab0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8006ab4:	4622      	mov	r2, r4
 8006ab6:	462b      	mov	r3, r5
 8006ab8:	f04f 0000 	mov.w	r0, #0
 8006abc:	f04f 0100 	mov.w	r1, #0
 8006ac0:	0099      	lsls	r1, r3, #2
 8006ac2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8006ac6:	0090      	lsls	r0, r2, #2
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	eb12 0804 	adds.w	r8, r2, r4
 8006ad0:	eb43 0905 	adc.w	r9, r3, r5
 8006ad4:	eb18 0308 	adds.w	r3, r8, r8
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	eb49 0309 	adc.w	r3, r9, r9
 8006ade:	61fb      	str	r3, [r7, #28]
 8006ae0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8006ae4:	e9c7 8922 	strd	r8, r9, [r7, #136]	@ 0x88
    if (mantissa > maxUint - digit)
 8006ae8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006aec:	2200      	movs	r2, #0
 8006aee:	643b      	str	r3, [r7, #64]	@ 0x40
 8006af0:	647a      	str	r2, [r7, #68]	@ 0x44
 8006af2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006af6:	460b      	mov	r3, r1
 8006af8:	43db      	mvns	r3, r3
 8006afa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006afc:	4613      	mov	r3, r2
 8006afe:	43db      	mvns	r3, r3
 8006b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b02:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006b06:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	4291      	cmp	r1, r2
 8006b0e:	4629      	mov	r1, r5
 8006b10:	eb71 0303 	sbcs.w	r3, r1, r3
 8006b14:	d320      	bcc.n	8006b58 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x144>
      break;
    mantissa += digit;
 8006b16:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b1e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006b20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006b24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006b28:	4621      	mov	r1, r4
 8006b2a:	1851      	adds	r1, r2, r1
 8006b2c:	6139      	str	r1, [r7, #16]
 8006b2e:	4629      	mov	r1, r5
 8006b30:	414b      	adcs	r3, r1
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006b38:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    s++;
 8006b3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b3e:	3301      	adds	r3, #1
 8006b40:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 8006b42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff fe51 	bl	80067ee <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1a2      	bne.n	8006a98 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x84>
 8006b52:	e002      	b.n	8006b5a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8006b54:	bf00      	nop
 8006b56:	e000      	b.n	8006b5a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8006b58:	bf00      	nop
  }

  if (*s == '\0') {
 8006b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d136      	bne.n	8006bd0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
    if (is_negative) {
 8006b62:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d019      	beq.n	8006b9e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x18a>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 8006b6a:	f04f 0200 	mov.w	r2, #0
 8006b6e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006b72:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 8006b76:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006b7a:	2a01      	cmp	r2, #1
 8006b7c:	f173 4300 	sbcs.w	r3, r3, #2147483648	@ 0x80000000
 8006b80:	d226      	bcs.n	8006bd0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
        return Number(JsonInteger(~mantissa + 1));
 8006b82:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006b86:	2100      	movs	r1, #0
 8006b88:	4250      	negs	r0, r2
 8006b8a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006b8c:	eb61 0303 	sbc.w	r3, r1, r3
 8006b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b96:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006b98:	f7ff feb4 	bl	8006904 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>
 8006b9c:	e162      	b.n	8006e64 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
      }
    } else {
      return Number(JsonUInt(mantissa));
 8006b9e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006ba2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006ba4:	f7ff fec4 	bl	8006930 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>
 8006ba8:	e15c      	b.n	8006e64 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8006baa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006bae:	f04f 020a 	mov.w	r2, #10
 8006bb2:	f04f 0300 	mov.w	r3, #0
 8006bb6:	f7f9 fec5 	bl	8000944 <__aeabi_uldivmod>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    exponent_offset++;
 8006bc2:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3301      	adds	r3, #1
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  while (mantissa > traits::mantissa_max) {
 8006bd0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006bd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bd8:	d2e7      	bcs.n	8006baa <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x196>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8006bda:	e009      	b.n	8006bf0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1dc>
    exponent_offset++;
 8006bdc:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	3301      	adds	r3, #1
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    s++;
 8006bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bec:	3301      	adds	r3, #1
 8006bee:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 8006bf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7ff fdfa 	bl	80067ee <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1ed      	bne.n	8006bdc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1c8>
  }

  if (*s == '.') {
 8006c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c06:	d14c      	bne.n	8006ca2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x28e>
    s++;
 8006c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8006c0e:	e040      	b.n	8006c92 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x27e>
      if (mantissa < traits::mantissa_max / 10) {
 8006c10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006c14:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8006c18:	4953      	ldr	r1, [pc, #332]	@ (8006d68 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x354>)
 8006c1a:	418b      	sbcs	r3, r1
 8006c1c:	d236      	bcs.n	8006c8c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x278>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8006c1e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8006c22:	4622      	mov	r2, r4
 8006c24:	462b      	mov	r3, r5
 8006c26:	f04f 0000 	mov.w	r0, #0
 8006c2a:	f04f 0100 	mov.w	r1, #0
 8006c2e:	0099      	lsls	r1, r3, #2
 8006c30:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8006c34:	0090      	lsls	r0, r2, #2
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	eb12 0a04 	adds.w	sl, r2, r4
 8006c3e:	eb43 0b05 	adc.w	fp, r3, r5
 8006c42:	eb1a 030a 	adds.w	r3, sl, sl
 8006c46:	60bb      	str	r3, [r7, #8]
 8006c48:	eb4b 030b 	adc.w	r3, fp, fp
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006c52:	4652      	mov	r2, sl
 8006c54:	465b      	mov	r3, fp
 8006c56:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006c58:	7809      	ldrb	r1, [r1, #0]
 8006c5a:	3930      	subs	r1, #48	@ 0x30
 8006c5c:	b2c9      	uxtb	r1, r1
 8006c5e:	b2c9      	uxtb	r1, r1
 8006c60:	2000      	movs	r0, #0
 8006c62:	6239      	str	r1, [r7, #32]
 8006c64:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c66:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	1851      	adds	r1, r2, r1
 8006c6e:	6039      	str	r1, [r7, #0]
 8006c70:	4629      	mov	r1, r5
 8006c72:	414b      	adcs	r3, r1
 8006c74:	607b      	str	r3, [r7, #4]
 8006c76:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006c7a:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
        exponent_offset--;
 8006c7e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
      }
      s++;
 8006c8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c8e:	3301      	adds	r3, #1
 8006c90:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8006c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff fda9 	bl	80067ee <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1b6      	bne.n	8006c10 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1fc>
    }
  }

  int exponent = 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (*s == 'e' || *s == 'E') {
 8006ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b65      	cmp	r3, #101	@ 0x65
 8006cae:	d003      	beq.n	8006cb8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2a4>
 8006cb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b45      	cmp	r3, #69	@ 0x45
 8006cb6:	d171      	bne.n	8006d9c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
    s++;
 8006cb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cba:	3301      	adds	r3, #1
 8006cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
    bool negative_exponent = false;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (*s == '-') {
 8006cc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	2b2d      	cmp	r3, #45	@ 0x2d
 8006cca:	d106      	bne.n	8006cda <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c6>
      negative_exponent = true;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 8006cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cd8:	e04f      	b.n	8006d7a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
    } else if (*s == '+') {
 8006cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	2b2b      	cmp	r3, #43	@ 0x2b
 8006ce0:	d14b      	bne.n	8006d7a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      s++;
 8006ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    while (isdigit(*s)) {
 8006ce8:	e047      	b.n	8006d7a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      exponent = exponent * 10 + (*s - '0');
 8006cea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	3b30      	subs	r3, #48	@ 0x30
 8006cfe:	4413      	add	r3, r2
 8006d00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      if (exponent + exponent_offset > traits::exponent_max) {
 8006d04:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	@ 0x86
 8006d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8006d12:	dd2f      	ble.n	8006d74 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x360>
        if (negative_exponent)
 8006d14:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00e      	beq.n	8006d3a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x326>
          return Number(is_negative ? -0.0f : 0.0f);
 8006d1c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x316>
 8006d24:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8006d6c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x358>
 8006d28:	e001      	b.n	8006d2e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x31a>
 8006d2a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8006d70 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x35c>
 8006d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d32:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006d34:	f7ff fdd1 	bl	80068da <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
 8006d38:	e094      	b.n	8006e64 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
        else
          return Number(is_negative ? -traits::inf() : traits::inf());
 8006d3a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d006      	beq.n	8006d50 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x33c>
 8006d42:	f000 fda7 	bl	8007894 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8006d46:	eeb0 7b40 	vmov.f64	d7, d0
 8006d4a:	eeb1 7b47 	vneg.f64	d7, d7
 8006d4e:	e003      	b.n	8006d58 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x344>
 8006d50:	f000 fda0 	bl	8007894 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8006d54:	eeb0 7b40 	vmov.f64	d7, d0
 8006d58:	eeb0 0b47 	vmov.f64	d0, d7
 8006d5c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006d5e:	f7ff fdfd 	bl	800695c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8006d62:	e07f      	b.n	8006e64 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
 8006d64:	19999999 	.word	0x19999999
 8006d68:	00019999 	.word	0x00019999
 8006d6c:	80000000 	.word	0x80000000
 8006d70:	00000000 	.word	0x00000000
      }
      s++;
 8006d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d76:	3301      	adds	r3, #1
 8006d78:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 8006d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7ff fd35 	bl	80067ee <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1af      	bne.n	8006cea <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2d6>
    }
    if (negative_exponent)
 8006d8a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d004      	beq.n	8006d9c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
      exponent = -exponent;
 8006d92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006d96:	425b      	negs	r3, r3
 8006d98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  }
  exponent += exponent_offset;
 8006d9c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8006da0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006da4:	4413      	add	r3, r2
 8006da6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 8006daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3a6>
    return Number();
 8006db2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006db4:	f7ff fd80 	bl	80068b8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8006db8:	e054      	b.n	8006e64 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

#if ARDUINOJSON_USE_DOUBLE
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
                  exponent > FloatTraits<float>::exponent_max ||
 8006dba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006dbe:	f113 0f26 	cmn.w	r3, #38	@ 0x26
 8006dc2:	db0a      	blt.n	8006dda <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8006dc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006dc8:	2b26      	cmp	r3, #38	@ 0x26
 8006dca:	dc06      	bgt.n	8006dda <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
                  exponent > FloatTraits<float>::exponent_max ||
 8006dcc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006dd0:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8006dd4:	f173 0300 	sbcs.w	r3, r3, #0
 8006dd8:	d301      	bcc.n	8006dde <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3ca>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e000      	b.n	8006de0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3cc>
 8006dde:	2300      	movs	r3, #0
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8006de0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                  mantissa > FloatTraits<float>::mantissa_max;
  if (isDouble) {
 8006de4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d01e      	beq.n	8006e2a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x416>
    auto final_result = make_float(double(mantissa), exponent);
 8006dec:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006df0:	f7f9 fc64 	bl	80006bc <__aeabi_ul2d>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8006dfc:	ec43 2b10 	vmov	d0, r2, r3
 8006e00:	f000 fd56 	bl	80078b0 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>
 8006e04:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    return Number(is_negative ? -final_result : final_result);
 8006e08:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d004      	beq.n	8006e1a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x406>
 8006e10:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8006e14:	eeb1 7b47 	vneg.f64	d7, d7
 8006e18:	e001      	b.n	8006e1e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x40a>
 8006e1a:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8006e1e:	eeb0 0b47 	vmov.f64	d0, d7
 8006e22:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006e24:	f7ff fd9a 	bl	800695c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8006e28:	e01c      	b.n	8006e64 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
  } else
#endif
  {
    auto final_result = make_float(float(mantissa), exponent);
 8006e2a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006e2e:	f7f9 fd43 	bl	80008b8 <__aeabi_ul2f>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8006e38:	ee00 3a10 	vmov	s0, r3
 8006e3c:	f000 fd79 	bl	8007932 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>
 8006e40:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
    return Number(is_negative ? -final_result : final_result);
 8006e44:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d004      	beq.n	8006e56 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x442>
 8006e4c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006e50:	eef1 7a67 	vneg.f32	s15, s15
 8006e54:	e001      	b.n	8006e5a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x446>
 8006e56:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8006e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8006e5e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006e60:	f7ff fd3b 	bl	80068da <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
  }
}
 8006e64:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006e66:	3798      	adds	r7, #152	@ 0x98
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e6e:	bf00      	nop

08006e70 <_ZN6Remora11setBaseFreqEm>:

public:

	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <_ZN6Remora12setServoFreqEm>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <_ZN17JsonConfigHandlerC1EP6Remora>:

#include "jsonConfigHandler.h"
#include "../remora.h"


JsonConfigHandler::JsonConfigHandler(Remora* _remora) :
 8006ea8:	b590      	push	{r4, r7, lr}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
	remoraInstance(_remora),
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	601a      	str	r2, [r3, #0]
	configError(false)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	1d1c      	adds	r4, r3, #4
 8006ebc:	f107 030c 	add.w	r3, r7, #12
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f021 fc2a 	bl	802871a <_ZNSaIcEC1Ev>
 8006ec6:	f107 030c 	add.w	r3, r7, #12
 8006eca:	461a      	mov	r2, r3
 8006ecc:	4914      	ldr	r1, [pc, #80]	@ (8006f20 <_ZN17JsonConfigHandlerC1EP6Remora+0x78>)
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f000 fd70 	bl	80079b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8006ed4:	f107 030c 	add.w	r3, r7, #12
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f021 fc1f 	bl	802871c <_ZNSaIcED1Ev>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a10      	ldr	r2, [pc, #64]	@ (8006f24 <_ZN17JsonConfigHandlerC1EP6Remora+0x7c>)
 8006ee2:	61da      	str	r2, [r3, #28]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f103 0420 	add.w	r4, r3, #32
 8006eea:	f7fe f953 	bl	8005194 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f7fe feeb 	bl	8005cce <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3360      	adds	r3, #96	@ 0x60
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe fea8 	bl	8005c52 <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
{
	loadConfiguration();
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f80c 	bl	8006f28 <_ZN17JsonConfigHandler17loadConfigurationEv>
    updateThreadFreq();
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f82b 	bl	8006f6c <_ZN17JsonConfigHandler16updateThreadFreqEv>
}
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd90      	pop	{r4, r7, pc}
 8006f20:	0802a38c 	.word	0x0802a38c
 8006f24:	0802a390 	.word	0x0802a390

08006f28 <_ZN17JsonConfigHandler17loadConfigurationEv>:

bool JsonConfigHandler::loadConfiguration() {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
	// Clear any existing configuration
    jsonContent.clear();
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4618      	mov	r0, r3
 8006f36:	f021 fd95 	bl	8028a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
    doc.clear();
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3320      	adds	r3, #32
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fe fee5 	bl	8005d0e <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Read and parse the configuration file
    if (!readFileContents()) {
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f903 	bl	8007150 <_ZN17JsonConfigHandler16readFileContentsEv>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	f083 0301 	eor.w	r3, r3, #1
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <_ZN17JsonConfigHandler17loadConfigurationEv+0x32>
        return false;
 8006f56:	2300      	movs	r3, #0
 8006f58:	e003      	b.n	8006f62 <_ZN17JsonConfigHandler17loadConfigurationEv+0x3a>
    }
    parseJson();
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f9c8 	bl	80072f0 <_ZN17JsonConfigHandler9parseJsonEv>
    return true;
 8006f60:	2301      	movs	r3, #1
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
	...

08006f6c <_ZN17JsonConfigHandler16updateThreadFreqEv>:


void JsonConfigHandler::updateThreadFreq() {
 8006f6c:	b590      	push	{r4, r7, lr}
 8006f6e:	b0a1      	sub	sp, #132	@ 0x84
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
    if (configError) return;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f040 808e 	bne.w	800709c <_ZN17JsonConfigHandler16updateThreadFreqEv+0x130>

    printf("\n5. Updating thread frequencies\n");
 8006f80:	4848      	ldr	r0, [pc, #288]	@ (80070a4 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x138>)
 8006f82:	f022 fad3 	bl	802952c <puts>

    JsonArray Threads = doc["Threads"];
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f103 0120 	add.w	r1, r3, #32
 8006f8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f90:	4a45      	ldr	r2, [pc, #276]	@ (80070a8 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x13c>)
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 fd38 	bl	8007a08 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8006f98:	f107 031c 	add.w	r3, r7, #28
 8006f9c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fd49 	bl	8007a3a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 8006fa8:	f107 0310 	add.w	r3, r7, #16
 8006fac:	f107 021c 	add.w	r2, r7, #28
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe fe1e 	bl	8005bf4 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 8006fb8:	e05c      	b.n	8007074 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x108>
        thread = *it;
 8006fba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006fbe:	f107 0210 	add.w	r2, r7, #16
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fe fdbd 	bl	8005b44 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 8006fca:	68fc      	ldr	r4, [r7, #12]
 8006fcc:	463b      	mov	r3, r7
 8006fce:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 fd3f 	bl	8007a58 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8006fda:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 8006fde:	463a      	mov	r2, r7
 8006fe0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fe4:	e883 0003 	stmia.w	r3, {r0, r1}
        const char* configor = thread["Thread"];
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8006fee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006ff2:	4a2e      	ldr	r2, [pc, #184]	@ (80070ac <_ZN17JsonConfigHandler16updateThreadFreqEv+0x140>)
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 fd3e 	bl	8007a76 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8006ffa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fd5e 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8007004:	67f8      	str	r0, [r7, #124]	@ 0x7c
        uint32_t    freq = thread["Frequency"];
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800700c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007010:	4a27      	ldr	r2, [pc, #156]	@ (80070b0 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x144>)
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fd60 	bl	8007ad8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8007018:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800701c:	4618      	mov	r0, r3
 800701e:	f000 fd80 	bl	8007b22 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8007022:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (!strcmp(configor,"Base")) {
 8007024:	4923      	ldr	r1, [pc, #140]	@ (80070b4 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x148>)
 8007026:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8007028:	f7f9 f95a 	bl	80002e0 <strcmp>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10a      	bne.n	8007048 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xdc>
            printf("	Setting BASE thread frequency to %lu\n", freq);
 8007032:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007034:	4820      	ldr	r0, [pc, #128]	@ (80070b8 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x14c>)
 8007036:	f022 fa09 	bl	802944c <iprintf>
            remoraInstance->setBaseFreq(freq);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007040:	4618      	mov	r0, r3
 8007042:	f7ff ff15 	bl	8006e70 <_ZN6Remora11setBaseFreqEm>
 8007046:	e010      	b.n	800706a <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
        }
        else if (!strcmp(configor,"Servo")) {
 8007048:	491c      	ldr	r1, [pc, #112]	@ (80070bc <_ZN17JsonConfigHandler16updateThreadFreqEv+0x150>)
 800704a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800704c:	f7f9 f948 	bl	80002e0 <strcmp>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d109      	bne.n	800706a <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
            printf("	Setting SERVO thread frequency to %lu\n", freq);
 8007056:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007058:	4819      	ldr	r0, [pc, #100]	@ (80070c0 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x154>)
 800705a:	f022 f9f7 	bl	802944c <iprintf>
            remoraInstance->setServoFreq(freq);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007064:	4618      	mov	r0, r3
 8007066:	f7ff ff11 	bl	8006e8c <_ZN6Remora12setServoFreqEm>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 800706a:	f107 0310 	add.w	r3, r7, #16
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe fd8c 	bl	8005b8c <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 8007074:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007078:	f107 021c 	add.w	r2, r7, #28
 800707c:	4611      	mov	r1, r2
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe fddb 	bl	8005c3a <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 8007084:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8007088:	f107 0310 	add.w	r3, r7, #16
 800708c:	4611      	mov	r1, r2
 800708e:	4618      	mov	r0, r3
 8007090:	f7fe fd6c 	bl	8005b6c <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d18f      	bne.n	8006fba <_ZN17JsonConfigHandler16updateThreadFreqEv+0x4e>
 800709a:	e000      	b.n	800709e <_ZN17JsonConfigHandler16updateThreadFreqEv+0x132>
    if (configError) return;
 800709c:	bf00      	nop
        }
    }
}
 800709e:	3784      	adds	r7, #132	@ 0x84
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd90      	pop	{r4, r7, pc}
 80070a4:	0802a39c 	.word	0x0802a39c
 80070a8:	0802a3bc 	.word	0x0802a3bc
 80070ac:	0802a3c4 	.word	0x0802a3c4
 80070b0:	0802a3cc 	.word	0x0802a3cc
 80070b4:	0802a3d8 	.word	0x0802a3d8
 80070b8:	0802a3e0 	.word	0x0802a3e0
 80070bc:	0802a408 	.word	0x0802a408
 80070c0:	0802a410 	.word	0x0802a410

080070c4 <_ZN17JsonConfigHandler10getModulesEv>:


JsonArray JsonConfigHandler::getModules() {
 80070c4:	b590      	push	{r4, r7, lr}
 80070c6:	b08f      	sub	sp, #60	@ 0x3c
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
	if (doc["Modules"].is<JsonVariant>())
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	f103 0120 	add.w	r1, r3, #32
 80070d4:	f107 0308 	add.w	r3, r7, #8
 80070d8:	4a1c      	ldr	r2, [pc, #112]	@ (800714c <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 fc94 	bl	8007a08 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 80070e0:	f107 0308 	add.w	r3, r7, #8
 80070e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e8:	633b      	str	r3, [r7, #48]	@ 0x30
  return containsKey(key.template as<const char*>());
}

template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getVariant() const {
  return JsonVariant(getData(), getResourceManager());
 80070ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070ec:	f001 fc9a 	bl	8008a24 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 80070f0:	4604      	mov	r4, r0
 80070f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070f4:	f001 fca6 	bl	8008a44 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 80070f8:	4602      	mov	r2, r0
 80070fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80070fe:	4621      	mov	r1, r4
 8007100:	4618      	mov	r0, r3
 8007102:	f7fe fcb9 	bl	8005a78 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }

  template <typename T>
  FORCE_INLINE enable_if_t<is_same<T, JsonVariant>::value, T> getVariant()
      const {
    return getVariant();
 8007106:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 8007108:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800710c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007110:	f7fe fcdd 	bl	8005ace <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>
 8007114:	4603      	mov	r3, r0
 8007116:	bf00      	nop
 8007118:	2b00      	cmp	r3, #0
 800711a:	d010      	beq.n	800713e <_ZN17JsonConfigHandler10getModulesEv+0x7a>
        return doc["Modules"].as<JsonArray>();
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	f103 0120 	add.w	r1, r3, #32
 8007122:	f107 0318 	add.w	r3, r7, #24
 8007126:	4a09      	ldr	r2, [pc, #36]	@ (800714c <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8007128:	4618      	mov	r0, r3
 800712a:	f000 fc6d 	bl	8007a08 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f107 0218 	add.w	r2, r7, #24
 8007134:	4611      	mov	r1, r2
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fcff 	bl	8007b3a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 800713c:	e002      	b.n	8007144 <_ZN17JsonConfigHandler10getModulesEv+0x80>
    else
        return JsonArray();
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7fe fd34 	bl	8005bac <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>
}
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	373c      	adds	r7, #60	@ 0x3c
 8007148:	46bd      	mov	sp, r7
 800714a:	bd90      	pop	{r4, r7, pc}
 800714c:	0802a438 	.word	0x0802a438

08007150 <_ZN17JsonConfigHandler16readFileContentsEv>:
    }
    return JsonObject(); // Return empty object if not found
}
*/

bool JsonConfigHandler::readFileContents() {
 8007150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007154:	b08f      	sub	sp, #60	@ 0x3c
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]

	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 800715a:	485a      	ldr	r0, [pc, #360]	@ (80072c4 <_ZN17JsonConfigHandler16readFileContentsEv+0x174>)
 800715c:	f022 f9e6 	bl	802952c <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 8007160:	4859      	ldr	r0, [pc, #356]	@ (80072c8 <_ZN17JsonConfigHandler16readFileContentsEv+0x178>)
 8007162:	f022 f9e3 	bl	802952c <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8007166:	2200      	movs	r2, #0
 8007168:	4958      	ldr	r1, [pc, #352]	@ (80072cc <_ZN17JsonConfigHandler16readFileContentsEv+0x17c>)
 800716a:	4859      	ldr	r0, [pc, #356]	@ (80072d0 <_ZN17JsonConfigHandler16readFileContentsEv+0x180>)
 800716c:	f020 fe70 	bl	8027e50 <f_mount>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	bf14      	ite	ne
 8007176:	2301      	movne	r3, #1
 8007178:	2300      	moveq	r3, #0
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <_ZN17JsonConfigHandler16readFileContentsEv+0x3c>
	{
    	printf("	Failed to mount SD card\n\r");
 8007180:	4854      	ldr	r0, [pc, #336]	@ (80072d4 <_ZN17JsonConfigHandler16readFileContentsEv+0x184>)
 8007182:	f022 f963 	bl	802944c <iprintf>
    	Error_Handler();
 8007186:	f003 fc4b 	bl	800aa20 <Error_Handler>
 800718a:	e094      	b.n	80072b6 <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
	}
    else
    {
		//Open file for reading
		if(f_open(&SDFile, filename, FA_READ) != FR_OK)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	2201      	movs	r2, #1
 8007192:	4619      	mov	r1, r3
 8007194:	4850      	ldr	r0, [pc, #320]	@ (80072d8 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8007196:	f020 fea1 	bl	8027edc <f_open>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	bf14      	ite	ne
 80071a0:	2301      	movne	r3, #1
 80071a2:	2300      	moveq	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <_ZN17JsonConfigHandler16readFileContentsEv+0x66>
		{
			printf("	Failed to open JSON config file\n");
 80071aa:	484c      	ldr	r0, [pc, #304]	@ (80072dc <_ZN17JsonConfigHandler16readFileContentsEv+0x18c>)
 80071ac:	f022 f9be 	bl	802952c <puts>
			Error_Handler();
 80071b0:	f003 fc36 	bl	800aa20 <Error_Handler>
 80071b4:	e07f      	b.n	80072b6 <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
			    // Remove comments from next line to print out the JSON config file
			    printf("\n%s\n", jsonContent.c_str());
			}

			f_close(&SDFile);
		}
 80071b6:	466b      	mov	r3, sp
 80071b8:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 80071ba:	4b47      	ldr	r3, [pc, #284]	@ (80072d8 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	633b      	str	r3, [r7, #48]	@ 0x30
			printf("	JSON config file lenght = %2ld\n", length);
 80071c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80071c2:	4847      	ldr	r0, [pc, #284]	@ (80072e0 <_ZN17JsonConfigHandler16readFileContentsEv+0x190>)
 80071c4:	f022 f942 	bl	802944c <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 80071c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80071ca:	1e4b      	subs	r3, r1, #1
 80071cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071ce:	460a      	mov	r2, r1
 80071d0:	2300      	movs	r3, #0
 80071d2:	4690      	mov	r8, r2
 80071d4:	4699      	mov	r9, r3
 80071d6:	f04f 0200 	mov.w	r2, #0
 80071da:	f04f 0300 	mov.w	r3, #0
 80071de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071ea:	460a      	mov	r2, r1
 80071ec:	2300      	movs	r3, #0
 80071ee:	4614      	mov	r4, r2
 80071f0:	461d      	mov	r5, r3
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	00eb      	lsls	r3, r5, #3
 80071fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007200:	00e2      	lsls	r2, r4, #3
 8007202:	460b      	mov	r3, r1
 8007204:	3318      	adds	r3, #24
 8007206:	3307      	adds	r3, #7
 8007208:	08db      	lsrs	r3, r3, #3
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	ebad 0d03 	sub.w	sp, sp, r3
 8007210:	466b      	mov	r3, sp
 8007212:	331f      	adds	r3, #31
 8007214:	095b      	lsrs	r3, r3, #5
 8007216:	015b      	lsls	r3, r3, #5
 8007218:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 800721a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800721c:	f107 030c 	add.w	r3, r7, #12
 8007220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007222:	482d      	ldr	r0, [pc, #180]	@ (80072d8 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8007224:	f021 f814 	bl	8028250 <f_read>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	bf14      	ite	ne
 800722e:	2301      	movne	r3, #1
 8007230:	2300      	moveq	r3, #0
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <_ZN17JsonConfigHandler16readFileContentsEv+0xf0>
				printf("	JSON config file read FAILURE\n");
 8007238:	482a      	ldr	r0, [pc, #168]	@ (80072e4 <_ZN17JsonConfigHandler16readFileContentsEv+0x194>)
 800723a:	f022 f977 	bl	802952c <puts>
 800723e:	e036      	b.n	80072ae <_ZN17JsonConfigHandler16readFileContentsEv+0x15e>
				printf("	JSON config file read SUCCESS!\n");
 8007240:	4829      	ldr	r0, [pc, #164]	@ (80072e8 <_ZN17JsonConfigHandler16readFileContentsEv+0x198>)
 8007242:	f022 f973 	bl	802952c <puts>
				jsonContent.reserve(length + 1);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	1d1a      	adds	r2, r3, #4
 800724a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724c:	3301      	adds	r3, #1
 800724e:	4619      	mov	r1, r3
 8007250:	4610      	mov	r0, r2
 8007252:	f021 fbec 	bl	8028a2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 8007256:	2300      	movs	r3, #0
 8007258:	637b      	str	r3, [r7, #52]	@ 0x34
 800725a:	e01a      	b.n	8007292 <_ZN17JsonConfigHandler16readFileContentsEv+0x142>
			    	jsonContent = jsonContent + rtext[i];
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	1d19      	adds	r1, r3, #4
 8007260:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007264:	4413      	add	r3, r2
 8007266:	781a      	ldrb	r2, [r3, #0]
 8007268:	f107 0310 	add.w	r3, r7, #16
 800726c:	4618      	mov	r0, r3
 800726e:	f000 fc88 	bl	8007b82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3304      	adds	r3, #4
 8007276:	f107 0210 	add.w	r2, r7, #16
 800727a:	4611      	mov	r1, r2
 800727c:	4618      	mov	r0, r3
 800727e:	f021 fb3c 	bl	80288fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007282:	f107 0310 	add.w	r3, r7, #16
 8007286:	4618      	mov	r0, r3
 8007288:	f021 fb31 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 800728c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800728e:	3301      	adds	r3, #1
 8007290:	637b      	str	r3, [r7, #52]	@ 0x34
 8007292:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007296:	429a      	cmp	r2, r3
 8007298:	dbe0      	blt.n	800725c <_ZN17JsonConfigHandler16readFileContentsEv+0x10c>
			    printf("\n%s\n", jsonContent.c_str());
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	3304      	adds	r3, #4
 800729e:	4618      	mov	r0, r3
 80072a0:	f021 fd08 	bl	8028cb4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80072a4:	4603      	mov	r3, r0
 80072a6:	4619      	mov	r1, r3
 80072a8:	4810      	ldr	r0, [pc, #64]	@ (80072ec <_ZN17JsonConfigHandler16readFileContentsEv+0x19c>)
 80072aa:	f022 f8cf 	bl	802944c <iprintf>
			f_close(&SDFile);
 80072ae:	480a      	ldr	r0, [pc, #40]	@ (80072d8 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80072b0:	f021 f98b 	bl	80285ca <f_close>
 80072b4:	46b5      	mov	sp, r6
    }

	return true;
 80072b6:	2301      	movs	r3, #1
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	373c      	adds	r7, #60	@ 0x3c
 80072bc:	46bd      	mov	sp, r7
 80072be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072c2:	bf00      	nop
 80072c4:	0802a440 	.word	0x0802a440
 80072c8:	0802a464 	.word	0x0802a464
 80072cc:	24000420 	.word	0x24000420
 80072d0:	24000424 	.word	0x24000424
 80072d4:	0802a484 	.word	0x0802a484
 80072d8:	24000654 	.word	0x24000654
 80072dc:	0802a4a0 	.word	0x0802a4a0
 80072e0:	0802a4c4 	.word	0x0802a4c4
 80072e4:	0802a4e8 	.word	0x0802a4e8
 80072e8:	0802a508 	.word	0x0802a508
 80072ec:	0802a528 	.word	0x0802a528

080072f0 <_ZN17JsonConfigHandler9parseJsonEv>:


bool JsonConfigHandler::parseJson() {
 80072f0:	b590      	push	{r4, r7, lr}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
	
	printf("\n3. Parsing json configuration file\n");
 80072f8:	482a      	ldr	r0, [pc, #168]	@ (80073a4 <_ZN17JsonConfigHandler9parseJsonEv+0xb4>)
 80072fa:	f022 f917 	bl	802952c <puts>
	
    // Clear any existing parsed data
    doc.clear();
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	3320      	adds	r3, #32
 8007302:	4618      	mov	r0, r3
 8007304:	f7fe fd03 	bl	8005d0e <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Parse JSON
    DeserializationError error = deserializeJson(doc, jsonContent.c_str());
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f103 0420 	add.w	r4, r3, #32
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3304      	adds	r3, #4
 8007312:	4618      	mov	r0, r3
 8007314:	f021 fcce 	bl	8028cb4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8007318:	4603      	mov	r3, r0
 800731a:	4619      	mov	r1, r3
 800731c:	4620      	mov	r0, r4
 800731e:	f000 fc46 	bl	8007bae <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>
 8007322:	4603      	mov	r3, r0
 8007324:	733b      	strb	r3, [r7, #12]

    printf("	Config deserialisation - ");
 8007326:	4820      	ldr	r0, [pc, #128]	@ (80073a8 <_ZN17JsonConfigHandler9parseJsonEv+0xb8>)
 8007328:	f022 f890 	bl	802944c <iprintf>

    switch (error.code())
 800732c:	f107 030c 	add.w	r3, r7, #12
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff f936 	bl	80065a2 <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>
 8007336:	4603      	mov	r3, r0
 8007338:	2b04      	cmp	r3, #4
 800733a:	d012      	beq.n	8007362 <_ZN17JsonConfigHandler9parseJsonEv+0x72>
 800733c:	2b04      	cmp	r3, #4
 800733e:	dc18      	bgt.n	8007372 <_ZN17JsonConfigHandler9parseJsonEv+0x82>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <_ZN17JsonConfigHandler9parseJsonEv+0x5a>
 8007344:	2b03      	cmp	r3, #3
 8007346:	d004      	beq.n	8007352 <_ZN17JsonConfigHandler9parseJsonEv+0x62>
 8007348:	e013      	b.n	8007372 <_ZN17JsonConfigHandler9parseJsonEv+0x82>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 800734a:	4818      	ldr	r0, [pc, #96]	@ (80073ac <_ZN17JsonConfigHandler9parseJsonEv+0xbc>)
 800734c:	f022 f8ee 	bl	802952c <puts>
            break;
 8007350:	e023      	b.n	800739a <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 8007352:	4817      	ldr	r0, [pc, #92]	@ (80073b0 <_ZN17JsonConfigHandler9parseJsonEv+0xc0>)
 8007354:	f022 f8ea 	bl	802952c <puts>
            configError = true;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8007360:	e01b      	b.n	800739a <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 8007362:	4814      	ldr	r0, [pc, #80]	@ (80073b4 <_ZN17JsonConfigHandler9parseJsonEv+0xc4>)
 8007364:	f022 f8e2 	bl	802952c <puts>
            configError = true;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8007370:	e013      	b.n	800739a <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        default:
            printf("Deserialization failed: ");
 8007372:	4811      	ldr	r0, [pc, #68]	@ (80073b8 <_ZN17JsonConfigHandler9parseJsonEv+0xc8>)
 8007374:	f022 f86a 	bl	802944c <iprintf>
            printf(error.c_str());
 8007378:	f107 030c 	add.w	r3, r7, #12
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff f91d 	bl	80065bc <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>
 8007382:	4603      	mov	r3, r0
 8007384:	4618      	mov	r0, r3
 8007386:	f022 f861 	bl	802944c <iprintf>
            printf("\n");
 800738a:	200a      	movs	r0, #10
 800738c:	f022 f870 	bl	8029470 <putchar>
            configError = true;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 8007398:	bf00      	nop
    }

    return true;
 800739a:	2301      	movs	r3, #1
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd90      	pop	{r4, r7, pc}
 80073a4:	0802a530 	.word	0x0802a530
 80073a8:	0802a554 	.word	0x0802a554
 80073ac:	0802a570 	.word	0x0802a570
 80073b0:	0802a58c 	.word	0x0802a58c
 80073b4:	0802a59c 	.word	0x0802a59c
 80073b8:	0802a5b0 	.word	0x0802a5b0

080073bc <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80073c8:	e002      	b.n	80073d0 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3301      	adds	r3, #1
 80073ce:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4413      	add	r3, r2
 80073d6:	2200      	movs	r2, #0
 80073d8:	72fa      	strb	r2, [r7, #11]
 80073da:	f107 020b 	add.w	r2, r7, #11
 80073de:	4611      	mov	r1, r2
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fbf7 	bl	8007bd4 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 80073e6:	4603      	mov	r3, r0
 80073e8:	f083 0301 	eor.w	r3, r3, #1
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1eb      	bne.n	80073ca <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 80073f2:	68fb      	ldr	r3, [r7, #12]
    }
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	4611      	mov	r1, r2
 8007408:	461a      	mov	r2, r3
 800740a:	460b      	mov	r3, r1
 800740c:	80fb      	strh	r3, [r7, #6]
 800740e:	4613      	mov	r3, r2
 8007410:	717b      	strb	r3, [r7, #5]
      : str_(data, size_t(sz), isStatic) {}
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	88fa      	ldrh	r2, [r7, #6]
 8007416:	797b      	ldrb	r3, [r7, #5]
 8007418:	68b9      	ldr	r1, [r7, #8]
 800741a:	f7fd ff3b 	bl	8005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>:
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
    ARDUINOJSON_ASSERT(poolIndex < count_);
    return pools_[poolIndex].getSlot(indexInPool);
  }

  void clear(Allocator* allocator) {
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
    for (PoolCount i = 0; i < count_; i++)
 8007432:	2300      	movs	r3, #0
 8007434:	81fb      	strh	r3, [r7, #14]
 8007436:	e00b      	b.n	8007450 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x28>
      pools_[i].destroy(allocator);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a1a      	ldr	r2, [r3, #32]
 800743c:	89fb      	ldrh	r3, [r7, #14]
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	4413      	add	r3, r2
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fc40 	bl	8007cca <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>
    for (PoolCount i = 0; i < count_; i++)
 800744a:	89fb      	ldrh	r3, [r7, #14]
 800744c:	3301      	adds	r3, #1
 800744e:	81fb      	strh	r3, [r7, #14]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007454:	89fa      	ldrh	r2, [r7, #14]
 8007456:	429a      	cmp	r2, r3
 8007458:	d3ee      	bcc.n	8007438 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x10>
    count_ = 0;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	849a      	strh	r2, [r3, #36]	@ 0x24
    freeList_ = NULL_SLOT;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007466:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (pools_ != preallocatedPools_) {
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a1a      	ldr	r2, [r3, #32]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	429a      	cmp	r2, r3
 8007470:	d00e      	beq.n	8007490 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x68>
      allocator->deallocate(pools_);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3304      	adds	r3, #4
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6a12      	ldr	r2, [r2, #32]
 800747e:	4611      	mov	r1, r2
 8007480:	6838      	ldr	r0, [r7, #0]
 8007482:	4798      	blx	r3
      pools_ = preallocatedPools_;
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	621a      	str	r2, [r3, #32]
      capacity_ = ARDUINOJSON_INITIAL_POOL_COUNT;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2204      	movs	r2, #4
 800748e:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:

  size_t size() const {
    return Pool::slotsToBytes(usage());
  }

  void shrinkToFit(Allocator* allocator) {
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
    if (count_ > 0)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00d      	beq.n	80074c6 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x2e>
      pools_[count_ - 1].shrinkToFit(allocator);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1a      	ldr	r2, [r3, #32]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80074b2:	4619      	mov	r1, r3
 80074b4:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80074b8:	440b      	add	r3, r1
 80074ba:	00db      	lsls	r3, r3, #3
 80074bc:	4413      	add	r3, r2
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fc2e 	bl	8007d22 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
    if (pools_ != preallocatedPools_ && count_ != capacity_) {
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1a      	ldr	r2, [r3, #32]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d017      	beq.n	8007500 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074d8:	429a      	cmp	r2, r3
 80074da:	d011      	beq.n	8007500 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
      pools_ = static_cast<Pool*>(
          allocator->reallocate(pools_, count_ * sizeof(Pool)));
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3308      	adds	r3, #8
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6a11      	ldr	r1, [r2, #32]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80074ec:	00d2      	lsls	r2, r2, #3
 80074ee:	6838      	ldr	r0, [r7, #0]
 80074f0:	4798      	blx	r3
 80074f2:	4602      	mov	r2, r0
      pools_ = static_cast<Pool*>(
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	621a      	str	r2, [r3, #32]
      ARDUINOJSON_ASSERT(pools_ != nullptr);  // realloc to smaller can't fail
      capacity_ = count_;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
      -> decltype(client.getResourceManager()) {
    return client.getResourceManager();
  }

  template <typename TClient>
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
    return client.getData();
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7fe fad0 	bl	8005ab6 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 8007516:	4603      	mov	r3, r0
  }
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
    return client.getData();
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7fe fa8d 	bl	8005a48 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>
 800752e:	4603      	mov	r3, r0
  }
 8007530:	4618      	mov	r0, r3
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7fe fa8d 	bl	8005a60 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>
 8007546:	4603      	mov	r3, r0
  }
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
    ARDUINOJSON_ASSERT((p == nullptr) == (id == NULL_SLOT));
  }

  explicit operator bool() const {
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	bf14      	ite	ne
 8007560:	2301      	movne	r3, #1
 8007562:	2300      	moveq	r3, #0
 8007564:	b2db      	uxtb	r3, r3
  }
 8007566:	4618      	mov	r0, r3
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>:

  SlotId id() const {
    return id_;
  }

  T* ptr() const {
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
    return ptr_;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
  }
 800757e:	4618      	mov	r0, r3
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>:
  SlotId id() const {
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
    return id_;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	889b      	ldrh	r3, [r3, #4]
  }
 8007596:	4618      	mov	r0, r3
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>:

  T* operator->() const {
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(ptr_ != nullptr);
    return ptr_;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
  }
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 80075ba:	b480      	push	{r7}
 80075bc:	b085      	sub	sp, #20
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	4613      	mov	r3, r2
 80075c6:	80fb      	strh	r3, [r7, #6]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	88fa      	ldrh	r2, [r7, #6]
 80075d2:	809a      	strh	r2, [r3, #4]
  }
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80075f6:	809a      	strh	r2, [r3, #4]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4618      	mov	r0, r3
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>:
  Slot<T> allocSlot(Allocator* allocator) {
 8007606:	b580      	push	{r7, lr}
 8007608:	b088      	sub	sp, #32
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	607a      	str	r2, [r7, #4]
    if (freeList_ != NULL_SLOT) {
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007616:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800761a:	4293      	cmp	r3, r2
 800761c:	d005      	beq.n	800762a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x24>
      return allocFromFreeList();
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	68b9      	ldr	r1, [r7, #8]
 8007622:	4618      	mov	r0, r3
 8007624:	f000 fbda 	bl	8007ddc <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>
 8007628:	e02c      	b.n	8007684 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    if (count_) {
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800762e:	2b00      	cmp	r3, #0
 8007630:	d016      	beq.n	8007660 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
      auto slot = allocFromLastPool();
 8007632:	f107 0314 	add.w	r3, r7, #20
 8007636:	68b9      	ldr	r1, [r7, #8]
 8007638:	4618      	mov	r0, r3
 800763a:	f000 fbec 	bl	8007e16 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
      if (slot)
 800763e:	f107 0314 	add.w	r3, r7, #20
 8007642:	4618      	mov	r0, r3
 8007644:	f000 f822 	bl	800768c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d008      	beq.n	8007660 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
        return slot;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	461a      	mov	r2, r3
 8007652:	f107 0314 	add.w	r3, r7, #20
 8007656:	e893 0003 	ldmia.w	r3, {r0, r1}
 800765a:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 800765e:	e011      	b.n	8007684 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    auto pool = addPool(allocator);
 8007660:	6879      	ldr	r1, [r7, #4]
 8007662:	68b8      	ldr	r0, [r7, #8]
 8007664:	f000 fc14 	bl	8007e90 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>
 8007668:	61f8      	str	r0, [r7, #28]
    if (!pool)
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d103      	bne.n	8007678 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x72>
      return {};
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 fc49 	bl	8007f08 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8007676:	e005      	b.n	8007684 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    return allocFromLastPool();
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	68b9      	ldr	r1, [r7, #8]
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fbca 	bl	8007e16 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
 8007682:	bf00      	nop
  }
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	3720      	adds	r7, #32
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>:
  explicit operator bool() const {
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	bf14      	ite	ne
 800769c:	2301      	movne	r3, #1
 800769e:	2300      	moveq	r3, #0
 80076a0:	b2db      	uxtb	r3, r3
  }
 80076a2:	4618      	mov	r0, r3
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>:
  T* operator->() const {
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
    return ptr_;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
  }
 80076ba:	4618      	mov	r0, r3
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>:
  SlotId id() const {
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
    return id_;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	889b      	ldrh	r3, [r3, #4]
  }
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 80076de:	b480      	push	{r7}
 80076e0:	b085      	sub	sp, #20
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60fb      	str	r3, [r7, #12]
  return ac.data;
 80076ea:	68fb      	ldr	r3, [r7, #12]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3714      	adds	r7, #20
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	4613      	mov	r3, r2
 8007704:	80fb      	strh	r3, [r7, #6]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	88fa      	ldrh	r2, [r7, #6]
 8007710:	809a      	strh	r2, [r3, #4]
  }
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4618      	mov	r0, r3
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>:
  void freeSlot(Slot<T> slot) {
 8007720:	b590      	push	{r4, r7, lr}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	1d3b      	adds	r3, r7, #4
 800772a:	e883 0006 	stmia.w	r3, {r1, r2}
    reinterpret_cast<FreeSlot*>(slot.ptr())->next = freeList_;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 8007732:	1d3b      	adds	r3, r7, #4
 8007734:	4618      	mov	r0, r3
 8007736:	f000 fbf9 	bl	8007f2c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 800773a:	4603      	mov	r3, r0
 800773c:	4622      	mov	r2, r4
 800773e:	801a      	strh	r2, [r3, #0]
    freeList_ = slot.id();
 8007740:	1d3b      	adds	r3, r7, #4
 8007742:	4618      	mov	r0, r3
 8007744:	f7ff ffbf 	bl	80076c6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8007748:	4603      	mov	r3, r0
 800774a:	461a      	mov	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }
 8007750:	bf00      	nop
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	bd90      	pop	{r4, r7, pc}

08007758 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	807b      	strh	r3, [r7, #2]
    if (id == NULL_SLOT)
 8007764:	887b      	ldrh	r3, [r7, #2]
 8007766:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800776a:	4293      	cmp	r3, r2
 800776c:	d101      	bne.n	8007772 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x1a>
      return nullptr;
 800776e:	2300      	movs	r3, #0
 8007770:	e012      	b.n	8007798 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x40>
    auto poolIndex = SlotId(id / ARDUINOJSON_POOL_CAPACITY);
 8007772:	887b      	ldrh	r3, [r7, #2]
 8007774:	09db      	lsrs	r3, r3, #7
 8007776:	81fb      	strh	r3, [r7, #14]
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
 8007778:	887b      	ldrh	r3, [r7, #2]
 800777a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800777e:	81bb      	strh	r3, [r7, #12]
    return pools_[poolIndex].getSlot(indexInPool);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a1a      	ldr	r2, [r3, #32]
 8007784:	89fb      	ldrh	r3, [r7, #14]
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	4413      	add	r3, r2
 800778a:	89ba      	ldrh	r2, [r7, #12]
 800778c:	4611      	mov	r1, r2
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fbd8 	bl	8007f44 <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8007794:	4603      	mov	r3, r0
 8007796:	bf00      	nop
  }
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80077b4:	809a      	strh	r2, [r3, #4]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	4613      	mov	r3, r2
 80077d0:	80fb      	strh	r3, [r7, #6]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	88fa      	ldrh	r2, [r7, #6]
 80077dc:	809a      	strh	r2, [r3, #4]
  }
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>:
AdaptedString<TChar*> adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
AdaptedString<TChar*> adaptString(TChar* p, size_t n) {
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  return SizedStringAdapter<TChar*>::adapt(p, n);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	68b9      	ldr	r1, [r7, #8]
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fbe6 	bl	8007fd0 <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>
 8007804:	bf00      	nop
}
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* getString(const TAdaptedString& str) const {
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	6039      	str	r1, [r7, #0]
    return stringPool_.get(str);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3308      	adds	r3, #8
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	4618      	mov	r0, r3
 8007820:	f000 fbe6 	bl	8007ff0 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8007824:	4603      	mov	r3, r0
  }
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	607a      	str	r2, [r7, #4]
 800783a:	70fb      	strb	r3, [r7, #3]
      : str_(data, size_t(sz), isStatic) {}
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	f7fd fd26 	bl	8005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8007852:	b580      	push	{r7, lr}
 8007854:	b082      	sub	sp, #8
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fe f91f 	bl	8005a9e <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8007860:	4603      	mov	r3, r0
  }
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>:
AdaptedString<TString> adaptString(TString&& s) {
 800786a:	b580      	push	{r7, lr}
 800786c:	b082      	sub	sp, #8
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8007874:	6838      	ldr	r0, [r7, #0]
 8007876:	f000 fbf6 	bl	8008066 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 800787a:	4603      	mov	r3, r0
 800787c:	4618      	mov	r0, r3
 800787e:	f7fd fdea 	bl	8005456 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8007882:	4602      	mov	r2, r0
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	ca07      	ldmia	r2, {r0, r1, r2}
 8007888:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 8007894:	b580      	push	{r7, lr}
 8007896:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 8007898:	f04f 0000 	mov.w	r0, #0
 800789c:	4903      	ldr	r1, [pc, #12]	@ (80078ac <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv+0x18>)
 800789e:	f000 fc0d 	bl	80080bc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>
 80078a2:	eeb0 7b40 	vmov.f64	d7, d0
  }
 80078a6:	eeb0 0b47 	vmov.f64	d0, d7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	7ff00000 	.word	0x7ff00000

080078b0 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	ed87 0b02 	vstr	d0, [r7, #8]
 80078ba:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	dd04      	ble.n	80078cc <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x1c>
 80078c2:	f000 fb51 	bl	8007f68 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 80078c6:	4603      	mov	r3, r0
 80078c8:	613b      	str	r3, [r7, #16]
 80078ca:	e003      	b.n	80078d4 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 80078cc:	f000 fb70 	bl	8007fb0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 80078d0:	4603      	mov	r3, r0
 80078d2:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	dc02      	bgt.n	80078e0 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	425b      	negs	r3, r3
 80078de:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 80078e0:	2300      	movs	r3, #0
 80078e2:	75fb      	strb	r3, [r7, #23]
 80078e4:	e019      	b.n	800791a <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x6a>
    if (e & 1)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00e      	beq.n	800790e <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 80078f0:	7dfa      	ldrb	r2, [r7, #23]
 80078f2:	f107 0310 	add.w	r3, r7, #16
 80078f6:	4611      	mov	r1, r2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 fb45 	bl	8007f88 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 80078fe:	eeb0 6b40 	vmov.f64	d6, d0
 8007902:	ed97 7b02 	vldr	d7, [r7, #8]
 8007906:	ee27 7b06 	vmul.f64	d7, d7, d6
 800790a:	ed87 7b02 	vstr	d7, [r7, #8]
    e >>= 1;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	105b      	asrs	r3, r3, #1
 8007912:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	3301      	adds	r3, #1
 8007918:	75fb      	strb	r3, [r7, #23]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1e2      	bne.n	80078e6 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 8007920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007924:	ec43 2b17 	vmov	d7, r2, r3
}
 8007928:	eeb0 0b47 	vmov.f64	d0, d7
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>:
inline TFloat make_float(TFloat m, TExponent e) {
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	ed87 0a01 	vstr	s0, [r7, #4]
 800793c:	6038      	str	r0, [r7, #0]
  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	dd04      	ble.n	800794e <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x1c>
 8007944:	f000 fbca 	bl	80080dc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>
 8007948:	4603      	mov	r3, r0
 800794a:	60bb      	str	r3, [r7, #8]
 800794c:	e003      	b.n	8007956 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 800794e:	f000 fbd5 	bl	80080fc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>
 8007952:	4603      	mov	r3, r0
 8007954:	60bb      	str	r3, [r7, #8]
  if (e <= 0)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	dc02      	bgt.n	8007962 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x30>
    e = TExponent(-e);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	425b      	negs	r3, r3
 8007960:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8007962:	2300      	movs	r3, #0
 8007964:	73fb      	strb	r3, [r7, #15]
 8007966:	e019      	b.n	800799c <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x6a>
    if (e & 1)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00e      	beq.n	8007990 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 8007972:	7bfa      	ldrb	r2, [r7, #15]
 8007974:	f107 0308 	add.w	r3, r7, #8
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f000 fbce 	bl	800811c <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>
 8007980:	eeb0 7a40 	vmov.f32	s14, s0
 8007984:	edd7 7a01 	vldr	s15, [r7, #4]
 8007988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800798c:	edc7 7a01 	vstr	s15, [r7, #4]
    e >>= 1;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	105b      	asrs	r3, r3, #1
 8007994:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	3301      	adds	r3, #1
 800799a:	73fb      	strb	r3, [r7, #15]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1e2      	bne.n	8007968 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x36>
  return m;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	ee07 3a90 	vmov	s15, r3
}
 80079a8:	eeb0 0a67 	vmov.f32	s0, s15
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
	...

080079b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 80079b4:	b5b0      	push	{r4, r5, r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 80079c0:	68fc      	ldr	r4, [r7, #12]
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f020 fed7 	bl	8028776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80079c8:	4603      	mov	r3, r0
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	4619      	mov	r1, r3
 80079ce:	4620      	mov	r0, r4
 80079d0:	f021 f980 	bl	8028cd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	if (__s == 0)
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d102      	bne.n	80079e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2c>
	  std::__throw_logic_error(__N("basic_string: "
 80079da:	480a      	ldr	r0, [pc, #40]	@ (8007a04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
 80079dc:	f020 fea5 	bl	802872a <_ZSt19__throw_logic_errorPKc>
	const _CharT* __end = __s + traits_type::length(__s);
 80079e0:	68b8      	ldr	r0, [r7, #8]
 80079e2:	f7fd fb97 	bl	8005114 <_ZNSt11char_traitsIcE6lengthEPKc>
 80079e6:	4602      	mov	r2, r0
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	4413      	add	r3, r2
 80079ec:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, forward_iterator_tag());
 80079ee:	462b      	mov	r3, r5
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	68b9      	ldr	r1, [r7, #8]
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 f922 	bl	8007c3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4618      	mov	r0, r3
 80079fe:	3718      	adds	r7, #24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bdb0      	pop	{r4, r5, r7, pc}
 8007a04:	0802a5cc 	.word	0x0802a5cc

08007a08 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>:
  detail::MemberProxy<JsonDocument&, detail::AdaptedString<TString>> operator[](
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08a      	sub	sp, #40	@ 0x28
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8007a14:	f107 0314 	add.w	r3, r7, #20
 8007a18:	6879      	ldr	r1, [r7, #4]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 fb92 	bl	8008144 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	f107 0314 	add.w	r3, r7, #20
 8007a28:	cb0c      	ldmia	r3, {r2, r3}
 8007a2a:	68b9      	ldr	r1, [r7, #8]
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 fb9c 	bl	800816a <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>
  }
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	3720      	adds	r7, #32
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>:
  operator T() const {
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	6039      	str	r1, [r7, #0]
    return as<T>();
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 f876 	bl	8007b3a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8007a4e:	bf00      	nop
  }
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>:
  operator T() const {
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
    return as<T>();
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 fb9b 	bl	80081a2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>
 8007a6c:	bf00      	nop
  }
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b08c      	sub	sp, #48	@ 0x30
 8007a7a:	af02      	add	r7, sp, #8
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	f107 0314 	add.w	r3, r7, #20
 8007a88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8007a90:	f107 031c 	add.w	r3, r7, #28
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fba7 	bl	80081ea <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8007a9c:	466a      	mov	r2, sp
 8007a9e:	f107 0320 	add.w	r3, r7, #32
 8007aa2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007aa6:	e882 0003 	stmia.w	r2, {r0, r1}
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	f107 0214 	add.w	r2, r7, #20
 8007ab0:	ca06      	ldmia	r2, {r1, r2}
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 f973 	bl	8007d9e <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	3728      	adds	r7, #40	@ 0x28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
    return as<T>();
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fba1 	bl	8008210 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>
 8007ace:	4603      	mov	r3, r0
  }
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08c      	sub	sp, #48	@ 0x30
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	f107 0314 	add.w	r3, r7, #20
 8007aea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007aee:	e883 0003 	stmia.w	r3, {r0, r1}
 8007af2:	f107 031c 	add.w	r3, r7, #28
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 fbab 	bl	8008254 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8007afe:	466a      	mov	r2, sp
 8007b00:	f107 0320 	add.w	r3, r7, #32
 8007b04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007b08:	e882 0003 	stmia.w	r2, {r0, r1}
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	f107 0214 	add.w	r2, r7, #20
 8007b12:	ca06      	ldmia	r2, {r1, r2}
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 f942 	bl	8007d9e <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	3728      	adds	r7, #40	@ 0x28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>:
  operator T() const {
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b082      	sub	sp, #8
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
    return as<T>();
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fba5 	bl	800827a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>
 8007b30:	4603      	mov	r3, r0
  }
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8007b3a:	b590      	push	{r4, r7, lr}
 8007b3c:	b087      	sub	sp, #28
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	6039      	str	r1, [r7, #0]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8007b4c:	6938      	ldr	r0, [r7, #16]
 8007b4e:	f000 ff69 	bl	8008a24 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 8007b52:	4604      	mov	r4, r0
 8007b54:	6938      	ldr	r0, [r7, #16]
 8007b56:	f000 ff75 	bl	8008a44 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	f107 0308 	add.w	r3, r7, #8
 8007b60:	4621      	mov	r1, r4
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fd ff88 	bl	8005a78 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8007b68:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f107 0308 	add.w	r3, r7, #8
 8007b70:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007b74:	f7fe fc6e 	bl	8006454 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>
 8007b78:	bf00      	nop
}
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	371c      	adds	r7, #28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd90      	pop	{r4, r7, pc}

08007b82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	71fb      	strb	r3, [r7, #7]
      __string_type __str(__lhs);
 8007b90:	68b9      	ldr	r1, [r7, #8]
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f021 f8bb 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	2101      	movs	r1, #1
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f020 ffc4 	bl	8028b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8007ba4:	bf00      	nop
    }
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>:
// Parses a JSON input, filters, and puts the result in a JsonDocument.
// https://arduinojson.org/v7/api/json/deserializejson/
template <typename TDestination, typename TChar, typename... Args,
          detail::enable_if_t<
              detail::is_deserialize_destination<TDestination>::value, int> = 0>
inline DeserializationError deserializeJson(TDestination&& dst, TChar* input,
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
                                            Args&&... args) {
  using namespace detail;
  return deserialize<JsonDeserializer>(detail::forward<TDestination>(dst),
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fb80 	bl	80082be <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	463b      	mov	r3, r7
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	f000 fb85 	bl	80082d4 <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>
 8007bca:	4603      	mov	r3, r0
                                       input, detail::forward<Args>(args)...);
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	781a      	ldrb	r2, [r3, #0]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	bf0c      	ite	eq
 8007bea:	2301      	moveq	r3, #1
 8007bec:	2300      	movne	r3, #0
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d004      	beq.n	8007c34 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f020 fdd2 	bl	80287d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b088      	sub	sp, #32
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	60f8      	str	r0, [r7, #12]
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	607a      	str	r2, [r7, #4]
 8007c4a:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	68b8      	ldr	r0, [r7, #8]
 8007c50:	f000 fb61 	bl	8008316 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8007c54:	4603      	mov	r3, r0
 8007c56:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	2b0f      	cmp	r3, #15
 8007c5c:	d911      	bls.n	8007c82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 8007c5e:	f107 0318 	add.w	r3, r7, #24
 8007c62:	2200      	movs	r2, #0
 8007c64:	4619      	mov	r1, r3
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f020 fd94 	bl	8028794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	4619      	mov	r1, r3
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f020 fd7c 	bl	802876e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f020 fd7d 	bl	802877a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 8007c80:	e005      	b.n	8007c8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x50>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 8007c86:	69f8      	ldr	r0, [r7, #28]
 8007c88:	f020 fd75 	bl	8028776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8007c8c:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 8007c8e:	f107 0314 	add.w	r3, r7, #20
 8007c92:	68f9      	ldr	r1, [r7, #12]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff ffb1 	bl	8007bfc <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f020 fd69 	bl	8028772 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	68b9      	ldr	r1, [r7, #8]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f020 fdf6 	bl	8028898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f020 fd62 	bl	802877e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8007cba:	f107 0314 	add.w	r3, r7, #20
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff ffab 	bl	8007c1a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
 8007cc4:	3720      	adds	r7, #32
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>:
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
    capacity_ = slots_ ? cap : 0;
    usage_ = 0;
  }

  void destroy(Allocator* allocator) {
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
    if (slots_)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d008      	beq.n	8007cee <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE+0x24>
      allocator->deallocate(slots_);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6852      	ldr	r2, [r2, #4]
 8007ce8:	4611      	mov	r1, r2
 8007cea:	6838      	ldr	r0, [r7, #0]
 8007cec:	4798      	blx	r3
    slots_ = nullptr;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	605a      	str	r2, [r3, #4]
    capacity_ = 0;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	805a      	strh	r2, [r3, #2]
  }
 8007d00:	bf00      	nop
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>:

  static SlotCount bytesToSlots(size_t n) {
    return static_cast<SlotCount>(n / sizeof(T));
  }

  static size_t slotsToBytes(SlotCount n) {
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	4603      	mov	r3, r0
 8007d10:	80fb      	strh	r3, [r7, #6]
    return n * sizeof(T);
 8007d12:	88fb      	ldrh	r3, [r7, #6]
 8007d14:	00db      	lsls	r3, r3, #3
  }
 8007d16:	4618      	mov	r0, r3
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:
  void shrinkToFit(Allocator* allocator) {
 8007d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d24:	b085      	sub	sp, #20
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	6039      	str	r1, [r7, #0]
        allocator->reallocate(slots_, slotsToBytes(usage_)));
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3308      	adds	r3, #8
 8007d32:	681c      	ldr	r4, [r3, #0]
 8007d34:	683d      	ldr	r5, [r7, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685e      	ldr	r6, [r3, #4]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	885b      	ldrh	r3, [r3, #2]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff ffe2 	bl	8007d08 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8007d44:	4603      	mov	r3, r0
 8007d46:	461a      	mov	r2, r3
 8007d48:	4631      	mov	r1, r6
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	47a0      	blx	r4
 8007d4e:	60f8      	str	r0, [r7, #12]
    if (newSlots) {
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d006      	beq.n	8007d64 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x42>
      slots_ = newSlots;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	605a      	str	r2, [r3, #4]
      capacity_ = usage_;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	885a      	ldrh	r2, [r3, #2]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	801a      	strh	r2, [r3, #0]
  }
 8007d64:	bf00      	nop
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d6c <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>:
  template <typename TAdaptedString>
  VariantData* getMember(TAdaptedString key,
                         const ResourceManager* resources) const;

  template <typename TAdaptedString>
  static VariantData* getMember(const ObjectData* object, TAdaptedString key,
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af02      	add	r7, sp, #8
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	4638      	mov	r0, r7
 8007d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                const ResourceManager* resources) {
    if (!object)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x18>
      return nullptr;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e008      	b.n	8007d96 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return object->getMember(key, resources);
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	463b      	mov	r3, r7
 8007d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d8e:	f000 fad6 	bl	800833e <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 8007d92:	4603      	mov	r3, r0
 8007d94:	bf00      	nop
  }
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>:

  template <typename>
  friend class ElementProxy;

 public:
  MemberProxy(TUpstream upstream, AdaptedString key)
 8007d9e:	b082      	sub	sp, #8
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	1d38      	adds	r0, r7, #4
 8007daa:	e880 0006 	stmia.w	r0, {r1, r2}
 8007dae:	61fb      	str	r3, [r7, #28]
      : upstream_(upstream), key_(key) {}
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	3304      	adds	r3, #4
 8007db4:	1d3a      	adds	r2, r7, #4
 8007db6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007dba:	e883 0003 	stmia.w	r3, {r0, r1}
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	330c      	adds	r3, #12
 8007dc2:	f107 021c 	add.w	r2, r7, #28
 8007dc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8007dc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	b002      	add	sp, #8
 8007dda:	4770      	bx	lr

08007ddc <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>:

 private:
  Slot<T> allocFromFreeList() {
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(freeList_ != NULL_SLOT);
    auto id = freeList_;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dea:	81fb      	strh	r3, [r7, #14]
    auto slot = getSlot(freeList_);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007df0:	4619      	mov	r1, r3
 8007df2:	6838      	ldr	r0, [r7, #0]
 8007df4:	f7ff fcb0 	bl	8007758 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8007df8:	60b8      	str	r0, [r7, #8]
    freeList_ = reinterpret_cast<FreeSlot*>(slot)->next;
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	881a      	ldrh	r2, [r3, #0]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	851a      	strh	r2, [r3, #40]	@ 0x28
    return {slot, id};
 8007e02:	89fb      	ldrh	r3, [r7, #14]
 8007e04:	461a      	mov	r2, r3
 8007e06:	68b9      	ldr	r1, [r7, #8]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff fc75 	bl	80076f8 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>:

  Slot<T> allocFromLastPool() {
 8007e16:	b5b0      	push	{r4, r5, r7, lr}
 8007e18:	b086      	sub	sp, #24
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(count_ > 0);
    auto poolIndex = SlotId(count_ - 1);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007e24:	3b01      	subs	r3, #1
 8007e26:	82fb      	strh	r3, [r7, #22]
    auto slot = pools_[poolIndex].allocSlot();
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	6a1a      	ldr	r2, [r3, #32]
 8007e2c:	8afb      	ldrh	r3, [r7, #22]
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	441a      	add	r2, r3
 8007e32:	f107 030c 	add.w	r3, r7, #12
 8007e36:	4611      	mov	r1, r2
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 faad 	bl	8008398 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>
    if (!slot)
 8007e3e:	f107 030c 	add.w	r3, r7, #12
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff fc22 	bl	800768c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	f083 0301 	eor.w	r3, r3, #1
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d003      	beq.n	8007e5c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x46>
      return {};
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f857 	bl	8007f08 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8007e5a:	e015      	b.n	8007e88 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x72>
    return {slot.ptr(),
            SlotId(poolIndex * ARDUINOJSON_POOL_CAPACITY + slot.id())};
 8007e5c:	f107 030c 	add.w	r3, r7, #12
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 f863 	bl	8007f2c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 8007e66:	4605      	mov	r5, r0
 8007e68:	8afb      	ldrh	r3, [r7, #22]
 8007e6a:	01db      	lsls	r3, r3, #7
 8007e6c:	b29c      	uxth	r4, r3
 8007e6e:	f107 030c 	add.w	r3, r7, #12
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff fc27 	bl	80076c6 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	4423      	add	r3, r4
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	461a      	mov	r2, r3
 8007e80:	4629      	mov	r1, r5
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff fc38 	bl	80076f8 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bdb0      	pop	{r4, r5, r7, pc}

08007e90 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>:

  Pool* addPool(Allocator* allocator) {
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
    if (count_ == capacity_ && !increaseCapacity(allocator))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d10b      	bne.n	8007ebe <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 faa1 	bl	80083f0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	f083 0301 	eor.w	r3, r3, #1
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e000      	b.n	8007ec0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x30>
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x38>
      return nullptr;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	e01b      	b.n	8007f00 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x70>
    auto pool = &pools_[count_++];
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a1a      	ldr	r2, [r3, #32]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ed0:	1c59      	adds	r1, r3, #1
 8007ed2:	b288      	uxth	r0, r1
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	8488      	strh	r0, [r1, #36]	@ 0x24
 8007ed8:	00db      	lsls	r3, r3, #3
 8007eda:	4413      	add	r3, r2
 8007edc:	60bb      	str	r3, [r7, #8]
    SlotCount poolCapacity = ARDUINOJSON_POOL_CAPACITY;
 8007ede:	2380      	movs	r3, #128	@ 0x80
 8007ee0:	81fb      	strh	r3, [r7, #14]
    if (count_ == maxPools)  // last pool is smaller because of NULL_SLOT
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eea:	d102      	bne.n	8007ef2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x62>
      poolCapacity--;
 8007eec:	89fb      	ldrh	r3, [r7, #14]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	81fb      	strh	r3, [r7, #14]
    pool->create(poolCapacity, allocator);
 8007ef2:	89fb      	ldrh	r3, [r7, #14]
 8007ef4:	683a      	ldr	r2, [r7, #0]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	68b8      	ldr	r0, [r7, #8]
 8007efa:	f000 fabe 	bl	800847a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>
    return pool;
 8007efe:	68bb      	ldr	r3, [r7, #8]
  }
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f1c:	809a      	strh	r2, [r3, #4]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4618      	mov	r0, r3
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>:
  T* ptr() const {
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
    return ptr_;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
  }
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	807b      	strh	r3, [r7, #2]
    return slots_ + id;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	887b      	ldrh	r3, [r7, #2]
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	4413      	add	r3, r2
  }
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
	...

08007f68 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8007f6e:	1d3b      	adds	r3, r7, #4
 8007f70:	4904      	ldr	r1, [pc, #16]	@ (8007f84 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 faa7 	bl	80084c6 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 8007f78:	687b      	ldr	r3, [r7, #4]
  }
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	0802b390 	.word	0x0802b390

08007f88 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	00db      	lsls	r3, r3, #3
 8007f9a:	4413      	add	r3, r2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 faa1 	bl	80084e4 <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>
 8007fa2:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8007fa6:	eeb0 0b47 	vmov.f64	d0, d7
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8007fb6:	1d3b      	adds	r3, r7, #4
 8007fb8:	4904      	ldr	r1, [pc, #16]	@ (8007fcc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fa83 	bl	80084c6 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 8007fc0:	687b      	ldr	r3, [r7, #4]
  }
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	0802b3d8 	.word	0x0802b3d8

08007fd0 <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>:

template <typename TChar>
struct SizedStringAdapter<TChar*, enable_if_t<IsChar<TChar>::value>> {
  using AdaptedString = RamString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 8007fdc:	2300      	movs	r3, #0
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	68b9      	ldr	r1, [r7, #8]
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f7fd f956 	bl	8005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* get(const TAdaptedString& str) const {
 8007ff0:	b590      	push	{r4, r7, lr}
 8007ff2:	b089      	sub	sp, #36	@ 0x24
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
    for (auto node = strings_; node; node = node->next) {
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	617b      	str	r3, [r7, #20]
 8008000:	e01e      	b.n	8008040 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x50>
      if (stringEquals(str, adaptString(node->data, node->length)))
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f103 0108 	add.w	r1, r3, #8
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	88db      	ldrh	r3, [r3, #6]
 800800c:	461a      	mov	r2, r3
 800800e:	f107 0308 	add.w	r3, r7, #8
 8008012:	4618      	mov	r0, r3
 8008014:	f7ff fbea 	bl	80077ec <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8008018:	683a      	ldr	r2, [r7, #0]
 800801a:	466c      	mov	r4, sp
 800801c:	f107 030c 	add.w	r3, r7, #12
 8008020:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008024:	e884 0003 	stmia.w	r4, {r0, r1}
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	ca07      	ldmia	r2, {r0, r1, r2}
 800802c:	f000 fa6a 	bl	8008504 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x4a>
        return node;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	e006      	b.n	8008048 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x58>
    for (auto node = strings_; node; node = node->next) {
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	617b      	str	r3, [r7, #20]
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1dd      	bne.n	8008002 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x12>
    return nullptr;
 8008046:	2300      	movs	r3, #0
  }
 8008048:	4618      	mov	r0, r3
 800804a:	371c      	adds	r7, #28
 800804c:	46bd      	mov	sp, r7
 800804e:	bd90      	pop	{r4, r7, pc}

08008050 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

using nullptr_t = decltype(nullptr);

template <class T>
T&& forward(remove_reference_t<T>& t) noexcept {
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8008058:	687b      	ldr	r3, [r7, #4]
}
 800805a:	4618      	mov	r0, r3
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800806e:	687b      	ldr	r3, [r7, #4]
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fa7f 	bl	8008588 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 800808a:	4603      	mov	r3, r0
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fa86 	bl	800859e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 8008092:	4603      	mov	r3, r0
  }
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>:
  VariantData* getData() const {
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fa6f 	bl	8008588 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 80080aa:	4603      	mov	r3, r0
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 fa82 	bl	80085b6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80080b2:	4603      	mov	r3, r0
  }
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 80080c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080ca:	f000 fa80 	bl	80085ce <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>
 80080ce:	eeb0 7b40 	vmov.f64	d7, d0
  }
 80080d2:	eeb0 0b47 	vmov.f64	d0, d7
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 80080e2:	1d3b      	adds	r3, r7, #4
 80080e4:	4904      	ldr	r1, [pc, #16]	@ (80080f8 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv+0x1c>)
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 fa85 	bl	80085f6 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 80080ec:	687b      	ldr	r3, [r7, #4]
  }
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	0802b420 	.word	0x0802b420

080080fc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8008102:	1d3b      	adds	r3, r7, #4
 8008104:	4904      	ldr	r1, [pc, #16]	@ (8008118 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv+0x1c>)
 8008106:	4618      	mov	r0, r3
 8008108:	f000 fa75 	bl	80085f6 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 800810c:	687b      	ldr	r3, [r7, #4]
  }
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	0802b438 	.word	0x0802b438

0800811c <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>:
  T operator[](intptr_t index) const {
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	4618      	mov	r0, r3
 8008132:	f000 fa6f 	bl	8008614 <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>
 8008136:	eef0 7a40 	vmov.f32	s15, s0
  }
 800813a:	eeb0 0a67 	vmov.f32	s0, s15
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800814e:	6838      	ldr	r0, [r7, #0]
 8008150:	f000 fa6f 	bl	8008632 <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8008154:	4602      	mov	r2, r0
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4611      	mov	r1, r2
 800815a:	4618      	mov	r0, r3
 800815c:	f000 fa74 	bl	8008648 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>
 8008160:	bf00      	nop
}
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 800816a:	b082      	sub	sp, #8
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
 8008176:	f107 0110 	add.w	r1, r7, #16
 800817a:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	683a      	ldr	r2, [r7, #0]
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3304      	adds	r3, #4
 8008188:	f107 0210 	add.w	r2, r7, #16
 800818c:	ca07      	ldmia	r2, {r0, r1, r2}
 800818e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4618      	mov	r0, r3
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	b002      	add	sp, #8
 80081a0:	4770      	bx	lr

080081a2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80081a2:	b590      	push	{r4, r7, lr}
 80081a4:	b087      	sub	sp, #28
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	6039      	str	r1, [r7, #0]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	617b      	str	r3, [r7, #20]
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 80081b4:	6938      	ldr	r0, [r7, #16]
 80081b6:	f7ff ff71 	bl	800809c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>
 80081ba:	4604      	mov	r4, r0
 80081bc:	6938      	ldr	r0, [r7, #16]
 80081be:	f7ff ff5d 	bl	800807c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 80081c2:	4602      	mov	r2, r0
 80081c4:	f107 0308 	add.w	r3, r7, #8
 80081c8:	4621      	mov	r1, r4
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fd fc54 	bl	8005a78 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 80081d0:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f107 0308 	add.w	r3, r7, #8
 80081d8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80081dc:	f7fe f95d 	bl	800649a <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>
 80081e0:	bf00      	nop
}
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	371c      	adds	r7, #28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd90      	pop	{r4, r7, pc}

080081ea <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b082      	sub	sp, #8
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80081f4:	6838      	ldr	r0, [r7, #0]
 80081f6:	f000 fa36 	bl	8008666 <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80081fa:	4602      	mov	r2, r0
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4611      	mov	r1, r2
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fa3b 	bl	800867c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>
 8008206:	bf00      	nop
}
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8008210:	b590      	push	{r4, r7, lr}
 8008212:	b087      	sub	sp, #28
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	617b      	str	r3, [r7, #20]
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8008220:	6938      	ldr	r0, [r7, #16]
 8008222:	f000 fcce 	bl	8008bc2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8008226:	4604      	mov	r4, r0
 8008228:	6938      	ldr	r0, [r7, #16]
 800822a:	f000 fb58 	bl	80088de <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800822e:	4602      	mov	r2, r0
 8008230:	f107 0308 	add.w	r3, r7, #8
 8008234:	4621      	mov	r1, r4
 8008236:	4618      	mov	r0, r3
 8008238:	f7fd fbf3 	bl	8005a22 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800823c:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800823e:	f107 0308 	add.w	r3, r7, #8
 8008242:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008246:	f7fe f8e5 	bl	8006414 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 800824a:	4603      	mov	r3, r0
}
 800824c:	4618      	mov	r0, r3
 800824e:	371c      	adds	r7, #28
 8008250:	46bd      	mov	sp, r7
 8008252:	bd90      	pop	{r4, r7, pc}

08008254 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800825e:	6838      	ldr	r0, [r7, #0]
 8008260:	f000 fa1b 	bl	800869a <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8008264:	4602      	mov	r2, r0
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4611      	mov	r1, r2
 800826a:	4618      	mov	r0, r3
 800826c:	f000 fa20 	bl	80086b0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>
 8008270:	bf00      	nop
}
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800827a:	b590      	push	{r4, r7, lr}
 800827c:	b087      	sub	sp, #28
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	617b      	str	r3, [r7, #20]
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800828a:	6938      	ldr	r0, [r7, #16]
 800828c:	f000 fc99 	bl	8008bc2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8008290:	4604      	mov	r4, r0
 8008292:	6938      	ldr	r0, [r7, #16]
 8008294:	f000 fb23 	bl	80088de <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8008298:	4602      	mov	r2, r0
 800829a:	f107 0308 	add.w	r3, r7, #8
 800829e:	4621      	mov	r1, r4
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fd fbbe 	bl	8005a22 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80082a6:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80082a8:	f107 0308 	add.w	r3, r7, #8
 80082ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80082b0:	f000 fa0d 	bl	80086ce <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>
 80082b4:	4603      	mov	r3, r0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd90      	pop	{r4, r7, pc}

080082be <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80082c6:	687b      	ldr	r3, [r7, #4]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>:
template <
    template <typename> class TDeserializer, typename TDestination,
    typename TStream, typename... Args,
    enable_if_t<  // issue #1897
        !is_integral<typename first_or_void<Args...>::type>::value, int> = 0>
DeserializationError deserialize(TDestination&& dst, TStream&& input,
 80082d4:	b590      	push	{r4, r7, lr}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
                                 Args... args) {
  return doDeserialize<TDeserializer>(
 80082de:	6838      	ldr	r0, [r7, #0]
 80082e0:	f7ff feb6 	bl	8008050 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80082e4:	4603      	mov	r3, r0
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fa0f 	bl	800870a <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>
 80082ec:	4604      	mov	r4, r0
 80082ee:	f107 0308 	add.w	r3, r7, #8
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fe f9a0 	bl	8006638 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>
 80082f8:	7a38      	ldrb	r0, [r7, #8]
 80082fa:	f7fe f9df 	bl	80066bc <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>
 80082fe:	4603      	mov	r3, r0
 8008300:	81bb      	strh	r3, [r7, #12]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	4621      	mov	r1, r4
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fa20 	bl	800874c <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>
 800830c:	4603      	mov	r3, r0
      dst, makeReader(detail::forward<TStream>(input)),
      makeDeserializationOptions(args...));
}
 800830e:	4618      	mov	r0, r3
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	bd90      	pop	{r4, r7, pc}

08008316 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8008316:	b5b0      	push	{r4, r5, r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8008320:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8008322:	1d3b      	adds	r3, r7, #4
 8008324:	4618      	mov	r0, r3
 8008326:	f000 fa4a 	bl	80087be <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800832a:	462a      	mov	r2, r5
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	4620      	mov	r0, r4
 8008330:	f000 fa4f 	bl	80087d2 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8008334:	4603      	mov	r3, r0
    }
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bdb0      	pop	{r4, r5, r7, pc}

0800833e <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TAdaptedString>
inline VariantData* ObjectData::getMember(
 800833e:	b580      	push	{r7, lr}
 8008340:	b088      	sub	sp, #32
 8008342:	af02      	add	r7, sp, #8
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	4638      	mov	r0, r7
 8008348:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  auto it = findKey(key, resources);
 800834c:	f107 0010 	add.w	r0, r7, #16
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	463b      	mov	r3, r7
 800835a:	cb0c      	ldmia	r3, {r2, r3}
 800835c:	68f9      	ldr	r1, [r7, #12]
 800835e:	f000 fa47 	bl	80087f0 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>
  if (it.done())
 8008362:	f107 0310 	add.w	r3, r7, #16
 8008366:	4618      	mov	r0, r3
 8008368:	f7fd f892 	bl	8005490 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x38>
    return nullptr;
 8008372:	2300      	movs	r3, #0
 8008374:	e00c      	b.n	8008390 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x52>
  it.next(resources);
 8008376:	f107 0310 	add.w	r3, r7, #16
 800837a:	6a39      	ldr	r1, [r7, #32]
 800837c:	4618      	mov	r0, r3
 800837e:	f7fd fd46 	bl	8005e0e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
  return it.data();
 8008382:	f107 0310 	add.w	r3, r7, #16
 8008386:	4618      	mov	r0, r3
 8008388:	f7fd f8b3 	bl	80054f2 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800838c:	4603      	mov	r3, r0
 800838e:	bf00      	nop
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>:
  Slot<T> allocSlot() {
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
    if (!slots_)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d103      	bne.n	80083b2 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x1a>
      return {};
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff fdac 	bl	8007f08 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 80083b0:	e01a      	b.n	80083e8 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    if (usage_ >= capacity_)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	885a      	ldrh	r2, [r3, #2]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d303      	bcc.n	80083c6 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x2e>
      return {};
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7ff fda2 	bl	8007f08 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 80083c4:	e010      	b.n	80083e8 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    auto index = usage_++;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	885b      	ldrh	r3, [r3, #2]
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	b291      	uxth	r1, r2
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	8051      	strh	r1, [r2, #2]
 80083d2:	81fb      	strh	r3, [r7, #14]
    return {slots_ + index, SlotId(index)};
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	89fb      	ldrh	r3, [r7, #14]
 80083da:	00db      	lsls	r3, r3, #3
 80083dc:	4413      	add	r3, r2
 80083de:	89fa      	ldrh	r2, [r7, #14]
 80083e0:	4619      	mov	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7ff f988 	bl	80076f8 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>:

  bool increaseCapacity(Allocator* allocator) {
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
    if (capacity_ == maxPools)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80083fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008402:	d101      	bne.n	8008408 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x18>
      return false;
 8008404:	2300      	movs	r3, #0
 8008406:	e034      	b.n	8008472 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    void* newPools;
    auto newCapacity = PoolCount(capacity_ * 2);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800840c:	005b      	lsls	r3, r3, #1
 800840e:	817b      	strh	r3, [r7, #10]

    if (pools_ == preallocatedPools_) {
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a1a      	ldr	r2, [r3, #32]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	429a      	cmp	r2, r3
 8008418:	d114      	bne.n	8008444 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x54>
      newPools = allocator->allocate(newCapacity * sizeof(Pool));
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	897a      	ldrh	r2, [r7, #10]
 8008422:	00d2      	lsls	r2, r2, #3
 8008424:	4611      	mov	r1, r2
 8008426:	6838      	ldr	r0, [r7, #0]
 8008428:	4798      	blx	r3
 800842a:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x46>
        return false;
 8008432:	2300      	movs	r3, #0
 8008434:	e01d      	b.n	8008472 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
      memcpy(newPools, preallocatedPools_, sizeof(preallocatedPools_));
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2220      	movs	r2, #32
 800843a:	4619      	mov	r1, r3
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f021 fa4e 	bl	80298de <memcpy>
 8008442:	e00f      	b.n	8008464 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
    } else {
      newPools = allocator->reallocate(pools_, newCapacity * sizeof(Pool));
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3308      	adds	r3, #8
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6a11      	ldr	r1, [r2, #32]
 8008450:	897a      	ldrh	r2, [r7, #10]
 8008452:	00d2      	lsls	r2, r2, #3
 8008454:	6838      	ldr	r0, [r7, #0]
 8008456:	4798      	blx	r3
 8008458:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
        return false;
 8008460:	2300      	movs	r3, #0
 8008462:	e006      	b.n	8008472 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    }

    pools_ = static_cast<Pool*>(newPools);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	621a      	str	r2, [r3, #32]
    capacity_ = newCapacity;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	897a      	ldrh	r2, [r7, #10]
 800846e:	84da      	strh	r2, [r3, #38]	@ 0x26
    return true;
 8008470:	2301      	movs	r3, #1
  }
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>:
  void create(SlotCount cap, Allocator* allocator) {
 800847a:	b5b0      	push	{r4, r5, r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	460b      	mov	r3, r1
 8008484:	607a      	str	r2, [r7, #4]
 8008486:	817b      	strh	r3, [r7, #10]
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681c      	ldr	r4, [r3, #0]
 800848e:	687d      	ldr	r5, [r7, #4]
 8008490:	897b      	ldrh	r3, [r7, #10]
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff fc38 	bl	8007d08 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8008498:	4603      	mov	r3, r0
 800849a:	4619      	mov	r1, r3
 800849c:	4628      	mov	r0, r5
 800849e:	47a0      	blx	r4
 80084a0:	4602      	mov	r2, r0
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	605a      	str	r2, [r3, #4]
    capacity_ = slots_ ? cap : 0;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x38>
 80084ae:	897a      	ldrh	r2, [r7, #10]
 80084b0:	e000      	b.n	80084b4 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x3a>
 80084b2:	2200      	movs	r2, #0
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	805a      	strh	r2, [r3, #2]
  }
 80084be:	bf00      	nop
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bdb0      	pop	{r4, r5, r7, pc}

080084c6 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 80084c6:	b480      	push	{r7}
 80084c8:	b083      	sub	sp, #12
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  return *p;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80084f6:	eeb0 0b47 	vmov.f64	d0, d7
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
  return -stringCompare(s2, s1);
}

template <typename TAdaptedString1, typename TAdaptedString2>
enable_if_t<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey, bool>
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8008504:	b082      	sub	sp, #8
 8008506:	b590      	push	{r4, r7, lr}
 8008508:	b089      	sub	sp, #36	@ 0x24
 800850a:	af00      	add	r7, sp, #0
 800850c:	1d3c      	adds	r4, r7, #4
 800850e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008512:	637b      	str	r3, [r7, #52]	@ 0x34
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 8008514:	1d3b      	adds	r3, r7, #4
 8008516:	4618      	mov	r0, r3
 8008518:	f7fc fee4 	bl	80052e4 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 800851c:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 800851e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008522:	4618      	mov	r0, r3
 8008524:	f7fc fede 	bl	80052e4 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8008528:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	429a      	cmp	r2, r3
 8008530:	d001      	beq.n	8008536 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x32>
    return false;
 8008532:	2300      	movs	r3, #0
 8008534:	e021      	b.n	800857a <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 8008536:	2300      	movs	r3, #0
 8008538:	61fb      	str	r3, [r7, #28]
 800853a:	e019      	b.n	8008570 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
    if (s1[i] != s2[i])
 800853c:	1d3b      	adds	r3, r7, #4
 800853e:	69f9      	ldr	r1, [r7, #28]
 8008540:	4618      	mov	r0, r3
 8008542:	f7f8 fbe1 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 8008546:	4603      	mov	r3, r0
 8008548:	461c      	mov	r4, r3
 800854a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800854e:	69f9      	ldr	r1, [r7, #28]
 8008550:	4618      	mov	r0, r3
 8008552:	f7f8 fbd9 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 8008556:	4603      	mov	r3, r0
 8008558:	429c      	cmp	r4, r3
 800855a:	bf14      	ite	ne
 800855c:	2301      	movne	r3, #1
 800855e:	2300      	moveq	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x66>
      return false;
 8008566:	2300      	movs	r3, #0
 8008568:	e007      	b.n	800857a <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	3301      	adds	r3, #1
 800856e:	61fb      	str	r3, [r7, #28]
 8008570:	69fa      	ldr	r2, [r7, #28]
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	429a      	cmp	r2, r3
 8008576:	d3e1      	bcc.n	800853c <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x38>
  }
  return true;
 8008578:	2301      	movs	r3, #1
}
 800857a:	4618      	mov	r0, r3
 800857c:	3724      	adds	r7, #36	@ 0x24
 800857e:	46bd      	mov	sp, r7
 8008580:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008584:	b002      	add	sp, #8
 8008586:	4770      	bx	lr

08008588 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>:
  const TDerived& derived() const {
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8008590:	687b      	ldr	r3, [r7, #4]
  }
 8008592:	4618      	mov	r0, r3
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800859e:	b580      	push	{r7, lr}
 80085a0:	b082      	sub	sp, #8
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7fd fa79 	bl	8005a9e <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 80085ac:	4603      	mov	r3, r0
  }
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b082      	sub	sp, #8
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
    return client.getData();
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7fd fa79 	bl	8005ab6 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 80085c4:	4603      	mov	r3, r0
  }
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>:
T alias_cast(F raw_data) {
 80085ce:	b480      	push	{r7}
 80085d0:	b085      	sub	sp, #20
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	e9c7 0100 	strd	r0, r1, [r7]
  ac.raw = raw_data;
 80085d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085dc:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 80085e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085e4:	ec43 2b17 	vmov	d7, r2, r3
}
 80085e8:	eeb0 0b47 	vmov.f64	d0, d7
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 80085f6:	b480      	push	{r7}
 80085f8:	b083      	sub	sp, #12
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	6039      	str	r1, [r7, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4618      	mov	r0, r3
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>:
inline T pgm_read(const T* p) {
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  return *p;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	ee07 3a90 	vmov	s15, r3
}
 8008624:	eeb0 0a67 	vmov.f32	s0, s15
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8008632:	b480      	push	{r7}
 8008634:	b083      	sub	sp, #12
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800863a:	687b      	ldr	r3, [r7, #4]
}
 800863c:	4618      	mov	r0, r3
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8008652:	2301      	movs	r3, #1
 8008654:	2207      	movs	r2, #7
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7fc fe1b 	bl	8005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8008666:	b480      	push	{r7}
 8008668:	b083      	sub	sp, #12
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800866e:	687b      	ldr	r3, [r7, #4]
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8008686:	2301      	movs	r3, #1
 8008688:	2206      	movs	r2, #6
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7fc fe01 	bl	8005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80086a2:	687b      	ldr	r3, [r7, #4]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 80086ba:	2301      	movs	r3, #1
 80086bc:	2209      	movs	r2, #9
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f7fc fde7 	bl	8005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	463b      	mov	r3, r7
 80086d6:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80086da:	463b      	mov	r3, r7
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fe ff1f 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80086e2:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 80086e4:	463b      	mov	r3, r7
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fe ff26 	bl	8007538 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80086ec:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d005      	beq.n	8008700 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x32>
 80086f4:	68b9      	ldr	r1, [r7, #8]
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f000 f902 	bl	8008900 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>
 80086fc:	4603      	mov	r3, r0
 80086fe:	e000      	b.n	8008702 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8008700:	2300      	movs	r3, #0
  }
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
Reader<remove_reference_t<TInput>> makeReader(TInput&& input) {
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  return Reader<remove_reference_t<TInput>>{detail::forward<TInput>(input)};
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff fc9c 	bl	8008050 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8008718:	4603      	mov	r3, r0
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	f107 030c 	add.w	r3, r7, #12
 8008720:	4611      	mov	r1, r2
 8008722:	4618      	mov	r0, r3
 8008724:	f000 f99e 	bl	8008a64 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>
 8008728:	68fb      	ldr	r3, [r7, #12]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>:
class JsonDeserializer {
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4618      	mov	r0, r3
 800873e:	f7fd fd9e 	bl	800627e <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4618      	mov	r0, r3
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>:
DeserializationError doDeserialize(TDestination&& dst, TReader reader,
 800874c:	b590      	push	{r4, r7, lr}
 800874e:	b0a1      	sub	sp, #132	@ 0x84
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	80ba      	strh	r2, [r7, #4]
  auto data = VariantAttorney::getOrCreateData(dst);
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 f999 	bl	8008a90 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>
 800875e:	67f8      	str	r0, [r7, #124]	@ 0x7c
  if (!data)
 8008760:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008762:	2b00      	cmp	r3, #0
 8008764:	d107      	bne.n	8008776 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x2a>
    return DeserializationError::NoMemory;
 8008766:	f107 0318 	add.w	r3, r7, #24
 800876a:	2104      	movs	r1, #4
 800876c:	4618      	mov	r0, r3
 800876e:	f7fd ff08 	bl	8006582 <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8008772:	7e3b      	ldrb	r3, [r7, #24]
 8008774:	e01f      	b.n	80087b6 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x6a>
  auto resources = VariantAttorney::getResourceManager(dst);
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 f996 	bl	8008aa8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 800877c:	67b8      	str	r0, [r7, #120]	@ 0x78
  dst.clear();
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f7fd fac5 	bl	8005d0e <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>
  auto err = TDeserializer<TReader>(resources, reader)
 8008784:	f107 031c 	add.w	r3, r7, #28
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800878c:	4618      	mov	r0, r3
 800878e:	f000 f997 	bl	8008ac0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>
                 .parse(*data, options.filter, options.nestingLimit);
 8008792:	f107 001c 	add.w	r0, r7, #28
 8008796:	797b      	ldrb	r3, [r7, #5]
 8008798:	4622      	mov	r2, r4
 800879a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800879c:	f000 f9ac 	bl	8008af8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 80087a0:	4603      	mov	r3, r0
 80087a2:	753b      	strb	r3, [r7, #20]
  auto err = TDeserializer<TReader>(resources, reader)
 80087a4:	f107 031c 	add.w	r3, r7, #28
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7ff ffc2 	bl	8008732 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>
  shrinkJsonDocument(dst);
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f7fd ff97 	bl	80066e2 <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>
  return err;
 80087b4:	7d3b      	ldrb	r3, [r7, #20]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3784      	adds	r7, #132	@ 0x84
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd90      	pop	{r4, r7, pc}

080087be <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80087c6:	4618      	mov	r0, r3
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80087d2:	b480      	push	{r7}
 80087d4:	b085      	sub	sp, #20
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	1ad3      	subs	r3, r2, r3
    }
 80087e4:	4618      	mov	r0, r3
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>:
    return data;
  return addMember(key, resources);
}

template <typename TAdaptedString>
inline ObjectData::iterator ObjectData::findKey(
 80087f0:	b082      	sub	sp, #8
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b08e      	sub	sp, #56	@ 0x38
 80087f6:	af02      	add	r7, sp, #8
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	6039      	str	r1, [r7, #0]
 80087fc:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8008800:	e881 000c 	stmia.w	r1, {r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  if (key.isNull())
 8008804:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8008808:	f7fc fd5b 	bl	80052c2 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x2a>
    return iterator();
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7fc fe2a 	bl	800546c <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8008818:	e05a      	b.n	80088d0 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
  bool isKey = true;
 800881a:	2301      	movs	r3, #1
 800881c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8008820:	6839      	ldr	r1, [r7, #0]
 8008822:	f107 030c 	add.w	r3, r7, #12
 8008826:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008828:	4618      	mov	r0, r3
 800882a:	f7fd fb13 	bl	8005e54 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 800882e:	e041      	b.n	80088b4 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xc4>
    if (isKey && stringEquals(key, adaptString(it->asString())))
 8008830:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008834:	2b00      	cmp	r3, #0
 8008836:	d025      	beq.n	8008884 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8008838:	f107 030c 	add.w	r3, r7, #12
 800883c:	4618      	mov	r0, r3
 800883e:	f7fc fe4c 	bl	80054da <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>
 8008842:	4602      	mov	r2, r0
 8008844:	f107 0314 	add.w	r3, r7, #20
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f7fc ff12 	bl	8005674 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8008850:	f107 0320 	add.w	r3, r7, #32
 8008854:	f107 0214 	add.w	r2, r7, #20
 8008858:	4611      	mov	r1, r2
 800885a:	4618      	mov	r0, r3
 800885c:	f000 f985 	bl	8008b6a <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>
 8008860:	466a      	mov	r2, sp
 8008862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008866:	e893 0003 	ldmia.w	r3, {r0, r1}
 800886a:	e882 0003 	stmia.w	r2, {r0, r1}
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8008874:	ca07      	ldmia	r2, {r0, r1, r2}
 8008876:	f7ff fe45 	bl	8008504 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8008880:	2301      	movs	r3, #1
 8008882:	e000      	b.n	8008886 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x96>
 8008884:	2300      	movs	r3, #0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d008      	beq.n	800889c <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xac>
      return it;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	461a      	mov	r2, r3
 800888e:	f107 030c 	add.w	r3, r7, #12
 8008892:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008896:	e882 0003 	stmia.w	r2, {r0, r1}
    isKey = !isKey;
  }
  return iterator();
}
 800889a:	e019      	b.n	80088d0 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
    isKey = !isKey;
 800889c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80088a0:	f083 0301 	eor.w	r3, r3, #1
 80088a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 80088a8:	f107 030c 	add.w	r3, r7, #12
 80088ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fd faad 	bl	8005e0e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 80088b4:	f107 030c 	add.w	r3, r7, #12
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fc fde9 	bl	8005490 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80088be:	4603      	mov	r3, r0
 80088c0:	f083 0301 	eor.w	r3, r3, #1
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1b2      	bne.n	8008830 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x40>
  return iterator();
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7fc fdce 	bl	800546c <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
}
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	3730      	adds	r7, #48	@ 0x30
 80088d4:	46bd      	mov	sp, r7
 80088d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088da:	b002      	add	sp, #8
 80088dc:	4770      	bx	lr

080088de <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 80088de:	b580      	push	{r7, lr}
 80088e0:	b082      	sub	sp, #8
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f954 	bl	8008b94 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 80088ec:	4603      	mov	r3, r0
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 f95b 	bl	8008baa <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 80088f4:	4603      	mov	r3, r0
  }
 80088f6:	4618      	mov	r0, r3
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
	...

08008900 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f7fd fe1d 	bl	800654c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8008912:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	791b      	ldrb	r3, [r3, #4]
 8008918:	3b04      	subs	r3, #4
 800891a:	2b1a      	cmp	r3, #26
 800891c:	d87c      	bhi.n	8008a18 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x118>
 800891e:	a201      	add	r2, pc, #4	@ (adr r2, 8008924 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x24>)
 8008920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008924:	080089d7 	.word	0x080089d7
 8008928:	080089e5 	.word	0x080089e5
 800892c:	08008991 	.word	0x08008991
 8008930:	08008a19 	.word	0x08008a19
 8008934:	08008a19 	.word	0x08008a19
 8008938:	08008a19 	.word	0x08008a19
 800893c:	08008997 	.word	0x08008997
 8008940:	08008a19 	.word	0x08008a19
 8008944:	080089a5 	.word	0x080089a5
 8008948:	08008a19 	.word	0x08008a19
 800894c:	080089f5 	.word	0x080089f5
 8008950:	08008a19 	.word	0x08008a19
 8008954:	08008a19 	.word	0x08008a19
 8008958:	08008a19 	.word	0x08008a19
 800895c:	08008a19 	.word	0x08008a19
 8008960:	08008a19 	.word	0x08008a19
 8008964:	08008a19 	.word	0x08008a19
 8008968:	08008a19 	.word	0x08008a19
 800896c:	08008a19 	.word	0x08008a19
 8008970:	08008a19 	.word	0x08008a19
 8008974:	08008a19 	.word	0x08008a19
 8008978:	08008a19 	.word	0x08008a19
 800897c:	080089b3 	.word	0x080089b3
 8008980:	08008a19 	.word	0x08008a19
 8008984:	080089c5 	.word	0x080089c5
 8008988:	08008a19 	.word	0x08008a19
 800898c:	08008a07 	.word	0x08008a07
        return content_.asBoolean;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	e041      	b.n	8008a1a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4618      	mov	r0, r3
 800899c:	f000 f921 	bl	8008be2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>
 80089a0:	4603      	mov	r3, r0
 80089a2:	e03a      	b.n	8008a1a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 f92b 	bl	8008c04 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>
 80089ae:	4603      	mov	r3, r0
 80089b0:	e033      	b.n	8008a1a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b8:	4610      	mov	r0, r2
 80089ba:	4619      	mov	r1, r3
 80089bc:	f000 f933 	bl	8008c26 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 80089c0:	4603      	mov	r3, r0
 80089c2:	e02a      	b.n	8008a1a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ca:	4610      	mov	r0, r2
 80089cc:	4619      	mov	r1, r3
 80089ce:	f000 f93d 	bl	8008c4c <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 80089d2:	4603      	mov	r3, r0
 80089d4:	e021      	b.n	8008a1a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 f949 	bl	8008c72 <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 80089e0:	4603      	mov	r3, r0
 80089e2:	e01a      	b.n	8008a1a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3308      	adds	r3, #8
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 f941 	bl	8008c72 <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 80089f0:	4603      	mov	r3, r0
 80089f2:	e012      	b.n	8008a1a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	edd3 7a00 	vldr	s15, [r3]
 80089fa:	eeb0 0a67 	vmov.f32	s0, s15
 80089fe:	f000 f94c 	bl	8008c9a <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 8008a02:	4603      	mov	r3, r0
 8008a04:	e009      	b.n	8008a1a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	ed93 7b00 	vldr	d7, [r3]
 8008a0c:	eeb0 0b47 	vmov.f64	d0, d7
 8008a10:	f000 f95b 	bl	8008cca <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 8008a14:	4603      	mov	r3, r0
 8008a16:	e000      	b.n	8008a1a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 8008a18:	2300      	movs	r3, #0
  }
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop

08008a24 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 f964 	bl	8008cfa <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 8008a32:	4603      	mov	r3, r0
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 f96b 	bl	8008d10 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8008a3a:	4603      	mov	r3, r0
  }
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f954 	bl	8008cfa <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 8008a52:	4603      	mov	r3, r0
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 f967 	bl	8008d28 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 8008a5a:	4603      	mov	r3, r0
  }
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>:
template <typename TSource>
struct Reader<TSource*, enable_if_t<IsCharOrVoid<TSource>::value>> {
  const char* ptr_;

 public:
  explicit Reader(const void* ptr)
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
      : ptr_(ptr ? reinterpret_cast<const char*>(ptr) : "") {}
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x14>
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	e000      	b.n	8008a7a <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x16>
 8008a78:	4b04      	ldr	r3, [pc, #16]	@ (8008a8c <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x28>)
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4618      	mov	r0, r3
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	0802a38c 	.word	0x0802a38c

08008a90 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>:

  template <typename TClient>
  static VariantData* getOrCreateData(TClient& client) {
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7fd f960 	bl	8005d5e <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>
 8008a9e:	4603      	mov	r3, r0
  }
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7fd f93d 	bl	8005d30 <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>
 8008ab6:	4603      	mov	r3, r0
  }
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>:
  JsonDeserializer(ResourceManager* resources, TReader reader)
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
      : stringBuilder_(resources),
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	68b9      	ldr	r1, [r7, #8]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fd fbbf 	bl	8006254 <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>
        foundSomething_(false),
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	731a      	strb	r2, [r3, #12]
        latch_(reader),
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3310      	adds	r3, #16
 8008ae0:	6879      	ldr	r1, [r7, #4]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 f92c 	bl	8008d40 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>
        resources_(resources) {}
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	619a      	str	r2, [r3, #24]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError parse(VariantData& variant, TFilter filter,
 8008af8:	b590      	push	{r4, r7, lr}
 8008afa:	b089      	sub	sp, #36	@ 0x24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	713a      	strb	r2, [r7, #4]
 8008b04:	703b      	strb	r3, [r7, #0]
    err = parseVariant(variant, filter, nestingLimit);
 8008b06:	783b      	ldrb	r3, [r7, #0]
 8008b08:	4622      	mov	r2, r4
 8008b0a:	68b9      	ldr	r1, [r7, #8]
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f000 f929 	bl	8008d64 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8008b12:	4603      	mov	r3, r0
 8008b14:	75fb      	strb	r3, [r7, #23]
    if (!err && latch_.last() != 0 && variant.isFloat()) {
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10f      	bne.n	8008b3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	3310      	adds	r3, #16
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 fa0d 	bl	8008f40 <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d007      	beq.n	8008b3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8008b2c:	68b8      	ldr	r0, [r7, #8]
 8008b2e:	f7fc fde8 	bl	8005702 <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e000      	b.n	8008b3e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x46>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d007      	beq.n	8008b52 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x5a>
      return DeserializationError::InvalidInput;
 8008b42:	f107 0318 	add.w	r3, r7, #24
 8008b46:	2103      	movs	r1, #3
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fd fd1a 	bl	8006582 <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8008b4e:	7e3b      	ldrb	r3, [r7, #24]
 8008b50:	e007      	b.n	8008b62 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x6a>
    return err;
 8008b52:	7dfa      	ldrb	r2, [r7, #23]
 8008b54:	f107 031c 	add.w	r3, r7, #28
 8008b58:	4611      	mov	r1, r2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fd fd11 	bl	8006582 <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8008b60:	7f3b      	ldrb	r3, [r7, #28]
  }
 8008b62:	4618      	mov	r0, r3
 8008b64:	3724      	adds	r7, #36	@ 0x24
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd90      	pop	{r4, r7, pc}

08008b6a <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>:
AdaptedString<TString> adaptString(TString&& s) {
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b082      	sub	sp, #8
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8008b74:	6838      	ldr	r0, [r7, #0]
 8008b76:	f000 f9ef 	bl	8008f58 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fc fc6a 	bl	8005456 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8008b82:	4602      	mov	r2, r0
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8008b9c:	687b      	ldr	r3, [r7, #4]
  }
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b082      	sub	sp, #8
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f9db 	bl	8008f6e <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>
 8008bb8:	4603      	mov	r3, r0
  }
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7ff ffe2 	bl	8008b94 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 f9d9 	bl	8008f8a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8008bd8:	4603      	mov	r3, r0
  }
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>:
canConvertNumber(TIn) {
  return true;
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b082      	sub	sp, #8
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f9d9 	bl	8008fa2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x18>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	e000      	b.n	8008bfc <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x1a>
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>:
TOut convertNumber(TIn value) {
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f9d9 	bl	8008fc4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d001      	beq.n	8008c1c <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x18>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	e000      	b.n	8008c1e <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x1a>
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>:
TOut convertNumber(TIn value) {
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008c30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c34:	f000 f9dc 	bl	8008ff0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1c>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	e000      	b.n	8008c44 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1e>
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>:
TOut convertNumber(TIn value) {
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008c56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c5a:	f000 f9e1 	bl	8009020 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1c>
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	e000      	b.n	8008c6a <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1e>
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>:

template <typename T>
inline T parseNumber(const char* s) {
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b086      	sub	sp, #24
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8008c7a:	f107 0308 	add.w	r3, r7, #8
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fd fec7 	bl	8006a14 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8008c86:	f107 0308 	add.w	r3, r7, #8
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 f9e6 	bl	800905c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>
 8008c90:	4603      	mov	r3, r0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>:
TOut convertNumber(TIn value) {
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008ca4:	ed97 0a01 	vldr	s0, [r7, #4]
 8008ca8:	f000 fa1e 	bl	80090e8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d006      	beq.n	8008cc0 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x26>
 8008cb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8008cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cba:	ee17 3a90 	vmov	r3, s15
 8008cbe:	e000      	b.n	8008cc2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x28>
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>:
TOut convertNumber(TIn value) {
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b082      	sub	sp, #8
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8008cd4:	ed97 0b00 	vldr	d0, [r7]
 8008cd8:	f000 fa34 	bl	8009144 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d006      	beq.n	8008cf0 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x26>
 8008ce2:	ed97 7b00 	vldr	d7, [r7]
 8008ce6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008cea:	ee17 3a90 	vmov	r3, s15
 8008cee:	e000      	b.n	8008cf2 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x28>
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8008cfa:	b480      	push	{r7}
 8008cfc:	b083      	sub	sp, #12
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8008d02:	687b      	ldr	r3, [r7, #4]
  }
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
    return client.getData();
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fa39 	bl	8009190 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>
 8008d1e:	4603      	mov	r3, r0
  }
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fa49 	bl	80091c8 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>
 8008d36:	4603      	mov	r3, r0
  }
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TReader>
class Latch {
 public:
  Latch(TReader reader) : reader_(reader), loaded_(false) {
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	601a      	str	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	715a      	strb	r2, [r3, #5]
#if ARDUINOJSON_DEBUG
    ended_ = false;
#endif
  }
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseVariant(
 8008d64:	b5b0      	push	{r4, r5, r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	713a      	strb	r2, [r7, #4]
 8008d70:	703b      	strb	r3, [r7, #0]
    err = skipSpacesAndComments();
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f000 fa36 	bl	80091e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	75fb      	strb	r3, [r7, #23]
    if (err)
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x22>
      return err;
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	e0d2      	b.n	8008f2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
    switch (current()) {
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 fa62 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b7b      	cmp	r3, #123	@ 0x7b
 8008d90:	f300 80ba 	bgt.w	8008f08 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8008d94:	2b5b      	cmp	r3, #91	@ 0x5b
 8008d96:	da04      	bge.n	8008da2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x3e>
 8008d98:	2b22      	cmp	r3, #34	@ 0x22
 8008d9a:	d07b      	beq.n	8008e94 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 8008d9c:	2b27      	cmp	r3, #39	@ 0x27
 8008d9e:	d079      	beq.n	8008e94 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 8008da0:	e0b2      	b.n	8008f08 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8008da2:	3b5b      	subs	r3, #91	@ 0x5b
 8008da4:	2b20      	cmp	r3, #32
 8008da6:	f200 80af 	bhi.w	8008f08 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 8008daa:	a201      	add	r2, pc, #4	@ (adr r2, 8008db0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008e35 	.word	0x08008e35
 8008db4:	08008f09 	.word	0x08008f09
 8008db8:	08008f09 	.word	0x08008f09
 8008dbc:	08008f09 	.word	0x08008f09
 8008dc0:	08008f09 	.word	0x08008f09
 8008dc4:	08008f09 	.word	0x08008f09
 8008dc8:	08008f09 	.word	0x08008f09
 8008dcc:	08008f09 	.word	0x08008f09
 8008dd0:	08008f09 	.word	0x08008f09
 8008dd4:	08008f09 	.word	0x08008f09
 8008dd8:	08008f09 	.word	0x08008f09
 8008ddc:	08008edb 	.word	0x08008edb
 8008de0:	08008f09 	.word	0x08008f09
 8008de4:	08008f09 	.word	0x08008f09
 8008de8:	08008f09 	.word	0x08008f09
 8008dec:	08008f09 	.word	0x08008f09
 8008df0:	08008f09 	.word	0x08008f09
 8008df4:	08008f09 	.word	0x08008f09
 8008df8:	08008f09 	.word	0x08008f09
 8008dfc:	08008efd 	.word	0x08008efd
 8008e00:	08008f09 	.word	0x08008f09
 8008e04:	08008f09 	.word	0x08008f09
 8008e08:	08008f09 	.word	0x08008f09
 8008e0c:	08008f09 	.word	0x08008f09
 8008e10:	08008f09 	.word	0x08008f09
 8008e14:	08008eb9 	.word	0x08008eb9
 8008e18:	08008f09 	.word	0x08008f09
 8008e1c:	08008f09 	.word	0x08008f09
 8008e20:	08008f09 	.word	0x08008f09
 8008e24:	08008f09 	.word	0x08008f09
 8008e28:	08008f09 	.word	0x08008f09
 8008e2c:	08008f09 	.word	0x08008f09
 8008e30:	08008e65 	.word	0x08008e65
        if (filter.allowArray())
 8008e34:	1d3b      	adds	r3, r7, #4
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fd fbdd 	bl	80065f6 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0xf4>
          return parseArray(variant.toArray(), filter, nestingLimit);
 8008e42:	68b8      	ldr	r0, [r7, #8]
 8008e44:	f7fc fcdc 	bl	8005800 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 8008e48:	4601      	mov	r1, r0
 8008e4a:	783b      	ldrb	r3, [r7, #0]
 8008e4c:	462a      	mov	r2, r5
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 fa15 	bl	800927e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>
 8008e54:	4603      	mov	r3, r0
 8008e56:	e069      	b.n	8008f2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipArray(nestingLimit);
 8008e58:	7839      	ldrb	r1, [r7, #0]
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 fa95 	bl	800938a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8008e60:	4603      	mov	r3, r0
 8008e62:	e063      	b.n	8008f2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowObject())
 8008e64:	1d3b      	adds	r3, r7, #4
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fd fbd0 	bl	800660c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00a      	beq.n	8008e88 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
          return parseObject(variant.toObject(), filter, nestingLimit);
 8008e72:	68b8      	ldr	r0, [r7, #8]
 8008e74:	f7fc fcec 	bl	8005850 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 8008e78:	4601      	mov	r1, r0
 8008e7a:	783b      	ldrb	r3, [r7, #0]
 8008e7c:	4622      	mov	r2, r4
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f000 fac6 	bl	8009410 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>
 8008e84:	4603      	mov	r3, r0
 8008e86:	e051      	b.n	8008f2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipObject(nestingLimit);
 8008e88:	7839      	ldrb	r1, [r7, #0]
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f000 fbac 	bl	80095e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8008e90:	4603      	mov	r3, r0
 8008e92:	e04b      	b.n	8008f2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8008e94:	1d3b      	adds	r3, r7, #4
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fd fbc3 	bl	8006622 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d005      	beq.n	8008eae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x14a>
          return parseStringValue(variant);
 8008ea2:	68b9      	ldr	r1, [r7, #8]
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 fc1f 	bl	80096e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	e03e      	b.n	8008f2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipQuotedString();
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 fc3b 	bl	800972a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	e039      	b.n	8008f2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8008eb8:	1d3b      	adds	r3, r7, #4
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fd fbb1 	bl	8006622 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x16a>
          variant.setBoolean(true);
 8008ec6:	2101      	movs	r1, #1
 8008ec8:	68b8      	ldr	r0, [r7, #8]
 8008eca:	f7fc fc47 	bl	800575c <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("true");
 8008ece:	4919      	ldr	r1, [pc, #100]	@ (8008f34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>)
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 fc5f 	bl	8009794 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	e028      	b.n	8008f2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8008eda:	1d3b      	adds	r3, r7, #4
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fd fba0 	bl	8006622 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d003      	beq.n	8008ef0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
          variant.setBoolean(false);
 8008ee8:	2100      	movs	r1, #0
 8008eea:	68b8      	ldr	r0, [r7, #8]
 8008eec:	f7fc fc36 	bl	800575c <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("false");
 8008ef0:	4911      	ldr	r1, [pc, #68]	@ (8008f38 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d4>)
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f000 fc4e 	bl	8009794 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	e017      	b.n	8008f2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        return skipKeyword("null");
 8008efc:	490f      	ldr	r1, [pc, #60]	@ (8008f3c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d8>)
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f000 fc48 	bl	8009794 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8008f04:	4603      	mov	r3, r0
 8008f06:	e011      	b.n	8008f2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8008f08:	1d3b      	adds	r3, r7, #4
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fd fb89 	bl	8006622 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d005      	beq.n	8008f22 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
          return parseNumericValue(variant);
 8008f16:	68b9      	ldr	r1, [r7, #8]
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f000 fc61 	bl	80097e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	e004      	b.n	8008f2c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipNumericValue();
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f000 fd04 	bl	8009930 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	bf00      	nop
  }
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bdb0      	pop	{r4, r5, r7, pc}
 8008f34:	0802a600 	.word	0x0802a600
 8008f38:	0802a608 	.word	0x0802a608
 8008f3c:	0802a610 	.word	0x0802a610

08008f40 <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>:

  void clear() {
    loaded_ = false;
  }

  int last() const {
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
    return current_;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	791b      	ldrb	r3, [r3, #4]
  }
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8008f60:	687b      	ldr	r3, [r7, #4]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>:
  // clang-format off
  MemberProxy(const MemberProxy& src) // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
      : upstream_(src.upstream_), key_(src.key_) {}
  // clang-format on

  ResourceManager* getResourceManager() const {
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	3304      	adds	r3, #4
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 fcf6 	bl	800996c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 8008f80:	4603      	mov	r3, r0
  }
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
    return client.getData();
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fd04 	bl	80099a0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>
 8008f98:	4603      	mov	r3, r0
  }
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b082      	sub	sp, #8
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8008faa:	f000 f8c2 	bl	8009132 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	bf94      	ite	ls
 8008fb6:	2301      	movls	r3, #1
 8008fb8:	2300      	movhi	r3, #0
 8008fba:	b2db      	uxtb	r3, r3
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	da01      	bge.n	8008fd6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x12>
    return false;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	e008      	b.n	8008fe8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x24>
  return TOut(value) <= numeric_limits<TOut>::highest();
 8008fd6:	f000 f8ac 	bl	8009132 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	bf2c      	ite	cs
 8008fe2:	2301      	movcs	r3, #1
 8008fe4:	2300      	movcc	r3, #0
 8008fe6:	b2db      	uxtb	r3, r3
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8008ff0:	b5b0      	push	{r4, r5, r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8008ffa:	f000 f89a 	bl	8009132 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2200      	movs	r2, #0
 8009002:	461c      	mov	r4, r3
 8009004:	4615      	mov	r5, r2
 8009006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800900a:	4294      	cmp	r4, r2
 800900c:	eb75 0303 	sbcs.w	r3, r5, r3
 8009010:	bf2c      	ite	cs
 8009012:	2301      	movcs	r3, #1
 8009014:	2300      	movcc	r3, #0
 8009016:	b2db      	uxtb	r3, r3
}
 8009018:	4618      	mov	r0, r3
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bdb0      	pop	{r4, r5, r7, pc}

08009020 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8009020:	b5b0      	push	{r4, r5, r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 800902a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800902e:	2b00      	cmp	r3, #0
 8009030:	da01      	bge.n	8009036 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8009032:	2300      	movs	r3, #0
 8009034:	e00e      	b.n	8009054 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x34>
  return value <= TIn(numeric_limits<TOut>::highest());
 8009036:	f000 f87c 	bl	8009132 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 800903a:	4603      	mov	r3, r0
 800903c:	2200      	movs	r2, #0
 800903e:	461c      	mov	r4, r3
 8009040:	4615      	mov	r5, r2
 8009042:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009046:	4294      	cmp	r4, r2
 8009048:	eb75 0303 	sbcs.w	r3, r5, r3
 800904c:	bfac      	ite	ge
 800904e:	2301      	movge	r3, #1
 8009050:	2300      	movlt	r3, #0
 8009052:	b2db      	uxtb	r3, r3
}
 8009054:	4618      	mov	r0, r3
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bdb0      	pop	{r4, r5, r7, pc}

0800905c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>:
  T convertTo() const {
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	3b01      	subs	r3, #1
 800906a:	2b03      	cmp	r3, #3
 800906c:	d82e      	bhi.n	80090cc <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x70>
 800906e:	a201      	add	r2, pc, #4	@ (adr r2, 8009074 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x18>)
 8009070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009074:	08009085 	.word	0x08009085
 8009078:	08009097 	.word	0x08009097
 800907c:	080090a9 	.word	0x080090a9
 8009080:	080090bb 	.word	0x080090bb
        return convertNumber<T>(value_.asFloat);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	edd3 7a02 	vldr	s15, [r3, #8]
 800908a:	eeb0 0a67 	vmov.f32	s0, s15
 800908e:	f7ff fe04 	bl	8008c9a <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 8009092:	4603      	mov	r3, r0
 8009094:	e01b      	b.n	80090ce <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800909c:	4610      	mov	r0, r2
 800909e:	4619      	mov	r1, r3
 80090a0:	f7ff fdd4 	bl	8008c4c <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 80090a4:	4603      	mov	r3, r0
 80090a6:	e012      	b.n	80090ce <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80090ae:	4610      	mov	r0, r2
 80090b0:	4619      	mov	r1, r3
 80090b2:	f7ff fdb8 	bl	8008c26 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 80090b6:	4603      	mov	r3, r0
 80090b8:	e009      	b.n	80090ce <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	ed93 7b02 	vldr	d7, [r3, #8]
 80090c0:	eeb0 0b47 	vmov.f64	d0, d7
 80090c4:	f7ff fe01 	bl	8008cca <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 80090c8:	4603      	mov	r3, r0
 80090ca:	e000      	b.n	80090ce <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return T();
 80090cc:	2300      	movs	r3, #0
  }
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop

080090d8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, enable_if_t<is_unsigned<T>::value>> {
  static constexpr T lowest() {
 80090d8:	b480      	push	{r7}
 80090da:	af00      	add	r7, sp, #0
    return 0;
 80090dc:	2300      	movs	r3, #0
  }
 80090de:	4618      	mov	r0, r3
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 80090f2:	f7ff fff1 	bl	80090d8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 80090f6:	ee07 0a90 	vmov	s15, r0
 80090fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8009102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800910a:	db0d      	blt.n	8009128 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 800910c:	2000      	movs	r0, #0
 800910e:	f000 fc63 	bl	80099d8 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>
 8009112:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 8009116:	edd7 7a01 	vldr	s15, [r7, #4]
 800911a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800911e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009122:	d801      	bhi.n	8009128 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 8009124:	2301      	movs	r3, #1
 8009126:	e000      	b.n	800912a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>:
  static constexpr T highest() {
 8009132:	b480      	push	{r7}
 8009134:	af00      	add	r7, sp, #0
    return T(-1);
 8009136:	f04f 33ff 	mov.w	r3, #4294967295
  }
 800913a:	4618      	mov	r0, r3
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800914e:	f7ff ffc3 	bl	80090d8 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 8009152:	ee07 0a90 	vmov	s15, r0
 8009156:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800915a:	ed97 6b00 	vldr	d6, [r7]
 800915e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009166:	db0e      	blt.n	8009186 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 8009168:	f7ff ffe3 	bl	8009132 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 800916c:	ee07 0a90 	vmov	s15, r0
 8009170:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8009174:	ed97 6b00 	vldr	d6, [r7]
 8009178:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800917c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009180:	d801      	bhi.n	8009186 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 8009182:	2301      	movs	r3, #1
 8009184:	e000      	b.n	8009188 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>:

  VariantData* getData() const {
 8009190:	b590      	push	{r4, r7, lr}
 8009192:	b085      	sub	sp, #20
 8009194:	af02      	add	r7, sp, #8
 8009196:	6078      	str	r0, [r7, #4]
    return VariantData::getMember(
        VariantAttorney::getData(upstream_), key_,
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4618      	mov	r0, r3
 800919e:	f000 fc2b 	bl	80099f8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>
 80091a2:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7ff fc7d 	bl	8008aa8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 80091ae:	4602      	mov	r2, r0
    return VariantData::getMember(
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	9200      	str	r2, [sp, #0]
 80091b4:	3304      	adds	r3, #4
 80091b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80091b8:	4620      	mov	r0, r4
 80091ba:	f000 fc29 	bl	8009a10 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 80091be:	4603      	mov	r3, r0
  }
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd90      	pop	{r4, r7, pc}

080091c8 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7ff fc67 	bl	8008aa8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 80091da:	4603      	mov	r3, r0
  }
 80091dc:	4618      	mov	r0, r3
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>:
  DeserializationError::Code skipSpacesAndComments() {
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
      switch (current()) {
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f82f 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d013      	beq.n	8009220 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x3c>
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	db1d      	blt.n	8009238 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 80091fc:	2b20      	cmp	r3, #32
 80091fe:	dc1b      	bgt.n	8009238 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8009200:	2b09      	cmp	r3, #9
 8009202:	db19      	blt.n	8009238 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8009204:	3b09      	subs	r3, #9
 8009206:	4a11      	ldr	r2, [pc, #68]	@ (800924c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x68>)
 8009208:	fa22 f303 	lsr.w	r3, r2, r3
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	2b00      	cmp	r3, #0
 8009212:	bf14      	ite	ne
 8009214:	2301      	movne	r3, #1
 8009216:	2300      	moveq	r3, #0
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b00      	cmp	r3, #0
 800921c:	d108      	bne.n	8009230 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x4c>
 800921e:	e00b      	b.n	8009238 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
          return foundSomething_ ? DeserializationError::IncompleteInput
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	7b1b      	ldrb	r3, [r3, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d001      	beq.n	800922c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x48>
 8009228:	2302      	movs	r3, #2
                                 : DeserializationError::EmptyInput;
 800922a:	e00b      	b.n	8009244 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          return foundSomething_ ? DeserializationError::IncompleteInput
 800922c:	2301      	movs	r3, #1
                                 : DeserializationError::EmptyInput;
 800922e:	e009      	b.n	8009244 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          move();
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fc06 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          continue;
 8009236:	e004      	b.n	8009242 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x5e>
          foundSomething_ = true;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	731a      	strb	r2, [r3, #12]
          return DeserializationError::Ok;
 800923e:	2300      	movs	r3, #0
 8009240:	e000      	b.n	8009244 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
      switch (current()) {
 8009242:	e7d3      	b.n	80091ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x8>
  }
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	00800013 	.word	0x00800013

08009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>:
  char current() {
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
    return latch_.current();
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3310      	adds	r3, #16
 800925c:	60fb      	str	r3, [r7, #12]

  FORCE_INLINE char current() {
    if (!loaded_) {
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	795b      	ldrb	r3, [r3, #5]
 8009262:	f083 0301 	eor.w	r3, r3, #1
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv+0x22>
      load();
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 ff1a 	bl	800a0a6 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>
    }
    return current_;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	791b      	ldrb	r3, [r3, #4]
  }
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseArray(
 800927e:	b590      	push	{r4, r7, lr}
 8009280:	b089      	sub	sp, #36	@ 0x24
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	713a      	strb	r2, [r7, #4]
 800928a:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 800928c:	463b      	mov	r3, r7
 800928e:	4618      	mov	r0, r3
 8009290:	f7fd fa03 	bl	800669a <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 800929a:	2305      	movs	r3, #5
 800929c:	e071      	b.n	8009382 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    move();
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f000 fbcf 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f7ff ff9d 	bl	80091e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80092aa:	4603      	mov	r3, r0
 80092ac:	77fb      	strb	r3, [r7, #31]
    if (err)
 80092ae:	7ffb      	ldrb	r3, [r7, #31]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x3a>
      return err;
 80092b4:	7ffb      	ldrb	r3, [r7, #31]
 80092b6:	e064      	b.n	8009382 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    if (eat(']'))
 80092b8:	215d      	movs	r1, #93	@ 0x5d
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f000 fbce 	bl	8009a5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
      return DeserializationError::Ok;
 80092c6:	2300      	movs	r3, #0
 80092c8:	e05b      	b.n	8009382 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    TFilter elementFilter = filter[0UL];
 80092ca:	2300      	movs	r3, #0
 80092cc:	617b      	str	r3, [r7, #20]
 80092ce:	f107 0214 	add.w	r2, r7, #20
 80092d2:	1d3b      	adds	r3, r7, #4
 80092d4:	4611      	mov	r1, r2
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 fbdd 	bl	8009a96 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>
      if (elementFilter.allow()) {
 80092dc:	f107 0310 	add.w	r3, r7, #16
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fd f97d 	bl	80065e0 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d01c      	beq.n	8009326 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xa8>
        VariantData* value = array.addElement(resources_);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	4619      	mov	r1, r3
 80092f2:	68b8      	ldr	r0, [r7, #8]
 80092f4:	f7fc fd3f 	bl	8005d76 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 80092f8:	61b8      	str	r0, [r7, #24]
        if (!value)
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
          return DeserializationError::NoMemory;
 8009300:	2304      	movs	r3, #4
 8009302:	e03e      	b.n	8009382 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = parseVariant(*value, elementFilter, nestingLimit.decrement());
 8009304:	463b      	mov	r3, r7
 8009306:	4618      	mov	r0, r3
 8009308:	f7fd f9b4 	bl	8006674 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800930c:	4603      	mov	r3, r0
 800930e:	4622      	mov	r2, r4
 8009310:	69b9      	ldr	r1, [r7, #24]
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f7ff fd26 	bl	8008d64 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8009318:	4603      	mov	r3, r0
 800931a:	77fb      	strb	r3, [r7, #31]
        if (err)
 800931c:	7ffb      	ldrb	r3, [r7, #31]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d011      	beq.n	8009346 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 8009322:	7ffb      	ldrb	r3, [r7, #31]
 8009324:	e02d      	b.n	8009382 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = skipVariant(nestingLimit.decrement());
 8009326:	463b      	mov	r3, r7
 8009328:	4618      	mov	r0, r3
 800932a:	f7fd f9a3 	bl	8006674 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800932e:	4603      	mov	r3, r0
 8009330:	4619      	mov	r1, r3
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f000 fbbc 	bl	8009ab0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8009338:	4603      	mov	r3, r0
 800933a:	77fb      	strb	r3, [r7, #31]
        if (err)
 800933c:	7ffb      	ldrb	r3, [r7, #31]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 8009342:	7ffb      	ldrb	r3, [r7, #31]
 8009344:	e01d      	b.n	8009382 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      err = skipSpacesAndComments();
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f7ff ff4c 	bl	80091e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800934c:	4603      	mov	r3, r0
 800934e:	77fb      	strb	r3, [r7, #31]
      if (err)
 8009350:	7ffb      	ldrb	r3, [r7, #31]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xdc>
        return err;
 8009356:	7ffb      	ldrb	r3, [r7, #31]
 8009358:	e013      	b.n	8009382 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (eat(']'))
 800935a:	215d      	movs	r1, #93	@ 0x5d
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 fb7d 	bl	8009a5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xee>
        return DeserializationError::Ok;
 8009368:	2300      	movs	r3, #0
 800936a:	e00a      	b.n	8009382 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (!eat(','))
 800936c:	212c      	movs	r1, #44	@ 0x2c
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 fb74 	bl	8009a5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009374:	4603      	mov	r3, r0
 8009376:	f083 0301 	eor.w	r3, r3, #1
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0ad      	beq.n	80092dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x5e>
        return DeserializationError::InvalidInput;
 8009380:	2303      	movs	r3, #3
  }
 8009382:	4618      	mov	r0, r3
 8009384:	3724      	adds	r7, #36	@ 0x24
 8009386:	46bd      	mov	sp, r7
 8009388:	bd90      	pop	{r4, r7, pc}

0800938a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipArray(
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 8009394:	463b      	mov	r3, r7
 8009396:	4618      	mov	r0, r3
 8009398:	f7fd f97f 	bl	800669a <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 80093a2:	2305      	movs	r3, #5
 80093a4:	e030      	b.n	8009408 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
    move();
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fb4b 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      err = skipVariant(nestingLimit.decrement());
 80093ac:	463b      	mov	r3, r7
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fd f960 	bl	8006674 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 80093b4:	4603      	mov	r3, r0
 80093b6:	4619      	mov	r1, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fb79 	bl	8009ab0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 80093be:	4603      	mov	r3, r0
 80093c0:	73fb      	strb	r3, [r7, #15]
      if (err)
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x42>
        return err;
 80093c8:	7bfb      	ldrb	r3, [r7, #15]
 80093ca:	e01d      	b.n	8009408 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      err = skipSpacesAndComments();
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7ff ff09 	bl	80091e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80093d2:	4603      	mov	r3, r0
 80093d4:	73fb      	strb	r3, [r7, #15]
      if (err)
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x56>
        return err;
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
 80093de:	e013      	b.n	8009408 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (eat(']'))
 80093e0:	215d      	movs	r1, #93	@ 0x5d
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fb3a 	bl	8009a5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x68>
        return DeserializationError::Ok;
 80093ee:	2300      	movs	r3, #0
 80093f0:	e00a      	b.n	8009408 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (!eat(','))
 80093f2:	212c      	movs	r1, #44	@ 0x2c
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fb31 	bl	8009a5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80093fa:	4603      	mov	r3, r0
 80093fc:	f083 0301 	eor.w	r3, r3, #1
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b00      	cmp	r3, #0
 8009404:	d0d2      	beq.n	80093ac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x22>
        return DeserializationError::InvalidInput;
 8009406:	2303      	movs	r3, #3
  }
 8009408:	4618      	mov	r0, r3
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseObject(
 8009410:	b590      	push	{r4, r7, lr}
 8009412:	b091      	sub	sp, #68	@ 0x44
 8009414:	af02      	add	r7, sp, #8
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	713a      	strb	r2, [r7, #4]
 800941c:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 800941e:	463b      	mov	r3, r7
 8009420:	4618      	mov	r0, r3
 8009422:	f7fd f93a 	bl	800669a <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d001      	beq.n	8009430 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 800942c:	2305      	movs	r3, #5
 800942e:	e0d7      	b.n	80095e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    move();
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 fb06 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f7ff fed4 	bl	80091e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800943c:	4603      	mov	r3, r0
 800943e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (err)
 8009442:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009446:	2b00      	cmp	r3, #0
 8009448:	d002      	beq.n	8009450 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x40>
      return err;
 800944a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800944e:	e0c7      	b.n	80095e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    if (eat('}'))
 8009450:	217d      	movs	r1, #125	@ 0x7d
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f000 fb02 	bl	8009a5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
      return DeserializationError::Ok;
 800945e:	2300      	movs	r3, #0
 8009460:	e0be      	b.n	80095e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = parseKey();
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 fbba 	bl	8009bdc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>
 8009468:	4603      	mov	r3, r0
 800946a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 800946e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009472:	2b00      	cmp	r3, #0
 8009474:	d002      	beq.n	800947c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x6c>
        return err;
 8009476:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800947a:	e0b1      	b.n	80095e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f7ff feb1 	bl	80091e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009482:	4603      	mov	r3, r0
 8009484:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8009488:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800948c:	2b00      	cmp	r3, #0
 800948e:	d002      	beq.n	8009496 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
        return err;
 8009490:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009494:	e0a4      	b.n	80095e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(':'))
 8009496:	213a      	movs	r1, #58	@ 0x3a
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 fadf 	bl	8009a5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800949e:	4603      	mov	r3, r0
 80094a0:	f083 0301 	eor.w	r3, r3, #1
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x9e>
        return DeserializationError::InvalidInput;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e098      	b.n	80095e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      JsonString key = stringBuilder_.str();
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	f107 0314 	add.w	r3, r7, #20
 80094b4:	4611      	mov	r1, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fc ff92 	bl	80063e0 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>
      TFilter memberFilter = filter[key];
 80094bc:	f107 0214 	add.w	r2, r7, #20
 80094c0:	1d3b      	adds	r3, r7, #4
 80094c2:	4611      	mov	r1, r2
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 fba9 	bl	8009c1c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>
      if (memberFilter.allow()) {
 80094ca:	f107 0310 	add.w	r3, r7, #16
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fd f886 	bl	80065e0 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d040      	beq.n	800955c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x14c>
        auto member = object.getMember(adaptString(key), resources_);
 80094da:	f107 0320 	add.w	r3, r7, #32
 80094de:	f107 0214 	add.w	r2, r7, #20
 80094e2:	4611      	mov	r1, r2
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fe f9c0 	bl	800786a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	f107 0320 	add.w	r3, r7, #32
 80094f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094f6:	68b8      	ldr	r0, [r7, #8]
 80094f8:	f7fe ff21 	bl	800833e <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 80094fc:	6378      	str	r0, [r7, #52]	@ 0x34
        if (!member) {
 80094fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009500:	2b00      	cmp	r3, #0
 8009502:	d111      	bne.n	8009528 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x118>
          auto savedKey = stringBuilder_.save();
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4618      	mov	r0, r3
 8009508:	f7fc fee6 	bl	80062d8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 800950c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          member = object.addMember(savedKey, resources_);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	461a      	mov	r2, r3
 8009514:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009516:	68b8      	ldr	r0, [r7, #8]
 8009518:	f000 fb8c 	bl	8009c34 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800951c:	6378      	str	r0, [r7, #52]	@ 0x34
          if (!member)
 800951e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009520:	2b00      	cmp	r3, #0
 8009522:	d107      	bne.n	8009534 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
            return DeserializationError::NoMemory;
 8009524:	2304      	movs	r3, #4
 8009526:	e05b      	b.n	80095e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
          member->clear(resources_);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	4619      	mov	r1, r3
 800952e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009530:	f7fc ffd6 	bl	80064e0 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
        err = parseVariant(*member, memberFilter, nestingLimit.decrement());
 8009534:	463b      	mov	r3, r7
 8009536:	4618      	mov	r0, r3
 8009538:	f7fd f89c 	bl	8006674 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800953c:	4603      	mov	r3, r0
 800953e:	4622      	mov	r2, r4
 8009540:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f7ff fc0e 	bl	8008d64 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8009548:	4603      	mov	r3, r0
 800954a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 800954e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009552:	2b00      	cmp	r3, #0
 8009554:	d015      	beq.n	8009582 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 8009556:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800955a:	e041      	b.n	80095e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
        err = skipVariant(nestingLimit.decrement());
 800955c:	463b      	mov	r3, r7
 800955e:	4618      	mov	r0, r3
 8009560:	f7fd f888 	bl	8006674 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8009564:	4603      	mov	r3, r0
 8009566:	4619      	mov	r1, r3
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f000 faa1 	bl	8009ab0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800956e:	4603      	mov	r3, r0
 8009570:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 8009574:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 800957c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009580:	e02e      	b.n	80095e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f7ff fe2e 	bl	80091e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009588:	4603      	mov	r3, r0
 800958a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 800958e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009592:	2b00      	cmp	r3, #0
 8009594:	d002      	beq.n	800959c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
        return err;
 8009596:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800959a:	e021      	b.n	80095e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (eat('}'))
 800959c:	217d      	movs	r1, #125	@ 0x7d
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 fa5c 	bl	8009a5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x19e>
        return DeserializationError::Ok;
 80095aa:	2300      	movs	r3, #0
 80095ac:	e018      	b.n	80095e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(','))
 80095ae:	212c      	movs	r1, #44	@ 0x2c
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 fa53 	bl	8009a5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80095b6:	4603      	mov	r3, r0
 80095b8:	f083 0301 	eor.w	r3, r3, #1
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1b6>
        return DeserializationError::InvalidInput;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e00c      	b.n	80095e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f7ff fe0c 	bl	80091e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80095cc:	4603      	mov	r3, r0
 80095ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80095d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f43f af43 	beq.w	8009462 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
        return err;
 80095dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
  }
 80095e0:	4618      	mov	r0, r3
 80095e2:	373c      	adds	r7, #60	@ 0x3c
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd90      	pop	{r4, r7, pc}

080095e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipObject(
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 80095f2:	463b      	mov	r3, r7
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fd f850 	bl	800669a <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 8009600:	2305      	movs	r3, #5
 8009602:	e06d      	b.n	80096e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    move();
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fa1c 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7ff fdea 	bl	80091e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009610:	4603      	mov	r3, r0
 8009612:	73fb      	strb	r3, [r7, #15]
    if (err)
 8009614:	7bfb      	ldrb	r3, [r7, #15]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x36>
      return err;
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	e060      	b.n	80096e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    if (eat('}'))
 800961e:	217d      	movs	r1, #125	@ 0x7d
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fa1b 	bl	8009a5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
      return DeserializationError::Ok;
 800962c:	2300      	movs	r3, #0
 800962e:	e057      	b.n	80096e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipKey();
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fb54 	bl	8009cde <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>
 8009636:	4603      	mov	r3, r0
 8009638:	73fb      	strb	r3, [r7, #15]
      if (err)
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x5c>
        return err;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
 8009642:	e04d      	b.n	80096e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff fdcd 	bl	80091e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800964a:	4603      	mov	r3, r0
 800964c:	73fb      	strb	r3, [r7, #15]
      if (err)
 800964e:	7bfb      	ldrb	r3, [r7, #15]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x70>
        return err;
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	e043      	b.n	80096e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(':'))
 8009658:	213a      	movs	r1, #58	@ 0x3a
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f9fe 	bl	8009a5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8009660:	4603      	mov	r3, r0
 8009662:	f083 0301 	eor.w	r3, r3, #1
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x88>
        return DeserializationError::InvalidInput;
 800966c:	2303      	movs	r3, #3
 800966e:	e037      	b.n	80096e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipVariant(nestingLimit.decrement());
 8009670:	463b      	mov	r3, r7
 8009672:	4618      	mov	r0, r3
 8009674:	f7fc fffe 	bl	8006674 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8009678:	4603      	mov	r3, r0
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fa17 	bl	8009ab0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8009682:	4603      	mov	r3, r0
 8009684:	73fb      	strb	r3, [r7, #15]
      if (err)
 8009686:	7bfb      	ldrb	r3, [r7, #15]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xa8>
        return err;
 800968c:	7bfb      	ldrb	r3, [r7, #15]
 800968e:	e027      	b.n	80096e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7ff fda7 	bl	80091e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009696:	4603      	mov	r3, r0
 8009698:	73fb      	strb	r3, [r7, #15]
      if (err)
 800969a:	7bfb      	ldrb	r3, [r7, #15]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d001      	beq.n	80096a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xbc>
        return err;
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	e01d      	b.n	80096e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (eat('}'))
 80096a4:	217d      	movs	r1, #125	@ 0x7d
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f9d8 	bl	8009a5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xce>
        return DeserializationError::Ok;
 80096b2:	2300      	movs	r3, #0
 80096b4:	e014      	b.n	80096e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(','))
 80096b6:	212c      	movs	r1, #44	@ 0x2c
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f9cf 	bl	8009a5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80096be:	4603      	mov	r3, r0
 80096c0:	f083 0301 	eor.w	r3, r3, #1
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xe6>
        return DeserializationError::InvalidInput;
 80096ca:	2303      	movs	r3, #3
 80096cc:	e008      	b.n	80096e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7ff fd88 	bl	80091e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80096d4:	4603      	mov	r3, r0
 80096d6:	73fb      	strb	r3, [r7, #15]
      if (err)
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0a8      	beq.n	8009630 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
        return err;
 80096de:	7bfb      	ldrb	r3, [r7, #15]
  }
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>:
  DeserializationError::Code parseStringValue(VariantData& variant) {
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
    stringBuilder_.startString();
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fc fdd7 	bl	80062a8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    err = parseQuotedString();
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fb0b 	bl	8009d16 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]
    if (err)
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d001      	beq.n	800970e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x26>
      return err;
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	e009      	b.n	8009722 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x3a>
    variant.setOwnedString(stringBuilder_.save());
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4618      	mov	r0, r3
 8009712:	f7fc fde1 	bl	80062d8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 8009716:	4603      	mov	r3, r0
 8009718:	4619      	mov	r1, r3
 800971a:	6838      	ldr	r0, [r7, #0]
 800971c:	f7fc f83f 	bl	800579e <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return DeserializationError::Ok;
 8009720:	2300      	movs	r3, #0
  }
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>:
  DeserializationError::Code skipQuotedString() {
 800972a:	b580      	push	{r7, lr}
 800972c:	b084      	sub	sp, #16
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
    const char stopChar = current();
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f7ff fd8c 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009738:	4603      	mov	r3, r0
 800973a:	73fb      	strb	r3, [r7, #15]
    move();
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 f980 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7ff fd84 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009748:	4603      	mov	r3, r0
 800974a:	73bb      	strb	r3, [r7, #14]
      move();
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f978 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8009752:	7bba      	ldrb	r2, [r7, #14]
 8009754:	7bfb      	ldrb	r3, [r7, #15]
 8009756:	429a      	cmp	r2, r3
 8009758:	d016      	beq.n	8009788 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x5e>
      if (c == '\0')
 800975a:	7bbb      	ldrb	r3, [r7, #14]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d101      	bne.n	8009764 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x3a>
        return DeserializationError::IncompleteInput;
 8009760:	2302      	movs	r3, #2
 8009762:	e013      	b.n	800978c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x62>
      if (c == '\\') {
 8009764:	7bbb      	ldrb	r3, [r7, #14]
 8009766:	2b5c      	cmp	r3, #92	@ 0x5c
 8009768:	d1eb      	bne.n	8009742 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        if (current() != '\0')
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7ff fd70 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	bf14      	ite	ne
 8009776:	2301      	movne	r3, #1
 8009778:	2300      	moveq	r3, #0
 800977a:	b2db      	uxtb	r3, r3
 800977c:	2b00      	cmp	r3, #0
 800977e:	d0e0      	beq.n	8009742 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
          move();
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 f95e 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (;;) {
 8009786:	e7dc      	b.n	8009742 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        break;
 8009788:	bf00      	nop
    return DeserializationError::Ok;
 800978a:	2300      	movs	r3, #0
  }
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>:
  DeserializationError::Code skipKeyword(const char* s) {
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
    while (*s) {
 800979e:	e016      	b.n	80097ce <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x3a>
      char c = current();
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7ff fd55 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80097a6:	4603      	mov	r3, r0
 80097a8:	73fb      	strb	r3, [r7, #15]
      if (c == '\0')
 80097aa:	7bfb      	ldrb	r3, [r7, #15]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x20>
        return DeserializationError::IncompleteInput;
 80097b0:	2302      	movs	r3, #2
 80097b2:	e011      	b.n	80097d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      if (*s != c)
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	7bfa      	ldrb	r2, [r7, #15]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d001      	beq.n	80097c2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x2e>
        return DeserializationError::InvalidInput;
 80097be:	2303      	movs	r3, #3
 80097c0:	e00a      	b.n	80097d8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      ++s;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	3301      	adds	r3, #1
 80097c6:	603b      	str	r3, [r7, #0]
      move();
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f93a 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    while (*s) {
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1e4      	bne.n	80097a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0xc>
    return DeserializationError::Ok;
 80097d6:	2300      	movs	r3, #0
  }
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>:
  DeserializationError::Code parseNumericValue(VariantData& result) {
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b08a      	sub	sp, #40	@ 0x28
 80097e4:	af02      	add	r7, sp, #8
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	77fb      	strb	r3, [r7, #31]
    char c = current();
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7ff fd2e 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80097f4:	4603      	mov	r3, r0
 80097f6:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 80097f8:	e00f      	b.n	800981a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x3a>
      move();
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f921 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      buffer_[n++] = c;
 8009800:	7fba      	ldrb	r2, [r7, #30]
 8009802:	7ffb      	ldrb	r3, [r7, #31]
 8009804:	1c59      	adds	r1, r3, #1
 8009806:	77f9      	strb	r1, [r7, #31]
 8009808:	4619      	mov	r1, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	440b      	add	r3, r1
 800980e:	771a      	strb	r2, [r3, #28]
      c = current();
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f7ff fd1d 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009816:	4603      	mov	r3, r0
 8009818:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 800981a:	7fbb      	ldrb	r3, [r7, #30]
 800981c:	4618      	mov	r0, r3
 800981e:	f000 fafb 	bl	8009e18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d004      	beq.n	8009832 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 8009828:	7ffb      	ldrb	r3, [r7, #31]
 800982a:	2b3e      	cmp	r3, #62	@ 0x3e
 800982c:	d801      	bhi.n	8009832 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 800982e:	2301      	movs	r3, #1
 8009830:	e000      	b.n	8009834 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x54>
 8009832:	2300      	movs	r3, #0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1e0      	bne.n	80097fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x1a>
    buffer_[n] = 0;
 8009838:	7ffb      	ldrb	r3, [r7, #31]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	4413      	add	r3, r2
 800983e:	2200      	movs	r2, #0
 8009840:	771a      	strb	r2, [r3, #28]
    auto number = parseNumber(buffer_);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f103 021c 	add.w	r2, r3, #28
 8009848:	f107 0308 	add.w	r3, r7, #8
 800984c:	4611      	mov	r1, r2
 800984e:	4618      	mov	r0, r3
 8009850:	f7fd f8e0 	bl	8006a14 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
    switch (number.type()) {
 8009854:	f107 0308 	add.w	r3, r7, #8
 8009858:	4618      	mov	r0, r3
 800985a:	f7fd f894 	bl	8006986 <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>
 800985e:	4603      	mov	r3, r0
 8009860:	3b01      	subs	r3, #1
 8009862:	2b03      	cmp	r3, #3
 8009864:	d85e      	bhi.n	8009924 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x144>
 8009866:	a201      	add	r2, pc, #4	@ (adr r2, 800986c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x8c>)
 8009868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986c:	080098cd 	.word	0x080098cd
 8009870:	080098a5 	.word	0x080098a5
 8009874:	0800987d 	.word	0x0800987d
 8009878:	080098f9 	.word	0x080098f9
        if (result.setInteger(number.asUnsignedInteger(), resources_))
 800987c:	f107 0308 	add.w	r3, r7, #8
 8009880:	4618      	mov	r0, r3
 8009882:	f7fd f89a 	bl	80069ba <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	6879      	ldr	r1, [r7, #4]
 800988c:	6989      	ldr	r1, [r1, #24]
 800988e:	9100      	str	r1, [sp, #0]
 8009890:	6838      	ldr	r0, [r7, #0]
 8009892:	f000 fae5 	bl	8009e60 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xc0>
          return DeserializationError::Ok;
 800989c:	2300      	movs	r3, #0
 800989e:	e042      	b.n	8009926 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 80098a0:	2304      	movs	r3, #4
 80098a2:	e040      	b.n	8009926 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setInteger(number.asSignedInteger(), resources_))
 80098a4:	f107 0308 	add.w	r3, r7, #8
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fd f878 	bl	800699e <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	6879      	ldr	r1, [r7, #4]
 80098b4:	6989      	ldr	r1, [r1, #24]
 80098b6:	9100      	str	r1, [sp, #0]
 80098b8:	6838      	ldr	r0, [r7, #0]
 80098ba:	f000 fb13 	bl	8009ee4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xe8>
          return DeserializationError::Ok;
 80098c4:	2300      	movs	r3, #0
 80098c6:	e02e      	b.n	8009926 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 80098c8:	2304      	movs	r3, #4
 80098ca:	e02c      	b.n	8009926 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asFloat(), resources_))
 80098cc:	f107 0308 	add.w	r3, r7, #8
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7fd f880 	bl	80069d6 <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>
 80098d6:	eef0 7a40 	vmov.f32	s15, s0
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	4619      	mov	r1, r3
 80098e0:	eeb0 0a67 	vmov.f32	s0, s15
 80098e4:	6838      	ldr	r0, [r7, #0]
 80098e6:	f000 fb3f 	bl	8009f68 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x114>
          return DeserializationError::Ok;
 80098f0:	2300      	movs	r3, #0
 80098f2:	e018      	b.n	8009926 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 80098f4:	2304      	movs	r3, #4
 80098f6:	e016      	b.n	8009926 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asDouble(), resources_))
 80098f8:	f107 0308 	add.w	r3, r7, #8
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7fd f879 	bl	80069f4 <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>
 8009902:	eeb0 7b40 	vmov.f64	d7, d0
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	4619      	mov	r1, r3
 800990c:	eeb0 0b47 	vmov.f64	d0, d7
 8009910:	6838      	ldr	r0, [r7, #0]
 8009912:	f000 fb3d 	bl	8009f90 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d001      	beq.n	8009920 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x140>
          return DeserializationError::Ok;
 800991c:	2300      	movs	r3, #0
 800991e:	e002      	b.n	8009926 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8009920:	2304      	movs	r3, #4
 8009922:	e000      	b.n	8009926 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        return DeserializationError::InvalidInput;
 8009924:	2303      	movs	r3, #3
  }
 8009926:	4618      	mov	r0, r3
 8009928:	3720      	adds	r7, #32
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop

08009930 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>:
  DeserializationError::Code skipNumericValue() {
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
    char c = current();
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff fc89 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800993e:	4603      	mov	r3, r0
 8009940:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8009942:	e007      	b.n	8009954 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x24>
      move();
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f87c 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7ff fc80 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009950:	4603      	mov	r3, r0
 8009952:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8009954:	7bfb      	ldrb	r3, [r7, #15]
 8009956:	4618      	mov	r0, r3
 8009958:	f000 fa5e 	bl	8009e18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1f0      	bne.n	8009944 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x14>
    return DeserializationError::Ok;
 8009962:	2300      	movs	r3, #0
  }
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7fc f990 	bl	8005c9a <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>
 800997a:	4603      	mov	r3, r0
  }
 800997c:	4618      	mov	r0, r3
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>:
  static T forge(uint32_t bits) {
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
    return alias_cast<T>(bits);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fb4c 	bl	800a02a <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>
 8009992:	eef0 7a40 	vmov.f32	s15, s0
  }
 8009996:	eeb0 0a67 	vmov.f32	s0, s15
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 80099a0:	b590      	push	{r4, r7, lr}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af02      	add	r7, sp, #8
 80099a6:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3304      	adds	r3, #4
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 fb4c 	bl	800a04a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>
 80099b2:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3304      	adds	r3, #4
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7ff ffd7 	bl	800996c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 80099be:	4602      	mov	r2, r0
    return VariantData::getMember(
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	9200      	str	r2, [sp, #0]
 80099c4:	330c      	adds	r3, #12
 80099c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099c8:	4620      	mov	r0, r4
 80099ca:	f000 f821 	bl	8009a10 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 80099ce:	4603      	mov	r3, r0
  }
 80099d0:	4618      	mov	r0, r3
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd90      	pop	{r4, r7, pc}

080099d8 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>:
  static T highest_for(
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
    return forge(0x4F7FFFFF);  // 4.29496704E9
 80099e0:	4804      	ldr	r0, [pc, #16]	@ (80099f4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE+0x1c>)
 80099e2:	f7ff ffcf 	bl	8009984 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 80099e6:	eef0 7a40 	vmov.f32	s15, s0
  }
 80099ea:	eeb0 0a67 	vmov.f32	s0, s15
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	4f7fffff 	.word	0x4f7fffff

080099f8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
    return client.getData();
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7fc f9a0 	bl	8005d46 <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>
 8009a06:	4603      	mov	r3, r0
  }
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>:
  static VariantData* getMember(const VariantData* var, TAdaptedString key,
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af02      	add	r7, sp, #8
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	4638      	mov	r0, r7
 8009a1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!var)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d101      	bne.n	8009a28 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x18>
      return 0;
 8009a24:	2300      	movs	r3, #0
 8009a26:	e008      	b.n	8009a3a <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return var->getMember(key, resources);
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	463b      	mov	r3, r7
 8009a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a32:	f000 fb16 	bl	800a062 <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>
 8009a36:	4603      	mov	r3, r0
 8009a38:	bf00      	nop
  }
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>:
  void move() {
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b082      	sub	sp, #8
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
    latch_.clear();
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	3310      	adds	r3, #16
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 fb1c 	bl	800a08c <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>
  }
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>:
  bool eat(char charToSkip) {
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	70fb      	strb	r3, [r7, #3]
    if (current() != charToSkip)
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7ff fbf1 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	461a      	mov	r2, r3
 8009a72:	78fb      	ldrb	r3, [r7, #3]
 8009a74:	4293      	cmp	r3, r2
 8009a76:	bf14      	ite	ne
 8009a78:	2301      	movne	r3, #1
 8009a7a:	2300      	moveq	r3, #0
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d001      	beq.n	8009a86 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x2a>
      return false;
 8009a82:	2300      	movs	r3, #0
 8009a84:	e003      	b.n	8009a8e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x32>
    move();
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff ffdb 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    return true;
 8009a8c:	2301      	movs	r3, #1
  }
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>:

  template <typename TKey>
  AllowAllFilter operator[](const TKey&) const {
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8009aa0:	bf00      	nop
  }
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
	...

08009ab0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipVariant(
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	7039      	strb	r1, [r7, #0]
    err = skipSpacesAndComments();
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7ff fb92 	bl	80091e4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	73fb      	strb	r3, [r7, #15]
    if (err)
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x1e>
      return err;
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
 8009acc:	e07c      	b.n	8009bc8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
    switch (current()) {
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff fbbe 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b7b      	cmp	r3, #123	@ 0x7b
 8009ad8:	dc71      	bgt.n	8009bbe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8009ada:	2b5b      	cmp	r3, #91	@ 0x5b
 8009adc:	da04      	bge.n	8009ae8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x38>
 8009ade:	2b22      	cmp	r3, #34	@ 0x22
 8009ae0:	d056      	beq.n	8009b90 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 8009ae2:	2b27      	cmp	r3, #39	@ 0x27
 8009ae4:	d054      	beq.n	8009b90 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 8009ae6:	e06a      	b.n	8009bbe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8009ae8:	3b5b      	subs	r3, #91	@ 0x5b
 8009aea:	2b20      	cmp	r3, #32
 8009aec:	d867      	bhi.n	8009bbe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8009aee:	a201      	add	r2, pc, #4	@ (adr r2, 8009af4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x44>)
 8009af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af4:	08009b79 	.word	0x08009b79
 8009af8:	08009bbf 	.word	0x08009bbf
 8009afc:	08009bbf 	.word	0x08009bbf
 8009b00:	08009bbf 	.word	0x08009bbf
 8009b04:	08009bbf 	.word	0x08009bbf
 8009b08:	08009bbf 	.word	0x08009bbf
 8009b0c:	08009bbf 	.word	0x08009bbf
 8009b10:	08009bbf 	.word	0x08009bbf
 8009b14:	08009bbf 	.word	0x08009bbf
 8009b18:	08009bbf 	.word	0x08009bbf
 8009b1c:	08009bbf 	.word	0x08009bbf
 8009b20:	08009ba7 	.word	0x08009ba7
 8009b24:	08009bbf 	.word	0x08009bbf
 8009b28:	08009bbf 	.word	0x08009bbf
 8009b2c:	08009bbf 	.word	0x08009bbf
 8009b30:	08009bbf 	.word	0x08009bbf
 8009b34:	08009bbf 	.word	0x08009bbf
 8009b38:	08009bbf 	.word	0x08009bbf
 8009b3c:	08009bbf 	.word	0x08009bbf
 8009b40:	08009bb3 	.word	0x08009bb3
 8009b44:	08009bbf 	.word	0x08009bbf
 8009b48:	08009bbf 	.word	0x08009bbf
 8009b4c:	08009bbf 	.word	0x08009bbf
 8009b50:	08009bbf 	.word	0x08009bbf
 8009b54:	08009bbf 	.word	0x08009bbf
 8009b58:	08009b9b 	.word	0x08009b9b
 8009b5c:	08009bbf 	.word	0x08009bbf
 8009b60:	08009bbf 	.word	0x08009bbf
 8009b64:	08009bbf 	.word	0x08009bbf
 8009b68:	08009bbf 	.word	0x08009bbf
 8009b6c:	08009bbf 	.word	0x08009bbf
 8009b70:	08009bbf 	.word	0x08009bbf
 8009b74:	08009b85 	.word	0x08009b85
        return skipArray(nestingLimit);
 8009b78:	7839      	ldrb	r1, [r7, #0]
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f7ff fc05 	bl	800938a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8009b80:	4603      	mov	r3, r0
 8009b82:	e021      	b.n	8009bc8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipObject(nestingLimit);
 8009b84:	7839      	ldrb	r1, [r7, #0]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff fd2e 	bl	80095e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	e01b      	b.n	8009bc8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipQuotedString();
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7ff fdca 	bl	800972a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8009b96:	4603      	mov	r3, r0
 8009b98:	e016      	b.n	8009bc8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("true");
 8009b9a:	490d      	ldr	r1, [pc, #52]	@ (8009bd0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x120>)
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7ff fdf9 	bl	8009794 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	e010      	b.n	8009bc8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("false");
 8009ba6:	490b      	ldr	r1, [pc, #44]	@ (8009bd4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x124>)
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7ff fdf3 	bl	8009794 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	e00a      	b.n	8009bc8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("null");
 8009bb2:	4909      	ldr	r1, [pc, #36]	@ (8009bd8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x128>)
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff fded 	bl	8009794 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	e004      	b.n	8009bc8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipNumericValue();
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7ff feb6 	bl	8009930 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	bf00      	nop
  }
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	0802a600 	.word	0x0802a600
 8009bd4:	0802a608 	.word	0x0802a608
 8009bd8:	0802a610 	.word	0x0802a610

08009bdc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>:
  DeserializationError::Code parseKey() {
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
    stringBuilder_.startString();
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fc fb5e 	bl	80062a8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    if (isQuote(current())) {
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7ff fb2f 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f000 fa6c 	bl	800a0d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d004      	beq.n	8009c0a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x2e>
      return parseQuotedString();
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f888 	bl	8009d16 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8009c06:	4603      	mov	r3, r0
 8009c08:	e004      	b.n	8009c14 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x38>
      return parseNonQuotedString();
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fa75 	bl	800a0fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>
 8009c10:	4603      	mov	r3, r0
 8009c12:	bf00      	nop
  }
 8009c14:	4618      	mov	r0, r3
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>:
  AllowAllFilter operator[](const TKey&) const {
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8009c26:	bf00      	nop
  }
 8009c28:	4618      	mov	r0, r3
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08a      	sub	sp, #40	@ 0x28
 8009c38:	af02      	add	r7, sp, #8
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 8009c40:	f107 0318 	add.w	r3, r7, #24
 8009c44:	6879      	ldr	r1, [r7, #4]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fc f9de 	bl	8006008 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 8009c4c:	f107 0318 	add.w	r3, r7, #24
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fd fc7d 	bl	8007550 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8009c56:	4603      	mov	r3, r0
 8009c58:	f083 0301 	eor.w	r3, r3, #1
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d001      	beq.n	8009c66 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x32>
    return nullptr;
 8009c62:	2300      	movs	r3, #0
 8009c64:	e037      	b.n	8009cd6 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  auto valueSlot = resources->allocVariant();
 8009c66:	f107 0310 	add.w	r3, r7, #16
 8009c6a:	6879      	ldr	r1, [r7, #4]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fc f9cb 	bl	8006008 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 8009c72:	f107 0310 	add.w	r3, r7, #16
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fd fc6a 	bl	8007550 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f083 0301 	eor.w	r3, r3, #1
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d001      	beq.n	8009c8c <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x58>
    return nullptr;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	e024      	b.n	8009cd6 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  if (!keySlot->setString(key, resources))
 8009c8c:	f107 0318 	add.w	r3, r7, #24
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fd fc86 	bl	80075a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8009c96:	4603      	mov	r3, r0
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	68b9      	ldr	r1, [r7, #8]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fb fd6f 	bl	8005780 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	f083 0301 	eor.w	r3, r3, #1
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d001      	beq.n	8009cb2 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x7e>
    return nullptr;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	e011      	b.n	8009cd6 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	f107 0218 	add.w	r2, r7, #24
 8009cc2:	ca06      	ldmia	r2, {r1, r2}
 8009cc4:	f7fc f919 	bl	8005efa <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 8009cc8:	f107 0310 	add.w	r3, r7, #16
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7fd fc50 	bl	8007572 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	bf00      	nop
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3720      	adds	r7, #32
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>:
  DeserializationError::Code skipKey() {
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b082      	sub	sp, #8
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
    if (isQuote(current())) {
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f7ff fab2 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009cec:	4603      	mov	r3, r0
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 f9ef 	bl	800a0d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d004      	beq.n	8009d04 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x26>
      return skipQuotedString();
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7ff fd15 	bl	800972a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8009d00:	4603      	mov	r3, r0
 8009d02:	e004      	b.n	8009d0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x30>
      return skipNonQuotedString();
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fa31 	bl	800a16c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	bf00      	nop
  }
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3708      	adds	r7, #8
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>:
  DeserializationError::Code parseQuotedString() {
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b086      	sub	sp, #24
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
    Utf16::Codepoint codepoint;
 8009d1e:	f107 030c 	add.w	r3, r7, #12
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fc fd14 	bl	8006750 <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>
    const char stopChar = current();
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f7ff fa91 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	75bb      	strb	r3, [r7, #22]
    move();
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7ff fe85 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff fa89 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	75fb      	strb	r3, [r7, #23]
      move();
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7ff fe7d 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8009d48:	7dfa      	ldrb	r2, [r7, #23]
 8009d4a:	7dbb      	ldrb	r3, [r7, #22]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d051      	beq.n	8009df4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xde>
      if (c == '\0')
 8009d50:	7dfb      	ldrb	r3, [r7, #23]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x44>
        return DeserializationError::IncompleteInput;
 8009d56:	2302      	movs	r3, #2
 8009d58:	e05a      	b.n	8009e10 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
      if (c == '\\') {
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009d5e:	d140      	bne.n	8009de2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xcc>
        c = current();
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff fa75 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8009d66:	4603      	mov	r3, r0
 8009d68:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8009d6a:	7dfb      	ldrb	r3, [r7, #23]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d101      	bne.n	8009d74 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x5e>
          return DeserializationError::IncompleteInput;
 8009d70:	2302      	movs	r3, #2
 8009d72:	e04d      	b.n	8009e10 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        if (c == 'u') {
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
 8009d76:	2b75      	cmp	r3, #117	@ 0x75
 8009d78:	d125      	bne.n	8009dc6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xb0>
          move();
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7ff fe61 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          err = parseHex4(codeunit);
 8009d80:	f107 030a 	add.w	r3, r7, #10
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fa0e 	bl	800a1a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	757b      	strb	r3, [r7, #21]
          if (err)
 8009d90:	7d7b      	ldrb	r3, [r7, #21]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d001      	beq.n	8009d9a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x84>
            return err;
 8009d96:	7d7b      	ldrb	r3, [r7, #21]
 8009d98:	e03a      	b.n	8009e10 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
          if (codepoint.append(codeunit))
 8009d9a:	897a      	ldrh	r2, [r7, #10]
 8009d9c:	f107 030c 	add.w	r3, r7, #12
 8009da0:	4611      	mov	r1, r2
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fc fce5 	bl	8006772 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d020      	beq.n	8009df0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xda>
            Utf8::encodeCodepoint(codepoint.value(), stringBuilder_);
 8009dae:	f107 030c 	add.w	r3, r7, #12
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fc fd0f 	bl	80067d6 <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>
 8009db8:	4602      	mov	r2, r0
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	f000 fa2b 	bl	800a21a <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>
 8009dc4:	e7b8      	b.n	8009d38 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        c = EscapeSequence::unescapeChar(c);
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7fc fa0c 	bl	80061e6 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d101      	bne.n	8009ddc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xc6>
          return DeserializationError::InvalidInput;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e019      	b.n	8009e10 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        move();
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7ff fe30 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      stringBuilder_.append(c);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	7dfa      	ldrb	r2, [r7, #23]
 8009de6:	4611      	mov	r1, r2
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fc fab6 	bl	800635a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
 8009dee:	e7a3      	b.n	8009d38 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
          continue;
 8009df0:	bf00      	nop
    for (;;) {
 8009df2:	e7a1      	b.n	8009d38 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        break;
 8009df4:	bf00      	nop
    if (!stringBuilder_.isValid())
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fc fae0 	bl	80063be <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	f083 0301 	eor.w	r3, r3, #1
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xf8>
      return DeserializationError::NoMemory;
 8009e0a:	2304      	movs	r3, #4
 8009e0c:	e000      	b.n	8009e10 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
    return DeserializationError::Ok;
 8009e0e:	2300      	movs	r3, #0
  }
 8009e10:	4618      	mov	r0, r3
 8009e12:	3718      	adds	r7, #24
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>:
  static inline bool canBeInNumber(char c) {
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	4603      	mov	r3, r0
 8009e20:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8009e22:	79fb      	ldrb	r3, [r7, #7]
 8009e24:	2239      	movs	r2, #57	@ 0x39
 8009e26:	2130      	movs	r1, #48	@ 0x30
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f000 fa7a 	bl	800a322 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 8009e2e:	4603      	mov	r3, r0
           c == 'e' || c == 'E';
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10e      	bne.n	8009e52 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8009e34:	79fb      	ldrb	r3, [r7, #7]
 8009e36:	2b2b      	cmp	r3, #43	@ 0x2b
 8009e38:	d00b      	beq.n	8009e52 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8009e3a:	79fb      	ldrb	r3, [r7, #7]
 8009e3c:	2b2d      	cmp	r3, #45	@ 0x2d
 8009e3e:	d008      	beq.n	8009e52 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8009e40:	79fb      	ldrb	r3, [r7, #7]
 8009e42:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e44:	d005      	beq.n	8009e52 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8009e46:	79fb      	ldrb	r3, [r7, #7]
 8009e48:	2b65      	cmp	r3, #101	@ 0x65
 8009e4a:	d002      	beq.n	8009e52 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
           c == 'e' || c == 'E';
 8009e4c:	79fb      	ldrb	r3, [r7, #7]
 8009e4e:	2b45      	cmp	r3, #69	@ 0x45
 8009e50:	d101      	bne.n	8009e56 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3e>
 8009e52:	2301      	movs	r3, #1
 8009e54:	e000      	b.n	8009e58 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x40>
 8009e56:	2300      	movs	r3, #0
  }
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 8009e60:	b5b0      	push	{r4, r5, r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	e9c7 2300 	strd	r2, r3, [r7]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 8009e6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e70:	f7ff f8be 	bl	8008ff0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d006      	beq.n	8009e88 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Uint32;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	220a      	movs	r2, #10
 8009e7e:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	601a      	str	r2, [r3, #0]
 8009e86:	e028      	b.n	8009eda <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 8009e88:	f107 0310 	add.w	r3, r7, #16
 8009e8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fc f93f 	bl	8006112 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8009e94:	f107 0310 	add.w	r3, r7, #16
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 fa5c 	bl	800a356 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	f083 0301 	eor.w	r3, r3, #1
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	e016      	b.n	8009edc <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Uint64;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	221a      	movs	r2, #26
 8009eb2:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8009eb4:	f107 0310 	add.w	r3, r7, #16
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 fa5d 	bl	800a378 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 8009ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009eca:	f107 0310 	add.w	r3, r7, #16
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f000 fa5e 	bl	800a390 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 8009eda:	2301      	movs	r3, #1
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3718      	adds	r7, #24
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bdb0      	pop	{r4, r5, r7, pc}

08009ee4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 8009ee4:	b5b0      	push	{r4, r5, r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	e9c7 2300 	strd	r2, r3, [r7]
  if (canConvertNumber<int32_t>(value)) {
 8009ef0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ef4:	f000 fa58 	bl	800a3a8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d006      	beq.n	8009f0c <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Int32;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	220c      	movs	r2, #12
 8009f02:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	e028      	b.n	8009f5e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
    auto extension = resources->allocExtension();
 8009f0c:	f107 0310 	add.w	r3, r7, #16
 8009f10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fc f8fd 	bl	8006112 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8009f18:	f107 0310 	add.w	r3, r7, #16
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f000 fa1a 	bl	800a356 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8009f22:	4603      	mov	r3, r0
 8009f24:	f083 0301 	eor.w	r3, r3, #1
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	e016      	b.n	8009f60 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Int64;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	221c      	movs	r2, #28
 8009f36:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8009f38:	f107 0310 	add.w	r3, r7, #16
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f000 fa1b 	bl	800a378 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8009f42:	4603      	mov	r3, r0
 8009f44:	461a      	mov	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 8009f4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009f4e:	f107 0310 	add.w	r3, r7, #16
 8009f52:	4618      	mov	r0, r3
 8009f54:	f000 fa1c 	bl	800a390 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 8009f5e:	2301      	movs	r3, #1
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3718      	adds	r7, #24
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bdb0      	pop	{r4, r5, r7, pc}

08009f68 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>:
  enable_if_t<sizeof(T) == 4, bool> setFloat(T value, ResourceManager*) {
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	ed87 0a02 	vstr	s0, [r7, #8]
 8009f74:	6079      	str	r1, [r7, #4]
    type_ = VariantType::Float;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	220e      	movs	r2, #14
 8009f7a:	711a      	strb	r2, [r3, #4]
    content_.asFloat = value;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	601a      	str	r2, [r3, #0]
    return true;
 8009f82:	2301      	movs	r3, #1
  }
 8009f84:	4618      	mov	r0, r3
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>:
enable_if_t<sizeof(T) == 8, bool> VariantData::setFloat(
 8009f90:	b5b0      	push	{r4, r5, r7, lr}
 8009f92:	b088      	sub	sp, #32
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	ed87 0b00 	vstr	d0, [r7]
 8009f9c:	60b9      	str	r1, [r7, #8]
  float valueAsFloat = static_cast<float>(value);
 8009f9e:	ed97 7b00 	vldr	d7, [r7]
 8009fa2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009fa6:	edc7 7a07 	vstr	s15, [r7, #28]
  if (value == valueAsFloat) {
 8009faa:	edd7 7a07 	vldr	s15, [r7, #28]
 8009fae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009fb2:	ed97 6b00 	vldr	d6, [r7]
 8009fb6:	eeb4 6b47 	vcmp.f64	d6, d7
 8009fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fbe:	d106      	bne.n	8009fce <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x3e>
    type_ = VariantType::Float;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	220e      	movs	r2, #14
 8009fc4:	711a      	strb	r2, [r3, #4]
    content_.asFloat = valueAsFloat;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	69fa      	ldr	r2, [r7, #28]
 8009fca:	601a      	str	r2, [r3, #0]
 8009fcc:	e028      	b.n	800a020 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x90>
    auto extension = resources->allocExtension();
 8009fce:	f107 0314 	add.w	r3, r7, #20
 8009fd2:	68b9      	ldr	r1, [r7, #8]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7fc f89c 	bl	8006112 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8009fda:	f107 0314 	add.w	r3, r7, #20
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 f9b9 	bl	800a356 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	f083 0301 	eor.w	r3, r3, #1
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x64>
      return false;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	e016      	b.n	800a022 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x92>
    type_ = VariantType::Double;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	221e      	movs	r2, #30
 8009ff8:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8009ffa:	f107 0314 	add.w	r3, r7, #20
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 f9ba 	bl	800a378 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800a004:	4603      	mov	r3, r0
 800a006:	461a      	mov	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	801a      	strh	r2, [r3, #0]
    extension->asDouble = value;
 800a00c:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a010:	f107 0314 	add.w	r3, r7, #20
 800a014:	4618      	mov	r0, r3
 800a016:	f000 f9bb 	bl	800a390 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800a01a:	4603      	mov	r3, r0
 800a01c:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 800a020:	2301      	movs	r3, #1
}
 800a022:	4618      	mov	r0, r3
 800a024:	3720      	adds	r7, #32
 800a026:	46bd      	mov	sp, r7
 800a028:	bdb0      	pop	{r4, r5, r7, pc}

0800a02a <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>:
T alias_cast(F raw_data) {
 800a02a:	b480      	push	{r7}
 800a02c:	b085      	sub	sp, #20
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  ac.raw = raw_data;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	60fb      	str	r3, [r7, #12]
  return ac.data;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	ee07 3a90 	vmov	s15, r3
}
 800a03c:	eeb0 0a67 	vmov.f32	s0, s15
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
    return client.getData();
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7fb fe2d 	bl	8005cb2 <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>
 800a058:	4603      	mov	r3, r0
  }
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>:
  VariantData* getMember(TAdaptedString key,
 800a062:	b580      	push	{r7, lr}
 800a064:	b086      	sub	sp, #24
 800a066:	af02      	add	r7, sp, #8
 800a068:	60f8      	str	r0, [r7, #12]
 800a06a:	4638      	mov	r0, r7
 800a06c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    return ObjectData::getMember(asObject(), key, resources);
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f7fb faf3 	bl	800565c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	463b      	mov	r3, r7
 800a07c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a07e:	f7fd fe75 	bl	8007d6c <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>
 800a082:	4603      	mov	r3, r0
  }
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>:
  void clear() {
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
    loaded_ = false;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	715a      	strb	r2, [r3, #5]
  }
 800a09a:	bf00      	nop
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>:
  }

 private:
  void load() {
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b084      	sub	sp, #16
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(!ended_);
    int c = reader_.read();
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 f99f 	bl	800a3f4 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>
 800a0b6:	60f8      	str	r0, [r7, #12]
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      ended_ = true;
#endif
    current_ = static_cast<char>(c > 0 ? c : 0);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	711a      	strb	r2, [r3, #4]
    loaded_ = true;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	715a      	strb	r2, [r3, #5]
  }
 800a0ca:	bf00      	nop
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 800a0d2:	b480      	push	{r7}
 800a0d4:	b083      	sub	sp, #12
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	4603      	mov	r3, r0
 800a0da:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 800a0dc:	79fb      	ldrb	r3, [r7, #7]
 800a0de:	2b27      	cmp	r3, #39	@ 0x27
 800a0e0:	d002      	beq.n	800a0e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x16>
 800a0e2:	79fb      	ldrb	r3, [r7, #7]
 800a0e4:	2b22      	cmp	r3, #34	@ 0x22
 800a0e6:	d101      	bne.n	800a0ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1a>
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e000      	b.n	800a0ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1c>
 800a0ec:	2300      	movs	r3, #0
  }
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	370c      	adds	r7, #12
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>:
  DeserializationError::Code parseNonQuotedString() {
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b084      	sub	sp, #16
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
    char c = current();
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7ff f8a4 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800a108:	4603      	mov	r3, r0
 800a10a:	73fb      	strb	r3, [r7, #15]
    if (canBeInNonQuotedString(c)) {  // no quotes
 800a10c:	7bfb      	ldrb	r3, [r7, #15]
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 f980 	bl	800a414 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d015      	beq.n	800a146 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x4c>
        move();
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7ff fc91 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
        stringBuilder_.append(c);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	7bfa      	ldrb	r2, [r7, #15]
 800a124:	4611      	mov	r1, r2
 800a126:	4618      	mov	r0, r3
 800a128:	f7fc f917 	bl	800635a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
        c = current();
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff f88f 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800a132:	4603      	mov	r3, r0
 800a134:	73fb      	strb	r3, [r7, #15]
      } while (canBeInNonQuotedString(c));
 800a136:	7bfb      	ldrb	r3, [r7, #15]
 800a138:	4618      	mov	r0, r3
 800a13a:	f000 f96b 	bl	800a414 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1ea      	bne.n	800a11a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x20>
 800a144:	e001      	b.n	800a14a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x50>
      return DeserializationError::InvalidInput;
 800a146:	2303      	movs	r3, #3
 800a148:	e00c      	b.n	800a164 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    if (!stringBuilder_.isValid())
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7fc f936 	bl	80063be <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 800a152:	4603      	mov	r3, r0
 800a154:	f083 0301 	eor.w	r3, r3, #1
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x68>
      return DeserializationError::NoMemory;
 800a15e:	2304      	movs	r3, #4
 800a160:	e000      	b.n	800a164 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    return DeserializationError::Ok;
 800a162:	2300      	movs	r3, #0
  }
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>:
  DeserializationError::Code skipNonQuotedString() {
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
    char c = current();
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff f86b 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800a17a:	4603      	mov	r3, r0
 800a17c:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 800a17e:	e007      	b.n	800a190 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x24>
      move();
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7ff fc5e 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7ff f862 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800a18c:	4603      	mov	r3, r0
 800a18e:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 800a190:	7bfb      	ldrb	r3, [r7, #15]
 800a192:	4618      	mov	r0, r3
 800a194:	f000 f93e 	bl	800a414 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1f0      	bne.n	800a180 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x14>
    return DeserializationError::Ok;
 800a19e:	2300      	movs	r3, #0
  }
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>:
  DeserializationError::Code parseHex4(uint16_t& result) {
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
    result = 0;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; ++i) {
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	73fb      	strb	r3, [r7, #15]
 800a1bc:	e025      	b.n	800a20a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x62>
      char digit = current();
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7ff f846 	bl	8009250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	73bb      	strb	r3, [r7, #14]
      if (!digit)
 800a1c8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x2a>
        return DeserializationError::IncompleteInput;
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	e01f      	b.n	800a212 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      uint8_t value = decodeHex(digit);
 800a1d2:	7bbb      	ldrb	r3, [r7, #14]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f000 f944 	bl	800a462 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	737b      	strb	r3, [r7, #13]
      if (value > 0x0F)
 800a1de:	7b7b      	ldrb	r3, [r7, #13]
 800a1e0:	2b0f      	cmp	r3, #15
 800a1e2:	d901      	bls.n	800a1e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x40>
        return DeserializationError::InvalidInput;
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e014      	b.n	800a212 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      result = uint16_t((result << 4) | value);
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	011b      	lsls	r3, r3, #4
 800a1ee:	b21a      	sxth	r2, r3
 800a1f0:	7b7b      	ldrb	r3, [r7, #13]
 800a1f2:	b21b      	sxth	r3, r3
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	b21b      	sxth	r3, r3
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	801a      	strh	r2, [r3, #0]
      move();
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7ff fc1f 	bl	8009a42 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (uint8_t i = 0; i < 4; ++i) {
 800a204:	7bfb      	ldrb	r3, [r7, #15]
 800a206:	3301      	adds	r3, #1
 800a208:	73fb      	strb	r3, [r7, #15]
 800a20a:	7bfb      	ldrb	r3, [r7, #15]
 800a20c:	2b03      	cmp	r3, #3
 800a20e:	d9d6      	bls.n	800a1be <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x16>
    return DeserializationError::Ok;
 800a210:	2300      	movs	r3, #0
  }
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b086      	sub	sp, #24
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	6039      	str	r1, [r7, #0]
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b7f      	cmp	r3, #127	@ 0x7f
 800a228:	d806      	bhi.n	800a238 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x1e>
    str.append(char(codepoint32));
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	4619      	mov	r1, r3
 800a230:	6838      	ldr	r0, [r7, #0]
 800a232:	f7fc f892 	bl	800635a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>

    while (*(--p)) {
      str.append(*p);
    }
  }
}
 800a236:	e070      	b.n	800a31a <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x100>
    char* p = buf;
 800a238:	f107 030c 	add.w	r3, r7, #12
 800a23c:	617b      	str	r3, [r7, #20]
    *(p++) = 0;
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	617a      	str	r2, [r7, #20]
 800a244:	2200      	movs	r2, #0
 800a246:	701a      	strb	r2, [r3, #0]
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a250:	b2db      	uxtb	r3, r3
 800a252:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a256:	b2d9      	uxtb	r1, r3
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	1c5a      	adds	r2, r3, #1
 800a25c:	617a      	str	r2, [r7, #20]
 800a25e:	460a      	mov	r2, r1
 800a260:	701a      	strb	r2, [r3, #0]
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	099b      	lsrs	r3, r3, #6
 800a266:	827b      	strh	r3, [r7, #18]
    if (codepoint16 < 0x20) {  // 0x800
 800a268:	8a7b      	ldrh	r3, [r7, #18]
 800a26a:	2b1f      	cmp	r3, #31
 800a26c:	d80a      	bhi.n	800a284 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x6a>
      *(p++) = char(codepoint16 | 0xC0);
 800a26e:	8a7b      	ldrh	r3, [r7, #18]
 800a270:	b2db      	uxtb	r3, r3
 800a272:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800a276:	b2d9      	uxtb	r1, r3
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	1c5a      	adds	r2, r3, #1
 800a27c:	617a      	str	r2, [r7, #20]
 800a27e:	460a      	mov	r2, r1
 800a280:	701a      	strb	r2, [r3, #0]
 800a282:	e03e      	b.n	800a302 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800a284:	8a7b      	ldrh	r3, [r7, #18]
 800a286:	b2db      	uxtb	r3, r3
 800a288:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a292:	b2d9      	uxtb	r1, r3
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	1c5a      	adds	r2, r3, #1
 800a298:	617a      	str	r2, [r7, #20]
 800a29a:	460a      	mov	r2, r1
 800a29c:	701a      	strb	r2, [r3, #0]
      codepoint16 = uint16_t(codepoint16 >> 6);
 800a29e:	8a7b      	ldrh	r3, [r7, #18]
 800a2a0:	099b      	lsrs	r3, r3, #6
 800a2a2:	827b      	strh	r3, [r7, #18]
      if (codepoint16 < 0x10) {  // 0x10000
 800a2a4:	8a7b      	ldrh	r3, [r7, #18]
 800a2a6:	2b0f      	cmp	r3, #15
 800a2a8:	d80a      	bhi.n	800a2c0 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xa6>
        *(p++) = char(codepoint16 | 0xE0);
 800a2aa:	8a7b      	ldrh	r3, [r7, #18]
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	f063 031f 	orn	r3, r3, #31
 800a2b2:	b2d9      	uxtb	r1, r3
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	1c5a      	adds	r2, r3, #1
 800a2b8:	617a      	str	r2, [r7, #20]
 800a2ba:	460a      	mov	r2, r1
 800a2bc:	701a      	strb	r2, [r3, #0]
 800a2be:	e020      	b.n	800a302 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800a2c0:	8a7b      	ldrh	r3, [r7, #18]
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a2ce:	b2d9      	uxtb	r1, r3
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	1c5a      	adds	r2, r3, #1
 800a2d4:	617a      	str	r2, [r7, #20]
 800a2d6:	460a      	mov	r2, r1
 800a2d8:	701a      	strb	r2, [r3, #0]
        codepoint16 = uint16_t(codepoint16 >> 6);
 800a2da:	8a7b      	ldrh	r3, [r7, #18]
 800a2dc:	099b      	lsrs	r3, r3, #6
 800a2de:	827b      	strh	r3, [r7, #18]
        *(p++) = char(codepoint16 | 0xF0);
 800a2e0:	8a7b      	ldrh	r3, [r7, #18]
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	f063 030f 	orn	r3, r3, #15
 800a2e8:	b2d9      	uxtb	r1, r3
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	1c5a      	adds	r2, r3, #1
 800a2ee:	617a      	str	r2, [r7, #20]
 800a2f0:	460a      	mov	r2, r1
 800a2f2:	701a      	strb	r2, [r3, #0]
    while (*(--p)) {
 800a2f4:	e005      	b.n	800a302 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      str.append(*p);
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	6838      	ldr	r0, [r7, #0]
 800a2fe:	f7fc f82c 	bl	800635a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
    while (*(--p)) {
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	3b01      	subs	r3, #1
 800a306:	617b      	str	r3, [r7, #20]
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	bf14      	ite	ne
 800a310:	2301      	movne	r3, #1
 800a312:	2300      	moveq	r3, #0
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1ed      	bne.n	800a2f6 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xdc>
}
 800a31a:	bf00      	nop
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 800a322:	b480      	push	{r7}
 800a324:	b083      	sub	sp, #12
 800a326:	af00      	add	r7, sp, #0
 800a328:	4603      	mov	r3, r0
 800a32a:	71fb      	strb	r3, [r7, #7]
 800a32c:	460b      	mov	r3, r1
 800a32e:	71bb      	strb	r3, [r7, #6]
 800a330:	4613      	mov	r3, r2
 800a332:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 800a334:	79ba      	ldrb	r2, [r7, #6]
 800a336:	79fb      	ldrb	r3, [r7, #7]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d805      	bhi.n	800a348 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 800a33c:	79fa      	ldrb	r2, [r7, #7]
 800a33e:	797b      	ldrb	r3, [r7, #5]
 800a340:	429a      	cmp	r2, r3
 800a342:	d801      	bhi.n	800a348 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 800a344:	2301      	movs	r3, #1
 800a346:	e000      	b.n	800a34a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x28>
 800a348:	2300      	movs	r3, #0
  }
 800a34a:	4618      	mov	r0, r3
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>:
  explicit operator bool() const {
 800a356:	b480      	push	{r7}
 800a358:	b083      	sub	sp, #12
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	bf14      	ite	ne
 800a366:	2301      	movne	r3, #1
 800a368:	2300      	moveq	r3, #0
 800a36a:	b2db      	uxtb	r3, r3
  }
 800a36c:	4618      	mov	r0, r3
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>:
  SlotId id() const {
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
    return id_;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	889b      	ldrh	r3, [r3, #4]
  }
 800a384:	4618      	mov	r0, r3
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>:
  T* operator->() const {
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
    return ptr_;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
  }
 800a39c:	4618      	mov	r0, r3
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800a3a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a3ac:	b082      	sub	sp, #8
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800a3b4:	f000 f86e 	bl	800a494 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	17da      	asrs	r2, r3, #31
 800a3bc:	4698      	mov	r8, r3
 800a3be:	4691      	mov	r9, r2
 800a3c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3c4:	4542      	cmp	r2, r8
 800a3c6:	eb73 0309 	sbcs.w	r3, r3, r9
 800a3ca:	db0d      	blt.n	800a3e8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 800a3cc:	f000 f86b 	bl	800a4a6 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	17da      	asrs	r2, r3, #31
 800a3d4:	461c      	mov	r4, r3
 800a3d6:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800a3d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3dc:	4294      	cmp	r4, r2
 800a3de:	eb75 0303 	sbcs.w	r3, r5, r3
 800a3e2:	db01      	blt.n	800a3e8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e000      	b.n	800a3ea <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800a3f4 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>:

  int read() {
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
    return static_cast<unsigned char>(*ptr_++);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	1c59      	adds	r1, r3, #1
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	6011      	str	r1, [r2, #0]
 800a406:	781b      	ldrb	r3, [r3, #0]
  }
 800a408:	4618      	mov	r0, r3
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	4603      	mov	r3, r0
 800a41c:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800a41e:	79fb      	ldrb	r3, [r7, #7]
 800a420:	2239      	movs	r2, #57	@ 0x39
 800a422:	2130      	movs	r1, #48	@ 0x30
 800a424:	4618      	mov	r0, r3
 800a426:	f7ff ff7c 	bl	800a322 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d111      	bne.n	800a454 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
 800a430:	79fb      	ldrb	r3, [r7, #7]
 800a432:	227a      	movs	r2, #122	@ 0x7a
 800a434:	215f      	movs	r1, #95	@ 0x5f
 800a436:	4618      	mov	r0, r3
 800a438:	f7ff ff73 	bl	800a322 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d108      	bne.n	800a454 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
           isBetween(c, 'A', 'Z');
 800a442:	79fb      	ldrb	r3, [r7, #7]
 800a444:	225a      	movs	r2, #90	@ 0x5a
 800a446:	2141      	movs	r1, #65	@ 0x41
 800a448:	4618      	mov	r0, r3
 800a44a:	f7ff ff6a 	bl	800a322 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800a44e:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800a450:	2b00      	cmp	r3, #0
 800a452:	d001      	beq.n	800a458 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x44>
 800a454:	2301      	movs	r3, #1
 800a456:	e000      	b.n	800a45a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x46>
 800a458:	2300      	movs	r3, #0
  }
 800a45a:	4618      	mov	r0, r3
 800a45c:	3708      	adds	r7, #8
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>:
  static inline uint8_t decodeHex(char c) {
 800a462:	b480      	push	{r7}
 800a464:	b083      	sub	sp, #12
 800a466:	af00      	add	r7, sp, #0
 800a468:	4603      	mov	r3, r0
 800a46a:	71fb      	strb	r3, [r7, #7]
    if (c < 'A')
 800a46c:	79fb      	ldrb	r3, [r7, #7]
 800a46e:	2b40      	cmp	r3, #64	@ 0x40
 800a470:	d803      	bhi.n	800a47a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x18>
      return uint8_t(c - '0');
 800a472:	79fb      	ldrb	r3, [r7, #7]
 800a474:	3b30      	subs	r3, #48	@ 0x30
 800a476:	b2db      	uxtb	r3, r3
 800a478:	e006      	b.n	800a488 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x26>
    c = char(c & ~0x20);  // uppercase
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	f023 0320 	bic.w	r3, r3, #32
 800a480:	71fb      	strb	r3, [r7, #7]
    return uint8_t(c - 'A' + 10);
 800a482:	79fb      	ldrb	r3, [r7, #7]
 800a484:	3b37      	subs	r3, #55	@ 0x37
 800a486:	b2db      	uxtb	r3, r3
  }
 800a488:	4618      	mov	r0, r3
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>:
};

template <typename T>
struct numeric_limits<
    T, enable_if_t<is_integral<T>::value && is_signed<T>::value>> {
  static constexpr T lowest() {
 800a494:	b480      	push	{r7}
 800a496:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 800a498:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 800a49c:	4618      	mov	r0, r3
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr

0800a4a6 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>:
  static constexpr T highest() {
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	af00      	add	r7, sp, #0
    return T(~lowest());
 800a4aa:	f7ff fff3 	bl	800a494 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	43db      	mvns	r3, r3
  }
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	bd80      	pop	{r7, pc}
	...

0800a4b8 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800a4c0:	1d39      	adds	r1, r7, #4
 800a4c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	4803      	ldr	r0, [pc, #12]	@ (800a4d8 <__io_putchar+0x20>)
 800a4ca:	f019 fe02 	bl	80240d2 <HAL_UART_Transmit>
	  return ch;
 800a4ce:	687b      	ldr	r3, [r7, #4]
	}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	24000378 	.word	0x24000378

0800a4dc <main>:
}

int main(void)
{
 800a4dc:	b590      	push	{r4, r7, lr}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
	MPU_Config();
 800a4e2:	f000 fa55 	bl	800a990 <_ZL10MPU_Configv>
	HAL_Init();
 800a4e6:	f011 fb53 	bl	801bb90 <HAL_Init>
	SystemClock_Config();
 800a4ea:	f000 f867 	bl	800a5bc <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 800a4ee:	f000 f92f 	bl	800a750 <_Z24PeriphCommonClock_Configv>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a4f2:	f3bf 8f4f 	dsb	sy
}
 800a4f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a4f8:	f3bf 8f6f 	isb	sy
}
 800a4fc:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 800a4fe:	4b2d      	ldr	r3, [pc, #180]	@ (800a5b4 <main+0xd8>)
 800a500:	2200      	movs	r2, #0
 800a502:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a506:	f3bf 8f4f 	dsb	sy
}
 800a50a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a50c:	f3bf 8f6f 	isb	sy
}
 800a510:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800a512:	bf00      	nop
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800a514:	4b27      	ldr	r3, [pc, #156]	@ (800a5b4 <main+0xd8>)
 800a516:	695b      	ldr	r3, [r3, #20]
 800a518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	bf14      	ite	ne
 800a520:	2301      	movne	r3, #1
 800a522:	2300      	moveq	r3, #0
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	d11b      	bne.n	800a562 <main+0x86>
  __ASM volatile ("dsb 0xF":::"memory");
 800a52a:	f3bf 8f4f 	dsb	sy
}
 800a52e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a530:	f3bf 8f6f 	isb	sy
}
 800a534:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a536:	4b1f      	ldr	r3, [pc, #124]	@ (800a5b4 <main+0xd8>)
 800a538:	2200      	movs	r2, #0
 800a53a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a53e:	f3bf 8f4f 	dsb	sy
}
 800a542:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a544:	f3bf 8f6f 	isb	sy
}
 800a548:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a54a:	4b1a      	ldr	r3, [pc, #104]	@ (800a5b4 <main+0xd8>)
 800a54c:	695b      	ldr	r3, [r3, #20]
 800a54e:	4a19      	ldr	r2, [pc, #100]	@ (800a5b4 <main+0xd8>)
 800a550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a554:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a556:	f3bf 8f4f 	dsb	sy
}
 800a55a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a55c:	f3bf 8f6f 	isb	sy
}
 800a560:	e000      	b.n	800a564 <main+0x88>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800a562:	bf00      	nop
	SCB_InvalidateICache();
	SCB_EnableICache();
	//SCB_InvalidateDCache();
	//SCB_EnableDCache();

    __HAL_RCC_DMA1_CLK_ENABLE();
 800a564:	4b14      	ldr	r3, [pc, #80]	@ (800a5b8 <main+0xdc>)
 800a566:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a56a:	4a13      	ldr	r2, [pc, #76]	@ (800a5b8 <main+0xdc>)
 800a56c:	f043 0301 	orr.w	r3, r3, #1
 800a570:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a574:	4b10      	ldr	r3, [pc, #64]	@ (800a5b8 <main+0xdc>)
 800a576:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a57a:	f003 0301 	and.w	r3, r3, #1
 800a57e:	603b      	str	r3, [r7, #0]
 800a580:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); 			// used for SD card detect
 800a582:	f000 f9a9 	bl	800a8d8 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 800a586:	f000 f947 	bl	800a818 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment line 62 #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in FATFT/Target/sd_diskio.c
 800a58a:	f000 f919 	bl	800a7c0 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 800a58e:	f01b fc85 	bl	8025e9c <MX_FATFS_Init>

	Remora *remora = new Remora();
 800a592:	2044      	movs	r0, #68	@ 0x44
 800a594:	f01e f8b0 	bl	80286f8 <_Znwj>
 800a598:	4603      	mov	r3, r0
 800a59a:	461c      	mov	r4, r3
 800a59c:	4620      	mov	r0, r4
 800a59e:	f000 fe65 	bl	800b26c <_ZN6RemoraC1Ev>
 800a5a2:	607c      	str	r4, [r7, #4]
	remora->run();
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f001 f919 	bl	800b7dc <_ZN6Remora3runEv>
}
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd90      	pop	{r4, r7, pc}
 800a5b4:	e000ed00 	.word	0xe000ed00
 800a5b8:	58024400 	.word	0x58024400

0800a5bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b09e      	sub	sp, #120	@ 0x78
 800a5c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a5c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a5c6:	224c      	movs	r2, #76	@ 0x4c
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f01f f8b8 	bl	8029740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a5d0:	f107 030c 	add.w	r3, r7, #12
 800a5d4:	2220      	movs	r2, #32
 800a5d6:	2100      	movs	r1, #0
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f01f f8b1 	bl	8029740 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800a5de:	2002      	movs	r0, #2
 800a5e0:	f014 fa5c 	bl	801ea9c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	60bb      	str	r3, [r7, #8]
 800a5e8:	4b56      	ldr	r3, [pc, #344]	@ (800a744 <_Z18SystemClock_Configv+0x188>)
 800a5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ec:	4a55      	ldr	r2, [pc, #340]	@ (800a744 <_Z18SystemClock_Configv+0x188>)
 800a5ee:	f023 0301 	bic.w	r3, r3, #1
 800a5f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5f4:	4b53      	ldr	r3, [pc, #332]	@ (800a744 <_Z18SystemClock_Configv+0x188>)
 800a5f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f8:	f003 0301 	and.w	r3, r3, #1
 800a5fc:	60bb      	str	r3, [r7, #8]
 800a5fe:	4b52      	ldr	r3, [pc, #328]	@ (800a748 <_Z18SystemClock_Configv+0x18c>)
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	4a51      	ldr	r2, [pc, #324]	@ (800a748 <_Z18SystemClock_Configv+0x18c>)
 800a604:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a608:	6193      	str	r3, [r2, #24]
 800a60a:	4b4f      	ldr	r3, [pc, #316]	@ (800a748 <_Z18SystemClock_Configv+0x18c>)
 800a60c:	699b      	ldr	r3, [r3, #24]
 800a60e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a612:	60bb      	str	r3, [r7, #8]
 800a614:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a616:	bf00      	nop
 800a618:	4b4b      	ldr	r3, [pc, #300]	@ (800a748 <_Z18SystemClock_Configv+0x18c>)
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a624:	bf14      	ite	ne
 800a626:	2301      	movne	r3, #1
 800a628:	2300      	moveq	r3, #0
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1f3      	bne.n	800a618 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a630:	4b46      	ldr	r3, [pc, #280]	@ (800a74c <_Z18SystemClock_Configv+0x190>)
 800a632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a636:	4a45      	ldr	r2, [pc, #276]	@ (800a74c <_Z18SystemClock_Configv+0x190>)
 800a638:	f043 0302 	orr.w	r3, r3, #2
 800a63c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a640:	4b42      	ldr	r3, [pc, #264]	@ (800a74c <_Z18SystemClock_Configv+0x190>)
 800a642:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a646:	f003 0302 	and.w	r3, r3, #2
 800a64a:	607b      	str	r3, [r7, #4]
 800a64c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800a64e:	2300      	movs	r3, #0
 800a650:	603b      	str	r3, [r7, #0]
 800a652:	4b3d      	ldr	r3, [pc, #244]	@ (800a748 <_Z18SystemClock_Configv+0x18c>)
 800a654:	699b      	ldr	r3, [r3, #24]
 800a656:	4a3c      	ldr	r2, [pc, #240]	@ (800a748 <_Z18SystemClock_Configv+0x18c>)
 800a658:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a65c:	6193      	str	r3, [r2, #24]
 800a65e:	4b3a      	ldr	r3, [pc, #232]	@ (800a748 <_Z18SystemClock_Configv+0x18c>)
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a666:	603b      	str	r3, [r7, #0]
 800a668:	4b36      	ldr	r3, [pc, #216]	@ (800a744 <_Z18SystemClock_Configv+0x188>)
 800a66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a66c:	4a35      	ldr	r2, [pc, #212]	@ (800a744 <_Z18SystemClock_Configv+0x188>)
 800a66e:	f043 0301 	orr.w	r3, r3, #1
 800a672:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a674:	4b33      	ldr	r3, [pc, #204]	@ (800a744 <_Z18SystemClock_Configv+0x188>)
 800a676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a678:	f003 0301 	and.w	r3, r3, #1
 800a67c:	603b      	str	r3, [r7, #0]
 800a67e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a680:	bf00      	nop
 800a682:	4b31      	ldr	r3, [pc, #196]	@ (800a748 <_Z18SystemClock_Configv+0x18c>)
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a68a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a68e:	bf14      	ite	ne
 800a690:	2301      	movne	r3, #1
 800a692:	2300      	moveq	r3, #0
 800a694:	b2db      	uxtb	r3, r3
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1f3      	bne.n	800a682 <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800a69a:	4b2c      	ldr	r3, [pc, #176]	@ (800a74c <_Z18SystemClock_Configv+0x190>)
 800a69c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a69e:	f023 0303 	bic.w	r3, r3, #3
 800a6a2:	4a2a      	ldr	r2, [pc, #168]	@ (800a74c <_Z18SystemClock_Configv+0x190>)
 800a6a4:	f043 0302 	orr.w	r3, r3, #2
 800a6a8:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a6ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a6b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 800a6bc:	2305      	movs	r3, #5
 800a6be:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800a6c0:	23c0      	movs	r3, #192	@ 0xc0
 800a6c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a6c8:	2304      	movs	r3, #4
 800a6ca:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800a6d0:	2308      	movs	r3, #8
 800a6d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a6dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f014 fa15 	bl	801eb10 <HAL_RCC_OscConfig>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	bf14      	ite	ne
 800a6ec:	2301      	movne	r3, #1
 800a6ee:	2300      	moveq	r3, #0
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d001      	beq.n	800a6fa <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 800a6f6:	f000 f993 	bl	800aa20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a6fa:	233f      	movs	r3, #63	@ 0x3f
 800a6fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a6fe:	2303      	movs	r3, #3
 800a700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800a702:	2300      	movs	r3, #0
 800a704:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800a706:	2308      	movs	r3, #8
 800a708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800a70a:	2340      	movs	r3, #64	@ 0x40
 800a70c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800a70e:	2340      	movs	r3, #64	@ 0x40
 800a710:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800a712:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a716:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800a718:	2340      	movs	r3, #64	@ 0x40
 800a71a:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a71c:	f107 030c 	add.w	r3, r7, #12
 800a720:	2104      	movs	r1, #4
 800a722:	4618      	mov	r0, r3
 800a724:	f014 fe4e 	bl	801f3c4 <HAL_RCC_ClockConfig>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	bf14      	ite	ne
 800a72e:	2301      	movne	r3, #1
 800a730:	2300      	moveq	r3, #0
 800a732:	b2db      	uxtb	r3, r3
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 800a738:	f000 f972 	bl	800aa20 <Error_Handler>
  }
}
 800a73c:	bf00      	nop
 800a73e:	3778      	adds	r7, #120	@ 0x78
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	58000400 	.word	0x58000400
 800a748:	58024800 	.word	0x58024800
 800a74c:	58024400 	.word	0x58024400

0800a750 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b0b0      	sub	sp, #192	@ 0xc0
 800a754:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a756:	463b      	mov	r3, r7
 800a758:	22c0      	movs	r2, #192	@ 0xc0
 800a75a:	2100      	movs	r1, #0
 800a75c:	4618      	mov	r0, r3
 800a75e:	f01e ffef 	bl	8029740 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 800a762:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 800a766:	f04f 0300 	mov.w	r3, #0
 800a76a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800a76e:	2302      	movs	r3, #2
 800a770:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800a772:	230c      	movs	r3, #12
 800a774:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800a776:	2301      	movs	r3, #1
 800a778:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 800a77a:	230a      	movs	r3, #10
 800a77c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800a77e:	2302      	movs	r3, #2
 800a780:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800a782:	23c0      	movs	r3, #192	@ 0xc0
 800a784:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800a786:	2320      	movs	r3, #32
 800a788:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800a78a:	2300      	movs	r3, #0
 800a78c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800a78e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a792:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800a794:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a798:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a79a:	463b      	mov	r3, r7
 800a79c:	4618      	mov	r0, r3
 800a79e:	f015 f99d 	bl	801fadc <HAL_RCCEx_PeriphCLKConfig>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	bf14      	ite	ne
 800a7a8:	2301      	movne	r3, #1
 800a7aa:	2300      	moveq	r3, #0
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d001      	beq.n	800a7b6 <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800a7b2:	f000 f935 	bl	800aa20 <Error_Handler>
  }
}
 800a7b6:	bf00      	nop
 800a7b8:	37c0      	adds	r7, #192	@ 0xc0
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
	...

0800a7c0 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800a7c4:	4b11      	ldr	r3, [pc, #68]	@ (800a80c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a7c6:	4a12      	ldr	r2, [pc, #72]	@ (800a810 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 800a7c8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800a7ca:	4b10      	ldr	r3, [pc, #64]	@ (800a80c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 800a7d0:	4b0e      	ldr	r3, [pc, #56]	@ (800a80c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a7d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a7d6:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800a7d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a80c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a7da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a7de:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a7e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a80c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 800a7e6:	4b09      	ldr	r3, [pc, #36]	@ (800a80c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a7e8:	2208      	movs	r2, #8
 800a7ea:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800a7ec:	4807      	ldr	r0, [pc, #28]	@ (800a80c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800a7ee:	f017 fe73 	bl	80224d8 <HAL_SD_Init>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	bf14      	ite	ne
 800a7f8:	2301      	movne	r3, #1
 800a7fa:	2300      	moveq	r3, #0
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d002      	beq.n	800a808 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 800a802:	4804      	ldr	r0, [pc, #16]	@ (800a814 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 800a804:	f01e fe92 	bl	802952c <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 800a808:	bf00      	nop
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	240002fc 	.word	0x240002fc
 800a810:	52007000 	.word	0x52007000
 800a814:	0802a618 	.word	0x0802a618

0800a818 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a81c:	4b2c      	ldr	r3, [pc, #176]	@ (800a8d0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a81e:	4a2d      	ldr	r2, [pc, #180]	@ (800a8d4 <_ZL19MX_USART1_UART_Initv+0xbc>)
 800a820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = Config::pcBaud;
 800a822:	4b2b      	ldr	r3, [pc, #172]	@ (800a8d0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a824:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a82a:	4b29      	ldr	r3, [pc, #164]	@ (800a8d0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a830:	4b27      	ldr	r3, [pc, #156]	@ (800a8d0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a832:	2200      	movs	r2, #0
 800a834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a836:	4b26      	ldr	r3, [pc, #152]	@ (800a8d0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a838:	2200      	movs	r2, #0
 800a83a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a83c:	4b24      	ldr	r3, [pc, #144]	@ (800a8d0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a83e:	220c      	movs	r2, #12
 800a840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a842:	4b23      	ldr	r3, [pc, #140]	@ (800a8d0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a844:	2200      	movs	r2, #0
 800a846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a848:	4b21      	ldr	r3, [pc, #132]	@ (800a8d0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a84e:	4b20      	ldr	r3, [pc, #128]	@ (800a8d0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a850:	2200      	movs	r2, #0
 800a852:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a854:	4b1e      	ldr	r3, [pc, #120]	@ (800a8d0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a856:	2200      	movs	r2, #0
 800a858:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a85a:	4b1d      	ldr	r3, [pc, #116]	@ (800a8d0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a85c:	2200      	movs	r2, #0
 800a85e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a860:	481b      	ldr	r0, [pc, #108]	@ (800a8d0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a862:	f019 fbe6 	bl	8024032 <HAL_UART_Init>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	bf14      	ite	ne
 800a86c:	2301      	movne	r3, #1
 800a86e:	2300      	moveq	r3, #0
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 800a876:	f000 f8d3 	bl	800aa20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a87a:	2100      	movs	r1, #0
 800a87c:	4814      	ldr	r0, [pc, #80]	@ (800a8d0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a87e:	f01a fc78 	bl	8025172 <HAL_UARTEx_SetTxFifoThreshold>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	bf14      	ite	ne
 800a888:	2301      	movne	r3, #1
 800a88a:	2300      	moveq	r3, #0
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800a892:	f000 f8c5 	bl	800aa20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a896:	2100      	movs	r1, #0
 800a898:	480d      	ldr	r0, [pc, #52]	@ (800a8d0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a89a:	f01a fca8 	bl	80251ee <HAL_UARTEx_SetRxFifoThreshold>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	bf14      	ite	ne
 800a8a4:	2301      	movne	r3, #1
 800a8a6:	2300      	moveq	r3, #0
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800a8ae:	f000 f8b7 	bl	800aa20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800a8b2:	4807      	ldr	r0, [pc, #28]	@ (800a8d0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800a8b4:	f01a fc24 	bl	8025100 <HAL_UARTEx_DisableFifoMode>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	bf14      	ite	ne
 800a8be:	2301      	movne	r3, #1
 800a8c0:	2300      	moveq	r3, #0
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d001      	beq.n	800a8cc <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 800a8c8:	f000 f8aa 	bl	800aa20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a8cc:	bf00      	nop
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	24000378 	.word	0x24000378
 800a8d4:	40011000 	.word	0x40011000

0800a8d8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b08a      	sub	sp, #40	@ 0x28
 800a8dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8de:	f107 0314 	add.w	r3, r7, #20
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	601a      	str	r2, [r3, #0]
 800a8e6:	605a      	str	r2, [r3, #4]
 800a8e8:	609a      	str	r2, [r3, #8]
 800a8ea:	60da      	str	r2, [r3, #12]
 800a8ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a8ee:	4b26      	ldr	r3, [pc, #152]	@ (800a988 <_ZL12MX_GPIO_Initv+0xb0>)
 800a8f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a8f4:	4a24      	ldr	r2, [pc, #144]	@ (800a988 <_ZL12MX_GPIO_Initv+0xb0>)
 800a8f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a8fe:	4b22      	ldr	r3, [pc, #136]	@ (800a988 <_ZL12MX_GPIO_Initv+0xb0>)
 800a900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a908:	613b      	str	r3, [r7, #16]
 800a90a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a90c:	4b1e      	ldr	r3, [pc, #120]	@ (800a988 <_ZL12MX_GPIO_Initv+0xb0>)
 800a90e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a912:	4a1d      	ldr	r2, [pc, #116]	@ (800a988 <_ZL12MX_GPIO_Initv+0xb0>)
 800a914:	f043 0304 	orr.w	r3, r3, #4
 800a918:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a91c:	4b1a      	ldr	r3, [pc, #104]	@ (800a988 <_ZL12MX_GPIO_Initv+0xb0>)
 800a91e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a922:	f003 0304 	and.w	r3, r3, #4
 800a926:	60fb      	str	r3, [r7, #12]
 800a928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a92a:	4b17      	ldr	r3, [pc, #92]	@ (800a988 <_ZL12MX_GPIO_Initv+0xb0>)
 800a92c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a930:	4a15      	ldr	r2, [pc, #84]	@ (800a988 <_ZL12MX_GPIO_Initv+0xb0>)
 800a932:	f043 0301 	orr.w	r3, r3, #1
 800a936:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a93a:	4b13      	ldr	r3, [pc, #76]	@ (800a988 <_ZL12MX_GPIO_Initv+0xb0>)
 800a93c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a940:	f003 0301 	and.w	r3, r3, #1
 800a944:	60bb      	str	r3, [r7, #8]
 800a946:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a948:	4b0f      	ldr	r3, [pc, #60]	@ (800a988 <_ZL12MX_GPIO_Initv+0xb0>)
 800a94a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a94e:	4a0e      	ldr	r2, [pc, #56]	@ (800a988 <_ZL12MX_GPIO_Initv+0xb0>)
 800a950:	f043 0308 	orr.w	r3, r3, #8
 800a954:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a958:	4b0b      	ldr	r3, [pc, #44]	@ (800a988 <_ZL12MX_GPIO_Initv+0xb0>)
 800a95a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a95e:	f003 0308 	and.w	r3, r3, #8
 800a962:	607b      	str	r3, [r7, #4]
 800a964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a966:	2310      	movs	r3, #16
 800a968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a96a:	2300      	movs	r3, #0
 800a96c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a96e:	2300      	movs	r3, #0
 800a970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a972:	f107 0314 	add.w	r3, r7, #20
 800a976:	4619      	mov	r1, r3
 800a978:	4804      	ldr	r0, [pc, #16]	@ (800a98c <_ZL12MX_GPIO_Initv+0xb4>)
 800a97a:	f013 fead 	bl	801e6d8 <HAL_GPIO_Init>

}
 800a97e:	bf00      	nop
 800a980:	3728      	adds	r7, #40	@ 0x28
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	58024400 	.word	0x58024400
 800a98c:	58020800 	.word	0x58020800

0800a990 <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800a996:	463b      	mov	r3, r7
 800a998:	2200      	movs	r2, #0
 800a99a:	601a      	str	r2, [r3, #0]
 800a99c:	605a      	str	r2, [r3, #4]
 800a99e:	609a      	str	r2, [r3, #8]
 800a9a0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800a9a2:	f011 fae1 	bl	801bf68 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800a9b2:	231f      	movs	r3, #31
 800a9b4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800a9b6:	2387      	movs	r3, #135	@ 0x87
 800a9b8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a9d2:	463b      	mov	r3, r7
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f011 faff 	bl	801bfd8 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for DMA buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800a9de:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800a9e2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800a9e4:	2307      	movs	r3, #7
 800a9e6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800aa00:	2300      	movs	r3, #0
 800aa02:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800aa04:	2300      	movs	r3, #0
 800aa06:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800aa08:	463b      	mov	r3, r7
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f011 fae4 	bl	801bfd8 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800aa10:	2004      	movs	r0, #4
 800aa12:	f011 fac1 	bl	801bf98 <HAL_MPU_Enable>

}
 800aa16:	bf00      	nop
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
	...

0800aa20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 800aa24:	4803      	ldr	r0, [pc, #12]	@ (800aa34 <Error_Handler+0x14>)
 800aa26:	f01e fd11 	bl	802944c <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 800aa2a:	b672      	cpsid	i
}
 800aa2c:	bf00      	nop

  __disable_irq();
  while (1)
 800aa2e:	bf00      	nop
 800aa30:	e7fd      	b.n	800aa2e <Error_Handler+0xe>
 800aa32:	bf00      	nop
 800aa34:	0802a628 	.word	0x0802a628

0800aa38 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	1c5a      	adds	r2, r3, #1
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	605a      	str	r2, [r3, #4]
 800aa62:	bf00      	nop
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr

0800aa6e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b082      	sub	sp, #8
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	1e5a      	subs	r2, r3, #1
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	605a      	str	r2, [r3, #4]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	bf0c      	ite	eq
 800aa88:	2301      	moveq	r3, #1
 800aa8a:	2300      	movne	r3, #0
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d019      	beq.n	800aac6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	3308      	adds	r3, #8
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	1e5a      	subs	r2, r3, #1
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	609a      	str	r2, [r3, #8]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	bf0c      	ite	eq
 800aab0:	2301      	moveq	r3, #1
 800aab2:	2300      	movne	r3, #0
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d005      	beq.n	800aac6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	330c      	adds	r3, #12
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	4798      	blx	r3
        }
    }
 800aac6:	bf00      	nop
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
	...

0800aad0 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>:
  private:
    template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
      friend class _Sp_counted_ptr_inplace;

    static const type_info&
    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)
 800aad0:	b480      	push	{r7}
 800aad2:	af00      	add	r7, sp, #0
    {
      alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };
      return reinterpret_cast<const type_info&>(__tag);
 800aad4:	4b02      	ldr	r3, [pc, #8]	@ (800aae0 <_ZNSt19_Sp_make_shared_tag5_S_tiEv+0x10>)
    }
 800aad6:	4618      	mov	r0, r3
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr
 800aae0:	0802b464 	.word	0x0802b464

0800aae4 <_ZN8txData_tC1Ev>:
    int32_t jointFeedback[Config::joints];	  // Base thread feedback ??
    float processVariable[Config::variables];		     // Servo thread feedback ??
	uint16_t inputs;
  };

  txData_t() {
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
      header = 0;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	601a      	str	r2, [r3, #0]
      inputs = 0;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 800aaf8:	2300      	movs	r3, #0
 800aafa:	73fb      	strb	r3, [r7, #15]
 800aafc:	e008      	b.n	800ab10 <_ZN8txData_tC1Ev+0x2c>
         jointFeedback[i] = 0;
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	2200      	movs	r2, #0
 800ab08:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	73fb      	strb	r3, [r7, #15]
 800ab10:	7bfb      	ldrb	r3, [r7, #15]
 800ab12:	2b07      	cmp	r3, #7
 800ab14:	d9f3      	bls.n	800aafe <_ZN8txData_tC1Ev+0x1a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 800ab16:	2300      	movs	r3, #0
 800ab18:	73bb      	strb	r3, [r7, #14]
 800ab1a:	e00b      	b.n	800ab34 <_ZN8txData_tC1Ev+0x50>
         processVariable[i] = 0.0;
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	3308      	adds	r3, #8
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4413      	add	r3, r2
 800ab26:	3304      	adds	r3, #4
 800ab28:	f04f 0200 	mov.w	r2, #0
 800ab2c:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 800ab2e:	7bbb      	ldrb	r3, [r7, #14]
 800ab30:	3301      	adds	r3, #1
 800ab32:	73bb      	strb	r3, [r7, #14]
 800ab34:	7bbb      	ldrb	r3, [r7, #14]
 800ab36:	2b05      	cmp	r3, #5
 800ab38:	d9f0      	bls.n	800ab1c <_ZN8txData_tC1Ev+0x38>
     }
  }
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3714      	adds	r7, #20
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d201      	bcs.n	800ab62 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	e000      	b.n	800ab64 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800ab62:	687b      	ldr	r3, [r7, #4]
    }
 800ab64:	4618      	mov	r0, r3
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>:
  bool isStatic() const {
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
    return static_;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	7a1b      	ldrb	r3, [r3, #8]
  }
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>:
  ~StringPool() {
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  }
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4618      	mov	r0, r3
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>:

  VariantData* getOrAddElement(size_t index, ResourceManager* resources);

  VariantData* getElement(size_t index, const ResourceManager* resources) const;

  static VariantData* getElement(const ArrayData* array, size_t index,
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b084      	sub	sp, #16
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	60f8      	str	r0, [r7, #12]
 800aba6:	60b9      	str	r1, [r7, #8]
 800aba8:	607a      	str	r2, [r7, #4]
                                 const ResourceManager* resources) {
    if (!array)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d101      	bne.n	800abb4 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x16>
      return nullptr;
 800abb0:	2300      	movs	r3, #0
 800abb2:	e006      	b.n	800abc2 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x24>
    return array->getElement(index, resources);
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	68b9      	ldr	r1, [r7, #8]
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f000 f9ab 	bl	800af14 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>
 800abbe:	4603      	mov	r3, r0
 800abc0:	bf00      	nop
  }
 800abc2:	4618      	mov	r0, r3
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
  const ArrayData* asArray() const {
 800abca:	b580      	push	{r7, lr}
 800abcc:	b082      	sub	sp, #8
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asArray();
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7fa fd0f 	bl	80055f6 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800abd8:	4603      	mov	r3, r0
  }
 800abda:	4618      	mov	r0, r3
 800abdc:	3708      	adds	r7, #8
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>:
  VariantData* getElement(size_t index,
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b084      	sub	sp, #16
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	60f8      	str	r0, [r7, #12]
 800abea:	60b9      	str	r1, [r7, #8]
 800abec:	607a      	str	r2, [r7, #4]
    return ArrayData::getElement(asArray(), index, resources);
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f7ff ffeb 	bl	800abca <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800abf4:	4603      	mov	r3, r0
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	68b9      	ldr	r1, [r7, #8]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7ff ffcf 	bl	800ab9e <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 800ac00:	4603      	mov	r3, r0
  }
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>:
  static VariantData* getElement(const VariantData* var, size_t index,
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b084      	sub	sp, #16
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	60f8      	str	r0, [r7, #12]
 800ac12:	60b9      	str	r1, [r7, #8]
 800ac14:	607a      	str	r2, [r7, #4]
    return var != 0 ? var->getElement(index, resources) : 0;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d006      	beq.n	800ac2a <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x20>
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	68b9      	ldr	r1, [r7, #8]
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f7ff ffde 	bl	800abe2 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>
 800ac26:	4603      	mov	r3, r0
 800ac28:	e000      	b.n	800ac2c <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x22>
 800ac2a:	2300      	movs	r3, #0
  }
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>:
  VariantData* getOrAddElement(size_t index, ResourceManager* resources) {
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b086      	sub	sp, #24
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	607a      	str	r2, [r7, #4]
    auto array = isNull() ? &toArray() : asArray();
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f000 f81d 	bl	800ac80 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d004      	beq.n	800ac56 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x22>
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f7fa fdd7 	bl	8005800 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 800ac52:	4603      	mov	r3, r0
 800ac54:	e003      	b.n	800ac5e <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x2a>
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f7fa fccd 	bl	80055f6 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	617b      	str	r3, [r7, #20]
    if (!array)
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d101      	bne.n	800ac6a <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x36>
      return nullptr;
 800ac66:	2300      	movs	r3, #0
 800ac68:	e006      	b.n	800ac78 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x44>
    return array->getOrAddElement(index, resources);
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	68b9      	ldr	r1, [r7, #8]
 800ac6e:	6978      	ldr	r0, [r7, #20]
 800ac70:	f000 f8ff 	bl	800ae72 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>
 800ac74:	4603      	mov	r3, r0
 800ac76:	bf00      	nop
  }
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>:
  bool isNull() const {
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Null;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	791b      	ldrb	r3, [r3, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	bf0c      	ite	eq
 800ac90:	2301      	moveq	r3, #1
 800ac92:	2300      	movne	r3, #0
 800ac94:	b2db      	uxtb	r3, r3
  }
 800ac96:	4618      	mov	r0, r3
 800ac98:	370c      	adds	r7, #12
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr

0800aca2 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>:
  bool isString() const {
 800aca2:	b480      	push	{r7}
 800aca4:	b083      	sub	sp, #12
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::LinkedString ||
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	791b      	ldrb	r3, [r3, #4]
 800acae:	2b04      	cmp	r3, #4
 800acb0:	d003      	beq.n	800acba <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x18>
           type_ == VariantType::OwnedString;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	791b      	ldrb	r3, [r3, #4]
    return type_ == VariantType::LinkedString ||
 800acb6:	2b05      	cmp	r3, #5
 800acb8:	d101      	bne.n	800acbe <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1c>
 800acba:	2301      	movs	r3, #1
 800acbc:	e000      	b.n	800acc0 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1e>
 800acbe:	2300      	movs	r3, #0
  }
 800acc0:	4618      	mov	r0, r3
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>:
  void setLinkedString(const char* s) {
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
    type_ = VariantType::LinkedString;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2204      	movs	r2, #4
 800acda:	711a      	strb	r2, [r3, #4]
    content_.asLinkedString = s;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	601a      	str	r2, [r3, #0]
  }
 800ace2:	bf00      	nop
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr

0800acee <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>:
  ~ResourceManager() {
 800acee:	b580      	push	{r7, lr}
 800acf0:	b082      	sub	sp, #8
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
    stringPool_.clear(allocator_);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f103 0208 	add.w	r2, r3, #8
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4619      	mov	r1, r3
 800ad02:	4610      	mov	r0, r2
 800ad04:	f7fa fb06 	bl	8005314 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
    variantPools_.clear(allocator_);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f103 020c 	add.w	r2, r3, #12
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4619      	mov	r1, r3
 800ad14:	4610      	mov	r0, r2
 800ad16:	f7fc fb87 	bl	8007428 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
  }
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	330c      	adds	r3, #12
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f001 f893 	bl	800be4a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	3308      	adds	r3, #8
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7ff ff2d 	bl	800ab88 <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4618      	mov	r0, r3
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>:
  static JsonVariant fromJson(JsonVariant src) {
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	1d3b      	adds	r3, r7, #4
 800ad42:	e883 0006 	stmia.w	r3, {r1, r2}
    return src;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	461a      	mov	r2, r3
 800ad4a:	1d3b      	adds	r3, r7, #4
 800ad4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ad50:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>:
    return JsonVariantConst(collectionToVariant(data_), resources_);
  }

  // Returns true if the reference is unbound.
  // https://arduinojson.org/v7/api/jsonarray/isnull/
  bool isNull() const {
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
    return data_ == 0;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	bf0c      	ite	eq
 800ad70:	2301      	moveq	r3, #1
 800ad72:	2300      	movne	r3, #0
 800ad74:	b2db      	uxtb	r3, r3
  }
 800ad76:	4618      	mov	r0, r3
 800ad78:	370c      	adds	r7, #12
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr

0800ad82 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>:
    return detail::VariantData::nesting(collectionToVariant(data_), resources_);
  }

  // Returns the number of elements in the array.
  // https://arduinojson.org/v7/api/jsonarray/size/
  size_t size() const {
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b082      	sub	sp, #8
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
    return data_ ? data_->size(resources_) : 0;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00a      	beq.n	800ada8 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x26>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	461a      	mov	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	4610      	mov	r0, r2
 800ada0:	f000 f8cf 	bl	800af42 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>
 800ada4:	4603      	mov	r3, r0
 800ada6:	e000      	b.n	800adaa <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x28>
 800ada8:	2300      	movs	r3, #0
  }
 800adaa:	4618      	mov	r0, r3
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 800adb2:	b480      	push	{r7}
 800adb4:	b083      	sub	sp, #12
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
    return resources_;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	685b      	ldr	r3, [r3, #4]
  }
 800adbe:	4618      	mov	r0, r3
 800adc0:	370c      	adds	r7, #12
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>:

  detail::VariantData* getData() const {
 800adca:	b580      	push	{r7, lr}
 800adcc:	b082      	sub	sp, #8
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4618      	mov	r0, r3
 800add8:	f7fa fba3 	bl	8005522 <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 800addc:	4603      	mov	r3, r0
  }
 800adde:	4618      	mov	r0, r3
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>:

  detail::VariantData* getOrCreateData() const {
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b082      	sub	sp, #8
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fa fb95 	bl	8005522 <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 800adf8:	4603      	mov	r3, r0
  }
 800adfa:	4618      	mov	r0, r3
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>:

ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// A JSON document.
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b082      	sub	sp, #8
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7ff ff6e 	bl	800acee <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	4618      	mov	r0, r3
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline ArrayData::iterator ArrayData::at(
    size_t index, const ResourceManager* resources) const {
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
 800ae28:	603b      	str	r3, [r7, #0]
  auto it = createIterator(resources);
 800ae2a:	68b9      	ldr	r1, [r7, #8]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fb f80f 	bl	8005e54 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index) {
 800ae36:	e006      	b.n	800ae46 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x2a>
    it.next(resources);
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f7fa ffe7 	bl	8005e0e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    --index;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3b01      	subs	r3, #1
 800ae44:	607b      	str	r3, [r7, #4]
  while (!it.done() && index) {
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f7fa fb22 	bl	8005490 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	f083 0301 	eor.w	r3, r3, #1
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d004      	beq.n	800ae62 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e000      	b.n	800ae64 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x48>
 800ae62:	2300      	movs	r3, #0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1e7      	bne.n	800ae38 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x1c>
  }
  return it;
 800ae68:	bf00      	nop
}
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	3710      	adds	r7, #16
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>:
  CollectionData::appendOne(slot, resources);
  return slot.ptr();
}

inline VariantData* ArrayData::getOrAddElement(size_t index,
                                               ResourceManager* resources) {
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b088      	sub	sp, #32
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	60f8      	str	r0, [r7, #12]
 800ae7a:	60b9      	str	r1, [r7, #8]
 800ae7c:	607a      	str	r2, [r7, #4]
  auto it = createIterator(resources);
 800ae7e:	68f9      	ldr	r1, [r7, #12]
 800ae80:	f107 0314 	add.w	r3, r7, #20
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fa ffe4 	bl	8005e54 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index > 0) {
 800ae8c:	e008      	b.n	800aea0 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x2e>
    it.next(resources);
 800ae8e:	f107 0314 	add.w	r3, r7, #20
 800ae92:	6879      	ldr	r1, [r7, #4]
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7fa ffba 	bl	8005e0e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    index--;
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	60bb      	str	r3, [r7, #8]
  while (!it.done() && index > 0) {
 800aea0:	f107 0314 	add.w	r3, r7, #20
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7fa faf3 	bl	8005490 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	f083 0301 	eor.w	r3, r3, #1
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d004      	beq.n	800aec0 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d001      	beq.n	800aec0 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 800aebc:	2301      	movs	r3, #1
 800aebe:	e000      	b.n	800aec2 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x50>
 800aec0:	2300      	movs	r3, #0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1e3      	bne.n	800ae8e <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x1c>
  }
  if (it.done())
 800aec6:	f107 0314 	add.w	r3, r7, #20
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7fa fae0 	bl	8005490 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d002      	beq.n	800aedc <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x6a>
    index++;
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	3301      	adds	r3, #1
 800aeda:	60bb      	str	r3, [r7, #8]
  VariantData* element = it.data();
 800aedc:	f107 0314 	add.w	r3, r7, #20
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7fa fb06 	bl	80054f2 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800aee6:	61f8      	str	r0, [r7, #28]
  while (index > 0) {
 800aee8:	e00c      	b.n	800af04 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x92>
    element = addElement(resources);
 800aeea:	6879      	ldr	r1, [r7, #4]
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f7fa ff42 	bl	8005d76 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 800aef2:	61f8      	str	r0, [r7, #28]
    if (!element)
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d101      	bne.n	800aefe <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x8c>
      return nullptr;
 800aefa:	2300      	movs	r3, #0
 800aefc:	e006      	b.n	800af0c <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x9a>
    index--;
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	3b01      	subs	r3, #1
 800af02:	60bb      	str	r3, [r7, #8]
  while (index > 0) {
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d1ef      	bne.n	800aeea <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x78>
  }
  return element;
 800af0a:	69fb      	ldr	r3, [r7, #28]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3720      	adds	r7, #32
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>:

inline VariantData* ArrayData::getElement(
    size_t index, const ResourceManager* resources) const {
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	607a      	str	r2, [r7, #4]
  return at(index, resources).data();
 800af20:	f107 0010 	add.w	r0, r7, #16
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	68f9      	ldr	r1, [r7, #12]
 800af2a:	f7ff ff77 	bl	800ae1c <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>
 800af2e:	f107 0310 	add.w	r3, r7, #16
 800af32:	4618      	mov	r0, r3
 800af34:	f7fa fadd 	bl	80054f2 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 800af38:	4603      	mov	r3, r0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3718      	adds	r7, #24
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>:
      maxChildNesting = childNesting;
  }
  return maxChildNesting + 1;
}

inline size_t CollectionData::size(const ResourceManager* resources) const {
 800af42:	b580      	push	{r7, lr}
 800af44:	b086      	sub	sp, #24
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
  size_t count = 0;
 800af4c:	2300      	movs	r3, #0
 800af4e:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 800af50:	f107 030c 	add.w	r3, r7, #12
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	6879      	ldr	r1, [r7, #4]
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fa ff7b 	bl	8005e54 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 800af5e:	e008      	b.n	800af72 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x30>
    count++;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	3301      	adds	r3, #1
 800af64:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 800af66:	f107 030c 	add.w	r3, r7, #12
 800af6a:	6839      	ldr	r1, [r7, #0]
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7fa ff4e 	bl	8005e0e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 800af72:	f107 030c 	add.w	r3, r7, #12
 800af76:	4618      	mov	r0, r3
 800af78:	f7fa fa8a 	bl	8005490 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 800af7c:	4603      	mov	r3, r0
 800af7e:	f083 0301 	eor.w	r3, r3, #1
 800af82:	b2db      	uxtb	r3, r3
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1eb      	bne.n	800af60 <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x1e>
  return count;
 800af88:	697b      	ldr	r3, [r7, #20]
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3718      	adds	r7, #24
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>:
  static const char* fromJson(JsonVariantConst src) {
    auto data = getData(src);
    return data ? data->asString().c_str() : 0;
  }

  static bool checkJson(JsonVariantConst src) {
 800af92:	b580      	push	{r7, lr}
 800af94:	b084      	sub	sp, #16
 800af96:	af00      	add	r7, sp, #0
 800af98:	463b      	mov	r3, r7
 800af9a:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 800af9e:	463b      	mov	r3, r7
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fc fabd 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800afa6:	60f8      	str	r0, [r7, #12]
    return data && data->isString();
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d007      	beq.n	800afbe <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f7ff fe77 	bl	800aca2 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 800afba:	2301      	movs	r3, #1
 800afbc:	e000      	b.n	800afc0 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 800afbe:	2300      	movs	r3, #0
  }
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	683a      	ldr	r2, [r7, #0]
 800afd6:	4611      	mov	r1, r2
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 ff4c 	bl	800be76 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4618      	mov	r0, r3
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
 800aff2:	683a      	ldr	r2, [r7, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4611      	mov	r1, r2
 800aff8:	4618      	mov	r0, r3
 800affa:	f7ff ffe5 	bl	800afc8 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4618      	mov	r0, r3
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>:
	virtual ~CommsHandler();

	void update(void) override;
	void tasks();

    void setInterface(std::unique_ptr<CommsInterface> commsInterface) {
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
        interface = std::move(commsInterface);
 800b012:	6838      	ldr	r0, [r7, #0]
 800b014:	f000 ff24 	bl	800be60 <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800b018:	4602      	mov	r2, r0
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	3318      	adds	r3, #24
 800b01e:	4611      	mov	r1, r2
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff ffe1 	bl	800afe8 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
    }
 800b026:	bf00      	nop
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <_ZNK12CommsHandler9getStatusEv>:
    void setNoDataCount(int count) { noDataCount = count; }
    void setStatus(bool value) { status = value; }

    bool getData() const { return data; }
    int getNoDataCount() const { return noDataCount; }
    bool getStatus() const { return status; }
 800b02e:	b480      	push	{r7}
 800b030:	b083      	sub	sp, #12
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	7f9b      	ldrb	r3, [r3, #30]
 800b03a:	4618      	mov	r0, r3
 800b03c:	370c      	adds	r7, #12
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr

0800b046 <EXTI4_IRQHandler>:
#include "interrupt.h"
#include "stm32h7xx_hal.h"

extern "C" {

    void EXTI4_IRQHandler() {
 800b046:	b580      	push	{r7, lr}
 800b048:	af00      	add	r7, sp, #0
        if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET) {
 800b04a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b04e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b052:	f003 0310 	and.w	r3, r3, #16
 800b056:	2b00      	cmp	r3, #0
 800b058:	bf14      	ite	ne
 800b05a:	2301      	movne	r3, #1
 800b05c:	2300      	moveq	r3, #0
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	2b00      	cmp	r3, #0
 800b062:	d007      	beq.n	800b074 <EXTI4_IRQHandler+0x2e>
            __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 800b064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b068:	2210      	movs	r2, #16
 800b06a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
            Interrupt::InvokeHandler(EXTI4_IRQn);
 800b06e:	200a      	movs	r0, #10
 800b070:	f7fa f828 	bl	80050c4 <_ZN9Interrupt13InvokeHandlerEm>
        }
    }
 800b074:	bf00      	nop
 800b076:	bd80      	pop	{r7, pc}

0800b078 <DMA1_Stream0_IRQHandler>:

    void DMA1_Stream0_IRQHandler() {
 800b078:	b580      	push	{r7, lr}
 800b07a:	af00      	add	r7, sp, #0
        Interrupt::InvokeHandler(DMA1_Stream0_IRQn);
 800b07c:	200b      	movs	r0, #11
 800b07e:	f7fa f821 	bl	80050c4 <_ZN9Interrupt13InvokeHandlerEm>
    }
 800b082:	bf00      	nop
 800b084:	bd80      	pop	{r7, pc}

0800b086 <DMA1_Stream1_IRQHandler>:

    void DMA1_Stream1_IRQHandler() {
 800b086:	b580      	push	{r7, lr}
 800b088:	af00      	add	r7, sp, #0
        Interrupt::InvokeHandler(DMA1_Stream1_IRQn);
 800b08a:	200c      	movs	r0, #12
 800b08c:	f7fa f81a 	bl	80050c4 <_ZN9Interrupt13InvokeHandlerEm>
    }
 800b090:	bf00      	nop
 800b092:	bd80      	pop	{r7, pc}

0800b094 <TIM2_IRQHandler>:

    void TIM2_IRQHandler() {
 800b094:	b580      	push	{r7, lr}
 800b096:	af00      	add	r7, sp, #0
        if (TIM2->SR & TIM_SR_UIF) {
 800b098:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	f003 0301 	and.w	r3, r3, #1
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	bf14      	ite	ne
 800b0a6:	2301      	movne	r3, #1
 800b0a8:	2300      	moveq	r3, #0
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00a      	beq.n	800b0c6 <TIM2_IRQHandler+0x32>
            TIM2->SR &= ~TIM_SR_UIF;
 800b0b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800b0ba:	f023 0301 	bic.w	r3, r3, #1
 800b0be:	6113      	str	r3, [r2, #16]
            Interrupt::InvokeHandler(TIM2_IRQn);
 800b0c0:	201c      	movs	r0, #28
 800b0c2:	f7f9 ffff 	bl	80050c4 <_ZN9Interrupt13InvokeHandlerEm>
        }
    }
 800b0c6:	bf00      	nop
 800b0c8:	bd80      	pop	{r7, pc}
	...

0800b0cc <TIM3_IRQHandler>:

    void TIM3_IRQHandler() {
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	af00      	add	r7, sp, #0
        if (TIM3->SR & TIM_SR_UIF) {
 800b0d0:	4b0a      	ldr	r3, [pc, #40]	@ (800b0fc <TIM3_IRQHandler+0x30>)
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	f003 0301 	and.w	r3, r3, #1
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	bf14      	ite	ne
 800b0dc:	2301      	movne	r3, #1
 800b0de:	2300      	moveq	r3, #0
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d008      	beq.n	800b0f8 <TIM3_IRQHandler+0x2c>
            TIM3->SR &= ~TIM_SR_UIF;
 800b0e6:	4b05      	ldr	r3, [pc, #20]	@ (800b0fc <TIM3_IRQHandler+0x30>)
 800b0e8:	691b      	ldr	r3, [r3, #16]
 800b0ea:	4a04      	ldr	r2, [pc, #16]	@ (800b0fc <TIM3_IRQHandler+0x30>)
 800b0ec:	f023 0301 	bic.w	r3, r3, #1
 800b0f0:	6113      	str	r3, [r2, #16]
            Interrupt::InvokeHandler(TIM3_IRQn);
 800b0f2:	201d      	movs	r0, #29
 800b0f4:	f7f9 ffe6 	bl	80050c4 <_ZN9Interrupt13InvokeHandlerEm>
        }
    }
 800b0f8:	bf00      	nop
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	40000400 	.word	0x40000400

0800b100 <TIM4_IRQHandler>:

    void TIM4_IRQHandler() {
 800b100:	b580      	push	{r7, lr}
 800b102:	af00      	add	r7, sp, #0
        if (TIM4->SR & TIM_SR_UIF) {
 800b104:	4b0a      	ldr	r3, [pc, #40]	@ (800b130 <TIM4_IRQHandler+0x30>)
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	f003 0301 	and.w	r3, r3, #1
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	bf14      	ite	ne
 800b110:	2301      	movne	r3, #1
 800b112:	2300      	moveq	r3, #0
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b00      	cmp	r3, #0
 800b118:	d008      	beq.n	800b12c <TIM4_IRQHandler+0x2c>
            TIM4->SR &= ~TIM_SR_UIF;
 800b11a:	4b05      	ldr	r3, [pc, #20]	@ (800b130 <TIM4_IRQHandler+0x30>)
 800b11c:	691b      	ldr	r3, [r3, #16]
 800b11e:	4a04      	ldr	r2, [pc, #16]	@ (800b130 <TIM4_IRQHandler+0x30>)
 800b120:	f023 0301 	bic.w	r3, r3, #1
 800b124:	6113      	str	r3, [r2, #16]
            Interrupt::InvokeHandler(TIM4_IRQn);
 800b126:	201e      	movs	r0, #30
 800b128:	f7f9 ffcc 	bl	80050c4 <_ZN9Interrupt13InvokeHandlerEm>
        }
    }
 800b12c:	bf00      	nop
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	40000800 	.word	0x40000800

0800b134 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	3304      	adds	r3, #4
 800b140:	4618      	mov	r0, r3
 800b142:	f000 feb4 	bl	800beae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4618      	mov	r0, r3
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <_ZNSt10shared_ptrI12CommsHandlerED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff ffea 	bl	800b134 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4618      	mov	r0, r3
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b082      	sub	sp, #8
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 ff6f 	bl	800c056 <_ZNSaISt10shared_ptrI6ModuleEED1Ev>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4618      	mov	r0, r3
 800b17c:	3708      	adds	r7, #8
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800b182:	b580      	push	{r7, lr}
 800b184:	b082      	sub	sp, #8
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4618      	mov	r0, r3
 800b18e:	f000 ff52 	bl	800c036 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4618      	mov	r0, r3
 800b196:	3708      	adds	r7, #8
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7ff ffeb 	bl	800b182 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b082      	sub	sp, #8
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	6039      	str	r1, [r7, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f000 ffa0 	bl	800c10c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b082      	sub	sp, #8
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
 800b1de:	6039      	str	r1, [r7, #0]
 800b1e0:	683a      	ldr	r2, [r7, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4611      	mov	r1, r2
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7ff ffe5 	bl	800b1b6 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b082      	sub	sp, #8
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
 800b1fe:	6039      	str	r1, [r7, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	683a      	ldr	r2, [r7, #0]
 800b204:	4611      	mov	r1, r2
 800b206:	4618      	mov	r0, r3
 800b208:	f001 f8bf 	bl	800c38a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4618      	mov	r0, r3
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 800b216:	b580      	push	{r7, lr}
 800b218:	b082      	sub	sp, #8
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
 800b21e:	6039      	str	r1, [r7, #0]
 800b220:	683a      	ldr	r2, [r7, #0]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4611      	mov	r1, r2
 800b226:	4618      	mov	r0, r3
 800b228:	f7ff ffe5 	bl	800b1f6 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4618      	mov	r0, r3
 800b230:	3708      	adds	r7, #8
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 800b236:	b580      	push	{r7, lr}
 800b238:	b082      	sub	sp, #8
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	3304      	adds	r3, #4
 800b242:	4618      	mov	r0, r3
 800b244:	f000 fe33 	bl	800beae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4618      	mov	r0, r3
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <_ZNSt10shared_ptrI6ModuleED1Ev>:
 800b252:	b580      	push	{r7, lr}
 800b254:	b082      	sub	sp, #8
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7ff ffea 	bl	800b236 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4618      	mov	r0, r3
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <_ZN6RemoraC1Ev>:

// unions for TX and RX data
__attribute__((section(".DmaSection"))) volatile txData_t txData;
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;

Remora::Remora() :
 800b26c:	b590      	push	{r4, r7, lr}
 800b26e:	b097      	sub	sp, #92	@ 0x5c
 800b270:	af02      	add	r7, sp, #8
 800b272:	6078      	str	r0, [r7, #4]
	baseFreq(Config::pruBaseFreq),
	servoFreq(Config::pruServoFreq),
	serialFreq(Config::pruSerialFreq)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	3310      	adds	r3, #16
 800b278:	4618      	mov	r0, r3
 800b27a:	f000 fe51 	bl	800bf20 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3314      	adds	r3, #20
 800b282:	4618      	mov	r0, r3
 800b284:	f000 fe7e 	bl	800bf84 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	331c      	adds	r3, #28
 800b28c:	4618      	mov	r0, r3
 800b28e:	f000 fea0 	bl	800bfd2 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	3320      	adds	r3, #32
 800b296:	4618      	mov	r0, r3
 800b298:	f000 fe9b 	bl	800bfd2 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	3324      	adds	r3, #36	@ 0x24
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f000 fe96 	bl	800bfd2 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3328      	adds	r3, #40	@ 0x28
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7ff ff76 	bl	800b19c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
	baseFreq(Config::pruBaseFreq),
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800b2b6:	635a      	str	r2, [r3, #52]	@ 0x34
	servoFreq(Config::pruServoFreq),
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b2be:	639a      	str	r2, [r3, #56]	@ 0x38
	serialFreq(Config::pruSerialFreq)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800b2c6:	63da      	str	r2, [r3, #60]	@ 0x3c
{
	threadsRunning = false;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	currentState = ST_SETUP;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	701a      	strb	r2, [r3, #0]
	prevState = ST_RESET;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2205      	movs	r2, #5
 800b2da:	705a      	strb	r2, [r3, #1]

	configHandler = std::make_unique<JsonConfigHandler>(this);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	613b      	str	r3, [r7, #16]
 800b2e0:	f107 030c 	add.w	r3, r7, #12
 800b2e4:	f107 0210 	add.w	r2, r7, #16
 800b2e8:	4611      	mov	r1, r2
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f000 fef3 	bl	800c0d6 <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	3310      	adds	r3, #16
 800b2f4:	f107 020c 	add.w	r2, r7, #12
 800b2f8:	4611      	mov	r1, r2
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7ff ff6b 	bl	800b1d6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 800b300:	f107 030c 	add.w	r3, r7, #12
 800b304:	4618      	mov	r0, r3
 800b306:	f000 fe1b 	bl	800bf40 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>

    ptrTxData = &txData;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a6c      	ldr	r2, [pc, #432]	@ (800b4c0 <_ZN6RemoraC1Ev+0x254>)
 800b30e:	605a      	str	r2, [r3, #4]
    ptrRxData = &rxData;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4a6c      	ldr	r2, [pc, #432]	@ (800b4c4 <_ZN6RemoraC1Ev+0x258>)
 800b314:	609a      	str	r2, [r3, #8]

	auto spiComms = std::make_unique<SPIComms>(ptrRxData, ptrTxData, SPI1);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f103 0108 	add.w	r1, r3, #8
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	1d1a      	adds	r2, r3, #4
 800b320:	4b69      	ldr	r3, [pc, #420]	@ (800b4c8 <_ZN6RemoraC1Ev+0x25c>)
 800b322:	617b      	str	r3, [r7, #20]
 800b324:	f107 0008 	add.w	r0, r7, #8
 800b328:	f107 0314 	add.w	r3, r7, #20
 800b32c:	f000 ff0a 	bl	800c144 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>

	comms = std::make_shared<CommsHandler>();
 800b330:	f107 0318 	add.w	r3, r7, #24
 800b334:	4618      	mov	r0, r3
 800b336:	f000 ff50 	bl	800c1da <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	3314      	adds	r3, #20
 800b33e:	f107 0218 	add.w	r2, r7, #24
 800b342:	4611      	mov	r1, r2
 800b344:	4618      	mov	r0, r3
 800b346:	f000 ff56 	bl	800c1f6 <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>
 800b34a:	f107 0318 	add.w	r3, r7, #24
 800b34e:	4618      	mov	r0, r3
 800b350:	f7ff fefe 	bl	800b150 <_ZNSt10shared_ptrI12CommsHandlerED1Ev>
	comms->setInterface(std::move(spiComms));
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	3314      	adds	r3, #20
 800b358:	4618      	mov	r0, r3
 800b35a:	f000 ff5f 	bl	800c21c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b35e:	4604      	mov	r4, r0
 800b360:	f107 0308 	add.w	r3, r7, #8
 800b364:	4618      	mov	r0, r3
 800b366:	f000 ff65 	bl	800c234 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800b36a:	4602      	mov	r2, r0
 800b36c:	f107 0320 	add.w	r3, r7, #32
 800b370:	4611      	mov	r1, r2
 800b372:	4618      	mov	r0, r3
 800b374:	f000 ff7a 	bl	800c26c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>
 800b378:	f107 0320 	add.w	r3, r7, #32
 800b37c:	4619      	mov	r1, r3
 800b37e:	4620      	mov	r0, r4
 800b380:	f7ff fe42 	bl	800b008 <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>
 800b384:	f107 0320 	add.w	r3, r7, #32
 800b388:	4618      	mov	r0, r3
 800b38a:	f000 ff8b 	bl	800c2a4 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
	comms->init();
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	3314      	adds	r3, #20
 800b392:	4618      	mov	r0, r3
 800b394:	f000 ff42 	bl	800c21c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b398:	4603      	mov	r3, r0
 800b39a:	4618      	mov	r0, r3
 800b39c:	f005 fa65 	bl	801086a <_ZN12CommsHandler4initEv>
	comms->start();
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	3314      	adds	r3, #20
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f000 ff39 	bl	800c21c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f005 fa8a 	bl	80108c6 <_ZN12CommsHandler5startEv>

    baseThread = make_unique<pruThread>(
    									"Base",
										TIM3,
 800b3b2:	4b46      	ldr	r3, [pc, #280]	@ (800b4cc <_ZN6RemoraC1Ev+0x260>)
 800b3b4:	62bb      	str	r3, [r7, #40]	@ 0x28
										TIM3_IRQn,
 800b3b6:	231d      	movs	r3, #29
 800b3b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
										baseFreq,
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	3334      	adds	r3, #52	@ 0x34
    baseThread = make_unique<pruThread>(
 800b3be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b3c2:	f107 012e 	add.w	r1, r7, #46	@ 0x2e
 800b3c6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800b3ca:	4c41      	ldr	r4, [pc, #260]	@ (800b4d0 <_ZN6RemoraC1Ev+0x264>)
 800b3cc:	9401      	str	r4, [sp, #4]
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	4940      	ldr	r1, [pc, #256]	@ (800b4d4 <_ZN6RemoraC1Ev+0x268>)
 800b3d4:	f000 ff88 	bl	800c2e8 <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::baseThreadIrqPriority
										);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	331c      	adds	r3, #28
 800b3dc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7ff ff17 	bl	800b216 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    baseThread = make_unique<pruThread>(
 800b3e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f000 fe00 	bl	800bff2 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    servoThread = make_unique<pruThread>(
    									"Servo",
										TIM2,
 800b3f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b3f6:	637b      	str	r3, [r7, #52]	@ 0x34
										TIM2_IRQn,
 800b3f8:	231c      	movs	r3, #28
 800b3fa:	877b      	strh	r3, [r7, #58]	@ 0x3a
										servoFreq,
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	3338      	adds	r3, #56	@ 0x38
    servoThread = make_unique<pruThread>(
 800b400:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800b404:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 800b408:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800b40c:	4c32      	ldr	r4, [pc, #200]	@ (800b4d8 <_ZN6RemoraC1Ev+0x26c>)
 800b40e:	9401      	str	r4, [sp, #4]
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	460b      	mov	r3, r1
 800b414:	4931      	ldr	r1, [pc, #196]	@ (800b4dc <_ZN6RemoraC1Ev+0x270>)
 800b416:	f000 ffd4 	bl	800c3c2 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::servoThreadIrqPriority
										);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	3320      	adds	r3, #32
 800b41e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800b422:	4611      	mov	r1, r2
 800b424:	4618      	mov	r0, r3
 800b426:	f7ff fef6 	bl	800b216 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    servoThread = make_unique<pruThread>(
 800b42a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b42e:	4618      	mov	r0, r3
 800b430:	f000 fddf 	bl	800bff2 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    serialThread = make_unique<pruThread>(
    									"Serial",
										TIM4,
 800b434:	4b2a      	ldr	r3, [pc, #168]	@ (800b4e0 <_ZN6RemoraC1Ev+0x274>)
 800b436:	643b      	str	r3, [r7, #64]	@ 0x40
										TIM4_IRQn,
 800b438:	231e      	movs	r3, #30
 800b43a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
										serialFreq,
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	333c      	adds	r3, #60	@ 0x3c
    serialThread = make_unique<pruThread>(
 800b442:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800b446:	f107 0146 	add.w	r1, r7, #70	@ 0x46
 800b44a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800b44e:	4c25      	ldr	r4, [pc, #148]	@ (800b4e4 <_ZN6RemoraC1Ev+0x278>)
 800b450:	9401      	str	r4, [sp, #4]
 800b452:	9300      	str	r3, [sp, #0]
 800b454:	460b      	mov	r3, r1
 800b456:	4924      	ldr	r1, [pc, #144]	@ (800b4e8 <_ZN6RemoraC1Ev+0x27c>)
 800b458:	f001 f804 	bl	800c464 <_ZSt11make_uniqueI9pruThreadJRA7_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::commsThreadIrqPriority
										);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	3324      	adds	r3, #36	@ 0x24
 800b460:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800b464:	4611      	mov	r1, r2
 800b466:	4618      	mov	r0, r3
 800b468:	f7ff fed5 	bl	800b216 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    serialThread = make_unique<pruThread>(
 800b46c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b470:	4618      	mov	r0, r3
 800b472:	f000 fdbe 	bl	800bff2 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>

    servoThread->registerModule(comms);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	3320      	adds	r3, #32
 800b47a:	4618      	mov	r0, r3
 800b47c:	f001 f843 	bl	800c506 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800b480:	4604      	mov	r4, r0
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f103 0214 	add.w	r2, r3, #20
 800b488:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b48c:	4611      	mov	r1, r2
 800b48e:	4618      	mov	r0, r3
 800b490:	f001 f845 	bl	800c51e <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>
 800b494:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b498:	4619      	mov	r1, r3
 800b49a:	4620      	mov	r0, r4
 800b49c:	f00f fc5c 	bl	801ad58 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800b4a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7ff fed4 	bl	800b252 <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 800b4aa:	f107 0308 	add.w	r3, r7, #8
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f000 fe71 	bl	800c196 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3754      	adds	r7, #84	@ 0x54
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd90      	pop	{r4, r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	30000080 	.word	0x30000080
 800b4c4:	300000c0 	.word	0x300000c0
 800b4c8:	40013000 	.word	0x40013000
 800b4cc:	40000400 	.word	0x40000400
 800b4d0:	0802b46c 	.word	0x0802b46c
 800b4d4:	0802a630 	.word	0x0802a630
 800b4d8:	0802b470 	.word	0x0802b470
 800b4dc:	0802a638 	.word	0x0802a638
 800b4e0:	40000800 	.word	0x40000800
 800b4e4:	0802b474 	.word	0x0802b474
 800b4e8:	0802a640 	.word	0x0802a640

0800b4ec <_ZN6Remora17transitionToStateENS_5StateE>:

void Remora::transitionToState(State newState) {
 800b4ec:	b5b0      	push	{r4, r5, r7, lr}
 800b4ee:	b08a      	sub	sp, #40	@ 0x28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	70fb      	strb	r3, [r7, #3]

    if (currentState != newState) {
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	78fa      	ldrb	r2, [r7, #3]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d021      	beq.n	800b546 <_ZN6Remora17transitionToStateENS_5StateE+0x5a>
        const char* stateNames[] = {
 800b502:	4b13      	ldr	r3, [pc, #76]	@ (800b550 <_ZN6Remora17transitionToStateENS_5StateE+0x64>)
 800b504:	f107 040c 	add.w	r4, r7, #12
 800b508:	461d      	mov	r5, r3
 800b50a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b50c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b50e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b512:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            "Setup", "Start", "Idle", "Running", "Stop", "Reset", "System Reset"
        };
        printf("\n## Transitioning from %s state to %s state\n",
               stateNames[currentState], stateNames[newState]);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	781b      	ldrb	r3, [r3, #0]
        printf("\n## Transitioning from %s state to %s state\n",
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	3328      	adds	r3, #40	@ 0x28
 800b51e:	443b      	add	r3, r7
 800b520:	f853 1c1c 	ldr.w	r1, [r3, #-28]
               stateNames[currentState], stateNames[newState]);
 800b524:	78fb      	ldrb	r3, [r7, #3]
        printf("\n## Transitioning from %s state to %s state\n",
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	3328      	adds	r3, #40	@ 0x28
 800b52a:	443b      	add	r3, r7
 800b52c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800b530:	461a      	mov	r2, r3
 800b532:	4808      	ldr	r0, [pc, #32]	@ (800b554 <_ZN6Remora17transitionToStateENS_5StateE+0x68>)
 800b534:	f01d ff8a 	bl	802944c <iprintf>

        prevState = currentState;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	781a      	ldrb	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	705a      	strb	r2, [r3, #1]
        currentState = newState;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	78fa      	ldrb	r2, [r7, #3]
 800b544:	701a      	strb	r2, [r3, #0]
    }
}
 800b546:	bf00      	nop
 800b548:	3728      	adds	r7, #40	@ 0x28
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bdb0      	pop	{r4, r5, r7, pc}
 800b54e:	bf00      	nop
 800b550:	0802a6b8 	.word	0x0802a6b8
 800b554:	0802a648 	.word	0x0802a648

0800b558 <_ZN6Remora16handleSetupStateEv>:

void Remora::handleSetupState() {
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	781a      	ldrb	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	785b      	ldrb	r3, [r3, #1]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d002      	beq.n	800b572 <_ZN6Remora16handleSetupStateEv+0x1a>
        printf("\n## Entering SETUP state\n");
 800b56c:	4808      	ldr	r0, [pc, #32]	@ (800b590 <_ZN6Remora16handleSetupStateEv+0x38>)
 800b56e:	f01d ffdd 	bl	802952c <puts>
    }
    prevState = currentState;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	781a      	ldrb	r2, [r3, #0]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	705a      	strb	r2, [r3, #1]

    loadModules();
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 f996 	bl	800b8ac <_ZN6Remora11loadModulesEv>
    transitionToState(ST_START);
 800b580:	2101      	movs	r1, #1
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7ff ffb2 	bl	800b4ec <_ZN6Remora17transitionToStateENS_5StateE>
}
 800b588:	bf00      	nop
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	0802a6d4 	.word	0x0802a6d4

0800b594 <_ZN6Remora16handleStartStateEv>:

void Remora::handleStartState() {
 800b594:	b580      	push	{r7, lr}
 800b596:	b086      	sub	sp, #24
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	781a      	ldrb	r2, [r3, #0]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	785b      	ldrb	r3, [r3, #1]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d002      	beq.n	800b5ae <_ZN6Remora16handleStartStateEv+0x1a>
        printf("\n## Entering START state\n");
 800b5a8:	482e      	ldr	r0, [pc, #184]	@ (800b664 <_ZN6Remora16handleStartStateEv+0xd0>)
 800b5aa:	f01d ffbf 	bl	802952c <puts>
    }
    prevState = currentState;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	781a      	ldrb	r2, [r3, #0]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	705a      	strb	r2, [r3, #1]

    for (const auto& module : onLoad) {
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	3328      	adds	r3, #40	@ 0x28
 800b5ba:	617b      	str	r3, [r7, #20]
 800b5bc:	6978      	ldr	r0, [r7, #20]
 800b5be:	f000 ffbe 	bl	800c53e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	60fb      	str	r3, [r7, #12]
 800b5c6:	6978      	ldr	r0, [r7, #20]
 800b5c8:	f000 ffc9 	bl	800c55e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	60bb      	str	r3, [r7, #8]
 800b5d0:	e01a      	b.n	800b608 <_ZN6Remora16handleStartStateEv+0x74>
 800b5d2:	f107 030c 	add.w	r3, r7, #12
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f000 fffb 	bl	800c5d2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 800b5dc:	6138      	str	r0, [r7, #16]
        if (module) {
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f001 f802 	bl	800c5ea <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d008      	beq.n	800b5fe <_ZN6Remora16handleStartStateEv+0x6a>
            module->configure();
 800b5ec:	6938      	ldr	r0, [r7, #16]
 800b5ee:	f001 f80d 	bl	800c60c <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	3214      	adds	r2, #20
 800b5f8:	6812      	ldr	r2, [r2, #0]
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	4790      	blx	r2
    for (const auto& module : onLoad) {
 800b5fe:	f107 030c 	add.w	r3, r7, #12
 800b602:	4618      	mov	r0, r3
 800b604:	f000 ffd4 	bl	800c5b0 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 800b608:	f107 0208 	add.w	r2, r7, #8
 800b60c:	f107 030c 	add.w	r3, r7, #12
 800b610:	4611      	mov	r1, r2
 800b612:	4618      	mov	r0, r3
 800b614:	f000 ffb4 	bl	800c580 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1d9      	bne.n	800b5d2 <_ZN6Remora16handleStartStateEv+0x3e>
        }
    }

    if (!threadsRunning) {
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b624:	f083 0301 	eor.w	r3, r3, #1
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d011      	beq.n	800b652 <_ZN6Remora16handleStartStateEv+0xbe>
        startThread(servoThread, "SERVO");
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	3320      	adds	r3, #32
 800b632:	4a0d      	ldr	r2, [pc, #52]	@ (800b668 <_ZN6Remora16handleStartStateEv+0xd4>)
 800b634:	4619      	mov	r1, r3
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 f8a8 	bl	800b78c <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        startThread(baseThread, "BASE");
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	331c      	adds	r3, #28
 800b640:	4a0a      	ldr	r2, [pc, #40]	@ (800b66c <_ZN6Remora16handleStartStateEv+0xd8>)
 800b642:	4619      	mov	r1, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 f8a1 	bl	800b78c <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>
        threadsRunning = true;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }

    transitionToState(ST_IDLE);
 800b652:	2102      	movs	r1, #2
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7ff ff49 	bl	800b4ec <_ZN6Remora17transitionToStateENS_5StateE>
}
 800b65a:	bf00      	nop
 800b65c:	3718      	adds	r7, #24
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	0802a6f0 	.word	0x0802a6f0
 800b668:	0802a70c 	.word	0x0802a70c
 800b66c:	0802a714 	.word	0x0802a714

0800b670 <_ZN6Remora15handleIdleStateEv>:

void Remora::handleIdleState() {
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	781a      	ldrb	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	785b      	ldrb	r3, [r3, #1]
 800b680:	429a      	cmp	r2, r3
 800b682:	d002      	beq.n	800b68a <_ZN6Remora15handleIdleStateEv+0x1a>
        printf("\n## Entering IDLE state\n");
 800b684:	480d      	ldr	r0, [pc, #52]	@ (800b6bc <_ZN6Remora15handleIdleStateEv+0x4c>)
 800b686:	f01d ff51 	bl	802952c <puts>
    }
    prevState = currentState;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	781a      	ldrb	r2, [r3, #0]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	705a      	strb	r2, [r3, #1]

    if (comms->getStatus()) {
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	3314      	adds	r3, #20
 800b696:	4618      	mov	r0, r3
 800b698:	f000 fdc0 	bl	800c21c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b69c:	4603      	mov	r3, r0
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7ff fcc5 	bl	800b02e <_ZNK12CommsHandler9getStatusEv>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d003      	beq.n	800b6b2 <_ZN6Remora15handleIdleStateEv+0x42>
        transitionToState(ST_RUNNING);
 800b6aa:	2103      	movs	r1, #3
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f7ff ff1d 	bl	800b4ec <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 800b6b2:	bf00      	nop
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	0802a71c 	.word	0x0802a71c

0800b6c0 <_ZN6Remora18handleRunningStateEv>:

void Remora::handleRunningState() {
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	781a      	ldrb	r2, [r3, #0]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	785b      	ldrb	r3, [r3, #1]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d002      	beq.n	800b6da <_ZN6Remora18handleRunningStateEv+0x1a>
        printf("\n## Entering RUNNING state\n");
 800b6d4:	4813      	ldr	r0, [pc, #76]	@ (800b724 <_ZN6Remora18handleRunningStateEv+0x64>)
 800b6d6:	f01d ff29 	bl	802952c <puts>
    }
    prevState = currentState;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	781a      	ldrb	r2, [r3, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	705a      	strb	r2, [r3, #1]

    if (!comms->getStatus()) {
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	3314      	adds	r3, #20
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f000 fd98 	bl	800c21c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7ff fc9d 	bl	800b02e <_ZNK12CommsHandler9getStatusEv>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	f083 0301 	eor.w	r3, r3, #1
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d003      	beq.n	800b708 <_ZN6Remora18handleRunningStateEv+0x48>
        transitionToState(ST_RESET);
 800b700:	2105      	movs	r1, #5
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f7ff fef2 	bl	800b4ec <_ZN6Remora17transitionToStateENS_5StateE>
    }

    if (reset) {
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	7b1b      	ldrb	r3, [r3, #12]
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d003      	beq.n	800b71a <_ZN6Remora18handleRunningStateEv+0x5a>
    	transitionToState(ST_SYSRESET);
 800b712:	2106      	movs	r1, #6
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7ff fee9 	bl	800b4ec <_ZN6Remora17transitionToStateENS_5StateE>
    }
}
 800b71a:	bf00      	nop
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	0802a734 	.word	0x0802a734

0800b728 <_ZN6Remora16handleResetStateEv>:

void Remora::handleResetState() {
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
    if (currentState != prevState) {
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	781a      	ldrb	r2, [r3, #0]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	785b      	ldrb	r3, [r3, #1]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d002      	beq.n	800b742 <_ZN6Remora16handleResetStateEv+0x1a>
        printf("\n## Entering RESET state\n");
 800b73c:	480c      	ldr	r0, [pc, #48]	@ (800b770 <_ZN6Remora16handleResetStateEv+0x48>)
 800b73e:	f01d fef5 	bl	802952c <puts>
    }
    prevState = currentState;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	781a      	ldrb	r2, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	705a      	strb	r2, [r3, #1]

    printf("   Resetting rxBuffer\n");
 800b74a:	480a      	ldr	r0, [pc, #40]	@ (800b774 <_ZN6Remora16handleResetStateEv+0x4c>)
 800b74c:	f01d feee 	bl	802952c <puts>
    resetBuffer(ptrRxData->rxBuffer, Config::dataBuffSize);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	2240      	movs	r2, #64	@ 0x40
 800b756:	4619      	mov	r1, r3
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 f82f 	bl	800b7bc <_ZN6Remora11resetBufferEPVhj>
    transitionToState(ST_IDLE);
 800b75e:	2102      	movs	r1, #2
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f7ff fec3 	bl	800b4ec <_ZN6Remora17transitionToStateENS_5StateE>
}
 800b766:	bf00      	nop
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	0802a750 	.word	0x0802a750
 800b774:	0802a76c 	.word	0x0802a76c

0800b778 <_ZN6Remora19handleSysResetStateEv>:

void Remora::handleSysResetState() {
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
	HAL_NVIC_SystemReset();
 800b780:	f010 fbe1 	bl	801bf46 <HAL_NVIC_SystemReset>
}
 800b784:	bf00      	nop
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc>:

void Remora::startThread(const std::unique_ptr<pruThread>& thread, const char* name) {
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	607a      	str	r2, [r7, #4]
    printf("Starting the %s thread\n", name);
 800b798:	6879      	ldr	r1, [r7, #4]
 800b79a:	4807      	ldr	r0, [pc, #28]	@ (800b7b8 <_ZN6Remora11startThreadERKSt10unique_ptrI9pruThreadSt14default_deleteIS1_EEPKc+0x2c>)
 800b79c:	f01d fe56 	bl	802944c <iprintf>
    thread->startThread();
 800b7a0:	68b8      	ldr	r0, [r7, #8]
 800b7a2:	f000 feb0 	bl	800c506 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f00f fb69 	bl	801ae80 <_ZN9pruThread11startThreadEv>
}
 800b7ae:	bf00      	nop
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	0802a784 	.word	0x0802a784

0800b7bc <_ZN6Remora11resetBufferEPVhj>:

void Remora::resetBuffer(volatile uint8_t* buffer, size_t size) {
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
    memset((void*)buffer, 0, size);
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	68b8      	ldr	r0, [r7, #8]
 800b7ce:	f01d ffb7 	bl	8029740 <memset>
}
 800b7d2:	bf00      	nop
 800b7d4:	3710      	adds	r7, #16
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
	...

0800b7dc <_ZN6Remora3runEv>:

void Remora::run() {
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
    while (true) {
        switch (currentState) {
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	2b06      	cmp	r3, #6
 800b7ea:	d829      	bhi.n	800b840 <_ZN6Remora3runEv+0x64>
 800b7ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b7f4 <_ZN6Remora3runEv+0x18>)
 800b7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f2:	bf00      	nop
 800b7f4:	0800b811 	.word	0x0800b811
 800b7f8:	0800b819 	.word	0x0800b819
 800b7fc:	0800b821 	.word	0x0800b821
 800b800:	0800b829 	.word	0x0800b829
 800b804:	0800b841 	.word	0x0800b841
 800b808:	0800b831 	.word	0x0800b831
 800b80c:	0800b839 	.word	0x0800b839
            case ST_SETUP:
                handleSetupState();
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f7ff fea1 	bl	800b558 <_ZN6Remora16handleSetupStateEv>
                break;
 800b816:	e017      	b.n	800b848 <_ZN6Remora3runEv+0x6c>
            case ST_START:
                handleStartState();
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f7ff febb 	bl	800b594 <_ZN6Remora16handleStartStateEv>
                break;
 800b81e:	e013      	b.n	800b848 <_ZN6Remora3runEv+0x6c>
            case ST_IDLE:
                handleIdleState();
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f7ff ff25 	bl	800b670 <_ZN6Remora15handleIdleStateEv>
                break;
 800b826:	e00f      	b.n	800b848 <_ZN6Remora3runEv+0x6c>
            case ST_RUNNING:
                handleRunningState();
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f7ff ff49 	bl	800b6c0 <_ZN6Remora18handleRunningStateEv>
                break;
 800b82e:	e00b      	b.n	800b848 <_ZN6Remora3runEv+0x6c>
            case ST_RESET:
                handleResetState();
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7ff ff79 	bl	800b728 <_ZN6Remora16handleResetStateEv>
                break;
 800b836:	e007      	b.n	800b848 <_ZN6Remora3runEv+0x6c>
            case ST_SYSRESET:
                handleSysResetState();
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f7ff ff9d 	bl	800b778 <_ZN6Remora19handleSysResetStateEv>
                break;
 800b83e:	e003      	b.n	800b848 <_ZN6Remora3runEv+0x6c>
            default:
                printf("Error: Invalid state\n");
 800b840:	4806      	ldr	r0, [pc, #24]	@ (800b85c <_ZN6Remora3runEv+0x80>)
 800b842:	f01d fe73 	bl	802952c <puts>
                break;
 800b846:	bf00      	nop
        }
        comms->tasks();
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	3314      	adds	r3, #20
 800b84c:	4618      	mov	r0, r3
 800b84e:	f000 fce5 	bl	800c21c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800b852:	4603      	mov	r3, r0
 800b854:	4618      	mov	r0, r3
 800b856:	f005 f849 	bl	80108ec <_ZN12CommsHandler5tasksEv>
        switch (currentState) {
 800b85a:	e7c3      	b.n	800b7e4 <_ZN6Remora3runEv+0x8>
 800b85c:	0802a79c 	.word	0x0802a79c

0800b860 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	601a      	str	r2, [r3, #0]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	1d1a      	adds	r2, r3, #4
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	3304      	adds	r3, #4
 800b87a:	4619      	mov	r1, r3
 800b87c:	4610      	mov	r0, r2
 800b87e:	f000 ff16 	bl	800c6ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	4618      	mov	r0, r3
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	683a      	ldr	r2, [r7, #0]
 800b89a:	4611      	mov	r1, r2
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7ff ffdf 	bl	800b860 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <_ZN6Remora11loadModulesEv>:
    }
}

void Remora::loadModules() {
 800b8ac:	b5b0      	push	{r4, r5, r7, lr}
 800b8ae:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800b8b2:	af04      	add	r7, sp, #16
 800b8b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b8b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b8bc:	6018      	str	r0, [r3, #0]
    ModuleFactory* factory = ModuleFactory::getInstance();
 800b8be:	f006 fc8d 	bl	80121dc <_ZN13ModuleFactory11getInstanceEv>
 800b8c2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
    JsonArray modules = configHandler->getModules();
 800b8c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b8ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	3310      	adds	r3, #16
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f000 fea6 	bl	800c624 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b8de:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800b8e2:	4611      	mov	r1, r2
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fb fbed 	bl	80070c4 <_ZN17JsonConfigHandler10getModulesEv>
    if (modules.isNull()) {
 800b8ea:	f107 0318 	add.w	r3, r7, #24
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7ff fa36 	bl	800ad60 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>
      //printf something here
    }

    for (size_t i = 0; i < modules.size(); i++) {
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800b8fa:	e266      	b.n	800bdca <_ZN6Remora11loadModulesEv+0x51e>
    	if (modules[i]["Thread"].is<const char*>() && modules[i]["Type"].is<const char*>()) {
 800b8fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b900:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800b904:	f107 0118 	add.w	r1, r7, #24
 800b908:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800b90c:	4618      	mov	r0, r3
 800b90e:	f000 fe95 	bl	800c63c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800b912:	f107 0420 	add.w	r4, r7, #32

template <typename TDerived>
template <typename TString, enable_if_t<IsString<TString>::value, int>>
inline MemberProxy<TDerived, AdaptedString<TString>>
VariantRefBase<TDerived>::operator[](const TString& key) const {
  return {derived(), adaptString(key)};
 800b916:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b91a:	4618      	mov	r0, r3
 800b91c:	f001 fb79 	bl	800d012 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800b920:	4602      	mov	r2, r0
 800b922:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800b926:	4611      	mov	r1, r2
 800b928:	4618      	mov	r0, r3
 800b92a:	f001 fb7d 	bl	800d028 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800b92e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800b932:	49c3      	ldr	r1, [pc, #780]	@ (800bc40 <_ZN6Remora11loadModulesEv+0x394>)
 800b934:	4618      	mov	r0, r3
 800b936:	f7fc fc58 	bl	80081ea <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800b93a:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 800b93e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800b942:	9300      	str	r3, [sp, #0]
 800b944:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800b948:	cb0c      	ldmia	r3, {r2, r3}
 800b94a:	4620      	mov	r0, r4
 800b94c:	f001 fb84 	bl	800d058 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800b950:	f107 0320 	add.w	r3, r7, #32
 800b954:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 800b958:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800b95c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800b960:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 800b964:	f002 f8df 	bl	800db26 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800b968:	4604      	mov	r4, r0
 800b96a:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 800b96e:	f002 f8ea 	bl	800db46 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800b972:	4602      	mov	r2, r0
 800b974:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b978:	4621      	mov	r1, r4
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7fa f851 	bl	8005a22 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800b980:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 800b982:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800b986:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b98a:	f7ff fb02 	bl	800af92 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 800b98e:	4603      	mov	r3, r0
 800b990:	bf00      	nop
 800b992:	2b00      	cmp	r3, #0
 800b994:	d04e      	beq.n	800ba34 <_ZN6Remora11loadModulesEv+0x188>
 800b996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800b99a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800b99e:	f107 0118 	add.w	r1, r7, #24
 800b9a2:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 fe48 	bl	800c63c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800b9ac:	f107 0450 	add.w	r4, r7, #80	@ 0x50
  return {derived(), adaptString(key)};
 800b9b0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f001 fb2c 	bl	800d012 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f001 fb30 	bl	800d028 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800b9c8:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800b9cc:	499d      	ldr	r1, [pc, #628]	@ (800bc44 <_ZN6Remora11loadModulesEv+0x398>)
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f001 fb61 	bl	800d096 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800b9d4:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 800b9d8:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800b9dc:	9300      	str	r3, [sp, #0]
 800b9de:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800b9e2:	cb0c      	ldmia	r3, {r2, r3}
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	f001 fb37 	bl	800d058 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800b9ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800b9ee:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800b9f2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800b9f6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800b9fa:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 800b9fe:	f002 f892 	bl	800db26 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800ba02:	4604      	mov	r4, r0
 800ba04:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 800ba08:	f002 f89d 	bl	800db46 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800ba12:	4621      	mov	r1, r4
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fa f804 	bl	8005a22 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800ba1a:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 800ba1c:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800ba20:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ba24:	f7ff fab5 	bl	800af92 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	bf00      	nop
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d001      	beq.n	800ba34 <_ZN6Remora11loadModulesEv+0x188>
 800ba30:	2301      	movs	r3, #1
 800ba32:	e000      	b.n	800ba36 <_ZN6Remora11loadModulesEv+0x18a>
 800ba34:	2300      	movs	r3, #0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	f000 81c2 	beq.w	800bdc0 <_ZN6Remora11loadModulesEv+0x514>
            const char* threadName = modules[i]["Thread"];
 800ba3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800ba40:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800ba44:	f107 0118 	add.w	r1, r7, #24
 800ba48:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f000 fdf5 	bl	800c63c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800ba52:	f107 0480 	add.w	r4, r7, #128	@ 0x80
  return {derived(), adaptString(key)};
 800ba56:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f001 fad9 	bl	800d012 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800ba60:	4602      	mov	r2, r0
 800ba62:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800ba66:	4611      	mov	r1, r2
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f001 fadd 	bl	800d028 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800ba6e:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 800ba72:	4973      	ldr	r1, [pc, #460]	@ (800bc40 <_ZN6Remora11loadModulesEv+0x394>)
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fc fbb8 	bl	80081ea <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800ba7a:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 800ba7e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800ba82:	9300      	str	r3, [sp, #0]
 800ba84:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 800ba88:	cb0c      	ldmia	r3, {r2, r3}
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f001 fae4 	bl	800d058 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800ba90:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 fde1 	bl	800c65c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800ba9a:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
            const char* moduleType = modules[i]["Type"];
 800ba9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800baa2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800baa6:	f107 0118 	add.w	r1, r7, #24
 800baaa:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 fdc4 	bl	800c63c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800bab4:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 800bab8:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800babc:	4618      	mov	r0, r3
 800babe:	f001 faa8 	bl	800d012 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800bac2:	4602      	mov	r2, r0
 800bac4:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 800bac8:	4611      	mov	r1, r2
 800baca:	4618      	mov	r0, r3
 800bacc:	f001 faac 	bl	800d028 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800bad0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800bad4:	495b      	ldr	r1, [pc, #364]	@ (800bc44 <_ZN6Remora11loadModulesEv+0x398>)
 800bad6:	4618      	mov	r0, r3
 800bad8:	f001 fadd 	bl	800d096 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800badc:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 800bae0:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800baea:	cb0c      	ldmia	r3, {r2, r3}
 800baec:	4620      	mov	r0, r4
 800baee:	f001 fab3 	bl	800d058 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800baf2:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800baf6:	4618      	mov	r0, r3
 800baf8:	f000 fdb0 	bl	800c65c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800bafc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
            uint32_t threadFreq = 0;
 800bb00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bb04:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800bb08:	2200      	movs	r2, #0
 800bb0a:	601a      	str	r2, [r3, #0]

            // Determine the thread frequency based on the thread name
            if (strcmp(threadName, "Servo") == 0) {
 800bb0c:	494e      	ldr	r1, [pc, #312]	@ (800bc48 <_ZN6Remora11loadModulesEv+0x39c>)
 800bb0e:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800bb12:	f7f4 fbe5 	bl	80002e0 <strcmp>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10b      	bne.n	800bb34 <_ZN6Remora11loadModulesEv+0x288>
                threadFreq = servoFreq;
 800bb1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bb20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bb2c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800bb30:	601a      	str	r2, [r3, #0]
 800bb32:	e012      	b.n	800bb5a <_ZN6Remora11loadModulesEv+0x2ae>
            } else if (strcmp(threadName, "Base") == 0) {
 800bb34:	4945      	ldr	r1, [pc, #276]	@ (800bc4c <_ZN6Remora11loadModulesEv+0x3a0>)
 800bb36:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800bb3a:	f7f4 fbd1 	bl	80002e0 <strcmp>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10a      	bne.n	800bb5a <_ZN6Remora11loadModulesEv+0x2ae>
                threadFreq = baseFreq;
 800bb44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bb48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bb54:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800bb58:	601a      	str	r2, [r3, #0]
            }

            // Add the "ThreadFreq" key and its value to the module's JSON object
            modules[i]["ThreadFreq"] = threadFreq;
 800bb5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bb5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb62:	f107 0118 	add.w	r1, r7, #24
 800bb66:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f000 fd66 	bl	800c63c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800bb70:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 800bb74:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f001 fa4a 	bl	800d012 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 800bb84:	4611      	mov	r1, r2
 800bb86:	4618      	mov	r0, r3
 800bb88:	f001 fa4e 	bl	800d028 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800bb8c:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800bb90:	492f      	ldr	r1, [pc, #188]	@ (800bc50 <_ZN6Remora11loadModulesEv+0x3a4>)
 800bb92:	4618      	mov	r0, r3
 800bb94:	f001 fab4 	bl	800d100 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800bb98:	f507 71ea 	add.w	r1, r7, #468	@ 0x1d4
 800bb9c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800bba6:	cb0c      	ldmia	r3, {r2, r3}
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f001 fa55 	bl	800d058 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800bbae:	f107 0214 	add.w	r2, r7, #20
 800bbb2:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f000 fd5b 	bl	800c674 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>

            // Create module using factory
            std::shared_ptr<Module> _mod = factory->createModule(threadName, moduleType, modules[i], this);
 800bbbe:	f8d7 5200 	ldr.w	r5, [r7, #512]	@ 0x200
 800bbc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800bbc6:	f107 0118 	add.w	r1, r7, #24
 800bbca:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 fd34 	bl	800c63c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800bbd4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bbd8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800bbdc:	4611      	mov	r1, r2
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f000 fd56 	bl	800c690 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>
 800bbe4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bbe8:	f5a3 74fe 	sub.w	r4, r3, #508	@ 0x1fc
 800bbec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bbf0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	9302      	str	r3, [sp, #8]
 800bbf8:	466a      	mov	r2, sp
 800bbfa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800bbfe:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bc02:	e882 0003 	stmia.w	r2, {r0, r1}
 800bc06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800bc0a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 800bc0e:	4629      	mov	r1, r5
 800bc10:	4620      	mov	r0, r4
 800bc12:	f006 f9f1 	bl	8011ff8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora>

            // Check if the module creation was successful
            if (!_mod) {
 800bc16:	f107 030c 	add.w	r3, r7, #12
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f000 fce5 	bl	800c5ea <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 800bc20:	4603      	mov	r3, r0
 800bc22:	f083 0301 	eor.w	r3, r3, #1
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d015      	beq.n	800bc58 <_ZN6Remora11loadModulesEv+0x3ac>
            	printf("Error: Failed to create module of type '%s' for thread '%s'. Skipping registration.\n",
 800bc2c:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 800bc30:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 800bc34:	4807      	ldr	r0, [pc, #28]	@ (800bc54 <_ZN6Remora11loadModulesEv+0x3a8>)
 800bc36:	f01d fc09 	bl	802944c <iprintf>
						moduleType, threadName);
				continue; // Skip to the next iteration
 800bc3a:	2400      	movs	r4, #0
 800bc3c:	e0ba      	b.n	800bdb4 <_ZN6Remora11loadModulesEv+0x508>
 800bc3e:	bf00      	nop
 800bc40:	0802a7b4 	.word	0x0802a7b4
 800bc44:	0802a7bc 	.word	0x0802a7bc
 800bc48:	0802a638 	.word	0x0802a638
 800bc4c:	0802a630 	.word	0x0802a630
 800bc50:	0802a7c4 	.word	0x0802a7c4
 800bc54:	0802a7d0 	.word	0x0802a7d0
			}

            bool _modPost = _mod->getUsesModulePost();
 800bc58:	f107 030c 	add.w	r3, r7, #12
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f000 fcd5 	bl	800c60c <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 800bc62:	4603      	mov	r3, r0
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	3218      	adds	r2, #24
 800bc68:	6812      	ldr	r2, [r2, #0]
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	4790      	blx	r2
 800bc6e:	4603      	mov	r3, r0
 800bc70:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7

            if (strcmp(threadName, "Servo") == 0) {
 800bc74:	4960      	ldr	r1, [pc, #384]	@ (800bdf8 <_ZN6Remora11loadModulesEv+0x54c>)
 800bc76:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800bc7a:	f7f4 fb31 	bl	80002e0 <strcmp>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d13e      	bne.n	800bd02 <_ZN6Remora11loadModulesEv+0x456>
                servoThread->registerModule(_mod);
 800bc84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bc88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	3320      	adds	r3, #32
 800bc90:	4618      	mov	r0, r3
 800bc92:	f000 fc38 	bl	800c506 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800bc96:	4604      	mov	r4, r0
 800bc98:	f107 020c 	add.w	r2, r7, #12
 800bc9c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800bca0:	4611      	mov	r1, r2
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7ff fdf2 	bl	800b88c <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800bca8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800bcac:	4619      	mov	r1, r3
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f00f f852 	bl	801ad58 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800bcb4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7ff faca 	bl	800b252 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 800bcbe:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d075      	beq.n	800bdb2 <_ZN6Remora11loadModulesEv+0x506>
            		servoThread->registerModulePost(_mod);
 800bcc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bcca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	3320      	adds	r3, #32
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f000 fc17 	bl	800c506 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800bcd8:	4604      	mov	r4, r0
 800bcda:	f107 020c 	add.w	r2, r7, #12
 800bcde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bce2:	4611      	mov	r1, r2
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7ff fdd1 	bl	800b88c <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800bcea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bcee:	4619      	mov	r1, r3
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f00f f84d 	bl	801ad90 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 800bcf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7ff faa9 	bl	800b252 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800bd00:	e057      	b.n	800bdb2 <_ZN6Remora11loadModulesEv+0x506>
            	}
            }
            else if (strcmp(threadName, "Base") == 0) {
 800bd02:	493e      	ldr	r1, [pc, #248]	@ (800bdfc <_ZN6Remora11loadModulesEv+0x550>)
 800bd04:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800bd08:	f7f4 faea 	bl	80002e0 <strcmp>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d13e      	bne.n	800bd90 <_ZN6Remora11loadModulesEv+0x4e4>
                baseThread->registerModule(_mod);
 800bd12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bd16:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	331c      	adds	r3, #28
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f000 fbf1 	bl	800c506 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800bd24:	4604      	mov	r4, r0
 800bd26:	f107 020c 	add.w	r2, r7, #12
 800bd2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bd2e:	4611      	mov	r1, r2
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff fdab 	bl	800b88c <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800bd36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f00f f80b 	bl	801ad58 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 800bd42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7ff fa83 	bl	800b252 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 800bd4c:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d02e      	beq.n	800bdb2 <_ZN6Remora11loadModulesEv+0x506>
            		baseThread->registerModulePost(_mod);
 800bd54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bd58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	331c      	adds	r3, #28
 800bd60:	4618      	mov	r0, r3
 800bd62:	f000 fbd0 	bl	800c506 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 800bd66:	4604      	mov	r4, r0
 800bd68:	f107 020c 	add.w	r2, r7, #12
 800bd6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd70:	4611      	mov	r1, r2
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7ff fd8a 	bl	800b88c <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 800bd78:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	4620      	mov	r0, r4
 800bd80:	f00f f806 	bl	801ad90 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 800bd84:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7ff fa62 	bl	800b252 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800bd8e:	e010      	b.n	800bdb2 <_ZN6Remora11loadModulesEv+0x506>
            	}
            }
            else {
                onLoad.push_back(move(_mod));
 800bd90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800bd94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800bd9e:	f107 030c 	add.w	r3, r7, #12
 800bda2:	4618      	mov	r0, r3
 800bda4:	f000 fc9a 	bl	800c6dc <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	4619      	mov	r1, r3
 800bdac:	4620      	mov	r0, r4
 800bdae:	f000 fca0 	bl	800c6f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backEOS2_>
            }
        }
 800bdb2:	2401      	movs	r4, #1
 800bdb4:	f107 030c 	add.w	r3, r7, #12
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7ff fa4a 	bl	800b252 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800bdbe:	2c01      	cmp	r4, #1
    for (size_t i = 0; i < modules.size(); i++) {
 800bdc0:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800bdca:	f107 0318 	add.w	r3, r7, #24
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fe ffd7 	bl	800ad82 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800bdda:	4293      	cmp	r3, r2
 800bddc:	bf34      	ite	cc
 800bdde:	2301      	movcc	r3, #1
 800bde0:	2300      	movcs	r3, #0
 800bde2:	b2db      	uxtb	r3, r3
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f47f ad89 	bne.w	800b8fc <_ZN6Remora11loadModulesEv+0x50>
    }

}
 800bdea:	bf00      	nop
 800bdec:	bf00      	nop
 800bdee:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bdb0      	pop	{r4, r5, r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	0802a638 	.word	0x0802a638
 800bdfc:	0802a630 	.word	0x0802a630

0800be00 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
      { delete this; }
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d005      	beq.n	800be1a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	3304      	adds	r3, #4
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	4798      	blx	r3
 800be1a:	bf00      	nop
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800be22:	b480      	push	{r7}
 800be24:	b083      	sub	sp, #12
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681a      	ldr	r2, [r3, #0]
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	429a      	cmp	r2, r3
 800be36:	d201      	bcs.n	800be3c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	e000      	b.n	800be3e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800be3c:	687b      	ldr	r3, [r7, #4]
    }
 800be3e:	4618      	mov	r0, r3
 800be40:	370c      	adds	r7, #12
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>:
  ~MemoryPoolList() {
 800be4a:	b480      	push	{r7}
 800be4c:	b083      	sub	sp, #12
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  }
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	4618      	mov	r0, r3
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4618      	mov	r0, r3
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800be76:	b580      	push	{r7, lr}
 800be78:	b082      	sub	sp, #8
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
 800be7e:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800be80:	6838      	ldr	r0, [r7, #0]
 800be82:	f000 fcbd 	bl	800c800 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>
 800be86:	4603      	mov	r3, r0
 800be88:	4619      	mov	r1, r3
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 fc98 	bl	800c7c0 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800be90:	6838      	ldr	r0, [r7, #0]
 800be92:	f000 fcca 	bl	800c82a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800be96:	4603      	mov	r3, r0
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 fcd3 	bl	800c844 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 fcc3 	bl	800c82a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800bea4:	687b      	ldr	r3, [r7, #4]
      }
 800bea6:	4618      	mov	r0, r3
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 800beae:	b580      	push	{r7, lr}
 800beb0:	b082      	sub	sp, #8
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d004      	beq.n	800bec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7fe fdd3 	bl	800aa6e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4618      	mov	r0, r3
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>:
      }

      /// Return the stored pointer.
      _GLIBCXX23_CONSTEXPR
      pointer
      get() const noexcept
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b082      	sub	sp, #8
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4618      	mov	r0, r3
 800bede:	f000 fcbc 	bl	800c85a <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800bee2:	4603      	mov	r3, r0
 800bee4:	4618      	mov	r0, r3
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4618      	mov	r0, r3
 800bef8:	f000 fcbd 	bl	800c876 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4618      	mov	r0, r3
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b082      	sub	sp, #8
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7ff ffeb 	bl	800beec <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
	: _M_t()
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	601a      	str	r2, [r3, #0]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7ff ffe8 	bl	800bf06 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3708      	adds	r7, #8
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800bf40:	b590      	push	{r4, r7, lr}
 800bf42:	b085      	sub	sp, #20
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f000 fca0 	bl	800c890 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800bf50:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00c      	beq.n	800bf74 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 fca5 	bl	800c8aa <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>
 800bf60:	4604      	mov	r4, r0
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f000 fcae 	bl	800c8c4 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	4620      	mov	r0, r4
 800bf70:	f000 fcc6 	bl	800c900 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
	__ptr = pointer();
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2200      	movs	r2, #0
 800bf78:	601a      	str	r2, [r3, #0]
      }
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd90      	pop	{r4, r7, pc}

0800bf84 <_ZNSt10shared_ptrI12CommsHandlerEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f000 fcc9 	bl	800c926 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4618      	mov	r0, r3
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b082      	sub	sp, #8
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f000 fccd 	bl	800c948 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3708      	adds	r7, #8
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7ff ffeb 	bl	800bf9e <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b082      	sub	sp, #8
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
	: _M_t()
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	601a      	str	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7ff ffe8 	bl	800bfb8 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4618      	mov	r0, r3
 800bfec:	3708      	adds	r7, #8
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800bff2:	b590      	push	{r4, r7, lr}
 800bff4:	b085      	sub	sp, #20
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 fcb0 	bl	800c962 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800c002:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00c      	beq.n	800c026 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 fcb5 	bl	800c97c <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>
 800c012:	4604      	mov	r4, r0
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f000 fcbe 	bl	800c996 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>
 800c01a:	4603      	mov	r3, r0
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4619      	mov	r1, r3
 800c020:	4620      	mov	r0, r4
 800c022:	f000 fcda 	bl	800c9da <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
	__ptr = pointer();
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	601a      	str	r2, [r3, #0]
      }
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4618      	mov	r0, r3
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	bd90      	pop	{r4, r7, pc}

0800c036 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c036:	b580      	push	{r7, lr}
 800c038:	b082      	sub	sp, #8
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 fcde 	bl	800ca00 <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4618      	mov	r0, r3
 800c048:	f000 fce6 	bl	800ca18 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4618      	mov	r0, r3
 800c050:	3708      	adds	r7, #8
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <_ZNSaISt10shared_ptrI6ModuleEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800c056:	b580      	push	{r7, lr}
 800c058:	b082      	sub	sp, #8
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 fcee 	bl	800ca40 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4618      	mov	r0, r3
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800c06e:	b580      	push	{r7, lr}
 800c070:	b082      	sub	sp, #8
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	689a      	ldr	r2, [r3, #8]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800c086:	461a      	mov	r2, r3
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 fce4 	bl	800ca56 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      }
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4618      	mov	r0, r3
 800c092:	f7ff f86a 	bl	800b16a <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4618      	mov	r0, r3
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 800c0a0:	b5b0      	push	{r4, r5, r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681c      	ldr	r4, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f000 fce2 	bl	800ca7c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800c0b8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	4629      	mov	r1, r5
 800c0be:	4620      	mov	r0, r4
 800c0c0:	f000 fce7 	bl	800ca92 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7ff ffd1 	bl	800c06e <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3708      	adds	r7, #8
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bdb0      	pop	{r4, r5, r7, pc}

0800c0d6 <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 800c0d6:	b590      	push	{r4, r7, lr}
 800c0d8:	b083      	sub	sp, #12
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c0e0:	206c      	movs	r0, #108	@ 0x6c
 800c0e2:	f01c fb09 	bl	80286f8 <_Znwj>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	461c      	mov	r4, r3
 800c0ea:	6838      	ldr	r0, [r7, #0]
 800c0ec:	f000 fcdf 	bl	800caae <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f7fa fed6 	bl	8006ea8 <_ZN17JsonConfigHandlerC1EP6Remora>
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fcf0 	bl	800cae4 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd90      	pop	{r4, r7, pc}

0800c10c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800c116:	6838      	ldr	r0, [r7, #0]
 800c118:	f000 fd13 	bl	800cb42 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>
 800c11c:	4603      	mov	r3, r0
 800c11e:	4619      	mov	r1, r3
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fcee 	bl	800cb02 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800c126:	6838      	ldr	r0, [r7, #0]
 800c128:	f000 fd20 	bl	800cb6c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800c12c:	4603      	mov	r3, r0
 800c12e:	4618      	mov	r0, r3
 800c130:	f000 fd29 	bl	800cb86 <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 fd19 	bl	800cb6c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800c13a:	687b      	ldr	r3, [r7, #4]
      }
 800c13c:	4618      	mov	r0, r3
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
 800c150:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c152:	f44f 7011 	mov.w	r0, #580	@ 0x244
 800c156:	f01c facf 	bl	80286f8 <_Znwj>
 800c15a:	4603      	mov	r3, r0
 800c15c:	461e      	mov	r6, r3
 800c15e:	68b8      	ldr	r0, [r7, #8]
 800c160:	f000 fd1c 	bl	800cb9c <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 800c164:	4603      	mov	r3, r0
 800c166:	681c      	ldr	r4, [r3, #0]
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f000 fd22 	bl	800cbb2 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 800c16e:	4603      	mov	r3, r0
 800c170:	681d      	ldr	r5, [r3, #0]
 800c172:	6838      	ldr	r0, [r7, #0]
 800c174:	f000 fd28 	bl	800cbc8 <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800c178:	4603      	mov	r3, r0
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	462a      	mov	r2, r5
 800c17e:	4621      	mov	r1, r4
 800c180:	4630      	mov	r0, r6
 800c182:	f7f4 fe1b 	bl	8000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 800c186:	4631      	mov	r1, r6
 800c188:	68f8      	ldr	r0, [r7, #12]
 800c18a:	f000 fd38 	bl	800cbfe <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c18e:	68f8      	ldr	r0, [r7, #12]
 800c190:	3714      	adds	r7, #20
 800c192:	46bd      	mov	sp, r7
 800c194:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c196 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800c196:	b590      	push	{r4, r7, lr}
 800c198:	b085      	sub	sp, #20
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f000 fd3b 	bl	800cc1c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800c1a6:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d00c      	beq.n	800c1ca <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 fd40 	bl	800cc36 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	68f8      	ldr	r0, [r7, #12]
 800c1ba:	f000 fd49 	bl	800cc50 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	f000 fd4e 	bl	800cc66 <_ZNKSt14default_deleteI8SPICommsEclEPS0_>
	__ptr = pointer();
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	601a      	str	r2, [r3, #0]
      }
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3714      	adds	r7, #20
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd90      	pop	{r4, r7, pc}

0800c1da <_ZSt11make_sharedI12CommsHandlerJEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueES4_E4typeEEDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_NonArray<_Tp>>
    make_shared(_Args&&... __args)
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b084      	sub	sp, #16
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
    {
      using _Alloc = allocator<void>;
      _Alloc __a;
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
			     std::forward<_Args>(__args)...);
 800c1e2:	f107 030c 	add.w	r3, r7, #12
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 fd4d 	bl	800cc88 <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <_ZNSt10shared_ptrI12CommsHandlerEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 800c1f6:	b590      	push	{r4, r7, lr}
 800c1f8:	b083      	sub	sp, #12
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 800c200:	687c      	ldr	r4, [r7, #4]
 800c202:	6838      	ldr	r0, [r7, #0]
 800c204:	f000 fd4f 	bl	800cca6 <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>
 800c208:	4603      	mov	r3, r0
 800c20a:	4619      	mov	r1, r3
 800c20c:	4620      	mov	r0, r4
 800c20e:	f000 fd55 	bl	800ccbc <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 800c212:	687b      	ldr	r3, [r7, #4]
      }
 800c214:	4618      	mov	r0, r3
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd90      	pop	{r4, r7, pc}

0800c21c <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
	return _M_get();
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 fd68 	bl	800ccfa <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800c22a:	4603      	mov	r3, r0
      }
 800c22c:	4618      	mov	r0, r3
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4618      	mov	r0, r3
 800c240:	370c      	adds	r7, #12
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr

0800c24a <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b084      	sub	sp, #16
 800c24e:	af00      	add	r7, sp, #0
 800c250:	60f8      	str	r0, [r7, #12]
 800c252:	60b9      	str	r1, [r7, #8]
 800c254:	607a      	str	r2, [r7, #4]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	68b9      	ldr	r1, [r7, #8]
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f000 fd70 	bl	800cd42 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	4618      	mov	r0, r3
 800c266:	3710      	adds	r7, #16
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 800c26c:	b5b0      	push	{r4, r5, r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 800c276:	687c      	ldr	r4, [r7, #4]
 800c278:	6838      	ldr	r0, [r7, #0]
 800c27a:	f000 fd4a 	bl	800cd12 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 800c27e:	4605      	mov	r5, r0
 800c280:	6838      	ldr	r0, [r7, #0]
 800c282:	f000 fcd8 	bl	800cc36 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 800c286:	4603      	mov	r3, r0
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 fd4f 	bl	800cd2c <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c28e:	4603      	mov	r3, r0
 800c290:	461a      	mov	r2, r3
 800c292:	4629      	mov	r1, r5
 800c294:	4620      	mov	r0, r4
 800c296:	f7ff ffd8 	bl	800c24a <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>
	{ }
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4618      	mov	r0, r3
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bdb0      	pop	{r4, r5, r7, pc}

0800c2a4 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800c2a4:	b590      	push	{r4, r7, lr}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f000 fd5d 	bl	800cd6e <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c2b4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00c      	beq.n	800c2d8 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fd62 	bl	800cd88 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f000 fd6b 	bl	800cda2 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f000 fd70 	bl	800cdb8 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
	__ptr = pointer();
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	601a      	str	r2, [r3, #0]
      }
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3714      	adds	r7, #20
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd90      	pop	{r4, r7, pc}

0800c2e8 <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ec:	b08e      	sub	sp, #56	@ 0x38
 800c2ee:	af02      	add	r7, sp, #8
 800c2f0:	60f8      	str	r0, [r7, #12]
 800c2f2:	60b9      	str	r1, [r7, #8]
 800c2f4:	607a      	str	r2, [r7, #4]
 800c2f6:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c2f8:	2044      	movs	r0, #68	@ 0x44
 800c2fa:	f01c f9fd 	bl	80286f8 <_Znwj>
 800c2fe:	4603      	mov	r3, r0
 800c300:	4698      	mov	r8, r3
 800c302:	68b8      	ldr	r0, [r7, #8]
 800c304:	f000 fd69 	bl	800cdda <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c308:	4604      	mov	r4, r0
 800c30a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c30e:	4618      	mov	r0, r3
 800c310:	f01c fa03 	bl	802871a <_ZNSaIcEC1Ev>
 800c314:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c318:	f107 0314 	add.w	r3, r7, #20
 800c31c:	4621      	mov	r1, r4
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fb fb48 	bl	80079b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 fd63 	bl	800cdf0 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800c32a:	4603      	mov	r3, r0
 800c32c:	681d      	ldr	r5, [r3, #0]
 800c32e:	6838      	ldr	r0, [r7, #0]
 800c330:	f000 fd69 	bl	800ce06 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800c334:	4603      	mov	r3, r0
 800c336:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c33a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c33c:	f000 fd6e 	bl	800ce1c <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800c340:	4603      	mov	r3, r0
 800c342:	681c      	ldr	r4, [r3, #0]
 800c344:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c346:	f000 fd74 	bl	800ce32 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800c34a:	4603      	mov	r3, r0
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	f107 0114 	add.w	r1, r7, #20
 800c354:	9301      	str	r3, [sp, #4]
 800c356:	9400      	str	r4, [sp, #0]
 800c358:	4633      	mov	r3, r6
 800c35a:	462a      	mov	r2, r5
 800c35c:	4640      	mov	r0, r8
 800c35e:	f00e fc3f 	bl	801abe0 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800c362:	4641      	mov	r1, r8
 800c364:	68f8      	ldr	r0, [r7, #12]
 800c366:	f000 fd7f 	bl	800ce68 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c36a:	f107 0314 	add.w	r3, r7, #20
 800c36e:	4618      	mov	r0, r3
 800c370:	f01c fabd 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c374:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c378:	4618      	mov	r0, r3
 800c37a:	f01c f9cf 	bl	802871c <_ZNSaIcED1Ev>
 800c37e:	bf00      	nop
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	3730      	adds	r7, #48	@ 0x30
 800c384:	46bd      	mov	sp, r7
 800c386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c38a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b082      	sub	sp, #8
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
 800c392:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 800c394:	6838      	ldr	r0, [r7, #0]
 800c396:	f000 fd96 	bl	800cec6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>
 800c39a:	4603      	mov	r3, r0
 800c39c:	4619      	mov	r1, r3
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 fd71 	bl	800ce86 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 800c3a4:	6838      	ldr	r0, [r7, #0]
 800c3a6:	f000 fda3 	bl	800cef0 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f000 fdac 	bl	800cf0a <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 fd9c 	bl	800cef0 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800c3b8:	687b      	ldr	r3, [r7, #4]
      }
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3708      	adds	r7, #8
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c6:	b08e      	sub	sp, #56	@ 0x38
 800c3c8:	af02      	add	r7, sp, #8
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
 800c3d0:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c3d2:	2044      	movs	r0, #68	@ 0x44
 800c3d4:	f01c f990 	bl	80286f8 <_Znwj>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	4698      	mov	r8, r3
 800c3dc:	68b8      	ldr	r0, [r7, #8]
 800c3de:	f000 fd9f 	bl	800cf20 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f01c f996 	bl	802871a <_ZNSaIcEC1Ev>
 800c3ee:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c3f2:	f107 0314 	add.w	r3, r7, #20
 800c3f6:	4621      	mov	r1, r4
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7fb fadb 	bl	80079b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 fcf6 	bl	800cdf0 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800c404:	4603      	mov	r3, r0
 800c406:	681d      	ldr	r5, [r3, #0]
 800c408:	6838      	ldr	r0, [r7, #0]
 800c40a:	f000 fcfc 	bl	800ce06 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800c40e:	4603      	mov	r3, r0
 800c410:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c414:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c416:	f000 fd01 	bl	800ce1c <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800c41a:	4603      	mov	r3, r0
 800c41c:	681c      	ldr	r4, [r3, #0]
 800c41e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c420:	f000 fd07 	bl	800ce32 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800c424:	4603      	mov	r3, r0
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	f107 0114 	add.w	r1, r7, #20
 800c42e:	9301      	str	r3, [sp, #4]
 800c430:	9400      	str	r4, [sp, #0]
 800c432:	4633      	mov	r3, r6
 800c434:	462a      	mov	r2, r5
 800c436:	4640      	mov	r0, r8
 800c438:	f00e fbd2 	bl	801abe0 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800c43c:	4641      	mov	r1, r8
 800c43e:	68f8      	ldr	r0, [r7, #12]
 800c440:	f000 fd12 	bl	800ce68 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c444:	f107 0314 	add.w	r3, r7, #20
 800c448:	4618      	mov	r0, r3
 800c44a:	f01c fa50 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c44e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c452:	4618      	mov	r0, r3
 800c454:	f01c f962 	bl	802871c <_ZNSaIcED1Ev>
 800c458:	bf00      	nop
 800c45a:	68f8      	ldr	r0, [r7, #12]
 800c45c:	3730      	adds	r7, #48	@ 0x30
 800c45e:	46bd      	mov	sp, r7
 800c460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c464 <_ZSt11make_uniqueI9pruThreadJRA7_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c468:	b08e      	sub	sp, #56	@ 0x38
 800c46a:	af02      	add	r7, sp, #8
 800c46c:	60f8      	str	r0, [r7, #12]
 800c46e:	60b9      	str	r1, [r7, #8]
 800c470:	607a      	str	r2, [r7, #4]
 800c472:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c474:	2044      	movs	r0, #68	@ 0x44
 800c476:	f01c f93f 	bl	80286f8 <_Znwj>
 800c47a:	4603      	mov	r3, r0
 800c47c:	4698      	mov	r8, r3
 800c47e:	68b8      	ldr	r0, [r7, #8]
 800c480:	f000 fd59 	bl	800cf36 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c484:	4604      	mov	r4, r0
 800c486:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c48a:	4618      	mov	r0, r3
 800c48c:	f01c f945 	bl	802871a <_ZNSaIcEC1Ev>
 800c490:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c494:	f107 0314 	add.w	r3, r7, #20
 800c498:	4621      	mov	r1, r4
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fb fa8a 	bl	80079b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 fca5 	bl	800cdf0 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	681d      	ldr	r5, [r3, #0]
 800c4aa:	6838      	ldr	r0, [r7, #0]
 800c4ac:	f000 fcab 	bl	800ce06 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c4b6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c4b8:	f000 fcb0 	bl	800ce1c <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	681c      	ldr	r4, [r3, #0]
 800c4c0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c4c2:	f000 fcb6 	bl	800ce32 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	f107 0114 	add.w	r1, r7, #20
 800c4d0:	9301      	str	r3, [sp, #4]
 800c4d2:	9400      	str	r4, [sp, #0]
 800c4d4:	4633      	mov	r3, r6
 800c4d6:	462a      	mov	r2, r5
 800c4d8:	4640      	mov	r0, r8
 800c4da:	f00e fb81 	bl	801abe0 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 800c4de:	4641      	mov	r1, r8
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f000 fcc1 	bl	800ce68 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c4e6:	f107 0314 	add.w	r3, r7, #20
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f01c f9ff 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c4f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f01c f911 	bl	802871c <_ZNSaIcED1Ev>
 800c4fa:	bf00      	nop
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	3730      	adds	r7, #48	@ 0x30
 800c500:	46bd      	mov	sp, r7
 800c502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c506 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800c506:	b580      	push	{r7, lr}
 800c508:	b082      	sub	sp, #8
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
	return get();
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f7ff fcdf 	bl	800bed2 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 800c514:	4603      	mov	r3, r0
      }
 800c516:	4618      	mov	r0, r3
 800c518:	3708      	adds	r7, #8
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <_ZNSt10shared_ptrI6ModuleEC1I12CommsHandlervEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 800c51e:	b580      	push	{r7, lr}
 800c520:	b082      	sub	sp, #8
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
 800c526:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	683a      	ldr	r2, [r7, #0]
 800c52c:	4611      	mov	r1, r2
 800c52e:	4618      	mov	r0, r3
 800c530:	f000 fd0c 	bl	800cf4c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4618      	mov	r0, r3
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800c53e:	b580      	push	{r7, lr}
 800c540:	b084      	sub	sp, #16
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	f107 030c 	add.w	r3, r7, #12
 800c54c:	4611      	mov	r1, r2
 800c54e:	4618      	mov	r0, r3
 800c550:	f000 fd12 	bl	800cf78 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 800c55e:	b580      	push	{r7, lr}
 800c560:	b084      	sub	sp, #16
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	1d1a      	adds	r2, r3, #4
 800c56a:	f107 030c 	add.w	r3, r7, #12
 800c56e:	4611      	mov	r1, r2
 800c570:	4618      	mov	r0, r3
 800c572:	f000 fd01 	bl	800cf78 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	4618      	mov	r0, r3
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c580:	b590      	push	{r4, r7, lr}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 fd04 	bl	800cf98 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800c590:	4603      	mov	r3, r0
 800c592:	681c      	ldr	r4, [r3, #0]
 800c594:	6838      	ldr	r0, [r7, #0]
 800c596:	f000 fcff 	bl	800cf98 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800c59a:	4603      	mov	r3, r0
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	429c      	cmp	r4, r3
 800c5a0:	bf14      	ite	ne
 800c5a2:	2301      	movne	r3, #1
 800c5a4:	2300      	moveq	r3, #0
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	370c      	adds	r7, #12
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd90      	pop	{r4, r7, pc}

0800c5b0 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
	++_M_current;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f103 0208 	add.w	r2, r3, #8
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	601a      	str	r2, [r3, #0]
	return *this;
 800c5c4:	687b      	ldr	r3, [r7, #4]
      }
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	370c      	adds	r7, #12
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr

0800c5d2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800c5d2:	b480      	push	{r7}
 800c5d4:	b083      	sub	sp, #12
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	370c      	adds	r7, #12
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr

0800c5ea <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>:
      element_type*
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const noexcept
 800c5ea:	b480      	push	{r7}
 800c5ec:	b083      	sub	sp, #12
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
      { return _M_ptr != nullptr; }
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	bf14      	ite	ne
 800c5fa:	2301      	movne	r3, #1
 800c5fc:	2300      	moveq	r3, #0
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	4618      	mov	r0, r3
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
	return _M_get();
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 fcca 	bl	800cfae <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 800c61a:	4603      	mov	r3, r0
      }
 800c61c:	4618      	mov	r0, r3
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
	return get();
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 fcca 	bl	800cfc6 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>
 800c632:	4603      	mov	r3, r0
      }
 800c634:	4618      	mov	r0, r3
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>:
  detail::ElementProxy<JsonArray> operator[](T index) const {
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	607a      	str	r2, [r7, #4]
    return {*this, size_t(index)};
 800c648:	68ba      	ldr	r2, [r7, #8]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	ca06      	ldmia	r2, {r1, r2}
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f000 fcc6 	bl	800cfe0 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>
  }
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
    return as<T>();
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 fd29 	bl	800d0bc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>
 800c66a:	4603      	mov	r3, r0
  }
 800c66c:	4618      	mov	r0, r3
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
    this->set(src);
 800c67e:	6839      	ldr	r1, [r7, #0]
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 fd50 	bl	800d126 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>
    return *this;
 800c686:	687b      	ldr	r3, [r7, #4]
  }
 800c688:	4618      	mov	r0, r3
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>:
  operator T() const {
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
    return as<T>();
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6839      	ldr	r1, [r7, #0]
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f000 fd4f 	bl	800d142 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>
 800c6a4:	bf00      	nop
  }
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	3708      	adds	r7, #8
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b082      	sub	sp, #8
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d004      	beq.n	800c6d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7fe f9bf 	bl	800aa50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3708      	adds	r7, #8
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	370c      	adds	r7, #12
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backEOS2_>:
      }

#if __cplusplus >= 201103L
      _GLIBCXX20_CONSTEXPR
      void
      push_back(value_type&& __x)
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b082      	sub	sp, #8
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
 800c6fa:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800c6fc:	6838      	ldr	r0, [r7, #0]
 800c6fe:	f7ff ffed 	bl	800c6dc <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800c702:	4603      	mov	r3, r0
 800c704:	4619      	mov	r1, r3
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 fd3f 	bl	800d18a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>
 800c70c:	bf00      	nop
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
      { }
 800c71c:	4a04      	ldr	r2, [pc, #16]	@ (800c730 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	601a      	str	r2, [r3, #0]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4618      	mov	r0, r3
 800c726:	370c      	adds	r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr
 800c730:	0802b49c 	.word	0x0802b49c

0800c734 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
      { }
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f7ff ffe9 	bl	800c714 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800c742:	210c      	movs	r1, #12
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f01b ffc6 	bl	80286d6 <_ZdlPvj>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	4618      	mov	r0, r3
 800c74e:	3708      	adds	r7, #8
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>:
  if (dup)
    setRawString(dup);
}

template <typename TAdaptedString>
inline bool VariantData::setString(TAdaptedString value,
 800c754:	b580      	push	{r7, lr}
 800c756:	b086      	sub	sp, #24
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	4638      	mov	r0, r7
 800c75e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                   ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first

  if (value.isNull())
 800c762:	463b      	mov	r3, r7
 800c764:	4618      	mov	r0, r3
 800c766:	f7f8 fdac 	bl	80052c2 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800c76a:	4603      	mov	r3, r0
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d001      	beq.n	800c774 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x20>
    return false;
 800c770:	2300      	movs	r3, #0
 800c772:	e021      	b.n	800c7b8 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>

  if (value.isStatic()) {
 800c774:	463b      	mov	r3, r7
 800c776:	4618      	mov	r0, r3
 800c778:	f7fe f9fa 	bl	800ab70 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d00a      	beq.n	800c798 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x44>
    setLinkedString(value.data());
 800c782:	463b      	mov	r3, r7
 800c784:	4618      	mov	r0, r3
 800c786:	f7f8 fdb9 	bl	80052fc <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 800c78a:	4603      	mov	r3, r0
 800c78c:	4619      	mov	r1, r3
 800c78e:	68f8      	ldr	r0, [r7, #12]
 800c790:	f7fe fa9c 	bl	800accc <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>
    return true;
 800c794:	2301      	movs	r3, #1
 800c796:	e00f      	b.n	800c7b8 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  auto dup = resources->saveString(value);
 800c798:	6a38      	ldr	r0, [r7, #32]
 800c79a:	463b      	mov	r3, r7
 800c79c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c79e:	f000 fd27 	bl	800d1f0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>
 800c7a2:	6178      	str	r0, [r7, #20]
  if (dup) {
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d005      	beq.n	800c7b6 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x62>
    setOwnedString(dup);
 800c7aa:	6979      	ldr	r1, [r7, #20]
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f7f8 fff6 	bl	800579e <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e000      	b.n	800c7b8 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  return false;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3718      	adds	r7, #24
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800c7c0:	b590      	push	{r4, r7, lr}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 facf 	bl	800cd6e <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800c7d6:	683c      	ldr	r4, [r7, #0]
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 fac8 	bl	800cd6e <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d007      	beq.n	800c7f8 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 f81e 	bl	800c82a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	68f9      	ldr	r1, [r7, #12]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f000 fae0 	bl	800cdb8 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
      }
 800c7f8:	bf00      	nop
 800c7fa:	3714      	adds	r7, #20
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd90      	pop	{r4, r7, pc}

0800c800 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fab0 	bl	800cd6e <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c80e:	4603      	mov	r3, r0
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 faaa 	bl	800cd6e <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2200      	movs	r2, #0
 800c81e:	601a      	str	r2, [r3, #0]
	return __p;
 800c820:	68fb      	ldr	r3, [r7, #12]
      }
 800c822:	4618      	mov	r0, r3
 800c824:	3710      	adds	r7, #16
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b082      	sub	sp, #8
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4618      	mov	r0, r3
 800c836:	f000 fd01 	bl	800d23c <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c83a:	4603      	mov	r3, r0
 800c83c:	4618      	mov	r0, r3
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	4618      	mov	r0, r3
 800c850:	370c      	adds	r7, #12
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr

0800c85a <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b082      	sub	sp, #8
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4618      	mov	r0, r3
 800c866:	f000 fcf5 	bl	800d254 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800c86a:	4603      	mov	r3, r0
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4618      	mov	r0, r3
 800c870:	3708      	adds	r7, #8
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800c876:	b580      	push	{r7, lr}
 800c878:	b082      	sub	sp, #8
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4618      	mov	r0, r3
 800c882:	f000 fcf4 	bl	800d26e <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4618      	mov	r0, r3
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4618      	mov	r0, r3
 800c89c:	f000 fcf7 	bl	800d28e <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3708      	adds	r7, #8
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b082      	sub	sp, #8
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f000 f959 	bl	800cb6c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	370c      	adds	r7, #12
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr

0800c8da <_ZN17JsonConfigHandlerD1Ev>:
#include "../lib/ArduinoJson7/ArduinoJson.h"
#include "fatfs.h"

class Remora; //forward declaration

class JsonConfigHandler {
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b082      	sub	sp, #8
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	3320      	adds	r3, #32
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fe fa8b 	bl	800ae02 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	3304      	adds	r3, #4
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f01b fffc 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3708      	adds	r7, #8
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c900:	b590      	push	{r4, r7, lr}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c90a:	683c      	ldr	r4, [r7, #0]
 800c90c:	2c00      	cmp	r4, #0
 800c90e:	d006      	beq.n	800c91e <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_+0x1e>
 800c910:	4620      	mov	r0, r4
 800c912:	f7ff ffe2 	bl	800c8da <_ZN17JsonConfigHandlerD1Ev>
 800c916:	216c      	movs	r1, #108	@ 0x6c
 800c918:	4620      	mov	r0, r4
 800c91a:	f01b fedc 	bl	80286d6 <_ZdlPvj>
      }
 800c91e:	bf00      	nop
 800c920:	370c      	adds	r7, #12
 800c922:	46bd      	mov	sp, r7
 800c924:	bd90      	pop	{r4, r7, pc}

0800c926 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800c926:	b580      	push	{r7, lr}
 800c928:	b082      	sub	sp, #8
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2200      	movs	r2, #0
 800c932:	601a      	str	r2, [r3, #0]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	3304      	adds	r3, #4
 800c938:	4618      	mov	r0, r3
 800c93a:	f000 fcb5 	bl	800d2a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4618      	mov	r0, r3
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4618      	mov	r0, r3
 800c954:	f000 fcb6 	bl	800d2c4 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4618      	mov	r0, r3
 800c95c:	3708      	adds	r7, #8
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}

0800c962 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c962:	b580      	push	{r7, lr}
 800c964:	b082      	sub	sp, #8
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4618      	mov	r0, r3
 800c96e:	f000 fcb9 	bl	800d2e4 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c972:	4603      	mov	r3, r0
 800c974:	4618      	mov	r0, r3
 800c976:	3708      	adds	r7, #8
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	4618      	mov	r0, r3
 800c988:	f000 fab2 	bl	800cef0 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800c98c:	4603      	mov	r3, r0
 800c98e:	4618      	mov	r0, r3
 800c990:	3708      	adds	r7, #8
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c996:	b480      	push	{r7}
 800c998:	b083      	sub	sp, #12
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	370c      	adds	r7, #12
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr

0800c9ac <_ZN9pruThreadD1Ev>:

using namespace std;

class Module;

class pruThread
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	3338      	adds	r3, #56	@ 0x38
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7ff fb71 	bl	800c0a0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	332c      	adds	r3, #44	@ 0x2c
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7ff fb6c 	bl	800c0a0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f01b ff8f 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <_ZNKSt14default_deleteI9pruThreadEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c9da:	b590      	push	{r4, r7, lr}
 800c9dc:	b083      	sub	sp, #12
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
 800c9e2:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c9e4:	683c      	ldr	r4, [r7, #0]
 800c9e6:	2c00      	cmp	r4, #0
 800c9e8:	d006      	beq.n	800c9f8 <_ZNKSt14default_deleteI9pruThreadEclEPS0_+0x1e>
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	f7ff ffde 	bl	800c9ac <_ZN9pruThreadD1Ev>
 800c9f0:	2144      	movs	r1, #68	@ 0x44
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	f01b fe6f 	bl	80286d6 <_ZdlPvj>
      }
 800c9f8:	bf00      	nop
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd90      	pop	{r4, r7, pc}

0800ca00 <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 fc78 	bl	800d2fe <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4618      	mov	r0, r3
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	601a      	str	r2, [r3, #0]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	605a      	str	r2, [r3, #4]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	609a      	str	r2, [r3, #8]
	{ }
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	4618      	mov	r0, r3
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	370c      	adds	r7, #12
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr

0800ca56 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b084      	sub	sp, #16
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	60f8      	str	r0, [r7, #12]
 800ca5e:	60b9      	str	r1, [r7, #8]
 800ca60:	607a      	str	r2, [r7, #4]
	if (__p)
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d005      	beq.n	800ca74 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	68b9      	ldr	r1, [r7, #8]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f000 fc50 	bl	800d314 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>
      }
 800ca74:	bf00      	nop
 800ca76:	3710      	adds	r7, #16
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	4618      	mov	r0, r3
 800ca88:	370c      	adds	r7, #12
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr

0800ca92 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b084      	sub	sp, #16
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	60f8      	str	r0, [r7, #12]
 800ca9a:	60b9      	str	r1, [r7, #8]
 800ca9c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800ca9e:	68b9      	ldr	r1, [r7, #8]
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f000 fc46 	bl	800d332 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>
    }
 800caa6:	bf00      	nop
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800caae:	b480      	push	{r7}
 800cab0:	b083      	sub	sp, #12
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4618      	mov	r0, r3
 800caba:	370c      	adds	r7, #12
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	683a      	ldr	r2, [r7, #0]
 800cad2:	4611      	mov	r1, r2
 800cad4:	4618      	mov	r0, r3
 800cad6:	f000 fc39 	bl	800d34c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	4618      	mov	r0, r3
 800cade:	3708      	adds	r7, #8
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6839      	ldr	r1, [r7, #0]
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7ff ffe6 	bl	800cac4 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	4618      	mov	r0, r3
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800cb02:	b590      	push	{r4, r7, lr}
 800cb04:	b085      	sub	sp, #20
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f7ff febf 	bl	800c890 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800cb12:	4603      	mov	r3, r0
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800cb18:	683c      	ldr	r4, [r7, #0]
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7ff feb8 	bl	800c890 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800cb20:	4603      	mov	r3, r0
 800cb22:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d007      	beq.n	800cb3a <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f81e 	bl	800cb6c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800cb30:	4603      	mov	r3, r0
 800cb32:	68f9      	ldr	r1, [r7, #12]
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7ff fee3 	bl	800c900 <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
      }
 800cb3a:	bf00      	nop
 800cb3c:	3714      	adds	r7, #20
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd90      	pop	{r4, r7, pc}

0800cb42 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800cb42:	b580      	push	{r7, lr}
 800cb44:	b084      	sub	sp, #16
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f7ff fea0 	bl	800c890 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800cb50:	4603      	mov	r3, r0
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f7ff fe9a 	bl	800c890 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2200      	movs	r2, #0
 800cb60:	601a      	str	r2, [r3, #0]
	return __p;
 800cb62:	68fb      	ldr	r3, [r7, #12]
      }
 800cb64:	4618      	mov	r0, r3
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4618      	mov	r0, r3
 800cb78:	f000 fbfc 	bl	800d374 <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3708      	adds	r7, #8
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cb86:	b480      	push	{r7}
 800cb88:	b083      	sub	sp, #12
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4618      	mov	r0, r3
 800cb92:	370c      	adds	r7, #12
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4618      	mov	r0, r3
 800cba8:	370c      	adds	r7, #12
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb0:	4770      	bx	lr

0800cbb2 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cbb2:	b480      	push	{r7}
 800cbb4:	b083      	sub	sp, #12
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	370c      	adds	r7, #12
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbdc:	4770      	bx	lr

0800cbde <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b082      	sub	sp, #8
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	6039      	str	r1, [r7, #0]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	4611      	mov	r1, r2
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f000 fbcc 	bl	800d38c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b082      	sub	sp, #8
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
 800cc06:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6839      	ldr	r1, [r7, #0]
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7ff ffe6 	bl	800cbde <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4618      	mov	r0, r3
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	4618      	mov	r0, r3
 800cc28:	f000 fbc4 	bl	800d3b4 <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800cc36:	b580      	push	{r7, lr}
 800cc38:	b082      	sub	sp, #8
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 fbc4 	bl	800d3ce <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>
 800cc46:	4603      	mov	r3, r0
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3708      	adds	r7, #8
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <_ZSt4moveIRP8SPICommsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	370c      	adds	r7, #12
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr

0800cc66 <_ZNKSt14default_deleteI8SPICommsEclEPS0_>:
      operator()(_Tp* __ptr) const
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b082      	sub	sp, #8
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
 800cc6e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d004      	beq.n	800cc80 <_ZNKSt14default_deleteI8SPICommsEclEPS0_+0x1a>
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	3204      	adds	r2, #4
 800cc7a:	6812      	ldr	r2, [r2, #0]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	4790      	blx	r2
      }
 800cc80:	bf00      	nop
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <_ZNSt10shared_ptrI12CommsHandlerEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6839      	ldr	r1, [r7, #0]
 800cc96:	4618      	mov	r0, r3
 800cc98:	f000 fba6 	bl	800d3e8 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <_ZSt4moveIRSt10shared_ptrI12CommsHandlerEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800cca6:	b480      	push	{r7}
 800cca8:	b083      	sub	sp, #12
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 800ccc6:	6838      	ldr	r0, [r7, #0]
 800ccc8:	f000 fba8 	bl	800d41c <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 800cccc:	4602      	mov	r2, r0
 800ccce:	f107 0308 	add.w	r3, r7, #8
 800ccd2:	4611      	mov	r1, r2
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 fbac 	bl	800d432 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800ccda:	f107 0308 	add.w	r3, r7, #8
 800ccde:	6879      	ldr	r1, [r7, #4]
 800cce0:	4618      	mov	r0, r3
 800cce2:	f000 fbc4 	bl	800d46e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 800cce6:	f107 0308 	add.w	r3, r7, #8
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fe fa22 	bl	800b134 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 800ccf0:	687b      	ldr	r3, [r7, #4]
      }
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3710      	adds	r7, #16
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}

0800ccfa <_ZNKSt19__shared_ptr_accessI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800ccfa:	b580      	push	{r7, lr}
 800ccfc:	b082      	sub	sp, #8
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 fbca 	bl	800d49c <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b082      	sub	sp, #8
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 fbc9 	bl	800d4b4 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 800cd22:	4603      	mov	r3, r0
 800cd24:	4618      	mov	r0, r3
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4618      	mov	r0, r3
 800cd38:	370c      	adds	r7, #12
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr

0800cd42 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>:
	__uniq_ptr_impl(pointer __p, _Del&& __d)
 800cd42:	b590      	push	{r4, r7, lr}
 800cd44:	b085      	sub	sp, #20
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	60f8      	str	r0, [r7, #12]
 800cd4a:	60b9      	str	r1, [r7, #8]
 800cd4c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800cd4e:	68fc      	ldr	r4, [r7, #12]
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f7ff ffeb 	bl	800cd2c <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cd56:	4602      	mov	r2, r0
 800cd58:	f107 0308 	add.w	r3, r7, #8
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f000 fbbd 	bl	800d4de <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	4618      	mov	r0, r3
 800cd68:	3714      	adds	r7, #20
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd90      	pop	{r4, r7, pc}

0800cd6e <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b082      	sub	sp, #8
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f000 fbc9 	bl	800d510 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	4618      	mov	r0, r3
 800cd82:	3708      	adds	r7, #8
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7ff fd49 	bl	800c82a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3708      	adds	r7, #8
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800cda2:	b480      	push	{r7}
 800cda4:	b083      	sub	sp, #12
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	4618      	mov	r0, r3
 800cdae:	370c      	adds	r7, #12
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr

0800cdb8 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>:
      operator()(_Tp* __ptr) const
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d004      	beq.n	800cdd2 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_+0x1a>
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	3204      	adds	r2, #4
 800cdcc:	6812      	ldr	r2, [r2, #0]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	4790      	blx	r2
      }
 800cdd2:	bf00      	nop
 800cdd4:	3708      	adds	r7, #8
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cdda:	b480      	push	{r7}
 800cddc:	b083      	sub	sp, #12
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	4618      	mov	r0, r3
 800cde6:	370c      	adds	r7, #12
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cdf0:	b480      	push	{r7}
 800cdf2:	b083      	sub	sp, #12
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	370c      	adds	r7, #12
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr

0800ce06 <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ce06:	b480      	push	{r7}
 800ce08:	b083      	sub	sp, #12
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	4618      	mov	r0, r3
 800ce12:	370c      	adds	r7, #12
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr

0800ce1c <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	4618      	mov	r0, r3
 800ce28:	370c      	adds	r7, #12
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr

0800ce32 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ce32:	b480      	push	{r7}
 800ce34:	b083      	sub	sp, #12
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	683a      	ldr	r2, [r7, #0]
 800ce56:	4611      	mov	r1, r2
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f000 fb66 	bl	800d52a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4618      	mov	r0, r3
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6839      	ldr	r1, [r7, #0]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7ff ffe6 	bl	800ce48 <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3708      	adds	r7, #8
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}

0800ce86 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800ce86:	b590      	push	{r4, r7, lr}
 800ce88:	b085      	sub	sp, #20
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	6078      	str	r0, [r7, #4]
 800ce8e:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f7ff fd66 	bl	800c962 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800ce96:	4603      	mov	r3, r0
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800ce9c:	683c      	ldr	r4, [r7, #0]
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f7ff fd5f 	bl	800c962 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800cea4:	4603      	mov	r3, r0
 800cea6:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d007      	beq.n	800cebe <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 f81e 	bl	800cef0 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	68f9      	ldr	r1, [r7, #12]
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7ff fd8e 	bl	800c9da <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
      }
 800cebe:	bf00      	nop
 800cec0:	3714      	adds	r7, #20
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd90      	pop	{r4, r7, pc}

0800cec6 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b084      	sub	sp, #16
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f7ff fd47 	bl	800c962 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800ced4:	4603      	mov	r3, r0
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f7ff fd41 	bl	800c962 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2200      	movs	r2, #0
 800cee4:	601a      	str	r2, [r3, #0]
	return __p;
 800cee6:	68fb      	ldr	r3, [r7, #12]
      }
 800cee8:	4618      	mov	r0, r3
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	4618      	mov	r0, r3
 800cefc:	f000 fb29 	bl	800d552 <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800cf00:	4603      	mov	r3, r0
 800cf02:	4618      	mov	r0, r3
 800cf04:	3708      	adds	r7, #8
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cf0a:	b480      	push	{r7}
 800cf0c:	b083      	sub	sp, #12
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	4618      	mov	r0, r3
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	370c      	adds	r7, #12
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr

0800cf36 <_ZSt7forwardIRA7_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cf36:	b480      	push	{r7}
 800cf38:	b083      	sub	sp, #12
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	4618      	mov	r0, r3
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlervEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b082      	sub	sp, #8
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	601a      	str	r2, [r3, #0]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	1d1a      	adds	r2, r3, #4
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	3304      	adds	r3, #4
 800cf66:	4619      	mov	r1, r3
 800cf68:	4610      	mov	r0, r2
 800cf6a:	f7ff fba0 	bl	800c6ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4618      	mov	r0, r3
 800cf72:	3708      	adds	r7, #8
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	601a      	str	r2, [r3, #0]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	370c      	adds	r7, #12
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr

0800cf98 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800cf98:	b480      	push	{r7}
 800cf9a:	b083      	sub	sp, #12
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	370c      	adds	r7, #12
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr

0800cfae <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b082      	sub	sp, #8
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f000 fad7 	bl	800d56a <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b082      	sub	sp, #8
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f000 fad6 	bl	800d582 <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>:

  template <typename>
  friend class ElementProxy;

 public:
  ElementProxy(TUpstream upstream, size_t index)
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	1d38      	adds	r0, r7, #4
 800cfea:	e880 0006 	stmia.w	r0, {r1, r2}
 800cfee:	603b      	str	r3, [r7, #0]
      : upstream_(upstream), index_(index) {}
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	3304      	adds	r3, #4
 800cff4:	1d3a      	adds	r2, r7, #4
 800cff6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cffa:	e883 0003 	stmia.w	r3, {r0, r1}
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	683a      	ldr	r2, [r7, #0]
 800d002:	60da      	str	r2, [r3, #12]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	4618      	mov	r0, r3
 800d008:	3714      	adds	r7, #20
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr

0800d012 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>:
  const TDerived& derived() const {
 800d012:	b480      	push	{r7}
 800d014:	b083      	sub	sp, #12
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800d01a:	687b      	ldr	r3, [r7, #4]
  }
 800d01c:	4618      	mov	r0, r3
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr

0800d028 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>:
    return *this;
  }

 private:
  // clang-format off
  ElementProxy(const ElementProxy& src)  // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
      : upstream_(src.upstream_), index_(src.index_) {}
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	683a      	ldr	r2, [r7, #0]
 800d036:	3304      	adds	r3, #4
 800d038:	3204      	adds	r2, #4
 800d03a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d03e:	e883 0003 	stmia.w	r3, {r0, r1}
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	68da      	ldr	r2, [r3, #12]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	60da      	str	r2, [r3, #12]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4618      	mov	r0, r3
 800d04e:	370c      	adds	r7, #12
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 800d058:	b082      	sub	sp, #8
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b082      	sub	sp, #8
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
 800d062:	6039      	str	r1, [r7, #0]
 800d064:	f107 0110 	add.w	r1, r7, #16
 800d068:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	3304      	adds	r3, #4
 800d070:	6839      	ldr	r1, [r7, #0]
 800d072:	4618      	mov	r0, r3
 800d074:	f7ff ffd8 	bl	800d028 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	3314      	adds	r3, #20
 800d07c:	f107 0210 	add.w	r2, r7, #16
 800d080:	ca07      	ldmia	r2, {r0, r1, r2}
 800d082:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	4618      	mov	r0, r3
 800d08a:	3708      	adds	r7, #8
 800d08c:	46bd      	mov	sp, r7
 800d08e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d092:	b002      	add	sp, #8
 800d094:	4770      	bx	lr

0800d096 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800d096:	b580      	push	{r7, lr}
 800d098:	b082      	sub	sp, #8
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
 800d09e:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800d0a0:	6838      	ldr	r0, [r7, #0]
 800d0a2:	f000 fa7c 	bl	800d59e <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	4611      	mov	r1, r2
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f000 fa81 	bl	800d5b4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>
 800d0b2:	bf00      	nop
}
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	3708      	adds	r7, #8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800d0bc:	b590      	push	{r4, r7, lr}
 800d0be:	b087      	sub	sp, #28
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	617b      	str	r3, [r7, #20]
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800d0cc:	6938      	ldr	r0, [r7, #16]
 800d0ce:	f000 fd2a 	bl	800db26 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	6938      	ldr	r0, [r7, #16]
 800d0d6:	f000 fd36 	bl	800db46 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	f107 0308 	add.w	r3, r7, #8
 800d0e0:	4621      	mov	r1, r4
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7f8 fc9d 	bl	8005a22 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800d0e8:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800d0ea:	f107 0308 	add.w	r3, r7, #8
 800d0ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d0f2:	f7f9 f98f 	bl	8006414 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 800d0f6:	4603      	mov	r3, r0
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	371c      	adds	r7, #28
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd90      	pop	{r4, r7, pc}

0800d100 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800d10a:	6838      	ldr	r0, [r7, #0]
 800d10c:	f000 fa61 	bl	800d5d2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800d110:	4602      	mov	r2, r0
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4611      	mov	r1, r2
 800d116:	4618      	mov	r0, r3
 800d118:	f000 fa66 	bl	800d5e8 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>
 800d11c:	bf00      	nop
}
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	3708      	adds	r7, #8
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}

0800d126 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>:
  bool set(const T& value) const {
 800d126:	b580      	push	{r7, lr}
 800d128:	b082      	sub	sp, #8
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
 800d12e:	6039      	str	r1, [r7, #0]
    return doSet<Converter<TypeForConverter>>(value);
 800d130:	6839      	ldr	r1, [r7, #0]
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 fa67 	bl	800d606 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>
 800d138:	4603      	mov	r3, r0
  }
 800d13a:	4618      	mov	r0, r3
 800d13c:	3708      	adds	r7, #8
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}

0800d142 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800d142:	b590      	push	{r4, r7, lr}
 800d144:	b087      	sub	sp, #28
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
 800d14a:	6039      	str	r1, [r7, #0]
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	617b      	str	r3, [r7, #20]
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 800d154:	6938      	ldr	r0, [r7, #16]
 800d156:	f000 ffd3 	bl	800e100 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>
 800d15a:	4604      	mov	r4, r0
 800d15c:	6938      	ldr	r0, [r7, #16]
 800d15e:	f000 ffdf 	bl	800e120 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>
 800d162:	4602      	mov	r2, r0
 800d164:	f107 0308 	add.w	r3, r7, #8
 800d168:	4621      	mov	r1, r4
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7f8 fc84 	bl	8005a78 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 800d170:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f107 0308 	add.w	r3, r7, #8
 800d178:	e893 0006 	ldmia.w	r3, {r1, r2}
 800d17c:	f7fd fddc 	bl	800ad38 <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>
 800d180:	bf00      	nop
}
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	371c      	adds	r7, #28
 800d186:	46bd      	mov	sp, r7
 800d188:	bd90      	pop	{r4, r7, pc}

0800d18a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800d18a:	b5b0      	push	{r4, r5, r7, lr}
 800d18c:	b082      	sub	sp, #8
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
 800d192:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	685a      	ldr	r2, [r3, #4]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d012      	beq.n	800d1c6 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800d1a0:	687c      	ldr	r4, [r7, #4]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	685d      	ldr	r5, [r3, #4]
 800d1a6:	6838      	ldr	r0, [r7, #0]
 800d1a8:	f000 fa3c 	bl	800d624 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	4629      	mov	r1, r5
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	f000 fa41 	bl	800d63a <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	f103 0208 	add.w	r2, r3, #8
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	605a      	str	r2, [r3, #4]
 800d1c4:	e00c      	b.n	800d1e0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x56>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f7ff f9c9 	bl	800c55e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	6838      	ldr	r0, [r7, #0]
 800d1d0:	f000 fa28 	bl	800d624 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	4621      	mov	r1, r4
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 fa40 	bl	800d660 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 fab9 	bl	800d758 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4backEv>
 800d1e6:	4603      	mov	r3, r0
#endif
      }
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3708      	adds	r7, #8
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bdb0      	pop	{r4, r5, r7, pc}

0800d1f0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>:
  StringNode* saveString(TAdaptedString str) {
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b088      	sub	sp, #32
 800d1f4:	af02      	add	r7, sp, #8
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	4638      	mov	r0, r7
 800d1fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (str.isNull())
 800d1fe:	463b      	mov	r3, r7
 800d200:	4618      	mov	r0, r3
 800d202:	f7f8 f85e 	bl	80052c2 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d001      	beq.n	800d210 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x20>
      return 0;
 800d20c:	2300      	movs	r3, #0
 800d20e:	e011      	b.n	800d234 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x44>
    auto node = stringPool_.add(str, allocator_);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f103 0008 	add.w	r0, r3, #8
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	463b      	mov	r3, r7
 800d21e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d220:	f000 fab5 	bl	800d78e <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>
 800d224:	6178      	str	r0, [r7, #20]
    if (!node)
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d102      	bne.n	800d232 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x42>
      overflowed_ = true;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2201      	movs	r2, #1
 800d230:	711a      	strb	r2, [r3, #4]
    return node;
 800d232:	697b      	ldr	r3, [r7, #20]
  }
 800d234:	4618      	mov	r0, r3
 800d236:	3718      	adds	r7, #24
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 fae2 	bl	800d80e <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d24a:	4603      	mov	r3, r0
 800d24c:	4618      	mov	r0, r3
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	4618      	mov	r0, r3
 800d260:	f000 fae1 	bl	800d826 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d264:	4603      	mov	r3, r0
 800d266:	4618      	mov	r0, r3
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800d26e:	b580      	push	{r7, lr}
 800d270:	b082      	sub	sp, #8
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 fae1 	bl	800d83e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	4618      	mov	r0, r3
 800d280:	f000 fae9 	bl	800d856 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	4618      	mov	r0, r3
 800d288:	3708      	adds	r7, #8
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}

0800d28e <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d28e:	b580      	push	{r7, lr}
 800d290:	b082      	sub	sp, #8
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4618      	mov	r0, r3
 800d29a:	f000 faea 	bl	800d872 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	601a      	str	r2, [r3, #0]
      { }
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	370c      	adds	r7, #12
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr

0800d2c4 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 fadc 	bl	800d88a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f000 fae4 	bl	800d8a2 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3708      	adds	r7, #8
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f000 fae5 	bl	800d8be <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3708      	adds	r7, #8
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d2fe:	b480      	push	{r7}
 800d300:	b083      	sub	sp, #12
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	4618      	mov	r0, r3
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	68b9      	ldr	r1, [r7, #8]
 800d324:	68f8      	ldr	r0, [r7, #12]
 800d326:	f000 fad6 	bl	800d8d6 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>
 800d32a:	bf00      	nop
 800d32c:	3710      	adds	r7, #16
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d332:	b580      	push	{r7, lr}
 800d334:	b082      	sub	sp, #8
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
 800d33a:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800d33c:	6839      	ldr	r1, [r7, #0]
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 fad8 	bl	800d8f4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>
    }
 800d344:	bf00      	nop
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800d34c:	b590      	push	{r4, r7, lr}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	4618      	mov	r0, r3
 800d35a:	f7ff fa8c 	bl	800c876 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d35e:	683c      	ldr	r4, [r7, #0]
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f7ff fa95 	bl	800c890 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800d366:	4603      	mov	r3, r0
 800d368:	601c      	str	r4, [r3, #0]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4618      	mov	r0, r3
 800d36e:	370c      	adds	r7, #12
 800d370:	46bd      	mov	sp, r7
 800d372:	bd90      	pop	{r4, r7, pc}

0800d374 <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f000 fad2 	bl	800d926 <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d382:	4603      	mov	r3, r0
 800d384:	4618      	mov	r0, r3
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>:
 800d38c:	b590      	push	{r4, r7, lr}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4618      	mov	r0, r3
 800d39a:	f000 fad0 	bl	800d93e <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d39e:	683c      	ldr	r4, [r7, #0]
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7ff fc3b 	bl	800cc1c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	601c      	str	r4, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	370c      	adds	r7, #12
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd90      	pop	{r4, r7, pc}

0800d3b4 <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f000 faca 	bl	800d958 <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b082      	sub	sp, #8
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f000 fac9 	bl	800d970 <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3708      	adds	r7, #8
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
      /// @}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	601a      	str	r2, [r3, #0]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	3304      	adds	r3, #4
 800d3fc:	6879      	ldr	r1, [r7, #4]
 800d3fe:	683a      	ldr	r2, [r7, #0]
 800d400:	4618      	mov	r0, r3
 800d402:	f000 fac1 	bl	800d988 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4619      	mov	r1, r3
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 faff 	bl	800da10 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4618      	mov	r0, r3
 800d416:	3708      	adds	r7, #8
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <_ZSt4moveIRSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	4618      	mov	r0, r3
 800d428:	370c      	adds	r7, #12
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr

0800d432 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800d432:	b580      	push	{r7, lr}
 800d434:	b082      	sub	sp, #8
 800d436:	af00      	add	r7, sp, #0
 800d438:	6078      	str	r0, [r7, #4]
 800d43a:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	3304      	adds	r3, #4
 800d448:	4618      	mov	r0, r3
 800d44a:	f7ff ff2d 	bl	800d2a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	1d1a      	adds	r2, r3, #4
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	3304      	adds	r3, #4
 800d456:	4619      	mov	r1, r3
 800d458:	4610      	mov	r0, r2
 800d45a:	f000 fae4 	bl	800da26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	2200      	movs	r2, #0
 800d462:	601a      	str	r2, [r3, #0]
      }
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	4618      	mov	r0, r3
 800d468:	3708      	adds	r7, #8
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 800d46e:	b580      	push	{r7, lr}
 800d470:	b082      	sub	sp, #8
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
 800d476:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	683a      	ldr	r2, [r7, #0]
 800d47c:	4611      	mov	r1, r2
 800d47e:	4618      	mov	r0, r3
 800d480:	f000 fae6 	bl	800da50 <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	1d1a      	adds	r2, r3, #4
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	3304      	adds	r3, #4
 800d48c:	4619      	mov	r1, r3
 800d48e:	4610      	mov	r0, r2
 800d490:	f000 fac9 	bl	800da26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 800d494:	bf00      	nop
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <_ZNKSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	370c      	adds	r7, #12
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f7ff fbad 	bl	800cc1c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f7ff fba7 	bl	800cc1c <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	601a      	str	r2, [r3, #0]
	return __p;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
      }
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3710      	adds	r7, #16
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 800d4de:	b5b0      	push	{r4, r5, r7, lr}
 800d4e0:	b084      	sub	sp, #16
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	60f8      	str	r0, [r7, #12]
 800d4e6:	60b9      	str	r1, [r7, #8]
 800d4e8:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800d4ea:	68fc      	ldr	r4, [r7, #12]
 800d4ec:	68b8      	ldr	r0, [r7, #8]
 800d4ee:	f000 face 	bl	800da8e <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800d4f2:	4605      	mov	r5, r0
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f7ff fc19 	bl	800cd2c <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	4629      	mov	r1, r5
 800d500:	4620      	mov	r0, r4
 800d502:	f000 facf 	bl	800daa4 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	4618      	mov	r0, r3
 800d50a:	3710      	adds	r7, #16
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bdb0      	pop	{r4, r5, r7, pc}

0800d510 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4618      	mov	r0, r3
 800d51c:	f000 fade 	bl	800dadc <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800d520:	4603      	mov	r3, r0
 800d522:	4618      	mov	r0, r3
 800d524:	3708      	adds	r7, #8
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}

0800d52a <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800d52a:	b590      	push	{r4, r7, lr}
 800d52c:	b083      	sub	sp, #12
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
 800d532:	6039      	str	r1, [r7, #0]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	4618      	mov	r0, r3
 800d538:	f7ff fa06 	bl	800c948 <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d53c:	683c      	ldr	r4, [r7, #0]
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f7ff fa0f 	bl	800c962 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800d544:	4603      	mov	r3, r0
 800d546:	601c      	str	r4, [r3, #0]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	4618      	mov	r0, r3
 800d54c:	370c      	adds	r7, #12
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd90      	pop	{r4, r7, pc}

0800d552 <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d552:	b580      	push	{r7, lr}
 800d554:	b082      	sub	sp, #8
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 faca 	bl	800daf4 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d560:	4603      	mov	r3, r0
 800d562:	4618      	mov	r0, r3
 800d564:	3708      	adds	r7, #8
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
      get() const noexcept
 800d56a:	b480      	push	{r7}
 800d56c:	b083      	sub	sp, #12
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4618      	mov	r0, r3
 800d578:	370c      	adds	r7, #12
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr

0800d582 <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800d582:	b580      	push	{r7, lr}
 800d584:	b082      	sub	sp, #8
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	4618      	mov	r0, r3
 800d58e:	f000 fabd 	bl	800db0c <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800d592:	4603      	mov	r3, r0
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4618      	mov	r0, r3
 800d598:	3708      	adds	r7, #8
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}

0800d59e <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800d59e:	b480      	push	{r7}
 800d5a0:	b083      	sub	sp, #12
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800d5a6:	687b      	ldr	r3, [r7, #4]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	370c      	adds	r7, #12
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800d5be:	2301      	movs	r3, #1
 800d5c0:	2204      	movs	r2, #4
 800d5c2:	6839      	ldr	r1, [r7, #0]
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f7f7 fe65 	bl	8005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800d5d2:	b480      	push	{r7}
 800d5d4:	b083      	sub	sp, #12
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800d5da:	687b      	ldr	r3, [r7, #4]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	370c      	adds	r7, #12
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	220a      	movs	r2, #10
 800d5f6:	6839      	ldr	r1, [r7, #0]
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f7f7 fe4b 	bl	8005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	3708      	adds	r7, #8
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>:
  }

  template <typename TConverter, typename T>
  bool doSet(const T& value) const {
 800d606:	b580      	push	{r7, lr}
 800d608:	b084      	sub	sp, #16
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
 800d60e:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 800d610:	461a      	mov	r2, r3
 800d612:	6839      	ldr	r1, [r7, #0]
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 faa6 	bl	800db66 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>
 800d61a:	4603      	mov	r3, r0
        value, is_same<typename function_traits<
                           decltype(&TConverter::toJson)>::return_type,
                       bool>{});
  }
 800d61c:	4618      	mov	r0, r3
 800d61e:	3710      	adds	r7, #16
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4618      	mov	r0, r3
 800d630:	370c      	adds	r7, #12
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr

0800d63a <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b084      	sub	sp, #16
 800d63e:	af00      	add	r7, sp, #0
 800d640:	60f8      	str	r0, [r7, #12]
 800d642:	60b9      	str	r1, [r7, #8]
 800d644:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f7ff ffec 	bl	800d624 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d64c:	4603      	mov	r3, r0
 800d64e:	461a      	mov	r2, r3
 800d650:	68b9      	ldr	r1, [r7, #8]
 800d652:	68f8      	ldr	r0, [r7, #12]
 800d654:	f000 faa1 	bl	800db9a <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 800d658:	bf00      	nop
 800d65a:	3710      	adds	r7, #16
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 800d660:	b5b0      	push	{r4, r5, r7, lr}
 800d662:	b08c      	sub	sp, #48	@ 0x30
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800d66c:	4a39      	ldr	r2, [pc, #228]	@ (800d754 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 800d66e:	2101      	movs	r1, #1
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	f000 faaa 	bl	800dbca <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>
 800d676:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 800d684:	68f8      	ldr	r0, [r7, #12]
 800d686:	f7fe ff5a 	bl	800c53e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 800d68a:	4603      	mov	r3, r0
 800d68c:	617b      	str	r3, [r7, #20]
 800d68e:	f107 0214 	add.w	r2, r7, #20
 800d692:	f107 0308 	add.w	r3, r7, #8
 800d696:	4611      	mov	r1, r2
 800d698:	4618      	mov	r0, r3
 800d69a:	f000 fadd 	bl	800dc58 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f000 faeb 	bl	800dc82 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>
 800d6ac:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800d6b2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800d6b4:	6a3b      	ldr	r3, [r7, #32]
 800d6b6:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 800d6b8:	69fa      	ldr	r2, [r7, #28]
 800d6ba:	18d5      	adds	r5, r2, r3
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f7ff ffb1 	bl	800d624 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f7ff ffb6 	bl	800d63a <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d6d2:	f107 0308 	add.w	r3, r7, #8
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7ff fc5e 	bl	800cf98 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7ff f9ca 	bl	800ca7c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800d6e8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800d6ea:	69fa      	ldr	r2, [r7, #28]
 800d6ec:	4621      	mov	r1, r4
 800d6ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6f0:	f000 fadb 	bl	800dcaa <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 800d6f4:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	3308      	adds	r3, #8
 800d6fa:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d6fc:	f107 0308 	add.w	r3, r7, #8
 800d700:	4618      	mov	r0, r3
 800d702:	f7ff fc49 	bl	800cf98 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800d706:	4603      	mov	r3, r0
 800d708:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7ff f9b5 	bl	800ca7c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800d712:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800d714:	69ba      	ldr	r2, [r7, #24]
 800d716:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d718:	4620      	mov	r0, r4
 800d71a:	f000 fac6 	bl	800dcaa <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 800d71e:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800d720:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	689a      	ldr	r2, [r3, #8]
 800d726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d728:	1ad3      	subs	r3, r2, r3
 800d72a:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 800d72c:	461a      	mov	r2, r3
 800d72e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d730:	f7ff f991 	bl	800ca56 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	69fa      	ldr	r2, [r7, #28]
 800d738:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	69ba      	ldr	r2, [r7, #24]
 800d73e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800d740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d742:	00db      	lsls	r3, r3, #3
 800d744:	69fa      	ldr	r2, [r7, #28]
 800d746:	441a      	add	r2, r3
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	609a      	str	r2, [r3, #8]
    }
 800d74c:	bf00      	nop
 800d74e:	3730      	adds	r7, #48	@ 0x30
 800d750:	46bd      	mov	sp, r7
 800d752:	bdb0      	pop	{r4, r5, r7, pc}
 800d754:	0802a85c 	.word	0x0802a85c

0800d758 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f7fe fefc 	bl	800c55e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 800d766:	4603      	mov	r3, r0
 800d768:	60fb      	str	r3, [r7, #12]
 800d76a:	f107 030c 	add.w	r3, r7, #12
 800d76e:	2101      	movs	r1, #1
 800d770:	4618      	mov	r0, r3
 800d772:	f000 fab9 	bl	800dce8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEmiEi>
 800d776:	4603      	mov	r3, r0
 800d778:	60bb      	str	r3, [r7, #8]
 800d77a:	f107 0308 	add.w	r3, r7, #8
 800d77e:	4618      	mov	r0, r3
 800d780:	f7fe ff27 	bl	800c5d2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 800d784:	4603      	mov	r3, r0
      }
 800d786:	4618      	mov	r0, r3
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>:
  StringNode* add(TAdaptedString str, Allocator* allocator) {
 800d78e:	b580      	push	{r7, lr}
 800d790:	b088      	sub	sp, #32
 800d792:	af02      	add	r7, sp, #8
 800d794:	60f8      	str	r0, [r7, #12]
 800d796:	4638      	mov	r0, r7
 800d798:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    auto node = get(str);
 800d79c:	463b      	mov	r3, r7
 800d79e:	4619      	mov	r1, r3
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f7fa fc25 	bl	8007ff0 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 800d7a6:	6178      	str	r0, [r7, #20]
    if (node) {
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d007      	beq.n	800d7be <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x30>
      node->references++;
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	889b      	ldrh	r3, [r3, #4]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	809a      	strh	r2, [r3, #4]
      return node;
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	e023      	b.n	800d806 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    size_t n = str.size();
 800d7be:	463b      	mov	r3, r7
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7f7 fd8f 	bl	80052e4 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 800d7c6:	6138      	str	r0, [r7, #16]
    node = StringNode::create(n, allocator);
 800d7c8:	6a39      	ldr	r1, [r7, #32]
 800d7ca:	6938      	ldr	r0, [r7, #16]
 800d7cc:	f7f7 fcf8 	bl	80051c0 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800d7d0:	6178      	str	r0, [r7, #20]
    if (!node)
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d101      	bne.n	800d7dc <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x4e>
      return nullptr;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	e014      	b.n	800d806 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    stringGetChars(str, node->data, n);
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	f103 0208 	add.w	r2, r3, #8
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	9300      	str	r3, [sp, #0]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	463a      	mov	r2, r7
 800d7ea:	ca07      	ldmia	r2, {r0, r1, r2}
 800d7ec:	f000 fa95 	bl	800dd1a <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>
    node->data[n] = 0;  // force NUL terminator
 800d7f0:	697a      	ldr	r2, [r7, #20]
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	4413      	add	r3, r2
 800d7f6:	3308      	adds	r3, #8
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	701a      	strb	r2, [r3, #0]
    add(node);
 800d7fc:	6979      	ldr	r1, [r7, #20]
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f7f7 fda2 	bl	8005348 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
    return node;
 800d804:	697b      	ldr	r3, [r7, #20]
  }
 800d806:	4618      	mov	r0, r3
 800d808:	3718      	adds	r7, #24
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d80e:	b580      	push	{r7, lr}
 800d810:	b082      	sub	sp, #8
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 fa9f 	bl	800dd5a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>
 800d81c:	4603      	mov	r3, r0
 800d81e:	4618      	mov	r0, r3
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d826:	b580      	push	{r7, lr}
 800d828:	b082      	sub	sp, #8
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 fa9f 	bl	800dd72 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>
 800d834:	4603      	mov	r3, r0
 800d836:	4618      	mov	r0, r3
 800d838:	3708      	adds	r7, #8
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>:
      _Tuple_impl()
 800d83e:	b580      	push	{r7, lr}
 800d840:	b082      	sub	sp, #8
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 faa0 	bl	800dd8c <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	4618      	mov	r0, r3
 800d850:	3708      	adds	r7, #8
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}

0800d856 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>:
      constexpr _Head_base()
 800d856:	b480      	push	{r7}
 800d858:	b083      	sub	sp, #12
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2200      	movs	r2, #0
 800d862:	601a      	str	r2, [r3, #0]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4618      	mov	r0, r3
 800d868:	370c      	adds	r7, #12
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr

0800d872 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d872:	b580      	push	{r7, lr}
 800d874:	b082      	sub	sp, #8
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 fa91 	bl	800dda2 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 800d880:	4603      	mov	r3, r0
 800d882:	4618      	mov	r0, r3
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}

0800d88a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>:
      _Tuple_impl()
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b082      	sub	sp, #8
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 fa92 	bl	800ddbc <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	4618      	mov	r0, r3
 800d89c:	3708      	adds	r7, #8
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>:
      constexpr _Head_base()
 800d8a2:	b480      	push	{r7}
 800d8a4:	b083      	sub	sp, #12
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	601a      	str	r2, [r3, #0]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	370c      	adds	r7, #12
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr

0800d8be <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d8be:	b580      	push	{r7, lr}
 800d8c0:	b082      	sub	sp, #8
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f000 fa83 	bl	800ddd2 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3708      	adds	r7, #8
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b084      	sub	sp, #16
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	60f8      	str	r0, [r7, #12]
 800d8de:	60b9      	str	r1, [r7, #8]
 800d8e0:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	00db      	lsls	r3, r3, #3
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	68b8      	ldr	r0, [r7, #8]
 800d8ea:	f01a fef4 	bl	80286d6 <_ZdlPvj>
      }
 800d8ee:	3710      	adds	r7, #16
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800d8fe:	e009      	b.n	800d914 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 fa73 	bl	800ddec <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800d906:	4603      	mov	r3, r0
 800d908:	4618      	mov	r0, r3
 800d90a:	f000 fa7a 	bl	800de02 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>
	  for (; __first != __last; ++__first)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	3308      	adds	r3, #8
 800d912:	607b      	str	r3, [r7, #4]
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d1f1      	bne.n	800d900 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0xc>
	}
 800d91c:	bf00      	nop
 800d91e:	bf00      	nop
 800d920:	3708      	adds	r7, #8
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d926:	b580      	push	{r7, lr}
 800d928:	b082      	sub	sp, #8
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 fa72 	bl	800de18 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>
 800d934:	4603      	mov	r3, r0
 800d936:	4618      	mov	r0, r3
 800d938:	3708      	adds	r7, #8
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}

0800d93e <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800d93e:	b580      	push	{r7, lr}
 800d940:	b082      	sub	sp, #8
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	4618      	mov	r0, r3
 800d94a:	f000 fa71 	bl	800de30 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	4618      	mov	r0, r3
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f000 fa75 	bl	800de50 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>
 800d966:	4603      	mov	r3, r0
 800d968:	4618      	mov	r0, r3
 800d96a:	3708      	adds	r7, #8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f000 fa76 	bl	800de6a <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800d97e:	4603      	mov	r3, r0
 800d980:	4618      	mov	r0, r3
 800d982:	3708      	adds	r7, #8
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I12CommsHandlerSaIvEJEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 800d988:	b5b0      	push	{r4, r5, r7, lr}
 800d98a:	b08a      	sub	sp, #40	@ 0x28
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	60f8      	str	r0, [r7, #12]
 800d990:	60b9      	str	r1, [r7, #8]
 800d992:	607a      	str	r2, [r7, #4]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	f107 031c 	add.w	r3, r7, #28
 800d99a:	4611      	mov	r1, r2
 800d99c:	4618      	mov	r0, r3
 800d99e:	f000 fa70 	bl	800de82 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 800d9a2:	f107 0314 	add.w	r3, r7, #20
 800d9a6:	f107 021c 	add.w	r2, r7, #28
 800d9aa:	4611      	mov	r1, r2
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f000 fa81 	bl	800deb4 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 800d9b2:	f107 0314 	add.w	r3, r7, #20
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f000 faa4 	bl	800df04 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 800d9bc:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 800d9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	202c      	movs	r0, #44	@ 0x2c
 800d9c4:	f7fd f838 	bl	800aa38 <_ZnwjPv>
 800d9c8:	4604      	mov	r4, r0
 800d9ca:	4629      	mov	r1, r5
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f000 faa7 	bl	800df20 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>
 800d9d2:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 800d9d4:	f107 0314 	add.w	r3, r7, #20
 800d9d8:	2100      	movs	r1, #0
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f000 fac2 	bl	800df64 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	6a3a      	ldr	r2, [r7, #32]
 800d9e4:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 800d9e6:	6a38      	ldr	r0, [r7, #32]
 800d9e8:	f000 facb 	bl	800df82 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800d9ec:	4602      	mov	r2, r0
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	601a      	str	r2, [r3, #0]
	}
 800d9f2:	f107 0314 	add.w	r3, r7, #20
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f000 fa6f 	bl	800deda <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800d9fc:	f107 031c 	add.w	r3, r7, #28
 800da00:	4618      	mov	r0, r3
 800da02:	f000 fa4b 	bl	800de9c <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	4618      	mov	r0, r3
 800da0a:	3728      	adds	r7, #40	@ 0x28
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bdb0      	pop	{r4, r5, r7, pc}

0800da10 <_ZNSt12__shared_ptrI12CommsHandlerLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800da10:	b480      	push	{r7}
 800da12:	b083      	sub	sp, #12
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
	{ }
 800da1a:	bf00      	nop
 800da1c:	370c      	adds	r7, #12
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr

0800da26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 800da26:	b480      	push	{r7}
 800da28:	b085      	sub	sp, #20
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	68fa      	ldr	r2, [r7, #12]
 800da42:	601a      	str	r2, [r3, #0]
      }
 800da44:	bf00      	nop
 800da46:	3714      	adds	r7, #20
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <_ZSt4swapIP12CommsHandlerENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 fa9f 	bl	800df9e <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800da60:	4603      	mov	r3, r0
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800da66:	6838      	ldr	r0, [r7, #0]
 800da68:	f000 fa99 	bl	800df9e <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800da6c:	4603      	mov	r3, r0
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800da74:	f107 030c 	add.w	r3, r7, #12
 800da78:	4618      	mov	r0, r3
 800da7a:	f000 fa90 	bl	800df9e <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 800da7e:	4603      	mov	r3, r0
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	601a      	str	r2, [r3, #0]
    }
 800da86:	bf00      	nop
 800da88:	3710      	adds	r7, #16
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}

0800da8e <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800da8e:	b480      	push	{r7}
 800da90:	b083      	sub	sp, #12
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	4618      	mov	r0, r3
 800da9a:	370c      	adds	r7, #12
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800daa4:	b590      	push	{r4, r7, lr}
 800daa6:	b085      	sub	sp, #20
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f7ff f93b 	bl	800cd2c <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800dab6:	4603      	mov	r3, r0
 800dab8:	4619      	mov	r1, r3
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f000 fa7a 	bl	800dfb4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>
 800dac0:	68fc      	ldr	r4, [r7, #12]
 800dac2:	68b8      	ldr	r0, [r7, #8]
 800dac4:	f7ff ffe3 	bl	800da8e <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800dac8:	4603      	mov	r3, r0
 800daca:	4619      	mov	r1, r3
 800dacc:	4620      	mov	r0, r4
 800dace:	f000 fa83 	bl	800dfd8 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>
	{ }
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	4618      	mov	r0, r3
 800dad6:	3714      	adds	r7, #20
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd90      	pop	{r4, r7, pc}

0800dadc <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f000 fa88 	bl	800dffa <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>
 800daea:	4603      	mov	r3, r0
 800daec:	4618      	mov	r0, r3
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 fa89 	bl	800e014 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>
 800db02:	4603      	mov	r3, r0
 800db04:	4618      	mov	r0, r3
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	4618      	mov	r0, r3
 800db18:	f000 fa88 	bl	800e02c <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800db1c:	4603      	mov	r3, r0
 800db1e:	4618      	mov	r0, r3
 800db20:	3708      	adds	r7, #8
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}

0800db26 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800db26:	b580      	push	{r7, lr}
 800db28:	b082      	sub	sp, #8
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 fa88 	bl	800e044 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800db34:	4603      	mov	r3, r0
 800db36:	4618      	mov	r0, r3
 800db38:	f000 fa8f 	bl	800e05a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 800db3c:	4603      	mov	r3, r0
  }
 800db3e:	4618      	mov	r0, r3
 800db40:	3708      	adds	r7, #8
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}

0800db46 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800db46:	b580      	push	{r7, lr}
 800db48:	b082      	sub	sp, #8
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f000 fa78 	bl	800e044 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800db54:	4603      	mov	r3, r0
 800db56:	4618      	mov	r0, r3
 800db58:	f000 fa8b 	bl	800e072 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 800db5c:	4603      	mov	r3, r0
  }
 800db5e:	4618      	mov	r0, r3
 800db60:	3708      	adds	r7, #8
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>:
  return resources && !resources->overflowed();
}

template <typename TDerived>
template <typename TConverter, typename T>
inline bool VariantRefBase<TDerived>::doSet(const T& value, true_type) const {
 800db66:	b590      	push	{r4, r7, lr}
 800db68:	b087      	sub	sp, #28
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	60f8      	str	r0, [r7, #12]
 800db6e:	60b9      	str	r1, [r7, #8]
 800db70:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	681c      	ldr	r4, [r3, #0]
 800db76:	f107 0310 	add.w	r3, r7, #16
 800db7a:	68f9      	ldr	r1, [r7, #12]
 800db7c:	4618      	mov	r0, r3
 800db7e:	f000 fa84 	bl	800e08a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>
 800db82:	f107 0310 	add.w	r3, r7, #16
 800db86:	e893 0006 	ldmia.w	r3, {r1, r2}
 800db8a:	4620      	mov	r0, r4
 800db8c:	f000 fa93 	bl	800e0b6 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>
 800db90:	4603      	mov	r3, r0
}
 800db92:	4618      	mov	r0, r3
 800db94:	371c      	adds	r7, #28
 800db96:	46bd      	mov	sp, r7
 800db98:	bd90      	pop	{r4, r7, pc}

0800db9a <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800db9a:	b590      	push	{r4, r7, lr}
 800db9c:	b085      	sub	sp, #20
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	60f8      	str	r0, [r7, #12]
 800dba2:	60b9      	str	r1, [r7, #8]
 800dba4:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	4619      	mov	r1, r3
 800dbaa:	2008      	movs	r0, #8
 800dbac:	f7fc ff44 	bl	800aa38 <_ZnwjPv>
 800dbb0:	4604      	mov	r4, r0
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f7ff fd36 	bl	800d624 <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	4619      	mov	r1, r3
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	f000 fabf 	bl	800e140 <_ZNSt10shared_ptrI6ModuleEC1EOS1_>
 800dbc2:	bf00      	nop
 800dbc4:	3714      	adds	r7, #20
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd90      	pop	{r4, r7, pc}

0800dbca <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800dbca:	b590      	push	{r4, r7, lr}
 800dbcc:	b087      	sub	sp, #28
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	60f8      	str	r0, [r7, #12]
 800dbd2:	60b9      	str	r1, [r7, #8]
 800dbd4:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f000 fac5 	bl	800e166 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800dbdc:	4604      	mov	r4, r0
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f000 fad2 	bl	800e188 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	1ae2      	subs	r2, r4, r3
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	bf34      	ite	cc
 800dbee:	2301      	movcc	r3, #1
 800dbf0:	2300      	movcs	r3, #0
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d002      	beq.n	800dbfe <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f01a fd9c 	bl	8028736 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800dbfe:	68f8      	ldr	r0, [r7, #12]
 800dc00:	f000 fac2 	bl	800e188 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800dc04:	4604      	mov	r4, r0
 800dc06:	68f8      	ldr	r0, [r7, #12]
 800dc08:	f000 fabe 	bl	800e188 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	613b      	str	r3, [r7, #16]
 800dc10:	f107 0208 	add.w	r2, r7, #8
 800dc14:	f107 0310 	add.w	r3, r7, #16
 800dc18:	4611      	mov	r1, r2
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7fe f901 	bl	800be22 <_ZSt3maxIjERKT_S2_S2_>
 800dc20:	4603      	mov	r3, r0
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4423      	add	r3, r4
 800dc26:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800dc28:	68f8      	ldr	r0, [r7, #12]
 800dc2a:	f000 faad 	bl	800e188 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d306      	bcc.n	800dc44 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x7a>
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	f000 fa95 	bl	800e166 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d904      	bls.n	800dc4e <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x84>
 800dc44:	68f8      	ldr	r0, [r7, #12]
 800dc46:	f000 fa8e 	bl	800e166 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	e000      	b.n	800dc50 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x86>
 800dc4e:	697b      	ldr	r3, [r7, #20]
      }
 800dc50:	4618      	mov	r0, r3
 800dc52:	371c      	adds	r7, #28
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd90      	pop	{r4, r7, pc}

0800dc58 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800dc58:	b590      	push	{r4, r7, lr}
 800dc5a:	b083      	sub	sp, #12
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f7ff f998 	bl	800cf98 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	681c      	ldr	r4, [r3, #0]
 800dc6c:	6838      	ldr	r0, [r7, #0]
 800dc6e:	f7ff f993 	bl	800cf98 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 800dc72:	4603      	mov	r3, r0
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	1ae3      	subs	r3, r4, r3
 800dc78:	10db      	asrs	r3, r3, #3
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	370c      	adds	r7, #12
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd90      	pop	{r4, r7, pc}

0800dc82 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b082      	sub	sp, #8
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
 800dc8a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d006      	beq.n	800dca0 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x1e>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6839      	ldr	r1, [r7, #0]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 fa86 	bl	800e1a8 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	e000      	b.n	800dca2 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x20>
 800dca0:	2300      	movs	r3, #0
      }
 800dca2:	4618      	mov	r0, r3
 800dca4:	3708      	adds	r7, #8
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b084      	sub	sp, #16
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	60f8      	str	r0, [r7, #12]
 800dcb2:	60b9      	str	r1, [r7, #8]
 800dcb4:	607a      	str	r2, [r7, #4]
 800dcb6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	68b9      	ldr	r1, [r7, #8]
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f000 fa81 	bl	800e1c6 <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 800dcc4:	4603      	mov	r3, r0
      }
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b082      	sub	sp, #8
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800dcd8:	6839      	ldr	r1, [r7, #0]
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 fa90 	bl	800e200 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>
	}
 800dce0:	bf00      	nop
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	00db      	lsls	r3, r3, #3
 800dcfa:	425b      	negs	r3, r3
 800dcfc:	4413      	add	r3, r2
 800dcfe:	60fb      	str	r3, [r7, #12]
 800dd00:	f107 020c 	add.w	r2, r7, #12
 800dd04:	f107 0308 	add.w	r3, r7, #8
 800dd08:	4611      	mov	r1, r2
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f7ff f934 	bl	800cf78 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	4618      	mov	r0, r3
 800dd14:	3710      	adds	r7, #16
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}

0800dd1a <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
  return stringEquals(s2, s1);
}

template <typename TAdaptedString>
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 800dd1a:	b590      	push	{r4, r7, lr}
 800dd1c:	b087      	sub	sp, #28
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	1d3c      	adds	r4, r7, #4
 800dd22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dd26:	603b      	str	r3, [r7, #0]
  ARDUINOJSON_ASSERT(s.size() <= n);
  for (size_t i = 0; i < n; i++) {
 800dd28:	2300      	movs	r3, #0
 800dd2a:	617b      	str	r3, [r7, #20]
 800dd2c:	e00c      	b.n	800dd48 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x2e>
    p[i] = s[i];
 800dd2e:	683a      	ldr	r2, [r7, #0]
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	18d4      	adds	r4, r2, r3
 800dd34:	1d3b      	adds	r3, r7, #4
 800dd36:	6979      	ldr	r1, [r7, #20]
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7f2 ffe5 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	3301      	adds	r3, #1
 800dd46:	617b      	str	r3, [r7, #20]
 800dd48:	697a      	ldr	r2, [r7, #20]
 800dd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d3ee      	bcc.n	800dd2e <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x14>
  }
}
 800dd50:	bf00      	nop
 800dd52:	bf00      	nop
 800dd54:	371c      	adds	r7, #28
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd90      	pop	{r4, r7, pc}

0800dd5a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b082      	sub	sp, #8
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 fa58 	bl	800e218 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3708      	adds	r7, #8
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b082      	sub	sp, #8
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f000 fa56 	bl	800e22e <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>
 800dd82:	4603      	mov	r3, r0
 800dd84:	4618      	mov	r0, r3
 800dd86:	3708      	adds	r7, #8
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>:
      constexpr _Head_base()
 800dd8c:	b480      	push	{r7}
 800dd8e:	b083      	sub	sp, #12
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	4618      	mov	r0, r3
 800dd98:	370c      	adds	r7, #12
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr

0800dda2 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b082      	sub	sp, #8
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	4618      	mov	r0, r3
 800ddae:	f000 fa49 	bl	800e244 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>:
      constexpr _Head_base()
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	370c      	adds	r7, #12
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr

0800ddd2 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b082      	sub	sp, #8
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	4618      	mov	r0, r3
 800ddde:	f000 fa3c 	bl	800e25a <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>
 800dde2:	4603      	mov	r3, r0
 800dde4:	4618      	mov	r0, r3
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	370c      	adds	r7, #12
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr

0800de02 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>:
    _Destroy(_Tp* __pointer)
 800de02:	b580      	push	{r7, lr}
 800de04:	b082      	sub	sp, #8
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f7fd fa21 	bl	800b252 <_ZNSt10shared_ptrI6ModuleED1Ev>
    }
 800de10:	bf00      	nop
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f000 fa25 	bl	800e270 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>
 800de26:	4603      	mov	r3, r0
 800de28:	4618      	mov	r0, r3
 800de2a:	3708      	adds	r7, #8
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 fa24 	bl	800e286 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4618      	mov	r0, r3
 800de42:	f000 fa2c 	bl	800e29e <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	4618      	mov	r0, r3
 800de4a:	3708      	adds	r7, #8
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4618      	mov	r0, r3
 800de5c:	f000 fa2d 	bl	800e2ba <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>
 800de60:	4603      	mov	r3, r0
 800de62:	4618      	mov	r0, r3
 800de64:	3708      	adds	r7, #8
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}

0800de6a <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800de6a:	b580      	push	{r7, lr}
 800de6c:	b082      	sub	sp, #8
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 fa2c 	bl	800e2d0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>
 800de78:	4603      	mov	r3, r0
 800de7a:	4618      	mov	r0, r3
 800de7c:	3708      	adds	r7, #8
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}

0800de82 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800de82:	b580      	push	{r7, lr}
 800de84:	b082      	sub	sp, #8
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
 800de8a:	6039      	str	r1, [r7, #0]
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f000 fa2b 	bl	800e2e8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	4618      	mov	r0, r3
 800de96:	3708      	adds	r7, #8
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fa2a 	bl	800e2fe <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4618      	mov	r0, r3
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    };

  /// Allocate space for a single object using __a
  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 800debe:	2101      	movs	r1, #1
 800dec0:	6838      	ldr	r0, [r7, #0]
 800dec2:	f000 fa27 	bl	800e314 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 800dec6:	4603      	mov	r3, r0
 800dec8:	461a      	mov	r2, r3
 800deca:	6839      	ldr	r1, [r7, #0]
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 fa30 	bl	800e332 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 800deda:	b580      	push	{r7, lr}
 800dedc:	b082      	sub	sp, #8
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d007      	beq.n	800defa <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6818      	ldr	r0, [r3, #0]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	2201      	movs	r2, #1
 800def4:	4619      	mov	r1, r3
 800def6:	f000 fa30 	bl	800e35a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4618      	mov	r0, r3
 800defe:	3708      	adds	r7, #8
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	4618      	mov	r0, r3
 800df12:	f000 fa31 	bl	800e378 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 800df16:	4603      	mov	r3, r0
 800df18:	4618      	mov	r0, r3
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 800df20:	b590      	push	{r4, r7, lr}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	7039      	strb	r1, [r7, #0]
	: _M_impl(__a)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	4618      	mov	r0, r3
 800df2e:	f000 fa2f 	bl	800e390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800df32:	4a0b      	ldr	r2, [pc, #44]	@ (800df60 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJEEES1_DpOT_+0x40>)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	601a      	str	r2, [r3, #0]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	330c      	adds	r3, #12
 800df3c:	4621      	mov	r1, r4
 800df3e:	4618      	mov	r0, r3
 800df40:	f000 fa3c 	bl	800e3bc <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f000 f81c 	bl	800df82 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800df4a:	4602      	mov	r2, r0
 800df4c:	463b      	mov	r3, r7
 800df4e:	4611      	mov	r1, r2
 800df50:	4618      	mov	r0, r3
 800df52:	f000 fa42 	bl	800e3da <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>
	}
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	4618      	mov	r0, r3
 800df5a:	370c      	adds	r7, #12
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd90      	pop	{r4, r7, pc}
 800df60:	0802b480 	.word	0x0802b480

0800df64 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2200      	movs	r2, #0
 800df72:	605a      	str	r2, [r3, #4]
	return *this;
 800df74:	687b      	ldr	r3, [r7, #4]
      }
 800df76:	4618      	mov	r0, r3
 800df78:	370c      	adds	r7, #12
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr

0800df82 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 800df82:	b580      	push	{r7, lr}
 800df84:	b082      	sub	sp, #8
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	330c      	adds	r3, #12
 800df8e:	4618      	mov	r0, r3
 800df90:	f000 fa2f 	bl	800e3f2 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>
 800df94:	4603      	mov	r3, r0
 800df96:	4618      	mov	r0, r3
 800df98:	3708      	adds	r7, #8
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}

0800df9e <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800df9e:	b480      	push	{r7}
 800dfa0:	b083      	sub	sp, #12
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800dfbe:	6838      	ldr	r0, [r7, #0]
 800dfc0:	f7fe feb4 	bl	800cd2c <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f000 fa1e 	bl	800e40a <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>
	{ }
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3708      	adds	r7, #8
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800dfe2:	6838      	ldr	r0, [r7, #0]
 800dfe4:	f7ff fd53 	bl	800da8e <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	681a      	ldr	r2, [r3, #0]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	601a      	str	r2, [r3, #0]
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	4618      	mov	r0, r3
 800dff4:	3708      	adds	r7, #8
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}

0800dffa <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800dffa:	b580      	push	{r7, lr}
 800dffc:	b082      	sub	sp, #8
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4618      	mov	r0, r3
 800e006:	f000 fa13 	bl	800e430 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>
 800e00a:	4603      	mov	r3, r0
 800e00c:	4618      	mov	r0, r3
 800e00e:	3708      	adds	r7, #8
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f000 fa12 	bl	800e446 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>
 800e022:	4603      	mov	r3, r0
 800e024:	4618      	mov	r0, r3
 800e026:	3708      	adds	r7, #8
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f000 fa11 	bl	800e45c <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>
 800e03a:	4603      	mov	r3, r0
 800e03c:	4618      	mov	r0, r3
 800e03e:	3708      	adds	r7, #8
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 800e044:	b480      	push	{r7}
 800e046:	b083      	sub	sp, #12
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800e04c:	687b      	ldr	r3, [r7, #4]
  }
 800e04e:	4618      	mov	r0, r3
 800e050:	370c      	adds	r7, #12
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr

0800e05a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b082      	sub	sp, #8
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
    return client.getData();
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f000 fa07 	bl	800e476 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>
 800e068:	4603      	mov	r3, r0
  }
 800e06a:	4618      	mov	r0, r3
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800e072:	b580      	push	{r7, lr}
 800e074:	b082      	sub	sp, #8
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 fa17 	bl	800e4ae <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>
 800e080:	4603      	mov	r3, r0
  }
 800e082:	4618      	mov	r0, r3
 800e084:	3708      	adds	r7, #8
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}

0800e08a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>:
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
 800e08a:	b590      	push	{r4, r7, lr}
 800e08c:	b083      	sub	sp, #12
 800e08e:	af00      	add	r7, sp, #0
 800e090:	6078      	str	r0, [r7, #4]
 800e092:	6039      	str	r1, [r7, #0]
  return JsonVariant(getOrCreateData(), getResourceManager());
 800e094:	6838      	ldr	r0, [r7, #0]
 800e096:	f000 fa18 	bl	800e4ca <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>
 800e09a:	4604      	mov	r4, r0
 800e09c:	6838      	ldr	r0, [r7, #0]
 800e09e:	f7ff fd52 	bl	800db46 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	461a      	mov	r2, r3
 800e0a6:	4621      	mov	r1, r4
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f7f7 fce5 	bl	8005a78 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
}
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	370c      	adds	r7, #12
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd90      	pop	{r4, r7, pc}

0800e0b6 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b086      	sub	sp, #24
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	60f8      	str	r0, [r7, #12]
 800e0be:	1d3b      	adds	r3, r7, #4
 800e0c0:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(dst);
 800e0c4:	1d3b      	adds	r3, r7, #4
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7f9 fa1e 	bl	8007508 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800e0cc:	6178      	str	r0, [r7, #20]
    if (!data)
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d101      	bne.n	800e0d8 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x22>
      return false;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	e00f      	b.n	800e0f8 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 800e0d8:	1d3b      	adds	r3, r7, #4
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7f9 fbb9 	bl	8007852 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800e0e0:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 800e0e2:	6939      	ldr	r1, [r7, #16]
 800e0e4:	6978      	ldr	r0, [r7, #20]
 800e0e6:	f7f8 f9fb 	bl	80064e0 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 800e0ea:	693a      	ldr	r2, [r7, #16]
 800e0ec:	68f9      	ldr	r1, [r7, #12]
 800e0ee:	6978      	ldr	r0, [r7, #20]
 800e0f0:	f000 f9fb 	bl	800e4ea <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	bf00      	nop
  }
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3718      	adds	r7, #24
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>:
  VariantData* getData() const {
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7fe ff82 	bl	800d012 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800e10e:	4603      	mov	r3, r0
 800e110:	4618      	mov	r0, r3
 800e112:	f000 fa2d 	bl	800e570 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800e116:	4603      	mov	r3, r0
  }
 800e118:	4618      	mov	r0, r3
 800e11a:	3708      	adds	r7, #8
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f7fe ff72 	bl	800d012 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800e12e:	4603      	mov	r3, r0
 800e130:	4618      	mov	r0, r3
 800e132:	f000 fa3c 	bl	800e5ae <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800e136:	4603      	mov	r3, r0
  }
 800e138:	4618      	mov	r0, r3
 800e13a:	3708      	adds	r7, #8
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <_ZNSt10shared_ptrI6ModuleEC1EOS1_>:
      shared_ptr(shared_ptr&& __r) noexcept
 800e140:	b590      	push	{r4, r7, lr}
 800e142:	b083      	sub	sp, #12
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 800e14a:	687c      	ldr	r4, [r7, #4]
 800e14c:	6838      	ldr	r0, [r7, #0]
 800e14e:	f7fe fac5 	bl	800c6dc <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800e152:	4603      	mov	r3, r0
 800e154:	4619      	mov	r1, r3
 800e156:	4620      	mov	r0, r4
 800e158:	f000 fa35 	bl	800e5c6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	4618      	mov	r0, r3
 800e160:	370c      	adds	r7, #12
 800e162:	46bd      	mov	sp, r7
 800e164:	bd90      	pop	{r4, r7, pc}

0800e166 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800e166:	b580      	push	{r7, lr}
 800e168:	b082      	sub	sp, #8
 800e16a:	af00      	add	r7, sp, #0
 800e16c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	4618      	mov	r0, r3
 800e172:	f000 fa60 	bl	800e636 <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800e176:	4603      	mov	r3, r0
 800e178:	4618      	mov	r0, r3
 800e17a:	f000 fa42 	bl	800e602 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>
 800e17e:	4603      	mov	r3, r0
 800e180:	4618      	mov	r0, r3
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	685a      	ldr	r2, [r3, #4]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	1ad3      	subs	r3, r2, r3
 800e19a:	10db      	asrs	r3, r3, #3
 800e19c:	4618      	mov	r0, r3
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	6839      	ldr	r1, [r7, #0]
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 fa48 	bl	800e64c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3708      	adds	r7, #8
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}

0800e1c6 <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800e1c6:	b5b0      	push	{r4, r5, r7, lr}
 800e1c8:	b084      	sub	sp, #16
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	60f8      	str	r0, [r7, #12]
 800e1ce:	60b9      	str	r1, [r7, #8]
 800e1d0:	607a      	str	r2, [r7, #4]
 800e1d2:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 800e1d4:	68f8      	ldr	r0, [r7, #12]
 800e1d6:	f000 fa63 	bl	800e6a0 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800e1da:	4604      	mov	r4, r0
 800e1dc:	68b8      	ldr	r0, [r7, #8]
 800e1de:	f000 fa5f 	bl	800e6a0 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800e1e2:	4605      	mov	r5, r0
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 fa5b 	bl	800e6a0 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	f000 fa60 	bl	800e6b6 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 800e1f6:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3710      	adds	r7, #16
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bdb0      	pop	{r4, r5, r7, pc}

0800e200 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800e20a:	6838      	ldr	r0, [r7, #0]
 800e20c:	f7fd f821 	bl	800b252 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800e210:	bf00      	nop
 800e212:	3708      	adds	r7, #8
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}

0800e218 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e218:	b480      	push	{r7}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	4618      	mov	r0, r3
 800e224:	370c      	adds	r7, #12
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr

0800e22e <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800e22e:	b480      	push	{r7}
 800e230:	b083      	sub	sp, #12
 800e232:	af00      	add	r7, sp, #0
 800e234:	6078      	str	r0, [r7, #4]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	4618      	mov	r0, r3
 800e23a:	370c      	adds	r7, #12
 800e23c:	46bd      	mov	sp, r7
 800e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e242:	4770      	bx	lr

0800e244 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e244:	b480      	push	{r7}
 800e246:	b083      	sub	sp, #12
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4618      	mov	r0, r3
 800e250:	370c      	adds	r7, #12
 800e252:	46bd      	mov	sp, r7
 800e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e258:	4770      	bx	lr

0800e25a <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>:
 800e25a:	b480      	push	{r7}
 800e25c:	b083      	sub	sp, #12
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	4618      	mov	r0, r3
 800e266:	370c      	adds	r7, #12
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr

0800e270 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e270:	b480      	push	{r7}
 800e272:	b083      	sub	sp, #12
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	4618      	mov	r0, r3
 800e27c:	370c      	adds	r7, #12
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr

0800e286 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>:
      _Tuple_impl()
 800e286:	b580      	push	{r7, lr}
 800e288:	b082      	sub	sp, #8
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 fa37 	bl	800e702 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	4618      	mov	r0, r3
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>:
      constexpr _Head_base()
 800e29e:	b480      	push	{r7}
 800e2a0:	b083      	sub	sp, #12
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	601a      	str	r2, [r3, #0]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	370c      	adds	r7, #12
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b8:	4770      	bx	lr

0800e2ba <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e2ba:	b480      	push	{r7}
 800e2bc:	b083      	sub	sp, #12
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr

0800e2d0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f000 fa1d 	bl	800e718 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	370c      	adds	r7, #12
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr

0800e2fe <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e2fe:	b480      	push	{r7}
 800e300:	b083      	sub	sp, #12
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	4618      	mov	r0, r3
 800e30a:	370c      	adds	r7, #12
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800e314:	b580      	push	{r7, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800e31e:	2200      	movs	r2, #0
 800e320:	6839      	ldr	r1, [r7, #0]
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f000 fa04 	bl	800e730 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800e328:	4603      	mov	r3, r0
 800e32a:	4618      	mov	r0, r3
 800e32c:	3708      	adds	r7, #8
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}

0800e332 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800e332:	b580      	push	{r7, lr}
 800e334:	b084      	sub	sp, #16
 800e336:	af00      	add	r7, sp, #0
 800e338:	60f8      	str	r0, [r7, #12]
 800e33a:	60b9      	str	r1, [r7, #8]
 800e33c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800e33e:	68b8      	ldr	r0, [r7, #8]
 800e340:	f000 fa24 	bl	800e78c <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 800e344:	4602      	mov	r2, r0
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	601a      	str	r2, [r3, #0]
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	605a      	str	r2, [r3, #4]
      { }
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	4618      	mov	r0, r3
 800e354:	3710      	adds	r7, #16
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b084      	sub	sp, #16
 800e35e:	af00      	add	r7, sp, #0
 800e360:	60f8      	str	r0, [r7, #12]
 800e362:	60b9      	str	r1, [r7, #8]
 800e364:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800e366:	687a      	ldr	r2, [r7, #4]
 800e368:	68b9      	ldr	r1, [r7, #8]
 800e36a:	68f8      	ldr	r0, [r7, #12]
 800e36c:	f000 fa19 	bl	800e7a2 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 800e370:	bf00      	nop
 800e372:	3710      	adds	r7, #16
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}

0800e378 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800e378:	b480      	push	{r7}
 800e37a:	b083      	sub	sp, #12
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800e380:	687b      	ldr	r3, [r7, #4]
    }
 800e382:	4618      	mov	r0, r3
 800e384:	370c      	adds	r7, #12
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
	...

0800e390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 800e390:	b480      	push	{r7}
 800e392:	b083      	sub	sp, #12
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 800e398:	4a07      	ldr	r2, [pc, #28]	@ (800e3b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	601a      	str	r2, [r3, #0]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2201      	movs	r2, #1
 800e3a2:	605a      	str	r2, [r3, #4]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	609a      	str	r2, [r3, #8]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	370c      	adds	r7, #12
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr
 800e3b8:	0802b49c 	.word	0x0802b49c

0800e3bc <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	7039      	strb	r1, [r7, #0]
 800e3c6:	463b      	mov	r3, r7
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 f9fa 	bl	800e7c4 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3708      	adds	r7, #8
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}

0800e3da <_ZNSt16allocator_traitsISaIvEE9constructI12CommsHandlerJEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 800e3da:	b580      	push	{r7, lr}
 800e3dc:	b082      	sub	sp, #8
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
 800e3e2:	6039      	str	r1, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 800e3e4:	6838      	ldr	r0, [r7, #0]
 800e3e6:	f000 f9f9 	bl	800e7dc <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>
 800e3ea:	bf00      	nop
 800e3ec:	3708      	adds	r7, #8
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}

0800e3f2 <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 800e3f2:	b580      	push	{r7, lr}
 800e3f4:	b082      	sub	sp, #8
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 f9ff 	bl	800e7fe <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>
 800e400:	4603      	mov	r3, r0
 800e402:	4618      	mov	r0, r3
 800e404:	3708      	adds	r7, #8
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 800e40a:	b590      	push	{r4, r7, lr}
 800e40c:	b083      	sub	sp, #12
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
 800e412:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800e414:	687c      	ldr	r4, [r7, #4]
 800e416:	6838      	ldr	r0, [r7, #0]
 800e418:	f7fe fc88 	bl	800cd2c <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800e41c:	4603      	mov	r3, r0
 800e41e:	4619      	mov	r1, r3
 800e420:	4620      	mov	r0, r4
 800e422:	f000 f9f7 	bl	800e814 <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	4618      	mov	r0, r3
 800e42a:	370c      	adds	r7, #12
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd90      	pop	{r4, r7, pc}

0800e430 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e430:	b480      	push	{r7}
 800e432:	b083      	sub	sp, #12
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	4618      	mov	r0, r3
 800e43c:	370c      	adds	r7, #12
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr

0800e446 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e446:	b480      	push	{r7}
 800e448:	b083      	sub	sp, #12
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	4618      	mov	r0, r3
 800e452:	370c      	adds	r7, #12
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	4770      	bx	lr

0800e45c <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	4618      	mov	r0, r3
 800e468:	f000 f9e0 	bl	800e82c <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>
 800e46c:	4603      	mov	r3, r0
 800e46e:	4618      	mov	r0, r3
 800e470:	3708      	adds	r7, #8
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}

0800e476 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 800e476:	b590      	push	{r4, r7, lr}
 800e478:	b085      	sub	sp, #20
 800e47a:	af02      	add	r7, sp, #8
 800e47c:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	3304      	adds	r3, #4
 800e482:	4618      	mov	r0, r3
 800e484:	f000 f874 	bl	800e570 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800e488:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	3304      	adds	r3, #4
 800e48e:	4618      	mov	r0, r3
 800e490:	f000 f88d 	bl	800e5ae <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800e494:	4602      	mov	r2, r0
    return VariantData::getMember(
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	9200      	str	r2, [sp, #0]
 800e49a:	3314      	adds	r3, #20
 800e49c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e49e:	4620      	mov	r0, r4
 800e4a0:	f7fb fab6 	bl	8009a10 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800e4a4:	4603      	mov	r3, r0
  }
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	370c      	adds	r7, #12
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd90      	pop	{r4, r7, pc}

0800e4ae <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800e4ae:	b580      	push	{r7, lr}
 800e4b0:	b082      	sub	sp, #8
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	3304      	adds	r3, #4
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f000 f877 	bl	800e5ae <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800e4c0:	4603      	mov	r3, r0
  }
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3708      	adds	r7, #8
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>:
  VariantData* getOrCreateData() const {
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b082      	sub	sp, #8
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getOrCreateData(derived());
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f7ff fdb6 	bl	800e044 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f000 f9b1 	bl	800e842 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>
 800e4e0:	4603      	mov	r3, r0
  }
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3708      	adds	r7, #8
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}

0800e4ea <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 800e4ea:	b5b0      	push	{r4, r5, r7, lr}
 800e4ec:	b086      	sub	sp, #24
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	60f8      	str	r0, [r7, #12]
 800e4f2:	60b9      	str	r1, [r7, #8]
 800e4f4:	607a      	str	r2, [r7, #4]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 800e4f6:	68b8      	ldr	r0, [r7, #8]
 800e4f8:	f7fa fd53 	bl	8008fa2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d006      	beq.n	800e510 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x26>
    type_ = VariantType::Uint32;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	220a      	movs	r2, #10
 800e506:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	68ba      	ldr	r2, [r7, #8]
 800e50c:	601a      	str	r2, [r3, #0]
 800e50e:	e02a      	b.n	800e566 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 800e510:	f107 0310 	add.w	r3, r7, #16
 800e514:	6879      	ldr	r1, [r7, #4]
 800e516:	4618      	mov	r0, r3
 800e518:	f7f7 fdfb 	bl	8006112 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 800e51c:	f107 0310 	add.w	r3, r7, #16
 800e520:	4618      	mov	r0, r3
 800e522:	f7fb ff18 	bl	800a356 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800e526:	4603      	mov	r3, r0
 800e528:	f083 0301 	eor.w	r3, r3, #1
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d001      	beq.n	800e536 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4c>
      return false;
 800e532:	2300      	movs	r3, #0
 800e534:	e018      	b.n	800e568 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7e>
    type_ = VariantType::Uint64;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	221a      	movs	r2, #26
 800e53a:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 800e53c:	f107 0310 	add.w	r3, r7, #16
 800e540:	4618      	mov	r0, r3
 800e542:	f7fb ff19 	bl	800a378 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800e546:	4603      	mov	r3, r0
 800e548:	461a      	mov	r2, r3
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	2200      	movs	r2, #0
 800e552:	461c      	mov	r4, r3
 800e554:	4615      	mov	r5, r2
 800e556:	f107 0310 	add.w	r3, r7, #16
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fb ff18 	bl	800a390 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800e560:	4603      	mov	r3, r0
 800e562:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 800e566:	2301      	movs	r3, #1
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3718      	adds	r7, #24
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bdb0      	pop	{r4, r5, r7, pc}

0800e570 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800e570:	b5b0      	push	{r4, r5, r7, lr}
 800e572:	b084      	sub	sp, #16
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	60fb      	str	r3, [r7, #12]
    return VariantAttorney::getResourceManager(upstream_);
  }

  FORCE_INLINE VariantData* getData() const {
    return VariantData::getElement(
        VariantAttorney::getData(upstream_), index_,
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	3304      	adds	r3, #4
 800e580:	4618      	mov	r0, r3
 800e582:	f000 fa0e 	bl	800e9a2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>
 800e586:	4605      	mov	r5, r0
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	68dc      	ldr	r4, [r3, #12]
        VariantAttorney::getResourceManager(upstream_));
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	3304      	adds	r3, #4
 800e590:	4618      	mov	r0, r3
 800e592:	f000 fa12 	bl	800e9ba <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800e596:	4603      	mov	r3, r0
    return VariantData::getElement(
 800e598:	461a      	mov	r2, r3
 800e59a:	4621      	mov	r1, r4
 800e59c:	4628      	mov	r0, r5
 800e59e:	f7fc fb34 	bl	800ac0a <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 800e5a2:	4603      	mov	r3, r0
        VariantAttorney::getResourceManager(upstream_));
 800e5a4:	bf00      	nop
  }
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3710      	adds	r7, #16
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bdb0      	pop	{r4, r5, r7, pc}

0800e5ae <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800e5ae:	b580      	push	{r7, lr}
 800e5b0:	b082      	sub	sp, #8
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f000 f94f 	bl	800e85a <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>
 800e5bc:	4603      	mov	r3, r0
  }
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3708      	adds	r7, #8
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b082      	sub	sp, #8
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
 800e5ce:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	601a      	str	r2, [r3, #0]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	3304      	adds	r3, #4
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f7fe fe63 	bl	800d2a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	1d1a      	adds	r2, r3, #4
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	3304      	adds	r3, #4
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	4610      	mov	r0, r2
 800e5ee:	f7ff fa1a 	bl	800da26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	601a      	str	r2, [r3, #0]
      }
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3708      	adds	r7, #8
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}

0800e602 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800e602:	b580      	push	{r7, lr}
 800e604:	b084      	sub	sp, #16
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800e60a:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 800e60e:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f000 f930 	bl	800e876 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>
 800e616:	4603      	mov	r3, r0
 800e618:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800e61a:	f107 0208 	add.w	r2, r7, #8
 800e61e:	f107 030c 	add.w	r3, r7, #12
 800e622:	4611      	mov	r1, r2
 800e624:	4618      	mov	r0, r3
 800e626:	f7fc fa8f 	bl	800ab48 <_ZSt3minIjERKT_S2_S2_>
 800e62a:	4603      	mov	r3, r0
 800e62c:	681b      	ldr	r3, [r3, #0]
      }
 800e62e:	4618      	mov	r0, r3
 800e630:	3710      	adds	r7, #16
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800e636:	b480      	push	{r7}
 800e638:	b083      	sub	sp, #12
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4618      	mov	r0, r3
 800e642:	370c      	adds	r7, #12
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr

0800e64c <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	60b9      	str	r1, [r7, #8]
 800e656:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e658:	68f8      	ldr	r0, [r7, #12]
 800e65a:	f000 f918 	bl	800e88e <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 800e65e:	4602      	mov	r2, r0
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	4293      	cmp	r3, r2
 800e664:	bf8c      	ite	hi
 800e666:	2301      	movhi	r3, #1
 800e668:	2300      	movls	r3, #0
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	bf14      	ite	ne
 800e670:	2301      	movne	r3, #1
 800e672:	2300      	moveq	r3, #0
 800e674:	b2db      	uxtb	r3, r3
 800e676:	2b00      	cmp	r3, #0
 800e678:	d007      	beq.n	800e68a <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e680:	d301      	bcc.n	800e686 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800e682:	f01a f84f 	bl	8028724 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800e686:	f01a f84a 	bl	802871e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	00db      	lsls	r3, r3, #3
 800e68e:	4618      	mov	r0, r3
 800e690:	f01a f832 	bl	80286f8 <_Znwj>
 800e694:	4603      	mov	r3, r0
 800e696:	bf00      	nop
      }
 800e698:	4618      	mov	r0, r3
 800e69a:	3710      	adds	r7, #16
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>:
    __niter_base(_Iterator __it)
 800e6a0:	b480      	push	{r7}
 800e6a2:	b083      	sub	sp, #12
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	370c      	adds	r7, #12
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr

0800e6b6 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800e6b6:	b590      	push	{r4, r7, lr}
 800e6b8:	b087      	sub	sp, #28
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	60f8      	str	r0, [r7, #12]
 800e6be:	60b9      	str	r1, [r7, #8]
 800e6c0:	607a      	str	r2, [r7, #4]
 800e6c2:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800e6c8:	e012      	b.n	800e6f0 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 800e6ca:	6978      	ldr	r0, [r7, #20]
 800e6cc:	f7ff fb8e 	bl	800ddec <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800e6d0:	4604      	mov	r4, r0
 800e6d2:	68f8      	ldr	r0, [r7, #12]
 800e6d4:	f7ff fb8a 	bl	800ddec <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	683a      	ldr	r2, [r7, #0]
 800e6dc:	4619      	mov	r1, r3
 800e6de:	4620      	mov	r0, r4
 800e6e0:	f000 f8e1 	bl	800e8a6 <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	3308      	adds	r3, #8
 800e6e8:	60fb      	str	r3, [r7, #12]
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	3308      	adds	r3, #8
 800e6ee:	617b      	str	r3, [r7, #20]
 800e6f0:	68fa      	ldr	r2, [r7, #12]
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d1e8      	bne.n	800e6ca <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x14>
      return __cur;
 800e6f8:	697b      	ldr	r3, [r7, #20]
    }
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	371c      	adds	r7, #28
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd90      	pop	{r4, r7, pc}

0800e702 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>:
      constexpr _Head_base()
 800e702:	b480      	push	{r7}
 800e704:	b083      	sub	sp, #12
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	4618      	mov	r0, r3
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	4618      	mov	r0, r3
 800e724:	370c      	adds	r7, #12
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr
	...

0800e730 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	60b9      	str	r1, [r7, #8]
 800e73a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f000 f8ff 	bl	800e940 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800e742:	4602      	mov	r2, r0
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	4293      	cmp	r3, r2
 800e748:	bf8c      	ite	hi
 800e74a:	2301      	movhi	r3, #1
 800e74c:	2300      	movls	r3, #0
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	2b00      	cmp	r3, #0
 800e752:	bf14      	ite	ne
 800e754:	2301      	movne	r3, #1
 800e756:	2300      	moveq	r3, #0
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d007      	beq.n	800e76e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	4a09      	ldr	r2, [pc, #36]	@ (800e788 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d901      	bls.n	800e76a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800e766:	f019 ffdd 	bl	8028724 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800e76a:	f019 ffd8 	bl	802871e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	222c      	movs	r2, #44	@ 0x2c
 800e772:	fb02 f303 	mul.w	r3, r2, r3
 800e776:	4618      	mov	r0, r3
 800e778:	f019 ffbe 	bl	80286f8 <_Znwj>
 800e77c:	4603      	mov	r3, r0
 800e77e:	bf00      	nop
      }
 800e780:	4618      	mov	r0, r3
 800e782:	3710      	adds	r7, #16
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	05d1745d 	.word	0x05d1745d

0800e78c <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e78c:	b480      	push	{r7}
 800e78e:	b083      	sub	sp, #12
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	4618      	mov	r0, r3
 800e798:	370c      	adds	r7, #12
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr

0800e7a2 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800e7a2:	b580      	push	{r7, lr}
 800e7a4:	b084      	sub	sp, #16
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	60f8      	str	r0, [r7, #12]
 800e7aa:	60b9      	str	r1, [r7, #8]
 800e7ac:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	222c      	movs	r2, #44	@ 0x2c
 800e7b2:	fb02 f303 	mul.w	r3, r2, r3
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	68b8      	ldr	r0, [r7, #8]
 800e7ba:	f019 ff8c 	bl	80286d6 <_ZdlPvj>
      }
 800e7be:	3710      	adds	r7, #16
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	6039      	str	r1, [r7, #0]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <_ZSt10_ConstructI12CommsHandlerJEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	2020      	movs	r0, #32
 800e7ea:	f7fc f925 	bl	800aa38 <_ZnwjPv>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f001 ffe1 	bl	80107b8 <_ZN12CommsHandlerC1Ev>
    }
 800e7f6:	bf00      	nop
 800e7f8:	3708      	adds	r7, #8
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}

0800e7fe <_ZN9__gnu_cxx16__aligned_bufferI12CommsHandlerE7_M_addrEv>:
      _M_addr() noexcept
 800e7fe:	b480      	push	{r7}
 800e800:	b083      	sub	sp, #12
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 800e806:	687b      	ldr	r3, [r7, #4]
      }
 800e808:	4618      	mov	r0, r3
 800e80a:	370c      	adds	r7, #12
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr

0800e814 <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800e814:	b480      	push	{r7}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6039      	str	r1, [r7, #0]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	4618      	mov	r0, r3
 800e822:	370c      	adds	r7, #12
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr

0800e82c <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4618      	mov	r0, r3
 800e838:	370c      	adds	r7, #12
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr

0800e842 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800e842:	b580      	push	{r7, lr}
 800e844:	b082      	sub	sp, #8
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 f886 	bl	800e95c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>
 800e850:	4603      	mov	r3, r0
  }
 800e852:	4618      	mov	r0, r3
 800e854:	3708      	adds	r7, #8
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}

0800e85a <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b082      	sub	sp, #8
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	3304      	adds	r3, #4
 800e866:	4618      	mov	r0, r3
 800e868:	f000 f8a7 	bl	800e9ba <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800e86c:	4603      	mov	r3, r0
  }
 800e86e:	4618      	mov	r0, r3
 800e870:	3708      	adds	r7, #8
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800e876:	b580      	push	{r7, lr}
 800e878:	b082      	sub	sp, #8
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 f8a7 	bl	800e9d2 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>
 800e884:	4603      	mov	r3, r0
      }
 800e886:	4618      	mov	r0, r3
 800e888:	3708      	adds	r7, #8
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}

0800e88e <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800e88e:	b480      	push	{r7}
 800e890:	b083      	sub	sp, #12
 800e892:	af00      	add	r7, sp, #0
 800e894:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e896:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800e89a:	4618      	mov	r0, r3
 800e89c:	370c      	adds	r7, #12
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a4:	4770      	bx	lr

0800e8a6 <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b084      	sub	sp, #16
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	60f8      	str	r0, [r7, #12]
 800e8ae:	60b9      	str	r1, [r7, #8]
 800e8b0:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800e8b2:	68b8      	ldr	r0, [r7, #8]
 800e8b4:	f7fd ff12 	bl	800c6dc <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	68f9      	ldr	r1, [r7, #12]
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f7fe febb 	bl	800d63a <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800e8c4:	68b8      	ldr	r0, [r7, #8]
 800e8c6:	f7ff fa91 	bl	800ddec <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f7ff f9fd 	bl	800dcce <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>
    }
 800e8d4:	bf00      	nop
 800e8d6:	3710      	adds	r7, #16
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>:
  VariantData* getOrAddMember(TAdaptedString key, ResourceManager* resources) {
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b088      	sub	sp, #32
 800e8e0:	af02      	add	r7, sp, #8
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	4638      	mov	r0, r7
 800e8e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (key.isNull())
 800e8ea:	463b      	mov	r3, r7
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7f6 fce8 	bl	80052c2 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d001      	beq.n	800e8fc <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x20>
      return nullptr;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	e01d      	b.n	800e938 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    auto obj = isNull() ? &toObject() : asObject();
 800e8fc:	68f8      	ldr	r0, [r7, #12]
 800e8fe:	f7fc f9bf 	bl	800ac80 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800e902:	4603      	mov	r3, r0
 800e904:	2b00      	cmp	r3, #0
 800e906:	d004      	beq.n	800e912 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x36>
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f7f6 ffa1 	bl	8005850 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 800e90e:	4603      	mov	r3, r0
 800e910:	e003      	b.n	800e91a <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x3e>
 800e912:	68f8      	ldr	r0, [r7, #12]
 800e914:	f7f6 fe91 	bl	800563a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 800e918:	4603      	mov	r3, r0
 800e91a:	617b      	str	r3, [r7, #20]
    if (!obj)
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d101      	bne.n	800e926 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x4a>
      return nullptr;
 800e922:	2300      	movs	r3, #0
 800e924:	e008      	b.n	800e938 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    return obj->getOrAddMember(key, resources);
 800e926:	6978      	ldr	r0, [r7, #20]
 800e928:	6a3b      	ldr	r3, [r7, #32]
 800e92a:	9300      	str	r3, [sp, #0]
 800e92c:	463b      	mov	r3, r7
 800e92e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e930:	f000 f85b 	bl	800e9ea <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800e934:	4603      	mov	r3, r0
 800e936:	bf00      	nop
  }
 800e938:	4618      	mov	r0, r3
 800e93a:	3718      	adds	r7, #24
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800e940:	b480      	push	{r7}
 800e942:	b083      	sub	sp, #12
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e948:	4b03      	ldr	r3, [pc, #12]	@ (800e958 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 800e94a:	4618      	mov	r0, r3
 800e94c:	370c      	adds	r7, #12
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	02e8ba2e 	.word	0x02e8ba2e

0800e95c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>:

  VariantData* getOrCreateData() const {
 800e95c:	b590      	push	{r4, r7, lr}
 800e95e:	b087      	sub	sp, #28
 800e960:	af02      	add	r7, sp, #8
 800e962:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	3304      	adds	r3, #4
 800e968:	4618      	mov	r0, r3
 800e96a:	f000 f85f 	bl	800ea2c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>
 800e96e:	60f8      	str	r0, [r7, #12]
    if (!data)
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d101      	bne.n	800e97a <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800e976:	2300      	movs	r3, #0
 800e978:	e00f      	b.n	800e99a <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x3e>
    return data->getOrAddMember(key_,
 800e97a:	68fc      	ldr	r4, [r7, #12]
                                VariantAttorney::getResourceManager(upstream_));
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	3304      	adds	r3, #4
    return data->getOrAddMember(key_,
 800e980:	4618      	mov	r0, r3
 800e982:	f7ff fe14 	bl	800e5ae <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800e986:	4602      	mov	r2, r0
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	9200      	str	r2, [sp, #0]
 800e98c:	3314      	adds	r3, #20
 800e98e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e990:	4620      	mov	r0, r4
 800e992:	f7ff ffa3 	bl	800e8dc <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>
 800e996:	4603      	mov	r3, r0
                                VariantAttorney::getResourceManager(upstream_));
 800e998:	bf00      	nop
  }
 800e99a:	4618      	mov	r0, r3
 800e99c:	3714      	adds	r7, #20
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd90      	pop	{r4, r7, pc}

0800e9a2 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800e9a2:	b580      	push	{r7, lr}
 800e9a4:	b082      	sub	sp, #8
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
    return client.getData();
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f7fc fa0d 	bl	800adca <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>
 800e9b0:	4603      	mov	r3, r0
  }
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3708      	adds	r7, #8
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}

0800e9ba <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800e9ba:	b580      	push	{r7, lr}
 800e9bc:	b082      	sub	sp, #8
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f7fc f9f5 	bl	800adb2 <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>
 800e9c8:	4603      	mov	r3, r0
  }
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3708      	adds	r7, #8
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}

0800e9d2 <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e9d2:	b580      	push	{r7, lr}
 800e9d4:	b082      	sub	sp, #8
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f7ff ff57 	bl	800e88e <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}

0800e9ea <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
  it.next(resources);
  return it.data();
}

template <typename TAdaptedString>
VariantData* ObjectData::getOrAddMember(TAdaptedString key,
 800e9ea:	b580      	push	{r7, lr}
 800e9ec:	b088      	sub	sp, #32
 800e9ee:	af02      	add	r7, sp, #8
 800e9f0:	60f8      	str	r0, [r7, #12]
 800e9f2:	4638      	mov	r0, r7
 800e9f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                        ResourceManager* resources) {
  auto data = getMember(key, resources);
 800e9f8:	6a3b      	ldr	r3, [r7, #32]
 800e9fa:	9300      	str	r3, [sp, #0]
 800e9fc:	463b      	mov	r3, r7
 800e9fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	f7f9 fc9c 	bl	800833e <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 800ea06:	6178      	str	r0, [r7, #20]
  if (data)
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d001      	beq.n	800ea12 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x28>
    return data;
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	e008      	b.n	800ea24 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x3a>
  return addMember(key, resources);
 800ea12:	6a3b      	ldr	r3, [r7, #32]
 800ea14:	9300      	str	r3, [sp, #0]
 800ea16:	463b      	mov	r3, r7
 800ea18:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ea1a:	68f8      	ldr	r0, [r7, #12]
 800ea1c:	f000 f812 	bl	800ea44 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800ea20:	4603      	mov	r3, r0
 800ea22:	bf00      	nop
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3718      	adds	r7, #24
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}

0800ea2c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b082      	sub	sp, #8
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f000 f85b 	bl	800eaf0 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>
 800ea3a:	4603      	mov	r3, r0
  }
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3708      	adds	r7, #8
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b08a      	sub	sp, #40	@ 0x28
 800ea48:	af02      	add	r7, sp, #8
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	4638      	mov	r0, r7
 800ea4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 800ea52:	f107 0318 	add.w	r3, r7, #24
 800ea56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7f7 fad5 	bl	8006008 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 800ea5e:	f107 0318 	add.w	r3, r7, #24
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7f8 fd74 	bl	8007550 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	f083 0301 	eor.w	r3, r3, #1
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d001      	beq.n	800ea78 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x34>
    return nullptr;
 800ea74:	2300      	movs	r3, #0
 800ea76:	e037      	b.n	800eae8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  auto valueSlot = resources->allocVariant();
 800ea78:	f107 0310 	add.w	r3, r7, #16
 800ea7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7f7 fac2 	bl	8006008 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 800ea84:	f107 0310 	add.w	r3, r7, #16
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7f8 fd61 	bl	8007550 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	f083 0301 	eor.w	r3, r3, #1
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d001      	beq.n	800ea9e <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x5a>
    return nullptr;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	e024      	b.n	800eae8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  if (!keySlot->setString(key, resources))
 800ea9e:	f107 0318 	add.w	r3, r7, #24
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7f8 fd7d 	bl	80075a2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 800eaa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaaa:	9300      	str	r3, [sp, #0]
 800eaac:	463b      	mov	r3, r7
 800eaae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eab0:	f7fd fe50 	bl	800c754 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>
 800eab4:	4603      	mov	r3, r0
 800eab6:	f083 0301 	eor.w	r3, r3, #1
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d001      	beq.n	800eac4 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x80>
    return nullptr;
 800eac0:	2300      	movs	r3, #0
 800eac2:	e011      	b.n	800eae8 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 800eac4:	68f8      	ldr	r0, [r7, #12]
 800eac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac8:	9301      	str	r3, [sp, #4]
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	9300      	str	r3, [sp, #0]
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	f107 0218 	add.w	r2, r7, #24
 800ead4:	ca06      	ldmia	r2, {r1, r2}
 800ead6:	f7f7 fa10 	bl	8005efa <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 800eada:	f107 0310 	add.w	r3, r7, #16
 800eade:	4618      	mov	r0, r3
 800eae0:	f7f8 fd47 	bl	8007572 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800eae4:	4603      	mov	r3, r0
 800eae6:	bf00      	nop
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3720      	adds	r7, #32
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>:
  }

  VariantData* getOrCreateData() const {
 800eaf0:	b5b0      	push	{r4, r5, r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	3304      	adds	r3, #4
 800eafc:	4618      	mov	r0, r3
 800eafe:	f000 f81a 	bl	800eb36 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>
 800eb02:	60f8      	str	r0, [r7, #12]
    if (!data)
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d101      	bne.n	800eb0e <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	e00f      	b.n	800eb2e <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x3e>
    return data->getOrAddElement(
 800eb0e:	68fc      	ldr	r4, [r7, #12]
        index_, VariantAttorney::getResourceManager(upstream_));
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	68dd      	ldr	r5, [r3, #12]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	3304      	adds	r3, #4
    return data->getOrAddElement(
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7ff ff4e 	bl	800e9ba <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	461a      	mov	r2, r3
 800eb22:	4629      	mov	r1, r5
 800eb24:	4620      	mov	r0, r4
 800eb26:	f7fc f885 	bl	800ac34 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>
 800eb2a:	4603      	mov	r3, r0
        index_, VariantAttorney::getResourceManager(upstream_));
 800eb2c:	bf00      	nop
  }
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3710      	adds	r7, #16
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bdb0      	pop	{r4, r5, r7, pc}

0800eb36 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b082      	sub	sp, #8
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f7fc f951 	bl	800ade6 <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>
 800eb44:	4603      	mov	r3, r0
  }
 800eb46:	4618      	mov	r0, r3
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
	...

0800eb50 <_Z41__static_initialization_and_destruction_0ii>:
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d10a      	bne.n	800eb76 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eb66:	4293      	cmp	r3, r2
 800eb68:	d105      	bne.n	800eb76 <_Z41__static_initialization_and_destruction_0ii+0x26>
__attribute__((section(".DmaSection"))) volatile txData_t txData;
 800eb6a:	4805      	ldr	r0, [pc, #20]	@ (800eb80 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800eb6c:	f7fb ffba 	bl	800aae4 <_ZN8txData_tC1Ev>
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;
 800eb70:	4804      	ldr	r0, [pc, #16]	@ (800eb84 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800eb72:	f7f2 f85f 	bl	8000c34 <_ZN8rxData_tC1Ev>
}
 800eb76:	bf00      	nop
 800eb78:	3708      	adds	r7, #8
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	30000080 	.word	0x30000080
 800eb84:	300000c0 	.word	0x300000c0

0800eb88 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b082      	sub	sp, #8
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	4a05      	ldr	r2, [pc, #20]	@ (800eba8 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	601a      	str	r2, [r3, #0]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7fd fdbb 	bl	800c714 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	4618      	mov	r0, r3
 800eba2:	3708      	adds	r7, #8
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	0802b480 	.word	0x0802b480

0800ebac <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f7ff ffe7 	bl	800eb88 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800ebba:	212c      	movs	r1, #44	@ 0x2c
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f019 fd8a 	bl	80286d6 <_ZdlPvj>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3708      	adds	r7, #8
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800ebcc:	b590      	push	{r4, r7, lr}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	330c      	adds	r3, #12
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f000 f856 	bl	800ec8a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800ebde:	4604      	mov	r4, r0
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f7ff f9ce 	bl	800df82 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	4619      	mov	r1, r3
 800ebea:	4620      	mov	r0, r4
 800ebec:	f000 f859 	bl	800eca2 <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>
      }
 800ebf0:	bf00      	nop
 800ebf2:	370c      	adds	r7, #12
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd90      	pop	{r4, r7, pc}

0800ebf8 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b086      	sub	sp, #24
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	330c      	adds	r3, #12
 800ec04:	4618      	mov	r0, r3
 800ec06:	f000 f840 	bl	800ec8a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	f107 0314 	add.w	r3, r7, #20
 800ec10:	4611      	mov	r1, r2
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7ff f935 	bl	800de82 <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800ec18:	f107 0114 	add.w	r1, r7, #20
 800ec1c:	f107 030c 	add.w	r3, r7, #12
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7ff fb85 	bl	800e332 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f7ff ffad 	bl	800eb88 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800ec2e:	f107 030c 	add.w	r3, r7, #12
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7ff f951 	bl	800deda <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800ec38:	f107 0314 	add.w	r3, r7, #20
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7ff f92d 	bl	800de9c <_ZNSaISt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800ec42:	3718      	adds	r7, #24
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b084      	sub	sp, #16
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f7ff f995 	bl	800df82 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 800ec58:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800ec5a:	f7fb ff39 	bl	800aad0 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 800ec5e:	4602      	mov	r2, r0
	    ||
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d005      	beq.n	800ec72 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 800ec66:	6838      	ldr	r0, [r7, #0]
 800ec68:	f019 fd72 	bl	8028750 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 800ec6c:	4603      	mov	r3, r0
	    ||
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d001      	beq.n	800ec76 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 800ec72:	2301      	movs	r3, #1
 800ec74:	e000      	b.n	800ec78 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 800ec76:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d001      	beq.n	800ec80 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	e000      	b.n	800ec82 <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 800ec80:	2300      	movs	r3, #0
      }
 800ec82:	4618      	mov	r0, r3
 800ec84:	3710      	adds	r7, #16
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <_ZNSt23_Sp_counted_ptr_inplaceI12CommsHandlerSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	b082      	sub	sp, #8
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f000 f811 	bl	800ecba <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3708      	adds	r7, #8
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}

0800eca2 <_ZNSt16allocator_traitsISaIvEE7destroyI12CommsHandlerEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 800eca2:	b580      	push	{r7, lr}
 800eca4:	b082      	sub	sp, #8
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
 800ecaa:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 800ecac:	6838      	ldr	r0, [r7, #0]
 800ecae:	f000 f80f 	bl	800ecd0 <_ZSt8_DestroyI12CommsHandlerEvPT_>
 800ecb2:	bf00      	nop
 800ecb4:	3708      	adds	r7, #8
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}

0800ecba <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800ecba:	b480      	push	{r7}
 800ecbc:	b083      	sub	sp, #12
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6078      	str	r0, [r7, #4]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	370c      	adds	r7, #12
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <_ZSt8_DestroyI12CommsHandlerEvPT_>:
    _Destroy(_Tp* __pointer)
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	4798      	blx	r3
    }
 800ece2:	bf00      	nop
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}

0800ecea <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 800ecea:	b580      	push	{r7, lr}
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ecf2:	2001      	movs	r0, #1
 800ecf4:	f7ff ff2c 	bl	800eb50 <_Z41__static_initialization_and_destruction_0ii>
 800ecf8:	bd80      	pop	{r7, pc}
	...

0800ecfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ed02:	4b0a      	ldr	r3, [pc, #40]	@ (800ed2c <HAL_MspInit+0x30>)
 800ed04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ed08:	4a08      	ldr	r2, [pc, #32]	@ (800ed2c <HAL_MspInit+0x30>)
 800ed0a:	f043 0302 	orr.w	r3, r3, #2
 800ed0e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800ed12:	4b06      	ldr	r3, [pc, #24]	@ (800ed2c <HAL_MspInit+0x30>)
 800ed14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ed18:	f003 0302 	and.w	r3, r3, #2
 800ed1c:	607b      	str	r3, [r7, #4]
 800ed1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ed20:	bf00      	nop
 800ed22:	370c      	adds	r7, #12
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr
 800ed2c:	58024400 	.word	0x58024400

0800ed30 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b0bc      	sub	sp, #240	@ 0xf0
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed38:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	601a      	str	r2, [r3, #0]
 800ed40:	605a      	str	r2, [r3, #4]
 800ed42:	609a      	str	r2, [r3, #8]
 800ed44:	60da      	str	r2, [r3, #12]
 800ed46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ed48:	f107 0318 	add.w	r3, r7, #24
 800ed4c:	22c0      	movs	r2, #192	@ 0xc0
 800ed4e:	2100      	movs	r1, #0
 800ed50:	4618      	mov	r0, r3
 800ed52:	f01a fcf5 	bl	8029740 <memset>
  if(hsd->Instance==SDMMC1)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	4a3c      	ldr	r2, [pc, #240]	@ (800ee4c <HAL_SD_MspInit+0x11c>)
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d171      	bne.n	800ee44 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800ed60:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ed64:	f04f 0300 	mov.w	r3, #0
 800ed68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ed70:	f107 0318 	add.w	r3, r7, #24
 800ed74:	4618      	mov	r0, r3
 800ed76:	f010 feb1 	bl	801fadc <HAL_RCCEx_PeriphCLKConfig>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d001      	beq.n	800ed84 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800ed80:	f7fb fe4e 	bl	800aa20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800ed84:	4b32      	ldr	r3, [pc, #200]	@ (800ee50 <HAL_SD_MspInit+0x120>)
 800ed86:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ed8a:	4a31      	ldr	r2, [pc, #196]	@ (800ee50 <HAL_SD_MspInit+0x120>)
 800ed8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ed90:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800ed94:	4b2e      	ldr	r3, [pc, #184]	@ (800ee50 <HAL_SD_MspInit+0x120>)
 800ed96:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ed9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ed9e:	617b      	str	r3, [r7, #20]
 800eda0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800eda2:	4b2b      	ldr	r3, [pc, #172]	@ (800ee50 <HAL_SD_MspInit+0x120>)
 800eda4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eda8:	4a29      	ldr	r2, [pc, #164]	@ (800ee50 <HAL_SD_MspInit+0x120>)
 800edaa:	f043 0304 	orr.w	r3, r3, #4
 800edae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800edb2:	4b27      	ldr	r3, [pc, #156]	@ (800ee50 <HAL_SD_MspInit+0x120>)
 800edb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800edb8:	f003 0304 	and.w	r3, r3, #4
 800edbc:	613b      	str	r3, [r7, #16]
 800edbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800edc0:	4b23      	ldr	r3, [pc, #140]	@ (800ee50 <HAL_SD_MspInit+0x120>)
 800edc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800edc6:	4a22      	ldr	r2, [pc, #136]	@ (800ee50 <HAL_SD_MspInit+0x120>)
 800edc8:	f043 0308 	orr.w	r3, r3, #8
 800edcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800edd0:	4b1f      	ldr	r3, [pc, #124]	@ (800ee50 <HAL_SD_MspInit+0x120>)
 800edd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800edd6:	f003 0308 	and.w	r3, r3, #8
 800edda:	60fb      	str	r3, [r7, #12]
 800eddc:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800edde:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800ede2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ede6:	2302      	movs	r3, #2
 800ede8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edec:	2300      	movs	r3, #0
 800edee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800edf2:	2303      	movs	r3, #3
 800edf4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800edf8:	230c      	movs	r3, #12
 800edfa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800edfe:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ee02:	4619      	mov	r1, r3
 800ee04:	4813      	ldr	r0, [pc, #76]	@ (800ee54 <HAL_SD_MspInit+0x124>)
 800ee06:	f00f fc67 	bl	801e6d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ee0a:	2304      	movs	r3, #4
 800ee0c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee10:	2302      	movs	r3, #2
 800ee12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee16:	2300      	movs	r3, #0
 800ee18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee1c:	2303      	movs	r3, #3
 800ee1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800ee22:	230c      	movs	r3, #12
 800ee24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ee28:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	480a      	ldr	r0, [pc, #40]	@ (800ee58 <HAL_SD_MspInit+0x128>)
 800ee30:	f00f fc52 	bl	801e6d8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800ee34:	2200      	movs	r2, #0
 800ee36:	2100      	movs	r1, #0
 800ee38:	2031      	movs	r0, #49	@ 0x31
 800ee3a:	f00d f85c 	bl	801bef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800ee3e:	2031      	movs	r0, #49	@ 0x31
 800ee40:	f00d f873 	bl	801bf2a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800ee44:	bf00      	nop
 800ee46:	37f0      	adds	r7, #240	@ 0xf0
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	52007000 	.word	0x52007000
 800ee50:	58024400 	.word	0x58024400
 800ee54:	58020800 	.word	0x58020800
 800ee58:	58020c00 	.word	0x58020c00

0800ee5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b0ba      	sub	sp, #232	@ 0xe8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee64:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ee68:	2200      	movs	r2, #0
 800ee6a:	601a      	str	r2, [r3, #0]
 800ee6c:	605a      	str	r2, [r3, #4]
 800ee6e:	609a      	str	r2, [r3, #8]
 800ee70:	60da      	str	r2, [r3, #12]
 800ee72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ee74:	f107 0310 	add.w	r3, r7, #16
 800ee78:	22c0      	movs	r2, #192	@ 0xc0
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f01a fc5f 	bl	8029740 <memset>
  if(huart->Instance==USART1)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	4a27      	ldr	r2, [pc, #156]	@ (800ef24 <HAL_UART_MspInit+0xc8>)
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	d146      	bne.n	800ef1a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800ee8c:	f04f 0201 	mov.w	r2, #1
 800ee90:	f04f 0300 	mov.w	r3, #0
 800ee94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ee9e:	f107 0310 	add.w	r3, r7, #16
 800eea2:	4618      	mov	r0, r3
 800eea4:	f010 fe1a 	bl	801fadc <HAL_RCCEx_PeriphCLKConfig>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d001      	beq.n	800eeb2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800eeae:	f7fb fdb7 	bl	800aa20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800eeb2:	4b1d      	ldr	r3, [pc, #116]	@ (800ef28 <HAL_UART_MspInit+0xcc>)
 800eeb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800eeb8:	4a1b      	ldr	r2, [pc, #108]	@ (800ef28 <HAL_UART_MspInit+0xcc>)
 800eeba:	f043 0310 	orr.w	r3, r3, #16
 800eebe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800eec2:	4b19      	ldr	r3, [pc, #100]	@ (800ef28 <HAL_UART_MspInit+0xcc>)
 800eec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800eec8:	f003 0310 	and.w	r3, r3, #16
 800eecc:	60fb      	str	r3, [r7, #12]
 800eece:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eed0:	4b15      	ldr	r3, [pc, #84]	@ (800ef28 <HAL_UART_MspInit+0xcc>)
 800eed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eed6:	4a14      	ldr	r2, [pc, #80]	@ (800ef28 <HAL_UART_MspInit+0xcc>)
 800eed8:	f043 0301 	orr.w	r3, r3, #1
 800eedc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800eee0:	4b11      	ldr	r3, [pc, #68]	@ (800ef28 <HAL_UART_MspInit+0xcc>)
 800eee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eee6:	f003 0301 	and.w	r3, r3, #1
 800eeea:	60bb      	str	r3, [r7, #8]
 800eeec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800eeee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800eef2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eef6:	2302      	movs	r3, #2
 800eef8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eefc:	2300      	movs	r3, #0
 800eefe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ef02:	2300      	movs	r3, #0
 800ef04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ef08:	2307      	movs	r3, #7
 800ef0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef0e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ef12:	4619      	mov	r1, r3
 800ef14:	4805      	ldr	r0, [pc, #20]	@ (800ef2c <HAL_UART_MspInit+0xd0>)
 800ef16:	f00f fbdf 	bl	801e6d8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800ef1a:	bf00      	nop
 800ef1c:	37e8      	adds	r7, #232	@ 0xe8
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop
 800ef24:	40011000 	.word	0x40011000
 800ef28:	58024400 	.word	0x58024400
 800ef2c:	58020000 	.word	0x58020000

0800ef30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ef30:	b480      	push	{r7}
 800ef32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ef34:	bf00      	nop
 800ef36:	e7fd      	b.n	800ef34 <NMI_Handler+0x4>

0800ef38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ef3c:	bf00      	nop
 800ef3e:	e7fd      	b.n	800ef3c <HardFault_Handler+0x4>

0800ef40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ef40:	b480      	push	{r7}
 800ef42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ef44:	bf00      	nop
 800ef46:	e7fd      	b.n	800ef44 <MemManage_Handler+0x4>

0800ef48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ef4c:	bf00      	nop
 800ef4e:	e7fd      	b.n	800ef4c <BusFault_Handler+0x4>

0800ef50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ef50:	b480      	push	{r7}
 800ef52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ef54:	bf00      	nop
 800ef56:	e7fd      	b.n	800ef54 <UsageFault_Handler+0x4>

0800ef58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ef58:	b480      	push	{r7}
 800ef5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ef5c:	bf00      	nop
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr

0800ef66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ef66:	b480      	push	{r7}
 800ef68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ef6a:	bf00      	nop
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr

0800ef74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ef74:	b480      	push	{r7}
 800ef76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ef78:	bf00      	nop
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr

0800ef82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ef82:	b580      	push	{r7, lr}
 800ef84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ef86:	f00c fe75 	bl	801bc74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ef8a:	bf00      	nop
 800ef8c:	bd80      	pop	{r7, pc}
	...

0800ef90 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800ef94:	4802      	ldr	r0, [pc, #8]	@ (800efa0 <SDMMC1_IRQHandler+0x10>)
 800ef96:	f013 fd0f 	bl	80229b8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800ef9a:	bf00      	nop
 800ef9c:	bd80      	pop	{r7, pc}
 800ef9e:	bf00      	nop
 800efa0:	240002fc 	.word	0x240002fc

0800efa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800efa4:	b480      	push	{r7}
 800efa6:	af00      	add	r7, sp, #0
	return 1;
 800efa8:	2301      	movs	r3, #1
}
 800efaa:	4618      	mov	r0, r3
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr

0800efb4 <_kill>:

int _kill(int pid, int sig)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b082      	sub	sp, #8
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800efbe:	f01a fc61 	bl	8029884 <__errno>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2216      	movs	r2, #22
 800efc6:	601a      	str	r2, [r3, #0]
	return -1;
 800efc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3708      	adds	r7, #8
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <_exit>:

void _exit (int status)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b082      	sub	sp, #8
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800efdc:	f04f 31ff 	mov.w	r1, #4294967295
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f7ff ffe7 	bl	800efb4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800efe6:	bf00      	nop
 800efe8:	e7fd      	b.n	800efe6 <_exit+0x12>

0800efea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800efea:	b580      	push	{r7, lr}
 800efec:	b086      	sub	sp, #24
 800efee:	af00      	add	r7, sp, #0
 800eff0:	60f8      	str	r0, [r7, #12]
 800eff2:	60b9      	str	r1, [r7, #8]
 800eff4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eff6:	2300      	movs	r3, #0
 800eff8:	617b      	str	r3, [r7, #20]
 800effa:	e00a      	b.n	800f012 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800effc:	f3af 8000 	nop.w
 800f000:	4601      	mov	r1, r0
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	1c5a      	adds	r2, r3, #1
 800f006:	60ba      	str	r2, [r7, #8]
 800f008:	b2ca      	uxtb	r2, r1
 800f00a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	3301      	adds	r3, #1
 800f010:	617b      	str	r3, [r7, #20]
 800f012:	697a      	ldr	r2, [r7, #20]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	429a      	cmp	r2, r3
 800f018:	dbf0      	blt.n	800effc <_read+0x12>
	}

return len;
 800f01a:	687b      	ldr	r3, [r7, #4]
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	3718      	adds	r7, #24
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}

0800f024 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b086      	sub	sp, #24
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f030:	2300      	movs	r3, #0
 800f032:	617b      	str	r3, [r7, #20]
 800f034:	e009      	b.n	800f04a <_write+0x26>
	{
		__io_putchar(*ptr++);
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	1c5a      	adds	r2, r3, #1
 800f03a:	60ba      	str	r2, [r7, #8]
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	4618      	mov	r0, r3
 800f040:	f7fb fa3a 	bl	800a4b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	3301      	adds	r3, #1
 800f048:	617b      	str	r3, [r7, #20]
 800f04a:	697a      	ldr	r2, [r7, #20]
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	429a      	cmp	r2, r3
 800f050:	dbf1      	blt.n	800f036 <_write+0x12>
	}
	return len;
 800f052:	687b      	ldr	r3, [r7, #4]
}
 800f054:	4618      	mov	r0, r3
 800f056:	3718      	adds	r7, #24
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <_close>:

int _close(int file)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
	return -1;
 800f064:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f068:	4618      	mov	r0, r3
 800f06a:	370c      	adds	r7, #12
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr

0800f074 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f074:	b480      	push	{r7}
 800f076:	b083      	sub	sp, #12
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800f084:	605a      	str	r2, [r3, #4]
	return 0;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	370c      	adds	r7, #12
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <_isatty>:

int _isatty(int file)
{
 800f094:	b480      	push	{r7}
 800f096:	b083      	sub	sp, #12
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
	return 1;
 800f09c:	2301      	movs	r3, #1
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	370c      	adds	r7, #12
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a8:	4770      	bx	lr

0800f0aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f0aa:	b480      	push	{r7}
 800f0ac:	b085      	sub	sp, #20
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	60f8      	str	r0, [r7, #12]
 800f0b2:	60b9      	str	r1, [r7, #8]
 800f0b4:	607a      	str	r2, [r7, #4]
	return 0;
 800f0b6:	2300      	movs	r3, #0
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3714      	adds	r7, #20
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr

0800f0c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b086      	sub	sp, #24
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f0cc:	4a14      	ldr	r2, [pc, #80]	@ (800f120 <_sbrk+0x5c>)
 800f0ce:	4b15      	ldr	r3, [pc, #84]	@ (800f124 <_sbrk+0x60>)
 800f0d0:	1ad3      	subs	r3, r2, r3
 800f0d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f0d8:	4b13      	ldr	r3, [pc, #76]	@ (800f128 <_sbrk+0x64>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d102      	bne.n	800f0e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f0e0:	4b11      	ldr	r3, [pc, #68]	@ (800f128 <_sbrk+0x64>)
 800f0e2:	4a12      	ldr	r2, [pc, #72]	@ (800f12c <_sbrk+0x68>)
 800f0e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f0e6:	4b10      	ldr	r3, [pc, #64]	@ (800f128 <_sbrk+0x64>)
 800f0e8:	681a      	ldr	r2, [r3, #0]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	693a      	ldr	r2, [r7, #16]
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d207      	bcs.n	800f104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f0f4:	f01a fbc6 	bl	8029884 <__errno>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	220c      	movs	r2, #12
 800f0fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800f0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800f102:	e009      	b.n	800f118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f104:	4b08      	ldr	r3, [pc, #32]	@ (800f128 <_sbrk+0x64>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f10a:	4b07      	ldr	r3, [pc, #28]	@ (800f128 <_sbrk+0x64>)
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	4413      	add	r3, r2
 800f112:	4a05      	ldr	r2, [pc, #20]	@ (800f128 <_sbrk+0x64>)
 800f114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f116:	68fb      	ldr	r3, [r7, #12]
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3718      	adds	r7, #24
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}
 800f120:	24080000 	.word	0x24080000
 800f124:	00000400 	.word	0x00000400
 800f128:	2400040c 	.word	0x2400040c
 800f12c:	24000c10 	.word	0x24000c10

0800f130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800f130:	b480      	push	{r7}
 800f132:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800f134:	4b37      	ldr	r3, [pc, #220]	@ (800f214 <SystemInit+0xe4>)
 800f136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f13a:	4a36      	ldr	r2, [pc, #216]	@ (800f214 <SystemInit+0xe4>)
 800f13c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f140:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800f144:	4b34      	ldr	r3, [pc, #208]	@ (800f218 <SystemInit+0xe8>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	f003 030f 	and.w	r3, r3, #15
 800f14c:	2b06      	cmp	r3, #6
 800f14e:	d807      	bhi.n	800f160 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800f150:	4b31      	ldr	r3, [pc, #196]	@ (800f218 <SystemInit+0xe8>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	f023 030f 	bic.w	r3, r3, #15
 800f158:	4a2f      	ldr	r2, [pc, #188]	@ (800f218 <SystemInit+0xe8>)
 800f15a:	f043 0307 	orr.w	r3, r3, #7
 800f15e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800f160:	4b2e      	ldr	r3, [pc, #184]	@ (800f21c <SystemInit+0xec>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	4a2d      	ldr	r2, [pc, #180]	@ (800f21c <SystemInit+0xec>)
 800f166:	f043 0301 	orr.w	r3, r3, #1
 800f16a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800f16c:	4b2b      	ldr	r3, [pc, #172]	@ (800f21c <SystemInit+0xec>)
 800f16e:	2200      	movs	r2, #0
 800f170:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800f172:	4b2a      	ldr	r3, [pc, #168]	@ (800f21c <SystemInit+0xec>)
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	4929      	ldr	r1, [pc, #164]	@ (800f21c <SystemInit+0xec>)
 800f178:	4b29      	ldr	r3, [pc, #164]	@ (800f220 <SystemInit+0xf0>)
 800f17a:	4013      	ands	r3, r2
 800f17c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800f17e:	4b26      	ldr	r3, [pc, #152]	@ (800f218 <SystemInit+0xe8>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	f003 0308 	and.w	r3, r3, #8
 800f186:	2b00      	cmp	r3, #0
 800f188:	d007      	beq.n	800f19a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800f18a:	4b23      	ldr	r3, [pc, #140]	@ (800f218 <SystemInit+0xe8>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f023 030f 	bic.w	r3, r3, #15
 800f192:	4a21      	ldr	r2, [pc, #132]	@ (800f218 <SystemInit+0xe8>)
 800f194:	f043 0307 	orr.w	r3, r3, #7
 800f198:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800f19a:	4b20      	ldr	r3, [pc, #128]	@ (800f21c <SystemInit+0xec>)
 800f19c:	2200      	movs	r2, #0
 800f19e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800f1a0:	4b1e      	ldr	r3, [pc, #120]	@ (800f21c <SystemInit+0xec>)
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800f1a6:	4b1d      	ldr	r3, [pc, #116]	@ (800f21c <SystemInit+0xec>)
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800f1ac:	4b1b      	ldr	r3, [pc, #108]	@ (800f21c <SystemInit+0xec>)
 800f1ae:	4a1d      	ldr	r2, [pc, #116]	@ (800f224 <SystemInit+0xf4>)
 800f1b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800f1b2:	4b1a      	ldr	r3, [pc, #104]	@ (800f21c <SystemInit+0xec>)
 800f1b4:	4a1c      	ldr	r2, [pc, #112]	@ (800f228 <SystemInit+0xf8>)
 800f1b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800f1b8:	4b18      	ldr	r3, [pc, #96]	@ (800f21c <SystemInit+0xec>)
 800f1ba:	4a1c      	ldr	r2, [pc, #112]	@ (800f22c <SystemInit+0xfc>)
 800f1bc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800f1be:	4b17      	ldr	r3, [pc, #92]	@ (800f21c <SystemInit+0xec>)
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800f1c4:	4b15      	ldr	r3, [pc, #84]	@ (800f21c <SystemInit+0xec>)
 800f1c6:	4a19      	ldr	r2, [pc, #100]	@ (800f22c <SystemInit+0xfc>)
 800f1c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800f1ca:	4b14      	ldr	r3, [pc, #80]	@ (800f21c <SystemInit+0xec>)
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800f1d0:	4b12      	ldr	r3, [pc, #72]	@ (800f21c <SystemInit+0xec>)
 800f1d2:	4a16      	ldr	r2, [pc, #88]	@ (800f22c <SystemInit+0xfc>)
 800f1d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800f1d6:	4b11      	ldr	r3, [pc, #68]	@ (800f21c <SystemInit+0xec>)
 800f1d8:	2200      	movs	r2, #0
 800f1da:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800f1dc:	4b0f      	ldr	r3, [pc, #60]	@ (800f21c <SystemInit+0xec>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4a0e      	ldr	r2, [pc, #56]	@ (800f21c <SystemInit+0xec>)
 800f1e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f1e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800f1e8:	4b0c      	ldr	r3, [pc, #48]	@ (800f21c <SystemInit+0xec>)
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800f1ee:	4b10      	ldr	r3, [pc, #64]	@ (800f230 <SystemInit+0x100>)
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	4b10      	ldr	r3, [pc, #64]	@ (800f234 <SystemInit+0x104>)
 800f1f4:	4013      	ands	r3, r2
 800f1f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f1fa:	d202      	bcs.n	800f202 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800f1fc:	4b0e      	ldr	r3, [pc, #56]	@ (800f238 <SystemInit+0x108>)
 800f1fe:	2201      	movs	r2, #1
 800f200:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800f202:	4b0e      	ldr	r3, [pc, #56]	@ (800f23c <SystemInit+0x10c>)
 800f204:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800f208:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800f20a:	bf00      	nop
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr
 800f214:	e000ed00 	.word	0xe000ed00
 800f218:	52002000 	.word	0x52002000
 800f21c:	58024400 	.word	0x58024400
 800f220:	eaf6ed7f 	.word	0xeaf6ed7f
 800f224:	02020200 	.word	0x02020200
 800f228:	01ff0000 	.word	0x01ff0000
 800f22c:	01010280 	.word	0x01010280
 800f230:	5c001000 	.word	0x5c001000
 800f234:	ffff0000 	.word	0xffff0000
 800f238:	51008108 	.word	0x51008108
 800f23c:	52004000 	.word	0x52004000

0800f240 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "blink.h"


shared_ptr<Module> Blink::create(const JsonObject& config, Remora* instance) {
 800f240:	b580      	push	{r7, lr}
 800f242:	b09a      	sub	sp, #104	@ 0x68
 800f244:	af00      	add	r7, sp, #0
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	60b9      	str	r1, [r7, #8]
 800f24a:	607a      	str	r2, [r7, #4]
    const char* pin = config["Pin"];
 800f24c:	f107 031c 	add.w	r3, r7, #28
 800f250:	4a23      	ldr	r2, [pc, #140]	@ (800f2e0 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa0>)
 800f252:	68b9      	ldr	r1, [r7, #8]
 800f254:	4618      	mov	r0, r3
 800f256:	f000 f8b7 	bl	800f3c8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f25a:	f107 031c 	add.w	r3, r7, #28
 800f25e:	4618      	mov	r0, r3
 800f260:	f7f8 fc2e 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800f264:	4603      	mov	r3, r0
 800f266:	61bb      	str	r3, [r7, #24]
    int frequency = config["Frequency"];
 800f268:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f26c:	4a1d      	ldr	r2, [pc, #116]	@ (800f2e4 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa4>)
 800f26e:	68b9      	ldr	r1, [r7, #8]
 800f270:	4618      	mov	r0, r3
 800f272:	f7f8 fc31 	bl	8007ad8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f276:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f27a:	4618      	mov	r0, r3
 800f27c:	f000 f8c9 	bl	800f412 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800f280:	4603      	mov	r3, r0
 800f282:	617b      	str	r3, [r7, #20]
    uint32_t threadFreq = config["ThreadFreq"];
 800f284:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f288:	4a17      	ldr	r2, [pc, #92]	@ (800f2e8 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xa8>)
 800f28a:	68b9      	ldr	r1, [r7, #8]
 800f28c:	4618      	mov	r0, r3
 800f28e:	f000 f8cc 	bl	800f42a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f292:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f296:	4618      	mov	r0, r3
 800f298:	f7f8 fc43 	bl	8007b22 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800f29c:	4603      	mov	r3, r0
 800f29e:	613b      	str	r3, [r7, #16]
    
    printf("Creating Blink module on pin %s with frequency %d Hz\n", pin, frequency);
 800f2a0:	69bb      	ldr	r3, [r7, #24]
 800f2a2:	697a      	ldr	r2, [r7, #20]
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	4811      	ldr	r0, [pc, #68]	@ (800f2ec <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xac>)
 800f2a8:	f01a f8d0 	bl	802944c <iprintf>
	return std::make_unique<Blink>(pin, threadFreq, frequency);
 800f2ac:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800f2b0:	f107 0314 	add.w	r3, r7, #20
 800f2b4:	f107 0210 	add.w	r2, r7, #16
 800f2b8:	f107 0118 	add.w	r1, r7, #24
 800f2bc:	f000 f8da 	bl	800f474 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800f2c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f000 f937 	bl	800f53a <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800f2cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f000 f910 	bl	800f4f6 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>
 800f2d6:	bf00      	nop
}
 800f2d8:	68f8      	ldr	r0, [r7, #12]
 800f2da:	3768      	adds	r7, #104	@ 0x68
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	0802a878 	.word	0x0802a878
 800f2e4:	0802a87c 	.word	0x0802a87c
 800f2e8:	0802a888 	.word	0x0802a888
 800f2ec:	0802a894 	.word	0x0802a894

0800f2f0 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>:
 * @brief Constructs a Blink module.
 * 
 * Initializes the blink pin and sets up the toggle period based on the 
 * servo thread frequency and desired blink frequency.
 */
Blink::Blink(std::string _portAndPin, uint32_t _threadFreq, uint32_t _freq) :
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b086      	sub	sp, #24
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	607a      	str	r2, [r7, #4]
 800f2fc:	603b      	str	r3, [r7, #0]
	bState(false),
    periodCount(_threadFreq / _freq),
    blinkCount(0),
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	4618      	mov	r0, r3
 800f302:	f002 fde7 	bl	8011ed4 <_ZN6ModuleC1Ev>
 800f306:	4a15      	ldr	r2, [pc, #84]	@ (800f35c <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm+0x6c>)
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	601a      	str	r2, [r3, #0]
	bState(false),
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2200      	movs	r2, #0
 800f310:	755a      	strb	r2, [r3, #21]
    periodCount(_threadFreq / _freq),
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	fbb2 f2f3 	udiv	r2, r2, r3
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	619a      	str	r2, [r3, #24]
    blinkCount(0),
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	2200      	movs	r2, #0
 800f322:	61da      	str	r2, [r3, #28]
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800f324:	2301      	movs	r3, #1
 800f326:	617b      	str	r3, [r7, #20]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	3320      	adds	r3, #32
 800f32c:	f107 0214 	add.w	r2, r7, #20
 800f330:	68b9      	ldr	r1, [r7, #8]
 800f332:	4618      	mov	r0, r3
 800f334:	f000 f914 	bl	800f560 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
{
	blinkPin->set(bState);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	3320      	adds	r3, #32
 800f33c:	4618      	mov	r0, r3
 800f33e:	f000 f952 	bl	800f5e6 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800f342:	4602      	mov	r2, r0
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	7d5b      	ldrb	r3, [r3, #21]
 800f348:	4619      	mov	r1, r3
 800f34a:	4610      	mov	r0, r2
 800f34c:	f7f5 fdda 	bl	8004f04 <_ZN3Pin3setEb>
}
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	4618      	mov	r0, r3
 800f354:	3718      	adds	r7, #24
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	0802b4e4 	.word	0x0802b4e4

0800f360 <_ZN5Blink6updateEv>:

void Blink::update(void)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
	++blinkCount;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	69db      	ldr	r3, [r3, #28]
 800f36c:	1c5a      	adds	r2, r3, #1
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	61da      	str	r2, [r3, #28]
	if (blinkCount >= periodCount / 2)
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	69da      	ldr	r2, [r3, #28]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	699b      	ldr	r3, [r3, #24]
 800f37a:	085b      	lsrs	r3, r3, #1
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d315      	bcc.n	800f3ac <_ZN5Blink6updateEv+0x4c>
	{
        bState = !bState;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	7d5b      	ldrb	r3, [r3, #21]
 800f384:	f083 0301 	eor.w	r3, r3, #1
 800f388:	b2da      	uxtb	r2, r3
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	755a      	strb	r2, [r3, #21]
        blinkPin->set(bState);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	3320      	adds	r3, #32
 800f392:	4618      	mov	r0, r3
 800f394:	f000 f927 	bl	800f5e6 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800f398:	4602      	mov	r2, r0
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	7d5b      	ldrb	r3, [r3, #21]
 800f39e:	4619      	mov	r1, r3
 800f3a0:	4610      	mov	r0, r2
 800f3a2:	f7f5 fdaf 	bl	8004f04 <_ZN3Pin3setEb>
        blinkCount = 0;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	61da      	str	r2, [r3, #28]
	}
}
 800f3ac:	bf00      	nop
 800f3ae:	3708      	adds	r7, #8
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}

0800f3b4 <_ZN5Blink10slowUpdateEv>:

void Blink::slowUpdate(void)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	b083      	sub	sp, #12
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
	return;
 800f3bc:	bf00      	nop
}
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b08c      	sub	sp, #48	@ 0x30
 800f3cc:	af02      	add	r7, sp, #8
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800f3d4:	68ba      	ldr	r2, [r7, #8]
 800f3d6:	f107 0314 	add.w	r3, r7, #20
 800f3da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f3de:	e883 0003 	stmia.w	r3, {r0, r1}
 800f3e2:	f107 031c 	add.w	r3, r7, #28
 800f3e6:	6879      	ldr	r1, [r7, #4]
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f000 f913 	bl	800f614 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800f3ee:	466a      	mov	r2, sp
 800f3f0:	f107 0320 	add.w	r3, r7, #32
 800f3f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f3f8:	e882 0003 	stmia.w	r2, {r0, r1}
 800f3fc:	69fb      	ldr	r3, [r7, #28]
 800f3fe:	f107 0214 	add.w	r2, r7, #20
 800f402:	ca06      	ldmia	r2, {r1, r2}
 800f404:	68f8      	ldr	r0, [r7, #12]
 800f406:	f7f8 fcca 	bl	8007d9e <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800f40a:	68f8      	ldr	r0, [r7, #12]
 800f40c:	3728      	adds	r7, #40	@ 0x28
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}

0800f412 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>:
  operator T() const {
 800f412:	b580      	push	{r7, lr}
 800f414:	b082      	sub	sp, #8
 800f416:	af00      	add	r7, sp, #0
 800f418:	6078      	str	r0, [r7, #4]
    return as<T>();
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f000 f90d 	bl	800f63a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>
 800f420:	4603      	mov	r3, r0
  }
 800f422:	4618      	mov	r0, r3
 800f424:	3708      	adds	r7, #8
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}

0800f42a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800f42a:	b580      	push	{r7, lr}
 800f42c:	b08c      	sub	sp, #48	@ 0x30
 800f42e:	af02      	add	r7, sp, #8
 800f430:	60f8      	str	r0, [r7, #12]
 800f432:	60b9      	str	r1, [r7, #8]
 800f434:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800f436:	68ba      	ldr	r2, [r7, #8]
 800f438:	f107 0314 	add.w	r3, r7, #20
 800f43c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f440:	e883 0003 	stmia.w	r3, {r0, r1}
 800f444:	f107 031c 	add.w	r3, r7, #28
 800f448:	6879      	ldr	r1, [r7, #4]
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7fd fe58 	bl	800d100 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800f450:	466a      	mov	r2, sp
 800f452:	f107 0320 	add.w	r3, r7, #32
 800f456:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f45a:	e882 0003 	stmia.w	r2, {r0, r1}
 800f45e:	69fb      	ldr	r3, [r7, #28]
 800f460:	f107 0214 	add.w	r2, r7, #20
 800f464:	ca06      	ldmia	r2, {r1, r2}
 800f466:	68f8      	ldr	r0, [r7, #12]
 800f468:	f7f8 fc99 	bl	8007d9e <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800f46c:	68f8      	ldr	r0, [r7, #12]
 800f46e:	3728      	adds	r7, #40	@ 0x28
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800f474:	b5b0      	push	{r4, r5, r7, lr}
 800f476:	b08c      	sub	sp, #48	@ 0x30
 800f478:	af00      	add	r7, sp, #0
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	607a      	str	r2, [r7, #4]
 800f480:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800f482:	2024      	movs	r0, #36	@ 0x24
 800f484:	f019 f938 	bl	80286f8 <_Znwj>
 800f488:	4603      	mov	r3, r0
 800f48a:	461d      	mov	r5, r3
 800f48c:	68b8      	ldr	r0, [r7, #8]
 800f48e:	f000 f8f6 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800f492:	4603      	mov	r3, r0
 800f494:	681c      	ldr	r4, [r3, #0]
 800f496:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f49a:	4618      	mov	r0, r3
 800f49c:	f019 f93d 	bl	802871a <_ZNSaIcEC1Ev>
 800f4a0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f4a4:	f107 0314 	add.w	r3, r7, #20
 800f4a8:	4621      	mov	r1, r4
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7f8 fa82 	bl	80079b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f7fd fcb3 	bl	800ce1c <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	681c      	ldr	r4, [r3, #0]
 800f4ba:	6838      	ldr	r0, [r7, #0]
 800f4bc:	f000 f8ea 	bl	800f694 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	f107 0114 	add.w	r1, r7, #20
 800f4c8:	4622      	mov	r2, r4
 800f4ca:	4628      	mov	r0, r5
 800f4cc:	f7ff ff10 	bl	800f2f0 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>
 800f4d0:	4629      	mov	r1, r5
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	f000 f8f9 	bl	800f6ca <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800f4d8:	f107 0314 	add.w	r3, r7, #20
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f019 fa06 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f4e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f019 f918 	bl	802871c <_ZNSaIcED1Ev>
 800f4ec:	bf00      	nop
 800f4ee:	68f8      	ldr	r0, [r7, #12]
 800f4f0:	3730      	adds	r7, #48	@ 0x30
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bdb0      	pop	{r4, r5, r7, pc}

0800f4f6 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800f4f6:	b590      	push	{r4, r7, lr}
 800f4f8:	b085      	sub	sp, #20
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	4618      	mov	r0, r3
 800f502:	f000 f8f1 	bl	800f6e8 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800f506:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d00c      	beq.n	800f52a <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f000 f8f6 	bl	800f702 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800f516:	4604      	mov	r4, r0
 800f518:	68f8      	ldr	r0, [r7, #12]
 800f51a:	f000 f8ff 	bl	800f71c <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>
 800f51e:	4603      	mov	r3, r0
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	4619      	mov	r1, r3
 800f524:	4620      	mov	r0, r4
 800f526:	f000 f92d 	bl	800f784 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
	__ptr = pointer();
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2200      	movs	r2, #0
 800f52e:	601a      	str	r2, [r3, #0]
      }
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	4618      	mov	r0, r3
 800f534:	3714      	adds	r7, #20
 800f536:	46bd      	mov	sp, r7
 800f538:	bd90      	pop	{r4, r7, pc}

0800f53a <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800f53a:	b590      	push	{r4, r7, lr}
 800f53c:	b083      	sub	sp, #12
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
 800f542:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800f544:	687c      	ldr	r4, [r7, #4]
 800f546:	6838      	ldr	r0, [r7, #0]
 800f548:	f000 f92d 	bl	800f7a6 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800f54c:	4603      	mov	r3, r0
 800f54e:	4619      	mov	r1, r3
 800f550:	4620      	mov	r0, r4
 800f552:	f000 f933 	bl	800f7bc <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	4618      	mov	r0, r3
 800f55a:	370c      	adds	r7, #12
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd90      	pop	{r4, r7, pc}

0800f560 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800f560:	b5b0      	push	{r4, r5, r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	60f8      	str	r0, [r7, #12]
 800f568:	60b9      	str	r1, [r7, #8]
 800f56a:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800f56c:	2040      	movs	r0, #64	@ 0x40
 800f56e:	f019 f8c3 	bl	80286f8 <_Znwj>
 800f572:	4603      	mov	r3, r0
 800f574:	461c      	mov	r4, r3
 800f576:	68b8      	ldr	r0, [r7, #8]
 800f578:	f000 f958 	bl	800f82c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800f57c:	4605      	mov	r5, r0
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f000 f83d 	bl	800f5fe <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800f584:	4603      	mov	r3, r0
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	461a      	mov	r2, r3
 800f58a:	4629      	mov	r1, r5
 800f58c:	4620      	mov	r0, r4
 800f58e:	f7f5 fb0f 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800f592:	4621      	mov	r1, r4
 800f594:	68f8      	ldr	r0, [r7, #12]
 800f596:	f000 f964 	bl	800f862 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800f59a:	68f8      	ldr	r0, [r7, #12]
 800f59c:	3710      	adds	r7, #16
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bdb0      	pop	{r4, r5, r7, pc}

0800f5a2 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800f5a2:	b590      	push	{r4, r7, lr}
 800f5a4:	b085      	sub	sp, #20
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f000 f967 	bl	800f880 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800f5b2:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d00c      	beq.n	800f5d6 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f000 f96c 	bl	800f89a <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>
 800f5c2:	4604      	mov	r4, r0
 800f5c4:	68f8      	ldr	r0, [r7, #12]
 800f5c6:	f000 f975 	bl	800f8b4 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	f000 f97a 	bl	800f8ca <_ZNKSt14default_deleteI3PinEclEPS0_>
	__ptr = pointer();
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	601a      	str	r2, [r3, #0]
      }
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3714      	adds	r7, #20
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd90      	pop	{r4, r7, pc}

0800f5e6 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	b082      	sub	sp, #8
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]
	return get();
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f000 f97e 	bl	800f8f0 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>
 800f5f4:	4603      	mov	r3, r0
      }
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3708      	adds	r7, #8
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}

0800f5fe <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f5fe:	b480      	push	{r7}
 800f600:	b083      	sub	sp, #12
 800f602:	af00      	add	r7, sp, #0
 800f604:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4618      	mov	r0, r3
 800f60a:	370c      	adds	r7, #12
 800f60c:	46bd      	mov	sp, r7
 800f60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f612:	4770      	bx	lr

0800f614 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800f614:	b580      	push	{r7, lr}
 800f616:	b082      	sub	sp, #8
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800f61e:	6838      	ldr	r0, [r7, #0]
 800f620:	f000 f973 	bl	800f90a <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800f624:	4602      	mov	r2, r0
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	4611      	mov	r1, r2
 800f62a:	4618      	mov	r0, r3
 800f62c:	f000 f978 	bl	800f920 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>
 800f630:	bf00      	nop
}
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	3708      	adds	r7, #8
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}

0800f63a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 800f63a:	b590      	push	{r4, r7, lr}
 800f63c:	b087      	sub	sp, #28
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	617b      	str	r3, [r7, #20]
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800f64a:	6938      	ldr	r0, [r7, #16]
 800f64c:	f7f9 fab9 	bl	8008bc2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 800f650:	4604      	mov	r4, r0
 800f652:	6938      	ldr	r0, [r7, #16]
 800f654:	f7f9 f943 	bl	80088de <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800f658:	4602      	mov	r2, r0
 800f65a:	f107 0308 	add.w	r3, r7, #8
 800f65e:	4621      	mov	r1, r4
 800f660:	4618      	mov	r0, r3
 800f662:	f7f6 f9de 	bl	8005a22 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800f666:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 800f668:	f107 0308 	add.w	r3, r7, #8
 800f66c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f670:	f000 f965 	bl	800f93e <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>
 800f674:	4603      	mov	r3, r0
}
 800f676:	4618      	mov	r0, r3
 800f678:	371c      	adds	r7, #28
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd90      	pop	{r4, r7, pc}

0800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f67e:	b480      	push	{r7}
 800f680:	b083      	sub	sp, #12
 800f682:	af00      	add	r7, sp, #0
 800f684:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	4618      	mov	r0, r3
 800f68a:	370c      	adds	r7, #12
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr

0800f694 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	4618      	mov	r0, r3
 800f6a0:	370c      	adds	r7, #12
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr

0800f6aa <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800f6aa:	b580      	push	{r7, lr}
 800f6ac:	b082      	sub	sp, #8
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
 800f6b2:	6039      	str	r1, [r7, #0]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	683a      	ldr	r2, [r7, #0]
 800f6b8:	4611      	mov	r1, r2
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f000 f95d 	bl	800f97a <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3708      	adds	r7, #8
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}

0800f6ca <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800f6ca:	b580      	push	{r7, lr}
 800f6cc:	b082      	sub	sp, #8
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	6078      	str	r0, [r7, #4]
 800f6d2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6839      	ldr	r1, [r7, #0]
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7ff ffe6 	bl	800f6aa <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3708      	adds	r7, #8
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f000 f955 	bl	800f9a2 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3708      	adds	r7, #8
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}

0800f702 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800f702:	b580      	push	{r7, lr}
 800f704:	b082      	sub	sp, #8
 800f706:	af00      	add	r7, sp, #0
 800f708:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	4618      	mov	r0, r3
 800f70e:	f000 f955 	bl	800f9bc <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>
 800f712:	4603      	mov	r3, r0
 800f714:	4618      	mov	r0, r3
 800f716:	3708      	adds	r7, #8
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	4618      	mov	r0, r3
 800f728:	370c      	adds	r7, #12
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr
	...

0800f734 <_ZN5BlinkD1Ev>:
 * @class Blink
 * @brief A module for toggling a pin at a specific frequency.
 * 
 * The Blink class controls a GPIO pin, toggling its state at a specified frequency.
 */
class Blink : public Module
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	4a08      	ldr	r2, [pc, #32]	@ (800f760 <_ZN5BlinkD1Ev+0x2c>)
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	601a      	str	r2, [r3, #0]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	3320      	adds	r3, #32
 800f746:	4618      	mov	r0, r3
 800f748:	f7ff ff2b 	bl	800f5a2 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	4618      	mov	r0, r3
 800f750:	f002 fbdc 	bl	8011f0c <_ZN6ModuleD1Ev>
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	4618      	mov	r0, r3
 800f758:	3708      	adds	r7, #8
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	0802b4e4 	.word	0x0802b4e4

0800f764 <_ZN5BlinkD0Ev>:
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f7ff ffe1 	bl	800f734 <_ZN5BlinkD1Ev>
 800f772:	2124      	movs	r1, #36	@ 0x24
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f018 ffae 	bl	80286d6 <_ZdlPvj>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4618      	mov	r0, r3
 800f77e:	3708      	adds	r7, #8
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <_ZNKSt14default_deleteI5BlinkEclEPS0_>:
      operator()(_Tp* __ptr) const
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d004      	beq.n	800f79e <_ZNKSt14default_deleteI5BlinkEclEPS0_+0x1a>
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	3204      	adds	r2, #4
 800f798:	6812      	ldr	r2, [r2, #0]
 800f79a:	4618      	mov	r0, r3
 800f79c:	4790      	blx	r2
      }
 800f79e:	bf00      	nop
 800f7a0:	3708      	adds	r7, #8
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}

0800f7a6 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800f7a6:	b480      	push	{r7}
 800f7a8:	b083      	sub	sp, #12
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	370c      	adds	r7, #12
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr

0800f7bc <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b084      	sub	sp, #16
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800f7c6:	6838      	ldr	r0, [r7, #0]
 800f7c8:	f000 f905 	bl	800f9d6 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800f7cc:	4602      	mov	r2, r0
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	601a      	str	r2, [r3, #0]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	3304      	adds	r3, #4
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fd fd66 	bl	800d2a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800f7dc:	6838      	ldr	r0, [r7, #0]
 800f7de:	f000 f8fa 	bl	800f9d6 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f000 f903 	bl	800f9f0 <_ZSt12__to_addressI5BlinkEPT_S2_>
 800f7ea:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800f7ec:	6838      	ldr	r0, [r7, #0]
 800f7ee:	f7ff ffda 	bl	800f7a6 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800f7f2:	4602      	mov	r2, r0
 800f7f4:	f107 0308 	add.w	r3, r7, #8
 800f7f8:	4611      	mov	r1, r2
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f000 f903 	bl	800fa06 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	3304      	adds	r3, #4
 800f804:	f107 0208 	add.w	r2, r7, #8
 800f808:	4611      	mov	r1, r2
 800f80a:	4618      	mov	r0, r3
 800f80c:	f000 f93d 	bl	800fa8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800f810:	f107 0308 	add.w	r3, r7, #8
 800f814:	4618      	mov	r0, r3
 800f816:	f7fc fb4a 	bl	800beae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800f81a:	68f9      	ldr	r1, [r7, #12]
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f000 f958 	bl	800fad2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4618      	mov	r0, r3
 800f826:	3710      	adds	r7, #16
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f82c:	b480      	push	{r7}
 800f82e:	b083      	sub	sp, #12
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	4618      	mov	r0, r3
 800f838:	370c      	adds	r7, #12
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr

0800f842 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800f842:	b580      	push	{r7, lr}
 800f844:	b082      	sub	sp, #8
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
 800f84a:	6039      	str	r1, [r7, #0]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	683a      	ldr	r2, [r7, #0]
 800f850:	4611      	mov	r1, r2
 800f852:	4618      	mov	r0, r3
 800f854:	f000 f948 	bl	800fae8 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	4618      	mov	r0, r3
 800f85c:	3708      	adds	r7, #8
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}

0800f862 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800f862:	b580      	push	{r7, lr}
 800f864:	b082      	sub	sp, #8
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
 800f86a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6839      	ldr	r1, [r7, #0]
 800f870:	4618      	mov	r0, r3
 800f872:	f7ff ffe6 	bl	800f842 <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	4618      	mov	r0, r3
 800f87a:	3708      	adds	r7, #8
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}

0800f880 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	4618      	mov	r0, r3
 800f88c:	f000 f940 	bl	800fb10 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f890:	4603      	mov	r3, r0
 800f892:	4618      	mov	r0, r3
 800f894:	3708      	adds	r7, #8
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}

0800f89a <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800f89a:	b580      	push	{r7, lr}
 800f89c:	b082      	sub	sp, #8
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f000 f940 	bl	800fb2a <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3708      	adds	r7, #8
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}

0800f8b4 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f8b4:	b480      	push	{r7}
 800f8b6:	b083      	sub	sp, #12
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4618      	mov	r0, r3
 800f8c0:	370c      	adds	r7, #12
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr

0800f8ca <_ZNKSt14default_deleteI3PinEclEPS0_>:
      operator()(_Tp* __ptr) const
 800f8ca:	b590      	push	{r4, r7, lr}
 800f8cc:	b083      	sub	sp, #12
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
 800f8d2:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800f8d4:	683c      	ldr	r4, [r7, #0]
 800f8d6:	2c00      	cmp	r4, #0
 800f8d8:	d006      	beq.n	800f8e8 <_ZNKSt14default_deleteI3PinEclEPS0_+0x1e>
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f7f2 fcf2 	bl	80022c4 <_ZN3PinD1Ev>
 800f8e0:	2140      	movs	r1, #64	@ 0x40
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f018 fef7 	bl	80286d6 <_ZdlPvj>
      }
 800f8e8:	bf00      	nop
 800f8ea:	370c      	adds	r7, #12
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd90      	pop	{r4, r7, pc}

0800f8f0 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f000 f922 	bl	800fb44 <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800f900:	4603      	mov	r3, r0
 800f902:	4618      	mov	r0, r3
 800f904:	3708      	adds	r7, #8
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}

0800f90a <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800f90a:	b480      	push	{r7}
 800f90c:	b083      	sub	sp, #12
 800f90e:	af00      	add	r7, sp, #0
 800f910:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800f912:	687b      	ldr	r3, [r7, #4]
}
 800f914:	4618      	mov	r0, r3
 800f916:	370c      	adds	r7, #12
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr

0800f920 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800f92a:	2301      	movs	r3, #1
 800f92c:	2203      	movs	r2, #3
 800f92e:	6839      	ldr	r1, [r7, #0]
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f7f5 fcaf 	bl	8005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	3708      	adds	r7, #8
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}

0800f93e <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>:
    auto resources = getResourceManager(dst);
    data->clear(resources);
    return data->setInteger(src, resources);
  }

  static T fromJson(JsonVariantConst src) {
 800f93e:	b580      	push	{r7, lr}
 800f940:	b084      	sub	sp, #16
 800f942:	af00      	add	r7, sp, #0
 800f944:	463b      	mov	r3, r7
 800f946:	e883 0003 	stmia.w	r3, {r0, r1}
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    auto data = getData(src);
 800f94a:	463b      	mov	r3, r7
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7f7 fde7 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800f952:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800f954:	463b      	mov	r3, r7
 800f956:	4618      	mov	r0, r3
 800f958:	f7f7 fdee 	bl	8007538 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800f95c:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d005      	beq.n	800f970 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x32>
 800f964:	68b9      	ldr	r1, [r7, #8]
 800f966:	68f8      	ldr	r0, [r7, #12]
 800f968:	f000 f8fa 	bl	800fb60 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>
 800f96c:	4603      	mov	r3, r0
 800f96e:	e000      	b.n	800f972 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x34>
 800f970:	2300      	movs	r3, #0
  }
 800f972:	4618      	mov	r0, r3
 800f974:	3710      	adds	r7, #16
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}

0800f97a <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800f97a:	b590      	push	{r4, r7, lr}
 800f97c:	b083      	sub	sp, #12
 800f97e:	af00      	add	r7, sp, #0
 800f980:	6078      	str	r0, [r7, #4]
 800f982:	6039      	str	r1, [r7, #0]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	4618      	mov	r0, r3
 800f988:	f000 f97c 	bl	800fc84 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800f98c:	683c      	ldr	r4, [r7, #0]
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f7ff feaa 	bl	800f6e8 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800f994:	4603      	mov	r3, r0
 800f996:	601c      	str	r4, [r3, #0]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	4618      	mov	r0, r3
 800f99c:	370c      	adds	r7, #12
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd90      	pop	{r4, r7, pc}

0800f9a2 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800f9a2:	b580      	push	{r7, lr}
 800f9a4:	b082      	sub	sp, #8
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f000 f976 	bl	800fc9e <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3708      	adds	r7, #8
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b082      	sub	sp, #8
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f000 f975 	bl	800fcb6 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3708      	adds	r7, #8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}

0800f9d6 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800f9d6:	b580      	push	{r7, lr}
 800f9d8:	b082      	sub	sp, #8
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f000 f974 	bl	800fcce <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3708      	adds	r7, #8
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <_ZSt12__to_addressI5BlinkEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 800f9f0:	b480      	push	{r7}
 800f9f2:	b083      	sub	sp, #12
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
      return __ptr;
 800f9f8:	687b      	ldr	r3, [r7, #4]
    }
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	370c      	adds	r7, #12
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa04:	4770      	bx	lr

0800fa06 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800fa06:	b580      	push	{r7, lr}
 800fa08:	b086      	sub	sp, #24
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	6078      	str	r0, [r7, #4]
 800fa0e:	6039      	str	r1, [r7, #0]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2200      	movs	r2, #0
 800fa14:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800fa16:	6838      	ldr	r0, [r7, #0]
 800fa18:	f7ff ffdd 	bl	800f9d6 <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	bf0c      	ite	eq
 800fa22:	2301      	moveq	r3, #1
 800fa24:	2300      	movne	r3, #0
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d128      	bne.n	800fa7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800fa2c:	f107 030c 	add.w	r3, r7, #12
 800fa30:	4618      	mov	r0, r3
 800fa32:	f000 f95a 	bl	800fcea <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800fa36:	f107 030c 	add.w	r3, r7, #12
 800fa3a:	2101      	movs	r1, #1
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f000 f96c 	bl	800fd1a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800fa42:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800fa44:	6838      	ldr	r0, [r7, #0]
 800fa46:	f000 f977 	bl	800fd38 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800fa4e:	6838      	ldr	r0, [r7, #0]
 800fa50:	f7ff fe57 	bl	800f702 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800fa54:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800fa56:	4618      	mov	r0, r3
 800fa58:	f000 f97b 	bl	800fd52 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	f107 0210 	add.w	r2, r7, #16
 800fa62:	f107 000c 	add.w	r0, r7, #12
 800fa66:	6979      	ldr	r1, [r7, #20]
 800fa68:	f000 f97e 	bl	800fd68 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	697a      	ldr	r2, [r7, #20]
 800fa70:	601a      	str	r2, [r3, #0]
	}
 800fa72:	f107 030c 	add.w	r3, r7, #12
 800fa76:	4618      	mov	r0, r3
 800fa78:	f000 f943 	bl	800fd02 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800fa7c:	e000      	b.n	800fa80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800fa7e:	bf00      	nop
	}
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	4618      	mov	r0, r3
 800fa84:	3718      	adds	r7, #24
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}

0800fa8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 800fa8a:	b580      	push	{r7, lr}
 800fa8c:	b084      	sub	sp, #16
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
 800fa92:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	68fa      	ldr	r2, [r7, #12]
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d011      	beq.n	800fac8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != nullptr)
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d002      	beq.n	800fab0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 800faaa:	68f8      	ldr	r0, [r7, #12]
 800faac:	f7fa ffd0 	bl	800aa50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != nullptr)
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d004      	beq.n	800fac2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7fa ffd6 	bl	800aa6e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	601a      	str	r2, [r3, #0]
	return *this;
 800fac8:	687b      	ldr	r3, [r7, #4]
      }
 800faca:	4618      	mov	r0, r3
 800facc:	3710      	adds	r7, #16
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}

0800fad2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800fad2:	b480      	push	{r7}
 800fad4:	b083      	sub	sp, #12
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	6078      	str	r0, [r7, #4]
 800fada:	6039      	str	r1, [r7, #0]
	{ }
 800fadc:	bf00      	nop
 800fade:	370c      	adds	r7, #12
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr

0800fae8 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800fae8:	b590      	push	{r4, r7, lr}
 800faea:	b083      	sub	sp, #12
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	4618      	mov	r0, r3
 800faf6:	f000 f94f 	bl	800fd98 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800fafa:	683c      	ldr	r4, [r7, #0]
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f7ff febf 	bl	800f880 <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800fb02:	4603      	mov	r3, r0
 800fb04:	601c      	str	r4, [r3, #0]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	370c      	adds	r7, #12
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd90      	pop	{r4, r7, pc}

0800fb10 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f000 f949 	bl	800fdb2 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800fb20:	4603      	mov	r3, r0
 800fb22:	4618      	mov	r0, r3
 800fb24:	3708      	adds	r7, #8
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}

0800fb2a <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800fb2a:	b580      	push	{r7, lr}
 800fb2c:	b082      	sub	sp, #8
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	6078      	str	r0, [r7, #4]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	4618      	mov	r0, r3
 800fb36:	f000 f948 	bl	800fdca <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3708      	adds	r7, #8
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f000 f947 	bl	800fde2 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800fb54:	4603      	mov	r3, r0
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3708      	adds	r7, #8
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}

0800fb60 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b084      	sub	sp, #16
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 800fb6a:	6839      	ldr	r1, [r7, #0]
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f7f6 fced 	bl	800654c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800fb72:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	791b      	ldrb	r3, [r3, #4]
 800fb78:	3b04      	subs	r3, #4
 800fb7a:	2b1a      	cmp	r3, #26
 800fb7c:	d87c      	bhi.n	800fc78 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x118>
 800fb7e:	a201      	add	r2, pc, #4	@ (adr r2, 800fb84 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x24>)
 800fb80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb84:	0800fc37 	.word	0x0800fc37
 800fb88:	0800fc45 	.word	0x0800fc45
 800fb8c:	0800fbf1 	.word	0x0800fbf1
 800fb90:	0800fc79 	.word	0x0800fc79
 800fb94:	0800fc79 	.word	0x0800fc79
 800fb98:	0800fc79 	.word	0x0800fc79
 800fb9c:	0800fbf7 	.word	0x0800fbf7
 800fba0:	0800fc79 	.word	0x0800fc79
 800fba4:	0800fc05 	.word	0x0800fc05
 800fba8:	0800fc79 	.word	0x0800fc79
 800fbac:	0800fc55 	.word	0x0800fc55
 800fbb0:	0800fc79 	.word	0x0800fc79
 800fbb4:	0800fc79 	.word	0x0800fc79
 800fbb8:	0800fc79 	.word	0x0800fc79
 800fbbc:	0800fc79 	.word	0x0800fc79
 800fbc0:	0800fc79 	.word	0x0800fc79
 800fbc4:	0800fc79 	.word	0x0800fc79
 800fbc8:	0800fc79 	.word	0x0800fc79
 800fbcc:	0800fc79 	.word	0x0800fc79
 800fbd0:	0800fc79 	.word	0x0800fc79
 800fbd4:	0800fc79 	.word	0x0800fc79
 800fbd8:	0800fc79 	.word	0x0800fc79
 800fbdc:	0800fc13 	.word	0x0800fc13
 800fbe0:	0800fc79 	.word	0x0800fc79
 800fbe4:	0800fc25 	.word	0x0800fc25
 800fbe8:	0800fc79 	.word	0x0800fc79
 800fbec:	0800fc67 	.word	0x0800fc67
        return content_.asBoolean;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	e041      	b.n	800fc7a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f000 f8fe 	bl	800fdfc <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>
 800fc00:	4603      	mov	r3, r0
 800fc02:	e03a      	b.n	800fc7a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f000 f908 	bl	800fe1e <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	e033      	b.n	800fc7a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc18:	4610      	mov	r0, r2
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	f000 f910 	bl	800fe40 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800fc20:	4603      	mov	r3, r0
 800fc22:	e02a      	b.n	800fc7a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2a:	4610      	mov	r0, r2
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	f000 f91a 	bl	800fe66 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800fc32:	4603      	mov	r3, r0
 800fc34:	e021      	b.n	800fc7a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f000 f926 	bl	800fe8c <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800fc40:	4603      	mov	r3, r0
 800fc42:	e01a      	b.n	800fc7a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	3308      	adds	r3, #8
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f000 f91e 	bl	800fe8c <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800fc50:	4603      	mov	r3, r0
 800fc52:	e012      	b.n	800fc7a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	edd3 7a00 	vldr	s15, [r3]
 800fc5a:	eeb0 0a67 	vmov.f32	s0, s15
 800fc5e:	f000 f929 	bl	800feb4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800fc62:	4603      	mov	r3, r0
 800fc64:	e009      	b.n	800fc7a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	ed93 7b00 	vldr	d7, [r3]
 800fc6c:	eeb0 0b47 	vmov.f64	d0, d7
 800fc70:	f000 f938 	bl	800fee4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800fc74:	4603      	mov	r3, r0
 800fc76:	e000      	b.n	800fc7a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 800fc78:	2300      	movs	r3, #0
  }
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3710      	adds	r7, #16
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
 800fc82:	bf00      	nop

0800fc84 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f000 f940 	bl	800ff14 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	4618      	mov	r0, r3
 800fc98:	3708      	adds	r7, #8
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}

0800fc9e <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fc9e:	b580      	push	{r7, lr}
 800fca0:	b082      	sub	sp, #8
 800fca2:	af00      	add	r7, sp, #0
 800fca4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f000 f944 	bl	800ff34 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>
 800fcac:	4603      	mov	r3, r0
 800fcae:	4618      	mov	r0, r3
 800fcb0:	3708      	adds	r7, #8
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}

0800fcb6 <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800fcb6:	b580      	push	{r7, lr}
 800fcb8:	b082      	sub	sp, #8
 800fcba:	af00      	add	r7, sp, #0
 800fcbc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f000 f945 	bl	800ff4e <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3708      	adds	r7, #8
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}

0800fcce <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
 800fcce:	b580      	push	{r7, lr}
 800fcd0:	b082      	sub	sp, #8
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	6078      	str	r0, [r7, #4]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f000 f944 	bl	800ff66 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800fcde:	4603      	mov	r3, r0
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	4618      	mov	r0, r3
 800fce4:	3708      	adds	r7, #8
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}

0800fcea <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800fcea:	b580      	push	{r7, lr}
 800fcec:	b082      	sub	sp, #8
 800fcee:	af00      	add	r7, sp, #0
 800fcf0:	6078      	str	r0, [r7, #4]
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f000 f944 	bl	800ff80 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	3708      	adds	r7, #8
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}

0800fd02 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800fd02:	b580      	push	{r7, lr}
 800fd04:	b082      	sub	sp, #8
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	6078      	str	r0, [r7, #4]
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f000 f943 	bl	800ff96 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4618      	mov	r0, r3
 800fd14:	3708      	adds	r7, #8
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}

0800fd1a <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800fd1a:	b580      	push	{r7, lr}
 800fd1c:	b082      	sub	sp, #8
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	6078      	str	r0, [r7, #4]
 800fd22:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800fd24:	2200      	movs	r2, #0
 800fd26:	6839      	ldr	r1, [r7, #0]
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f000 f93f 	bl	800ffac <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	4618      	mov	r0, r3
 800fd32:	3708      	adds	r7, #8
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	4618      	mov	r0, r3
 800fd44:	f000 f95c 	bl	8010000 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3708      	adds	r7, #8
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}

0800fd52 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fd52:	b480      	push	{r7}
 800fd54:	b083      	sub	sp, #12
 800fd56:	af00      	add	r7, sp, #0
 800fd58:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	370c      	adds	r7, #12
 800fd60:	46bd      	mov	sp, r7
 800fd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd66:	4770      	bx	lr

0800fd68 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800fd68:	b590      	push	{r4, r7, lr}
 800fd6a:	b085      	sub	sp, #20
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	60f8      	str	r0, [r7, #12]
 800fd70:	60b9      	str	r1, [r7, #8]
 800fd72:	607a      	str	r2, [r7, #4]
 800fd74:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f000 f957 	bl	801002a <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800fd7c:	4604      	mov	r4, r0
 800fd7e:	6838      	ldr	r0, [r7, #0]
 800fd80:	f7ff ffe7 	bl	800fd52 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800fd84:	4603      	mov	r3, r0
 800fd86:	4622      	mov	r2, r4
 800fd88:	68b9      	ldr	r1, [r7, #8]
 800fd8a:	68f8      	ldr	r0, [r7, #12]
 800fd8c:	f000 f958 	bl	8010040 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800fd90:	bf00      	nop
 800fd92:	3714      	adds	r7, #20
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd90      	pop	{r4, r7, pc}

0800fd98 <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	4618      	mov	r0, r3
 800fda4:	f000 f96a 	bl	801007c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3708      	adds	r7, #8
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b082      	sub	sp, #8
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 f96e 	bl	801009c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3708      	adds	r7, #8
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}

0800fdca <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800fdca:	b580      	push	{r7, lr}
 800fdcc:	b082      	sub	sp, #8
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f000 f96f 	bl	80100b6 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	4618      	mov	r0, r3
 800fddc:	3708      	adds	r7, #8
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}

0800fde2 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800fde2:	b580      	push	{r7, lr}
 800fde4:	b082      	sub	sp, #8
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4618      	mov	r0, r3
 800fdee:	f000 f96e 	bl	80100ce <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3708      	adds	r7, #8
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>:
TOut convertNumber(TIn value) {
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f000 f96e 	bl	80100e6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d001      	beq.n	800fe14 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x18>
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	e000      	b.n	800fe16 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x1a>
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3708      	adds	r7, #8
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}

0800fe1e <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>:
TOut convertNumber(TIn value) {
 800fe1e:	b580      	push	{r7, lr}
 800fe20:	b082      	sub	sp, #8
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f000 f96f 	bl	801010a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d001      	beq.n	800fe36 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x18>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	e000      	b.n	800fe38 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x1a>
 800fe36:	2300      	movs	r3, #0
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3708      	adds	r7, #8
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}

0800fe40 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>:
TOut convertNumber(TIn value) {
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fe4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fe4e:	f000 f967 	bl	8010120 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800fe52:	4603      	mov	r3, r0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d001      	beq.n	800fe5c <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1c>
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	e000      	b.n	800fe5e <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1e>
 800fe5c:	2300      	movs	r3, #0
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3708      	adds	r7, #8
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}

0800fe66 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>:
TOut convertNumber(TIn value) {
 800fe66:	b580      	push	{r7, lr}
 800fe68:	b082      	sub	sp, #8
 800fe6a:	af00      	add	r7, sp, #0
 800fe6c:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800fe70:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fe74:	f000 f96c 	bl	8010150 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d001      	beq.n	800fe82 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1c>
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	e000      	b.n	800fe84 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1e>
 800fe82:	2300      	movs	r3, #0
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3708      	adds	r7, #8
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}

0800fe8c <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>:
inline T parseNumber(const char* s) {
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b086      	sub	sp, #24
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800fe94:	f107 0308 	add.w	r3, r7, #8
 800fe98:	6879      	ldr	r1, [r7, #4]
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7f6 fdba 	bl	8006a14 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 800fea0:	f107 0308 	add.w	r3, r7, #8
 800fea4:	4618      	mov	r0, r3
 800fea6:	f000 f979 	bl	801019c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>
 800feaa:	4603      	mov	r3, r0
}
 800feac:	4618      	mov	r0, r3
 800feae:	3718      	adds	r7, #24
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}

0800feb4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>:
TOut convertNumber(TIn value) {
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800febe:	ed97 0a01 	vldr	s0, [r7, #4]
 800fec2:	f000 f9b2 	bl	801022a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d006      	beq.n	800feda <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x26>
 800fecc:	edd7 7a01 	vldr	s15, [r7, #4]
 800fed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fed4:	ee17 3a90 	vmov	r3, s15
 800fed8:	e000      	b.n	800fedc <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x28>
 800feda:	2300      	movs	r3, #0
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3708      	adds	r7, #8
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>:
TOut convertNumber(TIn value) {
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800feee:	ed97 0b00 	vldr	d0, [r7]
 800fef2:	f000 f9c7 	bl	8010284 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800fef6:	4603      	mov	r3, r0
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d006      	beq.n	800ff0a <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x26>
 800fefc:	ed97 7b00 	vldr	d7, [r7]
 800ff00:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ff04:	ee17 3a90 	vmov	r3, s15
 800ff08:	e000      	b.n	800ff0c <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x28>
 800ff0a:	2300      	movs	r3, #0
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3708      	adds	r7, #8
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}

0800ff14 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f000 f9d7 	bl	80102d0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	4618      	mov	r0, r3
 800ff26:	f000 f9df 	bl	80102e8 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	3708      	adds	r7, #8
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f000 f9e0 	bl	8010304 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>
 800ff44:	4603      	mov	r3, r0
 800ff46:	4618      	mov	r0, r3
 800ff48:	3708      	adds	r7, #8
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}

0800ff4e <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ff4e:	b580      	push	{r7, lr}
 800ff50:	b082      	sub	sp, #8
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f000 f9df 	bl	801031a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	4618      	mov	r0, r3
 800ff60:	3708      	adds	r7, #8
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}

0800ff66 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800ff66:	b580      	push	{r7, lr}
 800ff68:	b082      	sub	sp, #8
 800ff6a:	af00      	add	r7, sp, #0
 800ff6c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	4618      	mov	r0, r3
 800ff72:	f000 f9de 	bl	8010332 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800ff76:	4603      	mov	r3, r0
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3708      	adds	r7, #8
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ff80:	b480      	push	{r7}
 800ff82:	b083      	sub	sp, #12
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	370c      	adds	r7, #12
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr

0800ff96 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ff96:	b480      	push	{r7}
 800ff98:	b083      	sub	sp, #12
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	6078      	str	r0, [r7, #4]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	370c      	adds	r7, #12
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr

0800ffac <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b084      	sub	sp, #16
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	60f8      	str	r0, [r7, #12]
 800ffb4:	60b9      	str	r1, [r7, #8]
 800ffb6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ffb8:	68f8      	ldr	r0, [r7, #12]
 800ffba:	f000 f9c6 	bl	801034a <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	bf8c      	ite	hi
 800ffc6:	2301      	movhi	r3, #1
 800ffc8:	2300      	movls	r3, #0
 800ffca:	b2db      	uxtb	r3, r3
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	bf14      	ite	ne
 800ffd0:	2301      	movne	r3, #1
 800ffd2:	2300      	moveq	r3, #0
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d007      	beq.n	800ffea <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ffe0:	d301      	bcc.n	800ffe6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800ffe2:	f018 fb9f 	bl	8028724 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800ffe6:	f018 fb9a 	bl	802871e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	011b      	lsls	r3, r3, #4
 800ffee:	4618      	mov	r0, r3
 800fff0:	f018 fb82 	bl	80286f8 <_Znwj>
 800fff4:	4603      	mov	r3, r0
 800fff6:	bf00      	nop
      }
 800fff8:	4618      	mov	r0, r3
 800fffa:	3710      	adds	r7, #16
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f7ff fb6d 	bl	800f6e8 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 801000e:	4603      	mov	r3, r0
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f7ff fb67 	bl	800f6e8 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 801001a:	4603      	mov	r3, r0
 801001c:	2200      	movs	r2, #0
 801001e:	601a      	str	r2, [r3, #0]
	return __p;
 8010020:	68fb      	ldr	r3, [r7, #12]
      }
 8010022:	4618      	mov	r0, r3
 8010024:	3710      	adds	r7, #16
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}

0801002a <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801002a:	b480      	push	{r7}
 801002c:	b083      	sub	sp, #12
 801002e:	af00      	add	r7, sp, #0
 8010030:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	4618      	mov	r0, r3
 8010036:	370c      	adds	r7, #12
 8010038:	46bd      	mov	sp, r7
 801003a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003e:	4770      	bx	lr

08010040 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8010040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010042:	b085      	sub	sp, #20
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	60b9      	str	r1, [r7, #8]
 801004a:	607a      	str	r2, [r7, #4]
 801004c:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	4619      	mov	r1, r3
 8010052:	2010      	movs	r0, #16
 8010054:	f7fa fcf0 	bl	800aa38 <_ZnwjPv>
 8010058:	4605      	mov	r5, r0
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f7ff ffe5 	bl	801002a <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 8010060:	4603      	mov	r3, r0
 8010062:	681c      	ldr	r4, [r3, #0]
 8010064:	6838      	ldr	r0, [r7, #0]
 8010066:	f7ff fe74 	bl	800fd52 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 801006a:	4632      	mov	r2, r6
 801006c:	4621      	mov	r1, r4
 801006e:	4628      	mov	r0, r5
 8010070:	f000 f978 	bl	8010364 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 8010074:	bf00      	nop
 8010076:	3714      	adds	r7, #20
 8010078:	46bd      	mov	sp, r7
 801007a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801007c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f000 f98f 	bl	80103a8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4618      	mov	r0, r3
 801008e:	f000 f997 	bl	80103c0 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4618      	mov	r0, r3
 8010096:	3708      	adds	r7, #8
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}

0801009c <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	4618      	mov	r0, r3
 80100a8:	f000 f998 	bl	80103dc <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>
 80100ac:	4603      	mov	r3, r0
 80100ae:	4618      	mov	r0, r3
 80100b0:	3708      	adds	r7, #8
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}

080100b6 <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80100b6:	b580      	push	{r7, lr}
 80100b8:	b082      	sub	sp, #8
 80100ba:	af00      	add	r7, sp, #0
 80100bc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f000 f997 	bl	80103f2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>
 80100c4:	4603      	mov	r3, r0
 80100c6:	4618      	mov	r0, r3
 80100c8:	3708      	adds	r7, #8
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80100ce:	b580      	push	{r7, lr}
 80100d0:	b082      	sub	sp, #8
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f000 f997 	bl	801040a <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>
 80100dc:	4603      	mov	r3, r0
 80100de:	4618      	mov	r0, r3
 80100e0:	3708      	adds	r7, #8
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}

080100e6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b082      	sub	sp, #8
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 80100ee:	f000 f8c1 	bl	8010274 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 80100f2:	4603      	mov	r3, r0
 80100f4:	461a      	mov	r2, r3
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	4293      	cmp	r3, r2
 80100fa:	bf94      	ite	ls
 80100fc:	2301      	movls	r3, #1
 80100fe:	2300      	movhi	r3, #0
 8010100:	b2db      	uxtb	r3, r3
}
 8010102:	4618      	mov	r0, r3
 8010104:	3708      	adds	r7, #8
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}

0801010a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 801010a:	b480      	push	{r7}
 801010c:	b083      	sub	sp, #12
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
  return true;
 8010112:	2301      	movs	r3, #1
}
 8010114:	4618      	mov	r0, r3
 8010116:	370c      	adds	r7, #12
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr

08010120 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8010120:	b5b0      	push	{r4, r5, r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 801012a:	f000 f8a3 	bl	8010274 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 801012e:	4603      	mov	r3, r0
 8010130:	17da      	asrs	r2, r3, #31
 8010132:	461c      	mov	r4, r3
 8010134:	4615      	mov	r5, r2
 8010136:	e9d7 2300 	ldrd	r2, r3, [r7]
 801013a:	4294      	cmp	r4, r2
 801013c:	eb75 0303 	sbcs.w	r3, r5, r3
 8010140:	bf2c      	ite	cs
 8010142:	2301      	movcs	r3, #1
 8010144:	2300      	movcc	r3, #0
 8010146:	b2db      	uxtb	r3, r3
}
 8010148:	4618      	mov	r0, r3
 801014a:	3708      	adds	r7, #8
 801014c:	46bd      	mov	sp, r7
 801014e:	bdb0      	pop	{r4, r5, r7, pc}

08010150 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8010150:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010154:	b082      	sub	sp, #8
 8010156:	af00      	add	r7, sp, #0
 8010158:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 801015c:	f000 f85c 	bl	8010218 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 8010160:	4603      	mov	r3, r0
 8010162:	17da      	asrs	r2, r3, #31
 8010164:	4698      	mov	r8, r3
 8010166:	4691      	mov	r9, r2
 8010168:	e9d7 2300 	ldrd	r2, r3, [r7]
 801016c:	4542      	cmp	r2, r8
 801016e:	eb73 0309 	sbcs.w	r3, r3, r9
 8010172:	db0d      	blt.n	8010190 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 8010174:	f000 f87e 	bl	8010274 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 8010178:	4603      	mov	r3, r0
 801017a:	17da      	asrs	r2, r3, #31
 801017c:	461c      	mov	r4, r3
 801017e:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 8010180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010184:	4294      	cmp	r4, r2
 8010186:	eb75 0303 	sbcs.w	r3, r5, r3
 801018a:	db01      	blt.n	8010190 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 801018c:	2301      	movs	r3, #1
 801018e:	e000      	b.n	8010192 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 8010190:	2300      	movs	r3, #0
}
 8010192:	4618      	mov	r0, r3
 8010194:	3708      	adds	r7, #8
 8010196:	46bd      	mov	sp, r7
 8010198:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801019c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>:
  T convertTo() const {
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
    switch (type_) {
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	3b01      	subs	r3, #1
 80101aa:	2b03      	cmp	r3, #3
 80101ac:	d82e      	bhi.n	801020c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x70>
 80101ae:	a201      	add	r2, pc, #4	@ (adr r2, 80101b4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x18>)
 80101b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101b4:	080101c5 	.word	0x080101c5
 80101b8:	080101d7 	.word	0x080101d7
 80101bc:	080101e9 	.word	0x080101e9
 80101c0:	080101fb 	.word	0x080101fb
        return convertNumber<T>(value_.asFloat);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80101ca:	eeb0 0a67 	vmov.f32	s0, s15
 80101ce:	f7ff fe71 	bl	800feb4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 80101d2:	4603      	mov	r3, r0
 80101d4:	e01b      	b.n	801020e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80101dc:	4610      	mov	r0, r2
 80101de:	4619      	mov	r1, r3
 80101e0:	f7ff fe41 	bl	800fe66 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 80101e4:	4603      	mov	r3, r0
 80101e6:	e012      	b.n	801020e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80101ee:	4610      	mov	r0, r2
 80101f0:	4619      	mov	r1, r3
 80101f2:	f7ff fe25 	bl	800fe40 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 80101f6:	4603      	mov	r3, r0
 80101f8:	e009      	b.n	801020e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	ed93 7b02 	vldr	d7, [r3, #8]
 8010200:	eeb0 0b47 	vmov.f64	d0, d7
 8010204:	f7ff fe6e 	bl	800fee4 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 8010208:	4603      	mov	r3, r0
 801020a:	e000      	b.n	801020e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return T();
 801020c:	2300      	movs	r3, #0
  }
 801020e:	4618      	mov	r0, r3
 8010210:	3708      	adds	r7, #8
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
 8010216:	bf00      	nop

08010218 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>:
  static constexpr T lowest() {
 8010218:	b480      	push	{r7}
 801021a:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 801021c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 8010220:	4618      	mov	r0, r3
 8010222:	46bd      	mov	sp, r7
 8010224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010228:	4770      	bx	lr

0801022a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 801022a:	b580      	push	{r7, lr}
 801022c:	b082      	sub	sp, #8
 801022e:	af00      	add	r7, sp, #0
 8010230:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8010234:	f7ff fff0 	bl	8010218 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 8010238:	ee07 0a90 	vmov	s15, r0
 801023c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010240:	ed97 7a01 	vldr	s14, [r7, #4]
 8010244:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801024c:	db0d      	blt.n	801026a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 801024e:	2000      	movs	r0, #0
 8010250:	f000 f8e8 	bl	8010424 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>
 8010254:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 8010258:	edd7 7a01 	vldr	s15, [r7, #4]
 801025c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010264:	d801      	bhi.n	801026a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 8010266:	2301      	movs	r3, #1
 8010268:	e000      	b.n	801026c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 801026a:	2300      	movs	r3, #0
}
 801026c:	4618      	mov	r0, r3
 801026e:	3708      	adds	r7, #8
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}

08010274 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>:
  static constexpr T highest() {
 8010274:	b580      	push	{r7, lr}
 8010276:	af00      	add	r7, sp, #0
    return T(~lowest());
 8010278:	f7ff ffce 	bl	8010218 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 801027c:	4603      	mov	r3, r0
 801027e:	43db      	mvns	r3, r3
  }
 8010280:	4618      	mov	r0, r3
 8010282:	bd80      	pop	{r7, pc}

08010284 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 801028e:	f7ff ffc3 	bl	8010218 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 8010292:	ee07 0a90 	vmov	s15, r0
 8010296:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801029a:	ed97 6b00 	vldr	d6, [r7]
 801029e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80102a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a6:	db0e      	blt.n	80102c6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 80102a8:	f7ff ffe4 	bl	8010274 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 80102ac:	ee07 0a90 	vmov	s15, r0
 80102b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 80102b4:	ed97 6b00 	vldr	d6, [r7]
 80102b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80102bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102c0:	d801      	bhi.n	80102c6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 80102c2:	2301      	movs	r3, #1
 80102c4:	e000      	b.n	80102c8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 80102c6:	2300      	movs	r3, #0
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3708      	adds	r7, #8
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>:
      _Tuple_impl()
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f000 f8b2 	bl	8010442 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	4618      	mov	r0, r3
 80102e2:	3708      	adds	r7, #8
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}

080102e8 <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>:
      constexpr _Head_base()
 80102e8:	b480      	push	{r7}
 80102ea:	b083      	sub	sp, #12
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2200      	movs	r2, #0
 80102f4:	601a      	str	r2, [r3, #0]
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	4618      	mov	r0, r3
 80102fa:	370c      	adds	r7, #12
 80102fc:	46bd      	mov	sp, r7
 80102fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010302:	4770      	bx	lr

08010304 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8010304:	b480      	push	{r7}
 8010306:	b083      	sub	sp, #12
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	4618      	mov	r0, r3
 8010310:	370c      	adds	r7, #12
 8010312:	46bd      	mov	sp, r7
 8010314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010318:	4770      	bx	lr

0801031a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801031a:	b580      	push	{r7, lr}
 801031c:	b082      	sub	sp, #8
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f000 f898 	bl	8010458 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>
 8010328:	4603      	mov	r3, r0
 801032a:	4618      	mov	r0, r3
 801032c:	3708      	adds	r7, #8
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}

08010332 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010332:	b580      	push	{r7, lr}
 8010334:	b082      	sub	sp, #8
 8010336:	af00      	add	r7, sp, #0
 8010338:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f000 f897 	bl	801046e <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>
 8010340:	4603      	mov	r3, r0
 8010342:	4618      	mov	r0, r3
 8010344:	3708      	adds	r7, #8
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801034a:	b480      	push	{r7}
 801034c:	b083      	sub	sp, #12
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8010352:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 8010356:	4618      	mov	r0, r3
 8010358:	370c      	adds	r7, #12
 801035a:	46bd      	mov	sp, r7
 801035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010360:	4770      	bx	lr
	...

08010364 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8010364:	b5b0      	push	{r4, r5, r7, lr}
 8010366:	b086      	sub	sp, #24
 8010368:	af00      	add	r7, sp, #0
 801036a:	60f8      	str	r0, [r7, #12]
 801036c:	60b9      	str	r1, [r7, #8]
 801036e:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	4618      	mov	r0, r3
 8010374:	f7fe f80c 	bl	800e390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8010378:	4a0a      	ldr	r2, [pc, #40]	@ (80103a4 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	601a      	str	r2, [r3, #0]
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	f103 040c 	add.w	r4, r3, #12
 8010384:	1d3b      	adds	r3, r7, #4
 8010386:	4618      	mov	r0, r3
 8010388:	f000 f87e 	bl	8010488 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 801038c:	f107 0314 	add.w	r3, r7, #20
 8010390:	462a      	mov	r2, r5
 8010392:	68b9      	ldr	r1, [r7, #8]
 8010394:	4620      	mov	r0, r4
 8010396:	f000 f882 	bl	801049e <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	4618      	mov	r0, r3
 801039e:	3718      	adds	r7, #24
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bdb0      	pop	{r4, r5, r7, pc}
 80103a4:	0802b4c8 	.word	0x0802b4c8

080103a8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>:
      _Tuple_impl()
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f000 f890 	bl	80104d6 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4618      	mov	r0, r3
 80103ba:	3708      	adds	r7, #8
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>:
      constexpr _Head_base()
 80103c0:	b480      	push	{r7}
 80103c2:	b083      	sub	sp, #12
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2200      	movs	r2, #0
 80103cc:	601a      	str	r2, [r3, #0]
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	4618      	mov	r0, r3
 80103d2:	370c      	adds	r7, #12
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr

080103dc <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80103dc:	b480      	push	{r7}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	4618      	mov	r0, r3
 80103e8:	370c      	adds	r7, #12
 80103ea:	46bd      	mov	sp, r7
 80103ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f0:	4770      	bx	lr

080103f2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80103f2:	b580      	push	{r7, lr}
 80103f4:	b082      	sub	sp, #8
 80103f6:	af00      	add	r7, sp, #0
 80103f8:	6078      	str	r0, [r7, #4]
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f000 f876 	bl	80104ec <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>
 8010400:	4603      	mov	r3, r0
 8010402:	4618      	mov	r0, r3
 8010404:	3708      	adds	r7, #8
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}

0801040a <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801040a:	b580      	push	{r7, lr}
 801040c:	b082      	sub	sp, #8
 801040e:	af00      	add	r7, sp, #0
 8010410:	6078      	str	r0, [r7, #4]
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	f000 f874 	bl	8010502 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>
 801041a:	4603      	mov	r3, r0
 801041c:	4618      	mov	r0, r3
 801041e:	3708      	adds	r7, #8
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>:
  static T highest_for(
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
    return forge(0x4EFFFFFF);  // 2.14748352E9
 801042c:	f06f 4031 	mvn.w	r0, #2969567232	@ 0xb1000000
 8010430:	f7f9 faa8 	bl	8009984 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 8010434:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010438:	eeb0 0a67 	vmov.f32	s0, s15
 801043c:	3708      	adds	r7, #8
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}

08010442 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>:
      constexpr _Head_base()
 8010442:	b480      	push	{r7}
 8010444:	b083      	sub	sp, #12
 8010446:	af00      	add	r7, sp, #0
 8010448:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	4618      	mov	r0, r3
 801044e:	370c      	adds	r7, #12
 8010450:	46bd      	mov	sp, r7
 8010452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010456:	4770      	bx	lr

08010458 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8010458:	b480      	push	{r7}
 801045a:	b083      	sub	sp, #12
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	4618      	mov	r0, r3
 8010464:	370c      	adds	r7, #12
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr

0801046e <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801046e:	b580      	push	{r7, lr}
 8010470:	b082      	sub	sp, #8
 8010472:	af00      	add	r7, sp, #0
 8010474:	6078      	str	r0, [r7, #4]
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	4618      	mov	r0, r3
 801047a:	f000 f84d 	bl	8010518 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>
 801047e:	4603      	mov	r3, r0
 8010480:	4618      	mov	r0, r3
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8010488:	b480      	push	{r7}
 801048a:	b083      	sub	sp, #12
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	4618      	mov	r0, r3
 8010494:	370c      	adds	r7, #12
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr

0801049e <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 801049e:	b580      	push	{r7, lr}
 80104a0:	b084      	sub	sp, #16
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	60f8      	str	r0, [r7, #12]
 80104a6:	60b9      	str	r1, [r7, #8]
 80104a8:	713a      	strb	r2, [r7, #4]
 80104aa:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 80104ac:	1d3b      	adds	r3, r7, #4
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7ff ffea 	bl	8010488 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 80104b4:	4603      	mov	r3, r0
 80104b6:	4619      	mov	r1, r3
 80104b8:	68f8      	ldr	r0, [r7, #12]
 80104ba:	f000 f838 	bl	801052e <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>
 80104be:	6839      	ldr	r1, [r7, #0]
 80104c0:	68f8      	ldr	r0, [r7, #12]
 80104c2:	f000 f841 	bl	8010548 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	68ba      	ldr	r2, [r7, #8]
 80104ca:	601a      	str	r2, [r3, #0]
	{ }
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	4618      	mov	r0, r3
 80104d0:	3710      	adds	r7, #16
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>:
      constexpr _Head_base()
 80104d6:	b480      	push	{r7}
 80104d8:	b083      	sub	sp, #12
 80104da:	af00      	add	r7, sp, #0
 80104dc:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	4618      	mov	r0, r3
 80104e2:	370c      	adds	r7, #12
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr

080104ec <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80104ec:	b480      	push	{r7}
 80104ee:	b083      	sub	sp, #12
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	4618      	mov	r0, r3
 80104f8:	370c      	adds	r7, #12
 80104fa:	46bd      	mov	sp, r7
 80104fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010500:	4770      	bx	lr

08010502 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8010502:	b480      	push	{r7}
 8010504:	b083      	sub	sp, #12
 8010506:	af00      	add	r7, sp, #0
 8010508:	6078      	str	r0, [r7, #4]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	4618      	mov	r0, r3
 801050e:	370c      	adds	r7, #12
 8010510:	46bd      	mov	sp, r7
 8010512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010516:	4770      	bx	lr

08010518 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>:
 8010518:	b480      	push	{r7}
 801051a:	b083      	sub	sp, #12
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	4618      	mov	r0, r3
 8010524:	370c      	adds	r7, #12
 8010526:	46bd      	mov	sp, r7
 8010528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052c:	4770      	bx	lr

0801052e <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 801052e:	b580      	push	{r7, lr}
 8010530:	b082      	sub	sp, #8
 8010532:	af00      	add	r7, sp, #0
 8010534:	6078      	str	r0, [r7, #4]
 8010536:	6039      	str	r1, [r7, #0]
 8010538:	6838      	ldr	r0, [r7, #0]
 801053a:	f7ff ffa5 	bl	8010488 <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	4618      	mov	r0, r3
 8010542:	3708      	adds	r7, #8
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 8010548:	b480      	push	{r7}
 801054a:	b083      	sub	sp, #12
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	4618      	mov	r0, r3
 8010556:	370c      	adds	r7, #12
 8010558:	46bd      	mov	sp, r7
 801055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055e:	4770      	bx	lr

08010560 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8010560:	b580      	push	{r7, lr}
 8010562:	b082      	sub	sp, #8
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	4a05      	ldr	r2, [pc, #20]	@ (8010580 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	601a      	str	r2, [r3, #0]
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	4618      	mov	r0, r3
 8010572:	f7fc f8cf 	bl	800c714 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	4618      	mov	r0, r3
 801057a:	3708      	adds	r7, #8
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}
 8010580:	0802b4c8 	.word	0x0802b4c8

08010584 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8010584:	b580      	push	{r7, lr}
 8010586:	b082      	sub	sp, #8
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f7ff ffe7 	bl	8010560 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8010592:	2110      	movs	r1, #16
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f018 f89e 	bl	80286d6 <_ZdlPvj>
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	4618      	mov	r0, r3
 801059e:	3708      	adds	r7, #8
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}

080105a4 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	330c      	adds	r3, #12
 80105b0:	4618      	mov	r0, r3
 80105b2:	f000 f83f 	bl	8010634 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 80105b6:	4602      	mov	r2, r0
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	68db      	ldr	r3, [r3, #12]
 80105bc:	4619      	mov	r1, r3
 80105be:	4610      	mov	r0, r2
 80105c0:	f7ff f8e0 	bl	800f784 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
 80105c4:	bf00      	nop
 80105c6:	3708      	adds	r7, #8
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b086      	sub	sp, #24
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	330c      	adds	r3, #12
 80105d8:	4618      	mov	r0, r3
 80105da:	f000 f837 	bl	801064c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80105de:	4602      	mov	r2, r0
 80105e0:	f107 0314 	add.w	r3, r7, #20
 80105e4:	4611      	mov	r1, r2
 80105e6:	4618      	mov	r0, r3
 80105e8:	f000 f83c 	bl	8010664 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80105ec:	f107 0114 	add.w	r1, r7, #20
 80105f0:	f107 030c 	add.w	r3, r7, #12
 80105f4:	687a      	ldr	r2, [r7, #4]
 80105f6:	4618      	mov	r0, r3
 80105f8:	f000 f841 	bl	801067e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f7ff ffaf 	bl	8010560 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8010602:	f107 030c 	add.w	r3, r7, #12
 8010606:	4618      	mov	r0, r3
 8010608:	f000 f84d 	bl	80106a6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 801060c:	f107 0314 	add.w	r3, r7, #20
 8010610:	4618      	mov	r0, r3
 8010612:	f7ff fb76 	bl	800fd02 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8010616:	3718      	adds	r7, #24
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 801061c:	b480      	push	{r7}
 801061e:	b083      	sub	sp, #12
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6039      	str	r1, [r7, #0]
        return nullptr;
 8010626:	2300      	movs	r3, #0
      }
 8010628:	4618      	mov	r0, r3
 801062a:	370c      	adds	r7, #12
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr

08010634 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8010634:	b580      	push	{r7, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f000 f847 	bl	80106d0 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>
 8010642:	4603      	mov	r3, r0
 8010644:	4618      	mov	r0, r3
 8010646:	3708      	adds	r7, #8
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 f846 	bl	80106e6 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 801065a:	4603      	mov	r3, r0
 801065c:	4618      	mov	r0, r3
 801065e:	3708      	adds	r7, #8
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}

08010664 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
 801066c:	6039      	str	r1, [r7, #0]
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f7ff fc86 	bl	800ff80 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	4618      	mov	r0, r3
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 801067e:	b580      	push	{r7, lr}
 8010680:	b084      	sub	sp, #16
 8010682:	af00      	add	r7, sp, #0
 8010684:	60f8      	str	r0, [r7, #12]
 8010686:	60b9      	str	r1, [r7, #8]
 8010688:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801068a:	68b8      	ldr	r0, [r7, #8]
 801068c:	f000 f836 	bl	80106fc <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8010690:	4602      	mov	r2, r0
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	601a      	str	r2, [r3, #0]
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	687a      	ldr	r2, [r7, #4]
 801069a:	605a      	str	r2, [r3, #4]
      { }
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	4618      	mov	r0, r3
 80106a0:	3710      	adds	r7, #16
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}

080106a6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 80106a6:	b580      	push	{r7, lr}
 80106a8:	b082      	sub	sp, #8
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	685b      	ldr	r3, [r3, #4]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d007      	beq.n	80106c6 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6818      	ldr	r0, [r3, #0]
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	2201      	movs	r2, #1
 80106c0:	4619      	mov	r1, r3
 80106c2:	f000 f826 	bl	8010712 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	4618      	mov	r0, r3
 80106ca:	3708      	adds	r7, #8
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 80106d0:	b480      	push	{r7}
 80106d2:	b083      	sub	sp, #12
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	4618      	mov	r0, r3
 80106dc:	370c      	adds	r7, #12
 80106de:	46bd      	mov	sp, r7
 80106e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e4:	4770      	bx	lr

080106e6 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>:
 80106e6:	b480      	push	{r7}
 80106e8:	b083      	sub	sp, #12
 80106ea:	af00      	add	r7, sp, #0
 80106ec:	6078      	str	r0, [r7, #4]
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	4618      	mov	r0, r3
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80106fc:	b480      	push	{r7}
 80106fe:	b083      	sub	sp, #12
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	4618      	mov	r0, r3
 8010708:	370c      	adds	r7, #12
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr

08010712 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8010712:	b580      	push	{r7, lr}
 8010714:	b084      	sub	sp, #16
 8010716:	af00      	add	r7, sp, #0
 8010718:	60f8      	str	r0, [r7, #12]
 801071a:	60b9      	str	r1, [r7, #8]
 801071c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	68b9      	ldr	r1, [r7, #8]
 8010722:	68f8      	ldr	r0, [r7, #12]
 8010724:	f000 f804 	bl	8010730 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8010728:	bf00      	nop
 801072a:	3710      	adds	r7, #16
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}

08010730 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8010730:	b580      	push	{r7, lr}
 8010732:	b084      	sub	sp, #16
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	011b      	lsls	r3, r3, #4
 8010740:	4619      	mov	r1, r3
 8010742:	68b8      	ldr	r0, [r7, #8]
 8010744:	f017 ffc7 	bl	80286d6 <_ZdlPvj>
      }
 8010748:	3710      	adds	r7, #16
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}

0801074e <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 801074e:	b480      	push	{r7}
 8010750:	b083      	sub	sp, #12
 8010752:	af00      	add	r7, sp, #0
 8010754:	6078      	str	r0, [r7, #4]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	4618      	mov	r0, r3
 801075a:	370c      	adds	r7, #12
 801075c:	46bd      	mov	sp, r7
 801075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010762:	4770      	bx	lr

08010764 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	4618      	mov	r0, r3
 8010770:	370c      	adds	r7, #12
 8010772:	46bd      	mov	sp, r7
 8010774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010778:	4770      	bx	lr

0801077a <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>:

	virtual void init(void);
	virtual void start(void);
	virtual void tasks(void);

    void setDataCallback(const std::function<void(bool)>& callback) {
 801077a:	b580      	push	{r7, lr}
 801077c:	b082      	sub	sp, #8
 801077e:	af00      	add	r7, sp, #0
 8010780:	6078      	str	r0, [r7, #4]
 8010782:	6039      	str	r1, [r7, #0]
        dataCallback = callback;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	3318      	adds	r3, #24
 8010788:	6839      	ldr	r1, [r7, #0]
 801078a:	4618      	mov	r0, r3
 801078c:	f000 f8e9 	bl	8010962 <_ZNSt8functionIFvbEEaSERKS1_>
    }
 8010790:	bf00      	nop
 8010792:	3708      	adds	r7, #8
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <_ZN12CommsHandler7setDataEb>:
    void setData(bool value) { data = value; }
 8010798:	b480      	push	{r7}
 801079a:	b083      	sub	sp, #12
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	460b      	mov	r3, r1
 80107a2:	70fb      	strb	r3, [r7, #3]
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	78fa      	ldrb	r2, [r7, #3]
 80107a8:	771a      	strb	r2, [r3, #28]
 80107aa:	bf00      	nop
 80107ac:	370c      	adds	r7, #12
 80107ae:	46bd      	mov	sp, r7
 80107b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b4:	4770      	bx	lr
	...

080107b8 <_ZN12CommsHandlerC1Ev>:
#include "commsHandler.h"
#include "../../remora.h"

CommsHandler::CommsHandler() : data(false), noDataCount(0), status(false) {
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b082      	sub	sp, #8
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	4618      	mov	r0, r3
 80107c4:	f001 fb86 	bl	8011ed4 <_ZN6ModuleC1Ev>
 80107c8:	4a0a      	ldr	r2, [pc, #40]	@ (80107f4 <_ZN12CommsHandlerC1Ev+0x3c>)
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	601a      	str	r2, [r3, #0]
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	3318      	adds	r3, #24
 80107d2:	4618      	mov	r0, r3
 80107d4:	f000 f8fa 	bl	80109cc <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2200      	movs	r2, #0
 80107dc:	771a      	strb	r2, [r3, #28]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2200      	movs	r2, #0
 80107e2:	775a      	strb	r2, [r3, #29]
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2200      	movs	r2, #0
 80107e8:	779a      	strb	r2, [r3, #30]

}
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	4618      	mov	r0, r3
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	0802b508 	.word	0x0802b508

080107f8 <_ZN12CommsHandlerD1Ev>:

CommsHandler::~CommsHandler() {}
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	4a08      	ldr	r2, [pc, #32]	@ (8010824 <_ZN12CommsHandlerD1Ev+0x2c>)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	601a      	str	r2, [r3, #0]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	3318      	adds	r3, #24
 801080a:	4618      	mov	r0, r3
 801080c:	f7fb fd4a 	bl	800c2a4 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	4618      	mov	r0, r3
 8010814:	f001 fb7a 	bl	8011f0c <_ZN6ModuleD1Ev>
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	4618      	mov	r0, r3
 801081c:	3708      	adds	r7, #8
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}
 8010822:	bf00      	nop
 8010824:	0802b508 	.word	0x0802b508

08010828 <_ZN12CommsHandlerD0Ev>:
 8010828:	b580      	push	{r7, lr}
 801082a:	b082      	sub	sp, #8
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f7ff ffe1 	bl	80107f8 <_ZN12CommsHandlerD1Ev>
 8010836:	2120      	movs	r1, #32
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f017 ff4c 	bl	80286d6 <_ZdlPvj>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	4618      	mov	r0, r3
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}

08010848 <_ZZN12CommsHandler4initEvENKUlbE_clEb>:

void CommsHandler::init() {
    interface->setDataCallback([this](bool dataReceived) {
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	460b      	mov	r3, r1
 8010852:	70fb      	strb	r3, [r7, #3]
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
        this->setData(dataReceived);
 8010858:	78fa      	ldrb	r2, [r7, #3]
 801085a:	4611      	mov	r1, r2
 801085c:	4618      	mov	r0, r3
 801085e:	f7ff ff9b 	bl	8010798 <_ZN12CommsHandler7setDataEb>
    });
 8010862:	bf00      	nop
 8010864:	3708      	adds	r7, #8
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}

0801086a <_ZN12CommsHandler4initEv>:
void CommsHandler::init() {
 801086a:	b590      	push	{r4, r7, lr}
 801086c:	b089      	sub	sp, #36	@ 0x24
 801086e:	af00      	add	r7, sp, #0
 8010870:	6078      	str	r0, [r7, #4]
    interface->setDataCallback([this](bool dataReceived) {
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	3318      	adds	r3, #24
 8010876:	4618      	mov	r0, r3
 8010878:	f000 f8b8 	bl	80109ec <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 801087c:	4604      	mov	r4, r0
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	61fb      	str	r3, [r7, #28]
 8010882:	f107 021c 	add.w	r2, r7, #28
 8010886:	f107 030c 	add.w	r3, r7, #12
 801088a:	4611      	mov	r1, r2
 801088c:	4618      	mov	r0, r3
 801088e:	f000 f8b9 	bl	8010a04 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>
 8010892:	f107 030c 	add.w	r3, r7, #12
 8010896:	4619      	mov	r1, r3
 8010898:	4620      	mov	r0, r4
 801089a:	f7ff ff6e 	bl	801077a <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>
 801089e:	f107 030c 	add.w	r3, r7, #12
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7f0 fa54 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>

    interface->init();
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	3318      	adds	r3, #24
 80108ac:	4618      	mov	r0, r3
 80108ae:	f000 f89d 	bl	80109ec <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 80108b2:	4603      	mov	r3, r0
 80108b4:	681a      	ldr	r2, [r3, #0]
 80108b6:	321c      	adds	r2, #28
 80108b8:	6812      	ldr	r2, [r2, #0]
 80108ba:	4618      	mov	r0, r3
 80108bc:	4790      	blx	r2
}
 80108be:	bf00      	nop
 80108c0:	3724      	adds	r7, #36	@ 0x24
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd90      	pop	{r4, r7, pc}

080108c6 <_ZN12CommsHandler5startEv>:

void CommsHandler::start() {
 80108c6:	b580      	push	{r7, lr}
 80108c8:	b082      	sub	sp, #8
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
	interface->start();
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	3318      	adds	r3, #24
 80108d2:	4618      	mov	r0, r3
 80108d4:	f000 f88a 	bl	80109ec <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 80108d8:	4603      	mov	r3, r0
 80108da:	681a      	ldr	r2, [r3, #0]
 80108dc:	3220      	adds	r2, #32
 80108de:	6812      	ldr	r2, [r2, #0]
 80108e0:	4618      	mov	r0, r3
 80108e2:	4790      	blx	r2
}
 80108e4:	bf00      	nop
 80108e6:	3708      	adds	r7, #8
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}

080108ec <_ZN12CommsHandler5tasksEv>:

// tasks is run in the main loop to do polling tasks, eg Ethernet, processing data etc
void CommsHandler::tasks() {
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
	interface->tasks();
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	3318      	adds	r3, #24
 80108f8:	4618      	mov	r0, r3
 80108fa:	f000 f877 	bl	80109ec <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 80108fe:	4603      	mov	r3, r0
 8010900:	681a      	ldr	r2, [r3, #0]
 8010902:	3224      	adds	r2, #36	@ 0x24
 8010904:	6812      	ldr	r2, [r2, #0]
 8010906:	4618      	mov	r0, r3
 8010908:	4790      	blx	r2
}
 801090a:	bf00      	nop
 801090c:	3708      	adds	r7, #8
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}

08010912 <_ZN12CommsHandler6updateEv>:

// update it run in the servo thread to monitor communications
void CommsHandler::update() {
 8010912:	b480      	push	{r7}
 8010914:	b083      	sub	sp, #12
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
	if (data)
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	7f1b      	ldrb	r3, [r3, #28]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d006      	beq.n	8010930 <_ZN12CommsHandler6updateEv+0x1e>
	{
		noDataCount = 0;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2200      	movs	r2, #0
 8010926:	775a      	strb	r2, [r3, #29]
		status = true;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2201      	movs	r2, #1
 801092c:	779a      	strb	r2, [r3, #30]
 801092e:	e005      	b.n	801093c <_ZN12CommsHandler6updateEv+0x2a>
	}
	else
	{
		noDataCount++;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	7f5b      	ldrb	r3, [r3, #29]
 8010934:	3301      	adds	r3, #1
 8010936:	b2da      	uxtb	r2, r3
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	775a      	strb	r2, [r3, #29]
	}

	if (noDataCount > Config::dataErrMax)
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	7f5b      	ldrb	r3, [r3, #29]
 8010940:	2b64      	cmp	r3, #100	@ 0x64
 8010942:	d905      	bls.n	8010950 <_ZN12CommsHandler6updateEv+0x3e>
	{
		noDataCount = 0;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2200      	movs	r2, #0
 8010948:	775a      	strb	r2, [r3, #29]
		status = false;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2200      	movs	r2, #0
 801094e:	779a      	strb	r2, [r3, #30]
	}

	data = false;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2200      	movs	r2, #0
 8010954:	771a      	strb	r2, [r3, #28]
}
 8010956:	bf00      	nop
 8010958:	370c      	adds	r7, #12
 801095a:	46bd      	mov	sp, r7
 801095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010960:	4770      	bx	lr

08010962 <_ZNSt8functionIFvbEEaSERKS1_>:
      operator=(const function& __x)
 8010962:	b580      	push	{r7, lr}
 8010964:	b086      	sub	sp, #24
 8010966:	af00      	add	r7, sp, #0
 8010968:	6078      	str	r0, [r7, #4]
 801096a:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 801096c:	f107 0308 	add.w	r3, r7, #8
 8010970:	6839      	ldr	r1, [r7, #0]
 8010972:	4618      	mov	r0, r3
 8010974:	f000 f876 	bl	8010a64 <_ZNSt8functionIFvbEEC1ERKS1_>
 8010978:	f107 0308 	add.w	r3, r7, #8
 801097c:	6879      	ldr	r1, [r7, #4]
 801097e:	4618      	mov	r0, r3
 8010980:	f000 f89b 	bl	8010aba <_ZNSt8functionIFvbEE4swapERS1_>
 8010984:	f107 0308 	add.w	r3, r7, #8
 8010988:	4618      	mov	r0, r3
 801098a:	f7f0 f9e1 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
	return *this;
 801098e:	687b      	ldr	r3, [r7, #4]
      }
 8010990:	4618      	mov	r0, r3
 8010992:	3718      	adds	r7, #24
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}

08010998 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 8010998:	b580      	push	{r7, lr}
 801099a:	b082      	sub	sp, #8
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	4618      	mov	r0, r3
 80109a4:	f000 f8aa 	bl	8010afc <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	4618      	mov	r0, r3
 80109ac:	3708      	adds	r7, #8
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}

080109b2 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80109b2:	b580      	push	{r7, lr}
 80109b4:	b082      	sub	sp, #8
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	6078      	str	r0, [r7, #4]
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	4618      	mov	r0, r3
 80109be:	f7ff ffeb 	bl	8010998 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	4618      	mov	r0, r3
 80109c6:	3708      	adds	r7, #8
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}

080109cc <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
	: _M_t()
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2200      	movs	r2, #0
 80109d8:	601a      	str	r2, [r3, #0]
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	4618      	mov	r0, r3
 80109de:	f7ff ffe8 	bl	80109b2 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	4618      	mov	r0, r3
 80109e6:	3708      	adds	r7, #8
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
	return get();
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f000 f88e 	bl	8010b16 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>
 80109fa:	4603      	mov	r3, r0
      }
 80109fc:	4618      	mov	r0, r3
 80109fe:	3708      	adds	r7, #8
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>:
	function(_Functor&& __f)
 8010a04:	b590      	push	{r4, r7, lr}
 8010a06:	b083      	sub	sp, #12
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	6039      	str	r1, [r7, #0]
	: _Function_base()
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	461a      	mov	r2, r3
 8010a12:	2300      	movs	r3, #0
 8010a14:	6013      	str	r3, [r2, #0]
 8010a16:	6053      	str	r3, [r2, #4]
 8010a18:	6093      	str	r3, [r2, #8]
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f7f1 fc0b 	bl	8002238 <_ZNSt14_Function_baseC1Ev>
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2200      	movs	r2, #0
 8010a26:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 8010a28:	6838      	ldr	r0, [r7, #0]
 8010a2a:	f000 f881 	bl	8010b30 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d00e      	beq.n	8010a52 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8010a34:	687c      	ldr	r4, [r7, #4]
 8010a36:	6838      	ldr	r0, [r7, #0]
 8010a38:	f000 f885 	bl	8010b46 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	4619      	mov	r1, r3
 8010a40:	4620      	mov	r0, r4
 8010a42:	f000 f88b 	bl	8010b5c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	4a04      	ldr	r2, [pc, #16]	@ (8010a5c <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x58>)
 8010a4a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	4a04      	ldr	r2, [pc, #16]	@ (8010a60 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x5c>)
 8010a50:	609a      	str	r2, [r3, #8]
	}
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	4618      	mov	r0, r3
 8010a56:	370c      	adds	r7, #12
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd90      	pop	{r4, r7, pc}
 8010a5c:	08010b81 	.word	0x08010b81
 8010a60:	08010bab 	.word	0x08010bab

08010a64 <_ZNSt8functionIFvbEEC1ERKS1_>:
      function(const function& __x)
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b082      	sub	sp, #8
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	461a      	mov	r2, r3
 8010a72:	2300      	movs	r3, #0
 8010a74:	6013      	str	r3, [r2, #0]
 8010a76:	6053      	str	r3, [r2, #4]
 8010a78:	6093      	str	r3, [r2, #8]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f7f1 fbdb 	bl	8002238 <_ZNSt14_Function_baseC1Ev>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2200      	movs	r2, #0
 8010a86:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 8010a88:	6838      	ldr	r0, [r7, #0]
 8010a8a:	f000 f8ad 	bl	8010be8 <_ZNKSt8functionIFvbEEcvbEv>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d00d      	beq.n	8010ab0 <_ZNSt8functionIFvbEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	6839      	ldr	r1, [r7, #0]
 8010a9c:	2202      	movs	r2, #2
 8010a9e:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	68da      	ldr	r2, [r3, #12]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	689a      	ldr	r2, [r3, #8]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	609a      	str	r2, [r3, #8]
      }
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3708      	adds	r7, #8
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}

08010aba <_ZNSt8functionIFvbEE4swapERS1_>:
      void swap(function& __x) noexcept
 8010aba:	b580      	push	{r7, lr}
 8010abc:	b082      	sub	sp, #8
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
 8010ac2:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	683a      	ldr	r2, [r7, #0]
 8010ac8:	4611      	mov	r1, r2
 8010aca:	4618      	mov	r0, r3
 8010acc:	f000 f89c 	bl	8010c08 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f103 0208 	add.w	r2, r3, #8
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	3308      	adds	r3, #8
 8010ada:	4619      	mov	r1, r3
 8010adc:	4610      	mov	r0, r2
 8010ade:	f000 f8ba 	bl	8010c56 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f103 020c 	add.w	r2, r3, #12
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	330c      	adds	r3, #12
 8010aec:	4619      	mov	r1, r3
 8010aee:	4610      	mov	r0, r2
 8010af0:	f000 f8d0 	bl	8010c94 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 8010af4:	bf00      	nop
 8010af6:	3708      	adds	r7, #8
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}

08010afc <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b082      	sub	sp, #8
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	4618      	mov	r0, r3
 8010b08:	f000 f8e3 	bl	8010cd2 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3708      	adds	r7, #8
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}

08010b16 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8010b16:	b580      	push	{r7, lr}
 8010b18:	b082      	sub	sp, #8
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	4618      	mov	r0, r3
 8010b22:	f000 f8e6 	bl	8010cf2 <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 8010b26:	4603      	mov	r3, r0
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3708      	adds	r7, #8
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8010b30:	b480      	push	{r7}
 8010b32:	b083      	sub	sp, #12
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
	  { return true; }
 8010b38:	2301      	movs	r3, #1
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	370c      	adds	r7, #12
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b44:	4770      	bx	lr

08010b46 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010b46:	b480      	push	{r7}
 8010b48:	b083      	sub	sp, #12
 8010b4a:	af00      	add	r7, sp, #0
 8010b4c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	4618      	mov	r0, r3
 8010b52:	370c      	adds	r7, #12
 8010b54:	46bd      	mov	sp, r7
 8010b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5a:	4770      	bx	lr

08010b5c <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8010b5c:	b590      	push	{r4, r7, lr}
 8010b5e:	b083      	sub	sp, #12
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8010b66:	6838      	ldr	r0, [r7, #0]
 8010b68:	f7ff ffed 	bl	8010b46 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	4622      	mov	r2, r4
 8010b70:	4619      	mov	r1, r3
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f000 f8cb 	bl	8010d0e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8010b78:	bf00      	nop
 8010b7a:	370c      	adds	r7, #12
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd90      	pop	{r4, r7, pc}

08010b80 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8010b80:	b590      	push	{r4, r7, lr}
 8010b82:	b083      	sub	sp, #12
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
 8010b88:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f000 f8d8 	bl	8010d40 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8010b90:	4604      	mov	r4, r0
 8010b92:	6838      	ldr	r0, [r7, #0]
 8010b94:	f7f1 fa6c 	bl	8002070 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	4620      	mov	r0, r4
 8010b9e:	f000 f8df 	bl	8010d60 <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8010ba2:	bf00      	nop
      }
 8010ba4:	370c      	adds	r7, #12
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd90      	pop	{r4, r7, pc}

08010baa <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8010baa:	b590      	push	{r4, r7, lr}
 8010bac:	b085      	sub	sp, #20
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	60f8      	str	r0, [r7, #12]
 8010bb2:	60b9      	str	r1, [r7, #8]
 8010bb4:	4613      	mov	r3, r2
 8010bb6:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8010bb8:	79fb      	ldrb	r3, [r7, #7]
 8010bba:	2b01      	cmp	r3, #1
 8010bbc:	d109      	bne.n	8010bd2 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8010bbe:	68b8      	ldr	r0, [r7, #8]
 8010bc0:	f000 f8be 	bl	8010d40 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8010bc4:	4604      	mov	r4, r0
 8010bc6:	68f8      	ldr	r0, [r7, #12]
 8010bc8:	f000 f8e0 	bl	8010d8c <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	601c      	str	r4, [r3, #0]
	    break;
 8010bd0:	e005      	b.n	8010bde <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8010bd2:	79fb      	ldrb	r3, [r7, #7]
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	68b9      	ldr	r1, [r7, #8]
 8010bd8:	68f8      	ldr	r0, [r7, #12]
 8010bda:	f000 f8e3 	bl	8010da4 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8010bde:	2300      	movs	r3, #0
      }
 8010be0:	4618      	mov	r0, r3
 8010be2:	3714      	adds	r7, #20
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd90      	pop	{r4, r7, pc}

08010be8 <_ZNKSt8functionIFvbEEcvbEv>:
      explicit operator bool() const noexcept
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7f0 f86b 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	f083 0301 	eor.w	r3, r3, #1
 8010bfe:	b2db      	uxtb	r3, r3
 8010c00:	4618      	mov	r0, r3
 8010c02:	3708      	adds	r7, #8
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b084      	sub	sp, #16
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f000 f900 	bl	8010e18 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8010c18:	4602      	mov	r2, r0
 8010c1a:	f107 0308 	add.w	r3, r7, #8
 8010c1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c22:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8010c26:	6838      	ldr	r0, [r7, #0]
 8010c28:	f000 f8f6 	bl	8010e18 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8010c2c:	4602      	mov	r2, r0
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c34:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8010c38:	f107 0308 	add.w	r3, r7, #8
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f000 f8eb 	bl	8010e18 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8010c42:	4602      	mov	r2, r0
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c4a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010c4e:	bf00      	nop
 8010c50:	3710      	adds	r7, #16
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}

08010c56 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8010c56:	b580      	push	{r7, lr}
 8010c58:	b084      	sub	sp, #16
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
 8010c5e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f000 f8e4 	bl	8010e2e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8010c66:	4603      	mov	r3, r0
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8010c6c:	6838      	ldr	r0, [r7, #0]
 8010c6e:	f000 f8de 	bl	8010e2e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8010c72:	4603      	mov	r3, r0
 8010c74:	681a      	ldr	r2, [r3, #0]
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8010c7a:	f107 030c 	add.w	r3, r7, #12
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f000 f8d5 	bl	8010e2e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8010c84:	4603      	mov	r3, r0
 8010c86:	681a      	ldr	r2, [r3, #0]
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	601a      	str	r2, [r3, #0]
    }
 8010c8c:	bf00      	nop
 8010c8e:	3710      	adds	r7, #16
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b084      	sub	sp, #16
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f000 f8d0 	bl	8010e44 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8010caa:	6838      	ldr	r0, [r7, #0]
 8010cac:	f000 f8ca 	bl	8010e44 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	681a      	ldr	r2, [r3, #0]
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8010cb8:	f107 030c 	add.w	r3, r7, #12
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f000 f8c1 	bl	8010e44 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	681a      	ldr	r2, [r3, #0]
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	601a      	str	r2, [r3, #0]
    }
 8010cca:	bf00      	nop
 8010ccc:	3710      	adds	r7, #16
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}

08010cd2 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8010cd2:	b580      	push	{r7, lr}
 8010cd4:	b082      	sub	sp, #8
 8010cd6:	af00      	add	r7, sp, #0
 8010cd8:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f000 f8bd 	bl	8010e5a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f000 f8c5 	bl	8010e72 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	4618      	mov	r0, r3
 8010cec:	3708      	adds	r7, #8
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8010cf2:	b580      	push	{r7, lr}
 8010cf4:	b082      	sub	sp, #8
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6078      	str	r0, [r7, #4]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f000 f8c6 	bl	8010e8e <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8010d02:	4603      	mov	r3, r0
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	4618      	mov	r0, r3
 8010d08:	3708      	adds	r7, #8
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}

08010d0e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8010d0e:	b590      	push	{r4, r7, lr}
 8010d10:	b085      	sub	sp, #20
 8010d12:	af00      	add	r7, sp, #0
 8010d14:	60f8      	str	r0, [r7, #12]
 8010d16:	60b9      	str	r1, [r7, #8]
 8010d18:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8010d1a:	68f8      	ldr	r0, [r7, #12]
 8010d1c:	f7ff fd17 	bl	801074e <_ZNSt9_Any_data9_M_accessEv>
 8010d20:	4603      	mov	r3, r0
 8010d22:	4619      	mov	r1, r3
 8010d24:	2004      	movs	r0, #4
 8010d26:	f7f9 fe87 	bl	800aa38 <_ZnwjPv>
 8010d2a:	4604      	mov	r4, r0
 8010d2c:	68b8      	ldr	r0, [r7, #8]
 8010d2e:	f7ff ff0a 	bl	8010b46 <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8010d32:	4603      	mov	r3, r0
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	6023      	str	r3, [r4, #0]
	  }
 8010d38:	bf00      	nop
 8010d3a:	3714      	adds	r7, #20
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd90      	pop	{r4, r7, pc}

08010d40 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b084      	sub	sp, #16
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f000 f8ad 	bl	8010ea8 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>
 8010d4e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8010d50:	68f8      	ldr	r0, [r7, #12]
 8010d52:	f000 f8b5 	bl	8010ec0 <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>
 8010d56:	4603      	mov	r3, r0
	}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3710      	adds	r7, #16
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}

08010d60 <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8010d60:	b5b0      	push	{r4, r5, r7, lr}
 8010d62:	b082      	sub	sp, #8
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f000 f8b3 	bl	8010ed6 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8010d70:	4604      	mov	r4, r0
 8010d72:	6838      	ldr	r0, [r7, #0]
 8010d74:	f7f1 f97c 	bl	8002070 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	4621      	mov	r1, r4
 8010d7e:	4628      	mov	r0, r5
 8010d80:	f000 f8b4 	bl	8010eec <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8010d84:	bf00      	nop
 8010d86:	3708      	adds	r7, #8
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bdb0      	pop	{r4, r5, r7, pc}

08010d8c <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f7ff fcda 	bl	801074e <_ZNSt9_Any_data9_M_accessEv>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3708      	adds	r7, #8
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}

08010da4 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8010da4:	b590      	push	{r4, r7, lr}
 8010da6:	b085      	sub	sp, #20
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	60f8      	str	r0, [r7, #12]
 8010dac:	60b9      	str	r1, [r7, #8]
 8010dae:	4613      	mov	r3, r2
 8010db0:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8010db2:	79fb      	ldrb	r3, [r7, #7]
 8010db4:	2b03      	cmp	r3, #3
 8010db6:	d82a      	bhi.n	8010e0e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 8010db8:	a201      	add	r2, pc, #4	@ (adr r2, 8010dc0 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 8010dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dbe:	bf00      	nop
 8010dc0:	08010dd1 	.word	0x08010dd1
 8010dc4:	08010ddf 	.word	0x08010ddf
 8010dc8:	08010df3 	.word	0x08010df3
 8010dcc:	08010e05 	.word	0x08010e05
	      __dest._M_access<const type_info*>() = nullptr;
 8010dd0:	68f8      	ldr	r0, [r7, #12]
 8010dd2:	f000 f8a2 	bl	8010f1a <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	2200      	movs	r2, #0
 8010dda:	601a      	str	r2, [r3, #0]
	      break;
 8010ddc:	e017      	b.n	8010e0e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8010dde:	68b8      	ldr	r0, [r7, #8]
 8010de0:	f7ff ffae 	bl	8010d40 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8010de4:	4604      	mov	r4, r0
 8010de6:	68f8      	ldr	r0, [r7, #12]
 8010de8:	f7ff ffd0 	bl	8010d8c <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 8010dec:	4603      	mov	r3, r0
 8010dee:	601c      	str	r4, [r3, #0]
	      break;
 8010df0:	e00d      	b.n	8010e0e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8010df2:	68b8      	ldr	r0, [r7, #8]
 8010df4:	f7ff ffa4 	bl	8010d40 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8010df8:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	68f8      	ldr	r0, [r7, #12]
 8010dfe:	f000 f898 	bl	8010f32 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 8010e02:	e004      	b.n	8010e0e <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8010e04:	4621      	mov	r1, r4
 8010e06:	68f8      	ldr	r0, [r7, #12]
 8010e08:	f000 f8a5 	bl	8010f56 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8010e0c:	bf00      	nop
	  return false;
 8010e0e:	2300      	movs	r3, #0
	}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3714      	adds	r7, #20
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd90      	pop	{r4, r7, pc}

08010e18 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8010e18:	b480      	push	{r7}
 8010e1a:	b083      	sub	sp, #12
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	4618      	mov	r0, r3
 8010e24:	370c      	adds	r7, #12
 8010e26:	46bd      	mov	sp, r7
 8010e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2c:	4770      	bx	lr

08010e2e <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8010e2e:	b480      	push	{r7}
 8010e30:	b083      	sub	sp, #12
 8010e32:	af00      	add	r7, sp, #0
 8010e34:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	4618      	mov	r0, r3
 8010e3a:	370c      	adds	r7, #12
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e42:	4770      	bx	lr

08010e44 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8010e44:	b480      	push	{r7}
 8010e46:	b083      	sub	sp, #12
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	4618      	mov	r0, r3
 8010e50:	370c      	adds	r7, #12
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr

08010e5a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>:
      _Tuple_impl()
 8010e5a:	b580      	push	{r7, lr}
 8010e5c:	b082      	sub	sp, #8
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f000 f883 	bl	8010f6e <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3708      	adds	r7, #8
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}

08010e72 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>:
      constexpr _Head_base()
 8010e72:	b480      	push	{r7}
 8010e74:	b083      	sub	sp, #12
 8010e76:	af00      	add	r7, sp, #0
 8010e78:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	601a      	str	r2, [r3, #0]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	4618      	mov	r0, r3
 8010e84:	370c      	adds	r7, #12
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr

08010e8e <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8010e8e:	b580      	push	{r7, lr}
 8010e90:	b082      	sub	sp, #8
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f000 f873 	bl	8010f84 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3708      	adds	r7, #8
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}

08010ea8 <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>:
      _M_access() const noexcept
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b082      	sub	sp, #8
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f7ff fc57 	bl	8010764 <_ZNKSt9_Any_data9_M_accessEv>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3708      	adds	r7, #8
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}

08010ec0 <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8010ec0:	b480      	push	{r7}
 8010ec2:	b083      	sub	sp, #12
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	370c      	adds	r7, #12
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed4:	4770      	bx	lr

08010ed6 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010ed6:	b480      	push	{r7}
 8010ed8:	b083      	sub	sp, #12
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	370c      	adds	r7, #12
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr

08010eec <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8010eec:	b590      	push	{r4, r7, lr}
 8010eee:	b085      	sub	sp, #20
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	7338      	strb	r0, [r7, #12]
 8010ef4:	60b9      	str	r1, [r7, #8]
 8010ef6:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8010ef8:	68b8      	ldr	r0, [r7, #8]
 8010efa:	f7ff ffec 	bl	8010ed6 <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8010efe:	4604      	mov	r4, r0
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f7f1 f8b5 	bl	8002070 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8010f06:	4603      	mov	r3, r0
 8010f08:	781b      	ldrb	r3, [r3, #0]
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	f7ff fc9b 	bl	8010848 <_ZZN12CommsHandler4initEvENKUlbE_clEb>
 8010f12:	bf00      	nop
 8010f14:	3714      	adds	r7, #20
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd90      	pop	{r4, r7, pc}

08010f1a <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8010f1a:	b580      	push	{r7, lr}
 8010f1c:	b082      	sub	sp, #8
 8010f1e:	af00      	add	r7, sp, #0
 8010f20:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f7ff fc13 	bl	801074e <_ZNSt9_Any_data9_M_accessEv>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3708      	adds	r7, #8
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}

08010f32 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8010f32:	b590      	push	{r4, r7, lr}
 8010f34:	b083      	sub	sp, #12
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	6078      	str	r0, [r7, #4]
 8010f3a:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8010f3c:	6838      	ldr	r0, [r7, #0]
 8010f3e:	f000 f82d 	bl	8010f9c <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8010f42:	4603      	mov	r3, r0
 8010f44:	4622      	mov	r2, r4
 8010f46:	4619      	mov	r1, r3
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f000 f832 	bl	8010fb2 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8010f4e:	bf00      	nop
 8010f50:	370c      	adds	r7, #12
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd90      	pop	{r4, r7, pc}

08010f56 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8010f56:	b580      	push	{r7, lr}
 8010f58:	b082      	sub	sp, #8
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
 8010f5e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f000 f83f 	bl	8010fe4 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>
	}
 8010f66:	bf00      	nop
 8010f68:	3708      	adds	r7, #8
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}

08010f6e <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>:
      constexpr _Head_base()
 8010f6e:	b480      	push	{r7}
 8010f70:	b083      	sub	sp, #12
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	4618      	mov	r0, r3
 8010f7a:	370c      	adds	r7, #12
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f82:	4770      	bx	lr

08010f84 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b082      	sub	sp, #8
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f000 f835 	bl	8010ffc <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>
 8010f92:	4603      	mov	r3, r0
 8010f94:	4618      	mov	r0, r3
 8010f96:	3708      	adds	r7, #8
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010f9c:	b480      	push	{r7}
 8010f9e:	b083      	sub	sp, #12
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	370c      	adds	r7, #12
 8010faa:	46bd      	mov	sp, r7
 8010fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb0:	4770      	bx	lr

08010fb2 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8010fb2:	b590      	push	{r4, r7, lr}
 8010fb4:	b085      	sub	sp, #20
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	60f8      	str	r0, [r7, #12]
 8010fba:	60b9      	str	r1, [r7, #8]
 8010fbc:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8010fbe:	68f8      	ldr	r0, [r7, #12]
 8010fc0:	f7ff fbc5 	bl	801074e <_ZNSt9_Any_data9_M_accessEv>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	2004      	movs	r0, #4
 8010fca:	f7f9 fd35 	bl	800aa38 <_ZnwjPv>
 8010fce:	4604      	mov	r4, r0
 8010fd0:	68b8      	ldr	r0, [r7, #8]
 8010fd2:	f7ff ffe3 	bl	8010f9c <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	6023      	str	r3, [r4, #0]
	  }
 8010fdc:	bf00      	nop
 8010fde:	3714      	adds	r7, #20
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd90      	pop	{r4, r7, pc}

08010fe4 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f7ff fbae 	bl	801074e <_ZNSt9_Any_data9_M_accessEv>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3708      	adds	r7, #8
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}

08010ffc <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b082      	sub	sp, #8
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	4618      	mov	r0, r3
 8011008:	f000 f805 	bl	8011016 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>
 801100c:	4603      	mov	r3, r0
 801100e:	4618      	mov	r0, r3
 8011010:	3708      	adds	r7, #8
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}

08011016 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8011016:	b480      	push	{r7}
 8011018:	b083      	sub	sp, #12
 801101a:	af00      	add	r7, sp, #0
 801101c:	6078      	str	r0, [r7, #4]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	4618      	mov	r0, r3
 8011022:	370c      	adds	r7, #12
 8011024:	46bd      	mov	sp, r7
 8011026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102a:	4770      	bx	lr

0801102c <_ZN6Remora9getTxDataEv>:
	Remora();
	void run();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
 801102c:	b480      	push	{r7}
 801102e:	b083      	sub	sp, #12
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	4b03      	ldr	r3, [pc, #12]	@ (8011044 <_ZN6Remora9getTxDataEv+0x18>)
 8011036:	4618      	mov	r0, r3
 8011038:	370c      	adds	r7, #12
 801103a:	46bd      	mov	sp, r7
 801103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011040:	4770      	bx	lr
 8011042:	bf00      	nop
 8011044:	30000080 	.word	0x30000080

08011048 <_ZN6Remora9getRxDataEv>:
    volatile rxData_t* getRxData() { return &rxData; }
 8011048:	b480      	push	{r7}
 801104a:	b083      	sub	sp, #12
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
 8011050:	4b03      	ldr	r3, [pc, #12]	@ (8011060 <_ZN6Remora9getRxDataEv+0x18>)
 8011052:	4618      	mov	r0, r3
 8011054:	370c      	adds	r7, #12
 8011056:	46bd      	mov	sp, r7
 8011058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105c:	4770      	bx	lr
 801105e:	bf00      	nop
 8011060:	300000c0 	.word	0x300000c0

08011064 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "digitalPin.h"

std::shared_ptr<Module> DigitalPin::create(const JsonObject& config, Remora* instance) {
 8011064:	b580      	push	{r7, lr}
 8011066:	b0b0      	sub	sp, #192	@ 0xc0
 8011068:	af04      	add	r7, sp, #16
 801106a:	60f8      	str	r0, [r7, #12]
 801106c:	60b9      	str	r1, [r7, #8]
 801106e:	607a      	str	r2, [r7, #4]
	const char* pin = config["Pin"];
 8011070:	f107 0320 	add.w	r3, r7, #32
 8011074:	4a65      	ldr	r2, [pc, #404]	@ (801120c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1a8>)
 8011076:	68b9      	ldr	r1, [r7, #8]
 8011078:	4618      	mov	r0, r3
 801107a:	f7fe f9a5 	bl	800f3c8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801107e:	f107 0320 	add.w	r3, r7, #32
 8011082:	4618      	mov	r0, r3
 8011084:	f7f6 fd1c 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8011088:	4603      	mov	r3, r0
 801108a:	61fb      	str	r3, [r7, #28]
	const char* mode = config["Mode"];
 801108c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011090:	4a5f      	ldr	r2, [pc, #380]	@ (8011210 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1ac>)
 8011092:	68b9      	ldr	r1, [r7, #8]
 8011094:	4618      	mov	r0, r3
 8011096:	f000 f985 	bl	80113a4 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801109a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801109e:	4618      	mov	r0, r3
 80110a0:	f7f6 fd0e 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80110a4:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	const char* invert = config["Invert"];
 80110a8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80110ac:	4a59      	ldr	r2, [pc, #356]	@ (8011214 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b0>)
 80110ae:	68b9      	ldr	r1, [r7, #8]
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7f6 fce0 	bl	8007a76 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80110b6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7f6 fd00 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80110c0:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	const char* modifier = config["Modifier"];
 80110c4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80110c8:	4a53      	ldr	r2, [pc, #332]	@ (8011218 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b4>)
 80110ca:	68b9      	ldr	r1, [r7, #8]
 80110cc:	4618      	mov	r0, r3
 80110ce:	f000 f98e 	bl	80113ee <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80110d2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80110d6:	4618      	mov	r0, r3
 80110d8:	f7f6 fcf2 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80110dc:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	int dataBit = config["Data Bit"];
 80110e0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80110e4:	4a4d      	ldr	r2, [pc, #308]	@ (801121c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1b8>)
 80110e6:	68b9      	ldr	r1, [r7, #8]
 80110e8:	4618      	mov	r0, r3
 80110ea:	f000 f980 	bl	80113ee <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80110ee:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7fe f98d 	bl	800f412 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 80110f8:	4603      	mov	r3, r0
 80110fa:	61bb      	str	r3, [r7, #24]

	int mod;
	bool inv;

	if (!strcmp(modifier, "Open Drain")) {
 80110fc:	4948      	ldr	r1, [pc, #288]	@ (8011220 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1bc>)
 80110fe:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8011102:	f7ef f8ed 	bl	80002e0 <strcmp>
 8011106:	4603      	mov	r3, r0
 8011108:	2b00      	cmp	r3, #0
 801110a:	d102      	bne.n	8011112 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xae>
		mod = OPENDRAIN;
 801110c:	2301      	movs	r3, #1
 801110e:	617b      	str	r3, [r7, #20]
 8011110:	e022      	b.n	8011158 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull Up")) {
 8011112:	4944      	ldr	r1, [pc, #272]	@ (8011224 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c0>)
 8011114:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8011118:	f7ef f8e2 	bl	80002e0 <strcmp>
 801111c:	4603      	mov	r3, r0
 801111e:	2b00      	cmp	r3, #0
 8011120:	d102      	bne.n	8011128 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xc4>
		mod = PULLUP;
 8011122:	2302      	movs	r3, #2
 8011124:	617b      	str	r3, [r7, #20]
 8011126:	e017      	b.n	8011158 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull Down")) {
 8011128:	493f      	ldr	r1, [pc, #252]	@ (8011228 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c4>)
 801112a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 801112e:	f7ef f8d7 	bl	80002e0 <strcmp>
 8011132:	4603      	mov	r3, r0
 8011134:	2b00      	cmp	r3, #0
 8011136:	d102      	bne.n	801113e <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xda>
		mod = PULLDOWN;
 8011138:	2303      	movs	r3, #3
 801113a:	617b      	str	r3, [r7, #20]
 801113c:	e00c      	b.n	8011158 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else if (!strcmp(modifier, "Pull None")) {
 801113e:	493b      	ldr	r1, [pc, #236]	@ (801122c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c8>)
 8011140:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8011144:	f7ef f8cc 	bl	80002e0 <strcmp>
 8011148:	4603      	mov	r3, r0
 801114a:	2b00      	cmp	r3, #0
 801114c:	d102      	bne.n	8011154 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf0>
		mod = PULLNONE;
 801114e:	2304      	movs	r3, #4
 8011150:	617b      	str	r3, [r7, #20]
 8011152:	e001      	b.n	8011158 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0xf4>
	} else {
		mod = NONE;
 8011154:	2300      	movs	r3, #0
 8011156:	617b      	str	r3, [r7, #20]
	}

	inv = !strcmp(invert, "True");
 8011158:	4935      	ldr	r1, [pc, #212]	@ (8011230 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1cc>)
 801115a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 801115e:	f7ef f8bf 	bl	80002e0 <strcmp>
 8011162:	4603      	mov	r3, r0
 8011164:	2b00      	cmp	r3, #0
 8011166:	bf0c      	ite	eq
 8011168:	2301      	moveq	r3, #1
 801116a:	2300      	movne	r3, #0
 801116c:	b2db      	uxtb	r3, r3
 801116e:	74fb      	strb	r3, [r7, #19]

	volatile uint16_t* ptrData = (!strcmp(mode, "Output")) ? &instance->getRxData()->outputs : &instance->getTxData()->inputs;
 8011170:	4930      	ldr	r1, [pc, #192]	@ (8011234 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 8011172:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8011176:	f7ef f8b3 	bl	80002e0 <strcmp>
 801117a:	4603      	mov	r3, r0
 801117c:	2b00      	cmp	r3, #0
 801117e:	d105      	bne.n	801118c <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x128>
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f7ff ff61 	bl	8011048 <_ZN6Remora9getRxDataEv>
 8011186:	4603      	mov	r3, r0
 8011188:	333d      	adds	r3, #61	@ 0x3d
 801118a:	e004      	b.n	8011196 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x132>
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f7ff ff4d 	bl	801102c <_ZN6Remora9getTxDataEv>
 8011192:	4603      	mov	r3, r0
 8011194:	333c      	adds	r3, #60	@ 0x3c
 8011196:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	printf("Creating DigitalPin module: Mode=%s, Pin=%s\n", mode, pin);
 801119a:	69fb      	ldr	r3, [r7, #28]
 801119c:	461a      	mov	r2, r3
 801119e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80111a2:	4825      	ldr	r0, [pc, #148]	@ (8011238 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d4>)
 80111a4:	f018 f952 	bl	802944c <iprintf>
	return std::make_unique<DigitalPin>(*ptrData, (!strcmp(mode, "Output")) ? 1 : 0, pin, dataBit, inv, mod);
 80111a8:	4922      	ldr	r1, [pc, #136]	@ (8011234 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 80111aa:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80111ae:	f7ef f897 	bl	80002e0 <strcmp>
 80111b2:	4603      	mov	r3, r0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d101      	bne.n	80111bc <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>
 80111b8:	2301      	movs	r3, #1
 80111ba:	e000      	b.n	80111be <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x15a>
 80111bc:	2300      	movs	r3, #0
 80111be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80111c2:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 80111c6:	f107 011c 	add.w	r1, r7, #28
 80111ca:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 80111ce:	f107 0314 	add.w	r3, r7, #20
 80111d2:	9302      	str	r3, [sp, #8]
 80111d4:	f107 0313 	add.w	r3, r7, #19
 80111d8:	9301      	str	r3, [sp, #4]
 80111da:	f107 0318 	add.w	r3, r7, #24
 80111de:	9300      	str	r3, [sp, #0]
 80111e0:	460b      	mov	r3, r1
 80111e2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80111e6:	f000 f927 	bl	8011438 <_ZSt11make_uniqueI10DigitalPinJRVtiRPKcRiRbS6_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80111ea:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80111ee:	4619      	mov	r1, r3
 80111f0:	68f8      	ldr	r0, [r7, #12]
 80111f2:	f000 f999 	bl	8011528 <_ZNSt10shared_ptrI6ModuleEC1I10DigitalPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 80111f6:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80111fa:	4618      	mov	r0, r3
 80111fc:	f000 f972 	bl	80114e4 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev>
 8011200:	bf00      	nop
}
 8011202:	68f8      	ldr	r0, [r7, #12]
 8011204:	37b0      	adds	r7, #176	@ 0xb0
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}
 801120a:	bf00      	nop
 801120c:	0802a900 	.word	0x0802a900
 8011210:	0802a904 	.word	0x0802a904
 8011214:	0802a90c 	.word	0x0802a90c
 8011218:	0802a914 	.word	0x0802a914
 801121c:	0802a920 	.word	0x0802a920
 8011220:	0802a92c 	.word	0x0802a92c
 8011224:	0802a938 	.word	0x0802a938
 8011228:	0802a940 	.word	0x0802a940
 801122c:	0802a94c 	.word	0x0802a94c
 8011230:	0802a958 	.word	0x0802a958
 8011234:	0802a960 	.word	0x0802a960
 8011238:	0802a968 	.word	0x0802a968

0801123c <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>:

DigitalPin::DigitalPin(volatile uint16_t& _ptrData, int _mode, std::string _portAndPin, 
 801123c:	b590      	push	{r4, r7, lr}
 801123e:	b085      	sub	sp, #20
 8011240:	af00      	add	r7, sp, #0
 8011242:	60f8      	str	r0, [r7, #12]
 8011244:	60b9      	str	r1, [r7, #8]
 8011246:	607a      	str	r2, [r7, #4]
 8011248:	603b      	str	r3, [r7, #0]
    portAndPin(std::move(_portAndPin)),
    bitNumber(_bitNumber),
    invert(_invert),
    modifier(_modifier),
    pin(std::make_unique<Pin>(portAndPin, mode, modifier)),
    mask(1 << bitNumber)
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	4618      	mov	r0, r3
 801124e:	f000 fe41 	bl	8011ed4 <_ZN6ModuleC1Ev>
 8011252:	4a1c      	ldr	r2, [pc, #112]	@ (80112c4 <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi+0x88>)
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	601a      	str	r2, [r3, #0]
    ptrData(&_ptrData),
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	68ba      	ldr	r2, [r7, #8]
 801125c:	619a      	str	r2, [r3, #24]
    mode(_mode),
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	687a      	ldr	r2, [r7, #4]
 8011262:	61da      	str	r2, [r3, #28]
    portAndPin(std::move(_portAndPin)),
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	f103 0420 	add.w	r4, r3, #32
 801126a:	6838      	ldr	r0, [r7, #0]
 801126c:	f000 f96f 	bl	801154e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8011270:	4603      	mov	r3, r0
 8011272:	4619      	mov	r1, r3
 8011274:	4620      	mov	r0, r4
 8011276:	f017 fb1b 	bl	80288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    bitNumber(_bitNumber),
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	6a3a      	ldr	r2, [r7, #32]
 801127e:	639a      	str	r2, [r3, #56]	@ 0x38
    invert(_invert),
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8011286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    modifier(_modifier),
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801128e:	641a      	str	r2, [r3, #64]	@ 0x40
    pin(std::make_unique<Pin>(portAndPin, mode, modifier)),
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	f103 0120 	add.w	r1, r3, #32
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	f103 021c 	add.w	r2, r3, #28
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 80112a8:	4623      	mov	r3, r4
 80112aa:	f000 f95b 	bl	8011564 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERiS8_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
    mask(1 << bitNumber)
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112b2:	2201      	movs	r2, #1
 80112b4:	409a      	lsls	r2, r3
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	649a      	str	r2, [r3, #72]	@ 0x48
{
}
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	4618      	mov	r0, r3
 80112be:	3714      	adds	r7, #20
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd90      	pop	{r4, r7, pc}
 80112c4:	0802b548 	.word	0x0802b548

080112c8 <_ZN10DigitalPin6updateEv>:

void DigitalPin::update()
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b084      	sub	sp, #16
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
    bool pinState;
    if (mode == 0) {  // Input mode
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	69db      	ldr	r3, [r3, #28]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d136      	bne.n	8011346 <_ZN10DigitalPin6updateEv+0x7e>
        pinState = pin->get();
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	3344      	adds	r3, #68	@ 0x44
 80112dc:	4618      	mov	r0, r3
 80112de:	f7fe f982 	bl	800f5e6 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 80112e2:	4603      	mov	r3, r0
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7f3 fdf7 	bl	8004ed8 <_ZNK3Pin3getEv>
 80112ea:	4603      	mov	r3, r0
 80112ec:	73fb      	strb	r3, [r7, #15]
        if (invert) {
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d003      	beq.n	8011300 <_ZN10DigitalPin6updateEv+0x38>
            pinState = !pinState;
 80112f8:	7bfb      	ldrb	r3, [r7, #15]
 80112fa:	f083 0301 	eor.w	r3, r3, #1
 80112fe:	73fb      	strb	r3, [r7, #15]
        }
        if (pinState) {
 8011300:	7bfb      	ldrb	r3, [r7, #15]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d00e      	beq.n	8011324 <_ZN10DigitalPin6updateEv+0x5c>
            *ptrData |= mask;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	699b      	ldr	r3, [r3, #24]
 801130a:	881b      	ldrh	r3, [r3, #0]
 801130c:	b29b      	uxth	r3, r3
 801130e:	b21a      	sxth	r2, r3
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011314:	b21b      	sxth	r3, r3
 8011316:	4313      	orrs	r3, r2
 8011318:	b21a      	sxth	r2, r3
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	699b      	ldr	r3, [r3, #24]
 801131e:	b292      	uxth	r2, r2
 8011320:	801a      	strh	r2, [r3, #0]
        if (invert) {
            pinState = !pinState;
        }
        pin->set(pinState);
    }
}
 8011322:	e031      	b.n	8011388 <_ZN10DigitalPin6updateEv+0xc0>
            *ptrData &= ~mask;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	699b      	ldr	r3, [r3, #24]
 8011328:	881b      	ldrh	r3, [r3, #0]
 801132a:	b29b      	uxth	r3, r3
 801132c:	b21a      	sxth	r2, r3
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011332:	b21b      	sxth	r3, r3
 8011334:	43db      	mvns	r3, r3
 8011336:	b21b      	sxth	r3, r3
 8011338:	4013      	ands	r3, r2
 801133a:	b21a      	sxth	r2, r3
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	699b      	ldr	r3, [r3, #24]
 8011340:	b292      	uxth	r2, r2
 8011342:	801a      	strh	r2, [r3, #0]
}
 8011344:	e020      	b.n	8011388 <_ZN10DigitalPin6updateEv+0xc0>
        pinState = (*ptrData & mask) ? true : false;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	699b      	ldr	r3, [r3, #24]
 801134a:	881b      	ldrh	r3, [r3, #0]
 801134c:	b29b      	uxth	r3, r3
 801134e:	461a      	mov	r2, r3
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011354:	4013      	ands	r3, r2
 8011356:	2b00      	cmp	r3, #0
 8011358:	bf14      	ite	ne
 801135a:	2301      	movne	r3, #1
 801135c:	2300      	moveq	r3, #0
 801135e:	73fb      	strb	r3, [r7, #15]
        if (invert) {
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011366:	2b00      	cmp	r3, #0
 8011368:	d003      	beq.n	8011372 <_ZN10DigitalPin6updateEv+0xaa>
            pinState = !pinState;
 801136a:	7bfb      	ldrb	r3, [r7, #15]
 801136c:	f083 0301 	eor.w	r3, r3, #1
 8011370:	73fb      	strb	r3, [r7, #15]
        pin->set(pinState);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	3344      	adds	r3, #68	@ 0x44
 8011376:	4618      	mov	r0, r3
 8011378:	f7fe f935 	bl	800f5e6 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 801137c:	4602      	mov	r2, r0
 801137e:	7bfb      	ldrb	r3, [r7, #15]
 8011380:	4619      	mov	r1, r3
 8011382:	4610      	mov	r0, r2
 8011384:	f7f3 fdbe 	bl	8004f04 <_ZN3Pin3setEb>
}
 8011388:	bf00      	nop
 801138a:	3710      	adds	r7, #16
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}

08011390 <_ZN10DigitalPin10slowUpdateEv>:

void DigitalPin::slowUpdate()
{
 8011390:	b480      	push	{r7}
 8011392:	b083      	sub	sp, #12
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
    return;
 8011398:	bf00      	nop
}
 801139a:	370c      	adds	r7, #12
 801139c:	46bd      	mov	sp, r7
 801139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a2:	4770      	bx	lr

080113a4 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b08c      	sub	sp, #48	@ 0x30
 80113a8:	af02      	add	r7, sp, #8
 80113aa:	60f8      	str	r0, [r7, #12]
 80113ac:	60b9      	str	r1, [r7, #8]
 80113ae:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 80113b0:	68ba      	ldr	r2, [r7, #8]
 80113b2:	f107 0314 	add.w	r3, r7, #20
 80113b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80113be:	f107 031c 	add.w	r3, r7, #28
 80113c2:	6879      	ldr	r1, [r7, #4]
 80113c4:	4618      	mov	r0, r3
 80113c6:	f7fb fe66 	bl	800d096 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80113ca:	466a      	mov	r2, sp
 80113cc:	f107 0320 	add.w	r3, r7, #32
 80113d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80113d4:	e882 0003 	stmia.w	r2, {r0, r1}
 80113d8:	69fb      	ldr	r3, [r7, #28]
 80113da:	f107 0214 	add.w	r2, r7, #20
 80113de:	ca06      	ldmia	r2, {r1, r2}
 80113e0:	68f8      	ldr	r0, [r7, #12]
 80113e2:	f7f6 fcdc 	bl	8007d9e <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80113e6:	68f8      	ldr	r0, [r7, #12]
 80113e8:	3728      	adds	r7, #40	@ 0x28
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}

080113ee <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 80113ee:	b580      	push	{r7, lr}
 80113f0:	b08c      	sub	sp, #48	@ 0x30
 80113f2:	af02      	add	r7, sp, #8
 80113f4:	60f8      	str	r0, [r7, #12]
 80113f6:	60b9      	str	r1, [r7, #8]
 80113f8:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 80113fa:	68ba      	ldr	r2, [r7, #8]
 80113fc:	f107 0314 	add.w	r3, r7, #20
 8011400:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011404:	e883 0003 	stmia.w	r3, {r0, r1}
 8011408:	f107 031c 	add.w	r3, r7, #28
 801140c:	6879      	ldr	r1, [r7, #4]
 801140e:	4618      	mov	r0, r3
 8011410:	f000 f8cf 	bl	80115b2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8011414:	466a      	mov	r2, sp
 8011416:	f107 0320 	add.w	r3, r7, #32
 801141a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801141e:	e882 0003 	stmia.w	r2, {r0, r1}
 8011422:	69fb      	ldr	r3, [r7, #28]
 8011424:	f107 0214 	add.w	r2, r7, #20
 8011428:	ca06      	ldmia	r2, {r1, r2}
 801142a:	68f8      	ldr	r0, [r7, #12]
 801142c:	f7f6 fcb7 	bl	8007d9e <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8011430:	68f8      	ldr	r0, [r7, #12]
 8011432:	3728      	adds	r7, #40	@ 0x28
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <_ZSt11make_uniqueI10DigitalPinJRVtiRPKcRiRbS6_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8011438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801143c:	b091      	sub	sp, #68	@ 0x44
 801143e:	af04      	add	r7, sp, #16
 8011440:	60f8      	str	r0, [r7, #12]
 8011442:	60b9      	str	r1, [r7, #8]
 8011444:	607a      	str	r2, [r7, #4]
 8011446:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8011448:	204c      	movs	r0, #76	@ 0x4c
 801144a:	f017 f955 	bl	80286f8 <_Znwj>
 801144e:	4603      	mov	r3, r0
 8011450:	4698      	mov	r8, r3
 8011452:	68b8      	ldr	r0, [r7, #8]
 8011454:	f000 f8c0 	bl	80115d8 <_ZSt7forwardIRVtEOT_RNSt16remove_referenceIS2_E4typeE>
 8011458:	4681      	mov	r9, r0
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f7fe f8cf 	bl	800f5fe <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8011460:	4603      	mov	r3, r0
 8011462:	681e      	ldr	r6, [r3, #0]
 8011464:	6838      	ldr	r0, [r7, #0]
 8011466:	f7fe f90a 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801146a:	4603      	mov	r3, r0
 801146c:	681c      	ldr	r4, [r3, #0]
 801146e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011472:	4618      	mov	r0, r3
 8011474:	f017 f951 	bl	802871a <_ZNSaIcEC1Ev>
 8011478:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801147c:	f107 0314 	add.w	r3, r7, #20
 8011480:	4621      	mov	r1, r4
 8011482:	4618      	mov	r0, r3
 8011484:	f7f6 fa96 	bl	80079b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8011488:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801148a:	f7fe f903 	bl	800f694 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801148e:	4603      	mov	r3, r0
 8011490:	681c      	ldr	r4, [r3, #0]
 8011492:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011494:	f000 f8ab 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8011498:	4603      	mov	r3, r0
 801149a:	781d      	ldrb	r5, [r3, #0]
 801149c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801149e:	f7fe f8f9 	bl	800f694 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80114a2:	4603      	mov	r3, r0
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	f107 0214 	add.w	r2, r7, #20
 80114aa:	9302      	str	r3, [sp, #8]
 80114ac:	9501      	str	r5, [sp, #4]
 80114ae:	9400      	str	r4, [sp, #0]
 80114b0:	4613      	mov	r3, r2
 80114b2:	4632      	mov	r2, r6
 80114b4:	4649      	mov	r1, r9
 80114b6:	4640      	mov	r0, r8
 80114b8:	f7ff fec0 	bl	801123c <_ZN10DigitalPinC1ERVtiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 80114bc:	4641      	mov	r1, r8
 80114be:	68f8      	ldr	r0, [r7, #12]
 80114c0:	f000 f8b0 	bl	8011624 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80114c4:	f107 0314 	add.w	r3, r7, #20
 80114c8:	4618      	mov	r0, r3
 80114ca:	f017 fa10 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80114ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80114d2:	4618      	mov	r0, r3
 80114d4:	f017 f922 	bl	802871c <_ZNSaIcED1Ev>
 80114d8:	bf00      	nop
 80114da:	68f8      	ldr	r0, [r7, #12]
 80114dc:	3734      	adds	r7, #52	@ 0x34
 80114de:	46bd      	mov	sp, r7
 80114e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080114e4 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80114e4:	b590      	push	{r4, r7, lr}
 80114e6:	b085      	sub	sp, #20
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	4618      	mov	r0, r3
 80114f0:	f000 f8a7 	bl	8011642 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 80114f4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d00c      	beq.n	8011518 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f000 f8ac 	bl	801165c <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>
 8011504:	4604      	mov	r4, r0
 8011506:	68f8      	ldr	r0, [r7, #12]
 8011508:	f000 f8b5 	bl	8011676 <_ZSt4moveIRP10DigitalPinEONSt16remove_referenceIT_E4typeEOS4_>
 801150c:	4603      	mov	r3, r0
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	4619      	mov	r1, r3
 8011512:	4620      	mov	r0, r4
 8011514:	f000 f8e6 	bl	80116e4 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>
	__ptr = pointer();
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	2200      	movs	r2, #0
 801151c:	601a      	str	r2, [r3, #0]
      }
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	4618      	mov	r0, r3
 8011522:	3714      	adds	r7, #20
 8011524:	46bd      	mov	sp, r7
 8011526:	bd90      	pop	{r4, r7, pc}

08011528 <_ZNSt10shared_ptrI6ModuleEC1I10DigitalPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 8011528:	b590      	push	{r4, r7, lr}
 801152a:	b083      	sub	sp, #12
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
 8011530:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8011532:	687c      	ldr	r4, [r7, #4]
 8011534:	6838      	ldr	r0, [r7, #0]
 8011536:	f000 f8e6 	bl	8011706 <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 801153a:	4603      	mov	r3, r0
 801153c:	4619      	mov	r1, r3
 801153e:	4620      	mov	r0, r4
 8011540:	f000 f8ec 	bl	801171c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	4618      	mov	r0, r3
 8011548:	370c      	adds	r7, #12
 801154a:	46bd      	mov	sp, r7
 801154c:	bd90      	pop	{r4, r7, pc}

0801154e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 801154e:	b480      	push	{r7}
 8011550:	b083      	sub	sp, #12
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	4618      	mov	r0, r3
 801155a:	370c      	adds	r7, #12
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr

08011564 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERiS8_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8011564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011566:	b085      	sub	sp, #20
 8011568:	af00      	add	r7, sp, #0
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	60b9      	str	r1, [r7, #8]
 801156e:	607a      	str	r2, [r7, #4]
 8011570:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8011572:	2040      	movs	r0, #64	@ 0x40
 8011574:	f017 f8c0 	bl	80286f8 <_Znwj>
 8011578:	4603      	mov	r3, r0
 801157a:	461d      	mov	r5, r3
 801157c:	68b8      	ldr	r0, [r7, #8]
 801157e:	f7fe f955 	bl	800f82c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8011582:	4606      	mov	r6, r0
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f7fe f885 	bl	800f694 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801158a:	4603      	mov	r3, r0
 801158c:	681c      	ldr	r4, [r3, #0]
 801158e:	6838      	ldr	r0, [r7, #0]
 8011590:	f7fe f880 	bl	800f694 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8011594:	4603      	mov	r3, r0
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	4622      	mov	r2, r4
 801159a:	4631      	mov	r1, r6
 801159c:	4628      	mov	r0, r5
 801159e:	f7f3 fb2f 	bl	8004c00 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
 80115a2:	4629      	mov	r1, r5
 80115a4:	68f8      	ldr	r0, [r7, #12]
 80115a6:	f7fe f95c 	bl	800f862 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80115aa:	68f8      	ldr	r0, [r7, #12]
 80115ac:	3714      	adds	r7, #20
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080115b2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 80115b2:	b580      	push	{r7, lr}
 80115b4:	b082      	sub	sp, #8
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
 80115ba:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 80115bc:	6838      	ldr	r0, [r7, #0]
 80115be:	f000 f8e5 	bl	801178c <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80115c2:	4602      	mov	r2, r0
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	4611      	mov	r1, r2
 80115c8:	4618      	mov	r0, r3
 80115ca:	f000 f8ea 	bl	80117a2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>
 80115ce:	bf00      	nop
}
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	3708      	adds	r7, #8
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}

080115d8 <_ZSt7forwardIRVtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80115d8:	b480      	push	{r7}
 80115da:	b083      	sub	sp, #12
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	4618      	mov	r0, r3
 80115e4:	370c      	adds	r7, #12
 80115e6:	46bd      	mov	sp, r7
 80115e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ec:	4770      	bx	lr

080115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80115ee:	b480      	push	{r7}
 80115f0:	b083      	sub	sp, #12
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	4618      	mov	r0, r3
 80115fa:	370c      	adds	r7, #12
 80115fc:	46bd      	mov	sp, r7
 80115fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011602:	4770      	bx	lr

08011604 <_ZNSt15__uniq_ptr_dataI10DigitalPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8011604:	b580      	push	{r7, lr}
 8011606:	b082      	sub	sp, #8
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
 801160c:	6039      	str	r1, [r7, #0]
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	683a      	ldr	r2, [r7, #0]
 8011612:	4611      	mov	r1, r2
 8011614:	4618      	mov	r0, r3
 8011616:	f000 f8d3 	bl	80117c0 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EEC1EPS0_>
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	4618      	mov	r0, r3
 801161e:	3708      	adds	r7, #8
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}

08011624 <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8011624:	b580      	push	{r7, lr}
 8011626:	b082      	sub	sp, #8
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6839      	ldr	r1, [r7, #0]
 8011632:	4618      	mov	r0, r3
 8011634:	f7ff ffe6 	bl	8011604 <_ZNSt15__uniq_ptr_dataI10DigitalPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	4618      	mov	r0, r3
 801163c:	3708      	adds	r7, #8
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}

08011642 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8011642:	b580      	push	{r7, lr}
 8011644:	b082      	sub	sp, #8
 8011646:	af00      	add	r7, sp, #0
 8011648:	6078      	str	r0, [r7, #4]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	4618      	mov	r0, r3
 801164e:	f000 f8cb 	bl	80117e8 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8011652:	4603      	mov	r3, r0
 8011654:	4618      	mov	r0, r3
 8011656:	3708      	adds	r7, #8
 8011658:	46bd      	mov	sp, r7
 801165a:	bd80      	pop	{r7, pc}

0801165c <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 801165c:	b580      	push	{r7, lr}
 801165e:	b082      	sub	sp, #8
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	4618      	mov	r0, r3
 8011668:	f000 f8cb 	bl	8011802 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE10_M_deleterEv>
 801166c:	4603      	mov	r3, r0
 801166e:	4618      	mov	r0, r3
 8011670:	3708      	adds	r7, #8
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}

08011676 <_ZSt4moveIRP10DigitalPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8011676:	b480      	push	{r7}
 8011678:	b083      	sub	sp, #12
 801167a:	af00      	add	r7, sp, #0
 801167c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4618      	mov	r0, r3
 8011682:	370c      	adds	r7, #12
 8011684:	46bd      	mov	sp, r7
 8011686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168a:	4770      	bx	lr

0801168c <_ZN10DigitalPinD1Ev>:
 * @brief Digital I/O pin control module.
 * 
 * The DigitalPin class manages digital input and output operations, allowing
 * interaction with external devices via GPIO.
 */
class DigitalPin : public Module
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	4a0a      	ldr	r2, [pc, #40]	@ (80116c0 <_ZN10DigitalPinD1Ev+0x34>)
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	601a      	str	r2, [r3, #0]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	3344      	adds	r3, #68	@ 0x44
 801169e:	4618      	mov	r0, r3
 80116a0:	f7fd ff7f 	bl	800f5a2 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	3320      	adds	r3, #32
 80116a8:	4618      	mov	r0, r3
 80116aa:	f017 f920 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	4618      	mov	r0, r3
 80116b2:	f000 fc2b 	bl	8011f0c <_ZN6ModuleD1Ev>
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	4618      	mov	r0, r3
 80116ba:	3708      	adds	r7, #8
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}
 80116c0:	0802b548 	.word	0x0802b548

080116c4 <_ZN10DigitalPinD0Ev>:
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b082      	sub	sp, #8
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f7ff ffdd 	bl	801168c <_ZN10DigitalPinD1Ev>
 80116d2:	214c      	movs	r1, #76	@ 0x4c
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f016 fffe 	bl	80286d6 <_ZdlPvj>
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	4618      	mov	r0, r3
 80116de:	3708      	adds	r7, #8
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}

080116e4 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b082      	sub	sp, #8
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
 80116ec:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d004      	beq.n	80116fe <_ZNKSt14default_deleteI10DigitalPinEclEPS0_+0x1a>
 80116f4:	681a      	ldr	r2, [r3, #0]
 80116f6:	3204      	adds	r2, #4
 80116f8:	6812      	ldr	r2, [r2, #0]
 80116fa:	4618      	mov	r0, r3
 80116fc:	4790      	blx	r2
      }
 80116fe:	bf00      	nop
 8011700:	3708      	adds	r7, #8
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}

08011706 <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8011706:	b480      	push	{r7}
 8011708:	b083      	sub	sp, #12
 801170a:	af00      	add	r7, sp, #0
 801170c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	4618      	mov	r0, r3
 8011712:	370c      	adds	r7, #12
 8011714:	46bd      	mov	sp, r7
 8011716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171a:	4770      	bx	lr

0801171c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 801171c:	b580      	push	{r7, lr}
 801171e:	b084      	sub	sp, #16
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
 8011724:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 8011726:	6838      	ldr	r0, [r7, #0]
 8011728:	f000 f878 	bl	801181c <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 801172c:	4602      	mov	r2, r0
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	601a      	str	r2, [r3, #0]
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	3304      	adds	r3, #4
 8011736:	4618      	mov	r0, r3
 8011738:	f7fb fdb6 	bl	800d2a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 801173c:	6838      	ldr	r0, [r7, #0]
 801173e:	f000 f86d 	bl	801181c <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 8011742:	4603      	mov	r3, r0
 8011744:	4618      	mov	r0, r3
 8011746:	f000 f876 	bl	8011836 <_ZSt12__to_addressI10DigitalPinEPT_S2_>
 801174a:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 801174c:	6838      	ldr	r0, [r7, #0]
 801174e:	f7ff ffda 	bl	8011706 <_ZSt4moveIRSt10unique_ptrI10DigitalPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8011752:	4602      	mov	r2, r0
 8011754:	f107 0308 	add.w	r3, r7, #8
 8011758:	4611      	mov	r1, r2
 801175a:	4618      	mov	r0, r3
 801175c:	f000 f876 	bl	801184c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	3304      	adds	r3, #4
 8011764:	f107 0208 	add.w	r2, r7, #8
 8011768:	4611      	mov	r1, r2
 801176a:	4618      	mov	r0, r3
 801176c:	f7fe f98d 	bl	800fa8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8011770:	f107 0308 	add.w	r3, r7, #8
 8011774:	4618      	mov	r0, r3
 8011776:	f7fa fb9a 	bl	800beae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 801177a:	68f9      	ldr	r1, [r7, #12]
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f000 f8a7 	bl	80118d0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI10DigitalPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	4618      	mov	r0, r3
 8011786:	3710      	adds	r7, #16
 8011788:	46bd      	mov	sp, r7
 801178a:	bd80      	pop	{r7, pc}

0801178c <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 801178c:	b480      	push	{r7}
 801178e:	b083      	sub	sp, #12
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8011794:	687b      	ldr	r3, [r7, #4]
}
 8011796:	4618      	mov	r0, r3
 8011798:	370c      	adds	r7, #12
 801179a:	46bd      	mov	sp, r7
 801179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a0:	4770      	bx	lr

080117a2 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 80117a2:	b580      	push	{r7, lr}
 80117a4:	b082      	sub	sp, #8
 80117a6:	af00      	add	r7, sp, #0
 80117a8:	6078      	str	r0, [r7, #4]
 80117aa:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 80117ac:	2301      	movs	r3, #1
 80117ae:	2208      	movs	r2, #8
 80117b0:	6839      	ldr	r1, [r7, #0]
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f7f3 fd6e 	bl	8005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	3708      	adds	r7, #8
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}

080117c0 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80117c0:	b590      	push	{r4, r7, lr}
 80117c2:	b083      	sub	sp, #12
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
 80117c8:	6039      	str	r1, [r7, #0]
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	4618      	mov	r0, r3
 80117ce:	f000 f88a 	bl	80118e6 <_ZNSt5tupleIJP10DigitalPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80117d2:	683c      	ldr	r4, [r7, #0]
 80117d4:	6878      	ldr	r0, [r7, #4]
 80117d6:	f7ff ff34 	bl	8011642 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 80117da:	4603      	mov	r3, r0
 80117dc:	601c      	str	r4, [r3, #0]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	4618      	mov	r0, r3
 80117e2:	370c      	adds	r7, #12
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd90      	pop	{r4, r7, pc}

080117e8 <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	4618      	mov	r0, r3
 80117f4:	f000 f884 	bl	8011900 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80117f8:	4603      	mov	r3, r0
 80117fa:	4618      	mov	r0, r3
 80117fc:	3708      	adds	r7, #8
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}

08011802 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8011802:	b580      	push	{r7, lr}
 8011804:	b082      	sub	sp, #8
 8011806:	af00      	add	r7, sp, #0
 8011808:	6078      	str	r0, [r7, #4]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	4618      	mov	r0, r3
 801180e:	f000 f883 	bl	8011918 <_ZSt3getILj1EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8011812:	4603      	mov	r3, r0
 8011814:	4618      	mov	r0, r3
 8011816:	3708      	adds	r7, #8
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 801181c:	b580      	push	{r7, lr}
 801181e:	b082      	sub	sp, #8
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	4618      	mov	r0, r3
 8011828:	f000 f882 	bl	8011930 <_ZNKSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 801182c:	4603      	mov	r3, r0
 801182e:	4618      	mov	r0, r3
 8011830:	3708      	adds	r7, #8
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}

08011836 <_ZSt12__to_addressI10DigitalPinEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 8011836:	b480      	push	{r7}
 8011838:	b083      	sub	sp, #12
 801183a:	af00      	add	r7, sp, #0
 801183c:	6078      	str	r0, [r7, #4]
      return __ptr;
 801183e:	687b      	ldr	r3, [r7, #4]
    }
 8011840:	4618      	mov	r0, r3
 8011842:	370c      	adds	r7, #12
 8011844:	46bd      	mov	sp, r7
 8011846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184a:	4770      	bx	lr

0801184c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 801184c:	b580      	push	{r7, lr}
 801184e:	b086      	sub	sp, #24
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	6039      	str	r1, [r7, #0]
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2200      	movs	r2, #0
 801185a:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 801185c:	6838      	ldr	r0, [r7, #0]
 801185e:	f7ff ffdd 	bl	801181c <_ZNKSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE3getEv>
 8011862:	4603      	mov	r3, r0
 8011864:	2b00      	cmp	r3, #0
 8011866:	bf0c      	ite	eq
 8011868:	2301      	moveq	r3, #1
 801186a:	2300      	movne	r3, #0
 801186c:	b2db      	uxtb	r3, r3
 801186e:	2b00      	cmp	r3, #0
 8011870:	d128      	bne.n	80118c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 8011872:	f107 030c 	add.w	r3, r7, #12
 8011876:	4618      	mov	r0, r3
 8011878:	f000 f868 	bl	801194c <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 801187c:	f107 030c 	add.w	r3, r7, #12
 8011880:	2101      	movs	r1, #1
 8011882:	4618      	mov	r0, r3
 8011884:	f000 f87a 	bl	801197c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 8011888:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 801188a:	6838      	ldr	r0, [r7, #0]
 801188c:	f000 f885 	bl	801199a <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE7releaseEv>
 8011890:	4603      	mov	r3, r0
 8011892:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 8011894:	6838      	ldr	r0, [r7, #0]
 8011896:	f7ff fee1 	bl	801165c <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE11get_deleterEv>
 801189a:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 801189c:	4618      	mov	r0, r3
 801189e:	f000 f889 	bl	80119b4 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 80118a2:	4603      	mov	r3, r0
 80118a4:	f107 0210 	add.w	r2, r7, #16
 80118a8:	f107 000c 	add.w	r0, r7, #12
 80118ac:	6979      	ldr	r1, [r7, #20]
 80118ae:	f000 f88c 	bl	80119ca <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	697a      	ldr	r2, [r7, #20]
 80118b6:	601a      	str	r2, [r3, #0]
	}
 80118b8:	f107 030c 	add.w	r3, r7, #12
 80118bc:	4618      	mov	r0, r3
 80118be:	f000 f851 	bl	8011964 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80118c2:	e000      	b.n	80118c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10DigitalPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 80118c4:	bf00      	nop
	}
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	4618      	mov	r0, r3
 80118ca:	3718      	adds	r7, #24
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}

080118d0 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI10DigitalPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80118d0:	b480      	push	{r7}
 80118d2:	b083      	sub	sp, #12
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
 80118d8:	6039      	str	r1, [r7, #0]
	{ }
 80118da:	bf00      	nop
 80118dc:	370c      	adds	r7, #12
 80118de:	46bd      	mov	sp, r7
 80118e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e4:	4770      	bx	lr

080118e6 <_ZNSt5tupleIJP10DigitalPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80118e6:	b580      	push	{r7, lr}
 80118e8:	b082      	sub	sp, #8
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	4618      	mov	r0, r3
 80118f2:	f000 f882 	bl	80119fa <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEEC1Ev>
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	4618      	mov	r0, r3
 80118fa:	3708      	adds	r7, #8
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}

08011900 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011900:	b580      	push	{r7, lr}
 8011902:	b082      	sub	sp, #8
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f000 f886 	bl	8011a1a <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERS4_>
 801190e:	4603      	mov	r3, r0
 8011910:	4618      	mov	r0, r3
 8011912:	3708      	adds	r7, #8
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}

08011918 <_ZSt3getILj1EJP10DigitalPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f000 f887 	bl	8011a34 <_ZSt12__get_helperILj1ESt14default_deleteI10DigitalPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8011926:	4603      	mov	r3, r0
 8011928:	4618      	mov	r0, r3
 801192a:	3708      	adds	r7, #8
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}

08011930 <_ZNKSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	4618      	mov	r0, r3
 801193c:	f000 f886 	bl	8011a4c <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8011940:	4603      	mov	r3, r0
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	4618      	mov	r0, r3
 8011946:	3708      	adds	r7, #8
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f000 f886 	bl	8011a66 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	4618      	mov	r0, r3
 801195e:	3708      	adds	r7, #8
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}

08011964 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8011964:	b580      	push	{r7, lr}
 8011966:	b082      	sub	sp, #8
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	f000 f885 	bl	8011a7c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	4618      	mov	r0, r3
 8011976:	3708      	adds	r7, #8
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}

0801197c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 801197c:	b580      	push	{r7, lr}
 801197e:	b082      	sub	sp, #8
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8011986:	2200      	movs	r2, #0
 8011988:	6839      	ldr	r1, [r7, #0]
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f000 f881 	bl	8011a92 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8011990:	4603      	mov	r3, r0
 8011992:	4618      	mov	r0, r3
 8011994:	3708      	adds	r7, #8
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}

0801199a <_ZNSt10unique_ptrI10DigitalPinSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 801199a:	b580      	push	{r7, lr}
 801199c:	b082      	sub	sp, #8
 801199e:	af00      	add	r7, sp, #0
 80119a0:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	4618      	mov	r0, r3
 80119a6:	f000 f89e 	bl	8011ae6 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE7releaseEv>
 80119aa:	4603      	mov	r3, r0
 80119ac:	4618      	mov	r0, r3
 80119ae:	3708      	adds	r7, #8
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}

080119b4 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80119b4:	b480      	push	{r7}
 80119b6:	b083      	sub	sp, #12
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	4618      	mov	r0, r3
 80119c0:	370c      	adds	r7, #12
 80119c2:	46bd      	mov	sp, r7
 80119c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c8:	4770      	bx	lr

080119ca <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80119ca:	b590      	push	{r4, r7, lr}
 80119cc:	b085      	sub	sp, #20
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	60f8      	str	r0, [r7, #12]
 80119d2:	60b9      	str	r1, [r7, #8]
 80119d4:	607a      	str	r2, [r7, #4]
 80119d6:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f000 f899 	bl	8011b10 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>
 80119de:	4604      	mov	r4, r0
 80119e0:	6838      	ldr	r0, [r7, #0]
 80119e2:	f7ff ffe7 	bl	80119b4 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 80119e6:	4603      	mov	r3, r0
 80119e8:	4622      	mov	r2, r4
 80119ea:	68b9      	ldr	r1, [r7, #8]
 80119ec:	68f8      	ldr	r0, [r7, #12]
 80119ee:	f000 f89a 	bl	8011b26 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 80119f2:	bf00      	nop
 80119f4:	3714      	adds	r7, #20
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd90      	pop	{r4, r7, pc}

080119fa <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80119fa:	b580      	push	{r7, lr}
 80119fc:	b082      	sub	sp, #8
 80119fe:	af00      	add	r7, sp, #0
 8011a00:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f000 f8ad 	bl	8011b62 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEEC1Ev>
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f000 f8b5 	bl	8011b7a <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EEC1Ev>
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	4618      	mov	r0, r3
 8011a14:	3708      	adds	r7, #8
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}

08011a1a <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011a1a:	b580      	push	{r7, lr}
 8011a1c:	b082      	sub	sp, #8
 8011a1e:	af00      	add	r7, sp, #0
 8011a20:	6078      	str	r0, [r7, #4]
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	4618      	mov	r0, r3
 8011a26:	f000 f8b6 	bl	8011b96 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERS2_>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	3708      	adds	r7, #8
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}

08011a34 <_ZSt12__get_helperILj1ESt14default_deleteI10DigitalPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b082      	sub	sp, #8
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f000 f8b5 	bl	8011bac <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEE7_M_headERS3_>
 8011a42:	4603      	mov	r3, r0
 8011a44:	4618      	mov	r0, r3
 8011a46:	3708      	adds	r7, #8
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}

08011a4c <_ZSt3getILj0EJP10DigitalPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b082      	sub	sp, #8
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	4618      	mov	r0, r3
 8011a58:	f000 f8b4 	bl	8011bc4 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3708      	adds	r7, #8
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}

08011a66 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011a66:	b480      	push	{r7}
 8011a68:	b083      	sub	sp, #12
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	6078      	str	r0, [r7, #4]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	4618      	mov	r0, r3
 8011a72:	370c      	adds	r7, #12
 8011a74:	46bd      	mov	sp, r7
 8011a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7a:	4770      	bx	lr

08011a7c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011a7c:	b480      	push	{r7}
 8011a7e:	b083      	sub	sp, #12
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	4618      	mov	r0, r3
 8011a88:	370c      	adds	r7, #12
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a90:	4770      	bx	lr

08011a92 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8011a92:	b580      	push	{r7, lr}
 8011a94:	b084      	sub	sp, #16
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	60f8      	str	r0, [r7, #12]
 8011a9a:	60b9      	str	r1, [r7, #8]
 8011a9c:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8011a9e:	68f8      	ldr	r0, [r7, #12]
 8011aa0:	f000 f89c 	bl	8011bdc <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 8011aa4:	4602      	mov	r2, r0
 8011aa6:	68bb      	ldr	r3, [r7, #8]
 8011aa8:	4293      	cmp	r3, r2
 8011aaa:	bf8c      	ite	hi
 8011aac:	2301      	movhi	r3, #1
 8011aae:	2300      	movls	r3, #0
 8011ab0:	b2db      	uxtb	r3, r3
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	bf14      	ite	ne
 8011ab6:	2301      	movne	r3, #1
 8011ab8:	2300      	moveq	r3, #0
 8011aba:	b2db      	uxtb	r3, r3
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d007      	beq.n	8011ad0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011ac6:	d301      	bcc.n	8011acc <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8011ac8:	f016 fe2c 	bl	8028724 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8011acc:	f016 fe27 	bl	802871e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	011b      	lsls	r3, r3, #4
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f016 fe0f 	bl	80286f8 <_Znwj>
 8011ada:	4603      	mov	r3, r0
 8011adc:	bf00      	nop
      }
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3710      	adds	r7, #16
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}

08011ae6 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8011ae6:	b580      	push	{r7, lr}
 8011ae8:	b084      	sub	sp, #16
 8011aea:	af00      	add	r7, sp, #0
 8011aec:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f7ff fda7 	bl	8011642 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 8011af4:	4603      	mov	r3, r0
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f7ff fda1 	bl	8011642 <_ZNSt15__uniq_ptr_implI10DigitalPinSt14default_deleteIS0_EE6_M_ptrEv>
 8011b00:	4603      	mov	r3, r0
 8011b02:	2200      	movs	r2, #0
 8011b04:	601a      	str	r2, [r3, #0]
	return __p;
 8011b06:	68fb      	ldr	r3, [r7, #12]
      }
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3710      	adds	r7, #16
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}

08011b10 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011b10:	b480      	push	{r7}
 8011b12:	b083      	sub	sp, #12
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	370c      	adds	r7, #12
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr

08011b26 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8011b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b28:	b085      	sub	sp, #20
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	60f8      	str	r0, [r7, #12]
 8011b2e:	60b9      	str	r1, [r7, #8]
 8011b30:	607a      	str	r2, [r7, #4]
 8011b32:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	4619      	mov	r1, r3
 8011b38:	2010      	movs	r0, #16
 8011b3a:	f7f8 ff7d 	bl	800aa38 <_ZnwjPv>
 8011b3e:	4605      	mov	r5, r0
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f7ff ffe5 	bl	8011b10 <_ZSt7forwardIP10DigitalPinEOT_RNSt16remove_referenceIS2_E4typeE>
 8011b46:	4603      	mov	r3, r0
 8011b48:	681c      	ldr	r4, [r3, #0]
 8011b4a:	6838      	ldr	r0, [r7, #0]
 8011b4c:	f7ff ff32 	bl	80119b4 <_ZSt7forwardISt14default_deleteI10DigitalPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8011b50:	4632      	mov	r2, r6
 8011b52:	4621      	mov	r1, r4
 8011b54:	4628      	mov	r0, r5
 8011b56:	f000 f84d 	bl	8011bf4 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 8011b5a:	bf00      	nop
 8011b5c:	3714      	adds	r7, #20
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b62 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEEC1Ev>:
      _Tuple_impl()
 8011b62:	b580      	push	{r7, lr}
 8011b64:	b082      	sub	sp, #8
 8011b66:	af00      	add	r7, sp, #0
 8011b68:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f000 f864 	bl	8011c38 <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EEC1Ev>
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	4618      	mov	r0, r3
 8011b74:	3708      	adds	r7, #8
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}

08011b7a <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EEC1Ev>:
      constexpr _Head_base()
 8011b7a:	b480      	push	{r7}
 8011b7c:	b083      	sub	sp, #12
 8011b7e:	af00      	add	r7, sp, #0
 8011b80:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2200      	movs	r2, #0
 8011b86:	601a      	str	r2, [r3, #0]
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	370c      	adds	r7, #12
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b94:	4770      	bx	lr

08011b96 <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8011b96:	b480      	push	{r7}
 8011b98:	b083      	sub	sp, #12
 8011b9a:	af00      	add	r7, sp, #0
 8011b9c:	6078      	str	r0, [r7, #4]
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	370c      	adds	r7, #12
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011baa:	4770      	bx	lr

08011bac <_ZNSt11_Tuple_implILj1EJSt14default_deleteI10DigitalPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f000 f84a 	bl	8011c4e <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EE7_M_headERS3_>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	3708      	adds	r7, #8
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd80      	pop	{r7, pc}

08011bc4 <_ZSt12__get_helperILj0EP10DigitalPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b082      	sub	sp, #8
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	f000 f849 	bl	8011c64 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	3708      	adds	r7, #8
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}

08011bdc <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8011bdc:	b480      	push	{r7}
 8011bde:	b083      	sub	sp, #12
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8011be4:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 8011be8:	4618      	mov	r0, r3
 8011bea:	370c      	adds	r7, #12
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr

08011bf4 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8011bf4:	b5b0      	push	{r4, r5, r7, lr}
 8011bf6:	b086      	sub	sp, #24
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7fc fbc4 	bl	800e390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8011c08:	4a0a      	ldr	r2, [pc, #40]	@ (8011c34 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	601a      	str	r2, [r3, #0]
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	f103 040c 	add.w	r4, r3, #12
 8011c14:	1d3b      	adds	r3, r7, #4
 8011c16:	4618      	mov	r0, r3
 8011c18:	f000 f831 	bl	8011c7e <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8011c1c:	f107 0314 	add.w	r3, r7, #20
 8011c20:	462a      	mov	r2, r5
 8011c22:	68b9      	ldr	r1, [r7, #8]
 8011c24:	4620      	mov	r0, r4
 8011c26:	f000 f835 	bl	8011c94 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3718      	adds	r7, #24
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bdb0      	pop	{r4, r5, r7, pc}
 8011c34:	0802b52c 	.word	0x0802b52c

08011c38 <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EEC1Ev>:
      constexpr _Head_base()
 8011c38:	b480      	push	{r7}
 8011c3a:	b083      	sub	sp, #12
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	4618      	mov	r0, r3
 8011c44:	370c      	adds	r7, #12
 8011c46:	46bd      	mov	sp, r7
 8011c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4c:	4770      	bx	lr

08011c4e <_ZNSt10_Head_baseILj1ESt14default_deleteI10DigitalPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8011c4e:	b480      	push	{r7}
 8011c50:	b083      	sub	sp, #12
 8011c52:	af00      	add	r7, sp, #0
 8011c54:	6078      	str	r0, [r7, #4]
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	370c      	adds	r7, #12
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c62:	4770      	bx	lr

08011c64 <_ZNSt11_Tuple_implILj0EJP10DigitalPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b082      	sub	sp, #8
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f000 f82c 	bl	8011ccc <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERKS2_>
 8011c74:	4603      	mov	r3, r0
 8011c76:	4618      	mov	r0, r3
 8011c78:	3708      	adds	r7, #8
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}

08011c7e <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8011c7e:	b480      	push	{r7}
 8011c80:	b083      	sub	sp, #12
 8011c82:	af00      	add	r7, sp, #0
 8011c84:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	370c      	adds	r7, #12
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c92:	4770      	bx	lr

08011c94 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b084      	sub	sp, #16
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	60f8      	str	r0, [r7, #12]
 8011c9c:	60b9      	str	r1, [r7, #8]
 8011c9e:	713a      	strb	r2, [r7, #4]
 8011ca0:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 8011ca2:	1d3b      	adds	r3, r7, #4
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7ff ffea 	bl	8011c7e <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8011caa:	4603      	mov	r3, r0
 8011cac:	4619      	mov	r1, r3
 8011cae:	68f8      	ldr	r0, [r7, #12]
 8011cb0:	f000 f817 	bl	8011ce2 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EEC1EOS2_>
 8011cb4:	6839      	ldr	r1, [r7, #0]
 8011cb6:	68f8      	ldr	r0, [r7, #12]
 8011cb8:	f7fe fc46 	bl	8010548 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	68ba      	ldr	r2, [r7, #8]
 8011cc0:	601a      	str	r2, [r3, #0]
	{ }
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	3710      	adds	r7, #16
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}

08011ccc <_ZNSt10_Head_baseILj0EP10DigitalPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8011ccc:	b480      	push	{r7}
 8011cce:	b083      	sub	sp, #12
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	370c      	adds	r7, #12
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce0:	4770      	bx	lr

08011ce2 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8011ce2:	b580      	push	{r7, lr}
 8011ce4:	b082      	sub	sp, #8
 8011ce6:	af00      	add	r7, sp, #0
 8011ce8:	6078      	str	r0, [r7, #4]
 8011cea:	6039      	str	r1, [r7, #0]
 8011cec:	6838      	ldr	r0, [r7, #0]
 8011cee:	f7ff ffc6 	bl	8011c7e <_ZSt4moveIRSt14default_deleteI10DigitalPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	3708      	adds	r7, #8
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}

08011cfc <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b082      	sub	sp, #8
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	4a05      	ldr	r2, [pc, #20]	@ (8011d1c <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	601a      	str	r2, [r3, #0]
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7fa fd01 	bl	800c714 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	4618      	mov	r0, r3
 8011d16:	3708      	adds	r7, #8
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	0802b52c 	.word	0x0802b52c

08011d20 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f7ff ffe7 	bl	8011cfc <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8011d2e:	2110      	movs	r1, #16
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f016 fcd0 	bl	80286d6 <_ZdlPvj>
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3708      	adds	r7, #8
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}

08011d40 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b082      	sub	sp, #8
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	330c      	adds	r3, #12
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f000 f83f 	bl	8011dd0 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8011d52:	4602      	mov	r2, r0
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	68db      	ldr	r3, [r3, #12]
 8011d58:	4619      	mov	r1, r3
 8011d5a:	4610      	mov	r0, r2
 8011d5c:	f7ff fcc2 	bl	80116e4 <_ZNKSt14default_deleteI10DigitalPinEclEPS0_>
 8011d60:	bf00      	nop
 8011d62:	3708      	adds	r7, #8
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}

08011d68 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b086      	sub	sp, #24
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	330c      	adds	r3, #12
 8011d74:	4618      	mov	r0, r3
 8011d76:	f000 f837 	bl	8011de8 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8011d7a:	4602      	mov	r2, r0
 8011d7c:	f107 0314 	add.w	r3, r7, #20
 8011d80:	4611      	mov	r1, r2
 8011d82:	4618      	mov	r0, r3
 8011d84:	f000 f83c 	bl	8011e00 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8011d88:	f107 0114 	add.w	r1, r7, #20
 8011d8c:	f107 030c 	add.w	r3, r7, #12
 8011d90:	687a      	ldr	r2, [r7, #4]
 8011d92:	4618      	mov	r0, r3
 8011d94:	f000 f841 	bl	8011e1a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f7ff ffaf 	bl	8011cfc <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8011d9e:	f107 030c 	add.w	r3, r7, #12
 8011da2:	4618      	mov	r0, r3
 8011da4:	f000 f84d 	bl	8011e42 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8011da8:	f107 0314 	add.w	r3, r7, #20
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7ff fdd9 	bl	8011964 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8011db2:	3718      	adds	r7, #24
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 8011db8:	b480      	push	{r7}
 8011dba:	b083      	sub	sp, #12
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	6039      	str	r1, [r7, #0]
        return nullptr;
 8011dc2:	2300      	movs	r3, #0
      }
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	370c      	adds	r7, #12
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dce:	4770      	bx	lr

08011dd0 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b082      	sub	sp, #8
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f000 f847 	bl	8011e6c <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EE6_S_getERS3_>
 8011dde:	4603      	mov	r3, r0
 8011de0:	4618      	mov	r0, r3
 8011de2:	3708      	adds	r7, #8
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}

08011de8 <_ZNSt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f7fe fc78 	bl	80106e6 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8011df6:	4603      	mov	r3, r0
 8011df8:	4618      	mov	r0, r3
 8011dfa:	3708      	adds	r7, #8
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}

08011e00 <_ZNSaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b082      	sub	sp, #8
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6039      	str	r1, [r7, #0]
 8011e0a:	6878      	ldr	r0, [r7, #4]
 8011e0c:	f7ff fe2b 	bl	8011a66 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	4618      	mov	r0, r3
 8011e14:	3708      	adds	r7, #8
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}

08011e1a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8011e1a:	b580      	push	{r7, lr}
 8011e1c:	b084      	sub	sp, #16
 8011e1e:	af00      	add	r7, sp, #0
 8011e20:	60f8      	str	r0, [r7, #12]
 8011e22:	60b9      	str	r1, [r7, #8]
 8011e24:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8011e26:	68b8      	ldr	r0, [r7, #8]
 8011e28:	f000 f82b 	bl	8011e82 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8011e2c:	4602      	mov	r2, r0
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	601a      	str	r2, [r3, #0]
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	687a      	ldr	r2, [r7, #4]
 8011e36:	605a      	str	r2, [r3, #4]
      { }
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	3710      	adds	r7, #16
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}

08011e42 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8011e42:	b580      	push	{r7, lr}
 8011e44:	b082      	sub	sp, #8
 8011e46:	af00      	add	r7, sp, #0
 8011e48:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	685b      	ldr	r3, [r3, #4]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d007      	beq.n	8011e62 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	6818      	ldr	r0, [r3, #0]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	2201      	movs	r2, #1
 8011e5c:	4619      	mov	r1, r3
 8011e5e:	f000 f81b 	bl	8011e98 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	4618      	mov	r0, r3
 8011e66:	3708      	adds	r7, #8
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}

08011e6c <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI10DigitalPinELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8011e6c:	b480      	push	{r7}
 8011e6e:	b083      	sub	sp, #12
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	4618      	mov	r0, r3
 8011e78:	370c      	adds	r7, #12
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e80:	4770      	bx	lr

08011e82 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8011e82:	b480      	push	{r7}
 8011e84:	b083      	sub	sp, #12
 8011e86:	af00      	add	r7, sp, #0
 8011e88:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	370c      	adds	r7, #12
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr

08011e98 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b084      	sub	sp, #16
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	60f8      	str	r0, [r7, #12]
 8011ea0:	60b9      	str	r1, [r7, #8]
 8011ea2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8011ea4:	687a      	ldr	r2, [r7, #4]
 8011ea6:	68b9      	ldr	r1, [r7, #8]
 8011ea8:	68f8      	ldr	r0, [r7, #12]
 8011eaa:	f000 f804 	bl	8011eb6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8011eae:	bf00      	nop
 8011eb0:	3710      	adds	r7, #16
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}

08011eb6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP10DigitalPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8011eb6:	b580      	push	{r7, lr}
 8011eb8:	b084      	sub	sp, #16
 8011eba:	af00      	add	r7, sp, #0
 8011ebc:	60f8      	str	r0, [r7, #12]
 8011ebe:	60b9      	str	r1, [r7, #8]
 8011ec0:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	011b      	lsls	r3, r3, #4
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	68b8      	ldr	r0, [r7, #8]
 8011eca:	f016 fc04 	bl	80286d6 <_ZdlPvj>
      }
 8011ece:	3710      	adds	r7, #16
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}

08011ed4 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b082      	sub	sp, #8
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
 8011edc:	4a09      	ldr	r2, [pc, #36]	@ (8011f04 <_ZN6ModuleC1Ev+0x30>)
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	601a      	str	r2, [r3, #0]
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	751a      	strb	r2, [r3, #20]
{
	this->counter = 0;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2200      	movs	r2, #0
 8011eec:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2201      	movs	r2, #1
 8011ef2:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 8011ef4:	4804      	ldr	r0, [pc, #16]	@ (8011f08 <_ZN6ModuleC1Ev+0x34>)
 8011ef6:	f017 fb19 	bl	802952c <puts>
}
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	4618      	mov	r0, r3
 8011efe:	3708      	adds	r7, #8
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}
 8011f04:	0802b56c 	.word	0x0802b56c
 8011f08:	0802a9cc 	.word	0x0802a9cc

08011f0c <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 8011f0c:	b480      	push	{r7}
 8011f0e:	b083      	sub	sp, #12
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
 8011f14:	4a04      	ldr	r2, [pc, #16]	@ (8011f28 <_ZN6ModuleD1Ev+0x1c>)
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	601a      	str	r2, [r3, #0]
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	370c      	adds	r7, #12
 8011f20:	46bd      	mov	sp, r7
 8011f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f26:	4770      	bx	lr
 8011f28:	0802b56c 	.word	0x0802b56c

08011f2c <_ZN6ModuleD0Ev>:
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b082      	sub	sp, #8
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f7ff ffe9 	bl	8011f0c <_ZN6ModuleD1Ev>
 8011f3a:	2118      	movs	r1, #24
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f016 fbca 	bl	80286d6 <_ZdlPvj>
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	4618      	mov	r0, r3
 8011f46:	3708      	adds	r7, #8
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bd80      	pop	{r7, pc}

08011f4c <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b082      	sub	sp, #8
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
	++this->counter;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	691b      	ldr	r3, [r3, #16]
 8011f58:	1c5a      	adds	r2, r3, #1
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	691a      	ldr	r2, [r3, #16]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	68db      	ldr	r3, [r3, #12]
 8011f66:	429a      	cmp	r2, r3
 8011f68:	db08      	blt.n	8011f7c <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	3310      	adds	r3, #16
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	6878      	ldr	r0, [r7, #4]
 8011f74:	4798      	blx	r3
		this->counter = 0;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	611a      	str	r2, [r3, #16]
	}

	this->update();
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	3308      	adds	r3, #8
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	4798      	blx	r3
}
 8011f88:	bf00      	nop
 8011f8a:	3708      	adds	r7, #8
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}

08011f90 <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 8011f90:	b480      	push	{r7}
 8011f92:	b083      	sub	sp, #12
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	bf00      	nop
 8011f9a:	370c      	adds	r7, #12
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa2:	4770      	bx	lr

08011fa4 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8011fa4:	b480      	push	{r7}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
 8011fac:	bf00      	nop
 8011fae:	370c      	adds	r7, #12
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb6:	4770      	bx	lr

08011fb8 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8011fb8:	b480      	push	{r7}
 8011fba:	b083      	sub	sp, #12
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
 8011fc0:	bf00      	nop
 8011fc2:	370c      	adds	r7, #12
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fca:	4770      	bx	lr

08011fcc <_ZN6Module9configureEv>:
void Module::configure(){}
 8011fcc:	b480      	push	{r7}
 8011fce:	b083      	sub	sp, #12
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
 8011fd4:	bf00      	nop
 8011fd6:	370c      	adds	r7, #12
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr

08011fe0 <_ZN13ModuleFactoryC1Ev>:

class ModuleFactory {
private:

    // Private constructor for singleton
    ModuleFactory() {};
 8011fe0:	b480      	push	{r7}
 8011fe2:	b083      	sub	sp, #12
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	4618      	mov	r0, r3
 8011fec:	370c      	adds	r7, #12
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff4:	4770      	bx	lr
	...

08011ff8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora>:

// Create module based on thread and type
std::shared_ptr<Module> ModuleFactory::createModule(const char* _tname,
                                   const char* _mtype,
                                   const JsonVariant config,
                                   Remora* instance) {
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b094      	sub	sp, #80	@ 0x50
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	60f8      	str	r0, [r7, #12]
 8012000:	60b9      	str	r1, [r7, #8]
 8012002:	607a      	str	r2, [r7, #4]
 8012004:	603b      	str	r3, [r7, #0]
    if (strcmp(_tname, "Base") == 0) {
 8012006:	4969      	ldr	r1, [pc, #420]	@ (80121ac <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1b4>)
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f7ee f969 	bl	80002e0 <strcmp>
 801200e:	4603      	mov	r3, r0
 8012010:	2b00      	cmp	r3, #0
 8012012:	d116      	bne.n	8012042 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x4a>
        if (strcmp(_mtype, "Stepgen") == 0) {
 8012014:	4966      	ldr	r1, [pc, #408]	@ (80121b0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1b8>)
 8012016:	6838      	ldr	r0, [r7, #0]
 8012018:	f7ee f962 	bl	80002e0 <strcmp>
 801201c:	4603      	mov	r3, r0
 801201e:	2b00      	cmp	r3, #0
 8012020:	f040 80bc 	bne.w	801219c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a4>
            return Stepgen::create(config, instance);
 8012024:	f107 0310 	add.w	r3, r7, #16
 8012028:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801202c:	4618      	mov	r0, r3
 801202e:	f7f5 fd13 	bl	8007a58 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	f107 0110 	add.w	r1, r7, #16
 8012038:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801203a:	4618      	mov	r0, r3
 801203c:	f001 fe54 	bl	8013ce8 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
    } else {
        printf("Error: Unknown thread type '%s' or module type '%s'\n", _tname, _mtype);
    }

    return nullptr;
}
 8012040:	e0b0      	b.n	80121a4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
    } else if (strcmp(_tname, "Servo") == 0) {
 8012042:	495c      	ldr	r1, [pc, #368]	@ (80121b4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1bc>)
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f7ee f94b 	bl	80002e0 <strcmp>
 801204a:	4603      	mov	r3, r0
 801204c:	2b00      	cmp	r3, #0
 801204e:	d157      	bne.n	8012100 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x108>
        if (strcmp(_mtype, "Blink") == 0) {
 8012050:	4959      	ldr	r1, [pc, #356]	@ (80121b8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1c0>)
 8012052:	6838      	ldr	r0, [r7, #0]
 8012054:	f7ee f944 	bl	80002e0 <strcmp>
 8012058:	4603      	mov	r3, r0
 801205a:	2b00      	cmp	r3, #0
 801205c:	d10e      	bne.n	801207c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x84>
            return Blink::create(config, instance);
 801205e:	f107 0318 	add.w	r3, r7, #24
 8012062:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8012066:	4618      	mov	r0, r3
 8012068:	f7f5 fcf6 	bl	8007a58 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	f107 0118 	add.w	r1, r7, #24
 8012072:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012074:	4618      	mov	r0, r3
 8012076:	f7fd f8e3 	bl	800f240 <_ZN5Blink6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 801207a:	e093      	b.n	80121a4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
        } else if (strcmp(_mtype, "Reset Pin") == 0) {
 801207c:	494f      	ldr	r1, [pc, #316]	@ (80121bc <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1c4>)
 801207e:	6838      	ldr	r0, [r7, #0]
 8012080:	f7ee f92e 	bl	80002e0 <strcmp>
 8012084:	4603      	mov	r3, r0
 8012086:	2b00      	cmp	r3, #0
 8012088:	d10e      	bne.n	80120a8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xb0>
            return ResetPin::create(config, instance);
 801208a:	f107 0320 	add.w	r3, r7, #32
 801208e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8012092:	4618      	mov	r0, r3
 8012094:	f7f5 fce0 	bl	8007a58 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	f107 0120 	add.w	r1, r7, #32
 801209e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80120a0:	4618      	mov	r0, r3
 80120a2:	f000 f903 	bl	80122ac <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 80120a6:	e07d      	b.n	80121a4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
        } else if (strcmp(_mtype, "Digital Pin") == 0) {
 80120a8:	4945      	ldr	r1, [pc, #276]	@ (80121c0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1c8>)
 80120aa:	6838      	ldr	r0, [r7, #0]
 80120ac:	f7ee f918 	bl	80002e0 <strcmp>
 80120b0:	4603      	mov	r3, r0
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d10e      	bne.n	80120d4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0xdc>
            return DigitalPin::create(config, instance);
 80120b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80120ba:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80120be:	4618      	mov	r0, r3
 80120c0:	f7f5 fcca 	bl	8007a58 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80120ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80120cc:	4618      	mov	r0, r3
 80120ce:	f7fe ffc9 	bl	8011064 <_ZN10DigitalPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 80120d2:	e067      	b.n	80121a4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
        } else if (strcmp(_mtype, "Sigma Delta") == 0) {
 80120d4:	493b      	ldr	r1, [pc, #236]	@ (80121c4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1cc>)
 80120d6:	6838      	ldr	r0, [r7, #0]
 80120d8:	f7ee f902 	bl	80002e0 <strcmp>
 80120dc:	4603      	mov	r3, r0
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d15c      	bne.n	801219c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a4>
            return SigmaDelta::create(config, instance);
 80120e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80120e6:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7f5 fcb4 	bl	8007a58 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80120f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80120f8:	4618      	mov	r0, r3
 80120fa:	f000 fe71 	bl	8012de0 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 80120fe:	e051      	b.n	80121a4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
    } else if (strcmp(_tname, "On load") == 0) {
 8012100:	4931      	ldr	r1, [pc, #196]	@ (80121c8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1d0>)
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f7ee f8ec 	bl	80002e0 <strcmp>
 8012108:	4603      	mov	r3, r0
 801210a:	2b00      	cmp	r3, #0
 801210c:	d141      	bne.n	8012192 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x19a>
    	if (strcmp(_mtype, "TMC2208") == 0) {
 801210e:	492f      	ldr	r1, [pc, #188]	@ (80121cc <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1d4>)
 8012110:	6838      	ldr	r0, [r7, #0]
 8012112:	f7ee f8e5 	bl	80002e0 <strcmp>
 8012116:	4603      	mov	r3, r0
 8012118:	2b00      	cmp	r3, #0
 801211a:	d10e      	bne.n	801213a <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x142>
   	        return TMC2208::create(config, instance);
 801211c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8012120:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8012124:	4618      	mov	r0, r3
 8012126:	f7f5 fc97 	bl	8007a58 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8012130:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012132:	4618      	mov	r0, r3
 8012134:	f003 f822 	bl	801517c <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8012138:	e034      	b.n	80121a4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
   	    } else if (strcmp(_mtype, "TMC2209") == 0) {
 801213a:	4925      	ldr	r1, [pc, #148]	@ (80121d0 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1d8>)
 801213c:	6838      	ldr	r0, [r7, #0]
 801213e:	f7ee f8cf 	bl	80002e0 <strcmp>
 8012142:	4603      	mov	r3, r0
 8012144:	2b00      	cmp	r3, #0
 8012146:	d10e      	bne.n	8012166 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x16e>
    		return TMC2209::create(config, instance);
 8012148:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801214c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8012150:	4618      	mov	r0, r3
 8012152:	f7f5 fc81 	bl	8007a58 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801215c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801215e:	4618      	mov	r0, r3
 8012160:	f005 fe0c 	bl	8017d7c <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8012164:	e01e      	b.n	80121a4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
    	} else if (strcmp(_mtype, "TMC5160") == 0) {
 8012166:	491b      	ldr	r1, [pc, #108]	@ (80121d4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1dc>)
 8012168:	6838      	ldr	r0, [r7, #0]
 801216a:	f7ee f8b9 	bl	80002e0 <strcmp>
 801216e:	4603      	mov	r3, r0
 8012170:	2b00      	cmp	r3, #0
 8012172:	d113      	bne.n	801219c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1a4>
    		return TMC5160::create(config, instance);
 8012174:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8012178:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801217c:	4618      	mov	r0, r3
 801217e:	f7f5 fc6b 	bl	8007a58 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8012188:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801218a:	4618      	mov	r0, r3
 801218c:	f007 fa1c 	bl	80195c8 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>
}
 8012190:	e008      	b.n	80121a4 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1ac>
        printf("Error: Unknown thread type '%s' or module type '%s'\n", _tname, _mtype);
 8012192:	683a      	ldr	r2, [r7, #0]
 8012194:	6879      	ldr	r1, [r7, #4]
 8012196:	4810      	ldr	r0, [pc, #64]	@ (80121d8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantEP6Remora+0x1e0>)
 8012198:	f017 f958 	bl	802944c <iprintf>
    return nullptr;
 801219c:	2100      	movs	r1, #0
 801219e:	68f8      	ldr	r0, [r7, #12]
 80121a0:	f000 f84c 	bl	801223c <_ZNSt10shared_ptrI6ModuleEC1EDn>
}
 80121a4:	68f8      	ldr	r0, [r7, #12]
 80121a6:	3750      	adds	r7, #80	@ 0x50
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}
 80121ac:	0802aa24 	.word	0x0802aa24
 80121b0:	0802aa2c 	.word	0x0802aa2c
 80121b4:	0802aa34 	.word	0x0802aa34
 80121b8:	0802aa3c 	.word	0x0802aa3c
 80121bc:	0802aa44 	.word	0x0802aa44
 80121c0:	0802aa50 	.word	0x0802aa50
 80121c4:	0802aa5c 	.word	0x0802aa5c
 80121c8:	0802aa68 	.word	0x0802aa68
 80121cc:	0802aa70 	.word	0x0802aa70
 80121d0:	0802aa78 	.word	0x0802aa78
 80121d4:	0802aa80 	.word	0x0802aa80
 80121d8:	0802aa88 	.word	0x0802aa88

080121dc <_ZN13ModuleFactory11getInstanceEv>:


// Static instance accessor
ModuleFactory* ModuleFactory::getInstance() {
 80121dc:	b598      	push	{r3, r4, r7, lr}
 80121de:	af00      	add	r7, sp, #0
    static ModuleFactory* instance = new ModuleFactory();
 80121e0:	4b14      	ldr	r3, [pc, #80]	@ (8012234 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	f3bf 8f5b 	dmb	ish
 80121e8:	f003 0301 	and.w	r3, r3, #1
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	bf0c      	ite	eq
 80121f0:	2301      	moveq	r3, #1
 80121f2:	2300      	movne	r3, #0
 80121f4:	b2db      	uxtb	r3, r3
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d017      	beq.n	801222a <_ZN13ModuleFactory11getInstanceEv+0x4e>
 80121fa:	480e      	ldr	r0, [pc, #56]	@ (8012234 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 80121fc:	f016 fa6d 	bl	80286da <__cxa_guard_acquire>
 8012200:	4603      	mov	r3, r0
 8012202:	2b00      	cmp	r3, #0
 8012204:	bf14      	ite	ne
 8012206:	2301      	movne	r3, #1
 8012208:	2300      	moveq	r3, #0
 801220a:	b2db      	uxtb	r3, r3
 801220c:	2b00      	cmp	r3, #0
 801220e:	d00c      	beq.n	801222a <_ZN13ModuleFactory11getInstanceEv+0x4e>
 8012210:	2001      	movs	r0, #1
 8012212:	f016 fa71 	bl	80286f8 <_Znwj>
 8012216:	4603      	mov	r3, r0
 8012218:	461c      	mov	r4, r3
 801221a:	4620      	mov	r0, r4
 801221c:	f7ff fee0 	bl	8011fe0 <_ZN13ModuleFactoryC1Ev>
 8012220:	4b05      	ldr	r3, [pc, #20]	@ (8012238 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 8012222:	601c      	str	r4, [r3, #0]
 8012224:	4803      	ldr	r0, [pc, #12]	@ (8012234 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 8012226:	f016 fa64 	bl	80286f2 <__cxa_guard_release>
    return instance;
 801222a:	4b03      	ldr	r3, [pc, #12]	@ (8012238 <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 801222c:	681b      	ldr	r3, [r3, #0]
}
 801222e:	4618      	mov	r0, r3
 8012230:	bd98      	pop	{r3, r4, r7, pc}
 8012232:	bf00      	nop
 8012234:	24000414 	.word	0x24000414
 8012238:	24000410 	.word	0x24000410

0801223c <_ZNSt10shared_ptrI6ModuleEC1EDn>:
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 801223c:	b580      	push	{r7, lr}
 801223e:	b082      	sub	sp, #8
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
 8012244:	6039      	str	r1, [r7, #0]
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f000 f805 	bl	8012256 <_ZNSt10shared_ptrI6ModuleEC1Ev>
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	4618      	mov	r0, r3
 8012250:	3708      	adds	r7, #8
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}

08012256 <_ZNSt10shared_ptrI6ModuleEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 8012256:	b580      	push	{r7, lr}
 8012258:	b082      	sub	sp, #8
 801225a:	af00      	add	r7, sp, #0
 801225c:	6078      	str	r0, [r7, #4]
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	4618      	mov	r0, r3
 8012262:	f000 f805 	bl	8012270 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	4618      	mov	r0, r3
 801226a:	3708      	adds	r7, #8
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}

08012270 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 8012270:	b580      	push	{r7, lr}
 8012272:	b082      	sub	sp, #8
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2200      	movs	r2, #0
 801227c:	601a      	str	r2, [r3, #0]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	3304      	adds	r3, #4
 8012282:	4618      	mov	r0, r3
 8012284:	f7fb f810 	bl	800d2a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	4618      	mov	r0, r3
 801228c:	3708      	adds	r7, #8
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}

08012292 <_ZN6Remora8getResetEv>:
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
    volatile rxData_t* getRxData() { return &rxData; }
    volatile bool* getReset() { return &reset; };
 8012292:	b480      	push	{r7}
 8012294:	b083      	sub	sp, #12
 8012296:	af00      	add	r7, sp, #0
 8012298:	6078      	str	r0, [r7, #4]
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	330c      	adds	r3, #12
 801229e:	4618      	mov	r0, r3
 80122a0:	370c      	adds	r7, #12
 80122a2:	46bd      	mov	sp, r7
 80122a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a8:	4770      	bx	lr
	...

080122ac <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "resetPin.h"
#include <cstdio>

std::shared_ptr<Module> ResetPin::create(const JsonObject& config, Remora* instance) {
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b094      	sub	sp, #80	@ 0x50
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	60f8      	str	r0, [r7, #12]
 80122b4:	60b9      	str	r1, [r7, #8]
 80122b6:	607a      	str	r2, [r7, #4]
	const char* comment = config["Comment"];
 80122b8:	f107 0314 	add.w	r3, r7, #20
 80122bc:	4a1f      	ldr	r2, [pc, #124]	@ (801233c <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x90>)
 80122be:	68b9      	ldr	r1, [r7, #8]
 80122c0:	4618      	mov	r0, r3
 80122c2:	f000 f886 	bl	80123d2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80122c6:	f107 0314 	add.w	r3, r7, #20
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7f5 fbf8 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80122d0:	64f8      	str	r0, [r7, #76]	@ 0x4c
	printf("%s\n", comment);
 80122d2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80122d4:	f017 f92a 	bl	802952c <puts>

	const char* pin = config["Pin"];
 80122d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80122dc:	4a18      	ldr	r2, [pc, #96]	@ (8012340 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x94>)
 80122de:	68b9      	ldr	r1, [r7, #8]
 80122e0:	4618      	mov	r0, r3
 80122e2:	f7fd f871 	bl	800f3c8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80122e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7f5 fbe8 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80122f0:	4603      	mov	r3, r0
 80122f2:	613b      	str	r3, [r7, #16]
	printf("Make Reset Pin at pin %s\n", pin);
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	4619      	mov	r1, r3
 80122f8:	4812      	ldr	r0, [pc, #72]	@ (8012344 <_ZN8ResetPin6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x98>)
 80122fa:	f017 f8a7 	bl	802944c <iprintf>

	return std::make_unique<ResetPin>(instance->getReset(), pin);
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f7ff ffc7 	bl	8012292 <_ZN6Remora8getResetEv>
 8012304:	4603      	mov	r3, r0
 8012306:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012308:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801230c:	f107 0210 	add.w	r2, r7, #16
 8012310:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8012314:	4618      	mov	r0, r3
 8012316:	f000 f881 	bl	801241c <_ZSt11make_uniqueI8ResetPinJPVbRPKcEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 801231a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801231e:	4619      	mov	r1, r3
 8012320:	68f8      	ldr	r0, [r7, #12]
 8012322:	f000 f8d9 	bl	80124d8 <_ZNSt10shared_ptrI6ModuleEC1I8ResetPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 8012326:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801232a:	4618      	mov	r0, r3
 801232c:	f000 f8b2 	bl	8012494 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev>
 8012330:	bf00      	nop
}
 8012332:	68f8      	ldr	r0, [r7, #12]
 8012334:	3750      	adds	r7, #80	@ 0x50
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}
 801233a:	bf00      	nop
 801233c:	0802aac0 	.word	0x0802aac0
 8012340:	0802aac8 	.word	0x0802aac8
 8012344:	0802aacc 	.word	0x0802aacc

08012348 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

ResetPin::ResetPin(volatile bool* ptrReset, const std::string& portAndPin) :
 8012348:	b590      	push	{r4, r7, lr}
 801234a:	b085      	sub	sp, #20
 801234c:	af00      	add	r7, sp, #0
 801234e:	60f8      	str	r0, [r7, #12]
 8012350:	60b9      	str	r1, [r7, #8]
 8012352:	607a      	str	r2, [r7, #4]
    ptrReset(ptrReset),
    portAndPin(portAndPin),
    pin(new Pin(portAndPin, 0)) {}  // Input mode (0x0)
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	4618      	mov	r0, r3
 8012358:	f7ff fdbc 	bl	8011ed4 <_ZN6ModuleC1Ev>
 801235c:	4a0e      	ldr	r2, [pc, #56]	@ (8012398 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x50>)
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	601a      	str	r2, [r3, #0]
    ptrReset(ptrReset),
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	68ba      	ldr	r2, [r7, #8]
 8012366:	619a      	str	r2, [r3, #24]
    portAndPin(portAndPin),
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	331c      	adds	r3, #28
 801236c:	6879      	ldr	r1, [r7, #4]
 801236e:	4618      	mov	r0, r3
 8012370:	f016 fccd 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    pin(new Pin(portAndPin, 0)) {}  // Input mode (0x0)
 8012374:	2040      	movs	r0, #64	@ 0x40
 8012376:	f016 f9bf 	bl	80286f8 <_Znwj>
 801237a:	4603      	mov	r3, r0
 801237c:	461c      	mov	r4, r3
 801237e:	2200      	movs	r2, #0
 8012380:	6879      	ldr	r1, [r7, #4]
 8012382:	4620      	mov	r0, r4
 8012384:	f7f2 fc14 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	635c      	str	r4, [r3, #52]	@ 0x34
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	4618      	mov	r0, r3
 8012390:	3714      	adds	r7, #20
 8012392:	46bd      	mov	sp, r7
 8012394:	bd90      	pop	{r4, r7, pc}
 8012396:	bf00      	nop
 8012398:	0802b5ac 	.word	0x0802b5ac

0801239c <_ZN8ResetPin6updateEv>:

void ResetPin::update() {
 801239c:	b590      	push	{r4, r7, lr}
 801239e:	b083      	sub	sp, #12
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
    *ptrReset = pin->get();
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	699c      	ldr	r4, [r3, #24]
 80123ac:	4610      	mov	r0, r2
 80123ae:	f7f2 fd93 	bl	8004ed8 <_ZNK3Pin3getEv>
 80123b2:	4603      	mov	r3, r0
 80123b4:	7023      	strb	r3, [r4, #0]
}
 80123b6:	bf00      	nop
 80123b8:	370c      	adds	r7, #12
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd90      	pop	{r4, r7, pc}

080123be <_ZN8ResetPin10slowUpdateEv>:

void ResetPin::slowUpdate() {
 80123be:	b480      	push	{r7}
 80123c0:	b083      	sub	sp, #12
 80123c2:	af00      	add	r7, sp, #0
 80123c4:	6078      	str	r0, [r7, #4]
    return;
 80123c6:	bf00      	nop
}
 80123c8:	370c      	adds	r7, #12
 80123ca:	46bd      	mov	sp, r7
 80123cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d0:	4770      	bx	lr

080123d2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 80123d2:	b580      	push	{r7, lr}
 80123d4:	b08c      	sub	sp, #48	@ 0x30
 80123d6:	af02      	add	r7, sp, #8
 80123d8:	60f8      	str	r0, [r7, #12]
 80123da:	60b9      	str	r1, [r7, #8]
 80123dc:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 80123de:	68ba      	ldr	r2, [r7, #8]
 80123e0:	f107 0314 	add.w	r3, r7, #20
 80123e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80123e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80123ec:	f107 031c 	add.w	r3, r7, #28
 80123f0:	6879      	ldr	r1, [r7, #4]
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7f5 fea6 	bl	8008144 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80123f8:	466a      	mov	r2, sp
 80123fa:	f107 0320 	add.w	r3, r7, #32
 80123fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012402:	e882 0003 	stmia.w	r2, {r0, r1}
 8012406:	69fb      	ldr	r3, [r7, #28]
 8012408:	f107 0214 	add.w	r2, r7, #20
 801240c:	ca06      	ldmia	r2, {r1, r2}
 801240e:	68f8      	ldr	r0, [r7, #12]
 8012410:	f7f5 fcc5 	bl	8007d9e <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8012414:	68f8      	ldr	r0, [r7, #12]
 8012416:	3728      	adds	r7, #40	@ 0x28
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}

0801241c <_ZSt11make_uniqueI8ResetPinJPVbRPKcEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 801241c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801241e:	b08d      	sub	sp, #52	@ 0x34
 8012420:	af00      	add	r7, sp, #0
 8012422:	60f8      	str	r0, [r7, #12]
 8012424:	60b9      	str	r1, [r7, #8]
 8012426:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8012428:	2038      	movs	r0, #56	@ 0x38
 801242a:	f016 f965 	bl	80286f8 <_Znwj>
 801242e:	4603      	mov	r3, r0
 8012430:	461e      	mov	r6, r3
 8012432:	68b8      	ldr	r0, [r7, #8]
 8012434:	f000 f863 	bl	80124fe <_ZSt7forwardIPVbEOT_RNSt16remove_referenceIS2_E4typeE>
 8012438:	4603      	mov	r3, r0
 801243a:	681c      	ldr	r4, [r3, #0]
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f7fd f91e 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8012442:	4603      	mov	r3, r0
 8012444:	681d      	ldr	r5, [r3, #0]
 8012446:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801244a:	4618      	mov	r0, r3
 801244c:	f016 f965 	bl	802871a <_ZNSaIcEC1Ev>
 8012450:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012454:	f107 0314 	add.w	r3, r7, #20
 8012458:	4629      	mov	r1, r5
 801245a:	4618      	mov	r0, r3
 801245c:	f7f5 faaa 	bl	80079b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8012460:	f107 0314 	add.w	r3, r7, #20
 8012464:	461a      	mov	r2, r3
 8012466:	4621      	mov	r1, r4
 8012468:	4630      	mov	r0, r6
 801246a:	f7ff ff6d 	bl	8012348 <_ZN8ResetPinC1EPVbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 801246e:	4631      	mov	r1, r6
 8012470:	68f8      	ldr	r0, [r7, #12]
 8012472:	f000 f85f 	bl	8012534 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8012476:	f107 0314 	add.w	r3, r7, #20
 801247a:	4618      	mov	r0, r3
 801247c:	f016 fa37 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8012480:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012484:	4618      	mov	r0, r3
 8012486:	f016 f949 	bl	802871c <_ZNSaIcED1Ev>
 801248a:	bf00      	nop
 801248c:	68f8      	ldr	r0, [r7, #12]
 801248e:	3734      	adds	r7, #52	@ 0x34
 8012490:	46bd      	mov	sp, r7
 8012492:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012494 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8012494:	b590      	push	{r4, r7, lr}
 8012496:	b085      	sub	sp, #20
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	4618      	mov	r0, r3
 80124a0:	f000 f857 	bl	8012552 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 80124a4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d00c      	beq.n	80124c8 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f000 f85c 	bl	801256c <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>
 80124b4:	4604      	mov	r4, r0
 80124b6:	68f8      	ldr	r0, [r7, #12]
 80124b8:	f000 f865 	bl	8012586 <_ZSt4moveIRP8ResetPinEONSt16remove_referenceIT_E4typeEOS4_>
 80124bc:	4603      	mov	r3, r0
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	4619      	mov	r1, r3
 80124c2:	4620      	mov	r0, r4
 80124c4:	f000 f892 	bl	80125ec <_ZNKSt14default_deleteI8ResetPinEclEPS0_>
	__ptr = pointer();
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	2200      	movs	r2, #0
 80124cc:	601a      	str	r2, [r3, #0]
      }
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	4618      	mov	r0, r3
 80124d2:	3714      	adds	r7, #20
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd90      	pop	{r4, r7, pc}

080124d8 <_ZNSt10shared_ptrI6ModuleEC1I8ResetPinSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 80124d8:	b590      	push	{r4, r7, lr}
 80124da:	b083      	sub	sp, #12
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
 80124e0:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80124e2:	687c      	ldr	r4, [r7, #4]
 80124e4:	6838      	ldr	r0, [r7, #0]
 80124e6:	f000 f892 	bl	801260e <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80124ea:	4603      	mov	r3, r0
 80124ec:	4619      	mov	r1, r3
 80124ee:	4620      	mov	r0, r4
 80124f0:	f000 f898 	bl	8012624 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	4618      	mov	r0, r3
 80124f8:	370c      	adds	r7, #12
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd90      	pop	{r4, r7, pc}

080124fe <_ZSt7forwardIPVbEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80124fe:	b480      	push	{r7}
 8012500:	b083      	sub	sp, #12
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	4618      	mov	r0, r3
 801250a:	370c      	adds	r7, #12
 801250c:	46bd      	mov	sp, r7
 801250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012512:	4770      	bx	lr

08012514 <_ZNSt15__uniq_ptr_dataI8ResetPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
 801251c:	6039      	str	r1, [r7, #0]
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	683a      	ldr	r2, [r7, #0]
 8012522:	4611      	mov	r1, r2
 8012524:	4618      	mov	r0, r3
 8012526:	f000 f8b5 	bl	8012694 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EEC1EPS0_>
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	4618      	mov	r0, r3
 801252e:	3708      	adds	r7, #8
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}

08012534 <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8012534:	b580      	push	{r7, lr}
 8012536:	b082      	sub	sp, #8
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	6839      	ldr	r1, [r7, #0]
 8012542:	4618      	mov	r0, r3
 8012544:	f7ff ffe6 	bl	8012514 <_ZNSt15__uniq_ptr_dataI8ResetPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	4618      	mov	r0, r3
 801254c:	3708      	adds	r7, #8
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}

08012552 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8012552:	b580      	push	{r7, lr}
 8012554:	b082      	sub	sp, #8
 8012556:	af00      	add	r7, sp, #0
 8012558:	6078      	str	r0, [r7, #4]
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	4618      	mov	r0, r3
 801255e:	f000 f8ad 	bl	80126bc <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8012562:	4603      	mov	r3, r0
 8012564:	4618      	mov	r0, r3
 8012566:	3708      	adds	r7, #8
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}

0801256c <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	4618      	mov	r0, r3
 8012578:	f000 f8ad 	bl	80126d6 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE10_M_deleterEv>
 801257c:	4603      	mov	r3, r0
 801257e:	4618      	mov	r0, r3
 8012580:	3708      	adds	r7, #8
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}

08012586 <_ZSt4moveIRP8ResetPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8012586:	b480      	push	{r7}
 8012588:	b083      	sub	sp, #12
 801258a:	af00      	add	r7, sp, #0
 801258c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	4618      	mov	r0, r3
 8012592:	370c      	adds	r7, #12
 8012594:	46bd      	mov	sp, r7
 8012596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259a:	4770      	bx	lr

0801259c <_ZN8ResetPinD1Ev>:
#include "../../drivers/pin/pin.h"

// Global PRUreset variable (declared in extern.h or another source file)
extern volatile bool PRUreset;

class ResetPin : public Module {
 801259c:	b580      	push	{r7, lr}
 801259e:	b082      	sub	sp, #8
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	4a08      	ldr	r2, [pc, #32]	@ (80125c8 <_ZN8ResetPinD1Ev+0x2c>)
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	601a      	str	r2, [r3, #0]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	331c      	adds	r3, #28
 80125ae:	4618      	mov	r0, r3
 80125b0:	f016 f99d 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	4618      	mov	r0, r3
 80125b8:	f7ff fca8 	bl	8011f0c <_ZN6ModuleD1Ev>
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	4618      	mov	r0, r3
 80125c0:	3708      	adds	r7, #8
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bd80      	pop	{r7, pc}
 80125c6:	bf00      	nop
 80125c8:	0802b5ac 	.word	0x0802b5ac

080125cc <_ZN8ResetPinD0Ev>:
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b082      	sub	sp, #8
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f7ff ffe1 	bl	801259c <_ZN8ResetPinD1Ev>
 80125da:	2138      	movs	r1, #56	@ 0x38
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f016 f87a 	bl	80286d6 <_ZdlPvj>
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	4618      	mov	r0, r3
 80125e6:	3708      	adds	r7, #8
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd80      	pop	{r7, pc}

080125ec <_ZNKSt14default_deleteI8ResetPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b082      	sub	sp, #8
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
 80125f4:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d004      	beq.n	8012606 <_ZNKSt14default_deleteI8ResetPinEclEPS0_+0x1a>
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	3204      	adds	r2, #4
 8012600:	6812      	ldr	r2, [r2, #0]
 8012602:	4618      	mov	r0, r3
 8012604:	4790      	blx	r2
      }
 8012606:	bf00      	nop
 8012608:	3708      	adds	r7, #8
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}

0801260e <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 801260e:	b480      	push	{r7}
 8012610:	b083      	sub	sp, #12
 8012612:	af00      	add	r7, sp, #0
 8012614:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	4618      	mov	r0, r3
 801261a:	370c      	adds	r7, #12
 801261c:	46bd      	mov	sp, r7
 801261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012622:	4770      	bx	lr

08012624 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 8012624:	b580      	push	{r7, lr}
 8012626:	b084      	sub	sp, #16
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
 801262c:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 801262e:	6838      	ldr	r0, [r7, #0]
 8012630:	f000 f85e 	bl	80126f0 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 8012634:	4602      	mov	r2, r0
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	601a      	str	r2, [r3, #0]
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	3304      	adds	r3, #4
 801263e:	4618      	mov	r0, r3
 8012640:	f7fa fe32 	bl	800d2a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 8012644:	6838      	ldr	r0, [r7, #0]
 8012646:	f000 f853 	bl	80126f0 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 801264a:	4603      	mov	r3, r0
 801264c:	4618      	mov	r0, r3
 801264e:	f000 f85c 	bl	801270a <_ZSt12__to_addressI8ResetPinEPT_S2_>
 8012652:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 8012654:	6838      	ldr	r0, [r7, #0]
 8012656:	f7ff ffda 	bl	801260e <_ZSt4moveIRSt10unique_ptrI8ResetPinSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 801265a:	4602      	mov	r2, r0
 801265c:	f107 0308 	add.w	r3, r7, #8
 8012660:	4611      	mov	r1, r2
 8012662:	4618      	mov	r0, r3
 8012664:	f000 f85c 	bl	8012720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	3304      	adds	r3, #4
 801266c:	f107 0208 	add.w	r2, r7, #8
 8012670:	4611      	mov	r1, r2
 8012672:	4618      	mov	r0, r3
 8012674:	f7fd fa09 	bl	800fa8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8012678:	f107 0308 	add.w	r3, r7, #8
 801267c:	4618      	mov	r0, r3
 801267e:	f7f9 fc16 	bl	800beae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 8012682:	68f9      	ldr	r1, [r7, #12]
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f000 f88d 	bl	80127a4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI8ResetPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	4618      	mov	r0, r3
 801268e:	3710      	adds	r7, #16
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}

08012694 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8012694:	b590      	push	{r4, r7, lr}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	6039      	str	r1, [r7, #0]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	4618      	mov	r0, r3
 80126a2:	f000 f88a 	bl	80127ba <_ZNSt5tupleIJP8ResetPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80126a6:	683c      	ldr	r4, [r7, #0]
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f7ff ff52 	bl	8012552 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 80126ae:	4603      	mov	r3, r0
 80126b0:	601c      	str	r4, [r3, #0]
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	4618      	mov	r0, r3
 80126b6:	370c      	adds	r7, #12
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd90      	pop	{r4, r7, pc}

080126bc <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80126bc:	b580      	push	{r7, lr}
 80126be:	b082      	sub	sp, #8
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	4618      	mov	r0, r3
 80126c8:	f000 f884 	bl	80127d4 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80126cc:	4603      	mov	r3, r0
 80126ce:	4618      	mov	r0, r3
 80126d0:	3708      	adds	r7, #8
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}

080126d6 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80126d6:	b580      	push	{r7, lr}
 80126d8:	b082      	sub	sp, #8
 80126da:	af00      	add	r7, sp, #0
 80126dc:	6078      	str	r0, [r7, #4]
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	4618      	mov	r0, r3
 80126e2:	f000 f883 	bl	80127ec <_ZSt3getILj1EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80126e6:	4603      	mov	r3, r0
 80126e8:	4618      	mov	r0, r3
 80126ea:	3708      	adds	r7, #8
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}

080126f0 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b082      	sub	sp, #8
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	4618      	mov	r0, r3
 80126fc:	f000 f882 	bl	8012804 <_ZNKSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 8012700:	4603      	mov	r3, r0
 8012702:	4618      	mov	r0, r3
 8012704:	3708      	adds	r7, #8
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}

0801270a <_ZSt12__to_addressI8ResetPinEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 801270a:	b480      	push	{r7}
 801270c:	b083      	sub	sp, #12
 801270e:	af00      	add	r7, sp, #0
 8012710:	6078      	str	r0, [r7, #4]
      return __ptr;
 8012712:	687b      	ldr	r3, [r7, #4]
    }
 8012714:	4618      	mov	r0, r3
 8012716:	370c      	adds	r7, #12
 8012718:	46bd      	mov	sp, r7
 801271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271e:	4770      	bx	lr

08012720 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 8012720:	b580      	push	{r7, lr}
 8012722:	b086      	sub	sp, #24
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
 8012728:	6039      	str	r1, [r7, #0]
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2200      	movs	r2, #0
 801272e:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 8012730:	6838      	ldr	r0, [r7, #0]
 8012732:	f7ff ffdd 	bl	80126f0 <_ZNKSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE3getEv>
 8012736:	4603      	mov	r3, r0
 8012738:	2b00      	cmp	r3, #0
 801273a:	bf0c      	ite	eq
 801273c:	2301      	moveq	r3, #1
 801273e:	2300      	movne	r3, #0
 8012740:	b2db      	uxtb	r3, r3
 8012742:	2b00      	cmp	r3, #0
 8012744:	d128      	bne.n	8012798 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 8012746:	f107 030c 	add.w	r3, r7, #12
 801274a:	4618      	mov	r0, r3
 801274c:	f000 f868 	bl	8012820 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 8012750:	f107 030c 	add.w	r3, r7, #12
 8012754:	2101      	movs	r1, #1
 8012756:	4618      	mov	r0, r3
 8012758:	f000 f87a 	bl	8012850 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 801275c:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 801275e:	6838      	ldr	r0, [r7, #0]
 8012760:	f000 f885 	bl	801286e <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE7releaseEv>
 8012764:	4603      	mov	r3, r0
 8012766:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 8012768:	6838      	ldr	r0, [r7, #0]
 801276a:	f7ff feff 	bl	801256c <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE11get_deleterEv>
 801276e:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 8012770:	4618      	mov	r0, r3
 8012772:	f000 f889 	bl	8012888 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012776:	4603      	mov	r3, r0
 8012778:	f107 0210 	add.w	r2, r7, #16
 801277c:	f107 000c 	add.w	r0, r7, #12
 8012780:	6979      	ldr	r1, [r7, #20]
 8012782:	f000 f88c 	bl	801289e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	697a      	ldr	r2, [r7, #20]
 801278a:	601a      	str	r2, [r3, #0]
	}
 801278c:	f107 030c 	add.w	r3, r7, #12
 8012790:	4618      	mov	r0, r3
 8012792:	f000 f851 	bl	8012838 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8012796:	e000      	b.n	801279a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I8ResetPinSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 8012798:	bf00      	nop
	}
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	4618      	mov	r0, r3
 801279e:	3718      	adds	r7, #24
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}

080127a4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI8ResetPinS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80127a4:	b480      	push	{r7}
 80127a6:	b083      	sub	sp, #12
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
 80127ac:	6039      	str	r1, [r7, #0]
	{ }
 80127ae:	bf00      	nop
 80127b0:	370c      	adds	r7, #12
 80127b2:	46bd      	mov	sp, r7
 80127b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b8:	4770      	bx	lr

080127ba <_ZNSt5tupleIJP8ResetPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80127ba:	b580      	push	{r7, lr}
 80127bc:	b082      	sub	sp, #8
 80127be:	af00      	add	r7, sp, #0
 80127c0:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	4618      	mov	r0, r3
 80127c6:	f000 f882 	bl	80128ce <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEEC1Ev>
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	4618      	mov	r0, r3
 80127ce:	3708      	adds	r7, #8
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}

080127d4 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b082      	sub	sp, #8
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	f000 f886 	bl	80128ee <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERS4_>
 80127e2:	4603      	mov	r3, r0
 80127e4:	4618      	mov	r0, r3
 80127e6:	3708      	adds	r7, #8
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}

080127ec <_ZSt3getILj1EJP8ResetPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b082      	sub	sp, #8
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f000 f887 	bl	8012908 <_ZSt12__get_helperILj1ESt14default_deleteI8ResetPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80127fa:	4603      	mov	r3, r0
 80127fc:	4618      	mov	r0, r3
 80127fe:	3708      	adds	r7, #8
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}

08012804 <_ZNKSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8012804:	b580      	push	{r7, lr}
 8012806:	b082      	sub	sp, #8
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	4618      	mov	r0, r3
 8012810:	f000 f886 	bl	8012920 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8012814:	4603      	mov	r3, r0
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	4618      	mov	r0, r3
 801281a:	3708      	adds	r7, #8
 801281c:	46bd      	mov	sp, r7
 801281e:	bd80      	pop	{r7, pc}

08012820 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8012820:	b580      	push	{r7, lr}
 8012822:	b082      	sub	sp, #8
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f000 f886 	bl	801293a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	4618      	mov	r0, r3
 8012832:	3708      	adds	r7, #8
 8012834:	46bd      	mov	sp, r7
 8012836:	bd80      	pop	{r7, pc}

08012838 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8012838:	b580      	push	{r7, lr}
 801283a:	b082      	sub	sp, #8
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
 8012840:	6878      	ldr	r0, [r7, #4]
 8012842:	f000 f885 	bl	8012950 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	4618      	mov	r0, r3
 801284a:	3708      	adds	r7, #8
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}

08012850 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8012850:	b580      	push	{r7, lr}
 8012852:	b082      	sub	sp, #8
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
 8012858:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801285a:	2200      	movs	r2, #0
 801285c:	6839      	ldr	r1, [r7, #0]
 801285e:	6878      	ldr	r0, [r7, #4]
 8012860:	f000 f881 	bl	8012966 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8012864:	4603      	mov	r3, r0
 8012866:	4618      	mov	r0, r3
 8012868:	3708      	adds	r7, #8
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}

0801286e <_ZNSt10unique_ptrI8ResetPinSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 801286e:	b580      	push	{r7, lr}
 8012870:	b082      	sub	sp, #8
 8012872:	af00      	add	r7, sp, #0
 8012874:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	4618      	mov	r0, r3
 801287a:	f000 f89e 	bl	80129ba <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE7releaseEv>
 801287e:	4603      	mov	r3, r0
 8012880:	4618      	mov	r0, r3
 8012882:	3708      	adds	r7, #8
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}

08012888 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012888:	b480      	push	{r7}
 801288a:	b083      	sub	sp, #12
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	4618      	mov	r0, r3
 8012894:	370c      	adds	r7, #12
 8012896:	46bd      	mov	sp, r7
 8012898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289c:	4770      	bx	lr

0801289e <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801289e:	b590      	push	{r4, r7, lr}
 80128a0:	b085      	sub	sp, #20
 80128a2:	af00      	add	r7, sp, #0
 80128a4:	60f8      	str	r0, [r7, #12]
 80128a6:	60b9      	str	r1, [r7, #8]
 80128a8:	607a      	str	r2, [r7, #4]
 80128aa:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f000 f899 	bl	80129e4 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>
 80128b2:	4604      	mov	r4, r0
 80128b4:	6838      	ldr	r0, [r7, #0]
 80128b6:	f7ff ffe7 	bl	8012888 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 80128ba:	4603      	mov	r3, r0
 80128bc:	4622      	mov	r2, r4
 80128be:	68b9      	ldr	r1, [r7, #8]
 80128c0:	68f8      	ldr	r0, [r7, #12]
 80128c2:	f000 f89a 	bl	80129fa <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 80128c6:	bf00      	nop
 80128c8:	3714      	adds	r7, #20
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd90      	pop	{r4, r7, pc}

080128ce <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80128ce:	b580      	push	{r7, lr}
 80128d0:	b082      	sub	sp, #8
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f000 f8ad 	bl	8012a36 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEEC1Ev>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	4618      	mov	r0, r3
 80128e0:	f000 f8b5 	bl	8012a4e <_ZNSt10_Head_baseILj0EP8ResetPinLb0EEC1Ev>
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	4618      	mov	r0, r3
 80128e8:	3708      	adds	r7, #8
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}

080128ee <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80128ee:	b580      	push	{r7, lr}
 80128f0:	b082      	sub	sp, #8
 80128f2:	af00      	add	r7, sp, #0
 80128f4:	6078      	str	r0, [r7, #4]
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	4618      	mov	r0, r3
 80128fa:	f000 f8b6 	bl	8012a6a <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERS2_>
 80128fe:	4603      	mov	r3, r0
 8012900:	4618      	mov	r0, r3
 8012902:	3708      	adds	r7, #8
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}

08012908 <_ZSt12__get_helperILj1ESt14default_deleteI8ResetPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012908:	b580      	push	{r7, lr}
 801290a:	b082      	sub	sp, #8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f000 f8b5 	bl	8012a80 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEE7_M_headERS3_>
 8012916:	4603      	mov	r3, r0
 8012918:	4618      	mov	r0, r3
 801291a:	3708      	adds	r7, #8
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}

08012920 <_ZSt3getILj0EJP8ResetPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	4618      	mov	r0, r3
 801292c:	f000 f8b4 	bl	8012a98 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8012930:	4603      	mov	r3, r0
 8012932:	4618      	mov	r0, r3
 8012934:	3708      	adds	r7, #8
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}

0801293a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801293a:	b480      	push	{r7}
 801293c:	b083      	sub	sp, #12
 801293e:	af00      	add	r7, sp, #0
 8012940:	6078      	str	r0, [r7, #4]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	4618      	mov	r0, r3
 8012946:	370c      	adds	r7, #12
 8012948:	46bd      	mov	sp, r7
 801294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294e:	4770      	bx	lr

08012950 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012950:	b480      	push	{r7}
 8012952:	b083      	sub	sp, #12
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	4618      	mov	r0, r3
 801295c:	370c      	adds	r7, #12
 801295e:	46bd      	mov	sp, r7
 8012960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012964:	4770      	bx	lr

08012966 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8012966:	b580      	push	{r7, lr}
 8012968:	b084      	sub	sp, #16
 801296a:	af00      	add	r7, sp, #0
 801296c:	60f8      	str	r0, [r7, #12]
 801296e:	60b9      	str	r1, [r7, #8]
 8012970:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8012972:	68f8      	ldr	r0, [r7, #12]
 8012974:	f000 f89c 	bl	8012ab0 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 8012978:	4602      	mov	r2, r0
 801297a:	68bb      	ldr	r3, [r7, #8]
 801297c:	4293      	cmp	r3, r2
 801297e:	bf8c      	ite	hi
 8012980:	2301      	movhi	r3, #1
 8012982:	2300      	movls	r3, #0
 8012984:	b2db      	uxtb	r3, r3
 8012986:	2b00      	cmp	r3, #0
 8012988:	bf14      	ite	ne
 801298a:	2301      	movne	r3, #1
 801298c:	2300      	moveq	r3, #0
 801298e:	b2db      	uxtb	r3, r3
 8012990:	2b00      	cmp	r3, #0
 8012992:	d007      	beq.n	80129a4 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801299a:	d301      	bcc.n	80129a0 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801299c:	f015 fec2 	bl	8028724 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80129a0:	f015 febd 	bl	802871e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80129a4:	68bb      	ldr	r3, [r7, #8]
 80129a6:	011b      	lsls	r3, r3, #4
 80129a8:	4618      	mov	r0, r3
 80129aa:	f015 fea5 	bl	80286f8 <_Znwj>
 80129ae:	4603      	mov	r3, r0
 80129b0:	bf00      	nop
      }
 80129b2:	4618      	mov	r0, r3
 80129b4:	3710      	adds	r7, #16
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}

080129ba <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 80129ba:	b580      	push	{r7, lr}
 80129bc:	b084      	sub	sp, #16
 80129be:	af00      	add	r7, sp, #0
 80129c0:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f7ff fdc5 	bl	8012552 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 80129c8:	4603      	mov	r3, r0
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f7ff fdbf 	bl	8012552 <_ZNSt15__uniq_ptr_implI8ResetPinSt14default_deleteIS0_EE6_M_ptrEv>
 80129d4:	4603      	mov	r3, r0
 80129d6:	2200      	movs	r2, #0
 80129d8:	601a      	str	r2, [r3, #0]
	return __p;
 80129da:	68fb      	ldr	r3, [r7, #12]
      }
 80129dc:	4618      	mov	r0, r3
 80129de:	3710      	adds	r7, #16
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}

080129e4 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80129e4:	b480      	push	{r7}
 80129e6:	b083      	sub	sp, #12
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	4618      	mov	r0, r3
 80129f0:	370c      	adds	r7, #12
 80129f2:	46bd      	mov	sp, r7
 80129f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f8:	4770      	bx	lr

080129fa <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80129fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129fc:	b085      	sub	sp, #20
 80129fe:	af00      	add	r7, sp, #0
 8012a00:	60f8      	str	r0, [r7, #12]
 8012a02:	60b9      	str	r1, [r7, #8]
 8012a04:	607a      	str	r2, [r7, #4]
 8012a06:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	2010      	movs	r0, #16
 8012a0e:	f7f8 f813 	bl	800aa38 <_ZnwjPv>
 8012a12:	4605      	mov	r5, r0
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f7ff ffe5 	bl	80129e4 <_ZSt7forwardIP8ResetPinEOT_RNSt16remove_referenceIS2_E4typeE>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	681c      	ldr	r4, [r3, #0]
 8012a1e:	6838      	ldr	r0, [r7, #0]
 8012a20:	f7ff ff32 	bl	8012888 <_ZSt7forwardISt14default_deleteI8ResetPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012a24:	4632      	mov	r2, r6
 8012a26:	4621      	mov	r1, r4
 8012a28:	4628      	mov	r0, r5
 8012a2a:	f000 f84d 	bl	8012ac8 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 8012a2e:	bf00      	nop
 8012a30:	3714      	adds	r7, #20
 8012a32:	46bd      	mov	sp, r7
 8012a34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012a36 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEEC1Ev>:
      _Tuple_impl()
 8012a36:	b580      	push	{r7, lr}
 8012a38:	b082      	sub	sp, #8
 8012a3a:	af00      	add	r7, sp, #0
 8012a3c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f000 f864 	bl	8012b0c <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EEC1Ev>
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	4618      	mov	r0, r3
 8012a48:	3708      	adds	r7, #8
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}

08012a4e <_ZNSt10_Head_baseILj0EP8ResetPinLb0EEC1Ev>:
      constexpr _Head_base()
 8012a4e:	b480      	push	{r7}
 8012a50:	b083      	sub	sp, #12
 8012a52:	af00      	add	r7, sp, #0
 8012a54:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	2200      	movs	r2, #0
 8012a5a:	601a      	str	r2, [r3, #0]
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	4618      	mov	r0, r3
 8012a60:	370c      	adds	r7, #12
 8012a62:	46bd      	mov	sp, r7
 8012a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a68:	4770      	bx	lr

08012a6a <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8012a6a:	b480      	push	{r7}
 8012a6c:	b083      	sub	sp, #12
 8012a6e:	af00      	add	r7, sp, #0
 8012a70:	6078      	str	r0, [r7, #4]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	4618      	mov	r0, r3
 8012a76:	370c      	adds	r7, #12
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7e:	4770      	bx	lr

08012a80 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8ResetPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f000 f84a 	bl	8012b22 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EE7_M_headERS3_>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	4618      	mov	r0, r3
 8012a92:	3708      	adds	r7, #8
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}

08012a98 <_ZSt12__get_helperILj0EP8ResetPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b082      	sub	sp, #8
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012aa0:	6878      	ldr	r0, [r7, #4]
 8012aa2:	f000 f849 	bl	8012b38 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3708      	adds	r7, #8
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8012ab0:	b480      	push	{r7}
 8012ab2:	b083      	sub	sp, #12
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8012ab8:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 8012abc:	4618      	mov	r0, r3
 8012abe:	370c      	adds	r7, #12
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac6:	4770      	bx	lr

08012ac8 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 8012ac8:	b5b0      	push	{r4, r5, r7, lr}
 8012aca:	b086      	sub	sp, #24
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	60f8      	str	r0, [r7, #12]
 8012ad0:	60b9      	str	r1, [r7, #8]
 8012ad2:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f7fb fc5a 	bl	800e390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8012adc:	4a0a      	ldr	r2, [pc, #40]	@ (8012b08 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	601a      	str	r2, [r3, #0]
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	f103 040c 	add.w	r4, r3, #12
 8012ae8:	1d3b      	adds	r3, r7, #4
 8012aea:	4618      	mov	r0, r3
 8012aec:	f000 f831 	bl	8012b52 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8012af0:	f107 0314 	add.w	r3, r7, #20
 8012af4:	462a      	mov	r2, r5
 8012af6:	68b9      	ldr	r1, [r7, #8]
 8012af8:	4620      	mov	r0, r4
 8012afa:	f000 f835 	bl	8012b68 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	4618      	mov	r0, r3
 8012b02:	3718      	adds	r7, #24
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bdb0      	pop	{r4, r5, r7, pc}
 8012b08:	0802b590 	.word	0x0802b590

08012b0c <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EEC1Ev>:
      constexpr _Head_base()
 8012b0c:	b480      	push	{r7}
 8012b0e:	b083      	sub	sp, #12
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	4618      	mov	r0, r3
 8012b18:	370c      	adds	r7, #12
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b20:	4770      	bx	lr

08012b22 <_ZNSt10_Head_baseILj1ESt14default_deleteI8ResetPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8012b22:	b480      	push	{r7}
 8012b24:	b083      	sub	sp, #12
 8012b26:	af00      	add	r7, sp, #0
 8012b28:	6078      	str	r0, [r7, #4]
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	370c      	adds	r7, #12
 8012b30:	46bd      	mov	sp, r7
 8012b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b36:	4770      	bx	lr

08012b38 <_ZNSt11_Tuple_implILj0EJP8ResetPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b082      	sub	sp, #8
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	4618      	mov	r0, r3
 8012b44:	f000 f82c 	bl	8012ba0 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERKS2_>
 8012b48:	4603      	mov	r3, r0
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3708      	adds	r7, #8
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}

08012b52 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8012b52:	b480      	push	{r7}
 8012b54:	b083      	sub	sp, #12
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	370c      	adds	r7, #12
 8012b60:	46bd      	mov	sp, r7
 8012b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b66:	4770      	bx	lr

08012b68 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b084      	sub	sp, #16
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	60f8      	str	r0, [r7, #12]
 8012b70:	60b9      	str	r1, [r7, #8]
 8012b72:	713a      	strb	r2, [r7, #4]
 8012b74:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 8012b76:	1d3b      	adds	r3, r7, #4
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f7ff ffea 	bl	8012b52 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	4619      	mov	r1, r3
 8012b82:	68f8      	ldr	r0, [r7, #12]
 8012b84:	f000 f817 	bl	8012bb6 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EEC1EOS2_>
 8012b88:	6839      	ldr	r1, [r7, #0]
 8012b8a:	68f8      	ldr	r0, [r7, #12]
 8012b8c:	f7fd fcdc 	bl	8010548 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	68ba      	ldr	r2, [r7, #8]
 8012b94:	601a      	str	r2, [r3, #0]
	{ }
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3710      	adds	r7, #16
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}

08012ba0 <_ZNSt10_Head_baseILj0EP8ResetPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8012ba0:	b480      	push	{r7}
 8012ba2:	b083      	sub	sp, #12
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	4618      	mov	r0, r3
 8012bac:	370c      	adds	r7, #12
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb4:	4770      	bx	lr

08012bb6 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8012bb6:	b580      	push	{r7, lr}
 8012bb8:	b082      	sub	sp, #8
 8012bba:	af00      	add	r7, sp, #0
 8012bbc:	6078      	str	r0, [r7, #4]
 8012bbe:	6039      	str	r1, [r7, #0]
 8012bc0:	6838      	ldr	r0, [r7, #0]
 8012bc2:	f7ff ffc6 	bl	8012b52 <_ZSt4moveIRSt14default_deleteI8ResetPinEEONSt16remove_referenceIT_E4typeEOS5_>
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3708      	adds	r7, #8
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}

08012bd0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
 8012bd8:	4a05      	ldr	r2, [pc, #20]	@ (8012bf0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	601a      	str	r2, [r3, #0]
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	4618      	mov	r0, r3
 8012be2:	f7f9 fd97 	bl	800c714 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	4618      	mov	r0, r3
 8012bea:	3708      	adds	r7, #8
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd80      	pop	{r7, pc}
 8012bf0:	0802b590 	.word	0x0802b590

08012bf4 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f7ff ffe7 	bl	8012bd0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012c02:	2110      	movs	r1, #16
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f015 fd66 	bl	80286d6 <_ZdlPvj>
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3708      	adds	r7, #8
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}

08012c14 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b082      	sub	sp, #8
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	330c      	adds	r3, #12
 8012c20:	4618      	mov	r0, r3
 8012c22:	f000 f83f 	bl	8012ca4 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8012c26:	4602      	mov	r2, r0
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	68db      	ldr	r3, [r3, #12]
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	4610      	mov	r0, r2
 8012c30:	f7ff fcdc 	bl	80125ec <_ZNKSt14default_deleteI8ResetPinEclEPS0_>
 8012c34:	bf00      	nop
 8012c36:	3708      	adds	r7, #8
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}

08012c3c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b086      	sub	sp, #24
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	330c      	adds	r3, #12
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f000 f837 	bl	8012cbc <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8012c4e:	4602      	mov	r2, r0
 8012c50:	f107 0314 	add.w	r3, r7, #20
 8012c54:	4611      	mov	r1, r2
 8012c56:	4618      	mov	r0, r3
 8012c58:	f000 f83c 	bl	8012cd4 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8012c5c:	f107 0114 	add.w	r1, r7, #20
 8012c60:	f107 030c 	add.w	r3, r7, #12
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	4618      	mov	r0, r3
 8012c68:	f000 f841 	bl	8012cee <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f7ff ffaf 	bl	8012bd0 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8012c72:	f107 030c 	add.w	r3, r7, #12
 8012c76:	4618      	mov	r0, r3
 8012c78:	f000 f84d 	bl	8012d16 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8012c7c:	f107 0314 	add.w	r3, r7, #20
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7ff fdd9 	bl	8012838 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8012c86:	3718      	adds	r7, #24
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}

08012c8c <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 8012c8c:	b480      	push	{r7}
 8012c8e:	b083      	sub	sp, #12
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	6039      	str	r1, [r7, #0]
        return nullptr;
 8012c96:	2300      	movs	r3, #0
      }
 8012c98:	4618      	mov	r0, r3
 8012c9a:	370c      	adds	r7, #12
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca2:	4770      	bx	lr

08012ca4 <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	f000 f847 	bl	8012d40 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EE6_S_getERS3_>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	3708      	adds	r7, #8
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}

08012cbc <_ZNSt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b082      	sub	sp, #8
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f7fd fd0e 	bl	80106e6 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3708      	adds	r7, #8
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}

08012cd4 <_ZNSaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	6039      	str	r1, [r7, #0]
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f7ff fe2b 	bl	801293a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	3708      	adds	r7, #8
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bd80      	pop	{r7, pc}

08012cee <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8012cee:	b580      	push	{r7, lr}
 8012cf0:	b084      	sub	sp, #16
 8012cf2:	af00      	add	r7, sp, #0
 8012cf4:	60f8      	str	r0, [r7, #12]
 8012cf6:	60b9      	str	r1, [r7, #8]
 8012cf8:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8012cfa:	68b8      	ldr	r0, [r7, #8]
 8012cfc:	f000 f82b 	bl	8012d56 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8012d00:	4602      	mov	r2, r0
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	601a      	str	r2, [r3, #0]
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	687a      	ldr	r2, [r7, #4]
 8012d0a:	605a      	str	r2, [r3, #4]
      { }
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3710      	adds	r7, #16
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}

08012d16 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8012d16:	b580      	push	{r7, lr}
 8012d18:	b082      	sub	sp, #8
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	685b      	ldr	r3, [r3, #4]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d007      	beq.n	8012d36 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	6818      	ldr	r0, [r3, #0]
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	685b      	ldr	r3, [r3, #4]
 8012d2e:	2201      	movs	r2, #1
 8012d30:	4619      	mov	r1, r3
 8012d32:	f000 f81b 	bl	8012d6c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	4618      	mov	r0, r3
 8012d3a:	3708      	adds	r7, #8
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}

08012d40 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI8ResetPinELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8012d40:	b480      	push	{r7}
 8012d42:	b083      	sub	sp, #12
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	370c      	adds	r7, #12
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d54:	4770      	bx	lr

08012d56 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012d56:	b480      	push	{r7}
 8012d58:	b083      	sub	sp, #12
 8012d5a:	af00      	add	r7, sp, #0
 8012d5c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	4618      	mov	r0, r3
 8012d62:	370c      	adds	r7, #12
 8012d64:	46bd      	mov	sp, r7
 8012d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6a:	4770      	bx	lr

08012d6c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b084      	sub	sp, #16
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	60f8      	str	r0, [r7, #12]
 8012d74:	60b9      	str	r1, [r7, #8]
 8012d76:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8012d78:	687a      	ldr	r2, [r7, #4]
 8012d7a:	68b9      	ldr	r1, [r7, #8]
 8012d7c:	68f8      	ldr	r0, [r7, #12]
 8012d7e:	f000 f804 	bl	8012d8a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8012d82:	bf00      	nop
 8012d84:	3710      	adds	r7, #16
 8012d86:	46bd      	mov	sp, r7
 8012d88:	bd80      	pop	{r7, pc}

08012d8a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP8ResetPinSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8012d8a:	b580      	push	{r7, lr}
 8012d8c:	b084      	sub	sp, #16
 8012d8e:	af00      	add	r7, sp, #0
 8012d90:	60f8      	str	r0, [r7, #12]
 8012d92:	60b9      	str	r1, [r7, #8]
 8012d94:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	011b      	lsls	r3, r3, #4
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	68b8      	ldr	r0, [r7, #8]
 8012d9e:	f015 fc9a 	bl	80286d6 <_ZdlPvj>
      }
 8012da2:	3710      	adds	r7, #16
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}

08012da8 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	3304      	adds	r3, #4
 8012db4:	4618      	mov	r0, r3
 8012db6:	f7f9 f87a 	bl	800beae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3708      	adds	r7, #8
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}

08012dc4 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7ff ffea 	bl	8012da8 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	3708      	adds	r7, #8
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}
	...

08012de0 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include <cstdio>

#define CONFINE(value, min, max) (((value) < (min)) ? (min) : (((value) > (max)) ? (max) : (value)))
#define PID_SD_MAX 256 // 8-bit resolution

std::shared_ptr<Module> SigmaDelta::create(const JsonObject& config, Remora* instance) {
 8012de0:	b590      	push	{r4, r7, lr}
 8012de2:	b0b1      	sub	sp, #196	@ 0xc4
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	60f8      	str	r0, [r7, #12]
 8012de8:	60b9      	str	r1, [r7, #8]
 8012dea:	607a      	str	r2, [r7, #4]
    const char* comment = config["Comment"];
 8012dec:	f107 0320 	add.w	r3, r7, #32
 8012df0:	4a55      	ldr	r2, [pc, #340]	@ (8012f48 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x168>)
 8012df2:	68b9      	ldr	r1, [r7, #8]
 8012df4:	4618      	mov	r0, r3
 8012df6:	f7ff faec 	bl	80123d2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012dfa:	f107 0320 	add.w	r3, r7, #32
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7f4 fe5e 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8012e04:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
    printf("%s\n", comment);
 8012e08:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 8012e0c:	f016 fb8e 	bl	802952c <puts>

    int spIndex = config["SP[i]"];
 8012e10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8012e14:	4a4d      	ldr	r2, [pc, #308]	@ (8012f4c <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x16c>)
 8012e16:	68b9      	ldr	r1, [r7, #8]
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f000 f9bb 	bl	8013194 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA6_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012e1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8012e22:	4618      	mov	r0, r3
 8012e24:	f7fc faf5 	bl	800f412 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8012e28:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
    const char* pin = config["SD Pin"];
 8012e2c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012e30:	4a47      	ldr	r2, [pc, #284]	@ (8012f50 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x170>)
 8012e32:	68b9      	ldr	r1, [r7, #8]
 8012e34:	4618      	mov	r0, r3
 8012e36:	f7f4 fe1e 	bl	8007a76 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012e3a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f7f4 fe3e 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8012e44:	4603      	mov	r3, r0
 8012e46:	61fb      	str	r3, [r7, #28]

    // Get pointer to the setpoint from the Remora instance
    volatile float* ptrSP = &instance->getRxData()->setPoint[spIndex];
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f7fe f8fd 	bl	8011048 <_ZN6Remora9getRxDataEv>
 8012e4e:	4602      	mov	r2, r0
 8012e50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012e54:	3308      	adds	r3, #8
 8012e56:	009b      	lsls	r3, r3, #2
 8012e58:	4413      	add	r3, r2
 8012e5a:	3304      	adds	r3, #4
 8012e5c:	61bb      	str	r3, [r7, #24]

    printf("Creating SigmaDelta module: Pin=%s, SP Index=%d\n", pin, spIndex);
 8012e5e:	69fb      	ldr	r3, [r7, #28]
 8012e60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8012e64:	4619      	mov	r1, r3
 8012e66:	483b      	ldr	r0, [pc, #236]	@ (8012f54 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x174>)
 8012e68:	f016 faf0 	bl	802944c <iprintf>

    // Check if "SD Max" exists in the config
    if (config["SD Max"].is<int>()) {
 8012e6c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8012e70:	4a39      	ldr	r2, [pc, #228]	@ (8012f58 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x178>)
 8012e72:	68b9      	ldr	r1, [r7, #8]
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7f4 fdfe 	bl	8007a76 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012e7a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8012e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012e82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012e86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8012e8a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8012e8e:	f7f5 fe98 	bl	8008bc2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8012e92:	4604      	mov	r4, r0
 8012e94:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8012e98:	f7f5 fd21 	bl	80088de <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8012e9c:	4602      	mov	r2, r0
 8012e9e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8012ea2:	4621      	mov	r1, r4
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7f2 fdbc 	bl	8005a22 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8012eaa:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 8012eac:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8012eb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012eb4:	f000 f9f4 	bl	80132a0 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	bf00      	nop
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d028      	beq.n	8012f12 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x132>
        int SDmax = config["SD Max"];
 8012ec0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8012ec4:	4a24      	ldr	r2, [pc, #144]	@ (8012f58 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x178>)
 8012ec6:	68b9      	ldr	r1, [r7, #8]
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f7f4 fdd4 	bl	8007a76 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8012ece:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f7fc fa9d 	bl	800f412 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	617b      	str	r3, [r7, #20]
        printf("Using SD Max=%d\n", SDmax);
 8012edc:	697b      	ldr	r3, [r7, #20]
 8012ede:	4619      	mov	r1, r3
 8012ee0:	481e      	ldr	r0, [pc, #120]	@ (8012f5c <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x17c>)
 8012ee2:	f016 fab3 	bl	802944c <iprintf>
        return std::make_shared<SigmaDelta>(pin, ptrSP, SDmax);
 8012ee6:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8012eea:	f107 0314 	add.w	r3, r7, #20
 8012eee:	f107 0218 	add.w	r2, r7, #24
 8012ef2:	f107 011c 	add.w	r1, r7, #28
 8012ef6:	f000 f972 	bl	80131de <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfRiEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESB_E4typeEEDpOT0_>
 8012efa:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012efe:	4619      	mov	r1, r3
 8012f00:	68f8      	ldr	r0, [r7, #12]
 8012f02:	f000 f98d 	bl	8013220 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>
 8012f06:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7ff ff5a 	bl	8012dc4 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>
    } else {
        printf("Using default SD Max\n");
        return std::make_shared<SigmaDelta>(pin, ptrSP);
    }
}
 8012f10:	e016      	b.n	8012f40 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x160>
        printf("Using default SD Max\n");
 8012f12:	4813      	ldr	r0, [pc, #76]	@ (8012f60 <_ZN10SigmaDelta6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x180>)
 8012f14:	f016 fb0a 	bl	802952c <puts>
        return std::make_shared<SigmaDelta>(pin, ptrSP);
 8012f18:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8012f1c:	f107 0218 	add.w	r2, r7, #24
 8012f20:	f107 011c 	add.w	r1, r7, #28
 8012f24:	4618      	mov	r0, r3
 8012f26:	f000 f98e 	bl	8013246 <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESA_E4typeEEDpOT0_>
 8012f2a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8012f2e:	4619      	mov	r1, r3
 8012f30:	68f8      	ldr	r0, [r7, #12]
 8012f32:	f000 f975 	bl	8013220 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>
 8012f36:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f7ff ff42 	bl	8012dc4 <_ZNSt10shared_ptrI10SigmaDeltaED1Ev>
}
 8012f40:	68f8      	ldr	r0, [r7, #12]
 8012f42:	37c4      	adds	r7, #196	@ 0xc4
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd90      	pop	{r4, r7, pc}
 8012f48:	0802ab1c 	.word	0x0802ab1c
 8012f4c:	0802ab24 	.word	0x0802ab24
 8012f50:	0802ab2c 	.word	0x0802ab2c
 8012f54:	0802ab34 	.word	0x0802ab34
 8012f58:	0802ab68 	.word	0x0802ab68
 8012f5c:	0802ab70 	.word	0x0802ab70
 8012f60:	0802ab84 	.word	0x0802ab84

08012f64 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf>:

SigmaDelta::SigmaDelta(const std::string& pin, volatile float* ptrSP) :
 8012f64:	b590      	push	{r4, r7, lr}
 8012f66:	b085      	sub	sp, #20
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	60f8      	str	r0, [r7, #12]
 8012f6c:	60b9      	str	r1, [r7, #8]
 8012f6e:	607a      	str	r2, [r7, #4]
    SDmax(PID_SD_MAX - 1),
    setPoint(0),
    SDaccumulator(0),
    SDdirection(false),
    SDpin(new Pin(pin, OUTPUT)),
    ptrSP(ptrSP) {}
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7fe ffae 	bl	8011ed4 <_ZN6ModuleC1Ev>
 8012f78:	4a14      	ldr	r2, [pc, #80]	@ (8012fcc <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf+0x68>)
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	601a      	str	r2, [r3, #0]
    pin(pin),
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	3318      	adds	r3, #24
 8012f82:	68b9      	ldr	r1, [r7, #8]
 8012f84:	4618      	mov	r0, r3
 8012f86:	f015 fec2 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SDmax(PID_SD_MAX - 1),
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	22ff      	movs	r2, #255	@ 0xff
 8012f8e:	631a      	str	r2, [r3, #48]	@ 0x30
    setPoint(0),
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	2200      	movs	r2, #0
 8012f94:	635a      	str	r2, [r3, #52]	@ 0x34
    SDaccumulator(0),
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	2200      	movs	r2, #0
 8012f9a:	639a      	str	r2, [r3, #56]	@ 0x38
    SDdirection(false),
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    SDpin(new Pin(pin, OUTPUT)),
 8012fa4:	2040      	movs	r0, #64	@ 0x40
 8012fa6:	f015 fba7 	bl	80286f8 <_Znwj>
 8012faa:	4603      	mov	r3, r0
 8012fac:	461c      	mov	r4, r3
 8012fae:	2201      	movs	r2, #1
 8012fb0:	68b9      	ldr	r1, [r7, #8]
 8012fb2:	4620      	mov	r0, r4
 8012fb4:	f7f1 fdfc 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	641c      	str	r4, [r3, #64]	@ 0x40
    ptrSP(ptrSP) {}
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	687a      	ldr	r2, [r7, #4]
 8012fc0:	645a      	str	r2, [r3, #68]	@ 0x44
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	3714      	adds	r7, #20
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd90      	pop	{r4, r7, pc}
 8012fcc:	0802b5ec 	.word	0x0802b5ec

08012fd0 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi>:

SigmaDelta::SigmaDelta(const std::string& pin, volatile float* ptrSP, int SDmax) :
 8012fd0:	b590      	push	{r4, r7, lr}
 8012fd2:	b085      	sub	sp, #20
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	60f8      	str	r0, [r7, #12]
 8012fd8:	60b9      	str	r1, [r7, #8]
 8012fda:	607a      	str	r2, [r7, #4]
 8012fdc:	603b      	str	r3, [r7, #0]
    SDmax(CONFINE(SDmax, 0, PID_SD_MAX - 1)),
    setPoint(0),
    SDaccumulator(0),
    SDdirection(false),
    SDpin(new Pin(pin, OUTPUT)),
    ptrSP(ptrSP) {}
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f7fe ff77 	bl	8011ed4 <_ZN6ModuleC1Ev>
 8012fe6:	4a19      	ldr	r2, [pc, #100]	@ (801304c <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x7c>)
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	601a      	str	r2, [r3, #0]
    pin(pin),
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	3318      	adds	r3, #24
 8012ff0:	68b9      	ldr	r1, [r7, #8]
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f015 fe8b 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    SDmax(CONFINE(SDmax, 0, PID_SD_MAX - 1)),
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	db04      	blt.n	8013008 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x38>
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	2bff      	cmp	r3, #255	@ 0xff
 8013002:	bfa8      	it	ge
 8013004:	23ff      	movge	r3, #255	@ 0xff
 8013006:	e000      	b.n	801300a <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi+0x3a>
 8013008:	2300      	movs	r3, #0
 801300a:	68fa      	ldr	r2, [r7, #12]
 801300c:	6313      	str	r3, [r2, #48]	@ 0x30
    setPoint(0),
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	2200      	movs	r2, #0
 8013012:	635a      	str	r2, [r3, #52]	@ 0x34
    SDaccumulator(0),
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	2200      	movs	r2, #0
 8013018:	639a      	str	r2, [r3, #56]	@ 0x38
    SDdirection(false),
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	2200      	movs	r2, #0
 801301e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    SDpin(new Pin(pin, OUTPUT)),
 8013022:	2040      	movs	r0, #64	@ 0x40
 8013024:	f015 fb68 	bl	80286f8 <_Znwj>
 8013028:	4603      	mov	r3, r0
 801302a:	461c      	mov	r4, r3
 801302c:	2201      	movs	r2, #1
 801302e:	68b9      	ldr	r1, [r7, #8]
 8013030:	4620      	mov	r0, r4
 8013032:	f7f1 fdbd 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	641c      	str	r4, [r3, #64]	@ 0x40
    ptrSP(ptrSP) {}
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	687a      	ldr	r2, [r7, #4]
 801303e:	645a      	str	r2, [r3, #68]	@ 0x44
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	4618      	mov	r0, r3
 8013044:	3714      	adds	r7, #20
 8013046:	46bd      	mov	sp, r7
 8013048:	bd90      	pop	{r4, r7, pc}
 801304a:	bf00      	nop
 801304c:	0802b5ec 	.word	0x0802b5ec

08013050 <_ZN10SigmaDelta6updateEv>:
    newSdSP = CONFINE(newSdSP, 0, 100);
    // Scale the percentage to fit within the range of PID_SD_MAX
    this->setPoint = (newSdSP * (PID_SD_MAX - 1)) / 100;
}

void SigmaDelta::update() {
 8013050:	b580      	push	{r7, lr}
 8013052:	b084      	sub	sp, #16
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
    // Read set point from the data source
    float newSP = *ptrSP;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	60fb      	str	r3, [r7, #12]

    // Scale from 0-100% to 0-SDmax
    int scaledSP = static_cast<int>((newSP / 100.0f) * SDmax);
 8013060:	edd7 7a03 	vldr	s15, [r7, #12]
 8013064:	eddf 6a45 	vldr	s13, [pc, #276]	@ 801317c <_ZN10SigmaDelta6updateEv+0x12c>
 8013068:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013070:	ee07 3a90 	vmov	s15, r3
 8013074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013078:	ee67 7a27 	vmul.f32	s15, s14, s15
 801307c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013080:	ee17 3a90 	vmov	r3, s15
 8013084:	60bb      	str	r3, [r7, #8]

    // Check if the setpoint has changed
    if (scaledSP != setPoint) {
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801308a:	68ba      	ldr	r2, [r7, #8]
 801308c:	429a      	cmp	r2, r3
 801308e:	d00f      	beq.n	80130b0 <_ZN10SigmaDelta6updateEv+0x60>
        setPoint = CONFINE(scaledSP, 0, SDmax);
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	2b00      	cmp	r3, #0
 8013094:	db09      	blt.n	80130aa <_ZN10SigmaDelta6updateEv+0x5a>
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801309a:	68ba      	ldr	r2, [r7, #8]
 801309c:	429a      	cmp	r2, r3
 801309e:	dd02      	ble.n	80130a6 <_ZN10SigmaDelta6updateEv+0x56>
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130a4:	e002      	b.n	80130ac <_ZN10SigmaDelta6updateEv+0x5c>
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	e000      	b.n	80130ac <_ZN10SigmaDelta6updateEv+0x5c>
 80130aa:	2300      	movs	r3, #0
 80130ac:	687a      	ldr	r2, [r7, #4]
 80130ae:	6353      	str	r3, [r2, #52]	@ 0x34
    }

    // Sigma-Delta modulation logic
    if (setPoint <= 0) {
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	dc06      	bgt.n	80130c6 <_ZN10SigmaDelta6updateEv+0x76>
        SDpin->set(false);
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80130bc:	2100      	movs	r1, #0
 80130be:	4618      	mov	r0, r3
 80130c0:	f7f1 ff20 	bl	8004f04 <_ZN3Pin3setEb>
        return;
 80130c4:	e057      	b.n	8013176 <_ZN10SigmaDelta6updateEv+0x126>
    } else if (setPoint >= SDmax) {
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130ce:	429a      	cmp	r2, r3
 80130d0:	db06      	blt.n	80130e0 <_ZN10SigmaDelta6updateEv+0x90>
        SDpin->set(true);
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80130d6:	2101      	movs	r1, #1
 80130d8:	4618      	mov	r0, r3
 80130da:	f7f1 ff13 	bl	8004f04 <_ZN3Pin3setEb>
        return;
 80130de:	e04a      	b.n	8013176 <_ZN10SigmaDelta6updateEv+0x126>
    }

    SDaccumulator = CONFINE(SDaccumulator, -SDmax, SDmax << 1);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130e8:	425b      	negs	r3, r3
 80130ea:	429a      	cmp	r2, r3
 80130ec:	da03      	bge.n	80130f6 <_ZN10SigmaDelta6updateEv+0xa6>
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130f2:	425b      	negs	r3, r3
 80130f4:	e007      	b.n	8013106 <_ZN10SigmaDelta6updateEv+0xb6>
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130fe:	005b      	lsls	r3, r3, #1
 8013100:	4293      	cmp	r3, r2
 8013102:	bfa8      	it	ge
 8013104:	4613      	movge	r3, r2
 8013106:	687a      	ldr	r2, [r7, #4]
 8013108:	6393      	str	r3, [r2, #56]	@ 0x38

    if (!SDdirection) {
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013110:	f083 0301 	eor.w	r3, r3, #1
 8013114:	b2db      	uxtb	r3, r3
 8013116:	2b00      	cmp	r3, #0
 8013118:	d012      	beq.n	8013140 <_ZN10SigmaDelta6updateEv+0xf0>
        SDaccumulator += setPoint;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013122:	441a      	add	r2, r3
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	639a      	str	r2, [r3, #56]	@ 0x38
        if (SDaccumulator >= (SDmax >> 1)) {
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013130:	105b      	asrs	r3, r3, #1
 8013132:	429a      	cmp	r2, r3
 8013134:	db16      	blt.n	8013164 <_ZN10SigmaDelta6updateEv+0x114>
            SDdirection = true;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	2201      	movs	r2, #1
 801313a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801313e:	e011      	b.n	8013164 <_ZN10SigmaDelta6updateEv+0x114>
        }
    } else {
        SDaccumulator -= (SDmax - setPoint);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801314c:	1acb      	subs	r3, r1, r3
 801314e:	1ad2      	subs	r2, r2, r3
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	639a      	str	r2, [r3, #56]	@ 0x38
        if (SDaccumulator <= 0) {
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013158:	2b00      	cmp	r3, #0
 801315a:	dc03      	bgt.n	8013164 <_ZN10SigmaDelta6updateEv+0x114>
            SDdirection = false;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2200      	movs	r2, #0
 8013160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        }
    }

    SDpin->set(SDdirection);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801316e:	4619      	mov	r1, r3
 8013170:	4610      	mov	r0, r2
 8013172:	f7f1 fec7 	bl	8004f04 <_ZN3Pin3setEb>
}
 8013176:	3710      	adds	r7, #16
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}
 801317c:	42c80000 	.word	0x42c80000

08013180 <_ZN10SigmaDelta10slowUpdateEv>:

void SigmaDelta::slowUpdate() {}
 8013180:	b480      	push	{r7}
 8013182:	b083      	sub	sp, #12
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
 8013188:	bf00      	nop
 801318a:	370c      	adds	r7, #12
 801318c:	46bd      	mov	sp, r7
 801318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013192:	4770      	bx	lr

08013194 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA6_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8013194:	b580      	push	{r7, lr}
 8013196:	b08c      	sub	sp, #48	@ 0x30
 8013198:	af02      	add	r7, sp, #8
 801319a:	60f8      	str	r0, [r7, #12]
 801319c:	60b9      	str	r1, [r7, #8]
 801319e:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 80131a0:	68ba      	ldr	r2, [r7, #8]
 80131a2:	f107 0314 	add.w	r3, r7, #20
 80131a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80131aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80131ae:	f107 031c 	add.w	r3, r7, #28
 80131b2:	6879      	ldr	r1, [r7, #4]
 80131b4:	4618      	mov	r0, r3
 80131b6:	f000 f860 	bl	801327a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA6_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80131ba:	466a      	mov	r2, sp
 80131bc:	f107 0320 	add.w	r3, r7, #32
 80131c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80131c4:	e882 0003 	stmia.w	r2, {r0, r1}
 80131c8:	69fb      	ldr	r3, [r7, #28]
 80131ca:	f107 0214 	add.w	r2, r7, #20
 80131ce:	ca06      	ldmia	r2, {r1, r2}
 80131d0:	68f8      	ldr	r0, [r7, #12]
 80131d2:	f7f4 fde4 	bl	8007d9e <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80131d6:	68f8      	ldr	r0, [r7, #12]
 80131d8:	3728      	adds	r7, #40	@ 0x28
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}

080131de <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfRiEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESB_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 80131de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131e0:	b089      	sub	sp, #36	@ 0x24
 80131e2:	af02      	add	r7, sp, #8
 80131e4:	60f8      	str	r0, [r7, #12]
 80131e6:	60b9      	str	r1, [r7, #8]
 80131e8:	607a      	str	r2, [r7, #4]
 80131ea:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 80131ec:	f107 0314 	add.w	r3, r7, #20
 80131f0:	461e      	mov	r6, r3
 80131f2:	68b8      	ldr	r0, [r7, #8]
 80131f4:	f7fc fa43 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80131f8:	4604      	mov	r4, r0
 80131fa:	6878      	ldr	r0, [r7, #4]
 80131fc:	f000 f871 	bl	80132e2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013200:	4605      	mov	r5, r0
 8013202:	6838      	ldr	r0, [r7, #0]
 8013204:	f7fc fa46 	bl	800f694 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8013208:	4603      	mov	r3, r0
 801320a:	9300      	str	r3, [sp, #0]
 801320c:	462b      	mov	r3, r5
 801320e:	4622      	mov	r2, r4
 8013210:	4631      	mov	r1, r6
 8013212:	68f8      	ldr	r0, [r7, #12]
 8013214:	f000 f870 	bl	80132f8 <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8013218:	68f8      	ldr	r0, [r7, #12]
 801321a:	371c      	adds	r7, #28
 801321c:	46bd      	mov	sp, r7
 801321e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013220 <_ZNSt10shared_ptrI6ModuleEC1I10SigmaDeltavEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8013220:	b590      	push	{r4, r7, lr}
 8013222:	b083      	sub	sp, #12
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
 8013228:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 801322a:	687c      	ldr	r4, [r7, #4]
 801322c:	6838      	ldr	r0, [r7, #0]
 801322e:	f000 f883 	bl	8013338 <_ZSt4moveIRSt10shared_ptrI10SigmaDeltaEEONSt16remove_referenceIT_E4typeEOS5_>
 8013232:	4603      	mov	r3, r0
 8013234:	4619      	mov	r1, r3
 8013236:	4620      	mov	r0, r4
 8013238:	f000 f889 	bl	801334e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltavEEOS_IT_LS2_0EE>
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	4618      	mov	r0, r3
 8013240:	370c      	adds	r7, #12
 8013242:	46bd      	mov	sp, r7
 8013244:	bd90      	pop	{r4, r7, pc}

08013246 <_ZSt11make_sharedI10SigmaDeltaJRPKcRPVfEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESA_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 8013246:	b5b0      	push	{r4, r5, r7, lr}
 8013248:	b086      	sub	sp, #24
 801324a:	af00      	add	r7, sp, #0
 801324c:	60f8      	str	r0, [r7, #12]
 801324e:	60b9      	str	r1, [r7, #8]
 8013250:	607a      	str	r2, [r7, #4]
			     std::forward<_Args>(__args)...);
 8013252:	f107 0314 	add.w	r3, r7, #20
 8013256:	461d      	mov	r5, r3
 8013258:	68b8      	ldr	r0, [r7, #8]
 801325a:	f7fc fa10 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801325e:	4604      	mov	r4, r0
 8013260:	6878      	ldr	r0, [r7, #4]
 8013262:	f000 f83e 	bl	80132e2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013266:	4603      	mov	r3, r0
 8013268:	4622      	mov	r2, r4
 801326a:	4629      	mov	r1, r5
 801326c:	68f8      	ldr	r0, [r7, #12]
 801326e:	f000 f88c 	bl	801338a <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8013272:	68f8      	ldr	r0, [r7, #12]
 8013274:	3718      	adds	r7, #24
 8013276:	46bd      	mov	sp, r7
 8013278:	bdb0      	pop	{r4, r5, r7, pc}

0801327a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA6_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 801327a:	b580      	push	{r7, lr}
 801327c:	b082      	sub	sp, #8
 801327e:	af00      	add	r7, sp, #0
 8013280:	6078      	str	r0, [r7, #4]
 8013282:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8013284:	6838      	ldr	r0, [r7, #0]
 8013286:	f000 f89a 	bl	80133be <_ZN11ArduinoJson8V730HB226detail7forwardIRA6_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 801328a:	4602      	mov	r2, r0
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	4611      	mov	r1, r2
 8013290:	4618      	mov	r0, r3
 8013292:	f000 f89f 	bl	80133d4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA6_KcvE5adaptES5_>
 8013296:	bf00      	nop
}
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	3708      	adds	r7, #8
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}

080132a0 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE>:
    auto data = getData(src);
    auto resources = getResourceManager(src);
    return data ? data->template asIntegral<T>(resources) : T();
  }

  static bool checkJson(JsonVariantConst src) {
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b084      	sub	sp, #16
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	463b      	mov	r3, r7
 80132a8:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80132ac:	463b      	mov	r3, r7
 80132ae:	4618      	mov	r0, r3
 80132b0:	f7f4 f936 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80132b4:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 80132b6:	463b      	mov	r3, r7
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7f4 f93d 	bl	8007538 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 80132be:	60b8      	str	r0, [r7, #8]
    return data && data->template isInteger<T>(resources);
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d008      	beq.n	80132d8 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x38>
 80132c6:	68b9      	ldr	r1, [r7, #8]
 80132c8:	68f8      	ldr	r0, [r7, #12]
 80132ca:	f000 f893 	bl	80133f4 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE>
 80132ce:	4603      	mov	r3, r0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d001      	beq.n	80132d8 <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x38>
 80132d4:	2301      	movs	r3, #1
 80132d6:	e000      	b.n	80132da <_ZN11ArduinoJson8V730HB229ConverterIivE9checkJsonENS0_16JsonVariantConstE+0x3a>
 80132d8:	2300      	movs	r3, #0
  }
 80132da:	4618      	mov	r0, r3
 80132dc:	3710      	adds	r7, #16
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}

080132e2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80132e2:	b480      	push	{r7}
 80132e4:	b083      	sub	sp, #12
 80132e6:	af00      	add	r7, sp, #0
 80132e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	4618      	mov	r0, r3
 80132ee:	370c      	adds	r7, #12
 80132f0:	46bd      	mov	sp, r7
 80132f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f6:	4770      	bx	lr

080132f8 <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80132f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132fa:	b087      	sub	sp, #28
 80132fc:	af02      	add	r7, sp, #8
 80132fe:	60f8      	str	r0, [r7, #12]
 8013300:	60b9      	str	r1, [r7, #8]
 8013302:	607a      	str	r2, [r7, #4]
 8013304:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8013306:	68fc      	ldr	r4, [r7, #12]
 8013308:	6878      	ldr	r0, [r7, #4]
 801330a:	f7fc f9b8 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801330e:	4605      	mov	r5, r0
 8013310:	6838      	ldr	r0, [r7, #0]
 8013312:	f7ff ffe6 	bl	80132e2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013316:	4606      	mov	r6, r0
 8013318:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801331a:	f7fc f9bb 	bl	800f694 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801331e:	4603      	mov	r3, r0
 8013320:	9300      	str	r3, [sp, #0]
 8013322:	4633      	mov	r3, r6
 8013324:	462a      	mov	r2, r5
 8013326:	68b9      	ldr	r1, [r7, #8]
 8013328:	4620      	mov	r0, r4
 801332a:	f000 f8c1 	bl	80134b0 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	4618      	mov	r0, r3
 8013332:	3714      	adds	r7, #20
 8013334:	46bd      	mov	sp, r7
 8013336:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013338 <_ZSt4moveIRSt10shared_ptrI10SigmaDeltaEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8013338:	b480      	push	{r7}
 801333a:	b083      	sub	sp, #12
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	4618      	mov	r0, r3
 8013344:	370c      	adds	r7, #12
 8013346:	46bd      	mov	sp, r7
 8013348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334c:	4770      	bx	lr

0801334e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltavEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 801334e:	b580      	push	{r7, lr}
 8013350:	b082      	sub	sp, #8
 8013352:	af00      	add	r7, sp, #0
 8013354:	6078      	str	r0, [r7, #4]
 8013356:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	681a      	ldr	r2, [r3, #0]
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	601a      	str	r2, [r3, #0]
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	3304      	adds	r3, #4
 8013364:	4618      	mov	r0, r3
 8013366:	f7f9 ff9f 	bl	800d2a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	1d1a      	adds	r2, r3, #4
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	3304      	adds	r3, #4
 8013372:	4619      	mov	r1, r3
 8013374:	4610      	mov	r0, r2
 8013376:	f7fa fb56 	bl	800da26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	2200      	movs	r2, #0
 801337e:	601a      	str	r2, [r3, #0]
	}
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	4618      	mov	r0, r3
 8013384:	3708      	adds	r7, #8
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}

0801338a <_ZNSt10shared_ptrI10SigmaDeltaEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 801338a:	b5b0      	push	{r4, r5, r7, lr}
 801338c:	b084      	sub	sp, #16
 801338e:	af00      	add	r7, sp, #0
 8013390:	60f8      	str	r0, [r7, #12]
 8013392:	60b9      	str	r1, [r7, #8]
 8013394:	607a      	str	r2, [r7, #4]
 8013396:	603b      	str	r3, [r7, #0]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8013398:	68fc      	ldr	r4, [r7, #12]
 801339a:	6878      	ldr	r0, [r7, #4]
 801339c:	f7fc f96f 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80133a0:	4605      	mov	r5, r0
 80133a2:	6838      	ldr	r0, [r7, #0]
 80133a4:	f7ff ff9d 	bl	80132e2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80133a8:	4603      	mov	r3, r0
 80133aa:	462a      	mov	r2, r5
 80133ac:	68b9      	ldr	r1, [r7, #8]
 80133ae:	4620      	mov	r0, r4
 80133b0:	f000 f8ac 	bl	801350c <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	4618      	mov	r0, r3
 80133b8:	3710      	adds	r7, #16
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bdb0      	pop	{r4, r5, r7, pc}

080133be <_ZN11ArduinoJson8V730HB226detail7forwardIRA6_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80133be:	b480      	push	{r7}
 80133c0:	b083      	sub	sp, #12
 80133c2:	af00      	add	r7, sp, #0
 80133c4:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80133c6:	687b      	ldr	r3, [r7, #4]
}
 80133c8:	4618      	mov	r0, r3
 80133ca:	370c      	adds	r7, #12
 80133cc:	46bd      	mov	sp, r7
 80133ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d2:	4770      	bx	lr

080133d4 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA6_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b082      	sub	sp, #8
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
 80133dc:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 80133de:	2301      	movs	r3, #1
 80133e0:	2205      	movs	r2, #5
 80133e2:	6839      	ldr	r1, [r7, #0]
 80133e4:	6878      	ldr	r0, [r7, #4]
 80133e6:	f7f1 ff55 	bl	8005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	3708      	adds	r7, #8
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
	...

080133f4 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE>:
  bool isInteger(const ResourceManager* resources) const {
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b084      	sub	sp, #16
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
 80133fc:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 80133fe:	6839      	ldr	r1, [r7, #0]
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f7f3 f8a3 	bl	800654c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8013406:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	791b      	ldrb	r3, [r3, #4]
 801340c:	3b0a      	subs	r3, #10
 801340e:	2b12      	cmp	r3, #18
 8013410:	d848      	bhi.n	80134a4 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb0>
 8013412:	a201      	add	r2, pc, #4	@ (adr r2, 8013418 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0x24>)
 8013414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013418:	08013465 	.word	0x08013465
 801341c:	080134a5 	.word	0x080134a5
 8013420:	08013473 	.word	0x08013473
 8013424:	080134a5 	.word	0x080134a5
 8013428:	080134a5 	.word	0x080134a5
 801342c:	080134a5 	.word	0x080134a5
 8013430:	080134a5 	.word	0x080134a5
 8013434:	080134a5 	.word	0x080134a5
 8013438:	080134a5 	.word	0x080134a5
 801343c:	080134a5 	.word	0x080134a5
 8013440:	080134a5 	.word	0x080134a5
 8013444:	080134a5 	.word	0x080134a5
 8013448:	080134a5 	.word	0x080134a5
 801344c:	080134a5 	.word	0x080134a5
 8013450:	080134a5 	.word	0x080134a5
 8013454:	080134a5 	.word	0x080134a5
 8013458:	08013481 	.word	0x08013481
 801345c:	080134a5 	.word	0x080134a5
 8013460:	08013493 	.word	0x08013493
        return canConvertNumber<T>(content_.asUint32);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	4618      	mov	r0, r3
 801346a:	f7fc fe3c 	bl	80100e6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 801346e:	4603      	mov	r3, r0
 8013470:	e019      	b.n	80134a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(content_.asInt32);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	4618      	mov	r0, r3
 8013478:	f7fc fe47 	bl	801010a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 801347c:	4603      	mov	r3, r0
 801347e:	e012      	b.n	80134a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asUint64);
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013486:	4610      	mov	r0, r2
 8013488:	4619      	mov	r1, r3
 801348a:	f7fc fe49 	bl	8010120 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 801348e:	4603      	mov	r3, r0
 8013490:	e009      	b.n	80134a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return canConvertNumber<T>(extension->asInt64);
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013498:	4610      	mov	r0, r2
 801349a:	4619      	mov	r1, r3
 801349c:	f7fc fe58 	bl	8010150 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80134a0:	4603      	mov	r3, r0
 80134a2:	e000      	b.n	80134a6 <_ZNK11ArduinoJson8V730HB226detail11VariantData9isIntegerIiEEbPKNS1_15ResourceManagerE+0xb2>
        return false;
 80134a4:	2300      	movs	r3, #0
  }
 80134a6:	4618      	mov	r0, r3
 80134a8:	3710      	adds	r7, #16
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}
 80134ae:	bf00      	nop

080134b0 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfRiEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 80134b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134b4:	b086      	sub	sp, #24
 80134b6:	af02      	add	r7, sp, #8
 80134b8:	60f8      	str	r0, [r7, #12]
 80134ba:	60b9      	str	r1, [r7, #8]
 80134bc:	607a      	str	r2, [r7, #4]
 80134be:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	2200      	movs	r2, #0
 80134c4:	601a      	str	r2, [r3, #0]
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	1d1c      	adds	r4, r3, #4
 80134ca:	68fd      	ldr	r5, [r7, #12]
 80134cc:	6878      	ldr	r0, [r7, #4]
 80134ce:	f7fc f8d6 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80134d2:	4680      	mov	r8, r0
 80134d4:	6838      	ldr	r0, [r7, #0]
 80134d6:	f7ff ff04 	bl	80132e2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80134da:	4606      	mov	r6, r0
 80134dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80134de:	f7fc f8d9 	bl	800f694 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80134e2:	4603      	mov	r3, r0
 80134e4:	9301      	str	r3, [sp, #4]
 80134e6:	9600      	str	r6, [sp, #0]
 80134e8:	4643      	mov	r3, r8
 80134ea:	68ba      	ldr	r2, [r7, #8]
 80134ec:	4629      	mov	r1, r5
 80134ee:	4620      	mov	r0, r4
 80134f0:	f000 f833 	bl	801355a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfRiEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	4619      	mov	r1, r3
 80134fa:	68f8      	ldr	r0, [r7, #12]
 80134fc:	f000 f883 	bl	8013606 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	4618      	mov	r0, r3
 8013504:	3710      	adds	r7, #16
 8013506:	46bd      	mov	sp, r7
 8013508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801350c <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJRPKcRPVfEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 801350c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801350e:	b087      	sub	sp, #28
 8013510:	af02      	add	r7, sp, #8
 8013512:	60f8      	str	r0, [r7, #12]
 8013514:	60b9      	str	r1, [r7, #8]
 8013516:	607a      	str	r2, [r7, #4]
 8013518:	603b      	str	r3, [r7, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	2200      	movs	r2, #0
 801351e:	601a      	str	r2, [r3, #0]
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	1d1c      	adds	r4, r3, #4
 8013524:	68fd      	ldr	r5, [r7, #12]
 8013526:	6878      	ldr	r0, [r7, #4]
 8013528:	f7fc f8a9 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801352c:	4606      	mov	r6, r0
 801352e:	6838      	ldr	r0, [r7, #0]
 8013530:	f7ff fed7 	bl	80132e2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013534:	4603      	mov	r3, r0
 8013536:	9300      	str	r3, [sp, #0]
 8013538:	4633      	mov	r3, r6
 801353a:	68ba      	ldr	r2, [r7, #8]
 801353c:	4629      	mov	r1, r5
 801353e:	4620      	mov	r0, r4
 8013540:	f000 f86c 	bl	801361c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	4619      	mov	r1, r3
 801354a:	68f8      	ldr	r0, [r7, #12]
 801354c:	f000 f85b 	bl	8013606 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	4618      	mov	r0, r3
 8013554:	3714      	adds	r7, #20
 8013556:	46bd      	mov	sp, r7
 8013558:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801355a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfRiEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 801355a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801355e:	b08c      	sub	sp, #48	@ 0x30
 8013560:	af02      	add	r7, sp, #8
 8013562:	60f8      	str	r0, [r7, #12]
 8013564:	60b9      	str	r1, [r7, #8]
 8013566:	607a      	str	r2, [r7, #4]
 8013568:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 801356a:	687a      	ldr	r2, [r7, #4]
 801356c:	f107 031c 	add.w	r3, r7, #28
 8013570:	4611      	mov	r1, r2
 8013572:	4618      	mov	r0, r3
 8013574:	f000 f8a0 	bl	80136b8 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8013578:	f107 0314 	add.w	r3, r7, #20
 801357c:	f107 021c 	add.w	r2, r7, #28
 8013580:	4611      	mov	r1, r2
 8013582:	4618      	mov	r0, r3
 8013584:	f000 f8b1 	bl	80136ea <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8013588:	f107 0314 	add.w	r3, r7, #20
 801358c:	4618      	mov	r0, r3
 801358e:	f000 f8d4 	bl	801373a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8013592:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 8013594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013596:	4619      	mov	r1, r3
 8013598:	2054      	movs	r0, #84	@ 0x54
 801359a:	f7f7 fa4d 	bl	800aa38 <_ZnwjPv>
 801359e:	4604      	mov	r4, r0
 80135a0:	6838      	ldr	r0, [r7, #0]
 80135a2:	f7fc f86c 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 80135a6:	4605      	mov	r5, r0
 80135a8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80135aa:	f7ff fe9a 	bl	80132e2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 80135ae:	4606      	mov	r6, r0
 80135b0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80135b2:	f7fc f86f 	bl	800f694 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 80135b6:	4603      	mov	r3, r0
 80135b8:	9300      	str	r3, [sp, #0]
 80135ba:	4633      	mov	r3, r6
 80135bc:	462a      	mov	r2, r5
 80135be:	4641      	mov	r1, r8
 80135c0:	4620      	mov	r0, r4
 80135c2:	f000 f8c9 	bl	8013758 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_>
 80135c6:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 80135c8:	f107 0314 	add.w	r3, r7, #20
 80135cc:	2100      	movs	r1, #0
 80135ce:	4618      	mov	r0, r3
 80135d0:	f000 f8f6 	bl	80137c0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	6a3a      	ldr	r2, [r7, #32]
 80135d8:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 80135da:	6a38      	ldr	r0, [r7, #32]
 80135dc:	f000 f8ff 	bl	80137de <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80135e0:	4602      	mov	r2, r0
 80135e2:	68bb      	ldr	r3, [r7, #8]
 80135e4:	601a      	str	r2, [r3, #0]
	}
 80135e6:	f107 0314 	add.w	r3, r7, #20
 80135ea:	4618      	mov	r0, r3
 80135ec:	f000 f890 	bl	8013710 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80135f0:	f107 031c 	add.w	r3, r7, #28
 80135f4:	4618      	mov	r0, r3
 80135f6:	f000 f86c 	bl	80136d2 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	4618      	mov	r0, r3
 80135fe:	3728      	adds	r7, #40	@ 0x28
 8013600:	46bd      	mov	sp, r7
 8013602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013606 <_ZNSt12__shared_ptrI10SigmaDeltaLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 8013606:	b480      	push	{r7}
 8013608:	b083      	sub	sp, #12
 801360a:	af00      	add	r7, sp, #0
 801360c:	6078      	str	r0, [r7, #4]
 801360e:	6039      	str	r1, [r7, #0]
	{ }
 8013610:	bf00      	nop
 8013612:	370c      	adds	r7, #12
 8013614:	46bd      	mov	sp, r7
 8013616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361a:	4770      	bx	lr

0801361c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I10SigmaDeltaSaIvEJRPKcRPVfEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 801361c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801361e:	b08b      	sub	sp, #44	@ 0x2c
 8013620:	af00      	add	r7, sp, #0
 8013622:	60f8      	str	r0, [r7, #12]
 8013624:	60b9      	str	r1, [r7, #8]
 8013626:	607a      	str	r2, [r7, #4]
 8013628:	603b      	str	r3, [r7, #0]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 801362a:	687a      	ldr	r2, [r7, #4]
 801362c:	f107 031c 	add.w	r3, r7, #28
 8013630:	4611      	mov	r1, r2
 8013632:	4618      	mov	r0, r3
 8013634:	f000 f840 	bl	80136b8 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8013638:	f107 0314 	add.w	r3, r7, #20
 801363c:	f107 021c 	add.w	r2, r7, #28
 8013640:	4611      	mov	r1, r2
 8013642:	4618      	mov	r0, r3
 8013644:	f000 f851 	bl	80136ea <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8013648:	f107 0314 	add.w	r3, r7, #20
 801364c:	4618      	mov	r0, r3
 801364e:	f000 f874 	bl	801373a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8013652:	6278      	str	r0, [r7, #36]	@ 0x24
	  auto __pi = ::new (__mem)
 8013654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013656:	4619      	mov	r1, r3
 8013658:	2054      	movs	r0, #84	@ 0x54
 801365a:	f7f7 f9ed 	bl	800aa38 <_ZnwjPv>
 801365e:	4604      	mov	r4, r0
 8013660:	6838      	ldr	r0, [r7, #0]
 8013662:	f7fc f80c 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013666:	4605      	mov	r5, r0
 8013668:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801366a:	f7ff fe3a 	bl	80132e2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801366e:	4603      	mov	r3, r0
 8013670:	462a      	mov	r2, r5
 8013672:	4631      	mov	r1, r6
 8013674:	4620      	mov	r0, r4
 8013676:	f000 f8c1 	bl	80137fc <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_>
 801367a:	623c      	str	r4, [r7, #32]
	  __guard = nullptr;
 801367c:	f107 0314 	add.w	r3, r7, #20
 8013680:	2100      	movs	r1, #0
 8013682:	4618      	mov	r0, r3
 8013684:	f000 f89c 	bl	80137c0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	6a3a      	ldr	r2, [r7, #32]
 801368c:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 801368e:	6a38      	ldr	r0, [r7, #32]
 8013690:	f000 f8a5 	bl	80137de <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8013694:	4602      	mov	r2, r0
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	601a      	str	r2, [r3, #0]
	}
 801369a:	f107 0314 	add.w	r3, r7, #20
 801369e:	4618      	mov	r0, r3
 80136a0:	f000 f836 	bl	8013710 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80136a4:	f107 031c 	add.w	r3, r7, #28
 80136a8:	4618      	mov	r0, r3
 80136aa:	f000 f812 	bl	80136d2 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	4618      	mov	r0, r3
 80136b2:	372c      	adds	r7, #44	@ 0x2c
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080136b8 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b082      	sub	sp, #8
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
 80136c0:	6039      	str	r1, [r7, #0]
 80136c2:	6878      	ldr	r0, [r7, #4]
 80136c4:	f000 f8c8 	bl	8013858 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	4618      	mov	r0, r3
 80136cc:	3708      	adds	r7, #8
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd80      	pop	{r7, pc}

080136d2 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80136d2:	b580      	push	{r7, lr}
 80136d4:	b082      	sub	sp, #8
 80136d6:	af00      	add	r7, sp, #0
 80136d8:	6078      	str	r0, [r7, #4]
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f000 f8c7 	bl	801386e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	4618      	mov	r0, r3
 80136e4:	3708      	adds	r7, #8
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}

080136ea <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 80136ea:	b580      	push	{r7, lr}
 80136ec:	b082      	sub	sp, #8
 80136ee:	af00      	add	r7, sp, #0
 80136f0:	6078      	str	r0, [r7, #4]
 80136f2:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80136f4:	2101      	movs	r1, #1
 80136f6:	6838      	ldr	r0, [r7, #0]
 80136f8:	f000 f8c4 	bl	8013884 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 80136fc:	4603      	mov	r3, r0
 80136fe:	461a      	mov	r2, r3
 8013700:	6839      	ldr	r1, [r7, #0]
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	f000 f8cd 	bl	80138a2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 8013708:	6878      	ldr	r0, [r7, #4]
 801370a:	3708      	adds	r7, #8
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}

08013710 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8013710:	b580      	push	{r7, lr}
 8013712:	b082      	sub	sp, #8
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	685b      	ldr	r3, [r3, #4]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d007      	beq.n	8013730 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6818      	ldr	r0, [r3, #0]
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	685b      	ldr	r3, [r3, #4]
 8013728:	2201      	movs	r2, #1
 801372a:	4619      	mov	r1, r3
 801372c:	f000 f8cd 	bl	80138ca <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	4618      	mov	r0, r3
 8013734:	3708      	adds	r7, #8
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}

0801373a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 801373a:	b580      	push	{r7, lr}
 801373c:	b082      	sub	sp, #8
 801373e:	af00      	add	r7, sp, #0
 8013740:	6078      	str	r0, [r7, #4]
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	685b      	ldr	r3, [r3, #4]
 8013746:	4618      	mov	r0, r3
 8013748:	f000 f8ce 	bl	80138e8 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 801374c:	4603      	mov	r3, r0
 801374e:	4618      	mov	r0, r3
 8013750:	3708      	adds	r7, #8
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}
	...

08013758 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8013758:	b5f0      	push	{r4, r5, r6, r7, lr}
 801375a:	b087      	sub	sp, #28
 801375c:	af02      	add	r7, sp, #8
 801375e:	60f8      	str	r0, [r7, #12]
 8013760:	7239      	strb	r1, [r7, #8]
 8013762:	607a      	str	r2, [r7, #4]
 8013764:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	4618      	mov	r0, r3
 801376a:	f7fa fe11 	bl	800e390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 801376e:	4a13      	ldr	r2, [pc, #76]	@ (80137bc <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfRiEEES1_DpOT_+0x64>)
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	601a      	str	r2, [r3, #0]
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	330c      	adds	r3, #12
 8013778:	4621      	mov	r1, r4
 801377a:	4618      	mov	r0, r3
 801377c:	f000 f8bf 	bl	80138fe <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8013780:	68f8      	ldr	r0, [r7, #12]
 8013782:	f000 f82c 	bl	80137de <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8013786:	4604      	mov	r4, r0
 8013788:	6878      	ldr	r0, [r7, #4]
 801378a:	f7fb ff78 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801378e:	4605      	mov	r5, r0
 8013790:	6838      	ldr	r0, [r7, #0]
 8013792:	f7ff fda6 	bl	80132e2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013796:	4606      	mov	r6, r0
 8013798:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801379a:	f7fb ff7b 	bl	800f694 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801379e:	4603      	mov	r3, r0
 80137a0:	f107 0008 	add.w	r0, r7, #8
 80137a4:	9300      	str	r3, [sp, #0]
 80137a6:	4633      	mov	r3, r6
 80137a8:	462a      	mov	r2, r5
 80137aa:	4621      	mov	r1, r4
 80137ac:	f000 f8b6 	bl	801391c <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfRiEEEvRS0_PT_DpOT0_>
	}
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	4618      	mov	r0, r3
 80137b4:	3714      	adds	r7, #20
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137ba:	bf00      	nop
 80137bc:	0802b5d0 	.word	0x0802b5d0

080137c0 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80137c0:	b480      	push	{r7}
 80137c2:	b083      	sub	sp, #12
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
 80137c8:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	2200      	movs	r2, #0
 80137ce:	605a      	str	r2, [r3, #4]
	return *this;
 80137d0:	687b      	ldr	r3, [r7, #4]
      }
 80137d2:	4618      	mov	r0, r3
 80137d4:	370c      	adds	r7, #12
 80137d6:	46bd      	mov	sp, r7
 80137d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137dc:	4770      	bx	lr

080137de <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 80137de:	b580      	push	{r7, lr}
 80137e0:	b082      	sub	sp, #8
 80137e2:	af00      	add	r7, sp, #0
 80137e4:	6078      	str	r0, [r7, #4]
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	330c      	adds	r3, #12
 80137ea:	4618      	mov	r0, r3
 80137ec:	f000 f8b2 	bl	8013954 <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE6_M_ptrEv>
 80137f0:	4603      	mov	r3, r0
 80137f2:	4618      	mov	r0, r3
 80137f4:	3708      	adds	r7, #8
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd80      	pop	{r7, pc}
	...

080137fc <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 80137fc:	b5b0      	push	{r4, r5, r7, lr}
 80137fe:	b084      	sub	sp, #16
 8013800:	af00      	add	r7, sp, #0
 8013802:	60f8      	str	r0, [r7, #12]
 8013804:	7239      	strb	r1, [r7, #8]
 8013806:	607a      	str	r2, [r7, #4]
 8013808:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	4618      	mov	r0, r3
 801380e:	f7fa fdbf 	bl	800e390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8013812:	4a10      	ldr	r2, [pc, #64]	@ (8013854 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJRPKcRPVfEEES1_DpOT_+0x58>)
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	601a      	str	r2, [r3, #0]
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	330c      	adds	r3, #12
 801381c:	4621      	mov	r1, r4
 801381e:	4618      	mov	r0, r3
 8013820:	f000 f86d 	bl	80138fe <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8013824:	68f8      	ldr	r0, [r7, #12]
 8013826:	f7ff ffda 	bl	80137de <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801382a:	4604      	mov	r4, r0
 801382c:	6878      	ldr	r0, [r7, #4]
 801382e:	f7fb ff26 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013832:	4605      	mov	r5, r0
 8013834:	6838      	ldr	r0, [r7, #0]
 8013836:	f7ff fd54 	bl	80132e2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 801383a:	4603      	mov	r3, r0
 801383c:	f107 0008 	add.w	r0, r7, #8
 8013840:	462a      	mov	r2, r5
 8013842:	4621      	mov	r1, r4
 8013844:	f000 f892 	bl	801396c <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfEEEvRS0_PT_DpOT0_>
	}
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	4618      	mov	r0, r3
 801384c:	3710      	adds	r7, #16
 801384e:	46bd      	mov	sp, r7
 8013850:	bdb0      	pop	{r4, r5, r7, pc}
 8013852:	bf00      	nop
 8013854:	0802b5d0 	.word	0x0802b5d0

08013858 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8013858:	b480      	push	{r7}
 801385a:	b083      	sub	sp, #12
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	4618      	mov	r0, r3
 8013864:	370c      	adds	r7, #12
 8013866:	46bd      	mov	sp, r7
 8013868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801386c:	4770      	bx	lr

0801386e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801386e:	b480      	push	{r7}
 8013870:	b083      	sub	sp, #12
 8013872:	af00      	add	r7, sp, #0
 8013874:	6078      	str	r0, [r7, #4]
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	4618      	mov	r0, r3
 801387a:	370c      	adds	r7, #12
 801387c:	46bd      	mov	sp, r7
 801387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013882:	4770      	bx	lr

08013884 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8013884:	b580      	push	{r7, lr}
 8013886:	b082      	sub	sp, #8
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
 801388c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801388e:	2200      	movs	r2, #0
 8013890:	6839      	ldr	r1, [r7, #0]
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f000 f882 	bl	801399c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8013898:	4603      	mov	r3, r0
 801389a:	4618      	mov	r0, r3
 801389c:	3708      	adds	r7, #8
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}

080138a2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 80138a2:	b580      	push	{r7, lr}
 80138a4:	b084      	sub	sp, #16
 80138a6:	af00      	add	r7, sp, #0
 80138a8:	60f8      	str	r0, [r7, #12]
 80138aa:	60b9      	str	r1, [r7, #8]
 80138ac:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 80138ae:	68b8      	ldr	r0, [r7, #8]
 80138b0:	f000 f8a2 	bl	80139f8 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 80138b4:	4602      	mov	r2, r0
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	601a      	str	r2, [r3, #0]
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	687a      	ldr	r2, [r7, #4]
 80138be:	605a      	str	r2, [r3, #4]
      { }
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	4618      	mov	r0, r3
 80138c4:	3710      	adds	r7, #16
 80138c6:	46bd      	mov	sp, r7
 80138c8:	bd80      	pop	{r7, pc}

080138ca <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80138ca:	b580      	push	{r7, lr}
 80138cc:	b084      	sub	sp, #16
 80138ce:	af00      	add	r7, sp, #0
 80138d0:	60f8      	str	r0, [r7, #12]
 80138d2:	60b9      	str	r1, [r7, #8]
 80138d4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	68b9      	ldr	r1, [r7, #8]
 80138da:	68f8      	ldr	r0, [r7, #12]
 80138dc:	f000 f897 	bl	8013a0e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 80138e0:	bf00      	nop
 80138e2:	3710      	adds	r7, #16
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}

080138e8 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 80138e8:	b480      	push	{r7}
 80138ea:	b083      	sub	sp, #12
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
      return __ptr;
 80138f0:	687b      	ldr	r3, [r7, #4]
    }
 80138f2:	4618      	mov	r0, r3
 80138f4:	370c      	adds	r7, #12
 80138f6:	46bd      	mov	sp, r7
 80138f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fc:	4770      	bx	lr

080138fe <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 80138fe:	b580      	push	{r7, lr}
 8013900:	b082      	sub	sp, #8
 8013902:	af00      	add	r7, sp, #0
 8013904:	6078      	str	r0, [r7, #4]
 8013906:	7039      	strb	r1, [r7, #0]
 8013908:	463b      	mov	r3, r7
 801390a:	4619      	mov	r1, r3
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	f7fa ff59 	bl	800e7c4 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	4618      	mov	r0, r3
 8013916:	3708      	adds	r7, #8
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}

0801391c <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfRiEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 801391c:	b5b0      	push	{r4, r5, r7, lr}
 801391e:	b084      	sub	sp, #16
 8013920:	af00      	add	r7, sp, #0
 8013922:	60f8      	str	r0, [r7, #12]
 8013924:	60b9      	str	r1, [r7, #8]
 8013926:	607a      	str	r2, [r7, #4]
 8013928:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f7fb fea7 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013930:	4604      	mov	r4, r0
 8013932:	6838      	ldr	r0, [r7, #0]
 8013934:	f7ff fcd5 	bl	80132e2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013938:	4605      	mov	r5, r0
 801393a:	6a38      	ldr	r0, [r7, #32]
 801393c:	f7fb feaa 	bl	800f694 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8013940:	4603      	mov	r3, r0
 8013942:	462a      	mov	r2, r5
 8013944:	4621      	mov	r1, r4
 8013946:	68b8      	ldr	r0, [r7, #8]
 8013948:	f000 f872 	bl	8013a30 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfRiEEvPT_DpOT0_>
 801394c:	bf00      	nop
 801394e:	3710      	adds	r7, #16
 8013950:	46bd      	mov	sp, r7
 8013952:	bdb0      	pop	{r4, r5, r7, pc}

08013954 <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE6_M_ptrEv>:
      _M_ptr() noexcept
 8013954:	b580      	push	{r7, lr}
 8013956:	b082      	sub	sp, #8
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	f000 f8a4 	bl	8013aaa <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE7_M_addrEv>
 8013962:	4603      	mov	r3, r0
 8013964:	4618      	mov	r0, r3
 8013966:	3708      	adds	r7, #8
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}

0801396c <_ZNSt16allocator_traitsISaIvEE9constructI10SigmaDeltaJRPKcRPVfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 801396c:	b590      	push	{r4, r7, lr}
 801396e:	b085      	sub	sp, #20
 8013970:	af00      	add	r7, sp, #0
 8013972:	60f8      	str	r0, [r7, #12]
 8013974:	60b9      	str	r1, [r7, #8]
 8013976:	607a      	str	r2, [r7, #4]
 8013978:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 801397a:	6878      	ldr	r0, [r7, #4]
 801397c:	f7fb fe7f 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013980:	4604      	mov	r4, r0
 8013982:	6838      	ldr	r0, [r7, #0]
 8013984:	f7ff fcad 	bl	80132e2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013988:	4603      	mov	r3, r0
 801398a:	461a      	mov	r2, r3
 801398c:	4621      	mov	r1, r4
 801398e:	68b8      	ldr	r0, [r7, #8]
 8013990:	f000 f896 	bl	8013ac0 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfEEvPT_DpOT0_>
 8013994:	bf00      	nop
 8013996:	3714      	adds	r7, #20
 8013998:	46bd      	mov	sp, r7
 801399a:	bd90      	pop	{r4, r7, pc}

0801399c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801399c:	b580      	push	{r7, lr}
 801399e:	b084      	sub	sp, #16
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	60f8      	str	r0, [r7, #12]
 80139a4:	60b9      	str	r1, [r7, #8]
 80139a6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80139a8:	68f8      	ldr	r0, [r7, #12]
 80139aa:	f000 f8c1 	bl	8013b30 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 80139ae:	4602      	mov	r2, r0
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	4293      	cmp	r3, r2
 80139b4:	bf8c      	ite	hi
 80139b6:	2301      	movhi	r3, #1
 80139b8:	2300      	movls	r3, #0
 80139ba:	b2db      	uxtb	r3, r3
 80139bc:	2b00      	cmp	r3, #0
 80139be:	bf14      	ite	ne
 80139c0:	2301      	movne	r3, #1
 80139c2:	2300      	moveq	r3, #0
 80139c4:	b2db      	uxtb	r3, r3
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d007      	beq.n	80139da <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	4a09      	ldr	r2, [pc, #36]	@ (80139f4 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 80139ce:	4293      	cmp	r3, r2
 80139d0:	d901      	bls.n	80139d6 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80139d2:	f014 fea7 	bl	8028724 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80139d6:	f014 fea2 	bl	802871e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80139da:	68bb      	ldr	r3, [r7, #8]
 80139dc:	2254      	movs	r2, #84	@ 0x54
 80139de:	fb02 f303 	mul.w	r3, r2, r3
 80139e2:	4618      	mov	r0, r3
 80139e4:	f014 fe88 	bl	80286f8 <_Znwj>
 80139e8:	4603      	mov	r3, r0
 80139ea:	bf00      	nop
      }
 80139ec:	4618      	mov	r0, r3
 80139ee:	3710      	adds	r7, #16
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}
 80139f4:	030c30c3 	.word	0x030c30c3

080139f8 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80139f8:	b480      	push	{r7}
 80139fa:	b083      	sub	sp, #12
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	4618      	mov	r0, r3
 8013a04:	370c      	adds	r7, #12
 8013a06:	46bd      	mov	sp, r7
 8013a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0c:	4770      	bx	lr

08013a0e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8013a0e:	b580      	push	{r7, lr}
 8013a10:	b084      	sub	sp, #16
 8013a12:	af00      	add	r7, sp, #0
 8013a14:	60f8      	str	r0, [r7, #12]
 8013a16:	60b9      	str	r1, [r7, #8]
 8013a18:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	2254      	movs	r2, #84	@ 0x54
 8013a1e:	fb02 f303 	mul.w	r3, r2, r3
 8013a22:	4619      	mov	r1, r3
 8013a24:	68b8      	ldr	r0, [r7, #8]
 8013a26:	f014 fe56 	bl	80286d6 <_ZdlPvj>
      }
 8013a2a:	3710      	adds	r7, #16
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}

08013a30 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfRiEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8013a30:	b5b0      	push	{r4, r5, r7, lr}
 8013a32:	b08c      	sub	sp, #48	@ 0x30
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	60f8      	str	r0, [r7, #12]
 8013a38:	60b9      	str	r1, [r7, #8]
 8013a3a:	607a      	str	r2, [r7, #4]
 8013a3c:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	4619      	mov	r1, r3
 8013a42:	2048      	movs	r0, #72	@ 0x48
 8013a44:	f7f6 fff8 	bl	800aa38 <_ZnwjPv>
 8013a48:	4605      	mov	r5, r0
 8013a4a:	68b8      	ldr	r0, [r7, #8]
 8013a4c:	f7fb fe17 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013a50:	4603      	mov	r3, r0
 8013a52:	681c      	ldr	r4, [r3, #0]
 8013a54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f014 fe5e 	bl	802871a <_ZNSaIcEC1Ev>
 8013a5e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8013a62:	f107 0314 	add.w	r3, r7, #20
 8013a66:	4621      	mov	r1, r4
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7f3 ffa3 	bl	80079b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013a6e:	6878      	ldr	r0, [r7, #4]
 8013a70:	f7ff fc37 	bl	80132e2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013a74:	4603      	mov	r3, r0
 8013a76:	681c      	ldr	r4, [r3, #0]
 8013a78:	6838      	ldr	r0, [r7, #0]
 8013a7a:	f7fb fe0b 	bl	800f694 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	f107 0114 	add.w	r1, r7, #20
 8013a86:	4622      	mov	r2, r4
 8013a88:	4628      	mov	r0, r5
 8013a8a:	f7ff faa1 	bl	8012fd0 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVfi>
 8013a8e:	f107 0314 	add.w	r3, r7, #20
 8013a92:	4618      	mov	r0, r3
 8013a94:	f014 ff2b 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013a98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f014 fe3d 	bl	802871c <_ZNSaIcED1Ev>
    }
 8013aa2:	bf00      	nop
 8013aa4:	3730      	adds	r7, #48	@ 0x30
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bdb0      	pop	{r4, r5, r7, pc}

08013aaa <_ZN9__gnu_cxx16__aligned_bufferI10SigmaDeltaE7_M_addrEv>:
      _M_addr() noexcept
 8013aaa:	b480      	push	{r7}
 8013aac:	b083      	sub	sp, #12
 8013aae:	af00      	add	r7, sp, #0
 8013ab0:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8013ab2:	687b      	ldr	r3, [r7, #4]
      }
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	370c      	adds	r7, #12
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013abe:	4770      	bx	lr

08013ac0 <_ZSt10_ConstructI10SigmaDeltaJRPKcRPVfEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8013ac0:	b5b0      	push	{r4, r5, r7, lr}
 8013ac2:	b08c      	sub	sp, #48	@ 0x30
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	60f8      	str	r0, [r7, #12]
 8013ac8:	60b9      	str	r1, [r7, #8]
 8013aca:	607a      	str	r2, [r7, #4]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	4619      	mov	r1, r3
 8013ad0:	2048      	movs	r0, #72	@ 0x48
 8013ad2:	f7f6 ffb1 	bl	800aa38 <_ZnwjPv>
 8013ad6:	4605      	mov	r5, r0
 8013ad8:	68b8      	ldr	r0, [r7, #8]
 8013ada:	f7fb fdd0 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	681c      	ldr	r4, [r3, #0]
 8013ae2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f014 fe17 	bl	802871a <_ZNSaIcEC1Ev>
 8013aec:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8013af0:	f107 0314 	add.w	r3, r7, #20
 8013af4:	4621      	mov	r1, r4
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7f3 ff5c 	bl	80079b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f7ff fbf0 	bl	80132e2 <_ZSt7forwardIRPVfEOT_RNSt16remove_referenceIS3_E4typeE>
 8013b02:	4603      	mov	r3, r0
 8013b04:	681a      	ldr	r2, [r3, #0]
 8013b06:	f107 0314 	add.w	r3, r7, #20
 8013b0a:	4619      	mov	r1, r3
 8013b0c:	4628      	mov	r0, r5
 8013b0e:	f7ff fa29 	bl	8012f64 <_ZN10SigmaDeltaC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPVf>
 8013b12:	f107 0314 	add.w	r3, r7, #20
 8013b16:	4618      	mov	r0, r3
 8013b18:	f014 fee9 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013b1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013b20:	4618      	mov	r0, r3
 8013b22:	f014 fdfb 	bl	802871c <_ZNSaIcED1Ev>
    }
 8013b26:	bf00      	nop
 8013b28:	3730      	adds	r7, #48	@ 0x30
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013b30 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013b30:	b480      	push	{r7}
 8013b32:	b083      	sub	sp, #12
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013b38:	4b03      	ldr	r3, [pc, #12]	@ (8013b48 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	370c      	adds	r7, #12
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b44:	4770      	bx	lr
 8013b46:	bf00      	nop
 8013b48:	01861861 	.word	0x01861861

08013b4c <_ZN10SigmaDeltaD1Ev>:
#include <string>
#include "../../remora.h"
#include "../../modules/module.h"
#include "../../drivers/pin/pin.h"

class SigmaDelta : public Module {
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b082      	sub	sp, #8
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
 8013b54:	4a08      	ldr	r2, [pc, #32]	@ (8013b78 <_ZN10SigmaDeltaD1Ev+0x2c>)
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	601a      	str	r2, [r3, #0]
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	3318      	adds	r3, #24
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f014 fec5 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7fe f9d0 	bl	8011f0c <_ZN6ModuleD1Ev>
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	4618      	mov	r0, r3
 8013b70:	3708      	adds	r7, #8
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd80      	pop	{r7, pc}
 8013b76:	bf00      	nop
 8013b78:	0802b5ec 	.word	0x0802b5ec

08013b7c <_ZN10SigmaDeltaD0Ev>:
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b082      	sub	sp, #8
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f7ff ffe1 	bl	8013b4c <_ZN10SigmaDeltaD1Ev>
 8013b8a:	2148      	movs	r1, #72	@ 0x48
 8013b8c:	6878      	ldr	r0, [r7, #4]
 8013b8e:	f014 fda2 	bl	80286d6 <_ZdlPvj>
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	4618      	mov	r0, r3
 8013b96:	3708      	adds	r7, #8
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}

08013b9c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b082      	sub	sp, #8
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
 8013ba4:	4a05      	ldr	r2, [pc, #20]	@ (8013bbc <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	601a      	str	r2, [r3, #0]
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	4618      	mov	r0, r3
 8013bae:	f7f8 fdb1 	bl	800c714 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	3708      	adds	r7, #8
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}
 8013bbc:	0802b5d0 	.word	0x0802b5d0

08013bc0 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b082      	sub	sp, #8
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
 8013bc8:	6878      	ldr	r0, [r7, #4]
 8013bca:	f7ff ffe7 	bl	8013b9c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8013bce:	2154      	movs	r1, #84	@ 0x54
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f014 fd80 	bl	80286d6 <_ZdlPvj>
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	4618      	mov	r0, r3
 8013bda:	3708      	adds	r7, #8
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}

08013be0 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8013be0:	b590      	push	{r4, r7, lr}
 8013be2:	b083      	sub	sp, #12
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	330c      	adds	r3, #12
 8013bec:	4618      	mov	r0, r3
 8013bee:	f000 f856 	bl	8013c9e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8013bf2:	4604      	mov	r4, r0
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f7ff fdf2 	bl	80137de <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	4619      	mov	r1, r3
 8013bfe:	4620      	mov	r0, r4
 8013c00:	f000 f859 	bl	8013cb6 <_ZNSt16allocator_traitsISaIvEE7destroyI10SigmaDeltaEEvRS0_PT_>
      }
 8013c04:	bf00      	nop
 8013c06:	370c      	adds	r7, #12
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd90      	pop	{r4, r7, pc}

08013c0c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b086      	sub	sp, #24
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	330c      	adds	r3, #12
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f000 f840 	bl	8013c9e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8013c1e:	4602      	mov	r2, r0
 8013c20:	f107 0314 	add.w	r3, r7, #20
 8013c24:	4611      	mov	r1, r2
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7ff fd46 	bl	80136b8 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8013c2c:	f107 0114 	add.w	r1, r7, #20
 8013c30:	f107 030c 	add.w	r3, r7, #12
 8013c34:	687a      	ldr	r2, [r7, #4]
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7ff fe33 	bl	80138a2 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8013c3c:	6878      	ldr	r0, [r7, #4]
 8013c3e:	f7ff ffad 	bl	8013b9c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8013c42:	f107 030c 	add.w	r3, r7, #12
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7ff fd62 	bl	8013710 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8013c4c:	f107 0314 	add.w	r3, r7, #20
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7ff fd3e 	bl	80136d2 <_ZNSaISt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8013c56:	3718      	adds	r7, #24
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}

08013c5c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b084      	sub	sp, #16
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
 8013c64:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f7ff fdb9 	bl	80137de <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8013c6c:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8013c6e:	f7f6 ff2f 	bl	800aad0 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8013c72:	4602      	mov	r2, r0
	    ||
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	4293      	cmp	r3, r2
 8013c78:	d005      	beq.n	8013c86 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 8013c7a:	6838      	ldr	r0, [r7, #0]
 8013c7c:	f014 fd68 	bl	8028750 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8013c80:	4603      	mov	r3, r0
	    ||
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d001      	beq.n	8013c8a <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 8013c86:	2301      	movs	r3, #1
 8013c88:	e000      	b.n	8013c8c <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8013c8a:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d001      	beq.n	8013c94 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	e000      	b.n	8013c96 <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 8013c94:	2300      	movs	r3, #0
      }
 8013c96:	4618      	mov	r0, r3
 8013c98:	3710      	adds	r7, #16
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}

08013c9e <_ZNSt23_Sp_counted_ptr_inplaceI10SigmaDeltaSaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 8013c9e:	b580      	push	{r7, lr}
 8013ca0:	b082      	sub	sp, #8
 8013ca2:	af00      	add	r7, sp, #0
 8013ca4:	6078      	str	r0, [r7, #4]
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f7fb f807 	bl	800ecba <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 8013cac:	4603      	mov	r3, r0
 8013cae:	4618      	mov	r0, r3
 8013cb0:	3708      	adds	r7, #8
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd80      	pop	{r7, pc}

08013cb6 <_ZNSt16allocator_traitsISaIvEE7destroyI10SigmaDeltaEEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 8013cb6:	b580      	push	{r7, lr}
 8013cb8:	b082      	sub	sp, #8
 8013cba:	af00      	add	r7, sp, #0
 8013cbc:	6078      	str	r0, [r7, #4]
 8013cbe:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 8013cc0:	6838      	ldr	r0, [r7, #0]
 8013cc2:	f000 f804 	bl	8013cce <_ZSt8_DestroyI10SigmaDeltaEvPT_>
 8013cc6:	bf00      	nop
 8013cc8:	3708      	adds	r7, #8
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	bd80      	pop	{r7, pc}

08013cce <_ZSt8_DestroyI10SigmaDeltaEvPT_>:
    _Destroy(_Tp* __pointer)
 8013cce:	b580      	push	{r7, lr}
 8013cd0:	b082      	sub	sp, #8
 8013cd2:	af00      	add	r7, sp, #0
 8013cd4:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	4798      	blx	r3
    }
 8013ce0:	bf00      	nop
 8013ce2:	3708      	adds	r7, #8
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}

08013ce8 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "stepgen.h"


shared_ptr<Module> Stepgen::create(const JsonObject& config, Remora* instance)
	{
 8013ce8:	b590      	push	{r4, r7, lr}
 8013cea:	b0bd      	sub	sp, #244	@ 0xf4
 8013cec:	af08      	add	r7, sp, #32
 8013cee:	60f8      	str	r0, [r7, #12]
 8013cf0:	60b9      	str	r1, [r7, #8]
 8013cf2:	607a      	str	r2, [r7, #4]
	    const char* comment = config["Comment"];
 8013cf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013cf8:	4a50      	ldr	r2, [pc, #320]	@ (8013e3c <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x154>)
 8013cfa:	68b9      	ldr	r1, [r7, #8]
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f7fe fb68 	bl	80123d2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013d02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013d06:	4618      	mov	r0, r3
 8013d08:	f7f3 feda 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013d0c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
	    uint32_t threadFreq = config["ThreadFreq"];
 8013d10:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013d14:	4a4a      	ldr	r2, [pc, #296]	@ (8013e40 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>)
 8013d16:	68b9      	ldr	r1, [r7, #8]
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f7fb fb86 	bl	800f42a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013d1e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7f3 fefd 	bl	8007b22 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	62bb      	str	r3, [r7, #40]	@ 0x28

	    printf("%s\n", comment);
 8013d2c:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8013d30:	f015 fbfc 	bl	802952c <puts>

	    int joint = config["Joint Number"];
 8013d34:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8013d38:	4a42      	ldr	r2, [pc, #264]	@ (8013e44 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x15c>)
 8013d3a:	68b9      	ldr	r1, [r7, #8]
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f000 fa1d 	bl	801417c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013d42:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8013d46:	4618      	mov	r0, r3
 8013d48:	f7fb fb63 	bl	800f412 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	627b      	str	r3, [r7, #36]	@ 0x24
	    const char* enable = config["Enable Pin"];
 8013d50:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8013d54:	4a3c      	ldr	r2, [pc, #240]	@ (8013e48 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x160>)
 8013d56:	68b9      	ldr	r1, [r7, #8]
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7fb fb66 	bl	800f42a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013d5e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8013d62:	4618      	mov	r0, r3
 8013d64:	f7f3 feac 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	623b      	str	r3, [r7, #32]
	    const char* step = config["Step Pin"];
 8013d6c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013d70:	4a36      	ldr	r2, [pc, #216]	@ (8013e4c <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x164>)
 8013d72:	68b9      	ldr	r1, [r7, #8]
 8013d74:	4618      	mov	r0, r3
 8013d76:	f7fd fb3a 	bl	80113ee <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013d7a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7f3 fe9e 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013d84:	4603      	mov	r3, r0
 8013d86:	61fb      	str	r3, [r7, #28]
	    const char* dir = config["Direction Pin"];
 8013d88:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8013d8c:	4a30      	ldr	r2, [pc, #192]	@ (8013e50 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x168>)
 8013d8e:	68b9      	ldr	r1, [r7, #8]
 8013d90:	4618      	mov	r0, r3
 8013d92:	f000 fa18 	bl	80141c6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8013d96:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7f3 fe90 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8013da0:	4603      	mov	r3, r0
 8013da2:	61bb      	str	r3, [r7, #24]

	    // Configure pointers to data source and feedback location
	    volatile int32_t* ptrJointFreqCmd = &instance->getRxData()->jointFreqCmd[joint];
 8013da4:	6878      	ldr	r0, [r7, #4]
 8013da6:	f7fd f94f 	bl	8011048 <_ZN6Remora9getRxDataEv>
 8013daa:	4602      	mov	r2, r0
 8013dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dae:	009b      	lsls	r3, r3, #2
 8013db0:	4413      	add	r3, r2
 8013db2:	3304      	adds	r3, #4
 8013db4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	    volatile int32_t* ptrJointFeedback = &instance->getTxData()->jointFeedback[joint];
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f7fd f937 	bl	801102c <_ZN6Remora9getTxDataEv>
 8013dbe:	4602      	mov	r2, r0
 8013dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dc2:	009b      	lsls	r3, r3, #2
 8013dc4:	4413      	add	r3, r2
 8013dc6:	3304      	adds	r3, #4
 8013dc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	    volatile uint8_t* ptrJointEnable = &instance->getRxData()->jointEnable;
 8013dcc:	6878      	ldr	r0, [r7, #4]
 8013dce:	f7fd f93b 	bl	8011048 <_ZN6Remora9getRxDataEv>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	333c      	adds	r3, #60	@ 0x3c
 8013dd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

	    bool usesModulePost = true;		// stepgen uses the thread modulesPost vector
 8013dda:	2301      	movs	r3, #1
 8013ddc:	75fb      	strb	r3, [r7, #23]

	    // Create the step generator and register it in the thread
	    return make_unique<Stepgen>(threadFreq, joint, enable, step, dir, Config::stepBit, *ptrJointFreqCmd, *ptrJointFeedback, *ptrJointEnable, usesModulePost);
 8013dde:	f107 00bc 	add.w	r0, r7, #188	@ 0xbc
 8013de2:	f107 0420 	add.w	r4, r7, #32
 8013de6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8013dea:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8013dee:	f107 0317 	add.w	r3, r7, #23
 8013df2:	9306      	str	r3, [sp, #24]
 8013df4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8013df8:	9305      	str	r3, [sp, #20]
 8013dfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8013dfe:	9304      	str	r3, [sp, #16]
 8013e00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8013e04:	9303      	str	r3, [sp, #12]
 8013e06:	4b13      	ldr	r3, [pc, #76]	@ (8013e54 <_ZN7Stepgen6createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x16c>)
 8013e08:	9302      	str	r3, [sp, #8]
 8013e0a:	f107 0318 	add.w	r3, r7, #24
 8013e0e:	9301      	str	r3, [sp, #4]
 8013e10:	f107 031c 	add.w	r3, r7, #28
 8013e14:	9300      	str	r3, [sp, #0]
 8013e16:	4623      	mov	r3, r4
 8013e18:	f000 f9fa 	bl	8014210 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8013e1c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8013e20:	4619      	mov	r1, r3
 8013e22:	68f8      	ldr	r0, [r7, #12]
 8013e24:	f000 fa70 	bl	8014308 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 8013e28:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f000 fa49 	bl	80142c4 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>
 8013e32:	bf00      	nop
	}
 8013e34:	68f8      	ldr	r0, [r7, #12]
 8013e36:	37d4      	adds	r7, #212	@ 0xd4
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	bd90      	pop	{r4, r7, pc}
 8013e3c:	0802abd0 	.word	0x0802abd0
 8013e40:	0802abd8 	.word	0x0802abd8
 8013e44:	0802abe4 	.word	0x0802abe4
 8013e48:	0802abf4 	.word	0x0802abf4
 8013e4c:	0802ac00 	.word	0x0802ac00
 8013e50:	0802ac0c 	.word	0x0802ac0c
 8013e54:	0802b608 	.word	0x0802b608

08013e58 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>:
 * @param _stepBit The number of bits used for the step value.
 * @param _ptrFrequencyCommand A reference to the frequency command data for the joint.
 * @param _ptrFeedback A reference to the feedback data for the joint.
 * @param _ptrJointEnable A reference to the joint enable data.
 */
Stepgen::Stepgen(int32_t _threadFreq, int _jointNumber, const char* _enable, const char* _step, const char* _direction, int _stepBit, volatile int32_t& _ptrFrequencyCommand, volatile int32_t& _ptrFeedback,  volatile uint8_t& _ptrJointEnable, bool _usesModulePost)
 8013e58:	b590      	push	{r4, r7, lr}
 8013e5a:	b09b      	sub	sp, #108	@ 0x6c
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	60f8      	str	r0, [r7, #12]
 8013e60:	60b9      	str	r1, [r7, #8]
 8013e62:	607a      	str	r2, [r7, #4]
 8013e64:	603b      	str	r3, [r7, #0]
      DDSaccumulator(0),
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
      mask(1 << _jointNumber),  // Mask for checking the joint number
      isEnabled(false),
      isForward(false),
      isStepping(false)
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7fe f833 	bl	8011ed4 <_ZN6ModuleC1Ev>
 8013e6e:	4a5c      	ldr	r2, [pc, #368]	@ (8013fe0 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb+0x188>)
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	601a      	str	r2, [r3, #0]
    : jointNumber(_jointNumber),
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	687a      	ldr	r2, [r7, #4]
 8013e78:	619a      	str	r2, [r3, #24]
      enable(_enable),
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	683a      	ldr	r2, [r7, #0]
 8013e7e:	61da      	str	r2, [r3, #28]
      step(_step),
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8013e84:	621a      	str	r2, [r3, #32]
      direction(_direction),
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013e8a:	625a      	str	r2, [r3, #36]	@ 0x24
      stepBit(_stepBit),
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013e92:	629a      	str	r2, [r3, #40]	@ 0x28
      ptrFrequencyCommand(&_ptrFrequencyCommand),
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8013e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      ptrFeedback(&_ptrFeedback),
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013ea2:	631a      	str	r2, [r3, #48]	@ 0x30
      ptrJointEnable(&_ptrJointEnable),
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013eaa:	635a      	str	r2, [r3, #52]	@ 0x34
	  enablePin(_enable, OUTPUT),
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8013eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f014 fc2f 	bl	802871a <_ZNSaIcEC1Ev>
 8013ebc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8013ec0:	f107 0314 	add.w	r3, r7, #20
 8013ec4:	6839      	ldr	r1, [r7, #0]
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f7f3 fd74 	bl	80079b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013ecc:	f107 0314 	add.w	r3, r7, #20
 8013ed0:	2201      	movs	r2, #1
 8013ed2:	4619      	mov	r1, r3
 8013ed4:	4620      	mov	r0, r4
 8013ed6:	f7f0 fe6b 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8013eda:	f107 0314 	add.w	r3, r7, #20
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f014 fd05 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013ee4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013ee8:	4618      	mov	r0, r3
 8013eea:	f014 fc17 	bl	802871c <_ZNSaIcED1Ev>
      stepPin(_step, OUTPUT),
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 8013ef4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8013ef8:	4618      	mov	r0, r3
 8013efa:	f014 fc0e 	bl	802871a <_ZNSaIcEC1Ev>
 8013efe:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8013f02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013f06:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f7f3 fd53 	bl	80079b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013f0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013f12:	2201      	movs	r2, #1
 8013f14:	4619      	mov	r1, r3
 8013f16:	4620      	mov	r0, r4
 8013f18:	f7f0 fe4a 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8013f1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013f20:	4618      	mov	r0, r3
 8013f22:	f014 fce4 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013f26:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f014 fbf6 	bl	802871c <_ZNSaIcED1Ev>
      directionPin(_direction, OUTPUT),
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	f103 04b8 	add.w	r4, r3, #184	@ 0xb8
 8013f36:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f014 fbed 	bl	802871a <_ZNSaIcEC1Ev>
 8013f40:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8013f44:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013f48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f7f3 fd32 	bl	80079b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8013f50:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013f54:	2201      	movs	r2, #1
 8013f56:	4619      	mov	r1, r3
 8013f58:	4620      	mov	r0, r4
 8013f5a:	f7f0 fe29 	bl	8004bb0 <_ZN3PinC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8013f5e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013f62:	4618      	mov	r0, r3
 8013f64:	f014 fcc3 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8013f68:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f014 fbd5 	bl	802871c <_ZNSaIcED1Ev>
      rawCount(0),
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	2200      	movs	r2, #0
 8013f76:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
      DDSaccumulator(0),
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
 8013f82:	2201      	movs	r2, #1
 8013f84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013f88:	fa02 f303 	lsl.w	r3, r2, r3
 8013f8c:	ee07 3a90 	vmov	s15, r3
 8013f90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	ee07 3a90 	vmov	s15, r3
 8013f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	edc3 7a40 	vstr	s15, [r3, #256]	@ 0x100
      mask(1 << _jointNumber),  // Mask for checking the joint number
 8013fa8:	2201      	movs	r2, #1
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	409a      	lsls	r2, r3
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
      isEnabled(false),
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
      isForward(false),
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
      isStepping(false)
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
{
	usesModulePost = _usesModulePost;
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 8013fd2:	751a      	strb	r2, [r3, #20]
}
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	376c      	adds	r7, #108	@ 0x6c
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	bd90      	pop	{r4, r7, pc}
 8013fde:	bf00      	nop
 8013fe0:	0802b630 	.word	0x0802b630

08013fe4 <_ZN7Stepgen6updateEv>:
 * 
 * This method generates pulses for stepping according to the current
 * frequency command and direction.
 */
void Stepgen::update()
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b082      	sub	sp, #8
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
    makePulses();  // Generate pulses for stepping and direction
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f000 f819 	bl	8014024 <_ZN7Stepgen10makePulsesEv>
}
 8013ff2:	bf00      	nop
 8013ff4:	3708      	adds	r7, #8
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}

08013ffa <_ZN7Stepgen10updatePostEv>:
 * @brief Post-update method for the Stepgen.
 * 
 * This method stops any ongoing pulses after the update phase.
 */
void Stepgen::updatePost()
{
 8013ffa:	b580      	push	{r7, lr}
 8013ffc:	b082      	sub	sp, #8
 8013ffe:	af00      	add	r7, sp, #0
 8014000:	6078      	str	r0, [r7, #4]
    stopPulses();  // Stop pulse generation after update
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f000 f8a8 	bl	8014158 <_ZN7Stepgen10stopPulsesEv>
}
 8014008:	bf00      	nop
 801400a:	3708      	adds	r7, #8
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}

08014010 <_ZN7Stepgen10slowUpdateEv>:
 * 
 * This is a placeholder for performing any slow or low-priority updates,
 * though it currently does nothing.
 */
void Stepgen::slowUpdate()
{
 8014010:	b480      	push	{r7}
 8014012:	b083      	sub	sp, #12
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
    // Currently no operation for slow update
}
 8014018:	bf00      	nop
 801401a:	370c      	adds	r7, #12
 801401c:	46bd      	mov	sp, r7
 801401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014022:	4770      	bx	lr

08014024 <_ZN7Stepgen10makePulsesEv>:
 * This method calculates the next step and updates the step and direction
 * pins accordingly. It uses the DDS (Direct Digital Synthesis) technique
 * to generate precise frequency-based stepping.
 */
void Stepgen::makePulses()
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b084      	sub	sp, #16
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
    isEnabled = ((*(ptrJointEnable) & mask) != 0);
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014030:	781b      	ldrb	r3, [r3, #0]
 8014032:	b2db      	uxtb	r3, r3
 8014034:	461a      	mov	r2, r3
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801403c:	4013      	ands	r3, r2
 801403e:	2b00      	cmp	r3, #0
 8014040:	bf14      	ite	ne
 8014042:	2301      	movne	r3, #1
 8014044:	2300      	moveq	r3, #0
 8014046:	b2da      	uxtb	r2, r3
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
    if (!isEnabled)
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8014054:	f083 0301 	eor.w	r3, r3, #1
 8014058:	b2db      	uxtb	r3, r3
 801405a:	2b00      	cmp	r3, #0
 801405c:	d006      	beq.n	801406c <_ZN7Stepgen10makePulsesEv+0x48>
    {
        enablePin.set(true);  	// Disable the driver if not enabled
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	3338      	adds	r3, #56	@ 0x38
 8014062:	2101      	movs	r1, #1
 8014064:	4618      	mov	r0, r3
 8014066:	f7f0 ff4d 	bl	8004f04 <_ZN3Pin3setEb>
        return;  				// Exit early if the generator is disabled
 801406a:	e072      	b.n	8014152 <_ZN7Stepgen10makePulsesEv+0x12e>
    }

    enablePin.set(false); 		// Enable the driver
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	3338      	adds	r3, #56	@ 0x38
 8014070:	2100      	movs	r1, #0
 8014072:	4618      	mov	r0, r3
 8014074:	f7f0 ff46 	bl	8004f04 <_ZN3Pin3setEb>

    // Get the current frequency command and scale it using the frequency scale
    frequencyCommand = *ptrFrequencyCommand;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801407c:	681a      	ldr	r2, [r3, #0]
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    DDSaddValue = frequencyCommand * frequencyScale;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 801408a:	ee07 3a90 	vmov	s15, r3
 801408e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 8014098:	ee67 7a27 	vmul.f32	s15, s14, s15
 801409c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80140a0:	ee17 2a90 	vmov	r2, s15
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

    // Save the current DDS accumulator value and update it
    int32_t stepNow = DDSaccumulator;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80140b0:	60fb      	str	r3, [r7, #12]
    DDSaccumulator += DDSaddValue;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80140be:	441a      	add	r2, r3
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

    // Check for changes in the low half of the DDS accumulator
    stepNow ^= DDSaccumulator;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80140cc:	68fa      	ldr	r2, [r7, #12]
 80140ce:	4053      	eors	r3, r2
 80140d0:	60fb      	str	r3, [r7, #12]
    stepNow &= (1L << stepBit);  // Check for the step bit
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140d6:	2201      	movs	r2, #1
 80140d8:	fa02 f303 	lsl.w	r3, r2, r3
 80140dc:	68fa      	ldr	r2, [r7, #12]
 80140de:	4013      	ands	r3, r2
 80140e0:	60fb      	str	r3, [r7, #12]

    // Determine direction based on the sign of DDSaddValue
    isForward = DDSaddValue > 0;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	bfcc      	ite	gt
 80140ec:	2301      	movgt	r3, #1
 80140ee:	2300      	movle	r3, #0
 80140f0:	b2da      	uxtb	r2, r3
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111

    // If a step is to be made, set the direction and step pins accordingly
    if (stepNow)
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d029      	beq.n	8014152 <_ZN7Stepgen10makePulsesEv+0x12e>
    {
        directionPin.set(isForward);  // Set direction pin
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 801410a:	4619      	mov	r1, r3
 801410c:	4610      	mov	r0, r2
 801410e:	f7f0 fef9 	bl	8004f04 <_ZN3Pin3setEb>
        stepPin.set(true);  // Set the step pin
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	3378      	adds	r3, #120	@ 0x78
 8014116:	2101      	movs	r1, #1
 8014118:	4618      	mov	r0, r3
 801411a:	f7f0 fef3 	bl	8004f04 <_ZN3Pin3setEb>
        rawCount += (isForward ? 1 : -1);  // Update rawCount based on direction
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8014124:	687a      	ldr	r2, [r7, #4]
 8014126:	f892 2111 	ldrb.w	r2, [r2, #273]	@ 0x111
 801412a:	2a00      	cmp	r2, #0
 801412c:	d001      	beq.n	8014132 <_ZN7Stepgen10makePulsesEv+0x10e>
 801412e:	2201      	movs	r2, #1
 8014130:	e001      	b.n	8014136 <_ZN7Stepgen10makePulsesEv+0x112>
 8014132:	f04f 32ff 	mov.w	r2, #4294967295
 8014136:	441a      	add	r2, r3
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        *ptrFeedback = rawCount;  // Update the feedback with the raw count
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014142:	687a      	ldr	r2, [r7, #4]
 8014144:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8014148:	601a      	str	r2, [r3, #0]
        isStepping = true;  // Indicate that stepping is occurring
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	2201      	movs	r2, #1
 801414e:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
    }
}
 8014152:	3710      	adds	r7, #16
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}

08014158 <_ZN7Stepgen10stopPulsesEv>:
 * @brief Stops the pulse generation.
 * 
 * This method resets the step pin to low and stops any ongoing stepping.
 */
void Stepgen::stopPulses()
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b082      	sub	sp, #8
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
    stepPin.set(false);  // Reset step pin to low
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	3378      	adds	r3, #120	@ 0x78
 8014164:	2100      	movs	r1, #0
 8014166:	4618      	mov	r0, r3
 8014168:	f7f0 fecc 	bl	8004f04 <_ZN3Pin3setEb>
    isStepping = false;  // Indicate that stepping has stopped
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2200      	movs	r2, #0
 8014170:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
}
 8014174:	bf00      	nop
 8014176:	3708      	adds	r7, #8
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}

0801417c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 801417c:	b580      	push	{r7, lr}
 801417e:	b08c      	sub	sp, #48	@ 0x30
 8014180:	af02      	add	r7, sp, #8
 8014182:	60f8      	str	r0, [r7, #12]
 8014184:	60b9      	str	r1, [r7, #8]
 8014186:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8014188:	68ba      	ldr	r2, [r7, #8]
 801418a:	f107 0314 	add.w	r3, r7, #20
 801418e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014192:	e883 0003 	stmia.w	r3, {r0, r1}
 8014196:	f107 031c 	add.w	r3, r7, #28
 801419a:	6879      	ldr	r1, [r7, #4]
 801419c:	4618      	mov	r0, r3
 801419e:	f000 f8c6 	bl	801432e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80141a2:	466a      	mov	r2, sp
 80141a4:	f107 0320 	add.w	r3, r7, #32
 80141a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80141ac:	e882 0003 	stmia.w	r2, {r0, r1}
 80141b0:	69fb      	ldr	r3, [r7, #28]
 80141b2:	f107 0214 	add.w	r2, r7, #20
 80141b6:	ca06      	ldmia	r2, {r1, r2}
 80141b8:	68f8      	ldr	r0, [r7, #12]
 80141ba:	f7f3 fdf0 	bl	8007d9e <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 80141be:	68f8      	ldr	r0, [r7, #12]
 80141c0:	3728      	adds	r7, #40	@ 0x28
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd80      	pop	{r7, pc}

080141c6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 80141c6:	b580      	push	{r7, lr}
 80141c8:	b08c      	sub	sp, #48	@ 0x30
 80141ca:	af02      	add	r7, sp, #8
 80141cc:	60f8      	str	r0, [r7, #12]
 80141ce:	60b9      	str	r1, [r7, #8]
 80141d0:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 80141d2:	68ba      	ldr	r2, [r7, #8]
 80141d4:	f107 0314 	add.w	r3, r7, #20
 80141d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80141dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80141e0:	f107 031c 	add.w	r3, r7, #28
 80141e4:	6879      	ldr	r1, [r7, #4]
 80141e6:	4618      	mov	r0, r3
 80141e8:	f000 f8b4 	bl	8014354 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80141ec:	466a      	mov	r2, sp
 80141ee:	f107 0320 	add.w	r3, r7, #32
 80141f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80141f6:	e882 0003 	stmia.w	r2, {r0, r1}
 80141fa:	69fb      	ldr	r3, [r7, #28]
 80141fc:	f107 0214 	add.w	r2, r7, #20
 8014200:	ca06      	ldmia	r2, {r1, r2}
 8014202:	68f8      	ldr	r0, [r7, #12]
 8014204:	f7f3 fdcb 	bl	8007d9e <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8014208:	68f8      	ldr	r0, [r7, #12]
 801420a:	3728      	adds	r7, #40	@ 0x28
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}

08014210 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8014210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014214:	b093      	sub	sp, #76	@ 0x4c
 8014216:	af08      	add	r7, sp, #32
 8014218:	6278      	str	r0, [r7, #36]	@ 0x24
 801421a:	6239      	str	r1, [r7, #32]
 801421c:	61fa      	str	r2, [r7, #28]
 801421e:	61bb      	str	r3, [r7, #24]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8014220:	f44f 708a 	mov.w	r0, #276	@ 0x114
 8014224:	f014 fa68 	bl	80286f8 <_Znwj>
 8014228:	4603      	mov	r3, r0
 801422a:	4698      	mov	r8, r3
 801422c:	6a38      	ldr	r0, [r7, #32]
 801422e:	f7f8 fdf5 	bl	800ce1c <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 8014232:	4603      	mov	r3, r0
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	4699      	mov	r9, r3
 8014238:	69f8      	ldr	r0, [r7, #28]
 801423a:	f7fb fa2b 	bl	800f694 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 801423e:	4603      	mov	r3, r0
 8014240:	681e      	ldr	r6, [r3, #0]
 8014242:	69b8      	ldr	r0, [r7, #24]
 8014244:	f7fb fa1b 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8014248:	4603      	mov	r3, r0
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	617b      	str	r3, [r7, #20]
 801424e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8014250:	f7fb fa15 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 8014254:	4603      	mov	r3, r0
 8014256:	681c      	ldr	r4, [r3, #0]
 8014258:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801425a:	f7fb fa10 	bl	800f67e <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 801425e:	4603      	mov	r3, r0
 8014260:	681d      	ldr	r5, [r3, #0]
 8014262:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8014264:	f7f8 fde5 	bl	800ce32 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8014268:	4603      	mov	r3, r0
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	613b      	str	r3, [r7, #16]
 801426e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8014270:	f000 f883 	bl	801437a <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 8014274:	60f8      	str	r0, [r7, #12]
 8014276:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8014278:	f000 f87f 	bl	801437a <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 801427c:	60b8      	str	r0, [r7, #8]
 801427e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8014280:	f000 f886 	bl	8014390 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>
 8014284:	6078      	str	r0, [r7, #4]
 8014286:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8014288:	f7fd f9b1 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801428c:	4603      	mov	r3, r0
 801428e:	781b      	ldrb	r3, [r3, #0]
 8014290:	9306      	str	r3, [sp, #24]
 8014292:	687a      	ldr	r2, [r7, #4]
 8014294:	9205      	str	r2, [sp, #20]
 8014296:	68ba      	ldr	r2, [r7, #8]
 8014298:	9204      	str	r2, [sp, #16]
 801429a:	68fa      	ldr	r2, [r7, #12]
 801429c:	9203      	str	r2, [sp, #12]
 801429e:	693a      	ldr	r2, [r7, #16]
 80142a0:	9202      	str	r2, [sp, #8]
 80142a2:	9501      	str	r5, [sp, #4]
 80142a4:	9400      	str	r4, [sp, #0]
 80142a6:	697b      	ldr	r3, [r7, #20]
 80142a8:	4632      	mov	r2, r6
 80142aa:	4649      	mov	r1, r9
 80142ac:	4640      	mov	r0, r8
 80142ae:	f7ff fdd3 	bl	8013e58 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>
 80142b2:	4641      	mov	r1, r8
 80142b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80142b6:	f000 f886 	bl	80143c6 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80142ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80142bc:	372c      	adds	r7, #44	@ 0x2c
 80142be:	46bd      	mov	sp, r7
 80142c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080142c4 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80142c4:	b590      	push	{r4, r7, lr}
 80142c6:	b085      	sub	sp, #20
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	4618      	mov	r0, r3
 80142d0:	f000 f888 	bl	80143e4 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 80142d4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d00c      	beq.n	80142f8 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	f000 f88d 	bl	80143fe <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 80142e4:	4604      	mov	r4, r0
 80142e6:	68f8      	ldr	r0, [r7, #12]
 80142e8:	f000 f896 	bl	8014418 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>
 80142ec:	4603      	mov	r3, r0
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	4619      	mov	r1, r3
 80142f2:	4620      	mov	r0, r4
 80142f4:	f000 f8cf 	bl	8014496 <_ZNKSt14default_deleteI7StepgenEclEPS0_>
	__ptr = pointer();
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	2200      	movs	r2, #0
 80142fc:	601a      	str	r2, [r3, #0]
      }
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	4618      	mov	r0, r3
 8014302:	3714      	adds	r7, #20
 8014304:	46bd      	mov	sp, r7
 8014306:	bd90      	pop	{r4, r7, pc}

08014308 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 8014308:	b590      	push	{r4, r7, lr}
 801430a:	b083      	sub	sp, #12
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
 8014310:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8014312:	687c      	ldr	r4, [r7, #4]
 8014314:	6838      	ldr	r0, [r7, #0]
 8014316:	f000 f8cf 	bl	80144b8 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 801431a:	4603      	mov	r3, r0
 801431c:	4619      	mov	r1, r3
 801431e:	4620      	mov	r0, r4
 8014320:	f000 f8d5 	bl	80144ce <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	4618      	mov	r0, r3
 8014328:	370c      	adds	r7, #12
 801432a:	46bd      	mov	sp, r7
 801432c:	bd90      	pop	{r4, r7, pc}

0801432e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 801432e:	b580      	push	{r7, lr}
 8014330:	b082      	sub	sp, #8
 8014332:	af00      	add	r7, sp, #0
 8014334:	6078      	str	r0, [r7, #4]
 8014336:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8014338:	6838      	ldr	r0, [r7, #0]
 801433a:	f000 f900 	bl	801453e <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 801433e:	4602      	mov	r2, r0
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	4611      	mov	r1, r2
 8014344:	4618      	mov	r0, r3
 8014346:	f000 f905 	bl	8014554 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>
 801434a:	bf00      	nop
}
 801434c:	6878      	ldr	r0, [r7, #4]
 801434e:	3708      	adds	r7, #8
 8014350:	46bd      	mov	sp, r7
 8014352:	bd80      	pop	{r7, pc}

08014354 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8014354:	b580      	push	{r7, lr}
 8014356:	b082      	sub	sp, #8
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
 801435c:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 801435e:	6838      	ldr	r0, [r7, #0]
 8014360:	f000 f907 	bl	8014572 <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8014364:	4602      	mov	r2, r0
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	4611      	mov	r1, r2
 801436a:	4618      	mov	r0, r3
 801436c:	f000 f90c 	bl	8014588 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>
 8014370:	bf00      	nop
}
 8014372:	6878      	ldr	r0, [r7, #4]
 8014374:	3708      	adds	r7, #8
 8014376:	46bd      	mov	sp, r7
 8014378:	bd80      	pop	{r7, pc}

0801437a <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801437a:	b480      	push	{r7}
 801437c:	b083      	sub	sp, #12
 801437e:	af00      	add	r7, sp, #0
 8014380:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	4618      	mov	r0, r3
 8014386:	370c      	adds	r7, #12
 8014388:	46bd      	mov	sp, r7
 801438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438e:	4770      	bx	lr

08014390 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014390:	b480      	push	{r7}
 8014392:	b083      	sub	sp, #12
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	4618      	mov	r0, r3
 801439c:	370c      	adds	r7, #12
 801439e:	46bd      	mov	sp, r7
 80143a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a4:	4770      	bx	lr

080143a6 <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80143a6:	b580      	push	{r7, lr}
 80143a8:	b082      	sub	sp, #8
 80143aa:	af00      	add	r7, sp, #0
 80143ac:	6078      	str	r0, [r7, #4]
 80143ae:	6039      	str	r1, [r7, #0]
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	683a      	ldr	r2, [r7, #0]
 80143b4:	4611      	mov	r1, r2
 80143b6:	4618      	mov	r0, r3
 80143b8:	f000 f8f5 	bl	80145a6 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	4618      	mov	r0, r3
 80143c0:	3708      	adds	r7, #8
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}

080143c6 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80143c6:	b580      	push	{r7, lr}
 80143c8:	b082      	sub	sp, #8
 80143ca:	af00      	add	r7, sp, #0
 80143cc:	6078      	str	r0, [r7, #4]
 80143ce:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	6839      	ldr	r1, [r7, #0]
 80143d4:	4618      	mov	r0, r3
 80143d6:	f7ff ffe6 	bl	80143a6 <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	4618      	mov	r0, r3
 80143de:	3708      	adds	r7, #8
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}

080143e4 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b082      	sub	sp, #8
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	4618      	mov	r0, r3
 80143f0:	f000 f8ed 	bl	80145ce <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80143f4:	4603      	mov	r3, r0
 80143f6:	4618      	mov	r0, r3
 80143f8:	3708      	adds	r7, #8
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}

080143fe <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80143fe:	b580      	push	{r7, lr}
 8014400:	b082      	sub	sp, #8
 8014402:	af00      	add	r7, sp, #0
 8014404:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	4618      	mov	r0, r3
 801440a:	f000 f8ed 	bl	80145e8 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>
 801440e:	4603      	mov	r3, r0
 8014410:	4618      	mov	r0, r3
 8014412:	3708      	adds	r7, #8
 8014414:	46bd      	mov	sp, r7
 8014416:	bd80      	pop	{r7, pc}

08014418 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8014418:	b480      	push	{r7}
 801441a:	b083      	sub	sp, #12
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	4618      	mov	r0, r3
 8014424:	370c      	adds	r7, #12
 8014426:	46bd      	mov	sp, r7
 8014428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442c:	4770      	bx	lr
	...

08014430 <_ZN7StepgenD1Ev>:
 *
 * The Stepgen class is responsible for controlling a stepper motor by generating
 * pulses based on frequency commands received from a controller, as well as managing
 * the motor's direction and enable states.
 */
class Stepgen : public Module
 8014430:	b580      	push	{r7, lr}
 8014432:	b082      	sub	sp, #8
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	4a0d      	ldr	r2, [pc, #52]	@ (8014470 <_ZN7StepgenD1Ev+0x40>)
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	601a      	str	r2, [r3, #0]
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	33b8      	adds	r3, #184	@ 0xb8
 8014442:	4618      	mov	r0, r3
 8014444:	f7ed ff3e 	bl	80022c4 <_ZN3PinD1Ev>
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	3378      	adds	r3, #120	@ 0x78
 801444c:	4618      	mov	r0, r3
 801444e:	f7ed ff39 	bl	80022c4 <_ZN3PinD1Ev>
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	3338      	adds	r3, #56	@ 0x38
 8014456:	4618      	mov	r0, r3
 8014458:	f7ed ff34 	bl	80022c4 <_ZN3PinD1Ev>
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	4618      	mov	r0, r3
 8014460:	f7fd fd54 	bl	8011f0c <_ZN6ModuleD1Ev>
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	4618      	mov	r0, r3
 8014468:	3708      	adds	r7, #8
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}
 801446e:	bf00      	nop
 8014470:	0802b630 	.word	0x0802b630

08014474 <_ZN7StepgenD0Ev>:
 8014474:	b580      	push	{r7, lr}
 8014476:	b082      	sub	sp, #8
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	f7ff ffd7 	bl	8014430 <_ZN7StepgenD1Ev>
 8014482:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f014 f925 	bl	80286d6 <_ZdlPvj>
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	4618      	mov	r0, r3
 8014490:	3708      	adds	r7, #8
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}

08014496 <_ZNKSt14default_deleteI7StepgenEclEPS0_>:
      operator()(_Tp* __ptr) const
 8014496:	b580      	push	{r7, lr}
 8014498:	b082      	sub	sp, #8
 801449a:	af00      	add	r7, sp, #0
 801449c:	6078      	str	r0, [r7, #4]
 801449e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80144a0:	683b      	ldr	r3, [r7, #0]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d004      	beq.n	80144b0 <_ZNKSt14default_deleteI7StepgenEclEPS0_+0x1a>
 80144a6:	681a      	ldr	r2, [r3, #0]
 80144a8:	3204      	adds	r2, #4
 80144aa:	6812      	ldr	r2, [r2, #0]
 80144ac:	4618      	mov	r0, r3
 80144ae:	4790      	blx	r2
      }
 80144b0:	bf00      	nop
 80144b2:	3708      	adds	r7, #8
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}

080144b8 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80144b8:	b480      	push	{r7}
 80144ba:	b083      	sub	sp, #12
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	4618      	mov	r0, r3
 80144c4:	370c      	adds	r7, #12
 80144c6:	46bd      	mov	sp, r7
 80144c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144cc:	4770      	bx	lr

080144ce <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 80144ce:	b580      	push	{r7, lr}
 80144d0:	b084      	sub	sp, #16
 80144d2:	af00      	add	r7, sp, #0
 80144d4:	6078      	str	r0, [r7, #4]
 80144d6:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 80144d8:	6838      	ldr	r0, [r7, #0]
 80144da:	f000 f892 	bl	8014602 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 80144de:	4602      	mov	r2, r0
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	601a      	str	r2, [r3, #0]
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	3304      	adds	r3, #4
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7f8 fedd 	bl	800d2a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 80144ee:	6838      	ldr	r0, [r7, #0]
 80144f0:	f000 f887 	bl	8014602 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 80144f4:	4603      	mov	r3, r0
 80144f6:	4618      	mov	r0, r3
 80144f8:	f000 f890 	bl	801461c <_ZSt12__to_addressI7StepgenEPT_S2_>
 80144fc:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 80144fe:	6838      	ldr	r0, [r7, #0]
 8014500:	f7ff ffda 	bl	80144b8 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8014504:	4602      	mov	r2, r0
 8014506:	f107 0308 	add.w	r3, r7, #8
 801450a:	4611      	mov	r1, r2
 801450c:	4618      	mov	r0, r3
 801450e:	f000 f890 	bl	8014632 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	3304      	adds	r3, #4
 8014516:	f107 0208 	add.w	r2, r7, #8
 801451a:	4611      	mov	r1, r2
 801451c:	4618      	mov	r0, r3
 801451e:	f7fb fab4 	bl	800fa8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 8014522:	f107 0308 	add.w	r3, r7, #8
 8014526:	4618      	mov	r0, r3
 8014528:	f7f7 fcc1 	bl	800beae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 801452c:	68f9      	ldr	r1, [r7, #12]
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f000 f8c1 	bl	80146b6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	4618      	mov	r0, r3
 8014538:	3710      	adds	r7, #16
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}

0801453e <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 801453e:	b480      	push	{r7}
 8014540:	b083      	sub	sp, #12
 8014542:	af00      	add	r7, sp, #0
 8014544:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8014546:	687b      	ldr	r3, [r7, #4]
}
 8014548:	4618      	mov	r0, r3
 801454a:	370c      	adds	r7, #12
 801454c:	46bd      	mov	sp, r7
 801454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014552:	4770      	bx	lr

08014554 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8014554:	b580      	push	{r7, lr}
 8014556:	b082      	sub	sp, #8
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
 801455c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 801455e:	2301      	movs	r3, #1
 8014560:	220c      	movs	r2, #12
 8014562:	6839      	ldr	r1, [r7, #0]
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f7f0 fe95 	bl	8005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	3708      	adds	r7, #8
 801456e:	46bd      	mov	sp, r7
 8014570:	bd80      	pop	{r7, pc}

08014572 <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8014572:	b480      	push	{r7}
 8014574:	b083      	sub	sp, #12
 8014576:	af00      	add	r7, sp, #0
 8014578:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 801457a:	687b      	ldr	r3, [r7, #4]
}
 801457c:	4618      	mov	r0, r3
 801457e:	370c      	adds	r7, #12
 8014580:	46bd      	mov	sp, r7
 8014582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014586:	4770      	bx	lr

08014588 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8014588:	b580      	push	{r7, lr}
 801458a:	b082      	sub	sp, #8
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
 8014590:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8014592:	2301      	movs	r3, #1
 8014594:	220d      	movs	r2, #13
 8014596:	6839      	ldr	r1, [r7, #0]
 8014598:	6878      	ldr	r0, [r7, #4]
 801459a:	f7f0 fe7b 	bl	8005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	3708      	adds	r7, #8
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd80      	pop	{r7, pc}

080145a6 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80145a6:	b590      	push	{r4, r7, lr}
 80145a8:	b083      	sub	sp, #12
 80145aa:	af00      	add	r7, sp, #0
 80145ac:	6078      	str	r0, [r7, #4]
 80145ae:	6039      	str	r1, [r7, #0]
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	4618      	mov	r0, r3
 80145b4:	f000 f88a 	bl	80146cc <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80145b8:	683c      	ldr	r4, [r7, #0]
 80145ba:	6878      	ldr	r0, [r7, #4]
 80145bc:	f7ff ff12 	bl	80143e4 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 80145c0:	4603      	mov	r3, r0
 80145c2:	601c      	str	r4, [r3, #0]
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	4618      	mov	r0, r3
 80145c8:	370c      	adds	r7, #12
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd90      	pop	{r4, r7, pc}

080145ce <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80145ce:	b580      	push	{r7, lr}
 80145d0:	b082      	sub	sp, #8
 80145d2:	af00      	add	r7, sp, #0
 80145d4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	4618      	mov	r0, r3
 80145da:	f000 f884 	bl	80146e6 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80145de:	4603      	mov	r3, r0
 80145e0:	4618      	mov	r0, r3
 80145e2:	3708      	adds	r7, #8
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bd80      	pop	{r7, pc}

080145e8 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b082      	sub	sp, #8
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	4618      	mov	r0, r3
 80145f4:	f000 f883 	bl	80146fe <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80145f8:	4603      	mov	r3, r0
 80145fa:	4618      	mov	r0, r3
 80145fc:	3708      	adds	r7, #8
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}

08014602 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8014602:	b580      	push	{r7, lr}
 8014604:	b082      	sub	sp, #8
 8014606:	af00      	add	r7, sp, #0
 8014608:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	4618      	mov	r0, r3
 801460e:	f000 f882 	bl	8014716 <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8014612:	4603      	mov	r3, r0
 8014614:	4618      	mov	r0, r3
 8014616:	3708      	adds	r7, #8
 8014618:	46bd      	mov	sp, r7
 801461a:	bd80      	pop	{r7, pc}

0801461c <_ZSt12__to_addressI7StepgenEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 801461c:	b480      	push	{r7}
 801461e:	b083      	sub	sp, #12
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
      return __ptr;
 8014624:	687b      	ldr	r3, [r7, #4]
    }
 8014626:	4618      	mov	r0, r3
 8014628:	370c      	adds	r7, #12
 801462a:	46bd      	mov	sp, r7
 801462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014630:	4770      	bx	lr

08014632 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 8014632:	b580      	push	{r7, lr}
 8014634:	b086      	sub	sp, #24
 8014636:	af00      	add	r7, sp, #0
 8014638:	6078      	str	r0, [r7, #4]
 801463a:	6039      	str	r1, [r7, #0]
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2200      	movs	r2, #0
 8014640:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 8014642:	6838      	ldr	r0, [r7, #0]
 8014644:	f7ff ffdd 	bl	8014602 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 8014648:	4603      	mov	r3, r0
 801464a:	2b00      	cmp	r3, #0
 801464c:	bf0c      	ite	eq
 801464e:	2301      	moveq	r3, #1
 8014650:	2300      	movne	r3, #0
 8014652:	b2db      	uxtb	r3, r3
 8014654:	2b00      	cmp	r3, #0
 8014656:	d128      	bne.n	80146aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 8014658:	f107 030c 	add.w	r3, r7, #12
 801465c:	4618      	mov	r0, r3
 801465e:	f000 f868 	bl	8014732 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 8014662:	f107 030c 	add.w	r3, r7, #12
 8014666:	2101      	movs	r1, #1
 8014668:	4618      	mov	r0, r3
 801466a:	f000 f87a 	bl	8014762 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 801466e:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 8014670:	6838      	ldr	r0, [r7, #0]
 8014672:	f000 f885 	bl	8014780 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>
 8014676:	4603      	mov	r3, r0
 8014678:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 801467a:	6838      	ldr	r0, [r7, #0]
 801467c:	f7ff febf 	bl	80143fe <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 8014680:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 8014682:	4618      	mov	r0, r3
 8014684:	f000 f889 	bl	801479a <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 8014688:	4603      	mov	r3, r0
 801468a:	f107 0210 	add.w	r2, r7, #16
 801468e:	f107 000c 	add.w	r0, r7, #12
 8014692:	6979      	ldr	r1, [r7, #20]
 8014694:	f000 f88c 	bl	80147b0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	697a      	ldr	r2, [r7, #20]
 801469c:	601a      	str	r2, [r3, #0]
	}
 801469e:	f107 030c 	add.w	r3, r7, #12
 80146a2:	4618      	mov	r0, r3
 80146a4:	f000 f851 	bl	801474a <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80146a8:	e000      	b.n	80146ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 80146aa:	bf00      	nop
	}
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	4618      	mov	r0, r3
 80146b0:	3718      	adds	r7, #24
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}

080146b6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80146b6:	b480      	push	{r7}
 80146b8:	b083      	sub	sp, #12
 80146ba:	af00      	add	r7, sp, #0
 80146bc:	6078      	str	r0, [r7, #4]
 80146be:	6039      	str	r1, [r7, #0]
	{ }
 80146c0:	bf00      	nop
 80146c2:	370c      	adds	r7, #12
 80146c4:	46bd      	mov	sp, r7
 80146c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ca:	4770      	bx	lr

080146cc <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b082      	sub	sp, #8
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	4618      	mov	r0, r3
 80146d8:	f000 f882 	bl	80147e0 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	4618      	mov	r0, r3
 80146e0:	3708      	adds	r7, #8
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}

080146e6 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80146e6:	b580      	push	{r7, lr}
 80146e8:	b082      	sub	sp, #8
 80146ea:	af00      	add	r7, sp, #0
 80146ec:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	f000 f886 	bl	8014800 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>
 80146f4:	4603      	mov	r3, r0
 80146f6:	4618      	mov	r0, r3
 80146f8:	3708      	adds	r7, #8
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}

080146fe <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80146fe:	b580      	push	{r7, lr}
 8014700:	b082      	sub	sp, #8
 8014702:	af00      	add	r7, sp, #0
 8014704:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8014706:	6878      	ldr	r0, [r7, #4]
 8014708:	f000 f887 	bl	801481a <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801470c:	4603      	mov	r3, r0
 801470e:	4618      	mov	r0, r3
 8014710:	3708      	adds	r7, #8
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}

08014716 <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8014716:	b580      	push	{r7, lr}
 8014718:	b082      	sub	sp, #8
 801471a:	af00      	add	r7, sp, #0
 801471c:	6078      	str	r0, [r7, #4]
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	4618      	mov	r0, r3
 8014722:	f000 f886 	bl	8014832 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8014726:	4603      	mov	r3, r0
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	4618      	mov	r0, r3
 801472c:	3708      	adds	r7, #8
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}

08014732 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8014732:	b580      	push	{r7, lr}
 8014734:	b082      	sub	sp, #8
 8014736:	af00      	add	r7, sp, #0
 8014738:	6078      	str	r0, [r7, #4]
 801473a:	6878      	ldr	r0, [r7, #4]
 801473c:	f000 f886 	bl	801484c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	4618      	mov	r0, r3
 8014744:	3708      	adds	r7, #8
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}

0801474a <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801474a:	b580      	push	{r7, lr}
 801474c:	b082      	sub	sp, #8
 801474e:	af00      	add	r7, sp, #0
 8014750:	6078      	str	r0, [r7, #4]
 8014752:	6878      	ldr	r0, [r7, #4]
 8014754:	f000 f885 	bl	8014862 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	4618      	mov	r0, r3
 801475c:	3708      	adds	r7, #8
 801475e:	46bd      	mov	sp, r7
 8014760:	bd80      	pop	{r7, pc}

08014762 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8014762:	b580      	push	{r7, lr}
 8014764:	b082      	sub	sp, #8
 8014766:	af00      	add	r7, sp, #0
 8014768:	6078      	str	r0, [r7, #4]
 801476a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801476c:	2200      	movs	r2, #0
 801476e:	6839      	ldr	r1, [r7, #0]
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f000 f881 	bl	8014878 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8014776:	4603      	mov	r3, r0
 8014778:	4618      	mov	r0, r3
 801477a:	3708      	adds	r7, #8
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}

08014780 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 8014780:	b580      	push	{r7, lr}
 8014782:	b082      	sub	sp, #8
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	4618      	mov	r0, r3
 801478c:	f000 f89e 	bl	80148cc <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>
 8014790:	4603      	mov	r3, r0
 8014792:	4618      	mov	r0, r3
 8014794:	3708      	adds	r7, #8
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}

0801479a <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801479a:	b480      	push	{r7}
 801479c:	b083      	sub	sp, #12
 801479e:	af00      	add	r7, sp, #0
 80147a0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	4618      	mov	r0, r3
 80147a6:	370c      	adds	r7, #12
 80147a8:	46bd      	mov	sp, r7
 80147aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ae:	4770      	bx	lr

080147b0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80147b0:	b590      	push	{r4, r7, lr}
 80147b2:	b085      	sub	sp, #20
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	60f8      	str	r0, [r7, #12]
 80147b8:	60b9      	str	r1, [r7, #8]
 80147ba:	607a      	str	r2, [r7, #4]
 80147bc:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f000 f899 	bl	80148f6 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 80147c4:	4604      	mov	r4, r0
 80147c6:	6838      	ldr	r0, [r7, #0]
 80147c8:	f7ff ffe7 	bl	801479a <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 80147cc:	4603      	mov	r3, r0
 80147ce:	4622      	mov	r2, r4
 80147d0:	68b9      	ldr	r1, [r7, #8]
 80147d2:	68f8      	ldr	r0, [r7, #12]
 80147d4:	f000 f89a 	bl	801490c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 80147d8:	bf00      	nop
 80147da:	3714      	adds	r7, #20
 80147dc:	46bd      	mov	sp, r7
 80147de:	bd90      	pop	{r4, r7, pc}

080147e0 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b082      	sub	sp, #8
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f000 f8ad 	bl	8014948 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	4618      	mov	r0, r3
 80147f2:	f000 f8b5 	bl	8014960 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	4618      	mov	r0, r3
 80147fa:	3708      	adds	r7, #8
 80147fc:	46bd      	mov	sp, r7
 80147fe:	bd80      	pop	{r7, pc}

08014800 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014800:	b580      	push	{r7, lr}
 8014802:	b082      	sub	sp, #8
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	4618      	mov	r0, r3
 801480c:	f000 f8b6 	bl	801497c <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>
 8014810:	4603      	mov	r3, r0
 8014812:	4618      	mov	r0, r3
 8014814:	3708      	adds	r7, #8
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}

0801481a <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801481a:	b580      	push	{r7, lr}
 801481c:	b082      	sub	sp, #8
 801481e:	af00      	add	r7, sp, #0
 8014820:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8014822:	6878      	ldr	r0, [r7, #4]
 8014824:	f000 f8b5 	bl	8014992 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>
 8014828:	4603      	mov	r3, r0
 801482a:	4618      	mov	r0, r3
 801482c:	3708      	adds	r7, #8
 801482e:	46bd      	mov	sp, r7
 8014830:	bd80      	pop	{r7, pc}

08014832 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8014832:	b580      	push	{r7, lr}
 8014834:	b082      	sub	sp, #8
 8014836:	af00      	add	r7, sp, #0
 8014838:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	4618      	mov	r0, r3
 801483e:	f000 f8b4 	bl	80149aa <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8014842:	4603      	mov	r3, r0
 8014844:	4618      	mov	r0, r3
 8014846:	3708      	adds	r7, #8
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}

0801484c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801484c:	b480      	push	{r7}
 801484e:	b083      	sub	sp, #12
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	4618      	mov	r0, r3
 8014858:	370c      	adds	r7, #12
 801485a:	46bd      	mov	sp, r7
 801485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014860:	4770      	bx	lr

08014862 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8014862:	b480      	push	{r7}
 8014864:	b083      	sub	sp, #12
 8014866:	af00      	add	r7, sp, #0
 8014868:	6078      	str	r0, [r7, #4]
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	4618      	mov	r0, r3
 801486e:	370c      	adds	r7, #12
 8014870:	46bd      	mov	sp, r7
 8014872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014876:	4770      	bx	lr

08014878 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8014878:	b580      	push	{r7, lr}
 801487a:	b084      	sub	sp, #16
 801487c:	af00      	add	r7, sp, #0
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	60b9      	str	r1, [r7, #8]
 8014882:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8014884:	68f8      	ldr	r0, [r7, #12]
 8014886:	f000 f89c 	bl	80149c2 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 801488a:	4602      	mov	r2, r0
 801488c:	68bb      	ldr	r3, [r7, #8]
 801488e:	4293      	cmp	r3, r2
 8014890:	bf8c      	ite	hi
 8014892:	2301      	movhi	r3, #1
 8014894:	2300      	movls	r3, #0
 8014896:	b2db      	uxtb	r3, r3
 8014898:	2b00      	cmp	r3, #0
 801489a:	bf14      	ite	ne
 801489c:	2301      	movne	r3, #1
 801489e:	2300      	moveq	r3, #0
 80148a0:	b2db      	uxtb	r3, r3
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d007      	beq.n	80148b6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80148ac:	d301      	bcc.n	80148b2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80148ae:	f013 ff39 	bl	8028724 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80148b2:	f013 ff34 	bl	802871e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80148b6:	68bb      	ldr	r3, [r7, #8]
 80148b8:	011b      	lsls	r3, r3, #4
 80148ba:	4618      	mov	r0, r3
 80148bc:	f013 ff1c 	bl	80286f8 <_Znwj>
 80148c0:	4603      	mov	r3, r0
 80148c2:	bf00      	nop
      }
 80148c4:	4618      	mov	r0, r3
 80148c6:	3710      	adds	r7, #16
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}

080148cc <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b084      	sub	sp, #16
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80148d4:	6878      	ldr	r0, [r7, #4]
 80148d6:	f7ff fd85 	bl	80143e4 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 80148da:	4603      	mov	r3, r0
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f7ff fd7f 	bl	80143e4 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 80148e6:	4603      	mov	r3, r0
 80148e8:	2200      	movs	r2, #0
 80148ea:	601a      	str	r2, [r3, #0]
	return __p;
 80148ec:	68fb      	ldr	r3, [r7, #12]
      }
 80148ee:	4618      	mov	r0, r3
 80148f0:	3710      	adds	r7, #16
 80148f2:	46bd      	mov	sp, r7
 80148f4:	bd80      	pop	{r7, pc}

080148f6 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80148f6:	b480      	push	{r7}
 80148f8:	b083      	sub	sp, #12
 80148fa:	af00      	add	r7, sp, #0
 80148fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	4618      	mov	r0, r3
 8014902:	370c      	adds	r7, #12
 8014904:	46bd      	mov	sp, r7
 8014906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801490a:	4770      	bx	lr

0801490c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801490c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801490e:	b085      	sub	sp, #20
 8014910:	af00      	add	r7, sp, #0
 8014912:	60f8      	str	r0, [r7, #12]
 8014914:	60b9      	str	r1, [r7, #8]
 8014916:	607a      	str	r2, [r7, #4]
 8014918:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	4619      	mov	r1, r3
 801491e:	2010      	movs	r0, #16
 8014920:	f7f6 f88a 	bl	800aa38 <_ZnwjPv>
 8014924:	4605      	mov	r5, r0
 8014926:	6878      	ldr	r0, [r7, #4]
 8014928:	f7ff ffe5 	bl	80148f6 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 801492c:	4603      	mov	r3, r0
 801492e:	681c      	ldr	r4, [r3, #0]
 8014930:	6838      	ldr	r0, [r7, #0]
 8014932:	f7ff ff32 	bl	801479a <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 8014936:	4632      	mov	r2, r6
 8014938:	4621      	mov	r1, r4
 801493a:	4628      	mov	r0, r5
 801493c:	f000 f84e 	bl	80149dc <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 8014940:	bf00      	nop
 8014942:	3714      	adds	r7, #20
 8014944:	46bd      	mov	sp, r7
 8014946:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014948 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>:
      _Tuple_impl()
 8014948:	b580      	push	{r7, lr}
 801494a:	b082      	sub	sp, #8
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8014950:	6878      	ldr	r0, [r7, #4]
 8014952:	f000 f865 	bl	8014a20 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	4618      	mov	r0, r3
 801495a:	3708      	adds	r7, #8
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}

08014960 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>:
      constexpr _Head_base()
 8014960:	b480      	push	{r7}
 8014962:	b083      	sub	sp, #12
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	2200      	movs	r2, #0
 801496c:	601a      	str	r2, [r3, #0]
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	4618      	mov	r0, r3
 8014972:	370c      	adds	r7, #12
 8014974:	46bd      	mov	sp, r7
 8014976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497a:	4770      	bx	lr

0801497c <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801497c:	b480      	push	{r7}
 801497e:	b083      	sub	sp, #12
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	4618      	mov	r0, r3
 8014988:	370c      	adds	r7, #12
 801498a:	46bd      	mov	sp, r7
 801498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014990:	4770      	bx	lr

08014992 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014992:	b580      	push	{r7, lr}
 8014994:	b082      	sub	sp, #8
 8014996:	af00      	add	r7, sp, #0
 8014998:	6078      	str	r0, [r7, #4]
 801499a:	6878      	ldr	r0, [r7, #4]
 801499c:	f000 f84b 	bl	8014a36 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>
 80149a0:	4603      	mov	r3, r0
 80149a2:	4618      	mov	r0, r3
 80149a4:	3708      	adds	r7, #8
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd80      	pop	{r7, pc}

080149aa <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80149aa:	b580      	push	{r7, lr}
 80149ac:	b082      	sub	sp, #8
 80149ae:	af00      	add	r7, sp, #0
 80149b0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80149b2:	6878      	ldr	r0, [r7, #4]
 80149b4:	f000 f84a 	bl	8014a4c <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>
 80149b8:	4603      	mov	r3, r0
 80149ba:	4618      	mov	r0, r3
 80149bc:	3708      	adds	r7, #8
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}

080149c2 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80149c2:	b480      	push	{r7}
 80149c4:	b083      	sub	sp, #12
 80149c6:	af00      	add	r7, sp, #0
 80149c8:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80149ca:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 80149ce:	4618      	mov	r0, r3
 80149d0:	370c      	adds	r7, #12
 80149d2:	46bd      	mov	sp, r7
 80149d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d8:	4770      	bx	lr
	...

080149dc <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 80149dc:	b5b0      	push	{r4, r5, r7, lr}
 80149de:	b086      	sub	sp, #24
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	60f8      	str	r0, [r7, #12]
 80149e4:	60b9      	str	r1, [r7, #8]
 80149e6:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	4618      	mov	r0, r3
 80149ec:	f7f9 fcd0 	bl	800e390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 80149f0:	4a0a      	ldr	r2, [pc, #40]	@ (8014a1c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	601a      	str	r2, [r3, #0]
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	f103 040c 	add.w	r4, r3, #12
 80149fc:	1d3b      	adds	r3, r7, #4
 80149fe:	4618      	mov	r0, r3
 8014a00:	f000 f831 	bl	8014a66 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 8014a04:	f107 0314 	add.w	r3, r7, #20
 8014a08:	462a      	mov	r2, r5
 8014a0a:	68b9      	ldr	r1, [r7, #8]
 8014a0c:	4620      	mov	r0, r4
 8014a0e:	f000 f835 	bl	8014a7c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	4618      	mov	r0, r3
 8014a16:	3718      	adds	r7, #24
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8014a1c:	0802b614 	.word	0x0802b614

08014a20 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>:
      constexpr _Head_base()
 8014a20:	b480      	push	{r7}
 8014a22:	b083      	sub	sp, #12
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	370c      	adds	r7, #12
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a34:	4770      	bx	lr

08014a36 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8014a36:	b480      	push	{r7}
 8014a38:	b083      	sub	sp, #12
 8014a3a:	af00      	add	r7, sp, #0
 8014a3c:	6078      	str	r0, [r7, #4]
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	4618      	mov	r0, r3
 8014a42:	370c      	adds	r7, #12
 8014a44:	46bd      	mov	sp, r7
 8014a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4a:	4770      	bx	lr

08014a4c <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b082      	sub	sp, #8
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	4618      	mov	r0, r3
 8014a58:	f000 f82c 	bl	8014ab4 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3708      	adds	r7, #8
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}

08014a66 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8014a66:	b480      	push	{r7}
 8014a68:	b083      	sub	sp, #12
 8014a6a:	af00      	add	r7, sp, #0
 8014a6c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	4618      	mov	r0, r3
 8014a72:	370c      	adds	r7, #12
 8014a74:	46bd      	mov	sp, r7
 8014a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7a:	4770      	bx	lr

08014a7c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b084      	sub	sp, #16
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	60f8      	str	r0, [r7, #12]
 8014a84:	60b9      	str	r1, [r7, #8]
 8014a86:	713a      	strb	r2, [r7, #4]
 8014a88:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 8014a8a:	1d3b      	adds	r3, r7, #4
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f7ff ffea 	bl	8014a66 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 8014a92:	4603      	mov	r3, r0
 8014a94:	4619      	mov	r1, r3
 8014a96:	68f8      	ldr	r0, [r7, #12]
 8014a98:	f000 f817 	bl	8014aca <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>
 8014a9c:	6839      	ldr	r1, [r7, #0]
 8014a9e:	68f8      	ldr	r0, [r7, #12]
 8014aa0:	f7fb fd52 	bl	8010548 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	68ba      	ldr	r2, [r7, #8]
 8014aa8:	601a      	str	r2, [r3, #0]
	{ }
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	4618      	mov	r0, r3
 8014aae:	3710      	adds	r7, #16
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}

08014ab4 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8014ab4:	b480      	push	{r7}
 8014ab6:	b083      	sub	sp, #12
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	4618      	mov	r0, r3
 8014ac0:	370c      	adds	r7, #12
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac8:	4770      	bx	lr

08014aca <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 8014aca:	b580      	push	{r7, lr}
 8014acc:	b082      	sub	sp, #8
 8014ace:	af00      	add	r7, sp, #0
 8014ad0:	6078      	str	r0, [r7, #4]
 8014ad2:	6039      	str	r1, [r7, #0]
 8014ad4:	6838      	ldr	r0, [r7, #0]
 8014ad6:	f7ff ffc6 	bl	8014a66 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	4618      	mov	r0, r3
 8014ade:	3708      	adds	r7, #8
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}

08014ae4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b082      	sub	sp, #8
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	4a05      	ldr	r2, [pc, #20]	@ (8014b04 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	601a      	str	r2, [r3, #0]
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	4618      	mov	r0, r3
 8014af6:	f7f7 fe0d 	bl	800c714 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	4618      	mov	r0, r3
 8014afe:	3708      	adds	r7, #8
 8014b00:	46bd      	mov	sp, r7
 8014b02:	bd80      	pop	{r7, pc}
 8014b04:	0802b614 	.word	0x0802b614

08014b08 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b082      	sub	sp, #8
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
 8014b10:	6878      	ldr	r0, [r7, #4]
 8014b12:	f7ff ffe7 	bl	8014ae4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8014b16:	2110      	movs	r1, #16
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	f013 fddc 	bl	80286d6 <_ZdlPvj>
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	4618      	mov	r0, r3
 8014b22:	3708      	adds	r7, #8
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd80      	pop	{r7, pc}

08014b28 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b082      	sub	sp, #8
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	330c      	adds	r3, #12
 8014b34:	4618      	mov	r0, r3
 8014b36:	f000 f83f 	bl	8014bb8 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 8014b3a:	4602      	mov	r2, r0
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	68db      	ldr	r3, [r3, #12]
 8014b40:	4619      	mov	r1, r3
 8014b42:	4610      	mov	r0, r2
 8014b44:	f7ff fca7 	bl	8014496 <_ZNKSt14default_deleteI7StepgenEclEPS0_>
 8014b48:	bf00      	nop
 8014b4a:	3708      	adds	r7, #8
 8014b4c:	46bd      	mov	sp, r7
 8014b4e:	bd80      	pop	{r7, pc}

08014b50 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b086      	sub	sp, #24
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	330c      	adds	r3, #12
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f000 f837 	bl	8014bd0 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8014b62:	4602      	mov	r2, r0
 8014b64:	f107 0314 	add.w	r3, r7, #20
 8014b68:	4611      	mov	r1, r2
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f000 f83c 	bl	8014be8 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8014b70:	f107 0114 	add.w	r1, r7, #20
 8014b74:	f107 030c 	add.w	r3, r7, #12
 8014b78:	687a      	ldr	r2, [r7, #4]
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f000 f841 	bl	8014c02 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 8014b80:	6878      	ldr	r0, [r7, #4]
 8014b82:	f7ff ffaf 	bl	8014ae4 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8014b86:	f107 030c 	add.w	r3, r7, #12
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f000 f84d 	bl	8014c2a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8014b90:	f107 0314 	add.w	r3, r7, #20
 8014b94:	4618      	mov	r0, r3
 8014b96:	f7ff fdd8 	bl	801474a <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8014b9a:	3718      	adds	r7, #24
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}

08014ba0 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 8014ba0:	b480      	push	{r7}
 8014ba2:	b083      	sub	sp, #12
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
 8014ba8:	6039      	str	r1, [r7, #0]
        return nullptr;
 8014baa:	2300      	movs	r3, #0
      }
 8014bac:	4618      	mov	r0, r3
 8014bae:	370c      	adds	r7, #12
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb6:	4770      	bx	lr

08014bb8 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b082      	sub	sp, #8
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
 8014bc0:	6878      	ldr	r0, [r7, #4]
 8014bc2:	f000 f847 	bl	8014c54 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	4618      	mov	r0, r3
 8014bca:	3708      	adds	r7, #8
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd80      	pop	{r7, pc}

08014bd0 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b082      	sub	sp, #8
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f7fb fd84 	bl	80106e6 <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 8014bde:	4603      	mov	r3, r0
 8014be0:	4618      	mov	r0, r3
 8014be2:	3708      	adds	r7, #8
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}

08014be8 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b082      	sub	sp, #8
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	6039      	str	r1, [r7, #0]
 8014bf2:	6878      	ldr	r0, [r7, #4]
 8014bf4:	f7ff fe2a 	bl	801484c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	3708      	adds	r7, #8
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}

08014c02 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8014c02:	b580      	push	{r7, lr}
 8014c04:	b084      	sub	sp, #16
 8014c06:	af00      	add	r7, sp, #0
 8014c08:	60f8      	str	r0, [r7, #12]
 8014c0a:	60b9      	str	r1, [r7, #8]
 8014c0c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8014c0e:	68b8      	ldr	r0, [r7, #8]
 8014c10:	f000 f82b 	bl	8014c6a <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8014c14:	4602      	mov	r2, r0
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	601a      	str	r2, [r3, #0]
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	687a      	ldr	r2, [r7, #4]
 8014c1e:	605a      	str	r2, [r3, #4]
      { }
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	4618      	mov	r0, r3
 8014c24:	3710      	adds	r7, #16
 8014c26:	46bd      	mov	sp, r7
 8014c28:	bd80      	pop	{r7, pc}

08014c2a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8014c2a:	b580      	push	{r7, lr}
 8014c2c:	b082      	sub	sp, #8
 8014c2e:	af00      	add	r7, sp, #0
 8014c30:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d007      	beq.n	8014c4a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	6818      	ldr	r0, [r3, #0]
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	685b      	ldr	r3, [r3, #4]
 8014c42:	2201      	movs	r2, #1
 8014c44:	4619      	mov	r1, r3
 8014c46:	f000 f81b 	bl	8014c80 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	3708      	adds	r7, #8
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}

08014c54 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8014c54:	b480      	push	{r7}
 8014c56:	b083      	sub	sp, #12
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	4618      	mov	r0, r3
 8014c60:	370c      	adds	r7, #12
 8014c62:	46bd      	mov	sp, r7
 8014c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c68:	4770      	bx	lr

08014c6a <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8014c6a:	b480      	push	{r7}
 8014c6c:	b083      	sub	sp, #12
 8014c6e:	af00      	add	r7, sp, #0
 8014c70:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	4618      	mov	r0, r3
 8014c76:	370c      	adds	r7, #12
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7e:	4770      	bx	lr

08014c80 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	60f8      	str	r0, [r7, #12]
 8014c88:	60b9      	str	r1, [r7, #8]
 8014c8a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8014c8c:	687a      	ldr	r2, [r7, #4]
 8014c8e:	68b9      	ldr	r1, [r7, #8]
 8014c90:	68f8      	ldr	r0, [r7, #12]
 8014c92:	f000 f804 	bl	8014c9e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 8014c96:	bf00      	nop
 8014c98:	3710      	adds	r7, #16
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}

08014c9e <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8014c9e:	b580      	push	{r7, lr}
 8014ca0:	b084      	sub	sp, #16
 8014ca2:	af00      	add	r7, sp, #0
 8014ca4:	60f8      	str	r0, [r7, #12]
 8014ca6:	60b9      	str	r1, [r7, #8]
 8014ca8:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	011b      	lsls	r3, r3, #4
 8014cae:	4619      	mov	r1, r3
 8014cb0:	68b8      	ldr	r0, [r7, #8]
 8014cb2:	f013 fd10 	bl	80286d6 <_ZdlPvj>
      }
 8014cb6:	3710      	adds	r7, #16
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	bd80      	pop	{r7, pc}

08014cbc <_ZSt20__throw_bad_weak_ptrv>:
  { _GLIBCXX_THROW_OR_ABORT(bad_weak_ptr()); }
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	af00      	add	r7, sp, #0
 8014cc0:	f014 f982 	bl	8028fc8 <abort>

08014cc4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv>:
    {
 8014cc4:	b480      	push	{r7}
 8014cc6:	b083      	sub	sp, #12
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
      if (_M_use_count == 0)
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	685b      	ldr	r3, [r3, #4]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d101      	bne.n	8014cd8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv+0x14>
	return false;
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	e005      	b.n	8014ce4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv+0x20>
      ++_M_use_count;
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	685b      	ldr	r3, [r3, #4]
 8014cdc:	1c5a      	adds	r2, r3, #1
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	605a      	str	r2, [r3, #4]
      return true;
 8014ce2:	2301      	movs	r3, #1
    }
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	370c      	adds	r7, #12
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cee:	4770      	bx	lr

08014cf0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_add_refEv>:
    { ++_M_weak_count; }
 8014cf0:	b480      	push	{r7}
 8014cf2:	b083      	sub	sp, #12
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	689b      	ldr	r3, [r3, #8]
 8014cfc:	1c5a      	adds	r2, r3, #1
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	609a      	str	r2, [r3, #8]
 8014d02:	bf00      	nop
 8014d04:	370c      	adds	r7, #12
 8014d06:	46bd      	mov	sp, r7
 8014d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0c:	4770      	bx	lr

08014d0e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv>:
    {
 8014d0e:	b580      	push	{r7, lr}
 8014d10:	b082      	sub	sp, #8
 8014d12:	af00      	add	r7, sp, #0
 8014d14:	6078      	str	r0, [r7, #4]
      if (--_M_weak_count == 0)
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	689b      	ldr	r3, [r3, #8]
 8014d1a:	1e5a      	subs	r2, r3, #1
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	609a      	str	r2, [r3, #8]
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	689b      	ldr	r3, [r3, #8]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	bf0c      	ite	eq
 8014d28:	2301      	moveq	r3, #1
 8014d2a:	2300      	movne	r3, #0
 8014d2c:	b2db      	uxtb	r3, r3
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d005      	beq.n	8014d3e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv+0x30>
        _M_destroy();
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	330c      	adds	r3, #12
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	6878      	ldr	r0, [r7, #4]
 8014d3c:	4798      	blx	r3
    }
 8014d3e:	bf00      	nop
 8014d40:	3708      	adds	r7, #8
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}

08014d46 <_ZNKSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>:
    { return _M_use_count; }
 8014d46:	b480      	push	{r7}
 8014d48:	b083      	sub	sp, #12
 8014d4a:	af00      	add	r7, sp, #0
 8014d4c:	6078      	str	r0, [r7, #4]
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	685b      	ldr	r3, [r3, #4]
 8014d52:	4618      	mov	r0, r3
 8014d54:	370c      	adds	r7, #12
 8014d56:	46bd      	mov	sp, r7
 8014d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5c:	4770      	bx	lr

08014d5e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>:
  static constexpr T highest() {
 8014d5e:	b480      	push	{r7}
 8014d60:	af00      	add	r7, sp, #0
    return T(-1);
 8014d62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  }
 8014d66:	4618      	mov	r0, r3
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6e:	4770      	bx	lr

08014d70 <_ZNK11ArduinoJson8V730HB2210JsonString4sizeEv>:
  size_t size() const {
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b082      	sub	sp, #8
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
    return str_.size();
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	f7f0 fab2 	bl	80052e4 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8014d80:	4603      	mov	r3, r0
  }
 8014d82:	4618      	mov	r0, r3
 8014d84:	3708      	adds	r7, #8
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}

08014d8a <_ZNK11ArduinoJson8V730HB2210JsonStringcvbEv>:
  explicit operator bool() const {
 8014d8a:	b580      	push	{r7, lr}
 8014d8c:	b082      	sub	sp, #8
 8014d8e:	af00      	add	r7, sp, #0
 8014d90:	6078      	str	r0, [r7, #4]
    return str_.data() != 0;
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	4618      	mov	r0, r3
 8014d96:	f7f0 fab1 	bl	80052fc <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	bf14      	ite	ne
 8014da0:	2301      	movne	r3, #1
 8014da2:	2300      	moveq	r3, #0
 8014da4:	b2db      	uxtb	r3, r3
  }
 8014da6:	4618      	mov	r0, r3
 8014da8:	3708      	adds	r7, #8
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}

08014dae <_ZNK11ArduinoJson8V730HB226detail14CollectionData4headEv>:
  SlotId head() const {
 8014dae:	b480      	push	{r7}
 8014db0:	b083      	sub	sp, #12
 8014db2:	af00      	add	r7, sp, #0
 8014db4:	6078      	str	r0, [r7, #4]
    return head_;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	881b      	ldrh	r3, [r3, #0]
  }
 8014dba:	4618      	mov	r0, r3
 8014dbc:	370c      	adds	r7, #12
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc4:	4770      	bx	lr

08014dc6 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc>:
  static char escapeChar(char c) {
 8014dc6:	b580      	push	{r7, lr}
 8014dc8:	b084      	sub	sp, #16
 8014dca:	af00      	add	r7, sp, #0
 8014dcc:	4603      	mov	r3, r0
 8014dce:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(true);
 8014dd0:	2001      	movs	r0, #1
 8014dd2:	f7f1 fa29 	bl	8006228 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 8014dd6:	60f8      	str	r0, [r7, #12]
    while (p[0] && p[1] != c) {
 8014dd8:	e002      	b.n	8014de0 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc+0x1a>
      p += 2;
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	3302      	adds	r3, #2
 8014dde:	60fb      	str	r3, [r7, #12]
    while (p[0] && p[1] != c) {
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	781b      	ldrb	r3, [r3, #0]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d005      	beq.n	8014df4 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc+0x2e>
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	3301      	adds	r3, #1
 8014dec:	781b      	ldrb	r3, [r3, #0]
 8014dee:	79fa      	ldrb	r2, [r7, #7]
 8014df0:	429a      	cmp	r2, r3
 8014df2:	d1f2      	bne.n	8014dda <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc+0x14>
    return p[0];
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	781b      	ldrb	r3, [r3, #0]
  }
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3710      	adds	r7, #16
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}

08014e00 <_ZN11ArduinoJson8V730HB226detail5pow10Ei>:
  }

  return powersOf10;
}

constexpr uint32_t pow10(int exponent) {
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b082      	sub	sp, #8
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
  return (exponent == 0) ? 1 : 10 * pow10(exponent - 1);
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d00a      	beq.n	8014e24 <_ZN11ArduinoJson8V730HB226detail5pow10Ei+0x24>
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	3b01      	subs	r3, #1
 8014e12:	4618      	mov	r0, r3
 8014e14:	f7ff fff4 	bl	8014e00 <_ZN11ArduinoJson8V730HB226detail5pow10Ei>
 8014e18:	4602      	mov	r2, r0
 8014e1a:	4613      	mov	r3, r2
 8014e1c:	009b      	lsls	r3, r3, #2
 8014e1e:	4413      	add	r3, r2
 8014e20:	005b      	lsls	r3, r3, #1
 8014e22:	e000      	b.n	8014e26 <_ZN11ArduinoJson8V730HB226detail5pow10Ei+0x26>
 8014e24:	2301      	movs	r3, #1
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	3708      	adds	r7, #8
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd80      	pop	{r7, pc}
	...

08014e30 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda>:

inline FloatParts decomposeFloat(JsonFloat value, int8_t decimalPlaces) {
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b08c      	sub	sp, #48	@ 0x30
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	60f8      	str	r0, [r7, #12]
 8014e38:	ed87 0b00 	vstr	d0, [r7]
 8014e3c:	460b      	mov	r3, r1
 8014e3e:	72fb      	strb	r3, [r7, #11]
  uint32_t maxDecimalPart = pow10(decimalPlaces);
 8014e40:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014e44:	4618      	mov	r0, r3
 8014e46:	f7ff ffdb 	bl	8014e00 <_ZN11ArduinoJson8V730HB226detail5pow10Ei>
 8014e4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

  int16_t exponent = normalize(value);
 8014e4c:	463b      	mov	r3, r7
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f000 fbe2 	bl	8015618 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_>
 8014e54:	4603      	mov	r3, r0
 8014e56:	857b      	strh	r3, [r7, #42]	@ 0x2a

  uint32_t integral = uint32_t(value);
 8014e58:	ed97 7b00 	vldr	d7, [r7]
 8014e5c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8014e60:	ee17 3a90 	vmov	r3, s15
 8014e64:	627b      	str	r3, [r7, #36]	@ 0x24
  // reduce number of decimal places by the number of integral places
  for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8014e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e68:	623b      	str	r3, [r7, #32]
 8014e6a:	e011      	b.n	8014e90 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x60>
    maxDecimalPart /= 10;
 8014e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e6e:	4a44      	ldr	r2, [pc, #272]	@ (8014f80 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8014e70:	fba2 2303 	umull	r2, r3, r2, r3
 8014e74:	08db      	lsrs	r3, r3, #3
 8014e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    decimalPlaces--;
 8014e78:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014e7c:	b2db      	uxtb	r3, r3
 8014e7e:	3b01      	subs	r3, #1
 8014e80:	b2db      	uxtb	r3, r3
 8014e82:	72fb      	strb	r3, [r7, #11]
  for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8014e84:	6a3b      	ldr	r3, [r7, #32]
 8014e86:	4a3e      	ldr	r2, [pc, #248]	@ (8014f80 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8014e88:	fba2 2303 	umull	r2, r3, r2, r3
 8014e8c:	08db      	lsrs	r3, r3, #3
 8014e8e:	623b      	str	r3, [r7, #32]
 8014e90:	6a3b      	ldr	r3, [r7, #32]
 8014e92:	2b09      	cmp	r3, #9
 8014e94:	d8ea      	bhi.n	8014e6c <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x3c>
  }

  JsonFloat remainder =
      (value - JsonFloat(integral)) * JsonFloat(maxDecimalPart);
 8014e96:	ed97 6b00 	vldr	d6, [r7]
 8014e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e9c:	ee07 3a90 	vmov	s15, r3
 8014ea0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014ea4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014eaa:	ee07 3a90 	vmov	s15, r3
 8014eae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  JsonFloat remainder =
 8014eb2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014eb6:	ed87 7b04 	vstr	d7, [r7, #16]

  uint32_t decimal = uint32_t(remainder);
 8014eba:	ed97 7b04 	vldr	d7, [r7, #16]
 8014ebe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8014ec2:	ee17 3a90 	vmov	r3, s15
 8014ec6:	61fb      	str	r3, [r7, #28]
  remainder = remainder - JsonFloat(decimal);
 8014ec8:	69fb      	ldr	r3, [r7, #28]
 8014eca:	ee07 3a90 	vmov	s15, r3
 8014ece:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014ed2:	ed97 6b04 	vldr	d6, [r7, #16]
 8014ed6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014eda:	ed87 7b04 	vstr	d7, [r7, #16]

  // rounding:
  // increment by 1 if remainder >= 0.5
  decimal += uint32_t(remainder * 2);
 8014ede:	ed97 7b04 	vldr	d7, [r7, #16]
 8014ee2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014ee6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8014eea:	ee17 2a90 	vmov	r2, s15
 8014eee:	69fb      	ldr	r3, [r7, #28]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	61fb      	str	r3, [r7, #28]
  if (decimal >= maxDecimalPart) {
 8014ef4:	69fa      	ldr	r2, [r7, #28]
 8014ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ef8:	429a      	cmp	r2, r3
 8014efa:	d320      	bcc.n	8014f3e <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
    decimal = 0;
 8014efc:	2300      	movs	r3, #0
 8014efe:	61fb      	str	r3, [r7, #28]
    integral++;
 8014f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f02:	3301      	adds	r3, #1
 8014f04:	627b      	str	r3, [r7, #36]	@ 0x24
    if (exponent && integral >= 10) {
 8014f06:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d017      	beq.n	8014f3e <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
 8014f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f10:	2b09      	cmp	r3, #9
 8014f12:	d914      	bls.n	8014f3e <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
      exponent++;
 8014f14:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8014f18:	b29b      	uxth	r3, r3
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	b29b      	uxth	r3, r3
 8014f1e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      integral = 1;
 8014f20:	2301      	movs	r3, #1
 8014f22:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  // remove trailing zeros
  while (decimal % 10 == 0 && decimalPlaces > 0) {
 8014f24:	e00b      	b.n	8014f3e <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x10e>
    decimal /= 10;
 8014f26:	69fb      	ldr	r3, [r7, #28]
 8014f28:	4a15      	ldr	r2, [pc, #84]	@ (8014f80 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8014f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8014f2e:	08db      	lsrs	r3, r3, #3
 8014f30:	61fb      	str	r3, [r7, #28]
    decimalPlaces--;
 8014f32:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014f36:	b2db      	uxtb	r3, r3
 8014f38:	3b01      	subs	r3, #1
 8014f3a:	b2db      	uxtb	r3, r3
 8014f3c:	72fb      	strb	r3, [r7, #11]
  while (decimal % 10 == 0 && decimalPlaces > 0) {
 8014f3e:	69f9      	ldr	r1, [r7, #28]
 8014f40:	4b0f      	ldr	r3, [pc, #60]	@ (8014f80 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x150>)
 8014f42:	fba3 2301 	umull	r2, r3, r3, r1
 8014f46:	08da      	lsrs	r2, r3, #3
 8014f48:	4613      	mov	r3, r2
 8014f4a:	009b      	lsls	r3, r3, #2
 8014f4c:	4413      	add	r3, r2
 8014f4e:	005b      	lsls	r3, r3, #1
 8014f50:	1aca      	subs	r2, r1, r3
 8014f52:	2a00      	cmp	r2, #0
 8014f54:	d103      	bne.n	8014f5e <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0x12e>
 8014f56:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	dce3      	bgt.n	8014f26 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda+0xf6>
  }

  return {integral, decimal, exponent, decimalPlaces};
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f62:	601a      	str	r2, [r3, #0]
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	69fa      	ldr	r2, [r7, #28]
 8014f68:	605a      	str	r2, [r3, #4]
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8014f6e:	811a      	strh	r2, [r3, #8]
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	7afa      	ldrb	r2, [r7, #11]
 8014f74:	729a      	strb	r2, [r3, #10]
}
 8014f76:	68f8      	ldr	r0, [r7, #12]
 8014f78:	3730      	adds	r7, #48	@ 0x30
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}
 8014f7e:	bf00      	nop
 8014f80:	cccccccd 	.word	0xcccccccd

08014f84 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(JsonString src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static JsonString fromJson(JsonVariantConst src) {
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b086      	sub	sp, #24
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	60f8      	str	r0, [r7, #12]
 8014f8c:	1d3b      	adds	r3, r7, #4
 8014f8e:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 8014f92:	1d3b      	adds	r3, r7, #4
 8014f94:	4618      	mov	r0, r3
 8014f96:	f7f2 fac3 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8014f9a:	6178      	str	r0, [r7, #20]
    return data ? data->asString() : JsonString();
 8014f9c:	697b      	ldr	r3, [r7, #20]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d005      	beq.n	8014fae <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE+0x2a>
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	6979      	ldr	r1, [r7, #20]
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f7f0 fb64 	bl	8005674 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8014fac:	e002      	b.n	8014fb4 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE+0x30>
 8014fae:	68f8      	ldr	r0, [r7, #12]
 8014fb0:	f7f0 fa1a 	bl	80053e8 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
  }
 8014fb4:	68f8      	ldr	r0, [r7, #12]
 8014fb6:	3718      	adds	r7, #24
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	bd80      	pop	{r7, pc}

08014fbc <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

#endif

#if ARDUINOJSON_ENABLE_STD_STRING

inline void convertFromJson(JsonVariantConst src, std::string& dst) {
 8014fbc:	b590      	push	{r4, r7, lr}
 8014fbe:	b089      	sub	sp, #36	@ 0x24
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	f107 0308 	add.w	r3, r7, #8
 8014fc6:	e883 0003 	stmia.w	r3, {r0, r1}
 8014fca:	607a      	str	r2, [r7, #4]
  JsonString str = src.as<JsonString>();
 8014fcc:	f107 0314 	add.w	r3, r7, #20
 8014fd0:	f107 0208 	add.w	r2, r7, #8
 8014fd4:	4611      	mov	r1, r2
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f000 fbea 	bl	80157b0 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst2asINS0_10JsonStringELi0EEET_v>
  if (str)
 8014fdc:	f107 0314 	add.w	r3, r7, #20
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f7ff fed2 	bl	8014d8a <_ZNK11ArduinoJson8V730HB2210JsonStringcvbEv>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d011      	beq.n	8015010 <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>
    dst.assign(str.c_str(), str.size());
 8014fec:	f107 0314 	add.w	r3, r7, #20
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	f7f0 fa23 	bl	800543c <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8014ff6:	4604      	mov	r4, r0
 8014ff8:	f107 0314 	add.w	r3, r7, #20
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f7ff feb7 	bl	8014d70 <_ZNK11ArduinoJson8V730HB2210JsonString4sizeEv>
 8015002:	4603      	mov	r3, r0
 8015004:	461a      	mov	r2, r3
 8015006:	4621      	mov	r1, r4
 8015008:	6878      	ldr	r0, [r7, #4]
 801500a:	f013 fe15 	bl	8028c38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcj>
  else
    serializeJson(src, dst);
}
 801500e:	e006      	b.n	801501e <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
    serializeJson(src, dst);
 8015010:	687a      	ldr	r2, [r7, #4]
 8015012:	f107 0308 	add.w	r3, r7, #8
 8015016:	e893 0003 	ldmia.w	r3, {r0, r1}
 801501a:	f000 fbd9 	bl	80157d0 <_ZN11ArduinoJson8V730HB2213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEjNS0_16JsonVariantConstERT_>
}
 801501e:	bf00      	nop
 8015020:	3724      	adds	r7, #36	@ 0x24
 8015022:	46bd      	mov	sp, r7
 8015024:	bd90      	pop	{r4, r7, pc}

08015026 <_ZN6Remora15getSerialThreadEv>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }

    volatile txData_t* getTxData() { return &txData; }
    volatile rxData_t* getRxData() { return &rxData; }
    volatile bool* getReset() { return &reset; };
    pruThread* getSerialThread() { return serialThread.get(); }
 8015026:	b580      	push	{r7, lr}
 8015028:	b082      	sub	sp, #8
 801502a:	af00      	add	r7, sp, #0
 801502c:	6078      	str	r0, [r7, #4]
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	3324      	adds	r3, #36	@ 0x24
 8015032:	4618      	mov	r0, r3
 8015034:	f7f6 ff4d 	bl	800bed2 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 8015038:	4603      	mov	r3, r0
 801503a:	4618      	mov	r0, r3
 801503c:	3708      	adds	r7, #8
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}
	...

08015044 <_ZN14TMC2208StepperD1Ev>:
		INIT_REGISTER(ENC_DEVIATION){.sr=0};

		static constexpr float default_RS = 0.075;
};

class TMC2208Stepper : public TMCStepper {
 8015044:	b580      	push	{r7, lr}
 8015046:	b082      	sub	sp, #8
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
 801504c:	4a08      	ldr	r2, [pc, #32]	@ (8015070 <_ZN14TMC2208StepperD1Ev+0x2c>)
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	601a      	str	r2, [r3, #0]
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	334c      	adds	r3, #76	@ 0x4c
 8015056:	4618      	mov	r0, r3
 8015058:	f013 fc49 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	3334      	adds	r3, #52	@ 0x34
 8015060:	4618      	mov	r0, r3
 8015062:	f013 fc44 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	4618      	mov	r0, r3
 801506a:	3708      	adds	r7, #8
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}
 8015070:	0802b22c 	.word	0x0802b22c

08015074 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_f>:
    public:

        TMC2208Stepper(std::string SWRXpin, std::string SWTXpin, float RS) :
 8015074:	b580      	push	{r7, lr}
 8015076:	b090      	sub	sp, #64	@ 0x40
 8015078:	af00      	add	r7, sp, #0
 801507a:	60f8      	str	r0, [r7, #12]
 801507c:	60b9      	str	r1, [r7, #8]
 801507e:	607a      	str	r2, [r7, #4]
 8015080:	ed87 0a00 	vstr	s0, [r7]
                TMC2208Stepper(SWRXpin, SWTXpin, RS, TMC2208_SLAVE_ADDR)
 8015084:	f107 0310 	add.w	r3, r7, #16
 8015088:	68b9      	ldr	r1, [r7, #8]
 801508a:	4618      	mov	r0, r3
 801508c:	f013 fe3f 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8015090:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015094:	6879      	ldr	r1, [r7, #4]
 8015096:	4618      	mov	r0, r3
 8015098:	f013 fe39 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801509c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80150a0:	f107 0110 	add.w	r1, r7, #16
 80150a4:	2300      	movs	r3, #0
 80150a6:	ed97 0a00 	vldr	s0, [r7]
 80150aa:	68f8      	ldr	r0, [r7, #12]
 80150ac:	f7ee fe04 	bl	8003cb8 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 80150b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80150b4:	4618      	mov	r0, r3
 80150b6:	f013 fc1a 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80150ba:	f107 0310 	add.w	r3, r7, #16
 80150be:	4618      	mov	r0, r3
 80150c0:	f013 fc15 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                {}
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	4618      	mov	r0, r3
 80150c8:	3740      	adds	r7, #64	@ 0x40
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}
	...

080150d0 <_ZN3TMCC1EP6Remoraf>:
	Remora* 	instance;
	float       Rsense;

public:

	TMC(Remora* _instance, float _Rsense) : instance(_instance), Rsense(_Rsense) {}
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b084      	sub	sp, #16
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	60f8      	str	r0, [r7, #12]
 80150d8:	60b9      	str	r1, [r7, #8]
 80150da:	ed87 0a01 	vstr	s0, [r7, #4]
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	4618      	mov	r0, r3
 80150e2:	f7fc fef7 	bl	8011ed4 <_ZN6ModuleC1Ev>
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	3318      	adds	r3, #24
 80150ea:	4618      	mov	r0, r3
 80150ec:	f000 fbac 	bl	8015848 <_ZNSt23enable_shared_from_thisI3TMCEC1Ev>
 80150f0:	4a06      	ldr	r2, [pc, #24]	@ (801510c <_ZN3TMCC1EP6Remoraf+0x3c>)
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	601a      	str	r2, [r3, #0]
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	68ba      	ldr	r2, [r7, #8]
 80150fa:	621a      	str	r2, [r3, #32]
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	687a      	ldr	r2, [r7, #4]
 8015100:	625a      	str	r2, [r3, #36]	@ 0x24
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	4618      	mov	r0, r3
 8015106:	3710      	adds	r7, #16
 8015108:	46bd      	mov	sp, r7
 801510a:	bd80      	pop	{r7, pc}
 801510c:	0802b694 	.word	0x0802b694

08015110 <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8015110:	b580      	push	{r7, lr}
 8015112:	b082      	sub	sp, #8
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	3304      	adds	r3, #4
 801511c:	4618      	mov	r0, r3
 801511e:	f7f6 fec6 	bl	800beae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	4618      	mov	r0, r3
 8015126:	3708      	adds	r7, #8
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}

0801512c <_ZNSt10shared_ptrI3TMCED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 801512c:	b580      	push	{r7, lr}
 801512e:	b082      	sub	sp, #8
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	4618      	mov	r0, r3
 8015138:	f7ff ffea 	bl	8015110 <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	4618      	mov	r0, r3
 8015140:	3708      	adds	r7, #8
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}

08015146 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
 8015146:	b580      	push	{r7, lr}
 8015148:	b082      	sub	sp, #8
 801514a:	af00      	add	r7, sp, #0
 801514c:	6078      	str	r0, [r7, #4]
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	3304      	adds	r3, #4
 8015152:	4618      	mov	r0, r3
 8015154:	f7f6 feab 	bl	800beae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	4618      	mov	r0, r3
 801515c:	3708      	adds	r7, #8
 801515e:	46bd      	mov	sp, r7
 8015160:	bd80      	pop	{r7, pc}

08015162 <_ZNSt10shared_ptrI7TMC2208ED1Ev>:
 8015162:	b580      	push	{r7, lr}
 8015164:	b082      	sub	sp, #8
 8015166:	af00      	add	r7, sp, #0
 8015168:	6078      	str	r0, [r7, #4]
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	4618      	mov	r0, r3
 801516e:	f7ff ffea 	bl	8015146 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	4618      	mov	r0, r3
 8015176:	3708      	adds	r7, #8
 8015178:	46bd      	mov	sp, r7
 801517a:	bd80      	pop	{r7, pc}

0801517c <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "tmc.h"
#include <cstdint>

#define TOFF_VALUE  4 // [1... 15]

std::shared_ptr<Module> TMC2208::create(const JsonObject& config, Remora* instance) {
 801517c:	b590      	push	{r4, r7, lr}
 801517e:	b0b9      	sub	sp, #228	@ 0xe4
 8015180:	af04      	add	r7, sp, #16
 8015182:	60f8      	str	r0, [r7, #12]
 8015184:	60b9      	str	r1, [r7, #8]
 8015186:	607a      	str	r2, [r7, #4]
    printf("Creating TMC2208 module\n");
 8015188:	484a      	ldr	r0, [pc, #296]	@ (80152b4 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x138>)
 801518a:	f014 f9cf 	bl	802952c <puts>

    const char* comment = config["Comment"];
 801518e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015192:	4a49      	ldr	r2, [pc, #292]	@ (80152b8 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x13c>)
 8015194:	68b9      	ldr	r1, [r7, #8]
 8015196:	4618      	mov	r0, r3
 8015198:	f7fd f91b 	bl	80123d2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801519c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80151a0:	4618      	mov	r0, r3
 80151a2:	f7f2 fc8d 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80151a6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    printf("Comment: %s\n", comment);
 80151aa:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 80151ae:	4843      	ldr	r0, [pc, #268]	@ (80152bc <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x140>)
 80151b0:	f014 f94c 	bl	802944c <iprintf>

    std::string RxPin = config["RX pin"];
 80151b4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80151b8:	4a41      	ldr	r2, [pc, #260]	@ (80152c0 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x144>)
 80151ba:	68b9      	ldr	r1, [r7, #8]
 80151bc:	4618      	mov	r0, r3
 80151be:	f7f2 fc5a 	bl	8007a76 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80151c2:	f107 031c 	add.w	r3, r7, #28
 80151c6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80151ca:	4611      	mov	r1, r2
 80151cc:	4618      	mov	r0, r3
 80151ce:	f000 fb63 	bl	8015898 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    float RSense = config["RSense"];
 80151d2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80151d6:	4a3b      	ldr	r2, [pc, #236]	@ (80152c4 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x148>)
 80151d8:	68b9      	ldr	r1, [r7, #8]
 80151da:	4618      	mov	r0, r3
 80151dc:	f7f2 fc4b 	bl	8007a76 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80151e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80151e4:	4618      	mov	r0, r3
 80151e6:	f000 fb65 	bl	80158b4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>
 80151ea:	eef0 7a40 	vmov.f32	s15, s0
 80151ee:	edc7 7a06 	vstr	s15, [r7, #24]
    uint16_t current = config["Current"];
 80151f2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80151f6:	4a34      	ldr	r2, [pc, #208]	@ (80152c8 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x14c>)
 80151f8:	68b9      	ldr	r1, [r7, #8]
 80151fa:	4618      	mov	r0, r3
 80151fc:	f7fd f8e9 	bl	80123d2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8015200:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8015204:	4618      	mov	r0, r3
 8015206:	f000 fb63 	bl	80158d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 801520a:	4603      	mov	r3, r0
 801520c:	82fb      	strh	r3, [r7, #22]
    uint16_t microsteps = config["Microsteps"];
 801520e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8015212:	4a2e      	ldr	r2, [pc, #184]	@ (80152cc <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x150>)
 8015214:	68b9      	ldr	r1, [r7, #8]
 8015216:	4618      	mov	r0, r3
 8015218:	f7fa f907 	bl	800f42a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801521c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8015220:	4618      	mov	r0, r3
 8015222:	f000 fb55 	bl	80158d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8015226:	4603      	mov	r3, r0
 8015228:	82bb      	strh	r3, [r7, #20]
    bool stealthchop = (strcmp(config["Stealth chop"], "on") == 0);
 801522a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 801522e:	4a28      	ldr	r2, [pc, #160]	@ (80152d0 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x154>)
 8015230:	68b9      	ldr	r1, [r7, #8]
 8015232:	4618      	mov	r0, r3
 8015234:	f7fe ffa2 	bl	801417c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8015238:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 801523c:	4618      	mov	r0, r3
 801523e:	f7f2 fc3f 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8015242:	4603      	mov	r3, r0
 8015244:	4923      	ldr	r1, [pc, #140]	@ (80152d4 <_ZN7TMC22086createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x158>)
 8015246:	4618      	mov	r0, r3
 8015248:	f7eb f84a 	bl	80002e0 <strcmp>
 801524c:	4603      	mov	r3, r0
 801524e:	2b00      	cmp	r3, #0
 8015250:	bf0c      	ite	eq
 8015252:	2301      	moveq	r3, #1
 8015254:	2300      	movne	r3, #0
 8015256:	b2db      	uxtb	r3, r3
 8015258:	74fb      	strb	r3, [r7, #19]

    return std::make_shared<TMC2208>(std::move(RxPin), RSense, current, microsteps, stealthchop, instance);
 801525a:	f107 031c 	add.w	r3, r7, #28
 801525e:	4618      	mov	r0, r3
 8015260:	f7fc f975 	bl	801154e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8015264:	4604      	mov	r4, r0
 8015266:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 801526a:	f107 0116 	add.w	r1, r7, #22
 801526e:	f107 0218 	add.w	r2, r7, #24
 8015272:	1d3b      	adds	r3, r7, #4
 8015274:	9302      	str	r3, [sp, #8]
 8015276:	f107 0313 	add.w	r3, r7, #19
 801527a:	9301      	str	r3, [sp, #4]
 801527c:	f107 0314 	add.w	r3, r7, #20
 8015280:	9300      	str	r3, [sp, #0]
 8015282:	460b      	mov	r3, r1
 8015284:	4621      	mov	r1, r4
 8015286:	f000 fb2f 	bl	80158e8 <_ZSt11make_sharedI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESG_E4typeEEDpOT0_>
 801528a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 801528e:	4619      	mov	r1, r3
 8015290:	68f8      	ldr	r0, [r7, #12]
 8015292:	f000 fb5b 	bl	801594c <_ZNSt10shared_ptrI6ModuleEC1I7TMC2208vEEOS_IT_E>
 8015296:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 801529a:	4618      	mov	r0, r3
 801529c:	f7ff ff61 	bl	8015162 <_ZNSt10shared_ptrI7TMC2208ED1Ev>
}
 80152a0:	f107 031c 	add.w	r3, r7, #28
 80152a4:	4618      	mov	r0, r3
 80152a6:	f013 fb22 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    return std::make_shared<TMC2208>(std::move(RxPin), RSense, current, microsteps, stealthchop, instance);
 80152aa:	bf00      	nop
}
 80152ac:	68f8      	ldr	r0, [r7, #12]
 80152ae:	37d4      	adds	r7, #212	@ 0xd4
 80152b0:	46bd      	mov	sp, r7
 80152b2:	bd90      	pop	{r4, r7, pc}
 80152b4:	0802ac64 	.word	0x0802ac64
 80152b8:	0802ac7c 	.word	0x0802ac7c
 80152bc:	0802ac84 	.word	0x0802ac84
 80152c0:	0802ac94 	.word	0x0802ac94
 80152c4:	0802ac9c 	.word	0x0802ac9c
 80152c8:	0802aca4 	.word	0x0802aca4
 80152cc:	0802acac 	.word	0x0802acac
 80152d0:	0802acb8 	.word	0x0802acb8
 80152d4:	0802acc8 	.word	0x0802acc8

080152d8 <_ZN3TMCD1Ev>:
class TMC : public Module, public std::enable_shared_from_this<TMC>
 80152d8:	b580      	push	{r7, lr}
 80152da:	b082      	sub	sp, #8
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
 80152e0:	4a08      	ldr	r2, [pc, #32]	@ (8015304 <_ZN3TMCD1Ev+0x2c>)
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	601a      	str	r2, [r3, #0]
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	3318      	adds	r3, #24
 80152ea:	4618      	mov	r0, r3
 80152ec:	f000 fab9 	bl	8015862 <_ZNSt23enable_shared_from_thisI3TMCED1Ev>
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	4618      	mov	r0, r3
 80152f4:	f7fc fe0a 	bl	8011f0c <_ZN6ModuleD1Ev>
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	4618      	mov	r0, r3
 80152fc:	3708      	adds	r7, #8
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}
 8015302:	bf00      	nop
 8015304:	0802b694 	.word	0x0802b694

08015308 <_ZN3TMCD0Ev>:
 8015308:	b580      	push	{r7, lr}
 801530a:	b082      	sub	sp, #8
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
 8015310:	6878      	ldr	r0, [r7, #4]
 8015312:	f7ff ffe1 	bl	80152d8 <_ZN3TMCD1Ev>
 8015316:	2128      	movs	r1, #40	@ 0x28
 8015318:	6878      	ldr	r0, [r7, #4]
 801531a:	f013 f9dc 	bl	80286d6 <_ZdlPvj>
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	4618      	mov	r0, r3
 8015322:	3708      	adds	r7, #8
 8015324:	46bd      	mov	sp, r7
 8015326:	bd80      	pop	{r7, pc}

08015328 <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttbP6Remora>:

TMC2208::TMC2208(std::string _rxtxPin, float _Rsense, uint16_t _mA, uint16_t _microsteps, bool _stealth, Remora* _instance)
 8015328:	b590      	push	{r4, r7, lr}
 801532a:	b085      	sub	sp, #20
 801532c:	af00      	add	r7, sp, #0
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	ed87 0a01 	vstr	s0, [r7, #4]
 8015336:	4611      	mov	r1, r2
 8015338:	461a      	mov	r2, r3
 801533a:	460b      	mov	r3, r1
 801533c:	807b      	strh	r3, [r7, #2]
 801533e:	4613      	mov	r3, r2
 8015340:	803b      	strh	r3, [r7, #0]
    : TMC{_instance, _Rsense},  // Call base class constructor
      rxtxPin(std::move(_rxtxPin)),
      mA(_mA),
      microsteps(_microsteps),
      stealth(_stealth),
      driver(std::make_unique<TMC2208Stepper>(rxtxPin, rxtxPin, Rsense)) {}
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	ed97 0a01 	vldr	s0, [r7, #4]
 8015348:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801534a:	4618      	mov	r0, r3
 801534c:	f7ff fec0 	bl	80150d0 <_ZN3TMCC1EP6Remoraf>
 8015350:	4a17      	ldr	r2, [pc, #92]	@ (80153b0 <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttbP6Remora+0x88>)
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	601a      	str	r2, [r3, #0]
      rxtxPin(std::move(_rxtxPin)),
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 801535c:	68b8      	ldr	r0, [r7, #8]
 801535e:	f7fc f8f6 	bl	801154e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8015362:	4603      	mov	r3, r0
 8015364:	4619      	mov	r1, r3
 8015366:	4620      	mov	r0, r4
 8015368:	f013 faa2 	bl	80288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      mA(_mA),
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	887a      	ldrh	r2, [r7, #2]
 8015370:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      microsteps(_microsteps),
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	883a      	ldrh	r2, [r7, #0]
 8015378:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
      stealth(_stealth),
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8015382:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      driver(std::make_unique<TMC2208Stepper>(rxtxPin, rxtxPin, Rsense)) {}
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 801539e:	4623      	mov	r3, r4
 80153a0:	f000 fae7 	bl	8015972 <_ZSt11make_uniqueI14TMC2208StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	4618      	mov	r0, r3
 80153a8:	3714      	adds	r7, #20
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd90      	pop	{r4, r7, pc}
 80153ae:	bf00      	nop
 80153b0:	0802b670 	.word	0x0802b670

080153b4 <_ZN7TMC22089configureEv>:


void TMC2208::configure()
{
 80153b4:	b590      	push	{r4, r7, lr}
 80153b6:	b08b      	sub	sp, #44	@ 0x2c
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
    printf("\nStarting the Serial thread\n");
 80153bc:	4877      	ldr	r0, [pc, #476]	@ (801559c <_ZN7TMC22089configureEv+0x1e8>)
 80153be:	f014 f8b5 	bl	802952c <puts>
    instance->getSerialThread()->startThread();
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	6a1b      	ldr	r3, [r3, #32]
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7ff fe2d 	bl	8015026 <_ZN6Remora15getSerialThreadEv>
 80153cc:	4603      	mov	r3, r0
 80153ce:	4618      	mov	r0, r3
 80153d0:	f005 fd56 	bl	801ae80 <_ZN9pruThread11startThreadEv>

    auto self = shared_from_this();
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f103 0218 	add.w	r2, r3, #24
 80153da:	f107 030c 	add.w	r3, r7, #12
 80153de:	4611      	mov	r1, r2
 80153e0:	4618      	mov	r0, r3
 80153e2:	f000 fa4b 	bl	801587c <_ZNSt23enable_shared_from_thisI3TMCE16shared_from_thisEv>
    instance->getSerialThread()->registerModule(self);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	6a1b      	ldr	r3, [r3, #32]
 80153ea:	4618      	mov	r0, r3
 80153ec:	f7ff fe1b 	bl	8015026 <_ZN6Remora15getSerialThreadEv>
 80153f0:	4604      	mov	r4, r0
 80153f2:	f107 020c 	add.w	r2, r7, #12
 80153f6:	f107 0314 	add.w	r3, r7, #20
 80153fa:	4611      	mov	r1, r2
 80153fc:	4618      	mov	r0, r3
 80153fe:	f000 fb1d 	bl	8015a3c <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 8015402:	f107 0314 	add.w	r3, r7, #20
 8015406:	4619      	mov	r1, r3
 8015408:	4620      	mov	r0, r4
 801540a:	f005 fca5 	bl	801ad58 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 801540e:	f107 0314 	add.w	r3, r7, #20
 8015412:	4618      	mov	r0, r3
 8015414:	f7f5 ff1d 	bl	800b252 <_ZNSt10shared_ptrI6ModuleED1Ev>

    driver->begin();
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	3348      	adds	r3, #72	@ 0x48
 801541c:	4618      	mov	r0, r3
 801541e:	f000 fb1d 	bl	8015a5c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 8015422:	4603      	mov	r3, r0
 8015424:	4618      	mov	r0, r3
 8015426:	f7ee fcf9 	bl	8003e1c <_ZN14TMC2208Stepper5beginEv>

    printf("Testing connection to TMC driver... ");
 801542a:	485d      	ldr	r0, [pc, #372]	@ (80155a0 <_ZN7TMC22089configureEv+0x1ec>)
 801542c:	f014 f80e 	bl	802944c <iprintf>
    uint16_t result = driver->test_connection();
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	3348      	adds	r3, #72	@ 0x48
 8015434:	4618      	mov	r0, r3
 8015436:	f000 fb11 	bl	8015a5c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801543a:	4603      	mov	r3, r0
 801543c:	4618      	mov	r0, r3
 801543e:	f7ef fa83 	bl	8004948 <_ZN10TMCStepper15test_connectionEv>
 8015442:	4603      	mov	r3, r0
 8015444:	84fb      	strh	r3, [r7, #38]	@ 0x26
    
    if (result) {
 8015446:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015448:	2b00      	cmp	r3, #0
 801544a:	d018      	beq.n	801547e <_ZN7TMC22089configureEv+0xca>
        printf("Failed!\nLikely cause: ");
 801544c:	4855      	ldr	r0, [pc, #340]	@ (80155a4 <_ZN7TMC22089configureEv+0x1f0>)
 801544e:	f013 fffd 	bl	802944c <iprintf>
        switch(result) {
 8015452:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015454:	2b01      	cmp	r3, #1
 8015456:	d002      	beq.n	801545e <_ZN7TMC22089configureEv+0xaa>
 8015458:	2b02      	cmp	r3, #2
 801545a:	d004      	beq.n	8015466 <_ZN7TMC22089configureEv+0xb2>
 801545c:	e007      	b.n	801546e <_ZN7TMC22089configureEv+0xba>
            case 1: printf("Loose connection\n"); break;
 801545e:	4852      	ldr	r0, [pc, #328]	@ (80155a8 <_ZN7TMC22089configureEv+0x1f4>)
 8015460:	f014 f864 	bl	802952c <puts>
 8015464:	e007      	b.n	8015476 <_ZN7TMC22089configureEv+0xc2>
            case 2: printf("No power\n"); break;
 8015466:	4851      	ldr	r0, [pc, #324]	@ (80155ac <_ZN7TMC22089configureEv+0x1f8>)
 8015468:	f014 f860 	bl	802952c <puts>
 801546c:	e003      	b.n	8015476 <_ZN7TMC22089configureEv+0xc2>
            default: printf("Unknown issue\n"); break;
 801546e:	4850      	ldr	r0, [pc, #320]	@ (80155b0 <_ZN7TMC22089configureEv+0x1fc>)
 8015470:	f014 f85c 	bl	802952c <puts>
 8015474:	bf00      	nop
        }
        printf("Fix the problem and reset the board.\n");
 8015476:	484f      	ldr	r0, [pc, #316]	@ (80155b4 <_ZN7TMC22089configureEv+0x200>)
 8015478:	f014 f858 	bl	802952c <puts>
 801547c:	e002      	b.n	8015484 <_ZN7TMC22089configureEv+0xd0>
    } else {
        printf("OK\n");
 801547e:	484e      	ldr	r0, [pc, #312]	@ (80155b8 <_ZN7TMC22089configureEv+0x204>)
 8015480:	f014 f854 	bl	802952c <puts>
    }

    // Configure driver settings
    driver->toff(TOFF_VALUE);
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	3348      	adds	r3, #72	@ 0x48
 8015488:	4618      	mov	r0, r3
 801548a:	f000 fae7 	bl	8015a5c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801548e:	4603      	mov	r3, r0
 8015490:	2104      	movs	r1, #4
 8015492:	4618      	mov	r0, r3
 8015494:	f7ed fc8d 	bl	8002db2 <_ZN14TMC2208Stepper4toffEh>
    driver->blank_time(24);
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	3348      	adds	r3, #72	@ 0x48
 801549c:	4618      	mov	r0, r3
 801549e:	f000 fadd 	bl	8015a5c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80154a2:	4603      	mov	r3, r0
 80154a4:	2118      	movs	r1, #24
 80154a6:	4618      	mov	r0, r3
 80154a8:	f7ef fb1a 	bl	8004ae0 <_ZN10TMCStepper10blank_timeEh>
    driver->rms_current(mA);
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	3348      	adds	r3, #72	@ 0x48
 80154b0:	4618      	mov	r0, r3
 80154b2:	f000 fad3 	bl	8015a5c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80154b6:	4603      	mov	r3, r0
 80154b8:	461a      	mov	r2, r3
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80154c0:	4619      	mov	r1, r3
 80154c2:	4610      	mov	r0, r2
 80154c4:	f7ef f9a4 	bl	8004810 <_ZN10TMCStepper11rms_currentEt>
    driver->microsteps(microsteps);
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	3348      	adds	r3, #72	@ 0x48
 80154cc:	4618      	mov	r0, r3
 80154ce:	f000 fac5 	bl	8015a5c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80154d2:	4603      	mov	r3, r0
 80154d4:	461a      	mov	r2, r3
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80154dc:	4619      	mov	r1, r3
 80154de:	4610      	mov	r0, r2
 80154e0:	f7ef fa4e 	bl	8004980 <_ZN10TMCStepper10microstepsEt>
    driver->en_spreadCycle(!stealth);
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	3348      	adds	r3, #72	@ 0x48
 80154e8:	4618      	mov	r0, r3
 80154ea:	f000 fab7 	bl	8015a5c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80154ee:	4602      	mov	r2, r0
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80154f6:	f083 0301 	eor.w	r3, r3, #1
 80154fa:	b2db      	uxtb	r3, r3
 80154fc:	4619      	mov	r1, r3
 80154fe:	4610      	mov	r0, r2
 8015500:	f7ed fee5 	bl	80032ce <_ZN14TMC2208Stepper14en_spreadCycleEb>
    driver->pwm_autoscale(true);
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	3348      	adds	r3, #72	@ 0x48
 8015508:	4618      	mov	r0, r3
 801550a:	f000 faa7 	bl	8015a5c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 801550e:	4603      	mov	r3, r0
 8015510:	2101      	movs	r1, #1
 8015512:	4618      	mov	r0, r3
 8015514:	f7ed ffde 	bl	80034d4 <_ZN14TMC2208Stepper13pwm_autoscaleEb>
    driver->iholddelay(10);
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	3348      	adds	r3, #72	@ 0x48
 801551c:	4618      	mov	r0, r3
 801551e:	f000 fa9d 	bl	8015a5c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 8015522:	4603      	mov	r3, r0
 8015524:	210a      	movs	r1, #10
 8015526:	4618      	mov	r0, r3
 8015528:	f7ed ff89 	bl	800343e <_ZN10TMCStepper10iholddelayEh>
    driver->TPOWERDOWN(128);  // ~2s until driver lowers to hold current
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	3348      	adds	r3, #72	@ 0x48
 8015530:	4618      	mov	r0, r3
 8015532:	f000 fa93 	bl	8015a5c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 8015536:	4603      	mov	r3, r0
 8015538:	2180      	movs	r1, #128	@ 0x80
 801553a:	4618      	mov	r0, r3
 801553c:	f7ef fb08 	bl	8004b50 <_ZN10TMCStepper10TPOWERDOWNEh>

    printf("\nStopping the Serial thread\n");
 8015540:	481e      	ldr	r0, [pc, #120]	@ (80155bc <_ZN7TMC22089configureEv+0x208>)
 8015542:	f013 fff3 	bl	802952c <puts>
    instance->getSerialThread()->stopThread();
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	6a1b      	ldr	r3, [r3, #32]
 801554a:	4618      	mov	r0, r3
 801554c:	f7ff fd6b 	bl	8015026 <_ZN6Remora15getSerialThreadEv>
 8015550:	4603      	mov	r3, r0
 8015552:	4618      	mov	r0, r3
 8015554:	f005 fcc1 	bl	801aeda <_ZN9pruThread10stopThreadEv>
    instance->getSerialThread()->unregisterModule(self);
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	6a1b      	ldr	r3, [r3, #32]
 801555c:	4618      	mov	r0, r3
 801555e:	f7ff fd62 	bl	8015026 <_ZN6Remora15getSerialThreadEv>
 8015562:	4604      	mov	r4, r0
 8015564:	f107 020c 	add.w	r2, r7, #12
 8015568:	f107 031c 	add.w	r3, r7, #28
 801556c:	4611      	mov	r1, r2
 801556e:	4618      	mov	r0, r3
 8015570:	f000 fa64 	bl	8015a3c <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 8015574:	f107 031c 	add.w	r3, r7, #28
 8015578:	4619      	mov	r1, r3
 801557a:	4620      	mov	r0, r4
 801557c:	f005 fc38 	bl	801adf0 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>
 8015580:	f107 031c 	add.w	r3, r7, #28
 8015584:	4618      	mov	r0, r3
 8015586:	f7f5 fe64 	bl	800b252 <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 801558a:	f107 030c 	add.w	r3, r7, #12
 801558e:	4618      	mov	r0, r3
 8015590:	f7ff fdcc 	bl	801512c <_ZNSt10shared_ptrI3TMCED1Ev>
 8015594:	372c      	adds	r7, #44	@ 0x2c
 8015596:	46bd      	mov	sp, r7
 8015598:	bd90      	pop	{r4, r7, pc}
 801559a:	bf00      	nop
 801559c:	0802accc 	.word	0x0802accc
 80155a0:	0802ace8 	.word	0x0802ace8
 80155a4:	0802ad10 	.word	0x0802ad10
 80155a8:	0802ad28 	.word	0x0802ad28
 80155ac:	0802ad3c 	.word	0x0802ad3c
 80155b0:	0802ad48 	.word	0x0802ad48
 80155b4:	0802ad58 	.word	0x0802ad58
 80155b8:	0802ad80 	.word	0x0802ad80
 80155bc:	0802ad84 	.word	0x0802ad84

080155c0 <_ZN7TMC22086updateEv>:

void TMC2208::update()
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b082      	sub	sp, #8
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
    driver->SWSerial->tickerHandler();
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	3348      	adds	r3, #72	@ 0x48
 80155cc:	4618      	mov	r0, r3
 80155ce:	f000 fa45 	bl	8015a5c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>
 80155d2:	4603      	mov	r3, r0
 80155d4:	695b      	ldr	r3, [r3, #20]
 80155d6:	4618      	mov	r0, r3
 80155d8:	f7ed f8f9 	bl	80027ce <_ZN14SoftwareSerial13tickerHandlerEv>
}
 80155dc:	bf00      	nop
 80155de:	3708      	adds	r7, #8
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd80      	pop	{r7, pc}

080155e4 <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4sizeEv>:

  TChar* data() const {
    return data_;
  }

  size_t size() const {
 80155e4:	b480      	push	{r7}
 80155e6:	b083      	sub	sp, #12
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
    return size_;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	685b      	ldr	r3, [r3, #4]
  }
 80155f0:	4618      	mov	r0, r3
 80155f2:	370c      	adds	r7, #12
 80155f4:	46bd      	mov	sp, r7
 80155f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fa:	4770      	bx	lr

080155fc <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4dataEv>:
  TChar* data() const {
 80155fc:	b480      	push	{r7}
 80155fe:	b083      	sub	sp, #12
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
    return data_;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	681b      	ldr	r3, [r3, #0]
  }
 8015608:	4618      	mov	r0, r3
 801560a:	370c      	adds	r7, #12
 801560c:	46bd      	mov	sp, r7
 801560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015612:	4770      	bx	lr
 8015614:	0000      	movs	r0, r0
	...

08015618 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_>:
inline int16_t normalize(TFloat& value) {
 8015618:	b580      	push	{r7, lr}
 801561a:	ed2d 8b02 	vpush	{d8}
 801561e:	b088      	sub	sp, #32
 8015620:	af00      	add	r7, sp, #0
 8015622:	6078      	str	r0, [r7, #4]
  int16_t powersOf10 = 0;
 8015624:	2300      	movs	r3, #0
 8015626:	83fb      	strh	r3, [r7, #30]
  int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
 8015628:	2308      	movs	r3, #8
 801562a:	777b      	strb	r3, [r7, #29]
  int bit = 1 << index;
 801562c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015630:	2201      	movs	r2, #1
 8015632:	fa02 f303 	lsl.w	r3, r2, r3
 8015636:	61bb      	str	r3, [r7, #24]
  if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	ed93 7b00 	vldr	d7, [r3]
 801563e:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 80157a0 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x188>
 8015642:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801564a:	db44      	blt.n	80156d6 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xbe>
    for (; index >= 0; index--) {
 801564c:	e03f      	b.n	80156ce <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xb6>
      if (value >= traits::positiveBinaryPowersOfTen()[index]) {
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	ed93 8b00 	vldr	d8, [r3]
 8015654:	f7f2 fc88 	bl	8007f68 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8015658:	4603      	mov	r3, r0
 801565a:	60bb      	str	r3, [r7, #8]
 801565c:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8015660:	f107 0308 	add.w	r3, r7, #8
 8015664:	4611      	mov	r1, r2
 8015666:	4618      	mov	r0, r3
 8015668:	f7f2 fc8e 	bl	8007f88 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 801566c:	eeb0 7b40 	vmov.f64	d7, d0
 8015670:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015678:	bfac      	ite	ge
 801567a:	2301      	movge	r3, #1
 801567c:	2300      	movlt	r3, #0
 801567e:	b2db      	uxtb	r3, r3
 8015680:	2b00      	cmp	r3, #0
 8015682:	d01b      	beq.n	80156bc <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xa4>
        value *= traits::negativeBinaryPowersOfTen()[index];
 8015684:	f7f2 fc94 	bl	8007fb0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8015688:	4603      	mov	r3, r0
 801568a:	60fb      	str	r3, [r7, #12]
 801568c:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8015690:	f107 030c 	add.w	r3, r7, #12
 8015694:	4611      	mov	r1, r2
 8015696:	4618      	mov	r0, r3
 8015698:	f7f2 fc76 	bl	8007f88 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 801569c:	eeb0 6b40 	vmov.f64	d6, d0
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	ed93 7b00 	vldr	d7, [r3]
 80156a6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	ed83 7b00 	vstr	d7, [r3]
        powersOf10 = int16_t(powersOf10 + bit);
 80156b0:	69bb      	ldr	r3, [r7, #24]
 80156b2:	b29a      	uxth	r2, r3
 80156b4:	8bfb      	ldrh	r3, [r7, #30]
 80156b6:	4413      	add	r3, r2
 80156b8:	b29b      	uxth	r3, r3
 80156ba:	83fb      	strh	r3, [r7, #30]
      bit >>= 1;
 80156bc:	69bb      	ldr	r3, [r7, #24]
 80156be:	105b      	asrs	r3, r3, #1
 80156c0:	61bb      	str	r3, [r7, #24]
    for (; index >= 0; index--) {
 80156c2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80156c6:	b2db      	uxtb	r3, r3
 80156c8:	3b01      	subs	r3, #1
 80156ca:	b2db      	uxtb	r3, r3
 80156cc:	777b      	strb	r3, [r7, #29]
 80156ce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	dabb      	bge.n	801564e <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x36>
  if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	ed93 7b00 	vldr	d7, [r3]
 80156dc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80156e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156e4:	dd52      	ble.n	801578c <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x174>
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	ed93 7b00 	vldr	d7, [r3]
 80156ec:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 80157a8 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x190>
 80156f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80156f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156f8:	d848      	bhi.n	801578c <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x174>
    for (; index >= 0; index--) {
 80156fa:	e043      	b.n	8015784 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x16c>
      if (value < traits::negativeBinaryPowersOfTen()[index] * 10) {
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	ed93 8b00 	vldr	d8, [r3]
 8015702:	f7f2 fc55 	bl	8007fb0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8015706:	4603      	mov	r3, r0
 8015708:	613b      	str	r3, [r7, #16]
 801570a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 801570e:	f107 0310 	add.w	r3, r7, #16
 8015712:	4611      	mov	r1, r2
 8015714:	4618      	mov	r0, r3
 8015716:	f7f2 fc37 	bl	8007f88 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 801571a:	eeb0 7b40 	vmov.f64	d7, d0
 801571e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8015722:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015726:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801572a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801572e:	bf4c      	ite	mi
 8015730:	2301      	movmi	r3, #1
 8015732:	2300      	movpl	r3, #0
 8015734:	b2db      	uxtb	r3, r3
 8015736:	2b00      	cmp	r3, #0
 8015738:	d01b      	beq.n	8015772 <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0x15a>
        value *= traits::positiveBinaryPowersOfTen()[index];
 801573a:	f7f2 fc15 	bl	8007f68 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 801573e:	4603      	mov	r3, r0
 8015740:	617b      	str	r3, [r7, #20]
 8015742:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8015746:	f107 0314 	add.w	r3, r7, #20
 801574a:	4611      	mov	r1, r2
 801574c:	4618      	mov	r0, r3
 801574e:	f7f2 fc1b 	bl	8007f88 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 8015752:	eeb0 6b40 	vmov.f64	d6, d0
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	ed93 7b00 	vldr	d7, [r3]
 801575c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	ed83 7b00 	vstr	d7, [r3]
        powersOf10 = int16_t(powersOf10 - bit);
 8015766:	8bfa      	ldrh	r2, [r7, #30]
 8015768:	69bb      	ldr	r3, [r7, #24]
 801576a:	b29b      	uxth	r3, r3
 801576c:	1ad3      	subs	r3, r2, r3
 801576e:	b29b      	uxth	r3, r3
 8015770:	83fb      	strh	r3, [r7, #30]
      bit >>= 1;
 8015772:	69bb      	ldr	r3, [r7, #24]
 8015774:	105b      	asrs	r3, r3, #1
 8015776:	61bb      	str	r3, [r7, #24]
    for (; index >= 0; index--) {
 8015778:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801577c:	b2db      	uxtb	r3, r3
 801577e:	3b01      	subs	r3, #1
 8015780:	b2db      	uxtb	r3, r3
 8015782:	777b      	strb	r3, [r7, #29]
 8015784:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015788:	2b00      	cmp	r3, #0
 801578a:	dab7      	bge.n	80156fc <_ZN11ArduinoJson8V730HB226detail9normalizeIdEEsRT_+0xe4>
  return powersOf10;
 801578c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8015790:	4618      	mov	r0, r3
 8015792:	3720      	adds	r7, #32
 8015794:	46bd      	mov	sp, r7
 8015796:	ecbd 8b02 	vpop	{d8}
 801579a:	bd80      	pop	{r7, pc}
 801579c:	f3af 8000 	nop.w
 80157a0:	00000000 	.word	0x00000000
 80157a4:	416312d0 	.word	0x416312d0
 80157a8:	88e368f1 	.word	0x88e368f1
 80157ac:	3ee4f8b5 	.word	0x3ee4f8b5

080157b0 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst2asINS0_10JsonStringELi0EEET_v>:
  T as() const {
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b082      	sub	sp, #8
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
 80157b8:	6039      	str	r1, [r7, #0]
    return Converter<T>::fromJson(*this);
 80157ba:	6878      	ldr	r0, [r7, #4]
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	e893 0006 	ldmia.w	r3, {r1, r2}
 80157c2:	f7ff fbdf 	bl	8014f84 <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonStringEvE8fromJsonENS0_16JsonVariantConstE>
 80157c6:	bf00      	nop
  }
 80157c8:	6878      	ldr	r0, [r7, #4]
 80157ca:	3708      	adds	r7, #8
 80157cc:	46bd      	mov	sp, r7
 80157ce:	bd80      	pop	{r7, pc}

080157d0 <_ZN11ArduinoJson8V730HB2213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEjNS0_16JsonVariantConstERT_>:
// Produces a minified JSON document.
// https://arduinojson.org/v7/api/json/serializejson/
template <
    typename TDestination,
    detail::enable_if_t<!detail::is_pointer<TDestination>::value, int> = 0>
size_t serializeJson(JsonVariantConst source, TDestination& destination) {
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	f107 0308 	add.w	r3, r7, #8
 80157da:	e883 0003 	stmia.w	r3, {r0, r1}
 80157de:	607a      	str	r2, [r7, #4]
  using namespace detail;
  return serialize<JsonSerializer>(source, destination);
 80157e0:	687a      	ldr	r2, [r7, #4]
 80157e2:	f107 0308 	add.w	r3, r7, #8
 80157e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80157ea:	f000 f943 	bl	8015a74 <_ZN11ArduinoJson8V730HB226detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>
 80157ee:	4603      	mov	r3, r0
}
 80157f0:	4618      	mov	r0, r3
 80157f2:	3710      	adds	r7, #16
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bd80      	pop	{r7, pc}

080157f8 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      : _M_ptr(nullptr), _M_refcount()
      { }

      __weak_ptr(const __weak_ptr&) noexcept = default;

      ~__weak_ptr() = default;
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b082      	sub	sp, #8
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	3304      	adds	r3, #4
 8015804:	4618      	mov	r0, r3
 8015806:	f000 f960 	bl	8015aca <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	4618      	mov	r0, r3
 801580e:	3708      	adds	r7, #8
 8015810:	46bd      	mov	sp, r7
 8015812:	bd80      	pop	{r7, pc}

08015814 <_ZNSt8weak_ptrI3TMCEC1Ev>:
      constexpr weak_ptr() noexcept = default;
 8015814:	b580      	push	{r7, lr}
 8015816:	b082      	sub	sp, #8
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	4618      	mov	r0, r3
 8015820:	f000 f942 	bl	8015aa8 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	4618      	mov	r0, r3
 8015828:	3708      	adds	r7, #8
 801582a:	46bd      	mov	sp, r7
 801582c:	bd80      	pop	{r7, pc}

0801582e <_ZNSt8weak_ptrI3TMCED1Ev>:
    class weak_ptr : public __weak_ptr<_Tp>
 801582e:	b580      	push	{r7, lr}
 8015830:	b082      	sub	sp, #8
 8015832:	af00      	add	r7, sp, #0
 8015834:	6078      	str	r0, [r7, #4]
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	4618      	mov	r0, r3
 801583a:	f7ff ffdd 	bl	80157f8 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	4618      	mov	r0, r3
 8015842:	3708      	adds	r7, #8
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}

08015848 <_ZNSt23enable_shared_from_thisI3TMCEC1Ev>:
      constexpr enable_shared_from_this() noexcept { }
 8015848:	b580      	push	{r7, lr}
 801584a:	b082      	sub	sp, #8
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	4618      	mov	r0, r3
 8015854:	f7ff ffde 	bl	8015814 <_ZNSt8weak_ptrI3TMCEC1Ev>
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	4618      	mov	r0, r3
 801585c:	3708      	adds	r7, #8
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}

08015862 <_ZNSt23enable_shared_from_thisI3TMCED1Ev>:
      ~enable_shared_from_this() { }
 8015862:	b580      	push	{r7, lr}
 8015864:	b082      	sub	sp, #8
 8015866:	af00      	add	r7, sp, #0
 8015868:	6078      	str	r0, [r7, #4]
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	4618      	mov	r0, r3
 801586e:	f7ff ffde 	bl	801582e <_ZNSt8weak_ptrI3TMCED1Ev>
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	4618      	mov	r0, r3
 8015876:	3708      	adds	r7, #8
 8015878:	46bd      	mov	sp, r7
 801587a:	bd80      	pop	{r7, pc}

0801587c <_ZNSt23enable_shared_from_thisI3TMCE16shared_from_thisEv>:
      shared_from_this()
 801587c:	b580      	push	{r7, lr}
 801587e:	b082      	sub	sp, #8
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
 8015884:	6039      	str	r1, [r7, #0]
      { return shared_ptr<_Tp>(this->_M_weak_this); }
 8015886:	683b      	ldr	r3, [r7, #0]
 8015888:	4619      	mov	r1, r3
 801588a:	6878      	ldr	r0, [r7, #4]
 801588c:	f000 f92f 	bl	8015aee <_ZNSt10shared_ptrI3TMCEC1IS0_vEERKSt8weak_ptrIT_E>
 8015890:	6878      	ldr	r0, [r7, #4]
 8015892:	3708      	adds	r7, #8
 8015894:	46bd      	mov	sp, r7
 8015896:	bd80      	pop	{r7, pc}

08015898 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>:
  operator T() const {
 8015898:	b580      	push	{r7, lr}
 801589a:	b082      	sub	sp, #8
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
 80158a0:	6039      	str	r1, [r7, #0]
    return as<T>();
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	6839      	ldr	r1, [r7, #0]
 80158a6:	4618      	mov	r0, r3
 80158a8:	f000 f931 	bl	8015b0e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEET_v>
  }
 80158ac:	6878      	ldr	r0, [r7, #4]
 80158ae:	3708      	adds	r7, #8
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bd80      	pop	{r7, pc}

080158b4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>:
  operator T() const {
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b082      	sub	sp, #8
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
    return as<T>();
 80158bc:	6878      	ldr	r0, [r7, #4]
 80158be:	f000 f949 	bl	8015b54 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIfEET_v>
 80158c2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80158c6:	eeb0 0a67 	vmov.f32	s0, s15
 80158ca:	3708      	adds	r7, #8
 80158cc:	46bd      	mov	sp, r7
 80158ce:	bd80      	pop	{r7, pc}

080158d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>:
  operator T() const {
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b082      	sub	sp, #8
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
    return as<T>();
 80158d8:	6878      	ldr	r0, [r7, #4]
 80158da:	f000 f95f 	bl	8015b9c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asItEET_v>
 80158de:	4603      	mov	r3, r0
  }
 80158e0:	4618      	mov	r0, r3
 80158e2:	3708      	adds	r7, #8
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}

080158e8 <_ZSt11make_sharedI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESG_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 80158e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158ec:	b08a      	sub	sp, #40	@ 0x28
 80158ee:	af04      	add	r7, sp, #16
 80158f0:	60f8      	str	r0, [r7, #12]
 80158f2:	60b9      	str	r1, [r7, #8]
 80158f4:	607a      	str	r2, [r7, #4]
 80158f6:	603b      	str	r3, [r7, #0]
			     std::forward<_Args>(__args)...);
 80158f8:	f107 0314 	add.w	r3, r7, #20
 80158fc:	469a      	mov	sl, r3
 80158fe:	68b8      	ldr	r0, [r7, #8]
 8015900:	f000 f96e 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8015904:	4680      	mov	r8, r0
 8015906:	6878      	ldr	r0, [r7, #4]
 8015908:	f000 f975 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801590c:	4681      	mov	r9, r0
 801590e:	6838      	ldr	r0, [r7, #0]
 8015910:	f000 f97c 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015914:	4604      	mov	r4, r0
 8015916:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015918:	f000 f978 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801591c:	4605      	mov	r5, r0
 801591e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015920:	f7fb fe65 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8015924:	4606      	mov	r6, r0
 8015926:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015928:	f000 f97b 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801592c:	4603      	mov	r3, r0
 801592e:	9303      	str	r3, [sp, #12]
 8015930:	9602      	str	r6, [sp, #8]
 8015932:	9501      	str	r5, [sp, #4]
 8015934:	9400      	str	r4, [sp, #0]
 8015936:	464b      	mov	r3, r9
 8015938:	4642      	mov	r2, r8
 801593a:	4651      	mov	r1, sl
 801593c:	68f8      	ldr	r0, [r7, #12]
 801593e:	f000 f97b 	bl	8015c38 <_ZNSt10shared_ptrI7TMC2208EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8015942:	68f8      	ldr	r0, [r7, #12]
 8015944:	3718      	adds	r7, #24
 8015946:	46bd      	mov	sp, r7
 8015948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801594c <_ZNSt10shared_ptrI6ModuleEC1I7TMC2208vEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 801594c:	b590      	push	{r4, r7, lr}
 801594e:	b083      	sub	sp, #12
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
 8015954:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8015956:	687c      	ldr	r4, [r7, #4]
 8015958:	6838      	ldr	r0, [r7, #0]
 801595a:	f000 f99f 	bl	8015c9c <_ZSt4moveIRSt10shared_ptrI7TMC2208EEONSt16remove_referenceIT_E4typeEOS5_>
 801595e:	4603      	mov	r3, r0
 8015960:	4619      	mov	r1, r3
 8015962:	4620      	mov	r0, r4
 8015964:	f000 f9a5 	bl	8015cb2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208vEEOS_IT_LS2_0EE>
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	4618      	mov	r0, r3
 801596c:	370c      	adds	r7, #12
 801596e:	46bd      	mov	sp, r7
 8015970:	bd90      	pop	{r4, r7, pc}

08015972 <_ZSt11make_uniqueI14TMC2208StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8015972:	b590      	push	{r4, r7, lr}
 8015974:	b091      	sub	sp, #68	@ 0x44
 8015976:	af00      	add	r7, sp, #0
 8015978:	60f8      	str	r0, [r7, #12]
 801597a:	60b9      	str	r1, [r7, #8]
 801597c:	607a      	str	r2, [r7, #4]
 801597e:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8015980:	2068      	movs	r0, #104	@ 0x68
 8015982:	f012 feb9 	bl	80286f8 <_Znwj>
 8015986:	4603      	mov	r3, r0
 8015988:	461c      	mov	r4, r3
 801598a:	68b8      	ldr	r0, [r7, #8]
 801598c:	f7f9 ff4e 	bl	800f82c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8015990:	4602      	mov	r2, r0
 8015992:	f107 0310 	add.w	r3, r7, #16
 8015996:	4611      	mov	r1, r2
 8015998:	4618      	mov	r0, r3
 801599a:	f013 f9b8 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 801599e:	6878      	ldr	r0, [r7, #4]
 80159a0:	f7f9 ff44 	bl	800f82c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80159a4:	4602      	mov	r2, r0
 80159a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80159aa:	4611      	mov	r1, r2
 80159ac:	4618      	mov	r0, r3
 80159ae:	f013 f9ae 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80159b2:	6838      	ldr	r0, [r7, #0]
 80159b4:	f000 f91f 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80159b8:	4603      	mov	r3, r0
 80159ba:	edd3 7a00 	vldr	s15, [r3]
 80159be:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80159c2:	f107 0310 	add.w	r3, r7, #16
 80159c6:	eeb0 0a67 	vmov.f32	s0, s15
 80159ca:	4619      	mov	r1, r3
 80159cc:	4620      	mov	r0, r4
 80159ce:	f7ff fb51 	bl	8015074 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_f>
 80159d2:	4621      	mov	r1, r4
 80159d4:	68f8      	ldr	r0, [r7, #12]
 80159d6:	f000 f99a 	bl	8015d0e <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80159da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80159de:	4618      	mov	r0, r3
 80159e0:	f012 ff85 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80159e4:	f107 0310 	add.w	r3, r7, #16
 80159e8:	4618      	mov	r0, r3
 80159ea:	f012 ff80 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80159ee:	bf00      	nop
 80159f0:	68f8      	ldr	r0, [r7, #12]
 80159f2:	3744      	adds	r7, #68	@ 0x44
 80159f4:	46bd      	mov	sp, r7
 80159f6:	bd90      	pop	{r4, r7, pc}

080159f8 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80159f8:	b590      	push	{r4, r7, lr}
 80159fa:	b085      	sub	sp, #20
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	4618      	mov	r0, r3
 8015a04:	f000 f992 	bl	8015d2c <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8015a08:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d00c      	beq.n	8015a2c <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8015a12:	6878      	ldr	r0, [r7, #4]
 8015a14:	f000 f997 	bl	8015d46 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE11get_deleterEv>
 8015a18:	4604      	mov	r4, r0
 8015a1a:	68f8      	ldr	r0, [r7, #12]
 8015a1c:	f000 f9a0 	bl	8015d60 <_ZSt4moveIRP14TMC2208StepperEONSt16remove_referenceIT_E4typeEOS4_>
 8015a20:	4603      	mov	r3, r0
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	4619      	mov	r1, r3
 8015a26:	4620      	mov	r0, r4
 8015a28:	f000 f9a5 	bl	8015d76 <_ZNKSt14default_deleteI14TMC2208StepperEclEPS0_>
	__ptr = pointer();
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	601a      	str	r2, [r3, #0]
      }
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	4618      	mov	r0, r3
 8015a36:	3714      	adds	r7, #20
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bd90      	pop	{r4, r7, pc}

08015a3c <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>:
	shared_ptr(const shared_ptr<_Yp>& __r) noexcept
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b082      	sub	sp, #8
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
 8015a44:	6039      	str	r1, [r7, #0]
        : __shared_ptr<_Tp>(__r) { }
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	683a      	ldr	r2, [r7, #0]
 8015a4a:	4611      	mov	r1, r2
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f000 f9a5 	bl	8015d9c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I3TMCvEERKS_IT_LS2_0EE>
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	4618      	mov	r0, r3
 8015a56:	3708      	adds	r7, #8
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	bd80      	pop	{r7, pc}

08015a5c <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b082      	sub	sp, #8
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
	return get();
 8015a64:	6878      	ldr	r0, [r7, #4]
 8015a66:	f000 f9af 	bl	8015dc8 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE3getEv>
 8015a6a:	4603      	mov	r3, r0
      }
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	3708      	adds	r7, #8
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bd80      	pop	{r7, pc}

08015a74 <_ZN11ArduinoJson8V730HB226detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>:
  TSerializer<TWriter> serializer(writer, resources);
  return VariantData::accept(data, resources, serializer);
}

template <template <typename> class TSerializer, typename TDestination>
size_t serialize(ArduinoJson::JsonVariantConst source,
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b086      	sub	sp, #24
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	f107 0308 	add.w	r3, r7, #8
 8015a7e:	e883 0003 	stmia.w	r3, {r0, r1}
 8015a82:	607a      	str	r2, [r7, #4]
                 TDestination& destination) {
  Writer<TDestination> writer(destination);
 8015a84:	f107 0314 	add.w	r3, r7, #20
 8015a88:	6879      	ldr	r1, [r7, #4]
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	f000 f9a9 	bl	8015de2 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>
  return doSerialize<TSerializer>(source, writer);
 8015a90:	697a      	ldr	r2, [r7, #20]
 8015a92:	f107 0308 	add.w	r3, r7, #8
 8015a96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015a9a:	f000 f9b2 	bl	8015e02 <_ZN11ArduinoJson8V730HB226detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>
 8015a9e:	4603      	mov	r3, r0
}
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	3718      	adds	r7, #24
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	bd80      	pop	{r7, pc}

08015aa8 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __weak_ptr() noexcept
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b082      	sub	sp, #8
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
      : _M_ptr(nullptr), _M_refcount()
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	601a      	str	r2, [r3, #0]
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	3304      	adds	r3, #4
 8015aba:	4618      	mov	r0, r3
 8015abc:	f000 f9db 	bl	8015e76 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	3708      	adds	r7, #8
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bd80      	pop	{r7, pc}

08015aca <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__weak_count() noexcept
 8015aca:	b580      	push	{r7, lr}
 8015acc:	b082      	sub	sp, #8
 8015ace:	af00      	add	r7, sp, #0
 8015ad0:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d004      	beq.n	8015ae4 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_weak_release();
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f7ff f915 	bl	8014d0e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv>
      }
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	3708      	adds	r7, #8
 8015aea:	46bd      	mov	sp, r7
 8015aec:	bd80      	pop	{r7, pc}

08015aee <_ZNSt10shared_ptrI3TMCEC1IS0_vEERKSt8weak_ptrIT_E>:
	explicit shared_ptr(const weak_ptr<_Yp>& __r)
 8015aee:	b580      	push	{r7, lr}
 8015af0:	b082      	sub	sp, #8
 8015af2:	af00      	add	r7, sp, #0
 8015af4:	6078      	str	r0, [r7, #4]
 8015af6:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(__r) { }
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	683a      	ldr	r2, [r7, #0]
 8015afc:	4611      	mov	r1, r2
 8015afe:	4618      	mov	r0, r3
 8015b00:	f000 f9c7 	bl	8015e92 <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEERKSt10__weak_ptrIT_LS2_0EE>
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	4618      	mov	r0, r3
 8015b08:	3708      	adds	r7, #8
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd80      	pop	{r7, pc}

08015b0e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 8015b0e:	b590      	push	{r4, r7, lr}
 8015b10:	b087      	sub	sp, #28
 8015b12:	af00      	add	r7, sp, #0
 8015b14:	6078      	str	r0, [r7, #4]
 8015b16:	6039      	str	r1, [r7, #0]
 8015b18:	683b      	ldr	r3, [r7, #0]
 8015b1a:	617b      	str	r3, [r7, #20]
 8015b1c:	697b      	ldr	r3, [r7, #20]
 8015b1e:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8015b20:	6938      	ldr	r0, [r7, #16]
 8015b22:	f7f3 f84e 	bl	8008bc2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8015b26:	4604      	mov	r4, r0
 8015b28:	6938      	ldr	r0, [r7, #16]
 8015b2a:	f7f2 fed8 	bl	80088de <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8015b2e:	4602      	mov	r2, r0
 8015b30:	f107 0308 	add.w	r3, r7, #8
 8015b34:	4621      	mov	r1, r4
 8015b36:	4618      	mov	r0, r3
 8015b38:	f7ef ff73 	bl	8005a22 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8015b3c:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	f107 0308 	add.w	r3, r7, #8
 8015b44:	e893 0006 	ldmia.w	r3, {r1, r2}
 8015b48:	f000 f9b9 	bl	8015ebe <_ZN11ArduinoJson8V730HB229ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>
}
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	371c      	adds	r7, #28
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bd90      	pop	{r4, r7, pc}

08015b54 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIfEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8015b54:	b590      	push	{r4, r7, lr}
 8015b56:	b087      	sub	sp, #28
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	617b      	str	r3, [r7, #20]
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8015b64:	6938      	ldr	r0, [r7, #16]
 8015b66:	f7f3 f82c 	bl	8008bc2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8015b6a:	4604      	mov	r4, r0
 8015b6c:	6938      	ldr	r0, [r7, #16]
 8015b6e:	f7f2 feb6 	bl	80088de <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8015b72:	4602      	mov	r2, r0
 8015b74:	f107 0308 	add.w	r3, r7, #8
 8015b78:	4621      	mov	r1, r4
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f7ef ff51 	bl	8005a22 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8015b80:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8015b82:	f107 0308 	add.w	r3, r7, #8
 8015b86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015b8a:	f000 f9ad 	bl	8015ee8 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE>
 8015b8e:	eef0 7a40 	vmov.f32	s15, s0
}
 8015b92:	eeb0 0a67 	vmov.f32	s0, s15
 8015b96:	371c      	adds	r7, #28
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	bd90      	pop	{r4, r7, pc}

08015b9c <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asItEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8015b9c:	b590      	push	{r4, r7, lr}
 8015b9e:	b087      	sub	sp, #28
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	6078      	str	r0, [r7, #4]
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	617b      	str	r3, [r7, #20]
 8015ba8:	697b      	ldr	r3, [r7, #20]
 8015baa:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8015bac:	6938      	ldr	r0, [r7, #16]
 8015bae:	f7f3 f808 	bl	8008bc2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8015bb2:	4604      	mov	r4, r0
 8015bb4:	6938      	ldr	r0, [r7, #16]
 8015bb6:	f7f2 fe92 	bl	80088de <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 8015bba:	4602      	mov	r2, r0
 8015bbc:	f107 0308 	add.w	r3, r7, #8
 8015bc0:	4621      	mov	r1, r4
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f7ef ff2d 	bl	8005a22 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 8015bc8:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8015bca:	f107 0308 	add.w	r3, r7, #8
 8015bce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015bd2:	f000 f9ad 	bl	8015f30 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE>
 8015bd6:	4603      	mov	r3, r0
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	371c      	adds	r7, #28
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd90      	pop	{r4, r7, pc}

08015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015be0:	b480      	push	{r7}
 8015be2:	b083      	sub	sp, #12
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	4618      	mov	r0, r3
 8015bec:	370c      	adds	r7, #12
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf4:	4770      	bx	lr

08015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015bf6:	b480      	push	{r7}
 8015bf8:	b083      	sub	sp, #12
 8015bfa:	af00      	add	r7, sp, #0
 8015bfc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	4618      	mov	r0, r3
 8015c02:	370c      	adds	r7, #12
 8015c04:	46bd      	mov	sp, r7
 8015c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0a:	4770      	bx	lr

08015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015c0c:	b480      	push	{r7}
 8015c0e:	b083      	sub	sp, #12
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	4618      	mov	r0, r3
 8015c18:	370c      	adds	r7, #12
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c20:	4770      	bx	lr

08015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015c22:	b480      	push	{r7}
 8015c24:	b083      	sub	sp, #12
 8015c26:	af00      	add	r7, sp, #0
 8015c28:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	370c      	adds	r7, #12
 8015c30:	46bd      	mov	sp, r7
 8015c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c36:	4770      	bx	lr

08015c38 <_ZNSt10shared_ptrI7TMC2208EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8015c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c3c:	b08b      	sub	sp, #44	@ 0x2c
 8015c3e:	af04      	add	r7, sp, #16
 8015c40:	6178      	str	r0, [r7, #20]
 8015c42:	6139      	str	r1, [r7, #16]
 8015c44:	60fa      	str	r2, [r7, #12]
 8015c46:	60bb      	str	r3, [r7, #8]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8015c48:	697c      	ldr	r4, [r7, #20]
 8015c4a:	68f8      	ldr	r0, [r7, #12]
 8015c4c:	f7ff ffc8 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8015c50:	4680      	mov	r8, r0
 8015c52:	68b8      	ldr	r0, [r7, #8]
 8015c54:	f7ff ffcf 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8015c58:	4681      	mov	r9, r0
 8015c5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015c5c:	f7ff ffd6 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015c60:	4605      	mov	r5, r0
 8015c62:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015c64:	f7ff ffd2 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015c68:	4606      	mov	r6, r0
 8015c6a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015c6c:	f7fb fcbf 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8015c70:	6078      	str	r0, [r7, #4]
 8015c72:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015c74:	f7ff ffd5 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8015c78:	4603      	mov	r3, r0
 8015c7a:	9303      	str	r3, [sp, #12]
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	9302      	str	r3, [sp, #8]
 8015c80:	9601      	str	r6, [sp, #4]
 8015c82:	9500      	str	r5, [sp, #0]
 8015c84:	464b      	mov	r3, r9
 8015c86:	4642      	mov	r2, r8
 8015c88:	6939      	ldr	r1, [r7, #16]
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	f000 f96e 	bl	8015f6c <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8015c90:	697b      	ldr	r3, [r7, #20]
 8015c92:	4618      	mov	r0, r3
 8015c94:	371c      	adds	r7, #28
 8015c96:	46bd      	mov	sp, r7
 8015c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015c9c <_ZSt4moveIRSt10shared_ptrI7TMC2208EEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8015c9c:	b480      	push	{r7}
 8015c9e:	b083      	sub	sp, #12
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	370c      	adds	r7, #12
 8015caa:	46bd      	mov	sp, r7
 8015cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb0:	4770      	bx	lr

08015cb2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208vEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8015cb2:	b580      	push	{r7, lr}
 8015cb4:	b082      	sub	sp, #8
 8015cb6:	af00      	add	r7, sp, #0
 8015cb8:	6078      	str	r0, [r7, #4]
 8015cba:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8015cbc:	683b      	ldr	r3, [r7, #0]
 8015cbe:	681a      	ldr	r2, [r3, #0]
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	601a      	str	r2, [r3, #0]
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	3304      	adds	r3, #4
 8015cc8:	4618      	mov	r0, r3
 8015cca:	f7f7 faed 	bl	800d2a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	1d1a      	adds	r2, r3, #4
 8015cd2:	683b      	ldr	r3, [r7, #0]
 8015cd4:	3304      	adds	r3, #4
 8015cd6:	4619      	mov	r1, r3
 8015cd8:	4610      	mov	r0, r2
 8015cda:	f7f7 fea4 	bl	800da26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 8015cde:	683b      	ldr	r3, [r7, #0]
 8015ce0:	2200      	movs	r2, #0
 8015ce2:	601a      	str	r2, [r3, #0]
	}
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	3708      	adds	r7, #8
 8015cea:	46bd      	mov	sp, r7
 8015cec:	bd80      	pop	{r7, pc}

08015cee <_ZNSt15__uniq_ptr_dataI14TMC2208StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8015cee:	b580      	push	{r7, lr}
 8015cf0:	b082      	sub	sp, #8
 8015cf2:	af00      	add	r7, sp, #0
 8015cf4:	6078      	str	r0, [r7, #4]
 8015cf6:	6039      	str	r1, [r7, #0]
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	683a      	ldr	r2, [r7, #0]
 8015cfc:	4611      	mov	r1, r2
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f000 f974 	bl	8015fec <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EEC1EPS0_>
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	4618      	mov	r0, r3
 8015d08:	3708      	adds	r7, #8
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	bd80      	pop	{r7, pc}

08015d0e <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8015d0e:	b580      	push	{r7, lr}
 8015d10:	b082      	sub	sp, #8
 8015d12:	af00      	add	r7, sp, #0
 8015d14:	6078      	str	r0, [r7, #4]
 8015d16:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	6839      	ldr	r1, [r7, #0]
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f7ff ffe6 	bl	8015cee <_ZNSt15__uniq_ptr_dataI14TMC2208StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	4618      	mov	r0, r3
 8015d26:	3708      	adds	r7, #8
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	bd80      	pop	{r7, pc}

08015d2c <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b082      	sub	sp, #8
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	4618      	mov	r0, r3
 8015d38:	f000 f96c 	bl	8016014 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	4618      	mov	r0, r3
 8015d40:	3708      	adds	r7, #8
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}

08015d46 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8015d46:	b580      	push	{r7, lr}
 8015d48:	b082      	sub	sp, #8
 8015d4a:	af00      	add	r7, sp, #0
 8015d4c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	4618      	mov	r0, r3
 8015d52:	f000 f96c 	bl	801602e <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE10_M_deleterEv>
 8015d56:	4603      	mov	r3, r0
 8015d58:	4618      	mov	r0, r3
 8015d5a:	3708      	adds	r7, #8
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	bd80      	pop	{r7, pc}

08015d60 <_ZSt4moveIRP14TMC2208StepperEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8015d60:	b480      	push	{r7}
 8015d62:	b083      	sub	sp, #12
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	370c      	adds	r7, #12
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d74:	4770      	bx	lr

08015d76 <_ZNKSt14default_deleteI14TMC2208StepperEclEPS0_>:
      operator()(_Tp* __ptr) const
 8015d76:	b590      	push	{r4, r7, lr}
 8015d78:	b083      	sub	sp, #12
 8015d7a:	af00      	add	r7, sp, #0
 8015d7c:	6078      	str	r0, [r7, #4]
 8015d7e:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8015d80:	683c      	ldr	r4, [r7, #0]
 8015d82:	2c00      	cmp	r4, #0
 8015d84:	d006      	beq.n	8015d94 <_ZNKSt14default_deleteI14TMC2208StepperEclEPS0_+0x1e>
 8015d86:	4620      	mov	r0, r4
 8015d88:	f7ff f95c 	bl	8015044 <_ZN14TMC2208StepperD1Ev>
 8015d8c:	2168      	movs	r1, #104	@ 0x68
 8015d8e:	4620      	mov	r0, r4
 8015d90:	f012 fca1 	bl	80286d6 <_ZdlPvj>
      }
 8015d94:	bf00      	nop
 8015d96:	370c      	adds	r7, #12
 8015d98:	46bd      	mov	sp, r7
 8015d9a:	bd90      	pop	{r4, r7, pc}

08015d9c <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I3TMCvEERKS_IT_LS2_0EE>:
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b082      	sub	sp, #8
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	6078      	str	r0, [r7, #4]
 8015da4:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 8015da6:	683b      	ldr	r3, [r7, #0]
 8015da8:	681a      	ldr	r2, [r3, #0]
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	601a      	str	r2, [r3, #0]
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	1d1a      	adds	r2, r3, #4
 8015db2:	683b      	ldr	r3, [r7, #0]
 8015db4:	3304      	adds	r3, #4
 8015db6:	4619      	mov	r1, r3
 8015db8:	4610      	mov	r0, r2
 8015dba:	f7f6 fc78 	bl	800c6ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	{ }
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	3708      	adds	r7, #8
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	bd80      	pop	{r7, pc}

08015dc8 <_ZNKSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b082      	sub	sp, #8
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f000 f938 	bl	8016048 <_ZNKSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8015dd8:	4603      	mov	r3, r0
 8015dda:	4618      	mov	r0, r3
 8015ddc:	3708      	adds	r7, #8
 8015dde:	46bd      	mov	sp, r7
 8015de0:	bd80      	pop	{r7, pc}

08015de2 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>:
};

template <typename TDestination>
class Writer<TDestination, enable_if_t<is_std_string<TDestination>::value>> {
 public:
  Writer(TDestination& str) : str_(&str) {
 8015de2:	b580      	push	{r7, lr}
 8015de4:	b082      	sub	sp, #8
 8015de6:	af00      	add	r7, sp, #0
 8015de8:	6078      	str	r0, [r7, #4]
 8015dea:	6039      	str	r1, [r7, #0]
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	683a      	ldr	r2, [r7, #0]
 8015df0:	601a      	str	r2, [r3, #0]
    str.clear();
 8015df2:	6838      	ldr	r0, [r7, #0]
 8015df4:	f012 fe36 	bl	8028a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
  }
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	3708      	adds	r7, #8
 8015dfe:	46bd      	mov	sp, r7
 8015e00:	bd80      	pop	{r7, pc}

08015e02 <_ZN11ArduinoJson8V730HB226detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>:
size_t doSerialize(ArduinoJson::JsonVariantConst source, TWriter writer) {
 8015e02:	b580      	push	{r7, lr}
 8015e04:	b08a      	sub	sp, #40	@ 0x28
 8015e06:	af00      	add	r7, sp, #0
 8015e08:	f107 0308 	add.w	r3, r7, #8
 8015e0c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015e10:	607a      	str	r2, [r7, #4]
  auto data = VariantAttorney::getData(source);
 8015e12:	f107 0308 	add.w	r3, r7, #8
 8015e16:	4618      	mov	r0, r3
 8015e18:	f7f1 fb82 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8015e1c:	6278      	str	r0, [r7, #36]	@ 0x24
  auto resources = VariantAttorney::getResourceManager(source);
 8015e1e:	f107 0308 	add.w	r3, r7, #8
 8015e22:	4618      	mov	r0, r3
 8015e24:	f7f1 fb88 	bl	8007538 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8015e28:	6238      	str	r0, [r7, #32]
  TSerializer<TWriter> serializer(writer, resources);
 8015e2a:	f107 0314 	add.w	r3, r7, #20
 8015e2e:	6a3a      	ldr	r2, [r7, #32]
 8015e30:	6879      	ldr	r1, [r7, #4]
 8015e32:	4618      	mov	r0, r3
 8015e34:	f000 f916 	bl	8016064 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_PKNS1_15ResourceManagerE>
  return VariantData::accept(data, resources, serializer);
 8015e38:	f107 0314 	add.w	r3, r7, #20
 8015e3c:	461a      	mov	r2, r3
 8015e3e:	6a39      	ldr	r1, [r7, #32]
 8015e40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015e42:	f000 f922 	bl	801608a <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_>
 8015e46:	4603      	mov	r3, r0
}
 8015e48:	4618      	mov	r0, r3
 8015e4a:	3728      	adds	r7, #40	@ 0x28
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	bd80      	pop	{r7, pc}

08015e50 <_ZN11ArduinoJson8V730HB2215SerializedValueIPKcEC1ES3_j>:
  explicit SerializedValue(TChar* p, size_t n) : data_(p), size_(n) {}
 8015e50:	b480      	push	{r7}
 8015e52:	b085      	sub	sp, #20
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	60f8      	str	r0, [r7, #12]
 8015e58:	60b9      	str	r1, [r7, #8]
 8015e5a:	607a      	str	r2, [r7, #4]
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	68ba      	ldr	r2, [r7, #8]
 8015e60:	601a      	str	r2, [r3, #0]
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	687a      	ldr	r2, [r7, #4]
 8015e66:	605a      	str	r2, [r3, #4]
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	3714      	adds	r7, #20
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e74:	4770      	bx	lr

08015e76 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __weak_count() noexcept : _M_pi(nullptr)
 8015e76:	b480      	push	{r7}
 8015e78:	b083      	sub	sp, #12
 8015e7a:	af00      	add	r7, sp, #0
 8015e7c:	6078      	str	r0, [r7, #4]
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	2200      	movs	r2, #0
 8015e82:	601a      	str	r2, [r3, #0]
      { }
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	4618      	mov	r0, r3
 8015e88:	370c      	adds	r7, #12
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e90:	4770      	bx	lr

08015e92 <_ZNSt12__shared_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EEC1IS0_vEERKSt10__weak_ptrIT_LS2_0EE>:
	explicit __shared_ptr(const __weak_ptr<_Yp, _Lp>& __r)
 8015e92:	b580      	push	{r7, lr}
 8015e94:	b082      	sub	sp, #8
 8015e96:	af00      	add	r7, sp, #0
 8015e98:	6078      	str	r0, [r7, #4]
 8015e9a:	6039      	str	r1, [r7, #0]
	: _M_refcount(__r._M_refcount) // may throw
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	1d1a      	adds	r2, r3, #4
 8015ea0:	683b      	ldr	r3, [r7, #0]
 8015ea2:	3304      	adds	r3, #4
 8015ea4:	4619      	mov	r1, r3
 8015ea6:	4610      	mov	r0, r2
 8015ea8:	f000 f909 	bl	80160be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE>
	  _M_ptr = __r._M_ptr;
 8015eac:	683b      	ldr	r3, [r7, #0]
 8015eae:	681a      	ldr	r2, [r3, #0]
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	601a      	str	r2, [r3, #0]
	}
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3708      	adds	r7, #8
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	bd80      	pop	{r7, pc}

08015ebe <_ZN11ArduinoJson8V730HB229ConverterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE8fromJsonENS0_16JsonVariantConstE>:
  static detail::decay_t<T> fromJson(JsonVariantConst src) {
 8015ebe:	b580      	push	{r7, lr}
 8015ec0:	b084      	sub	sp, #16
 8015ec2:	af00      	add	r7, sp, #0
 8015ec4:	60f8      	str	r0, [r7, #12]
 8015ec6:	1d3b      	adds	r3, r7, #4
 8015ec8:	e883 0006 	stmia.w	r3, {r1, r2}
    T result; // Error here? See https://arduinojson.org/v7/non-default-constructible/
 8015ecc:	68f8      	ldr	r0, [r7, #12]
 8015ece:	f012 fce8 	bl	80288a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
    convertFromJson(src, result);  // Error here? See https://arduinojson.org/v7/unsupported-as/
 8015ed2:	68fa      	ldr	r2, [r7, #12]
 8015ed4:	1d3b      	adds	r3, r7, #4
 8015ed6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015eda:	f7ff f86f 	bl	8014fbc <_ZN11ArduinoJson8V730HB2215convertFromJsonENS0_16JsonVariantConstERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    return result;
 8015ede:	bf00      	nop
  }
 8015ee0:	68f8      	ldr	r0, [r7, #12]
 8015ee2:	3710      	adds	r7, #16
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	bd80      	pop	{r7, pc}

08015ee8 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b084      	sub	sp, #16
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	463b      	mov	r3, r7
 8015ef0:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8015ef4:	463b      	mov	r3, r7
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f7f1 fb12 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8015efc:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8015efe:	463b      	mov	r3, r7
 8015f00:	4618      	mov	r0, r3
 8015f02:	f7f1 fb19 	bl	8007538 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8015f06:	60b8      	str	r0, [r7, #8]
    return data ? data->template asFloat<T>(resources) : 0;
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d006      	beq.n	8015f1c <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8015f0e:	68b9      	ldr	r1, [r7, #8]
 8015f10:	68f8      	ldr	r0, [r7, #12]
 8015f12:	f000 f8f9 	bl	8016108 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE>
 8015f16:	eef0 7a40 	vmov.f32	s15, s0
 8015f1a:	e001      	b.n	8015f20 <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x38>
 8015f1c:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8015f2c <_ZN11ArduinoJson8V730HB229ConverterIfvE8fromJsonENS0_16JsonVariantConstE+0x44>
  }
 8015f20:	eeb0 0a67 	vmov.f32	s0, s15
 8015f24:	3710      	adds	r7, #16
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bd80      	pop	{r7, pc}
 8015f2a:	bf00      	nop
 8015f2c:	00000000 	.word	0x00000000

08015f30 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b084      	sub	sp, #16
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	463b      	mov	r3, r7
 8015f38:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8015f3c:	463b      	mov	r3, r7
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f7f1 faee 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8015f44:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8015f46:	463b      	mov	r3, r7
 8015f48:	4618      	mov	r0, r3
 8015f4a:	f7f1 faf5 	bl	8007538 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8015f4e:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d005      	beq.n	8015f62 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8015f56:	68b9      	ldr	r1, [r7, #8]
 8015f58:	68f8      	ldr	r0, [r7, #12]
 8015f5a:	f000 f963 	bl	8016224 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	e000      	b.n	8015f64 <_ZN11ArduinoJson8V730HB229ConverterItvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8015f62:	2300      	movs	r3, #0
  }
 8015f64:	4618      	mov	r0, r3
 8015f66:	3710      	adds	r7, #16
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	bd80      	pop	{r7, pc}

08015f6c <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8015f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f70:	b08e      	sub	sp, #56	@ 0x38
 8015f72:	af06      	add	r7, sp, #24
 8015f74:	61f8      	str	r0, [r7, #28]
 8015f76:	61b9      	str	r1, [r7, #24]
 8015f78:	617a      	str	r2, [r7, #20]
 8015f7a:	613b      	str	r3, [r7, #16]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8015f7c:	69fb      	ldr	r3, [r7, #28]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	601a      	str	r2, [r3, #0]
 8015f82:	69fb      	ldr	r3, [r7, #28]
 8015f84:	1d1c      	adds	r4, r3, #4
 8015f86:	69fd      	ldr	r5, [r7, #28]
 8015f88:	6978      	ldr	r0, [r7, #20]
 8015f8a:	f7ff fe29 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8015f8e:	4680      	mov	r8, r0
 8015f90:	6938      	ldr	r0, [r7, #16]
 8015f92:	f7ff fe30 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8015f96:	4606      	mov	r6, r0
 8015f98:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015f9a:	f7ff fe37 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015f9e:	60f8      	str	r0, [r7, #12]
 8015fa0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015fa2:	f7ff fe33 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8015fa6:	60b8      	str	r0, [r7, #8]
 8015fa8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8015faa:	f7fb fb20 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8015fae:	6078      	str	r0, [r7, #4]
 8015fb0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015fb2:	f7ff fe36 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	9304      	str	r3, [sp, #16]
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	9303      	str	r3, [sp, #12]
 8015fbe:	68bb      	ldr	r3, [r7, #8]
 8015fc0:	9302      	str	r3, [sp, #8]
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	9301      	str	r3, [sp, #4]
 8015fc6:	9600      	str	r6, [sp, #0]
 8015fc8:	4643      	mov	r3, r8
 8015fca:	69ba      	ldr	r2, [r7, #24]
 8015fcc:	4629      	mov	r1, r5
 8015fce:	4620      	mov	r0, r4
 8015fd0:	f000 f9ba 	bl	8016348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8015fd4:	69fb      	ldr	r3, [r7, #28]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	4619      	mov	r1, r3
 8015fda:	69f8      	ldr	r0, [r7, #28]
 8015fdc:	f000 fa1a 	bl	8016414 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8015fe0:	69fb      	ldr	r3, [r7, #28]
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	3720      	adds	r7, #32
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015fec <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8015fec:	b590      	push	{r4, r7, lr}
 8015fee:	b083      	sub	sp, #12
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
 8015ff4:	6039      	str	r1, [r7, #0]
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f000 fa2c 	bl	8016456 <_ZNSt5tupleIJP14TMC2208StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8015ffe:	683c      	ldr	r4, [r7, #0]
 8016000:	6878      	ldr	r0, [r7, #4]
 8016002:	f7ff fe93 	bl	8015d2c <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8016006:	4603      	mov	r3, r0
 8016008:	601c      	str	r4, [r3, #0]
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	4618      	mov	r0, r3
 801600e:	370c      	adds	r7, #12
 8016010:	46bd      	mov	sp, r7
 8016012:	bd90      	pop	{r4, r7, pc}

08016014 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8016014:	b580      	push	{r7, lr}
 8016016:	b082      	sub	sp, #8
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	4618      	mov	r0, r3
 8016020:	f000 fa26 	bl	8016470 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8016024:	4603      	mov	r3, r0
 8016026:	4618      	mov	r0, r3
 8016028:	3708      	adds	r7, #8
 801602a:	46bd      	mov	sp, r7
 801602c:	bd80      	pop	{r7, pc}

0801602e <_ZNSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 801602e:	b580      	push	{r7, lr}
 8016030:	b082      	sub	sp, #8
 8016032:	af00      	add	r7, sp, #0
 8016034:	6078      	str	r0, [r7, #4]
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	4618      	mov	r0, r3
 801603a:	f000 fa25 	bl	8016488 <_ZSt3getILj1EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801603e:	4603      	mov	r3, r0
 8016040:	4618      	mov	r0, r3
 8016042:	3708      	adds	r7, #8
 8016044:	46bd      	mov	sp, r7
 8016046:	bd80      	pop	{r7, pc}

08016048 <_ZNKSt15__uniq_ptr_implI14TMC2208StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8016048:	b580      	push	{r7, lr}
 801604a:	b082      	sub	sp, #8
 801604c:	af00      	add	r7, sp, #0
 801604e:	6078      	str	r0, [r7, #4]
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	4618      	mov	r0, r3
 8016054:	f000 fa24 	bl	80164a0 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8016058:	4603      	mov	r3, r0
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	4618      	mov	r0, r3
 801605e:	3708      	adds	r7, #8
 8016060:	46bd      	mov	sp, r7
 8016062:	bd80      	pop	{r7, pc}

08016064 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_PKNS1_15ResourceManagerE>:
  JsonSerializer(TWriter writer, const ResourceManager* resources)
 8016064:	b580      	push	{r7, lr}
 8016066:	b084      	sub	sp, #16
 8016068:	af00      	add	r7, sp, #0
 801606a:	60f8      	str	r0, [r7, #12]
 801606c:	60b9      	str	r1, [r7, #8]
 801606e:	607a      	str	r2, [r7, #4]
      : formatter_(writer), resources_(resources) {}
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	68b9      	ldr	r1, [r7, #8]
 8016074:	4618      	mov	r0, r3
 8016076:	f000 fa20 	bl	80164ba <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	687a      	ldr	r2, [r7, #4]
 801607e:	609a      	str	r2, [r3, #8]
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	4618      	mov	r0, r3
 8016084:	3710      	adds	r7, #16
 8016086:	46bd      	mov	sp, r7
 8016088:	bd80      	pop	{r7, pc}

0801608a <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_>:
  static typename TVisitor::result_type accept(const VariantData* var,
 801608a:	b580      	push	{r7, lr}
 801608c:	b084      	sub	sp, #16
 801608e:	af00      	add	r7, sp, #0
 8016090:	60f8      	str	r0, [r7, #12]
 8016092:	60b9      	str	r1, [r7, #8]
 8016094:	607a      	str	r2, [r7, #4]
    if (var != 0)
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d006      	beq.n	80160aa <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_+0x20>
      return var->accept(visit, resources);
 801609c:	68ba      	ldr	r2, [r7, #8]
 801609e:	6879      	ldr	r1, [r7, #4]
 80160a0:	68f8      	ldr	r0, [r7, #12]
 80160a2:	f000 fa1b 	bl	80164dc <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
 80160a6:	4603      	mov	r3, r0
 80160a8:	e005      	b.n	80160b6 <_ZN11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKS2_PKNS1_15ResourceManagerERSE_+0x2c>
      return visit.visit(nullptr);
 80160aa:	2100      	movs	r1, #0
 80160ac:	6878      	ldr	r0, [r7, #4]
 80160ae:	f000 fb43 	bl	8016738 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>
 80160b2:	4603      	mov	r3, r0
 80160b4:	bf00      	nop
  }
 80160b6:	4618      	mov	r0, r3
 80160b8:	3710      	adds	r7, #16
 80160ba:	46bd      	mov	sp, r7
 80160bc:	bd80      	pop	{r7, pc}

080160be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE>:
    __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)
 80160be:	b580      	push	{r7, lr}
 80160c0:	b082      	sub	sp, #8
 80160c2:	af00      	add	r7, sp, #0
 80160c4:	6078      	str	r0, [r7, #4]
 80160c6:	6039      	str	r1, [r7, #0]
    : _M_pi(__r._M_pi)
 80160c8:	683b      	ldr	r3, [r7, #0]
 80160ca:	681a      	ldr	r2, [r3, #0]
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	601a      	str	r2, [r3, #0]
      if (_M_pi == nullptr || !_M_pi->_M_add_ref_lock_nothrow())
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d00a      	beq.n	80160ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x30>
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	4618      	mov	r0, r3
 80160de:	f7fe fdf1 	bl	8014cc4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE23_M_add_ref_lock_nothrowEv>
 80160e2:	4603      	mov	r3, r0
 80160e4:	f083 0301 	eor.w	r3, r3, #1
 80160e8:	b2db      	uxtb	r3, r3
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d001      	beq.n	80160f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x34>
 80160ee:	2301      	movs	r3, #1
 80160f0:	e000      	b.n	80160f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x36>
 80160f2:	2300      	movs	r3, #0
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d001      	beq.n	80160fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKSt12__weak_countILS1_0EE+0x3e>
	__throw_bad_weak_ptr();
 80160f8:	f7fe fde0 	bl	8014cbc <_ZSt20__throw_bad_weak_ptrv>
    }
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	4618      	mov	r0, r3
 8016100:	3708      	adds	r7, #8
 8016102:	46bd      	mov	sp, r7
 8016104:	bd80      	pop	{r7, pc}
	...

08016108 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE>:
  T asFloat(const ResourceManager* resources) const {
 8016108:	b580      	push	{r7, lr}
 801610a:	b084      	sub	sp, #16
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
 8016110:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8016112:	6839      	ldr	r1, [r7, #0]
 8016114:	6878      	ldr	r0, [r7, #4]
 8016116:	f7f0 fa19 	bl	800654c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 801611a:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	791b      	ldrb	r3, [r3, #4]
 8016120:	3b04      	subs	r3, #4
 8016122:	2b1a      	cmp	r3, #26
 8016124:	d874      	bhi.n	8016210 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x108>
 8016126:	a201      	add	r2, pc, #4	@ (adr r2, 801612c <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x24>)
 8016128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801612c:	080161eb 	.word	0x080161eb
 8016130:	080161eb 	.word	0x080161eb
 8016134:	08016199 	.word	0x08016199
 8016138:	08016211 	.word	0x08016211
 801613c:	08016211 	.word	0x08016211
 8016140:	08016211 	.word	0x08016211
 8016144:	080161a7 	.word	0x080161a7
 8016148:	08016211 	.word	0x08016211
 801614c:	080161b5 	.word	0x080161b5
 8016150:	08016211 	.word	0x08016211
 8016154:	080161fd 	.word	0x080161fd
 8016158:	08016211 	.word	0x08016211
 801615c:	08016211 	.word	0x08016211
 8016160:	08016211 	.word	0x08016211
 8016164:	08016211 	.word	0x08016211
 8016168:	08016211 	.word	0x08016211
 801616c:	08016211 	.word	0x08016211
 8016170:	08016211 	.word	0x08016211
 8016174:	08016211 	.word	0x08016211
 8016178:	08016211 	.word	0x08016211
 801617c:	08016211 	.word	0x08016211
 8016180:	08016211 	.word	0x08016211
 8016184:	080161c3 	.word	0x080161c3
 8016188:	08016211 	.word	0x08016211
 801618c:	080161d7 	.word	0x080161d7
 8016190:	08016211 	.word	0x08016211
 8016194:	08016205 	.word	0x08016205
        return static_cast<T>(content_.asBoolean);
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	781b      	ldrb	r3, [r3, #0]
 801619c:	ee07 3a90 	vmov	s15, r3
 80161a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80161a4:	e036      	b.n	8016214 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asUint32);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	ee07 3a90 	vmov	s15, r3
 80161ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80161b2:	e02f      	b.n	8016214 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asInt32);
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	ee07 3a90 	vmov	s15, r3
 80161bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80161c0:	e028      	b.n	8016214 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asUint64);
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161c8:	4610      	mov	r0, r2
 80161ca:	4619      	mov	r1, r3
 80161cc:	f7ea fb74 	bl	80008b8 <__aeabi_ul2f>
 80161d0:	ee07 0a90 	vmov	s15, r0
 80161d4:	e01e      	b.n	8016214 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asInt64);
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161dc:	4610      	mov	r0, r2
 80161de:	4619      	mov	r1, r3
 80161e0:	f7ea fb72 	bl	80008c8 <__aeabi_l2f>
 80161e4:	ee07 0a90 	vmov	s15, r0
 80161e8:	e014      	b.n	8016214 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return parseNumber<T>(content_.asOwnedString->data);
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	3308      	adds	r3, #8
 80161f0:	4618      	mov	r0, r3
 80161f2:	f000 fab5 	bl	8016760 <_ZN11ArduinoJson8V730HB226detail11parseNumberIfEET_PKc>
 80161f6:	eef0 7a40 	vmov.f32	s15, s0
 80161fa:	e00b      	b.n	8016214 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(content_.asFloat);
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	edd3 7a00 	vldr	s15, [r3]
 8016202:	e007      	b.n	8016214 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return static_cast<T>(extension->asDouble);
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	ed93 7b00 	vldr	d7, [r3]
 801620a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801620e:	e001      	b.n	8016214 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x10c>
        return 0;
 8016210:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8016220 <_ZNK11ArduinoJson8V730HB226detail11VariantData7asFloatIfEET_PKNS1_15ResourceManagerE+0x118>
  }
 8016214:	eeb0 0a67 	vmov.f32	s0, s15
 8016218:	3710      	adds	r7, #16
 801621a:	46bd      	mov	sp, r7
 801621c:	bd80      	pop	{r7, pc}
 801621e:	bf00      	nop
 8016220:	00000000 	.word	0x00000000

08016224 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8016224:	b580      	push	{r7, lr}
 8016226:	b084      	sub	sp, #16
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
 801622c:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 801622e:	6839      	ldr	r1, [r7, #0]
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	f7f0 f98b 	bl	800654c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8016236:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	791b      	ldrb	r3, [r3, #4]
 801623c:	3b04      	subs	r3, #4
 801623e:	2b1a      	cmp	r3, #26
 8016240:	d87c      	bhi.n	801633c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x118>
 8016242:	a201      	add	r2, pc, #4	@ (adr r2, 8016248 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x24>)
 8016244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016248:	080162fb 	.word	0x080162fb
 801624c:	08016309 	.word	0x08016309
 8016250:	080162b5 	.word	0x080162b5
 8016254:	0801633d 	.word	0x0801633d
 8016258:	0801633d 	.word	0x0801633d
 801625c:	0801633d 	.word	0x0801633d
 8016260:	080162bb 	.word	0x080162bb
 8016264:	0801633d 	.word	0x0801633d
 8016268:	080162c9 	.word	0x080162c9
 801626c:	0801633d 	.word	0x0801633d
 8016270:	08016319 	.word	0x08016319
 8016274:	0801633d 	.word	0x0801633d
 8016278:	0801633d 	.word	0x0801633d
 801627c:	0801633d 	.word	0x0801633d
 8016280:	0801633d 	.word	0x0801633d
 8016284:	0801633d 	.word	0x0801633d
 8016288:	0801633d 	.word	0x0801633d
 801628c:	0801633d 	.word	0x0801633d
 8016290:	0801633d 	.word	0x0801633d
 8016294:	0801633d 	.word	0x0801633d
 8016298:	0801633d 	.word	0x0801633d
 801629c:	0801633d 	.word	0x0801633d
 80162a0:	080162d7 	.word	0x080162d7
 80162a4:	0801633d 	.word	0x0801633d
 80162a8:	080162e9 	.word	0x080162e9
 80162ac:	0801633d 	.word	0x0801633d
 80162b0:	0801632b 	.word	0x0801632b
        return content_.asBoolean;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	781b      	ldrb	r3, [r3, #0]
 80162b8:	e041      	b.n	801633e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	4618      	mov	r0, r3
 80162c0:	f000 fa64 	bl	801678c <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_>
 80162c4:	4603      	mov	r3, r0
 80162c6:	e03a      	b.n	801633e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	4618      	mov	r0, r3
 80162ce:	f000 fa6f 	bl	80167b0 <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_>
 80162d2:	4603      	mov	r3, r0
 80162d4:	e033      	b.n	801633e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162dc:	4610      	mov	r0, r2
 80162de:	4619      	mov	r1, r3
 80162e0:	f000 fa78 	bl	80167d4 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>
 80162e4:	4603      	mov	r3, r0
 80162e6:	e02a      	b.n	801633e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ee:	4610      	mov	r0, r2
 80162f0:	4619      	mov	r1, r3
 80162f2:	f000 fa82 	bl	80167fa <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>
 80162f6:	4603      	mov	r3, r0
 80162f8:	e021      	b.n	801633e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	4618      	mov	r0, r3
 8016300:	f000 fa8e 	bl	8016820 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>
 8016304:	4603      	mov	r3, r0
 8016306:	e01a      	b.n	801633e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	3308      	adds	r3, #8
 801630e:	4618      	mov	r0, r3
 8016310:	f000 fa86 	bl	8016820 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>
 8016314:	4603      	mov	r3, r0
 8016316:	e012      	b.n	801633e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	edd3 7a00 	vldr	s15, [r3]
 801631e:	eeb0 0a67 	vmov.f32	s0, s15
 8016322:	f000 fa91 	bl	8016848 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>
 8016326:	4603      	mov	r3, r0
 8016328:	e009      	b.n	801633e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	ed93 7b00 	vldr	d7, [r3]
 8016330:	eeb0 0b47 	vmov.f64	d0, d7
 8016334:	f000 faa1 	bl	801687a <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>
 8016338:	4603      	mov	r3, r0
 801633a:	e000      	b.n	801633e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralItEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 801633c:	2300      	movs	r3, #0
  }
 801633e:	4618      	mov	r0, r3
 8016340:	3710      	adds	r7, #16
 8016342:	46bd      	mov	sp, r7
 8016344:	bd80      	pop	{r7, pc}
 8016346:	bf00      	nop

08016348 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2208SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8016348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801634c:	b090      	sub	sp, #64	@ 0x40
 801634e:	af04      	add	r7, sp, #16
 8016350:	6178      	str	r0, [r7, #20]
 8016352:	6139      	str	r1, [r7, #16]
 8016354:	60fa      	str	r2, [r7, #12]
 8016356:	60bb      	str	r3, [r7, #8]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 8016358:	68fa      	ldr	r2, [r7, #12]
 801635a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801635e:	4611      	mov	r1, r2
 8016360:	4618      	mov	r0, r3
 8016362:	f000 faa3 	bl	80168ac <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 8016366:	f107 031c 	add.w	r3, r7, #28
 801636a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801636e:	4611      	mov	r1, r2
 8016370:	4618      	mov	r0, r3
 8016372:	f000 fab4 	bl	80168de <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 8016376:	f107 031c 	add.w	r3, r7, #28
 801637a:	4618      	mov	r0, r3
 801637c:	f000 fad7 	bl	801692e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 8016380:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  auto __pi = ::new (__mem)
 8016382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016384:	4619      	mov	r1, r3
 8016386:	2058      	movs	r0, #88	@ 0x58
 8016388:	f7f4 fb56 	bl	800aa38 <_ZnwjPv>
 801638c:	4604      	mov	r4, r0
 801638e:	68b8      	ldr	r0, [r7, #8]
 8016390:	f7ff fc26 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8016394:	4680      	mov	r8, r0
 8016396:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8016398:	f7ff fc2d 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801639c:	4681      	mov	r9, r0
 801639e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80163a0:	f7ff fc34 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80163a4:	4605      	mov	r5, r0
 80163a6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80163a8:	f7ff fc30 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80163ac:	4606      	mov	r6, r0
 80163ae:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80163b0:	f7fb f91d 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80163b4:	6078      	str	r0, [r7, #4]
 80163b6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80163b8:	f7ff fc33 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80163bc:	4603      	mov	r3, r0
 80163be:	9303      	str	r3, [sp, #12]
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	9302      	str	r3, [sp, #8]
 80163c4:	9601      	str	r6, [sp, #4]
 80163c6:	9500      	str	r5, [sp, #0]
 80163c8:	464b      	mov	r3, r9
 80163ca:	4642      	mov	r2, r8
 80163cc:	4651      	mov	r1, sl
 80163ce:	4620      	mov	r0, r4
 80163d0:	f000 fabc 	bl	801694c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEES1_DpOT_>
 80163d4:	62bc      	str	r4, [r7, #40]	@ 0x28
	  __guard = nullptr;
 80163d6:	f107 031c 	add.w	r3, r7, #28
 80163da:	2100      	movs	r1, #0
 80163dc:	4618      	mov	r0, r3
 80163de:	f000 faf9 	bl	80169d4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 80163e2:	697b      	ldr	r3, [r7, #20]
 80163e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80163e6:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 80163e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80163ea:	f000 fb02 	bl	80169f2 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80163ee:	4602      	mov	r2, r0
 80163f0:	693b      	ldr	r3, [r7, #16]
 80163f2:	601a      	str	r2, [r3, #0]
	}
 80163f4:	f107 031c 	add.w	r3, r7, #28
 80163f8:	4618      	mov	r0, r3
 80163fa:	f000 fa83 	bl	8016904 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80163fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016402:	4618      	mov	r0, r3
 8016404:	f000 fa5f 	bl	80168c6 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8016408:	697b      	ldr	r3, [r7, #20]
 801640a:	4618      	mov	r0, r3
 801640c:	3730      	adds	r7, #48	@ 0x30
 801640e:	46bd      	mov	sp, r7
 8016410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016414 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp* __p) noexcept
 8016414:	b580      	push	{r7, lr}
 8016416:	b084      	sub	sp, #16
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
 801641c:	6039      	str	r1, [r7, #0]
	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	1d1a      	adds	r2, r3, #4
 8016422:	683b      	ldr	r3, [r7, #0]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d002      	beq.n	801642e <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1a>
 8016428:	683b      	ldr	r3, [r7, #0]
 801642a:	3318      	adds	r3, #24
 801642c:	e000      	b.n	8016430 <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1c>
 801642e:	2300      	movs	r3, #0
 8016430:	4619      	mov	r1, r3
 8016432:	4610      	mov	r0, r2
 8016434:	f000 faeb 	bl	8016a0e <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>
 8016438:	60f8      	str	r0, [r7, #12]
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	2b00      	cmp	r3, #0
 801643e:	d006      	beq.n	801644e <_ZNSt12__shared_ptrI7TMC2208LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x3a>
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	3304      	adds	r3, #4
 8016444:	461a      	mov	r2, r3
 8016446:	6839      	ldr	r1, [r7, #0]
 8016448:	68f8      	ldr	r0, [r7, #12]
 801644a:	f000 faec 	bl	8016a26 <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2208EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>
	}
 801644e:	bf00      	nop
 8016450:	3710      	adds	r7, #16
 8016452:	46bd      	mov	sp, r7
 8016454:	bd80      	pop	{r7, pc}

08016456 <_ZNSt5tupleIJP14TMC2208StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8016456:	b580      	push	{r7, lr}
 8016458:	b082      	sub	sp, #8
 801645a:	af00      	add	r7, sp, #0
 801645c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	4618      	mov	r0, r3
 8016462:	f000 faf0 	bl	8016a46 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEEC1Ev>
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	4618      	mov	r0, r3
 801646a:	3708      	adds	r7, #8
 801646c:	46bd      	mov	sp, r7
 801646e:	bd80      	pop	{r7, pc}

08016470 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8016470:	b580      	push	{r7, lr}
 8016472:	b082      	sub	sp, #8
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8016478:	6878      	ldr	r0, [r7, #4]
 801647a:	f000 faf4 	bl	8016a66 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERS4_>
 801647e:	4603      	mov	r3, r0
 8016480:	4618      	mov	r0, r3
 8016482:	3708      	adds	r7, #8
 8016484:	46bd      	mov	sp, r7
 8016486:	bd80      	pop	{r7, pc}

08016488 <_ZSt3getILj1EJP14TMC2208StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8016488:	b580      	push	{r7, lr}
 801648a:	b082      	sub	sp, #8
 801648c:	af00      	add	r7, sp, #0
 801648e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8016490:	6878      	ldr	r0, [r7, #4]
 8016492:	f000 faf5 	bl	8016a80 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2208StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8016496:	4603      	mov	r3, r0
 8016498:	4618      	mov	r0, r3
 801649a:	3708      	adds	r7, #8
 801649c:	46bd      	mov	sp, r7
 801649e:	bd80      	pop	{r7, pc}

080164a0 <_ZSt3getILj0EJP14TMC2208StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b082      	sub	sp, #8
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	4618      	mov	r0, r3
 80164ac:	f000 faf4 	bl	8016a98 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80164b0:	4603      	mov	r3, r0
 80164b2:	4618      	mov	r0, r3
 80164b4:	3708      	adds	r7, #8
 80164b6:	46bd      	mov	sp, r7
 80164b8:	bd80      	pop	{r7, pc}

080164ba <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter writer) : writer_(writer) {}
 80164ba:	b580      	push	{r7, lr}
 80164bc:	b082      	sub	sp, #8
 80164be:	af00      	add	r7, sp, #0
 80164c0:	6078      	str	r0, [r7, #4]
 80164c2:	6039      	str	r1, [r7, #0]
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	463a      	mov	r2, r7
 80164c8:	4611      	mov	r1, r2
 80164ca:	4618      	mov	r0, r3
 80164cc:	f000 faf0 	bl	8016ab0 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	4618      	mov	r0, r3
 80164d4:	3708      	adds	r7, #8
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}
	...

080164dc <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>:
  typename TVisitor::result_type accept(
 80164dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80164e0:	b08e      	sub	sp, #56	@ 0x38
 80164e2:	af00      	add	r7, sp, #0
 80164e4:	60f8      	str	r0, [r7, #12]
 80164e6:	60b9      	str	r1, [r7, #8]
 80164e8:	607a      	str	r2, [r7, #4]
    auto extension = getExtension(resources);
 80164ea:	6879      	ldr	r1, [r7, #4]
 80164ec:	68f8      	ldr	r0, [r7, #12]
 80164ee:	f7f0 f82d 	bl	800654c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 80164f2:	6378      	str	r0, [r7, #52]	@ 0x34
    switch (type_) {
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	791b      	ldrb	r3, [r3, #4]
 80164f8:	3b03      	subs	r3, #3
 80164fa:	2b3d      	cmp	r3, #61	@ 0x3d
 80164fc:	f200 8111 	bhi.w	8016722 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x246>
 8016500:	a201      	add	r2, pc, #4	@ (adr r2, 8016508 <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x2c>)
 8016502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016506:	bf00      	nop
 8016508:	0801668d 	.word	0x0801668d
 801650c:	08016645 	.word	0x08016645
 8016510:	08016665 	.word	0x08016665
 8016514:	08016709 	.word	0x08016709
 8016518:	08016723 	.word	0x08016723
 801651c:	08016723 	.word	0x08016723
 8016520:	08016723 	.word	0x08016723
 8016524:	080166d1 	.word	0x080166d1
 8016528:	08016723 	.word	0x08016723
 801652c:	080166b9 	.word	0x080166b9
 8016530:	08016723 	.word	0x08016723
 8016534:	08016601 	.word	0x08016601
 8016538:	08016723 	.word	0x08016723
 801653c:	08016723 	.word	0x08016723
 8016540:	08016723 	.word	0x08016723
 8016544:	08016723 	.word	0x08016723
 8016548:	08016723 	.word	0x08016723
 801654c:	08016723 	.word	0x08016723
 8016550:	08016723 	.word	0x08016723
 8016554:	08016723 	.word	0x08016723
 8016558:	08016723 	.word	0x08016723
 801655c:	08016723 	.word	0x08016723
 8016560:	08016723 	.word	0x08016723
 8016564:	080166f9 	.word	0x080166f9
 8016568:	08016723 	.word	0x08016723
 801656c:	080166e9 	.word	0x080166e9
 8016570:	08016723 	.word	0x08016723
 8016574:	08016615 	.word	0x08016615
 8016578:	08016723 	.word	0x08016723
 801657c:	08016637 	.word	0x08016637
 8016580:	08016723 	.word	0x08016723
 8016584:	08016723 	.word	0x08016723
 8016588:	08016723 	.word	0x08016723
 801658c:	08016723 	.word	0x08016723
 8016590:	08016723 	.word	0x08016723
 8016594:	08016723 	.word	0x08016723
 8016598:	08016723 	.word	0x08016723
 801659c:	08016723 	.word	0x08016723
 80165a0:	08016723 	.word	0x08016723
 80165a4:	08016723 	.word	0x08016723
 80165a8:	08016723 	.word	0x08016723
 80165ac:	08016723 	.word	0x08016723
 80165b0:	08016723 	.word	0x08016723
 80165b4:	08016723 	.word	0x08016723
 80165b8:	08016723 	.word	0x08016723
 80165bc:	08016723 	.word	0x08016723
 80165c0:	08016723 	.word	0x08016723
 80165c4:	08016723 	.word	0x08016723
 80165c8:	08016723 	.word	0x08016723
 80165cc:	08016723 	.word	0x08016723
 80165d0:	08016723 	.word	0x08016723
 80165d4:	08016723 	.word	0x08016723
 80165d8:	08016723 	.word	0x08016723
 80165dc:	08016723 	.word	0x08016723
 80165e0:	08016723 	.word	0x08016723
 80165e4:	08016723 	.word	0x08016723
 80165e8:	08016723 	.word	0x08016723
 80165ec:	08016723 	.word	0x08016723
 80165f0:	08016723 	.word	0x08016723
 80165f4:	08016723 	.word	0x08016723
 80165f8:	08016723 	.word	0x08016723
 80165fc:	08016629 	.word	0x08016629
        return visit.visit(content_.asFloat);
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	edd3 7a00 	vldr	s15, [r3]
 8016606:	eeb0 0a67 	vmov.f32	s0, s15
 801660a:	68b8      	ldr	r0, [r7, #8]
 801660c:	f000 fa63 	bl	8016ad6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIfEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>
 8016610:	4603      	mov	r3, r0
 8016612:	e08c      	b.n	801672e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(extension->asDouble);
 8016614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016616:	ed93 7b00 	vldr	d7, [r3]
 801661a:	eeb0 0b47 	vmov.f64	d0, d7
 801661e:	68b8      	ldr	r0, [r7, #8]
 8016620:	f000 fa6d 	bl	8016afe <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIdEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>
 8016624:	4603      	mov	r3, r0
 8016626:	e082      	b.n	801672e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(content_.asArray);
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	4619      	mov	r1, r3
 801662c:	68b8      	ldr	r0, [r7, #8]
 801662e:	f000 fa7a 	bl	8016b26 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE>
 8016632:	4603      	mov	r3, r0
 8016634:	e07b      	b.n	801672e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(content_.asObject);
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	4619      	mov	r1, r3
 801663a:	68b8      	ldr	r0, [r7, #8]
 801663c:	f000 fab1 	bl	8016ba2 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE>
 8016640:	4603      	mov	r3, r0
 8016642:	e074      	b.n	801672e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(JsonString(content_.asLinkedString, true));
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	6819      	ldr	r1, [r3, #0]
 8016648:	f107 0314 	add.w	r3, r7, #20
 801664c:	2201      	movs	r2, #1
 801664e:	4618      	mov	r0, r3
 8016650:	f7ee fed9 	bl	8005406 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 8016654:	f107 0314 	add.w	r3, r7, #20
 8016658:	cb0e      	ldmia	r3, {r1, r2, r3}
 801665a:	68b8      	ldr	r0, [r7, #8]
 801665c:	f000 faeb 	bl	8016c36 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>
 8016660:	4603      	mov	r3, r0
 8016662:	e064      	b.n	801672e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(JsonString(content_.asOwnedString->data,
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	f103 0108 	add.w	r1, r3, #8
                                      content_.asOwnedString->length));
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	681b      	ldr	r3, [r3, #0]
        return visit.visit(JsonString(content_.asOwnedString->data,
 8016670:	88da      	ldrh	r2, [r3, #6]
 8016672:	f107 0020 	add.w	r0, r7, #32
 8016676:	2300      	movs	r3, #0
 8016678:	f7f0 fec0 	bl	80073fc <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 801667c:	f107 0320 	add.w	r3, r7, #32
 8016680:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016682:	68b8      	ldr	r0, [r7, #8]
 8016684:	f000 fad7 	bl	8016c36 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>
 8016688:	4603      	mov	r3, r0
                                      content_.asOwnedString->length));
 801668a:	e050      	b.n	801672e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(RawString(content_.asOwnedString->data,
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	f103 0108 	add.w	r1, r3, #8
                                     content_.asOwnedString->length));
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	88db      	ldrh	r3, [r3, #6]
        return visit.visit(RawString(content_.asOwnedString->data,
 801669a:	461a      	mov	r2, r3
 801669c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80166a0:	4618      	mov	r0, r3
 80166a2:	f7ff fbd5 	bl	8015e50 <_ZN11ArduinoJson8V730HB2215SerializedValueIPKcEC1ES3_j>
 80166a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80166aa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80166ae:	68b8      	ldr	r0, [r7, #8]
 80166b0:	f000 fae0 	bl	8016c74 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_15SerializedValueIPKcEE>
 80166b4:	4603      	mov	r3, r0
                                     content_.asOwnedString->length));
 80166b6:	e03a      	b.n	801672e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(static_cast<JsonInteger>(content_.asInt32));
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	17da      	asrs	r2, r3, #31
 80166be:	4698      	mov	r8, r3
 80166c0:	4691      	mov	r9, r2
 80166c2:	4642      	mov	r2, r8
 80166c4:	464b      	mov	r3, r9
 80166c6:	68b8      	ldr	r0, [r7, #8]
 80166c8:	f000 faf3 	bl	8016cb2 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>
 80166cc:	4603      	mov	r3, r0
 80166ce:	e02e      	b.n	801672e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(static_cast<JsonUInt>(content_.asUint32));
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	2200      	movs	r2, #0
 80166d6:	461c      	mov	r4, r3
 80166d8:	4615      	mov	r5, r2
 80166da:	4622      	mov	r2, r4
 80166dc:	462b      	mov	r3, r5
 80166de:	68b8      	ldr	r0, [r7, #8]
 80166e0:	f000 fafb 	bl	8016cda <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>
 80166e4:	4603      	mov	r3, r0
 80166e6:	e022      	b.n	801672e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(extension->asInt64);
 80166e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80166ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ee:	68b8      	ldr	r0, [r7, #8]
 80166f0:	f000 fadf 	bl	8016cb2 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>
 80166f4:	4603      	mov	r3, r0
 80166f6:	e01a      	b.n	801672e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(extension->asUint64);
 80166f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80166fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166fe:	68b8      	ldr	r0, [r7, #8]
 8016700:	f000 faeb 	bl	8016cda <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>
 8016704:	4603      	mov	r3, r0
 8016706:	e012      	b.n	801672e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(content_.asBoolean != 0);
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	781b      	ldrb	r3, [r3, #0]
 801670c:	2b00      	cmp	r3, #0
 801670e:	bf14      	ite	ne
 8016710:	2301      	movne	r3, #1
 8016712:	2300      	moveq	r3, #0
 8016714:	b2db      	uxtb	r3, r3
 8016716:	4619      	mov	r1, r3
 8016718:	68b8      	ldr	r0, [r7, #8]
 801671a:	f000 faf2 	bl	8016d02 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEb>
 801671e:	4603      	mov	r3, r0
 8016720:	e005      	b.n	801672e <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE+0x252>
        return visit.visit(nullptr);
 8016722:	2100      	movs	r1, #0
 8016724:	68b8      	ldr	r0, [r7, #8]
 8016726:	f000 f807 	bl	8016738 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>
 801672a:	4603      	mov	r3, r0
 801672c:	bf00      	nop
  }
 801672e:	4618      	mov	r0, r3
 8016730:	3738      	adds	r7, #56	@ 0x38
 8016732:	46bd      	mov	sp, r7
 8016734:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08016738 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn>:
  size_t visit(nullptr_t) {
 8016738:	b580      	push	{r7, lr}
 801673a:	b082      	sub	sp, #8
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
 8016740:	6039      	str	r1, [r7, #0]
    formatter_.writeRaw("null");
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	4905      	ldr	r1, [pc, #20]	@ (801675c <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEDn+0x24>)
 8016746:	4618      	mov	r0, r3
 8016748:	f000 faef 	bl	8016d2a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
    return bytesWritten();
 801674c:	6878      	ldr	r0, [r7, #4]
 801674e:	f000 faff 	bl	8016d50 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016752:	4603      	mov	r3, r0
  }
 8016754:	4618      	mov	r0, r3
 8016756:	3708      	adds	r7, #8
 8016758:	46bd      	mov	sp, r7
 801675a:	bd80      	pop	{r7, pc}
 801675c:	0802ada0 	.word	0x0802ada0

08016760 <_ZN11ArduinoJson8V730HB226detail11parseNumberIfEET_PKc>:
inline T parseNumber(const char* s) {
 8016760:	b580      	push	{r7, lr}
 8016762:	b086      	sub	sp, #24
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8016768:	f107 0308 	add.w	r3, r7, #8
 801676c:	6879      	ldr	r1, [r7, #4]
 801676e:	4618      	mov	r0, r3
 8016770:	f7f0 f950 	bl	8006a14 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8016774:	f107 0308 	add.w	r3, r7, #8
 8016778:	4618      	mov	r0, r3
 801677a:	f000 faf7 	bl	8016d6c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v>
 801677e:	eef0 7a40 	vmov.f32	s15, s0
}
 8016782:	eeb0 0a67 	vmov.f32	s0, s15
 8016786:	3718      	adds	r7, #24
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}

0801678c <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_>:
TOut convertNumber(TIn value) {
 801678c:	b580      	push	{r7, lr}
 801678e:	b082      	sub	sp, #8
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8016794:	6878      	ldr	r0, [r7, #4]
 8016796:	f000 fb2f 	bl	8016df8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 801679a:	4603      	mov	r3, r0
 801679c:	2b00      	cmp	r3, #0
 801679e:	d002      	beq.n	80167a6 <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_+0x1a>
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	b29b      	uxth	r3, r3
 80167a4:	e000      	b.n	80167a8 <_ZN11ArduinoJson8V730HB226detail13convertNumberItmEET_T0_+0x1c>
 80167a6:	2300      	movs	r3, #0
}
 80167a8:	4618      	mov	r0, r3
 80167aa:	3708      	adds	r7, #8
 80167ac:	46bd      	mov	sp, r7
 80167ae:	bd80      	pop	{r7, pc}

080167b0 <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_>:
TOut convertNumber(TIn value) {
 80167b0:	b580      	push	{r7, lr}
 80167b2:	b082      	sub	sp, #8
 80167b4:	af00      	add	r7, sp, #0
 80167b6:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80167b8:	6878      	ldr	r0, [r7, #4]
 80167ba:	f000 fb2f 	bl	8016e1c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 80167be:	4603      	mov	r3, r0
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d002      	beq.n	80167ca <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_+0x1a>
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	b29b      	uxth	r3, r3
 80167c8:	e000      	b.n	80167cc <_ZN11ArduinoJson8V730HB226detail13convertNumberItlEET_T0_+0x1c>
 80167ca:	2300      	movs	r3, #0
}
 80167cc:	4618      	mov	r0, r3
 80167ce:	3708      	adds	r7, #8
 80167d0:	46bd      	mov	sp, r7
 80167d2:	bd80      	pop	{r7, pc}

080167d4 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>:
TOut convertNumber(TIn value) {
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b082      	sub	sp, #8
 80167d8:	af00      	add	r7, sp, #0
 80167da:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80167de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80167e2:	f000 fb32 	bl	8016e4a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80167e6:	4603      	mov	r3, r0
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d001      	beq.n	80167f0 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_+0x1c>
 80167ec:	883b      	ldrh	r3, [r7, #0]
 80167ee:	e000      	b.n	80167f2 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_+0x1e>
 80167f0:	2300      	movs	r3, #0
}
 80167f2:	4618      	mov	r0, r3
 80167f4:	3708      	adds	r7, #8
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd80      	pop	{r7, pc}

080167fa <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>:
TOut convertNumber(TIn value) {
 80167fa:	b580      	push	{r7, lr}
 80167fc:	b082      	sub	sp, #8
 80167fe:	af00      	add	r7, sp, #0
 8016800:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8016804:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016808:	f000 fb38 	bl	8016e7c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 801680c:	4603      	mov	r3, r0
 801680e:	2b00      	cmp	r3, #0
 8016810:	d001      	beq.n	8016816 <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_+0x1c>
 8016812:	883b      	ldrh	r3, [r7, #0]
 8016814:	e000      	b.n	8016818 <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_+0x1e>
 8016816:	2300      	movs	r3, #0
}
 8016818:	4618      	mov	r0, r3
 801681a:	3708      	adds	r7, #8
 801681c:	46bd      	mov	sp, r7
 801681e:	bd80      	pop	{r7, pc}

08016820 <_ZN11ArduinoJson8V730HB226detail11parseNumberItEET_PKc>:
inline T parseNumber(const char* s) {
 8016820:	b580      	push	{r7, lr}
 8016822:	b086      	sub	sp, #24
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8016828:	f107 0308 	add.w	r3, r7, #8
 801682c:	6879      	ldr	r1, [r7, #4]
 801682e:	4618      	mov	r0, r3
 8016830:	f7f0 f8f0 	bl	8006a14 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8016834:	f107 0308 	add.w	r3, r7, #8
 8016838:	4618      	mov	r0, r3
 801683a:	f000 fb3f 	bl	8016ebc <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v>
 801683e:	4603      	mov	r3, r0
}
 8016840:	4618      	mov	r0, r3
 8016842:	3718      	adds	r7, #24
 8016844:	46bd      	mov	sp, r7
 8016846:	bd80      	pop	{r7, pc}

08016848 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>:
TOut convertNumber(TIn value) {
 8016848:	b580      	push	{r7, lr}
 801684a:	b082      	sub	sp, #8
 801684c:	af00      	add	r7, sp, #0
 801684e:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8016852:	ed97 0a01 	vldr	s0, [r7, #4]
 8016856:	f000 fb77 	bl	8016f48 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 801685a:	4603      	mov	r3, r0
 801685c:	2b00      	cmp	r3, #0
 801685e:	d007      	beq.n	8016870 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_+0x28>
 8016860:	edd7 7a01 	vldr	s15, [r7, #4]
 8016864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016868:	ee17 3a90 	vmov	r3, s15
 801686c:	b29b      	uxth	r3, r3
 801686e:	e000      	b.n	8016872 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_+0x2a>
 8016870:	2300      	movs	r3, #0
}
 8016872:	4618      	mov	r0, r3
 8016874:	3708      	adds	r7, #8
 8016876:	46bd      	mov	sp, r7
 8016878:	bd80      	pop	{r7, pc}

0801687a <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>:
TOut convertNumber(TIn value) {
 801687a:	b580      	push	{r7, lr}
 801687c:	b082      	sub	sp, #8
 801687e:	af00      	add	r7, sp, #0
 8016880:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8016884:	ed97 0b00 	vldr	d0, [r7]
 8016888:	f000 fb86 	bl	8016f98 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 801688c:	4603      	mov	r3, r0
 801688e:	2b00      	cmp	r3, #0
 8016890:	d007      	beq.n	80168a2 <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_+0x28>
 8016892:	ed97 7b00 	vldr	d7, [r7]
 8016896:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801689a:	ee17 3a90 	vmov	r3, s15
 801689e:	b29b      	uxth	r3, r3
 80168a0:	e000      	b.n	80168a4 <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_+0x2a>
 80168a2:	2300      	movs	r3, #0
}
 80168a4:	4618      	mov	r0, r3
 80168a6:	3708      	adds	r7, #8
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd80      	pop	{r7, pc}

080168ac <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b082      	sub	sp, #8
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
 80168b4:	6039      	str	r1, [r7, #0]
 80168b6:	6878      	ldr	r0, [r7, #4]
 80168b8:	f000 fb96 	bl	8016fe8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	4618      	mov	r0, r3
 80168c0:	3708      	adds	r7, #8
 80168c2:	46bd      	mov	sp, r7
 80168c4:	bd80      	pop	{r7, pc}

080168c6 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80168c6:	b580      	push	{r7, lr}
 80168c8:	b082      	sub	sp, #8
 80168ca:	af00      	add	r7, sp, #0
 80168cc:	6078      	str	r0, [r7, #4]
 80168ce:	6878      	ldr	r0, [r7, #4]
 80168d0:	f000 fb95 	bl	8016ffe <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	4618      	mov	r0, r3
 80168d8:	3708      	adds	r7, #8
 80168da:	46bd      	mov	sp, r7
 80168dc:	bd80      	pop	{r7, pc}

080168de <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 80168de:	b580      	push	{r7, lr}
 80168e0:	b082      	sub	sp, #8
 80168e2:	af00      	add	r7, sp, #0
 80168e4:	6078      	str	r0, [r7, #4]
 80168e6:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 80168e8:	2101      	movs	r1, #1
 80168ea:	6838      	ldr	r0, [r7, #0]
 80168ec:	f000 fb92 	bl	8017014 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 80168f0:	4603      	mov	r3, r0
 80168f2:	461a      	mov	r2, r3
 80168f4:	6839      	ldr	r1, [r7, #0]
 80168f6:	6878      	ldr	r0, [r7, #4]
 80168f8:	f000 fb9b 	bl	8017032 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 80168fc:	6878      	ldr	r0, [r7, #4]
 80168fe:	3708      	adds	r7, #8
 8016900:	46bd      	mov	sp, r7
 8016902:	bd80      	pop	{r7, pc}

08016904 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8016904:	b580      	push	{r7, lr}
 8016906:	b082      	sub	sp, #8
 8016908:	af00      	add	r7, sp, #0
 801690a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	685b      	ldr	r3, [r3, #4]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d007      	beq.n	8016924 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	6818      	ldr	r0, [r3, #0]
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	685b      	ldr	r3, [r3, #4]
 801691c:	2201      	movs	r2, #1
 801691e:	4619      	mov	r1, r3
 8016920:	f000 fb9b 	bl	801705a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	4618      	mov	r0, r3
 8016928:	3708      	adds	r7, #8
 801692a:	46bd      	mov	sp, r7
 801692c:	bd80      	pop	{r7, pc}

0801692e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 801692e:	b580      	push	{r7, lr}
 8016930:	b082      	sub	sp, #8
 8016932:	af00      	add	r7, sp, #0
 8016934:	6078      	str	r0, [r7, #4]
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	685b      	ldr	r3, [r3, #4]
 801693a:	4618      	mov	r0, r3
 801693c:	f000 fb9c 	bl	8017078 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8016940:	4603      	mov	r3, r0
 8016942:	4618      	mov	r0, r3
 8016944:	3708      	adds	r7, #8
 8016946:	46bd      	mov	sp, r7
 8016948:	bd80      	pop	{r7, pc}
	...

0801694c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 801694c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016950:	b088      	sub	sp, #32
 8016952:	af04      	add	r7, sp, #16
 8016954:	60f8      	str	r0, [r7, #12]
 8016956:	7239      	strb	r1, [r7, #8]
 8016958:	607a      	str	r2, [r7, #4]
 801695a:	603b      	str	r3, [r7, #0]
	: _M_impl(__a)
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	4618      	mov	r0, r3
 8016960:	f7f7 fd16 	bl	800e390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8016964:	4a1a      	ldr	r2, [pc, #104]	@ (80169d0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSD_RbRP6RemoraEEES1_DpOT_+0x84>)
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	601a      	str	r2, [r3, #0]
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	330c      	adds	r3, #12
 801696e:	4621      	mov	r1, r4
 8016970:	4618      	mov	r0, r3
 8016972:	f000 fb8c 	bl	801708e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8016976:	68f8      	ldr	r0, [r7, #12]
 8016978:	f000 f83b 	bl	80169f2 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801697c:	4680      	mov	r8, r0
 801697e:	6878      	ldr	r0, [r7, #4]
 8016980:	f7ff f92e 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8016984:	4681      	mov	r9, r0
 8016986:	6838      	ldr	r0, [r7, #0]
 8016988:	f7ff f935 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801698c:	4682      	mov	sl, r0
 801698e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016990:	f7ff f93c 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8016994:	4604      	mov	r4, r0
 8016996:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016998:	f7ff f938 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801699c:	4605      	mov	r5, r0
 801699e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80169a0:	f7fa fe25 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80169a4:	4606      	mov	r6, r0
 80169a6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80169a8:	f7ff f93b 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80169ac:	4603      	mov	r3, r0
 80169ae:	f107 0008 	add.w	r0, r7, #8
 80169b2:	9303      	str	r3, [sp, #12]
 80169b4:	9602      	str	r6, [sp, #8]
 80169b6:	9501      	str	r5, [sp, #4]
 80169b8:	9400      	str	r4, [sp, #0]
 80169ba:	4653      	mov	r3, sl
 80169bc:	464a      	mov	r2, r9
 80169be:	4641      	mov	r1, r8
 80169c0:	f000 fb74 	bl	80170ac <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEEvRS0_PT_DpOT0_>
	}
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	4618      	mov	r0, r3
 80169c8:	3710      	adds	r7, #16
 80169ca:	46bd      	mov	sp, r7
 80169cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169d0:	0802b654 	.word	0x0802b654

080169d4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 80169d4:	b480      	push	{r7}
 80169d6:	b083      	sub	sp, #12
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
 80169dc:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	2200      	movs	r2, #0
 80169e2:	605a      	str	r2, [r3, #4]
	return *this;
 80169e4:	687b      	ldr	r3, [r7, #4]
      }
 80169e6:	4618      	mov	r0, r3
 80169e8:	370c      	adds	r7, #12
 80169ea:	46bd      	mov	sp, r7
 80169ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f0:	4770      	bx	lr

080169f2 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 80169f2:	b580      	push	{r7, lr}
 80169f4:	b082      	sub	sp, #8
 80169f6:	af00      	add	r7, sp, #0
 80169f8:	6078      	str	r0, [r7, #4]
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	330c      	adds	r3, #12
 80169fe:	4618      	mov	r0, r3
 8016a00:	f000 fb82 	bl	8017108 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E6_M_ptrEv>
 8016a04:	4603      	mov	r3, r0
 8016a06:	4618      	mov	r0, r3
 8016a08:	3708      	adds	r7, #8
 8016a0a:	46bd      	mov	sp, r7
 8016a0c:	bd80      	pop	{r7, pc}

08016a0e <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>:
      __enable_shared_from_this_base(const __shared_count<>&,
 8016a0e:	b480      	push	{r7}
 8016a10:	b083      	sub	sp, #12
 8016a12:	af00      	add	r7, sp, #0
 8016a14:	6078      	str	r0, [r7, #4]
 8016a16:	6039      	str	r1, [r7, #0]
      { return __p; }
 8016a18:	683b      	ldr	r3, [r7, #0]
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	370c      	adds	r7, #12
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a24:	4770      	bx	lr

08016a26 <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2208EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>:
	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 8016a26:	b580      	push	{r7, lr}
 8016a28:	b084      	sub	sp, #16
 8016a2a:	af00      	add	r7, sp, #0
 8016a2c:	60f8      	str	r0, [r7, #12]
 8016a2e:	60b9      	str	r1, [r7, #8]
 8016a30:	607a      	str	r2, [r7, #4]
	{ _M_weak_this._M_assign(__p, __n); }
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	687a      	ldr	r2, [r7, #4]
 8016a36:	68b9      	ldr	r1, [r7, #8]
 8016a38:	4618      	mov	r0, r3
 8016a3a:	f000 fb71 	bl	8017120 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>
 8016a3e:	bf00      	nop
 8016a40:	3710      	adds	r7, #16
 8016a42:	46bd      	mov	sp, r7
 8016a44:	bd80      	pop	{r7, pc}

08016a46 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8016a46:	b580      	push	{r7, lr}
 8016a48:	b082      	sub	sp, #8
 8016a4a:	af00      	add	r7, sp, #0
 8016a4c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8016a4e:	6878      	ldr	r0, [r7, #4]
 8016a50:	f000 fb84 	bl	801715c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEEC1Ev>
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	4618      	mov	r0, r3
 8016a58:	f000 fb8c 	bl	8017174 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EEC1Ev>
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	4618      	mov	r0, r3
 8016a60:	3708      	adds	r7, #8
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}

08016a66 <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8016a66:	b580      	push	{r7, lr}
 8016a68:	b082      	sub	sp, #8
 8016a6a:	af00      	add	r7, sp, #0
 8016a6c:	6078      	str	r0, [r7, #4]
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	4618      	mov	r0, r3
 8016a72:	f000 fb8d 	bl	8017190 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERS2_>
 8016a76:	4603      	mov	r3, r0
 8016a78:	4618      	mov	r0, r3
 8016a7a:	3708      	adds	r7, #8
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	bd80      	pop	{r7, pc}

08016a80 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2208StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b082      	sub	sp, #8
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8016a88:	6878      	ldr	r0, [r7, #4]
 8016a8a:	f000 fb8c 	bl	80171a6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEE7_M_headERS3_>
 8016a8e:	4603      	mov	r3, r0
 8016a90:	4618      	mov	r0, r3
 8016a92:	3708      	adds	r7, #8
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd80      	pop	{r7, pc}

08016a98 <_ZSt12__get_helperILj0EP14TMC2208StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b082      	sub	sp, #8
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8016aa0:	6878      	ldr	r0, [r7, #4]
 8016aa2:	f000 fb8c 	bl	80171be <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERKS4_>
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	3708      	adds	r7, #8
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}

08016ab0 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class CountingDecorator {
 public:
  explicit CountingDecorator(TWriter& writer) : writer_(writer), count_(0) {}
 8016ab0:	b480      	push	{r7}
 8016ab2:	b083      	sub	sp, #12
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
 8016ab8:	6039      	str	r1, [r7, #0]
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	683a      	ldr	r2, [r7, #0]
 8016abe:	6812      	ldr	r2, [r2, #0]
 8016ac0:	601a      	str	r2, [r3, #0]
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	2200      	movs	r2, #0
 8016ac6:	605a      	str	r2, [r3, #4]
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	4618      	mov	r0, r3
 8016acc:	370c      	adds	r7, #12
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad4:	4770      	bx	lr

08016ad6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIfEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>:
  enable_if_t<is_floating_point<T>::value, size_t> visit(T value) {
 8016ad6:	b580      	push	{r7, lr}
 8016ad8:	b082      	sub	sp, #8
 8016ada:	af00      	add	r7, sp, #0
 8016adc:	6078      	str	r0, [r7, #4]
 8016ade:	ed87 0a00 	vstr	s0, [r7]
    formatter_.writeFloat(value);
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	ed97 0a00 	vldr	s0, [r7]
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f000 fbac 	bl	8017246 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIfEEvT_>
    return bytesWritten();
 8016aee:	6878      	ldr	r0, [r7, #4]
 8016af0:	f000 f92e 	bl	8016d50 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016af4:	4603      	mov	r3, r0
  }
 8016af6:	4618      	mov	r0, r3
 8016af8:	3708      	adds	r7, #8
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}

08016afe <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitIdEENS1_9enable_ifIXsrNS1_17is_floating_pointIT_EE5valueEjE4typeESF_>:
  enable_if_t<is_floating_point<T>::value, size_t> visit(T value) {
 8016afe:	b580      	push	{r7, lr}
 8016b00:	b084      	sub	sp, #16
 8016b02:	af00      	add	r7, sp, #0
 8016b04:	60f8      	str	r0, [r7, #12]
 8016b06:	ed87 0b00 	vstr	d0, [r7]
    formatter_.writeFloat(value);
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	ed97 0b00 	vldr	d0, [r7]
 8016b10:	4618      	mov	r0, r3
 8016b12:	f000 fbac 	bl	801726e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>
    return bytesWritten();
 8016b16:	68f8      	ldr	r0, [r7, #12]
 8016b18:	f000 f91a 	bl	8016d50 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016b1c:	4603      	mov	r3, r0
  }
 8016b1e:	4618      	mov	r0, r3
 8016b20:	3710      	adds	r7, #16
 8016b22:	46bd      	mov	sp, r7
 8016b24:	bd80      	pop	{r7, pc}

08016b26 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE>:
  size_t visit(const ArrayData& array) {
 8016b26:	b580      	push	{r7, lr}
 8016b28:	b084      	sub	sp, #16
 8016b2a:	af00      	add	r7, sp, #0
 8016b2c:	6078      	str	r0, [r7, #4]
 8016b2e:	6039      	str	r1, [r7, #0]
    write('[');
 8016b30:	215b      	movs	r1, #91	@ 0x5b
 8016b32:	6878      	ldr	r0, [r7, #4]
 8016b34:	f000 fbab 	bl	801728e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    auto slotId = array.head();
 8016b38:	683b      	ldr	r3, [r7, #0]
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f7fe f937 	bl	8014dae <_ZNK11ArduinoJson8V730HB226detail14CollectionData4headEv>
 8016b40:	4603      	mov	r3, r0
 8016b42:	81fb      	strh	r3, [r7, #14]
    while (slotId != NULL_SLOT) {
 8016b44:	e01c      	b.n	8016b80 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x5a>
      auto slot = resources_->getVariant(slotId);
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	689b      	ldr	r3, [r3, #8]
 8016b4a:	89fa      	ldrh	r2, [r7, #14]
 8016b4c:	4611      	mov	r1, r2
 8016b4e:	4618      	mov	r0, r3
 8016b50:	f7ef facd 	bl	80060ee <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8016b54:	60b8      	str	r0, [r7, #8]
      slot->accept(*this, resources_);
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	689b      	ldr	r3, [r3, #8]
 8016b5a:	461a      	mov	r2, r3
 8016b5c:	6879      	ldr	r1, [r7, #4]
 8016b5e:	68b8      	ldr	r0, [r7, #8]
 8016b60:	f7ff fcbc 	bl	80164dc <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
      slotId = slot->next();
 8016b64:	68b8      	ldr	r0, [r7, #8]
 8016b66:	f7ee fd2b 	bl	80055c0 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8016b6a:	4603      	mov	r3, r0
 8016b6c:	81fb      	strh	r3, [r7, #14]
      if (slotId != NULL_SLOT)
 8016b6e:	89fb      	ldrh	r3, [r7, #14]
 8016b70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016b74:	4293      	cmp	r3, r2
 8016b76:	d003      	beq.n	8016b80 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x5a>
        write(',');
 8016b78:	212c      	movs	r1, #44	@ 0x2c
 8016b7a:	6878      	ldr	r0, [r7, #4]
 8016b7c:	f000 fb87 	bl	801728e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    while (slotId != NULL_SLOT) {
 8016b80:	89fb      	ldrh	r3, [r7, #14]
 8016b82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016b86:	4293      	cmp	r3, r2
 8016b88:	d1dd      	bne.n	8016b46 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_9ArrayDataE+0x20>
    write(']');
 8016b8a:	215d      	movs	r1, #93	@ 0x5d
 8016b8c:	6878      	ldr	r0, [r7, #4]
 8016b8e:	f000 fb7e 	bl	801728e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 8016b92:	6878      	ldr	r0, [r7, #4]
 8016b94:	f000 f8dc 	bl	8016d50 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016b98:	4603      	mov	r3, r0
  }
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	3710      	adds	r7, #16
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}

08016ba2 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE>:
  size_t visit(const ObjectData& object) {
 8016ba2:	b580      	push	{r7, lr}
 8016ba4:	b084      	sub	sp, #16
 8016ba6:	af00      	add	r7, sp, #0
 8016ba8:	6078      	str	r0, [r7, #4]
 8016baa:	6039      	str	r1, [r7, #0]
    write('{');
 8016bac:	217b      	movs	r1, #123	@ 0x7b
 8016bae:	6878      	ldr	r0, [r7, #4]
 8016bb0:	f000 fb6d 	bl	801728e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    auto slotId = object.head();
 8016bb4:	683b      	ldr	r3, [r7, #0]
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	f7fe f8f9 	bl	8014dae <_ZNK11ArduinoJson8V730HB226detail14CollectionData4headEv>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	81fb      	strh	r3, [r7, #14]
    bool isKey = true;
 8016bc0:	2301      	movs	r3, #1
 8016bc2:	737b      	strb	r3, [r7, #13]
    while (slotId != NULL_SLOT) {
 8016bc4:	e026      	b.n	8016c14 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x72>
      auto slot = resources_->getVariant(slotId);
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	689b      	ldr	r3, [r3, #8]
 8016bca:	89fa      	ldrh	r2, [r7, #14]
 8016bcc:	4611      	mov	r1, r2
 8016bce:	4618      	mov	r0, r3
 8016bd0:	f7ef fa8d 	bl	80060ee <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8016bd4:	60b8      	str	r0, [r7, #8]
      slot->accept(*this, resources_);
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	689b      	ldr	r3, [r3, #8]
 8016bda:	461a      	mov	r2, r3
 8016bdc:	6879      	ldr	r1, [r7, #4]
 8016bde:	68b8      	ldr	r0, [r7, #8]
 8016be0:	f7ff fc7c 	bl	80164dc <_ZNK11ArduinoJson8V730HB226detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_PKNS1_15ResourceManagerE>
      slotId = slot->next();
 8016be4:	68b8      	ldr	r0, [r7, #8]
 8016be6:	f7ee fceb 	bl	80055c0 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8016bea:	4603      	mov	r3, r0
 8016bec:	81fb      	strh	r3, [r7, #14]
      if (slotId != NULL_SLOT)
 8016bee:	89fb      	ldrh	r3, [r7, #14]
 8016bf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016bf4:	4293      	cmp	r3, r2
 8016bf6:	d009      	beq.n	8016c0c <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x6a>
        write(isKey ? ':' : ',');
 8016bf8:	7b7b      	ldrb	r3, [r7, #13]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d001      	beq.n	8016c02 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x60>
 8016bfe:	233a      	movs	r3, #58	@ 0x3a
 8016c00:	e000      	b.n	8016c04 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x62>
 8016c02:	232c      	movs	r3, #44	@ 0x2c
 8016c04:	4619      	mov	r1, r3
 8016c06:	6878      	ldr	r0, [r7, #4]
 8016c08:	f000 fb41 	bl	801728e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
      isKey = !isKey;
 8016c0c:	7b7b      	ldrb	r3, [r7, #13]
 8016c0e:	f083 0301 	eor.w	r3, r3, #1
 8016c12:	737b      	strb	r3, [r7, #13]
    while (slotId != NULL_SLOT) {
 8016c14:	89fb      	ldrh	r3, [r7, #14]
 8016c16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016c1a:	4293      	cmp	r3, r2
 8016c1c:	d1d3      	bne.n	8016bc6 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitERKNS1_10ObjectDataE+0x24>
    write('}');
 8016c1e:	217d      	movs	r1, #125	@ 0x7d
 8016c20:	6878      	ldr	r0, [r7, #4]
 8016c22:	f000 fb34 	bl	801728e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 8016c26:	6878      	ldr	r0, [r7, #4]
 8016c28:	f000 f892 	bl	8016d50 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016c2c:	4603      	mov	r3, r0
  }
 8016c2e:	4618      	mov	r0, r3
 8016c30:	3710      	adds	r7, #16
 8016c32:	46bd      	mov	sp, r7
 8016c34:	bd80      	pop	{r7, pc}

08016c36 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_10JsonStringE>:
  size_t visit(JsonString value) {
 8016c36:	b5b0      	push	{r4, r5, r7, lr}
 8016c38:	b084      	sub	sp, #16
 8016c3a:	af00      	add	r7, sp, #0
 8016c3c:	60f8      	str	r0, [r7, #12]
 8016c3e:	4638      	mov	r0, r7
 8016c40:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    formatter_.writeString(value.c_str(), value.size());
 8016c44:	68fc      	ldr	r4, [r7, #12]
 8016c46:	463b      	mov	r3, r7
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f7ee fbf7 	bl	800543c <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8016c4e:	4605      	mov	r5, r0
 8016c50:	463b      	mov	r3, r7
 8016c52:	4618      	mov	r0, r3
 8016c54:	f7fe f88c 	bl	8014d70 <_ZNK11ArduinoJson8V730HB2210JsonString4sizeEv>
 8016c58:	4603      	mov	r3, r0
 8016c5a:	461a      	mov	r2, r3
 8016c5c:	4629      	mov	r1, r5
 8016c5e:	4620      	mov	r0, r4
 8016c60:	f000 fb25 	bl	80172ae <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>
    return bytesWritten();
 8016c64:	68f8      	ldr	r0, [r7, #12]
 8016c66:	f000 f873 	bl	8016d50 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016c6a:	4603      	mov	r3, r0
  }
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	3710      	adds	r7, #16
 8016c70:	46bd      	mov	sp, r7
 8016c72:	bdb0      	pop	{r4, r5, r7, pc}

08016c74 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitENS0_15SerializedValueIPKcEE>:
  size_t visit(RawString value) {
 8016c74:	b5b0      	push	{r4, r5, r7, lr}
 8016c76:	b084      	sub	sp, #16
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	60f8      	str	r0, [r7, #12]
 8016c7c:	1d3b      	adds	r3, r7, #4
 8016c7e:	e883 0006 	stmia.w	r3, {r1, r2}
    formatter_.writeRaw(value.data(), value.size());
 8016c82:	68fc      	ldr	r4, [r7, #12]
 8016c84:	1d3b      	adds	r3, r7, #4
 8016c86:	4618      	mov	r0, r3
 8016c88:	f7fe fcb8 	bl	80155fc <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4dataEv>
 8016c8c:	4605      	mov	r5, r0
 8016c8e:	1d3b      	adds	r3, r7, #4
 8016c90:	4618      	mov	r0, r3
 8016c92:	f7fe fca7 	bl	80155e4 <_ZNK11ArduinoJson8V730HB2215SerializedValueIPKcE4sizeEv>
 8016c96:	4603      	mov	r3, r0
 8016c98:	461a      	mov	r2, r3
 8016c9a:	4629      	mov	r1, r5
 8016c9c:	4620      	mov	r0, r4
 8016c9e:	f000 fb2b 	bl	80172f8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>
    return bytesWritten();
 8016ca2:	68f8      	ldr	r0, [r7, #12]
 8016ca4:	f000 f854 	bl	8016d50 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016ca8:	4603      	mov	r3, r0
  }
 8016caa:	4618      	mov	r0, r3
 8016cac:	3710      	adds	r7, #16
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bdb0      	pop	{r4, r5, r7, pc}

08016cb2 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEx>:
  size_t visit(JsonInteger value) {
 8016cb2:	b580      	push	{r7, lr}
 8016cb4:	b084      	sub	sp, #16
 8016cb6:	af00      	add	r7, sp, #0
 8016cb8:	60f8      	str	r0, [r7, #12]
 8016cba:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 8016cbe:	68f9      	ldr	r1, [r7, #12]
 8016cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016cc4:	4608      	mov	r0, r1
 8016cc6:	f000 fb27 	bl	8017318 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 8016cca:	68f8      	ldr	r0, [r7, #12]
 8016ccc:	f000 f840 	bl	8016d50 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016cd0:	4603      	mov	r3, r0
  }
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	3710      	adds	r7, #16
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bd80      	pop	{r7, pc}

08016cda <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEy>:
  size_t visit(JsonUInt value) {
 8016cda:	b580      	push	{r7, lr}
 8016cdc:	b084      	sub	sp, #16
 8016cde:	af00      	add	r7, sp, #0
 8016ce0:	60f8      	str	r0, [r7, #12]
 8016ce2:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 8016ce6:	68f9      	ldr	r1, [r7, #12]
 8016ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016cec:	4608      	mov	r0, r1
 8016cee:	f000 fb37 	bl	8017360 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 8016cf2:	68f8      	ldr	r0, [r7, #12]
 8016cf4:	f000 f82c 	bl	8016d50 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016cf8:	4603      	mov	r3, r0
  }
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	3710      	adds	r7, #16
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	bd80      	pop	{r7, pc}

08016d02 <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5visitEb>:
  size_t visit(bool value) {
 8016d02:	b580      	push	{r7, lr}
 8016d04:	b082      	sub	sp, #8
 8016d06:	af00      	add	r7, sp, #0
 8016d08:	6078      	str	r0, [r7, #4]
 8016d0a:	460b      	mov	r3, r1
 8016d0c:	70fb      	strb	r3, [r7, #3]
    formatter_.writeBoolean(value);
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	78fa      	ldrb	r2, [r7, #3]
 8016d12:	4611      	mov	r1, r2
 8016d14:	4618      	mov	r0, r3
 8016d16:	f000 fb59 	bl	80173cc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>
    return bytesWritten();
 8016d1a:	6878      	ldr	r0, [r7, #4]
 8016d1c:	f000 f818 	bl	8016d50 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016d20:	4603      	mov	r3, r0
  }
 8016d22:	4618      	mov	r0, r3
 8016d24:	3708      	adds	r7, #8
 8016d26:	46bd      	mov	sp, r7
 8016d28:	bd80      	pop	{r7, pc}

08016d2a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char* s) {
 8016d2a:	b590      	push	{r4, r7, lr}
 8016d2c:	b083      	sub	sp, #12
 8016d2e:	af00      	add	r7, sp, #0
 8016d30:	6078      	str	r0, [r7, #4]
 8016d32:	6039      	str	r1, [r7, #0]
    writer_.write(reinterpret_cast<const uint8_t*>(s), strlen(s));
 8016d34:	687c      	ldr	r4, [r7, #4]
 8016d36:	6838      	ldr	r0, [r7, #0]
 8016d38:	f7e9 fb32 	bl	80003a0 <strlen>
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	461a      	mov	r2, r3
 8016d40:	6839      	ldr	r1, [r7, #0]
 8016d42:	4620      	mov	r0, r4
 8016d44:	f000 fb5c 	bl	8017400 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8016d48:	bf00      	nop
 8016d4a:	370c      	adds	r7, #12
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd90      	pop	{r4, r7, pc}

08016d50 <_ZNK11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b082      	sub	sp, #8
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
    return formatter_.bytesWritten();
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	f000 fb66 	bl	801742c <_ZNK11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 8016d60:	4603      	mov	r3, r0
  }
 8016d62:	4618      	mov	r0, r3
 8016d64:	3708      	adds	r7, #8
 8016d66:	46bd      	mov	sp, r7
 8016d68:	bd80      	pop	{r7, pc}
	...

08016d6c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v>:
  T convertTo() const {
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	b082      	sub	sp, #8
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	781b      	ldrb	r3, [r3, #0]
 8016d78:	3b01      	subs	r3, #1
 8016d7a:	2b03      	cmp	r3, #3
 8016d7c:	d832      	bhi.n	8016de4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x78>
 8016d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8016d84 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x18>)
 8016d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d84:	08016d95 	.word	0x08016d95
 8016d88:	08016da9 	.word	0x08016da9
 8016d8c:	08016dbd 	.word	0x08016dbd
 8016d90:	08016dd1 	.word	0x08016dd1
        return convertNumber<T>(value_.asFloat);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	edd3 7a02 	vldr	s15, [r3, #8]
 8016d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8016d9e:	f000 fb52 	bl	8017446 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_>
 8016da2:	eef0 7a40 	vmov.f32	s15, s0
 8016da6:	e01f      	b.n	8016de8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asSignedInteger);
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016dae:	4610      	mov	r0, r2
 8016db0:	4619      	mov	r1, r3
 8016db2:	f000 fb5f 	bl	8017474 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_>
 8016db6:	eef0 7a40 	vmov.f32	s15, s0
 8016dba:	e015      	b.n	8016de8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asUnsignedInteger);
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016dc2:	4610      	mov	r0, r2
 8016dc4:	4619      	mov	r1, r3
 8016dc6:	f000 fb70 	bl	80174aa <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_>
 8016dca:	eef0 7a40 	vmov.f32	s15, s0
 8016dce:	e00b      	b.n	8016de8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return convertNumber<T>(value_.asDouble);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	ed93 7b02 	vldr	d7, [r3, #8]
 8016dd6:	eeb0 0b47 	vmov.f64	d0, d7
 8016dda:	f000 fb81 	bl	80174e0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_>
 8016dde:	eef0 7a40 	vmov.f32	s15, s0
 8016de2:	e001      	b.n	8016de8 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x7c>
        return T();
 8016de4:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8016df4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIfEET_v+0x88>
  }
 8016de8:	eeb0 0a67 	vmov.f32	s0, s15
 8016dec:	3708      	adds	r7, #8
 8016dee:	46bd      	mov	sp, r7
 8016df0:	bd80      	pop	{r7, pc}
 8016df2:	bf00      	nop
 8016df4:	00000000 	.word	0x00000000

08016df8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b082      	sub	sp, #8
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8016e00:	f7fd ffad 	bl	8014d5e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016e04:	4603      	mov	r3, r0
 8016e06:	461a      	mov	r2, r3
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	4293      	cmp	r3, r2
 8016e0c:	bf94      	ite	ls
 8016e0e:	2301      	movls	r3, #1
 8016e10:	2300      	movhi	r3, #0
 8016e12:	b2db      	uxtb	r3, r3
}
 8016e14:	4618      	mov	r0, r3
 8016e16:	3708      	adds	r7, #8
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	bd80      	pop	{r7, pc}

08016e1c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b082      	sub	sp, #8
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	da01      	bge.n	8016e2e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x12>
    return false;
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	e009      	b.n	8016e42 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x26>
  return value <= TIn(numeric_limits<TOut>::highest());
 8016e2e:	f7fd ff96 	bl	8014d5e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016e32:	4603      	mov	r3, r0
 8016e34:	461a      	mov	r2, r3
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	4293      	cmp	r3, r2
 8016e3a:	bfd4      	ite	le
 8016e3c:	2301      	movle	r3, #1
 8016e3e:	2300      	movgt	r3, #0
 8016e40:	b2db      	uxtb	r3, r3
}
 8016e42:	4618      	mov	r0, r3
 8016e44:	3708      	adds	r7, #8
 8016e46:	46bd      	mov	sp, r7
 8016e48:	bd80      	pop	{r7, pc}

08016e4a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016e4a:	b5b0      	push	{r4, r5, r7, lr}
 8016e4c:	b082      	sub	sp, #8
 8016e4e:	af00      	add	r7, sp, #0
 8016e50:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8016e54:	f7fd ff83 	bl	8014d5e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016e58:	4603      	mov	r3, r0
 8016e5a:	b29b      	uxth	r3, r3
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	461c      	mov	r4, r3
 8016e60:	4615      	mov	r5, r2
 8016e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016e66:	4294      	cmp	r4, r2
 8016e68:	eb75 0303 	sbcs.w	r3, r5, r3
 8016e6c:	bf2c      	ite	cs
 8016e6e:	2301      	movcs	r3, #1
 8016e70:	2300      	movcc	r3, #0
 8016e72:	b2db      	uxtb	r3, r3
}
 8016e74:	4618      	mov	r0, r3
 8016e76:	3708      	adds	r7, #8
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bdb0      	pop	{r4, r5, r7, pc}

08016e7c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016e7c:	b5b0      	push	{r4, r5, r7, lr}
 8016e7e:	b082      	sub	sp, #8
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8016e86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	da01      	bge.n	8016e92 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8016e8e:	2300      	movs	r3, #0
 8016e90:	e00f      	b.n	8016eb2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x36>
  return value <= TIn(numeric_limits<TOut>::highest());
 8016e92:	f7fd ff64 	bl	8014d5e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016e96:	4603      	mov	r3, r0
 8016e98:	b29b      	uxth	r3, r3
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	461c      	mov	r4, r3
 8016e9e:	4615      	mov	r5, r2
 8016ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016ea4:	4294      	cmp	r4, r2
 8016ea6:	eb75 0303 	sbcs.w	r3, r5, r3
 8016eaa:	bfac      	ite	ge
 8016eac:	2301      	movge	r3, #1
 8016eae:	2300      	movlt	r3, #0
 8016eb0:	b2db      	uxtb	r3, r3
}
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	3708      	adds	r7, #8
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016ebc <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v>:
  T convertTo() const {
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b082      	sub	sp, #8
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	781b      	ldrb	r3, [r3, #0]
 8016ec8:	3b01      	subs	r3, #1
 8016eca:	2b03      	cmp	r3, #3
 8016ecc:	d82e      	bhi.n	8016f2c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x70>
 8016ece:	a201      	add	r2, pc, #4	@ (adr r2, 8016ed4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x18>)
 8016ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ed4:	08016ee5 	.word	0x08016ee5
 8016ed8:	08016ef7 	.word	0x08016ef7
 8016edc:	08016f09 	.word	0x08016f09
 8016ee0:	08016f1b 	.word	0x08016f1b
        return convertNumber<T>(value_.asFloat);
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	edd3 7a02 	vldr	s15, [r3, #8]
 8016eea:	eeb0 0a67 	vmov.f32	s0, s15
 8016eee:	f7ff fcab 	bl	8016848 <_ZN11ArduinoJson8V730HB226detail13convertNumberItfEET_T0_>
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	e01b      	b.n	8016f2e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016efc:	4610      	mov	r0, r2
 8016efe:	4619      	mov	r1, r3
 8016f00:	f7ff fc7b 	bl	80167fa <_ZN11ArduinoJson8V730HB226detail13convertNumberItxEET_T0_>
 8016f04:	4603      	mov	r3, r0
 8016f06:	e012      	b.n	8016f2e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016f0e:	4610      	mov	r0, r2
 8016f10:	4619      	mov	r1, r3
 8016f12:	f7ff fc5f 	bl	80167d4 <_ZN11ArduinoJson8V730HB226detail13convertNumberItyEET_T0_>
 8016f16:	4603      	mov	r3, r0
 8016f18:	e009      	b.n	8016f2e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	ed93 7b02 	vldr	d7, [r3, #8]
 8016f20:	eeb0 0b47 	vmov.f64	d0, d7
 8016f24:	f7ff fca9 	bl	801687a <_ZN11ArduinoJson8V730HB226detail13convertNumberItdEET_T0_>
 8016f28:	4603      	mov	r3, r0
 8016f2a:	e000      	b.n	8016f2e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToItEET_v+0x72>
        return T();
 8016f2c:	2300      	movs	r3, #0
  }
 8016f2e:	4618      	mov	r0, r3
 8016f30:	3708      	adds	r7, #8
 8016f32:	46bd      	mov	sp, r7
 8016f34:	bd80      	pop	{r7, pc}
 8016f36:	bf00      	nop

08016f38 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>:
  static constexpr T lowest() {
 8016f38:	b480      	push	{r7}
 8016f3a:	af00      	add	r7, sp, #0
    return 0;
 8016f3c:	2300      	movs	r3, #0
  }
 8016f3e:	4618      	mov	r0, r3
 8016f40:	46bd      	mov	sp, r7
 8016f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f46:	4770      	bx	lr

08016f48 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016f48:	b580      	push	{r7, lr}
 8016f4a:	b082      	sub	sp, #8
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8016f52:	f7ff fff1 	bl	8016f38 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>
 8016f56:	4603      	mov	r3, r0
 8016f58:	ee07 3a90 	vmov	s15, r3
 8016f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f60:	ed97 7a01 	vldr	s14, [r7, #4]
 8016f64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f6c:	db0f      	blt.n	8016f8e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8016f6e:	f7fd fef6 	bl	8014d5e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016f72:	4603      	mov	r3, r0
 8016f74:	ee07 3a90 	vmov	s15, r3
 8016f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8016f7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8016f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f88:	d801      	bhi.n	8016f8e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8016f8a:	2301      	movs	r3, #1
 8016f8c:	e000      	b.n	8016f90 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8016f8e:	2300      	movs	r3, #0
}
 8016f90:	4618      	mov	r0, r3
 8016f92:	3708      	adds	r7, #8
 8016f94:	46bd      	mov	sp, r7
 8016f96:	bd80      	pop	{r7, pc}

08016f98 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b082      	sub	sp, #8
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8016fa2:	f7ff ffc9 	bl	8016f38 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE6lowestEv>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	ee07 3a90 	vmov	s15, r3
 8016fac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016fb0:	ed97 6b00 	vldr	d6, [r7]
 8016fb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fbc:	db0f      	blt.n	8016fde <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8016fbe:	f7fd fece 	bl	8014d5e <_ZN11ArduinoJson8V730HB226detail14numeric_limitsItvE7highestEv>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	ee07 3a90 	vmov	s15, r3
 8016fc8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8016fcc:	ed97 6b00 	vldr	d6, [r7]
 8016fd0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fd8:	d801      	bhi.n	8016fde <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8016fda:	2301      	movs	r3, #1
 8016fdc:	e000      	b.n	8016fe0 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberItdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8016fde:	2300      	movs	r3, #0
}
 8016fe0:	4618      	mov	r0, r3
 8016fe2:	3708      	adds	r7, #8
 8016fe4:	46bd      	mov	sp, r7
 8016fe6:	bd80      	pop	{r7, pc}

08016fe8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8016fe8:	b480      	push	{r7}
 8016fea:	b083      	sub	sp, #12
 8016fec:	af00      	add	r7, sp, #0
 8016fee:	6078      	str	r0, [r7, #4]
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	370c      	adds	r7, #12
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffc:	4770      	bx	lr

08016ffe <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8016ffe:	b480      	push	{r7}
 8017000:	b083      	sub	sp, #12
 8017002:	af00      	add	r7, sp, #0
 8017004:	6078      	str	r0, [r7, #4]
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	4618      	mov	r0, r3
 801700a:	370c      	adds	r7, #12
 801700c:	46bd      	mov	sp, r7
 801700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017012:	4770      	bx	lr

08017014 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8017014:	b580      	push	{r7, lr}
 8017016:	b082      	sub	sp, #8
 8017018:	af00      	add	r7, sp, #0
 801701a:	6078      	str	r0, [r7, #4]
 801701c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801701e:	2200      	movs	r2, #0
 8017020:	6839      	ldr	r1, [r7, #0]
 8017022:	6878      	ldr	r0, [r7, #4]
 8017024:	f000 fa76 	bl	8017514 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8017028:	4603      	mov	r3, r0
 801702a:	4618      	mov	r0, r3
 801702c:	3708      	adds	r7, #8
 801702e:	46bd      	mov	sp, r7
 8017030:	bd80      	pop	{r7, pc}

08017032 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8017032:	b580      	push	{r7, lr}
 8017034:	b084      	sub	sp, #16
 8017036:	af00      	add	r7, sp, #0
 8017038:	60f8      	str	r0, [r7, #12]
 801703a:	60b9      	str	r1, [r7, #8]
 801703c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801703e:	68b8      	ldr	r0, [r7, #8]
 8017040:	f000 fa96 	bl	8017570 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 8017044:	4602      	mov	r2, r0
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	601a      	str	r2, [r3, #0]
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	687a      	ldr	r2, [r7, #4]
 801704e:	605a      	str	r2, [r3, #4]
      { }
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	4618      	mov	r0, r3
 8017054:	3710      	adds	r7, #16
 8017056:	46bd      	mov	sp, r7
 8017058:	bd80      	pop	{r7, pc}

0801705a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801705a:	b580      	push	{r7, lr}
 801705c:	b084      	sub	sp, #16
 801705e:	af00      	add	r7, sp, #0
 8017060:	60f8      	str	r0, [r7, #12]
 8017062:	60b9      	str	r1, [r7, #8]
 8017064:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8017066:	687a      	ldr	r2, [r7, #4]
 8017068:	68b9      	ldr	r1, [r7, #8]
 801706a:	68f8      	ldr	r0, [r7, #12]
 801706c:	f000 fa8b 	bl	8017586 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 8017070:	bf00      	nop
 8017072:	3710      	adds	r7, #16
 8017074:	46bd      	mov	sp, r7
 8017076:	bd80      	pop	{r7, pc}

08017078 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 8017078:	b480      	push	{r7}
 801707a:	b083      	sub	sp, #12
 801707c:	af00      	add	r7, sp, #0
 801707e:	6078      	str	r0, [r7, #4]
      return __ptr;
 8017080:	687b      	ldr	r3, [r7, #4]
    }
 8017082:	4618      	mov	r0, r3
 8017084:	370c      	adds	r7, #12
 8017086:	46bd      	mov	sp, r7
 8017088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801708c:	4770      	bx	lr

0801708e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 801708e:	b580      	push	{r7, lr}
 8017090:	b082      	sub	sp, #8
 8017092:	af00      	add	r7, sp, #0
 8017094:	6078      	str	r0, [r7, #4]
 8017096:	7039      	strb	r1, [r7, #0]
 8017098:	463b      	mov	r3, r7
 801709a:	4619      	mov	r1, r3
 801709c:	6878      	ldr	r0, [r7, #4]
 801709e:	f7f7 fb91 	bl	800e7c4 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	4618      	mov	r0, r3
 80170a6:	3708      	adds	r7, #8
 80170a8:	46bd      	mov	sp, r7
 80170aa:	bd80      	pop	{r7, pc}

080170ac <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtSB_RbRP6RemoraEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 80170ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80170b0:	b089      	sub	sp, #36	@ 0x24
 80170b2:	af04      	add	r7, sp, #16
 80170b4:	60f8      	str	r0, [r7, #12]
 80170b6:	60b9      	str	r1, [r7, #8]
 80170b8:	607a      	str	r2, [r7, #4]
 80170ba:	603b      	str	r3, [r7, #0]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 80170bc:	6878      	ldr	r0, [r7, #4]
 80170be:	f7fe fd8f 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80170c2:	4606      	mov	r6, r0
 80170c4:	6838      	ldr	r0, [r7, #0]
 80170c6:	f7fe fd96 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80170ca:	4680      	mov	r8, r0
 80170cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80170ce:	f7fe fd9d 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80170d2:	4681      	mov	r9, r0
 80170d4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80170d6:	f7fe fd99 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80170da:	4604      	mov	r4, r0
 80170dc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80170de:	f7fa fa86 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80170e2:	4605      	mov	r5, r0
 80170e4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80170e6:	f7fe fd9c 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80170ea:	4603      	mov	r3, r0
 80170ec:	9302      	str	r3, [sp, #8]
 80170ee:	9501      	str	r5, [sp, #4]
 80170f0:	9400      	str	r4, [sp, #0]
 80170f2:	464b      	mov	r3, r9
 80170f4:	4642      	mov	r2, r8
 80170f6:	4631      	mov	r1, r6
 80170f8:	68b8      	ldr	r0, [r7, #8]
 80170fa:	f000 fa55 	bl	80175a8 <_ZSt10_ConstructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEEvPT_DpOT0_>
 80170fe:	bf00      	nop
 8017100:	3714      	adds	r7, #20
 8017102:	46bd      	mov	sp, r7
 8017104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017108 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E6_M_ptrEv>:
      _M_ptr() noexcept
 8017108:	b580      	push	{r7, lr}
 801710a:	b082      	sub	sp, #8
 801710c:	af00      	add	r7, sp, #0
 801710e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8017110:	6878      	ldr	r0, [r7, #4]
 8017112:	f000 fa94 	bl	801763e <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E7_M_addrEv>
 8017116:	4603      	mov	r3, r0
 8017118:	4618      	mov	r0, r3
 801711a:	3708      	adds	r7, #8
 801711c:	46bd      	mov	sp, r7
 801711e:	bd80      	pop	{r7, pc}

08017120 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>:
      }

    private:
      // Used by __enable_shared_from_this.
      void
      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept
 8017120:	b580      	push	{r7, lr}
 8017122:	b084      	sub	sp, #16
 8017124:	af00      	add	r7, sp, #0
 8017126:	60f8      	str	r0, [r7, #12]
 8017128:	60b9      	str	r1, [r7, #8]
 801712a:	607a      	str	r2, [r7, #4]
      {
	if (use_count() == 0)
 801712c:	68f8      	ldr	r0, [r7, #12]
 801712e:	f000 fa91 	bl	8017654 <_ZNKSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9use_countEv>
 8017132:	4603      	mov	r3, r0
 8017134:	2b00      	cmp	r3, #0
 8017136:	bf0c      	ite	eq
 8017138:	2301      	moveq	r3, #1
 801713a:	2300      	movne	r3, #0
 801713c:	b2db      	uxtb	r3, r3
 801713e:	2b00      	cmp	r3, #0
 8017140:	d008      	beq.n	8017154 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE+0x34>
	  {
	    _M_ptr = __ptr;
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	68ba      	ldr	r2, [r7, #8]
 8017146:	601a      	str	r2, [r3, #0]
	    _M_refcount = __refcount;
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	3304      	adds	r3, #4
 801714c:	6879      	ldr	r1, [r7, #4]
 801714e:	4618      	mov	r0, r3
 8017150:	f000 fa8e 	bl	8017670 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE>
	  }
      }
 8017154:	bf00      	nop
 8017156:	3710      	adds	r7, #16
 8017158:	46bd      	mov	sp, r7
 801715a:	bd80      	pop	{r7, pc}

0801715c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEEC1Ev>:
      _Tuple_impl()
 801715c:	b580      	push	{r7, lr}
 801715e:	b082      	sub	sp, #8
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8017164:	6878      	ldr	r0, [r7, #4]
 8017166:	f000 faa2 	bl	80176ae <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EEC1Ev>
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	4618      	mov	r0, r3
 801716e:	3708      	adds	r7, #8
 8017170:	46bd      	mov	sp, r7
 8017172:	bd80      	pop	{r7, pc}

08017174 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EEC1Ev>:
      constexpr _Head_base()
 8017174:	b480      	push	{r7}
 8017176:	b083      	sub	sp, #12
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	2200      	movs	r2, #0
 8017180:	601a      	str	r2, [r3, #0]
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	4618      	mov	r0, r3
 8017186:	370c      	adds	r7, #12
 8017188:	46bd      	mov	sp, r7
 801718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718e:	4770      	bx	lr

08017190 <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8017190:	b480      	push	{r7}
 8017192:	b083      	sub	sp, #12
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	4618      	mov	r0, r3
 801719c:	370c      	adds	r7, #12
 801719e:	46bd      	mov	sp, r7
 80171a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a4:	4770      	bx	lr

080171a6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2208StepperEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80171a6:	b580      	push	{r7, lr}
 80171a8:	b082      	sub	sp, #8
 80171aa:	af00      	add	r7, sp, #0
 80171ac:	6078      	str	r0, [r7, #4]
 80171ae:	6878      	ldr	r0, [r7, #4]
 80171b0:	f000 fa88 	bl	80176c4 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EE7_M_headERS3_>
 80171b4:	4603      	mov	r3, r0
 80171b6:	4618      	mov	r0, r3
 80171b8:	3708      	adds	r7, #8
 80171ba:	46bd      	mov	sp, r7
 80171bc:	bd80      	pop	{r7, pc}

080171be <_ZNSt11_Tuple_implILj0EJP14TMC2208StepperSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80171be:	b580      	push	{r7, lr}
 80171c0:	b082      	sub	sp, #8
 80171c2:	af00      	add	r7, sp, #0
 80171c4:	6078      	str	r0, [r7, #4]
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	4618      	mov	r0, r3
 80171ca:	f000 fa86 	bl	80176da <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERKS2_>
 80171ce:	4603      	mov	r3, r0
 80171d0:	4618      	mov	r0, r3
 80171d2:	3708      	adds	r7, #8
 80171d4:	46bd      	mov	sp, r7
 80171d6:	bd80      	pop	{r7, pc}

080171d8 <_ZN11ArduinoJson8V730HB226detail5isnanIdEEbT_>:
// Some libraries #define isnan() and isinf() so we need to check before
// using this name

#ifndef isnan
template <typename T>
bool isnan(T x) {
 80171d8:	b480      	push	{r7}
 80171da:	b083      	sub	sp, #12
 80171dc:	af00      	add	r7, sp, #0
 80171de:	ed87 0b00 	vstr	d0, [r7]
  return x != x;
 80171e2:	ed97 6b00 	vldr	d6, [r7]
 80171e6:	ed97 7b00 	vldr	d7, [r7]
 80171ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80171ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171f2:	bf14      	ite	ne
 80171f4:	2301      	movne	r3, #1
 80171f6:	2300      	moveq	r3, #0
 80171f8:	b2db      	uxtb	r3, r3
}
 80171fa:	4618      	mov	r0, r3
 80171fc:	370c      	adds	r7, #12
 80171fe:	46bd      	mov	sp, r7
 8017200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017204:	4770      	bx	lr

08017206 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_>:
#endif

#ifndef isinf
template <typename T>
bool isinf(T x) {
 8017206:	b480      	push	{r7}
 8017208:	b083      	sub	sp, #12
 801720a:	af00      	add	r7, sp, #0
 801720c:	ed87 0b00 	vstr	d0, [r7]
  return x != 0.0 && x * 2 == x;
 8017210:	ed97 7b00 	vldr	d7, [r7]
 8017214:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801721c:	d00c      	beq.n	8017238 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_+0x32>
 801721e:	ed97 7b00 	vldr	d7, [r7]
 8017222:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017226:	ed97 6b00 	vldr	d6, [r7]
 801722a:	eeb4 6b47 	vcmp.f64	d6, d7
 801722e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017232:	d101      	bne.n	8017238 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_+0x32>
 8017234:	2301      	movs	r3, #1
 8017236:	e000      	b.n	801723a <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_+0x34>
 8017238:	2300      	movs	r3, #0
}
 801723a:	4618      	mov	r0, r3
 801723c:	370c      	adds	r7, #12
 801723e:	46bd      	mov	sp, r7
 8017240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017244:	4770      	bx	lr

08017246 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIfEEvT_>:
  void writeFloat(T value) {
 8017246:	b580      	push	{r7, lr}
 8017248:	b082      	sub	sp, #8
 801724a:	af00      	add	r7, sp, #0
 801724c:	6078      	str	r0, [r7, #4]
 801724e:	ed87 0a00 	vstr	s0, [r7]
    writeFloat(JsonFloat(value), sizeof(T) >= 8 ? 9 : 6);
 8017252:	edd7 7a00 	vldr	s15, [r7]
 8017256:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801725a:	2106      	movs	r1, #6
 801725c:	eeb0 0b47 	vmov.f64	d0, d7
 8017260:	6878      	ldr	r0, [r7, #4]
 8017262:	f000 fa45 	bl	80176f0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>
  }
 8017266:	bf00      	nop
 8017268:	3708      	adds	r7, #8
 801726a:	46bd      	mov	sp, r7
 801726c:	bd80      	pop	{r7, pc}

0801726e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>:
  void writeFloat(T value) {
 801726e:	b580      	push	{r7, lr}
 8017270:	b084      	sub	sp, #16
 8017272:	af00      	add	r7, sp, #0
 8017274:	60f8      	str	r0, [r7, #12]
 8017276:	ed87 0b00 	vstr	d0, [r7]
    writeFloat(JsonFloat(value), sizeof(T) >= 8 ? 9 : 6);
 801727a:	2109      	movs	r1, #9
 801727c:	ed97 0b00 	vldr	d0, [r7]
 8017280:	68f8      	ldr	r0, [r7, #12]
 8017282:	f000 fa35 	bl	80176f0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>
  }
 8017286:	bf00      	nop
 8017288:	3710      	adds	r7, #16
 801728a:	46bd      	mov	sp, r7
 801728c:	bd80      	pop	{r7, pc}

0801728e <_ZN11ArduinoJson8V730HB226detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>:
  void write(char c) {
 801728e:	b580      	push	{r7, lr}
 8017290:	b082      	sub	sp, #8
 8017292:	af00      	add	r7, sp, #0
 8017294:	6078      	str	r0, [r7, #4]
 8017296:	460b      	mov	r3, r1
 8017298:	70fb      	strb	r3, [r7, #3]
    formatter_.writeRaw(c);
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	78fa      	ldrb	r2, [r7, #3]
 801729e:	4611      	mov	r1, r2
 80172a0:	4618      	mov	r0, r3
 80172a2:	f000 fa83 	bl	80177ac <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 80172a6:	bf00      	nop
 80172a8:	3708      	adds	r7, #8
 80172aa:	46bd      	mov	sp, r7
 80172ac:	bd80      	pop	{r7, pc}

080172ae <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>:
  void writeString(const char* value, size_t n) {
 80172ae:	b580      	push	{r7, lr}
 80172b0:	b084      	sub	sp, #16
 80172b2:	af00      	add	r7, sp, #0
 80172b4:	60f8      	str	r0, [r7, #12]
 80172b6:	60b9      	str	r1, [r7, #8]
 80172b8:	607a      	str	r2, [r7, #4]
    writeRaw('\"');
 80172ba:	2122      	movs	r1, #34	@ 0x22
 80172bc:	68f8      	ldr	r0, [r7, #12]
 80172be:	f000 fa75 	bl	80177ac <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
    while (n--)
 80172c2:	e007      	b.n	80172d4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x26>
      writeChar(*value++);
 80172c4:	68bb      	ldr	r3, [r7, #8]
 80172c6:	1c5a      	adds	r2, r3, #1
 80172c8:	60ba      	str	r2, [r7, #8]
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	4619      	mov	r1, r3
 80172ce:	68f8      	ldr	r0, [r7, #12]
 80172d0:	f000 fa7c 	bl	80177cc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>
    while (n--)
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	1e5a      	subs	r2, r3, #1
 80172d8:	607a      	str	r2, [r7, #4]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	bf14      	ite	ne
 80172de:	2301      	movne	r3, #1
 80172e0:	2300      	moveq	r3, #0
 80172e2:	b2db      	uxtb	r3, r3
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d1ed      	bne.n	80172c4 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x16>
    writeRaw('\"');
 80172e8:	2122      	movs	r1, #34	@ 0x22
 80172ea:	68f8      	ldr	r0, [r7, #12]
 80172ec:	f000 fa5e 	bl	80177ac <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 80172f0:	bf00      	nop
 80172f2:	3710      	adds	r7, #16
 80172f4:	46bd      	mov	sp, r7
 80172f6:	bd80      	pop	{r7, pc}

080172f8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>:

  void writeRaw(const char* s, size_t n) {
 80172f8:	b580      	push	{r7, lr}
 80172fa:	b084      	sub	sp, #16
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	60f8      	str	r0, [r7, #12]
 8017300:	60b9      	str	r1, [r7, #8]
 8017302:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(s), n);
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	687a      	ldr	r2, [r7, #4]
 8017308:	68b9      	ldr	r1, [r7, #8]
 801730a:	4618      	mov	r0, r3
 801730c:	f000 f878 	bl	8017400 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8017310:	bf00      	nop
 8017312:	3710      	adds	r7, #16
 8017314:	46bd      	mov	sp, r7
 8017316:	bd80      	pop	{r7, pc}

08017318 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_signed<T>::value> writeInteger(T value) {
 8017318:	b5b0      	push	{r4, r5, r7, lr}
 801731a:	b086      	sub	sp, #24
 801731c:	af00      	add	r7, sp, #0
 801731e:	60f8      	str	r0, [r7, #12]
 8017320:	e9c7 2300 	strd	r2, r3, [r7]
    if (value < 0) {
 8017324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017328:	2b00      	cmp	r3, #0
 801732a:	da0c      	bge.n	8017346 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x2e>
      writeRaw('-');
 801732c:	212d      	movs	r1, #45	@ 0x2d
 801732e:	68f8      	ldr	r0, [r7, #12]
 8017330:	f000 fa3c 	bl	80177ac <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 8017334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017338:	2100      	movs	r1, #0
 801733a:	4254      	negs	r4, r2
 801733c:	eb61 0503 	sbc.w	r5, r1, r3
 8017340:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8017344:	e003      	b.n	801734e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x36>
      unsigned_value = unsigned_type(value);
 8017346:	e9d7 2300 	ldrd	r2, r3, [r7]
 801734a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    writeInteger(unsigned_value);
 801734e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8017352:	68f8      	ldr	r0, [r7, #12]
 8017354:	f000 f804 	bl	8017360 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 8017358:	bf00      	nop
 801735a:	3718      	adds	r7, #24
 801735c:	46bd      	mov	sp, r7
 801735e:	bdb0      	pop	{r4, r5, r7, pc}

08017360 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 8017360:	b580      	push	{r7, lr}
 8017362:	b08c      	sub	sp, #48	@ 0x30
 8017364:	af00      	add	r7, sp, #0
 8017366:	60f8      	str	r0, [r7, #12]
 8017368:	e9c7 2300 	strd	r2, r3, [r7]
    char* end = buffer + sizeof(buffer);
 801736c:	f107 0310 	add.w	r3, r7, #16
 8017370:	3316      	adds	r3, #22
 8017372:	62bb      	str	r3, [r7, #40]	@ 0x28
    char* begin = end;
 8017374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017376:	62fb      	str	r3, [r7, #44]	@ 0x2c
      *--begin = char(value % 10 + '0');
 8017378:	e9d7 0100 	ldrd	r0, r1, [r7]
 801737c:	f04f 020a 	mov.w	r2, #10
 8017380:	f04f 0300 	mov.w	r3, #0
 8017384:	f7e9 fade 	bl	8000944 <__aeabi_uldivmod>
 8017388:	b2d3      	uxtb	r3, r2
 801738a:	3330      	adds	r3, #48	@ 0x30
 801738c:	b2da      	uxtb	r2, r3
 801738e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017390:	3b01      	subs	r3, #1
 8017392:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017396:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8017398:	e9d7 0100 	ldrd	r0, r1, [r7]
 801739c:	f04f 020a 	mov.w	r2, #10
 80173a0:	f04f 0300 	mov.w	r3, #0
 80173a4:	f7e9 face 	bl	8000944 <__aeabi_uldivmod>
 80173a8:	4602      	mov	r2, r0
 80173aa:	460b      	mov	r3, r1
 80173ac:	e9c7 2300 	strd	r2, r3, [r7]
    } while (value);
 80173b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80173b4:	4313      	orrs	r3, r2
 80173b6:	d1df      	bne.n	8017378 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 80173b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80173ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80173bc:	68f8      	ldr	r0, [r7, #12]
 80173be:	f000 fa31 	bl	8017824 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 80173c2:	bf00      	nop
 80173c4:	3730      	adds	r7, #48	@ 0x30
 80173c6:	46bd      	mov	sp, r7
 80173c8:	bd80      	pop	{r7, pc}
	...

080173cc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>:
  void writeBoolean(bool value) {
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b082      	sub	sp, #8
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
 80173d4:	460b      	mov	r3, r1
 80173d6:	70fb      	strb	r3, [r7, #3]
    if (value)
 80173d8:	78fb      	ldrb	r3, [r7, #3]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d004      	beq.n	80173e8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x1c>
      writeRaw("true");
 80173de:	4906      	ldr	r1, [pc, #24]	@ (80173f8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x2c>)
 80173e0:	6878      	ldr	r0, [r7, #4]
 80173e2:	f7ff fca2 	bl	8016d2a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 80173e6:	e003      	b.n	80173f0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x24>
      writeRaw("false");
 80173e8:	4904      	ldr	r1, [pc, #16]	@ (80173fc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x30>)
 80173ea:	6878      	ldr	r0, [r7, #4]
 80173ec:	f7ff fc9d 	bl	8016d2a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 80173f0:	bf00      	nop
 80173f2:	3708      	adds	r7, #8
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd80      	pop	{r7, pc}
 80173f8:	0802ada8 	.word	0x0802ada8
 80173fc:	0802adb0 	.word	0x0802adb0

08017400 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>:

  void write(uint8_t c) {
    count_ += writer_.write(c);
  }

  void write(const uint8_t* s, size_t n) {
 8017400:	b580      	push	{r7, lr}
 8017402:	b084      	sub	sp, #16
 8017404:	af00      	add	r7, sp, #0
 8017406:	60f8      	str	r0, [r7, #12]
 8017408:	60b9      	str	r1, [r7, #8]
 801740a:	607a      	str	r2, [r7, #4]
    count_ += writer_.write(s, n);
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	687a      	ldr	r2, [r7, #4]
 8017410:	68b9      	ldr	r1, [r7, #8]
 8017412:	4618      	mov	r0, r3
 8017414:	f000 fa18 	bl	8017848 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>
 8017418:	4602      	mov	r2, r0
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	685b      	ldr	r3, [r3, #4]
 801741e:	441a      	add	r2, r3
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	605a      	str	r2, [r3, #4]
  }
 8017424:	bf00      	nop
 8017426:	3710      	adds	r7, #16
 8017428:	46bd      	mov	sp, r7
 801742a:	bd80      	pop	{r7, pc}

0801742c <_ZNK11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 801742c:	b580      	push	{r7, lr}
 801742e:	b082      	sub	sp, #8
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
    return writer_.count();
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	4618      	mov	r0, r3
 8017438:	f000 fa18 	bl	801786c <_ZNK11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>
 801743c:	4603      	mov	r3, r0
  }
 801743e:	4618      	mov	r0, r3
 8017440:	3708      	adds	r7, #8
 8017442:	46bd      	mov	sp, r7
 8017444:	bd80      	pop	{r7, pc}

08017446 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_>:
TOut convertNumber(TIn value) {
 8017446:	b580      	push	{r7, lr}
 8017448:	b082      	sub	sp, #8
 801744a:	af00      	add	r7, sp, #0
 801744c:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8017450:	ed97 0a01 	vldr	s0, [r7, #4]
 8017454:	f000 fa16 	bl	8017884 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIffEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>
 8017458:	4603      	mov	r3, r0
 801745a:	2b00      	cmp	r3, #0
 801745c:	d001      	beq.n	8017462 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_+0x1c>
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	e001      	b.n	8017466 <_ZN11ArduinoJson8V730HB226detail13convertNumberIffEET_T0_+0x20>
 8017462:	f04f 0300 	mov.w	r3, #0
 8017466:	ee07 3a90 	vmov	s15, r3
}
 801746a:	eeb0 0a67 	vmov.f32	s0, s15
 801746e:	3708      	adds	r7, #8
 8017470:	46bd      	mov	sp, r7
 8017472:	bd80      	pop	{r7, pc}

08017474 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_>:
TOut convertNumber(TIn value) {
 8017474:	b580      	push	{r7, lr}
 8017476:	b082      	sub	sp, #8
 8017478:	af00      	add	r7, sp, #0
 801747a:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 801747e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017482:	f000 fa0b 	bl	801789c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfxEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>
 8017486:	4603      	mov	r3, r0
 8017488:	2b00      	cmp	r3, #0
 801748a:	d005      	beq.n	8017498 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_+0x24>
 801748c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8017490:	f7e9 fa1a 	bl	80008c8 <__aeabi_l2f>
 8017494:	4603      	mov	r3, r0
 8017496:	e001      	b.n	801749c <_ZN11ArduinoJson8V730HB226detail13convertNumberIfxEET_T0_+0x28>
 8017498:	f04f 0300 	mov.w	r3, #0
 801749c:	ee07 3a90 	vmov	s15, r3
}
 80174a0:	eeb0 0a67 	vmov.f32	s0, s15
 80174a4:	3708      	adds	r7, #8
 80174a6:	46bd      	mov	sp, r7
 80174a8:	bd80      	pop	{r7, pc}

080174aa <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_>:
TOut convertNumber(TIn value) {
 80174aa:	b580      	push	{r7, lr}
 80174ac:	b082      	sub	sp, #8
 80174ae:	af00      	add	r7, sp, #0
 80174b0:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80174b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80174b8:	f000 f9fc 	bl	80178b4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfyEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>
 80174bc:	4603      	mov	r3, r0
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d005      	beq.n	80174ce <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_+0x24>
 80174c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80174c6:	f7e9 f9f7 	bl	80008b8 <__aeabi_ul2f>
 80174ca:	4603      	mov	r3, r0
 80174cc:	e001      	b.n	80174d2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfyEET_T0_+0x28>
 80174ce:	f04f 0300 	mov.w	r3, #0
 80174d2:	ee07 3a90 	vmov	s15, r3
}
 80174d6:	eeb0 0a67 	vmov.f32	s0, s15
 80174da:	3708      	adds	r7, #8
 80174dc:	46bd      	mov	sp, r7
 80174de:	bd80      	pop	{r7, pc}

080174e0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_>:
TOut convertNumber(TIn value) {
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b082      	sub	sp, #8
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80174ea:	ed97 0b00 	vldr	d0, [r7]
 80174ee:	f000 f9ed 	bl	80178cc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfdEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>
 80174f2:	4603      	mov	r3, r0
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d004      	beq.n	8017502 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x22>
 80174f8:	ed97 7b00 	vldr	d7, [r7]
 80174fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8017500:	e001      	b.n	8017506 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x26>
 8017502:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8017510 <_ZN11ArduinoJson8V730HB226detail13convertNumberIfdEET_T0_+0x30>
}
 8017506:	eeb0 0a67 	vmov.f32	s0, s15
 801750a:	3708      	adds	r7, #8
 801750c:	46bd      	mov	sp, r7
 801750e:	bd80      	pop	{r7, pc}
 8017510:	00000000 	.word	0x00000000

08017514 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8017514:	b580      	push	{r7, lr}
 8017516:	b084      	sub	sp, #16
 8017518:	af00      	add	r7, sp, #0
 801751a:	60f8      	str	r0, [r7, #12]
 801751c:	60b9      	str	r1, [r7, #8]
 801751e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8017520:	68f8      	ldr	r0, [r7, #12]
 8017522:	f000 f9df 	bl	80178e4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 8017526:	4602      	mov	r2, r0
 8017528:	68bb      	ldr	r3, [r7, #8]
 801752a:	4293      	cmp	r3, r2
 801752c:	bf8c      	ite	hi
 801752e:	2301      	movhi	r3, #1
 8017530:	2300      	movls	r3, #0
 8017532:	b2db      	uxtb	r3, r3
 8017534:	2b00      	cmp	r3, #0
 8017536:	bf14      	ite	ne
 8017538:	2301      	movne	r3, #1
 801753a:	2300      	moveq	r3, #0
 801753c:	b2db      	uxtb	r3, r3
 801753e:	2b00      	cmp	r3, #0
 8017540:	d007      	beq.n	8017552 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8017542:	68bb      	ldr	r3, [r7, #8]
 8017544:	4a09      	ldr	r2, [pc, #36]	@ (801756c <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 8017546:	4293      	cmp	r3, r2
 8017548:	d901      	bls.n	801754e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801754a:	f011 f8eb 	bl	8028724 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801754e:	f011 f8e6 	bl	802871e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8017552:	68bb      	ldr	r3, [r7, #8]
 8017554:	2258      	movs	r2, #88	@ 0x58
 8017556:	fb02 f303 	mul.w	r3, r2, r3
 801755a:	4618      	mov	r0, r3
 801755c:	f011 f8cc 	bl	80286f8 <_Znwj>
 8017560:	4603      	mov	r3, r0
 8017562:	bf00      	nop
      }
 8017564:	4618      	mov	r0, r3
 8017566:	3710      	adds	r7, #16
 8017568:	46bd      	mov	sp, r7
 801756a:	bd80      	pop	{r7, pc}
 801756c:	02e8ba2e 	.word	0x02e8ba2e

08017570 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8017570:	b480      	push	{r7}
 8017572:	b083      	sub	sp, #12
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	4618      	mov	r0, r3
 801757c:	370c      	adds	r7, #12
 801757e:	46bd      	mov	sp, r7
 8017580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017584:	4770      	bx	lr

08017586 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8017586:	b580      	push	{r7, lr}
 8017588:	b084      	sub	sp, #16
 801758a:	af00      	add	r7, sp, #0
 801758c:	60f8      	str	r0, [r7, #12]
 801758e:	60b9      	str	r1, [r7, #8]
 8017590:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	2258      	movs	r2, #88	@ 0x58
 8017596:	fb02 f303 	mul.w	r3, r2, r3
 801759a:	4619      	mov	r1, r3
 801759c:	68b8      	ldr	r0, [r7, #8]
 801759e:	f011 f89a 	bl	80286d6 <_ZdlPvj>
      }
 80175a2:	3710      	adds	r7, #16
 80175a4:	46bd      	mov	sp, r7
 80175a6:	bd80      	pop	{r7, pc}

080175a8 <_ZSt10_ConstructI7TMC2208JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRtS8_RbRP6RemoraEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80175a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175ac:	ed2d 8b02 	vpush	{d8}
 80175b0:	b08c      	sub	sp, #48	@ 0x30
 80175b2:	af02      	add	r7, sp, #8
 80175b4:	60f8      	str	r0, [r7, #12]
 80175b6:	60b9      	str	r1, [r7, #8]
 80175b8:	607a      	str	r2, [r7, #4]
 80175ba:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	4619      	mov	r1, r3
 80175c0:	204c      	movs	r0, #76	@ 0x4c
 80175c2:	f7f3 fa39 	bl	800aa38 <_ZnwjPv>
 80175c6:	4680      	mov	r8, r0
 80175c8:	68b8      	ldr	r0, [r7, #8]
 80175ca:	f7fe fb09 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80175ce:	4602      	mov	r2, r0
 80175d0:	f107 0310 	add.w	r3, r7, #16
 80175d4:	4611      	mov	r1, r2
 80175d6:	4618      	mov	r0, r3
 80175d8:	f011 f96a 	bl	80288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80175dc:	6878      	ldr	r0, [r7, #4]
 80175de:	f7fe fb0a 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80175e2:	4603      	mov	r3, r0
 80175e4:	ed93 8a00 	vldr	s16, [r3]
 80175e8:	6838      	ldr	r0, [r7, #0]
 80175ea:	f7fe fb0f 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80175ee:	4603      	mov	r3, r0
 80175f0:	881d      	ldrh	r5, [r3, #0]
 80175f2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80175f4:	f7fe fb0a 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80175f8:	4603      	mov	r3, r0
 80175fa:	881e      	ldrh	r6, [r3, #0]
 80175fc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80175fe:	f7f9 fff6 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8017602:	4603      	mov	r3, r0
 8017604:	781c      	ldrb	r4, [r3, #0]
 8017606:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8017608:	f7fe fb0b 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801760c:	4603      	mov	r3, r0
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	f107 0110 	add.w	r1, r7, #16
 8017614:	9301      	str	r3, [sp, #4]
 8017616:	9400      	str	r4, [sp, #0]
 8017618:	4633      	mov	r3, r6
 801761a:	462a      	mov	r2, r5
 801761c:	eeb0 0a48 	vmov.f32	s0, s16
 8017620:	4640      	mov	r0, r8
 8017622:	f7fd fe81 	bl	8015328 <_ZN7TMC2208C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfttbP6Remora>
 8017626:	f107 0310 	add.w	r3, r7, #16
 801762a:	4618      	mov	r0, r3
 801762c:	f011 f95f 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 8017630:	bf00      	nop
 8017632:	3728      	adds	r7, #40	@ 0x28
 8017634:	46bd      	mov	sp, r7
 8017636:	ecbd 8b02 	vpop	{d8}
 801763a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801763e <_ZN9__gnu_cxx16__aligned_bufferI7TMC2208E7_M_addrEv>:
      _M_addr() noexcept
 801763e:	b480      	push	{r7}
 8017640:	b083      	sub	sp, #12
 8017642:	af00      	add	r7, sp, #0
 8017644:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8017646:	687b      	ldr	r3, [r7, #4]
      }
 8017648:	4618      	mov	r0, r3
 801764a:	370c      	adds	r7, #12
 801764c:	46bd      	mov	sp, r7
 801764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017652:	4770      	bx	lr

08017654 <_ZNKSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9use_countEv>:
      use_count() const noexcept
 8017654:	b580      	push	{r7, lr}
 8017656:	b082      	sub	sp, #8
 8017658:	af00      	add	r7, sp, #0
 801765a:	6078      	str	r0, [r7, #4]
      { return _M_refcount._M_get_use_count(); }
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	3304      	adds	r3, #4
 8017660:	4618      	mov	r0, r3
 8017662:	f000 f94d 	bl	8017900 <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>
 8017666:	4603      	mov	r3, r0
 8017668:	4618      	mov	r0, r3
 801766a:	3708      	adds	r7, #8
 801766c:	46bd      	mov	sp, r7
 801766e:	bd80      	pop	{r7, pc}

08017670 <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE>:
      operator=(const __shared_count<_Lp>& __r) noexcept
 8017670:	b580      	push	{r7, lr}
 8017672:	b084      	sub	sp, #16
 8017674:	af00      	add	r7, sp, #0
 8017676:	6078      	str	r0, [r7, #4]
 8017678:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 801767a:	683b      	ldr	r3, [r7, #0]
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	60fb      	str	r3, [r7, #12]
	if (__tmp != nullptr)
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d002      	beq.n	801768c <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE+0x1c>
	  __tmp->_M_weak_add_ref();
 8017686:	68f8      	ldr	r0, [r7, #12]
 8017688:	f7fd fb32 	bl	8014cf0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_add_refEv>
	if (_M_pi != nullptr)
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d004      	beq.n	801769e <_ZNSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EEaSERKSt14__shared_countILS1_0EE+0x2e>
	  _M_pi->_M_weak_release();
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	4618      	mov	r0, r3
 801769a:	f7fd fb38 	bl	8014d0e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_weak_releaseEv>
	_M_pi = __tmp;
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	68fa      	ldr	r2, [r7, #12]
 80176a2:	601a      	str	r2, [r3, #0]
	return *this;
 80176a4:	687b      	ldr	r3, [r7, #4]
      }
 80176a6:	4618      	mov	r0, r3
 80176a8:	3710      	adds	r7, #16
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bd80      	pop	{r7, pc}

080176ae <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EEC1Ev>:
      constexpr _Head_base()
 80176ae:	b480      	push	{r7}
 80176b0:	b083      	sub	sp, #12
 80176b2:	af00      	add	r7, sp, #0
 80176b4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	4618      	mov	r0, r3
 80176ba:	370c      	adds	r7, #12
 80176bc:	46bd      	mov	sp, r7
 80176be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c2:	4770      	bx	lr

080176c4 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2208StepperELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80176c4:	b480      	push	{r7}
 80176c6:	b083      	sub	sp, #12
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	6078      	str	r0, [r7, #4]
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	4618      	mov	r0, r3
 80176d0:	370c      	adds	r7, #12
 80176d2:	46bd      	mov	sp, r7
 80176d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d8:	4770      	bx	lr

080176da <_ZNSt10_Head_baseILj0EP14TMC2208StepperLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80176da:	b480      	push	{r7}
 80176dc:	b083      	sub	sp, #12
 80176de:	af00      	add	r7, sp, #0
 80176e0:	6078      	str	r0, [r7, #4]
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	4618      	mov	r0, r3
 80176e6:	370c      	adds	r7, #12
 80176e8:	46bd      	mov	sp, r7
 80176ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ee:	4770      	bx	lr

080176f0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda>:
  void writeFloat(JsonFloat value, int8_t decimalPlaces) {
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b088      	sub	sp, #32
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	60f8      	str	r0, [r7, #12]
 80176f8:	ed87 0b00 	vstr	d0, [r7]
 80176fc:	460b      	mov	r3, r1
 80176fe:	72fb      	strb	r3, [r7, #11]
    if (isnan(value))
 8017700:	ed97 0b00 	vldr	d0, [r7]
 8017704:	f7ff fd68 	bl	80171d8 <_ZN11ArduinoJson8V730HB226detail5isnanIdEEbT_>
 8017708:	4603      	mov	r3, r0
 801770a:	2b00      	cmp	r3, #0
 801770c:	d004      	beq.n	8017718 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x28>
      return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 801770e:	4926      	ldr	r1, [pc, #152]	@ (80177a8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb8>)
 8017710:	68f8      	ldr	r0, [r7, #12]
 8017712:	f7ff fb0a 	bl	8016d2a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 8017716:	e044      	b.n	80177a2 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb2>
    if (isinf(value))
 8017718:	ed97 0b00 	vldr	d0, [r7]
 801771c:	f7ff fd73 	bl	8017206 <_ZN11ArduinoJson8V730HB226detail5isinfIdEEbT_>
 8017720:	4603      	mov	r3, r0
 8017722:	2b00      	cmp	r3, #0
 8017724:	d004      	beq.n	8017730 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x40>
      return writeRaw("null");
 8017726:	4920      	ldr	r1, [pc, #128]	@ (80177a8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb8>)
 8017728:	68f8      	ldr	r0, [r7, #12]
 801772a:	f7ff fafe 	bl	8016d2a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 801772e:	e038      	b.n	80177a2 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb2>
    if (value < 0.0) {
 8017730:	ed97 7b00 	vldr	d7, [r7]
 8017734:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8017738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801773c:	d509      	bpl.n	8017752 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x62>
      writeRaw('-');
 801773e:	212d      	movs	r1, #45	@ 0x2d
 8017740:	68f8      	ldr	r0, [r7, #12]
 8017742:	f000 f833 	bl	80177ac <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      value = -value;
 8017746:	ed97 7b00 	vldr	d7, [r7]
 801774a:	eeb1 7b47 	vneg.f64	d7, d7
 801774e:	ed87 7b00 	vstr	d7, [r7]
    auto parts = decomposeFloat(value, decimalPlaces);
 8017752:	f107 0314 	add.w	r3, r7, #20
 8017756:	f997 200b 	ldrsb.w	r2, [r7, #11]
 801775a:	4611      	mov	r1, r2
 801775c:	ed97 0b00 	vldr	d0, [r7]
 8017760:	4618      	mov	r0, r3
 8017762:	f7fd fb65 	bl	8014e30 <_ZN11ArduinoJson8V730HB226detail14decomposeFloatEda>
    writeInteger(parts.integral);
 8017766:	697b      	ldr	r3, [r7, #20]
 8017768:	4619      	mov	r1, r3
 801776a:	68f8      	ldr	r0, [r7, #12]
 801776c:	f000 f8dc 	bl	8017928 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    if (parts.decimalPlaces)
 8017770:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d006      	beq.n	8017786 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0x96>
      writeDecimals(parts.decimal, parts.decimalPlaces);
 8017778:	69bb      	ldr	r3, [r7, #24]
 801777a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801777e:	4619      	mov	r1, r3
 8017780:	68f8      	ldr	r0, [r7, #12]
 8017782:	f000 f903 	bl	801798c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>
    if (parts.exponent) {
 8017786:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d009      	beq.n	80177a2 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatEda+0xb2>
      writeRaw('e');
 801778e:	2165      	movs	r1, #101	@ 0x65
 8017790:	68f8      	ldr	r0, [r7, #12]
 8017792:	f000 f80b 	bl	80177ac <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeInteger(parts.exponent);
 8017796:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801779a:	4619      	mov	r1, r3
 801779c:	68f8      	ldr	r0, [r7, #12]
 801779e:	f000 f939 	bl	8017a14 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
  }
 80177a2:	3720      	adds	r7, #32
 80177a4:	46bd      	mov	sp, r7
 80177a6:	bd80      	pop	{r7, pc}
 80177a8:	0802ada0 	.word	0x0802ada0

080177ac <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    writer_.write(reinterpret_cast<const uint8_t*>(s), N - 1);
  }
  void writeRaw(char c) {
 80177ac:	b580      	push	{r7, lr}
 80177ae:	b082      	sub	sp, #8
 80177b0:	af00      	add	r7, sp, #0
 80177b2:	6078      	str	r0, [r7, #4]
 80177b4:	460b      	mov	r3, r1
 80177b6:	70fb      	strb	r3, [r7, #3]
    writer_.write(static_cast<uint8_t>(c));
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	78fa      	ldrb	r2, [r7, #3]
 80177bc:	4611      	mov	r1, r2
 80177be:	4618      	mov	r0, r3
 80177c0:	f000 f945 	bl	8017a4e <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>
  }
 80177c4:	bf00      	nop
 80177c6:	3708      	adds	r7, #8
 80177c8:	46bd      	mov	sp, r7
 80177ca:	bd80      	pop	{r7, pc}

080177cc <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>:
  void writeChar(char c) {
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b084      	sub	sp, #16
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
 80177d4:	460b      	mov	r3, r1
 80177d6:	70fb      	strb	r3, [r7, #3]
    char specialChar = EscapeSequence::escapeChar(c);
 80177d8:	78fb      	ldrb	r3, [r7, #3]
 80177da:	4618      	mov	r0, r3
 80177dc:	f7fd faf3 	bl	8014dc6 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence10escapeCharEc>
 80177e0:	4603      	mov	r3, r0
 80177e2:	73fb      	strb	r3, [r7, #15]
    if (specialChar) {
 80177e4:	7bfb      	ldrb	r3, [r7, #15]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d009      	beq.n	80177fe <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x32>
      writeRaw('\\');
 80177ea:	215c      	movs	r1, #92	@ 0x5c
 80177ec:	6878      	ldr	r0, [r7, #4]
 80177ee:	f7ff ffdd 	bl	80177ac <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeRaw(specialChar);
 80177f2:	7bfb      	ldrb	r3, [r7, #15]
 80177f4:	4619      	mov	r1, r3
 80177f6:	6878      	ldr	r0, [r7, #4]
 80177f8:	f7ff ffd8 	bl	80177ac <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 80177fc:	e00c      	b.n	8017818 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
    } else if (c) {
 80177fe:	78fb      	ldrb	r3, [r7, #3]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d005      	beq.n	8017810 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x44>
      writeRaw(c);
 8017804:	78fb      	ldrb	r3, [r7, #3]
 8017806:	4619      	mov	r1, r3
 8017808:	6878      	ldr	r0, [r7, #4]
 801780a:	f7ff ffcf 	bl	80177ac <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 801780e:	e003      	b.n	8017818 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
      writeRaw("\\u0000");
 8017810:	4903      	ldr	r1, [pc, #12]	@ (8017820 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x54>)
 8017812:	6878      	ldr	r0, [r7, #4]
 8017814:	f7ff fa89 	bl	8016d2a <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 8017818:	bf00      	nop
 801781a:	3710      	adds	r7, #16
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}
 8017820:	0802adb8 	.word	0x0802adb8

08017824 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>:
  void writeRaw(const char* begin, const char* end) {
 8017824:	b580      	push	{r7, lr}
 8017826:	b084      	sub	sp, #16
 8017828:	af00      	add	r7, sp, #0
 801782a:	60f8      	str	r0, [r7, #12]
 801782c:	60b9      	str	r1, [r7, #8]
 801782e:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 8017830:	68f8      	ldr	r0, [r7, #12]
                  static_cast<size_t>(end - begin));
 8017832:	687a      	ldr	r2, [r7, #4]
 8017834:	68bb      	ldr	r3, [r7, #8]
 8017836:	1ad3      	subs	r3, r2, r3
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 8017838:	461a      	mov	r2, r3
 801783a:	68b9      	ldr	r1, [r7, #8]
 801783c:	f7ff fde0 	bl	8017400 <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 8017840:	bf00      	nop
 8017842:	3710      	adds	r7, #16
 8017844:	46bd      	mov	sp, r7
 8017846:	bd80      	pop	{r7, pc}

08017848 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>:
  size_t write(uint8_t c) {
    str_->push_back(static_cast<char>(c));
    return 1;
  }

  size_t write(const uint8_t* s, size_t n) {
 8017848:	b580      	push	{r7, lr}
 801784a:	b084      	sub	sp, #16
 801784c:	af00      	add	r7, sp, #0
 801784e:	60f8      	str	r0, [r7, #12]
 8017850:	60b9      	str	r1, [r7, #8]
 8017852:	607a      	str	r2, [r7, #4]
    str_->append(reinterpret_cast<const char*>(s), n);
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	687a      	ldr	r2, [r7, #4]
 801785a:	68b9      	ldr	r1, [r7, #8]
 801785c:	4618      	mov	r0, r3
 801785e:	f011 fa19 	bl	8028c94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
    return n;
 8017862:	687b      	ldr	r3, [r7, #4]
  }
 8017864:	4618      	mov	r0, r3
 8017866:	3710      	adds	r7, #16
 8017868:	46bd      	mov	sp, r7
 801786a:	bd80      	pop	{r7, pc}

0801786c <_ZNK11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>:

  size_t count() const {
 801786c:	b480      	push	{r7}
 801786e:	b083      	sub	sp, #12
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
    return count_;
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	685b      	ldr	r3, [r3, #4]
  }
 8017878:	4618      	mov	r0, r3
 801787a:	370c      	adds	r7, #12
 801787c:	46bd      	mov	sp, r7
 801787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017882:	4770      	bx	lr

08017884 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIffEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 8017884:	b480      	push	{r7}
 8017886:	b083      	sub	sp, #12
 8017888:	af00      	add	r7, sp, #0
 801788a:	ed87 0a01 	vstr	s0, [r7, #4]
  return true;
 801788e:	2301      	movs	r3, #1
}
 8017890:	4618      	mov	r0, r3
 8017892:	370c      	adds	r7, #12
 8017894:	46bd      	mov	sp, r7
 8017896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801789a:	4770      	bx	lr

0801789c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfxEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 801789c:	b480      	push	{r7}
 801789e:	b083      	sub	sp, #12
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	e9c7 0100 	strd	r0, r1, [r7]
  return true;
 80178a6:	2301      	movs	r3, #1
}
 80178a8:	4618      	mov	r0, r3
 80178aa:	370c      	adds	r7, #12
 80178ac:	46bd      	mov	sp, r7
 80178ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178b2:	4770      	bx	lr

080178b4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfyEENS1_9enable_ifIXaasrNS1_11is_integralIT0_EE5valuesrNS1_17is_floating_pointIT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 80178b4:	b480      	push	{r7}
 80178b6:	b083      	sub	sp, #12
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	e9c7 0100 	strd	r0, r1, [r7]
  return true;
 80178be:	2301      	movs	r3, #1
}
 80178c0:	4618      	mov	r0, r3
 80178c2:	370c      	adds	r7, #12
 80178c4:	46bd      	mov	sp, r7
 80178c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ca:	4770      	bx	lr

080178cc <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIfdEENS1_9enable_ifIXaasrNS1_17is_floating_pointIT0_EE5valuesrNS4_IT_EE5valueEbE4typeES5_>:
canConvertNumber(TIn) {
 80178cc:	b480      	push	{r7}
 80178ce:	b083      	sub	sp, #12
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	ed87 0b00 	vstr	d0, [r7]
  return true;
 80178d6:	2301      	movs	r3, #1
}
 80178d8:	4618      	mov	r0, r3
 80178da:	370c      	adds	r7, #12
 80178dc:	46bd      	mov	sp, r7
 80178de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e2:	4770      	bx	lr

080178e4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80178e4:	b480      	push	{r7}
 80178e6:	b083      	sub	sp, #12
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80178ec:	4b03      	ldr	r3, [pc, #12]	@ (80178fc <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 80178ee:	4618      	mov	r0, r3
 80178f0:	370c      	adds	r7, #12
 80178f2:	46bd      	mov	sp, r7
 80178f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f8:	4770      	bx	lr
 80178fa:	bf00      	nop
 80178fc:	01745d17 	.word	0x01745d17

08017900 <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>:
      _M_get_use_count() const noexcept
 8017900:	b580      	push	{r7, lr}
 8017902:	b082      	sub	sp, #8
 8017904:	af00      	add	r7, sp, #0
 8017906:	6078      	str	r0, [r7, #4]
      { return _M_pi != nullptr ? _M_pi->_M_get_use_count() : 0; }
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	2b00      	cmp	r3, #0
 801790e:	d006      	beq.n	801791e <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv+0x1e>
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	4618      	mov	r0, r3
 8017916:	f7fd fa16 	bl	8014d46 <_ZNKSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv>
 801791a:	4603      	mov	r3, r0
 801791c:	e000      	b.n	8017920 <_ZNKSt12__weak_countILN9__gnu_cxx12_Lock_policyE0EE16_M_get_use_countEv+0x20>
 801791e:	2300      	movs	r3, #0
 8017920:	4618      	mov	r0, r3
 8017922:	3708      	adds	r7, #8
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}

08017928 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 8017928:	b580      	push	{r7, lr}
 801792a:	b08a      	sub	sp, #40	@ 0x28
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
 8017930:	6039      	str	r1, [r7, #0]
    char* end = buffer + sizeof(buffer);
 8017932:	f107 0308 	add.w	r3, r7, #8
 8017936:	3316      	adds	r3, #22
 8017938:	623b      	str	r3, [r7, #32]
    char* begin = end;
 801793a:	6a3b      	ldr	r3, [r7, #32]
 801793c:	627b      	str	r3, [r7, #36]	@ 0x24
      *--begin = char(value % 10 + '0');
 801793e:	6839      	ldr	r1, [r7, #0]
 8017940:	4b11      	ldr	r3, [pc, #68]	@ (8017988 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 8017942:	fba3 2301 	umull	r2, r3, r3, r1
 8017946:	08da      	lsrs	r2, r3, #3
 8017948:	4613      	mov	r3, r2
 801794a:	009b      	lsls	r3, r3, #2
 801794c:	4413      	add	r3, r2
 801794e:	005b      	lsls	r3, r3, #1
 8017950:	1aca      	subs	r2, r1, r3
 8017952:	b2d3      	uxtb	r3, r2
 8017954:	3330      	adds	r3, #48	@ 0x30
 8017956:	b2da      	uxtb	r2, r3
 8017958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801795a:	3b01      	subs	r3, #1
 801795c:	627b      	str	r3, [r7, #36]	@ 0x24
 801795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017960:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8017962:	683b      	ldr	r3, [r7, #0]
 8017964:	4a08      	ldr	r2, [pc, #32]	@ (8017988 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 8017966:	fba2 2303 	umull	r2, r3, r2, r3
 801796a:	08db      	lsrs	r3, r3, #3
 801796c:	603b      	str	r3, [r7, #0]
    } while (value);
 801796e:	683b      	ldr	r3, [r7, #0]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d1e4      	bne.n	801793e <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x16>
    writeRaw(begin, end);
 8017974:	6a3a      	ldr	r2, [r7, #32]
 8017976:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017978:	6878      	ldr	r0, [r7, #4]
 801797a:	f7ff ff53 	bl	8017824 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 801797e:	bf00      	nop
 8017980:	3728      	adds	r7, #40	@ 0x28
 8017982:	46bd      	mov	sp, r7
 8017984:	bd80      	pop	{r7, pc}
 8017986:	bf00      	nop
 8017988:	cccccccd 	.word	0xcccccccd

0801798c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>:
  void writeDecimals(uint32_t value, int8_t width) {
 801798c:	b580      	push	{r7, lr}
 801798e:	b08a      	sub	sp, #40	@ 0x28
 8017990:	af00      	add	r7, sp, #0
 8017992:	60f8      	str	r0, [r7, #12]
 8017994:	60b9      	str	r1, [r7, #8]
 8017996:	4613      	mov	r3, r2
 8017998:	71fb      	strb	r3, [r7, #7]
    char* end = buffer + sizeof(buffer);
 801799a:	f107 0310 	add.w	r3, r7, #16
 801799e:	3310      	adds	r3, #16
 80179a0:	623b      	str	r3, [r7, #32]
    char* begin = end;
 80179a2:	6a3b      	ldr	r3, [r7, #32]
 80179a4:	627b      	str	r3, [r7, #36]	@ 0x24
    while (width--) {
 80179a6:	e017      	b.n	80179d8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x4c>
      *--begin = char(value % 10 + '0');
 80179a8:	68b9      	ldr	r1, [r7, #8]
 80179aa:	4b19      	ldr	r3, [pc, #100]	@ (8017a10 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 80179ac:	fba3 2301 	umull	r2, r3, r3, r1
 80179b0:	08da      	lsrs	r2, r3, #3
 80179b2:	4613      	mov	r3, r2
 80179b4:	009b      	lsls	r3, r3, #2
 80179b6:	4413      	add	r3, r2
 80179b8:	005b      	lsls	r3, r3, #1
 80179ba:	1aca      	subs	r2, r1, r3
 80179bc:	b2d3      	uxtb	r3, r2
 80179be:	3330      	adds	r3, #48	@ 0x30
 80179c0:	b2da      	uxtb	r2, r3
 80179c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179c4:	3b01      	subs	r3, #1
 80179c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80179c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179ca:	701a      	strb	r2, [r3, #0]
      value /= 10;
 80179cc:	68bb      	ldr	r3, [r7, #8]
 80179ce:	4a10      	ldr	r2, [pc, #64]	@ (8017a10 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 80179d0:	fba2 2303 	umull	r2, r3, r2, r3
 80179d4:	08db      	lsrs	r3, r3, #3
 80179d6:	60bb      	str	r3, [r7, #8]
    while (width--) {
 80179d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179dc:	b2da      	uxtb	r2, r3
 80179de:	3a01      	subs	r2, #1
 80179e0:	b2d2      	uxtb	r2, r2
 80179e2:	71fa      	strb	r2, [r7, #7]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	bf14      	ite	ne
 80179e8:	2301      	movne	r3, #1
 80179ea:	2300      	moveq	r3, #0
 80179ec:	b2db      	uxtb	r3, r3
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d1da      	bne.n	80179a8 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x1c>
    *--begin = '.';
 80179f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179f4:	3b01      	subs	r3, #1
 80179f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80179f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179fa:	222e      	movs	r2, #46	@ 0x2e
 80179fc:	701a      	strb	r2, [r3, #0]
    writeRaw(begin, end);
 80179fe:	6a3a      	ldr	r2, [r7, #32]
 8017a00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017a02:	68f8      	ldr	r0, [r7, #12]
 8017a04:	f7ff ff0e 	bl	8017824 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8017a08:	bf00      	nop
 8017a0a:	3728      	adds	r7, #40	@ 0x28
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	bd80      	pop	{r7, pc}
 8017a10:	cccccccd 	.word	0xcccccccd

08017a14 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_signed<T>::value> writeInteger(T value) {
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b084      	sub	sp, #16
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	6078      	str	r0, [r7, #4]
 8017a1c:	460b      	mov	r3, r1
 8017a1e:	807b      	strh	r3, [r7, #2]
    if (value < 0) {
 8017a20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	da07      	bge.n	8017a38 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x24>
      writeRaw('-');
 8017a28:	212d      	movs	r1, #45	@ 0x2d
 8017a2a:	6878      	ldr	r0, [r7, #4]
 8017a2c:	f7ff febe 	bl	80177ac <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 8017a30:	887b      	ldrh	r3, [r7, #2]
 8017a32:	425b      	negs	r3, r3
 8017a34:	81fb      	strh	r3, [r7, #14]
 8017a36:	e001      	b.n	8017a3c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x28>
      unsigned_value = unsigned_type(value);
 8017a38:	887b      	ldrh	r3, [r7, #2]
 8017a3a:	81fb      	strh	r3, [r7, #14]
    writeInteger(unsigned_value);
 8017a3c:	89fb      	ldrh	r3, [r7, #14]
 8017a3e:	4619      	mov	r1, r3
 8017a40:	6878      	ldr	r0, [r7, #4]
 8017a42:	f000 f81b 	bl	8017a7c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 8017a46:	bf00      	nop
 8017a48:	3710      	adds	r7, #16
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	bd80      	pop	{r7, pc}

08017a4e <_ZN11ArduinoJson8V730HB226detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>:
  void write(uint8_t c) {
 8017a4e:	b580      	push	{r7, lr}
 8017a50:	b082      	sub	sp, #8
 8017a52:	af00      	add	r7, sp, #0
 8017a54:	6078      	str	r0, [r7, #4]
 8017a56:	460b      	mov	r3, r1
 8017a58:	70fb      	strb	r3, [r7, #3]
    count_ += writer_.write(c);
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	78fa      	ldrb	r2, [r7, #3]
 8017a5e:	4611      	mov	r1, r2
 8017a60:	4618      	mov	r0, r3
 8017a62:	f000 f83f 	bl	8017ae4 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>
 8017a66:	4602      	mov	r2, r0
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	685b      	ldr	r3, [r3, #4]
 8017a6c:	441a      	add	r2, r3
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	605a      	str	r2, [r3, #4]
  }
 8017a72:	bf00      	nop
 8017a74:	3708      	adds	r7, #8
 8017a76:	46bd      	mov	sp, r7
 8017a78:	bd80      	pop	{r7, pc}
	...

08017a7c <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  enable_if_t<is_unsigned<T>::value> writeInteger(T value) {
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b08a      	sub	sp, #40	@ 0x28
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
 8017a84:	460b      	mov	r3, r1
 8017a86:	807b      	strh	r3, [r7, #2]
    char* end = buffer + sizeof(buffer);
 8017a88:	f107 0308 	add.w	r3, r7, #8
 8017a8c:	3316      	adds	r3, #22
 8017a8e:	623b      	str	r3, [r7, #32]
    char* begin = end;
 8017a90:	6a3b      	ldr	r3, [r7, #32]
 8017a92:	627b      	str	r3, [r7, #36]	@ 0x24
      *--begin = char(value % 10 + '0');
 8017a94:	887a      	ldrh	r2, [r7, #2]
 8017a96:	4b12      	ldr	r3, [pc, #72]	@ (8017ae0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 8017a98:	fba3 1302 	umull	r1, r3, r3, r2
 8017a9c:	08d9      	lsrs	r1, r3, #3
 8017a9e:	460b      	mov	r3, r1
 8017aa0:	009b      	lsls	r3, r3, #2
 8017aa2:	440b      	add	r3, r1
 8017aa4:	005b      	lsls	r3, r3, #1
 8017aa6:	1ad3      	subs	r3, r2, r3
 8017aa8:	b29b      	uxth	r3, r3
 8017aaa:	b2db      	uxtb	r3, r3
 8017aac:	3330      	adds	r3, #48	@ 0x30
 8017aae:	b2da      	uxtb	r2, r3
 8017ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ab2:	3b01      	subs	r3, #1
 8017ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8017ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ab8:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 8017aba:	887b      	ldrh	r3, [r7, #2]
 8017abc:	4a08      	ldr	r2, [pc, #32]	@ (8017ae0 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 8017abe:	fba2 2303 	umull	r2, r3, r2, r3
 8017ac2:	08db      	lsrs	r3, r3, #3
 8017ac4:	807b      	strh	r3, [r7, #2]
    } while (value);
 8017ac6:	887b      	ldrh	r3, [r7, #2]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d1e3      	bne.n	8017a94 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 8017acc:	6a3a      	ldr	r2, [r7, #32]
 8017ace:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017ad0:	6878      	ldr	r0, [r7, #4]
 8017ad2:	f7ff fea7 	bl	8017824 <_ZN11ArduinoJson8V730HB226detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 8017ad6:	bf00      	nop
 8017ad8:	3728      	adds	r7, #40	@ 0x28
 8017ada:	46bd      	mov	sp, r7
 8017adc:	bd80      	pop	{r7, pc}
 8017ade:	bf00      	nop
 8017ae0:	cccccccd 	.word	0xcccccccd

08017ae4 <_ZN11ArduinoJson8V730HB226detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>:
  size_t write(uint8_t c) {
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	b082      	sub	sp, #8
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	6078      	str	r0, [r7, #4]
 8017aec:	460b      	mov	r3, r1
 8017aee:	70fb      	strb	r3, [r7, #3]
    str_->push_back(static_cast<char>(c));
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	78fa      	ldrb	r2, [r7, #3]
 8017af6:	4611      	mov	r1, r2
 8017af8:	4618      	mov	r0, r3
 8017afa:	f010 ffc0 	bl	8028a7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
    return 1;
 8017afe:	2301      	movs	r3, #1
  }
 8017b00:	4618      	mov	r0, r3
 8017b02:	3708      	adds	r7, #8
 8017b04:	46bd      	mov	sp, r7
 8017b06:	bd80      	pop	{r7, pc}

08017b08 <_ZN7TMC2208D1Ev>:

public:

	TMC2208(std::string, float, uint16_t, uint16_t, bool, Remora*);
	static std::shared_ptr<Module> create(const JsonObject& config, Remora* instance);
	~TMC2208() = default;
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b082      	sub	sp, #8
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	6078      	str	r0, [r7, #4]
 8017b10:	4a0a      	ldr	r2, [pc, #40]	@ (8017b3c <_ZN7TMC2208D1Ev+0x34>)
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	601a      	str	r2, [r3, #0]
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	3348      	adds	r3, #72	@ 0x48
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	f7fd ff6c 	bl	80159f8 <_ZNSt10unique_ptrI14TMC2208StepperSt14default_deleteIS0_EED1Ev>
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	3328      	adds	r3, #40	@ 0x28
 8017b24:	4618      	mov	r0, r3
 8017b26:	f010 fee2 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	f7fd fbd3 	bl	80152d8 <_ZN3TMCD1Ev>
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	4618      	mov	r0, r3
 8017b36:	3708      	adds	r7, #8
 8017b38:	46bd      	mov	sp, r7
 8017b3a:	bd80      	pop	{r7, pc}
 8017b3c:	0802b670 	.word	0x0802b670

08017b40 <_ZN7TMC2208D0Ev>:
 8017b40:	b580      	push	{r7, lr}
 8017b42:	b082      	sub	sp, #8
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	6078      	str	r0, [r7, #4]
 8017b48:	6878      	ldr	r0, [r7, #4]
 8017b4a:	f7ff ffdd 	bl	8017b08 <_ZN7TMC2208D1Ev>
 8017b4e:	214c      	movs	r1, #76	@ 0x4c
 8017b50:	6878      	ldr	r0, [r7, #4]
 8017b52:	f010 fdc0 	bl	80286d6 <_ZdlPvj>
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	4618      	mov	r0, r3
 8017b5a:	3708      	adds	r7, #8
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	bd80      	pop	{r7, pc}

08017b60 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 8017b60:	b580      	push	{r7, lr}
 8017b62:	b082      	sub	sp, #8
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
 8017b68:	4a05      	ldr	r2, [pc, #20]	@ (8017b80 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	601a      	str	r2, [r3, #0]
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	4618      	mov	r0, r3
 8017b72:	f7f4 fdcf 	bl	800c714 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	4618      	mov	r0, r3
 8017b7a:	3708      	adds	r7, #8
 8017b7c:	46bd      	mov	sp, r7
 8017b7e:	bd80      	pop	{r7, pc}
 8017b80:	0802b654 	.word	0x0802b654

08017b84 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b082      	sub	sp, #8
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	6078      	str	r0, [r7, #4]
 8017b8c:	6878      	ldr	r0, [r7, #4]
 8017b8e:	f7ff ffe7 	bl	8017b60 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8017b92:	2158      	movs	r1, #88	@ 0x58
 8017b94:	6878      	ldr	r0, [r7, #4]
 8017b96:	f010 fd9e 	bl	80286d6 <_ZdlPvj>
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	3708      	adds	r7, #8
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	bd80      	pop	{r7, pc}

08017ba4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8017ba4:	b590      	push	{r4, r7, lr}
 8017ba6:	b083      	sub	sp, #12
 8017ba8:	af00      	add	r7, sp, #0
 8017baa:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	330c      	adds	r3, #12
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f000 f856 	bl	8017c62 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8017bb6:	4604      	mov	r4, r0
 8017bb8:	6878      	ldr	r0, [r7, #4]
 8017bba:	f7fe ff1a 	bl	80169f2 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	4619      	mov	r1, r3
 8017bc2:	4620      	mov	r0, r4
 8017bc4:	f000 f859 	bl	8017c7a <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2208EEvRS0_PT_>
      }
 8017bc8:	bf00      	nop
 8017bca:	370c      	adds	r7, #12
 8017bcc:	46bd      	mov	sp, r7
 8017bce:	bd90      	pop	{r4, r7, pc}

08017bd0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	b086      	sub	sp, #24
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	330c      	adds	r3, #12
 8017bdc:	4618      	mov	r0, r3
 8017bde:	f000 f840 	bl	8017c62 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 8017be2:	4602      	mov	r2, r0
 8017be4:	f107 0314 	add.w	r3, r7, #20
 8017be8:	4611      	mov	r1, r2
 8017bea:	4618      	mov	r0, r3
 8017bec:	f7fe fe5e 	bl	80168ac <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 8017bf0:	f107 0114 	add.w	r1, r7, #20
 8017bf4:	f107 030c 	add.w	r3, r7, #12
 8017bf8:	687a      	ldr	r2, [r7, #4]
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f7ff fa19 	bl	8017032 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 8017c00:	6878      	ldr	r0, [r7, #4]
 8017c02:	f7ff ffad 	bl	8017b60 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 8017c06:	f107 030c 	add.w	r3, r7, #12
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f7fe fe7a 	bl	8016904 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8017c10:	f107 0314 	add.w	r3, r7, #20
 8017c14:	4618      	mov	r0, r3
 8017c16:	f7fe fe56 	bl	80168c6 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8017c1a:	3718      	adds	r7, #24
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	bd80      	pop	{r7, pc}

08017c20 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 8017c20:	b580      	push	{r7, lr}
 8017c22:	b084      	sub	sp, #16
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	6078      	str	r0, [r7, #4]
 8017c28:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 8017c2a:	6878      	ldr	r0, [r7, #4]
 8017c2c:	f7fe fee1 	bl	80169f2 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8017c30:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8017c32:	f7f2 ff4d 	bl	800aad0 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 8017c36:	4602      	mov	r2, r0
	    ||
 8017c38:	683b      	ldr	r3, [r7, #0]
 8017c3a:	4293      	cmp	r3, r2
 8017c3c:	d005      	beq.n	8017c4a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 8017c3e:	6838      	ldr	r0, [r7, #0]
 8017c40:	f010 fd86 	bl	8028750 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8017c44:	4603      	mov	r3, r0
	    ||
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d001      	beq.n	8017c4e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 8017c4a:	2301      	movs	r3, #1
 8017c4c:	e000      	b.n	8017c50 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8017c4e:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d001      	beq.n	8017c58 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	e000      	b.n	8017c5a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 8017c58:	2300      	movs	r3, #0
      }
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	3710      	adds	r7, #16
 8017c5e:	46bd      	mov	sp, r7
 8017c60:	bd80      	pop	{r7, pc}

08017c62 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2208SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 8017c62:	b580      	push	{r7, lr}
 8017c64:	b082      	sub	sp, #8
 8017c66:	af00      	add	r7, sp, #0
 8017c68:	6078      	str	r0, [r7, #4]
 8017c6a:	6878      	ldr	r0, [r7, #4]
 8017c6c:	f7f7 f825 	bl	800ecba <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 8017c70:	4603      	mov	r3, r0
 8017c72:	4618      	mov	r0, r3
 8017c74:	3708      	adds	r7, #8
 8017c76:	46bd      	mov	sp, r7
 8017c78:	bd80      	pop	{r7, pc}

08017c7a <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2208EEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 8017c7a:	b580      	push	{r7, lr}
 8017c7c:	b082      	sub	sp, #8
 8017c7e:	af00      	add	r7, sp, #0
 8017c80:	6078      	str	r0, [r7, #4]
 8017c82:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 8017c84:	6838      	ldr	r0, [r7, #0]
 8017c86:	f000 f804 	bl	8017c92 <_ZSt8_DestroyI7TMC2208EvPT_>
 8017c8a:	bf00      	nop
 8017c8c:	3708      	adds	r7, #8
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bd80      	pop	{r7, pc}

08017c92 <_ZSt8_DestroyI7TMC2208EvPT_>:
    _Destroy(_Tp* __pointer)
 8017c92:	b580      	push	{r7, lr}
 8017c94:	b082      	sub	sp, #8
 8017c96:	af00      	add	r7, sp, #0
 8017c98:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	6878      	ldr	r0, [r7, #4]
 8017ca2:	4798      	blx	r3
    }
 8017ca4:	bf00      	nop
 8017ca6:	3708      	adds	r7, #8
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	bd80      	pop	{r7, pc}

08017cac <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>:
};

class TMC2209Stepper : public TMC2208Stepper {
    public:

        TMC2209Stepper(std::string SWRXpin, std::string SWTXpin, float RS, uint8_t addr) :
 8017cac:	b590      	push	{r4, r7, lr}
 8017cae:	b093      	sub	sp, #76	@ 0x4c
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	6178      	str	r0, [r7, #20]
 8017cb4:	6139      	str	r1, [r7, #16]
 8017cb6:	60fa      	str	r2, [r7, #12]
 8017cb8:	ed87 0a02 	vstr	s0, [r7, #8]
 8017cbc:	71fb      	strb	r3, [r7, #7]
                TMC2208Stepper(SWRXpin, SWTXpin, RS, addr) {}
 8017cbe:	697c      	ldr	r4, [r7, #20]
 8017cc0:	f107 0318 	add.w	r3, r7, #24
 8017cc4:	6939      	ldr	r1, [r7, #16]
 8017cc6:	4618      	mov	r0, r3
 8017cc8:	f011 f821 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8017ccc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017cd0:	68f9      	ldr	r1, [r7, #12]
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	f011 f81b 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8017cd8:	79fb      	ldrb	r3, [r7, #7]
 8017cda:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8017cde:	f107 0118 	add.w	r1, r7, #24
 8017ce2:	ed97 0a02 	vldr	s0, [r7, #8]
 8017ce6:	4620      	mov	r0, r4
 8017ce8:	f7eb ffe6 	bl	8003cb8 <_ZN14TMC2208StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 8017cec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8017cf0:	4618      	mov	r0, r3
 8017cf2:	f010 fdfc 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8017cf6:	f107 0318 	add.w	r3, r7, #24
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f010 fdf7 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8017d00:	4a0f      	ldr	r2, [pc, #60]	@ (8017d40 <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh+0x94>)
 8017d02:	697b      	ldr	r3, [r7, #20]
 8017d04:	601a      	str	r2, [r3, #0]
 8017d06:	697b      	ldr	r3, [r7, #20]
 8017d08:	2200      	movs	r2, #0
 8017d0a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8017d0e:	2200      	movs	r2, #0
 8017d10:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 8017d14:	f893 2067 	ldrb.w	r2, [r3, #103]	@ 0x67
 8017d18:	f022 020f 	bic.w	r2, r2, #15
 8017d1c:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
 8017d20:	697b      	ldr	r3, [r7, #20]
 8017d22:	2200      	movs	r2, #0
 8017d24:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 8017d28:	697b      	ldr	r3, [r7, #20]
 8017d2a:	2200      	movs	r2, #0
 8017d2c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 8017d30:	2200      	movs	r2, #0
 8017d32:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
 8017d36:	697b      	ldr	r3, [r7, #20]
 8017d38:	4618      	mov	r0, r3
 8017d3a:	374c      	adds	r7, #76	@ 0x4c
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd90      	pop	{r4, r7, pc}
 8017d40:	0802b6f8 	.word	0x0802b6f8

08017d44 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b082      	sub	sp, #8
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	6078      	str	r0, [r7, #4]
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	3304      	adds	r3, #4
 8017d50:	4618      	mov	r0, r3
 8017d52:	f7f4 f8ac 	bl	800beae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	4618      	mov	r0, r3
 8017d5a:	3708      	adds	r7, #8
 8017d5c:	46bd      	mov	sp, r7
 8017d5e:	bd80      	pop	{r7, pc}

08017d60 <_ZNSt10shared_ptrI7TMC2209ED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b082      	sub	sp, #8
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	6078      	str	r0, [r7, #4]
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	f7ff ffea 	bl	8017d44 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	4618      	mov	r0, r3
 8017d74:	3708      	adds	r7, #8
 8017d76:	46bd      	mov	sp, r7
 8017d78:	bd80      	pop	{r7, pc}
	...

08017d7c <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "tmc.h"
#include <cstdint>

#define TOFF_VALUE  4 // [1... 15]

std::shared_ptr<Module> TMC2209::create(const JsonObject& config, Remora* instance) {
 8017d7c:	b590      	push	{r4, r7, lr}
 8017d7e:	b0c9      	sub	sp, #292	@ 0x124
 8017d80:	af06      	add	r7, sp, #24
 8017d82:	60f8      	str	r0, [r7, #12]
 8017d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017d88:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017d8c:	6019      	str	r1, [r3, #0]
 8017d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017d92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8017d96:	601a      	str	r2, [r3, #0]
    printf("Creating TMC2209 module\n");
 8017d98:	4868      	ldr	r0, [pc, #416]	@ (8017f3c <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c0>)
 8017d9a:	f011 fbc7 	bl	802952c <puts>

    const char* comment = config["Comment"];
 8017d9e:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8017da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017da6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017daa:	4a65      	ldr	r2, [pc, #404]	@ (8017f40 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c4>)
 8017dac:	6819      	ldr	r1, [r3, #0]
 8017dae:	f7fa fb10 	bl	80123d2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017db2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8017db6:	4618      	mov	r0, r3
 8017db8:	f7ef fe82 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8017dbc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    printf("Comment: %s\n", comment);
 8017dc0:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8017dc4:	485f      	ldr	r0, [pc, #380]	@ (8017f44 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1c8>)
 8017dc6:	f011 fb41 	bl	802944c <iprintf>

    std::string RxPin = config["RX pin"];
 8017dca:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8017dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017dd2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017dd6:	4a5c      	ldr	r2, [pc, #368]	@ (8017f48 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1cc>)
 8017dd8:	6819      	ldr	r1, [r3, #0]
 8017dda:	f7ef fe4c 	bl	8007a76 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017de2:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8017de6:	4611      	mov	r1, r2
 8017de8:	4618      	mov	r0, r3
 8017dea:	f7fd fd55 	bl	8015898 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    float RSense = config["RSense"];
 8017dee:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8017df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017df6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017dfa:	4a54      	ldr	r2, [pc, #336]	@ (8017f4c <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d0>)
 8017dfc:	6819      	ldr	r1, [r3, #0]
 8017dfe:	f7ef fe3a 	bl	8007a76 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017e02:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8017e06:	4618      	mov	r0, r3
 8017e08:	f7fd fd54 	bl	80158b4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>
 8017e0c:	eef0 7a40 	vmov.f32	s15, s0
 8017e10:	edc7 7a08 	vstr	s15, [r7, #32]
    uint8_t address = config["Address"];
 8017e14:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8017e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017e1c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017e20:	4a4b      	ldr	r2, [pc, #300]	@ (8017f50 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d4>)
 8017e22:	6819      	ldr	r1, [r3, #0]
 8017e24:	f7fa fad5 	bl	80123d2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017e28:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	f000 fa47 	bl	80182c0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>
 8017e32:	4603      	mov	r3, r0
 8017e34:	77fb      	strb	r3, [r7, #31]
    uint16_t current = config["Current"];
 8017e36:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8017e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017e3e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017e42:	4a44      	ldr	r2, [pc, #272]	@ (8017f54 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1d8>)
 8017e44:	6819      	ldr	r1, [r3, #0]
 8017e46:	f7fa fac4 	bl	80123d2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017e4a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8017e4e:	4618      	mov	r0, r3
 8017e50:	f7fd fd3e 	bl	80158d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8017e54:	4603      	mov	r3, r0
 8017e56:	83bb      	strh	r3, [r7, #28]
    uint16_t microsteps = config["Microsteps"];
 8017e58:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8017e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017e60:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017e64:	4a3c      	ldr	r2, [pc, #240]	@ (8017f58 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1dc>)
 8017e66:	6819      	ldr	r1, [r3, #0]
 8017e68:	f7f7 fadf 	bl	800f42a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017e6c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8017e70:	4618      	mov	r0, r3
 8017e72:	f7fd fd2d 	bl	80158d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8017e76:	4603      	mov	r3, r0
 8017e78:	837b      	strh	r3, [r7, #26]
    uint16_t stall = config["Stall sensitivity"];
 8017e7a:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8017e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017e82:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017e86:	4a35      	ldr	r2, [pc, #212]	@ (8017f5c <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1e0>)
 8017e88:	6819      	ldr	r1, [r3, #0]
 8017e8a:	f000 fa25 	bl	80182d8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017e8e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8017e92:	4618      	mov	r0, r3
 8017e94:	f7fd fd1c 	bl	80158d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8017e98:	4603      	mov	r3, r0
 8017e9a:	833b      	strh	r3, [r7, #24]
    bool stealthchop = (strcmp(config["Stealth chop"], "on") == 0);
 8017e9c:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8017ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8017ea4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8017ea8:	4a2d      	ldr	r2, [pc, #180]	@ (8017f60 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1e4>)
 8017eaa:	6819      	ldr	r1, [r3, #0]
 8017eac:	f7fc f966 	bl	801417c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8017eb0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	f7ef fe03 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8017eba:	4603      	mov	r3, r0
 8017ebc:	4929      	ldr	r1, [pc, #164]	@ (8017f64 <_ZN7TMC22096createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x1e8>)
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	f7e8 fa0e 	bl	80002e0 <strcmp>
 8017ec4:	4603      	mov	r3, r0
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	bf0c      	ite	eq
 8017eca:	2301      	moveq	r3, #1
 8017ecc:	2300      	movne	r3, #0
 8017ece:	b2db      	uxtb	r3, r3
 8017ed0:	75fb      	strb	r3, [r7, #23]

    return std::make_shared<TMC2209>(std::move(RxPin), RSense, address, current, microsteps, stealthchop, stall, instance);
 8017ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	f7f9 fb39 	bl	801154e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8017edc:	4604      	mov	r4, r0
 8017ede:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8017ee2:	f107 011f 	add.w	r1, r7, #31
 8017ee6:	f107 0220 	add.w	r2, r7, #32
 8017eea:	1d3b      	adds	r3, r7, #4
 8017eec:	9304      	str	r3, [sp, #16]
 8017eee:	f107 0318 	add.w	r3, r7, #24
 8017ef2:	9303      	str	r3, [sp, #12]
 8017ef4:	f107 0317 	add.w	r3, r7, #23
 8017ef8:	9302      	str	r3, [sp, #8]
 8017efa:	f107 031a 	add.w	r3, r7, #26
 8017efe:	9301      	str	r3, [sp, #4]
 8017f00:	f107 031c 	add.w	r3, r7, #28
 8017f04:	9300      	str	r3, [sp, #0]
 8017f06:	460b      	mov	r3, r1
 8017f08:	4621      	mov	r1, r4
 8017f0a:	f000 fa0a 	bl	8018322 <_ZSt11make_sharedI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>
 8017f0e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8017f12:	4619      	mov	r1, r3
 8017f14:	68f8      	ldr	r0, [r7, #12]
 8017f16:	f000 fa42 	bl	801839e <_ZNSt10shared_ptrI6ModuleEC1I7TMC2209vEEOS_IT_E>
 8017f1a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8017f1e:	4618      	mov	r0, r3
 8017f20:	f7ff ff1e 	bl	8017d60 <_ZNSt10shared_ptrI7TMC2209ED1Ev>
}
 8017f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017f28:	4618      	mov	r0, r3
 8017f2a:	f010 fce0 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    return std::make_shared<TMC2209>(std::move(RxPin), RSense, address, current, microsteps, stealthchop, stall, instance);
 8017f2e:	bf00      	nop
}
 8017f30:	68f8      	ldr	r0, [r7, #12]
 8017f32:	f507 7786 	add.w	r7, r7, #268	@ 0x10c
 8017f36:	46bd      	mov	sp, r7
 8017f38:	bd90      	pop	{r4, r7, pc}
 8017f3a:	bf00      	nop
 8017f3c:	0802add4 	.word	0x0802add4
 8017f40:	0802adec 	.word	0x0802adec
 8017f44:	0802adf4 	.word	0x0802adf4
 8017f48:	0802ae04 	.word	0x0802ae04
 8017f4c:	0802ae0c 	.word	0x0802ae0c
 8017f50:	0802ae14 	.word	0x0802ae14
 8017f54:	0802ae1c 	.word	0x0802ae1c
 8017f58:	0802ae24 	.word	0x0802ae24
 8017f5c:	0802ae30 	.word	0x0802ae30
 8017f60:	0802ae44 	.word	0x0802ae44
 8017f64:	0802ae54 	.word	0x0802ae54

08017f68 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbtP6Remora>:

TMC2209::TMC2209(std::string _rxtxPin, float _Rsense, uint8_t _addr, uint16_t _mA, uint16_t _microsteps, bool _stealth, uint16_t _stall, Remora* _instance)
 8017f68:	b5b0      	push	{r4, r5, r7, lr}
 8017f6a:	b086      	sub	sp, #24
 8017f6c:	af02      	add	r7, sp, #8
 8017f6e:	60f8      	str	r0, [r7, #12]
 8017f70:	60b9      	str	r1, [r7, #8]
 8017f72:	ed87 0a01 	vstr	s0, [r7, #4]
 8017f76:	4611      	mov	r1, r2
 8017f78:	461a      	mov	r2, r3
 8017f7a:	460b      	mov	r3, r1
 8017f7c:	70fb      	strb	r3, [r7, #3]
 8017f7e:	4613      	mov	r3, r2
 8017f80:	803b      	strh	r3, [r7, #0]
      addr(_addr),
      mA(_mA),
      microsteps(_microsteps),
      stealth(_stealth),
      stall(_stall),
      driver(std::make_unique<TMC2209Stepper>(rxtxPin, rxtxPin, Rsense, addr)) {}
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	ed97 0a01 	vldr	s0, [r7, #4]
 8017f88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	f7fd f8a0 	bl	80150d0 <_ZN3TMCC1EP6Remoraf>
 8017f90:	4a1d      	ldr	r2, [pc, #116]	@ (8018008 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbtP6Remora+0xa0>)
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	601a      	str	r2, [r3, #0]
      rxtxPin(std::move(_rxtxPin)),
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8017f9c:	68b8      	ldr	r0, [r7, #8]
 8017f9e:	f7f9 fad6 	bl	801154e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8017fa2:	4603      	mov	r3, r0
 8017fa4:	4619      	mov	r1, r3
 8017fa6:	4620      	mov	r0, r4
 8017fa8:	f010 fc82 	bl	80288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      addr(_addr),
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	78fa      	ldrb	r2, [r7, #3]
 8017fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      mA(_mA),
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	883a      	ldrh	r2, [r7, #0]
 8017fb8:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
      microsteps(_microsteps),
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	8c3a      	ldrh	r2, [r7, #32]
 8017fc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      stealth(_stealth),
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8017fca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      stall(_stall),
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8017fd2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      driver(std::make_unique<TMC2209Stepper>(rxtxPin, rxtxPin, Rsense, addr)) {}
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8017fdc:	68fb      	ldr	r3, [r7, #12]
 8017fde:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	f103 0524 	add.w	r5, r3, #36	@ 0x24
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	3340      	adds	r3, #64	@ 0x40
 8017fec:	68fa      	ldr	r2, [r7, #12]
 8017fee:	f102 004c 	add.w	r0, r2, #76	@ 0x4c
 8017ff2:	9300      	str	r3, [sp, #0]
 8017ff4:	462b      	mov	r3, r5
 8017ff6:	4622      	mov	r2, r4
 8017ff8:	f000 f9e4 	bl	80183c4 <_ZSt11make_uniqueI14TMC2209StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfRhEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	4618      	mov	r0, r3
 8018000:	3710      	adds	r7, #16
 8018002:	46bd      	mov	sp, r7
 8018004:	bdb0      	pop	{r4, r5, r7, pc}
 8018006:	bf00      	nop
 8018008:	0802b6d4 	.word	0x0802b6d4

0801800c <_ZN7TMC22099configureEv>:


void TMC2209::configure()
{
 801800c:	b590      	push	{r4, r7, lr}
 801800e:	b08b      	sub	sp, #44	@ 0x2c
 8018010:	af00      	add	r7, sp, #0
 8018012:	6078      	str	r0, [r7, #4]
    printf("\nStarting the Serial thread\n");
 8018014:	4897      	ldr	r0, [pc, #604]	@ (8018274 <_ZN7TMC22099configureEv+0x268>)
 8018016:	f011 fa89 	bl	802952c <puts>
    instance->getSerialThread()->startThread();
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	6a1b      	ldr	r3, [r3, #32]
 801801e:	4618      	mov	r0, r3
 8018020:	f7fd f801 	bl	8015026 <_ZN6Remora15getSerialThreadEv>
 8018024:	4603      	mov	r3, r0
 8018026:	4618      	mov	r0, r3
 8018028:	f002 ff2a 	bl	801ae80 <_ZN9pruThread11startThreadEv>

    auto self = shared_from_this();
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	f103 0218 	add.w	r2, r3, #24
 8018032:	f107 030c 	add.w	r3, r7, #12
 8018036:	4611      	mov	r1, r2
 8018038:	4618      	mov	r0, r3
 801803a:	f7fd fc1f 	bl	801587c <_ZNSt23enable_shared_from_thisI3TMCE16shared_from_thisEv>
    instance->getSerialThread()->registerModule(self);
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	6a1b      	ldr	r3, [r3, #32]
 8018042:	4618      	mov	r0, r3
 8018044:	f7fc ffef 	bl	8015026 <_ZN6Remora15getSerialThreadEv>
 8018048:	4604      	mov	r4, r0
 801804a:	f107 020c 	add.w	r2, r7, #12
 801804e:	f107 0314 	add.w	r3, r7, #20
 8018052:	4611      	mov	r1, r2
 8018054:	4618      	mov	r0, r3
 8018056:	f7fd fcf1 	bl	8015a3c <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 801805a:	f107 0314 	add.w	r3, r7, #20
 801805e:	4619      	mov	r1, r3
 8018060:	4620      	mov	r0, r4
 8018062:	f002 fe79 	bl	801ad58 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 8018066:	f107 0314 	add.w	r3, r7, #20
 801806a:	4618      	mov	r0, r3
 801806c:	f7f3 f8f1 	bl	800b252 <_ZNSt10shared_ptrI6ModuleED1Ev>

    driver->begin();
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	334c      	adds	r3, #76	@ 0x4c
 8018074:	4618      	mov	r0, r3
 8018076:	f000 fa12 	bl	801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 801807a:	4603      	mov	r3, r0
 801807c:	4618      	mov	r0, r3
 801807e:	f7eb fecd 	bl	8003e1c <_ZN14TMC2208Stepper5beginEv>

    printf("Testing connection to TMC driver... ");
 8018082:	487d      	ldr	r0, [pc, #500]	@ (8018278 <_ZN7TMC22099configureEv+0x26c>)
 8018084:	f011 f9e2 	bl	802944c <iprintf>
    uint16_t result = driver->test_connection();
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	334c      	adds	r3, #76	@ 0x4c
 801808c:	4618      	mov	r0, r3
 801808e:	f000 fa06 	bl	801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018092:	4603      	mov	r3, r0
 8018094:	4618      	mov	r0, r3
 8018096:	f7ec fc57 	bl	8004948 <_ZN10TMCStepper15test_connectionEv>
 801809a:	4603      	mov	r3, r0
 801809c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    
    if (result) {
 801809e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d018      	beq.n	80180d6 <_ZN7TMC22099configureEv+0xca>
        printf("Failed!\nLikely cause: ");
 80180a4:	4875      	ldr	r0, [pc, #468]	@ (801827c <_ZN7TMC22099configureEv+0x270>)
 80180a6:	f011 f9d1 	bl	802944c <iprintf>
        switch(result) {
 80180aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80180ac:	2b01      	cmp	r3, #1
 80180ae:	d002      	beq.n	80180b6 <_ZN7TMC22099configureEv+0xaa>
 80180b0:	2b02      	cmp	r3, #2
 80180b2:	d004      	beq.n	80180be <_ZN7TMC22099configureEv+0xb2>
 80180b4:	e007      	b.n	80180c6 <_ZN7TMC22099configureEv+0xba>
            case 1: printf("Loose connection\n"); break;
 80180b6:	4872      	ldr	r0, [pc, #456]	@ (8018280 <_ZN7TMC22099configureEv+0x274>)
 80180b8:	f011 fa38 	bl	802952c <puts>
 80180bc:	e007      	b.n	80180ce <_ZN7TMC22099configureEv+0xc2>
            case 2: printf("No power\n"); break;
 80180be:	4871      	ldr	r0, [pc, #452]	@ (8018284 <_ZN7TMC22099configureEv+0x278>)
 80180c0:	f011 fa34 	bl	802952c <puts>
 80180c4:	e003      	b.n	80180ce <_ZN7TMC22099configureEv+0xc2>
            default: printf("Unknown issue\n"); break;
 80180c6:	4870      	ldr	r0, [pc, #448]	@ (8018288 <_ZN7TMC22099configureEv+0x27c>)
 80180c8:	f011 fa30 	bl	802952c <puts>
 80180cc:	bf00      	nop
        }
        printf("Fix the problem and reset the board.\n");
 80180ce:	486f      	ldr	r0, [pc, #444]	@ (801828c <_ZN7TMC22099configureEv+0x280>)
 80180d0:	f011 fa2c 	bl	802952c <puts>
 80180d4:	e002      	b.n	80180dc <_ZN7TMC22099configureEv+0xd0>
    } else {
        printf("OK\n");
 80180d6:	486e      	ldr	r0, [pc, #440]	@ (8018290 <_ZN7TMC22099configureEv+0x284>)
 80180d8:	f011 fa28 	bl	802952c <puts>
    }

    // Configure driver settings
    driver->toff(TOFF_VALUE);
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	334c      	adds	r3, #76	@ 0x4c
 80180e0:	4618      	mov	r0, r3
 80180e2:	f000 f9dc 	bl	801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 80180e6:	4603      	mov	r3, r0
 80180e8:	2104      	movs	r1, #4
 80180ea:	4618      	mov	r0, r3
 80180ec:	f7ea fe61 	bl	8002db2 <_ZN14TMC2208Stepper4toffEh>
    driver->blank_time(24);
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	334c      	adds	r3, #76	@ 0x4c
 80180f4:	4618      	mov	r0, r3
 80180f6:	f000 f9d2 	bl	801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 80180fa:	4603      	mov	r3, r0
 80180fc:	2118      	movs	r1, #24
 80180fe:	4618      	mov	r0, r3
 8018100:	f7ec fcee 	bl	8004ae0 <_ZN10TMCStepper10blank_timeEh>
    driver->rms_current(mA);
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	334c      	adds	r3, #76	@ 0x4c
 8018108:	4618      	mov	r0, r3
 801810a:	f000 f9c8 	bl	801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 801810e:	4603      	mov	r3, r0
 8018110:	461a      	mov	r2, r3
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8018118:	4619      	mov	r1, r3
 801811a:	4610      	mov	r0, r2
 801811c:	f7ec fb78 	bl	8004810 <_ZN10TMCStepper11rms_currentEt>
    driver->microsteps(microsteps);
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	334c      	adds	r3, #76	@ 0x4c
 8018124:	4618      	mov	r0, r3
 8018126:	f000 f9ba 	bl	801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 801812a:	4603      	mov	r3, r0
 801812c:	461a      	mov	r2, r3
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8018134:	4619      	mov	r1, r3
 8018136:	4610      	mov	r0, r2
 8018138:	f7ec fc22 	bl	8004980 <_ZN10TMCStepper10microstepsEt>
    driver->TCOOLTHRS(0xFFFFF);  // 20-bit max threshold for smart energy CoolStep
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	334c      	adds	r3, #76	@ 0x4c
 8018140:	4618      	mov	r0, r3
 8018142:	f000 f9ac 	bl	801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018146:	4603      	mov	r3, r0
 8018148:	4952      	ldr	r1, [pc, #328]	@ (8018294 <_ZN7TMC22099configureEv+0x288>)
 801814a:	4618      	mov	r0, r3
 801814c:	f7ec f980 	bl	8004450 <_ZN14TMC2209Stepper9TCOOLTHRSEm>
    driver->semin(5);             // CoolStep lower threshold
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	334c      	adds	r3, #76	@ 0x4c
 8018154:	4618      	mov	r0, r3
 8018156:	f000 f9a2 	bl	801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 801815a:	4603      	mov	r3, r0
 801815c:	2105      	movs	r1, #5
 801815e:	4618      	mov	r0, r3
 8018160:	f7eb f80c 	bl	800317c <_ZN14TMC2209Stepper5seminEh>
    driver->semax(2);             // CoolStep upper threshold
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	334c      	adds	r3, #76	@ 0x4c
 8018168:	4618      	mov	r0, r3
 801816a:	f000 f998 	bl	801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 801816e:	4603      	mov	r3, r0
 8018170:	2102      	movs	r1, #2
 8018172:	4618      	mov	r0, r3
 8018174:	f7eb f821 	bl	80031ba <_ZN14TMC2209Stepper5semaxEh>
    driver->sedn(0b01);           // CoolStep decrement rate
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	334c      	adds	r3, #76	@ 0x4c
 801817c:	4618      	mov	r0, r3
 801817e:	f000 f98e 	bl	801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018182:	4603      	mov	r3, r0
 8018184:	2101      	movs	r1, #1
 8018186:	4618      	mov	r0, r3
 8018188:	f7eb f836 	bl	80031f8 <_ZN14TMC2209Stepper4sednEh>
    driver->en_spreadCycle(!stealth);
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	334c      	adds	r3, #76	@ 0x4c
 8018190:	4618      	mov	r0, r3
 8018192:	f000 f984 	bl	801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018196:	4603      	mov	r3, r0
 8018198:	461a      	mov	r2, r3
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80181a0:	f083 0301 	eor.w	r3, r3, #1
 80181a4:	b2db      	uxtb	r3, r3
 80181a6:	4619      	mov	r1, r3
 80181a8:	4610      	mov	r0, r2
 80181aa:	f7eb f890 	bl	80032ce <_ZN14TMC2208Stepper14en_spreadCycleEb>
    driver->pwm_autoscale(true);
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	334c      	adds	r3, #76	@ 0x4c
 80181b2:	4618      	mov	r0, r3
 80181b4:	f000 f973 	bl	801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 80181b8:	4603      	mov	r3, r0
 80181ba:	2101      	movs	r1, #1
 80181bc:	4618      	mov	r0, r3
 80181be:	f7eb f989 	bl	80034d4 <_ZN14TMC2208Stepper13pwm_autoscaleEb>

    if (stealth && stall) {
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d012      	beq.n	80181f2 <_ZN7TMC22099configureEv+0x1e6>
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d00d      	beq.n	80181f2 <_ZN7TMC22099configureEv+0x1e6>
        // StallGuard sensitivity threshold (higher = more sensitive)
        driver->SGTHRS(stall);
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	334c      	adds	r3, #76	@ 0x4c
 80181da:	4618      	mov	r0, r3
 80181dc:	f000 f95f 	bl	801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 80181e0:	4602      	mov	r2, r0
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80181e8:	b2db      	uxtb	r3, r3
 80181ea:	4619      	mov	r1, r3
 80181ec:	4610      	mov	r0, r2
 80181ee:	f7ec f918 	bl	8004422 <_ZN14TMC2209Stepper6SGTHRSEh>
    }

    driver->iholddelay(10);
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	334c      	adds	r3, #76	@ 0x4c
 80181f6:	4618      	mov	r0, r3
 80181f8:	f000 f951 	bl	801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 80181fc:	4603      	mov	r3, r0
 80181fe:	210a      	movs	r1, #10
 8018200:	4618      	mov	r0, r3
 8018202:	f7eb f91c 	bl	800343e <_ZN10TMCStepper10iholddelayEh>
    driver->TPOWERDOWN(128);  // ~2s until driver lowers to hold current
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	334c      	adds	r3, #76	@ 0x4c
 801820a:	4618      	mov	r0, r3
 801820c:	f000 f947 	bl	801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 8018210:	4603      	mov	r3, r0
 8018212:	2180      	movs	r1, #128	@ 0x80
 8018214:	4618      	mov	r0, r3
 8018216:	f7ec fc9b 	bl	8004b50 <_ZN10TMCStepper10TPOWERDOWNEh>

    printf("\nStopping the Serial thread\n");
 801821a:	481f      	ldr	r0, [pc, #124]	@ (8018298 <_ZN7TMC22099configureEv+0x28c>)
 801821c:	f011 f986 	bl	802952c <puts>
    instance->getSerialThread()->stopThread();
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	6a1b      	ldr	r3, [r3, #32]
 8018224:	4618      	mov	r0, r3
 8018226:	f7fc fefe 	bl	8015026 <_ZN6Remora15getSerialThreadEv>
 801822a:	4603      	mov	r3, r0
 801822c:	4618      	mov	r0, r3
 801822e:	f002 fe54 	bl	801aeda <_ZN9pruThread10stopThreadEv>
    instance->getSerialThread()->unregisterModule(self);
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	6a1b      	ldr	r3, [r3, #32]
 8018236:	4618      	mov	r0, r3
 8018238:	f7fc fef5 	bl	8015026 <_ZN6Remora15getSerialThreadEv>
 801823c:	4604      	mov	r4, r0
 801823e:	f107 020c 	add.w	r2, r7, #12
 8018242:	f107 031c 	add.w	r3, r7, #28
 8018246:	4611      	mov	r1, r2
 8018248:	4618      	mov	r0, r3
 801824a:	f7fd fbf7 	bl	8015a3c <_ZNSt10shared_ptrI6ModuleEC1I3TMCvEERKS_IT_E>
 801824e:	f107 031c 	add.w	r3, r7, #28
 8018252:	4619      	mov	r1, r3
 8018254:	4620      	mov	r0, r4
 8018256:	f002 fdcb 	bl	801adf0 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>
 801825a:	f107 031c 	add.w	r3, r7, #28
 801825e:	4618      	mov	r0, r3
 8018260:	f7f2 fff7 	bl	800b252 <_ZNSt10shared_ptrI6ModuleED1Ev>
}
 8018264:	f107 030c 	add.w	r3, r7, #12
 8018268:	4618      	mov	r0, r3
 801826a:	f7fc ff5f 	bl	801512c <_ZNSt10shared_ptrI3TMCED1Ev>
 801826e:	372c      	adds	r7, #44	@ 0x2c
 8018270:	46bd      	mov	sp, r7
 8018272:	bd90      	pop	{r4, r7, pc}
 8018274:	0802ae58 	.word	0x0802ae58
 8018278:	0802ae74 	.word	0x0802ae74
 801827c:	0802ae9c 	.word	0x0802ae9c
 8018280:	0802aeb4 	.word	0x0802aeb4
 8018284:	0802aec8 	.word	0x0802aec8
 8018288:	0802aed4 	.word	0x0802aed4
 801828c:	0802aee4 	.word	0x0802aee4
 8018290:	0802af0c 	.word	0x0802af0c
 8018294:	000fffff 	.word	0x000fffff
 8018298:	0802af10 	.word	0x0802af10

0801829c <_ZN7TMC22096updateEv>:

void TMC2209::update()
{
 801829c:	b580      	push	{r7, lr}
 801829e:	b082      	sub	sp, #8
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	6078      	str	r0, [r7, #4]
    driver->SWSerial->tickerHandler();
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	334c      	adds	r3, #76	@ 0x4c
 80182a8:	4618      	mov	r0, r3
 80182aa:	f000 f8f8 	bl	801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>
 80182ae:	4603      	mov	r3, r0
 80182b0:	695b      	ldr	r3, [r3, #20]
 80182b2:	4618      	mov	r0, r3
 80182b4:	f7ea fa8b 	bl	80027ce <_ZN14SoftwareSerial13tickerHandlerEv>
}
 80182b8:	bf00      	nop
 80182ba:	3708      	adds	r7, #8
 80182bc:	46bd      	mov	sp, r7
 80182be:	bd80      	pop	{r7, pc}

080182c0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>:
  operator T() const {
 80182c0:	b580      	push	{r7, lr}
 80182c2:	b082      	sub	sp, #8
 80182c4:	af00      	add	r7, sp, #0
 80182c6:	6078      	str	r0, [r7, #4]
    return as<T>();
 80182c8:	6878      	ldr	r0, [r7, #4]
 80182ca:	f000 f8f4 	bl	80184b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIhEET_v>
 80182ce:	4603      	mov	r3, r0
  }
 80182d0:	4618      	mov	r0, r3
 80182d2:	3708      	adds	r7, #8
 80182d4:	46bd      	mov	sp, r7
 80182d6:	bd80      	pop	{r7, pc}

080182d8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 80182d8:	b580      	push	{r7, lr}
 80182da:	b08c      	sub	sp, #48	@ 0x30
 80182dc:	af02      	add	r7, sp, #8
 80182de:	60f8      	str	r0, [r7, #12]
 80182e0:	60b9      	str	r1, [r7, #8]
 80182e2:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 80182e4:	68ba      	ldr	r2, [r7, #8]
 80182e6:	f107 0314 	add.w	r3, r7, #20
 80182ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80182ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80182f2:	f107 031c 	add.w	r3, r7, #28
 80182f6:	6879      	ldr	r1, [r7, #4]
 80182f8:	4618      	mov	r0, r3
 80182fa:	f000 f8fe 	bl	80184fa <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA18_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80182fe:	466a      	mov	r2, sp
 8018300:	f107 0320 	add.w	r3, r7, #32
 8018304:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018308:	e882 0003 	stmia.w	r2, {r0, r1}
 801830c:	69fb      	ldr	r3, [r7, #28]
 801830e:	f107 0214 	add.w	r2, r7, #20
 8018312:	ca06      	ldmia	r2, {r1, r2}
 8018314:	68f8      	ldr	r0, [r7, #12]
 8018316:	f7ef fd42 	bl	8007d9e <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 801831a:	68f8      	ldr	r0, [r7, #12]
 801831c:	3728      	adds	r7, #40	@ 0x28
 801831e:	46bd      	mov	sp, r7
 8018320:	bd80      	pop	{r7, pc}

08018322 <_ZSt11make_sharedI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 8018322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018326:	b08e      	sub	sp, #56	@ 0x38
 8018328:	af06      	add	r7, sp, #24
 801832a:	6178      	str	r0, [r7, #20]
 801832c:	6139      	str	r1, [r7, #16]
 801832e:	60fa      	str	r2, [r7, #12]
 8018330:	60bb      	str	r3, [r7, #8]
			     std::forward<_Args>(__args)...);
 8018332:	f107 031c 	add.w	r3, r7, #28
 8018336:	469a      	mov	sl, r3
 8018338:	6938      	ldr	r0, [r7, #16]
 801833a:	f7fd fc51 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801833e:	4680      	mov	r8, r0
 8018340:	68f8      	ldr	r0, [r7, #12]
 8018342:	f7fd fc58 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8018346:	4681      	mov	r9, r0
 8018348:	68b8      	ldr	r0, [r7, #8]
 801834a:	f000 f8e9 	bl	8018520 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801834e:	4604      	mov	r4, r0
 8018350:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8018352:	f7fd fc5b 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018356:	4605      	mov	r5, r0
 8018358:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801835a:	f7fd fc57 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801835e:	4606      	mov	r6, r0
 8018360:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8018362:	f7f9 f944 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8018366:	6078      	str	r0, [r7, #4]
 8018368:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801836a:	f7fd fc4f 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801836e:	6038      	str	r0, [r7, #0]
 8018370:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8018372:	f7fd fc56 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8018376:	4603      	mov	r3, r0
 8018378:	9305      	str	r3, [sp, #20]
 801837a:	683b      	ldr	r3, [r7, #0]
 801837c:	9304      	str	r3, [sp, #16]
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	9303      	str	r3, [sp, #12]
 8018382:	9602      	str	r6, [sp, #8]
 8018384:	9501      	str	r5, [sp, #4]
 8018386:	9400      	str	r4, [sp, #0]
 8018388:	464b      	mov	r3, r9
 801838a:	4642      	mov	r2, r8
 801838c:	4651      	mov	r1, sl
 801838e:	6978      	ldr	r0, [r7, #20]
 8018390:	f000 f8d1 	bl	8018536 <_ZNSt10shared_ptrI7TMC2209EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8018394:	6978      	ldr	r0, [r7, #20]
 8018396:	3720      	adds	r7, #32
 8018398:	46bd      	mov	sp, r7
 801839a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801839e <_ZNSt10shared_ptrI6ModuleEC1I7TMC2209vEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 801839e:	b590      	push	{r4, r7, lr}
 80183a0:	b083      	sub	sp, #12
 80183a2:	af00      	add	r7, sp, #0
 80183a4:	6078      	str	r0, [r7, #4]
 80183a6:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 80183a8:	687c      	ldr	r4, [r7, #4]
 80183aa:	6838      	ldr	r0, [r7, #0]
 80183ac:	f000 f901 	bl	80185b2 <_ZSt4moveIRSt10shared_ptrI7TMC2209EEONSt16remove_referenceIT_E4typeEOS5_>
 80183b0:	4603      	mov	r3, r0
 80183b2:	4619      	mov	r1, r3
 80183b4:	4620      	mov	r0, r4
 80183b6:	f000 f907 	bl	80185c8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209vEEOS_IT_LS2_0EE>
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	4618      	mov	r0, r3
 80183be:	370c      	adds	r7, #12
 80183c0:	46bd      	mov	sp, r7
 80183c2:	bd90      	pop	{r4, r7, pc}

080183c4 <_ZSt11make_uniqueI14TMC2209StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_RfRhEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80183c4:	b590      	push	{r4, r7, lr}
 80183c6:	ed2d 8b02 	vpush	{d8}
 80183ca:	b091      	sub	sp, #68	@ 0x44
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	60f8      	str	r0, [r7, #12]
 80183d0:	60b9      	str	r1, [r7, #8]
 80183d2:	607a      	str	r2, [r7, #4]
 80183d4:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80183d6:	206c      	movs	r0, #108	@ 0x6c
 80183d8:	f010 f98e 	bl	80286f8 <_Znwj>
 80183dc:	4603      	mov	r3, r0
 80183de:	461c      	mov	r4, r3
 80183e0:	68b8      	ldr	r0, [r7, #8]
 80183e2:	f7f7 fa23 	bl	800f82c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80183e6:	4602      	mov	r2, r0
 80183e8:	f107 0310 	add.w	r3, r7, #16
 80183ec:	4611      	mov	r1, r2
 80183ee:	4618      	mov	r0, r3
 80183f0:	f010 fc8d 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80183f4:	6878      	ldr	r0, [r7, #4]
 80183f6:	f7f7 fa19 	bl	800f82c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80183fa:	4602      	mov	r2, r0
 80183fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018400:	4611      	mov	r1, r2
 8018402:	4618      	mov	r0, r3
 8018404:	f010 fc83 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8018408:	6838      	ldr	r0, [r7, #0]
 801840a:	f7fd fbf4 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801840e:	4603      	mov	r3, r0
 8018410:	ed93 8a00 	vldr	s16, [r3]
 8018414:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8018416:	f000 f883 	bl	8018520 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801841a:	4603      	mov	r3, r0
 801841c:	781b      	ldrb	r3, [r3, #0]
 801841e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8018422:	f107 0110 	add.w	r1, r7, #16
 8018426:	eeb0 0a48 	vmov.f32	s0, s16
 801842a:	4620      	mov	r0, r4
 801842c:	f7ff fc3e 	bl	8017cac <_ZN14TMC2209StepperC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_fh>
 8018430:	4621      	mov	r1, r4
 8018432:	68f8      	ldr	r0, [r7, #12]
 8018434:	f000 f8f6 	bl	8018624 <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8018438:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801843c:	4618      	mov	r0, r3
 801843e:	f010 fa56 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8018442:	f107 0310 	add.w	r3, r7, #16
 8018446:	4618      	mov	r0, r3
 8018448:	f010 fa51 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801844c:	bf00      	nop
 801844e:	68f8      	ldr	r0, [r7, #12]
 8018450:	3744      	adds	r7, #68	@ 0x44
 8018452:	46bd      	mov	sp, r7
 8018454:	ecbd 8b02 	vpop	{d8}
 8018458:	bd90      	pop	{r4, r7, pc}

0801845a <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 801845a:	b590      	push	{r4, r7, lr}
 801845c:	b085      	sub	sp, #20
 801845e:	af00      	add	r7, sp, #0
 8018460:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	4618      	mov	r0, r3
 8018466:	f000 f8ec 	bl	8018642 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>
 801846a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	2b00      	cmp	r3, #0
 8018472:	d00c      	beq.n	801848e <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8018474:	6878      	ldr	r0, [r7, #4]
 8018476:	f000 f8f1 	bl	801865c <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE11get_deleterEv>
 801847a:	4604      	mov	r4, r0
 801847c:	68f8      	ldr	r0, [r7, #12]
 801847e:	f000 f8fa 	bl	8018676 <_ZSt4moveIRP14TMC2209StepperEONSt16remove_referenceIT_E4typeEOS4_>
 8018482:	4603      	mov	r3, r0
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	4619      	mov	r1, r3
 8018488:	4620      	mov	r0, r4
 801848a:	f000 f911 	bl	80186b0 <_ZNKSt14default_deleteI14TMC2209StepperEclEPS0_>
	__ptr = pointer();
 801848e:	68fb      	ldr	r3, [r7, #12]
 8018490:	2200      	movs	r2, #0
 8018492:	601a      	str	r2, [r3, #0]
      }
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	4618      	mov	r0, r3
 8018498:	3714      	adds	r7, #20
 801849a:	46bd      	mov	sp, r7
 801849c:	bd90      	pop	{r4, r7, pc}

0801849e <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 801849e:	b580      	push	{r7, lr}
 80184a0:	b082      	sub	sp, #8
 80184a2:	af00      	add	r7, sp, #0
 80184a4:	6078      	str	r0, [r7, #4]
	return get();
 80184a6:	6878      	ldr	r0, [r7, #4]
 80184a8:	f000 f915 	bl	80186d6 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE3getEv>
 80184ac:	4603      	mov	r3, r0
      }
 80184ae:	4618      	mov	r0, r3
 80184b0:	3708      	adds	r7, #8
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bd80      	pop	{r7, pc}

080184b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIhEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80184b6:	b590      	push	{r4, r7, lr}
 80184b8:	b087      	sub	sp, #28
 80184ba:	af00      	add	r7, sp, #0
 80184bc:	6078      	str	r0, [r7, #4]
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	617b      	str	r3, [r7, #20]
 80184c2:	697b      	ldr	r3, [r7, #20]
 80184c4:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80184c6:	6938      	ldr	r0, [r7, #16]
 80184c8:	f7f0 fb7b 	bl	8008bc2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 80184cc:	4604      	mov	r4, r0
 80184ce:	6938      	ldr	r0, [r7, #16]
 80184d0:	f7f0 fa05 	bl	80088de <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 80184d4:	4602      	mov	r2, r0
 80184d6:	f107 0308 	add.w	r3, r7, #8
 80184da:	4621      	mov	r1, r4
 80184dc:	4618      	mov	r0, r3
 80184de:	f7ed faa0 	bl	8005a22 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80184e2:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80184e4:	f107 0308 	add.w	r3, r7, #8
 80184e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80184ec:	f000 f900 	bl	80186f0 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE>
 80184f0:	4603      	mov	r3, r0
}
 80184f2:	4618      	mov	r0, r3
 80184f4:	371c      	adds	r7, #28
 80184f6:	46bd      	mov	sp, r7
 80184f8:	bd90      	pop	{r4, r7, pc}

080184fa <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA18_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 80184fa:	b580      	push	{r7, lr}
 80184fc:	b082      	sub	sp, #8
 80184fe:	af00      	add	r7, sp, #0
 8018500:	6078      	str	r0, [r7, #4]
 8018502:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8018504:	6838      	ldr	r0, [r7, #0]
 8018506:	f000 f911 	bl	801872c <_ZN11ArduinoJson8V730HB226detail7forwardIRA18_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 801850a:	4602      	mov	r2, r0
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	4611      	mov	r1, r2
 8018510:	4618      	mov	r0, r3
 8018512:	f000 f916 	bl	8018742 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA18_KcvE5adaptES5_>
 8018516:	bf00      	nop
}
 8018518:	6878      	ldr	r0, [r7, #4]
 801851a:	3708      	adds	r7, #8
 801851c:	46bd      	mov	sp, r7
 801851e:	bd80      	pop	{r7, pc}

08018520 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8018520:	b480      	push	{r7}
 8018522:	b083      	sub	sp, #12
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	4618      	mov	r0, r3
 801852c:	370c      	adds	r7, #12
 801852e:	46bd      	mov	sp, r7
 8018530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018534:	4770      	bx	lr

08018536 <_ZNSt10shared_ptrI7TMC2209EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8018536:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801853a:	b08f      	sub	sp, #60	@ 0x3c
 801853c:	af06      	add	r7, sp, #24
 801853e:	61f8      	str	r0, [r7, #28]
 8018540:	61b9      	str	r1, [r7, #24]
 8018542:	617a      	str	r2, [r7, #20]
 8018544:	613b      	str	r3, [r7, #16]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8018546:	69fc      	ldr	r4, [r7, #28]
 8018548:	6978      	ldr	r0, [r7, #20]
 801854a:	f7fd fb49 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801854e:	4680      	mov	r8, r0
 8018550:	6938      	ldr	r0, [r7, #16]
 8018552:	f7fd fb50 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8018556:	4681      	mov	r9, r0
 8018558:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801855a:	f7ff ffe1 	bl	8018520 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801855e:	4605      	mov	r5, r0
 8018560:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018562:	f7fd fb53 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018566:	4606      	mov	r6, r0
 8018568:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801856a:	f7fd fb4f 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801856e:	60f8      	str	r0, [r7, #12]
 8018570:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8018572:	f7f9 f83c 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8018576:	60b8      	str	r0, [r7, #8]
 8018578:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801857a:	f7fd fb47 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801857e:	6078      	str	r0, [r7, #4]
 8018580:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018582:	f7fd fb4e 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8018586:	4603      	mov	r3, r0
 8018588:	9305      	str	r3, [sp, #20]
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	9304      	str	r3, [sp, #16]
 801858e:	68bb      	ldr	r3, [r7, #8]
 8018590:	9303      	str	r3, [sp, #12]
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	9302      	str	r3, [sp, #8]
 8018596:	9601      	str	r6, [sp, #4]
 8018598:	9500      	str	r5, [sp, #0]
 801859a:	464b      	mov	r3, r9
 801859c:	4642      	mov	r2, r8
 801859e:	69b9      	ldr	r1, [r7, #24]
 80185a0:	4620      	mov	r0, r4
 80185a2:	f000 f8dd 	bl	8018760 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 80185a6:	69fb      	ldr	r3, [r7, #28]
 80185a8:	4618      	mov	r0, r3
 80185aa:	3724      	adds	r7, #36	@ 0x24
 80185ac:	46bd      	mov	sp, r7
 80185ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080185b2 <_ZSt4moveIRSt10shared_ptrI7TMC2209EEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80185b2:	b480      	push	{r7}
 80185b4:	b083      	sub	sp, #12
 80185b6:	af00      	add	r7, sp, #0
 80185b8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	4618      	mov	r0, r3
 80185be:	370c      	adds	r7, #12
 80185c0:	46bd      	mov	sp, r7
 80185c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185c6:	4770      	bx	lr

080185c8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209vEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b082      	sub	sp, #8
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
 80185d0:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 80185d2:	683b      	ldr	r3, [r7, #0]
 80185d4:	681a      	ldr	r2, [r3, #0]
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	601a      	str	r2, [r3, #0]
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	3304      	adds	r3, #4
 80185de:	4618      	mov	r0, r3
 80185e0:	f7f4 fe62 	bl	800d2a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	1d1a      	adds	r2, r3, #4
 80185e8:	683b      	ldr	r3, [r7, #0]
 80185ea:	3304      	adds	r3, #4
 80185ec:	4619      	mov	r1, r3
 80185ee:	4610      	mov	r0, r2
 80185f0:	f7f5 fa19 	bl	800da26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 80185f4:	683b      	ldr	r3, [r7, #0]
 80185f6:	2200      	movs	r2, #0
 80185f8:	601a      	str	r2, [r3, #0]
	}
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	4618      	mov	r0, r3
 80185fe:	3708      	adds	r7, #8
 8018600:	46bd      	mov	sp, r7
 8018602:	bd80      	pop	{r7, pc}

08018604 <_ZNSt15__uniq_ptr_dataI14TMC2209StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8018604:	b580      	push	{r7, lr}
 8018606:	b082      	sub	sp, #8
 8018608:	af00      	add	r7, sp, #0
 801860a:	6078      	str	r0, [r7, #4]
 801860c:	6039      	str	r1, [r7, #0]
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	683a      	ldr	r2, [r7, #0]
 8018612:	4611      	mov	r1, r2
 8018614:	4618      	mov	r0, r3
 8018616:	f000 f8ef 	bl	80187f8 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EEC1EPS0_>
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	4618      	mov	r0, r3
 801861e:	3708      	adds	r7, #8
 8018620:	46bd      	mov	sp, r7
 8018622:	bd80      	pop	{r7, pc}

08018624 <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8018624:	b580      	push	{r7, lr}
 8018626:	b082      	sub	sp, #8
 8018628:	af00      	add	r7, sp, #0
 801862a:	6078      	str	r0, [r7, #4]
 801862c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	6839      	ldr	r1, [r7, #0]
 8018632:	4618      	mov	r0, r3
 8018634:	f7ff ffe6 	bl	8018604 <_ZNSt15__uniq_ptr_dataI14TMC2209StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	4618      	mov	r0, r3
 801863c:	3708      	adds	r7, #8
 801863e:	46bd      	mov	sp, r7
 8018640:	bd80      	pop	{r7, pc}

08018642 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8018642:	b580      	push	{r7, lr}
 8018644:	b082      	sub	sp, #8
 8018646:	af00      	add	r7, sp, #0
 8018648:	6078      	str	r0, [r7, #4]
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	4618      	mov	r0, r3
 801864e:	f000 f8e7 	bl	8018820 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8018652:	4603      	mov	r3, r0
 8018654:	4618      	mov	r0, r3
 8018656:	3708      	adds	r7, #8
 8018658:	46bd      	mov	sp, r7
 801865a:	bd80      	pop	{r7, pc}

0801865c <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 801865c:	b580      	push	{r7, lr}
 801865e:	b082      	sub	sp, #8
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	4618      	mov	r0, r3
 8018668:	f000 f8e7 	bl	801883a <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE10_M_deleterEv>
 801866c:	4603      	mov	r3, r0
 801866e:	4618      	mov	r0, r3
 8018670:	3708      	adds	r7, #8
 8018672:	46bd      	mov	sp, r7
 8018674:	bd80      	pop	{r7, pc}

08018676 <_ZSt4moveIRP14TMC2209StepperEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8018676:	b480      	push	{r7}
 8018678:	b083      	sub	sp, #12
 801867a:	af00      	add	r7, sp, #0
 801867c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	4618      	mov	r0, r3
 8018682:	370c      	adds	r7, #12
 8018684:	46bd      	mov	sp, r7
 8018686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801868a:	4770      	bx	lr

0801868c <_ZN14TMC2209StepperD1Ev>:
class TMC2209Stepper : public TMC2208Stepper {
 801868c:	b580      	push	{r7, lr}
 801868e:	b082      	sub	sp, #8
 8018690:	af00      	add	r7, sp, #0
 8018692:	6078      	str	r0, [r7, #4]
 8018694:	4a05      	ldr	r2, [pc, #20]	@ (80186ac <_ZN14TMC2209StepperD1Ev+0x20>)
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	601a      	str	r2, [r3, #0]
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	4618      	mov	r0, r3
 801869e:	f7fc fcd1 	bl	8015044 <_ZN14TMC2208StepperD1Ev>
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	4618      	mov	r0, r3
 80186a6:	3708      	adds	r7, #8
 80186a8:	46bd      	mov	sp, r7
 80186aa:	bd80      	pop	{r7, pc}
 80186ac:	0802b6f8 	.word	0x0802b6f8

080186b0 <_ZNKSt14default_deleteI14TMC2209StepperEclEPS0_>:
      operator()(_Tp* __ptr) const
 80186b0:	b590      	push	{r4, r7, lr}
 80186b2:	b083      	sub	sp, #12
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
 80186b8:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80186ba:	683c      	ldr	r4, [r7, #0]
 80186bc:	2c00      	cmp	r4, #0
 80186be:	d006      	beq.n	80186ce <_ZNKSt14default_deleteI14TMC2209StepperEclEPS0_+0x1e>
 80186c0:	4620      	mov	r0, r4
 80186c2:	f7ff ffe3 	bl	801868c <_ZN14TMC2209StepperD1Ev>
 80186c6:	216c      	movs	r1, #108	@ 0x6c
 80186c8:	4620      	mov	r0, r4
 80186ca:	f010 f804 	bl	80286d6 <_ZdlPvj>
      }
 80186ce:	bf00      	nop
 80186d0:	370c      	adds	r7, #12
 80186d2:	46bd      	mov	sp, r7
 80186d4:	bd90      	pop	{r4, r7, pc}

080186d6 <_ZNKSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80186d6:	b580      	push	{r7, lr}
 80186d8:	b082      	sub	sp, #8
 80186da:	af00      	add	r7, sp, #0
 80186dc:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	4618      	mov	r0, r3
 80186e2:	f000 f8b7 	bl	8018854 <_ZNKSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>
 80186e6:	4603      	mov	r3, r0
 80186e8:	4618      	mov	r0, r3
 80186ea:	3708      	adds	r7, #8
 80186ec:	46bd      	mov	sp, r7
 80186ee:	bd80      	pop	{r7, pc}

080186f0 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 80186f0:	b580      	push	{r7, lr}
 80186f2:	b084      	sub	sp, #16
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	463b      	mov	r3, r7
 80186f8:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 80186fc:	463b      	mov	r3, r7
 80186fe:	4618      	mov	r0, r3
 8018700:	f7ee ff0e 	bl	8007520 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8018704:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8018706:	463b      	mov	r3, r7
 8018708:	4618      	mov	r0, r3
 801870a:	f7ee ff15 	bl	8007538 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 801870e:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	2b00      	cmp	r3, #0
 8018714:	d005      	beq.n	8018722 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8018716:	68b9      	ldr	r1, [r7, #8]
 8018718:	68f8      	ldr	r0, [r7, #12]
 801871a:	f000 f8a9 	bl	8018870 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE>
 801871e:	4603      	mov	r3, r0
 8018720:	e000      	b.n	8018724 <_ZN11ArduinoJson8V730HB229ConverterIhvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8018722:	2300      	movs	r3, #0
  }
 8018724:	4618      	mov	r0, r3
 8018726:	3710      	adds	r7, #16
 8018728:	46bd      	mov	sp, r7
 801872a:	bd80      	pop	{r7, pc}

0801872c <_ZN11ArduinoJson8V730HB226detail7forwardIRA18_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 801872c:	b480      	push	{r7}
 801872e:	b083      	sub	sp, #12
 8018730:	af00      	add	r7, sp, #0
 8018732:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8018734:	687b      	ldr	r3, [r7, #4]
}
 8018736:	4618      	mov	r0, r3
 8018738:	370c      	adds	r7, #12
 801873a:	46bd      	mov	sp, r7
 801873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018740:	4770      	bx	lr

08018742 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA18_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8018742:	b580      	push	{r7, lr}
 8018744:	b082      	sub	sp, #8
 8018746:	af00      	add	r7, sp, #0
 8018748:	6078      	str	r0, [r7, #4]
 801874a:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 801874c:	2301      	movs	r3, #1
 801874e:	2211      	movs	r2, #17
 8018750:	6839      	ldr	r1, [r7, #0]
 8018752:	6878      	ldr	r0, [r7, #4]
 8018754:	f7ec fd9e 	bl	8005294 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8018758:	6878      	ldr	r0, [r7, #4]
 801875a:	3708      	adds	r7, #8
 801875c:	46bd      	mov	sp, r7
 801875e:	bd80      	pop	{r7, pc}

08018760 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8018760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018764:	b092      	sub	sp, #72	@ 0x48
 8018766:	af08      	add	r7, sp, #32
 8018768:	6278      	str	r0, [r7, #36]	@ 0x24
 801876a:	6239      	str	r1, [r7, #32]
 801876c:	61fa      	str	r2, [r7, #28]
 801876e:	61bb      	str	r3, [r7, #24]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8018770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018772:	2200      	movs	r2, #0
 8018774:	601a      	str	r2, [r3, #0]
 8018776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018778:	1d1c      	adds	r4, r3, #4
 801877a:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 801877c:	69f8      	ldr	r0, [r7, #28]
 801877e:	f7fd fa2f 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8018782:	4680      	mov	r8, r0
 8018784:	69b8      	ldr	r0, [r7, #24]
 8018786:	f7fd fa36 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801878a:	4606      	mov	r6, r0
 801878c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801878e:	f7ff fec7 	bl	8018520 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8018792:	6178      	str	r0, [r7, #20]
 8018794:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018796:	f7fd fa39 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801879a:	6138      	str	r0, [r7, #16]
 801879c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801879e:	f7fd fa35 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80187a2:	60f8      	str	r0, [r7, #12]
 80187a4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80187a6:	f7f8 ff22 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80187aa:	60b8      	str	r0, [r7, #8]
 80187ac:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80187ae:	f7fd fa2d 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80187b2:	6078      	str	r0, [r7, #4]
 80187b4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80187b6:	f7fd fa34 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 80187ba:	4603      	mov	r3, r0
 80187bc:	9306      	str	r3, [sp, #24]
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	9305      	str	r3, [sp, #20]
 80187c2:	68bb      	ldr	r3, [r7, #8]
 80187c4:	9304      	str	r3, [sp, #16]
 80187c6:	68fb      	ldr	r3, [r7, #12]
 80187c8:	9303      	str	r3, [sp, #12]
 80187ca:	693b      	ldr	r3, [r7, #16]
 80187cc:	9302      	str	r3, [sp, #8]
 80187ce:	697b      	ldr	r3, [r7, #20]
 80187d0:	9301      	str	r3, [sp, #4]
 80187d2:	9600      	str	r6, [sp, #0]
 80187d4:	4643      	mov	r3, r8
 80187d6:	6a3a      	ldr	r2, [r7, #32]
 80187d8:	4629      	mov	r1, r5
 80187da:	4620      	mov	r0, r4
 80187dc:	f000 f8da 	bl	8018994 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 80187e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	4619      	mov	r1, r3
 80187e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80187e8:	f000 f946 	bl	8018a78 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 80187ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187ee:	4618      	mov	r0, r3
 80187f0:	3728      	adds	r7, #40	@ 0x28
 80187f2:	46bd      	mov	sp, r7
 80187f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080187f8 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80187f8:	b590      	push	{r4, r7, lr}
 80187fa:	b083      	sub	sp, #12
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
 8018800:	6039      	str	r1, [r7, #0]
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	4618      	mov	r0, r3
 8018806:	f000 f958 	bl	8018aba <_ZNSt5tupleIJP14TMC2209StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 801880a:	683c      	ldr	r4, [r7, #0]
 801880c:	6878      	ldr	r0, [r7, #4]
 801880e:	f7ff ff18 	bl	8018642 <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8018812:	4603      	mov	r3, r0
 8018814:	601c      	str	r4, [r3, #0]
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	4618      	mov	r0, r3
 801881a:	370c      	adds	r7, #12
 801881c:	46bd      	mov	sp, r7
 801881e:	bd90      	pop	{r4, r7, pc}

08018820 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8018820:	b580      	push	{r7, lr}
 8018822:	b082      	sub	sp, #8
 8018824:	af00      	add	r7, sp, #0
 8018826:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	4618      	mov	r0, r3
 801882c:	f000 f952 	bl	8018ad4 <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8018830:	4603      	mov	r3, r0
 8018832:	4618      	mov	r0, r3
 8018834:	3708      	adds	r7, #8
 8018836:	46bd      	mov	sp, r7
 8018838:	bd80      	pop	{r7, pc}

0801883a <_ZNSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 801883a:	b580      	push	{r7, lr}
 801883c:	b082      	sub	sp, #8
 801883e:	af00      	add	r7, sp, #0
 8018840:	6078      	str	r0, [r7, #4]
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	4618      	mov	r0, r3
 8018846:	f000 f951 	bl	8018aec <_ZSt3getILj1EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801884a:	4603      	mov	r3, r0
 801884c:	4618      	mov	r0, r3
 801884e:	3708      	adds	r7, #8
 8018850:	46bd      	mov	sp, r7
 8018852:	bd80      	pop	{r7, pc}

08018854 <_ZNKSt15__uniq_ptr_implI14TMC2209StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8018854:	b580      	push	{r7, lr}
 8018856:	b082      	sub	sp, #8
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	4618      	mov	r0, r3
 8018860:	f000 f950 	bl	8018b04 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8018864:	4603      	mov	r3, r0
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	4618      	mov	r0, r3
 801886a:	3708      	adds	r7, #8
 801886c:	46bd      	mov	sp, r7
 801886e:	bd80      	pop	{r7, pc}

08018870 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8018870:	b580      	push	{r7, lr}
 8018872:	b084      	sub	sp, #16
 8018874:	af00      	add	r7, sp, #0
 8018876:	6078      	str	r0, [r7, #4]
 8018878:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 801887a:	6839      	ldr	r1, [r7, #0]
 801887c:	6878      	ldr	r0, [r7, #4]
 801887e:	f7ed fe65 	bl	800654c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8018882:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	791b      	ldrb	r3, [r3, #4]
 8018888:	3b04      	subs	r3, #4
 801888a:	2b1a      	cmp	r3, #26
 801888c:	d87c      	bhi.n	8018988 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x118>
 801888e:	a201      	add	r2, pc, #4	@ (adr r2, 8018894 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x24>)
 8018890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018894:	08018947 	.word	0x08018947
 8018898:	08018955 	.word	0x08018955
 801889c:	08018901 	.word	0x08018901
 80188a0:	08018989 	.word	0x08018989
 80188a4:	08018989 	.word	0x08018989
 80188a8:	08018989 	.word	0x08018989
 80188ac:	08018907 	.word	0x08018907
 80188b0:	08018989 	.word	0x08018989
 80188b4:	08018915 	.word	0x08018915
 80188b8:	08018989 	.word	0x08018989
 80188bc:	08018965 	.word	0x08018965
 80188c0:	08018989 	.word	0x08018989
 80188c4:	08018989 	.word	0x08018989
 80188c8:	08018989 	.word	0x08018989
 80188cc:	08018989 	.word	0x08018989
 80188d0:	08018989 	.word	0x08018989
 80188d4:	08018989 	.word	0x08018989
 80188d8:	08018989 	.word	0x08018989
 80188dc:	08018989 	.word	0x08018989
 80188e0:	08018989 	.word	0x08018989
 80188e4:	08018989 	.word	0x08018989
 80188e8:	08018989 	.word	0x08018989
 80188ec:	08018923 	.word	0x08018923
 80188f0:	08018989 	.word	0x08018989
 80188f4:	08018935 	.word	0x08018935
 80188f8:	08018989 	.word	0x08018989
 80188fc:	08018977 	.word	0x08018977
        return content_.asBoolean;
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	781b      	ldrb	r3, [r3, #0]
 8018904:	e041      	b.n	801898a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	4618      	mov	r0, r3
 801890c:	f000 f907 	bl	8018b1e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_>
 8018910:	4603      	mov	r3, r0
 8018912:	e03a      	b.n	801898a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	4618      	mov	r0, r3
 801891a:	f000 f912 	bl	8018b42 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_>
 801891e:	4603      	mov	r3, r0
 8018920:	e033      	b.n	801898a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018928:	4610      	mov	r0, r2
 801892a:	4619      	mov	r1, r3
 801892c:	f000 f91b 	bl	8018b66 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>
 8018930:	4603      	mov	r3, r0
 8018932:	e02a      	b.n	801898a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801893a:	4610      	mov	r0, r2
 801893c:	4619      	mov	r1, r3
 801893e:	f000 f925 	bl	8018b8c <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>
 8018942:	4603      	mov	r3, r0
 8018944:	e021      	b.n	801898a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	4618      	mov	r0, r3
 801894c:	f000 f931 	bl	8018bb2 <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>
 8018950:	4603      	mov	r3, r0
 8018952:	e01a      	b.n	801898a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	3308      	adds	r3, #8
 801895a:	4618      	mov	r0, r3
 801895c:	f000 f929 	bl	8018bb2 <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>
 8018960:	4603      	mov	r3, r0
 8018962:	e012      	b.n	801898a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	edd3 7a00 	vldr	s15, [r3]
 801896a:	eeb0 0a67 	vmov.f32	s0, s15
 801896e:	f000 f934 	bl	8018bda <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>
 8018972:	4603      	mov	r3, r0
 8018974:	e009      	b.n	801898a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 8018976:	68fb      	ldr	r3, [r7, #12]
 8018978:	ed93 7b00 	vldr	d7, [r3]
 801897c:	eeb0 0b47 	vmov.f64	d0, d7
 8018980:	f000 f945 	bl	8018c0e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>
 8018984:	4603      	mov	r3, r0
 8018986:	e000      	b.n	801898a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIhEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 8018988:	2300      	movs	r3, #0
  }
 801898a:	4618      	mov	r0, r3
 801898c:	3710      	adds	r7, #16
 801898e:	46bd      	mov	sp, r7
 8018990:	bd80      	pop	{r7, pc}
 8018992:	bf00      	nop

08018994 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC2209SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8018994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018998:	b094      	sub	sp, #80	@ 0x50
 801899a:	af06      	add	r7, sp, #24
 801899c:	61f8      	str	r0, [r7, #28]
 801899e:	61b9      	str	r1, [r7, #24]
 80189a0:	617a      	str	r2, [r7, #20]
 80189a2:	613b      	str	r3, [r7, #16]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 80189a4:	697a      	ldr	r2, [r7, #20]
 80189a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80189aa:	4611      	mov	r1, r2
 80189ac:	4618      	mov	r0, r3
 80189ae:	f000 f948 	bl	8018c42 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 80189b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80189b6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80189ba:	4611      	mov	r1, r2
 80189bc:	4618      	mov	r0, r3
 80189be:	f000 f959 	bl	8018c74 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 80189c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80189c6:	4618      	mov	r0, r3
 80189c8:	f000 f97c 	bl	8018cc4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 80189cc:	6378      	str	r0, [r7, #52]	@ 0x34
	  auto __pi = ::new (__mem)
 80189ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80189d0:	4619      	mov	r1, r3
 80189d2:	205c      	movs	r0, #92	@ 0x5c
 80189d4:	f7f2 f830 	bl	800aa38 <_ZnwjPv>
 80189d8:	4604      	mov	r4, r0
 80189da:	6938      	ldr	r0, [r7, #16]
 80189dc:	f7fd f900 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80189e0:	4680      	mov	r8, r0
 80189e2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80189e4:	f7fd f907 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80189e8:	4681      	mov	r9, r0
 80189ea:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80189ec:	f7ff fd98 	bl	8018520 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80189f0:	4605      	mov	r5, r0
 80189f2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80189f4:	f7fd f90a 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80189f8:	4606      	mov	r6, r0
 80189fa:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80189fc:	f7fd f906 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018a00:	60f8      	str	r0, [r7, #12]
 8018a02:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8018a04:	f7f8 fdf3 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8018a08:	60b8      	str	r0, [r7, #8]
 8018a0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8018a0c:	f7fd f8fe 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018a10:	6078      	str	r0, [r7, #4]
 8018a12:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8018a14:	f7fd f905 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8018a18:	4603      	mov	r3, r0
 8018a1a:	9305      	str	r3, [sp, #20]
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	9304      	str	r3, [sp, #16]
 8018a20:	68bb      	ldr	r3, [r7, #8]
 8018a22:	9303      	str	r3, [sp, #12]
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	9302      	str	r3, [sp, #8]
 8018a28:	9601      	str	r6, [sp, #4]
 8018a2a:	9500      	str	r5, [sp, #0]
 8018a2c:	464b      	mov	r3, r9
 8018a2e:	4642      	mov	r2, r8
 8018a30:	4651      	mov	r1, sl
 8018a32:	4620      	mov	r0, r4
 8018a34:	f000 f954 	bl	8018ce0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>
 8018a38:	633c      	str	r4, [r7, #48]	@ 0x30
	  __guard = nullptr;
 8018a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018a3e:	2100      	movs	r1, #0
 8018a40:	4618      	mov	r0, r3
 8018a42:	f000 f99d 	bl	8018d80 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 8018a46:	69fb      	ldr	r3, [r7, #28]
 8018a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018a4a:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 8018a4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018a4e:	f000 f9a6 	bl	8018d9e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8018a52:	4602      	mov	r2, r0
 8018a54:	69bb      	ldr	r3, [r7, #24]
 8018a56:	601a      	str	r2, [r3, #0]
	}
 8018a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	f000 f91c 	bl	8018c9a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 8018a62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018a66:	4618      	mov	r0, r3
 8018a68:	f000 f8f8 	bl	8018c5c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8018a6c:	69fb      	ldr	r3, [r7, #28]
 8018a6e:	4618      	mov	r0, r3
 8018a70:	3738      	adds	r7, #56	@ 0x38
 8018a72:	46bd      	mov	sp, r7
 8018a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018a78 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp* __p) noexcept
 8018a78:	b580      	push	{r7, lr}
 8018a7a:	b084      	sub	sp, #16
 8018a7c:	af00      	add	r7, sp, #0
 8018a7e:	6078      	str	r0, [r7, #4]
 8018a80:	6039      	str	r1, [r7, #0]
	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	1d1a      	adds	r2, r3, #4
 8018a86:	683b      	ldr	r3, [r7, #0]
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d002      	beq.n	8018a92 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1a>
 8018a8c:	683b      	ldr	r3, [r7, #0]
 8018a8e:	3318      	adds	r3, #24
 8018a90:	e000      	b.n	8018a94 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1c>
 8018a92:	2300      	movs	r3, #0
 8018a94:	4619      	mov	r1, r3
 8018a96:	4610      	mov	r0, r2
 8018a98:	f7fd ffb9 	bl	8016a0e <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>
 8018a9c:	60f8      	str	r0, [r7, #12]
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d006      	beq.n	8018ab2 <_ZNSt12__shared_ptrI7TMC2209LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x3a>
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	3304      	adds	r3, #4
 8018aa8:	461a      	mov	r2, r3
 8018aaa:	6839      	ldr	r1, [r7, #0]
 8018aac:	68f8      	ldr	r0, [r7, #12]
 8018aae:	f000 f984 	bl	8018dba <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2209EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>
	}
 8018ab2:	bf00      	nop
 8018ab4:	3710      	adds	r7, #16
 8018ab6:	46bd      	mov	sp, r7
 8018ab8:	bd80      	pop	{r7, pc}

08018aba <_ZNSt5tupleIJP14TMC2209StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8018aba:	b580      	push	{r7, lr}
 8018abc:	b082      	sub	sp, #8
 8018abe:	af00      	add	r7, sp, #0
 8018ac0:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	4618      	mov	r0, r3
 8018ac6:	f000 f988 	bl	8018dda <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEEC1Ev>
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	4618      	mov	r0, r3
 8018ace:	3708      	adds	r7, #8
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	bd80      	pop	{r7, pc}

08018ad4 <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8018ad4:	b580      	push	{r7, lr}
 8018ad6:	b082      	sub	sp, #8
 8018ad8:	af00      	add	r7, sp, #0
 8018ada:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8018adc:	6878      	ldr	r0, [r7, #4]
 8018ade:	f000 f98c 	bl	8018dfa <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERS4_>
 8018ae2:	4603      	mov	r3, r0
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	3708      	adds	r7, #8
 8018ae8:	46bd      	mov	sp, r7
 8018aea:	bd80      	pop	{r7, pc}

08018aec <_ZSt3getILj1EJP14TMC2209StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8018aec:	b580      	push	{r7, lr}
 8018aee:	b082      	sub	sp, #8
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8018af4:	6878      	ldr	r0, [r7, #4]
 8018af6:	f000 f98d 	bl	8018e14 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2209StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8018afa:	4603      	mov	r3, r0
 8018afc:	4618      	mov	r0, r3
 8018afe:	3708      	adds	r7, #8
 8018b00:	46bd      	mov	sp, r7
 8018b02:	bd80      	pop	{r7, pc}

08018b04 <_ZSt3getILj0EJP14TMC2209StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8018b04:	b580      	push	{r7, lr}
 8018b06:	b082      	sub	sp, #8
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	4618      	mov	r0, r3
 8018b10:	f000 f98c 	bl	8018e2c <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8018b14:	4603      	mov	r3, r0
 8018b16:	4618      	mov	r0, r3
 8018b18:	3708      	adds	r7, #8
 8018b1a:	46bd      	mov	sp, r7
 8018b1c:	bd80      	pop	{r7, pc}

08018b1e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_>:
TOut convertNumber(TIn value) {
 8018b1e:	b580      	push	{r7, lr}
 8018b20:	b082      	sub	sp, #8
 8018b22:	af00      	add	r7, sp, #0
 8018b24:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018b26:	6878      	ldr	r0, [r7, #4]
 8018b28:	f000 f98c 	bl	8018e44 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d002      	beq.n	8018b38 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_+0x1a>
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	b2db      	uxtb	r3, r3
 8018b36:	e000      	b.n	8018b3a <_ZN11ArduinoJson8V730HB226detail13convertNumberIhmEET_T0_+0x1c>
 8018b38:	2300      	movs	r3, #0
}
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	3708      	adds	r7, #8
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	bd80      	pop	{r7, pc}

08018b42 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_>:
TOut convertNumber(TIn value) {
 8018b42:	b580      	push	{r7, lr}
 8018b44:	b082      	sub	sp, #8
 8018b46:	af00      	add	r7, sp, #0
 8018b48:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018b4a:	6878      	ldr	r0, [r7, #4]
 8018b4c:	f000 f98c 	bl	8018e68 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8018b50:	4603      	mov	r3, r0
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d002      	beq.n	8018b5c <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_+0x1a>
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	b2db      	uxtb	r3, r3
 8018b5a:	e000      	b.n	8018b5e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhlEET_T0_+0x1c>
 8018b5c:	2300      	movs	r3, #0
}
 8018b5e:	4618      	mov	r0, r3
 8018b60:	3708      	adds	r7, #8
 8018b62:	46bd      	mov	sp, r7
 8018b64:	bd80      	pop	{r7, pc}

08018b66 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>:
TOut convertNumber(TIn value) {
 8018b66:	b580      	push	{r7, lr}
 8018b68:	b082      	sub	sp, #8
 8018b6a:	af00      	add	r7, sp, #0
 8018b6c:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018b70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018b74:	f000 f98f 	bl	8018e96 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8018b78:	4603      	mov	r3, r0
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d001      	beq.n	8018b82 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_+0x1c>
 8018b7e:	783b      	ldrb	r3, [r7, #0]
 8018b80:	e000      	b.n	8018b84 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_+0x1e>
 8018b82:	2300      	movs	r3, #0
}
 8018b84:	4618      	mov	r0, r3
 8018b86:	3708      	adds	r7, #8
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	bd80      	pop	{r7, pc}

08018b8c <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>:
TOut convertNumber(TIn value) {
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b082      	sub	sp, #8
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018b96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018b9a:	f000 f995 	bl	8018ec8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8018b9e:	4603      	mov	r3, r0
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d001      	beq.n	8018ba8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_+0x1c>
 8018ba4:	783b      	ldrb	r3, [r7, #0]
 8018ba6:	e000      	b.n	8018baa <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_+0x1e>
 8018ba8:	2300      	movs	r3, #0
}
 8018baa:	4618      	mov	r0, r3
 8018bac:	3708      	adds	r7, #8
 8018bae:	46bd      	mov	sp, r7
 8018bb0:	bd80      	pop	{r7, pc}

08018bb2 <_ZN11ArduinoJson8V730HB226detail11parseNumberIhEET_PKc>:
inline T parseNumber(const char* s) {
 8018bb2:	b580      	push	{r7, lr}
 8018bb4:	b086      	sub	sp, #24
 8018bb6:	af00      	add	r7, sp, #0
 8018bb8:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 8018bba:	f107 0308 	add.w	r3, r7, #8
 8018bbe:	6879      	ldr	r1, [r7, #4]
 8018bc0:	4618      	mov	r0, r3
 8018bc2:	f7ed ff27 	bl	8006a14 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 8018bc6:	f107 0308 	add.w	r3, r7, #8
 8018bca:	4618      	mov	r0, r3
 8018bcc:	f000 f99c 	bl	8018f08 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v>
 8018bd0:	4603      	mov	r3, r0
}
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	3718      	adds	r7, #24
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	bd80      	pop	{r7, pc}

08018bda <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>:
TOut convertNumber(TIn value) {
 8018bda:	b580      	push	{r7, lr}
 8018bdc:	b082      	sub	sp, #8
 8018bde:	af00      	add	r7, sp, #0
 8018be0:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018be4:	ed97 0a01 	vldr	s0, [r7, #4]
 8018be8:	f000 f9dc 	bl	8018fa4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8018bec:	4603      	mov	r3, r0
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d008      	beq.n	8018c04 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_+0x2a>
 8018bf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8018bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018bfa:	edc7 7a00 	vstr	s15, [r7]
 8018bfe:	783b      	ldrb	r3, [r7, #0]
 8018c00:	b2db      	uxtb	r3, r3
 8018c02:	e000      	b.n	8018c06 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_+0x2c>
 8018c04:	2300      	movs	r3, #0
}
 8018c06:	4618      	mov	r0, r3
 8018c08:	3708      	adds	r7, #8
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bd80      	pop	{r7, pc}

08018c0e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>:
TOut convertNumber(TIn value) {
 8018c0e:	b580      	push	{r7, lr}
 8018c10:	b084      	sub	sp, #16
 8018c12:	af00      	add	r7, sp, #0
 8018c14:	ed87 0b02 	vstr	d0, [r7, #8]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8018c18:	ed97 0b02 	vldr	d0, [r7, #8]
 8018c1c:	f000 f9ea 	bl	8018ff4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 8018c20:	4603      	mov	r3, r0
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d008      	beq.n	8018c38 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_+0x2a>
 8018c26:	ed97 7b02 	vldr	d7, [r7, #8]
 8018c2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8018c2e:	edc7 7a01 	vstr	s15, [r7, #4]
 8018c32:	793b      	ldrb	r3, [r7, #4]
 8018c34:	b2db      	uxtb	r3, r3
 8018c36:	e000      	b.n	8018c3a <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_+0x2c>
 8018c38:	2300      	movs	r3, #0
}
 8018c3a:	4618      	mov	r0, r3
 8018c3c:	3710      	adds	r7, #16
 8018c3e:	46bd      	mov	sp, r7
 8018c40:	bd80      	pop	{r7, pc}

08018c42 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8018c42:	b580      	push	{r7, lr}
 8018c44:	b082      	sub	sp, #8
 8018c46:	af00      	add	r7, sp, #0
 8018c48:	6078      	str	r0, [r7, #4]
 8018c4a:	6039      	str	r1, [r7, #0]
 8018c4c:	6878      	ldr	r0, [r7, #4]
 8018c4e:	f000 f9f9 	bl	8019044 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	4618      	mov	r0, r3
 8018c56:	3708      	adds	r7, #8
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	bd80      	pop	{r7, pc}

08018c5c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	b082      	sub	sp, #8
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	6078      	str	r0, [r7, #4]
 8018c64:	6878      	ldr	r0, [r7, #4]
 8018c66:	f000 f9f8 	bl	801905a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	3708      	adds	r7, #8
 8018c70:	46bd      	mov	sp, r7
 8018c72:	bd80      	pop	{r7, pc}

08018c74 <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b082      	sub	sp, #8
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
 8018c7c:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 8018c7e:	2101      	movs	r1, #1
 8018c80:	6838      	ldr	r0, [r7, #0]
 8018c82:	f000 f9f5 	bl	8019070 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 8018c86:	4603      	mov	r3, r0
 8018c88:	461a      	mov	r2, r3
 8018c8a:	6839      	ldr	r1, [r7, #0]
 8018c8c:	6878      	ldr	r0, [r7, #4]
 8018c8e:	f000 f9fe 	bl	801908e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 8018c92:	6878      	ldr	r0, [r7, #4]
 8018c94:	3708      	adds	r7, #8
 8018c96:	46bd      	mov	sp, r7
 8018c98:	bd80      	pop	{r7, pc}

08018c9a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 8018c9a:	b580      	push	{r7, lr}
 8018c9c:	b082      	sub	sp, #8
 8018c9e:	af00      	add	r7, sp, #0
 8018ca0:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	685b      	ldr	r3, [r3, #4]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d007      	beq.n	8018cba <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	6818      	ldr	r0, [r3, #0]
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	685b      	ldr	r3, [r3, #4]
 8018cb2:	2201      	movs	r2, #1
 8018cb4:	4619      	mov	r1, r3
 8018cb6:	f000 f9fe 	bl	80190b6 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	3708      	adds	r7, #8
 8018cc0:	46bd      	mov	sp, r7
 8018cc2:	bd80      	pop	{r7, pc}

08018cc4 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b082      	sub	sp, #8
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	6078      	str	r0, [r7, #4]
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	685b      	ldr	r3, [r3, #4]
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	f000 f9ff 	bl	80190d4 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 8018cd6:	4603      	mov	r3, r0
 8018cd8:	4618      	mov	r0, r3
 8018cda:	3708      	adds	r7, #8
 8018cdc:	46bd      	mov	sp, r7
 8018cde:	bd80      	pop	{r7, pc}

08018ce0 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 8018ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ce4:	b08c      	sub	sp, #48	@ 0x30
 8018ce6:	af06      	add	r7, sp, #24
 8018ce8:	6178      	str	r0, [r7, #20]
 8018cea:	7439      	strb	r1, [r7, #16]
 8018cec:	60fa      	str	r2, [r7, #12]
 8018cee:	60bb      	str	r3, [r7, #8]
	: _M_impl(__a)
 8018cf0:	697b      	ldr	r3, [r7, #20]
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f7f5 fb4c 	bl	800e390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8018cf8:	4a20      	ldr	r2, [pc, #128]	@ (8018d7c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_+0x9c>)
 8018cfa:	697b      	ldr	r3, [r7, #20]
 8018cfc:	601a      	str	r2, [r3, #0]
 8018cfe:	697b      	ldr	r3, [r7, #20]
 8018d00:	330c      	adds	r3, #12
 8018d02:	4621      	mov	r1, r4
 8018d04:	4618      	mov	r0, r3
 8018d06:	f000 f9f0 	bl	80190ea <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 8018d0a:	6978      	ldr	r0, [r7, #20]
 8018d0c:	f000 f847 	bl	8018d9e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8018d10:	4680      	mov	r8, r0
 8018d12:	68f8      	ldr	r0, [r7, #12]
 8018d14:	f7fc ff64 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8018d18:	4681      	mov	r9, r0
 8018d1a:	68b8      	ldr	r0, [r7, #8]
 8018d1c:	f7fc ff6b 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8018d20:	4682      	mov	sl, r0
 8018d22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018d24:	f7ff fbfc 	bl	8018520 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8018d28:	4604      	mov	r4, r0
 8018d2a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018d2c:	f7fc ff6e 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018d30:	4605      	mov	r5, r0
 8018d32:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8018d34:	f7fc ff6a 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018d38:	4606      	mov	r6, r0
 8018d3a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018d3c:	f7f8 fc57 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8018d40:	6078      	str	r0, [r7, #4]
 8018d42:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8018d44:	f7fc ff62 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018d48:	6038      	str	r0, [r7, #0]
 8018d4a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8018d4c:	f7fc ff69 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8018d50:	4603      	mov	r3, r0
 8018d52:	f107 0010 	add.w	r0, r7, #16
 8018d56:	9305      	str	r3, [sp, #20]
 8018d58:	683b      	ldr	r3, [r7, #0]
 8018d5a:	9304      	str	r3, [sp, #16]
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	9303      	str	r3, [sp, #12]
 8018d60:	9602      	str	r6, [sp, #8]
 8018d62:	9501      	str	r5, [sp, #4]
 8018d64:	9400      	str	r4, [sp, #0]
 8018d66:	4653      	mov	r3, sl
 8018d68:	464a      	mov	r2, r9
 8018d6a:	4641      	mov	r1, r8
 8018d6c:	f000 f9cc 	bl	8019108 <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>
	}
 8018d70:	697b      	ldr	r3, [r7, #20]
 8018d72:	4618      	mov	r0, r3
 8018d74:	3718      	adds	r7, #24
 8018d76:	46bd      	mov	sp, r7
 8018d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d7c:	0802b6b8 	.word	0x0802b6b8

08018d80 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 8018d80:	b480      	push	{r7}
 8018d82:	b083      	sub	sp, #12
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	6078      	str	r0, [r7, #4]
 8018d88:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	2200      	movs	r2, #0
 8018d8e:	605a      	str	r2, [r3, #4]
	return *this;
 8018d90:	687b      	ldr	r3, [r7, #4]
      }
 8018d92:	4618      	mov	r0, r3
 8018d94:	370c      	adds	r7, #12
 8018d96:	46bd      	mov	sp, r7
 8018d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d9c:	4770      	bx	lr

08018d9e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 8018d9e:	b580      	push	{r7, lr}
 8018da0:	b082      	sub	sp, #8
 8018da2:	af00      	add	r7, sp, #0
 8018da4:	6078      	str	r0, [r7, #4]
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	330c      	adds	r3, #12
 8018daa:	4618      	mov	r0, r3
 8018dac:	f000 f9e5 	bl	801917a <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E6_M_ptrEv>
 8018db0:	4603      	mov	r3, r0
 8018db2:	4618      	mov	r0, r3
 8018db4:	3708      	adds	r7, #8
 8018db6:	46bd      	mov	sp, r7
 8018db8:	bd80      	pop	{r7, pc}

08018dba <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC2209EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>:
	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 8018dba:	b580      	push	{r7, lr}
 8018dbc:	b084      	sub	sp, #16
 8018dbe:	af00      	add	r7, sp, #0
 8018dc0:	60f8      	str	r0, [r7, #12]
 8018dc2:	60b9      	str	r1, [r7, #8]
 8018dc4:	607a      	str	r2, [r7, #4]
	{ _M_weak_this._M_assign(__p, __n); }
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	687a      	ldr	r2, [r7, #4]
 8018dca:	68b9      	ldr	r1, [r7, #8]
 8018dcc:	4618      	mov	r0, r3
 8018dce:	f7fe f9a7 	bl	8017120 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>
 8018dd2:	bf00      	nop
 8018dd4:	3710      	adds	r7, #16
 8018dd6:	46bd      	mov	sp, r7
 8018dd8:	bd80      	pop	{r7, pc}

08018dda <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8018dda:	b580      	push	{r7, lr}
 8018ddc:	b082      	sub	sp, #8
 8018dde:	af00      	add	r7, sp, #0
 8018de0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8018de2:	6878      	ldr	r0, [r7, #4]
 8018de4:	f000 f9d5 	bl	8019192 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEEC1Ev>
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	4618      	mov	r0, r3
 8018dec:	f000 f9dd 	bl	80191aa <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EEC1Ev>
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	4618      	mov	r0, r3
 8018df4:	3708      	adds	r7, #8
 8018df6:	46bd      	mov	sp, r7
 8018df8:	bd80      	pop	{r7, pc}

08018dfa <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8018dfa:	b580      	push	{r7, lr}
 8018dfc:	b082      	sub	sp, #8
 8018dfe:	af00      	add	r7, sp, #0
 8018e00:	6078      	str	r0, [r7, #4]
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	4618      	mov	r0, r3
 8018e06:	f000 f9de 	bl	80191c6 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERS2_>
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	4618      	mov	r0, r3
 8018e0e:	3708      	adds	r7, #8
 8018e10:	46bd      	mov	sp, r7
 8018e12:	bd80      	pop	{r7, pc}

08018e14 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC2209StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b082      	sub	sp, #8
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8018e1c:	6878      	ldr	r0, [r7, #4]
 8018e1e:	f000 f9dd 	bl	80191dc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEE7_M_headERS3_>
 8018e22:	4603      	mov	r3, r0
 8018e24:	4618      	mov	r0, r3
 8018e26:	3708      	adds	r7, #8
 8018e28:	46bd      	mov	sp, r7
 8018e2a:	bd80      	pop	{r7, pc}

08018e2c <_ZSt12__get_helperILj0EP14TMC2209StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8018e2c:	b580      	push	{r7, lr}
 8018e2e:	b082      	sub	sp, #8
 8018e30:	af00      	add	r7, sp, #0
 8018e32:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8018e34:	6878      	ldr	r0, [r7, #4]
 8018e36:	f000 f9dd 	bl	80191f4 <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERKS4_>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	3708      	adds	r7, #8
 8018e40:	46bd      	mov	sp, r7
 8018e42:	bd80      	pop	{r7, pc}

08018e44 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b082      	sub	sp, #8
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 8018e4c:	f000 f8a2 	bl	8018f94 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018e50:	4603      	mov	r3, r0
 8018e52:	461a      	mov	r2, r3
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	4293      	cmp	r3, r2
 8018e58:	bf94      	ite	ls
 8018e5a:	2301      	movls	r3, #1
 8018e5c:	2300      	movhi	r3, #0
 8018e5e:	b2db      	uxtb	r3, r3
}
 8018e60:	4618      	mov	r0, r3
 8018e62:	3708      	adds	r7, #8
 8018e64:	46bd      	mov	sp, r7
 8018e66:	bd80      	pop	{r7, pc}

08018e68 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b082      	sub	sp, #8
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	6078      	str	r0, [r7, #4]
  if (value < 0)
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	da01      	bge.n	8018e7a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x12>
    return false;
 8018e76:	2300      	movs	r3, #0
 8018e78:	e009      	b.n	8018e8e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x26>
  return value <= TIn(numeric_limits<TOut>::highest());
 8018e7a:	f000 f88b 	bl	8018f94 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018e7e:	4603      	mov	r3, r0
 8018e80:	461a      	mov	r2, r3
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	4293      	cmp	r3, r2
 8018e86:	bfd4      	ite	le
 8018e88:	2301      	movle	r3, #1
 8018e8a:	2300      	movgt	r3, #0
 8018e8c:	b2db      	uxtb	r3, r3
}
 8018e8e:	4618      	mov	r0, r3
 8018e90:	3708      	adds	r7, #8
 8018e92:	46bd      	mov	sp, r7
 8018e94:	bd80      	pop	{r7, pc}

08018e96 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018e96:	b5b0      	push	{r4, r5, r7, lr}
 8018e98:	b082      	sub	sp, #8
 8018e9a:	af00      	add	r7, sp, #0
 8018e9c:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8018ea0:	f000 f878 	bl	8018f94 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018ea4:	4603      	mov	r3, r0
 8018ea6:	b2db      	uxtb	r3, r3
 8018ea8:	2200      	movs	r2, #0
 8018eaa:	461c      	mov	r4, r3
 8018eac:	4615      	mov	r5, r2
 8018eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018eb2:	4294      	cmp	r4, r2
 8018eb4:	eb75 0303 	sbcs.w	r3, r5, r3
 8018eb8:	bf2c      	ite	cs
 8018eba:	2301      	movcs	r3, #1
 8018ebc:	2300      	movcc	r3, #0
 8018ebe:	b2db      	uxtb	r3, r3
}
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	3708      	adds	r7, #8
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	bdb0      	pop	{r4, r5, r7, pc}

08018ec8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018ec8:	b5b0      	push	{r4, r5, r7, lr}
 8018eca:	b082      	sub	sp, #8
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 8018ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	da01      	bge.n	8018ede <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8018eda:	2300      	movs	r3, #0
 8018edc:	e00f      	b.n	8018efe <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x36>
  return value <= TIn(numeric_limits<TOut>::highest());
 8018ede:	f000 f859 	bl	8018f94 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018ee2:	4603      	mov	r3, r0
 8018ee4:	b2db      	uxtb	r3, r3
 8018ee6:	2200      	movs	r2, #0
 8018ee8:	461c      	mov	r4, r3
 8018eea:	4615      	mov	r5, r2
 8018eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ef0:	4294      	cmp	r4, r2
 8018ef2:	eb75 0303 	sbcs.w	r3, r5, r3
 8018ef6:	bfac      	ite	ge
 8018ef8:	2301      	movge	r3, #1
 8018efa:	2300      	movlt	r3, #0
 8018efc:	b2db      	uxtb	r3, r3
}
 8018efe:	4618      	mov	r0, r3
 8018f00:	3708      	adds	r7, #8
 8018f02:	46bd      	mov	sp, r7
 8018f04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018f08 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v>:
  T convertTo() const {
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b082      	sub	sp, #8
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
    switch (type_) {
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	781b      	ldrb	r3, [r3, #0]
 8018f14:	3b01      	subs	r3, #1
 8018f16:	2b03      	cmp	r3, #3
 8018f18:	d82e      	bhi.n	8018f78 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x70>
 8018f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8018f20 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x18>)
 8018f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f20:	08018f31 	.word	0x08018f31
 8018f24:	08018f43 	.word	0x08018f43
 8018f28:	08018f55 	.word	0x08018f55
 8018f2c:	08018f67 	.word	0x08018f67
        return convertNumber<T>(value_.asFloat);
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	edd3 7a02 	vldr	s15, [r3, #8]
 8018f36:	eeb0 0a67 	vmov.f32	s0, s15
 8018f3a:	f7ff fe4e 	bl	8018bda <_ZN11ArduinoJson8V730HB226detail13convertNumberIhfEET_T0_>
 8018f3e:	4603      	mov	r3, r0
 8018f40:	e01b      	b.n	8018f7a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018f48:	4610      	mov	r0, r2
 8018f4a:	4619      	mov	r1, r3
 8018f4c:	f7ff fe1e 	bl	8018b8c <_ZN11ArduinoJson8V730HB226detail13convertNumberIhxEET_T0_>
 8018f50:	4603      	mov	r3, r0
 8018f52:	e012      	b.n	8018f7a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018f5a:	4610      	mov	r0, r2
 8018f5c:	4619      	mov	r1, r3
 8018f5e:	f7ff fe02 	bl	8018b66 <_ZN11ArduinoJson8V730HB226detail13convertNumberIhyEET_T0_>
 8018f62:	4603      	mov	r3, r0
 8018f64:	e009      	b.n	8018f7a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	ed93 7b02 	vldr	d7, [r3, #8]
 8018f6c:	eeb0 0b47 	vmov.f64	d0, d7
 8018f70:	f7ff fe4d 	bl	8018c0e <_ZN11ArduinoJson8V730HB226detail13convertNumberIhdEET_T0_>
 8018f74:	4603      	mov	r3, r0
 8018f76:	e000      	b.n	8018f7a <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIhEET_v+0x72>
        return T();
 8018f78:	2300      	movs	r3, #0
  }
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	3708      	adds	r7, #8
 8018f7e:	46bd      	mov	sp, r7
 8018f80:	bd80      	pop	{r7, pc}
 8018f82:	bf00      	nop

08018f84 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>:
  static constexpr T lowest() {
 8018f84:	b480      	push	{r7}
 8018f86:	af00      	add	r7, sp, #0
    return 0;
 8018f88:	2300      	movs	r3, #0
  }
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f92:	4770      	bx	lr

08018f94 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>:
  static constexpr T highest() {
 8018f94:	b480      	push	{r7}
 8018f96:	af00      	add	r7, sp, #0
    return T(-1);
 8018f98:	23ff      	movs	r3, #255	@ 0xff
  }
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	46bd      	mov	sp, r7
 8018f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fa2:	4770      	bx	lr

08018fa4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b082      	sub	sp, #8
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8018fae:	f7ff ffe9 	bl	8018f84 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>
 8018fb2:	4603      	mov	r3, r0
 8018fb4:	ee07 3a90 	vmov	s15, r3
 8018fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018fbc:	ed97 7a01 	vldr	s14, [r7, #4]
 8018fc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fc8:	db0f      	blt.n	8018fea <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 8018fca:	f7ff ffe3 	bl	8018f94 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 8018fce:	4603      	mov	r3, r0
 8018fd0:	ee07 3a90 	vmov	s15, r3
 8018fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8018fd8:	ed97 7a01 	vldr	s14, [r7, #4]
 8018fdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fe4:	d801      	bhi.n	8018fea <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8018fe6:	2301      	movs	r3, #1
 8018fe8:	e000      	b.n	8018fec <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 8018fea:	2300      	movs	r3, #0
}
 8018fec:	4618      	mov	r0, r3
 8018fee:	3708      	adds	r7, #8
 8018ff0:	46bd      	mov	sp, r7
 8018ff2:	bd80      	pop	{r7, pc}

08018ff4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b082      	sub	sp, #8
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 8018ffe:	f7ff ffc1 	bl	8018f84 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE6lowestEv>
 8019002:	4603      	mov	r3, r0
 8019004:	ee07 3a90 	vmov	s15, r3
 8019008:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801900c:	ed97 6b00 	vldr	d6, [r7]
 8019010:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019018:	db0f      	blt.n	801903a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
         value <= numeric_limits<TOut>::highest();
 801901a:	f7ff ffbb 	bl	8018f94 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIhvE7highestEv>
 801901e:	4603      	mov	r3, r0
 8019020:	ee07 3a90 	vmov	s15, r3
 8019024:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8019028:	ed97 6b00 	vldr	d6, [r7]
 801902c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019034:	d801      	bhi.n	801903a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x46>
 8019036:	2301      	movs	r3, #1
 8019038:	e000      	b.n	801903c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIhdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x48>
 801903a:	2300      	movs	r3, #0
}
 801903c:	4618      	mov	r0, r3
 801903e:	3708      	adds	r7, #8
 8019040:	46bd      	mov	sp, r7
 8019042:	bd80      	pop	{r7, pc}

08019044 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8019044:	b480      	push	{r7}
 8019046:	b083      	sub	sp, #12
 8019048:	af00      	add	r7, sp, #0
 801904a:	6078      	str	r0, [r7, #4]
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	4618      	mov	r0, r3
 8019050:	370c      	adds	r7, #12
 8019052:	46bd      	mov	sp, r7
 8019054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019058:	4770      	bx	lr

0801905a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801905a:	b480      	push	{r7}
 801905c:	b083      	sub	sp, #12
 801905e:	af00      	add	r7, sp, #0
 8019060:	6078      	str	r0, [r7, #4]
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	4618      	mov	r0, r3
 8019066:	370c      	adds	r7, #12
 8019068:	46bd      	mov	sp, r7
 801906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801906e:	4770      	bx	lr

08019070 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8019070:	b580      	push	{r7, lr}
 8019072:	b082      	sub	sp, #8
 8019074:	af00      	add	r7, sp, #0
 8019076:	6078      	str	r0, [r7, #4]
 8019078:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801907a:	2200      	movs	r2, #0
 801907c:	6839      	ldr	r1, [r7, #0]
 801907e:	6878      	ldr	r0, [r7, #4]
 8019080:	f000 f8c6 	bl	8019210 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 8019084:	4603      	mov	r3, r0
 8019086:	4618      	mov	r0, r3
 8019088:	3708      	adds	r7, #8
 801908a:	46bd      	mov	sp, r7
 801908c:	bd80      	pop	{r7, pc}

0801908e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 801908e:	b580      	push	{r7, lr}
 8019090:	b084      	sub	sp, #16
 8019092:	af00      	add	r7, sp, #0
 8019094:	60f8      	str	r0, [r7, #12]
 8019096:	60b9      	str	r1, [r7, #8]
 8019098:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801909a:	68b8      	ldr	r0, [r7, #8]
 801909c:	f000 f8e6 	bl	801926c <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 80190a0:	4602      	mov	r2, r0
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	601a      	str	r2, [r3, #0]
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	687a      	ldr	r2, [r7, #4]
 80190aa:	605a      	str	r2, [r3, #4]
      { }
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	4618      	mov	r0, r3
 80190b0:	3710      	adds	r7, #16
 80190b2:	46bd      	mov	sp, r7
 80190b4:	bd80      	pop	{r7, pc}

080190b6 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80190b6:	b580      	push	{r7, lr}
 80190b8:	b084      	sub	sp, #16
 80190ba:	af00      	add	r7, sp, #0
 80190bc:	60f8      	str	r0, [r7, #12]
 80190be:	60b9      	str	r1, [r7, #8]
 80190c0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80190c2:	687a      	ldr	r2, [r7, #4]
 80190c4:	68b9      	ldr	r1, [r7, #8]
 80190c6:	68f8      	ldr	r0, [r7, #12]
 80190c8:	f000 f8db 	bl	8019282 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 80190cc:	bf00      	nop
 80190ce:	3710      	adds	r7, #16
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}

080190d4 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 80190d4:	b480      	push	{r7}
 80190d6:	b083      	sub	sp, #12
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
      return __ptr;
 80190dc:	687b      	ldr	r3, [r7, #4]
    }
 80190de:	4618      	mov	r0, r3
 80190e0:	370c      	adds	r7, #12
 80190e2:	46bd      	mov	sp, r7
 80190e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190e8:	4770      	bx	lr

080190ea <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 80190ea:	b580      	push	{r7, lr}
 80190ec:	b082      	sub	sp, #8
 80190ee:	af00      	add	r7, sp, #0
 80190f0:	6078      	str	r0, [r7, #4]
 80190f2:	7039      	strb	r1, [r7, #0]
 80190f4:	463b      	mov	r3, r7
 80190f6:	4619      	mov	r1, r3
 80190f8:	6878      	ldr	r0, [r7, #4]
 80190fa:	f7f5 fb63 	bl	800e7c4 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	4618      	mov	r0, r3
 8019102:	3708      	adds	r7, #8
 8019104:	46bd      	mov	sp, r7
 8019106:	bd80      	pop	{r7, pc}

08019108 <_ZNSt16allocator_traitsISaIvEE9constructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 8019108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801910c:	b08c      	sub	sp, #48	@ 0x30
 801910e:	af06      	add	r7, sp, #24
 8019110:	6178      	str	r0, [r7, #20]
 8019112:	6139      	str	r1, [r7, #16]
 8019114:	60fa      	str	r2, [r7, #12]
 8019116:	60bb      	str	r3, [r7, #8]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 8019118:	68f8      	ldr	r0, [r7, #12]
 801911a:	f7fc fd61 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801911e:	4680      	mov	r8, r0
 8019120:	68b8      	ldr	r0, [r7, #8]
 8019122:	f7fc fd68 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019126:	4681      	mov	r9, r0
 8019128:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801912a:	f7ff f9f9 	bl	8018520 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801912e:	4682      	mov	sl, r0
 8019130:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8019132:	f7fc fd6b 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019136:	4604      	mov	r4, r0
 8019138:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801913a:	f7fc fd67 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801913e:	4605      	mov	r5, r0
 8019140:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8019142:	f7f8 fa54 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8019146:	4606      	mov	r6, r0
 8019148:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801914a:	f7fc fd5f 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801914e:	6078      	str	r0, [r7, #4]
 8019150:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8019152:	f7fc fd66 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019156:	4603      	mov	r3, r0
 8019158:	9304      	str	r3, [sp, #16]
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	9303      	str	r3, [sp, #12]
 801915e:	9602      	str	r6, [sp, #8]
 8019160:	9501      	str	r5, [sp, #4]
 8019162:	9400      	str	r4, [sp, #0]
 8019164:	4653      	mov	r3, sl
 8019166:	464a      	mov	r2, r9
 8019168:	4641      	mov	r1, r8
 801916a:	6938      	ldr	r0, [r7, #16]
 801916c:	f000 f89a 	bl	80192a4 <_ZSt10_ConstructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>
 8019170:	bf00      	nop
 8019172:	3718      	adds	r7, #24
 8019174:	46bd      	mov	sp, r7
 8019176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801917a <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E6_M_ptrEv>:
      _M_ptr() noexcept
 801917a:	b580      	push	{r7, lr}
 801917c:	b082      	sub	sp, #8
 801917e:	af00      	add	r7, sp, #0
 8019180:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8019182:	6878      	ldr	r0, [r7, #4]
 8019184:	f000 f8e7 	bl	8019356 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E7_M_addrEv>
 8019188:	4603      	mov	r3, r0
 801918a:	4618      	mov	r0, r3
 801918c:	3708      	adds	r7, #8
 801918e:	46bd      	mov	sp, r7
 8019190:	bd80      	pop	{r7, pc}

08019192 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEEC1Ev>:
      _Tuple_impl()
 8019192:	b580      	push	{r7, lr}
 8019194:	b082      	sub	sp, #8
 8019196:	af00      	add	r7, sp, #0
 8019198:	6078      	str	r0, [r7, #4]
      : _Base() { }
 801919a:	6878      	ldr	r0, [r7, #4]
 801919c:	f000 f8e6 	bl	801936c <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EEC1Ev>
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	4618      	mov	r0, r3
 80191a4:	3708      	adds	r7, #8
 80191a6:	46bd      	mov	sp, r7
 80191a8:	bd80      	pop	{r7, pc}

080191aa <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EEC1Ev>:
      constexpr _Head_base()
 80191aa:	b480      	push	{r7}
 80191ac:	b083      	sub	sp, #12
 80191ae:	af00      	add	r7, sp, #0
 80191b0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	2200      	movs	r2, #0
 80191b6:	601a      	str	r2, [r3, #0]
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	4618      	mov	r0, r3
 80191bc:	370c      	adds	r7, #12
 80191be:	46bd      	mov	sp, r7
 80191c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191c4:	4770      	bx	lr

080191c6 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80191c6:	b480      	push	{r7}
 80191c8:	b083      	sub	sp, #12
 80191ca:	af00      	add	r7, sp, #0
 80191cc:	6078      	str	r0, [r7, #4]
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	4618      	mov	r0, r3
 80191d2:	370c      	adds	r7, #12
 80191d4:	46bd      	mov	sp, r7
 80191d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191da:	4770      	bx	lr

080191dc <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC2209StepperEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80191dc:	b580      	push	{r7, lr}
 80191de:	b082      	sub	sp, #8
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	6078      	str	r0, [r7, #4]
 80191e4:	6878      	ldr	r0, [r7, #4]
 80191e6:	f000 f8cc 	bl	8019382 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EE7_M_headERS3_>
 80191ea:	4603      	mov	r3, r0
 80191ec:	4618      	mov	r0, r3
 80191ee:	3708      	adds	r7, #8
 80191f0:	46bd      	mov	sp, r7
 80191f2:	bd80      	pop	{r7, pc}

080191f4 <_ZNSt11_Tuple_implILj0EJP14TMC2209StepperSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80191f4:	b580      	push	{r7, lr}
 80191f6:	b082      	sub	sp, #8
 80191f8:	af00      	add	r7, sp, #0
 80191fa:	6078      	str	r0, [r7, #4]
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	4618      	mov	r0, r3
 8019200:	f000 f8ca 	bl	8019398 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERKS2_>
 8019204:	4603      	mov	r3, r0
 8019206:	4618      	mov	r0, r3
 8019208:	3708      	adds	r7, #8
 801920a:	46bd      	mov	sp, r7
 801920c:	bd80      	pop	{r7, pc}
	...

08019210 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8019210:	b580      	push	{r7, lr}
 8019212:	b084      	sub	sp, #16
 8019214:	af00      	add	r7, sp, #0
 8019216:	60f8      	str	r0, [r7, #12]
 8019218:	60b9      	str	r1, [r7, #8]
 801921a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801921c:	68f8      	ldr	r0, [r7, #12]
 801921e:	f000 f8c7 	bl	80193b0 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 8019222:	4602      	mov	r2, r0
 8019224:	68bb      	ldr	r3, [r7, #8]
 8019226:	4293      	cmp	r3, r2
 8019228:	bf8c      	ite	hi
 801922a:	2301      	movhi	r3, #1
 801922c:	2300      	movls	r3, #0
 801922e:	b2db      	uxtb	r3, r3
 8019230:	2b00      	cmp	r3, #0
 8019232:	bf14      	ite	ne
 8019234:	2301      	movne	r3, #1
 8019236:	2300      	moveq	r3, #0
 8019238:	b2db      	uxtb	r3, r3
 801923a:	2b00      	cmp	r3, #0
 801923c:	d007      	beq.n	801924e <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801923e:	68bb      	ldr	r3, [r7, #8]
 8019240:	4a09      	ldr	r2, [pc, #36]	@ (8019268 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 8019242:	4293      	cmp	r3, r2
 8019244:	d901      	bls.n	801924a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8019246:	f00f fa6d 	bl	8028724 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801924a:	f00f fa68 	bl	802871e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801924e:	68bb      	ldr	r3, [r7, #8]
 8019250:	225c      	movs	r2, #92	@ 0x5c
 8019252:	fb02 f303 	mul.w	r3, r2, r3
 8019256:	4618      	mov	r0, r3
 8019258:	f00f fa4e 	bl	80286f8 <_Znwj>
 801925c:	4603      	mov	r3, r0
 801925e:	bf00      	nop
      }
 8019260:	4618      	mov	r0, r3
 8019262:	3710      	adds	r7, #16
 8019264:	46bd      	mov	sp, r7
 8019266:	bd80      	pop	{r7, pc}
 8019268:	02c8590b 	.word	0x02c8590b

0801926c <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801926c:	b480      	push	{r7}
 801926e:	b083      	sub	sp, #12
 8019270:	af00      	add	r7, sp, #0
 8019272:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	4618      	mov	r0, r3
 8019278:	370c      	adds	r7, #12
 801927a:	46bd      	mov	sp, r7
 801927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019280:	4770      	bx	lr

08019282 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8019282:	b580      	push	{r7, lr}
 8019284:	b084      	sub	sp, #16
 8019286:	af00      	add	r7, sp, #0
 8019288:	60f8      	str	r0, [r7, #12]
 801928a:	60b9      	str	r1, [r7, #8]
 801928c:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	225c      	movs	r2, #92	@ 0x5c
 8019292:	fb02 f303 	mul.w	r3, r2, r3
 8019296:	4619      	mov	r1, r3
 8019298:	68b8      	ldr	r0, [r7, #8]
 801929a:	f00f fa1c 	bl	80286d6 <_ZdlPvj>
      }
 801929e:	3710      	adds	r7, #16
 80192a0:	46bd      	mov	sp, r7
 80192a2:	bd80      	pop	{r7, pc}

080192a4 <_ZSt10_ConstructI7TMC2209JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80192a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192a8:	ed2d 8b02 	vpush	{d8}
 80192ac:	b08e      	sub	sp, #56	@ 0x38
 80192ae:	af04      	add	r7, sp, #16
 80192b0:	60f8      	str	r0, [r7, #12]
 80192b2:	60b9      	str	r1, [r7, #8]
 80192b4:	607a      	str	r2, [r7, #4]
 80192b6:	603b      	str	r3, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	4619      	mov	r1, r3
 80192bc:	2050      	movs	r0, #80	@ 0x50
 80192be:	f7f1 fbbb 	bl	800aa38 <_ZnwjPv>
 80192c2:	4682      	mov	sl, r0
 80192c4:	68b8      	ldr	r0, [r7, #8]
 80192c6:	f7fc fc8b 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80192ca:	4602      	mov	r2, r0
 80192cc:	f107 0310 	add.w	r3, r7, #16
 80192d0:	4611      	mov	r1, r2
 80192d2:	4618      	mov	r0, r3
 80192d4:	f00f faec 	bl	80288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80192d8:	6878      	ldr	r0, [r7, #4]
 80192da:	f7fc fc8c 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 80192de:	4603      	mov	r3, r0
 80192e0:	ed93 8a00 	vldr	s16, [r3]
 80192e4:	6838      	ldr	r0, [r7, #0]
 80192e6:	f7ff f91b 	bl	8018520 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80192ea:	4603      	mov	r3, r0
 80192ec:	f893 8000 	ldrb.w	r8, [r3]
 80192f0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80192f2:	f7fc fc8b 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 80192f6:	4603      	mov	r3, r0
 80192f8:	f8b3 9000 	ldrh.w	r9, [r3]
 80192fc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80192fe:	f7fc fc85 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019302:	4603      	mov	r3, r0
 8019304:	881c      	ldrh	r4, [r3, #0]
 8019306:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019308:	f7f8 f971 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801930c:	4603      	mov	r3, r0
 801930e:	781d      	ldrb	r5, [r3, #0]
 8019310:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8019312:	f7fc fc7b 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019316:	4603      	mov	r3, r0
 8019318:	881e      	ldrh	r6, [r3, #0]
 801931a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801931c:	f7fc fc81 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019320:	4603      	mov	r3, r0
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	f107 0110 	add.w	r1, r7, #16
 8019328:	9303      	str	r3, [sp, #12]
 801932a:	9602      	str	r6, [sp, #8]
 801932c:	9501      	str	r5, [sp, #4]
 801932e:	9400      	str	r4, [sp, #0]
 8019330:	464b      	mov	r3, r9
 8019332:	4642      	mov	r2, r8
 8019334:	eeb0 0a48 	vmov.f32	s0, s16
 8019338:	4650      	mov	r0, sl
 801933a:	f7fe fe15 	bl	8017f68 <_ZN7TMC2209C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfhttbtP6Remora>
 801933e:	f107 0310 	add.w	r3, r7, #16
 8019342:	4618      	mov	r0, r3
 8019344:	f00f fad3 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 8019348:	bf00      	nop
 801934a:	3728      	adds	r7, #40	@ 0x28
 801934c:	46bd      	mov	sp, r7
 801934e:	ecbd 8b02 	vpop	{d8}
 8019352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019356 <_ZN9__gnu_cxx16__aligned_bufferI7TMC2209E7_M_addrEv>:
      _M_addr() noexcept
 8019356:	b480      	push	{r7}
 8019358:	b083      	sub	sp, #12
 801935a:	af00      	add	r7, sp, #0
 801935c:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 801935e:	687b      	ldr	r3, [r7, #4]
      }
 8019360:	4618      	mov	r0, r3
 8019362:	370c      	adds	r7, #12
 8019364:	46bd      	mov	sp, r7
 8019366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801936a:	4770      	bx	lr

0801936c <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EEC1Ev>:
      constexpr _Head_base()
 801936c:	b480      	push	{r7}
 801936e:	b083      	sub	sp, #12
 8019370:	af00      	add	r7, sp, #0
 8019372:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	4618      	mov	r0, r3
 8019378:	370c      	adds	r7, #12
 801937a:	46bd      	mov	sp, r7
 801937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019380:	4770      	bx	lr

08019382 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC2209StepperELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8019382:	b480      	push	{r7}
 8019384:	b083      	sub	sp, #12
 8019386:	af00      	add	r7, sp, #0
 8019388:	6078      	str	r0, [r7, #4]
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	4618      	mov	r0, r3
 801938e:	370c      	adds	r7, #12
 8019390:	46bd      	mov	sp, r7
 8019392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019396:	4770      	bx	lr

08019398 <_ZNSt10_Head_baseILj0EP14TMC2209StepperLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8019398:	b480      	push	{r7}
 801939a:	b083      	sub	sp, #12
 801939c:	af00      	add	r7, sp, #0
 801939e:	6078      	str	r0, [r7, #4]
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	4618      	mov	r0, r3
 80193a4:	370c      	adds	r7, #12
 80193a6:	46bd      	mov	sp, r7
 80193a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ac:	4770      	bx	lr
	...

080193b0 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80193b0:	b480      	push	{r7}
 80193b2:	b083      	sub	sp, #12
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80193b8:	4b03      	ldr	r3, [pc, #12]	@ (80193c8 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 80193ba:	4618      	mov	r0, r3
 80193bc:	370c      	adds	r7, #12
 80193be:	46bd      	mov	sp, r7
 80193c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c4:	4770      	bx	lr
 80193c6:	bf00      	nop
 80193c8:	01642c85 	.word	0x01642c85

080193cc <_ZN7TMC2209D1Ev>:

public:

	TMC2209(std::string, float, uint8_t, uint16_t, uint16_t, bool, uint16_t, Remora*);
	static std::shared_ptr<Module> create(const JsonObject& config, Remora* instance);
	~TMC2209() = default;
 80193cc:	b580      	push	{r7, lr}
 80193ce:	b082      	sub	sp, #8
 80193d0:	af00      	add	r7, sp, #0
 80193d2:	6078      	str	r0, [r7, #4]
 80193d4:	4a0a      	ldr	r2, [pc, #40]	@ (8019400 <_ZN7TMC2209D1Ev+0x34>)
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	601a      	str	r2, [r3, #0]
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	334c      	adds	r3, #76	@ 0x4c
 80193de:	4618      	mov	r0, r3
 80193e0:	f7ff f83b 	bl	801845a <_ZNSt10unique_ptrI14TMC2209StepperSt14default_deleteIS0_EED1Ev>
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	3328      	adds	r3, #40	@ 0x28
 80193e8:	4618      	mov	r0, r3
 80193ea:	f00f fa80 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	4618      	mov	r0, r3
 80193f2:	f7fb ff71 	bl	80152d8 <_ZN3TMCD1Ev>
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	4618      	mov	r0, r3
 80193fa:	3708      	adds	r7, #8
 80193fc:	46bd      	mov	sp, r7
 80193fe:	bd80      	pop	{r7, pc}
 8019400:	0802b6d4 	.word	0x0802b6d4

08019404 <_ZN7TMC2209D0Ev>:
 8019404:	b580      	push	{r7, lr}
 8019406:	b082      	sub	sp, #8
 8019408:	af00      	add	r7, sp, #0
 801940a:	6078      	str	r0, [r7, #4]
 801940c:	6878      	ldr	r0, [r7, #4]
 801940e:	f7ff ffdd 	bl	80193cc <_ZN7TMC2209D1Ev>
 8019412:	2150      	movs	r1, #80	@ 0x50
 8019414:	6878      	ldr	r0, [r7, #4]
 8019416:	f00f f95e 	bl	80286d6 <_ZdlPvj>
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	4618      	mov	r0, r3
 801941e:	3708      	adds	r7, #8
 8019420:	46bd      	mov	sp, r7
 8019422:	bd80      	pop	{r7, pc}

08019424 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 8019424:	b580      	push	{r7, lr}
 8019426:	b082      	sub	sp, #8
 8019428:	af00      	add	r7, sp, #0
 801942a:	6078      	str	r0, [r7, #4]
 801942c:	4a05      	ldr	r2, [pc, #20]	@ (8019444 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	601a      	str	r2, [r3, #0]
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	4618      	mov	r0, r3
 8019436:	f7f3 f96d 	bl	800c714 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	4618      	mov	r0, r3
 801943e:	3708      	adds	r7, #8
 8019440:	46bd      	mov	sp, r7
 8019442:	bd80      	pop	{r7, pc}
 8019444:	0802b6b8 	.word	0x0802b6b8

08019448 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8019448:	b580      	push	{r7, lr}
 801944a:	b082      	sub	sp, #8
 801944c:	af00      	add	r7, sp, #0
 801944e:	6078      	str	r0, [r7, #4]
 8019450:	6878      	ldr	r0, [r7, #4]
 8019452:	f7ff ffe7 	bl	8019424 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8019456:	215c      	movs	r1, #92	@ 0x5c
 8019458:	6878      	ldr	r0, [r7, #4]
 801945a:	f00f f93c 	bl	80286d6 <_ZdlPvj>
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	4618      	mov	r0, r3
 8019462:	3708      	adds	r7, #8
 8019464:	46bd      	mov	sp, r7
 8019466:	bd80      	pop	{r7, pc}

08019468 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8019468:	b590      	push	{r4, r7, lr}
 801946a:	b083      	sub	sp, #12
 801946c:	af00      	add	r7, sp, #0
 801946e:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	330c      	adds	r3, #12
 8019474:	4618      	mov	r0, r3
 8019476:	f000 f856 	bl	8019526 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801947a:	4604      	mov	r4, r0
 801947c:	6878      	ldr	r0, [r7, #4]
 801947e:	f7ff fc8e 	bl	8018d9e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 8019482:	4603      	mov	r3, r0
 8019484:	4619      	mov	r1, r3
 8019486:	4620      	mov	r0, r4
 8019488:	f000 f859 	bl	801953e <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2209EEvRS0_PT_>
      }
 801948c:	bf00      	nop
 801948e:	370c      	adds	r7, #12
 8019490:	46bd      	mov	sp, r7
 8019492:	bd90      	pop	{r4, r7, pc}

08019494 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8019494:	b580      	push	{r7, lr}
 8019496:	b086      	sub	sp, #24
 8019498:	af00      	add	r7, sp, #0
 801949a:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	330c      	adds	r3, #12
 80194a0:	4618      	mov	r0, r3
 80194a2:	f000 f840 	bl	8019526 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80194a6:	4602      	mov	r2, r0
 80194a8:	f107 0314 	add.w	r3, r7, #20
 80194ac:	4611      	mov	r1, r2
 80194ae:	4618      	mov	r0, r3
 80194b0:	f7ff fbc7 	bl	8018c42 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80194b4:	f107 0114 	add.w	r1, r7, #20
 80194b8:	f107 030c 	add.w	r3, r7, #12
 80194bc:	687a      	ldr	r2, [r7, #4]
 80194be:	4618      	mov	r0, r3
 80194c0:	f7ff fde5 	bl	801908e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 80194c4:	6878      	ldr	r0, [r7, #4]
 80194c6:	f7ff ffad 	bl	8019424 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 80194ca:	f107 030c 	add.w	r3, r7, #12
 80194ce:	4618      	mov	r0, r3
 80194d0:	f7ff fbe3 	bl	8018c9a <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80194d4:	f107 0314 	add.w	r3, r7, #20
 80194d8:	4618      	mov	r0, r3
 80194da:	f7ff fbbf 	bl	8018c5c <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80194de:	3718      	adds	r7, #24
 80194e0:	46bd      	mov	sp, r7
 80194e2:	bd80      	pop	{r7, pc}

080194e4 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b084      	sub	sp, #16
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
 80194ec:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 80194ee:	6878      	ldr	r0, [r7, #4]
 80194f0:	f7ff fc55 	bl	8018d9e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 80194f4:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 80194f6:	f7f1 faeb 	bl	800aad0 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 80194fa:	4602      	mov	r2, r0
	    ||
 80194fc:	683b      	ldr	r3, [r7, #0]
 80194fe:	4293      	cmp	r3, r2
 8019500:	d005      	beq.n	801950e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 8019502:	6838      	ldr	r0, [r7, #0]
 8019504:	f00f f924 	bl	8028750 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 8019508:	4603      	mov	r3, r0
	    ||
 801950a:	2b00      	cmp	r3, #0
 801950c:	d001      	beq.n	8019512 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 801950e:	2301      	movs	r3, #1
 8019510:	e000      	b.n	8019514 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 8019512:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 8019514:	2b00      	cmp	r3, #0
 8019516:	d001      	beq.n	801951c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	e000      	b.n	801951e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 801951c:	2300      	movs	r3, #0
      }
 801951e:	4618      	mov	r0, r3
 8019520:	3710      	adds	r7, #16
 8019522:	46bd      	mov	sp, r7
 8019524:	bd80      	pop	{r7, pc}

08019526 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC2209SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 8019526:	b580      	push	{r7, lr}
 8019528:	b082      	sub	sp, #8
 801952a:	af00      	add	r7, sp, #0
 801952c:	6078      	str	r0, [r7, #4]
 801952e:	6878      	ldr	r0, [r7, #4]
 8019530:	f7f5 fbc3 	bl	800ecba <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 8019534:	4603      	mov	r3, r0
 8019536:	4618      	mov	r0, r3
 8019538:	3708      	adds	r7, #8
 801953a:	46bd      	mov	sp, r7
 801953c:	bd80      	pop	{r7, pc}

0801953e <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC2209EEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 801953e:	b580      	push	{r7, lr}
 8019540:	b082      	sub	sp, #8
 8019542:	af00      	add	r7, sp, #0
 8019544:	6078      	str	r0, [r7, #4]
 8019546:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 8019548:	6838      	ldr	r0, [r7, #0]
 801954a:	f000 f804 	bl	8019556 <_ZSt8_DestroyI7TMC2209EvPT_>
 801954e:	bf00      	nop
 8019550:	3708      	adds	r7, #8
 8019552:	46bd      	mov	sp, r7
 8019554:	bd80      	pop	{r7, pc}

08019556 <_ZSt8_DestroyI7TMC2209EvPT_>:
    _Destroy(_Tp* __pointer)
 8019556:	b580      	push	{r7, lr}
 8019558:	b082      	sub	sp, #8
 801955a:	af00      	add	r7, sp, #0
 801955c:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	6878      	ldr	r0, [r7, #4]
 8019566:	4798      	blx	r3
    }
 8019568:	bf00      	nop
 801956a:	3708      	adds	r7, #8
 801956c:	46bd      	mov	sp, r7
 801956e:	bd80      	pop	{r7, pc}

08019570 <_ZN14TMC5160Stepper11rms_currentEt>:
		void rms_current(uint16_t mA) { TMC2160Stepper::rms_current(mA); }
 8019570:	b580      	push	{r7, lr}
 8019572:	b082      	sub	sp, #8
 8019574:	af00      	add	r7, sp, #0
 8019576:	6078      	str	r0, [r7, #4]
 8019578:	460b      	mov	r3, r1
 801957a:	807b      	strh	r3, [r7, #2]
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	887a      	ldrh	r2, [r7, #2]
 8019580:	4611      	mov	r1, r2
 8019582:	4618      	mov	r0, r3
 8019584:	f7ea fb00 	bl	8003b88 <_ZN14TMC2160Stepper11rms_currentEt>
 8019588:	bf00      	nop
 801958a:	3708      	adds	r7, #8
 801958c:	46bd      	mov	sp, r7
 801958e:	bd80      	pop	{r7, pc}

08019590 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_ptr() = default;
 8019590:	b580      	push	{r7, lr}
 8019592:	b082      	sub	sp, #8
 8019594:	af00      	add	r7, sp, #0
 8019596:	6078      	str	r0, [r7, #4]
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	3304      	adds	r3, #4
 801959c:	4618      	mov	r0, r3
 801959e:	f7f2 fc86 	bl	800beae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	4618      	mov	r0, r3
 80195a6:	3708      	adds	r7, #8
 80195a8:	46bd      	mov	sp, r7
 80195aa:	bd80      	pop	{r7, pc}

080195ac <_ZNSt10shared_ptrI7TMC5160ED1Ev>:
    class shared_ptr : public __shared_ptr<_Tp>
 80195ac:	b580      	push	{r7, lr}
 80195ae:	b082      	sub	sp, #8
 80195b0:	af00      	add	r7, sp, #0
 80195b2:	6078      	str	r0, [r7, #4]
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	4618      	mov	r0, r3
 80195b8:	f7ff ffea 	bl	8019590 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	4618      	mov	r0, r3
 80195c0:	3708      	adds	r7, #8
 80195c2:	46bd      	mov	sp, r7
 80195c4:	bd80      	pop	{r7, pc}
	...

080195c8 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora>:
#include "tmc.h"
#include <cstdint>

#define TOFF_VALUE  4 // [1... 15]

std::shared_ptr<Module> TMC5160::create(const JsonObject& config, Remora* instance) {
 80195c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195ca:	b0ef      	sub	sp, #444	@ 0x1bc
 80195cc:	af08      	add	r7, sp, #32
 80195ce:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195d2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80195d6:	6018      	str	r0, [r3, #0]
 80195d8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195dc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80195e0:	6019      	str	r1, [r3, #0]
 80195e2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195e6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80195ea:	601a      	str	r2, [r3, #0]
    printf("Creating TMC5160 module\n");
 80195ec:	48b1      	ldr	r0, [pc, #708]	@ (80198b4 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2ec>)
 80195ee:	f00f ff9d 	bl	802952c <puts>

    const char* comment = config["Comment"];
 80195f2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195f6:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 80195fa:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80195fe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019602:	4aad      	ldr	r2, [pc, #692]	@ (80198b8 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2f0>)
 8019604:	6819      	ldr	r1, [r3, #0]
 8019606:	f7f8 fee4 	bl	80123d2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801960a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801960e:	4618      	mov	r0, r3
 8019610:	f7ee fa56 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8019614:	f8c7 0194 	str.w	r0, [r7, #404]	@ 0x194
    printf("Comment: %s\n", comment);
 8019618:	f8d7 1194 	ldr.w	r1, [r7, #404]	@ 0x194
 801961c:	48a7      	ldr	r0, [pc, #668]	@ (80198bc <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2f4>)
 801961e:	f00f ff15 	bl	802944c <iprintf>

    std::string pinCS = config["CS pin"];
 8019622:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8019626:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801962a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801962e:	4aa4      	ldr	r2, [pc, #656]	@ (80198c0 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2f8>)
 8019630:	6819      	ldr	r1, [r3, #0]
 8019632:	f7ee fa20 	bl	8007a76 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8019636:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801963a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801963e:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 8019642:	4611      	mov	r1, r2
 8019644:	4618      	mov	r0, r3
 8019646:	f7fc f927 	bl	8015898 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    std::string pinMOSI = config["MOSI pin"];
 801964a:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 801964e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019652:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019656:	4a9b      	ldr	r2, [pc, #620]	@ (80198c4 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x2fc>)
 8019658:	6819      	ldr	r1, [r3, #0]
 801965a:	f7f7 fec8 	bl	80113ee <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801965e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019662:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8019666:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 801966a:	4611      	mov	r1, r2
 801966c:	4618      	mov	r0, r3
 801966e:	f7fc f913 	bl	8015898 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    std::string pinMISO = config["MISO pin"];
 8019672:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 8019676:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801967a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801967e:	4a92      	ldr	r2, [pc, #584]	@ (80198c8 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x300>)
 8019680:	6819      	ldr	r1, [r3, #0]
 8019682:	f7f7 feb4 	bl	80113ee <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8019686:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801968a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 801968e:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 8019692:	4611      	mov	r1, r2
 8019694:	4618      	mov	r0, r3
 8019696:	f7fc f8ff 	bl	8015898 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    std::string pinSCK = config["SCK pin"];
 801969a:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 801969e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80196a2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80196a6:	4a89      	ldr	r2, [pc, #548]	@ (80198cc <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x304>)
 80196a8:	6819      	ldr	r1, [r3, #0]
 80196aa:	f7f8 fe92 	bl	80123d2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80196ae:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80196b2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80196b6:	f107 02e4 	add.w	r2, r7, #228	@ 0xe4
 80196ba:	4611      	mov	r1, r2
 80196bc:	4618      	mov	r0, r3
 80196be:	f7fc f8eb 	bl	8015898 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_INSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELi0EEEv>
    float RSense = config["RSense"];
 80196c2:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 80196c6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80196ca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80196ce:	4a80      	ldr	r2, [pc, #512]	@ (80198d0 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x308>)
 80196d0:	6819      	ldr	r1, [r3, #0]
 80196d2:	f7ee f9d0 	bl	8007a76 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80196d6:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80196da:	4618      	mov	r0, r3
 80196dc:	f7fc f8ea 	bl	80158b4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IfLi0EEEv>
 80196e0:	eef0 7a40 	vmov.f32	s15, s0
 80196e4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80196e8:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80196ec:	edc3 7a00 	vstr	s15, [r3]
    uint8_t address = config["Address"];
 80196f0:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 80196f4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80196f8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80196fc:	4a75      	ldr	r2, [pc, #468]	@ (80198d4 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x30c>)
 80196fe:	6819      	ldr	r1, [r3, #0]
 8019700:	f7f8 fe67 	bl	80123d2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8019704:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8019708:	4618      	mov	r0, r3
 801970a:	f7fe fdd9 	bl	80182c0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IhLi0EEEv>
 801970e:	4603      	mov	r3, r0
 8019710:	461a      	mov	r2, r3
 8019712:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019716:	f2a3 1379 	subw	r3, r3, #377	@ 0x179
 801971a:	701a      	strb	r2, [r3, #0]
    uint16_t current = config["Current"];
 801971c:	f507 7096 	add.w	r0, r7, #300	@ 0x12c
 8019720:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019724:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019728:	4a6b      	ldr	r2, [pc, #428]	@ (80198d8 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x310>)
 801972a:	6819      	ldr	r1, [r3, #0]
 801972c:	f7f8 fe51 	bl	80123d2 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8019730:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8019734:	4618      	mov	r0, r3
 8019736:	f7fc f8cb 	bl	80158d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 801973a:	4603      	mov	r3, r0
 801973c:	461a      	mov	r2, r3
 801973e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019742:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8019746:	801a      	strh	r2, [r3, #0]
    uint16_t microsteps = config["Microsteps"];
 8019748:	f507 70a2 	add.w	r0, r7, #324	@ 0x144
 801974c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019750:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019754:	4a61      	ldr	r2, [pc, #388]	@ (80198dc <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x314>)
 8019756:	6819      	ldr	r1, [r3, #0]
 8019758:	f7f5 fe67 	bl	800f42a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 801975c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8019760:	4618      	mov	r0, r3
 8019762:	f7fc f8b5 	bl	80158d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8019766:	4603      	mov	r3, r0
 8019768:	461a      	mov	r2, r3
 801976a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801976e:	f5a3 73bf 	sub.w	r3, r3, #382	@ 0x17e
 8019772:	801a      	strh	r2, [r3, #0]
    uint16_t stall = config["Stall sensitivity"];
 8019774:	f507 70ae 	add.w	r0, r7, #348	@ 0x15c
 8019778:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801977c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8019780:	4a57      	ldr	r2, [pc, #348]	@ (80198e0 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x318>)
 8019782:	6819      	ldr	r1, [r3, #0]
 8019784:	f7fe fda8 	bl	80182d8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA18_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8019788:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 801978c:	4618      	mov	r0, r3
 801978e:	f7fc f89f 	bl	80158d0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ItLi0EEEv>
 8019792:	4603      	mov	r3, r0
 8019794:	461a      	mov	r2, r3
 8019796:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801979a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 801979e:	801a      	strh	r2, [r3, #0]
    bool stealthchop = (strcmp(config["Stealth chop"], "on") == 0);
 80197a0:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 80197a4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80197a8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80197ac:	4a4d      	ldr	r2, [pc, #308]	@ (80198e4 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x31c>)
 80197ae:	6819      	ldr	r1, [r3, #0]
 80197b0:	f7fa fce4 	bl	801417c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 80197b4:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 80197b8:	4618      	mov	r0, r3
 80197ba:	f7ee f981 	bl	8007ac0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 80197be:	4603      	mov	r3, r0
 80197c0:	4949      	ldr	r1, [pc, #292]	@ (80198e8 <_ZN7TMC51606createERKN11ArduinoJson8V730HB2210JsonObjectEP6Remora+0x320>)
 80197c2:	4618      	mov	r0, r3
 80197c4:	f7e6 fd8c 	bl	80002e0 <strcmp>
 80197c8:	4603      	mov	r3, r0
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	bf0c      	ite	eq
 80197ce:	2301      	moveq	r3, #1
 80197d0:	2300      	movne	r3, #0
 80197d2:	b2da      	uxtb	r2, r3
 80197d4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80197d8:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 80197dc:	701a      	strb	r2, [r3, #0]

    return std::make_shared<TMC5160>(std::move(pinCS), std::move(pinMOSI), std::move(pinMISO), std::move(pinSCK), RSense, address, current, microsteps, stealthchop, stall, instance);
 80197de:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80197e2:	4618      	mov	r0, r3
 80197e4:	f7f7 feb3 	bl	801154e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80197e8:	4604      	mov	r4, r0
 80197ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80197ee:	4618      	mov	r0, r3
 80197f0:	f7f7 fead 	bl	801154e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80197f4:	4605      	mov	r5, r0
 80197f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80197fa:	4618      	mov	r0, r3
 80197fc:	f7f7 fea7 	bl	801154e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019800:	4606      	mov	r6, r0
 8019802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019806:	4618      	mov	r0, r3
 8019808:	f7f7 fea1 	bl	801154e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 801980c:	4602      	mov	r2, r0
 801980e:	f507 70c6 	add.w	r0, r7, #396	@ 0x18c
 8019812:	1d3b      	adds	r3, r7, #4
 8019814:	9307      	str	r3, [sp, #28]
 8019816:	f107 0318 	add.w	r3, r7, #24
 801981a:	9306      	str	r3, [sp, #24]
 801981c:	f107 0317 	add.w	r3, r7, #23
 8019820:	9305      	str	r3, [sp, #20]
 8019822:	f107 031a 	add.w	r3, r7, #26
 8019826:	9304      	str	r3, [sp, #16]
 8019828:	f107 031c 	add.w	r3, r7, #28
 801982c:	9303      	str	r3, [sp, #12]
 801982e:	f107 031f 	add.w	r3, r7, #31
 8019832:	9302      	str	r3, [sp, #8]
 8019834:	f107 0320 	add.w	r3, r7, #32
 8019838:	9301      	str	r3, [sp, #4]
 801983a:	9200      	str	r2, [sp, #0]
 801983c:	4633      	mov	r3, r6
 801983e:	462a      	mov	r2, r5
 8019840:	4621      	mov	r1, r4
 8019842:	f000 f999 	bl	8019b78 <_ZSt11make_sharedI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_RfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>
 8019846:	f507 72c6 	add.w	r2, r7, #396	@ 0x18c
 801984a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 801984e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8019852:	4611      	mov	r1, r2
 8019854:	6818      	ldr	r0, [r3, #0]
 8019856:	f000 f9df 	bl	8019c18 <_ZNSt10shared_ptrI6ModuleEC1I7TMC5160vEEOS_IT_E>
 801985a:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 801985e:	4618      	mov	r0, r3
 8019860:	f7ff fea4 	bl	80195ac <_ZNSt10shared_ptrI7TMC5160ED1Ev>
}
 8019864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019868:	4618      	mov	r0, r3
 801986a:	f00f f840 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801986e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8019872:	4618      	mov	r0, r3
 8019874:	f00f f83b 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8019878:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801987c:	4618      	mov	r0, r3
 801987e:	f00f f836 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8019882:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8019886:	4618      	mov	r0, r3
 8019888:	f00f f831 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    return std::make_shared<TMC5160>(std::move(pinCS), std::move(pinMOSI), std::move(pinMISO), std::move(pinSCK), RSense, address, current, microsteps, stealthchop, stall, instance);
 801988c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8019890:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8019894:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8019898:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 801989c:	6812      	ldr	r2, [r2, #0]
 801989e:	601a      	str	r2, [r3, #0]
}
 80198a0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80198a4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80198a8:	6818      	ldr	r0, [r3, #0]
 80198aa:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 80198ae:	46bd      	mov	sp, r7
 80198b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198b2:	bf00      	nop
 80198b4:	0802af60 	.word	0x0802af60
 80198b8:	0802af78 	.word	0x0802af78
 80198bc:	0802af80 	.word	0x0802af80
 80198c0:	0802af90 	.word	0x0802af90
 80198c4:	0802af98 	.word	0x0802af98
 80198c8:	0802afa4 	.word	0x0802afa4
 80198cc:	0802afb0 	.word	0x0802afb0
 80198d0:	0802afb8 	.word	0x0802afb8
 80198d4:	0802afc0 	.word	0x0802afc0
 80198d8:	0802afc8 	.word	0x0802afc8
 80198dc:	0802afd0 	.word	0x0802afd0
 80198e0:	0802afdc 	.word	0x0802afdc
 80198e4:	0802aff0 	.word	0x0802aff0
 80198e8:	0802b000 	.word	0x0802b000

080198ec <_ZN7TMC5160C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_fhttbtP6Remora>:

TMC5160::TMC5160(std::string _pinCS, std::string _pinMOSI, std::string _pinMISO, std::string _pinSCK, float _Rsense, uint8_t _addr, uint16_t _mA, uint16_t _microsteps, bool _stealth, uint16_t _stall, Remora* _instance)
 80198ec:	b5b0      	push	{r4, r5, r7, lr}
 80198ee:	b088      	sub	sp, #32
 80198f0:	af02      	add	r7, sp, #8
 80198f2:	6178      	str	r0, [r7, #20]
 80198f4:	6139      	str	r1, [r7, #16]
 80198f6:	60fa      	str	r2, [r7, #12]
 80198f8:	60bb      	str	r3, [r7, #8]
 80198fa:	ed87 0a01 	vstr	s0, [r7, #4]
      addr(_addr),
      mA(_mA),
      microsteps(_microsteps),
      stealth(_stealth),
      stall(_stall),
      driver(std::make_unique<TMC5160Stepper>(pinCS, _Rsense, pinMOSI, pinMISO, pinSCK)) {}
 80198fe:	697b      	ldr	r3, [r7, #20]
 8019900:	edd7 7a01 	vldr	s15, [r7, #4]
 8019904:	eeb0 0a67 	vmov.f32	s0, s15
 8019908:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801990a:	4618      	mov	r0, r3
 801990c:	f7fb fbe0 	bl	80150d0 <_ZN3TMCC1EP6Remoraf>
 8019910:	4a2f      	ldr	r2, [pc, #188]	@ (80199d0 <_ZN7TMC5160C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_fhttbtP6Remora+0xe4>)
 8019912:	697b      	ldr	r3, [r7, #20]
 8019914:	601a      	str	r2, [r3, #0]
      pinCS(std::move(_pinCS)),
 8019916:	697b      	ldr	r3, [r7, #20]
 8019918:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 801991c:	6938      	ldr	r0, [r7, #16]
 801991e:	f7f7 fe16 	bl	801154e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019922:	4603      	mov	r3, r0
 8019924:	4619      	mov	r1, r3
 8019926:	4620      	mov	r0, r4
 8019928:	f00e ffc2 	bl	80288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	  pinMOSI(std::move(_pinMOSI)),
 801992c:	697b      	ldr	r3, [r7, #20]
 801992e:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8019932:	68f8      	ldr	r0, [r7, #12]
 8019934:	f7f7 fe0b 	bl	801154e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019938:	4603      	mov	r3, r0
 801993a:	4619      	mov	r1, r3
 801993c:	4620      	mov	r0, r4
 801993e:	f00e ffb7 	bl	80288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	  pinMISO(std::move(_pinMISO)),
 8019942:	697b      	ldr	r3, [r7, #20]
 8019944:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 8019948:	68b8      	ldr	r0, [r7, #8]
 801994a:	f7f7 fe00 	bl	801154e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 801994e:	4603      	mov	r3, r0
 8019950:	4619      	mov	r1, r3
 8019952:	4620      	mov	r0, r4
 8019954:	f00e ffac 	bl	80288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
	  pinSCK(std::move(_pinSCK)),
 8019958:	697b      	ldr	r3, [r7, #20]
 801995a:	f103 0470 	add.w	r4, r3, #112	@ 0x70
 801995e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019960:	f7f7 fdf5 	bl	801154e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019964:	4603      	mov	r3, r0
 8019966:	4619      	mov	r1, r3
 8019968:	4620      	mov	r0, r4
 801996a:	f00e ffa1 	bl	80288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
      addr(_addr),
 801996e:	697b      	ldr	r3, [r7, #20]
 8019970:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8019974:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
      mA(_mA),
 8019978:	697b      	ldr	r3, [r7, #20]
 801997a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 801997c:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
      microsteps(_microsteps),
 8019980:	697b      	ldr	r3, [r7, #20]
 8019982:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8019984:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
      stealth(_stealth),
 8019988:	697b      	ldr	r3, [r7, #20]
 801998a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801998e:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
      stall(_stall),
 8019992:	697b      	ldr	r3, [r7, #20]
 8019994:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8019996:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
      driver(std::make_unique<TMC5160Stepper>(pinCS, _Rsense, pinMOSI, pinMISO, pinSCK)) {}
 801999a:	697b      	ldr	r3, [r7, #20]
 801999c:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80199a0:	697b      	ldr	r3, [r7, #20]
 80199a2:	f103 0540 	add.w	r5, r3, #64	@ 0x40
 80199a6:	697b      	ldr	r3, [r7, #20]
 80199a8:	3358      	adds	r3, #88	@ 0x58
 80199aa:	697a      	ldr	r2, [r7, #20]
 80199ac:	3270      	adds	r2, #112	@ 0x70
 80199ae:	6979      	ldr	r1, [r7, #20]
 80199b0:	f101 0094 	add.w	r0, r1, #148	@ 0x94
 80199b4:	1d39      	adds	r1, r7, #4
 80199b6:	9201      	str	r2, [sp, #4]
 80199b8:	9300      	str	r3, [sp, #0]
 80199ba:	462b      	mov	r3, r5
 80199bc:	460a      	mov	r2, r1
 80199be:	4621      	mov	r1, r4
 80199c0:	f000 f93d 	bl	8019c3e <_ZSt11make_uniqueI14TMC5160StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfS7_S7_S7_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80199c4:	697b      	ldr	r3, [r7, #20]
 80199c6:	4618      	mov	r0, r3
 80199c8:	3718      	adds	r7, #24
 80199ca:	46bd      	mov	sp, r7
 80199cc:	bdb0      	pop	{r4, r5, r7, pc}
 80199ce:	bf00      	nop
 80199d0:	0802b750 	.word	0x0802b750

080199d4 <_ZN7TMC51609configureEv>:


void TMC5160::configure()
{
 80199d4:	b580      	push	{r7, lr}
 80199d6:	b084      	sub	sp, #16
 80199d8:	af00      	add	r7, sp, #0
 80199da:	6078      	str	r0, [r7, #4]
    driver->begin();
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	3394      	adds	r3, #148	@ 0x94
 80199e0:	4618      	mov	r0, r3
 80199e2:	f000 f98a 	bl	8019cfa <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 80199e6:	4603      	mov	r3, r0
 80199e8:	4618      	mov	r0, r3
 80199ea:	f7ea fe09 	bl	8004600 <_ZN14TMC5130Stepper5beginEv>

    printf("Testing connection to TMC driver... ");
 80199ee:	4855      	ldr	r0, [pc, #340]	@ (8019b44 <_ZN7TMC51609configureEv+0x170>)
 80199f0:	f00f fd2c 	bl	802944c <iprintf>
    uint16_t result = driver->test_connection();
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	3394      	adds	r3, #148	@ 0x94
 80199f8:	4618      	mov	r0, r3
 80199fa:	f000 f97e 	bl	8019cfa <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 80199fe:	4603      	mov	r3, r0
 8019a00:	4618      	mov	r0, r3
 8019a02:	f7ea ffa1 	bl	8004948 <_ZN10TMCStepper15test_connectionEv>
 8019a06:	4603      	mov	r3, r0
 8019a08:	81fb      	strh	r3, [r7, #14]
    
    if (result) {
 8019a0a:	89fb      	ldrh	r3, [r7, #14]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d018      	beq.n	8019a42 <_ZN7TMC51609configureEv+0x6e>
        printf("Failed!\nLikely cause: ");
 8019a10:	484d      	ldr	r0, [pc, #308]	@ (8019b48 <_ZN7TMC51609configureEv+0x174>)
 8019a12:	f00f fd1b 	bl	802944c <iprintf>
        switch(result) {
 8019a16:	89fb      	ldrh	r3, [r7, #14]
 8019a18:	2b01      	cmp	r3, #1
 8019a1a:	d002      	beq.n	8019a22 <_ZN7TMC51609configureEv+0x4e>
 8019a1c:	2b02      	cmp	r3, #2
 8019a1e:	d004      	beq.n	8019a2a <_ZN7TMC51609configureEv+0x56>
 8019a20:	e007      	b.n	8019a32 <_ZN7TMC51609configureEv+0x5e>
            case 1: printf("Loose connection\n"); break;
 8019a22:	484a      	ldr	r0, [pc, #296]	@ (8019b4c <_ZN7TMC51609configureEv+0x178>)
 8019a24:	f00f fd82 	bl	802952c <puts>
 8019a28:	e007      	b.n	8019a3a <_ZN7TMC51609configureEv+0x66>
            case 2: printf("No power\n"); break;
 8019a2a:	4849      	ldr	r0, [pc, #292]	@ (8019b50 <_ZN7TMC51609configureEv+0x17c>)
 8019a2c:	f00f fd7e 	bl	802952c <puts>
 8019a30:	e003      	b.n	8019a3a <_ZN7TMC51609configureEv+0x66>
            default: printf("Unknown issue\n"); break;
 8019a32:	4848      	ldr	r0, [pc, #288]	@ (8019b54 <_ZN7TMC51609configureEv+0x180>)
 8019a34:	f00f fd7a 	bl	802952c <puts>
 8019a38:	bf00      	nop
        }
        printf("Fix the problem and reset the board.\n");
 8019a3a:	4847      	ldr	r0, [pc, #284]	@ (8019b58 <_ZN7TMC51609configureEv+0x184>)
 8019a3c:	f00f fd76 	bl	802952c <puts>
 8019a40:	e002      	b.n	8019a48 <_ZN7TMC51609configureEv+0x74>
    } else {
        printf("OK\n");
 8019a42:	4846      	ldr	r0, [pc, #280]	@ (8019b5c <_ZN7TMC51609configureEv+0x188>)
 8019a44:	f00f fd72 	bl	802952c <puts>
    }

    // Configure driver settings
    driver->toff(TOFF_VALUE);
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	3394      	adds	r3, #148	@ 0x94
 8019a4c:	4618      	mov	r0, r3
 8019a4e:	f000 f954 	bl	8019cfa <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019a52:	4603      	mov	r3, r0
 8019a54:	2104      	movs	r1, #4
 8019a56:	4618      	mov	r0, r3
 8019a58:	f7e9 f861 	bl	8002b1e <_ZN14TMC2130Stepper4toffEh>
    driver->blank_time(24);
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	3394      	adds	r3, #148	@ 0x94
 8019a60:	4618      	mov	r0, r3
 8019a62:	f000 f94a 	bl	8019cfa <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019a66:	4603      	mov	r3, r0
 8019a68:	2118      	movs	r1, #24
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	f7eb f838 	bl	8004ae0 <_ZN10TMCStepper10blank_timeEh>
    driver->rms_current(mA);
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	3394      	adds	r3, #148	@ 0x94
 8019a74:	4618      	mov	r0, r3
 8019a76:	f000 f940 	bl	8019cfa <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019a7a:	4602      	mov	r2, r0
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8019a82:	4619      	mov	r1, r3
 8019a84:	4610      	mov	r0, r2
 8019a86:	f7ff fd73 	bl	8019570 <_ZN14TMC5160Stepper11rms_currentEt>
    driver->microsteps(microsteps);
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	3394      	adds	r3, #148	@ 0x94
 8019a8e:	4618      	mov	r0, r3
 8019a90:	f000 f933 	bl	8019cfa <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019a94:	4603      	mov	r3, r0
 8019a96:	461a      	mov	r2, r3
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8019a9e:	4619      	mov	r1, r3
 8019aa0:	4610      	mov	r0, r2
 8019aa2:	f7ea ff6d 	bl	8004980 <_ZN10TMCStepper10microstepsEt>
    driver->TCOOLTHRS(0xFFFFF);  // 20-bit max threshold for smart energy CoolStep
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	3394      	adds	r3, #148	@ 0x94
 8019aaa:	4618      	mov	r0, r3
 8019aac:	f000 f925 	bl	8019cfa <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019ab0:	4603      	mov	r3, r0
 8019ab2:	492b      	ldr	r1, [pc, #172]	@ (8019b60 <_ZN7TMC51609configureEv+0x18c>)
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	f7e9 ff4e 	bl	8003956 <_ZN14TMC2130Stepper9TCOOLTHRSEm>
    driver->semin(5);             // CoolStep lower threshold
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	3394      	adds	r3, #148	@ 0x94
 8019abe:	4618      	mov	r0, r3
 8019ac0:	f000 f91b 	bl	8019cfa <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019ac4:	4603      	mov	r3, r0
 8019ac6:	2105      	movs	r1, #5
 8019ac8:	4618      	mov	r0, r3
 8019aca:	f7e9 fae8 	bl	800309e <_ZN14TMC2130Stepper5seminEh>
    driver->semax(2);             // CoolStep upper threshold
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	3394      	adds	r3, #148	@ 0x94
 8019ad2:	4618      	mov	r0, r3
 8019ad4:	f000 f911 	bl	8019cfa <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019ad8:	4603      	mov	r3, r0
 8019ada:	2102      	movs	r1, #2
 8019adc:	4618      	mov	r0, r3
 8019ade:	f7e9 fb03 	bl	80030e8 <_ZN14TMC2130Stepper5semaxEh>
    driver->sedn(0b01);           // CoolStep decrement rate
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	3394      	adds	r3, #148	@ 0x94
 8019ae6:	4618      	mov	r0, r3
 8019ae8:	f000 f907 	bl	8019cfa <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019aec:	4603      	mov	r3, r0
 8019aee:	2101      	movs	r1, #1
 8019af0:	4618      	mov	r0, r3
 8019af2:	f7e9 fb1e 	bl	8003132 <_ZN14TMC2130Stepper4sednEh>
    //driver->en_spreadCycle(!stealth);
    driver->pwm_autoscale(true);
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	3394      	adds	r3, #148	@ 0x94
 8019afa:	4618      	mov	r0, r3
 8019afc:	f000 f8fd 	bl	8019cfa <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019b00:	4603      	mov	r3, r0
 8019b02:	2101      	movs	r1, #1
 8019b04:	4618      	mov	r0, r3
 8019b06:	f7e9 fccb 	bl	80034a0 <_ZN14TMC2160Stepper13pwm_autoscaleEb>

    if (stealth && stall) {
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8019b10:	2b00      	cmp	r3, #0
        // StallGuard sensitivity threshold (higher = more sensitive)
        //driver->SGTHRS(stall);
    }

    driver->iholddelay(10);
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	3394      	adds	r3, #148	@ 0x94
 8019b16:	4618      	mov	r0, r3
 8019b18:	f000 f8ef 	bl	8019cfa <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019b1c:	4603      	mov	r3, r0
 8019b1e:	210a      	movs	r1, #10
 8019b20:	4618      	mov	r0, r3
 8019b22:	f7e9 fc8c 	bl	800343e <_ZN10TMCStepper10iholddelayEh>
    driver->TPOWERDOWN(128);  // ~2s until driver lowers to hold current
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	3394      	adds	r3, #148	@ 0x94
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	f000 f8e5 	bl	8019cfa <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>
 8019b30:	4603      	mov	r3, r0
 8019b32:	2180      	movs	r1, #128	@ 0x80
 8019b34:	4618      	mov	r0, r3
 8019b36:	f7eb f80b 	bl	8004b50 <_ZN10TMCStepper10TPOWERDOWNEh>
}
 8019b3a:	bf00      	nop
 8019b3c:	3710      	adds	r7, #16
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	bd80      	pop	{r7, pc}
 8019b42:	bf00      	nop
 8019b44:	0802b004 	.word	0x0802b004
 8019b48:	0802b02c 	.word	0x0802b02c
 8019b4c:	0802b044 	.word	0x0802b044
 8019b50:	0802b058 	.word	0x0802b058
 8019b54:	0802b064 	.word	0x0802b064
 8019b58:	0802b074 	.word	0x0802b074
 8019b5c:	0802b09c 	.word	0x0802b09c
 8019b60:	000fffff 	.word	0x000fffff

08019b64 <_ZN7TMC51606updateEv>:

void TMC5160::update(){}
 8019b64:	b480      	push	{r7}
 8019b66:	b083      	sub	sp, #12
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]
 8019b6c:	bf00      	nop
 8019b6e:	370c      	adds	r7, #12
 8019b70:	46bd      	mov	sp, r7
 8019b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b76:	4770      	bx	lr

08019b78 <_ZSt11make_sharedI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_RfRhRtS9_RbS9_RP6RemoraEESt10shared_ptrINSt9enable_ifIXntsrSt8is_arrayIT_E5valueESH_E4typeEEDpOT0_>:
    make_shared(_Args&&... __args)
 8019b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b7c:	b096      	sub	sp, #88	@ 0x58
 8019b7e:	af0a      	add	r7, sp, #40	@ 0x28
 8019b80:	6278      	str	r0, [r7, #36]	@ 0x24
 8019b82:	6239      	str	r1, [r7, #32]
 8019b84:	61fa      	str	r2, [r7, #28]
 8019b86:	61bb      	str	r3, [r7, #24]
			     std::forward<_Args>(__args)...);
 8019b88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019b8c:	469a      	mov	sl, r3
 8019b8e:	6a38      	ldr	r0, [r7, #32]
 8019b90:	f7fc f826 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019b94:	4680      	mov	r8, r0
 8019b96:	69f8      	ldr	r0, [r7, #28]
 8019b98:	f7fc f822 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019b9c:	4681      	mov	r9, r0
 8019b9e:	69b8      	ldr	r0, [r7, #24]
 8019ba0:	f7fc f81e 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019ba4:	4604      	mov	r4, r0
 8019ba6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8019ba8:	f7fc f81a 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019bac:	4605      	mov	r5, r0
 8019bae:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019bb0:	f7fc f821 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019bb4:	4606      	mov	r6, r0
 8019bb6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019bb8:	f7fe fcb2 	bl	8018520 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8019bbc:	6178      	str	r0, [r7, #20]
 8019bbe:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8019bc0:	f7fc f824 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019bc4:	6138      	str	r0, [r7, #16]
 8019bc6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8019bc8:	f7fc f820 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019bcc:	60f8      	str	r0, [r7, #12]
 8019bce:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8019bd0:	f7f7 fd0d 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8019bd4:	60b8      	str	r0, [r7, #8]
 8019bd6:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8019bd8:	f7fc f818 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019bdc:	6078      	str	r0, [r7, #4]
 8019bde:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8019be0:	f7fc f81f 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019be4:	4603      	mov	r3, r0
 8019be6:	9308      	str	r3, [sp, #32]
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	9307      	str	r3, [sp, #28]
 8019bec:	68bb      	ldr	r3, [r7, #8]
 8019bee:	9306      	str	r3, [sp, #24]
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	9305      	str	r3, [sp, #20]
 8019bf4:	693b      	ldr	r3, [r7, #16]
 8019bf6:	9304      	str	r3, [sp, #16]
 8019bf8:	697b      	ldr	r3, [r7, #20]
 8019bfa:	9303      	str	r3, [sp, #12]
 8019bfc:	9602      	str	r6, [sp, #8]
 8019bfe:	9501      	str	r5, [sp, #4]
 8019c00:	9400      	str	r4, [sp, #0]
 8019c02:	464b      	mov	r3, r9
 8019c04:	4642      	mov	r2, r8
 8019c06:	4651      	mov	r1, sl
 8019c08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019c0a:	f000 f882 	bl	8019d12 <_ZNSt10shared_ptrI7TMC5160EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_RfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
    }
 8019c0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019c10:	3730      	adds	r7, #48	@ 0x30
 8019c12:	46bd      	mov	sp, r7
 8019c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019c18 <_ZNSt10shared_ptrI6ModuleEC1I7TMC5160vEEOS_IT_E>:
	shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 8019c18:	b590      	push	{r4, r7, lr}
 8019c1a:	b083      	sub	sp, #12
 8019c1c:	af00      	add	r7, sp, #0
 8019c1e:	6078      	str	r0, [r7, #4]
 8019c20:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 8019c22:	687c      	ldr	r4, [r7, #4]
 8019c24:	6838      	ldr	r0, [r7, #0]
 8019c26:	f000 f8c4 	bl	8019db2 <_ZSt4moveIRSt10shared_ptrI7TMC5160EEONSt16remove_referenceIT_E4typeEOS5_>
 8019c2a:	4603      	mov	r3, r0
 8019c2c:	4619      	mov	r1, r3
 8019c2e:	4620      	mov	r0, r4
 8019c30:	f000 f8ca 	bl	8019dc8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC5160vEEOS_IT_LS2_0EE>
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	4618      	mov	r0, r3
 8019c38:	370c      	adds	r7, #12
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	bd90      	pop	{r4, r7, pc}

08019c3e <_ZSt11make_uniqueI14TMC5160StepperJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERfS7_S7_S7_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8019c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c42:	ed2d 8b02 	vpush	{d8}
 8019c46:	b086      	sub	sp, #24
 8019c48:	af02      	add	r7, sp, #8
 8019c4a:	60f8      	str	r0, [r7, #12]
 8019c4c:	60b9      	str	r1, [r7, #8]
 8019c4e:	607a      	str	r2, [r7, #4]
 8019c50:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8019c52:	2078      	movs	r0, #120	@ 0x78
 8019c54:	f00e fd50 	bl	80286f8 <_Znwj>
 8019c58:	4603      	mov	r3, r0
 8019c5a:	461c      	mov	r4, r3
 8019c5c:	68b8      	ldr	r0, [r7, #8]
 8019c5e:	f7f5 fde5 	bl	800f82c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019c62:	4605      	mov	r5, r0
 8019c64:	6878      	ldr	r0, [r7, #4]
 8019c66:	f7fb ffc6 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019c6a:	4603      	mov	r3, r0
 8019c6c:	ed93 8a00 	vldr	s16, [r3]
 8019c70:	6838      	ldr	r0, [r7, #0]
 8019c72:	f7f5 fddb 	bl	800f82c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019c76:	4606      	mov	r6, r0
 8019c78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019c7a:	f7f5 fdd7 	bl	800f82c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019c7e:	4680      	mov	r8, r0
 8019c80:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8019c82:	f7f5 fdd3 	bl	800f82c <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019c86:	4603      	mov	r3, r0
 8019c88:	f04f 32ff 	mov.w	r2, #4294967295
 8019c8c:	9201      	str	r2, [sp, #4]
 8019c8e:	9300      	str	r3, [sp, #0]
 8019c90:	4643      	mov	r3, r8
 8019c92:	4632      	mov	r2, r6
 8019c94:	eeb0 0a48 	vmov.f32	s0, s16
 8019c98:	4629      	mov	r1, r5
 8019c9a:	4620      	mov	r0, r4
 8019c9c:	f7ea fd04 	bl	80046a8 <_ZN14TMC5160StepperC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEfS7_S7_S7_a>
 8019ca0:	4621      	mov	r1, r4
 8019ca2:	68f8      	ldr	r0, [r7, #12]
 8019ca4:	f000 f8be 	bl	8019e24 <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8019ca8:	68f8      	ldr	r0, [r7, #12]
 8019caa:	3710      	adds	r7, #16
 8019cac:	46bd      	mov	sp, r7
 8019cae:	ecbd 8b02 	vpop	{d8}
 8019cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019cb6 <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8019cb6:	b590      	push	{r4, r7, lr}
 8019cb8:	b085      	sub	sp, #20
 8019cba:	af00      	add	r7, sp, #0
 8019cbc:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	4618      	mov	r0, r3
 8019cc2:	f000 f8be 	bl	8019e42 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8019cc6:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d00c      	beq.n	8019cea <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8019cd0:	6878      	ldr	r0, [r7, #4]
 8019cd2:	f000 f8c3 	bl	8019e5c <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EE11get_deleterEv>
 8019cd6:	4604      	mov	r4, r0
 8019cd8:	68f8      	ldr	r0, [r7, #12]
 8019cda:	f000 f8cc 	bl	8019e76 <_ZSt4moveIRP14TMC5160StepperEONSt16remove_referenceIT_E4typeEOS4_>
 8019cde:	4603      	mov	r3, r0
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	4619      	mov	r1, r3
 8019ce4:	4620      	mov	r0, r4
 8019ce6:	f000 f8d1 	bl	8019e8c <_ZNKSt14default_deleteI14TMC5160StepperEclEPS0_>
	__ptr = pointer();
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	2200      	movs	r2, #0
 8019cee:	601a      	str	r2, [r3, #0]
      }
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	3714      	adds	r7, #20
 8019cf6:	46bd      	mov	sp, r7
 8019cf8:	bd90      	pop	{r4, r7, pc}

08019cfa <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8019cfa:	b580      	push	{r7, lr}
 8019cfc:	b082      	sub	sp, #8
 8019cfe:	af00      	add	r7, sp, #0
 8019d00:	6078      	str	r0, [r7, #4]
	return get();
 8019d02:	6878      	ldr	r0, [r7, #4]
 8019d04:	f000 f8d2 	bl	8019eac <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EE3getEv>
 8019d08:	4603      	mov	r3, r0
      }
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	3708      	adds	r7, #8
 8019d0e:	46bd      	mov	sp, r7
 8019d10:	bd80      	pop	{r7, pc}

08019d12 <_ZNSt10shared_ptrI7TMC5160EC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_RfRhRtSC_RbSC_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8019d12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d16:	b095      	sub	sp, #84	@ 0x54
 8019d18:	af0a      	add	r7, sp, #40	@ 0x28
 8019d1a:	6278      	str	r0, [r7, #36]	@ 0x24
 8019d1c:	6239      	str	r1, [r7, #32]
 8019d1e:	61fa      	str	r2, [r7, #28]
 8019d20:	61bb      	str	r3, [r7, #24]
	: __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 8019d22:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8019d24:	69f8      	ldr	r0, [r7, #28]
 8019d26:	f7fb ff5b 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019d2a:	4680      	mov	r8, r0
 8019d2c:	69b8      	ldr	r0, [r7, #24]
 8019d2e:	f7fb ff57 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019d32:	4681      	mov	r9, r0
 8019d34:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8019d36:	f7fb ff53 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019d3a:	4605      	mov	r5, r0
 8019d3c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8019d3e:	f7fb ff4f 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019d42:	4606      	mov	r6, r0
 8019d44:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8019d46:	f7fb ff56 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019d4a:	6178      	str	r0, [r7, #20]
 8019d4c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019d4e:	f7fe fbe7 	bl	8018520 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8019d52:	6138      	str	r0, [r7, #16]
 8019d54:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019d56:	f7fb ff59 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019d5a:	60f8      	str	r0, [r7, #12]
 8019d5c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8019d5e:	f7fb ff55 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019d62:	60b8      	str	r0, [r7, #8]
 8019d64:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8019d66:	f7f7 fc42 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8019d6a:	6078      	str	r0, [r7, #4]
 8019d6c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8019d6e:	f7fb ff4d 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019d72:	6038      	str	r0, [r7, #0]
 8019d74:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8019d76:	f7fb ff54 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019d7a:	4603      	mov	r3, r0
 8019d7c:	9308      	str	r3, [sp, #32]
 8019d7e:	683b      	ldr	r3, [r7, #0]
 8019d80:	9307      	str	r3, [sp, #28]
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	9306      	str	r3, [sp, #24]
 8019d86:	68bb      	ldr	r3, [r7, #8]
 8019d88:	9305      	str	r3, [sp, #20]
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	9304      	str	r3, [sp, #16]
 8019d8e:	693b      	ldr	r3, [r7, #16]
 8019d90:	9303      	str	r3, [sp, #12]
 8019d92:	697b      	ldr	r3, [r7, #20]
 8019d94:	9302      	str	r3, [sp, #8]
 8019d96:	9601      	str	r6, [sp, #4]
 8019d98:	9500      	str	r5, [sp, #0]
 8019d9a:	464b      	mov	r3, r9
 8019d9c:	4642      	mov	r2, r8
 8019d9e:	6a39      	ldr	r1, [r7, #32]
 8019da0:	4620      	mov	r0, r4
 8019da2:	f000 f890 	bl	8019ec6 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>
	{ }
 8019da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019da8:	4618      	mov	r0, r3
 8019daa:	372c      	adds	r7, #44	@ 0x2c
 8019dac:	46bd      	mov	sp, r7
 8019dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08019db2 <_ZSt4moveIRSt10shared_ptrI7TMC5160EEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8019db2:	b480      	push	{r7}
 8019db4:	b083      	sub	sp, #12
 8019db6:	af00      	add	r7, sp, #0
 8019db8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	370c      	adds	r7, #12
 8019dc0:	46bd      	mov	sp, r7
 8019dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dc6:	4770      	bx	lr

08019dc8 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7TMC5160vEEOS_IT_LS2_0EE>:
	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 8019dc8:	b580      	push	{r7, lr}
 8019dca:	b082      	sub	sp, #8
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	6078      	str	r0, [r7, #4]
 8019dd0:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r._M_ptr), _M_refcount()
 8019dd2:	683b      	ldr	r3, [r7, #0]
 8019dd4:	681a      	ldr	r2, [r3, #0]
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	601a      	str	r2, [r3, #0]
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	3304      	adds	r3, #4
 8019dde:	4618      	mov	r0, r3
 8019de0:	f7f3 fa62 	bl	800d2a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  _M_refcount._M_swap(__r._M_refcount);
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	1d1a      	adds	r2, r3, #4
 8019de8:	683b      	ldr	r3, [r7, #0]
 8019dea:	3304      	adds	r3, #4
 8019dec:	4619      	mov	r1, r3
 8019dee:	4610      	mov	r0, r2
 8019df0:	f7f3 fe19 	bl	800da26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	  __r._M_ptr = nullptr;
 8019df4:	683b      	ldr	r3, [r7, #0]
 8019df6:	2200      	movs	r2, #0
 8019df8:	601a      	str	r2, [r3, #0]
	}
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	4618      	mov	r0, r3
 8019dfe:	3708      	adds	r7, #8
 8019e00:	46bd      	mov	sp, r7
 8019e02:	bd80      	pop	{r7, pc}

08019e04 <_ZNSt15__uniq_ptr_dataI14TMC5160StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b082      	sub	sp, #8
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	6078      	str	r0, [r7, #4]
 8019e0c:	6039      	str	r1, [r7, #0]
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	683a      	ldr	r2, [r7, #0]
 8019e12:	4611      	mov	r1, r2
 8019e14:	4618      	mov	r0, r3
 8019e16:	f000 f8b4 	bl	8019f82 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EEC1EPS0_>
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	3708      	adds	r7, #8
 8019e20:	46bd      	mov	sp, r7
 8019e22:	bd80      	pop	{r7, pc}

08019e24 <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8019e24:	b580      	push	{r7, lr}
 8019e26:	b082      	sub	sp, #8
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	6078      	str	r0, [r7, #4]
 8019e2c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	6839      	ldr	r1, [r7, #0]
 8019e32:	4618      	mov	r0, r3
 8019e34:	f7ff ffe6 	bl	8019e04 <_ZNSt15__uniq_ptr_dataI14TMC5160StepperSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	3708      	adds	r7, #8
 8019e3e:	46bd      	mov	sp, r7
 8019e40:	bd80      	pop	{r7, pc}

08019e42 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8019e42:	b580      	push	{r7, lr}
 8019e44:	b082      	sub	sp, #8
 8019e46:	af00      	add	r7, sp, #0
 8019e48:	6078      	str	r0, [r7, #4]
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	4618      	mov	r0, r3
 8019e4e:	f000 f8ac 	bl	8019faa <_ZSt3getILj0EJP14TMC5160StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8019e52:	4603      	mov	r3, r0
 8019e54:	4618      	mov	r0, r3
 8019e56:	3708      	adds	r7, #8
 8019e58:	46bd      	mov	sp, r7
 8019e5a:	bd80      	pop	{r7, pc}

08019e5c <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8019e5c:	b580      	push	{r7, lr}
 8019e5e:	b082      	sub	sp, #8
 8019e60:	af00      	add	r7, sp, #0
 8019e62:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	4618      	mov	r0, r3
 8019e68:	f000 f8ac 	bl	8019fc4 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE10_M_deleterEv>
 8019e6c:	4603      	mov	r3, r0
 8019e6e:	4618      	mov	r0, r3
 8019e70:	3708      	adds	r7, #8
 8019e72:	46bd      	mov	sp, r7
 8019e74:	bd80      	pop	{r7, pc}

08019e76 <_ZSt4moveIRP14TMC5160StepperEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8019e76:	b480      	push	{r7}
 8019e78:	b083      	sub	sp, #12
 8019e7a:	af00      	add	r7, sp, #0
 8019e7c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	4618      	mov	r0, r3
 8019e82:	370c      	adds	r7, #12
 8019e84:	46bd      	mov	sp, r7
 8019e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e8a:	4770      	bx	lr

08019e8c <_ZNKSt14default_deleteI14TMC5160StepperEclEPS0_>:
      operator()(_Tp* __ptr) const
 8019e8c:	b580      	push	{r7, lr}
 8019e8e:	b082      	sub	sp, #8
 8019e90:	af00      	add	r7, sp, #0
 8019e92:	6078      	str	r0, [r7, #4]
 8019e94:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8019e96:	683b      	ldr	r3, [r7, #0]
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d003      	beq.n	8019ea4 <_ZNKSt14default_deleteI14TMC5160StepperEclEPS0_+0x18>
 8019e9c:	2178      	movs	r1, #120	@ 0x78
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	f00e fc19 	bl	80286d6 <_ZdlPvj>
      }
 8019ea4:	bf00      	nop
 8019ea6:	3708      	adds	r7, #8
 8019ea8:	46bd      	mov	sp, r7
 8019eaa:	bd80      	pop	{r7, pc}

08019eac <_ZNKSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8019eac:	b580      	push	{r7, lr}
 8019eae:	b082      	sub	sp, #8
 8019eb0:	af00      	add	r7, sp, #0
 8019eb2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	4618      	mov	r0, r3
 8019eb8:	f000 f891 	bl	8019fde <_ZNKSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8019ebc:	4603      	mov	r3, r0
 8019ebe:	4618      	mov	r0, r3
 8019ec0:	3708      	adds	r7, #8
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	bd80      	pop	{r7, pc}

08019ec6 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EEC1ISaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEESt20_Sp_alloc_shared_tagIT_EDpOT0_>:
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 8019ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019eca:	b096      	sub	sp, #88	@ 0x58
 8019ecc:	af0a      	add	r7, sp, #40	@ 0x28
 8019ece:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8019ed0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8019ed2:	627a      	str	r2, [r7, #36]	@ 0x24
 8019ed4:	623b      	str	r3, [r7, #32]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 8019ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ed8:	2200      	movs	r2, #0
 8019eda:	601a      	str	r2, [r3, #0]
 8019edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ede:	1d1d      	adds	r5, r3, #4
 8019ee0:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 8019ee2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019ee4:	f7fb fe7c 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019ee8:	4680      	mov	r8, r0
 8019eea:	6a38      	ldr	r0, [r7, #32]
 8019eec:	f7fb fe78 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019ef0:	61f8      	str	r0, [r7, #28]
 8019ef2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8019ef4:	f7fb fe74 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019ef8:	61b8      	str	r0, [r7, #24]
 8019efa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8019efc:	f7fb fe70 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019f00:	6178      	str	r0, [r7, #20]
 8019f02:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8019f04:	f7fb fe77 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f08:	6138      	str	r0, [r7, #16]
 8019f0a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019f0c:	f7fe fb08 	bl	8018520 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f10:	60f8      	str	r0, [r7, #12]
 8019f12:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019f14:	f7fb fe7a 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f18:	60b8      	str	r0, [r7, #8]
 8019f1a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8019f1c:	f7fb fe76 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f20:	6078      	str	r0, [r7, #4]
 8019f22:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8019f24:	f7f7 fb63 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f28:	6038      	str	r0, [r7, #0]
 8019f2a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8019f2c:	f7fb fe6e 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8019f30:	4604      	mov	r4, r0
 8019f32:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8019f34:	f7fb fe75 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 8019f38:	4603      	mov	r3, r0
 8019f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f3c:	9408      	str	r4, [sp, #32]
 8019f3e:	683b      	ldr	r3, [r7, #0]
 8019f40:	9307      	str	r3, [sp, #28]
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	9306      	str	r3, [sp, #24]
 8019f46:	68bb      	ldr	r3, [r7, #8]
 8019f48:	9305      	str	r3, [sp, #20]
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	9304      	str	r3, [sp, #16]
 8019f4e:	693b      	ldr	r3, [r7, #16]
 8019f50:	9303      	str	r3, [sp, #12]
 8019f52:	697b      	ldr	r3, [r7, #20]
 8019f54:	9302      	str	r3, [sp, #8]
 8019f56:	69bb      	ldr	r3, [r7, #24]
 8019f58:	9301      	str	r3, [sp, #4]
 8019f5a:	69fb      	ldr	r3, [r7, #28]
 8019f5c:	9300      	str	r3, [sp, #0]
 8019f5e:	4643      	mov	r3, r8
 8019f60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019f62:	4631      	mov	r1, r6
 8019f64:	4628      	mov	r0, r5
 8019f66:	f000 f848 	bl	8019ffa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC5160SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>
	{ _M_enable_shared_from_this_with(_M_ptr); }
 8019f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	4619      	mov	r1, r3
 8019f70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019f72:	f000 f8c8 	bl	801a106 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
 8019f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f78:	4618      	mov	r0, r3
 8019f7a:	3730      	adds	r7, #48	@ 0x30
 8019f7c:	46bd      	mov	sp, r7
 8019f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019f82 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8019f82:	b590      	push	{r4, r7, lr}
 8019f84:	b083      	sub	sp, #12
 8019f86:	af00      	add	r7, sp, #0
 8019f88:	6078      	str	r0, [r7, #4]
 8019f8a:	6039      	str	r1, [r7, #0]
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	4618      	mov	r0, r3
 8019f90:	f000 f8da 	bl	801a148 <_ZNSt5tupleIJP14TMC5160StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8019f94:	683c      	ldr	r4, [r7, #0]
 8019f96:	6878      	ldr	r0, [r7, #4]
 8019f98:	f7ff ff53 	bl	8019e42 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>
 8019f9c:	4603      	mov	r3, r0
 8019f9e:	601c      	str	r4, [r3, #0]
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	370c      	adds	r7, #12
 8019fa6:	46bd      	mov	sp, r7
 8019fa8:	bd90      	pop	{r4, r7, pc}

08019faa <_ZSt3getILj0EJP14TMC5160StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8019faa:	b580      	push	{r7, lr}
 8019fac:	b082      	sub	sp, #8
 8019fae:	af00      	add	r7, sp, #0
 8019fb0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	4618      	mov	r0, r3
 8019fb6:	f000 f8d4 	bl	801a162 <_ZSt12__get_helperILj0EP14TMC5160StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8019fba:	4603      	mov	r3, r0
 8019fbc:	4618      	mov	r0, r3
 8019fbe:	3708      	adds	r7, #8
 8019fc0:	46bd      	mov	sp, r7
 8019fc2:	bd80      	pop	{r7, pc}

08019fc4 <_ZNSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	b082      	sub	sp, #8
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	6078      	str	r0, [r7, #4]
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	4618      	mov	r0, r3
 8019fd0:	f000 f8d3 	bl	801a17a <_ZSt3getILj1EJP14TMC5160StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8019fd4:	4603      	mov	r3, r0
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	3708      	adds	r7, #8
 8019fda:	46bd      	mov	sp, r7
 8019fdc:	bd80      	pop	{r7, pc}

08019fde <_ZNKSt15__uniq_ptr_implI14TMC5160StepperSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8019fde:	b580      	push	{r7, lr}
 8019fe0:	b082      	sub	sp, #8
 8019fe2:	af00      	add	r7, sp, #0
 8019fe4:	6078      	str	r0, [r7, #4]
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	4618      	mov	r0, r3
 8019fea:	f000 f8d2 	bl	801a192 <_ZSt3getILj0EJP14TMC5160StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8019fee:	4603      	mov	r3, r0
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	3708      	adds	r7, #8
 8019ff6:	46bd      	mov	sp, r7
 8019ff8:	bd80      	pop	{r7, pc}

08019ffa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7TMC5160SaIvEJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEERPT_St20_Sp_alloc_shared_tagIT0_EDpOT1_>:
	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
 8019ffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ffe:	b09a      	sub	sp, #104	@ 0x68
 801a000:	af0a      	add	r7, sp, #40	@ 0x28
 801a002:	6278      	str	r0, [r7, #36]	@ 0x24
 801a004:	6239      	str	r1, [r7, #32]
 801a006:	61fa      	str	r2, [r7, #28]
 801a008:	61bb      	str	r3, [r7, #24]
	  typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
 801a00a:	69fa      	ldr	r2, [r7, #28]
 801a00c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801a010:	4611      	mov	r1, r2
 801a012:	4618      	mov	r0, r3
 801a014:	f000 f8ca 	bl	801a1ac <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	  auto __guard = std::__allocate_guarded(__a2);
 801a018:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a01c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801a020:	4611      	mov	r1, r2
 801a022:	4618      	mov	r0, r3
 801a024:	f000 f8db 	bl	801a1de <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>
	  _Sp_cp_type* __mem = __guard.get();
 801a028:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a02c:	4618      	mov	r0, r3
 801a02e:	f000 f8fe 	bl	801a22e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>
 801a032:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  auto __pi = ::new (__mem)
 801a034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a036:	4619      	mov	r1, r3
 801a038:	20a4      	movs	r0, #164	@ 0xa4
 801a03a:	f7f0 fcfd 	bl	800aa38 <_ZnwjPv>
 801a03e:	4605      	mov	r5, r0
 801a040:	69b8      	ldr	r0, [r7, #24]
 801a042:	f7fb fdcd 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a046:	4680      	mov	r8, r0
 801a048:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801a04a:	f7fb fdc9 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a04e:	4681      	mov	r9, r0
 801a050:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 801a052:	f7fb fdc5 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a056:	4606      	mov	r6, r0
 801a058:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801a05a:	f7fb fdc1 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a05e:	6178      	str	r0, [r7, #20]
 801a060:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801a062:	f7fb fdc8 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801a066:	6138      	str	r0, [r7, #16]
 801a068:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 801a06a:	f7fe fa59 	bl	8018520 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801a06e:	60f8      	str	r0, [r7, #12]
 801a070:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 801a072:	f7fb fdcb 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a076:	60b8      	str	r0, [r7, #8]
 801a078:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 801a07a:	f7fb fdc7 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a07e:	6078      	str	r0, [r7, #4]
 801a080:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 801a082:	f7f7 fab4 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801a086:	6038      	str	r0, [r7, #0]
 801a088:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 801a08c:	f7fb fdbe 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a090:	4604      	mov	r4, r0
 801a092:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 801a096:	f7fb fdc4 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801a09a:	4603      	mov	r3, r0
 801a09c:	9308      	str	r3, [sp, #32]
 801a09e:	9407      	str	r4, [sp, #28]
 801a0a0:	683b      	ldr	r3, [r7, #0]
 801a0a2:	9306      	str	r3, [sp, #24]
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	9305      	str	r3, [sp, #20]
 801a0a8:	68bb      	ldr	r3, [r7, #8]
 801a0aa:	9304      	str	r3, [sp, #16]
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	9303      	str	r3, [sp, #12]
 801a0b0:	693b      	ldr	r3, [r7, #16]
 801a0b2:	9302      	str	r3, [sp, #8]
 801a0b4:	697b      	ldr	r3, [r7, #20]
 801a0b6:	9301      	str	r3, [sp, #4]
 801a0b8:	9600      	str	r6, [sp, #0]
 801a0ba:	464b      	mov	r3, r9
 801a0bc:	4642      	mov	r2, r8
 801a0be:	4651      	mov	r1, sl
 801a0c0:	4628      	mov	r0, r5
 801a0c2:	f000 f8c3 	bl	801a24c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>
 801a0c6:	63bd      	str	r5, [r7, #56]	@ 0x38
	  __guard = nullptr;
 801a0c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a0cc:	2100      	movs	r1, #0
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	f000 f920 	bl	801a314 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>
	  _M_pi = __pi;
 801a0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a0d8:	601a      	str	r2, [r3, #0]
	  __p = __pi->_M_ptr();
 801a0da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801a0dc:	f000 f929 	bl	801a332 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801a0e0:	4602      	mov	r2, r0
 801a0e2:	6a3b      	ldr	r3, [r7, #32]
 801a0e4:	601a      	str	r2, [r3, #0]
	}
 801a0e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	f000 f88a 	bl	801a204 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 801a0f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801a0f4:	4618      	mov	r0, r3
 801a0f6:	f000 f866 	bl	801a1c6 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801a0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0fc:	4618      	mov	r0, r3
 801a0fe:	3740      	adds	r7, #64	@ 0x40
 801a100:	46bd      	mov	sp, r7
 801a102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a106 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp* __p) noexcept
 801a106:	b580      	push	{r7, lr}
 801a108:	b084      	sub	sp, #16
 801a10a:	af00      	add	r7, sp, #0
 801a10c:	6078      	str	r0, [r7, #4]
 801a10e:	6039      	str	r1, [r7, #0]
	  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	1d1a      	adds	r2, r3, #4
 801a114:	683b      	ldr	r3, [r7, #0]
 801a116:	2b00      	cmp	r3, #0
 801a118:	d002      	beq.n	801a120 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1a>
 801a11a:	683b      	ldr	r3, [r7, #0]
 801a11c:	3318      	adds	r3, #24
 801a11e:	e000      	b.n	801a122 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x1c>
 801a120:	2300      	movs	r3, #0
 801a122:	4619      	mov	r1, r3
 801a124:	4610      	mov	r0, r2
 801a126:	f7fc fc72 	bl	8016a0e <_ZSt30__enable_shared_from_this_baseRKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEPKSt23enable_shared_from_thisI3TMCE>
 801a12a:	60f8      	str	r0, [r7, #12]
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d006      	beq.n	801a140 <_ZNSt12__shared_ptrI7TMC5160LN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withIS0_S0_EENSt9enable_ifIXsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_+0x3a>
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	3304      	adds	r3, #4
 801a136:	461a      	mov	r2, r3
 801a138:	6839      	ldr	r1, [r7, #0]
 801a13a:	68f8      	ldr	r0, [r7, #12]
 801a13c:	f000 f907 	bl	801a34e <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC5160EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>
	}
 801a140:	bf00      	nop
 801a142:	3710      	adds	r7, #16
 801a144:	46bd      	mov	sp, r7
 801a146:	bd80      	pop	{r7, pc}

0801a148 <_ZNSt5tupleIJP14TMC5160StepperSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 801a148:	b580      	push	{r7, lr}
 801a14a:	b082      	sub	sp, #8
 801a14c:	af00      	add	r7, sp, #0
 801a14e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	4618      	mov	r0, r3
 801a154:	f000 f90b 	bl	801a36e <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEEC1Ev>
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	4618      	mov	r0, r3
 801a15c:	3708      	adds	r7, #8
 801a15e:	46bd      	mov	sp, r7
 801a160:	bd80      	pop	{r7, pc}

0801a162 <_ZSt12__get_helperILj0EP14TMC5160StepperJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801a162:	b580      	push	{r7, lr}
 801a164:	b082      	sub	sp, #8
 801a166:	af00      	add	r7, sp, #0
 801a168:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801a16a:	6878      	ldr	r0, [r7, #4]
 801a16c:	f000 f90f 	bl	801a38e <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEE7_M_headERS4_>
 801a170:	4603      	mov	r3, r0
 801a172:	4618      	mov	r0, r3
 801a174:	3708      	adds	r7, #8
 801a176:	46bd      	mov	sp, r7
 801a178:	bd80      	pop	{r7, pc}

0801a17a <_ZSt3getILj1EJP14TMC5160StepperSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801a17a:	b580      	push	{r7, lr}
 801a17c:	b082      	sub	sp, #8
 801a17e:	af00      	add	r7, sp, #0
 801a180:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801a182:	6878      	ldr	r0, [r7, #4]
 801a184:	f000 f910 	bl	801a3a8 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC5160StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801a188:	4603      	mov	r3, r0
 801a18a:	4618      	mov	r0, r3
 801a18c:	3708      	adds	r7, #8
 801a18e:	46bd      	mov	sp, r7
 801a190:	bd80      	pop	{r7, pc}

0801a192 <_ZSt3getILj0EJP14TMC5160StepperSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 801a192:	b580      	push	{r7, lr}
 801a194:	b082      	sub	sp, #8
 801a196:	af00      	add	r7, sp, #0
 801a198:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	4618      	mov	r0, r3
 801a19e:	f000 f90f 	bl	801a3c0 <_ZSt12__get_helperILj0EP14TMC5160StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801a1a2:	4603      	mov	r3, r0
 801a1a4:	4618      	mov	r0, r3
 801a1a6:	3708      	adds	r7, #8
 801a1a8:	46bd      	mov	sp, r7
 801a1aa:	bd80      	pop	{r7, pc}

0801a1ac <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 801a1ac:	b580      	push	{r7, lr}
 801a1ae:	b082      	sub	sp, #8
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
 801a1b4:	6039      	str	r1, [r7, #0]
 801a1b6:	6878      	ldr	r0, [r7, #4]
 801a1b8:	f000 f90e 	bl	801a3d8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	4618      	mov	r0, r3
 801a1c0:	3708      	adds	r7, #8
 801a1c2:	46bd      	mov	sp, r7
 801a1c4:	bd80      	pop	{r7, pc}

0801a1c6 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801a1c6:	b580      	push	{r7, lr}
 801a1c8:	b082      	sub	sp, #8
 801a1ca:	af00      	add	r7, sp, #0
 801a1cc:	6078      	str	r0, [r7, #4]
 801a1ce:	6878      	ldr	r0, [r7, #4]
 801a1d0:	f000 f90d 	bl	801a3ee <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	4618      	mov	r0, r3
 801a1d8:	3708      	adds	r7, #8
 801a1da:	46bd      	mov	sp, r7
 801a1dc:	bd80      	pop	{r7, pc}

0801a1de <_ZSt18__allocate_guardedISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEESt15__allocated_ptrIT_ERS8_>:
    __allocate_guarded(_Alloc& __a)
 801a1de:	b580      	push	{r7, lr}
 801a1e0:	b082      	sub	sp, #8
 801a1e2:	af00      	add	r7, sp, #0
 801a1e4:	6078      	str	r0, [r7, #4]
 801a1e6:	6039      	str	r1, [r7, #0]
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
 801a1e8:	2101      	movs	r1, #1
 801a1ea:	6838      	ldr	r0, [r7, #0]
 801a1ec:	f000 f90a 	bl	801a404 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>
 801a1f0:	4603      	mov	r3, r0
 801a1f2:	461a      	mov	r2, r3
 801a1f4:	6839      	ldr	r1, [r7, #0]
 801a1f6:	6878      	ldr	r0, [r7, #4]
 801a1f8:	f000 f913 	bl	801a422 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
    }
 801a1fc:	6878      	ldr	r0, [r7, #4]
 801a1fe:	3708      	adds	r7, #8
 801a200:	46bd      	mov	sp, r7
 801a202:	bd80      	pop	{r7, pc}

0801a204 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 801a204:	b580      	push	{r7, lr}
 801a206:	b082      	sub	sp, #8
 801a208:	af00      	add	r7, sp, #0
 801a20a:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	685b      	ldr	r3, [r3, #4]
 801a210:	2b00      	cmp	r3, #0
 801a212:	d007      	beq.n	801a224 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	6818      	ldr	r0, [r3, #0]
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	685b      	ldr	r3, [r3, #4]
 801a21c:	2201      	movs	r2, #1
 801a21e:	4619      	mov	r1, r3
 801a220:	f000 f913 	bl	801a44a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>
      }
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	4618      	mov	r0, r3
 801a228:	3708      	adds	r7, #8
 801a22a:	46bd      	mov	sp, r7
 801a22c:	bd80      	pop	{r7, pc}

0801a22e <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE3getEv>:
      value_type* get() { return std::__to_address(_M_ptr); }
 801a22e:	b580      	push	{r7, lr}
 801a230:	b082      	sub	sp, #8
 801a232:	af00      	add	r7, sp, #0
 801a234:	6078      	str	r0, [r7, #4]
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	685b      	ldr	r3, [r3, #4]
 801a23a:	4618      	mov	r0, r3
 801a23c:	f000 f914 	bl	801a468 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>
 801a240:	4603      	mov	r3, r0
 801a242:	4618      	mov	r0, r3
 801a244:	3708      	adds	r7, #8
 801a246:	46bd      	mov	sp, r7
 801a248:	bd80      	pop	{r7, pc}
	...

0801a24c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_>:
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 801a24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a250:	b094      	sub	sp, #80	@ 0x50
 801a252:	af0a      	add	r7, sp, #40	@ 0x28
 801a254:	6278      	str	r0, [r7, #36]	@ 0x24
 801a256:	f887 1020 	strb.w	r1, [r7, #32]
 801a25a:	61fa      	str	r2, [r7, #28]
 801a25c:	61bb      	str	r3, [r7, #24]
	: _M_impl(__a)
 801a25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a260:	4618      	mov	r0, r3
 801a262:	f7f4 f895 	bl	800e390 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 801a266:	4a2a      	ldr	r2, [pc, #168]	@ (801a310 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEC1IJNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESB_SB_SB_RfRhRtSE_RbSE_RP6RemoraEEES1_DpOT_+0xc4>)
 801a268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a26a:	601a      	str	r2, [r3, #0]
 801a26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a26e:	330c      	adds	r3, #12
 801a270:	4621      	mov	r1, r4
 801a272:	4618      	mov	r0, r3
 801a274:	f000 f903 	bl	801a47e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
 801a278:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a27a:	f000 f85a 	bl	801a332 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801a27e:	4680      	mov	r8, r0
 801a280:	69f8      	ldr	r0, [r7, #28]
 801a282:	f7fb fcad 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a286:	4681      	mov	r9, r0
 801a288:	69b8      	ldr	r0, [r7, #24]
 801a28a:	f7fb fca9 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a28e:	4682      	mov	sl, r0
 801a290:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801a292:	f7fb fca5 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a296:	4604      	mov	r4, r0
 801a298:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801a29a:	f7fb fca1 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a29e:	4605      	mov	r5, r0
 801a2a0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801a2a2:	f7fb fca8 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801a2a6:	4606      	mov	r6, r0
 801a2a8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801a2aa:	f7fe f939 	bl	8018520 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801a2ae:	6178      	str	r0, [r7, #20]
 801a2b0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a2b2:	f7fb fcab 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a2b6:	6138      	str	r0, [r7, #16]
 801a2b8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801a2ba:	f7fb fca7 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a2be:	60f8      	str	r0, [r7, #12]
 801a2c0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801a2c2:	f7f7 f994 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801a2c6:	60b8      	str	r0, [r7, #8]
 801a2c8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 801a2ca:	f7fb fc9f 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a2ce:	6078      	str	r0, [r7, #4]
 801a2d0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801a2d2:	f7fb fca6 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801a2d6:	4603      	mov	r3, r0
 801a2d8:	f107 0020 	add.w	r0, r7, #32
 801a2dc:	9308      	str	r3, [sp, #32]
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	9307      	str	r3, [sp, #28]
 801a2e2:	68bb      	ldr	r3, [r7, #8]
 801a2e4:	9306      	str	r3, [sp, #24]
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	9305      	str	r3, [sp, #20]
 801a2ea:	693b      	ldr	r3, [r7, #16]
 801a2ec:	9304      	str	r3, [sp, #16]
 801a2ee:	697b      	ldr	r3, [r7, #20]
 801a2f0:	9303      	str	r3, [sp, #12]
 801a2f2:	9602      	str	r6, [sp, #8]
 801a2f4:	9501      	str	r5, [sp, #4]
 801a2f6:	9400      	str	r4, [sp, #0]
 801a2f8:	4653      	mov	r3, sl
 801a2fa:	464a      	mov	r2, r9
 801a2fc:	4641      	mov	r1, r8
 801a2fe:	f000 f8cd 	bl	801a49c <_ZNSt16allocator_traitsISaIvEE9constructI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_RfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>
	}
 801a302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a304:	4618      	mov	r0, r3
 801a306:	3728      	adds	r7, #40	@ 0x28
 801a308:	46bd      	mov	sp, r7
 801a30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a30e:	bf00      	nop
 801a310:	0802b734 	.word	0x0802b734

0801a314 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEaSEDn>:
      operator=(std::nullptr_t) noexcept
 801a314:	b480      	push	{r7}
 801a316:	b083      	sub	sp, #12
 801a318:	af00      	add	r7, sp, #0
 801a31a:	6078      	str	r0, [r7, #4]
 801a31c:	6039      	str	r1, [r7, #0]
	_M_ptr = nullptr;
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	2200      	movs	r2, #0
 801a322:	605a      	str	r2, [r3, #4]
	return *this;
 801a324:	687b      	ldr	r3, [r7, #4]
      }
 801a326:	4618      	mov	r0, r3
 801a328:	370c      	adds	r7, #12
 801a32a:	46bd      	mov	sp, r7
 801a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a330:	4770      	bx	lr

0801a332 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
 801a332:	b580      	push	{r7, lr}
 801a334:	b082      	sub	sp, #8
 801a336:	af00      	add	r7, sp, #0
 801a338:	6078      	str	r0, [r7, #4]
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	330c      	adds	r3, #12
 801a33e:	4618      	mov	r0, r3
 801a340:	f000 f8f7 	bl	801a532 <_ZN9__gnu_cxx16__aligned_bufferI7TMC5160E6_M_ptrEv>
 801a344:	4603      	mov	r3, r0
 801a346:	4618      	mov	r0, r3
 801a348:	3708      	adds	r7, #8
 801a34a:	46bd      	mov	sp, r7
 801a34c:	bd80      	pop	{r7, pc}

0801a34e <_ZNKSt23enable_shared_from_thisI3TMCE14_M_weak_assignI7TMC5160EEvPT_RKSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE>:
	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 801a34e:	b580      	push	{r7, lr}
 801a350:	b084      	sub	sp, #16
 801a352:	af00      	add	r7, sp, #0
 801a354:	60f8      	str	r0, [r7, #12]
 801a356:	60b9      	str	r1, [r7, #8]
 801a358:	607a      	str	r2, [r7, #4]
	{ _M_weak_this._M_assign(__p, __n); }
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	687a      	ldr	r2, [r7, #4]
 801a35e:	68b9      	ldr	r1, [r7, #8]
 801a360:	4618      	mov	r0, r3
 801a362:	f7fc fedd 	bl	8017120 <_ZNSt10__weak_ptrI3TMCLN9__gnu_cxx12_Lock_policyE0EE9_M_assignEPS0_RKSt14__shared_countILS2_0EE>
 801a366:	bf00      	nop
 801a368:	3710      	adds	r7, #16
 801a36a:	46bd      	mov	sp, r7
 801a36c:	bd80      	pop	{r7, pc}

0801a36e <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 801a36e:	b580      	push	{r7, lr}
 801a370:	b082      	sub	sp, #8
 801a372:	af00      	add	r7, sp, #0
 801a374:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 801a376:	6878      	ldr	r0, [r7, #4]
 801a378:	f000 f8e7 	bl	801a54a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC5160StepperEEEC1Ev>
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	4618      	mov	r0, r3
 801a380:	f000 f8ef 	bl	801a562 <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EEC1Ev>
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	4618      	mov	r0, r3
 801a388:	3708      	adds	r7, #8
 801a38a:	46bd      	mov	sp, r7
 801a38c:	bd80      	pop	{r7, pc}

0801a38e <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801a38e:	b580      	push	{r7, lr}
 801a390:	b082      	sub	sp, #8
 801a392:	af00      	add	r7, sp, #0
 801a394:	6078      	str	r0, [r7, #4]
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	4618      	mov	r0, r3
 801a39a:	f000 f8f0 	bl	801a57e <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EE7_M_headERS2_>
 801a39e:	4603      	mov	r3, r0
 801a3a0:	4618      	mov	r0, r3
 801a3a2:	3708      	adds	r7, #8
 801a3a4:	46bd      	mov	sp, r7
 801a3a6:	bd80      	pop	{r7, pc}

0801a3a8 <_ZSt12__get_helperILj1ESt14default_deleteI14TMC5160StepperEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801a3a8:	b580      	push	{r7, lr}
 801a3aa:	b082      	sub	sp, #8
 801a3ac:	af00      	add	r7, sp, #0
 801a3ae:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801a3b0:	6878      	ldr	r0, [r7, #4]
 801a3b2:	f000 f8ef 	bl	801a594 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC5160StepperEEE7_M_headERS3_>
 801a3b6:	4603      	mov	r3, r0
 801a3b8:	4618      	mov	r0, r3
 801a3ba:	3708      	adds	r7, #8
 801a3bc:	46bd      	mov	sp, r7
 801a3be:	bd80      	pop	{r7, pc}

0801a3c0 <_ZSt12__get_helperILj0EP14TMC5160StepperJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801a3c0:	b580      	push	{r7, lr}
 801a3c2:	b082      	sub	sp, #8
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801a3c8:	6878      	ldr	r0, [r7, #4]
 801a3ca:	f000 f8ef 	bl	801a5ac <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEE7_M_headERKS4_>
 801a3ce:	4603      	mov	r3, r0
 801a3d0:	4618      	mov	r0, r3
 801a3d2:	3708      	adds	r7, #8
 801a3d4:	46bd      	mov	sp, r7
 801a3d6:	bd80      	pop	{r7, pc}

0801a3d8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801a3d8:	b480      	push	{r7}
 801a3da:	b083      	sub	sp, #12
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	6078      	str	r0, [r7, #4]
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	370c      	adds	r7, #12
 801a3e6:	46bd      	mov	sp, r7
 801a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ec:	4770      	bx	lr

0801a3ee <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801a3ee:	b480      	push	{r7}
 801a3f0:	b083      	sub	sp, #12
 801a3f2:	af00      	add	r7, sp, #0
 801a3f4:	6078      	str	r0, [r7, #4]
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	370c      	adds	r7, #12
 801a3fc:	46bd      	mov	sp, r7
 801a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a402:	4770      	bx	lr

0801a404 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 801a404:	b580      	push	{r7, lr}
 801a406:	b082      	sub	sp, #8
 801a408:	af00      	add	r7, sp, #0
 801a40a:	6078      	str	r0, [r7, #4]
 801a40c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 801a40e:	2200      	movs	r2, #0
 801a410:	6839      	ldr	r1, [r7, #0]
 801a412:	6878      	ldr	r0, [r7, #4]
 801a414:	f000 f8d8 	bl	801a5c8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 801a418:	4603      	mov	r3, r0
 801a41a:	4618      	mov	r0, r3
 801a41c:	3708      	adds	r7, #8
 801a41e:	46bd      	mov	sp, r7
 801a420:	bd80      	pop	{r7, pc}

0801a422 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 801a422:	b580      	push	{r7, lr}
 801a424:	b084      	sub	sp, #16
 801a426:	af00      	add	r7, sp, #0
 801a428:	60f8      	str	r0, [r7, #12]
 801a42a:	60b9      	str	r1, [r7, #8]
 801a42c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801a42e:	68b8      	ldr	r0, [r7, #8]
 801a430:	f000 f8f8 	bl	801a624 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>
 801a434:	4602      	mov	r2, r0
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	601a      	str	r2, [r3, #0]
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	687a      	ldr	r2, [r7, #4]
 801a43e:	605a      	str	r2, [r3, #4]
      { }
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	4618      	mov	r0, r3
 801a444:	3710      	adds	r7, #16
 801a446:	46bd      	mov	sp, r7
 801a448:	bd80      	pop	{r7, pc}

0801a44a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801a44a:	b580      	push	{r7, lr}
 801a44c:	b084      	sub	sp, #16
 801a44e:	af00      	add	r7, sp, #0
 801a450:	60f8      	str	r0, [r7, #12]
 801a452:	60b9      	str	r1, [r7, #8]
 801a454:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801a456:	687a      	ldr	r2, [r7, #4]
 801a458:	68b9      	ldr	r1, [r7, #8]
 801a45a:	68f8      	ldr	r0, [r7, #12]
 801a45c:	f000 f8ed 	bl	801a63a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>
 801a460:	bf00      	nop
 801a462:	3710      	adds	r7, #16
 801a464:	46bd      	mov	sp, r7
 801a466:	bd80      	pop	{r7, pc}

0801a468 <_ZSt12__to_addressISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEPT_S7_>:
    __to_address(_Tp* __ptr) noexcept
 801a468:	b480      	push	{r7}
 801a46a:	b083      	sub	sp, #12
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	6078      	str	r0, [r7, #4]
      return __ptr;
 801a470:	687b      	ldr	r3, [r7, #4]
    }
 801a472:	4618      	mov	r0, r3
 801a474:	370c      	adds	r7, #12
 801a476:	46bd      	mov	sp, r7
 801a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a47c:	4770      	bx	lr

0801a47e <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_>:
	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }
 801a47e:	b580      	push	{r7, lr}
 801a480:	b082      	sub	sp, #8
 801a482:	af00      	add	r7, sp, #0
 801a484:	6078      	str	r0, [r7, #4]
 801a486:	7039      	strb	r1, [r7, #0]
 801a488:	463b      	mov	r3, r7
 801a48a:	4619      	mov	r1, r3
 801a48c:	6878      	ldr	r0, [r7, #4]
 801a48e:	f7f4 f999 	bl	800e7c4 <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EEC1ERKS0_>
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	4618      	mov	r0, r3
 801a496:	3708      	adds	r7, #8
 801a498:	46bd      	mov	sp, r7
 801a49a:	bd80      	pop	{r7, pc}

0801a49c <_ZNSt16allocator_traitsISaIvEE9constructI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_RfRhRtSC_RbSC_RP6RemoraEEEvRS0_PT_DpOT0_>:
	construct(allocator_type&, _Up* __p, _Args&&... __args)
 801a49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a4a0:	b090      	sub	sp, #64	@ 0x40
 801a4a2:	af08      	add	r7, sp, #32
 801a4a4:	61f8      	str	r0, [r7, #28]
 801a4a6:	61b9      	str	r1, [r7, #24]
 801a4a8:	617a      	str	r2, [r7, #20]
 801a4aa:	613b      	str	r3, [r7, #16]
	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 801a4ac:	6978      	ldr	r0, [r7, #20]
 801a4ae:	f7fb fb97 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a4b2:	4680      	mov	r8, r0
 801a4b4:	6938      	ldr	r0, [r7, #16]
 801a4b6:	f7fb fb93 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a4ba:	4681      	mov	r9, r0
 801a4bc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801a4be:	f7fb fb8f 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a4c2:	4682      	mov	sl, r0
 801a4c4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801a4c6:	f7fb fb8b 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a4ca:	4604      	mov	r4, r0
 801a4cc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801a4ce:	f7fb fb92 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801a4d2:	4605      	mov	r5, r0
 801a4d4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801a4d6:	f7fe f823 	bl	8018520 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801a4da:	4606      	mov	r6, r0
 801a4dc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801a4de:	f7fb fb95 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a4e2:	60f8      	str	r0, [r7, #12]
 801a4e4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801a4e6:	f7fb fb91 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a4ea:	60b8      	str	r0, [r7, #8]
 801a4ec:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a4ee:	f7f7 f87e 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801a4f2:	6078      	str	r0, [r7, #4]
 801a4f4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801a4f6:	f7fb fb89 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a4fa:	6038      	str	r0, [r7, #0]
 801a4fc:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801a4fe:	f7fb fb90 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801a502:	4603      	mov	r3, r0
 801a504:	9307      	str	r3, [sp, #28]
 801a506:	683b      	ldr	r3, [r7, #0]
 801a508:	9306      	str	r3, [sp, #24]
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	9305      	str	r3, [sp, #20]
 801a50e:	68bb      	ldr	r3, [r7, #8]
 801a510:	9304      	str	r3, [sp, #16]
 801a512:	68fb      	ldr	r3, [r7, #12]
 801a514:	9303      	str	r3, [sp, #12]
 801a516:	9602      	str	r6, [sp, #8]
 801a518:	9501      	str	r5, [sp, #4]
 801a51a:	9400      	str	r4, [sp, #0]
 801a51c:	4653      	mov	r3, sl
 801a51e:	464a      	mov	r2, r9
 801a520:	4641      	mov	r1, r8
 801a522:	69b8      	ldr	r0, [r7, #24]
 801a524:	f000 f89a 	bl	801a65c <_ZSt10_ConstructI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_RfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>
 801a528:	bf00      	nop
 801a52a:	3720      	adds	r7, #32
 801a52c:	46bd      	mov	sp, r7
 801a52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a532 <_ZN9__gnu_cxx16__aligned_bufferI7TMC5160E6_M_ptrEv>:
      _M_ptr() noexcept
 801a532:	b580      	push	{r7, lr}
 801a534:	b082      	sub	sp, #8
 801a536:	af00      	add	r7, sp, #0
 801a538:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801a53a:	6878      	ldr	r0, [r7, #4]
 801a53c:	f000 f926 	bl	801a78c <_ZN9__gnu_cxx16__aligned_bufferI7TMC5160E7_M_addrEv>
 801a540:	4603      	mov	r3, r0
 801a542:	4618      	mov	r0, r3
 801a544:	3708      	adds	r7, #8
 801a546:	46bd      	mov	sp, r7
 801a548:	bd80      	pop	{r7, pc}

0801a54a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC5160StepperEEEC1Ev>:
      _Tuple_impl()
 801a54a:	b580      	push	{r7, lr}
 801a54c:	b082      	sub	sp, #8
 801a54e:	af00      	add	r7, sp, #0
 801a550:	6078      	str	r0, [r7, #4]
      : _Base() { }
 801a552:	6878      	ldr	r0, [r7, #4]
 801a554:	f000 f925 	bl	801a7a2 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC5160StepperELb1EEC1Ev>
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	4618      	mov	r0, r3
 801a55c:	3708      	adds	r7, #8
 801a55e:	46bd      	mov	sp, r7
 801a560:	bd80      	pop	{r7, pc}

0801a562 <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EEC1Ev>:
      constexpr _Head_base()
 801a562:	b480      	push	{r7}
 801a564:	b083      	sub	sp, #12
 801a566:	af00      	add	r7, sp, #0
 801a568:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	2200      	movs	r2, #0
 801a56e:	601a      	str	r2, [r3, #0]
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	4618      	mov	r0, r3
 801a574:	370c      	adds	r7, #12
 801a576:	46bd      	mov	sp, r7
 801a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a57c:	4770      	bx	lr

0801a57e <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801a57e:	b480      	push	{r7}
 801a580:	b083      	sub	sp, #12
 801a582:	af00      	add	r7, sp, #0
 801a584:	6078      	str	r0, [r7, #4]
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	4618      	mov	r0, r3
 801a58a:	370c      	adds	r7, #12
 801a58c:	46bd      	mov	sp, r7
 801a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a592:	4770      	bx	lr

0801a594 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14TMC5160StepperEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801a594:	b580      	push	{r7, lr}
 801a596:	b082      	sub	sp, #8
 801a598:	af00      	add	r7, sp, #0
 801a59a:	6078      	str	r0, [r7, #4]
 801a59c:	6878      	ldr	r0, [r7, #4]
 801a59e:	f000 f90b 	bl	801a7b8 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC5160StepperELb1EE7_M_headERS3_>
 801a5a2:	4603      	mov	r3, r0
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	3708      	adds	r7, #8
 801a5a8:	46bd      	mov	sp, r7
 801a5aa:	bd80      	pop	{r7, pc}

0801a5ac <_ZNSt11_Tuple_implILj0EJP14TMC5160StepperSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801a5ac:	b580      	push	{r7, lr}
 801a5ae:	b082      	sub	sp, #8
 801a5b0:	af00      	add	r7, sp, #0
 801a5b2:	6078      	str	r0, [r7, #4]
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	4618      	mov	r0, r3
 801a5b8:	f000 f909 	bl	801a7ce <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EE7_M_headERKS2_>
 801a5bc:	4603      	mov	r3, r0
 801a5be:	4618      	mov	r0, r3
 801a5c0:	3708      	adds	r7, #8
 801a5c2:	46bd      	mov	sp, r7
 801a5c4:	bd80      	pop	{r7, pc}
	...

0801a5c8 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b084      	sub	sp, #16
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	60f8      	str	r0, [r7, #12]
 801a5d0:	60b9      	str	r1, [r7, #8]
 801a5d2:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 801a5d4:	68f8      	ldr	r0, [r7, #12]
 801a5d6:	f000 f905 	bl	801a7e4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 801a5da:	4602      	mov	r2, r0
 801a5dc:	68bb      	ldr	r3, [r7, #8]
 801a5de:	4293      	cmp	r3, r2
 801a5e0:	bf8c      	ite	hi
 801a5e2:	2301      	movhi	r3, #1
 801a5e4:	2300      	movls	r3, #0
 801a5e6:	b2db      	uxtb	r3, r3
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	bf14      	ite	ne
 801a5ec:	2301      	movne	r3, #1
 801a5ee:	2300      	moveq	r3, #0
 801a5f0:	b2db      	uxtb	r3, r3
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d007      	beq.n	801a606 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 801a5f6:	68bb      	ldr	r3, [r7, #8]
 801a5f8:	4a09      	ldr	r2, [pc, #36]	@ (801a620 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x58>)
 801a5fa:	4293      	cmp	r3, r2
 801a5fc:	d901      	bls.n	801a602 <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 801a5fe:	f00e f891 	bl	8028724 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 801a602:	f00e f88c 	bl	802871e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 801a606:	68bb      	ldr	r3, [r7, #8]
 801a608:	22a4      	movs	r2, #164	@ 0xa4
 801a60a:	fb02 f303 	mul.w	r3, r2, r3
 801a60e:	4618      	mov	r0, r3
 801a610:	f00e f872 	bl	80286f8 <_Znwj>
 801a614:	4603      	mov	r3, r0
 801a616:	bf00      	nop
      }
 801a618:	4618      	mov	r0, r3
 801a61a:	3710      	adds	r7, #16
 801a61c:	46bd      	mov	sp, r7
 801a61e:	bd80      	pop	{r7, pc}
 801a620:	018f9c18 	.word	0x018f9c18

0801a624 <_ZSt11__addressofISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801a624:	b480      	push	{r7}
 801a626:	b083      	sub	sp, #12
 801a628:	af00      	add	r7, sp, #0
 801a62a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	4618      	mov	r0, r3
 801a630:	370c      	adds	r7, #12
 801a632:	46bd      	mov	sp, r7
 801a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a638:	4770      	bx	lr

0801a63a <_ZNSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 801a63a:	b580      	push	{r7, lr}
 801a63c:	b084      	sub	sp, #16
 801a63e:	af00      	add	r7, sp, #0
 801a640:	60f8      	str	r0, [r7, #12]
 801a642:	60b9      	str	r1, [r7, #8]
 801a644:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	22a4      	movs	r2, #164	@ 0xa4
 801a64a:	fb02 f303 	mul.w	r3, r2, r3
 801a64e:	4619      	mov	r1, r3
 801a650:	68b8      	ldr	r0, [r7, #8]
 801a652:	f00e f840 	bl	80286d6 <_ZdlPvj>
      }
 801a656:	3710      	adds	r7, #16
 801a658:	46bd      	mov	sp, r7
 801a65a:	bd80      	pop	{r7, pc}

0801a65c <_ZSt10_ConstructI7TMC5160JNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_S6_RfRhRtS9_RbS9_RP6RemoraEEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 801a65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a660:	ed2d 8b02 	vpush	{d8}
 801a664:	b0a6      	sub	sp, #152	@ 0x98
 801a666:	af08      	add	r7, sp, #32
 801a668:	6178      	str	r0, [r7, #20]
 801a66a:	6139      	str	r1, [r7, #16]
 801a66c:	60fa      	str	r2, [r7, #12]
 801a66e:	60bb      	str	r3, [r7, #8]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 801a670:	697b      	ldr	r3, [r7, #20]
 801a672:	4619      	mov	r1, r3
 801a674:	2098      	movs	r0, #152	@ 0x98
 801a676:	f7f0 f9df 	bl	800aa38 <_ZnwjPv>
 801a67a:	4680      	mov	r8, r0
 801a67c:	6938      	ldr	r0, [r7, #16]
 801a67e:	f7fb faaf 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a682:	4602      	mov	r2, r0
 801a684:	f107 0318 	add.w	r3, r7, #24
 801a688:	4611      	mov	r1, r2
 801a68a:	4618      	mov	r0, r3
 801a68c:	f00e f910 	bl	80288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801a690:	68f8      	ldr	r0, [r7, #12]
 801a692:	f7fb faa5 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a696:	4602      	mov	r2, r0
 801a698:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801a69c:	4611      	mov	r1, r2
 801a69e:	4618      	mov	r0, r3
 801a6a0:	f00e f906 	bl	80288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801a6a4:	68b8      	ldr	r0, [r7, #8]
 801a6a6:	f7fb fa9b 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a6aa:	4602      	mov	r2, r0
 801a6ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a6b0:	4611      	mov	r1, r2
 801a6b2:	4618      	mov	r0, r3
 801a6b4:	f00e f8fc 	bl	80288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801a6b8:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 801a6bc:	f7fb fa90 	bl	8015be0 <_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a6c0:	4602      	mov	r2, r0
 801a6c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a6c6:	4611      	mov	r1, r2
 801a6c8:	4618      	mov	r0, r3
 801a6ca:	f00e f8f1 	bl	80288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 801a6ce:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 801a6d2:	f7fb fa90 	bl	8015bf6 <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 801a6d6:	4603      	mov	r3, r0
 801a6d8:	ed93 8a00 	vldr	s16, [r3]
 801a6dc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 801a6e0:	f7fd ff1e 	bl	8018520 <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 801a6e4:	4603      	mov	r3, r0
 801a6e6:	781c      	ldrb	r4, [r3, #0]
 801a6e8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 801a6ec:	f7fb fa8e 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a6f0:	4603      	mov	r3, r0
 801a6f2:	881d      	ldrh	r5, [r3, #0]
 801a6f4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 801a6f8:	f7fb fa88 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a6fc:	4603      	mov	r3, r0
 801a6fe:	881e      	ldrh	r6, [r3, #0]
 801a700:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 801a704:	f7f6 ff73 	bl	80115ee <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 801a708:	4603      	mov	r3, r0
 801a70a:	781b      	ldrb	r3, [r3, #0]
 801a70c:	607b      	str	r3, [r7, #4]
 801a70e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 801a712:	f7fb fa7b 	bl	8015c0c <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 801a716:	4603      	mov	r3, r0
 801a718:	881a      	ldrh	r2, [r3, #0]
 801a71a:	603a      	str	r2, [r7, #0]
 801a71c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 801a720:	f7fb fa7f 	bl	8015c22 <_ZSt7forwardIRP6RemoraEOT_RNSt16remove_referenceIS3_E4typeE>
 801a724:	4603      	mov	r3, r0
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 801a72c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801a730:	f107 0118 	add.w	r1, r7, #24
 801a734:	9306      	str	r3, [sp, #24]
 801a736:	683b      	ldr	r3, [r7, #0]
 801a738:	9305      	str	r3, [sp, #20]
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	9304      	str	r3, [sp, #16]
 801a73e:	9603      	str	r6, [sp, #12]
 801a740:	9502      	str	r5, [sp, #8]
 801a742:	9401      	str	r4, [sp, #4]
 801a744:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a748:	9300      	str	r3, [sp, #0]
 801a74a:	eeb0 0a48 	vmov.f32	s0, s16
 801a74e:	4603      	mov	r3, r0
 801a750:	4640      	mov	r0, r8
 801a752:	f7ff f8cb 	bl	80198ec <_ZN7TMC5160C1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_S5_S5_fhttbtP6Remora>
 801a756:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801a75a:	4618      	mov	r0, r3
 801a75c:	f00e f8c7 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a760:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a764:	4618      	mov	r0, r3
 801a766:	f00e f8c2 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a76a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801a76e:	4618      	mov	r0, r3
 801a770:	f00e f8bd 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a774:	f107 0318 	add.w	r3, r7, #24
 801a778:	4618      	mov	r0, r3
 801a77a:	f00e f8b8 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    }
 801a77e:	bf00      	nop
 801a780:	3778      	adds	r7, #120	@ 0x78
 801a782:	46bd      	mov	sp, r7
 801a784:	ecbd 8b02 	vpop	{d8}
 801a788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a78c <_ZN9__gnu_cxx16__aligned_bufferI7TMC5160E7_M_addrEv>:
      _M_addr() noexcept
 801a78c:	b480      	push	{r7}
 801a78e:	b083      	sub	sp, #12
 801a790:	af00      	add	r7, sp, #0
 801a792:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 801a794:	687b      	ldr	r3, [r7, #4]
      }
 801a796:	4618      	mov	r0, r3
 801a798:	370c      	adds	r7, #12
 801a79a:	46bd      	mov	sp, r7
 801a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7a0:	4770      	bx	lr

0801a7a2 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC5160StepperELb1EEC1Ev>:
      constexpr _Head_base()
 801a7a2:	b480      	push	{r7}
 801a7a4:	b083      	sub	sp, #12
 801a7a6:	af00      	add	r7, sp, #0
 801a7a8:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	4618      	mov	r0, r3
 801a7ae:	370c      	adds	r7, #12
 801a7b0:	46bd      	mov	sp, r7
 801a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7b6:	4770      	bx	lr

0801a7b8 <_ZNSt10_Head_baseILj1ESt14default_deleteI14TMC5160StepperELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801a7b8:	b480      	push	{r7}
 801a7ba:	b083      	sub	sp, #12
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	6078      	str	r0, [r7, #4]
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	4618      	mov	r0, r3
 801a7c4:	370c      	adds	r7, #12
 801a7c6:	46bd      	mov	sp, r7
 801a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7cc:	4770      	bx	lr

0801a7ce <_ZNSt10_Head_baseILj0EP14TMC5160StepperLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 801a7ce:	b480      	push	{r7}
 801a7d0:	b083      	sub	sp, #12
 801a7d2:	af00      	add	r7, sp, #0
 801a7d4:	6078      	str	r0, [r7, #4]
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	4618      	mov	r0, r3
 801a7da:	370c      	adds	r7, #12
 801a7dc:	46bd      	mov	sp, r7
 801a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7e2:	4770      	bx	lr

0801a7e4 <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801a7e4:	b480      	push	{r7}
 801a7e6:	b083      	sub	sp, #12
 801a7e8:	af00      	add	r7, sp, #0
 801a7ea:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801a7ec:	4b03      	ldr	r3, [pc, #12]	@ (801a7fc <_ZNKSt15__new_allocatorISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv+0x18>)
      }
 801a7ee:	4618      	mov	r0, r3
 801a7f0:	370c      	adds	r7, #12
 801a7f2:	46bd      	mov	sp, r7
 801a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7f8:	4770      	bx	lr
 801a7fa:	bf00      	nop
 801a7fc:	00c7ce0c 	.word	0x00c7ce0c

0801a800 <_ZN7TMC5160D1Ev>:

public:

	TMC5160(std::string, std::string, std::string, std::string, float, uint8_t, uint16_t, uint16_t, bool, uint16_t, Remora*);
	static std::shared_ptr<Module> create(const JsonObject& config, Remora* instance);
	~TMC5160() = default;
 801a800:	b580      	push	{r7, lr}
 801a802:	b082      	sub	sp, #8
 801a804:	af00      	add	r7, sp, #0
 801a806:	6078      	str	r0, [r7, #4]
 801a808:	4a12      	ldr	r2, [pc, #72]	@ (801a854 <_ZN7TMC5160D1Ev+0x54>)
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	601a      	str	r2, [r3, #0]
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	3394      	adds	r3, #148	@ 0x94
 801a812:	4618      	mov	r0, r3
 801a814:	f7ff fa4f 	bl	8019cb6 <_ZNSt10unique_ptrI14TMC5160StepperSt14default_deleteIS0_EED1Ev>
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	3370      	adds	r3, #112	@ 0x70
 801a81c:	4618      	mov	r0, r3
 801a81e:	f00e f866 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	3358      	adds	r3, #88	@ 0x58
 801a826:	4618      	mov	r0, r3
 801a828:	f00e f861 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	3340      	adds	r3, #64	@ 0x40
 801a830:	4618      	mov	r0, r3
 801a832:	f00e f85c 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	3328      	adds	r3, #40	@ 0x28
 801a83a:	4618      	mov	r0, r3
 801a83c:	f00e f857 	bl	80288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	4618      	mov	r0, r3
 801a844:	f7fa fd48 	bl	80152d8 <_ZN3TMCD1Ev>
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	4618      	mov	r0, r3
 801a84c:	3708      	adds	r7, #8
 801a84e:	46bd      	mov	sp, r7
 801a850:	bd80      	pop	{r7, pc}
 801a852:	bf00      	nop
 801a854:	0802b750 	.word	0x0802b750

0801a858 <_ZN7TMC5160D0Ev>:
 801a858:	b580      	push	{r7, lr}
 801a85a:	b082      	sub	sp, #8
 801a85c:	af00      	add	r7, sp, #0
 801a85e:	6078      	str	r0, [r7, #4]
 801a860:	6878      	ldr	r0, [r7, #4]
 801a862:	f7ff ffcd 	bl	801a800 <_ZN7TMC5160D1Ev>
 801a866:	2198      	movs	r1, #152	@ 0x98
 801a868:	6878      	ldr	r0, [r7, #4]
 801a86a:	f00d ff34 	bl	80286d6 <_ZdlPvj>
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	4618      	mov	r0, r3
 801a872:	3708      	adds	r7, #8
 801a874:	46bd      	mov	sp, r7
 801a876:	bd80      	pop	{r7, pc}

0801a878 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 801a878:	b580      	push	{r7, lr}
 801a87a:	b082      	sub	sp, #8
 801a87c:	af00      	add	r7, sp, #0
 801a87e:	6078      	str	r0, [r7, #4]
 801a880:	4a05      	ldr	r2, [pc, #20]	@ (801a898 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	601a      	str	r2, [r3, #0]
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	4618      	mov	r0, r3
 801a88a:	f7f1 ff43 	bl	800c714 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	4618      	mov	r0, r3
 801a892:	3708      	adds	r7, #8
 801a894:	46bd      	mov	sp, r7
 801a896:	bd80      	pop	{r7, pc}
 801a898:	0802b734 	.word	0x0802b734

0801a89c <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 801a89c:	b580      	push	{r7, lr}
 801a89e:	b082      	sub	sp, #8
 801a8a0:	af00      	add	r7, sp, #0
 801a8a2:	6078      	str	r0, [r7, #4]
 801a8a4:	6878      	ldr	r0, [r7, #4]
 801a8a6:	f7ff ffe7 	bl	801a878 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801a8aa:	21a4      	movs	r1, #164	@ 0xa4
 801a8ac:	6878      	ldr	r0, [r7, #4]
 801a8ae:	f00d ff12 	bl	80286d6 <_ZdlPvj>
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	4618      	mov	r0, r3
 801a8b6:	3708      	adds	r7, #8
 801a8b8:	46bd      	mov	sp, r7
 801a8ba:	bd80      	pop	{r7, pc}

0801a8bc <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 801a8bc:	b590      	push	{r4, r7, lr}
 801a8be:	b083      	sub	sp, #12
 801a8c0:	af00      	add	r7, sp, #0
 801a8c2:	6078      	str	r0, [r7, #4]
	allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	330c      	adds	r3, #12
 801a8c8:	4618      	mov	r0, r3
 801a8ca:	f000 f856 	bl	801a97a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801a8ce:	4604      	mov	r4, r0
 801a8d0:	6878      	ldr	r0, [r7, #4]
 801a8d2:	f7ff fd2e 	bl	801a332 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801a8d6:	4603      	mov	r3, r0
 801a8d8:	4619      	mov	r1, r3
 801a8da:	4620      	mov	r0, r4
 801a8dc:	f000 f859 	bl	801a992 <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC5160EEvRS0_PT_>
      }
 801a8e0:	bf00      	nop
 801a8e2:	370c      	adds	r7, #12
 801a8e4:	46bd      	mov	sp, r7
 801a8e6:	bd90      	pop	{r4, r7, pc}

0801a8e8 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 801a8e8:	b580      	push	{r7, lr}
 801a8ea:	b086      	sub	sp, #24
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	330c      	adds	r3, #12
 801a8f4:	4618      	mov	r0, r3
 801a8f6:	f000 f840 	bl	801a97a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 801a8fa:	4602      	mov	r2, r0
 801a8fc:	f107 0314 	add.w	r3, r7, #20
 801a900:	4611      	mov	r1, r2
 801a902:	4618      	mov	r0, r3
 801a904:	f7ff fc52 	bl	801a1ac <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 801a908:	f107 0114 	add.w	r1, r7, #20
 801a90c:	f107 030c 	add.w	r3, r7, #12
 801a910:	687a      	ldr	r2, [r7, #4]
 801a912:	4618      	mov	r0, r3
 801a914:	f7ff fd85 	bl	801a422 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS6_PS5_>
	this->~_Sp_counted_ptr_inplace();
 801a918:	6878      	ldr	r0, [r7, #4]
 801a91a:	f7ff ffad 	bl	801a878 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 801a91e:	f107 030c 	add.w	r3, r7, #12
 801a922:	4618      	mov	r0, r3
 801a924:	f7ff fc6e 	bl	801a204 <_ZNSt15__allocated_ptrISaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 801a928:	f107 0314 	add.w	r3, r7, #20
 801a92c:	4618      	mov	r0, r3
 801a92e:	f7ff fc4a 	bl	801a1c6 <_ZNSaISt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 801a932:	3718      	adds	r7, #24
 801a934:	46bd      	mov	sp, r7
 801a936:	bd80      	pop	{r7, pc}

0801a938 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 801a938:	b580      	push	{r7, lr}
 801a93a:	b084      	sub	sp, #16
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	6078      	str	r0, [r7, #4]
 801a940:	6039      	str	r1, [r7, #0]
	auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
 801a942:	6878      	ldr	r0, [r7, #4]
 801a944:	f7ff fcf5 	bl	801a332 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE6_M_ptrEv>
 801a948:	60f8      	str	r0, [r7, #12]
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 801a94a:	f7f0 f8c1 	bl	800aad0 <_ZNSt19_Sp_make_shared_tag5_S_tiEv>
 801a94e:	4602      	mov	r2, r0
	    ||
 801a950:	683b      	ldr	r3, [r7, #0]
 801a952:	4293      	cmp	r3, r2
 801a954:	d005      	beq.n	801a962 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 801a956:	6838      	ldr	r0, [r7, #0]
 801a958:	f00d fefa 	bl	8028750 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
 801a95c:	4603      	mov	r3, r0
	    ||
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d001      	beq.n	801a966 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x2e>
 801a962:	2301      	movs	r3, #1
 801a964:	e000      	b.n	801a968 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x30>
 801a966:	2300      	movs	r3, #0
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d001      	beq.n	801a970 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x38>
	  return __ptr;
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	e000      	b.n	801a972 <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x3a>
	return nullptr;
 801a970:	2300      	movs	r3, #0
      }
 801a972:	4618      	mov	r0, r3
 801a974:	3710      	adds	r7, #16
 801a976:	46bd      	mov	sp, r7
 801a978:	bd80      	pop	{r7, pc}

0801a97a <_ZNSt23_Sp_counted_ptr_inplaceI7TMC5160SaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
 801a97a:	b580      	push	{r7, lr}
 801a97c:	b082      	sub	sp, #8
 801a97e:	af00      	add	r7, sp, #0
 801a980:	6078      	str	r0, [r7, #4]
 801a982:	6878      	ldr	r0, [r7, #4]
 801a984:	f7f4 f999 	bl	800ecba <_ZNSt14_Sp_ebo_helperILi0ESaIvELb1EE6_S_getERS1_>
 801a988:	4603      	mov	r3, r0
 801a98a:	4618      	mov	r0, r3
 801a98c:	3708      	adds	r7, #8
 801a98e:	46bd      	mov	sp, r7
 801a990:	bd80      	pop	{r7, pc}

0801a992 <_ZNSt16allocator_traitsISaIvEE7destroyI7TMC5160EEvRS0_PT_>:
	destroy(allocator_type&, _Up* __p)
 801a992:	b580      	push	{r7, lr}
 801a994:	b082      	sub	sp, #8
 801a996:	af00      	add	r7, sp, #0
 801a998:	6078      	str	r0, [r7, #4]
 801a99a:	6039      	str	r1, [r7, #0]
	{ std::_Destroy(__p); }
 801a99c:	6838      	ldr	r0, [r7, #0]
 801a99e:	f000 f804 	bl	801a9aa <_ZSt8_DestroyI7TMC5160EvPT_>
 801a9a2:	bf00      	nop
 801a9a4:	3708      	adds	r7, #8
 801a9a6:	46bd      	mov	sp, r7
 801a9a8:	bd80      	pop	{r7, pc}

0801a9aa <_ZSt8_DestroyI7TMC5160EvPT_>:
    _Destroy(_Tp* __pointer)
 801a9aa:	b580      	push	{r7, lr}
 801a9ac:	b082      	sub	sp, #8
 801a9ae:	af00      	add	r7, sp, #0
 801a9b0:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	6878      	ldr	r0, [r7, #4]
 801a9ba:	4798      	blx	r3
    }
 801a9bc:	bf00      	nop
 801a9be:	3708      	adds	r7, #8
 801a9c0:	46bd      	mov	sp, r7
 801a9c2:	bd80      	pop	{r7, pc}

0801a9c4 <__NVIC_SetPriority>:
{
 801a9c4:	b480      	push	{r7}
 801a9c6:	b083      	sub	sp, #12
 801a9c8:	af00      	add	r7, sp, #0
 801a9ca:	4603      	mov	r3, r0
 801a9cc:	6039      	str	r1, [r7, #0]
 801a9ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a9d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	db0a      	blt.n	801a9ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a9d8:	683b      	ldr	r3, [r7, #0]
 801a9da:	b2da      	uxtb	r2, r3
 801a9dc:	490c      	ldr	r1, [pc, #48]	@ (801aa10 <__NVIC_SetPriority+0x4c>)
 801a9de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a9e2:	0112      	lsls	r2, r2, #4
 801a9e4:	b2d2      	uxtb	r2, r2
 801a9e6:	440b      	add	r3, r1
 801a9e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801a9ec:	e00a      	b.n	801aa04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a9ee:	683b      	ldr	r3, [r7, #0]
 801a9f0:	b2da      	uxtb	r2, r3
 801a9f2:	4908      	ldr	r1, [pc, #32]	@ (801aa14 <__NVIC_SetPriority+0x50>)
 801a9f4:	88fb      	ldrh	r3, [r7, #6]
 801a9f6:	f003 030f 	and.w	r3, r3, #15
 801a9fa:	3b04      	subs	r3, #4
 801a9fc:	0112      	lsls	r2, r2, #4
 801a9fe:	b2d2      	uxtb	r2, r2
 801aa00:	440b      	add	r3, r1
 801aa02:	761a      	strb	r2, [r3, #24]
}
 801aa04:	bf00      	nop
 801aa06:	370c      	adds	r7, #12
 801aa08:	46bd      	mov	sp, r7
 801aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa0e:	4770      	bx	lr
 801aa10:	e000e100 	.word	0xe000e100
 801aa14:	e000ed00 	.word	0xe000ed00

0801aa18 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 801aa18:	b480      	push	{r7}
 801aa1a:	b083      	sub	sp, #12
 801aa1c:	af00      	add	r7, sp, #0
 801aa1e:	4603      	mov	r3, r0
 801aa20:	6039      	str	r1, [r7, #0]
 801aa22:	71fb      	strb	r3, [r7, #7]
    return memory_order(int(__m) & int(__mod));
 801aa24:	683b      	ldr	r3, [r7, #0]
 801aa26:	b25a      	sxtb	r2, r3
 801aa28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801aa2c:	4013      	ands	r3, r2
 801aa2e:	b25b      	sxtb	r3, r3
 801aa30:	b2db      	uxtb	r3, r3
  }
 801aa32:	4618      	mov	r0, r3
 801aa34:	370c      	adds	r7, #12
 801aa36:	46bd      	mov	sp, r7
 801aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa3c:	4770      	bx	lr

0801aa3e <_ZNSt6atomicIbEC1Eb>:
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 801aa3e:	b580      	push	{r7, lr}
 801aa40:	b082      	sub	sp, #8
 801aa42:	af00      	add	r7, sp, #0
 801aa44:	6078      	str	r0, [r7, #4]
 801aa46:	460b      	mov	r3, r1
 801aa48:	70fb      	strb	r3, [r7, #3]
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	78fa      	ldrb	r2, [r7, #3]
 801aa4e:	4611      	mov	r1, r2
 801aa50:	4618      	mov	r0, r3
 801aa52:	f000 fa7c 	bl	801af4e <_ZNSt13__atomic_baseIbEC1Eb>
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	4618      	mov	r0, r3
 801aa5a:	3708      	adds	r7, #8
 801aa5c:	46bd      	mov	sp, r7
 801aa5e:	bd80      	pop	{r7, pc}

0801aa60 <_ZNSt6atomicIbE5storeEbSt12memory_order>:
#if __cplusplus >= 201703L
    static constexpr bool is_always_lock_free = ATOMIC_BOOL_LOCK_FREE == 2;
#endif

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
 801aa60:	b580      	push	{r7, lr}
 801aa62:	b084      	sub	sp, #16
 801aa64:	af00      	add	r7, sp, #0
 801aa66:	6078      	str	r0, [r7, #4]
 801aa68:	460b      	mov	r3, r1
 801aa6a:	70fb      	strb	r3, [r7, #3]
 801aa6c:	4613      	mov	r3, r2
 801aa6e:	70bb      	strb	r3, [r7, #2]
    { _M_base.store(__i, __m); }
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	60fb      	str	r3, [r7, #12]
 801aa74:	78fb      	ldrb	r3, [r7, #3]
 801aa76:	72fb      	strb	r3, [r7, #11]
 801aa78:	78bb      	ldrb	r3, [r7, #2]
 801aa7a:	72bb      	strb	r3, [r7, #10]

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 801aa7c:	7abb      	ldrb	r3, [r7, #10]
 801aa7e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801aa82:	4618      	mov	r0, r3
 801aa84:	f7ff ffc8 	bl	801aa18 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 801aa88:	4603      	mov	r3, r0
 801aa8a:	727b      	strb	r3, [r7, #9]
	__glibcxx_assert(__b != memory_order_acquire);
 801aa8c:	f7ea fb3a 	bl	8005104 <_ZSt23__is_constant_evaluatedv>
 801aa90:	4603      	mov	r3, r0
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d004      	beq.n	801aaa0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 801aa96:	7a7b      	ldrb	r3, [r7, #9]
 801aa98:	2b02      	cmp	r3, #2
 801aa9a:	d101      	bne.n	801aaa0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 801aa9c:	2301      	movs	r3, #1
 801aa9e:	e000      	b.n	801aaa2 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x42>
 801aaa0:	2300      	movs	r3, #0
 801aaa2:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 801aaa4:	f7ea fb2e 	bl	8005104 <_ZSt23__is_constant_evaluatedv>
 801aaa8:	4603      	mov	r3, r0
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d004      	beq.n	801aab8 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 801aaae:	7a7b      	ldrb	r3, [r7, #9]
 801aab0:	2b04      	cmp	r3, #4
 801aab2:	d101      	bne.n	801aab8 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 801aab4:	2301      	movs	r3, #1
 801aab6:	e000      	b.n	801aaba <_ZNSt6atomicIbE5storeEbSt12memory_order+0x5a>
 801aab8:	2300      	movs	r3, #0
 801aaba:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_consume);
 801aabc:	f7ea fb22 	bl	8005104 <_ZSt23__is_constant_evaluatedv>
 801aac0:	4603      	mov	r3, r0
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d004      	beq.n	801aad0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 801aac6:	7a7b      	ldrb	r3, [r7, #9]
 801aac8:	2b01      	cmp	r3, #1
 801aaca:	d101      	bne.n	801aad0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 801aacc:	2301      	movs	r3, #1
 801aace:	e000      	b.n	801aad2 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x72>
 801aad0:	2300      	movs	r3, #0
 801aad2:	2b00      	cmp	r3, #0

	__atomic_store_n(&_M_i, __i, int(__m));
 801aad4:	68fb      	ldr	r3, [r7, #12]
 801aad6:	7afa      	ldrb	r2, [r7, #11]
 801aad8:	f3bf 8f5b 	dmb	ish
 801aadc:	701a      	strb	r2, [r3, #0]
 801aade:	f3bf 8f5b 	dmb	ish
      }
 801aae2:	bf00      	nop
 801aae4:	bf00      	nop
 801aae6:	3710      	adds	r7, #16
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bd80      	pop	{r7, pc}

0801aaec <_ZNKSt6atomicIbE4loadESt12memory_order>:
    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
 801aaec:	b580      	push	{r7, lr}
 801aaee:	b084      	sub	sp, #16
 801aaf0:	af00      	add	r7, sp, #0
 801aaf2:	6078      	str	r0, [r7, #4]
 801aaf4:	460b      	mov	r3, r1
 801aaf6:	70fb      	strb	r3, [r7, #3]
    { return _M_base.load(__m); }
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	60fb      	str	r3, [r7, #12]
 801aafc:	78fb      	ldrb	r3, [r7, #3]
 801aafe:	72fb      	strb	r3, [r7, #11]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 801ab00:	7afb      	ldrb	r3, [r7, #11]
 801ab02:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801ab06:	4618      	mov	r0, r3
 801ab08:	f7ff ff86 	bl	801aa18 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 801ab0c:	4603      	mov	r3, r0
 801ab0e:	72bb      	strb	r3, [r7, #10]
	__glibcxx_assert(__b != memory_order_release);
 801ab10:	f7ea faf8 	bl	8005104 <_ZSt23__is_constant_evaluatedv>
 801ab14:	4603      	mov	r3, r0
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	d004      	beq.n	801ab24 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 801ab1a:	7abb      	ldrb	r3, [r7, #10]
 801ab1c:	2b03      	cmp	r3, #3
 801ab1e:	d101      	bne.n	801ab24 <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 801ab20:	2301      	movs	r3, #1
 801ab22:	e000      	b.n	801ab26 <_ZNKSt6atomicIbE4loadESt12memory_order+0x3a>
 801ab24:	2300      	movs	r3, #0
 801ab26:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 801ab28:	f7ea faec 	bl	8005104 <_ZSt23__is_constant_evaluatedv>
 801ab2c:	4603      	mov	r3, r0
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	d004      	beq.n	801ab3c <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 801ab32:	7abb      	ldrb	r3, [r7, #10]
 801ab34:	2b04      	cmp	r3, #4
 801ab36:	d101      	bne.n	801ab3c <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 801ab38:	2301      	movs	r3, #1
 801ab3a:	e000      	b.n	801ab3e <_ZNKSt6atomicIbE4loadESt12memory_order+0x52>
 801ab3c:	2300      	movs	r3, #0
 801ab3e:	2b00      	cmp	r3, #0

	return __atomic_load_n(&_M_i, int(__m));
 801ab40:	68fb      	ldr	r3, [r7, #12]
 801ab42:	f3bf 8f5b 	dmb	ish
 801ab46:	781b      	ldrb	r3, [r3, #0]
 801ab48:	f3bf 8f5b 	dmb	ish
 801ab4c:	b2db      	uxtb	r3, r3
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	bf14      	ite	ne
 801ab52:	2301      	movne	r3, #1
 801ab54:	2300      	moveq	r3, #0
 801ab56:	b2db      	uxtb	r3, r3
 801ab58:	4618      	mov	r0, r3
 801ab5a:	3710      	adds	r7, #16
 801ab5c:	46bd      	mov	sp, r7
 801ab5e:	bd80      	pop	{r7, pc}

0801ab60 <_ZN9pruThread16setThreadRunningEb>:
    atomic<bool> threadPaused{false};

    vector<shared_ptr<Module>> modules;
    vector<shared_ptr<Module>> modulesPost;

    void setThreadRunning(bool val) { threadRunning.store(val, std::memory_order_release); }
 801ab60:	b580      	push	{r7, lr}
 801ab62:	b082      	sub	sp, #8
 801ab64:	af00      	add	r7, sp, #0
 801ab66:	6078      	str	r0, [r7, #4]
 801ab68:	460b      	mov	r3, r1
 801ab6a:	70fb      	strb	r3, [r7, #3]
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	3329      	adds	r3, #41	@ 0x29
 801ab70:	78f9      	ldrb	r1, [r7, #3]
 801ab72:	2203      	movs	r2, #3
 801ab74:	4618      	mov	r0, r3
 801ab76:	f7ff ff73 	bl	801aa60 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 801ab7a:	bf00      	nop
 801ab7c:	3708      	adds	r7, #8
 801ab7e:	46bd      	mov	sp, r7
 801ab80:	bd80      	pop	{r7, pc}

0801ab82 <_ZN9pruThread15setThreadPausedEb>:
    void setThreadPaused(bool val) { threadPaused.store(val, std::memory_order_release); }
 801ab82:	b580      	push	{r7, lr}
 801ab84:	b082      	sub	sp, #8
 801ab86:	af00      	add	r7, sp, #0
 801ab88:	6078      	str	r0, [r7, #4]
 801ab8a:	460b      	mov	r3, r1
 801ab8c:	70fb      	strb	r3, [r7, #3]
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	332a      	adds	r3, #42	@ 0x2a
 801ab92:	78f9      	ldrb	r1, [r7, #3]
 801ab94:	2203      	movs	r2, #3
 801ab96:	4618      	mov	r0, r3
 801ab98:	f7ff ff62 	bl	801aa60 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 801ab9c:	bf00      	nop
 801ab9e:	3708      	adds	r7, #8
 801aba0:	46bd      	mov	sp, r7
 801aba2:	bd80      	pop	{r7, pc}

0801aba4 <_ZNK9pruThread9isRunningEv>:

	bool registerModule(shared_ptr<Module> module);
	bool registerModulePost(shared_ptr<Module> module);
	bool unregisterModule(shared_ptr<Module> module);

    [[nodiscard]] bool isRunning() const { return threadRunning.load(std::memory_order_acquire);  }
 801aba4:	b580      	push	{r7, lr}
 801aba6:	b082      	sub	sp, #8
 801aba8:	af00      	add	r7, sp, #0
 801abaa:	6078      	str	r0, [r7, #4]
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	3329      	adds	r3, #41	@ 0x29
 801abb0:	2102      	movs	r1, #2
 801abb2:	4618      	mov	r0, r3
 801abb4:	f7ff ff9a 	bl	801aaec <_ZNKSt6atomicIbE4loadESt12memory_order>
 801abb8:	4603      	mov	r3, r0
 801abba:	4618      	mov	r0, r3
 801abbc:	3708      	adds	r7, #8
 801abbe:	46bd      	mov	sp, r7
 801abc0:	bd80      	pop	{r7, pc}

0801abc2 <_ZNK9pruThread8isPausedEv>:
    [[nodiscard]] bool isPaused() const { return threadPaused.load(std::memory_order_acquire); }
 801abc2:	b580      	push	{r7, lr}
 801abc4:	b082      	sub	sp, #8
 801abc6:	af00      	add	r7, sp, #0
 801abc8:	6078      	str	r0, [r7, #4]
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	332a      	adds	r3, #42	@ 0x2a
 801abce:	2102      	movs	r1, #2
 801abd0:	4618      	mov	r0, r3
 801abd2:	f7ff ff8b 	bl	801aaec <_ZNKSt6atomicIbE4loadESt12memory_order>
 801abd6:	4603      	mov	r3, r0
 801abd8:	4618      	mov	r0, r3
 801abda:	3708      	adds	r7, #8
 801abdc:	46bd      	mov	sp, r7
 801abde:	bd80      	pop	{r7, pc}

0801abe0 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>:

#include "pruThread.h"
#include "../modules/module.h"


pruThread::pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio)
 801abe0:	b580      	push	{r7, lr}
 801abe2:	b084      	sub	sp, #16
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	60f8      	str	r0, [r7, #12]
 801abe8:	60b9      	str	r1, [r7, #8]
 801abea:	607a      	str	r2, [r7, #4]
 801abec:	807b      	strh	r3, [r7, #2]
    : threadName(_name),
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	68b9      	ldr	r1, [r7, #8]
 801abf2:	4618      	mov	r0, r3
 801abf4:	f00e f88b 	bl	8028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      timer(_timer),
 801abf8:	68fb      	ldr	r3, [r7, #12]
 801abfa:	687a      	ldr	r2, [r7, #4]
 801abfc:	619a      	str	r2, [r3, #24]
      irq(_irq),
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	887a      	ldrh	r2, [r7, #2]
 801ac02:	839a      	strh	r2, [r3, #28]
      frequency(_freq),
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	69ba      	ldr	r2, [r7, #24]
 801ac08:	621a      	str	r2, [r3, #32]
	  hasModulesPost(false)
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	2200      	movs	r2, #0
 801ac0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 801ac12:	68fb      	ldr	r3, [r7, #12]
 801ac14:	3329      	adds	r3, #41	@ 0x29
 801ac16:	2100      	movs	r1, #0
 801ac18:	4618      	mov	r0, r3
 801ac1a:	f7ff ff10 	bl	801aa3e <_ZNSt6atomicIbEC1Eb>
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	332a      	adds	r3, #42	@ 0x2a
 801ac22:	2100      	movs	r1, #0
 801ac24:	4618      	mov	r0, r3
 801ac26:	f7ff ff0a 	bl	801aa3e <_ZNSt6atomicIbEC1Eb>
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	332c      	adds	r3, #44	@ 0x2c
 801ac2e:	4618      	mov	r0, r3
 801ac30:	f7f0 fab4 	bl	800b19c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 801ac34:	68fb      	ldr	r3, [r7, #12]
 801ac36:	3338      	adds	r3, #56	@ 0x38
 801ac38:	4618      	mov	r0, r3
 801ac3a:	f7f0 faaf 	bl	800b19c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
{
	printf("Creating %s thread at %lu hz\n", threadName.c_str(), (unsigned long)frequency);
 801ac3e:	68fb      	ldr	r3, [r7, #12]
 801ac40:	4618      	mov	r0, r3
 801ac42:	f00e f837 	bl	8028cb4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 801ac46:	4601      	mov	r1, r0
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	6a1b      	ldr	r3, [r3, #32]
 801ac4c:	461a      	mov	r2, r3
 801ac4e:	4808      	ldr	r0, [pc, #32]	@ (801ac70 <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh+0x90>)
 801ac50:	f00e fbfc 	bl	802944c <iprintf>
    NVIC_SetPriority(irq, _prio);
 801ac54:	68fb      	ldr	r3, [r7, #12]
 801ac56:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801ac5a:	7f3a      	ldrb	r2, [r7, #28]
 801ac5c:	4611      	mov	r1, r2
 801ac5e:	4618      	mov	r0, r3
 801ac60:	f7ff feb0 	bl	801a9c4 <__NVIC_SetPriority>
}
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	4618      	mov	r0, r3
 801ac68:	3710      	adds	r7, #16
 801ac6a:	46bd      	mov	sp, r7
 801ac6c:	bd80      	pop	{r7, pc}
 801ac6e:	bf00      	nop
 801ac70:	0802b0c0 	.word	0x0802b0c0

0801ac74 <_ZN9pruThread14executeModulesEv>:


bool pruThread::executeModules() {
 801ac74:	b580      	push	{r7, lr}
 801ac76:	b08a      	sub	sp, #40	@ 0x28
 801ac78:	af00      	add	r7, sp, #0
 801ac7a:	6078      	str	r0, [r7, #4]
    for (const auto& module : modules) {
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	332c      	adds	r3, #44	@ 0x2c
 801ac80:	627b      	str	r3, [r7, #36]	@ 0x24
 801ac82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ac84:	f7f1 fc5b 	bl	800c53e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801ac88:	4603      	mov	r3, r0
 801ac8a:	617b      	str	r3, [r7, #20]
 801ac8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ac8e:	f7f1 fc66 	bl	800c55e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801ac92:	4603      	mov	r3, r0
 801ac94:	613b      	str	r3, [r7, #16]
 801ac96:	e018      	b.n	801acca <_ZN9pruThread14executeModulesEv+0x56>
 801ac98:	f107 0314 	add.w	r3, r7, #20
 801ac9c:	4618      	mov	r0, r3
 801ac9e:	f7f1 fc98 	bl	800c5d2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801aca2:	61b8      	str	r0, [r7, #24]
        if (module) {
 801aca4:	69bb      	ldr	r3, [r7, #24]
 801aca6:	4618      	mov	r0, r3
 801aca8:	f7f1 fc9f 	bl	800c5ea <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801acac:	4603      	mov	r3, r0
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d006      	beq.n	801acc0 <_ZN9pruThread14executeModulesEv+0x4c>
            module->runModule();
 801acb2:	69b8      	ldr	r0, [r7, #24]
 801acb4:	f7f1 fcaa 	bl	800c60c <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 801acb8:	4603      	mov	r3, r0
 801acba:	4618      	mov	r0, r3
 801acbc:	f7f7 f946 	bl	8011f4c <_ZN6Module9runModuleEv>
    for (const auto& module : modules) {
 801acc0:	f107 0314 	add.w	r3, r7, #20
 801acc4:	4618      	mov	r0, r3
 801acc6:	f7f1 fc73 	bl	800c5b0 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 801acca:	f107 0210 	add.w	r2, r7, #16
 801acce:	f107 0314 	add.w	r3, r7, #20
 801acd2:	4611      	mov	r1, r2
 801acd4:	4618      	mov	r0, r3
 801acd6:	f7f1 fc53 	bl	800c580 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801acda:	4603      	mov	r3, r0
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d1db      	bne.n	801ac98 <_ZN9pruThread14executeModulesEv+0x24>
        }
    }

    if (hasModulesPost) {
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	d031      	beq.n	801ad4e <_ZN9pruThread14executeModulesEv+0xda>
		for (const auto& module : modulesPost) {
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	3338      	adds	r3, #56	@ 0x38
 801acee:	623b      	str	r3, [r7, #32]
 801acf0:	6a38      	ldr	r0, [r7, #32]
 801acf2:	f7f1 fc24 	bl	800c53e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801acf6:	4603      	mov	r3, r0
 801acf8:	60fb      	str	r3, [r7, #12]
 801acfa:	6a38      	ldr	r0, [r7, #32]
 801acfc:	f7f1 fc2f 	bl	800c55e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801ad00:	4603      	mov	r3, r0
 801ad02:	60bb      	str	r3, [r7, #8]
 801ad04:	e018      	b.n	801ad38 <_ZN9pruThread14executeModulesEv+0xc4>
 801ad06:	f107 030c 	add.w	r3, r7, #12
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	f7f1 fc61 	bl	800c5d2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801ad10:	61f8      	str	r0, [r7, #28]
			if (module) {
 801ad12:	69fb      	ldr	r3, [r7, #28]
 801ad14:	4618      	mov	r0, r3
 801ad16:	f7f1 fc68 	bl	800c5ea <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801ad1a:	4603      	mov	r3, r0
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d006      	beq.n	801ad2e <_ZN9pruThread14executeModulesEv+0xba>
				module->runModule();
 801ad20:	69f8      	ldr	r0, [r7, #28]
 801ad22:	f7f1 fc73 	bl	800c60c <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 801ad26:	4603      	mov	r3, r0
 801ad28:	4618      	mov	r0, r3
 801ad2a:	f7f7 f90f 	bl	8011f4c <_ZN6Module9runModuleEv>
		for (const auto& module : modulesPost) {
 801ad2e:	f107 030c 	add.w	r3, r7, #12
 801ad32:	4618      	mov	r0, r3
 801ad34:	f7f1 fc3c 	bl	800c5b0 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 801ad38:	f107 0208 	add.w	r2, r7, #8
 801ad3c:	f107 030c 	add.w	r3, r7, #12
 801ad40:	4611      	mov	r1, r2
 801ad42:	4618      	mov	r0, r3
 801ad44:	f7f1 fc1c 	bl	800c580 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801ad48:	4603      	mov	r3, r0
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d1db      	bne.n	801ad06 <_ZN9pruThread14executeModulesEv+0x92>
			}
		}
    }

    return true;
 801ad4e:	2301      	movs	r3, #1
}
 801ad50:	4618      	mov	r0, r3
 801ad52:	3728      	adds	r7, #40	@ 0x28
 801ad54:	46bd      	mov	sp, r7
 801ad56:	bd80      	pop	{r7, pc}

0801ad58 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>:

bool pruThread::registerModule(shared_ptr<Module> module) {
 801ad58:	b580      	push	{r7, lr}
 801ad5a:	b082      	sub	sp, #8
 801ad5c:	af00      	add	r7, sp, #0
 801ad5e:	6078      	str	r0, [r7, #4]
 801ad60:	6039      	str	r1, [r7, #0]
    if (!module) {
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	4618      	mov	r0, r3
 801ad66:	f7f1 fc40 	bl	800c5ea <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801ad6a:	4603      	mov	r3, r0
 801ad6c:	f083 0301 	eor.w	r3, r3, #1
 801ad70:	b2db      	uxtb	r3, r3
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d001      	beq.n	801ad7a <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 801ad76:	2300      	movs	r3, #0
 801ad78:	e006      	b.n	801ad88 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x30>
    }
    modules.push_back(module);
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	332c      	adds	r3, #44	@ 0x2c
 801ad7e:	6839      	ldr	r1, [r7, #0]
 801ad80:	4618      	mov	r0, r3
 801ad82:	f000 f8f4 	bl	801af6e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 801ad86:	2301      	movs	r3, #1
}
 801ad88:	4618      	mov	r0, r3
 801ad8a:	3708      	adds	r7, #8
 801ad8c:	46bd      	mov	sp, r7
 801ad8e:	bd80      	pop	{r7, pc}

0801ad90 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>:

bool pruThread::registerModulePost(shared_ptr<Module> module) {
 801ad90:	b580      	push	{r7, lr}
 801ad92:	b082      	sub	sp, #8
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	6078      	str	r0, [r7, #4]
 801ad98:	6039      	str	r1, [r7, #0]
    if (!module) {
 801ad9a:	683b      	ldr	r3, [r7, #0]
 801ad9c:	4618      	mov	r0, r3
 801ad9e:	f7f1 fc24 	bl	800c5ea <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801ada2:	4603      	mov	r3, r0
 801ada4:	f083 0301 	eor.w	r3, r3, #1
 801ada8:	b2db      	uxtb	r3, r3
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d001      	beq.n	801adb2 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x22>
        return false;
 801adae:	2300      	movs	r3, #0
 801adb0:	e00a      	b.n	801adc8 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x38>
    }
    hasModulesPost = true;
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	2201      	movs	r2, #1
 801adb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    modulesPost.push_back(module);
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	3338      	adds	r3, #56	@ 0x38
 801adbe:	6839      	ldr	r1, [r7, #0]
 801adc0:	4618      	mov	r0, r3
 801adc2:	f000 f8d4 	bl	801af6e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 801adc6:	2301      	movs	r3, #1
}
 801adc8:	4618      	mov	r0, r3
 801adca:	3708      	adds	r7, #8
 801adcc:	46bd      	mov	sp, r7
 801adce:	bd80      	pop	{r7, pc}

0801add0 <_ZZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEENKUlRKS2_E_clES4_>:
        return false;
    }

    // Use a lambda to compare the raw pointers inside the shared_ptrs
    auto iter = std::remove_if(modules.begin(), modules.end(),
        [&module](const std::shared_ptr<Module>& mod) {
 801add0:	b580      	push	{r7, lr}
 801add2:	b082      	sub	sp, #8
 801add4:	af00      	add	r7, sp, #0
 801add6:	6078      	str	r0, [r7, #4]
 801add8:	6039      	str	r1, [r7, #0]
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	681b      	ldr	r3, [r3, #0]
            return mod == module; // Compare shared_ptrs directly
 801adde:	4619      	mov	r1, r3
 801ade0:	6838      	ldr	r0, [r7, #0]
 801ade2:	f000 f8ea 	bl	801afba <_ZSteqI6ModuleS0_EbRKSt10shared_ptrIT_ERKS1_IT0_E>
 801ade6:	4603      	mov	r3, r0
        });
 801ade8:	4618      	mov	r0, r3
 801adea:	3708      	adds	r7, #8
 801adec:	46bd      	mov	sp, r7
 801adee:	bd80      	pop	{r7, pc}

0801adf0 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE>:
bool pruThread::unregisterModule(std::shared_ptr<Module> module) {
 801adf0:	b590      	push	{r4, r7, lr}
 801adf2:	b087      	sub	sp, #28
 801adf4:	af00      	add	r7, sp, #0
 801adf6:	6078      	str	r0, [r7, #4]
 801adf8:	6039      	str	r1, [r7, #0]
    if (!module) {
 801adfa:	683b      	ldr	r3, [r7, #0]
 801adfc:	4618      	mov	r0, r3
 801adfe:	f7f1 fbf4 	bl	800c5ea <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 801ae02:	4603      	mov	r3, r0
 801ae04:	f083 0301 	eor.w	r3, r3, #1
 801ae08:	b2db      	uxtb	r3, r3
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d001      	beq.n	801ae12 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 801ae0e:	2300      	movs	r3, #0
 801ae10:	e032      	b.n	801ae78 <_ZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleE+0x88>
    auto iter = std::remove_if(modules.begin(), modules.end(),
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	332c      	adds	r3, #44	@ 0x2c
 801ae16:	4618      	mov	r0, r3
 801ae18:	f7f1 fb91 	bl	800c53e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801ae1c:	4604      	mov	r4, r0
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	332c      	adds	r3, #44	@ 0x2c
 801ae22:	4618      	mov	r0, r3
 801ae24:	f7f1 fb9b 	bl	800c55e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801ae28:	4601      	mov	r1, r0
 801ae2a:	683b      	ldr	r3, [r7, #0]
 801ae2c:	461a      	mov	r2, r3
 801ae2e:	4620      	mov	r0, r4
 801ae30:	f000 f8db 	bl	801afea <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEZN9pruThread16unregisterModuleES4_EUlRKS4_E_ET_SE_SE_T0_>
 801ae34:	4603      	mov	r3, r0
 801ae36:	60bb      	str	r3, [r7, #8]

    modules.erase(iter, modules.end());
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 801ae3e:	f107 0208 	add.w	r2, r7, #8
 801ae42:	f107 030c 	add.w	r3, r7, #12
 801ae46:	4611      	mov	r1, r2
 801ae48:	4618      	mov	r0, r3
 801ae4a:	f000 f8e2 	bl	801b012 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	332c      	adds	r3, #44	@ 0x2c
 801ae52:	4618      	mov	r0, r3
 801ae54:	f7f1 fb83 	bl	800c55e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801ae58:	4603      	mov	r3, r0
 801ae5a:	617b      	str	r3, [r7, #20]
 801ae5c:	f107 0214 	add.w	r2, r7, #20
 801ae60:	f107 0310 	add.w	r3, r7, #16
 801ae64:	4611      	mov	r1, r2
 801ae66:	4618      	mov	r0, r3
 801ae68:	f000 f8d3 	bl	801b012 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>
 801ae6c:	693a      	ldr	r2, [r7, #16]
 801ae6e:	68f9      	ldr	r1, [r7, #12]
 801ae70:	4620      	mov	r0, r4
 801ae72:	f000 f8df 	bl	801b034 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS2_S4_EES9_>
    return true;
 801ae76:	2301      	movs	r3, #1
}
 801ae78:	4618      	mov	r0, r3
 801ae7a:	371c      	adds	r7, #28
 801ae7c:	46bd      	mov	sp, r7
 801ae7e:	bd90      	pop	{r4, r7, pc}

0801ae80 <_ZN9pruThread11startThreadEv>:

// For baremetal, this is just initialization
bool pruThread::startThread() {
 801ae80:	b590      	push	{r4, r7, lr}
 801ae82:	b085      	sub	sp, #20
 801ae84:	af02      	add	r7, sp, #8
 801ae86:	6078      	str	r0, [r7, #4]
    if (isRunning()) {
 801ae88:	6878      	ldr	r0, [r7, #4]
 801ae8a:	f7ff fe8b 	bl	801aba4 <_ZNK9pruThread9isRunningEv>
 801ae8e:	4603      	mov	r3, r0
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	d001      	beq.n	801ae98 <_ZN9pruThread11startThreadEv+0x18>
        return true;
 801ae94:	2301      	movs	r3, #1
 801ae96:	e01c      	b.n	801aed2 <_ZN9pruThread11startThreadEv+0x52>
    }

    setThreadRunning(true);
 801ae98:	2101      	movs	r1, #1
 801ae9a:	6878      	ldr	r0, [r7, #4]
 801ae9c:	f7ff fe60 	bl	801ab60 <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 801aea0:	2100      	movs	r1, #0
 801aea2:	6878      	ldr	r0, [r7, #4]
 801aea4:	f7ff fe6d 	bl	801ab82 <_ZN9pruThread15setThreadPausedEb>

    timerPtr = new pruTimer(timer, irq, frequency, this);
 801aea8:	2014      	movs	r0, #20
 801aeaa:	f00d fc25 	bl	80286f8 <_Znwj>
 801aeae:	4603      	mov	r3, r0
 801aeb0:	461c      	mov	r4, r3
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	6999      	ldr	r1, [r3, #24]
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	6a18      	ldr	r0, [r3, #32]
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	9300      	str	r3, [sp, #0]
 801aec4:	4603      	mov	r3, r0
 801aec6:	4620      	mov	r0, r4
 801aec8:	f000 fd1a 	bl	801b900 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	625c      	str	r4, [r3, #36]	@ 0x24
    return true;
 801aed0:	2301      	movs	r3, #1
}
 801aed2:	4618      	mov	r0, r3
 801aed4:	370c      	adds	r7, #12
 801aed6:	46bd      	mov	sp, r7
 801aed8:	bd90      	pop	{r4, r7, pc}

0801aeda <_ZN9pruThread10stopThreadEv>:

void pruThread::stopThread() {
 801aeda:	b580      	push	{r7, lr}
 801aedc:	b082      	sub	sp, #8
 801aede:	af00      	add	r7, sp, #0
 801aee0:	6078      	str	r0, [r7, #4]
    setThreadRunning(false);
 801aee2:	2100      	movs	r1, #0
 801aee4:	6878      	ldr	r0, [r7, #4]
 801aee6:	f7ff fe3b 	bl	801ab60 <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 801aeea:	2100      	movs	r1, #0
 801aeec:	6878      	ldr	r0, [r7, #4]
 801aeee:	f7ff fe48 	bl	801ab82 <_ZN9pruThread15setThreadPausedEb>
}
 801aef2:	bf00      	nop
 801aef4:	3708      	adds	r7, #8
 801aef6:	46bd      	mov	sp, r7
 801aef8:	bd80      	pop	{r7, pc}

0801aefa <_ZN9pruThread6updateEv>:

// This is the main function that should be called periodically
bool pruThread::update() {
 801aefa:	b580      	push	{r7, lr}
 801aefc:	b082      	sub	sp, #8
 801aefe:	af00      	add	r7, sp, #0
 801af00:	6078      	str	r0, [r7, #4]
    if (!isRunning() || isPaused()) {
 801af02:	6878      	ldr	r0, [r7, #4]
 801af04:	f7ff fe4e 	bl	801aba4 <_ZNK9pruThread9isRunningEv>
 801af08:	4603      	mov	r3, r0
 801af0a:	f083 0301 	eor.w	r3, r3, #1
 801af0e:	b2db      	uxtb	r3, r3
 801af10:	2b00      	cmp	r3, #0
 801af12:	d105      	bne.n	801af20 <_ZN9pruThread6updateEv+0x26>
 801af14:	6878      	ldr	r0, [r7, #4]
 801af16:	f7ff fe54 	bl	801abc2 <_ZNK9pruThread8isPausedEv>
 801af1a:	4603      	mov	r3, r0
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	d001      	beq.n	801af24 <_ZN9pruThread6updateEv+0x2a>
 801af20:	2301      	movs	r3, #1
 801af22:	e000      	b.n	801af26 <_ZN9pruThread6updateEv+0x2c>
 801af24:	2300      	movs	r3, #0
 801af26:	2b00      	cmp	r3, #0
 801af28:	d001      	beq.n	801af2e <_ZN9pruThread6updateEv+0x34>
        return true;
 801af2a:	2301      	movs	r3, #1
 801af2c:	e00b      	b.n	801af46 <_ZN9pruThread6updateEv+0x4c>
    }

    // Execute all modules
    if (!executeModules()) {
 801af2e:	6878      	ldr	r0, [r7, #4]
 801af30:	f7ff fea0 	bl	801ac74 <_ZN9pruThread14executeModulesEv>
 801af34:	4603      	mov	r3, r0
 801af36:	f083 0301 	eor.w	r3, r3, #1
 801af3a:	b2db      	uxtb	r3, r3
 801af3c:	2b00      	cmp	r3, #0
 801af3e:	d001      	beq.n	801af44 <_ZN9pruThread6updateEv+0x4a>
        return false;
 801af40:	2300      	movs	r3, #0
 801af42:	e000      	b.n	801af46 <_ZN9pruThread6updateEv+0x4c>
    }

    return true;
 801af44:	2301      	movs	r3, #1
}
 801af46:	4618      	mov	r0, r3
 801af48:	3708      	adds	r7, #8
 801af4a:	46bd      	mov	sp, r7
 801af4c:	bd80      	pop	{r7, pc}

0801af4e <_ZNSt13__atomic_baseIbEC1Eb>:
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 801af4e:	b480      	push	{r7}
 801af50:	b083      	sub	sp, #12
 801af52:	af00      	add	r7, sp, #0
 801af54:	6078      	str	r0, [r7, #4]
 801af56:	460b      	mov	r3, r1
 801af58:	70fb      	strb	r3, [r7, #3]
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	78fa      	ldrb	r2, [r7, #3]
 801af5e:	701a      	strb	r2, [r3, #0]
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	4618      	mov	r0, r3
 801af64:	370c      	adds	r7, #12
 801af66:	46bd      	mov	sp, r7
 801af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af6c:	4770      	bx	lr

0801af6e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
 801af6e:	b580      	push	{r7, lr}
 801af70:	b082      	sub	sp, #8
 801af72:	af00      	add	r7, sp, #0
 801af74:	6078      	str	r0, [r7, #4]
 801af76:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	685a      	ldr	r2, [r3, #4]
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	689b      	ldr	r3, [r3, #8]
 801af80:	429a      	cmp	r2, r3
 801af82:	d00d      	beq.n	801afa0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801af84:	6878      	ldr	r0, [r7, #4]
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	685b      	ldr	r3, [r3, #4]
 801af8a:	683a      	ldr	r2, [r7, #0]
 801af8c:	4619      	mov	r1, r3
 801af8e:	f000 f88a 	bl	801b0a6 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	685b      	ldr	r3, [r3, #4]
 801af96:	f103 0208 	add.w	r2, r3, #8
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	605a      	str	r2, [r3, #4]
      }
 801af9e:	e008      	b.n	801afb2 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x44>
	  _M_realloc_insert(end(), __x);
 801afa0:	6878      	ldr	r0, [r7, #4]
 801afa2:	f7f1 fadc 	bl	800c55e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801afa6:	4603      	mov	r3, r0
 801afa8:	683a      	ldr	r2, [r7, #0]
 801afaa:	4619      	mov	r1, r3
 801afac:	6878      	ldr	r0, [r7, #4]
 801afae:	f000 f88d 	bl	801b0cc <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 801afb2:	bf00      	nop
 801afb4:	3708      	adds	r7, #8
 801afb6:	46bd      	mov	sp, r7
 801afb8:	bd80      	pop	{r7, pc}

0801afba <_ZSteqI6ModuleS0_EbRKSt10shared_ptrIT_ERKS1_IT0_E>:
    operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
 801afba:	b590      	push	{r4, r7, lr}
 801afbc:	b083      	sub	sp, #12
 801afbe:	af00      	add	r7, sp, #0
 801afc0:	6078      	str	r0, [r7, #4]
 801afc2:	6039      	str	r1, [r7, #0]
    { return __a.get() == __b.get(); }
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	4618      	mov	r0, r3
 801afc8:	f7f2 facf 	bl	800d56a <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 801afcc:	4604      	mov	r4, r0
 801afce:	683b      	ldr	r3, [r7, #0]
 801afd0:	4618      	mov	r0, r3
 801afd2:	f7f2 faca 	bl	800d56a <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 801afd6:	4603      	mov	r3, r0
 801afd8:	429c      	cmp	r4, r3
 801afda:	bf0c      	ite	eq
 801afdc:	2301      	moveq	r3, #1
 801afde:	2300      	movne	r3, #0
 801afe0:	b2db      	uxtb	r3, r3
 801afe2:	4618      	mov	r0, r3
 801afe4:	370c      	adds	r7, #12
 801afe6:	46bd      	mov	sp, r7
 801afe8:	bd90      	pop	{r4, r7, pc}

0801afea <_ZSt9remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEZN9pruThread16unregisterModuleES4_EUlRKS4_E_ET_SE_SE_T0_>:
   *  are still present, but their value is unspecified.
  */
  template<typename _ForwardIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
 801afea:	b580      	push	{r7, lr}
 801afec:	b084      	sub	sp, #16
 801afee:	af00      	add	r7, sp, #0
 801aff0:	60f8      	str	r0, [r7, #12]
 801aff2:	60b9      	str	r1, [r7, #8]
 801aff4:	607a      	str	r2, [r7, #4]
				  _ForwardIterator>)
      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
	    typename iterator_traits<_ForwardIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__remove_if(__first, __last,
 801aff6:	6878      	ldr	r0, [r7, #4]
 801aff8:	f000 f8e4 	bl	801b1c4 <_ZN9__gnu_cxx5__ops11__pred_iterIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EENS0_10_Iter_predIT_EESA_>
 801affc:	4603      	mov	r3, r0
 801affe:	461a      	mov	r2, r3
 801b000:	68b9      	ldr	r1, [r7, #8]
 801b002:	68f8      	ldr	r0, [r7, #12]
 801b004:	f000 f8f2 	bl	801b1ec <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>
 801b008:	4603      	mov	r3, r0
			      __gnu_cxx::__ops::__pred_iter(__pred));
    }
 801b00a:	4618      	mov	r0, r3
 801b00c:	3710      	adds	r7, #16
 801b00e:	46bd      	mov	sp, r7
 801b010:	bd80      	pop	{r7, pc}

0801b012 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1IPS3_vEERKNS0_IT_S8_EE>:
	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
 801b012:	b580      	push	{r7, lr}
 801b014:	b082      	sub	sp, #8
 801b016:	af00      	add	r7, sp, #0
 801b018:	6078      	str	r0, [r7, #4]
 801b01a:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 801b01c:	6838      	ldr	r0, [r7, #0]
 801b01e:	f7f1 ffbb 	bl	800cf98 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b022:	4603      	mov	r3, r0
 801b024:	681a      	ldr	r2, [r3, #0]
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	601a      	str	r2, [r3, #0]
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	4618      	mov	r0, r3
 801b02e:	3708      	adds	r7, #8
 801b030:	46bd      	mov	sp, r7
 801b032:	bd80      	pop	{r7, pc}

0801b034 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS2_S4_EES9_>:
      erase(const_iterator __first, const_iterator __last)
 801b034:	b590      	push	{r4, r7, lr}
 801b036:	b087      	sub	sp, #28
 801b038:	af00      	add	r7, sp, #0
 801b03a:	60f8      	str	r0, [r7, #12]
 801b03c:	60b9      	str	r1, [r7, #8]
 801b03e:	607a      	str	r2, [r7, #4]
	const auto __beg = begin();
 801b040:	68f8      	ldr	r0, [r7, #12]
 801b042:	f7f1 fa7c 	bl	800c53e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801b046:	4603      	mov	r3, r0
 801b048:	617b      	str	r3, [r7, #20]
	const auto __cbeg = cbegin();
 801b04a:	68f8      	ldr	r0, [r7, #12]
 801b04c:	f000 f929 	bl	801b2a2 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE6cbeginEv>
 801b050:	4603      	mov	r3, r0
 801b052:	613b      	str	r3, [r7, #16]
	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
 801b054:	f107 0210 	add.w	r2, r7, #16
 801b058:	f107 0308 	add.w	r3, r7, #8
 801b05c:	4611      	mov	r1, r2
 801b05e:	4618      	mov	r0, r3
 801b060:	f000 f92f 	bl	801b2c2 <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 801b064:	4602      	mov	r2, r0
 801b066:	f107 0314 	add.w	r3, r7, #20
 801b06a:	4611      	mov	r1, r2
 801b06c:	4618      	mov	r0, r3
 801b06e:	f000 f93d 	bl	801b2ec <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 801b072:	4604      	mov	r4, r0
 801b074:	f107 0210 	add.w	r2, r7, #16
 801b078:	1d3b      	adds	r3, r7, #4
 801b07a:	4611      	mov	r1, r2
 801b07c:	4618      	mov	r0, r3
 801b07e:	f000 f920 	bl	801b2c2 <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 801b082:	4602      	mov	r2, r0
 801b084:	f107 0314 	add.w	r3, r7, #20
 801b088:	4611      	mov	r1, r2
 801b08a:	4618      	mov	r0, r3
 801b08c:	f000 f92e 	bl	801b2ec <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 801b090:	4603      	mov	r3, r0
 801b092:	461a      	mov	r2, r3
 801b094:	4621      	mov	r1, r4
 801b096:	68f8      	ldr	r0, [r7, #12]
 801b098:	f000 f940 	bl	801b31c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_>
 801b09c:	4603      	mov	r3, r0
      }
 801b09e:	4618      	mov	r0, r3
 801b0a0:	371c      	adds	r7, #28
 801b0a2:	46bd      	mov	sp, r7
 801b0a4:	bd90      	pop	{r4, r7, pc}

0801b0a6 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801b0a6:	b580      	push	{r7, lr}
 801b0a8:	b084      	sub	sp, #16
 801b0aa:	af00      	add	r7, sp, #0
 801b0ac:	60f8      	str	r0, [r7, #12]
 801b0ae:	60b9      	str	r1, [r7, #8]
 801b0b0:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 801b0b2:	6878      	ldr	r0, [r7, #4]
 801b0b4:	f000 f979 	bl	801b3aa <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 801b0b8:	4603      	mov	r3, r0
 801b0ba:	461a      	mov	r2, r3
 801b0bc:	68b9      	ldr	r1, [r7, #8]
 801b0be:	68f8      	ldr	r0, [r7, #12]
 801b0c0:	f000 f97e 	bl	801b3c0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 801b0c4:	bf00      	nop
 801b0c6:	3710      	adds	r7, #16
 801b0c8:	46bd      	mov	sp, r7
 801b0ca:	bd80      	pop	{r7, pc}

0801b0cc <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801b0cc:	b5b0      	push	{r4, r5, r7, lr}
 801b0ce:	b08c      	sub	sp, #48	@ 0x30
 801b0d0:	af00      	add	r7, sp, #0
 801b0d2:	60f8      	str	r0, [r7, #12]
 801b0d4:	60b9      	str	r1, [r7, #8]
 801b0d6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801b0d8:	4a39      	ldr	r2, [pc, #228]	@ (801b1c0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 801b0da:	2101      	movs	r1, #1
 801b0dc:	68f8      	ldr	r0, [r7, #12]
 801b0de:	f7f2 fd74 	bl	800dbca <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>
 801b0e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 801b0e4:	68fb      	ldr	r3, [r7, #12]
 801b0e6:	681b      	ldr	r3, [r3, #0]
 801b0e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801b0ea:	68fb      	ldr	r3, [r7, #12]
 801b0ec:	685b      	ldr	r3, [r3, #4]
 801b0ee:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 801b0f0:	68f8      	ldr	r0, [r7, #12]
 801b0f2:	f7f1 fa24 	bl	800c53e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 801b0f6:	4603      	mov	r3, r0
 801b0f8:	617b      	str	r3, [r7, #20]
 801b0fa:	f107 0214 	add.w	r2, r7, #20
 801b0fe:	f107 0308 	add.w	r3, r7, #8
 801b102:	4611      	mov	r1, r2
 801b104:	4618      	mov	r0, r3
 801b106:	f7f2 fda7 	bl	800dc58 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801b10a:	4603      	mov	r3, r0
 801b10c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b112:	4618      	mov	r0, r3
 801b114:	f7f2 fdb5 	bl	800dc82 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>
 801b118:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801b11a:	69fb      	ldr	r3, [r7, #28]
 801b11c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 801b11e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 801b120:	6a3b      	ldr	r3, [r7, #32]
 801b122:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 801b124:	69fa      	ldr	r2, [r7, #28]
 801b126:	18d5      	adds	r5, r2, r3
 801b128:	6878      	ldr	r0, [r7, #4]
 801b12a:	f000 f93e 	bl	801b3aa <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 801b12e:	4603      	mov	r3, r0
 801b130:	461a      	mov	r2, r3
 801b132:	4629      	mov	r1, r5
 801b134:	4620      	mov	r0, r4
 801b136:	f7ff ffb6 	bl	801b0a6 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
 801b13a:	2300      	movs	r3, #0
 801b13c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801b13e:	f107 0308 	add.w	r3, r7, #8
 801b142:	4618      	mov	r0, r3
 801b144:	f7f1 ff28 	bl	800cf98 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b148:	4603      	mov	r3, r0
 801b14a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 801b14c:	68fb      	ldr	r3, [r7, #12]
 801b14e:	4618      	mov	r0, r3
 801b150:	f7f1 fc94 	bl	800ca7c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 801b154:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801b156:	69fa      	ldr	r2, [r7, #28]
 801b158:	4621      	mov	r1, r4
 801b15a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801b15c:	f7f2 fda5 	bl	800dcaa <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 801b160:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801b162:	69bb      	ldr	r3, [r7, #24]
 801b164:	3308      	adds	r3, #8
 801b166:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801b168:	f107 0308 	add.w	r3, r7, #8
 801b16c:	4618      	mov	r0, r3
 801b16e:	f7f1 ff13 	bl	800cf98 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b172:	4603      	mov	r3, r0
 801b174:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	4618      	mov	r0, r3
 801b17a:	f7f1 fc7f 	bl	800ca7c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 801b17e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801b180:	69ba      	ldr	r2, [r7, #24]
 801b182:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b184:	4620      	mov	r0, r4
 801b186:	f7f2 fd90 	bl	800dcaa <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 801b18a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 801b18c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801b18e:	68fb      	ldr	r3, [r7, #12]
 801b190:	689a      	ldr	r2, [r3, #8]
 801b192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b194:	1ad3      	subs	r3, r2, r3
 801b196:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 801b198:	461a      	mov	r2, r3
 801b19a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b19c:	f7f1 fc5b 	bl	800ca56 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 801b1a0:	68fb      	ldr	r3, [r7, #12]
 801b1a2:	69fa      	ldr	r2, [r7, #28]
 801b1a4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801b1a6:	68fb      	ldr	r3, [r7, #12]
 801b1a8:	69ba      	ldr	r2, [r7, #24]
 801b1aa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801b1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b1ae:	00db      	lsls	r3, r3, #3
 801b1b0:	69fa      	ldr	r2, [r7, #28]
 801b1b2:	441a      	add	r2, r3
 801b1b4:	68fb      	ldr	r3, [r7, #12]
 801b1b6:	609a      	str	r2, [r3, #8]
    }
 801b1b8:	bf00      	nop
 801b1ba:	3730      	adds	r7, #48	@ 0x30
 801b1bc:	46bd      	mov	sp, r7
 801b1be:	bdb0      	pop	{r4, r5, r7, pc}
 801b1c0:	0802b0e0 	.word	0x0802b0e0

0801b1c4 <_ZN9__gnu_cxx5__ops11__pred_iterIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EENS0_10_Iter_predIT_EESA_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 801b1c4:	b580      	push	{r7, lr}
 801b1c6:	b084      	sub	sp, #16
 801b1c8:	af00      	add	r7, sp, #0
 801b1ca:	6078      	str	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 801b1cc:	1d3b      	adds	r3, r7, #4
 801b1ce:	4618      	mov	r0, r3
 801b1d0:	f000 f90e 	bl	801b3f0 <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>
 801b1d4:	4602      	mov	r2, r0
 801b1d6:	f107 030c 	add.w	r3, r7, #12
 801b1da:	6811      	ldr	r1, [r2, #0]
 801b1dc:	4618      	mov	r0, r3
 801b1de:	f000 f912 	bl	801b406 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EC1ES8_>
 801b1e2:	68fb      	ldr	r3, [r7, #12]
 801b1e4:	4618      	mov	r0, r3
 801b1e6:	3710      	adds	r7, #16
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	bd80      	pop	{r7, pc}

0801b1ec <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>:
    }

  template<typename _ForwardIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
 801b1ec:	b590      	push	{r4, r7, lr}
 801b1ee:	b087      	sub	sp, #28
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	60f8      	str	r0, [r7, #12]
 801b1f4:	60b9      	str	r1, [r7, #8]
 801b1f6:	607a      	str	r2, [r7, #4]
		_Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
 801b1f8:	687a      	ldr	r2, [r7, #4]
 801b1fa:	68b9      	ldr	r1, [r7, #8]
 801b1fc:	68f8      	ldr	r0, [r7, #12]
 801b1fe:	f000 f914 	bl	801b42a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>
 801b202:	4603      	mov	r3, r0
 801b204:	60fb      	str	r3, [r7, #12]
      if (__first == __last)
 801b206:	f107 0208 	add.w	r2, r7, #8
 801b20a:	f107 030c 	add.w	r3, r7, #12
 801b20e:	4611      	mov	r1, r2
 801b210:	4618      	mov	r0, r3
 801b212:	f000 f920 	bl	801b456 <_ZN9__gnu_cxxeqIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801b216:	4603      	mov	r3, r0
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d001      	beq.n	801b220 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x34>
	return __first;
 801b21c:	68fb      	ldr	r3, [r7, #12]
 801b21e:	e03c      	b.n	801b29a <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0xae>
      _ForwardIterator __result = __first;
 801b220:	68fb      	ldr	r3, [r7, #12]
 801b222:	617b      	str	r3, [r7, #20]
      ++__first;
 801b224:	f107 030c 	add.w	r3, r7, #12
 801b228:	4618      	mov	r0, r3
 801b22a:	f7f1 f9c1 	bl	800c5b0 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __first != __last; ++__first)
 801b22e:	e028      	b.n	801b282 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x96>
	if (!__pred(__first))
 801b230:	1d3b      	adds	r3, r7, #4
 801b232:	68f9      	ldr	r1, [r7, #12]
 801b234:	4618      	mov	r0, r3
 801b236:	f000 f926 	bl	801b486 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b23a:	4603      	mov	r3, r0
 801b23c:	f083 0301 	eor.w	r3, r3, #1
 801b240:	b2db      	uxtb	r3, r3
 801b242:	2b00      	cmp	r3, #0
 801b244:	d018      	beq.n	801b278 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x8c>
	  {
	    *__result = _GLIBCXX_MOVE(*__first);
 801b246:	f107 030c 	add.w	r3, r7, #12
 801b24a:	4618      	mov	r0, r3
 801b24c:	f7f1 f9c1 	bl	800c5d2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801b250:	4603      	mov	r3, r0
 801b252:	4618      	mov	r0, r3
 801b254:	f7f1 fa42 	bl	800c6dc <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 801b258:	4604      	mov	r4, r0
 801b25a:	f107 0314 	add.w	r3, r7, #20
 801b25e:	4618      	mov	r0, r3
 801b260:	f7f1 f9b7 	bl	800c5d2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801b264:	4603      	mov	r3, r0
 801b266:	4621      	mov	r1, r4
 801b268:	4618      	mov	r0, r3
 801b26a:	f000 f920 	bl	801b4ae <_ZNSt10shared_ptrI6ModuleEaSEOS1_>
	    ++__result;
 801b26e:	f107 0314 	add.w	r3, r7, #20
 801b272:	4618      	mov	r0, r3
 801b274:	f7f1 f99c 	bl	800c5b0 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __first != __last; ++__first)
 801b278:	f107 030c 	add.w	r3, r7, #12
 801b27c:	4618      	mov	r0, r3
 801b27e:	f7f1 f997 	bl	800c5b0 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 801b282:	f107 0208 	add.w	r2, r7, #8
 801b286:	f107 030c 	add.w	r3, r7, #12
 801b28a:	4611      	mov	r1, r2
 801b28c:	4618      	mov	r0, r3
 801b28e:	f7f1 f977 	bl	800c580 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801b292:	4603      	mov	r3, r0
 801b294:	2b00      	cmp	r3, #0
 801b296:	d1cb      	bne.n	801b230 <_ZSt11__remove_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_+0x44>
	  }
      return __result;
 801b298:	697b      	ldr	r3, [r7, #20]
    }
 801b29a:	4618      	mov	r0, r3
 801b29c:	371c      	adds	r7, #28
 801b29e:	46bd      	mov	sp, r7
 801b2a0:	bd90      	pop	{r4, r7, pc}

0801b2a2 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE6cbeginEv>:
      cbegin() const noexcept
 801b2a2:	b580      	push	{r7, lr}
 801b2a4:	b084      	sub	sp, #16
 801b2a6:	af00      	add	r7, sp, #0
 801b2a8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 801b2aa:	687a      	ldr	r2, [r7, #4]
 801b2ac:	f107 030c 	add.w	r3, r7, #12
 801b2b0:	4611      	mov	r1, r2
 801b2b2:	4618      	mov	r0, r3
 801b2b4:	f000 f90e 	bl	801b4d4 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS5_>
 801b2b8:	68fb      	ldr	r3, [r7, #12]
 801b2ba:	4618      	mov	r0, r3
 801b2bc:	3710      	adds	r7, #16
 801b2be:	46bd      	mov	sp, r7
 801b2c0:	bd80      	pop	{r7, pc}

0801b2c2 <_ZN9__gnu_cxxmiIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801b2c2:	b590      	push	{r4, r7, lr}
 801b2c4:	b083      	sub	sp, #12
 801b2c6:	af00      	add	r7, sp, #0
 801b2c8:	6078      	str	r0, [r7, #4]
 801b2ca:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801b2cc:	6878      	ldr	r0, [r7, #4]
 801b2ce:	f000 f911 	bl	801b4f4 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b2d2:	4603      	mov	r3, r0
 801b2d4:	681c      	ldr	r4, [r3, #0]
 801b2d6:	6838      	ldr	r0, [r7, #0]
 801b2d8:	f000 f90c 	bl	801b4f4 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b2dc:	4603      	mov	r3, r0
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	1ae3      	subs	r3, r4, r3
 801b2e2:	10db      	asrs	r3, r3, #3
 801b2e4:	4618      	mov	r0, r3
 801b2e6:	370c      	adds	r7, #12
 801b2e8:	46bd      	mov	sp, r7
 801b2ea:	bd90      	pop	{r4, r7, pc}

0801b2ec <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 801b2ec:	b580      	push	{r7, lr}
 801b2ee:	b084      	sub	sp, #16
 801b2f0:	af00      	add	r7, sp, #0
 801b2f2:	6078      	str	r0, [r7, #4]
 801b2f4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	681a      	ldr	r2, [r3, #0]
 801b2fa:	683b      	ldr	r3, [r7, #0]
 801b2fc:	00db      	lsls	r3, r3, #3
 801b2fe:	4413      	add	r3, r2
 801b300:	60fb      	str	r3, [r7, #12]
 801b302:	f107 020c 	add.w	r2, r7, #12
 801b306:	f107 0308 	add.w	r3, r7, #8
 801b30a:	4611      	mov	r1, r2
 801b30c:	4618      	mov	r0, r3
 801b30e:	f7f1 fe33 	bl	800cf78 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 801b312:	68bb      	ldr	r3, [r7, #8]
 801b314:	4618      	mov	r0, r3
 801b316:	3710      	adds	r7, #16
 801b318:	46bd      	mov	sp, r7
 801b31a:	bd80      	pop	{r7, pc}

0801b31c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_>:
    vector<_Tp, _Alloc>::
 801b31c:	b590      	push	{r4, r7, lr}
 801b31e:	b087      	sub	sp, #28
 801b320:	af00      	add	r7, sp, #0
 801b322:	60f8      	str	r0, [r7, #12]
 801b324:	60b9      	str	r1, [r7, #8]
 801b326:	607a      	str	r2, [r7, #4]
      if (__first != __last)
 801b328:	1d3a      	adds	r2, r7, #4
 801b32a:	f107 0308 	add.w	r3, r7, #8
 801b32e:	4611      	mov	r1, r2
 801b330:	4618      	mov	r0, r3
 801b332:	f7f1 f925 	bl	800c580 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801b336:	4603      	mov	r3, r0
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d031      	beq.n	801b3a0 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_+0x84>
	  if (__last != end())
 801b33c:	68f8      	ldr	r0, [r7, #12]
 801b33e:	f7f1 f90e 	bl	800c55e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801b342:	4603      	mov	r3, r0
 801b344:	613b      	str	r3, [r7, #16]
 801b346:	f107 0210 	add.w	r2, r7, #16
 801b34a:	1d3b      	adds	r3, r7, #4
 801b34c:	4611      	mov	r1, r2
 801b34e:	4618      	mov	r0, r3
 801b350:	f7f1 f916 	bl	800c580 <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 801b354:	4603      	mov	r3, r0
 801b356:	2b00      	cmp	r3, #0
 801b358:	d008      	beq.n	801b36c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS2_S4_EES8_+0x50>
	    _GLIBCXX_MOVE3(__last, end(), __first);
 801b35a:	68f8      	ldr	r0, [r7, #12]
 801b35c:	f7f1 f8ff 	bl	800c55e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801b360:	4603      	mov	r3, r0
 801b362:	68ba      	ldr	r2, [r7, #8]
 801b364:	4619      	mov	r1, r3
 801b366:	6878      	ldr	r0, [r7, #4]
 801b368:	f000 f8cf 	bl	801b50a <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET0_T_SB_SA_>
	  _M_erase_at_end(__first.base() + (end() - __last));
 801b36c:	f107 0308 	add.w	r3, r7, #8
 801b370:	4618      	mov	r0, r3
 801b372:	f7f1 fe11 	bl	800cf98 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b376:	4603      	mov	r3, r0
 801b378:	681c      	ldr	r4, [r3, #0]
 801b37a:	68f8      	ldr	r0, [r7, #12]
 801b37c:	f7f1 f8ef 	bl	800c55e <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 801b380:	4603      	mov	r3, r0
 801b382:	617b      	str	r3, [r7, #20]
 801b384:	1d3a      	adds	r2, r7, #4
 801b386:	f107 0314 	add.w	r3, r7, #20
 801b38a:	4611      	mov	r1, r2
 801b38c:	4618      	mov	r0, r3
 801b38e:	f7f2 fc63 	bl	800dc58 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801b392:	4603      	mov	r3, r0
 801b394:	00db      	lsls	r3, r3, #3
 801b396:	4423      	add	r3, r4
 801b398:	4619      	mov	r1, r3
 801b39a:	68f8      	ldr	r0, [r7, #12]
 801b39c:	f000 f8cd 	bl	801b53a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_>
      return __first;
 801b3a0:	68bb      	ldr	r3, [r7, #8]
    }
 801b3a2:	4618      	mov	r0, r3
 801b3a4:	371c      	adds	r7, #28
 801b3a6:	46bd      	mov	sp, r7
 801b3a8:	bd90      	pop	{r4, r7, pc}

0801b3aa <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801b3aa:	b480      	push	{r7}
 801b3ac:	b083      	sub	sp, #12
 801b3ae:	af00      	add	r7, sp, #0
 801b3b0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	4618      	mov	r0, r3
 801b3b6:	370c      	adds	r7, #12
 801b3b8:	46bd      	mov	sp, r7
 801b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3be:	4770      	bx	lr

0801b3c0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801b3c0:	b590      	push	{r4, r7, lr}
 801b3c2:	b085      	sub	sp, #20
 801b3c4:	af00      	add	r7, sp, #0
 801b3c6:	60f8      	str	r0, [r7, #12]
 801b3c8:	60b9      	str	r1, [r7, #8]
 801b3ca:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801b3cc:	68bb      	ldr	r3, [r7, #8]
 801b3ce:	4619      	mov	r1, r3
 801b3d0:	2008      	movs	r0, #8
 801b3d2:	f7ef fb31 	bl	800aa38 <_ZnwjPv>
 801b3d6:	4604      	mov	r4, r0
 801b3d8:	6878      	ldr	r0, [r7, #4]
 801b3da:	f7ff ffe6 	bl	801b3aa <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 801b3de:	4603      	mov	r3, r0
 801b3e0:	4619      	mov	r1, r3
 801b3e2:	4620      	mov	r0, r4
 801b3e4:	f7f0 fa52 	bl	800b88c <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 801b3e8:	bf00      	nop
 801b3ea:	3714      	adds	r7, #20
 801b3ec:	46bd      	mov	sp, r7
 801b3ee:	bd90      	pop	{r4, r7, pc}

0801b3f0 <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 801b3f0:	b480      	push	{r7}
 801b3f2:	b083      	sub	sp, #12
 801b3f4:	af00      	add	r7, sp, #0
 801b3f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	4618      	mov	r0, r3
 801b3fc:	370c      	adds	r7, #12
 801b3fe:	46bd      	mov	sp, r7
 801b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b404:	4770      	bx	lr

0801b406 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EC1ES8_>:
      _Iter_pred(_Predicate __pred)
 801b406:	b580      	push	{r7, lr}
 801b408:	b082      	sub	sp, #8
 801b40a:	af00      	add	r7, sp, #0
 801b40c:	6078      	str	r0, [r7, #4]
 801b40e:	6039      	str	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 801b410:	463b      	mov	r3, r7
 801b412:	4618      	mov	r0, r3
 801b414:	f7ff ffec 	bl	801b3f0 <_ZSt4moveIRZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS3_E_EONSt16remove_referenceIT_E4typeEOS9_>
 801b418:	4602      	mov	r2, r0
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	6812      	ldr	r2, [r2, #0]
 801b41e:	601a      	str	r2, [r3, #0]
      { }
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	4618      	mov	r0, r3
 801b424:	3708      	adds	r7, #8
 801b426:	46bd      	mov	sp, r7
 801b428:	bd80      	pop	{r7, pc}

0801b42a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_>:
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 801b42a:	b590      	push	{r4, r7, lr}
 801b42c:	b085      	sub	sp, #20
 801b42e:	af00      	add	r7, sp, #0
 801b430:	60f8      	str	r0, [r7, #12]
 801b432:	60b9      	str	r1, [r7, #8]
 801b434:	607a      	str	r2, [r7, #4]
		       std::__iterator_category(__first));
 801b436:	f107 030c 	add.w	r3, r7, #12
 801b43a:	4618      	mov	r0, r3
 801b43c:	f000 f89e 	bl	801b57c <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSB_>
      return __find_if(__first, __last, __pred,
 801b440:	4623      	mov	r3, r4
 801b442:	687a      	ldr	r2, [r7, #4]
 801b444:	68b9      	ldr	r1, [r7, #8]
 801b446:	68f8      	ldr	r0, [r7, #12]
 801b448:	f000 f8a2 	bl	801b590 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag>
 801b44c:	4603      	mov	r3, r0
    }
 801b44e:	4618      	mov	r0, r3
 801b450:	3714      	adds	r7, #20
 801b452:	46bd      	mov	sp, r7
 801b454:	bd90      	pop	{r4, r7, pc}

0801b456 <_ZN9__gnu_cxxeqIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 801b456:	b590      	push	{r4, r7, lr}
 801b458:	b083      	sub	sp, #12
 801b45a:	af00      	add	r7, sp, #0
 801b45c:	6078      	str	r0, [r7, #4]
 801b45e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 801b460:	6878      	ldr	r0, [r7, #4]
 801b462:	f7f1 fd99 	bl	800cf98 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b466:	4603      	mov	r3, r0
 801b468:	681c      	ldr	r4, [r3, #0]
 801b46a:	6838      	ldr	r0, [r7, #0]
 801b46c:	f7f1 fd94 	bl	800cf98 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b470:	4603      	mov	r3, r0
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	429c      	cmp	r4, r3
 801b476:	bf0c      	ite	eq
 801b478:	2301      	moveq	r3, #1
 801b47a:	2300      	movne	r3, #0
 801b47c:	b2db      	uxtb	r3, r3
 801b47e:	4618      	mov	r0, r3
 801b480:	370c      	adds	r7, #12
 801b482:	46bd      	mov	sp, r7
 801b484:	bd90      	pop	{r4, r7, pc}

0801b486 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>:
	operator()(_Iterator __it)
 801b486:	b590      	push	{r4, r7, lr}
 801b488:	b083      	sub	sp, #12
 801b48a:	af00      	add	r7, sp, #0
 801b48c:	6078      	str	r0, [r7, #4]
 801b48e:	6039      	str	r1, [r7, #0]
	{ return bool(_M_pred(*__it)); }
 801b490:	687c      	ldr	r4, [r7, #4]
 801b492:	463b      	mov	r3, r7
 801b494:	4618      	mov	r0, r3
 801b496:	f7f1 f89c 	bl	800c5d2 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 801b49a:	4603      	mov	r3, r0
 801b49c:	4619      	mov	r1, r3
 801b49e:	4620      	mov	r0, r4
 801b4a0:	f7ff fc96 	bl	801add0 <_ZZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEENKUlRKS2_E_clES4_>
 801b4a4:	4603      	mov	r3, r0
 801b4a6:	4618      	mov	r0, r3
 801b4a8:	370c      	adds	r7, #12
 801b4aa:	46bd      	mov	sp, r7
 801b4ac:	bd90      	pop	{r4, r7, pc}

0801b4ae <_ZNSt10shared_ptrI6ModuleEaSEOS1_>:
      operator=(shared_ptr&& __r) noexcept
 801b4ae:	b590      	push	{r4, r7, lr}
 801b4b0:	b083      	sub	sp, #12
 801b4b2:	af00      	add	r7, sp, #0
 801b4b4:	6078      	str	r0, [r7, #4]
 801b4b6:	6039      	str	r1, [r7, #0]
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
 801b4b8:	687c      	ldr	r4, [r7, #4]
 801b4ba:	6838      	ldr	r0, [r7, #0]
 801b4bc:	f7f1 f90e 	bl	800c6dc <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 801b4c0:	4603      	mov	r3, r0
 801b4c2:	4619      	mov	r1, r3
 801b4c4:	4620      	mov	r0, r4
 801b4c6:	f000 f8fc 	bl	801b6c2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>
	return *this;
 801b4ca:	687b      	ldr	r3, [r7, #4]
      }
 801b4cc:	4618      	mov	r0, r3
 801b4ce:	370c      	adds	r7, #12
 801b4d0:	46bd      	mov	sp, r7
 801b4d2:	bd90      	pop	{r4, r7, pc}

0801b4d4 <_ZN9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS5_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801b4d4:	b480      	push	{r7}
 801b4d6:	b083      	sub	sp, #12
 801b4d8:	af00      	add	r7, sp, #0
 801b4da:	6078      	str	r0, [r7, #4]
 801b4dc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801b4de:	683b      	ldr	r3, [r7, #0]
 801b4e0:	681a      	ldr	r2, [r3, #0]
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	601a      	str	r2, [r3, #0]
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	4618      	mov	r0, r3
 801b4ea:	370c      	adds	r7, #12
 801b4ec:	46bd      	mov	sp, r7
 801b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4f2:	4770      	bx	lr

0801b4f4 <_ZNK9__gnu_cxx17__normal_iteratorIPKSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 801b4f4:	b480      	push	{r7}
 801b4f6:	b083      	sub	sp, #12
 801b4f8:	af00      	add	r7, sp, #0
 801b4fa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	4618      	mov	r0, r3
 801b500:	370c      	adds	r7, #12
 801b502:	46bd      	mov	sp, r7
 801b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b508:	4770      	bx	lr

0801b50a <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET0_T_SB_SA_>:
    move(_II __first, _II __last, _OI __result)
 801b50a:	b590      	push	{r4, r7, lr}
 801b50c:	b085      	sub	sp, #20
 801b50e:	af00      	add	r7, sp, #0
 801b510:	60f8      	str	r0, [r7, #12]
 801b512:	60b9      	str	r1, [r7, #8]
 801b514:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 801b516:	68f8      	ldr	r0, [r7, #12]
 801b518:	f000 f8f2 	bl	801b700 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>
 801b51c:	4604      	mov	r4, r0
 801b51e:	68b8      	ldr	r0, [r7, #8]
 801b520:	f000 f8ee 	bl	801b700 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>
 801b524:	4603      	mov	r3, r0
 801b526:	687a      	ldr	r2, [r7, #4]
 801b528:	4619      	mov	r1, r3
 801b52a:	4620      	mov	r0, r4
 801b52c:	f000 f8f3 	bl	801b716 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET1_T0_SB_SA_>
 801b530:	4603      	mov	r3, r0
    }
 801b532:	4618      	mov	r0, r3
 801b534:	3714      	adds	r7, #20
 801b536:	46bd      	mov	sp, r7
 801b538:	bd90      	pop	{r4, r7, pc}

0801b53a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_>:

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 801b53a:	b590      	push	{r4, r7, lr}
 801b53c:	b085      	sub	sp, #20
 801b53e:	af00      	add	r7, sp, #0
 801b540:	6078      	str	r0, [r7, #4]
 801b542:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	685a      	ldr	r2, [r3, #4]
 801b548:	683b      	ldr	r3, [r7, #0]
 801b54a:	1ad3      	subs	r3, r2, r3
 801b54c:	10db      	asrs	r3, r3, #3
 801b54e:	60fb      	str	r3, [r7, #12]
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	2b00      	cmp	r3, #0
 801b554:	d00e      	beq.n	801b574 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE15_M_erase_at_endEPS2_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	4618      	mov	r0, r3
 801b55e:	f7f1 fa8d 	bl	800ca7c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 801b562:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 801b564:	461a      	mov	r2, r3
 801b566:	4621      	mov	r1, r4
 801b568:	6838      	ldr	r0, [r7, #0]
 801b56a:	f7f1 fa92 	bl	800ca92 <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	683a      	ldr	r2, [r7, #0]
 801b572:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 801b574:	bf00      	nop
 801b576:	3714      	adds	r7, #20
 801b578:	46bd      	mov	sp, r7
 801b57a:	bd90      	pop	{r4, r7, pc}

0801b57c <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEENSt15iterator_traitsIT_E17iterator_categoryERKSB_>:
    __iterator_category(const _Iter&)
 801b57c:	b480      	push	{r7}
 801b57e:	b083      	sub	sp, #12
 801b580:	af00      	add	r7, sp, #0
 801b582:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 801b584:	4618      	mov	r0, r3
 801b586:	370c      	adds	r7, #12
 801b588:	46bd      	mov	sp, r7
 801b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b58e:	4770      	bx	lr

0801b590 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag>:
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 801b590:	b580      	push	{r7, lr}
 801b592:	b086      	sub	sp, #24
 801b594:	af00      	add	r7, sp, #0
 801b596:	60f8      	str	r0, [r7, #12]
 801b598:	60b9      	str	r1, [r7, #8]
 801b59a:	607a      	str	r2, [r7, #4]
 801b59c:	703b      	strb	r3, [r7, #0]
	__trip_count = (__last - __first) >> 2;
 801b59e:	f107 020c 	add.w	r2, r7, #12
 801b5a2:	f107 0308 	add.w	r3, r7, #8
 801b5a6:	4611      	mov	r1, r2
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	f7f2 fb55 	bl	800dc58 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801b5ae:	4603      	mov	r3, r0
 801b5b0:	109b      	asrs	r3, r3, #2
 801b5b2:	617b      	str	r3, [r7, #20]
      for (; __trip_count > 0; --__trip_count)
 801b5b4:	e03e      	b.n	801b634 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xa4>
	  if (__pred(__first))
 801b5b6:	1d3b      	adds	r3, r7, #4
 801b5b8:	68f9      	ldr	r1, [r7, #12]
 801b5ba:	4618      	mov	r0, r3
 801b5bc:	f7ff ff63 	bl	801b486 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b5c0:	4603      	mov	r3, r0
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	d001      	beq.n	801b5ca <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x3a>
	    return __first;
 801b5c6:	68fb      	ldr	r3, [r7, #12]
 801b5c8:	e077      	b.n	801b6ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b5ca:	f107 030c 	add.w	r3, r7, #12
 801b5ce:	4618      	mov	r0, r3
 801b5d0:	f7f0 ffee 	bl	800c5b0 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b5d4:	1d3b      	adds	r3, r7, #4
 801b5d6:	68f9      	ldr	r1, [r7, #12]
 801b5d8:	4618      	mov	r0, r3
 801b5da:	f7ff ff54 	bl	801b486 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b5de:	4603      	mov	r3, r0
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	d001      	beq.n	801b5e8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x58>
	    return __first;
 801b5e4:	68fb      	ldr	r3, [r7, #12]
 801b5e6:	e068      	b.n	801b6ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b5e8:	f107 030c 	add.w	r3, r7, #12
 801b5ec:	4618      	mov	r0, r3
 801b5ee:	f7f0 ffdf 	bl	800c5b0 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b5f2:	1d3b      	adds	r3, r7, #4
 801b5f4:	68f9      	ldr	r1, [r7, #12]
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	f7ff ff45 	bl	801b486 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b5fc:	4603      	mov	r3, r0
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d001      	beq.n	801b606 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x76>
	    return __first;
 801b602:	68fb      	ldr	r3, [r7, #12]
 801b604:	e059      	b.n	801b6ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b606:	f107 030c 	add.w	r3, r7, #12
 801b60a:	4618      	mov	r0, r3
 801b60c:	f7f0 ffd0 	bl	800c5b0 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b610:	1d3b      	adds	r3, r7, #4
 801b612:	68f9      	ldr	r1, [r7, #12]
 801b614:	4618      	mov	r0, r3
 801b616:	f7ff ff36 	bl	801b486 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b61a:	4603      	mov	r3, r0
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d001      	beq.n	801b624 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x94>
	    return __first;
 801b620:	68fb      	ldr	r3, [r7, #12]
 801b622:	e04a      	b.n	801b6ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b624:	f107 030c 	add.w	r3, r7, #12
 801b628:	4618      	mov	r0, r3
 801b62a:	f7f0 ffc1 	bl	800c5b0 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
      for (; __trip_count > 0; --__trip_count)
 801b62e:	697b      	ldr	r3, [r7, #20]
 801b630:	3b01      	subs	r3, #1
 801b632:	617b      	str	r3, [r7, #20]
 801b634:	697b      	ldr	r3, [r7, #20]
 801b636:	2b00      	cmp	r3, #0
 801b638:	dcbd      	bgt.n	801b5b6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x26>
      switch (__last - __first)
 801b63a:	f107 020c 	add.w	r2, r7, #12
 801b63e:	f107 0308 	add.w	r3, r7, #8
 801b642:	4611      	mov	r1, r2
 801b644:	4618      	mov	r0, r3
 801b646:	f7f2 fb07 	bl	800dc58 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801b64a:	4603      	mov	r3, r0
 801b64c:	2b03      	cmp	r3, #3
 801b64e:	d006      	beq.n	801b65e <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xce>
 801b650:	2b03      	cmp	r3, #3
 801b652:	dc31      	bgt.n	801b6b8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x128>
 801b654:	2b01      	cmp	r3, #1
 801b656:	d020      	beq.n	801b69a <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x10a>
 801b658:	2b02      	cmp	r3, #2
 801b65a:	d00f      	beq.n	801b67c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xec>
 801b65c:	e02c      	b.n	801b6b8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x128>
	  if (__pred(__first))
 801b65e:	1d3b      	adds	r3, r7, #4
 801b660:	68f9      	ldr	r1, [r7, #12]
 801b662:	4618      	mov	r0, r3
 801b664:	f7ff ff0f 	bl	801b486 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b668:	4603      	mov	r3, r0
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d001      	beq.n	801b672 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0xe2>
	    return __first;
 801b66e:	68fb      	ldr	r3, [r7, #12]
 801b670:	e023      	b.n	801b6ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b672:	f107 030c 	add.w	r3, r7, #12
 801b676:	4618      	mov	r0, r3
 801b678:	f7f0 ff9a 	bl	800c5b0 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b67c:	1d3b      	adds	r3, r7, #4
 801b67e:	68f9      	ldr	r1, [r7, #12]
 801b680:	4618      	mov	r0, r3
 801b682:	f7ff ff00 	bl	801b486 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b686:	4603      	mov	r3, r0
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d001      	beq.n	801b690 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x100>
	    return __first;
 801b68c:	68fb      	ldr	r3, [r7, #12]
 801b68e:	e014      	b.n	801b6ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b690:	f107 030c 	add.w	r3, r7, #12
 801b694:	4618      	mov	r0, r3
 801b696:	f7f0 ff8b 	bl	800c5b0 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  if (__pred(__first))
 801b69a:	1d3b      	adds	r3, r7, #4
 801b69c:	68f9      	ldr	r1, [r7, #12]
 801b69e:	4618      	mov	r0, r3
 801b6a0:	f7ff fef1 	bl	801b486 <_ZN9__gnu_cxx5__ops10_Iter_predIZN9pruThread16unregisterModuleESt10shared_ptrI6ModuleEEUlRKS5_E_EclINS_17__normal_iteratorIPS5_St6vectorIS5_SaIS5_EEEEEEbT_>
 801b6a4:	4603      	mov	r3, r0
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d001      	beq.n	801b6ae <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x11e>
	    return __first;
 801b6aa:	68fb      	ldr	r3, [r7, #12]
 801b6ac:	e005      	b.n	801b6ba <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEENS0_5__ops10_Iter_predIZN9pruThread16unregisterModuleES4_EUlRKS4_E_EEET_SH_SH_T0_St26random_access_iterator_tag+0x12a>
	  ++__first;
 801b6ae:	f107 030c 	add.w	r3, r7, #12
 801b6b2:	4618      	mov	r0, r3
 801b6b4:	f7f0 ff7c 	bl	800c5b0 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
	  return __last;
 801b6b8:	68bb      	ldr	r3, [r7, #8]
    }
 801b6ba:	4618      	mov	r0, r3
 801b6bc:	3718      	adds	r7, #24
 801b6be:	46bd      	mov	sp, r7
 801b6c0:	bd80      	pop	{r7, pc}

0801b6c2 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEaSEOS3_>:
      operator=(__shared_ptr&& __r) noexcept
 801b6c2:	b580      	push	{r7, lr}
 801b6c4:	b084      	sub	sp, #16
 801b6c6:	af00      	add	r7, sp, #0
 801b6c8:	6078      	str	r0, [r7, #4]
 801b6ca:	6039      	str	r1, [r7, #0]
	__shared_ptr(std::move(__r)).swap(*this);
 801b6cc:	6838      	ldr	r0, [r7, #0]
 801b6ce:	f000 f843 	bl	801b758 <_ZSt4moveIRSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>
 801b6d2:	4602      	mov	r2, r0
 801b6d4:	f107 0308 	add.w	r3, r7, #8
 801b6d8:	4611      	mov	r1, r2
 801b6da:	4618      	mov	r0, r3
 801b6dc:	f7f2 ff73 	bl	800e5c6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 801b6e0:	f107 0308 	add.w	r3, r7, #8
 801b6e4:	6879      	ldr	r1, [r7, #4]
 801b6e6:	4618      	mov	r0, r3
 801b6e8:	f000 f841 	bl	801b76e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>
 801b6ec:	f107 0308 	add.w	r3, r7, #8
 801b6f0:	4618      	mov	r0, r3
 801b6f2:	f7ef fda0 	bl	800b236 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
	return *this;
 801b6f6:	687b      	ldr	r3, [r7, #4]
      }
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	3710      	adds	r7, #16
 801b6fc:	46bd      	mov	sp, r7
 801b6fe:	bd80      	pop	{r7, pc}

0801b700 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEEET_SA_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 801b700:	b480      	push	{r7}
 801b702:	b083      	sub	sp, #12
 801b704:	af00      	add	r7, sp, #0
 801b706:	6078      	str	r0, [r7, #4]
    { return __it; }
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	4618      	mov	r0, r3
 801b70c:	370c      	adds	r7, #12
 801b70e:	46bd      	mov	sp, r7
 801b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b714:	4770      	bx	lr

0801b716 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES9_ET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801b716:	b5b0      	push	{r4, r5, r7, lr}
 801b718:	b084      	sub	sp, #16
 801b71a:	af00      	add	r7, sp, #0
 801b71c:	60f8      	str	r0, [r7, #12]
 801b71e:	60b9      	str	r1, [r7, #8]
 801b720:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801b722:	68f8      	ldr	r0, [r7, #12]
 801b724:	f000 f83a 	bl	801b79c <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801b728:	4604      	mov	r4, r0
 801b72a:	68b8      	ldr	r0, [r7, #8]
 801b72c:	f000 f836 	bl	801b79c <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801b730:	4605      	mov	r5, r0
 801b732:	6878      	ldr	r0, [r7, #4]
 801b734:	f000 f832 	bl	801b79c <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801b738:	4603      	mov	r3, r0
 801b73a:	461a      	mov	r2, r3
 801b73c:	4629      	mov	r1, r5
 801b73e:	4620      	mov	r0, r4
 801b740:	f000 f83a 	bl	801b7b8 <_ZSt14__copy_move_a1ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>
 801b744:	4603      	mov	r3, r0
 801b746:	4619      	mov	r1, r3
 801b748:	6878      	ldr	r0, [r7, #4]
 801b74a:	f000 f845 	bl	801b7d8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES5_ET_SA_T0_>
 801b74e:	4603      	mov	r3, r0
    }
 801b750:	4618      	mov	r0, r3
 801b752:	3710      	adds	r7, #16
 801b754:	46bd      	mov	sp, r7
 801b756:	bdb0      	pop	{r4, r5, r7, pc}

0801b758 <_ZSt4moveIRSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 801b758:	b480      	push	{r7}
 801b75a:	b083      	sub	sp, #12
 801b75c:	af00      	add	r7, sp, #0
 801b75e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	4618      	mov	r0, r3
 801b764:	370c      	adds	r7, #12
 801b766:	46bd      	mov	sp, r7
 801b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b76c:	4770      	bx	lr

0801b76e <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE4swapERS3_>:
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
 801b76e:	b580      	push	{r7, lr}
 801b770:	b082      	sub	sp, #8
 801b772:	af00      	add	r7, sp, #0
 801b774:	6078      	str	r0, [r7, #4]
 801b776:	6039      	str	r1, [r7, #0]
	std::swap(_M_ptr, __other._M_ptr);
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	683a      	ldr	r2, [r7, #0]
 801b77c:	4611      	mov	r1, r2
 801b77e:	4618      	mov	r0, r3
 801b780:	f000 f841 	bl	801b806 <_ZSt4swapIP6ModuleENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>
	_M_refcount._M_swap(__other._M_refcount);
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	1d1a      	adds	r2, r3, #4
 801b788:	683b      	ldr	r3, [r7, #0]
 801b78a:	3304      	adds	r3, #4
 801b78c:	4619      	mov	r1, r3
 801b78e:	4610      	mov	r0, r2
 801b790:	f7f2 f949 	bl	800da26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
      }
 801b794:	bf00      	nop
 801b796:	3708      	adds	r7, #8
 801b798:	46bd      	mov	sp, r7
 801b79a:	bd80      	pop	{r7, pc}

0801b79c <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 801b79c:	b580      	push	{r7, lr}
 801b79e:	b082      	sub	sp, #8
 801b7a0:	af00      	add	r7, sp, #0
 801b7a2:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 801b7a4:	1d3b      	adds	r3, r7, #4
 801b7a6:	4618      	mov	r0, r3
 801b7a8:	f7f1 fbf6 	bl	800cf98 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 801b7ac:	4603      	mov	r3, r0
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	4618      	mov	r0, r3
 801b7b2:	3708      	adds	r7, #8
 801b7b4:	46bd      	mov	sp, r7
 801b7b6:	bd80      	pop	{r7, pc}

0801b7b8 <_ZSt14__copy_move_a1ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 801b7b8:	b580      	push	{r7, lr}
 801b7ba:	b084      	sub	sp, #16
 801b7bc:	af00      	add	r7, sp, #0
 801b7be:	60f8      	str	r0, [r7, #12]
 801b7c0:	60b9      	str	r1, [r7, #8]
 801b7c2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 801b7c4:	687a      	ldr	r2, [r7, #4]
 801b7c6:	68b9      	ldr	r1, [r7, #8]
 801b7c8:	68f8      	ldr	r0, [r7, #12]
 801b7ca:	f000 f83b 	bl	801b844 <_ZSt14__copy_move_a2ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>
 801b7ce:	4603      	mov	r3, r0
 801b7d0:	4618      	mov	r0, r3
 801b7d2:	3710      	adds	r7, #16
 801b7d4:	46bd      	mov	sp, r7
 801b7d6:	bd80      	pop	{r7, pc}

0801b7d8 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS4_SaIS4_EEEES5_ET_SA_T0_>:
    __niter_wrap(_From __from, _To __res)
 801b7d8:	b580      	push	{r7, lr}
 801b7da:	b082      	sub	sp, #8
 801b7dc:	af00      	add	r7, sp, #0
 801b7de:	6078      	str	r0, [r7, #4]
 801b7e0:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 801b7e2:	6878      	ldr	r0, [r7, #4]
 801b7e4:	f7ff ffda 	bl	801b79c <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleESt6vectorIS2_SaIS2_EEET_N9__gnu_cxx17__normal_iteratorIS7_T0_EE>
 801b7e8:	4602      	mov	r2, r0
 801b7ea:	683b      	ldr	r3, [r7, #0]
 801b7ec:	1a9b      	subs	r3, r3, r2
 801b7ee:	10db      	asrs	r3, r3, #3
 801b7f0:	461a      	mov	r2, r3
 801b7f2:	1d3b      	adds	r3, r7, #4
 801b7f4:	4611      	mov	r1, r2
 801b7f6:	4618      	mov	r0, r3
 801b7f8:	f7ff fd78 	bl	801b2ec <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEplEi>
 801b7fc:	4603      	mov	r3, r0
 801b7fe:	4618      	mov	r0, r3
 801b800:	3708      	adds	r7, #8
 801b802:	46bd      	mov	sp, r7
 801b804:	bd80      	pop	{r7, pc}

0801b806 <_ZSt4swapIP6ModuleENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS6_ESt18is_move_assignableIS6_EEE5valueEvE4typeERS6_SG_>:
    swap(_Tp& __a, _Tp& __b)
 801b806:	b580      	push	{r7, lr}
 801b808:	b084      	sub	sp, #16
 801b80a:	af00      	add	r7, sp, #0
 801b80c:	6078      	str	r0, [r7, #4]
 801b80e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801b810:	6878      	ldr	r0, [r7, #4]
 801b812:	f000 f827 	bl	801b864 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 801b816:	4603      	mov	r3, r0
 801b818:	681b      	ldr	r3, [r3, #0]
 801b81a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 801b81c:	6838      	ldr	r0, [r7, #0]
 801b81e:	f000 f821 	bl	801b864 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 801b822:	4603      	mov	r3, r0
 801b824:	681a      	ldr	r2, [r3, #0]
 801b826:	687b      	ldr	r3, [r7, #4]
 801b828:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 801b82a:	f107 030c 	add.w	r3, r7, #12
 801b82e:	4618      	mov	r0, r3
 801b830:	f000 f818 	bl	801b864 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>
 801b834:	4603      	mov	r3, r0
 801b836:	681a      	ldr	r2, [r3, #0]
 801b838:	683b      	ldr	r3, [r7, #0]
 801b83a:	601a      	str	r2, [r3, #0]
    }
 801b83c:	bf00      	nop
 801b83e:	3710      	adds	r7, #16
 801b840:	46bd      	mov	sp, r7
 801b842:	bd80      	pop	{r7, pc}

0801b844 <_ZSt14__copy_move_a2ILb1EPSt10shared_ptrI6ModuleES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 801b844:	b580      	push	{r7, lr}
 801b846:	b084      	sub	sp, #16
 801b848:	af00      	add	r7, sp, #0
 801b84a:	60f8      	str	r0, [r7, #12]
 801b84c:	60b9      	str	r1, [r7, #8]
 801b84e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 801b850:	687a      	ldr	r2, [r7, #4]
 801b852:	68b9      	ldr	r1, [r7, #8]
 801b854:	68f8      	ldr	r0, [r7, #12]
 801b856:	f000 f810 	bl	801b87a <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_>
 801b85a:	4603      	mov	r3, r0
    }
 801b85c:	4618      	mov	r0, r3
 801b85e:	3710      	adds	r7, #16
 801b860:	46bd      	mov	sp, r7
 801b862:	bd80      	pop	{r7, pc}

0801b864 <_ZSt4moveIRP6ModuleEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 801b864:	b480      	push	{r7}
 801b866:	b083      	sub	sp, #12
 801b868:	af00      	add	r7, sp, #0
 801b86a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	4618      	mov	r0, r3
 801b870:	370c      	adds	r7, #12
 801b872:	46bd      	mov	sp, r7
 801b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b878:	4770      	bx	lr

0801b87a <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 801b87a:	b580      	push	{r7, lr}
 801b87c:	b086      	sub	sp, #24
 801b87e:	af00      	add	r7, sp, #0
 801b880:	60f8      	str	r0, [r7, #12]
 801b882:	60b9      	str	r1, [r7, #8]
 801b884:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801b886:	68ba      	ldr	r2, [r7, #8]
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	1ad3      	subs	r3, r2, r3
 801b88c:	10db      	asrs	r3, r3, #3
 801b88e:	617b      	str	r3, [r7, #20]
 801b890:	e010      	b.n	801b8b4 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_+0x3a>
	      *__result = std::move(*__first);
 801b892:	68f8      	ldr	r0, [r7, #12]
 801b894:	f7f0 ff22 	bl	800c6dc <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 801b898:	4603      	mov	r3, r0
 801b89a:	4619      	mov	r1, r3
 801b89c:	6878      	ldr	r0, [r7, #4]
 801b89e:	f7ff fe06 	bl	801b4ae <_ZNSt10shared_ptrI6ModuleEaSEOS1_>
	      ++__first;
 801b8a2:	68fb      	ldr	r3, [r7, #12]
 801b8a4:	3308      	adds	r3, #8
 801b8a6:	60fb      	str	r3, [r7, #12]
	      ++__result;
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	3308      	adds	r3, #8
 801b8ac:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801b8ae:	697b      	ldr	r3, [r7, #20]
 801b8b0:	3b01      	subs	r3, #1
 801b8b2:	617b      	str	r3, [r7, #20]
 801b8b4:	697b      	ldr	r3, [r7, #20]
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	dceb      	bgt.n	801b892 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIPSt10shared_ptrI6ModuleES6_EET0_T_S8_S7_+0x18>
	  return __result;
 801b8ba:	687b      	ldr	r3, [r7, #4]
	}
 801b8bc:	4618      	mov	r0, r3
 801b8be:	3718      	adds	r7, #24
 801b8c0:	46bd      	mov	sp, r7
 801b8c2:	bd80      	pop	{r7, pc}

0801b8c4 <__NVIC_EnableIRQ>:
{
 801b8c4:	b480      	push	{r7}
 801b8c6:	b083      	sub	sp, #12
 801b8c8:	af00      	add	r7, sp, #0
 801b8ca:	4603      	mov	r3, r0
 801b8cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801b8ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	db0b      	blt.n	801b8ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b8d6:	88fb      	ldrh	r3, [r7, #6]
 801b8d8:	f003 021f 	and.w	r2, r3, #31
 801b8dc:	4907      	ldr	r1, [pc, #28]	@ (801b8fc <__NVIC_EnableIRQ+0x38>)
 801b8de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b8e2:	095b      	lsrs	r3, r3, #5
 801b8e4:	2001      	movs	r0, #1
 801b8e6:	fa00 f202 	lsl.w	r2, r0, r2
 801b8ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801b8ee:	bf00      	nop
 801b8f0:	370c      	adds	r7, #12
 801b8f2:	46bd      	mov	sp, r7
 801b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8f8:	4770      	bx	lr
 801b8fa:	bf00      	nop
 801b8fc:	e000e100 	.word	0xe000e100

0801b900 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* _timer, IRQn_Type _irq, uint32_t _frequency, pruThread* _ownerPtr):
 801b900:	b590      	push	{r4, r7, lr}
 801b902:	b085      	sub	sp, #20
 801b904:	af00      	add	r7, sp, #0
 801b906:	60f8      	str	r0, [r7, #12]
 801b908:	60b9      	str	r1, [r7, #8]
 801b90a:	603b      	str	r3, [r7, #0]
 801b90c:	4613      	mov	r3, r2
 801b90e:	80fb      	strh	r3, [r7, #6]
	timer(_timer),
 801b910:	68fb      	ldr	r3, [r7, #12]
 801b912:	68ba      	ldr	r2, [r7, #8]
 801b914:	605a      	str	r2, [r3, #4]
	irq(_irq),
 801b916:	68fb      	ldr	r3, [r7, #12]
 801b918:	88fa      	ldrh	r2, [r7, #6]
 801b91a:	811a      	strh	r2, [r3, #8]
	frequency(_frequency),
 801b91c:	68fb      	ldr	r3, [r7, #12]
 801b91e:	683a      	ldr	r2, [r7, #0]
 801b920:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(_ownerPtr)
 801b922:	68fb      	ldr	r3, [r7, #12]
 801b924:	6a3a      	ldr	r2, [r7, #32]
 801b926:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 801b928:	2008      	movs	r0, #8
 801b92a:	f00c fee5 	bl	80286f8 <_Znwj>
 801b92e:	4603      	mov	r3, r0
 801b930:	461c      	mov	r4, r3
 801b932:	68fb      	ldr	r3, [r7, #12]
 801b934:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801b938:	68fa      	ldr	r2, [r7, #12]
 801b93a:	4619      	mov	r1, r3
 801b93c:	4620      	mov	r0, r4
 801b93e:	f000 f8af 	bl	801baa0 <_ZN14TimerInterruptC1EiP8pruTimer>
 801b942:	68fb      	ldr	r3, [r7, #12]
 801b944:	601c      	str	r4, [r3, #0]

	startTimer();
 801b946:	68f8      	ldr	r0, [r7, #12]
 801b948:	f000 f812 	bl	801b970 <_ZN8pruTimer10startTimerEv>
}
 801b94c:	68fb      	ldr	r3, [r7, #12]
 801b94e:	4618      	mov	r0, r3
 801b950:	3714      	adds	r7, #20
 801b952:	46bd      	mov	sp, r7
 801b954:	bd90      	pop	{r4, r7, pc}

0801b956 <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 801b956:	b580      	push	{r7, lr}
 801b958:	b082      	sub	sp, #8
 801b95a:	af00      	add	r7, sp, #0
 801b95c:	6078      	str	r0, [r7, #4]
	//Do something here
	timerOwnerPtr->update();
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	691b      	ldr	r3, [r3, #16]
 801b962:	4618      	mov	r0, r3
 801b964:	f7ff fac9 	bl	801aefa <_ZN9pruThread6updateEv>
}
 801b968:	bf00      	nop
 801b96a:	3708      	adds	r7, #8
 801b96c:	46bd      	mov	sp, r7
 801b96e:	bd80      	pop	{r7, pc}

0801b970 <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 801b970:	b580      	push	{r7, lr}
 801b972:	b086      	sub	sp, #24
 801b974:	af00      	add	r7, sp, #0
 801b976:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (timer == TIM2)
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	685b      	ldr	r3, [r3, #4]
 801b97c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b980:	d116      	bne.n	801b9b0 <_ZN8pruTimer10startTimerEv+0x40>
    {
        printf("	power on Timer 2\n\r");
 801b982:	483f      	ldr	r0, [pc, #252]	@ (801ba80 <_ZN8pruTimer10startTimerEv+0x110>)
 801b984:	f00d fd62 	bl	802944c <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 801b988:	4b3e      	ldr	r3, [pc, #248]	@ (801ba84 <_ZN8pruTimer10startTimerEv+0x114>)
 801b98a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b98e:	4a3d      	ldr	r2, [pc, #244]	@ (801ba84 <_ZN8pruTimer10startTimerEv+0x114>)
 801b990:	f043 0301 	orr.w	r3, r3, #1
 801b994:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801b998:	4b3a      	ldr	r3, [pc, #232]	@ (801ba84 <_ZN8pruTimer10startTimerEv+0x114>)
 801b99a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b99e:	f003 0301 	and.w	r3, r3, #1
 801b9a2:	613b      	str	r3, [r7, #16]
 801b9a4:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB1CLK;
 801b9a6:	4b38      	ldr	r3, [pc, #224]	@ (801ba88 <_ZN8pruTimer10startTimerEv+0x118>)
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	085b      	lsrs	r3, r3, #1
 801b9ac:	617b      	str	r3, [r7, #20]
 801b9ae:	e036      	b.n	801ba1e <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM3)
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	685b      	ldr	r3, [r3, #4]
 801b9b4:	4a35      	ldr	r2, [pc, #212]	@ (801ba8c <_ZN8pruTimer10startTimerEv+0x11c>)
 801b9b6:	4293      	cmp	r3, r2
 801b9b8:	d116      	bne.n	801b9e8 <_ZN8pruTimer10startTimerEv+0x78>
    {
        printf("	power on Timer 3\n\r");
 801b9ba:	4835      	ldr	r0, [pc, #212]	@ (801ba90 <_ZN8pruTimer10startTimerEv+0x120>)
 801b9bc:	f00d fd46 	bl	802944c <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 801b9c0:	4b30      	ldr	r3, [pc, #192]	@ (801ba84 <_ZN8pruTimer10startTimerEv+0x114>)
 801b9c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b9c6:	4a2f      	ldr	r2, [pc, #188]	@ (801ba84 <_ZN8pruTimer10startTimerEv+0x114>)
 801b9c8:	f043 0302 	orr.w	r3, r3, #2
 801b9cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801b9d0:	4b2c      	ldr	r3, [pc, #176]	@ (801ba84 <_ZN8pruTimer10startTimerEv+0x114>)
 801b9d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b9d6:	f003 0302 	and.w	r3, r3, #2
 801b9da:	60fb      	str	r3, [r7, #12]
 801b9dc:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 801b9de:	4b2a      	ldr	r3, [pc, #168]	@ (801ba88 <_ZN8pruTimer10startTimerEv+0x118>)
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	085b      	lsrs	r3, r3, #1
 801b9e4:	617b      	str	r3, [r7, #20]
 801b9e6:	e01a      	b.n	801ba1e <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (timer == TIM4)
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	685b      	ldr	r3, [r3, #4]
 801b9ec:	4a29      	ldr	r2, [pc, #164]	@ (801ba94 <_ZN8pruTimer10startTimerEv+0x124>)
 801b9ee:	4293      	cmp	r3, r2
 801b9f0:	d115      	bne.n	801ba1e <_ZN8pruTimer10startTimerEv+0xae>
    {
        printf("	power on Timer 4\n\r");
 801b9f2:	4829      	ldr	r0, [pc, #164]	@ (801ba98 <_ZN8pruTimer10startTimerEv+0x128>)
 801b9f4:	f00d fd2a 	bl	802944c <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 801b9f8:	4b22      	ldr	r3, [pc, #136]	@ (801ba84 <_ZN8pruTimer10startTimerEv+0x114>)
 801b9fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801b9fe:	4a21      	ldr	r2, [pc, #132]	@ (801ba84 <_ZN8pruTimer10startTimerEv+0x114>)
 801ba00:	f043 0304 	orr.w	r3, r3, #4
 801ba04:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801ba08:	4b1e      	ldr	r3, [pc, #120]	@ (801ba84 <_ZN8pruTimer10startTimerEv+0x114>)
 801ba0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801ba0e:	f003 0304 	and.w	r3, r3, #4
 801ba12:	60bb      	str	r3, [r7, #8]
 801ba14:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 801ba16:	4b1c      	ldr	r3, [pc, #112]	@ (801ba88 <_ZN8pruTimer10startTimerEv+0x118>)
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	085b      	lsrs	r3, r3, #1
 801ba1c:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    timer->CR2 &= 0;                                            // UG used as trigg output
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	685b      	ldr	r3, [r3, #4]
 801ba22:	685b      	ldr	r3, [r3, #4]
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	685b      	ldr	r3, [r3, #4]
 801ba28:	2200      	movs	r2, #0
 801ba2a:	605a      	str	r2, [r3, #4]
    timer->PSC = TIM_PSC-1;                                     // prescaler
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	685b      	ldr	r3, [r3, #4]
 801ba30:	2200      	movs	r2, #0
 801ba32:	629a      	str	r2, [r3, #40]	@ 0x28
    timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	68db      	ldr	r3, [r3, #12]
 801ba38:	697a      	ldr	r2, [r7, #20]
 801ba3a:	fbb2 f2f3 	udiv	r2, r2, r3
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	685b      	ldr	r3, [r3, #4]
 801ba42:	3a01      	subs	r2, #1
 801ba44:	62da      	str	r2, [r3, #44]	@ 0x2c
    timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	685b      	ldr	r3, [r3, #4]
 801ba4a:	2201      	movs	r2, #1
 801ba4c:	615a      	str	r2, [r3, #20]
    timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	685b      	ldr	r3, [r3, #4]
 801ba52:	2201      	movs	r2, #1
 801ba54:	60da      	str	r2, [r3, #12]

    timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	685b      	ldr	r3, [r3, #4]
 801ba5a:	681a      	ldr	r2, [r3, #0]
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	685b      	ldr	r3, [r3, #4]
 801ba60:	f042 0201 	orr.w	r2, r2, #1
 801ba64:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(irq);
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801ba6c:	4618      	mov	r0, r3
 801ba6e:	f7ff ff29 	bl	801b8c4 <__NVIC_EnableIRQ>

    printf("	timer started\n");
 801ba72:	480a      	ldr	r0, [pc, #40]	@ (801ba9c <_ZN8pruTimer10startTimerEv+0x12c>)
 801ba74:	f00d fd5a 	bl	802952c <puts>
}
 801ba78:	bf00      	nop
 801ba7a:	3718      	adds	r7, #24
 801ba7c:	46bd      	mov	sp, r7
 801ba7e:	bd80      	pop	{r7, pc}
 801ba80:	0802b0fc 	.word	0x0802b0fc
 801ba84:	58024400 	.word	0x58024400
 801ba88:	2400001c 	.word	0x2400001c
 801ba8c:	40000400 	.word	0x40000400
 801ba90:	0802b110 	.word	0x0802b110
 801ba94:	40000800 	.word	0x40000800
 801ba98:	0802b124 	.word	0x0802b124
 801ba9c:	0802b138 	.word	0x0802b138

0801baa0 <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 801baa0:	b580      	push	{r7, lr}
 801baa2:	b084      	sub	sp, #16
 801baa4:	af00      	add	r7, sp, #0
 801baa6:	60f8      	str	r0, [r7, #12]
 801baa8:	60b9      	str	r1, [r7, #8]
 801baaa:	607a      	str	r2, [r7, #4]
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	4618      	mov	r0, r3
 801bab0:	f7e6 fa3e 	bl	8001f30 <_ZN9InterruptC1Ev>
 801bab4:	4a08      	ldr	r2, [pc, #32]	@ (801bad8 <_ZN14TimerInterruptC1EiP8pruTimer+0x38>)
 801bab6:	68fb      	ldr	r3, [r7, #12]
 801bab8:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 801baba:	68fb      	ldr	r3, [r7, #12]
 801babc:	687a      	ldr	r2, [r7, #4]
 801babe:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 801bac0:	68bb      	ldr	r3, [r7, #8]
 801bac2:	68fa      	ldr	r2, [r7, #12]
 801bac4:	4611      	mov	r1, r2
 801bac6:	4618      	mov	r0, r3
 801bac8:	f7e9 fae2 	bl	8005090 <_ZN9Interrupt8RegisterEmPS_>
}
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	4618      	mov	r0, r3
 801bad0:	3710      	adds	r7, #16
 801bad2:	46bd      	mov	sp, r7
 801bad4:	bd80      	pop	{r7, pc}
 801bad6:	bf00      	nop
 801bad8:	0802b774 	.word	0x0802b774

0801badc <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 801badc:	b580      	push	{r7, lr}
 801bade:	b082      	sub	sp, #8
 801bae0:	af00      	add	r7, sp, #0
 801bae2:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 801bae4:	687b      	ldr	r3, [r7, #4]
 801bae6:	685b      	ldr	r3, [r3, #4]
 801bae8:	4618      	mov	r0, r3
 801baea:	f7ff ff34 	bl	801b956 <_ZN8pruTimer9timerTickEv>
}
 801baee:	bf00      	nop
 801baf0:	3708      	adds	r7, #8
 801baf2:	46bd      	mov	sp, r7
 801baf4:	bd80      	pop	{r7, pc}
	...

0801baf8 <_ZN14TimerInterruptD1Ev>:

// Derived class for timer interrupts

class pruTimer; // forward declaration

class TimerInterrupt : public Interrupt
 801baf8:	b580      	push	{r7, lr}
 801bafa:	b082      	sub	sp, #8
 801bafc:	af00      	add	r7, sp, #0
 801bafe:	6078      	str	r0, [r7, #4]
 801bb00:	4a05      	ldr	r2, [pc, #20]	@ (801bb18 <_ZN14TimerInterruptD1Ev+0x20>)
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	601a      	str	r2, [r3, #0]
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	4618      	mov	r0, r3
 801bb0a:	f7e6 fa21 	bl	8001f50 <_ZN9InterruptD1Ev>
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	4618      	mov	r0, r3
 801bb12:	3708      	adds	r7, #8
 801bb14:	46bd      	mov	sp, r7
 801bb16:	bd80      	pop	{r7, pc}
 801bb18:	0802b774 	.word	0x0802b774

0801bb1c <_ZN14TimerInterruptD0Ev>:
 801bb1c:	b580      	push	{r7, lr}
 801bb1e:	b082      	sub	sp, #8
 801bb20:	af00      	add	r7, sp, #0
 801bb22:	6078      	str	r0, [r7, #4]
 801bb24:	6878      	ldr	r0, [r7, #4]
 801bb26:	f7ff ffe7 	bl	801baf8 <_ZN14TimerInterruptD1Ev>
 801bb2a:	2108      	movs	r1, #8
 801bb2c:	6878      	ldr	r0, [r7, #4]
 801bb2e:	f00c fdd2 	bl	80286d6 <_ZdlPvj>
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	4618      	mov	r0, r3
 801bb36:	3708      	adds	r7, #8
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	bd80      	pop	{r7, pc}

0801bb3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 801bb3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 801bb74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 801bb40:	f7f3 faf6 	bl	800f130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801bb44:	480c      	ldr	r0, [pc, #48]	@ (801bb78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801bb46:	490d      	ldr	r1, [pc, #52]	@ (801bb7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801bb48:	4a0d      	ldr	r2, [pc, #52]	@ (801bb80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801bb4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801bb4c:	e002      	b.n	801bb54 <LoopCopyDataInit>

0801bb4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801bb4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801bb50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801bb52:	3304      	adds	r3, #4

0801bb54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801bb54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801bb56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801bb58:	d3f9      	bcc.n	801bb4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801bb5a:	4a0a      	ldr	r2, [pc, #40]	@ (801bb84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 801bb5c:	4c0a      	ldr	r4, [pc, #40]	@ (801bb88 <LoopFillZerobss+0x22>)
  movs r3, #0
 801bb5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 801bb60:	e001      	b.n	801bb66 <LoopFillZerobss>

0801bb62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801bb62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801bb64:	3204      	adds	r2, #4

0801bb66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801bb66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801bb68:	d3fb      	bcc.n	801bb62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801bb6a:	f00d fe91 	bl	8029890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801bb6e:	f7ee fcb5 	bl	800a4dc <main>
  bx  lr
 801bb72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801bb74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 801bb78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 801bb7c:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 801bb80:	0802bb4c 	.word	0x0802bb4c
  ldr r2, =_sbss
 801bb84:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 801bb88:	24000c10 	.word	0x24000c10

0801bb8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801bb8c:	e7fe      	b.n	801bb8c <ADC3_IRQHandler>
	...

0801bb90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801bb90:	b580      	push	{r7, lr}
 801bb92:	b082      	sub	sp, #8
 801bb94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801bb96:	2003      	movs	r0, #3
 801bb98:	f000 f9a2 	bl	801bee0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801bb9c:	f003 fdc8 	bl	801f730 <HAL_RCC_GetSysClockFreq>
 801bba0:	4602      	mov	r2, r0
 801bba2:	4b15      	ldr	r3, [pc, #84]	@ (801bbf8 <HAL_Init+0x68>)
 801bba4:	699b      	ldr	r3, [r3, #24]
 801bba6:	0a1b      	lsrs	r3, r3, #8
 801bba8:	f003 030f 	and.w	r3, r3, #15
 801bbac:	4913      	ldr	r1, [pc, #76]	@ (801bbfc <HAL_Init+0x6c>)
 801bbae:	5ccb      	ldrb	r3, [r1, r3]
 801bbb0:	f003 031f 	and.w	r3, r3, #31
 801bbb4:	fa22 f303 	lsr.w	r3, r2, r3
 801bbb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801bbba:	4b0f      	ldr	r3, [pc, #60]	@ (801bbf8 <HAL_Init+0x68>)
 801bbbc:	699b      	ldr	r3, [r3, #24]
 801bbbe:	f003 030f 	and.w	r3, r3, #15
 801bbc2:	4a0e      	ldr	r2, [pc, #56]	@ (801bbfc <HAL_Init+0x6c>)
 801bbc4:	5cd3      	ldrb	r3, [r2, r3]
 801bbc6:	f003 031f 	and.w	r3, r3, #31
 801bbca:	687a      	ldr	r2, [r7, #4]
 801bbcc:	fa22 f303 	lsr.w	r3, r2, r3
 801bbd0:	4a0b      	ldr	r2, [pc, #44]	@ (801bc00 <HAL_Init+0x70>)
 801bbd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801bbd4:	4a0b      	ldr	r2, [pc, #44]	@ (801bc04 <HAL_Init+0x74>)
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801bbda:	200f      	movs	r0, #15
 801bbdc:	f000 f814 	bl	801bc08 <HAL_InitTick>
 801bbe0:	4603      	mov	r3, r0
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d001      	beq.n	801bbea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801bbe6:	2301      	movs	r3, #1
 801bbe8:	e002      	b.n	801bbf0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801bbea:	f7f3 f887 	bl	800ecfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801bbee:	2300      	movs	r3, #0
}
 801bbf0:	4618      	mov	r0, r3
 801bbf2:	3708      	adds	r7, #8
 801bbf4:	46bd      	mov	sp, r7
 801bbf6:	bd80      	pop	{r7, pc}
 801bbf8:	58024400 	.word	0x58024400
 801bbfc:	0802b4b0 	.word	0x0802b4b0
 801bc00:	24000020 	.word	0x24000020
 801bc04:	2400001c 	.word	0x2400001c

0801bc08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801bc08:	b580      	push	{r7, lr}
 801bc0a:	b082      	sub	sp, #8
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801bc10:	4b15      	ldr	r3, [pc, #84]	@ (801bc68 <HAL_InitTick+0x60>)
 801bc12:	781b      	ldrb	r3, [r3, #0]
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d101      	bne.n	801bc1c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 801bc18:	2301      	movs	r3, #1
 801bc1a:	e021      	b.n	801bc60 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 801bc1c:	4b13      	ldr	r3, [pc, #76]	@ (801bc6c <HAL_InitTick+0x64>)
 801bc1e:	681a      	ldr	r2, [r3, #0]
 801bc20:	4b11      	ldr	r3, [pc, #68]	@ (801bc68 <HAL_InitTick+0x60>)
 801bc22:	781b      	ldrb	r3, [r3, #0]
 801bc24:	4619      	mov	r1, r3
 801bc26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801bc2a:	fbb3 f3f1 	udiv	r3, r3, r1
 801bc2e:	fbb2 f3f3 	udiv	r3, r2, r3
 801bc32:	4618      	mov	r0, r3
 801bc34:	f000 f98b 	bl	801bf4e <HAL_SYSTICK_Config>
 801bc38:	4603      	mov	r3, r0
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d001      	beq.n	801bc42 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801bc3e:	2301      	movs	r3, #1
 801bc40:	e00e      	b.n	801bc60 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	2b0f      	cmp	r3, #15
 801bc46:	d80a      	bhi.n	801bc5e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801bc48:	2200      	movs	r2, #0
 801bc4a:	6879      	ldr	r1, [r7, #4]
 801bc4c:	f04f 30ff 	mov.w	r0, #4294967295
 801bc50:	f000 f951 	bl	801bef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801bc54:	4a06      	ldr	r2, [pc, #24]	@ (801bc70 <HAL_InitTick+0x68>)
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801bc5a:	2300      	movs	r3, #0
 801bc5c:	e000      	b.n	801bc60 <HAL_InitTick+0x58>
    return HAL_ERROR;
 801bc5e:	2301      	movs	r3, #1
}
 801bc60:	4618      	mov	r0, r3
 801bc62:	3708      	adds	r7, #8
 801bc64:	46bd      	mov	sp, r7
 801bc66:	bd80      	pop	{r7, pc}
 801bc68:	24000028 	.word	0x24000028
 801bc6c:	2400001c 	.word	0x2400001c
 801bc70:	24000024 	.word	0x24000024

0801bc74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801bc74:	b480      	push	{r7}
 801bc76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801bc78:	4b06      	ldr	r3, [pc, #24]	@ (801bc94 <HAL_IncTick+0x20>)
 801bc7a:	781b      	ldrb	r3, [r3, #0]
 801bc7c:	461a      	mov	r2, r3
 801bc7e:	4b06      	ldr	r3, [pc, #24]	@ (801bc98 <HAL_IncTick+0x24>)
 801bc80:	681b      	ldr	r3, [r3, #0]
 801bc82:	4413      	add	r3, r2
 801bc84:	4a04      	ldr	r2, [pc, #16]	@ (801bc98 <HAL_IncTick+0x24>)
 801bc86:	6013      	str	r3, [r2, #0]
}
 801bc88:	bf00      	nop
 801bc8a:	46bd      	mov	sp, r7
 801bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc90:	4770      	bx	lr
 801bc92:	bf00      	nop
 801bc94:	24000028 	.word	0x24000028
 801bc98:	24000418 	.word	0x24000418

0801bc9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801bc9c:	b480      	push	{r7}
 801bc9e:	af00      	add	r7, sp, #0
  return uwTick;
 801bca0:	4b03      	ldr	r3, [pc, #12]	@ (801bcb0 <HAL_GetTick+0x14>)
 801bca2:	681b      	ldr	r3, [r3, #0]
}
 801bca4:	4618      	mov	r0, r3
 801bca6:	46bd      	mov	sp, r7
 801bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcac:	4770      	bx	lr
 801bcae:	bf00      	nop
 801bcb0:	24000418 	.word	0x24000418

0801bcb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801bcb4:	b580      	push	{r7, lr}
 801bcb6:	b084      	sub	sp, #16
 801bcb8:	af00      	add	r7, sp, #0
 801bcba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801bcbc:	f7ff ffee 	bl	801bc9c <HAL_GetTick>
 801bcc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801bcc6:	68fb      	ldr	r3, [r7, #12]
 801bcc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bccc:	d005      	beq.n	801bcda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801bcce:	4b0a      	ldr	r3, [pc, #40]	@ (801bcf8 <HAL_Delay+0x44>)
 801bcd0:	781b      	ldrb	r3, [r3, #0]
 801bcd2:	461a      	mov	r2, r3
 801bcd4:	68fb      	ldr	r3, [r7, #12]
 801bcd6:	4413      	add	r3, r2
 801bcd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801bcda:	bf00      	nop
 801bcdc:	f7ff ffde 	bl	801bc9c <HAL_GetTick>
 801bce0:	4602      	mov	r2, r0
 801bce2:	68bb      	ldr	r3, [r7, #8]
 801bce4:	1ad3      	subs	r3, r2, r3
 801bce6:	68fa      	ldr	r2, [r7, #12]
 801bce8:	429a      	cmp	r2, r3
 801bcea:	d8f7      	bhi.n	801bcdc <HAL_Delay+0x28>
  {
  }
}
 801bcec:	bf00      	nop
 801bcee:	bf00      	nop
 801bcf0:	3710      	adds	r7, #16
 801bcf2:	46bd      	mov	sp, r7
 801bcf4:	bd80      	pop	{r7, pc}
 801bcf6:	bf00      	nop
 801bcf8:	24000028 	.word	0x24000028

0801bcfc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 801bcfc:	b480      	push	{r7}
 801bcfe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801bd00:	4b03      	ldr	r3, [pc, #12]	@ (801bd10 <HAL_GetREVID+0x14>)
 801bd02:	681b      	ldr	r3, [r3, #0]
 801bd04:	0c1b      	lsrs	r3, r3, #16
}
 801bd06:	4618      	mov	r0, r3
 801bd08:	46bd      	mov	sp, r7
 801bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd0e:	4770      	bx	lr
 801bd10:	5c001000 	.word	0x5c001000

0801bd14 <__NVIC_SetPriorityGrouping>:
{
 801bd14:	b480      	push	{r7}
 801bd16:	b085      	sub	sp, #20
 801bd18:	af00      	add	r7, sp, #0
 801bd1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	f003 0307 	and.w	r3, r3, #7
 801bd22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801bd24:	4b0b      	ldr	r3, [pc, #44]	@ (801bd54 <__NVIC_SetPriorityGrouping+0x40>)
 801bd26:	68db      	ldr	r3, [r3, #12]
 801bd28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801bd2a:	68ba      	ldr	r2, [r7, #8]
 801bd2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801bd30:	4013      	ands	r3, r2
 801bd32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801bd34:	68fb      	ldr	r3, [r7, #12]
 801bd36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801bd38:	68bb      	ldr	r3, [r7, #8]
 801bd3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801bd3c:	4b06      	ldr	r3, [pc, #24]	@ (801bd58 <__NVIC_SetPriorityGrouping+0x44>)
 801bd3e:	4313      	orrs	r3, r2
 801bd40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801bd42:	4a04      	ldr	r2, [pc, #16]	@ (801bd54 <__NVIC_SetPriorityGrouping+0x40>)
 801bd44:	68bb      	ldr	r3, [r7, #8]
 801bd46:	60d3      	str	r3, [r2, #12]
}
 801bd48:	bf00      	nop
 801bd4a:	3714      	adds	r7, #20
 801bd4c:	46bd      	mov	sp, r7
 801bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd52:	4770      	bx	lr
 801bd54:	e000ed00 	.word	0xe000ed00
 801bd58:	05fa0000 	.word	0x05fa0000

0801bd5c <__NVIC_GetPriorityGrouping>:
{
 801bd5c:	b480      	push	{r7}
 801bd5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801bd60:	4b04      	ldr	r3, [pc, #16]	@ (801bd74 <__NVIC_GetPriorityGrouping+0x18>)
 801bd62:	68db      	ldr	r3, [r3, #12]
 801bd64:	0a1b      	lsrs	r3, r3, #8
 801bd66:	f003 0307 	and.w	r3, r3, #7
}
 801bd6a:	4618      	mov	r0, r3
 801bd6c:	46bd      	mov	sp, r7
 801bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd72:	4770      	bx	lr
 801bd74:	e000ed00 	.word	0xe000ed00

0801bd78 <__NVIC_EnableIRQ>:
{
 801bd78:	b480      	push	{r7}
 801bd7a:	b083      	sub	sp, #12
 801bd7c:	af00      	add	r7, sp, #0
 801bd7e:	4603      	mov	r3, r0
 801bd80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801bd82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	db0b      	blt.n	801bda2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801bd8a:	88fb      	ldrh	r3, [r7, #6]
 801bd8c:	f003 021f 	and.w	r2, r3, #31
 801bd90:	4907      	ldr	r1, [pc, #28]	@ (801bdb0 <__NVIC_EnableIRQ+0x38>)
 801bd92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bd96:	095b      	lsrs	r3, r3, #5
 801bd98:	2001      	movs	r0, #1
 801bd9a:	fa00 f202 	lsl.w	r2, r0, r2
 801bd9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801bda2:	bf00      	nop
 801bda4:	370c      	adds	r7, #12
 801bda6:	46bd      	mov	sp, r7
 801bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdac:	4770      	bx	lr
 801bdae:	bf00      	nop
 801bdb0:	e000e100 	.word	0xe000e100

0801bdb4 <__NVIC_SetPriority>:
{
 801bdb4:	b480      	push	{r7}
 801bdb6:	b083      	sub	sp, #12
 801bdb8:	af00      	add	r7, sp, #0
 801bdba:	4603      	mov	r3, r0
 801bdbc:	6039      	str	r1, [r7, #0]
 801bdbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801bdc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	db0a      	blt.n	801bdde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bdc8:	683b      	ldr	r3, [r7, #0]
 801bdca:	b2da      	uxtb	r2, r3
 801bdcc:	490c      	ldr	r1, [pc, #48]	@ (801be00 <__NVIC_SetPriority+0x4c>)
 801bdce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bdd2:	0112      	lsls	r2, r2, #4
 801bdd4:	b2d2      	uxtb	r2, r2
 801bdd6:	440b      	add	r3, r1
 801bdd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801bddc:	e00a      	b.n	801bdf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bdde:	683b      	ldr	r3, [r7, #0]
 801bde0:	b2da      	uxtb	r2, r3
 801bde2:	4908      	ldr	r1, [pc, #32]	@ (801be04 <__NVIC_SetPriority+0x50>)
 801bde4:	88fb      	ldrh	r3, [r7, #6]
 801bde6:	f003 030f 	and.w	r3, r3, #15
 801bdea:	3b04      	subs	r3, #4
 801bdec:	0112      	lsls	r2, r2, #4
 801bdee:	b2d2      	uxtb	r2, r2
 801bdf0:	440b      	add	r3, r1
 801bdf2:	761a      	strb	r2, [r3, #24]
}
 801bdf4:	bf00      	nop
 801bdf6:	370c      	adds	r7, #12
 801bdf8:	46bd      	mov	sp, r7
 801bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdfe:	4770      	bx	lr
 801be00:	e000e100 	.word	0xe000e100
 801be04:	e000ed00 	.word	0xe000ed00

0801be08 <NVIC_EncodePriority>:
{
 801be08:	b480      	push	{r7}
 801be0a:	b089      	sub	sp, #36	@ 0x24
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	60f8      	str	r0, [r7, #12]
 801be10:	60b9      	str	r1, [r7, #8]
 801be12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801be14:	68fb      	ldr	r3, [r7, #12]
 801be16:	f003 0307 	and.w	r3, r3, #7
 801be1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801be1c:	69fb      	ldr	r3, [r7, #28]
 801be1e:	f1c3 0307 	rsb	r3, r3, #7
 801be22:	2b04      	cmp	r3, #4
 801be24:	bf28      	it	cs
 801be26:	2304      	movcs	r3, #4
 801be28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801be2a:	69fb      	ldr	r3, [r7, #28]
 801be2c:	3304      	adds	r3, #4
 801be2e:	2b06      	cmp	r3, #6
 801be30:	d902      	bls.n	801be38 <NVIC_EncodePriority+0x30>
 801be32:	69fb      	ldr	r3, [r7, #28]
 801be34:	3b03      	subs	r3, #3
 801be36:	e000      	b.n	801be3a <NVIC_EncodePriority+0x32>
 801be38:	2300      	movs	r3, #0
 801be3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801be3c:	f04f 32ff 	mov.w	r2, #4294967295
 801be40:	69bb      	ldr	r3, [r7, #24]
 801be42:	fa02 f303 	lsl.w	r3, r2, r3
 801be46:	43da      	mvns	r2, r3
 801be48:	68bb      	ldr	r3, [r7, #8]
 801be4a:	401a      	ands	r2, r3
 801be4c:	697b      	ldr	r3, [r7, #20]
 801be4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801be50:	f04f 31ff 	mov.w	r1, #4294967295
 801be54:	697b      	ldr	r3, [r7, #20]
 801be56:	fa01 f303 	lsl.w	r3, r1, r3
 801be5a:	43d9      	mvns	r1, r3
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801be60:	4313      	orrs	r3, r2
}
 801be62:	4618      	mov	r0, r3
 801be64:	3724      	adds	r7, #36	@ 0x24
 801be66:	46bd      	mov	sp, r7
 801be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be6c:	4770      	bx	lr
	...

0801be70 <__NVIC_SystemReset>:
{
 801be70:	b480      	push	{r7}
 801be72:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801be74:	f3bf 8f4f 	dsb	sy
}
 801be78:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801be7a:	4b06      	ldr	r3, [pc, #24]	@ (801be94 <__NVIC_SystemReset+0x24>)
 801be7c:	68db      	ldr	r3, [r3, #12]
 801be7e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801be82:	4904      	ldr	r1, [pc, #16]	@ (801be94 <__NVIC_SystemReset+0x24>)
 801be84:	4b04      	ldr	r3, [pc, #16]	@ (801be98 <__NVIC_SystemReset+0x28>)
 801be86:	4313      	orrs	r3, r2
 801be88:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801be8a:	f3bf 8f4f 	dsb	sy
}
 801be8e:	bf00      	nop
    __NOP();
 801be90:	bf00      	nop
 801be92:	e7fd      	b.n	801be90 <__NVIC_SystemReset+0x20>
 801be94:	e000ed00 	.word	0xe000ed00
 801be98:	05fa0004 	.word	0x05fa0004

0801be9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801be9c:	b580      	push	{r7, lr}
 801be9e:	b082      	sub	sp, #8
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	3b01      	subs	r3, #1
 801bea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801beac:	d301      	bcc.n	801beb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801beae:	2301      	movs	r3, #1
 801beb0:	e00f      	b.n	801bed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801beb2:	4a0a      	ldr	r2, [pc, #40]	@ (801bedc <SysTick_Config+0x40>)
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	3b01      	subs	r3, #1
 801beb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801beba:	210f      	movs	r1, #15
 801bebc:	f04f 30ff 	mov.w	r0, #4294967295
 801bec0:	f7ff ff78 	bl	801bdb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801bec4:	4b05      	ldr	r3, [pc, #20]	@ (801bedc <SysTick_Config+0x40>)
 801bec6:	2200      	movs	r2, #0
 801bec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801beca:	4b04      	ldr	r3, [pc, #16]	@ (801bedc <SysTick_Config+0x40>)
 801becc:	2207      	movs	r2, #7
 801bece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801bed0:	2300      	movs	r3, #0
}
 801bed2:	4618      	mov	r0, r3
 801bed4:	3708      	adds	r7, #8
 801bed6:	46bd      	mov	sp, r7
 801bed8:	bd80      	pop	{r7, pc}
 801beda:	bf00      	nop
 801bedc:	e000e010 	.word	0xe000e010

0801bee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801bee0:	b580      	push	{r7, lr}
 801bee2:	b082      	sub	sp, #8
 801bee4:	af00      	add	r7, sp, #0
 801bee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801bee8:	6878      	ldr	r0, [r7, #4]
 801beea:	f7ff ff13 	bl	801bd14 <__NVIC_SetPriorityGrouping>
}
 801beee:	bf00      	nop
 801bef0:	3708      	adds	r7, #8
 801bef2:	46bd      	mov	sp, r7
 801bef4:	bd80      	pop	{r7, pc}

0801bef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801bef6:	b580      	push	{r7, lr}
 801bef8:	b086      	sub	sp, #24
 801befa:	af00      	add	r7, sp, #0
 801befc:	4603      	mov	r3, r0
 801befe:	60b9      	str	r1, [r7, #8]
 801bf00:	607a      	str	r2, [r7, #4]
 801bf02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801bf04:	f7ff ff2a 	bl	801bd5c <__NVIC_GetPriorityGrouping>
 801bf08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801bf0a:	687a      	ldr	r2, [r7, #4]
 801bf0c:	68b9      	ldr	r1, [r7, #8]
 801bf0e:	6978      	ldr	r0, [r7, #20]
 801bf10:	f7ff ff7a 	bl	801be08 <NVIC_EncodePriority>
 801bf14:	4602      	mov	r2, r0
 801bf16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801bf1a:	4611      	mov	r1, r2
 801bf1c:	4618      	mov	r0, r3
 801bf1e:	f7ff ff49 	bl	801bdb4 <__NVIC_SetPriority>
}
 801bf22:	bf00      	nop
 801bf24:	3718      	adds	r7, #24
 801bf26:	46bd      	mov	sp, r7
 801bf28:	bd80      	pop	{r7, pc}

0801bf2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801bf2a:	b580      	push	{r7, lr}
 801bf2c:	b082      	sub	sp, #8
 801bf2e:	af00      	add	r7, sp, #0
 801bf30:	4603      	mov	r3, r0
 801bf32:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801bf34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bf38:	4618      	mov	r0, r3
 801bf3a:	f7ff ff1d 	bl	801bd78 <__NVIC_EnableIRQ>
}
 801bf3e:	bf00      	nop
 801bf40:	3708      	adds	r7, #8
 801bf42:	46bd      	mov	sp, r7
 801bf44:	bd80      	pop	{r7, pc}

0801bf46 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 801bf46:	b580      	push	{r7, lr}
 801bf48:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801bf4a:	f7ff ff91 	bl	801be70 <__NVIC_SystemReset>

0801bf4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801bf4e:	b580      	push	{r7, lr}
 801bf50:	b082      	sub	sp, #8
 801bf52:	af00      	add	r7, sp, #0
 801bf54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801bf56:	6878      	ldr	r0, [r7, #4]
 801bf58:	f7ff ffa0 	bl	801be9c <SysTick_Config>
 801bf5c:	4603      	mov	r3, r0
}
 801bf5e:	4618      	mov	r0, r3
 801bf60:	3708      	adds	r7, #8
 801bf62:	46bd      	mov	sp, r7
 801bf64:	bd80      	pop	{r7, pc}
	...

0801bf68 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 801bf68:	b480      	push	{r7}
 801bf6a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801bf6c:	f3bf 8f5f 	dmb	sy
}
 801bf70:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801bf72:	4b07      	ldr	r3, [pc, #28]	@ (801bf90 <HAL_MPU_Disable+0x28>)
 801bf74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bf76:	4a06      	ldr	r2, [pc, #24]	@ (801bf90 <HAL_MPU_Disable+0x28>)
 801bf78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801bf7c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801bf7e:	4b05      	ldr	r3, [pc, #20]	@ (801bf94 <HAL_MPU_Disable+0x2c>)
 801bf80:	2200      	movs	r2, #0
 801bf82:	605a      	str	r2, [r3, #4]
}
 801bf84:	bf00      	nop
 801bf86:	46bd      	mov	sp, r7
 801bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf8c:	4770      	bx	lr
 801bf8e:	bf00      	nop
 801bf90:	e000ed00 	.word	0xe000ed00
 801bf94:	e000ed90 	.word	0xe000ed90

0801bf98 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801bf98:	b480      	push	{r7}
 801bf9a:	b083      	sub	sp, #12
 801bf9c:	af00      	add	r7, sp, #0
 801bf9e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801bfa0:	4a0b      	ldr	r2, [pc, #44]	@ (801bfd0 <HAL_MPU_Enable+0x38>)
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	f043 0301 	orr.w	r3, r3, #1
 801bfa8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801bfaa:	4b0a      	ldr	r3, [pc, #40]	@ (801bfd4 <HAL_MPU_Enable+0x3c>)
 801bfac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bfae:	4a09      	ldr	r2, [pc, #36]	@ (801bfd4 <HAL_MPU_Enable+0x3c>)
 801bfb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801bfb4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801bfb6:	f3bf 8f4f 	dsb	sy
}
 801bfba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801bfbc:	f3bf 8f6f 	isb	sy
}
 801bfc0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801bfc2:	bf00      	nop
 801bfc4:	370c      	adds	r7, #12
 801bfc6:	46bd      	mov	sp, r7
 801bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfcc:	4770      	bx	lr
 801bfce:	bf00      	nop
 801bfd0:	e000ed90 	.word	0xe000ed90
 801bfd4:	e000ed00 	.word	0xe000ed00

0801bfd8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 801bfd8:	b480      	push	{r7}
 801bfda:	b083      	sub	sp, #12
 801bfdc:	af00      	add	r7, sp, #0
 801bfde:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	785a      	ldrb	r2, [r3, #1]
 801bfe4:	4b1b      	ldr	r3, [pc, #108]	@ (801c054 <HAL_MPU_ConfigRegion+0x7c>)
 801bfe6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 801bfe8:	4b1a      	ldr	r3, [pc, #104]	@ (801c054 <HAL_MPU_ConfigRegion+0x7c>)
 801bfea:	691b      	ldr	r3, [r3, #16]
 801bfec:	4a19      	ldr	r2, [pc, #100]	@ (801c054 <HAL_MPU_ConfigRegion+0x7c>)
 801bfee:	f023 0301 	bic.w	r3, r3, #1
 801bff2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 801bff4:	4a17      	ldr	r2, [pc, #92]	@ (801c054 <HAL_MPU_ConfigRegion+0x7c>)
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	685b      	ldr	r3, [r3, #4]
 801bffa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	7b1b      	ldrb	r3, [r3, #12]
 801c000:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	7adb      	ldrb	r3, [r3, #11]
 801c006:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801c008:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	7a9b      	ldrb	r3, [r3, #10]
 801c00e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801c010:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	7b5b      	ldrb	r3, [r3, #13]
 801c016:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801c018:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	7b9b      	ldrb	r3, [r3, #14]
 801c01e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801c020:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	7bdb      	ldrb	r3, [r3, #15]
 801c026:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801c028:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	7a5b      	ldrb	r3, [r3, #9]
 801c02e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801c030:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	7a1b      	ldrb	r3, [r3, #8]
 801c036:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801c038:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801c03a:	687a      	ldr	r2, [r7, #4]
 801c03c:	7812      	ldrb	r2, [r2, #0]
 801c03e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801c040:	4a04      	ldr	r2, [pc, #16]	@ (801c054 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801c042:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801c044:	6113      	str	r3, [r2, #16]
}
 801c046:	bf00      	nop
 801c048:	370c      	adds	r7, #12
 801c04a:	46bd      	mov	sp, r7
 801c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c050:	4770      	bx	lr
 801c052:	bf00      	nop
 801c054:	e000ed90 	.word	0xe000ed90

0801c058 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801c058:	b580      	push	{r7, lr}
 801c05a:	b086      	sub	sp, #24
 801c05c:	af00      	add	r7, sp, #0
 801c05e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 801c060:	f7ff fe1c 	bl	801bc9c <HAL_GetTick>
 801c064:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d101      	bne.n	801c070 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 801c06c:	2301      	movs	r3, #1
 801c06e:	e316      	b.n	801c69e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	4a66      	ldr	r2, [pc, #408]	@ (801c210 <HAL_DMA_Init+0x1b8>)
 801c076:	4293      	cmp	r3, r2
 801c078:	d04a      	beq.n	801c110 <HAL_DMA_Init+0xb8>
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	681b      	ldr	r3, [r3, #0]
 801c07e:	4a65      	ldr	r2, [pc, #404]	@ (801c214 <HAL_DMA_Init+0x1bc>)
 801c080:	4293      	cmp	r3, r2
 801c082:	d045      	beq.n	801c110 <HAL_DMA_Init+0xb8>
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	681b      	ldr	r3, [r3, #0]
 801c088:	4a63      	ldr	r2, [pc, #396]	@ (801c218 <HAL_DMA_Init+0x1c0>)
 801c08a:	4293      	cmp	r3, r2
 801c08c:	d040      	beq.n	801c110 <HAL_DMA_Init+0xb8>
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	681b      	ldr	r3, [r3, #0]
 801c092:	4a62      	ldr	r2, [pc, #392]	@ (801c21c <HAL_DMA_Init+0x1c4>)
 801c094:	4293      	cmp	r3, r2
 801c096:	d03b      	beq.n	801c110 <HAL_DMA_Init+0xb8>
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	681b      	ldr	r3, [r3, #0]
 801c09c:	4a60      	ldr	r2, [pc, #384]	@ (801c220 <HAL_DMA_Init+0x1c8>)
 801c09e:	4293      	cmp	r3, r2
 801c0a0:	d036      	beq.n	801c110 <HAL_DMA_Init+0xb8>
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	681b      	ldr	r3, [r3, #0]
 801c0a6:	4a5f      	ldr	r2, [pc, #380]	@ (801c224 <HAL_DMA_Init+0x1cc>)
 801c0a8:	4293      	cmp	r3, r2
 801c0aa:	d031      	beq.n	801c110 <HAL_DMA_Init+0xb8>
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	681b      	ldr	r3, [r3, #0]
 801c0b0:	4a5d      	ldr	r2, [pc, #372]	@ (801c228 <HAL_DMA_Init+0x1d0>)
 801c0b2:	4293      	cmp	r3, r2
 801c0b4:	d02c      	beq.n	801c110 <HAL_DMA_Init+0xb8>
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	681b      	ldr	r3, [r3, #0]
 801c0ba:	4a5c      	ldr	r2, [pc, #368]	@ (801c22c <HAL_DMA_Init+0x1d4>)
 801c0bc:	4293      	cmp	r3, r2
 801c0be:	d027      	beq.n	801c110 <HAL_DMA_Init+0xb8>
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	681b      	ldr	r3, [r3, #0]
 801c0c4:	4a5a      	ldr	r2, [pc, #360]	@ (801c230 <HAL_DMA_Init+0x1d8>)
 801c0c6:	4293      	cmp	r3, r2
 801c0c8:	d022      	beq.n	801c110 <HAL_DMA_Init+0xb8>
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	681b      	ldr	r3, [r3, #0]
 801c0ce:	4a59      	ldr	r2, [pc, #356]	@ (801c234 <HAL_DMA_Init+0x1dc>)
 801c0d0:	4293      	cmp	r3, r2
 801c0d2:	d01d      	beq.n	801c110 <HAL_DMA_Init+0xb8>
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	681b      	ldr	r3, [r3, #0]
 801c0d8:	4a57      	ldr	r2, [pc, #348]	@ (801c238 <HAL_DMA_Init+0x1e0>)
 801c0da:	4293      	cmp	r3, r2
 801c0dc:	d018      	beq.n	801c110 <HAL_DMA_Init+0xb8>
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	681b      	ldr	r3, [r3, #0]
 801c0e2:	4a56      	ldr	r2, [pc, #344]	@ (801c23c <HAL_DMA_Init+0x1e4>)
 801c0e4:	4293      	cmp	r3, r2
 801c0e6:	d013      	beq.n	801c110 <HAL_DMA_Init+0xb8>
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	681b      	ldr	r3, [r3, #0]
 801c0ec:	4a54      	ldr	r2, [pc, #336]	@ (801c240 <HAL_DMA_Init+0x1e8>)
 801c0ee:	4293      	cmp	r3, r2
 801c0f0:	d00e      	beq.n	801c110 <HAL_DMA_Init+0xb8>
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	4a53      	ldr	r2, [pc, #332]	@ (801c244 <HAL_DMA_Init+0x1ec>)
 801c0f8:	4293      	cmp	r3, r2
 801c0fa:	d009      	beq.n	801c110 <HAL_DMA_Init+0xb8>
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	681b      	ldr	r3, [r3, #0]
 801c100:	4a51      	ldr	r2, [pc, #324]	@ (801c248 <HAL_DMA_Init+0x1f0>)
 801c102:	4293      	cmp	r3, r2
 801c104:	d004      	beq.n	801c110 <HAL_DMA_Init+0xb8>
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	4a50      	ldr	r2, [pc, #320]	@ (801c24c <HAL_DMA_Init+0x1f4>)
 801c10c:	4293      	cmp	r3, r2
 801c10e:	d101      	bne.n	801c114 <HAL_DMA_Init+0xbc>
 801c110:	2301      	movs	r3, #1
 801c112:	e000      	b.n	801c116 <HAL_DMA_Init+0xbe>
 801c114:	2300      	movs	r3, #0
 801c116:	2b00      	cmp	r3, #0
 801c118:	f000 813b 	beq.w	801c392 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	2202      	movs	r2, #2
 801c120:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	2200      	movs	r2, #0
 801c128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	681b      	ldr	r3, [r3, #0]
 801c130:	4a37      	ldr	r2, [pc, #220]	@ (801c210 <HAL_DMA_Init+0x1b8>)
 801c132:	4293      	cmp	r3, r2
 801c134:	d04a      	beq.n	801c1cc <HAL_DMA_Init+0x174>
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	4a36      	ldr	r2, [pc, #216]	@ (801c214 <HAL_DMA_Init+0x1bc>)
 801c13c:	4293      	cmp	r3, r2
 801c13e:	d045      	beq.n	801c1cc <HAL_DMA_Init+0x174>
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	681b      	ldr	r3, [r3, #0]
 801c144:	4a34      	ldr	r2, [pc, #208]	@ (801c218 <HAL_DMA_Init+0x1c0>)
 801c146:	4293      	cmp	r3, r2
 801c148:	d040      	beq.n	801c1cc <HAL_DMA_Init+0x174>
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	4a33      	ldr	r2, [pc, #204]	@ (801c21c <HAL_DMA_Init+0x1c4>)
 801c150:	4293      	cmp	r3, r2
 801c152:	d03b      	beq.n	801c1cc <HAL_DMA_Init+0x174>
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	681b      	ldr	r3, [r3, #0]
 801c158:	4a31      	ldr	r2, [pc, #196]	@ (801c220 <HAL_DMA_Init+0x1c8>)
 801c15a:	4293      	cmp	r3, r2
 801c15c:	d036      	beq.n	801c1cc <HAL_DMA_Init+0x174>
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	681b      	ldr	r3, [r3, #0]
 801c162:	4a30      	ldr	r2, [pc, #192]	@ (801c224 <HAL_DMA_Init+0x1cc>)
 801c164:	4293      	cmp	r3, r2
 801c166:	d031      	beq.n	801c1cc <HAL_DMA_Init+0x174>
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	681b      	ldr	r3, [r3, #0]
 801c16c:	4a2e      	ldr	r2, [pc, #184]	@ (801c228 <HAL_DMA_Init+0x1d0>)
 801c16e:	4293      	cmp	r3, r2
 801c170:	d02c      	beq.n	801c1cc <HAL_DMA_Init+0x174>
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	4a2d      	ldr	r2, [pc, #180]	@ (801c22c <HAL_DMA_Init+0x1d4>)
 801c178:	4293      	cmp	r3, r2
 801c17a:	d027      	beq.n	801c1cc <HAL_DMA_Init+0x174>
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	681b      	ldr	r3, [r3, #0]
 801c180:	4a2b      	ldr	r2, [pc, #172]	@ (801c230 <HAL_DMA_Init+0x1d8>)
 801c182:	4293      	cmp	r3, r2
 801c184:	d022      	beq.n	801c1cc <HAL_DMA_Init+0x174>
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	4a2a      	ldr	r2, [pc, #168]	@ (801c234 <HAL_DMA_Init+0x1dc>)
 801c18c:	4293      	cmp	r3, r2
 801c18e:	d01d      	beq.n	801c1cc <HAL_DMA_Init+0x174>
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	4a28      	ldr	r2, [pc, #160]	@ (801c238 <HAL_DMA_Init+0x1e0>)
 801c196:	4293      	cmp	r3, r2
 801c198:	d018      	beq.n	801c1cc <HAL_DMA_Init+0x174>
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	4a27      	ldr	r2, [pc, #156]	@ (801c23c <HAL_DMA_Init+0x1e4>)
 801c1a0:	4293      	cmp	r3, r2
 801c1a2:	d013      	beq.n	801c1cc <HAL_DMA_Init+0x174>
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	4a25      	ldr	r2, [pc, #148]	@ (801c240 <HAL_DMA_Init+0x1e8>)
 801c1aa:	4293      	cmp	r3, r2
 801c1ac:	d00e      	beq.n	801c1cc <HAL_DMA_Init+0x174>
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	4a24      	ldr	r2, [pc, #144]	@ (801c244 <HAL_DMA_Init+0x1ec>)
 801c1b4:	4293      	cmp	r3, r2
 801c1b6:	d009      	beq.n	801c1cc <HAL_DMA_Init+0x174>
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	681b      	ldr	r3, [r3, #0]
 801c1bc:	4a22      	ldr	r2, [pc, #136]	@ (801c248 <HAL_DMA_Init+0x1f0>)
 801c1be:	4293      	cmp	r3, r2
 801c1c0:	d004      	beq.n	801c1cc <HAL_DMA_Init+0x174>
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	4a21      	ldr	r2, [pc, #132]	@ (801c24c <HAL_DMA_Init+0x1f4>)
 801c1c8:	4293      	cmp	r3, r2
 801c1ca:	d108      	bne.n	801c1de <HAL_DMA_Init+0x186>
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	681b      	ldr	r3, [r3, #0]
 801c1d0:	681a      	ldr	r2, [r3, #0]
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	681b      	ldr	r3, [r3, #0]
 801c1d6:	f022 0201 	bic.w	r2, r2, #1
 801c1da:	601a      	str	r2, [r3, #0]
 801c1dc:	e007      	b.n	801c1ee <HAL_DMA_Init+0x196>
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	681a      	ldr	r2, [r3, #0]
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	681b      	ldr	r3, [r3, #0]
 801c1e8:	f022 0201 	bic.w	r2, r2, #1
 801c1ec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801c1ee:	e02f      	b.n	801c250 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801c1f0:	f7ff fd54 	bl	801bc9c <HAL_GetTick>
 801c1f4:	4602      	mov	r2, r0
 801c1f6:	693b      	ldr	r3, [r7, #16]
 801c1f8:	1ad3      	subs	r3, r2, r3
 801c1fa:	2b05      	cmp	r3, #5
 801c1fc:	d928      	bls.n	801c250 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	2220      	movs	r2, #32
 801c202:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	2203      	movs	r2, #3
 801c208:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 801c20c:	2301      	movs	r3, #1
 801c20e:	e246      	b.n	801c69e <HAL_DMA_Init+0x646>
 801c210:	40020010 	.word	0x40020010
 801c214:	40020028 	.word	0x40020028
 801c218:	40020040 	.word	0x40020040
 801c21c:	40020058 	.word	0x40020058
 801c220:	40020070 	.word	0x40020070
 801c224:	40020088 	.word	0x40020088
 801c228:	400200a0 	.word	0x400200a0
 801c22c:	400200b8 	.word	0x400200b8
 801c230:	40020410 	.word	0x40020410
 801c234:	40020428 	.word	0x40020428
 801c238:	40020440 	.word	0x40020440
 801c23c:	40020458 	.word	0x40020458
 801c240:	40020470 	.word	0x40020470
 801c244:	40020488 	.word	0x40020488
 801c248:	400204a0 	.word	0x400204a0
 801c24c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	681b      	ldr	r3, [r3, #0]
 801c256:	f003 0301 	and.w	r3, r3, #1
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	d1c8      	bne.n	801c1f0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	681b      	ldr	r3, [r3, #0]
 801c264:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801c266:	697a      	ldr	r2, [r7, #20]
 801c268:	4b83      	ldr	r3, [pc, #524]	@ (801c478 <HAL_DMA_Init+0x420>)
 801c26a:	4013      	ands	r3, r2
 801c26c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801c276:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	691b      	ldr	r3, [r3, #16]
 801c27c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801c282:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	699b      	ldr	r3, [r3, #24]
 801c288:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801c28e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	6a1b      	ldr	r3, [r3, #32]
 801c294:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801c296:	697a      	ldr	r2, [r7, #20]
 801c298:	4313      	orrs	r3, r2
 801c29a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c2a0:	2b04      	cmp	r3, #4
 801c2a2:	d107      	bne.n	801c2b4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c2ac:	4313      	orrs	r3, r2
 801c2ae:	697a      	ldr	r2, [r7, #20]
 801c2b0:	4313      	orrs	r3, r2
 801c2b2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 801c2b4:	4b71      	ldr	r3, [pc, #452]	@ (801c47c <HAL_DMA_Init+0x424>)
 801c2b6:	681a      	ldr	r2, [r3, #0]
 801c2b8:	4b71      	ldr	r3, [pc, #452]	@ (801c480 <HAL_DMA_Init+0x428>)
 801c2ba:	4013      	ands	r3, r2
 801c2bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c2c0:	d328      	bcc.n	801c314 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	685b      	ldr	r3, [r3, #4]
 801c2c6:	2b28      	cmp	r3, #40	@ 0x28
 801c2c8:	d903      	bls.n	801c2d2 <HAL_DMA_Init+0x27a>
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	685b      	ldr	r3, [r3, #4]
 801c2ce:	2b2e      	cmp	r3, #46	@ 0x2e
 801c2d0:	d917      	bls.n	801c302 <HAL_DMA_Init+0x2aa>
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	685b      	ldr	r3, [r3, #4]
 801c2d6:	2b3e      	cmp	r3, #62	@ 0x3e
 801c2d8:	d903      	bls.n	801c2e2 <HAL_DMA_Init+0x28a>
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	685b      	ldr	r3, [r3, #4]
 801c2de:	2b42      	cmp	r3, #66	@ 0x42
 801c2e0:	d90f      	bls.n	801c302 <HAL_DMA_Init+0x2aa>
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	685b      	ldr	r3, [r3, #4]
 801c2e6:	2b46      	cmp	r3, #70	@ 0x46
 801c2e8:	d903      	bls.n	801c2f2 <HAL_DMA_Init+0x29a>
 801c2ea:	687b      	ldr	r3, [r7, #4]
 801c2ec:	685b      	ldr	r3, [r3, #4]
 801c2ee:	2b48      	cmp	r3, #72	@ 0x48
 801c2f0:	d907      	bls.n	801c302 <HAL_DMA_Init+0x2aa>
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	685b      	ldr	r3, [r3, #4]
 801c2f6:	2b4e      	cmp	r3, #78	@ 0x4e
 801c2f8:	d905      	bls.n	801c306 <HAL_DMA_Init+0x2ae>
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	685b      	ldr	r3, [r3, #4]
 801c2fe:	2b52      	cmp	r3, #82	@ 0x52
 801c300:	d801      	bhi.n	801c306 <HAL_DMA_Init+0x2ae>
 801c302:	2301      	movs	r3, #1
 801c304:	e000      	b.n	801c308 <HAL_DMA_Init+0x2b0>
 801c306:	2300      	movs	r3, #0
 801c308:	2b00      	cmp	r3, #0
 801c30a:	d003      	beq.n	801c314 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 801c30c:	697b      	ldr	r3, [r7, #20]
 801c30e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c312:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	697a      	ldr	r2, [r7, #20]
 801c31a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	695b      	ldr	r3, [r3, #20]
 801c322:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801c324:	697b      	ldr	r3, [r7, #20]
 801c326:	f023 0307 	bic.w	r3, r3, #7
 801c32a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c330:	697a      	ldr	r2, [r7, #20]
 801c332:	4313      	orrs	r3, r2
 801c334:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c33a:	2b04      	cmp	r3, #4
 801c33c:	d117      	bne.n	801c36e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c342:	697a      	ldr	r2, [r7, #20]
 801c344:	4313      	orrs	r3, r2
 801c346:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	d00e      	beq.n	801c36e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801c350:	6878      	ldr	r0, [r7, #4]
 801c352:	f001 fc23 	bl	801db9c <DMA_CheckFifoParam>
 801c356:	4603      	mov	r3, r0
 801c358:	2b00      	cmp	r3, #0
 801c35a:	d008      	beq.n	801c36e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	2240      	movs	r2, #64	@ 0x40
 801c360:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	2201      	movs	r2, #1
 801c366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 801c36a:	2301      	movs	r3, #1
 801c36c:	e197      	b.n	801c69e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	697a      	ldr	r2, [r7, #20]
 801c374:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801c376:	6878      	ldr	r0, [r7, #4]
 801c378:	f001 fb5e 	bl	801da38 <DMA_CalcBaseAndBitshift>
 801c37c:	4603      	mov	r3, r0
 801c37e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c384:	f003 031f 	and.w	r3, r3, #31
 801c388:	223f      	movs	r2, #63	@ 0x3f
 801c38a:	409a      	lsls	r2, r3
 801c38c:	68bb      	ldr	r3, [r7, #8]
 801c38e:	609a      	str	r2, [r3, #8]
 801c390:	e0cd      	b.n	801c52e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	4a3b      	ldr	r2, [pc, #236]	@ (801c484 <HAL_DMA_Init+0x42c>)
 801c398:	4293      	cmp	r3, r2
 801c39a:	d022      	beq.n	801c3e2 <HAL_DMA_Init+0x38a>
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	681b      	ldr	r3, [r3, #0]
 801c3a0:	4a39      	ldr	r2, [pc, #228]	@ (801c488 <HAL_DMA_Init+0x430>)
 801c3a2:	4293      	cmp	r3, r2
 801c3a4:	d01d      	beq.n	801c3e2 <HAL_DMA_Init+0x38a>
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	681b      	ldr	r3, [r3, #0]
 801c3aa:	4a38      	ldr	r2, [pc, #224]	@ (801c48c <HAL_DMA_Init+0x434>)
 801c3ac:	4293      	cmp	r3, r2
 801c3ae:	d018      	beq.n	801c3e2 <HAL_DMA_Init+0x38a>
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	4a36      	ldr	r2, [pc, #216]	@ (801c490 <HAL_DMA_Init+0x438>)
 801c3b6:	4293      	cmp	r3, r2
 801c3b8:	d013      	beq.n	801c3e2 <HAL_DMA_Init+0x38a>
 801c3ba:	687b      	ldr	r3, [r7, #4]
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	4a35      	ldr	r2, [pc, #212]	@ (801c494 <HAL_DMA_Init+0x43c>)
 801c3c0:	4293      	cmp	r3, r2
 801c3c2:	d00e      	beq.n	801c3e2 <HAL_DMA_Init+0x38a>
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	681b      	ldr	r3, [r3, #0]
 801c3c8:	4a33      	ldr	r2, [pc, #204]	@ (801c498 <HAL_DMA_Init+0x440>)
 801c3ca:	4293      	cmp	r3, r2
 801c3cc:	d009      	beq.n	801c3e2 <HAL_DMA_Init+0x38a>
 801c3ce:	687b      	ldr	r3, [r7, #4]
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	4a32      	ldr	r2, [pc, #200]	@ (801c49c <HAL_DMA_Init+0x444>)
 801c3d4:	4293      	cmp	r3, r2
 801c3d6:	d004      	beq.n	801c3e2 <HAL_DMA_Init+0x38a>
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	4a30      	ldr	r2, [pc, #192]	@ (801c4a0 <HAL_DMA_Init+0x448>)
 801c3de:	4293      	cmp	r3, r2
 801c3e0:	d101      	bne.n	801c3e6 <HAL_DMA_Init+0x38e>
 801c3e2:	2301      	movs	r3, #1
 801c3e4:	e000      	b.n	801c3e8 <HAL_DMA_Init+0x390>
 801c3e6:	2300      	movs	r3, #0
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	f000 8097 	beq.w	801c51c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	681b      	ldr	r3, [r3, #0]
 801c3f2:	4a24      	ldr	r2, [pc, #144]	@ (801c484 <HAL_DMA_Init+0x42c>)
 801c3f4:	4293      	cmp	r3, r2
 801c3f6:	d021      	beq.n	801c43c <HAL_DMA_Init+0x3e4>
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	4a22      	ldr	r2, [pc, #136]	@ (801c488 <HAL_DMA_Init+0x430>)
 801c3fe:	4293      	cmp	r3, r2
 801c400:	d01c      	beq.n	801c43c <HAL_DMA_Init+0x3e4>
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	681b      	ldr	r3, [r3, #0]
 801c406:	4a21      	ldr	r2, [pc, #132]	@ (801c48c <HAL_DMA_Init+0x434>)
 801c408:	4293      	cmp	r3, r2
 801c40a:	d017      	beq.n	801c43c <HAL_DMA_Init+0x3e4>
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	4a1f      	ldr	r2, [pc, #124]	@ (801c490 <HAL_DMA_Init+0x438>)
 801c412:	4293      	cmp	r3, r2
 801c414:	d012      	beq.n	801c43c <HAL_DMA_Init+0x3e4>
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	4a1e      	ldr	r2, [pc, #120]	@ (801c494 <HAL_DMA_Init+0x43c>)
 801c41c:	4293      	cmp	r3, r2
 801c41e:	d00d      	beq.n	801c43c <HAL_DMA_Init+0x3e4>
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	681b      	ldr	r3, [r3, #0]
 801c424:	4a1c      	ldr	r2, [pc, #112]	@ (801c498 <HAL_DMA_Init+0x440>)
 801c426:	4293      	cmp	r3, r2
 801c428:	d008      	beq.n	801c43c <HAL_DMA_Init+0x3e4>
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	681b      	ldr	r3, [r3, #0]
 801c42e:	4a1b      	ldr	r2, [pc, #108]	@ (801c49c <HAL_DMA_Init+0x444>)
 801c430:	4293      	cmp	r3, r2
 801c432:	d003      	beq.n	801c43c <HAL_DMA_Init+0x3e4>
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	681b      	ldr	r3, [r3, #0]
 801c438:	4a19      	ldr	r2, [pc, #100]	@ (801c4a0 <HAL_DMA_Init+0x448>)
 801c43a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	2202      	movs	r2, #2
 801c440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	2200      	movs	r2, #0
 801c448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801c454:	697a      	ldr	r2, [r7, #20]
 801c456:	4b13      	ldr	r3, [pc, #76]	@ (801c4a4 <HAL_DMA_Init+0x44c>)
 801c458:	4013      	ands	r3, r2
 801c45a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	689b      	ldr	r3, [r3, #8]
 801c460:	2b40      	cmp	r3, #64	@ 0x40
 801c462:	d021      	beq.n	801c4a8 <HAL_DMA_Init+0x450>
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	689b      	ldr	r3, [r3, #8]
 801c468:	2b80      	cmp	r3, #128	@ 0x80
 801c46a:	d102      	bne.n	801c472 <HAL_DMA_Init+0x41a>
 801c46c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801c470:	e01b      	b.n	801c4aa <HAL_DMA_Init+0x452>
 801c472:	2300      	movs	r3, #0
 801c474:	e019      	b.n	801c4aa <HAL_DMA_Init+0x452>
 801c476:	bf00      	nop
 801c478:	fe10803f 	.word	0xfe10803f
 801c47c:	5c001000 	.word	0x5c001000
 801c480:	ffff0000 	.word	0xffff0000
 801c484:	58025408 	.word	0x58025408
 801c488:	5802541c 	.word	0x5802541c
 801c48c:	58025430 	.word	0x58025430
 801c490:	58025444 	.word	0x58025444
 801c494:	58025458 	.word	0x58025458
 801c498:	5802546c 	.word	0x5802546c
 801c49c:	58025480 	.word	0x58025480
 801c4a0:	58025494 	.word	0x58025494
 801c4a4:	fffe000f 	.word	0xfffe000f
 801c4a8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801c4aa:	687a      	ldr	r2, [r7, #4]
 801c4ac:	68d2      	ldr	r2, [r2, #12]
 801c4ae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801c4b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	691b      	ldr	r3, [r3, #16]
 801c4b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801c4b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	695b      	ldr	r3, [r3, #20]
 801c4be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801c4c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	699b      	ldr	r3, [r3, #24]
 801c4c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801c4c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	69db      	ldr	r3, [r3, #28]
 801c4ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801c4d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	6a1b      	ldr	r3, [r3, #32]
 801c4d6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801c4d8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801c4da:	697a      	ldr	r2, [r7, #20]
 801c4dc:	4313      	orrs	r3, r2
 801c4de:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	697a      	ldr	r2, [r7, #20]
 801c4e6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	461a      	mov	r2, r3
 801c4ee:	4b6e      	ldr	r3, [pc, #440]	@ (801c6a8 <HAL_DMA_Init+0x650>)
 801c4f0:	4413      	add	r3, r2
 801c4f2:	4a6e      	ldr	r2, [pc, #440]	@ (801c6ac <HAL_DMA_Init+0x654>)
 801c4f4:	fba2 2303 	umull	r2, r3, r2, r3
 801c4f8:	091b      	lsrs	r3, r3, #4
 801c4fa:	009a      	lsls	r2, r3, #2
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801c500:	6878      	ldr	r0, [r7, #4]
 801c502:	f001 fa99 	bl	801da38 <DMA_CalcBaseAndBitshift>
 801c506:	4603      	mov	r3, r0
 801c508:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c50e:	f003 031f 	and.w	r3, r3, #31
 801c512:	2201      	movs	r2, #1
 801c514:	409a      	lsls	r2, r3
 801c516:	68fb      	ldr	r3, [r7, #12]
 801c518:	605a      	str	r2, [r3, #4]
 801c51a:	e008      	b.n	801c52e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	2240      	movs	r2, #64	@ 0x40
 801c520:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	2203      	movs	r2, #3
 801c526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 801c52a:	2301      	movs	r3, #1
 801c52c:	e0b7      	b.n	801c69e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	681b      	ldr	r3, [r3, #0]
 801c532:	4a5f      	ldr	r2, [pc, #380]	@ (801c6b0 <HAL_DMA_Init+0x658>)
 801c534:	4293      	cmp	r3, r2
 801c536:	d072      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	681b      	ldr	r3, [r3, #0]
 801c53c:	4a5d      	ldr	r2, [pc, #372]	@ (801c6b4 <HAL_DMA_Init+0x65c>)
 801c53e:	4293      	cmp	r3, r2
 801c540:	d06d      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	4a5c      	ldr	r2, [pc, #368]	@ (801c6b8 <HAL_DMA_Init+0x660>)
 801c548:	4293      	cmp	r3, r2
 801c54a:	d068      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	4a5a      	ldr	r2, [pc, #360]	@ (801c6bc <HAL_DMA_Init+0x664>)
 801c552:	4293      	cmp	r3, r2
 801c554:	d063      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	681b      	ldr	r3, [r3, #0]
 801c55a:	4a59      	ldr	r2, [pc, #356]	@ (801c6c0 <HAL_DMA_Init+0x668>)
 801c55c:	4293      	cmp	r3, r2
 801c55e:	d05e      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	4a57      	ldr	r2, [pc, #348]	@ (801c6c4 <HAL_DMA_Init+0x66c>)
 801c566:	4293      	cmp	r3, r2
 801c568:	d059      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	681b      	ldr	r3, [r3, #0]
 801c56e:	4a56      	ldr	r2, [pc, #344]	@ (801c6c8 <HAL_DMA_Init+0x670>)
 801c570:	4293      	cmp	r3, r2
 801c572:	d054      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	681b      	ldr	r3, [r3, #0]
 801c578:	4a54      	ldr	r2, [pc, #336]	@ (801c6cc <HAL_DMA_Init+0x674>)
 801c57a:	4293      	cmp	r3, r2
 801c57c:	d04f      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	681b      	ldr	r3, [r3, #0]
 801c582:	4a53      	ldr	r2, [pc, #332]	@ (801c6d0 <HAL_DMA_Init+0x678>)
 801c584:	4293      	cmp	r3, r2
 801c586:	d04a      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	4a51      	ldr	r2, [pc, #324]	@ (801c6d4 <HAL_DMA_Init+0x67c>)
 801c58e:	4293      	cmp	r3, r2
 801c590:	d045      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	4a50      	ldr	r2, [pc, #320]	@ (801c6d8 <HAL_DMA_Init+0x680>)
 801c598:	4293      	cmp	r3, r2
 801c59a:	d040      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	681b      	ldr	r3, [r3, #0]
 801c5a0:	4a4e      	ldr	r2, [pc, #312]	@ (801c6dc <HAL_DMA_Init+0x684>)
 801c5a2:	4293      	cmp	r3, r2
 801c5a4:	d03b      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	681b      	ldr	r3, [r3, #0]
 801c5aa:	4a4d      	ldr	r2, [pc, #308]	@ (801c6e0 <HAL_DMA_Init+0x688>)
 801c5ac:	4293      	cmp	r3, r2
 801c5ae:	d036      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	681b      	ldr	r3, [r3, #0]
 801c5b4:	4a4b      	ldr	r2, [pc, #300]	@ (801c6e4 <HAL_DMA_Init+0x68c>)
 801c5b6:	4293      	cmp	r3, r2
 801c5b8:	d031      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	681b      	ldr	r3, [r3, #0]
 801c5be:	4a4a      	ldr	r2, [pc, #296]	@ (801c6e8 <HAL_DMA_Init+0x690>)
 801c5c0:	4293      	cmp	r3, r2
 801c5c2:	d02c      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	4a48      	ldr	r2, [pc, #288]	@ (801c6ec <HAL_DMA_Init+0x694>)
 801c5ca:	4293      	cmp	r3, r2
 801c5cc:	d027      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	681b      	ldr	r3, [r3, #0]
 801c5d2:	4a47      	ldr	r2, [pc, #284]	@ (801c6f0 <HAL_DMA_Init+0x698>)
 801c5d4:	4293      	cmp	r3, r2
 801c5d6:	d022      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	681b      	ldr	r3, [r3, #0]
 801c5dc:	4a45      	ldr	r2, [pc, #276]	@ (801c6f4 <HAL_DMA_Init+0x69c>)
 801c5de:	4293      	cmp	r3, r2
 801c5e0:	d01d      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	4a44      	ldr	r2, [pc, #272]	@ (801c6f8 <HAL_DMA_Init+0x6a0>)
 801c5e8:	4293      	cmp	r3, r2
 801c5ea:	d018      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	4a42      	ldr	r2, [pc, #264]	@ (801c6fc <HAL_DMA_Init+0x6a4>)
 801c5f2:	4293      	cmp	r3, r2
 801c5f4:	d013      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	4a41      	ldr	r2, [pc, #260]	@ (801c700 <HAL_DMA_Init+0x6a8>)
 801c5fc:	4293      	cmp	r3, r2
 801c5fe:	d00e      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	681b      	ldr	r3, [r3, #0]
 801c604:	4a3f      	ldr	r2, [pc, #252]	@ (801c704 <HAL_DMA_Init+0x6ac>)
 801c606:	4293      	cmp	r3, r2
 801c608:	d009      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	4a3e      	ldr	r2, [pc, #248]	@ (801c708 <HAL_DMA_Init+0x6b0>)
 801c610:	4293      	cmp	r3, r2
 801c612:	d004      	beq.n	801c61e <HAL_DMA_Init+0x5c6>
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	681b      	ldr	r3, [r3, #0]
 801c618:	4a3c      	ldr	r2, [pc, #240]	@ (801c70c <HAL_DMA_Init+0x6b4>)
 801c61a:	4293      	cmp	r3, r2
 801c61c:	d101      	bne.n	801c622 <HAL_DMA_Init+0x5ca>
 801c61e:	2301      	movs	r3, #1
 801c620:	e000      	b.n	801c624 <HAL_DMA_Init+0x5cc>
 801c622:	2300      	movs	r3, #0
 801c624:	2b00      	cmp	r3, #0
 801c626:	d032      	beq.n	801c68e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801c628:	6878      	ldr	r0, [r7, #4]
 801c62a:	f001 fb33 	bl	801dc94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	689b      	ldr	r3, [r3, #8]
 801c632:	2b80      	cmp	r3, #128	@ 0x80
 801c634:	d102      	bne.n	801c63c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	2200      	movs	r2, #0
 801c63a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	685a      	ldr	r2, [r3, #4]
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c644:	b2d2      	uxtb	r2, r2
 801c646:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801c64c:	687a      	ldr	r2, [r7, #4]
 801c64e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801c650:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	685b      	ldr	r3, [r3, #4]
 801c656:	2b00      	cmp	r3, #0
 801c658:	d010      	beq.n	801c67c <HAL_DMA_Init+0x624>
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	685b      	ldr	r3, [r3, #4]
 801c65e:	2b08      	cmp	r3, #8
 801c660:	d80c      	bhi.n	801c67c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801c662:	6878      	ldr	r0, [r7, #4]
 801c664:	f001 fbb0 	bl	801ddc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c66c:	2200      	movs	r2, #0
 801c66e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c674:	687a      	ldr	r2, [r7, #4]
 801c676:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801c678:	605a      	str	r2, [r3, #4]
 801c67a:	e008      	b.n	801c68e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	2200      	movs	r2, #0
 801c680:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	2200      	movs	r2, #0
 801c686:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	2200      	movs	r2, #0
 801c68c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	2200      	movs	r2, #0
 801c692:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	2201      	movs	r2, #1
 801c698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801c69c:	2300      	movs	r3, #0
}
 801c69e:	4618      	mov	r0, r3
 801c6a0:	3718      	adds	r7, #24
 801c6a2:	46bd      	mov	sp, r7
 801c6a4:	bd80      	pop	{r7, pc}
 801c6a6:	bf00      	nop
 801c6a8:	a7fdabf8 	.word	0xa7fdabf8
 801c6ac:	cccccccd 	.word	0xcccccccd
 801c6b0:	40020010 	.word	0x40020010
 801c6b4:	40020028 	.word	0x40020028
 801c6b8:	40020040 	.word	0x40020040
 801c6bc:	40020058 	.word	0x40020058
 801c6c0:	40020070 	.word	0x40020070
 801c6c4:	40020088 	.word	0x40020088
 801c6c8:	400200a0 	.word	0x400200a0
 801c6cc:	400200b8 	.word	0x400200b8
 801c6d0:	40020410 	.word	0x40020410
 801c6d4:	40020428 	.word	0x40020428
 801c6d8:	40020440 	.word	0x40020440
 801c6dc:	40020458 	.word	0x40020458
 801c6e0:	40020470 	.word	0x40020470
 801c6e4:	40020488 	.word	0x40020488
 801c6e8:	400204a0 	.word	0x400204a0
 801c6ec:	400204b8 	.word	0x400204b8
 801c6f0:	58025408 	.word	0x58025408
 801c6f4:	5802541c 	.word	0x5802541c
 801c6f8:	58025430 	.word	0x58025430
 801c6fc:	58025444 	.word	0x58025444
 801c700:	58025458 	.word	0x58025458
 801c704:	5802546c 	.word	0x5802546c
 801c708:	58025480 	.word	0x58025480
 801c70c:	58025494 	.word	0x58025494

0801c710 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801c710:	b580      	push	{r7, lr}
 801c712:	b086      	sub	sp, #24
 801c714:	af00      	add	r7, sp, #0
 801c716:	60f8      	str	r0, [r7, #12]
 801c718:	60b9      	str	r1, [r7, #8]
 801c71a:	607a      	str	r2, [r7, #4]
 801c71c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801c71e:	2300      	movs	r3, #0
 801c720:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801c722:	68fb      	ldr	r3, [r7, #12]
 801c724:	2b00      	cmp	r3, #0
 801c726:	d101      	bne.n	801c72c <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 801c728:	2301      	movs	r3, #1
 801c72a:	e0ec      	b.n	801c906 <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 801c72c:	68fb      	ldr	r3, [r7, #12]
 801c72e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801c732:	2b01      	cmp	r3, #1
 801c734:	d101      	bne.n	801c73a <HAL_DMA_Start+0x2a>
 801c736:	2302      	movs	r3, #2
 801c738:	e0e5      	b.n	801c906 <HAL_DMA_Start+0x1f6>
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	2201      	movs	r2, #1
 801c73e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801c748:	b2db      	uxtb	r3, r3
 801c74a:	2b01      	cmp	r3, #1
 801c74c:	f040 80d0 	bne.w	801c8f0 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801c750:	68fb      	ldr	r3, [r7, #12]
 801c752:	2202      	movs	r2, #2
 801c754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801c758:	68fb      	ldr	r3, [r7, #12]
 801c75a:	2200      	movs	r2, #0
 801c75c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801c75e:	68fb      	ldr	r3, [r7, #12]
 801c760:	681b      	ldr	r3, [r3, #0]
 801c762:	4a6b      	ldr	r2, [pc, #428]	@ (801c910 <HAL_DMA_Start+0x200>)
 801c764:	4293      	cmp	r3, r2
 801c766:	d04a      	beq.n	801c7fe <HAL_DMA_Start+0xee>
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	4a69      	ldr	r2, [pc, #420]	@ (801c914 <HAL_DMA_Start+0x204>)
 801c76e:	4293      	cmp	r3, r2
 801c770:	d045      	beq.n	801c7fe <HAL_DMA_Start+0xee>
 801c772:	68fb      	ldr	r3, [r7, #12]
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	4a68      	ldr	r2, [pc, #416]	@ (801c918 <HAL_DMA_Start+0x208>)
 801c778:	4293      	cmp	r3, r2
 801c77a:	d040      	beq.n	801c7fe <HAL_DMA_Start+0xee>
 801c77c:	68fb      	ldr	r3, [r7, #12]
 801c77e:	681b      	ldr	r3, [r3, #0]
 801c780:	4a66      	ldr	r2, [pc, #408]	@ (801c91c <HAL_DMA_Start+0x20c>)
 801c782:	4293      	cmp	r3, r2
 801c784:	d03b      	beq.n	801c7fe <HAL_DMA_Start+0xee>
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	681b      	ldr	r3, [r3, #0]
 801c78a:	4a65      	ldr	r2, [pc, #404]	@ (801c920 <HAL_DMA_Start+0x210>)
 801c78c:	4293      	cmp	r3, r2
 801c78e:	d036      	beq.n	801c7fe <HAL_DMA_Start+0xee>
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	4a63      	ldr	r2, [pc, #396]	@ (801c924 <HAL_DMA_Start+0x214>)
 801c796:	4293      	cmp	r3, r2
 801c798:	d031      	beq.n	801c7fe <HAL_DMA_Start+0xee>
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	4a62      	ldr	r2, [pc, #392]	@ (801c928 <HAL_DMA_Start+0x218>)
 801c7a0:	4293      	cmp	r3, r2
 801c7a2:	d02c      	beq.n	801c7fe <HAL_DMA_Start+0xee>
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	4a60      	ldr	r2, [pc, #384]	@ (801c92c <HAL_DMA_Start+0x21c>)
 801c7aa:	4293      	cmp	r3, r2
 801c7ac:	d027      	beq.n	801c7fe <HAL_DMA_Start+0xee>
 801c7ae:	68fb      	ldr	r3, [r7, #12]
 801c7b0:	681b      	ldr	r3, [r3, #0]
 801c7b2:	4a5f      	ldr	r2, [pc, #380]	@ (801c930 <HAL_DMA_Start+0x220>)
 801c7b4:	4293      	cmp	r3, r2
 801c7b6:	d022      	beq.n	801c7fe <HAL_DMA_Start+0xee>
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	681b      	ldr	r3, [r3, #0]
 801c7bc:	4a5d      	ldr	r2, [pc, #372]	@ (801c934 <HAL_DMA_Start+0x224>)
 801c7be:	4293      	cmp	r3, r2
 801c7c0:	d01d      	beq.n	801c7fe <HAL_DMA_Start+0xee>
 801c7c2:	68fb      	ldr	r3, [r7, #12]
 801c7c4:	681b      	ldr	r3, [r3, #0]
 801c7c6:	4a5c      	ldr	r2, [pc, #368]	@ (801c938 <HAL_DMA_Start+0x228>)
 801c7c8:	4293      	cmp	r3, r2
 801c7ca:	d018      	beq.n	801c7fe <HAL_DMA_Start+0xee>
 801c7cc:	68fb      	ldr	r3, [r7, #12]
 801c7ce:	681b      	ldr	r3, [r3, #0]
 801c7d0:	4a5a      	ldr	r2, [pc, #360]	@ (801c93c <HAL_DMA_Start+0x22c>)
 801c7d2:	4293      	cmp	r3, r2
 801c7d4:	d013      	beq.n	801c7fe <HAL_DMA_Start+0xee>
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	681b      	ldr	r3, [r3, #0]
 801c7da:	4a59      	ldr	r2, [pc, #356]	@ (801c940 <HAL_DMA_Start+0x230>)
 801c7dc:	4293      	cmp	r3, r2
 801c7de:	d00e      	beq.n	801c7fe <HAL_DMA_Start+0xee>
 801c7e0:	68fb      	ldr	r3, [r7, #12]
 801c7e2:	681b      	ldr	r3, [r3, #0]
 801c7e4:	4a57      	ldr	r2, [pc, #348]	@ (801c944 <HAL_DMA_Start+0x234>)
 801c7e6:	4293      	cmp	r3, r2
 801c7e8:	d009      	beq.n	801c7fe <HAL_DMA_Start+0xee>
 801c7ea:	68fb      	ldr	r3, [r7, #12]
 801c7ec:	681b      	ldr	r3, [r3, #0]
 801c7ee:	4a56      	ldr	r2, [pc, #344]	@ (801c948 <HAL_DMA_Start+0x238>)
 801c7f0:	4293      	cmp	r3, r2
 801c7f2:	d004      	beq.n	801c7fe <HAL_DMA_Start+0xee>
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	681b      	ldr	r3, [r3, #0]
 801c7f8:	4a54      	ldr	r2, [pc, #336]	@ (801c94c <HAL_DMA_Start+0x23c>)
 801c7fa:	4293      	cmp	r3, r2
 801c7fc:	d108      	bne.n	801c810 <HAL_DMA_Start+0x100>
 801c7fe:	68fb      	ldr	r3, [r7, #12]
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	681a      	ldr	r2, [r3, #0]
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	f022 0201 	bic.w	r2, r2, #1
 801c80c:	601a      	str	r2, [r3, #0]
 801c80e:	e007      	b.n	801c820 <HAL_DMA_Start+0x110>
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	681b      	ldr	r3, [r3, #0]
 801c814:	681a      	ldr	r2, [r3, #0]
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	f022 0201 	bic.w	r2, r2, #1
 801c81e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801c820:	683b      	ldr	r3, [r7, #0]
 801c822:	687a      	ldr	r2, [r7, #4]
 801c824:	68b9      	ldr	r1, [r7, #8]
 801c826:	68f8      	ldr	r0, [r7, #12]
 801c828:	f000 ff5a 	bl	801d6e0 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	4a37      	ldr	r2, [pc, #220]	@ (801c910 <HAL_DMA_Start+0x200>)
 801c832:	4293      	cmp	r3, r2
 801c834:	d04a      	beq.n	801c8cc <HAL_DMA_Start+0x1bc>
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	681b      	ldr	r3, [r3, #0]
 801c83a:	4a36      	ldr	r2, [pc, #216]	@ (801c914 <HAL_DMA_Start+0x204>)
 801c83c:	4293      	cmp	r3, r2
 801c83e:	d045      	beq.n	801c8cc <HAL_DMA_Start+0x1bc>
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	681b      	ldr	r3, [r3, #0]
 801c844:	4a34      	ldr	r2, [pc, #208]	@ (801c918 <HAL_DMA_Start+0x208>)
 801c846:	4293      	cmp	r3, r2
 801c848:	d040      	beq.n	801c8cc <HAL_DMA_Start+0x1bc>
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	4a33      	ldr	r2, [pc, #204]	@ (801c91c <HAL_DMA_Start+0x20c>)
 801c850:	4293      	cmp	r3, r2
 801c852:	d03b      	beq.n	801c8cc <HAL_DMA_Start+0x1bc>
 801c854:	68fb      	ldr	r3, [r7, #12]
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	4a31      	ldr	r2, [pc, #196]	@ (801c920 <HAL_DMA_Start+0x210>)
 801c85a:	4293      	cmp	r3, r2
 801c85c:	d036      	beq.n	801c8cc <HAL_DMA_Start+0x1bc>
 801c85e:	68fb      	ldr	r3, [r7, #12]
 801c860:	681b      	ldr	r3, [r3, #0]
 801c862:	4a30      	ldr	r2, [pc, #192]	@ (801c924 <HAL_DMA_Start+0x214>)
 801c864:	4293      	cmp	r3, r2
 801c866:	d031      	beq.n	801c8cc <HAL_DMA_Start+0x1bc>
 801c868:	68fb      	ldr	r3, [r7, #12]
 801c86a:	681b      	ldr	r3, [r3, #0]
 801c86c:	4a2e      	ldr	r2, [pc, #184]	@ (801c928 <HAL_DMA_Start+0x218>)
 801c86e:	4293      	cmp	r3, r2
 801c870:	d02c      	beq.n	801c8cc <HAL_DMA_Start+0x1bc>
 801c872:	68fb      	ldr	r3, [r7, #12]
 801c874:	681b      	ldr	r3, [r3, #0]
 801c876:	4a2d      	ldr	r2, [pc, #180]	@ (801c92c <HAL_DMA_Start+0x21c>)
 801c878:	4293      	cmp	r3, r2
 801c87a:	d027      	beq.n	801c8cc <HAL_DMA_Start+0x1bc>
 801c87c:	68fb      	ldr	r3, [r7, #12]
 801c87e:	681b      	ldr	r3, [r3, #0]
 801c880:	4a2b      	ldr	r2, [pc, #172]	@ (801c930 <HAL_DMA_Start+0x220>)
 801c882:	4293      	cmp	r3, r2
 801c884:	d022      	beq.n	801c8cc <HAL_DMA_Start+0x1bc>
 801c886:	68fb      	ldr	r3, [r7, #12]
 801c888:	681b      	ldr	r3, [r3, #0]
 801c88a:	4a2a      	ldr	r2, [pc, #168]	@ (801c934 <HAL_DMA_Start+0x224>)
 801c88c:	4293      	cmp	r3, r2
 801c88e:	d01d      	beq.n	801c8cc <HAL_DMA_Start+0x1bc>
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	681b      	ldr	r3, [r3, #0]
 801c894:	4a28      	ldr	r2, [pc, #160]	@ (801c938 <HAL_DMA_Start+0x228>)
 801c896:	4293      	cmp	r3, r2
 801c898:	d018      	beq.n	801c8cc <HAL_DMA_Start+0x1bc>
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	4a27      	ldr	r2, [pc, #156]	@ (801c93c <HAL_DMA_Start+0x22c>)
 801c8a0:	4293      	cmp	r3, r2
 801c8a2:	d013      	beq.n	801c8cc <HAL_DMA_Start+0x1bc>
 801c8a4:	68fb      	ldr	r3, [r7, #12]
 801c8a6:	681b      	ldr	r3, [r3, #0]
 801c8a8:	4a25      	ldr	r2, [pc, #148]	@ (801c940 <HAL_DMA_Start+0x230>)
 801c8aa:	4293      	cmp	r3, r2
 801c8ac:	d00e      	beq.n	801c8cc <HAL_DMA_Start+0x1bc>
 801c8ae:	68fb      	ldr	r3, [r7, #12]
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	4a24      	ldr	r2, [pc, #144]	@ (801c944 <HAL_DMA_Start+0x234>)
 801c8b4:	4293      	cmp	r3, r2
 801c8b6:	d009      	beq.n	801c8cc <HAL_DMA_Start+0x1bc>
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	4a22      	ldr	r2, [pc, #136]	@ (801c948 <HAL_DMA_Start+0x238>)
 801c8be:	4293      	cmp	r3, r2
 801c8c0:	d004      	beq.n	801c8cc <HAL_DMA_Start+0x1bc>
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	681b      	ldr	r3, [r3, #0]
 801c8c6:	4a21      	ldr	r2, [pc, #132]	@ (801c94c <HAL_DMA_Start+0x23c>)
 801c8c8:	4293      	cmp	r3, r2
 801c8ca:	d108      	bne.n	801c8de <HAL_DMA_Start+0x1ce>
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	681b      	ldr	r3, [r3, #0]
 801c8d0:	681a      	ldr	r2, [r3, #0]
 801c8d2:	68fb      	ldr	r3, [r7, #12]
 801c8d4:	681b      	ldr	r3, [r3, #0]
 801c8d6:	f042 0201 	orr.w	r2, r2, #1
 801c8da:	601a      	str	r2, [r3, #0]
 801c8dc:	e012      	b.n	801c904 <HAL_DMA_Start+0x1f4>
 801c8de:	68fb      	ldr	r3, [r7, #12]
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	681a      	ldr	r2, [r3, #0]
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	681b      	ldr	r3, [r3, #0]
 801c8e8:	f042 0201 	orr.w	r2, r2, #1
 801c8ec:	601a      	str	r2, [r3, #0]
 801c8ee:	e009      	b.n	801c904 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c8f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 801c8f8:	68fb      	ldr	r3, [r7, #12]
 801c8fa:	2200      	movs	r2, #0
 801c8fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 801c900:	2301      	movs	r3, #1
 801c902:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801c904:	7dfb      	ldrb	r3, [r7, #23]
}
 801c906:	4618      	mov	r0, r3
 801c908:	3718      	adds	r7, #24
 801c90a:	46bd      	mov	sp, r7
 801c90c:	bd80      	pop	{r7, pc}
 801c90e:	bf00      	nop
 801c910:	40020010 	.word	0x40020010
 801c914:	40020028 	.word	0x40020028
 801c918:	40020040 	.word	0x40020040
 801c91c:	40020058 	.word	0x40020058
 801c920:	40020070 	.word	0x40020070
 801c924:	40020088 	.word	0x40020088
 801c928:	400200a0 	.word	0x400200a0
 801c92c:	400200b8 	.word	0x400200b8
 801c930:	40020410 	.word	0x40020410
 801c934:	40020428 	.word	0x40020428
 801c938:	40020440 	.word	0x40020440
 801c93c:	40020458 	.word	0x40020458
 801c940:	40020470 	.word	0x40020470
 801c944:	40020488 	.word	0x40020488
 801c948:	400204a0 	.word	0x400204a0
 801c94c:	400204b8 	.word	0x400204b8

0801c950 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801c950:	b580      	push	{r7, lr}
 801c952:	b086      	sub	sp, #24
 801c954:	af00      	add	r7, sp, #0
 801c956:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 801c958:	f7ff f9a0 	bl	801bc9c <HAL_GetTick>
 801c95c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	2b00      	cmp	r3, #0
 801c962:	d101      	bne.n	801c968 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 801c964:	2301      	movs	r3, #1
 801c966:	e2dc      	b.n	801cf22 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801c96e:	b2db      	uxtb	r3, r3
 801c970:	2b02      	cmp	r3, #2
 801c972:	d008      	beq.n	801c986 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	2280      	movs	r2, #128	@ 0x80
 801c978:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	2200      	movs	r2, #0
 801c97e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 801c982:	2301      	movs	r3, #1
 801c984:	e2cd      	b.n	801cf22 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	681b      	ldr	r3, [r3, #0]
 801c98a:	4a76      	ldr	r2, [pc, #472]	@ (801cb64 <HAL_DMA_Abort+0x214>)
 801c98c:	4293      	cmp	r3, r2
 801c98e:	d04a      	beq.n	801ca26 <HAL_DMA_Abort+0xd6>
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	4a74      	ldr	r2, [pc, #464]	@ (801cb68 <HAL_DMA_Abort+0x218>)
 801c996:	4293      	cmp	r3, r2
 801c998:	d045      	beq.n	801ca26 <HAL_DMA_Abort+0xd6>
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	4a73      	ldr	r2, [pc, #460]	@ (801cb6c <HAL_DMA_Abort+0x21c>)
 801c9a0:	4293      	cmp	r3, r2
 801c9a2:	d040      	beq.n	801ca26 <HAL_DMA_Abort+0xd6>
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	4a71      	ldr	r2, [pc, #452]	@ (801cb70 <HAL_DMA_Abort+0x220>)
 801c9aa:	4293      	cmp	r3, r2
 801c9ac:	d03b      	beq.n	801ca26 <HAL_DMA_Abort+0xd6>
 801c9ae:	687b      	ldr	r3, [r7, #4]
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	4a70      	ldr	r2, [pc, #448]	@ (801cb74 <HAL_DMA_Abort+0x224>)
 801c9b4:	4293      	cmp	r3, r2
 801c9b6:	d036      	beq.n	801ca26 <HAL_DMA_Abort+0xd6>
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	4a6e      	ldr	r2, [pc, #440]	@ (801cb78 <HAL_DMA_Abort+0x228>)
 801c9be:	4293      	cmp	r3, r2
 801c9c0:	d031      	beq.n	801ca26 <HAL_DMA_Abort+0xd6>
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	681b      	ldr	r3, [r3, #0]
 801c9c6:	4a6d      	ldr	r2, [pc, #436]	@ (801cb7c <HAL_DMA_Abort+0x22c>)
 801c9c8:	4293      	cmp	r3, r2
 801c9ca:	d02c      	beq.n	801ca26 <HAL_DMA_Abort+0xd6>
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	681b      	ldr	r3, [r3, #0]
 801c9d0:	4a6b      	ldr	r2, [pc, #428]	@ (801cb80 <HAL_DMA_Abort+0x230>)
 801c9d2:	4293      	cmp	r3, r2
 801c9d4:	d027      	beq.n	801ca26 <HAL_DMA_Abort+0xd6>
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	681b      	ldr	r3, [r3, #0]
 801c9da:	4a6a      	ldr	r2, [pc, #424]	@ (801cb84 <HAL_DMA_Abort+0x234>)
 801c9dc:	4293      	cmp	r3, r2
 801c9de:	d022      	beq.n	801ca26 <HAL_DMA_Abort+0xd6>
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	681b      	ldr	r3, [r3, #0]
 801c9e4:	4a68      	ldr	r2, [pc, #416]	@ (801cb88 <HAL_DMA_Abort+0x238>)
 801c9e6:	4293      	cmp	r3, r2
 801c9e8:	d01d      	beq.n	801ca26 <HAL_DMA_Abort+0xd6>
 801c9ea:	687b      	ldr	r3, [r7, #4]
 801c9ec:	681b      	ldr	r3, [r3, #0]
 801c9ee:	4a67      	ldr	r2, [pc, #412]	@ (801cb8c <HAL_DMA_Abort+0x23c>)
 801c9f0:	4293      	cmp	r3, r2
 801c9f2:	d018      	beq.n	801ca26 <HAL_DMA_Abort+0xd6>
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	681b      	ldr	r3, [r3, #0]
 801c9f8:	4a65      	ldr	r2, [pc, #404]	@ (801cb90 <HAL_DMA_Abort+0x240>)
 801c9fa:	4293      	cmp	r3, r2
 801c9fc:	d013      	beq.n	801ca26 <HAL_DMA_Abort+0xd6>
 801c9fe:	687b      	ldr	r3, [r7, #4]
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	4a64      	ldr	r2, [pc, #400]	@ (801cb94 <HAL_DMA_Abort+0x244>)
 801ca04:	4293      	cmp	r3, r2
 801ca06:	d00e      	beq.n	801ca26 <HAL_DMA_Abort+0xd6>
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	4a62      	ldr	r2, [pc, #392]	@ (801cb98 <HAL_DMA_Abort+0x248>)
 801ca0e:	4293      	cmp	r3, r2
 801ca10:	d009      	beq.n	801ca26 <HAL_DMA_Abort+0xd6>
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	681b      	ldr	r3, [r3, #0]
 801ca16:	4a61      	ldr	r2, [pc, #388]	@ (801cb9c <HAL_DMA_Abort+0x24c>)
 801ca18:	4293      	cmp	r3, r2
 801ca1a:	d004      	beq.n	801ca26 <HAL_DMA_Abort+0xd6>
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	4a5f      	ldr	r2, [pc, #380]	@ (801cba0 <HAL_DMA_Abort+0x250>)
 801ca22:	4293      	cmp	r3, r2
 801ca24:	d101      	bne.n	801ca2a <HAL_DMA_Abort+0xda>
 801ca26:	2301      	movs	r3, #1
 801ca28:	e000      	b.n	801ca2c <HAL_DMA_Abort+0xdc>
 801ca2a:	2300      	movs	r3, #0
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d013      	beq.n	801ca58 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	681a      	ldr	r2, [r3, #0]
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	681b      	ldr	r3, [r3, #0]
 801ca3a:	f022 021e 	bic.w	r2, r2, #30
 801ca3e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	681b      	ldr	r3, [r3, #0]
 801ca44:	695a      	ldr	r2, [r3, #20]
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	681b      	ldr	r3, [r3, #0]
 801ca4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801ca4e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	681b      	ldr	r3, [r3, #0]
 801ca54:	617b      	str	r3, [r7, #20]
 801ca56:	e00a      	b.n	801ca6e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801ca58:	687b      	ldr	r3, [r7, #4]
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	681a      	ldr	r2, [r3, #0]
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	681b      	ldr	r3, [r3, #0]
 801ca62:	f022 020e 	bic.w	r2, r2, #14
 801ca66:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	681b      	ldr	r3, [r3, #0]
 801ca6c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	4a3c      	ldr	r2, [pc, #240]	@ (801cb64 <HAL_DMA_Abort+0x214>)
 801ca74:	4293      	cmp	r3, r2
 801ca76:	d072      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	4a3a      	ldr	r2, [pc, #232]	@ (801cb68 <HAL_DMA_Abort+0x218>)
 801ca7e:	4293      	cmp	r3, r2
 801ca80:	d06d      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	681b      	ldr	r3, [r3, #0]
 801ca86:	4a39      	ldr	r2, [pc, #228]	@ (801cb6c <HAL_DMA_Abort+0x21c>)
 801ca88:	4293      	cmp	r3, r2
 801ca8a:	d068      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	681b      	ldr	r3, [r3, #0]
 801ca90:	4a37      	ldr	r2, [pc, #220]	@ (801cb70 <HAL_DMA_Abort+0x220>)
 801ca92:	4293      	cmp	r3, r2
 801ca94:	d063      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801ca96:	687b      	ldr	r3, [r7, #4]
 801ca98:	681b      	ldr	r3, [r3, #0]
 801ca9a:	4a36      	ldr	r2, [pc, #216]	@ (801cb74 <HAL_DMA_Abort+0x224>)
 801ca9c:	4293      	cmp	r3, r2
 801ca9e:	d05e      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	681b      	ldr	r3, [r3, #0]
 801caa4:	4a34      	ldr	r2, [pc, #208]	@ (801cb78 <HAL_DMA_Abort+0x228>)
 801caa6:	4293      	cmp	r3, r2
 801caa8:	d059      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	4a33      	ldr	r2, [pc, #204]	@ (801cb7c <HAL_DMA_Abort+0x22c>)
 801cab0:	4293      	cmp	r3, r2
 801cab2:	d054      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	681b      	ldr	r3, [r3, #0]
 801cab8:	4a31      	ldr	r2, [pc, #196]	@ (801cb80 <HAL_DMA_Abort+0x230>)
 801caba:	4293      	cmp	r3, r2
 801cabc:	d04f      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	681b      	ldr	r3, [r3, #0]
 801cac2:	4a30      	ldr	r2, [pc, #192]	@ (801cb84 <HAL_DMA_Abort+0x234>)
 801cac4:	4293      	cmp	r3, r2
 801cac6:	d04a      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	4a2e      	ldr	r2, [pc, #184]	@ (801cb88 <HAL_DMA_Abort+0x238>)
 801cace:	4293      	cmp	r3, r2
 801cad0:	d045      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	4a2d      	ldr	r2, [pc, #180]	@ (801cb8c <HAL_DMA_Abort+0x23c>)
 801cad8:	4293      	cmp	r3, r2
 801cada:	d040      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	681b      	ldr	r3, [r3, #0]
 801cae0:	4a2b      	ldr	r2, [pc, #172]	@ (801cb90 <HAL_DMA_Abort+0x240>)
 801cae2:	4293      	cmp	r3, r2
 801cae4:	d03b      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	681b      	ldr	r3, [r3, #0]
 801caea:	4a2a      	ldr	r2, [pc, #168]	@ (801cb94 <HAL_DMA_Abort+0x244>)
 801caec:	4293      	cmp	r3, r2
 801caee:	d036      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	681b      	ldr	r3, [r3, #0]
 801caf4:	4a28      	ldr	r2, [pc, #160]	@ (801cb98 <HAL_DMA_Abort+0x248>)
 801caf6:	4293      	cmp	r3, r2
 801caf8:	d031      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	681b      	ldr	r3, [r3, #0]
 801cafe:	4a27      	ldr	r2, [pc, #156]	@ (801cb9c <HAL_DMA_Abort+0x24c>)
 801cb00:	4293      	cmp	r3, r2
 801cb02:	d02c      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	681b      	ldr	r3, [r3, #0]
 801cb08:	4a25      	ldr	r2, [pc, #148]	@ (801cba0 <HAL_DMA_Abort+0x250>)
 801cb0a:	4293      	cmp	r3, r2
 801cb0c:	d027      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	681b      	ldr	r3, [r3, #0]
 801cb12:	4a24      	ldr	r2, [pc, #144]	@ (801cba4 <HAL_DMA_Abort+0x254>)
 801cb14:	4293      	cmp	r3, r2
 801cb16:	d022      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	681b      	ldr	r3, [r3, #0]
 801cb1c:	4a22      	ldr	r2, [pc, #136]	@ (801cba8 <HAL_DMA_Abort+0x258>)
 801cb1e:	4293      	cmp	r3, r2
 801cb20:	d01d      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	681b      	ldr	r3, [r3, #0]
 801cb26:	4a21      	ldr	r2, [pc, #132]	@ (801cbac <HAL_DMA_Abort+0x25c>)
 801cb28:	4293      	cmp	r3, r2
 801cb2a:	d018      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	681b      	ldr	r3, [r3, #0]
 801cb30:	4a1f      	ldr	r2, [pc, #124]	@ (801cbb0 <HAL_DMA_Abort+0x260>)
 801cb32:	4293      	cmp	r3, r2
 801cb34:	d013      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	681b      	ldr	r3, [r3, #0]
 801cb3a:	4a1e      	ldr	r2, [pc, #120]	@ (801cbb4 <HAL_DMA_Abort+0x264>)
 801cb3c:	4293      	cmp	r3, r2
 801cb3e:	d00e      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	681b      	ldr	r3, [r3, #0]
 801cb44:	4a1c      	ldr	r2, [pc, #112]	@ (801cbb8 <HAL_DMA_Abort+0x268>)
 801cb46:	4293      	cmp	r3, r2
 801cb48:	d009      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	681b      	ldr	r3, [r3, #0]
 801cb4e:	4a1b      	ldr	r2, [pc, #108]	@ (801cbbc <HAL_DMA_Abort+0x26c>)
 801cb50:	4293      	cmp	r3, r2
 801cb52:	d004      	beq.n	801cb5e <HAL_DMA_Abort+0x20e>
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	4a19      	ldr	r2, [pc, #100]	@ (801cbc0 <HAL_DMA_Abort+0x270>)
 801cb5a:	4293      	cmp	r3, r2
 801cb5c:	d132      	bne.n	801cbc4 <HAL_DMA_Abort+0x274>
 801cb5e:	2301      	movs	r3, #1
 801cb60:	e031      	b.n	801cbc6 <HAL_DMA_Abort+0x276>
 801cb62:	bf00      	nop
 801cb64:	40020010 	.word	0x40020010
 801cb68:	40020028 	.word	0x40020028
 801cb6c:	40020040 	.word	0x40020040
 801cb70:	40020058 	.word	0x40020058
 801cb74:	40020070 	.word	0x40020070
 801cb78:	40020088 	.word	0x40020088
 801cb7c:	400200a0 	.word	0x400200a0
 801cb80:	400200b8 	.word	0x400200b8
 801cb84:	40020410 	.word	0x40020410
 801cb88:	40020428 	.word	0x40020428
 801cb8c:	40020440 	.word	0x40020440
 801cb90:	40020458 	.word	0x40020458
 801cb94:	40020470 	.word	0x40020470
 801cb98:	40020488 	.word	0x40020488
 801cb9c:	400204a0 	.word	0x400204a0
 801cba0:	400204b8 	.word	0x400204b8
 801cba4:	58025408 	.word	0x58025408
 801cba8:	5802541c 	.word	0x5802541c
 801cbac:	58025430 	.word	0x58025430
 801cbb0:	58025444 	.word	0x58025444
 801cbb4:	58025458 	.word	0x58025458
 801cbb8:	5802546c 	.word	0x5802546c
 801cbbc:	58025480 	.word	0x58025480
 801cbc0:	58025494 	.word	0x58025494
 801cbc4:	2300      	movs	r3, #0
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	d007      	beq.n	801cbda <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801cbce:	681a      	ldr	r2, [r3, #0]
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801cbd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801cbd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	681b      	ldr	r3, [r3, #0]
 801cbde:	4a6d      	ldr	r2, [pc, #436]	@ (801cd94 <HAL_DMA_Abort+0x444>)
 801cbe0:	4293      	cmp	r3, r2
 801cbe2:	d04a      	beq.n	801cc7a <HAL_DMA_Abort+0x32a>
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	4a6b      	ldr	r2, [pc, #428]	@ (801cd98 <HAL_DMA_Abort+0x448>)
 801cbea:	4293      	cmp	r3, r2
 801cbec:	d045      	beq.n	801cc7a <HAL_DMA_Abort+0x32a>
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	681b      	ldr	r3, [r3, #0]
 801cbf2:	4a6a      	ldr	r2, [pc, #424]	@ (801cd9c <HAL_DMA_Abort+0x44c>)
 801cbf4:	4293      	cmp	r3, r2
 801cbf6:	d040      	beq.n	801cc7a <HAL_DMA_Abort+0x32a>
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	681b      	ldr	r3, [r3, #0]
 801cbfc:	4a68      	ldr	r2, [pc, #416]	@ (801cda0 <HAL_DMA_Abort+0x450>)
 801cbfe:	4293      	cmp	r3, r2
 801cc00:	d03b      	beq.n	801cc7a <HAL_DMA_Abort+0x32a>
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	681b      	ldr	r3, [r3, #0]
 801cc06:	4a67      	ldr	r2, [pc, #412]	@ (801cda4 <HAL_DMA_Abort+0x454>)
 801cc08:	4293      	cmp	r3, r2
 801cc0a:	d036      	beq.n	801cc7a <HAL_DMA_Abort+0x32a>
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	4a65      	ldr	r2, [pc, #404]	@ (801cda8 <HAL_DMA_Abort+0x458>)
 801cc12:	4293      	cmp	r3, r2
 801cc14:	d031      	beq.n	801cc7a <HAL_DMA_Abort+0x32a>
 801cc16:	687b      	ldr	r3, [r7, #4]
 801cc18:	681b      	ldr	r3, [r3, #0]
 801cc1a:	4a64      	ldr	r2, [pc, #400]	@ (801cdac <HAL_DMA_Abort+0x45c>)
 801cc1c:	4293      	cmp	r3, r2
 801cc1e:	d02c      	beq.n	801cc7a <HAL_DMA_Abort+0x32a>
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	4a62      	ldr	r2, [pc, #392]	@ (801cdb0 <HAL_DMA_Abort+0x460>)
 801cc26:	4293      	cmp	r3, r2
 801cc28:	d027      	beq.n	801cc7a <HAL_DMA_Abort+0x32a>
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	681b      	ldr	r3, [r3, #0]
 801cc2e:	4a61      	ldr	r2, [pc, #388]	@ (801cdb4 <HAL_DMA_Abort+0x464>)
 801cc30:	4293      	cmp	r3, r2
 801cc32:	d022      	beq.n	801cc7a <HAL_DMA_Abort+0x32a>
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	681b      	ldr	r3, [r3, #0]
 801cc38:	4a5f      	ldr	r2, [pc, #380]	@ (801cdb8 <HAL_DMA_Abort+0x468>)
 801cc3a:	4293      	cmp	r3, r2
 801cc3c:	d01d      	beq.n	801cc7a <HAL_DMA_Abort+0x32a>
 801cc3e:	687b      	ldr	r3, [r7, #4]
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	4a5e      	ldr	r2, [pc, #376]	@ (801cdbc <HAL_DMA_Abort+0x46c>)
 801cc44:	4293      	cmp	r3, r2
 801cc46:	d018      	beq.n	801cc7a <HAL_DMA_Abort+0x32a>
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	4a5c      	ldr	r2, [pc, #368]	@ (801cdc0 <HAL_DMA_Abort+0x470>)
 801cc4e:	4293      	cmp	r3, r2
 801cc50:	d013      	beq.n	801cc7a <HAL_DMA_Abort+0x32a>
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	681b      	ldr	r3, [r3, #0]
 801cc56:	4a5b      	ldr	r2, [pc, #364]	@ (801cdc4 <HAL_DMA_Abort+0x474>)
 801cc58:	4293      	cmp	r3, r2
 801cc5a:	d00e      	beq.n	801cc7a <HAL_DMA_Abort+0x32a>
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	4a59      	ldr	r2, [pc, #356]	@ (801cdc8 <HAL_DMA_Abort+0x478>)
 801cc62:	4293      	cmp	r3, r2
 801cc64:	d009      	beq.n	801cc7a <HAL_DMA_Abort+0x32a>
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	681b      	ldr	r3, [r3, #0]
 801cc6a:	4a58      	ldr	r2, [pc, #352]	@ (801cdcc <HAL_DMA_Abort+0x47c>)
 801cc6c:	4293      	cmp	r3, r2
 801cc6e:	d004      	beq.n	801cc7a <HAL_DMA_Abort+0x32a>
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	681b      	ldr	r3, [r3, #0]
 801cc74:	4a56      	ldr	r2, [pc, #344]	@ (801cdd0 <HAL_DMA_Abort+0x480>)
 801cc76:	4293      	cmp	r3, r2
 801cc78:	d108      	bne.n	801cc8c <HAL_DMA_Abort+0x33c>
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	681b      	ldr	r3, [r3, #0]
 801cc7e:	681a      	ldr	r2, [r3, #0]
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	681b      	ldr	r3, [r3, #0]
 801cc84:	f022 0201 	bic.w	r2, r2, #1
 801cc88:	601a      	str	r2, [r3, #0]
 801cc8a:	e007      	b.n	801cc9c <HAL_DMA_Abort+0x34c>
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	681b      	ldr	r3, [r3, #0]
 801cc90:	681a      	ldr	r2, [r3, #0]
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	f022 0201 	bic.w	r2, r2, #1
 801cc9a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801cc9c:	e013      	b.n	801ccc6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801cc9e:	f7fe fffd 	bl	801bc9c <HAL_GetTick>
 801cca2:	4602      	mov	r2, r0
 801cca4:	693b      	ldr	r3, [r7, #16]
 801cca6:	1ad3      	subs	r3, r2, r3
 801cca8:	2b05      	cmp	r3, #5
 801ccaa:	d90c      	bls.n	801ccc6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	2220      	movs	r2, #32
 801ccb0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801ccb2:	687b      	ldr	r3, [r7, #4]
 801ccb4:	2203      	movs	r2, #3
 801ccb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	2200      	movs	r2, #0
 801ccbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801ccc2:	2301      	movs	r3, #1
 801ccc4:	e12d      	b.n	801cf22 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801ccc6:	697b      	ldr	r3, [r7, #20]
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	f003 0301 	and.w	r3, r3, #1
 801ccce:	2b00      	cmp	r3, #0
 801ccd0:	d1e5      	bne.n	801cc9e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	4a2f      	ldr	r2, [pc, #188]	@ (801cd94 <HAL_DMA_Abort+0x444>)
 801ccd8:	4293      	cmp	r3, r2
 801ccda:	d04a      	beq.n	801cd72 <HAL_DMA_Abort+0x422>
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	681b      	ldr	r3, [r3, #0]
 801cce0:	4a2d      	ldr	r2, [pc, #180]	@ (801cd98 <HAL_DMA_Abort+0x448>)
 801cce2:	4293      	cmp	r3, r2
 801cce4:	d045      	beq.n	801cd72 <HAL_DMA_Abort+0x422>
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	4a2c      	ldr	r2, [pc, #176]	@ (801cd9c <HAL_DMA_Abort+0x44c>)
 801ccec:	4293      	cmp	r3, r2
 801ccee:	d040      	beq.n	801cd72 <HAL_DMA_Abort+0x422>
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	4a2a      	ldr	r2, [pc, #168]	@ (801cda0 <HAL_DMA_Abort+0x450>)
 801ccf6:	4293      	cmp	r3, r2
 801ccf8:	d03b      	beq.n	801cd72 <HAL_DMA_Abort+0x422>
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	681b      	ldr	r3, [r3, #0]
 801ccfe:	4a29      	ldr	r2, [pc, #164]	@ (801cda4 <HAL_DMA_Abort+0x454>)
 801cd00:	4293      	cmp	r3, r2
 801cd02:	d036      	beq.n	801cd72 <HAL_DMA_Abort+0x422>
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	4a27      	ldr	r2, [pc, #156]	@ (801cda8 <HAL_DMA_Abort+0x458>)
 801cd0a:	4293      	cmp	r3, r2
 801cd0c:	d031      	beq.n	801cd72 <HAL_DMA_Abort+0x422>
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	681b      	ldr	r3, [r3, #0]
 801cd12:	4a26      	ldr	r2, [pc, #152]	@ (801cdac <HAL_DMA_Abort+0x45c>)
 801cd14:	4293      	cmp	r3, r2
 801cd16:	d02c      	beq.n	801cd72 <HAL_DMA_Abort+0x422>
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	4a24      	ldr	r2, [pc, #144]	@ (801cdb0 <HAL_DMA_Abort+0x460>)
 801cd1e:	4293      	cmp	r3, r2
 801cd20:	d027      	beq.n	801cd72 <HAL_DMA_Abort+0x422>
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	681b      	ldr	r3, [r3, #0]
 801cd26:	4a23      	ldr	r2, [pc, #140]	@ (801cdb4 <HAL_DMA_Abort+0x464>)
 801cd28:	4293      	cmp	r3, r2
 801cd2a:	d022      	beq.n	801cd72 <HAL_DMA_Abort+0x422>
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	681b      	ldr	r3, [r3, #0]
 801cd30:	4a21      	ldr	r2, [pc, #132]	@ (801cdb8 <HAL_DMA_Abort+0x468>)
 801cd32:	4293      	cmp	r3, r2
 801cd34:	d01d      	beq.n	801cd72 <HAL_DMA_Abort+0x422>
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	4a20      	ldr	r2, [pc, #128]	@ (801cdbc <HAL_DMA_Abort+0x46c>)
 801cd3c:	4293      	cmp	r3, r2
 801cd3e:	d018      	beq.n	801cd72 <HAL_DMA_Abort+0x422>
 801cd40:	687b      	ldr	r3, [r7, #4]
 801cd42:	681b      	ldr	r3, [r3, #0]
 801cd44:	4a1e      	ldr	r2, [pc, #120]	@ (801cdc0 <HAL_DMA_Abort+0x470>)
 801cd46:	4293      	cmp	r3, r2
 801cd48:	d013      	beq.n	801cd72 <HAL_DMA_Abort+0x422>
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	681b      	ldr	r3, [r3, #0]
 801cd4e:	4a1d      	ldr	r2, [pc, #116]	@ (801cdc4 <HAL_DMA_Abort+0x474>)
 801cd50:	4293      	cmp	r3, r2
 801cd52:	d00e      	beq.n	801cd72 <HAL_DMA_Abort+0x422>
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	681b      	ldr	r3, [r3, #0]
 801cd58:	4a1b      	ldr	r2, [pc, #108]	@ (801cdc8 <HAL_DMA_Abort+0x478>)
 801cd5a:	4293      	cmp	r3, r2
 801cd5c:	d009      	beq.n	801cd72 <HAL_DMA_Abort+0x422>
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	681b      	ldr	r3, [r3, #0]
 801cd62:	4a1a      	ldr	r2, [pc, #104]	@ (801cdcc <HAL_DMA_Abort+0x47c>)
 801cd64:	4293      	cmp	r3, r2
 801cd66:	d004      	beq.n	801cd72 <HAL_DMA_Abort+0x422>
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	681b      	ldr	r3, [r3, #0]
 801cd6c:	4a18      	ldr	r2, [pc, #96]	@ (801cdd0 <HAL_DMA_Abort+0x480>)
 801cd6e:	4293      	cmp	r3, r2
 801cd70:	d101      	bne.n	801cd76 <HAL_DMA_Abort+0x426>
 801cd72:	2301      	movs	r3, #1
 801cd74:	e000      	b.n	801cd78 <HAL_DMA_Abort+0x428>
 801cd76:	2300      	movs	r3, #0
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d02b      	beq.n	801cdd4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801cd7c:	687b      	ldr	r3, [r7, #4]
 801cd7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cd80:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cd86:	f003 031f 	and.w	r3, r3, #31
 801cd8a:	223f      	movs	r2, #63	@ 0x3f
 801cd8c:	409a      	lsls	r2, r3
 801cd8e:	68bb      	ldr	r3, [r7, #8]
 801cd90:	609a      	str	r2, [r3, #8]
 801cd92:	e02a      	b.n	801cdea <HAL_DMA_Abort+0x49a>
 801cd94:	40020010 	.word	0x40020010
 801cd98:	40020028 	.word	0x40020028
 801cd9c:	40020040 	.word	0x40020040
 801cda0:	40020058 	.word	0x40020058
 801cda4:	40020070 	.word	0x40020070
 801cda8:	40020088 	.word	0x40020088
 801cdac:	400200a0 	.word	0x400200a0
 801cdb0:	400200b8 	.word	0x400200b8
 801cdb4:	40020410 	.word	0x40020410
 801cdb8:	40020428 	.word	0x40020428
 801cdbc:	40020440 	.word	0x40020440
 801cdc0:	40020458 	.word	0x40020458
 801cdc4:	40020470 	.word	0x40020470
 801cdc8:	40020488 	.word	0x40020488
 801cdcc:	400204a0 	.word	0x400204a0
 801cdd0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cdd8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cdde:	f003 031f 	and.w	r3, r3, #31
 801cde2:	2201      	movs	r2, #1
 801cde4:	409a      	lsls	r2, r3
 801cde6:	68fb      	ldr	r3, [r7, #12]
 801cde8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	681b      	ldr	r3, [r3, #0]
 801cdee:	4a4f      	ldr	r2, [pc, #316]	@ (801cf2c <HAL_DMA_Abort+0x5dc>)
 801cdf0:	4293      	cmp	r3, r2
 801cdf2:	d072      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	4a4d      	ldr	r2, [pc, #308]	@ (801cf30 <HAL_DMA_Abort+0x5e0>)
 801cdfa:	4293      	cmp	r3, r2
 801cdfc:	d06d      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801cdfe:	687b      	ldr	r3, [r7, #4]
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	4a4c      	ldr	r2, [pc, #304]	@ (801cf34 <HAL_DMA_Abort+0x5e4>)
 801ce04:	4293      	cmp	r3, r2
 801ce06:	d068      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ce08:	687b      	ldr	r3, [r7, #4]
 801ce0a:	681b      	ldr	r3, [r3, #0]
 801ce0c:	4a4a      	ldr	r2, [pc, #296]	@ (801cf38 <HAL_DMA_Abort+0x5e8>)
 801ce0e:	4293      	cmp	r3, r2
 801ce10:	d063      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	681b      	ldr	r3, [r3, #0]
 801ce16:	4a49      	ldr	r2, [pc, #292]	@ (801cf3c <HAL_DMA_Abort+0x5ec>)
 801ce18:	4293      	cmp	r3, r2
 801ce1a:	d05e      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	681b      	ldr	r3, [r3, #0]
 801ce20:	4a47      	ldr	r2, [pc, #284]	@ (801cf40 <HAL_DMA_Abort+0x5f0>)
 801ce22:	4293      	cmp	r3, r2
 801ce24:	d059      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	681b      	ldr	r3, [r3, #0]
 801ce2a:	4a46      	ldr	r2, [pc, #280]	@ (801cf44 <HAL_DMA_Abort+0x5f4>)
 801ce2c:	4293      	cmp	r3, r2
 801ce2e:	d054      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	4a44      	ldr	r2, [pc, #272]	@ (801cf48 <HAL_DMA_Abort+0x5f8>)
 801ce36:	4293      	cmp	r3, r2
 801ce38:	d04f      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ce3a:	687b      	ldr	r3, [r7, #4]
 801ce3c:	681b      	ldr	r3, [r3, #0]
 801ce3e:	4a43      	ldr	r2, [pc, #268]	@ (801cf4c <HAL_DMA_Abort+0x5fc>)
 801ce40:	4293      	cmp	r3, r2
 801ce42:	d04a      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ce44:	687b      	ldr	r3, [r7, #4]
 801ce46:	681b      	ldr	r3, [r3, #0]
 801ce48:	4a41      	ldr	r2, [pc, #260]	@ (801cf50 <HAL_DMA_Abort+0x600>)
 801ce4a:	4293      	cmp	r3, r2
 801ce4c:	d045      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	681b      	ldr	r3, [r3, #0]
 801ce52:	4a40      	ldr	r2, [pc, #256]	@ (801cf54 <HAL_DMA_Abort+0x604>)
 801ce54:	4293      	cmp	r3, r2
 801ce56:	d040      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	4a3e      	ldr	r2, [pc, #248]	@ (801cf58 <HAL_DMA_Abort+0x608>)
 801ce5e:	4293      	cmp	r3, r2
 801ce60:	d03b      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	681b      	ldr	r3, [r3, #0]
 801ce66:	4a3d      	ldr	r2, [pc, #244]	@ (801cf5c <HAL_DMA_Abort+0x60c>)
 801ce68:	4293      	cmp	r3, r2
 801ce6a:	d036      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	681b      	ldr	r3, [r3, #0]
 801ce70:	4a3b      	ldr	r2, [pc, #236]	@ (801cf60 <HAL_DMA_Abort+0x610>)
 801ce72:	4293      	cmp	r3, r2
 801ce74:	d031      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	681b      	ldr	r3, [r3, #0]
 801ce7a:	4a3a      	ldr	r2, [pc, #232]	@ (801cf64 <HAL_DMA_Abort+0x614>)
 801ce7c:	4293      	cmp	r3, r2
 801ce7e:	d02c      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	4a38      	ldr	r2, [pc, #224]	@ (801cf68 <HAL_DMA_Abort+0x618>)
 801ce86:	4293      	cmp	r3, r2
 801ce88:	d027      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	4a37      	ldr	r2, [pc, #220]	@ (801cf6c <HAL_DMA_Abort+0x61c>)
 801ce90:	4293      	cmp	r3, r2
 801ce92:	d022      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	681b      	ldr	r3, [r3, #0]
 801ce98:	4a35      	ldr	r2, [pc, #212]	@ (801cf70 <HAL_DMA_Abort+0x620>)
 801ce9a:	4293      	cmp	r3, r2
 801ce9c:	d01d      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	4a34      	ldr	r2, [pc, #208]	@ (801cf74 <HAL_DMA_Abort+0x624>)
 801cea4:	4293      	cmp	r3, r2
 801cea6:	d018      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	681b      	ldr	r3, [r3, #0]
 801ceac:	4a32      	ldr	r2, [pc, #200]	@ (801cf78 <HAL_DMA_Abort+0x628>)
 801ceae:	4293      	cmp	r3, r2
 801ceb0:	d013      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	681b      	ldr	r3, [r3, #0]
 801ceb6:	4a31      	ldr	r2, [pc, #196]	@ (801cf7c <HAL_DMA_Abort+0x62c>)
 801ceb8:	4293      	cmp	r3, r2
 801ceba:	d00e      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	4a2f      	ldr	r2, [pc, #188]	@ (801cf80 <HAL_DMA_Abort+0x630>)
 801cec2:	4293      	cmp	r3, r2
 801cec4:	d009      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801cec6:	687b      	ldr	r3, [r7, #4]
 801cec8:	681b      	ldr	r3, [r3, #0]
 801ceca:	4a2e      	ldr	r2, [pc, #184]	@ (801cf84 <HAL_DMA_Abort+0x634>)
 801cecc:	4293      	cmp	r3, r2
 801cece:	d004      	beq.n	801ceda <HAL_DMA_Abort+0x58a>
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	681b      	ldr	r3, [r3, #0]
 801ced4:	4a2c      	ldr	r2, [pc, #176]	@ (801cf88 <HAL_DMA_Abort+0x638>)
 801ced6:	4293      	cmp	r3, r2
 801ced8:	d101      	bne.n	801cede <HAL_DMA_Abort+0x58e>
 801ceda:	2301      	movs	r3, #1
 801cedc:	e000      	b.n	801cee0 <HAL_DMA_Abort+0x590>
 801cede:	2300      	movs	r3, #0
 801cee0:	2b00      	cmp	r3, #0
 801cee2:	d015      	beq.n	801cf10 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801cee4:	687b      	ldr	r3, [r7, #4]
 801cee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801cee8:	687a      	ldr	r2, [r7, #4]
 801ceea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801ceec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	d00c      	beq.n	801cf10 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cefa:	681a      	ldr	r2, [r3, #0]
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cf00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801cf04:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cf0a:	687a      	ldr	r2, [r7, #4]
 801cf0c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801cf0e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	2201      	movs	r2, #1
 801cf14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	2200      	movs	r2, #0
 801cf1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 801cf20:	2300      	movs	r3, #0
}
 801cf22:	4618      	mov	r0, r3
 801cf24:	3718      	adds	r7, #24
 801cf26:	46bd      	mov	sp, r7
 801cf28:	bd80      	pop	{r7, pc}
 801cf2a:	bf00      	nop
 801cf2c:	40020010 	.word	0x40020010
 801cf30:	40020028 	.word	0x40020028
 801cf34:	40020040 	.word	0x40020040
 801cf38:	40020058 	.word	0x40020058
 801cf3c:	40020070 	.word	0x40020070
 801cf40:	40020088 	.word	0x40020088
 801cf44:	400200a0 	.word	0x400200a0
 801cf48:	400200b8 	.word	0x400200b8
 801cf4c:	40020410 	.word	0x40020410
 801cf50:	40020428 	.word	0x40020428
 801cf54:	40020440 	.word	0x40020440
 801cf58:	40020458 	.word	0x40020458
 801cf5c:	40020470 	.word	0x40020470
 801cf60:	40020488 	.word	0x40020488
 801cf64:	400204a0 	.word	0x400204a0
 801cf68:	400204b8 	.word	0x400204b8
 801cf6c:	58025408 	.word	0x58025408
 801cf70:	5802541c 	.word	0x5802541c
 801cf74:	58025430 	.word	0x58025430
 801cf78:	58025444 	.word	0x58025444
 801cf7c:	58025458 	.word	0x58025458
 801cf80:	5802546c 	.word	0x5802546c
 801cf84:	58025480 	.word	0x58025480
 801cf88:	58025494 	.word	0x58025494

0801cf8c <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 801cf8c:	b580      	push	{r7, lr}
 801cf8e:	b08a      	sub	sp, #40	@ 0x28
 801cf90:	af00      	add	r7, sp, #0
 801cf92:	60f8      	str	r0, [r7, #12]
 801cf94:	460b      	mov	r3, r1
 801cf96:	607a      	str	r2, [r7, #4]
 801cf98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 801cf9a:	2300      	movs	r3, #0
 801cf9c:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
 801cf9e:	f7fe fe7d 	bl	801bc9c <HAL_GetTick>
 801cfa2:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801cfa4:	68fb      	ldr	r3, [r7, #12]
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d101      	bne.n	801cfae <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
 801cfaa:	2301      	movs	r3, #1
 801cfac:	e374      	b.n	801d698 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
 801cfae:	68fb      	ldr	r3, [r7, #12]
 801cfb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801cfb4:	b2db      	uxtb	r3, r3
 801cfb6:	2b02      	cmp	r3, #2
 801cfb8:	d008      	beq.n	801cfcc <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801cfba:	68fb      	ldr	r3, [r7, #12]
 801cfbc:	2280      	movs	r2, #128	@ 0x80
 801cfbe:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 801cfc0:	68fb      	ldr	r3, [r7, #12]
 801cfc2:	2200      	movs	r2, #0
 801cfc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 801cfc8:	2301      	movs	r3, #1
 801cfca:	e365      	b.n	801d698 <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801cfcc:	68fb      	ldr	r3, [r7, #12]
 801cfce:	681b      	ldr	r3, [r3, #0]
 801cfd0:	4a7b      	ldr	r2, [pc, #492]	@ (801d1c0 <HAL_DMA_PollForTransfer+0x234>)
 801cfd2:	4293      	cmp	r3, r2
 801cfd4:	d04a      	beq.n	801d06c <HAL_DMA_PollForTransfer+0xe0>
 801cfd6:	68fb      	ldr	r3, [r7, #12]
 801cfd8:	681b      	ldr	r3, [r3, #0]
 801cfda:	4a7a      	ldr	r2, [pc, #488]	@ (801d1c4 <HAL_DMA_PollForTransfer+0x238>)
 801cfdc:	4293      	cmp	r3, r2
 801cfde:	d045      	beq.n	801d06c <HAL_DMA_PollForTransfer+0xe0>
 801cfe0:	68fb      	ldr	r3, [r7, #12]
 801cfe2:	681b      	ldr	r3, [r3, #0]
 801cfe4:	4a78      	ldr	r2, [pc, #480]	@ (801d1c8 <HAL_DMA_PollForTransfer+0x23c>)
 801cfe6:	4293      	cmp	r3, r2
 801cfe8:	d040      	beq.n	801d06c <HAL_DMA_PollForTransfer+0xe0>
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	681b      	ldr	r3, [r3, #0]
 801cfee:	4a77      	ldr	r2, [pc, #476]	@ (801d1cc <HAL_DMA_PollForTransfer+0x240>)
 801cff0:	4293      	cmp	r3, r2
 801cff2:	d03b      	beq.n	801d06c <HAL_DMA_PollForTransfer+0xe0>
 801cff4:	68fb      	ldr	r3, [r7, #12]
 801cff6:	681b      	ldr	r3, [r3, #0]
 801cff8:	4a75      	ldr	r2, [pc, #468]	@ (801d1d0 <HAL_DMA_PollForTransfer+0x244>)
 801cffa:	4293      	cmp	r3, r2
 801cffc:	d036      	beq.n	801d06c <HAL_DMA_PollForTransfer+0xe0>
 801cffe:	68fb      	ldr	r3, [r7, #12]
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	4a74      	ldr	r2, [pc, #464]	@ (801d1d4 <HAL_DMA_PollForTransfer+0x248>)
 801d004:	4293      	cmp	r3, r2
 801d006:	d031      	beq.n	801d06c <HAL_DMA_PollForTransfer+0xe0>
 801d008:	68fb      	ldr	r3, [r7, #12]
 801d00a:	681b      	ldr	r3, [r3, #0]
 801d00c:	4a72      	ldr	r2, [pc, #456]	@ (801d1d8 <HAL_DMA_PollForTransfer+0x24c>)
 801d00e:	4293      	cmp	r3, r2
 801d010:	d02c      	beq.n	801d06c <HAL_DMA_PollForTransfer+0xe0>
 801d012:	68fb      	ldr	r3, [r7, #12]
 801d014:	681b      	ldr	r3, [r3, #0]
 801d016:	4a71      	ldr	r2, [pc, #452]	@ (801d1dc <HAL_DMA_PollForTransfer+0x250>)
 801d018:	4293      	cmp	r3, r2
 801d01a:	d027      	beq.n	801d06c <HAL_DMA_PollForTransfer+0xe0>
 801d01c:	68fb      	ldr	r3, [r7, #12]
 801d01e:	681b      	ldr	r3, [r3, #0]
 801d020:	4a6f      	ldr	r2, [pc, #444]	@ (801d1e0 <HAL_DMA_PollForTransfer+0x254>)
 801d022:	4293      	cmp	r3, r2
 801d024:	d022      	beq.n	801d06c <HAL_DMA_PollForTransfer+0xe0>
 801d026:	68fb      	ldr	r3, [r7, #12]
 801d028:	681b      	ldr	r3, [r3, #0]
 801d02a:	4a6e      	ldr	r2, [pc, #440]	@ (801d1e4 <HAL_DMA_PollForTransfer+0x258>)
 801d02c:	4293      	cmp	r3, r2
 801d02e:	d01d      	beq.n	801d06c <HAL_DMA_PollForTransfer+0xe0>
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	4a6c      	ldr	r2, [pc, #432]	@ (801d1e8 <HAL_DMA_PollForTransfer+0x25c>)
 801d036:	4293      	cmp	r3, r2
 801d038:	d018      	beq.n	801d06c <HAL_DMA_PollForTransfer+0xe0>
 801d03a:	68fb      	ldr	r3, [r7, #12]
 801d03c:	681b      	ldr	r3, [r3, #0]
 801d03e:	4a6b      	ldr	r2, [pc, #428]	@ (801d1ec <HAL_DMA_PollForTransfer+0x260>)
 801d040:	4293      	cmp	r3, r2
 801d042:	d013      	beq.n	801d06c <HAL_DMA_PollForTransfer+0xe0>
 801d044:	68fb      	ldr	r3, [r7, #12]
 801d046:	681b      	ldr	r3, [r3, #0]
 801d048:	4a69      	ldr	r2, [pc, #420]	@ (801d1f0 <HAL_DMA_PollForTransfer+0x264>)
 801d04a:	4293      	cmp	r3, r2
 801d04c:	d00e      	beq.n	801d06c <HAL_DMA_PollForTransfer+0xe0>
 801d04e:	68fb      	ldr	r3, [r7, #12]
 801d050:	681b      	ldr	r3, [r3, #0]
 801d052:	4a68      	ldr	r2, [pc, #416]	@ (801d1f4 <HAL_DMA_PollForTransfer+0x268>)
 801d054:	4293      	cmp	r3, r2
 801d056:	d009      	beq.n	801d06c <HAL_DMA_PollForTransfer+0xe0>
 801d058:	68fb      	ldr	r3, [r7, #12]
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	4a66      	ldr	r2, [pc, #408]	@ (801d1f8 <HAL_DMA_PollForTransfer+0x26c>)
 801d05e:	4293      	cmp	r3, r2
 801d060:	d004      	beq.n	801d06c <HAL_DMA_PollForTransfer+0xe0>
 801d062:	68fb      	ldr	r3, [r7, #12]
 801d064:	681b      	ldr	r3, [r3, #0]
 801d066:	4a65      	ldr	r2, [pc, #404]	@ (801d1fc <HAL_DMA_PollForTransfer+0x270>)
 801d068:	4293      	cmp	r3, r2
 801d06a:	d101      	bne.n	801d070 <HAL_DMA_PollForTransfer+0xe4>
 801d06c:	2301      	movs	r3, #1
 801d06e:	e000      	b.n	801d072 <HAL_DMA_PollForTransfer+0xe6>
 801d070:	2300      	movs	r3, #0
 801d072:	2b00      	cmp	r3, #0
 801d074:	d028      	beq.n	801d0c8 <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 801d076:	68fb      	ldr	r3, [r7, #12]
 801d078:	681b      	ldr	r3, [r3, #0]
 801d07a:	681b      	ldr	r3, [r3, #0]
 801d07c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d080:	2b00      	cmp	r3, #0
 801d082:	d005      	beq.n	801d090 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801d084:	68fb      	ldr	r3, [r7, #12]
 801d086:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d08a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 801d08c:	2301      	movs	r3, #1
 801d08e:	e303      	b.n	801d698 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801d090:	7afb      	ldrb	r3, [r7, #11]
 801d092:	2b00      	cmp	r3, #0
 801d094:	d108      	bne.n	801d0a8 <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801d096:	68fb      	ldr	r3, [r7, #12]
 801d098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d09a:	f003 031f 	and.w	r3, r3, #31
 801d09e:	2220      	movs	r2, #32
 801d0a0:	fa02 f303 	lsl.w	r3, r2, r3
 801d0a4:	627b      	str	r3, [r7, #36]	@ 0x24
 801d0a6:	e007      	b.n	801d0b8 <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801d0a8:	68fb      	ldr	r3, [r7, #12]
 801d0aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d0ac:	f003 031f 	and.w	r3, r3, #31
 801d0b0:	2210      	movs	r2, #16
 801d0b2:	fa02 f303 	lsl.w	r3, r2, r3
 801d0b6:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 801d0b8:	68fb      	ldr	r3, [r7, #12]
 801d0ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d0bc:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 801d0be:	68fb      	ldr	r3, [r7, #12]
 801d0c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d0c2:	3308      	adds	r3, #8
 801d0c4:	61fb      	str	r3, [r7, #28]
 801d0c6:	e1d5      	b.n	801d474 <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 801d0c8:	68fb      	ldr	r3, [r7, #12]
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	681b      	ldr	r3, [r3, #0]
 801d0ce:	f003 0320 	and.w	r3, r3, #32
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d005      	beq.n	801d0e2 <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801d0d6:	68fb      	ldr	r3, [r7, #12]
 801d0d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d0dc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 801d0de:	2301      	movs	r3, #1
 801d0e0:	e2da      	b.n	801d698 <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801d0e2:	7afb      	ldrb	r3, [r7, #11]
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d108      	bne.n	801d0fa <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 801d0e8:	68fb      	ldr	r3, [r7, #12]
 801d0ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d0ec:	f003 031f 	and.w	r3, r3, #31
 801d0f0:	2202      	movs	r2, #2
 801d0f2:	fa02 f303 	lsl.w	r3, r2, r3
 801d0f6:	627b      	str	r3, [r7, #36]	@ 0x24
 801d0f8:	e007      	b.n	801d10a <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 801d0fa:	68fb      	ldr	r3, [r7, #12]
 801d0fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d0fe:	f003 031f 	and.w	r3, r3, #31
 801d102:	2204      	movs	r2, #4
 801d104:	fa02 f303 	lsl.w	r3, r2, r3
 801d108:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 801d10a:	68fb      	ldr	r3, [r7, #12]
 801d10c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d10e:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 801d110:	68fb      	ldr	r3, [r7, #12]
 801d112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d114:	3304      	adds	r3, #4
 801d116:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
 801d118:	e1ac      	b.n	801d474 <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d11a:	68fb      	ldr	r3, [r7, #12]
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	4a28      	ldr	r2, [pc, #160]	@ (801d1c0 <HAL_DMA_PollForTransfer+0x234>)
 801d120:	4293      	cmp	r3, r2
 801d122:	d04a      	beq.n	801d1ba <HAL_DMA_PollForTransfer+0x22e>
 801d124:	68fb      	ldr	r3, [r7, #12]
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	4a26      	ldr	r2, [pc, #152]	@ (801d1c4 <HAL_DMA_PollForTransfer+0x238>)
 801d12a:	4293      	cmp	r3, r2
 801d12c:	d045      	beq.n	801d1ba <HAL_DMA_PollForTransfer+0x22e>
 801d12e:	68fb      	ldr	r3, [r7, #12]
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	4a25      	ldr	r2, [pc, #148]	@ (801d1c8 <HAL_DMA_PollForTransfer+0x23c>)
 801d134:	4293      	cmp	r3, r2
 801d136:	d040      	beq.n	801d1ba <HAL_DMA_PollForTransfer+0x22e>
 801d138:	68fb      	ldr	r3, [r7, #12]
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	4a23      	ldr	r2, [pc, #140]	@ (801d1cc <HAL_DMA_PollForTransfer+0x240>)
 801d13e:	4293      	cmp	r3, r2
 801d140:	d03b      	beq.n	801d1ba <HAL_DMA_PollForTransfer+0x22e>
 801d142:	68fb      	ldr	r3, [r7, #12]
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	4a22      	ldr	r2, [pc, #136]	@ (801d1d0 <HAL_DMA_PollForTransfer+0x244>)
 801d148:	4293      	cmp	r3, r2
 801d14a:	d036      	beq.n	801d1ba <HAL_DMA_PollForTransfer+0x22e>
 801d14c:	68fb      	ldr	r3, [r7, #12]
 801d14e:	681b      	ldr	r3, [r3, #0]
 801d150:	4a20      	ldr	r2, [pc, #128]	@ (801d1d4 <HAL_DMA_PollForTransfer+0x248>)
 801d152:	4293      	cmp	r3, r2
 801d154:	d031      	beq.n	801d1ba <HAL_DMA_PollForTransfer+0x22e>
 801d156:	68fb      	ldr	r3, [r7, #12]
 801d158:	681b      	ldr	r3, [r3, #0]
 801d15a:	4a1f      	ldr	r2, [pc, #124]	@ (801d1d8 <HAL_DMA_PollForTransfer+0x24c>)
 801d15c:	4293      	cmp	r3, r2
 801d15e:	d02c      	beq.n	801d1ba <HAL_DMA_PollForTransfer+0x22e>
 801d160:	68fb      	ldr	r3, [r7, #12]
 801d162:	681b      	ldr	r3, [r3, #0]
 801d164:	4a1d      	ldr	r2, [pc, #116]	@ (801d1dc <HAL_DMA_PollForTransfer+0x250>)
 801d166:	4293      	cmp	r3, r2
 801d168:	d027      	beq.n	801d1ba <HAL_DMA_PollForTransfer+0x22e>
 801d16a:	68fb      	ldr	r3, [r7, #12]
 801d16c:	681b      	ldr	r3, [r3, #0]
 801d16e:	4a1c      	ldr	r2, [pc, #112]	@ (801d1e0 <HAL_DMA_PollForTransfer+0x254>)
 801d170:	4293      	cmp	r3, r2
 801d172:	d022      	beq.n	801d1ba <HAL_DMA_PollForTransfer+0x22e>
 801d174:	68fb      	ldr	r3, [r7, #12]
 801d176:	681b      	ldr	r3, [r3, #0]
 801d178:	4a1a      	ldr	r2, [pc, #104]	@ (801d1e4 <HAL_DMA_PollForTransfer+0x258>)
 801d17a:	4293      	cmp	r3, r2
 801d17c:	d01d      	beq.n	801d1ba <HAL_DMA_PollForTransfer+0x22e>
 801d17e:	68fb      	ldr	r3, [r7, #12]
 801d180:	681b      	ldr	r3, [r3, #0]
 801d182:	4a19      	ldr	r2, [pc, #100]	@ (801d1e8 <HAL_DMA_PollForTransfer+0x25c>)
 801d184:	4293      	cmp	r3, r2
 801d186:	d018      	beq.n	801d1ba <HAL_DMA_PollForTransfer+0x22e>
 801d188:	68fb      	ldr	r3, [r7, #12]
 801d18a:	681b      	ldr	r3, [r3, #0]
 801d18c:	4a17      	ldr	r2, [pc, #92]	@ (801d1ec <HAL_DMA_PollForTransfer+0x260>)
 801d18e:	4293      	cmp	r3, r2
 801d190:	d013      	beq.n	801d1ba <HAL_DMA_PollForTransfer+0x22e>
 801d192:	68fb      	ldr	r3, [r7, #12]
 801d194:	681b      	ldr	r3, [r3, #0]
 801d196:	4a16      	ldr	r2, [pc, #88]	@ (801d1f0 <HAL_DMA_PollForTransfer+0x264>)
 801d198:	4293      	cmp	r3, r2
 801d19a:	d00e      	beq.n	801d1ba <HAL_DMA_PollForTransfer+0x22e>
 801d19c:	68fb      	ldr	r3, [r7, #12]
 801d19e:	681b      	ldr	r3, [r3, #0]
 801d1a0:	4a14      	ldr	r2, [pc, #80]	@ (801d1f4 <HAL_DMA_PollForTransfer+0x268>)
 801d1a2:	4293      	cmp	r3, r2
 801d1a4:	d009      	beq.n	801d1ba <HAL_DMA_PollForTransfer+0x22e>
 801d1a6:	68fb      	ldr	r3, [r7, #12]
 801d1a8:	681b      	ldr	r3, [r3, #0]
 801d1aa:	4a13      	ldr	r2, [pc, #76]	@ (801d1f8 <HAL_DMA_PollForTransfer+0x26c>)
 801d1ac:	4293      	cmp	r3, r2
 801d1ae:	d004      	beq.n	801d1ba <HAL_DMA_PollForTransfer+0x22e>
 801d1b0:	68fb      	ldr	r3, [r7, #12]
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	4a11      	ldr	r2, [pc, #68]	@ (801d1fc <HAL_DMA_PollForTransfer+0x270>)
 801d1b6:	4293      	cmp	r3, r2
 801d1b8:	d122      	bne.n	801d200 <HAL_DMA_PollForTransfer+0x274>
 801d1ba:	2301      	movs	r3, #1
 801d1bc:	e021      	b.n	801d202 <HAL_DMA_PollForTransfer+0x276>
 801d1be:	bf00      	nop
 801d1c0:	40020010 	.word	0x40020010
 801d1c4:	40020028 	.word	0x40020028
 801d1c8:	40020040 	.word	0x40020040
 801d1cc:	40020058 	.word	0x40020058
 801d1d0:	40020070 	.word	0x40020070
 801d1d4:	40020088 	.word	0x40020088
 801d1d8:	400200a0 	.word	0x400200a0
 801d1dc:	400200b8 	.word	0x400200b8
 801d1e0:	40020410 	.word	0x40020410
 801d1e4:	40020428 	.word	0x40020428
 801d1e8:	40020440 	.word	0x40020440
 801d1ec:	40020458 	.word	0x40020458
 801d1f0:	40020470 	.word	0x40020470
 801d1f4:	40020488 	.word	0x40020488
 801d1f8:	400204a0 	.word	0x400204a0
 801d1fc:	400204b8 	.word	0x400204b8
 801d200:	2300      	movs	r3, #0
 801d202:	2b00      	cmp	r3, #0
 801d204:	d057      	beq.n	801d2b6 <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801d206:	6a3b      	ldr	r3, [r7, #32]
 801d208:	681a      	ldr	r2, [r3, #0]
 801d20a:	68fb      	ldr	r3, [r7, #12]
 801d20c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d20e:	f003 031f 	and.w	r3, r3, #31
 801d212:	fa22 f303 	lsr.w	r3, r2, r3
 801d216:	f003 0301 	and.w	r3, r3, #1
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d00d      	beq.n	801d23a <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801d21e:	68fb      	ldr	r3, [r7, #12]
 801d220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d222:	f043 0202 	orr.w	r2, r3, #2
 801d226:	68fb      	ldr	r3, [r7, #12]
 801d228:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d22e:	f003 031f 	and.w	r3, r3, #31
 801d232:	2201      	movs	r2, #1
 801d234:	409a      	lsls	r2, r3
 801d236:	69fb      	ldr	r3, [r7, #28]
 801d238:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801d23a:	6a3b      	ldr	r3, [r7, #32]
 801d23c:	681a      	ldr	r2, [r3, #0]
 801d23e:	68fb      	ldr	r3, [r7, #12]
 801d240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d242:	f003 031f 	and.w	r3, r3, #31
 801d246:	2104      	movs	r1, #4
 801d248:	fa01 f303 	lsl.w	r3, r1, r3
 801d24c:	4013      	ands	r3, r2
 801d24e:	2b00      	cmp	r3, #0
 801d250:	d00d      	beq.n	801d26e <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801d252:	68fb      	ldr	r3, [r7, #12]
 801d254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d256:	f043 0204 	orr.w	r2, r3, #4
 801d25a:	68fb      	ldr	r3, [r7, #12]
 801d25c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801d25e:	68fb      	ldr	r3, [r7, #12]
 801d260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d262:	f003 031f 	and.w	r3, r3, #31
 801d266:	2204      	movs	r2, #4
 801d268:	409a      	lsls	r2, r3
 801d26a:	69fb      	ldr	r3, [r7, #28]
 801d26c:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801d26e:	6a3b      	ldr	r3, [r7, #32]
 801d270:	681a      	ldr	r2, [r3, #0]
 801d272:	68fb      	ldr	r3, [r7, #12]
 801d274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d276:	f003 031f 	and.w	r3, r3, #31
 801d27a:	2108      	movs	r1, #8
 801d27c:	fa01 f303 	lsl.w	r3, r1, r3
 801d280:	4013      	ands	r3, r2
 801d282:	2b00      	cmp	r3, #0
 801d284:	d038      	beq.n	801d2f8 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801d286:	68fb      	ldr	r3, [r7, #12]
 801d288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d28a:	f043 0201 	orr.w	r2, r3, #1
 801d28e:	68fb      	ldr	r3, [r7, #12]
 801d290:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801d292:	68fb      	ldr	r3, [r7, #12]
 801d294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d296:	f003 031f 	and.w	r3, r3, #31
 801d29a:	2208      	movs	r2, #8
 801d29c:	409a      	lsls	r2, r3
 801d29e:	69fb      	ldr	r3, [r7, #28]
 801d2a0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801d2a2:	68fb      	ldr	r3, [r7, #12]
 801d2a4:	2201      	movs	r2, #1
 801d2a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801d2aa:	68fb      	ldr	r3, [r7, #12]
 801d2ac:	2200      	movs	r2, #0
 801d2ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801d2b2:	2301      	movs	r3, #1
 801d2b4:	e1f0      	b.n	801d698 <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801d2b6:	6a3b      	ldr	r3, [r7, #32]
 801d2b8:	681a      	ldr	r2, [r3, #0]
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d2be:	f003 031f 	and.w	r3, r3, #31
 801d2c2:	2108      	movs	r1, #8
 801d2c4:	fa01 f303 	lsl.w	r3, r1, r3
 801d2c8:	4013      	ands	r3, r2
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	d014      	beq.n	801d2f8 <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 801d2ce:	68fb      	ldr	r3, [r7, #12]
 801d2d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d2d2:	f003 031f 	and.w	r3, r3, #31
 801d2d6:	2201      	movs	r2, #1
 801d2d8:	409a      	lsls	r2, r3
 801d2da:	6a3b      	ldr	r3, [r7, #32]
 801d2dc:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	2201      	movs	r2, #1
 801d2e2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	2201      	movs	r2, #1
 801d2e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801d2ec:	68fb      	ldr	r3, [r7, #12]
 801d2ee:	2200      	movs	r2, #0
 801d2f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 801d2f4:	2301      	movs	r3, #1
 801d2f6:	e1cf      	b.n	801d698 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d2fe:	d012      	beq.n	801d326 <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 801d300:	f7fe fccc 	bl	801bc9c <HAL_GetTick>
 801d304:	4602      	mov	r2, r0
 801d306:	697b      	ldr	r3, [r7, #20]
 801d308:	1ad3      	subs	r3, r2, r3
 801d30a:	687a      	ldr	r2, [r7, #4]
 801d30c:	429a      	cmp	r2, r3
 801d30e:	d302      	bcc.n	801d316 <HAL_DMA_PollForTransfer+0x38a>
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	2b00      	cmp	r3, #0
 801d314:	d107      	bne.n	801d326 <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801d316:	68fb      	ldr	r3, [r7, #12]
 801d318:	2220      	movs	r2, #32
 801d31a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
 801d31c:	68f8      	ldr	r0, [r7, #12]
 801d31e:	f7ff fb17 	bl	801c950 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
 801d322:	2301      	movs	r3, #1
 801d324:	e1b8      	b.n	801d698 <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801d326:	68fb      	ldr	r3, [r7, #12]
 801d328:	681b      	ldr	r3, [r3, #0]
 801d32a:	4a81      	ldr	r2, [pc, #516]	@ (801d530 <HAL_DMA_PollForTransfer+0x5a4>)
 801d32c:	4293      	cmp	r3, r2
 801d32e:	d072      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d330:	68fb      	ldr	r3, [r7, #12]
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	4a7f      	ldr	r2, [pc, #508]	@ (801d534 <HAL_DMA_PollForTransfer+0x5a8>)
 801d336:	4293      	cmp	r3, r2
 801d338:	d06d      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d33a:	68fb      	ldr	r3, [r7, #12]
 801d33c:	681b      	ldr	r3, [r3, #0]
 801d33e:	4a7e      	ldr	r2, [pc, #504]	@ (801d538 <HAL_DMA_PollForTransfer+0x5ac>)
 801d340:	4293      	cmp	r3, r2
 801d342:	d068      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d344:	68fb      	ldr	r3, [r7, #12]
 801d346:	681b      	ldr	r3, [r3, #0]
 801d348:	4a7c      	ldr	r2, [pc, #496]	@ (801d53c <HAL_DMA_PollForTransfer+0x5b0>)
 801d34a:	4293      	cmp	r3, r2
 801d34c:	d063      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d34e:	68fb      	ldr	r3, [r7, #12]
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	4a7b      	ldr	r2, [pc, #492]	@ (801d540 <HAL_DMA_PollForTransfer+0x5b4>)
 801d354:	4293      	cmp	r3, r2
 801d356:	d05e      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d358:	68fb      	ldr	r3, [r7, #12]
 801d35a:	681b      	ldr	r3, [r3, #0]
 801d35c:	4a79      	ldr	r2, [pc, #484]	@ (801d544 <HAL_DMA_PollForTransfer+0x5b8>)
 801d35e:	4293      	cmp	r3, r2
 801d360:	d059      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d362:	68fb      	ldr	r3, [r7, #12]
 801d364:	681b      	ldr	r3, [r3, #0]
 801d366:	4a78      	ldr	r2, [pc, #480]	@ (801d548 <HAL_DMA_PollForTransfer+0x5bc>)
 801d368:	4293      	cmp	r3, r2
 801d36a:	d054      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d36c:	68fb      	ldr	r3, [r7, #12]
 801d36e:	681b      	ldr	r3, [r3, #0]
 801d370:	4a76      	ldr	r2, [pc, #472]	@ (801d54c <HAL_DMA_PollForTransfer+0x5c0>)
 801d372:	4293      	cmp	r3, r2
 801d374:	d04f      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d376:	68fb      	ldr	r3, [r7, #12]
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	4a75      	ldr	r2, [pc, #468]	@ (801d550 <HAL_DMA_PollForTransfer+0x5c4>)
 801d37c:	4293      	cmp	r3, r2
 801d37e:	d04a      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d380:	68fb      	ldr	r3, [r7, #12]
 801d382:	681b      	ldr	r3, [r3, #0]
 801d384:	4a73      	ldr	r2, [pc, #460]	@ (801d554 <HAL_DMA_PollForTransfer+0x5c8>)
 801d386:	4293      	cmp	r3, r2
 801d388:	d045      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d38a:	68fb      	ldr	r3, [r7, #12]
 801d38c:	681b      	ldr	r3, [r3, #0]
 801d38e:	4a72      	ldr	r2, [pc, #456]	@ (801d558 <HAL_DMA_PollForTransfer+0x5cc>)
 801d390:	4293      	cmp	r3, r2
 801d392:	d040      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d394:	68fb      	ldr	r3, [r7, #12]
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	4a70      	ldr	r2, [pc, #448]	@ (801d55c <HAL_DMA_PollForTransfer+0x5d0>)
 801d39a:	4293      	cmp	r3, r2
 801d39c:	d03b      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d39e:	68fb      	ldr	r3, [r7, #12]
 801d3a0:	681b      	ldr	r3, [r3, #0]
 801d3a2:	4a6f      	ldr	r2, [pc, #444]	@ (801d560 <HAL_DMA_PollForTransfer+0x5d4>)
 801d3a4:	4293      	cmp	r3, r2
 801d3a6:	d036      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d3a8:	68fb      	ldr	r3, [r7, #12]
 801d3aa:	681b      	ldr	r3, [r3, #0]
 801d3ac:	4a6d      	ldr	r2, [pc, #436]	@ (801d564 <HAL_DMA_PollForTransfer+0x5d8>)
 801d3ae:	4293      	cmp	r3, r2
 801d3b0:	d031      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d3b2:	68fb      	ldr	r3, [r7, #12]
 801d3b4:	681b      	ldr	r3, [r3, #0]
 801d3b6:	4a6c      	ldr	r2, [pc, #432]	@ (801d568 <HAL_DMA_PollForTransfer+0x5dc>)
 801d3b8:	4293      	cmp	r3, r2
 801d3ba:	d02c      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d3bc:	68fb      	ldr	r3, [r7, #12]
 801d3be:	681b      	ldr	r3, [r3, #0]
 801d3c0:	4a6a      	ldr	r2, [pc, #424]	@ (801d56c <HAL_DMA_PollForTransfer+0x5e0>)
 801d3c2:	4293      	cmp	r3, r2
 801d3c4:	d027      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d3c6:	68fb      	ldr	r3, [r7, #12]
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	4a69      	ldr	r2, [pc, #420]	@ (801d570 <HAL_DMA_PollForTransfer+0x5e4>)
 801d3cc:	4293      	cmp	r3, r2
 801d3ce:	d022      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d3d0:	68fb      	ldr	r3, [r7, #12]
 801d3d2:	681b      	ldr	r3, [r3, #0]
 801d3d4:	4a67      	ldr	r2, [pc, #412]	@ (801d574 <HAL_DMA_PollForTransfer+0x5e8>)
 801d3d6:	4293      	cmp	r3, r2
 801d3d8:	d01d      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d3da:	68fb      	ldr	r3, [r7, #12]
 801d3dc:	681b      	ldr	r3, [r3, #0]
 801d3de:	4a66      	ldr	r2, [pc, #408]	@ (801d578 <HAL_DMA_PollForTransfer+0x5ec>)
 801d3e0:	4293      	cmp	r3, r2
 801d3e2:	d018      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d3e4:	68fb      	ldr	r3, [r7, #12]
 801d3e6:	681b      	ldr	r3, [r3, #0]
 801d3e8:	4a64      	ldr	r2, [pc, #400]	@ (801d57c <HAL_DMA_PollForTransfer+0x5f0>)
 801d3ea:	4293      	cmp	r3, r2
 801d3ec:	d013      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d3ee:	68fb      	ldr	r3, [r7, #12]
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	4a63      	ldr	r2, [pc, #396]	@ (801d580 <HAL_DMA_PollForTransfer+0x5f4>)
 801d3f4:	4293      	cmp	r3, r2
 801d3f6:	d00e      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d3f8:	68fb      	ldr	r3, [r7, #12]
 801d3fa:	681b      	ldr	r3, [r3, #0]
 801d3fc:	4a61      	ldr	r2, [pc, #388]	@ (801d584 <HAL_DMA_PollForTransfer+0x5f8>)
 801d3fe:	4293      	cmp	r3, r2
 801d400:	d009      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d402:	68fb      	ldr	r3, [r7, #12]
 801d404:	681b      	ldr	r3, [r3, #0]
 801d406:	4a60      	ldr	r2, [pc, #384]	@ (801d588 <HAL_DMA_PollForTransfer+0x5fc>)
 801d408:	4293      	cmp	r3, r2
 801d40a:	d004      	beq.n	801d416 <HAL_DMA_PollForTransfer+0x48a>
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	681b      	ldr	r3, [r3, #0]
 801d410:	4a5e      	ldr	r2, [pc, #376]	@ (801d58c <HAL_DMA_PollForTransfer+0x600>)
 801d412:	4293      	cmp	r3, r2
 801d414:	d101      	bne.n	801d41a <HAL_DMA_PollForTransfer+0x48e>
 801d416:	2301      	movs	r3, #1
 801d418:	e000      	b.n	801d41c <HAL_DMA_PollForTransfer+0x490>
 801d41a:	2300      	movs	r3, #0
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	d029      	beq.n	801d474 <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d424:	2b00      	cmp	r3, #0
 801d426:	d012      	beq.n	801d44e <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 801d428:	68fb      	ldr	r3, [r7, #12]
 801d42a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d42c:	681a      	ldr	r2, [r3, #0]
 801d42e:	68fb      	ldr	r3, [r7, #12]
 801d430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d432:	4013      	ands	r3, r2
 801d434:	2b00      	cmp	r3, #0
 801d436:	d00a      	beq.n	801d44e <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801d438:	68fb      	ldr	r3, [r7, #12]
 801d43a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d43c:	68fa      	ldr	r2, [r7, #12]
 801d43e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801d440:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 801d442:	68fb      	ldr	r3, [r7, #12]
 801d444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d446:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 801d44a:	68fb      	ldr	r3, [r7, #12]
 801d44c:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 801d44e:	68fb      	ldr	r3, [r7, #12]
 801d450:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d452:	681a      	ldr	r2, [r3, #0]
 801d454:	68fb      	ldr	r3, [r7, #12]
 801d456:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d458:	4013      	ands	r3, r2
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	d00a      	beq.n	801d474 <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801d45e:	68fb      	ldr	r3, [r7, #12]
 801d460:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d462:	68fa      	ldr	r2, [r7, #12]
 801d464:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801d466:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 801d468:	68fb      	ldr	r3, [r7, #12]
 801d46a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d46c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	655a      	str	r2, [r3, #84]	@ 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 801d474:	6a3b      	ldr	r3, [r7, #32]
 801d476:	681a      	ldr	r2, [r3, #0]
 801d478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d47a:	4013      	ands	r3, r2
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	f43f ae4c 	beq.w	801d11a <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 801d482:	7afb      	ldrb	r3, [r7, #11]
 801d484:	2b00      	cmp	r3, #0
 801d486:	f040 80a0 	bne.w	801d5ca <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d48a:	68fb      	ldr	r3, [r7, #12]
 801d48c:	681b      	ldr	r3, [r3, #0]
 801d48e:	4a28      	ldr	r2, [pc, #160]	@ (801d530 <HAL_DMA_PollForTransfer+0x5a4>)
 801d490:	4293      	cmp	r3, r2
 801d492:	d04a      	beq.n	801d52a <HAL_DMA_PollForTransfer+0x59e>
 801d494:	68fb      	ldr	r3, [r7, #12]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	4a26      	ldr	r2, [pc, #152]	@ (801d534 <HAL_DMA_PollForTransfer+0x5a8>)
 801d49a:	4293      	cmp	r3, r2
 801d49c:	d045      	beq.n	801d52a <HAL_DMA_PollForTransfer+0x59e>
 801d49e:	68fb      	ldr	r3, [r7, #12]
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	4a25      	ldr	r2, [pc, #148]	@ (801d538 <HAL_DMA_PollForTransfer+0x5ac>)
 801d4a4:	4293      	cmp	r3, r2
 801d4a6:	d040      	beq.n	801d52a <HAL_DMA_PollForTransfer+0x59e>
 801d4a8:	68fb      	ldr	r3, [r7, #12]
 801d4aa:	681b      	ldr	r3, [r3, #0]
 801d4ac:	4a23      	ldr	r2, [pc, #140]	@ (801d53c <HAL_DMA_PollForTransfer+0x5b0>)
 801d4ae:	4293      	cmp	r3, r2
 801d4b0:	d03b      	beq.n	801d52a <HAL_DMA_PollForTransfer+0x59e>
 801d4b2:	68fb      	ldr	r3, [r7, #12]
 801d4b4:	681b      	ldr	r3, [r3, #0]
 801d4b6:	4a22      	ldr	r2, [pc, #136]	@ (801d540 <HAL_DMA_PollForTransfer+0x5b4>)
 801d4b8:	4293      	cmp	r3, r2
 801d4ba:	d036      	beq.n	801d52a <HAL_DMA_PollForTransfer+0x59e>
 801d4bc:	68fb      	ldr	r3, [r7, #12]
 801d4be:	681b      	ldr	r3, [r3, #0]
 801d4c0:	4a20      	ldr	r2, [pc, #128]	@ (801d544 <HAL_DMA_PollForTransfer+0x5b8>)
 801d4c2:	4293      	cmp	r3, r2
 801d4c4:	d031      	beq.n	801d52a <HAL_DMA_PollForTransfer+0x59e>
 801d4c6:	68fb      	ldr	r3, [r7, #12]
 801d4c8:	681b      	ldr	r3, [r3, #0]
 801d4ca:	4a1f      	ldr	r2, [pc, #124]	@ (801d548 <HAL_DMA_PollForTransfer+0x5bc>)
 801d4cc:	4293      	cmp	r3, r2
 801d4ce:	d02c      	beq.n	801d52a <HAL_DMA_PollForTransfer+0x59e>
 801d4d0:	68fb      	ldr	r3, [r7, #12]
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	4a1d      	ldr	r2, [pc, #116]	@ (801d54c <HAL_DMA_PollForTransfer+0x5c0>)
 801d4d6:	4293      	cmp	r3, r2
 801d4d8:	d027      	beq.n	801d52a <HAL_DMA_PollForTransfer+0x59e>
 801d4da:	68fb      	ldr	r3, [r7, #12]
 801d4dc:	681b      	ldr	r3, [r3, #0]
 801d4de:	4a1c      	ldr	r2, [pc, #112]	@ (801d550 <HAL_DMA_PollForTransfer+0x5c4>)
 801d4e0:	4293      	cmp	r3, r2
 801d4e2:	d022      	beq.n	801d52a <HAL_DMA_PollForTransfer+0x59e>
 801d4e4:	68fb      	ldr	r3, [r7, #12]
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	4a1a      	ldr	r2, [pc, #104]	@ (801d554 <HAL_DMA_PollForTransfer+0x5c8>)
 801d4ea:	4293      	cmp	r3, r2
 801d4ec:	d01d      	beq.n	801d52a <HAL_DMA_PollForTransfer+0x59e>
 801d4ee:	68fb      	ldr	r3, [r7, #12]
 801d4f0:	681b      	ldr	r3, [r3, #0]
 801d4f2:	4a19      	ldr	r2, [pc, #100]	@ (801d558 <HAL_DMA_PollForTransfer+0x5cc>)
 801d4f4:	4293      	cmp	r3, r2
 801d4f6:	d018      	beq.n	801d52a <HAL_DMA_PollForTransfer+0x59e>
 801d4f8:	68fb      	ldr	r3, [r7, #12]
 801d4fa:	681b      	ldr	r3, [r3, #0]
 801d4fc:	4a17      	ldr	r2, [pc, #92]	@ (801d55c <HAL_DMA_PollForTransfer+0x5d0>)
 801d4fe:	4293      	cmp	r3, r2
 801d500:	d013      	beq.n	801d52a <HAL_DMA_PollForTransfer+0x59e>
 801d502:	68fb      	ldr	r3, [r7, #12]
 801d504:	681b      	ldr	r3, [r3, #0]
 801d506:	4a16      	ldr	r2, [pc, #88]	@ (801d560 <HAL_DMA_PollForTransfer+0x5d4>)
 801d508:	4293      	cmp	r3, r2
 801d50a:	d00e      	beq.n	801d52a <HAL_DMA_PollForTransfer+0x59e>
 801d50c:	68fb      	ldr	r3, [r7, #12]
 801d50e:	681b      	ldr	r3, [r3, #0]
 801d510:	4a14      	ldr	r2, [pc, #80]	@ (801d564 <HAL_DMA_PollForTransfer+0x5d8>)
 801d512:	4293      	cmp	r3, r2
 801d514:	d009      	beq.n	801d52a <HAL_DMA_PollForTransfer+0x59e>
 801d516:	68fb      	ldr	r3, [r7, #12]
 801d518:	681b      	ldr	r3, [r3, #0]
 801d51a:	4a13      	ldr	r2, [pc, #76]	@ (801d568 <HAL_DMA_PollForTransfer+0x5dc>)
 801d51c:	4293      	cmp	r3, r2
 801d51e:	d004      	beq.n	801d52a <HAL_DMA_PollForTransfer+0x59e>
 801d520:	68fb      	ldr	r3, [r7, #12]
 801d522:	681b      	ldr	r3, [r3, #0]
 801d524:	4a11      	ldr	r2, [pc, #68]	@ (801d56c <HAL_DMA_PollForTransfer+0x5e0>)
 801d526:	4293      	cmp	r3, r2
 801d528:	d132      	bne.n	801d590 <HAL_DMA_PollForTransfer+0x604>
 801d52a:	2301      	movs	r3, #1
 801d52c:	e031      	b.n	801d592 <HAL_DMA_PollForTransfer+0x606>
 801d52e:	bf00      	nop
 801d530:	40020010 	.word	0x40020010
 801d534:	40020028 	.word	0x40020028
 801d538:	40020040 	.word	0x40020040
 801d53c:	40020058 	.word	0x40020058
 801d540:	40020070 	.word	0x40020070
 801d544:	40020088 	.word	0x40020088
 801d548:	400200a0 	.word	0x400200a0
 801d54c:	400200b8 	.word	0x400200b8
 801d550:	40020410 	.word	0x40020410
 801d554:	40020428 	.word	0x40020428
 801d558:	40020440 	.word	0x40020440
 801d55c:	40020458 	.word	0x40020458
 801d560:	40020470 	.word	0x40020470
 801d564:	40020488 	.word	0x40020488
 801d568:	400204a0 	.word	0x400204a0
 801d56c:	400204b8 	.word	0x400204b8
 801d570:	58025408 	.word	0x58025408
 801d574:	5802541c 	.word	0x5802541c
 801d578:	58025430 	.word	0x58025430
 801d57c:	58025444 	.word	0x58025444
 801d580:	58025458 	.word	0x58025458
 801d584:	5802546c 	.word	0x5802546c
 801d588:	58025480 	.word	0x58025480
 801d58c:	58025494 	.word	0x58025494
 801d590:	2300      	movs	r3, #0
 801d592:	2b00      	cmp	r3, #0
 801d594:	d008      	beq.n	801d5a8 <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 801d596:	68fb      	ldr	r3, [r7, #12]
 801d598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d59a:	f003 031f 	and.w	r3, r3, #31
 801d59e:	2230      	movs	r2, #48	@ 0x30
 801d5a0:	409a      	lsls	r2, r3
 801d5a2:	69fb      	ldr	r3, [r7, #28]
 801d5a4:	601a      	str	r2, [r3, #0]
 801d5a6:	e007      	b.n	801d5b8 <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 801d5a8:	68fb      	ldr	r3, [r7, #12]
 801d5aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d5ac:	f003 031f 	and.w	r3, r3, #31
 801d5b0:	2202      	movs	r2, #2
 801d5b2:	409a      	lsls	r2, r3
 801d5b4:	69fb      	ldr	r3, [r7, #28]
 801d5b6:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
 801d5b8:	68fb      	ldr	r3, [r7, #12]
 801d5ba:	2201      	movs	r2, #1
 801d5bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801d5c0:	68fb      	ldr	r3, [r7, #12]
 801d5c2:	2200      	movs	r2, #0
 801d5c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 801d5c8:	e065      	b.n	801d696 <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d5ca:	68fb      	ldr	r3, [r7, #12]
 801d5cc:	681b      	ldr	r3, [r3, #0]
 801d5ce:	4a34      	ldr	r2, [pc, #208]	@ (801d6a0 <HAL_DMA_PollForTransfer+0x714>)
 801d5d0:	4293      	cmp	r3, r2
 801d5d2:	d04a      	beq.n	801d66a <HAL_DMA_PollForTransfer+0x6de>
 801d5d4:	68fb      	ldr	r3, [r7, #12]
 801d5d6:	681b      	ldr	r3, [r3, #0]
 801d5d8:	4a32      	ldr	r2, [pc, #200]	@ (801d6a4 <HAL_DMA_PollForTransfer+0x718>)
 801d5da:	4293      	cmp	r3, r2
 801d5dc:	d045      	beq.n	801d66a <HAL_DMA_PollForTransfer+0x6de>
 801d5de:	68fb      	ldr	r3, [r7, #12]
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	4a31      	ldr	r2, [pc, #196]	@ (801d6a8 <HAL_DMA_PollForTransfer+0x71c>)
 801d5e4:	4293      	cmp	r3, r2
 801d5e6:	d040      	beq.n	801d66a <HAL_DMA_PollForTransfer+0x6de>
 801d5e8:	68fb      	ldr	r3, [r7, #12]
 801d5ea:	681b      	ldr	r3, [r3, #0]
 801d5ec:	4a2f      	ldr	r2, [pc, #188]	@ (801d6ac <HAL_DMA_PollForTransfer+0x720>)
 801d5ee:	4293      	cmp	r3, r2
 801d5f0:	d03b      	beq.n	801d66a <HAL_DMA_PollForTransfer+0x6de>
 801d5f2:	68fb      	ldr	r3, [r7, #12]
 801d5f4:	681b      	ldr	r3, [r3, #0]
 801d5f6:	4a2e      	ldr	r2, [pc, #184]	@ (801d6b0 <HAL_DMA_PollForTransfer+0x724>)
 801d5f8:	4293      	cmp	r3, r2
 801d5fa:	d036      	beq.n	801d66a <HAL_DMA_PollForTransfer+0x6de>
 801d5fc:	68fb      	ldr	r3, [r7, #12]
 801d5fe:	681b      	ldr	r3, [r3, #0]
 801d600:	4a2c      	ldr	r2, [pc, #176]	@ (801d6b4 <HAL_DMA_PollForTransfer+0x728>)
 801d602:	4293      	cmp	r3, r2
 801d604:	d031      	beq.n	801d66a <HAL_DMA_PollForTransfer+0x6de>
 801d606:	68fb      	ldr	r3, [r7, #12]
 801d608:	681b      	ldr	r3, [r3, #0]
 801d60a:	4a2b      	ldr	r2, [pc, #172]	@ (801d6b8 <HAL_DMA_PollForTransfer+0x72c>)
 801d60c:	4293      	cmp	r3, r2
 801d60e:	d02c      	beq.n	801d66a <HAL_DMA_PollForTransfer+0x6de>
 801d610:	68fb      	ldr	r3, [r7, #12]
 801d612:	681b      	ldr	r3, [r3, #0]
 801d614:	4a29      	ldr	r2, [pc, #164]	@ (801d6bc <HAL_DMA_PollForTransfer+0x730>)
 801d616:	4293      	cmp	r3, r2
 801d618:	d027      	beq.n	801d66a <HAL_DMA_PollForTransfer+0x6de>
 801d61a:	68fb      	ldr	r3, [r7, #12]
 801d61c:	681b      	ldr	r3, [r3, #0]
 801d61e:	4a28      	ldr	r2, [pc, #160]	@ (801d6c0 <HAL_DMA_PollForTransfer+0x734>)
 801d620:	4293      	cmp	r3, r2
 801d622:	d022      	beq.n	801d66a <HAL_DMA_PollForTransfer+0x6de>
 801d624:	68fb      	ldr	r3, [r7, #12]
 801d626:	681b      	ldr	r3, [r3, #0]
 801d628:	4a26      	ldr	r2, [pc, #152]	@ (801d6c4 <HAL_DMA_PollForTransfer+0x738>)
 801d62a:	4293      	cmp	r3, r2
 801d62c:	d01d      	beq.n	801d66a <HAL_DMA_PollForTransfer+0x6de>
 801d62e:	68fb      	ldr	r3, [r7, #12]
 801d630:	681b      	ldr	r3, [r3, #0]
 801d632:	4a25      	ldr	r2, [pc, #148]	@ (801d6c8 <HAL_DMA_PollForTransfer+0x73c>)
 801d634:	4293      	cmp	r3, r2
 801d636:	d018      	beq.n	801d66a <HAL_DMA_PollForTransfer+0x6de>
 801d638:	68fb      	ldr	r3, [r7, #12]
 801d63a:	681b      	ldr	r3, [r3, #0]
 801d63c:	4a23      	ldr	r2, [pc, #140]	@ (801d6cc <HAL_DMA_PollForTransfer+0x740>)
 801d63e:	4293      	cmp	r3, r2
 801d640:	d013      	beq.n	801d66a <HAL_DMA_PollForTransfer+0x6de>
 801d642:	68fb      	ldr	r3, [r7, #12]
 801d644:	681b      	ldr	r3, [r3, #0]
 801d646:	4a22      	ldr	r2, [pc, #136]	@ (801d6d0 <HAL_DMA_PollForTransfer+0x744>)
 801d648:	4293      	cmp	r3, r2
 801d64a:	d00e      	beq.n	801d66a <HAL_DMA_PollForTransfer+0x6de>
 801d64c:	68fb      	ldr	r3, [r7, #12]
 801d64e:	681b      	ldr	r3, [r3, #0]
 801d650:	4a20      	ldr	r2, [pc, #128]	@ (801d6d4 <HAL_DMA_PollForTransfer+0x748>)
 801d652:	4293      	cmp	r3, r2
 801d654:	d009      	beq.n	801d66a <HAL_DMA_PollForTransfer+0x6de>
 801d656:	68fb      	ldr	r3, [r7, #12]
 801d658:	681b      	ldr	r3, [r3, #0]
 801d65a:	4a1f      	ldr	r2, [pc, #124]	@ (801d6d8 <HAL_DMA_PollForTransfer+0x74c>)
 801d65c:	4293      	cmp	r3, r2
 801d65e:	d004      	beq.n	801d66a <HAL_DMA_PollForTransfer+0x6de>
 801d660:	68fb      	ldr	r3, [r7, #12]
 801d662:	681b      	ldr	r3, [r3, #0]
 801d664:	4a1d      	ldr	r2, [pc, #116]	@ (801d6dc <HAL_DMA_PollForTransfer+0x750>)
 801d666:	4293      	cmp	r3, r2
 801d668:	d101      	bne.n	801d66e <HAL_DMA_PollForTransfer+0x6e2>
 801d66a:	2301      	movs	r3, #1
 801d66c:	e000      	b.n	801d670 <HAL_DMA_PollForTransfer+0x6e4>
 801d66e:	2300      	movs	r3, #0
 801d670:	2b00      	cmp	r3, #0
 801d672:	d008      	beq.n	801d686 <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 801d674:	68fb      	ldr	r3, [r7, #12]
 801d676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d678:	f003 031f 	and.w	r3, r3, #31
 801d67c:	2210      	movs	r2, #16
 801d67e:	409a      	lsls	r2, r3
 801d680:	69fb      	ldr	r3, [r7, #28]
 801d682:	601a      	str	r2, [r3, #0]
 801d684:	e007      	b.n	801d696 <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 801d686:	68fb      	ldr	r3, [r7, #12]
 801d688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d68a:	f003 031f 	and.w	r3, r3, #31
 801d68e:	2204      	movs	r2, #4
 801d690:	409a      	lsls	r2, r3
 801d692:	69fb      	ldr	r3, [r7, #28]
 801d694:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 801d696:	7efb      	ldrb	r3, [r7, #27]
}
 801d698:	4618      	mov	r0, r3
 801d69a:	3728      	adds	r7, #40	@ 0x28
 801d69c:	46bd      	mov	sp, r7
 801d69e:	bd80      	pop	{r7, pc}
 801d6a0:	40020010 	.word	0x40020010
 801d6a4:	40020028 	.word	0x40020028
 801d6a8:	40020040 	.word	0x40020040
 801d6ac:	40020058 	.word	0x40020058
 801d6b0:	40020070 	.word	0x40020070
 801d6b4:	40020088 	.word	0x40020088
 801d6b8:	400200a0 	.word	0x400200a0
 801d6bc:	400200b8 	.word	0x400200b8
 801d6c0:	40020410 	.word	0x40020410
 801d6c4:	40020428 	.word	0x40020428
 801d6c8:	40020440 	.word	0x40020440
 801d6cc:	40020458 	.word	0x40020458
 801d6d0:	40020470 	.word	0x40020470
 801d6d4:	40020488 	.word	0x40020488
 801d6d8:	400204a0 	.word	0x400204a0
 801d6dc:	400204b8 	.word	0x400204b8

0801d6e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801d6e0:	b480      	push	{r7}
 801d6e2:	b087      	sub	sp, #28
 801d6e4:	af00      	add	r7, sp, #0
 801d6e6:	60f8      	str	r0, [r7, #12]
 801d6e8:	60b9      	str	r1, [r7, #8]
 801d6ea:	607a      	str	r2, [r7, #4]
 801d6ec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801d6ee:	68fb      	ldr	r3, [r7, #12]
 801d6f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d6f2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801d6f4:	68fb      	ldr	r3, [r7, #12]
 801d6f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d6f8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801d6fa:	68fb      	ldr	r3, [r7, #12]
 801d6fc:	681b      	ldr	r3, [r3, #0]
 801d6fe:	4a7f      	ldr	r2, [pc, #508]	@ (801d8fc <DMA_SetConfig+0x21c>)
 801d700:	4293      	cmp	r3, r2
 801d702:	d072      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d704:	68fb      	ldr	r3, [r7, #12]
 801d706:	681b      	ldr	r3, [r3, #0]
 801d708:	4a7d      	ldr	r2, [pc, #500]	@ (801d900 <DMA_SetConfig+0x220>)
 801d70a:	4293      	cmp	r3, r2
 801d70c:	d06d      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	681b      	ldr	r3, [r3, #0]
 801d712:	4a7c      	ldr	r2, [pc, #496]	@ (801d904 <DMA_SetConfig+0x224>)
 801d714:	4293      	cmp	r3, r2
 801d716:	d068      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d718:	68fb      	ldr	r3, [r7, #12]
 801d71a:	681b      	ldr	r3, [r3, #0]
 801d71c:	4a7a      	ldr	r2, [pc, #488]	@ (801d908 <DMA_SetConfig+0x228>)
 801d71e:	4293      	cmp	r3, r2
 801d720:	d063      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d722:	68fb      	ldr	r3, [r7, #12]
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	4a79      	ldr	r2, [pc, #484]	@ (801d90c <DMA_SetConfig+0x22c>)
 801d728:	4293      	cmp	r3, r2
 801d72a:	d05e      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d72c:	68fb      	ldr	r3, [r7, #12]
 801d72e:	681b      	ldr	r3, [r3, #0]
 801d730:	4a77      	ldr	r2, [pc, #476]	@ (801d910 <DMA_SetConfig+0x230>)
 801d732:	4293      	cmp	r3, r2
 801d734:	d059      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	4a76      	ldr	r2, [pc, #472]	@ (801d914 <DMA_SetConfig+0x234>)
 801d73c:	4293      	cmp	r3, r2
 801d73e:	d054      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	681b      	ldr	r3, [r3, #0]
 801d744:	4a74      	ldr	r2, [pc, #464]	@ (801d918 <DMA_SetConfig+0x238>)
 801d746:	4293      	cmp	r3, r2
 801d748:	d04f      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	4a73      	ldr	r2, [pc, #460]	@ (801d91c <DMA_SetConfig+0x23c>)
 801d750:	4293      	cmp	r3, r2
 801d752:	d04a      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d754:	68fb      	ldr	r3, [r7, #12]
 801d756:	681b      	ldr	r3, [r3, #0]
 801d758:	4a71      	ldr	r2, [pc, #452]	@ (801d920 <DMA_SetConfig+0x240>)
 801d75a:	4293      	cmp	r3, r2
 801d75c:	d045      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d75e:	68fb      	ldr	r3, [r7, #12]
 801d760:	681b      	ldr	r3, [r3, #0]
 801d762:	4a70      	ldr	r2, [pc, #448]	@ (801d924 <DMA_SetConfig+0x244>)
 801d764:	4293      	cmp	r3, r2
 801d766:	d040      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d768:	68fb      	ldr	r3, [r7, #12]
 801d76a:	681b      	ldr	r3, [r3, #0]
 801d76c:	4a6e      	ldr	r2, [pc, #440]	@ (801d928 <DMA_SetConfig+0x248>)
 801d76e:	4293      	cmp	r3, r2
 801d770:	d03b      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d772:	68fb      	ldr	r3, [r7, #12]
 801d774:	681b      	ldr	r3, [r3, #0]
 801d776:	4a6d      	ldr	r2, [pc, #436]	@ (801d92c <DMA_SetConfig+0x24c>)
 801d778:	4293      	cmp	r3, r2
 801d77a:	d036      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d77c:	68fb      	ldr	r3, [r7, #12]
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	4a6b      	ldr	r2, [pc, #428]	@ (801d930 <DMA_SetConfig+0x250>)
 801d782:	4293      	cmp	r3, r2
 801d784:	d031      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d786:	68fb      	ldr	r3, [r7, #12]
 801d788:	681b      	ldr	r3, [r3, #0]
 801d78a:	4a6a      	ldr	r2, [pc, #424]	@ (801d934 <DMA_SetConfig+0x254>)
 801d78c:	4293      	cmp	r3, r2
 801d78e:	d02c      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d790:	68fb      	ldr	r3, [r7, #12]
 801d792:	681b      	ldr	r3, [r3, #0]
 801d794:	4a68      	ldr	r2, [pc, #416]	@ (801d938 <DMA_SetConfig+0x258>)
 801d796:	4293      	cmp	r3, r2
 801d798:	d027      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d79a:	68fb      	ldr	r3, [r7, #12]
 801d79c:	681b      	ldr	r3, [r3, #0]
 801d79e:	4a67      	ldr	r2, [pc, #412]	@ (801d93c <DMA_SetConfig+0x25c>)
 801d7a0:	4293      	cmp	r3, r2
 801d7a2:	d022      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d7a4:	68fb      	ldr	r3, [r7, #12]
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	4a65      	ldr	r2, [pc, #404]	@ (801d940 <DMA_SetConfig+0x260>)
 801d7aa:	4293      	cmp	r3, r2
 801d7ac:	d01d      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d7ae:	68fb      	ldr	r3, [r7, #12]
 801d7b0:	681b      	ldr	r3, [r3, #0]
 801d7b2:	4a64      	ldr	r2, [pc, #400]	@ (801d944 <DMA_SetConfig+0x264>)
 801d7b4:	4293      	cmp	r3, r2
 801d7b6:	d018      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d7b8:	68fb      	ldr	r3, [r7, #12]
 801d7ba:	681b      	ldr	r3, [r3, #0]
 801d7bc:	4a62      	ldr	r2, [pc, #392]	@ (801d948 <DMA_SetConfig+0x268>)
 801d7be:	4293      	cmp	r3, r2
 801d7c0:	d013      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d7c2:	68fb      	ldr	r3, [r7, #12]
 801d7c4:	681b      	ldr	r3, [r3, #0]
 801d7c6:	4a61      	ldr	r2, [pc, #388]	@ (801d94c <DMA_SetConfig+0x26c>)
 801d7c8:	4293      	cmp	r3, r2
 801d7ca:	d00e      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d7cc:	68fb      	ldr	r3, [r7, #12]
 801d7ce:	681b      	ldr	r3, [r3, #0]
 801d7d0:	4a5f      	ldr	r2, [pc, #380]	@ (801d950 <DMA_SetConfig+0x270>)
 801d7d2:	4293      	cmp	r3, r2
 801d7d4:	d009      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d7d6:	68fb      	ldr	r3, [r7, #12]
 801d7d8:	681b      	ldr	r3, [r3, #0]
 801d7da:	4a5e      	ldr	r2, [pc, #376]	@ (801d954 <DMA_SetConfig+0x274>)
 801d7dc:	4293      	cmp	r3, r2
 801d7de:	d004      	beq.n	801d7ea <DMA_SetConfig+0x10a>
 801d7e0:	68fb      	ldr	r3, [r7, #12]
 801d7e2:	681b      	ldr	r3, [r3, #0]
 801d7e4:	4a5c      	ldr	r2, [pc, #368]	@ (801d958 <DMA_SetConfig+0x278>)
 801d7e6:	4293      	cmp	r3, r2
 801d7e8:	d101      	bne.n	801d7ee <DMA_SetConfig+0x10e>
 801d7ea:	2301      	movs	r3, #1
 801d7ec:	e000      	b.n	801d7f0 <DMA_SetConfig+0x110>
 801d7ee:	2300      	movs	r3, #0
 801d7f0:	2b00      	cmp	r3, #0
 801d7f2:	d00d      	beq.n	801d810 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801d7f4:	68fb      	ldr	r3, [r7, #12]
 801d7f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d7f8:	68fa      	ldr	r2, [r7, #12]
 801d7fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801d7fc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801d7fe:	68fb      	ldr	r3, [r7, #12]
 801d800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d802:	2b00      	cmp	r3, #0
 801d804:	d004      	beq.n	801d810 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d80a:	68fa      	ldr	r2, [r7, #12]
 801d80c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801d80e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801d810:	68fb      	ldr	r3, [r7, #12]
 801d812:	681b      	ldr	r3, [r3, #0]
 801d814:	4a39      	ldr	r2, [pc, #228]	@ (801d8fc <DMA_SetConfig+0x21c>)
 801d816:	4293      	cmp	r3, r2
 801d818:	d04a      	beq.n	801d8b0 <DMA_SetConfig+0x1d0>
 801d81a:	68fb      	ldr	r3, [r7, #12]
 801d81c:	681b      	ldr	r3, [r3, #0]
 801d81e:	4a38      	ldr	r2, [pc, #224]	@ (801d900 <DMA_SetConfig+0x220>)
 801d820:	4293      	cmp	r3, r2
 801d822:	d045      	beq.n	801d8b0 <DMA_SetConfig+0x1d0>
 801d824:	68fb      	ldr	r3, [r7, #12]
 801d826:	681b      	ldr	r3, [r3, #0]
 801d828:	4a36      	ldr	r2, [pc, #216]	@ (801d904 <DMA_SetConfig+0x224>)
 801d82a:	4293      	cmp	r3, r2
 801d82c:	d040      	beq.n	801d8b0 <DMA_SetConfig+0x1d0>
 801d82e:	68fb      	ldr	r3, [r7, #12]
 801d830:	681b      	ldr	r3, [r3, #0]
 801d832:	4a35      	ldr	r2, [pc, #212]	@ (801d908 <DMA_SetConfig+0x228>)
 801d834:	4293      	cmp	r3, r2
 801d836:	d03b      	beq.n	801d8b0 <DMA_SetConfig+0x1d0>
 801d838:	68fb      	ldr	r3, [r7, #12]
 801d83a:	681b      	ldr	r3, [r3, #0]
 801d83c:	4a33      	ldr	r2, [pc, #204]	@ (801d90c <DMA_SetConfig+0x22c>)
 801d83e:	4293      	cmp	r3, r2
 801d840:	d036      	beq.n	801d8b0 <DMA_SetConfig+0x1d0>
 801d842:	68fb      	ldr	r3, [r7, #12]
 801d844:	681b      	ldr	r3, [r3, #0]
 801d846:	4a32      	ldr	r2, [pc, #200]	@ (801d910 <DMA_SetConfig+0x230>)
 801d848:	4293      	cmp	r3, r2
 801d84a:	d031      	beq.n	801d8b0 <DMA_SetConfig+0x1d0>
 801d84c:	68fb      	ldr	r3, [r7, #12]
 801d84e:	681b      	ldr	r3, [r3, #0]
 801d850:	4a30      	ldr	r2, [pc, #192]	@ (801d914 <DMA_SetConfig+0x234>)
 801d852:	4293      	cmp	r3, r2
 801d854:	d02c      	beq.n	801d8b0 <DMA_SetConfig+0x1d0>
 801d856:	68fb      	ldr	r3, [r7, #12]
 801d858:	681b      	ldr	r3, [r3, #0]
 801d85a:	4a2f      	ldr	r2, [pc, #188]	@ (801d918 <DMA_SetConfig+0x238>)
 801d85c:	4293      	cmp	r3, r2
 801d85e:	d027      	beq.n	801d8b0 <DMA_SetConfig+0x1d0>
 801d860:	68fb      	ldr	r3, [r7, #12]
 801d862:	681b      	ldr	r3, [r3, #0]
 801d864:	4a2d      	ldr	r2, [pc, #180]	@ (801d91c <DMA_SetConfig+0x23c>)
 801d866:	4293      	cmp	r3, r2
 801d868:	d022      	beq.n	801d8b0 <DMA_SetConfig+0x1d0>
 801d86a:	68fb      	ldr	r3, [r7, #12]
 801d86c:	681b      	ldr	r3, [r3, #0]
 801d86e:	4a2c      	ldr	r2, [pc, #176]	@ (801d920 <DMA_SetConfig+0x240>)
 801d870:	4293      	cmp	r3, r2
 801d872:	d01d      	beq.n	801d8b0 <DMA_SetConfig+0x1d0>
 801d874:	68fb      	ldr	r3, [r7, #12]
 801d876:	681b      	ldr	r3, [r3, #0]
 801d878:	4a2a      	ldr	r2, [pc, #168]	@ (801d924 <DMA_SetConfig+0x244>)
 801d87a:	4293      	cmp	r3, r2
 801d87c:	d018      	beq.n	801d8b0 <DMA_SetConfig+0x1d0>
 801d87e:	68fb      	ldr	r3, [r7, #12]
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	4a29      	ldr	r2, [pc, #164]	@ (801d928 <DMA_SetConfig+0x248>)
 801d884:	4293      	cmp	r3, r2
 801d886:	d013      	beq.n	801d8b0 <DMA_SetConfig+0x1d0>
 801d888:	68fb      	ldr	r3, [r7, #12]
 801d88a:	681b      	ldr	r3, [r3, #0]
 801d88c:	4a27      	ldr	r2, [pc, #156]	@ (801d92c <DMA_SetConfig+0x24c>)
 801d88e:	4293      	cmp	r3, r2
 801d890:	d00e      	beq.n	801d8b0 <DMA_SetConfig+0x1d0>
 801d892:	68fb      	ldr	r3, [r7, #12]
 801d894:	681b      	ldr	r3, [r3, #0]
 801d896:	4a26      	ldr	r2, [pc, #152]	@ (801d930 <DMA_SetConfig+0x250>)
 801d898:	4293      	cmp	r3, r2
 801d89a:	d009      	beq.n	801d8b0 <DMA_SetConfig+0x1d0>
 801d89c:	68fb      	ldr	r3, [r7, #12]
 801d89e:	681b      	ldr	r3, [r3, #0]
 801d8a0:	4a24      	ldr	r2, [pc, #144]	@ (801d934 <DMA_SetConfig+0x254>)
 801d8a2:	4293      	cmp	r3, r2
 801d8a4:	d004      	beq.n	801d8b0 <DMA_SetConfig+0x1d0>
 801d8a6:	68fb      	ldr	r3, [r7, #12]
 801d8a8:	681b      	ldr	r3, [r3, #0]
 801d8aa:	4a23      	ldr	r2, [pc, #140]	@ (801d938 <DMA_SetConfig+0x258>)
 801d8ac:	4293      	cmp	r3, r2
 801d8ae:	d101      	bne.n	801d8b4 <DMA_SetConfig+0x1d4>
 801d8b0:	2301      	movs	r3, #1
 801d8b2:	e000      	b.n	801d8b6 <DMA_SetConfig+0x1d6>
 801d8b4:	2300      	movs	r3, #0
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d059      	beq.n	801d96e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d8be:	f003 031f 	and.w	r3, r3, #31
 801d8c2:	223f      	movs	r2, #63	@ 0x3f
 801d8c4:	409a      	lsls	r2, r3
 801d8c6:	697b      	ldr	r3, [r7, #20]
 801d8c8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801d8ca:	68fb      	ldr	r3, [r7, #12]
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	681a      	ldr	r2, [r3, #0]
 801d8d0:	68fb      	ldr	r3, [r7, #12]
 801d8d2:	681b      	ldr	r3, [r3, #0]
 801d8d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801d8d8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	683a      	ldr	r2, [r7, #0]
 801d8e0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	689b      	ldr	r3, [r3, #8]
 801d8e6:	2b40      	cmp	r3, #64	@ 0x40
 801d8e8:	d138      	bne.n	801d95c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 801d8ea:	68fb      	ldr	r3, [r7, #12]
 801d8ec:	681b      	ldr	r3, [r3, #0]
 801d8ee:	687a      	ldr	r2, [r7, #4]
 801d8f0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 801d8f2:	68fb      	ldr	r3, [r7, #12]
 801d8f4:	681b      	ldr	r3, [r3, #0]
 801d8f6:	68ba      	ldr	r2, [r7, #8]
 801d8f8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 801d8fa:	e086      	b.n	801da0a <DMA_SetConfig+0x32a>
 801d8fc:	40020010 	.word	0x40020010
 801d900:	40020028 	.word	0x40020028
 801d904:	40020040 	.word	0x40020040
 801d908:	40020058 	.word	0x40020058
 801d90c:	40020070 	.word	0x40020070
 801d910:	40020088 	.word	0x40020088
 801d914:	400200a0 	.word	0x400200a0
 801d918:	400200b8 	.word	0x400200b8
 801d91c:	40020410 	.word	0x40020410
 801d920:	40020428 	.word	0x40020428
 801d924:	40020440 	.word	0x40020440
 801d928:	40020458 	.word	0x40020458
 801d92c:	40020470 	.word	0x40020470
 801d930:	40020488 	.word	0x40020488
 801d934:	400204a0 	.word	0x400204a0
 801d938:	400204b8 	.word	0x400204b8
 801d93c:	58025408 	.word	0x58025408
 801d940:	5802541c 	.word	0x5802541c
 801d944:	58025430 	.word	0x58025430
 801d948:	58025444 	.word	0x58025444
 801d94c:	58025458 	.word	0x58025458
 801d950:	5802546c 	.word	0x5802546c
 801d954:	58025480 	.word	0x58025480
 801d958:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 801d95c:	68fb      	ldr	r3, [r7, #12]
 801d95e:	681b      	ldr	r3, [r3, #0]
 801d960:	68ba      	ldr	r2, [r7, #8]
 801d962:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 801d964:	68fb      	ldr	r3, [r7, #12]
 801d966:	681b      	ldr	r3, [r3, #0]
 801d968:	687a      	ldr	r2, [r7, #4]
 801d96a:	60da      	str	r2, [r3, #12]
}
 801d96c:	e04d      	b.n	801da0a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801d96e:	68fb      	ldr	r3, [r7, #12]
 801d970:	681b      	ldr	r3, [r3, #0]
 801d972:	4a29      	ldr	r2, [pc, #164]	@ (801da18 <DMA_SetConfig+0x338>)
 801d974:	4293      	cmp	r3, r2
 801d976:	d022      	beq.n	801d9be <DMA_SetConfig+0x2de>
 801d978:	68fb      	ldr	r3, [r7, #12]
 801d97a:	681b      	ldr	r3, [r3, #0]
 801d97c:	4a27      	ldr	r2, [pc, #156]	@ (801da1c <DMA_SetConfig+0x33c>)
 801d97e:	4293      	cmp	r3, r2
 801d980:	d01d      	beq.n	801d9be <DMA_SetConfig+0x2de>
 801d982:	68fb      	ldr	r3, [r7, #12]
 801d984:	681b      	ldr	r3, [r3, #0]
 801d986:	4a26      	ldr	r2, [pc, #152]	@ (801da20 <DMA_SetConfig+0x340>)
 801d988:	4293      	cmp	r3, r2
 801d98a:	d018      	beq.n	801d9be <DMA_SetConfig+0x2de>
 801d98c:	68fb      	ldr	r3, [r7, #12]
 801d98e:	681b      	ldr	r3, [r3, #0]
 801d990:	4a24      	ldr	r2, [pc, #144]	@ (801da24 <DMA_SetConfig+0x344>)
 801d992:	4293      	cmp	r3, r2
 801d994:	d013      	beq.n	801d9be <DMA_SetConfig+0x2de>
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	681b      	ldr	r3, [r3, #0]
 801d99a:	4a23      	ldr	r2, [pc, #140]	@ (801da28 <DMA_SetConfig+0x348>)
 801d99c:	4293      	cmp	r3, r2
 801d99e:	d00e      	beq.n	801d9be <DMA_SetConfig+0x2de>
 801d9a0:	68fb      	ldr	r3, [r7, #12]
 801d9a2:	681b      	ldr	r3, [r3, #0]
 801d9a4:	4a21      	ldr	r2, [pc, #132]	@ (801da2c <DMA_SetConfig+0x34c>)
 801d9a6:	4293      	cmp	r3, r2
 801d9a8:	d009      	beq.n	801d9be <DMA_SetConfig+0x2de>
 801d9aa:	68fb      	ldr	r3, [r7, #12]
 801d9ac:	681b      	ldr	r3, [r3, #0]
 801d9ae:	4a20      	ldr	r2, [pc, #128]	@ (801da30 <DMA_SetConfig+0x350>)
 801d9b0:	4293      	cmp	r3, r2
 801d9b2:	d004      	beq.n	801d9be <DMA_SetConfig+0x2de>
 801d9b4:	68fb      	ldr	r3, [r7, #12]
 801d9b6:	681b      	ldr	r3, [r3, #0]
 801d9b8:	4a1e      	ldr	r2, [pc, #120]	@ (801da34 <DMA_SetConfig+0x354>)
 801d9ba:	4293      	cmp	r3, r2
 801d9bc:	d101      	bne.n	801d9c2 <DMA_SetConfig+0x2e2>
 801d9be:	2301      	movs	r3, #1
 801d9c0:	e000      	b.n	801d9c4 <DMA_SetConfig+0x2e4>
 801d9c2:	2300      	movs	r3, #0
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	d020      	beq.n	801da0a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801d9c8:	68fb      	ldr	r3, [r7, #12]
 801d9ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d9cc:	f003 031f 	and.w	r3, r3, #31
 801d9d0:	2201      	movs	r2, #1
 801d9d2:	409a      	lsls	r2, r3
 801d9d4:	693b      	ldr	r3, [r7, #16]
 801d9d6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	683a      	ldr	r2, [r7, #0]
 801d9de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801d9e0:	68fb      	ldr	r3, [r7, #12]
 801d9e2:	689b      	ldr	r3, [r3, #8]
 801d9e4:	2b40      	cmp	r3, #64	@ 0x40
 801d9e6:	d108      	bne.n	801d9fa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 801d9e8:	68fb      	ldr	r3, [r7, #12]
 801d9ea:	681b      	ldr	r3, [r3, #0]
 801d9ec:	687a      	ldr	r2, [r7, #4]
 801d9ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	681b      	ldr	r3, [r3, #0]
 801d9f4:	68ba      	ldr	r2, [r7, #8]
 801d9f6:	60da      	str	r2, [r3, #12]
}
 801d9f8:	e007      	b.n	801da0a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 801d9fa:	68fb      	ldr	r3, [r7, #12]
 801d9fc:	681b      	ldr	r3, [r3, #0]
 801d9fe:	68ba      	ldr	r2, [r7, #8]
 801da00:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 801da02:	68fb      	ldr	r3, [r7, #12]
 801da04:	681b      	ldr	r3, [r3, #0]
 801da06:	687a      	ldr	r2, [r7, #4]
 801da08:	60da      	str	r2, [r3, #12]
}
 801da0a:	bf00      	nop
 801da0c:	371c      	adds	r7, #28
 801da0e:	46bd      	mov	sp, r7
 801da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da14:	4770      	bx	lr
 801da16:	bf00      	nop
 801da18:	58025408 	.word	0x58025408
 801da1c:	5802541c 	.word	0x5802541c
 801da20:	58025430 	.word	0x58025430
 801da24:	58025444 	.word	0x58025444
 801da28:	58025458 	.word	0x58025458
 801da2c:	5802546c 	.word	0x5802546c
 801da30:	58025480 	.word	0x58025480
 801da34:	58025494 	.word	0x58025494

0801da38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801da38:	b480      	push	{r7}
 801da3a:	b085      	sub	sp, #20
 801da3c:	af00      	add	r7, sp, #0
 801da3e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	681b      	ldr	r3, [r3, #0]
 801da44:	4a42      	ldr	r2, [pc, #264]	@ (801db50 <DMA_CalcBaseAndBitshift+0x118>)
 801da46:	4293      	cmp	r3, r2
 801da48:	d04a      	beq.n	801dae0 <DMA_CalcBaseAndBitshift+0xa8>
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	681b      	ldr	r3, [r3, #0]
 801da4e:	4a41      	ldr	r2, [pc, #260]	@ (801db54 <DMA_CalcBaseAndBitshift+0x11c>)
 801da50:	4293      	cmp	r3, r2
 801da52:	d045      	beq.n	801dae0 <DMA_CalcBaseAndBitshift+0xa8>
 801da54:	687b      	ldr	r3, [r7, #4]
 801da56:	681b      	ldr	r3, [r3, #0]
 801da58:	4a3f      	ldr	r2, [pc, #252]	@ (801db58 <DMA_CalcBaseAndBitshift+0x120>)
 801da5a:	4293      	cmp	r3, r2
 801da5c:	d040      	beq.n	801dae0 <DMA_CalcBaseAndBitshift+0xa8>
 801da5e:	687b      	ldr	r3, [r7, #4]
 801da60:	681b      	ldr	r3, [r3, #0]
 801da62:	4a3e      	ldr	r2, [pc, #248]	@ (801db5c <DMA_CalcBaseAndBitshift+0x124>)
 801da64:	4293      	cmp	r3, r2
 801da66:	d03b      	beq.n	801dae0 <DMA_CalcBaseAndBitshift+0xa8>
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	681b      	ldr	r3, [r3, #0]
 801da6c:	4a3c      	ldr	r2, [pc, #240]	@ (801db60 <DMA_CalcBaseAndBitshift+0x128>)
 801da6e:	4293      	cmp	r3, r2
 801da70:	d036      	beq.n	801dae0 <DMA_CalcBaseAndBitshift+0xa8>
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	681b      	ldr	r3, [r3, #0]
 801da76:	4a3b      	ldr	r2, [pc, #236]	@ (801db64 <DMA_CalcBaseAndBitshift+0x12c>)
 801da78:	4293      	cmp	r3, r2
 801da7a:	d031      	beq.n	801dae0 <DMA_CalcBaseAndBitshift+0xa8>
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	681b      	ldr	r3, [r3, #0]
 801da80:	4a39      	ldr	r2, [pc, #228]	@ (801db68 <DMA_CalcBaseAndBitshift+0x130>)
 801da82:	4293      	cmp	r3, r2
 801da84:	d02c      	beq.n	801dae0 <DMA_CalcBaseAndBitshift+0xa8>
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	681b      	ldr	r3, [r3, #0]
 801da8a:	4a38      	ldr	r2, [pc, #224]	@ (801db6c <DMA_CalcBaseAndBitshift+0x134>)
 801da8c:	4293      	cmp	r3, r2
 801da8e:	d027      	beq.n	801dae0 <DMA_CalcBaseAndBitshift+0xa8>
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	681b      	ldr	r3, [r3, #0]
 801da94:	4a36      	ldr	r2, [pc, #216]	@ (801db70 <DMA_CalcBaseAndBitshift+0x138>)
 801da96:	4293      	cmp	r3, r2
 801da98:	d022      	beq.n	801dae0 <DMA_CalcBaseAndBitshift+0xa8>
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	681b      	ldr	r3, [r3, #0]
 801da9e:	4a35      	ldr	r2, [pc, #212]	@ (801db74 <DMA_CalcBaseAndBitshift+0x13c>)
 801daa0:	4293      	cmp	r3, r2
 801daa2:	d01d      	beq.n	801dae0 <DMA_CalcBaseAndBitshift+0xa8>
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	681b      	ldr	r3, [r3, #0]
 801daa8:	4a33      	ldr	r2, [pc, #204]	@ (801db78 <DMA_CalcBaseAndBitshift+0x140>)
 801daaa:	4293      	cmp	r3, r2
 801daac:	d018      	beq.n	801dae0 <DMA_CalcBaseAndBitshift+0xa8>
 801daae:	687b      	ldr	r3, [r7, #4]
 801dab0:	681b      	ldr	r3, [r3, #0]
 801dab2:	4a32      	ldr	r2, [pc, #200]	@ (801db7c <DMA_CalcBaseAndBitshift+0x144>)
 801dab4:	4293      	cmp	r3, r2
 801dab6:	d013      	beq.n	801dae0 <DMA_CalcBaseAndBitshift+0xa8>
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	4a30      	ldr	r2, [pc, #192]	@ (801db80 <DMA_CalcBaseAndBitshift+0x148>)
 801dabe:	4293      	cmp	r3, r2
 801dac0:	d00e      	beq.n	801dae0 <DMA_CalcBaseAndBitshift+0xa8>
 801dac2:	687b      	ldr	r3, [r7, #4]
 801dac4:	681b      	ldr	r3, [r3, #0]
 801dac6:	4a2f      	ldr	r2, [pc, #188]	@ (801db84 <DMA_CalcBaseAndBitshift+0x14c>)
 801dac8:	4293      	cmp	r3, r2
 801daca:	d009      	beq.n	801dae0 <DMA_CalcBaseAndBitshift+0xa8>
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	681b      	ldr	r3, [r3, #0]
 801dad0:	4a2d      	ldr	r2, [pc, #180]	@ (801db88 <DMA_CalcBaseAndBitshift+0x150>)
 801dad2:	4293      	cmp	r3, r2
 801dad4:	d004      	beq.n	801dae0 <DMA_CalcBaseAndBitshift+0xa8>
 801dad6:	687b      	ldr	r3, [r7, #4]
 801dad8:	681b      	ldr	r3, [r3, #0]
 801dada:	4a2c      	ldr	r2, [pc, #176]	@ (801db8c <DMA_CalcBaseAndBitshift+0x154>)
 801dadc:	4293      	cmp	r3, r2
 801dade:	d101      	bne.n	801dae4 <DMA_CalcBaseAndBitshift+0xac>
 801dae0:	2301      	movs	r3, #1
 801dae2:	e000      	b.n	801dae6 <DMA_CalcBaseAndBitshift+0xae>
 801dae4:	2300      	movs	r3, #0
 801dae6:	2b00      	cmp	r3, #0
 801dae8:	d024      	beq.n	801db34 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801daea:	687b      	ldr	r3, [r7, #4]
 801daec:	681b      	ldr	r3, [r3, #0]
 801daee:	b2db      	uxtb	r3, r3
 801daf0:	3b10      	subs	r3, #16
 801daf2:	4a27      	ldr	r2, [pc, #156]	@ (801db90 <DMA_CalcBaseAndBitshift+0x158>)
 801daf4:	fba2 2303 	umull	r2, r3, r2, r3
 801daf8:	091b      	lsrs	r3, r3, #4
 801dafa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801dafc:	68fb      	ldr	r3, [r7, #12]
 801dafe:	f003 0307 	and.w	r3, r3, #7
 801db02:	4a24      	ldr	r2, [pc, #144]	@ (801db94 <DMA_CalcBaseAndBitshift+0x15c>)
 801db04:	5cd3      	ldrb	r3, [r2, r3]
 801db06:	461a      	mov	r2, r3
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801db0c:	68fb      	ldr	r3, [r7, #12]
 801db0e:	2b03      	cmp	r3, #3
 801db10:	d908      	bls.n	801db24 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801db12:	687b      	ldr	r3, [r7, #4]
 801db14:	681b      	ldr	r3, [r3, #0]
 801db16:	461a      	mov	r2, r3
 801db18:	4b1f      	ldr	r3, [pc, #124]	@ (801db98 <DMA_CalcBaseAndBitshift+0x160>)
 801db1a:	4013      	ands	r3, r2
 801db1c:	1d1a      	adds	r2, r3, #4
 801db1e:	687b      	ldr	r3, [r7, #4]
 801db20:	659a      	str	r2, [r3, #88]	@ 0x58
 801db22:	e00d      	b.n	801db40 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801db24:	687b      	ldr	r3, [r7, #4]
 801db26:	681b      	ldr	r3, [r3, #0]
 801db28:	461a      	mov	r2, r3
 801db2a:	4b1b      	ldr	r3, [pc, #108]	@ (801db98 <DMA_CalcBaseAndBitshift+0x160>)
 801db2c:	4013      	ands	r3, r2
 801db2e:	687a      	ldr	r2, [r7, #4]
 801db30:	6593      	str	r3, [r2, #88]	@ 0x58
 801db32:	e005      	b.n	801db40 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	681b      	ldr	r3, [r3, #0]
 801db38:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801db44:	4618      	mov	r0, r3
 801db46:	3714      	adds	r7, #20
 801db48:	46bd      	mov	sp, r7
 801db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db4e:	4770      	bx	lr
 801db50:	40020010 	.word	0x40020010
 801db54:	40020028 	.word	0x40020028
 801db58:	40020040 	.word	0x40020040
 801db5c:	40020058 	.word	0x40020058
 801db60:	40020070 	.word	0x40020070
 801db64:	40020088 	.word	0x40020088
 801db68:	400200a0 	.word	0x400200a0
 801db6c:	400200b8 	.word	0x400200b8
 801db70:	40020410 	.word	0x40020410
 801db74:	40020428 	.word	0x40020428
 801db78:	40020440 	.word	0x40020440
 801db7c:	40020458 	.word	0x40020458
 801db80:	40020470 	.word	0x40020470
 801db84:	40020488 	.word	0x40020488
 801db88:	400204a0 	.word	0x400204a0
 801db8c:	400204b8 	.word	0x400204b8
 801db90:	aaaaaaab 	.word	0xaaaaaaab
 801db94:	0802b780 	.word	0x0802b780
 801db98:	fffffc00 	.word	0xfffffc00

0801db9c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801db9c:	b480      	push	{r7}
 801db9e:	b085      	sub	sp, #20
 801dba0:	af00      	add	r7, sp, #0
 801dba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801dba4:	2300      	movs	r3, #0
 801dba6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801dba8:	687b      	ldr	r3, [r7, #4]
 801dbaa:	699b      	ldr	r3, [r3, #24]
 801dbac:	2b00      	cmp	r3, #0
 801dbae:	d120      	bne.n	801dbf2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dbb4:	2b03      	cmp	r3, #3
 801dbb6:	d858      	bhi.n	801dc6a <DMA_CheckFifoParam+0xce>
 801dbb8:	a201      	add	r2, pc, #4	@ (adr r2, 801dbc0 <DMA_CheckFifoParam+0x24>)
 801dbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dbbe:	bf00      	nop
 801dbc0:	0801dbd1 	.word	0x0801dbd1
 801dbc4:	0801dbe3 	.word	0x0801dbe3
 801dbc8:	0801dbd1 	.word	0x0801dbd1
 801dbcc:	0801dc6b 	.word	0x0801dc6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dbd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	d048      	beq.n	801dc6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801dbdc:	2301      	movs	r3, #1
 801dbde:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801dbe0:	e045      	b.n	801dc6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801dbe2:	687b      	ldr	r3, [r7, #4]
 801dbe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dbe6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801dbea:	d142      	bne.n	801dc72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801dbec:	2301      	movs	r3, #1
 801dbee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801dbf0:	e03f      	b.n	801dc72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	699b      	ldr	r3, [r3, #24]
 801dbf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801dbfa:	d123      	bne.n	801dc44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc00:	2b03      	cmp	r3, #3
 801dc02:	d838      	bhi.n	801dc76 <DMA_CheckFifoParam+0xda>
 801dc04:	a201      	add	r2, pc, #4	@ (adr r2, 801dc0c <DMA_CheckFifoParam+0x70>)
 801dc06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dc0a:	bf00      	nop
 801dc0c:	0801dc1d 	.word	0x0801dc1d
 801dc10:	0801dc23 	.word	0x0801dc23
 801dc14:	0801dc1d 	.word	0x0801dc1d
 801dc18:	0801dc35 	.word	0x0801dc35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801dc1c:	2301      	movs	r3, #1
 801dc1e:	73fb      	strb	r3, [r7, #15]
        break;
 801dc20:	e030      	b.n	801dc84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801dc22:	687b      	ldr	r3, [r7, #4]
 801dc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dc26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801dc2a:	2b00      	cmp	r3, #0
 801dc2c:	d025      	beq.n	801dc7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801dc2e:	2301      	movs	r3, #1
 801dc30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801dc32:	e022      	b.n	801dc7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dc38:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801dc3c:	d11f      	bne.n	801dc7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801dc3e:	2301      	movs	r3, #1
 801dc40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801dc42:	e01c      	b.n	801dc7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc48:	2b02      	cmp	r3, #2
 801dc4a:	d902      	bls.n	801dc52 <DMA_CheckFifoParam+0xb6>
 801dc4c:	2b03      	cmp	r3, #3
 801dc4e:	d003      	beq.n	801dc58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801dc50:	e018      	b.n	801dc84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801dc52:	2301      	movs	r3, #1
 801dc54:	73fb      	strb	r3, [r7, #15]
        break;
 801dc56:	e015      	b.n	801dc84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dc5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801dc60:	2b00      	cmp	r3, #0
 801dc62:	d00e      	beq.n	801dc82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801dc64:	2301      	movs	r3, #1
 801dc66:	73fb      	strb	r3, [r7, #15]
    break;
 801dc68:	e00b      	b.n	801dc82 <DMA_CheckFifoParam+0xe6>
        break;
 801dc6a:	bf00      	nop
 801dc6c:	e00a      	b.n	801dc84 <DMA_CheckFifoParam+0xe8>
        break;
 801dc6e:	bf00      	nop
 801dc70:	e008      	b.n	801dc84 <DMA_CheckFifoParam+0xe8>
        break;
 801dc72:	bf00      	nop
 801dc74:	e006      	b.n	801dc84 <DMA_CheckFifoParam+0xe8>
        break;
 801dc76:	bf00      	nop
 801dc78:	e004      	b.n	801dc84 <DMA_CheckFifoParam+0xe8>
        break;
 801dc7a:	bf00      	nop
 801dc7c:	e002      	b.n	801dc84 <DMA_CheckFifoParam+0xe8>
        break;
 801dc7e:	bf00      	nop
 801dc80:	e000      	b.n	801dc84 <DMA_CheckFifoParam+0xe8>
    break;
 801dc82:	bf00      	nop
    }
  }

  return status;
 801dc84:	7bfb      	ldrb	r3, [r7, #15]
}
 801dc86:	4618      	mov	r0, r3
 801dc88:	3714      	adds	r7, #20
 801dc8a:	46bd      	mov	sp, r7
 801dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc90:	4770      	bx	lr
 801dc92:	bf00      	nop

0801dc94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801dc94:	b480      	push	{r7}
 801dc96:	b085      	sub	sp, #20
 801dc98:	af00      	add	r7, sp, #0
 801dc9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801dc9c:	687b      	ldr	r3, [r7, #4]
 801dc9e:	681b      	ldr	r3, [r3, #0]
 801dca0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801dca2:	687b      	ldr	r3, [r7, #4]
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	4a38      	ldr	r2, [pc, #224]	@ (801dd88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801dca8:	4293      	cmp	r3, r2
 801dcaa:	d022      	beq.n	801dcf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	681b      	ldr	r3, [r3, #0]
 801dcb0:	4a36      	ldr	r2, [pc, #216]	@ (801dd8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801dcb2:	4293      	cmp	r3, r2
 801dcb4:	d01d      	beq.n	801dcf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	681b      	ldr	r3, [r3, #0]
 801dcba:	4a35      	ldr	r2, [pc, #212]	@ (801dd90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801dcbc:	4293      	cmp	r3, r2
 801dcbe:	d018      	beq.n	801dcf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801dcc0:	687b      	ldr	r3, [r7, #4]
 801dcc2:	681b      	ldr	r3, [r3, #0]
 801dcc4:	4a33      	ldr	r2, [pc, #204]	@ (801dd94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801dcc6:	4293      	cmp	r3, r2
 801dcc8:	d013      	beq.n	801dcf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801dcca:	687b      	ldr	r3, [r7, #4]
 801dccc:	681b      	ldr	r3, [r3, #0]
 801dcce:	4a32      	ldr	r2, [pc, #200]	@ (801dd98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801dcd0:	4293      	cmp	r3, r2
 801dcd2:	d00e      	beq.n	801dcf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	681b      	ldr	r3, [r3, #0]
 801dcd8:	4a30      	ldr	r2, [pc, #192]	@ (801dd9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801dcda:	4293      	cmp	r3, r2
 801dcdc:	d009      	beq.n	801dcf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801dcde:	687b      	ldr	r3, [r7, #4]
 801dce0:	681b      	ldr	r3, [r3, #0]
 801dce2:	4a2f      	ldr	r2, [pc, #188]	@ (801dda0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801dce4:	4293      	cmp	r3, r2
 801dce6:	d004      	beq.n	801dcf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	681b      	ldr	r3, [r3, #0]
 801dcec:	4a2d      	ldr	r2, [pc, #180]	@ (801dda4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801dcee:	4293      	cmp	r3, r2
 801dcf0:	d101      	bne.n	801dcf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801dcf2:	2301      	movs	r3, #1
 801dcf4:	e000      	b.n	801dcf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801dcf6:	2300      	movs	r3, #0
 801dcf8:	2b00      	cmp	r3, #0
 801dcfa:	d01a      	beq.n	801dd32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	681b      	ldr	r3, [r3, #0]
 801dd00:	b2db      	uxtb	r3, r3
 801dd02:	3b08      	subs	r3, #8
 801dd04:	4a28      	ldr	r2, [pc, #160]	@ (801dda8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801dd06:	fba2 2303 	umull	r2, r3, r2, r3
 801dd0a:	091b      	lsrs	r3, r3, #4
 801dd0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801dd0e:	68fa      	ldr	r2, [r7, #12]
 801dd10:	4b26      	ldr	r3, [pc, #152]	@ (801ddac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801dd12:	4413      	add	r3, r2
 801dd14:	009b      	lsls	r3, r3, #2
 801dd16:	461a      	mov	r2, r3
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	4a24      	ldr	r2, [pc, #144]	@ (801ddb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801dd20:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801dd22:	68fb      	ldr	r3, [r7, #12]
 801dd24:	f003 031f 	and.w	r3, r3, #31
 801dd28:	2201      	movs	r2, #1
 801dd2a:	409a      	lsls	r2, r3
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801dd30:	e024      	b.n	801dd7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801dd32:	687b      	ldr	r3, [r7, #4]
 801dd34:	681b      	ldr	r3, [r3, #0]
 801dd36:	b2db      	uxtb	r3, r3
 801dd38:	3b10      	subs	r3, #16
 801dd3a:	4a1e      	ldr	r2, [pc, #120]	@ (801ddb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801dd3c:	fba2 2303 	umull	r2, r3, r2, r3
 801dd40:	091b      	lsrs	r3, r3, #4
 801dd42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801dd44:	68bb      	ldr	r3, [r7, #8]
 801dd46:	4a1c      	ldr	r2, [pc, #112]	@ (801ddb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801dd48:	4293      	cmp	r3, r2
 801dd4a:	d806      	bhi.n	801dd5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801dd4c:	68bb      	ldr	r3, [r7, #8]
 801dd4e:	4a1b      	ldr	r2, [pc, #108]	@ (801ddbc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801dd50:	4293      	cmp	r3, r2
 801dd52:	d902      	bls.n	801dd5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801dd54:	68fb      	ldr	r3, [r7, #12]
 801dd56:	3308      	adds	r3, #8
 801dd58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801dd5a:	68fa      	ldr	r2, [r7, #12]
 801dd5c:	4b18      	ldr	r3, [pc, #96]	@ (801ddc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801dd5e:	4413      	add	r3, r2
 801dd60:	009b      	lsls	r3, r3, #2
 801dd62:	461a      	mov	r2, r3
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801dd68:	687b      	ldr	r3, [r7, #4]
 801dd6a:	4a16      	ldr	r2, [pc, #88]	@ (801ddc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801dd6c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801dd6e:	68fb      	ldr	r3, [r7, #12]
 801dd70:	f003 031f 	and.w	r3, r3, #31
 801dd74:	2201      	movs	r2, #1
 801dd76:	409a      	lsls	r2, r3
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801dd7c:	bf00      	nop
 801dd7e:	3714      	adds	r7, #20
 801dd80:	46bd      	mov	sp, r7
 801dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd86:	4770      	bx	lr
 801dd88:	58025408 	.word	0x58025408
 801dd8c:	5802541c 	.word	0x5802541c
 801dd90:	58025430 	.word	0x58025430
 801dd94:	58025444 	.word	0x58025444
 801dd98:	58025458 	.word	0x58025458
 801dd9c:	5802546c 	.word	0x5802546c
 801dda0:	58025480 	.word	0x58025480
 801dda4:	58025494 	.word	0x58025494
 801dda8:	cccccccd 	.word	0xcccccccd
 801ddac:	16009600 	.word	0x16009600
 801ddb0:	58025880 	.word	0x58025880
 801ddb4:	aaaaaaab 	.word	0xaaaaaaab
 801ddb8:	400204b8 	.word	0x400204b8
 801ddbc:	4002040f 	.word	0x4002040f
 801ddc0:	10008200 	.word	0x10008200
 801ddc4:	40020880 	.word	0x40020880

0801ddc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801ddc8:	b480      	push	{r7}
 801ddca:	b085      	sub	sp, #20
 801ddcc:	af00      	add	r7, sp, #0
 801ddce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801ddd0:	687b      	ldr	r3, [r7, #4]
 801ddd2:	685b      	ldr	r3, [r3, #4]
 801ddd4:	b2db      	uxtb	r3, r3
 801ddd6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801ddd8:	68fb      	ldr	r3, [r7, #12]
 801ddda:	2b00      	cmp	r3, #0
 801dddc:	d04a      	beq.n	801de74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801ddde:	68fb      	ldr	r3, [r7, #12]
 801dde0:	2b08      	cmp	r3, #8
 801dde2:	d847      	bhi.n	801de74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	681b      	ldr	r3, [r3, #0]
 801dde8:	4a25      	ldr	r2, [pc, #148]	@ (801de80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801ddea:	4293      	cmp	r3, r2
 801ddec:	d022      	beq.n	801de34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801ddee:	687b      	ldr	r3, [r7, #4]
 801ddf0:	681b      	ldr	r3, [r3, #0]
 801ddf2:	4a24      	ldr	r2, [pc, #144]	@ (801de84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801ddf4:	4293      	cmp	r3, r2
 801ddf6:	d01d      	beq.n	801de34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801ddf8:	687b      	ldr	r3, [r7, #4]
 801ddfa:	681b      	ldr	r3, [r3, #0]
 801ddfc:	4a22      	ldr	r2, [pc, #136]	@ (801de88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801ddfe:	4293      	cmp	r3, r2
 801de00:	d018      	beq.n	801de34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	681b      	ldr	r3, [r3, #0]
 801de06:	4a21      	ldr	r2, [pc, #132]	@ (801de8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801de08:	4293      	cmp	r3, r2
 801de0a:	d013      	beq.n	801de34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	4a1f      	ldr	r2, [pc, #124]	@ (801de90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801de12:	4293      	cmp	r3, r2
 801de14:	d00e      	beq.n	801de34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801de16:	687b      	ldr	r3, [r7, #4]
 801de18:	681b      	ldr	r3, [r3, #0]
 801de1a:	4a1e      	ldr	r2, [pc, #120]	@ (801de94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801de1c:	4293      	cmp	r3, r2
 801de1e:	d009      	beq.n	801de34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801de20:	687b      	ldr	r3, [r7, #4]
 801de22:	681b      	ldr	r3, [r3, #0]
 801de24:	4a1c      	ldr	r2, [pc, #112]	@ (801de98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801de26:	4293      	cmp	r3, r2
 801de28:	d004      	beq.n	801de34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	681b      	ldr	r3, [r3, #0]
 801de2e:	4a1b      	ldr	r2, [pc, #108]	@ (801de9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801de30:	4293      	cmp	r3, r2
 801de32:	d101      	bne.n	801de38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801de34:	2301      	movs	r3, #1
 801de36:	e000      	b.n	801de3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801de38:	2300      	movs	r3, #0
 801de3a:	2b00      	cmp	r3, #0
 801de3c:	d00a      	beq.n	801de54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801de3e:	68fa      	ldr	r2, [r7, #12]
 801de40:	4b17      	ldr	r3, [pc, #92]	@ (801dea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801de42:	4413      	add	r3, r2
 801de44:	009b      	lsls	r3, r3, #2
 801de46:	461a      	mov	r2, r3
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	4a15      	ldr	r2, [pc, #84]	@ (801dea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801de50:	671a      	str	r2, [r3, #112]	@ 0x70
 801de52:	e009      	b.n	801de68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801de54:	68fa      	ldr	r2, [r7, #12]
 801de56:	4b14      	ldr	r3, [pc, #80]	@ (801dea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801de58:	4413      	add	r3, r2
 801de5a:	009b      	lsls	r3, r3, #2
 801de5c:	461a      	mov	r2, r3
 801de5e:	687b      	ldr	r3, [r7, #4]
 801de60:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	4a11      	ldr	r2, [pc, #68]	@ (801deac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801de66:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801de68:	68fb      	ldr	r3, [r7, #12]
 801de6a:	3b01      	subs	r3, #1
 801de6c:	2201      	movs	r2, #1
 801de6e:	409a      	lsls	r2, r3
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801de74:	bf00      	nop
 801de76:	3714      	adds	r7, #20
 801de78:	46bd      	mov	sp, r7
 801de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de7e:	4770      	bx	lr
 801de80:	58025408 	.word	0x58025408
 801de84:	5802541c 	.word	0x5802541c
 801de88:	58025430 	.word	0x58025430
 801de8c:	58025444 	.word	0x58025444
 801de90:	58025458 	.word	0x58025458
 801de94:	5802546c 	.word	0x5802546c
 801de98:	58025480 	.word	0x58025480
 801de9c:	58025494 	.word	0x58025494
 801dea0:	1600963f 	.word	0x1600963f
 801dea4:	58025940 	.word	0x58025940
 801dea8:	1000823f 	.word	0x1000823f
 801deac:	40020940 	.word	0x40020940

0801deb0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 801deb0:	b580      	push	{r7, lr}
 801deb2:	b086      	sub	sp, #24
 801deb4:	af00      	add	r7, sp, #0
 801deb6:	60f8      	str	r0, [r7, #12]
 801deb8:	60b9      	str	r1, [r7, #8]
 801deba:	607a      	str	r2, [r7, #4]
 801debc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801debe:	2300      	movs	r3, #0
 801dec0:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801dec2:	68fb      	ldr	r3, [r7, #12]
 801dec4:	689b      	ldr	r3, [r3, #8]
 801dec6:	2b80      	cmp	r3, #128	@ 0x80
 801dec8:	d105      	bne.n	801ded6 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ded0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801ded2:	2301      	movs	r3, #1
 801ded4:	e315      	b.n	801e502 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 801ded6:	68fb      	ldr	r3, [r7, #12]
 801ded8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801dedc:	2b01      	cmp	r3, #1
 801dede:	d101      	bne.n	801dee4 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 801dee0:	2302      	movs	r3, #2
 801dee2:	e30e      	b.n	801e502 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 801dee4:	68fb      	ldr	r3, [r7, #12]
 801dee6:	2201      	movs	r2, #1
 801dee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 801deec:	68fb      	ldr	r3, [r7, #12]
 801deee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801def2:	b2db      	uxtb	r3, r3
 801def4:	2b01      	cmp	r3, #1
 801def6:	f040 82fd 	bne.w	801e4f4 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801defa:	68fb      	ldr	r3, [r7, #12]
 801defc:	2202      	movs	r2, #2
 801defe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801df02:	68fb      	ldr	r3, [r7, #12]
 801df04:	2200      	movs	r2, #0
 801df06:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801df08:	68fb      	ldr	r3, [r7, #12]
 801df0a:	681b      	ldr	r3, [r3, #0]
 801df0c:	4a82      	ldr	r2, [pc, #520]	@ (801e118 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 801df0e:	4293      	cmp	r3, r2
 801df10:	d04a      	beq.n	801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df12:	68fb      	ldr	r3, [r7, #12]
 801df14:	681b      	ldr	r3, [r3, #0]
 801df16:	4a81      	ldr	r2, [pc, #516]	@ (801e11c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 801df18:	4293      	cmp	r3, r2
 801df1a:	d045      	beq.n	801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df1c:	68fb      	ldr	r3, [r7, #12]
 801df1e:	681b      	ldr	r3, [r3, #0]
 801df20:	4a7f      	ldr	r2, [pc, #508]	@ (801e120 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 801df22:	4293      	cmp	r3, r2
 801df24:	d040      	beq.n	801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df26:	68fb      	ldr	r3, [r7, #12]
 801df28:	681b      	ldr	r3, [r3, #0]
 801df2a:	4a7e      	ldr	r2, [pc, #504]	@ (801e124 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 801df2c:	4293      	cmp	r3, r2
 801df2e:	d03b      	beq.n	801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df30:	68fb      	ldr	r3, [r7, #12]
 801df32:	681b      	ldr	r3, [r3, #0]
 801df34:	4a7c      	ldr	r2, [pc, #496]	@ (801e128 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 801df36:	4293      	cmp	r3, r2
 801df38:	d036      	beq.n	801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df3a:	68fb      	ldr	r3, [r7, #12]
 801df3c:	681b      	ldr	r3, [r3, #0]
 801df3e:	4a7b      	ldr	r2, [pc, #492]	@ (801e12c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 801df40:	4293      	cmp	r3, r2
 801df42:	d031      	beq.n	801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df44:	68fb      	ldr	r3, [r7, #12]
 801df46:	681b      	ldr	r3, [r3, #0]
 801df48:	4a79      	ldr	r2, [pc, #484]	@ (801e130 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 801df4a:	4293      	cmp	r3, r2
 801df4c:	d02c      	beq.n	801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df4e:	68fb      	ldr	r3, [r7, #12]
 801df50:	681b      	ldr	r3, [r3, #0]
 801df52:	4a78      	ldr	r2, [pc, #480]	@ (801e134 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 801df54:	4293      	cmp	r3, r2
 801df56:	d027      	beq.n	801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df58:	68fb      	ldr	r3, [r7, #12]
 801df5a:	681b      	ldr	r3, [r3, #0]
 801df5c:	4a76      	ldr	r2, [pc, #472]	@ (801e138 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 801df5e:	4293      	cmp	r3, r2
 801df60:	d022      	beq.n	801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df62:	68fb      	ldr	r3, [r7, #12]
 801df64:	681b      	ldr	r3, [r3, #0]
 801df66:	4a75      	ldr	r2, [pc, #468]	@ (801e13c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 801df68:	4293      	cmp	r3, r2
 801df6a:	d01d      	beq.n	801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df6c:	68fb      	ldr	r3, [r7, #12]
 801df6e:	681b      	ldr	r3, [r3, #0]
 801df70:	4a73      	ldr	r2, [pc, #460]	@ (801e140 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 801df72:	4293      	cmp	r3, r2
 801df74:	d018      	beq.n	801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df76:	68fb      	ldr	r3, [r7, #12]
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	4a72      	ldr	r2, [pc, #456]	@ (801e144 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 801df7c:	4293      	cmp	r3, r2
 801df7e:	d013      	beq.n	801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df80:	68fb      	ldr	r3, [r7, #12]
 801df82:	681b      	ldr	r3, [r3, #0]
 801df84:	4a70      	ldr	r2, [pc, #448]	@ (801e148 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 801df86:	4293      	cmp	r3, r2
 801df88:	d00e      	beq.n	801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df8a:	68fb      	ldr	r3, [r7, #12]
 801df8c:	681b      	ldr	r3, [r3, #0]
 801df8e:	4a6f      	ldr	r2, [pc, #444]	@ (801e14c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 801df90:	4293      	cmp	r3, r2
 801df92:	d009      	beq.n	801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df94:	68fb      	ldr	r3, [r7, #12]
 801df96:	681b      	ldr	r3, [r3, #0]
 801df98:	4a6d      	ldr	r2, [pc, #436]	@ (801e150 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 801df9a:	4293      	cmp	r3, r2
 801df9c:	d004      	beq.n	801dfa8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801df9e:	68fb      	ldr	r3, [r7, #12]
 801dfa0:	681b      	ldr	r3, [r3, #0]
 801dfa2:	4a6c      	ldr	r2, [pc, #432]	@ (801e154 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 801dfa4:	4293      	cmp	r3, r2
 801dfa6:	d101      	bne.n	801dfac <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 801dfa8:	2301      	movs	r3, #1
 801dfaa:	e000      	b.n	801dfae <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 801dfac:	2300      	movs	r3, #0
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	d018      	beq.n	801dfe4 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 801dfb2:	68fb      	ldr	r3, [r7, #12]
 801dfb4:	681b      	ldr	r3, [r3, #0]
 801dfb6:	681a      	ldr	r2, [r3, #0]
 801dfb8:	68fb      	ldr	r3, [r7, #12]
 801dfba:	681b      	ldr	r3, [r3, #0]
 801dfbc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801dfc0:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 801dfc2:	68fb      	ldr	r3, [r7, #12]
 801dfc4:	681b      	ldr	r3, [r3, #0]
 801dfc6:	683a      	ldr	r2, [r7, #0]
 801dfc8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 801dfca:	68fb      	ldr	r3, [r7, #12]
 801dfcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dfce:	3308      	adds	r3, #8
 801dfd0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801dfd2:	68fb      	ldr	r3, [r7, #12]
 801dfd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801dfd6:	f003 031f 	and.w	r3, r3, #31
 801dfda:	223f      	movs	r2, #63	@ 0x3f
 801dfdc:	409a      	lsls	r2, r3
 801dfde:	693b      	ldr	r3, [r7, #16]
 801dfe0:	601a      	str	r2, [r3, #0]
 801dfe2:	e018      	b.n	801e016 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 801dfe4:	68fb      	ldr	r3, [r7, #12]
 801dfe6:	681b      	ldr	r3, [r3, #0]
 801dfe8:	6819      	ldr	r1, [r3, #0]
 801dfea:	68fb      	ldr	r3, [r7, #12]
 801dfec:	681a      	ldr	r2, [r3, #0]
 801dfee:	f248 0320 	movw	r3, #32800	@ 0x8020
 801dff2:	430b      	orrs	r3, r1
 801dff4:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 801dff6:	68fb      	ldr	r3, [r7, #12]
 801dff8:	681b      	ldr	r3, [r3, #0]
 801dffa:	683a      	ldr	r2, [r7, #0]
 801dffc:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 801dffe:	68fb      	ldr	r3, [r7, #12]
 801e000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e002:	3304      	adds	r3, #4
 801e004:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801e006:	68fb      	ldr	r3, [r7, #12]
 801e008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e00a:	f003 031f 	and.w	r3, r3, #31
 801e00e:	2201      	movs	r2, #1
 801e010:	409a      	lsls	r2, r3
 801e012:	693b      	ldr	r3, [r7, #16]
 801e014:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801e016:	6a3b      	ldr	r3, [r7, #32]
 801e018:	687a      	ldr	r2, [r7, #4]
 801e01a:	68b9      	ldr	r1, [r7, #8]
 801e01c:	68f8      	ldr	r0, [r7, #12]
 801e01e:	f000 faa5 	bl	801e56c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801e022:	68fb      	ldr	r3, [r7, #12]
 801e024:	681b      	ldr	r3, [r3, #0]
 801e026:	4a3c      	ldr	r2, [pc, #240]	@ (801e118 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 801e028:	4293      	cmp	r3, r2
 801e02a:	d072      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e02c:	68fb      	ldr	r3, [r7, #12]
 801e02e:	681b      	ldr	r3, [r3, #0]
 801e030:	4a3a      	ldr	r2, [pc, #232]	@ (801e11c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 801e032:	4293      	cmp	r3, r2
 801e034:	d06d      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e036:	68fb      	ldr	r3, [r7, #12]
 801e038:	681b      	ldr	r3, [r3, #0]
 801e03a:	4a39      	ldr	r2, [pc, #228]	@ (801e120 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 801e03c:	4293      	cmp	r3, r2
 801e03e:	d068      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	681b      	ldr	r3, [r3, #0]
 801e044:	4a37      	ldr	r2, [pc, #220]	@ (801e124 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 801e046:	4293      	cmp	r3, r2
 801e048:	d063      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e04a:	68fb      	ldr	r3, [r7, #12]
 801e04c:	681b      	ldr	r3, [r3, #0]
 801e04e:	4a36      	ldr	r2, [pc, #216]	@ (801e128 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 801e050:	4293      	cmp	r3, r2
 801e052:	d05e      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e054:	68fb      	ldr	r3, [r7, #12]
 801e056:	681b      	ldr	r3, [r3, #0]
 801e058:	4a34      	ldr	r2, [pc, #208]	@ (801e12c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 801e05a:	4293      	cmp	r3, r2
 801e05c:	d059      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e05e:	68fb      	ldr	r3, [r7, #12]
 801e060:	681b      	ldr	r3, [r3, #0]
 801e062:	4a33      	ldr	r2, [pc, #204]	@ (801e130 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 801e064:	4293      	cmp	r3, r2
 801e066:	d054      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e068:	68fb      	ldr	r3, [r7, #12]
 801e06a:	681b      	ldr	r3, [r3, #0]
 801e06c:	4a31      	ldr	r2, [pc, #196]	@ (801e134 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 801e06e:	4293      	cmp	r3, r2
 801e070:	d04f      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e072:	68fb      	ldr	r3, [r7, #12]
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	4a30      	ldr	r2, [pc, #192]	@ (801e138 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 801e078:	4293      	cmp	r3, r2
 801e07a:	d04a      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e07c:	68fb      	ldr	r3, [r7, #12]
 801e07e:	681b      	ldr	r3, [r3, #0]
 801e080:	4a2e      	ldr	r2, [pc, #184]	@ (801e13c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 801e082:	4293      	cmp	r3, r2
 801e084:	d045      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e086:	68fb      	ldr	r3, [r7, #12]
 801e088:	681b      	ldr	r3, [r3, #0]
 801e08a:	4a2d      	ldr	r2, [pc, #180]	@ (801e140 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 801e08c:	4293      	cmp	r3, r2
 801e08e:	d040      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e090:	68fb      	ldr	r3, [r7, #12]
 801e092:	681b      	ldr	r3, [r3, #0]
 801e094:	4a2b      	ldr	r2, [pc, #172]	@ (801e144 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 801e096:	4293      	cmp	r3, r2
 801e098:	d03b      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e09a:	68fb      	ldr	r3, [r7, #12]
 801e09c:	681b      	ldr	r3, [r3, #0]
 801e09e:	4a2a      	ldr	r2, [pc, #168]	@ (801e148 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 801e0a0:	4293      	cmp	r3, r2
 801e0a2:	d036      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e0a4:	68fb      	ldr	r3, [r7, #12]
 801e0a6:	681b      	ldr	r3, [r3, #0]
 801e0a8:	4a28      	ldr	r2, [pc, #160]	@ (801e14c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 801e0aa:	4293      	cmp	r3, r2
 801e0ac:	d031      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e0ae:	68fb      	ldr	r3, [r7, #12]
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	4a27      	ldr	r2, [pc, #156]	@ (801e150 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 801e0b4:	4293      	cmp	r3, r2
 801e0b6:	d02c      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e0b8:	68fb      	ldr	r3, [r7, #12]
 801e0ba:	681b      	ldr	r3, [r3, #0]
 801e0bc:	4a25      	ldr	r2, [pc, #148]	@ (801e154 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 801e0be:	4293      	cmp	r3, r2
 801e0c0:	d027      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e0c2:	68fb      	ldr	r3, [r7, #12]
 801e0c4:	681b      	ldr	r3, [r3, #0]
 801e0c6:	4a24      	ldr	r2, [pc, #144]	@ (801e158 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 801e0c8:	4293      	cmp	r3, r2
 801e0ca:	d022      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e0cc:	68fb      	ldr	r3, [r7, #12]
 801e0ce:	681b      	ldr	r3, [r3, #0]
 801e0d0:	4a22      	ldr	r2, [pc, #136]	@ (801e15c <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 801e0d2:	4293      	cmp	r3, r2
 801e0d4:	d01d      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e0d6:	68fb      	ldr	r3, [r7, #12]
 801e0d8:	681b      	ldr	r3, [r3, #0]
 801e0da:	4a21      	ldr	r2, [pc, #132]	@ (801e160 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 801e0dc:	4293      	cmp	r3, r2
 801e0de:	d018      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e0e0:	68fb      	ldr	r3, [r7, #12]
 801e0e2:	681b      	ldr	r3, [r3, #0]
 801e0e4:	4a1f      	ldr	r2, [pc, #124]	@ (801e164 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 801e0e6:	4293      	cmp	r3, r2
 801e0e8:	d013      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e0ea:	68fb      	ldr	r3, [r7, #12]
 801e0ec:	681b      	ldr	r3, [r3, #0]
 801e0ee:	4a1e      	ldr	r2, [pc, #120]	@ (801e168 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 801e0f0:	4293      	cmp	r3, r2
 801e0f2:	d00e      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e0f4:	68fb      	ldr	r3, [r7, #12]
 801e0f6:	681b      	ldr	r3, [r3, #0]
 801e0f8:	4a1c      	ldr	r2, [pc, #112]	@ (801e16c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 801e0fa:	4293      	cmp	r3, r2
 801e0fc:	d009      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e0fe:	68fb      	ldr	r3, [r7, #12]
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	4a1b      	ldr	r2, [pc, #108]	@ (801e170 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 801e104:	4293      	cmp	r3, r2
 801e106:	d004      	beq.n	801e112 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801e108:	68fb      	ldr	r3, [r7, #12]
 801e10a:	681b      	ldr	r3, [r3, #0]
 801e10c:	4a19      	ldr	r2, [pc, #100]	@ (801e174 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 801e10e:	4293      	cmp	r3, r2
 801e110:	d132      	bne.n	801e178 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 801e112:	2301      	movs	r3, #1
 801e114:	e031      	b.n	801e17a <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 801e116:	bf00      	nop
 801e118:	40020010 	.word	0x40020010
 801e11c:	40020028 	.word	0x40020028
 801e120:	40020040 	.word	0x40020040
 801e124:	40020058 	.word	0x40020058
 801e128:	40020070 	.word	0x40020070
 801e12c:	40020088 	.word	0x40020088
 801e130:	400200a0 	.word	0x400200a0
 801e134:	400200b8 	.word	0x400200b8
 801e138:	40020410 	.word	0x40020410
 801e13c:	40020428 	.word	0x40020428
 801e140:	40020440 	.word	0x40020440
 801e144:	40020458 	.word	0x40020458
 801e148:	40020470 	.word	0x40020470
 801e14c:	40020488 	.word	0x40020488
 801e150:	400204a0 	.word	0x400204a0
 801e154:	400204b8 	.word	0x400204b8
 801e158:	58025408 	.word	0x58025408
 801e15c:	5802541c 	.word	0x5802541c
 801e160:	58025430 	.word	0x58025430
 801e164:	58025444 	.word	0x58025444
 801e168:	58025458 	.word	0x58025458
 801e16c:	5802546c 	.word	0x5802546c
 801e170:	58025480 	.word	0x58025480
 801e174:	58025494 	.word	0x58025494
 801e178:	2300      	movs	r3, #0
 801e17a:	2b00      	cmp	r3, #0
 801e17c:	d00d      	beq.n	801e19a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801e17e:	68fb      	ldr	r3, [r7, #12]
 801e180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e182:	68fa      	ldr	r2, [r7, #12]
 801e184:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801e186:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 801e188:	68fb      	ldr	r3, [r7, #12]
 801e18a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	d004      	beq.n	801e19a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801e190:	68fb      	ldr	r3, [r7, #12]
 801e192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e194:	68fa      	ldr	r2, [r7, #12]
 801e196:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801e198:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801e19a:	68fb      	ldr	r3, [r7, #12]
 801e19c:	681b      	ldr	r3, [r3, #0]
 801e19e:	4a3b      	ldr	r2, [pc, #236]	@ (801e28c <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 801e1a0:	4293      	cmp	r3, r2
 801e1a2:	d04a      	beq.n	801e23a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e1a4:	68fb      	ldr	r3, [r7, #12]
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	4a39      	ldr	r2, [pc, #228]	@ (801e290 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 801e1aa:	4293      	cmp	r3, r2
 801e1ac:	d045      	beq.n	801e23a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e1ae:	68fb      	ldr	r3, [r7, #12]
 801e1b0:	681b      	ldr	r3, [r3, #0]
 801e1b2:	4a38      	ldr	r2, [pc, #224]	@ (801e294 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 801e1b4:	4293      	cmp	r3, r2
 801e1b6:	d040      	beq.n	801e23a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e1b8:	68fb      	ldr	r3, [r7, #12]
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	4a36      	ldr	r2, [pc, #216]	@ (801e298 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 801e1be:	4293      	cmp	r3, r2
 801e1c0:	d03b      	beq.n	801e23a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e1c2:	68fb      	ldr	r3, [r7, #12]
 801e1c4:	681b      	ldr	r3, [r3, #0]
 801e1c6:	4a35      	ldr	r2, [pc, #212]	@ (801e29c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 801e1c8:	4293      	cmp	r3, r2
 801e1ca:	d036      	beq.n	801e23a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e1cc:	68fb      	ldr	r3, [r7, #12]
 801e1ce:	681b      	ldr	r3, [r3, #0]
 801e1d0:	4a33      	ldr	r2, [pc, #204]	@ (801e2a0 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 801e1d2:	4293      	cmp	r3, r2
 801e1d4:	d031      	beq.n	801e23a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e1d6:	68fb      	ldr	r3, [r7, #12]
 801e1d8:	681b      	ldr	r3, [r3, #0]
 801e1da:	4a32      	ldr	r2, [pc, #200]	@ (801e2a4 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 801e1dc:	4293      	cmp	r3, r2
 801e1de:	d02c      	beq.n	801e23a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e1e0:	68fb      	ldr	r3, [r7, #12]
 801e1e2:	681b      	ldr	r3, [r3, #0]
 801e1e4:	4a30      	ldr	r2, [pc, #192]	@ (801e2a8 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 801e1e6:	4293      	cmp	r3, r2
 801e1e8:	d027      	beq.n	801e23a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e1ea:	68fb      	ldr	r3, [r7, #12]
 801e1ec:	681b      	ldr	r3, [r3, #0]
 801e1ee:	4a2f      	ldr	r2, [pc, #188]	@ (801e2ac <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 801e1f0:	4293      	cmp	r3, r2
 801e1f2:	d022      	beq.n	801e23a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e1f4:	68fb      	ldr	r3, [r7, #12]
 801e1f6:	681b      	ldr	r3, [r3, #0]
 801e1f8:	4a2d      	ldr	r2, [pc, #180]	@ (801e2b0 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 801e1fa:	4293      	cmp	r3, r2
 801e1fc:	d01d      	beq.n	801e23a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e1fe:	68fb      	ldr	r3, [r7, #12]
 801e200:	681b      	ldr	r3, [r3, #0]
 801e202:	4a2c      	ldr	r2, [pc, #176]	@ (801e2b4 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 801e204:	4293      	cmp	r3, r2
 801e206:	d018      	beq.n	801e23a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e208:	68fb      	ldr	r3, [r7, #12]
 801e20a:	681b      	ldr	r3, [r3, #0]
 801e20c:	4a2a      	ldr	r2, [pc, #168]	@ (801e2b8 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 801e20e:	4293      	cmp	r3, r2
 801e210:	d013      	beq.n	801e23a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e212:	68fb      	ldr	r3, [r7, #12]
 801e214:	681b      	ldr	r3, [r3, #0]
 801e216:	4a29      	ldr	r2, [pc, #164]	@ (801e2bc <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 801e218:	4293      	cmp	r3, r2
 801e21a:	d00e      	beq.n	801e23a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e21c:	68fb      	ldr	r3, [r7, #12]
 801e21e:	681b      	ldr	r3, [r3, #0]
 801e220:	4a27      	ldr	r2, [pc, #156]	@ (801e2c0 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 801e222:	4293      	cmp	r3, r2
 801e224:	d009      	beq.n	801e23a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e226:	68fb      	ldr	r3, [r7, #12]
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	4a26      	ldr	r2, [pc, #152]	@ (801e2c4 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 801e22c:	4293      	cmp	r3, r2
 801e22e:	d004      	beq.n	801e23a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801e230:	68fb      	ldr	r3, [r7, #12]
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	4a24      	ldr	r2, [pc, #144]	@ (801e2c8 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 801e236:	4293      	cmp	r3, r2
 801e238:	d101      	bne.n	801e23e <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 801e23a:	2301      	movs	r3, #1
 801e23c:	e000      	b.n	801e240 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 801e23e:	2300      	movs	r3, #0
 801e240:	2b00      	cmp	r3, #0
 801e242:	d043      	beq.n	801e2cc <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 801e244:	68fb      	ldr	r3, [r7, #12]
 801e246:	681b      	ldr	r3, [r3, #0]
 801e248:	681b      	ldr	r3, [r3, #0]
 801e24a:	f023 021e 	bic.w	r2, r3, #30
 801e24e:	68fb      	ldr	r3, [r7, #12]
 801e250:	681b      	ldr	r3, [r3, #0]
 801e252:	f042 0216 	orr.w	r2, r2, #22
 801e256:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 801e258:	68fb      	ldr	r3, [r7, #12]
 801e25a:	681b      	ldr	r3, [r3, #0]
 801e25c:	695a      	ldr	r2, [r3, #20]
 801e25e:	68fb      	ldr	r3, [r7, #12]
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801e266:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e268:	68fb      	ldr	r3, [r7, #12]
 801e26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	d103      	bne.n	801e278 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 801e270:	68fb      	ldr	r3, [r7, #12]
 801e272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e274:	2b00      	cmp	r3, #0
 801e276:	d043      	beq.n	801e300 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 801e278:	68fb      	ldr	r3, [r7, #12]
 801e27a:	681b      	ldr	r3, [r3, #0]
 801e27c:	681a      	ldr	r2, [r3, #0]
 801e27e:	68fb      	ldr	r3, [r7, #12]
 801e280:	681b      	ldr	r3, [r3, #0]
 801e282:	f042 0208 	orr.w	r2, r2, #8
 801e286:	601a      	str	r2, [r3, #0]
 801e288:	e03a      	b.n	801e300 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 801e28a:	bf00      	nop
 801e28c:	40020010 	.word	0x40020010
 801e290:	40020028 	.word	0x40020028
 801e294:	40020040 	.word	0x40020040
 801e298:	40020058 	.word	0x40020058
 801e29c:	40020070 	.word	0x40020070
 801e2a0:	40020088 	.word	0x40020088
 801e2a4:	400200a0 	.word	0x400200a0
 801e2a8:	400200b8 	.word	0x400200b8
 801e2ac:	40020410 	.word	0x40020410
 801e2b0:	40020428 	.word	0x40020428
 801e2b4:	40020440 	.word	0x40020440
 801e2b8:	40020458 	.word	0x40020458
 801e2bc:	40020470 	.word	0x40020470
 801e2c0:	40020488 	.word	0x40020488
 801e2c4:	400204a0 	.word	0x400204a0
 801e2c8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 801e2cc:	68fb      	ldr	r3, [r7, #12]
 801e2ce:	681b      	ldr	r3, [r3, #0]
 801e2d0:	681b      	ldr	r3, [r3, #0]
 801e2d2:	f023 020e 	bic.w	r2, r3, #14
 801e2d6:	68fb      	ldr	r3, [r7, #12]
 801e2d8:	681b      	ldr	r3, [r3, #0]
 801e2da:	f042 020a 	orr.w	r2, r2, #10
 801e2de:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e2e0:	68fb      	ldr	r3, [r7, #12]
 801e2e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e2e4:	2b00      	cmp	r3, #0
 801e2e6:	d103      	bne.n	801e2f0 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 801e2e8:	68fb      	ldr	r3, [r7, #12]
 801e2ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	d007      	beq.n	801e300 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 801e2f0:	68fb      	ldr	r3, [r7, #12]
 801e2f2:	681b      	ldr	r3, [r3, #0]
 801e2f4:	681a      	ldr	r2, [r3, #0]
 801e2f6:	68fb      	ldr	r3, [r7, #12]
 801e2f8:	681b      	ldr	r3, [r3, #0]
 801e2fa:	f042 0204 	orr.w	r2, r2, #4
 801e2fe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801e300:	68fb      	ldr	r3, [r7, #12]
 801e302:	681b      	ldr	r3, [r3, #0]
 801e304:	4a81      	ldr	r2, [pc, #516]	@ (801e50c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 801e306:	4293      	cmp	r3, r2
 801e308:	d072      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e30a:	68fb      	ldr	r3, [r7, #12]
 801e30c:	681b      	ldr	r3, [r3, #0]
 801e30e:	4a80      	ldr	r2, [pc, #512]	@ (801e510 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 801e310:	4293      	cmp	r3, r2
 801e312:	d06d      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e314:	68fb      	ldr	r3, [r7, #12]
 801e316:	681b      	ldr	r3, [r3, #0]
 801e318:	4a7e      	ldr	r2, [pc, #504]	@ (801e514 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 801e31a:	4293      	cmp	r3, r2
 801e31c:	d068      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e31e:	68fb      	ldr	r3, [r7, #12]
 801e320:	681b      	ldr	r3, [r3, #0]
 801e322:	4a7d      	ldr	r2, [pc, #500]	@ (801e518 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 801e324:	4293      	cmp	r3, r2
 801e326:	d063      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e328:	68fb      	ldr	r3, [r7, #12]
 801e32a:	681b      	ldr	r3, [r3, #0]
 801e32c:	4a7b      	ldr	r2, [pc, #492]	@ (801e51c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 801e32e:	4293      	cmp	r3, r2
 801e330:	d05e      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e332:	68fb      	ldr	r3, [r7, #12]
 801e334:	681b      	ldr	r3, [r3, #0]
 801e336:	4a7a      	ldr	r2, [pc, #488]	@ (801e520 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 801e338:	4293      	cmp	r3, r2
 801e33a:	d059      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e33c:	68fb      	ldr	r3, [r7, #12]
 801e33e:	681b      	ldr	r3, [r3, #0]
 801e340:	4a78      	ldr	r2, [pc, #480]	@ (801e524 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 801e342:	4293      	cmp	r3, r2
 801e344:	d054      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e346:	68fb      	ldr	r3, [r7, #12]
 801e348:	681b      	ldr	r3, [r3, #0]
 801e34a:	4a77      	ldr	r2, [pc, #476]	@ (801e528 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 801e34c:	4293      	cmp	r3, r2
 801e34e:	d04f      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e350:	68fb      	ldr	r3, [r7, #12]
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	4a75      	ldr	r2, [pc, #468]	@ (801e52c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801e356:	4293      	cmp	r3, r2
 801e358:	d04a      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e35a:	68fb      	ldr	r3, [r7, #12]
 801e35c:	681b      	ldr	r3, [r3, #0]
 801e35e:	4a74      	ldr	r2, [pc, #464]	@ (801e530 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 801e360:	4293      	cmp	r3, r2
 801e362:	d045      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e364:	68fb      	ldr	r3, [r7, #12]
 801e366:	681b      	ldr	r3, [r3, #0]
 801e368:	4a72      	ldr	r2, [pc, #456]	@ (801e534 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 801e36a:	4293      	cmp	r3, r2
 801e36c:	d040      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e36e:	68fb      	ldr	r3, [r7, #12]
 801e370:	681b      	ldr	r3, [r3, #0]
 801e372:	4a71      	ldr	r2, [pc, #452]	@ (801e538 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 801e374:	4293      	cmp	r3, r2
 801e376:	d03b      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e378:	68fb      	ldr	r3, [r7, #12]
 801e37a:	681b      	ldr	r3, [r3, #0]
 801e37c:	4a6f      	ldr	r2, [pc, #444]	@ (801e53c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 801e37e:	4293      	cmp	r3, r2
 801e380:	d036      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e382:	68fb      	ldr	r3, [r7, #12]
 801e384:	681b      	ldr	r3, [r3, #0]
 801e386:	4a6e      	ldr	r2, [pc, #440]	@ (801e540 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 801e388:	4293      	cmp	r3, r2
 801e38a:	d031      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e38c:	68fb      	ldr	r3, [r7, #12]
 801e38e:	681b      	ldr	r3, [r3, #0]
 801e390:	4a6c      	ldr	r2, [pc, #432]	@ (801e544 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 801e392:	4293      	cmp	r3, r2
 801e394:	d02c      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e396:	68fb      	ldr	r3, [r7, #12]
 801e398:	681b      	ldr	r3, [r3, #0]
 801e39a:	4a6b      	ldr	r2, [pc, #428]	@ (801e548 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 801e39c:	4293      	cmp	r3, r2
 801e39e:	d027      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e3a0:	68fb      	ldr	r3, [r7, #12]
 801e3a2:	681b      	ldr	r3, [r3, #0]
 801e3a4:	4a69      	ldr	r2, [pc, #420]	@ (801e54c <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 801e3a6:	4293      	cmp	r3, r2
 801e3a8:	d022      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e3aa:	68fb      	ldr	r3, [r7, #12]
 801e3ac:	681b      	ldr	r3, [r3, #0]
 801e3ae:	4a68      	ldr	r2, [pc, #416]	@ (801e550 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 801e3b0:	4293      	cmp	r3, r2
 801e3b2:	d01d      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e3b4:	68fb      	ldr	r3, [r7, #12]
 801e3b6:	681b      	ldr	r3, [r3, #0]
 801e3b8:	4a66      	ldr	r2, [pc, #408]	@ (801e554 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 801e3ba:	4293      	cmp	r3, r2
 801e3bc:	d018      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e3be:	68fb      	ldr	r3, [r7, #12]
 801e3c0:	681b      	ldr	r3, [r3, #0]
 801e3c2:	4a65      	ldr	r2, [pc, #404]	@ (801e558 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 801e3c4:	4293      	cmp	r3, r2
 801e3c6:	d013      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e3c8:	68fb      	ldr	r3, [r7, #12]
 801e3ca:	681b      	ldr	r3, [r3, #0]
 801e3cc:	4a63      	ldr	r2, [pc, #396]	@ (801e55c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 801e3ce:	4293      	cmp	r3, r2
 801e3d0:	d00e      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e3d2:	68fb      	ldr	r3, [r7, #12]
 801e3d4:	681b      	ldr	r3, [r3, #0]
 801e3d6:	4a62      	ldr	r2, [pc, #392]	@ (801e560 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 801e3d8:	4293      	cmp	r3, r2
 801e3da:	d009      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e3dc:	68fb      	ldr	r3, [r7, #12]
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	4a60      	ldr	r2, [pc, #384]	@ (801e564 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 801e3e2:	4293      	cmp	r3, r2
 801e3e4:	d004      	beq.n	801e3f0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801e3e6:	68fb      	ldr	r3, [r7, #12]
 801e3e8:	681b      	ldr	r3, [r3, #0]
 801e3ea:	4a5f      	ldr	r2, [pc, #380]	@ (801e568 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 801e3ec:	4293      	cmp	r3, r2
 801e3ee:	d101      	bne.n	801e3f4 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 801e3f0:	2301      	movs	r3, #1
 801e3f2:	e000      	b.n	801e3f6 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 801e3f4:	2300      	movs	r3, #0
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	d01a      	beq.n	801e430 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801e3fa:	68fb      	ldr	r3, [r7, #12]
 801e3fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e3fe:	681b      	ldr	r3, [r3, #0]
 801e400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801e404:	2b00      	cmp	r3, #0
 801e406:	d007      	beq.n	801e418 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801e408:	68fb      	ldr	r3, [r7, #12]
 801e40a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e40c:	681a      	ldr	r2, [r3, #0]
 801e40e:	68fb      	ldr	r3, [r7, #12]
 801e410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e412:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e416:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 801e418:	68fb      	ldr	r3, [r7, #12]
 801e41a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e41c:	2b00      	cmp	r3, #0
 801e41e:	d007      	beq.n	801e430 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801e420:	68fb      	ldr	r3, [r7, #12]
 801e422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e424:	681a      	ldr	r2, [r3, #0]
 801e426:	68fb      	ldr	r3, [r7, #12]
 801e428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e42a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e42e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 801e430:	68fb      	ldr	r3, [r7, #12]
 801e432:	681b      	ldr	r3, [r3, #0]
 801e434:	4a35      	ldr	r2, [pc, #212]	@ (801e50c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 801e436:	4293      	cmp	r3, r2
 801e438:	d04a      	beq.n	801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e43a:	68fb      	ldr	r3, [r7, #12]
 801e43c:	681b      	ldr	r3, [r3, #0]
 801e43e:	4a34      	ldr	r2, [pc, #208]	@ (801e510 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 801e440:	4293      	cmp	r3, r2
 801e442:	d045      	beq.n	801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e444:	68fb      	ldr	r3, [r7, #12]
 801e446:	681b      	ldr	r3, [r3, #0]
 801e448:	4a32      	ldr	r2, [pc, #200]	@ (801e514 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 801e44a:	4293      	cmp	r3, r2
 801e44c:	d040      	beq.n	801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e44e:	68fb      	ldr	r3, [r7, #12]
 801e450:	681b      	ldr	r3, [r3, #0]
 801e452:	4a31      	ldr	r2, [pc, #196]	@ (801e518 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 801e454:	4293      	cmp	r3, r2
 801e456:	d03b      	beq.n	801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e458:	68fb      	ldr	r3, [r7, #12]
 801e45a:	681b      	ldr	r3, [r3, #0]
 801e45c:	4a2f      	ldr	r2, [pc, #188]	@ (801e51c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 801e45e:	4293      	cmp	r3, r2
 801e460:	d036      	beq.n	801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e462:	68fb      	ldr	r3, [r7, #12]
 801e464:	681b      	ldr	r3, [r3, #0]
 801e466:	4a2e      	ldr	r2, [pc, #184]	@ (801e520 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 801e468:	4293      	cmp	r3, r2
 801e46a:	d031      	beq.n	801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e46c:	68fb      	ldr	r3, [r7, #12]
 801e46e:	681b      	ldr	r3, [r3, #0]
 801e470:	4a2c      	ldr	r2, [pc, #176]	@ (801e524 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 801e472:	4293      	cmp	r3, r2
 801e474:	d02c      	beq.n	801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e476:	68fb      	ldr	r3, [r7, #12]
 801e478:	681b      	ldr	r3, [r3, #0]
 801e47a:	4a2b      	ldr	r2, [pc, #172]	@ (801e528 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 801e47c:	4293      	cmp	r3, r2
 801e47e:	d027      	beq.n	801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e480:	68fb      	ldr	r3, [r7, #12]
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	4a29      	ldr	r2, [pc, #164]	@ (801e52c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 801e486:	4293      	cmp	r3, r2
 801e488:	d022      	beq.n	801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e48a:	68fb      	ldr	r3, [r7, #12]
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	4a28      	ldr	r2, [pc, #160]	@ (801e530 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 801e490:	4293      	cmp	r3, r2
 801e492:	d01d      	beq.n	801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e494:	68fb      	ldr	r3, [r7, #12]
 801e496:	681b      	ldr	r3, [r3, #0]
 801e498:	4a26      	ldr	r2, [pc, #152]	@ (801e534 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 801e49a:	4293      	cmp	r3, r2
 801e49c:	d018      	beq.n	801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e49e:	68fb      	ldr	r3, [r7, #12]
 801e4a0:	681b      	ldr	r3, [r3, #0]
 801e4a2:	4a25      	ldr	r2, [pc, #148]	@ (801e538 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 801e4a4:	4293      	cmp	r3, r2
 801e4a6:	d013      	beq.n	801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e4a8:	68fb      	ldr	r3, [r7, #12]
 801e4aa:	681b      	ldr	r3, [r3, #0]
 801e4ac:	4a23      	ldr	r2, [pc, #140]	@ (801e53c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 801e4ae:	4293      	cmp	r3, r2
 801e4b0:	d00e      	beq.n	801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e4b2:	68fb      	ldr	r3, [r7, #12]
 801e4b4:	681b      	ldr	r3, [r3, #0]
 801e4b6:	4a22      	ldr	r2, [pc, #136]	@ (801e540 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 801e4b8:	4293      	cmp	r3, r2
 801e4ba:	d009      	beq.n	801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e4bc:	68fb      	ldr	r3, [r7, #12]
 801e4be:	681b      	ldr	r3, [r3, #0]
 801e4c0:	4a20      	ldr	r2, [pc, #128]	@ (801e544 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 801e4c2:	4293      	cmp	r3, r2
 801e4c4:	d004      	beq.n	801e4d0 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801e4c6:	68fb      	ldr	r3, [r7, #12]
 801e4c8:	681b      	ldr	r3, [r3, #0]
 801e4ca:	4a1f      	ldr	r2, [pc, #124]	@ (801e548 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 801e4cc:	4293      	cmp	r3, r2
 801e4ce:	d108      	bne.n	801e4e2 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 801e4d0:	68fb      	ldr	r3, [r7, #12]
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	681a      	ldr	r2, [r3, #0]
 801e4d6:	68fb      	ldr	r3, [r7, #12]
 801e4d8:	681b      	ldr	r3, [r3, #0]
 801e4da:	f042 0201 	orr.w	r2, r2, #1
 801e4de:	601a      	str	r2, [r3, #0]
 801e4e0:	e00e      	b.n	801e500 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 801e4e2:	68fb      	ldr	r3, [r7, #12]
 801e4e4:	681b      	ldr	r3, [r3, #0]
 801e4e6:	681a      	ldr	r2, [r3, #0]
 801e4e8:	68fb      	ldr	r3, [r7, #12]
 801e4ea:	681b      	ldr	r3, [r3, #0]
 801e4ec:	f042 0201 	orr.w	r2, r2, #1
 801e4f0:	601a      	str	r2, [r3, #0]
 801e4f2:	e005      	b.n	801e500 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801e4f4:	68fb      	ldr	r3, [r7, #12]
 801e4f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801e4fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 801e4fc:	2301      	movs	r3, #1
 801e4fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801e500:	7dfb      	ldrb	r3, [r7, #23]
}
 801e502:	4618      	mov	r0, r3
 801e504:	3718      	adds	r7, #24
 801e506:	46bd      	mov	sp, r7
 801e508:	bd80      	pop	{r7, pc}
 801e50a:	bf00      	nop
 801e50c:	40020010 	.word	0x40020010
 801e510:	40020028 	.word	0x40020028
 801e514:	40020040 	.word	0x40020040
 801e518:	40020058 	.word	0x40020058
 801e51c:	40020070 	.word	0x40020070
 801e520:	40020088 	.word	0x40020088
 801e524:	400200a0 	.word	0x400200a0
 801e528:	400200b8 	.word	0x400200b8
 801e52c:	40020410 	.word	0x40020410
 801e530:	40020428 	.word	0x40020428
 801e534:	40020440 	.word	0x40020440
 801e538:	40020458 	.word	0x40020458
 801e53c:	40020470 	.word	0x40020470
 801e540:	40020488 	.word	0x40020488
 801e544:	400204a0 	.word	0x400204a0
 801e548:	400204b8 	.word	0x400204b8
 801e54c:	58025408 	.word	0x58025408
 801e550:	5802541c 	.word	0x5802541c
 801e554:	58025430 	.word	0x58025430
 801e558:	58025444 	.word	0x58025444
 801e55c:	58025458 	.word	0x58025458
 801e560:	5802546c 	.word	0x5802546c
 801e564:	58025480 	.word	0x58025480
 801e568:	58025494 	.word	0x58025494

0801e56c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801e56c:	b480      	push	{r7}
 801e56e:	b085      	sub	sp, #20
 801e570:	af00      	add	r7, sp, #0
 801e572:	60f8      	str	r0, [r7, #12]
 801e574:	60b9      	str	r1, [r7, #8]
 801e576:	607a      	str	r2, [r7, #4]
 801e578:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801e57a:	68fb      	ldr	r3, [r7, #12]
 801e57c:	681b      	ldr	r3, [r3, #0]
 801e57e:	4a46      	ldr	r2, [pc, #280]	@ (801e698 <DMA_MultiBufferSetConfig+0x12c>)
 801e580:	4293      	cmp	r3, r2
 801e582:	d04a      	beq.n	801e61a <DMA_MultiBufferSetConfig+0xae>
 801e584:	68fb      	ldr	r3, [r7, #12]
 801e586:	681b      	ldr	r3, [r3, #0]
 801e588:	4a44      	ldr	r2, [pc, #272]	@ (801e69c <DMA_MultiBufferSetConfig+0x130>)
 801e58a:	4293      	cmp	r3, r2
 801e58c:	d045      	beq.n	801e61a <DMA_MultiBufferSetConfig+0xae>
 801e58e:	68fb      	ldr	r3, [r7, #12]
 801e590:	681b      	ldr	r3, [r3, #0]
 801e592:	4a43      	ldr	r2, [pc, #268]	@ (801e6a0 <DMA_MultiBufferSetConfig+0x134>)
 801e594:	4293      	cmp	r3, r2
 801e596:	d040      	beq.n	801e61a <DMA_MultiBufferSetConfig+0xae>
 801e598:	68fb      	ldr	r3, [r7, #12]
 801e59a:	681b      	ldr	r3, [r3, #0]
 801e59c:	4a41      	ldr	r2, [pc, #260]	@ (801e6a4 <DMA_MultiBufferSetConfig+0x138>)
 801e59e:	4293      	cmp	r3, r2
 801e5a0:	d03b      	beq.n	801e61a <DMA_MultiBufferSetConfig+0xae>
 801e5a2:	68fb      	ldr	r3, [r7, #12]
 801e5a4:	681b      	ldr	r3, [r3, #0]
 801e5a6:	4a40      	ldr	r2, [pc, #256]	@ (801e6a8 <DMA_MultiBufferSetConfig+0x13c>)
 801e5a8:	4293      	cmp	r3, r2
 801e5aa:	d036      	beq.n	801e61a <DMA_MultiBufferSetConfig+0xae>
 801e5ac:	68fb      	ldr	r3, [r7, #12]
 801e5ae:	681b      	ldr	r3, [r3, #0]
 801e5b0:	4a3e      	ldr	r2, [pc, #248]	@ (801e6ac <DMA_MultiBufferSetConfig+0x140>)
 801e5b2:	4293      	cmp	r3, r2
 801e5b4:	d031      	beq.n	801e61a <DMA_MultiBufferSetConfig+0xae>
 801e5b6:	68fb      	ldr	r3, [r7, #12]
 801e5b8:	681b      	ldr	r3, [r3, #0]
 801e5ba:	4a3d      	ldr	r2, [pc, #244]	@ (801e6b0 <DMA_MultiBufferSetConfig+0x144>)
 801e5bc:	4293      	cmp	r3, r2
 801e5be:	d02c      	beq.n	801e61a <DMA_MultiBufferSetConfig+0xae>
 801e5c0:	68fb      	ldr	r3, [r7, #12]
 801e5c2:	681b      	ldr	r3, [r3, #0]
 801e5c4:	4a3b      	ldr	r2, [pc, #236]	@ (801e6b4 <DMA_MultiBufferSetConfig+0x148>)
 801e5c6:	4293      	cmp	r3, r2
 801e5c8:	d027      	beq.n	801e61a <DMA_MultiBufferSetConfig+0xae>
 801e5ca:	68fb      	ldr	r3, [r7, #12]
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	4a3a      	ldr	r2, [pc, #232]	@ (801e6b8 <DMA_MultiBufferSetConfig+0x14c>)
 801e5d0:	4293      	cmp	r3, r2
 801e5d2:	d022      	beq.n	801e61a <DMA_MultiBufferSetConfig+0xae>
 801e5d4:	68fb      	ldr	r3, [r7, #12]
 801e5d6:	681b      	ldr	r3, [r3, #0]
 801e5d8:	4a38      	ldr	r2, [pc, #224]	@ (801e6bc <DMA_MultiBufferSetConfig+0x150>)
 801e5da:	4293      	cmp	r3, r2
 801e5dc:	d01d      	beq.n	801e61a <DMA_MultiBufferSetConfig+0xae>
 801e5de:	68fb      	ldr	r3, [r7, #12]
 801e5e0:	681b      	ldr	r3, [r3, #0]
 801e5e2:	4a37      	ldr	r2, [pc, #220]	@ (801e6c0 <DMA_MultiBufferSetConfig+0x154>)
 801e5e4:	4293      	cmp	r3, r2
 801e5e6:	d018      	beq.n	801e61a <DMA_MultiBufferSetConfig+0xae>
 801e5e8:	68fb      	ldr	r3, [r7, #12]
 801e5ea:	681b      	ldr	r3, [r3, #0]
 801e5ec:	4a35      	ldr	r2, [pc, #212]	@ (801e6c4 <DMA_MultiBufferSetConfig+0x158>)
 801e5ee:	4293      	cmp	r3, r2
 801e5f0:	d013      	beq.n	801e61a <DMA_MultiBufferSetConfig+0xae>
 801e5f2:	68fb      	ldr	r3, [r7, #12]
 801e5f4:	681b      	ldr	r3, [r3, #0]
 801e5f6:	4a34      	ldr	r2, [pc, #208]	@ (801e6c8 <DMA_MultiBufferSetConfig+0x15c>)
 801e5f8:	4293      	cmp	r3, r2
 801e5fa:	d00e      	beq.n	801e61a <DMA_MultiBufferSetConfig+0xae>
 801e5fc:	68fb      	ldr	r3, [r7, #12]
 801e5fe:	681b      	ldr	r3, [r3, #0]
 801e600:	4a32      	ldr	r2, [pc, #200]	@ (801e6cc <DMA_MultiBufferSetConfig+0x160>)
 801e602:	4293      	cmp	r3, r2
 801e604:	d009      	beq.n	801e61a <DMA_MultiBufferSetConfig+0xae>
 801e606:	68fb      	ldr	r3, [r7, #12]
 801e608:	681b      	ldr	r3, [r3, #0]
 801e60a:	4a31      	ldr	r2, [pc, #196]	@ (801e6d0 <DMA_MultiBufferSetConfig+0x164>)
 801e60c:	4293      	cmp	r3, r2
 801e60e:	d004      	beq.n	801e61a <DMA_MultiBufferSetConfig+0xae>
 801e610:	68fb      	ldr	r3, [r7, #12]
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	4a2f      	ldr	r2, [pc, #188]	@ (801e6d4 <DMA_MultiBufferSetConfig+0x168>)
 801e616:	4293      	cmp	r3, r2
 801e618:	d101      	bne.n	801e61e <DMA_MultiBufferSetConfig+0xb2>
 801e61a:	2301      	movs	r3, #1
 801e61c:	e000      	b.n	801e620 <DMA_MultiBufferSetConfig+0xb4>
 801e61e:	2300      	movs	r3, #0
 801e620:	2b00      	cmp	r3, #0
 801e622:	d019      	beq.n	801e658 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 801e624:	68fb      	ldr	r3, [r7, #12]
 801e626:	681b      	ldr	r3, [r3, #0]
 801e628:	683a      	ldr	r2, [r7, #0]
 801e62a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801e62c:	68fb      	ldr	r3, [r7, #12]
 801e62e:	689b      	ldr	r3, [r3, #8]
 801e630:	2b40      	cmp	r3, #64	@ 0x40
 801e632:	d108      	bne.n	801e646 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 801e634:	68fb      	ldr	r3, [r7, #12]
 801e636:	681b      	ldr	r3, [r3, #0]
 801e638:	687a      	ldr	r2, [r7, #4]
 801e63a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 801e63c:	68fb      	ldr	r3, [r7, #12]
 801e63e:	681b      	ldr	r3, [r3, #0]
 801e640:	68ba      	ldr	r2, [r7, #8]
 801e642:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 801e644:	e021      	b.n	801e68a <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 801e646:	68fb      	ldr	r3, [r7, #12]
 801e648:	681b      	ldr	r3, [r3, #0]
 801e64a:	68ba      	ldr	r2, [r7, #8]
 801e64c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 801e64e:	68fb      	ldr	r3, [r7, #12]
 801e650:	681b      	ldr	r3, [r3, #0]
 801e652:	687a      	ldr	r2, [r7, #4]
 801e654:	60da      	str	r2, [r3, #12]
}
 801e656:	e018      	b.n	801e68a <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 801e658:	68fb      	ldr	r3, [r7, #12]
 801e65a:	681b      	ldr	r3, [r3, #0]
 801e65c:	683a      	ldr	r2, [r7, #0]
 801e65e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801e660:	68fb      	ldr	r3, [r7, #12]
 801e662:	689b      	ldr	r3, [r3, #8]
 801e664:	2b40      	cmp	r3, #64	@ 0x40
 801e666:	d108      	bne.n	801e67a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 801e668:	68fb      	ldr	r3, [r7, #12]
 801e66a:	681b      	ldr	r3, [r3, #0]
 801e66c:	687a      	ldr	r2, [r7, #4]
 801e66e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 801e670:	68fb      	ldr	r3, [r7, #12]
 801e672:	681b      	ldr	r3, [r3, #0]
 801e674:	68ba      	ldr	r2, [r7, #8]
 801e676:	60da      	str	r2, [r3, #12]
}
 801e678:	e007      	b.n	801e68a <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 801e67a:	68fb      	ldr	r3, [r7, #12]
 801e67c:	681b      	ldr	r3, [r3, #0]
 801e67e:	68ba      	ldr	r2, [r7, #8]
 801e680:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 801e682:	68fb      	ldr	r3, [r7, #12]
 801e684:	681b      	ldr	r3, [r3, #0]
 801e686:	687a      	ldr	r2, [r7, #4]
 801e688:	60da      	str	r2, [r3, #12]
}
 801e68a:	bf00      	nop
 801e68c:	3714      	adds	r7, #20
 801e68e:	46bd      	mov	sp, r7
 801e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e694:	4770      	bx	lr
 801e696:	bf00      	nop
 801e698:	40020010 	.word	0x40020010
 801e69c:	40020028 	.word	0x40020028
 801e6a0:	40020040 	.word	0x40020040
 801e6a4:	40020058 	.word	0x40020058
 801e6a8:	40020070 	.word	0x40020070
 801e6ac:	40020088 	.word	0x40020088
 801e6b0:	400200a0 	.word	0x400200a0
 801e6b4:	400200b8 	.word	0x400200b8
 801e6b8:	40020410 	.word	0x40020410
 801e6bc:	40020428 	.word	0x40020428
 801e6c0:	40020440 	.word	0x40020440
 801e6c4:	40020458 	.word	0x40020458
 801e6c8:	40020470 	.word	0x40020470
 801e6cc:	40020488 	.word	0x40020488
 801e6d0:	400204a0 	.word	0x400204a0
 801e6d4:	400204b8 	.word	0x400204b8

0801e6d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801e6d8:	b480      	push	{r7}
 801e6da:	b089      	sub	sp, #36	@ 0x24
 801e6dc:	af00      	add	r7, sp, #0
 801e6de:	6078      	str	r0, [r7, #4]
 801e6e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801e6e2:	2300      	movs	r3, #0
 801e6e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801e6e6:	4b89      	ldr	r3, [pc, #548]	@ (801e90c <HAL_GPIO_Init+0x234>)
 801e6e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801e6ea:	e194      	b.n	801ea16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801e6ec:	683b      	ldr	r3, [r7, #0]
 801e6ee:	681a      	ldr	r2, [r3, #0]
 801e6f0:	2101      	movs	r1, #1
 801e6f2:	69fb      	ldr	r3, [r7, #28]
 801e6f4:	fa01 f303 	lsl.w	r3, r1, r3
 801e6f8:	4013      	ands	r3, r2
 801e6fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801e6fc:	693b      	ldr	r3, [r7, #16]
 801e6fe:	2b00      	cmp	r3, #0
 801e700:	f000 8186 	beq.w	801ea10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801e704:	683b      	ldr	r3, [r7, #0]
 801e706:	685b      	ldr	r3, [r3, #4]
 801e708:	f003 0303 	and.w	r3, r3, #3
 801e70c:	2b01      	cmp	r3, #1
 801e70e:	d005      	beq.n	801e71c <HAL_GPIO_Init+0x44>
 801e710:	683b      	ldr	r3, [r7, #0]
 801e712:	685b      	ldr	r3, [r3, #4]
 801e714:	f003 0303 	and.w	r3, r3, #3
 801e718:	2b02      	cmp	r3, #2
 801e71a:	d130      	bne.n	801e77e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801e71c:	687b      	ldr	r3, [r7, #4]
 801e71e:	689b      	ldr	r3, [r3, #8]
 801e720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801e722:	69fb      	ldr	r3, [r7, #28]
 801e724:	005b      	lsls	r3, r3, #1
 801e726:	2203      	movs	r2, #3
 801e728:	fa02 f303 	lsl.w	r3, r2, r3
 801e72c:	43db      	mvns	r3, r3
 801e72e:	69ba      	ldr	r2, [r7, #24]
 801e730:	4013      	ands	r3, r2
 801e732:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801e734:	683b      	ldr	r3, [r7, #0]
 801e736:	68da      	ldr	r2, [r3, #12]
 801e738:	69fb      	ldr	r3, [r7, #28]
 801e73a:	005b      	lsls	r3, r3, #1
 801e73c:	fa02 f303 	lsl.w	r3, r2, r3
 801e740:	69ba      	ldr	r2, [r7, #24]
 801e742:	4313      	orrs	r3, r2
 801e744:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801e746:	687b      	ldr	r3, [r7, #4]
 801e748:	69ba      	ldr	r2, [r7, #24]
 801e74a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	685b      	ldr	r3, [r3, #4]
 801e750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801e752:	2201      	movs	r2, #1
 801e754:	69fb      	ldr	r3, [r7, #28]
 801e756:	fa02 f303 	lsl.w	r3, r2, r3
 801e75a:	43db      	mvns	r3, r3
 801e75c:	69ba      	ldr	r2, [r7, #24]
 801e75e:	4013      	ands	r3, r2
 801e760:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801e762:	683b      	ldr	r3, [r7, #0]
 801e764:	685b      	ldr	r3, [r3, #4]
 801e766:	091b      	lsrs	r3, r3, #4
 801e768:	f003 0201 	and.w	r2, r3, #1
 801e76c:	69fb      	ldr	r3, [r7, #28]
 801e76e:	fa02 f303 	lsl.w	r3, r2, r3
 801e772:	69ba      	ldr	r2, [r7, #24]
 801e774:	4313      	orrs	r3, r2
 801e776:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801e778:	687b      	ldr	r3, [r7, #4]
 801e77a:	69ba      	ldr	r2, [r7, #24]
 801e77c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801e77e:	683b      	ldr	r3, [r7, #0]
 801e780:	685b      	ldr	r3, [r3, #4]
 801e782:	f003 0303 	and.w	r3, r3, #3
 801e786:	2b03      	cmp	r3, #3
 801e788:	d017      	beq.n	801e7ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	68db      	ldr	r3, [r3, #12]
 801e78e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801e790:	69fb      	ldr	r3, [r7, #28]
 801e792:	005b      	lsls	r3, r3, #1
 801e794:	2203      	movs	r2, #3
 801e796:	fa02 f303 	lsl.w	r3, r2, r3
 801e79a:	43db      	mvns	r3, r3
 801e79c:	69ba      	ldr	r2, [r7, #24]
 801e79e:	4013      	ands	r3, r2
 801e7a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801e7a2:	683b      	ldr	r3, [r7, #0]
 801e7a4:	689a      	ldr	r2, [r3, #8]
 801e7a6:	69fb      	ldr	r3, [r7, #28]
 801e7a8:	005b      	lsls	r3, r3, #1
 801e7aa:	fa02 f303 	lsl.w	r3, r2, r3
 801e7ae:	69ba      	ldr	r2, [r7, #24]
 801e7b0:	4313      	orrs	r3, r2
 801e7b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801e7b4:	687b      	ldr	r3, [r7, #4]
 801e7b6:	69ba      	ldr	r2, [r7, #24]
 801e7b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801e7ba:	683b      	ldr	r3, [r7, #0]
 801e7bc:	685b      	ldr	r3, [r3, #4]
 801e7be:	f003 0303 	and.w	r3, r3, #3
 801e7c2:	2b02      	cmp	r3, #2
 801e7c4:	d123      	bne.n	801e80e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801e7c6:	69fb      	ldr	r3, [r7, #28]
 801e7c8:	08da      	lsrs	r2, r3, #3
 801e7ca:	687b      	ldr	r3, [r7, #4]
 801e7cc:	3208      	adds	r2, #8
 801e7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e7d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801e7d4:	69fb      	ldr	r3, [r7, #28]
 801e7d6:	f003 0307 	and.w	r3, r3, #7
 801e7da:	009b      	lsls	r3, r3, #2
 801e7dc:	220f      	movs	r2, #15
 801e7de:	fa02 f303 	lsl.w	r3, r2, r3
 801e7e2:	43db      	mvns	r3, r3
 801e7e4:	69ba      	ldr	r2, [r7, #24]
 801e7e6:	4013      	ands	r3, r2
 801e7e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801e7ea:	683b      	ldr	r3, [r7, #0]
 801e7ec:	691a      	ldr	r2, [r3, #16]
 801e7ee:	69fb      	ldr	r3, [r7, #28]
 801e7f0:	f003 0307 	and.w	r3, r3, #7
 801e7f4:	009b      	lsls	r3, r3, #2
 801e7f6:	fa02 f303 	lsl.w	r3, r2, r3
 801e7fa:	69ba      	ldr	r2, [r7, #24]
 801e7fc:	4313      	orrs	r3, r2
 801e7fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801e800:	69fb      	ldr	r3, [r7, #28]
 801e802:	08da      	lsrs	r2, r3, #3
 801e804:	687b      	ldr	r3, [r7, #4]
 801e806:	3208      	adds	r2, #8
 801e808:	69b9      	ldr	r1, [r7, #24]
 801e80a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	681b      	ldr	r3, [r3, #0]
 801e812:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801e814:	69fb      	ldr	r3, [r7, #28]
 801e816:	005b      	lsls	r3, r3, #1
 801e818:	2203      	movs	r2, #3
 801e81a:	fa02 f303 	lsl.w	r3, r2, r3
 801e81e:	43db      	mvns	r3, r3
 801e820:	69ba      	ldr	r2, [r7, #24]
 801e822:	4013      	ands	r3, r2
 801e824:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801e826:	683b      	ldr	r3, [r7, #0]
 801e828:	685b      	ldr	r3, [r3, #4]
 801e82a:	f003 0203 	and.w	r2, r3, #3
 801e82e:	69fb      	ldr	r3, [r7, #28]
 801e830:	005b      	lsls	r3, r3, #1
 801e832:	fa02 f303 	lsl.w	r3, r2, r3
 801e836:	69ba      	ldr	r2, [r7, #24]
 801e838:	4313      	orrs	r3, r2
 801e83a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801e83c:	687b      	ldr	r3, [r7, #4]
 801e83e:	69ba      	ldr	r2, [r7, #24]
 801e840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801e842:	683b      	ldr	r3, [r7, #0]
 801e844:	685b      	ldr	r3, [r3, #4]
 801e846:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801e84a:	2b00      	cmp	r3, #0
 801e84c:	f000 80e0 	beq.w	801ea10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801e850:	4b2f      	ldr	r3, [pc, #188]	@ (801e910 <HAL_GPIO_Init+0x238>)
 801e852:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801e856:	4a2e      	ldr	r2, [pc, #184]	@ (801e910 <HAL_GPIO_Init+0x238>)
 801e858:	f043 0302 	orr.w	r3, r3, #2
 801e85c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801e860:	4b2b      	ldr	r3, [pc, #172]	@ (801e910 <HAL_GPIO_Init+0x238>)
 801e862:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801e866:	f003 0302 	and.w	r3, r3, #2
 801e86a:	60fb      	str	r3, [r7, #12]
 801e86c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801e86e:	4a29      	ldr	r2, [pc, #164]	@ (801e914 <HAL_GPIO_Init+0x23c>)
 801e870:	69fb      	ldr	r3, [r7, #28]
 801e872:	089b      	lsrs	r3, r3, #2
 801e874:	3302      	adds	r3, #2
 801e876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e87a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801e87c:	69fb      	ldr	r3, [r7, #28]
 801e87e:	f003 0303 	and.w	r3, r3, #3
 801e882:	009b      	lsls	r3, r3, #2
 801e884:	220f      	movs	r2, #15
 801e886:	fa02 f303 	lsl.w	r3, r2, r3
 801e88a:	43db      	mvns	r3, r3
 801e88c:	69ba      	ldr	r2, [r7, #24]
 801e88e:	4013      	ands	r3, r2
 801e890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801e892:	687b      	ldr	r3, [r7, #4]
 801e894:	4a20      	ldr	r2, [pc, #128]	@ (801e918 <HAL_GPIO_Init+0x240>)
 801e896:	4293      	cmp	r3, r2
 801e898:	d052      	beq.n	801e940 <HAL_GPIO_Init+0x268>
 801e89a:	687b      	ldr	r3, [r7, #4]
 801e89c:	4a1f      	ldr	r2, [pc, #124]	@ (801e91c <HAL_GPIO_Init+0x244>)
 801e89e:	4293      	cmp	r3, r2
 801e8a0:	d031      	beq.n	801e906 <HAL_GPIO_Init+0x22e>
 801e8a2:	687b      	ldr	r3, [r7, #4]
 801e8a4:	4a1e      	ldr	r2, [pc, #120]	@ (801e920 <HAL_GPIO_Init+0x248>)
 801e8a6:	4293      	cmp	r3, r2
 801e8a8:	d02b      	beq.n	801e902 <HAL_GPIO_Init+0x22a>
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	4a1d      	ldr	r2, [pc, #116]	@ (801e924 <HAL_GPIO_Init+0x24c>)
 801e8ae:	4293      	cmp	r3, r2
 801e8b0:	d025      	beq.n	801e8fe <HAL_GPIO_Init+0x226>
 801e8b2:	687b      	ldr	r3, [r7, #4]
 801e8b4:	4a1c      	ldr	r2, [pc, #112]	@ (801e928 <HAL_GPIO_Init+0x250>)
 801e8b6:	4293      	cmp	r3, r2
 801e8b8:	d01f      	beq.n	801e8fa <HAL_GPIO_Init+0x222>
 801e8ba:	687b      	ldr	r3, [r7, #4]
 801e8bc:	4a1b      	ldr	r2, [pc, #108]	@ (801e92c <HAL_GPIO_Init+0x254>)
 801e8be:	4293      	cmp	r3, r2
 801e8c0:	d019      	beq.n	801e8f6 <HAL_GPIO_Init+0x21e>
 801e8c2:	687b      	ldr	r3, [r7, #4]
 801e8c4:	4a1a      	ldr	r2, [pc, #104]	@ (801e930 <HAL_GPIO_Init+0x258>)
 801e8c6:	4293      	cmp	r3, r2
 801e8c8:	d013      	beq.n	801e8f2 <HAL_GPIO_Init+0x21a>
 801e8ca:	687b      	ldr	r3, [r7, #4]
 801e8cc:	4a19      	ldr	r2, [pc, #100]	@ (801e934 <HAL_GPIO_Init+0x25c>)
 801e8ce:	4293      	cmp	r3, r2
 801e8d0:	d00d      	beq.n	801e8ee <HAL_GPIO_Init+0x216>
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	4a18      	ldr	r2, [pc, #96]	@ (801e938 <HAL_GPIO_Init+0x260>)
 801e8d6:	4293      	cmp	r3, r2
 801e8d8:	d007      	beq.n	801e8ea <HAL_GPIO_Init+0x212>
 801e8da:	687b      	ldr	r3, [r7, #4]
 801e8dc:	4a17      	ldr	r2, [pc, #92]	@ (801e93c <HAL_GPIO_Init+0x264>)
 801e8de:	4293      	cmp	r3, r2
 801e8e0:	d101      	bne.n	801e8e6 <HAL_GPIO_Init+0x20e>
 801e8e2:	2309      	movs	r3, #9
 801e8e4:	e02d      	b.n	801e942 <HAL_GPIO_Init+0x26a>
 801e8e6:	230a      	movs	r3, #10
 801e8e8:	e02b      	b.n	801e942 <HAL_GPIO_Init+0x26a>
 801e8ea:	2308      	movs	r3, #8
 801e8ec:	e029      	b.n	801e942 <HAL_GPIO_Init+0x26a>
 801e8ee:	2307      	movs	r3, #7
 801e8f0:	e027      	b.n	801e942 <HAL_GPIO_Init+0x26a>
 801e8f2:	2306      	movs	r3, #6
 801e8f4:	e025      	b.n	801e942 <HAL_GPIO_Init+0x26a>
 801e8f6:	2305      	movs	r3, #5
 801e8f8:	e023      	b.n	801e942 <HAL_GPIO_Init+0x26a>
 801e8fa:	2304      	movs	r3, #4
 801e8fc:	e021      	b.n	801e942 <HAL_GPIO_Init+0x26a>
 801e8fe:	2303      	movs	r3, #3
 801e900:	e01f      	b.n	801e942 <HAL_GPIO_Init+0x26a>
 801e902:	2302      	movs	r3, #2
 801e904:	e01d      	b.n	801e942 <HAL_GPIO_Init+0x26a>
 801e906:	2301      	movs	r3, #1
 801e908:	e01b      	b.n	801e942 <HAL_GPIO_Init+0x26a>
 801e90a:	bf00      	nop
 801e90c:	58000080 	.word	0x58000080
 801e910:	58024400 	.word	0x58024400
 801e914:	58000400 	.word	0x58000400
 801e918:	58020000 	.word	0x58020000
 801e91c:	58020400 	.word	0x58020400
 801e920:	58020800 	.word	0x58020800
 801e924:	58020c00 	.word	0x58020c00
 801e928:	58021000 	.word	0x58021000
 801e92c:	58021400 	.word	0x58021400
 801e930:	58021800 	.word	0x58021800
 801e934:	58021c00 	.word	0x58021c00
 801e938:	58022000 	.word	0x58022000
 801e93c:	58022400 	.word	0x58022400
 801e940:	2300      	movs	r3, #0
 801e942:	69fa      	ldr	r2, [r7, #28]
 801e944:	f002 0203 	and.w	r2, r2, #3
 801e948:	0092      	lsls	r2, r2, #2
 801e94a:	4093      	lsls	r3, r2
 801e94c:	69ba      	ldr	r2, [r7, #24]
 801e94e:	4313      	orrs	r3, r2
 801e950:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801e952:	4938      	ldr	r1, [pc, #224]	@ (801ea34 <HAL_GPIO_Init+0x35c>)
 801e954:	69fb      	ldr	r3, [r7, #28]
 801e956:	089b      	lsrs	r3, r3, #2
 801e958:	3302      	adds	r3, #2
 801e95a:	69ba      	ldr	r2, [r7, #24]
 801e95c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801e960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801e964:	681b      	ldr	r3, [r3, #0]
 801e966:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801e968:	693b      	ldr	r3, [r7, #16]
 801e96a:	43db      	mvns	r3, r3
 801e96c:	69ba      	ldr	r2, [r7, #24]
 801e96e:	4013      	ands	r3, r2
 801e970:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801e972:	683b      	ldr	r3, [r7, #0]
 801e974:	685b      	ldr	r3, [r3, #4]
 801e976:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801e97a:	2b00      	cmp	r3, #0
 801e97c:	d003      	beq.n	801e986 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801e97e:	69ba      	ldr	r2, [r7, #24]
 801e980:	693b      	ldr	r3, [r7, #16]
 801e982:	4313      	orrs	r3, r2
 801e984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801e986:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801e98a:	69bb      	ldr	r3, [r7, #24]
 801e98c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801e98e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801e992:	685b      	ldr	r3, [r3, #4]
 801e994:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801e996:	693b      	ldr	r3, [r7, #16]
 801e998:	43db      	mvns	r3, r3
 801e99a:	69ba      	ldr	r2, [r7, #24]
 801e99c:	4013      	ands	r3, r2
 801e99e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801e9a0:	683b      	ldr	r3, [r7, #0]
 801e9a2:	685b      	ldr	r3, [r3, #4]
 801e9a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	d003      	beq.n	801e9b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801e9ac:	69ba      	ldr	r2, [r7, #24]
 801e9ae:	693b      	ldr	r3, [r7, #16]
 801e9b0:	4313      	orrs	r3, r2
 801e9b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801e9b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801e9b8:	69bb      	ldr	r3, [r7, #24]
 801e9ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801e9bc:	697b      	ldr	r3, [r7, #20]
 801e9be:	685b      	ldr	r3, [r3, #4]
 801e9c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801e9c2:	693b      	ldr	r3, [r7, #16]
 801e9c4:	43db      	mvns	r3, r3
 801e9c6:	69ba      	ldr	r2, [r7, #24]
 801e9c8:	4013      	ands	r3, r2
 801e9ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801e9cc:	683b      	ldr	r3, [r7, #0]
 801e9ce:	685b      	ldr	r3, [r3, #4]
 801e9d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801e9d4:	2b00      	cmp	r3, #0
 801e9d6:	d003      	beq.n	801e9e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801e9d8:	69ba      	ldr	r2, [r7, #24]
 801e9da:	693b      	ldr	r3, [r7, #16]
 801e9dc:	4313      	orrs	r3, r2
 801e9de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801e9e0:	697b      	ldr	r3, [r7, #20]
 801e9e2:	69ba      	ldr	r2, [r7, #24]
 801e9e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801e9e6:	697b      	ldr	r3, [r7, #20]
 801e9e8:	681b      	ldr	r3, [r3, #0]
 801e9ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801e9ec:	693b      	ldr	r3, [r7, #16]
 801e9ee:	43db      	mvns	r3, r3
 801e9f0:	69ba      	ldr	r2, [r7, #24]
 801e9f2:	4013      	ands	r3, r2
 801e9f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801e9f6:	683b      	ldr	r3, [r7, #0]
 801e9f8:	685b      	ldr	r3, [r3, #4]
 801e9fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	d003      	beq.n	801ea0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801ea02:	69ba      	ldr	r2, [r7, #24]
 801ea04:	693b      	ldr	r3, [r7, #16]
 801ea06:	4313      	orrs	r3, r2
 801ea08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801ea0a:	697b      	ldr	r3, [r7, #20]
 801ea0c:	69ba      	ldr	r2, [r7, #24]
 801ea0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801ea10:	69fb      	ldr	r3, [r7, #28]
 801ea12:	3301      	adds	r3, #1
 801ea14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801ea16:	683b      	ldr	r3, [r7, #0]
 801ea18:	681a      	ldr	r2, [r3, #0]
 801ea1a:	69fb      	ldr	r3, [r7, #28]
 801ea1c:	fa22 f303 	lsr.w	r3, r2, r3
 801ea20:	2b00      	cmp	r3, #0
 801ea22:	f47f ae63 	bne.w	801e6ec <HAL_GPIO_Init+0x14>
  }
}
 801ea26:	bf00      	nop
 801ea28:	bf00      	nop
 801ea2a:	3724      	adds	r7, #36	@ 0x24
 801ea2c:	46bd      	mov	sp, r7
 801ea2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea32:	4770      	bx	lr
 801ea34:	58000400 	.word	0x58000400

0801ea38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801ea38:	b480      	push	{r7}
 801ea3a:	b085      	sub	sp, #20
 801ea3c:	af00      	add	r7, sp, #0
 801ea3e:	6078      	str	r0, [r7, #4]
 801ea40:	460b      	mov	r3, r1
 801ea42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801ea44:	687b      	ldr	r3, [r7, #4]
 801ea46:	691a      	ldr	r2, [r3, #16]
 801ea48:	887b      	ldrh	r3, [r7, #2]
 801ea4a:	4013      	ands	r3, r2
 801ea4c:	2b00      	cmp	r3, #0
 801ea4e:	d002      	beq.n	801ea56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801ea50:	2301      	movs	r3, #1
 801ea52:	73fb      	strb	r3, [r7, #15]
 801ea54:	e001      	b.n	801ea5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801ea56:	2300      	movs	r3, #0
 801ea58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801ea5a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ea5c:	4618      	mov	r0, r3
 801ea5e:	3714      	adds	r7, #20
 801ea60:	46bd      	mov	sp, r7
 801ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea66:	4770      	bx	lr

0801ea68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ea68:	b480      	push	{r7}
 801ea6a:	b083      	sub	sp, #12
 801ea6c:	af00      	add	r7, sp, #0
 801ea6e:	6078      	str	r0, [r7, #4]
 801ea70:	460b      	mov	r3, r1
 801ea72:	807b      	strh	r3, [r7, #2]
 801ea74:	4613      	mov	r3, r2
 801ea76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ea78:	787b      	ldrb	r3, [r7, #1]
 801ea7a:	2b00      	cmp	r3, #0
 801ea7c:	d003      	beq.n	801ea86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ea7e:	887a      	ldrh	r2, [r7, #2]
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801ea84:	e003      	b.n	801ea8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801ea86:	887b      	ldrh	r3, [r7, #2]
 801ea88:	041a      	lsls	r2, r3, #16
 801ea8a:	687b      	ldr	r3, [r7, #4]
 801ea8c:	619a      	str	r2, [r3, #24]
}
 801ea8e:	bf00      	nop
 801ea90:	370c      	adds	r7, #12
 801ea92:	46bd      	mov	sp, r7
 801ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea98:	4770      	bx	lr
	...

0801ea9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801ea9c:	b580      	push	{r7, lr}
 801ea9e:	b084      	sub	sp, #16
 801eaa0:	af00      	add	r7, sp, #0
 801eaa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801eaa4:	4b19      	ldr	r3, [pc, #100]	@ (801eb0c <HAL_PWREx_ConfigSupply+0x70>)
 801eaa6:	68db      	ldr	r3, [r3, #12]
 801eaa8:	f003 0304 	and.w	r3, r3, #4
 801eaac:	2b04      	cmp	r3, #4
 801eaae:	d00a      	beq.n	801eac6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801eab0:	4b16      	ldr	r3, [pc, #88]	@ (801eb0c <HAL_PWREx_ConfigSupply+0x70>)
 801eab2:	68db      	ldr	r3, [r3, #12]
 801eab4:	f003 0307 	and.w	r3, r3, #7
 801eab8:	687a      	ldr	r2, [r7, #4]
 801eaba:	429a      	cmp	r2, r3
 801eabc:	d001      	beq.n	801eac2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801eabe:	2301      	movs	r3, #1
 801eac0:	e01f      	b.n	801eb02 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801eac2:	2300      	movs	r3, #0
 801eac4:	e01d      	b.n	801eb02 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801eac6:	4b11      	ldr	r3, [pc, #68]	@ (801eb0c <HAL_PWREx_ConfigSupply+0x70>)
 801eac8:	68db      	ldr	r3, [r3, #12]
 801eaca:	f023 0207 	bic.w	r2, r3, #7
 801eace:	490f      	ldr	r1, [pc, #60]	@ (801eb0c <HAL_PWREx_ConfigSupply+0x70>)
 801ead0:	687b      	ldr	r3, [r7, #4]
 801ead2:	4313      	orrs	r3, r2
 801ead4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801ead6:	f7fd f8e1 	bl	801bc9c <HAL_GetTick>
 801eada:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801eadc:	e009      	b.n	801eaf2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801eade:	f7fd f8dd 	bl	801bc9c <HAL_GetTick>
 801eae2:	4602      	mov	r2, r0
 801eae4:	68fb      	ldr	r3, [r7, #12]
 801eae6:	1ad3      	subs	r3, r2, r3
 801eae8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801eaec:	d901      	bls.n	801eaf2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801eaee:	2301      	movs	r3, #1
 801eaf0:	e007      	b.n	801eb02 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801eaf2:	4b06      	ldr	r3, [pc, #24]	@ (801eb0c <HAL_PWREx_ConfigSupply+0x70>)
 801eaf4:	685b      	ldr	r3, [r3, #4]
 801eaf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801eafa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801eafe:	d1ee      	bne.n	801eade <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801eb00:	2300      	movs	r3, #0
}
 801eb02:	4618      	mov	r0, r3
 801eb04:	3710      	adds	r7, #16
 801eb06:	46bd      	mov	sp, r7
 801eb08:	bd80      	pop	{r7, pc}
 801eb0a:	bf00      	nop
 801eb0c:	58024800 	.word	0x58024800

0801eb10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801eb10:	b580      	push	{r7, lr}
 801eb12:	b08c      	sub	sp, #48	@ 0x30
 801eb14:	af00      	add	r7, sp, #0
 801eb16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801eb18:	687b      	ldr	r3, [r7, #4]
 801eb1a:	2b00      	cmp	r3, #0
 801eb1c:	d102      	bne.n	801eb24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801eb1e:	2301      	movs	r3, #1
 801eb20:	f000 bc48 	b.w	801f3b4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801eb24:	687b      	ldr	r3, [r7, #4]
 801eb26:	681b      	ldr	r3, [r3, #0]
 801eb28:	f003 0301 	and.w	r3, r3, #1
 801eb2c:	2b00      	cmp	r3, #0
 801eb2e:	f000 8088 	beq.w	801ec42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801eb32:	4b99      	ldr	r3, [pc, #612]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801eb34:	691b      	ldr	r3, [r3, #16]
 801eb36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801eb3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801eb3c:	4b96      	ldr	r3, [pc, #600]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801eb3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb40:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801eb42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb44:	2b10      	cmp	r3, #16
 801eb46:	d007      	beq.n	801eb58 <HAL_RCC_OscConfig+0x48>
 801eb48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb4a:	2b18      	cmp	r3, #24
 801eb4c:	d111      	bne.n	801eb72 <HAL_RCC_OscConfig+0x62>
 801eb4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eb50:	f003 0303 	and.w	r3, r3, #3
 801eb54:	2b02      	cmp	r3, #2
 801eb56:	d10c      	bne.n	801eb72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801eb58:	4b8f      	ldr	r3, [pc, #572]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801eb5a:	681b      	ldr	r3, [r3, #0]
 801eb5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801eb60:	2b00      	cmp	r3, #0
 801eb62:	d06d      	beq.n	801ec40 <HAL_RCC_OscConfig+0x130>
 801eb64:	687b      	ldr	r3, [r7, #4]
 801eb66:	685b      	ldr	r3, [r3, #4]
 801eb68:	2b00      	cmp	r3, #0
 801eb6a:	d169      	bne.n	801ec40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801eb6c:	2301      	movs	r3, #1
 801eb6e:	f000 bc21 	b.w	801f3b4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801eb72:	687b      	ldr	r3, [r7, #4]
 801eb74:	685b      	ldr	r3, [r3, #4]
 801eb76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801eb7a:	d106      	bne.n	801eb8a <HAL_RCC_OscConfig+0x7a>
 801eb7c:	4b86      	ldr	r3, [pc, #536]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801eb7e:	681b      	ldr	r3, [r3, #0]
 801eb80:	4a85      	ldr	r2, [pc, #532]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801eb82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801eb86:	6013      	str	r3, [r2, #0]
 801eb88:	e02e      	b.n	801ebe8 <HAL_RCC_OscConfig+0xd8>
 801eb8a:	687b      	ldr	r3, [r7, #4]
 801eb8c:	685b      	ldr	r3, [r3, #4]
 801eb8e:	2b00      	cmp	r3, #0
 801eb90:	d10c      	bne.n	801ebac <HAL_RCC_OscConfig+0x9c>
 801eb92:	4b81      	ldr	r3, [pc, #516]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801eb94:	681b      	ldr	r3, [r3, #0]
 801eb96:	4a80      	ldr	r2, [pc, #512]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801eb98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801eb9c:	6013      	str	r3, [r2, #0]
 801eb9e:	4b7e      	ldr	r3, [pc, #504]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801eba0:	681b      	ldr	r3, [r3, #0]
 801eba2:	4a7d      	ldr	r2, [pc, #500]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801eba4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801eba8:	6013      	str	r3, [r2, #0]
 801ebaa:	e01d      	b.n	801ebe8 <HAL_RCC_OscConfig+0xd8>
 801ebac:	687b      	ldr	r3, [r7, #4]
 801ebae:	685b      	ldr	r3, [r3, #4]
 801ebb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801ebb4:	d10c      	bne.n	801ebd0 <HAL_RCC_OscConfig+0xc0>
 801ebb6:	4b78      	ldr	r3, [pc, #480]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ebb8:	681b      	ldr	r3, [r3, #0]
 801ebba:	4a77      	ldr	r2, [pc, #476]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ebbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801ebc0:	6013      	str	r3, [r2, #0]
 801ebc2:	4b75      	ldr	r3, [pc, #468]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ebc4:	681b      	ldr	r3, [r3, #0]
 801ebc6:	4a74      	ldr	r2, [pc, #464]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ebc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ebcc:	6013      	str	r3, [r2, #0]
 801ebce:	e00b      	b.n	801ebe8 <HAL_RCC_OscConfig+0xd8>
 801ebd0:	4b71      	ldr	r3, [pc, #452]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ebd2:	681b      	ldr	r3, [r3, #0]
 801ebd4:	4a70      	ldr	r2, [pc, #448]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ebd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ebda:	6013      	str	r3, [r2, #0]
 801ebdc:	4b6e      	ldr	r3, [pc, #440]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ebde:	681b      	ldr	r3, [r3, #0]
 801ebe0:	4a6d      	ldr	r2, [pc, #436]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ebe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801ebe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801ebe8:	687b      	ldr	r3, [r7, #4]
 801ebea:	685b      	ldr	r3, [r3, #4]
 801ebec:	2b00      	cmp	r3, #0
 801ebee:	d013      	beq.n	801ec18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ebf0:	f7fd f854 	bl	801bc9c <HAL_GetTick>
 801ebf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ebf6:	e008      	b.n	801ec0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801ebf8:	f7fd f850 	bl	801bc9c <HAL_GetTick>
 801ebfc:	4602      	mov	r2, r0
 801ebfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec00:	1ad3      	subs	r3, r2, r3
 801ec02:	2b64      	cmp	r3, #100	@ 0x64
 801ec04:	d901      	bls.n	801ec0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801ec06:	2303      	movs	r3, #3
 801ec08:	e3d4      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ec0a:	4b63      	ldr	r3, [pc, #396]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ec0c:	681b      	ldr	r3, [r3, #0]
 801ec0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ec12:	2b00      	cmp	r3, #0
 801ec14:	d0f0      	beq.n	801ebf8 <HAL_RCC_OscConfig+0xe8>
 801ec16:	e014      	b.n	801ec42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ec18:	f7fd f840 	bl	801bc9c <HAL_GetTick>
 801ec1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801ec1e:	e008      	b.n	801ec32 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801ec20:	f7fd f83c 	bl	801bc9c <HAL_GetTick>
 801ec24:	4602      	mov	r2, r0
 801ec26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec28:	1ad3      	subs	r3, r2, r3
 801ec2a:	2b64      	cmp	r3, #100	@ 0x64
 801ec2c:	d901      	bls.n	801ec32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801ec2e:	2303      	movs	r3, #3
 801ec30:	e3c0      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801ec32:	4b59      	ldr	r3, [pc, #356]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ec34:	681b      	ldr	r3, [r3, #0]
 801ec36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ec3a:	2b00      	cmp	r3, #0
 801ec3c:	d1f0      	bne.n	801ec20 <HAL_RCC_OscConfig+0x110>
 801ec3e:	e000      	b.n	801ec42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801ec40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801ec42:	687b      	ldr	r3, [r7, #4]
 801ec44:	681b      	ldr	r3, [r3, #0]
 801ec46:	f003 0302 	and.w	r3, r3, #2
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	f000 80ca 	beq.w	801ede4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ec50:	4b51      	ldr	r3, [pc, #324]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ec52:	691b      	ldr	r3, [r3, #16]
 801ec54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801ec58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801ec5a:	4b4f      	ldr	r3, [pc, #316]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ec5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ec5e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801ec60:	6a3b      	ldr	r3, [r7, #32]
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	d007      	beq.n	801ec76 <HAL_RCC_OscConfig+0x166>
 801ec66:	6a3b      	ldr	r3, [r7, #32]
 801ec68:	2b18      	cmp	r3, #24
 801ec6a:	d156      	bne.n	801ed1a <HAL_RCC_OscConfig+0x20a>
 801ec6c:	69fb      	ldr	r3, [r7, #28]
 801ec6e:	f003 0303 	and.w	r3, r3, #3
 801ec72:	2b00      	cmp	r3, #0
 801ec74:	d151      	bne.n	801ed1a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801ec76:	4b48      	ldr	r3, [pc, #288]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ec78:	681b      	ldr	r3, [r3, #0]
 801ec7a:	f003 0304 	and.w	r3, r3, #4
 801ec7e:	2b00      	cmp	r3, #0
 801ec80:	d005      	beq.n	801ec8e <HAL_RCC_OscConfig+0x17e>
 801ec82:	687b      	ldr	r3, [r7, #4]
 801ec84:	68db      	ldr	r3, [r3, #12]
 801ec86:	2b00      	cmp	r3, #0
 801ec88:	d101      	bne.n	801ec8e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801ec8a:	2301      	movs	r3, #1
 801ec8c:	e392      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801ec8e:	4b42      	ldr	r3, [pc, #264]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ec90:	681b      	ldr	r3, [r3, #0]
 801ec92:	f023 0219 	bic.w	r2, r3, #25
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	68db      	ldr	r3, [r3, #12]
 801ec9a:	493f      	ldr	r1, [pc, #252]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ec9c:	4313      	orrs	r3, r2
 801ec9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801eca0:	f7fc fffc 	bl	801bc9c <HAL_GetTick>
 801eca4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801eca6:	e008      	b.n	801ecba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801eca8:	f7fc fff8 	bl	801bc9c <HAL_GetTick>
 801ecac:	4602      	mov	r2, r0
 801ecae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecb0:	1ad3      	subs	r3, r2, r3
 801ecb2:	2b02      	cmp	r3, #2
 801ecb4:	d901      	bls.n	801ecba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801ecb6:	2303      	movs	r3, #3
 801ecb8:	e37c      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ecba:	4b37      	ldr	r3, [pc, #220]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ecbc:	681b      	ldr	r3, [r3, #0]
 801ecbe:	f003 0304 	and.w	r3, r3, #4
 801ecc2:	2b00      	cmp	r3, #0
 801ecc4:	d0f0      	beq.n	801eca8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ecc6:	f7fd f819 	bl	801bcfc <HAL_GetREVID>
 801ecca:	4603      	mov	r3, r0
 801eccc:	f241 0203 	movw	r2, #4099	@ 0x1003
 801ecd0:	4293      	cmp	r3, r2
 801ecd2:	d817      	bhi.n	801ed04 <HAL_RCC_OscConfig+0x1f4>
 801ecd4:	687b      	ldr	r3, [r7, #4]
 801ecd6:	691b      	ldr	r3, [r3, #16]
 801ecd8:	2b40      	cmp	r3, #64	@ 0x40
 801ecda:	d108      	bne.n	801ecee <HAL_RCC_OscConfig+0x1de>
 801ecdc:	4b2e      	ldr	r3, [pc, #184]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ecde:	685b      	ldr	r3, [r3, #4]
 801ece0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801ece4:	4a2c      	ldr	r2, [pc, #176]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ece6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ecea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801ecec:	e07a      	b.n	801ede4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ecee:	4b2a      	ldr	r3, [pc, #168]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ecf0:	685b      	ldr	r3, [r3, #4]
 801ecf2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801ecf6:	687b      	ldr	r3, [r7, #4]
 801ecf8:	691b      	ldr	r3, [r3, #16]
 801ecfa:	031b      	lsls	r3, r3, #12
 801ecfc:	4926      	ldr	r1, [pc, #152]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ecfe:	4313      	orrs	r3, r2
 801ed00:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801ed02:	e06f      	b.n	801ede4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ed04:	4b24      	ldr	r3, [pc, #144]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ed06:	685b      	ldr	r3, [r3, #4]
 801ed08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801ed0c:	687b      	ldr	r3, [r7, #4]
 801ed0e:	691b      	ldr	r3, [r3, #16]
 801ed10:	061b      	lsls	r3, r3, #24
 801ed12:	4921      	ldr	r1, [pc, #132]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ed14:	4313      	orrs	r3, r2
 801ed16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801ed18:	e064      	b.n	801ede4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801ed1a:	687b      	ldr	r3, [r7, #4]
 801ed1c:	68db      	ldr	r3, [r3, #12]
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	d047      	beq.n	801edb2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801ed22:	4b1d      	ldr	r3, [pc, #116]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ed24:	681b      	ldr	r3, [r3, #0]
 801ed26:	f023 0219 	bic.w	r2, r3, #25
 801ed2a:	687b      	ldr	r3, [r7, #4]
 801ed2c:	68db      	ldr	r3, [r3, #12]
 801ed2e:	491a      	ldr	r1, [pc, #104]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ed30:	4313      	orrs	r3, r2
 801ed32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ed34:	f7fc ffb2 	bl	801bc9c <HAL_GetTick>
 801ed38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ed3a:	e008      	b.n	801ed4e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ed3c:	f7fc ffae 	bl	801bc9c <HAL_GetTick>
 801ed40:	4602      	mov	r2, r0
 801ed42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed44:	1ad3      	subs	r3, r2, r3
 801ed46:	2b02      	cmp	r3, #2
 801ed48:	d901      	bls.n	801ed4e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801ed4a:	2303      	movs	r3, #3
 801ed4c:	e332      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ed4e:	4b12      	ldr	r3, [pc, #72]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ed50:	681b      	ldr	r3, [r3, #0]
 801ed52:	f003 0304 	and.w	r3, r3, #4
 801ed56:	2b00      	cmp	r3, #0
 801ed58:	d0f0      	beq.n	801ed3c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ed5a:	f7fc ffcf 	bl	801bcfc <HAL_GetREVID>
 801ed5e:	4603      	mov	r3, r0
 801ed60:	f241 0203 	movw	r2, #4099	@ 0x1003
 801ed64:	4293      	cmp	r3, r2
 801ed66:	d819      	bhi.n	801ed9c <HAL_RCC_OscConfig+0x28c>
 801ed68:	687b      	ldr	r3, [r7, #4]
 801ed6a:	691b      	ldr	r3, [r3, #16]
 801ed6c:	2b40      	cmp	r3, #64	@ 0x40
 801ed6e:	d108      	bne.n	801ed82 <HAL_RCC_OscConfig+0x272>
 801ed70:	4b09      	ldr	r3, [pc, #36]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ed72:	685b      	ldr	r3, [r3, #4]
 801ed74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801ed78:	4a07      	ldr	r2, [pc, #28]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ed7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ed7e:	6053      	str	r3, [r2, #4]
 801ed80:	e030      	b.n	801ede4 <HAL_RCC_OscConfig+0x2d4>
 801ed82:	4b05      	ldr	r3, [pc, #20]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ed84:	685b      	ldr	r3, [r3, #4]
 801ed86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801ed8a:	687b      	ldr	r3, [r7, #4]
 801ed8c:	691b      	ldr	r3, [r3, #16]
 801ed8e:	031b      	lsls	r3, r3, #12
 801ed90:	4901      	ldr	r1, [pc, #4]	@ (801ed98 <HAL_RCC_OscConfig+0x288>)
 801ed92:	4313      	orrs	r3, r2
 801ed94:	604b      	str	r3, [r1, #4]
 801ed96:	e025      	b.n	801ede4 <HAL_RCC_OscConfig+0x2d4>
 801ed98:	58024400 	.word	0x58024400
 801ed9c:	4b9a      	ldr	r3, [pc, #616]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ed9e:	685b      	ldr	r3, [r3, #4]
 801eda0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	691b      	ldr	r3, [r3, #16]
 801eda8:	061b      	lsls	r3, r3, #24
 801edaa:	4997      	ldr	r1, [pc, #604]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801edac:	4313      	orrs	r3, r2
 801edae:	604b      	str	r3, [r1, #4]
 801edb0:	e018      	b.n	801ede4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801edb2:	4b95      	ldr	r3, [pc, #596]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801edb4:	681b      	ldr	r3, [r3, #0]
 801edb6:	4a94      	ldr	r2, [pc, #592]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801edb8:	f023 0301 	bic.w	r3, r3, #1
 801edbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801edbe:	f7fc ff6d 	bl	801bc9c <HAL_GetTick>
 801edc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801edc4:	e008      	b.n	801edd8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801edc6:	f7fc ff69 	bl	801bc9c <HAL_GetTick>
 801edca:	4602      	mov	r2, r0
 801edcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801edce:	1ad3      	subs	r3, r2, r3
 801edd0:	2b02      	cmp	r3, #2
 801edd2:	d901      	bls.n	801edd8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801edd4:	2303      	movs	r3, #3
 801edd6:	e2ed      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801edd8:	4b8b      	ldr	r3, [pc, #556]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801edda:	681b      	ldr	r3, [r3, #0]
 801eddc:	f003 0304 	and.w	r3, r3, #4
 801ede0:	2b00      	cmp	r3, #0
 801ede2:	d1f0      	bne.n	801edc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801ede4:	687b      	ldr	r3, [r7, #4]
 801ede6:	681b      	ldr	r3, [r3, #0]
 801ede8:	f003 0310 	and.w	r3, r3, #16
 801edec:	2b00      	cmp	r3, #0
 801edee:	f000 80a9 	beq.w	801ef44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801edf2:	4b85      	ldr	r3, [pc, #532]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801edf4:	691b      	ldr	r3, [r3, #16]
 801edf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801edfa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801edfc:	4b82      	ldr	r3, [pc, #520]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801edfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ee00:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801ee02:	69bb      	ldr	r3, [r7, #24]
 801ee04:	2b08      	cmp	r3, #8
 801ee06:	d007      	beq.n	801ee18 <HAL_RCC_OscConfig+0x308>
 801ee08:	69bb      	ldr	r3, [r7, #24]
 801ee0a:	2b18      	cmp	r3, #24
 801ee0c:	d13a      	bne.n	801ee84 <HAL_RCC_OscConfig+0x374>
 801ee0e:	697b      	ldr	r3, [r7, #20]
 801ee10:	f003 0303 	and.w	r3, r3, #3
 801ee14:	2b01      	cmp	r3, #1
 801ee16:	d135      	bne.n	801ee84 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ee18:	4b7b      	ldr	r3, [pc, #492]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ee1a:	681b      	ldr	r3, [r3, #0]
 801ee1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ee20:	2b00      	cmp	r3, #0
 801ee22:	d005      	beq.n	801ee30 <HAL_RCC_OscConfig+0x320>
 801ee24:	687b      	ldr	r3, [r7, #4]
 801ee26:	69db      	ldr	r3, [r3, #28]
 801ee28:	2b80      	cmp	r3, #128	@ 0x80
 801ee2a:	d001      	beq.n	801ee30 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801ee2c:	2301      	movs	r3, #1
 801ee2e:	e2c1      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ee30:	f7fc ff64 	bl	801bcfc <HAL_GetREVID>
 801ee34:	4603      	mov	r3, r0
 801ee36:	f241 0203 	movw	r2, #4099	@ 0x1003
 801ee3a:	4293      	cmp	r3, r2
 801ee3c:	d817      	bhi.n	801ee6e <HAL_RCC_OscConfig+0x35e>
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	6a1b      	ldr	r3, [r3, #32]
 801ee42:	2b20      	cmp	r3, #32
 801ee44:	d108      	bne.n	801ee58 <HAL_RCC_OscConfig+0x348>
 801ee46:	4b70      	ldr	r3, [pc, #448]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ee48:	685b      	ldr	r3, [r3, #4]
 801ee4a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801ee4e:	4a6e      	ldr	r2, [pc, #440]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ee50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ee54:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ee56:	e075      	b.n	801ef44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ee58:	4b6b      	ldr	r3, [pc, #428]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ee5a:	685b      	ldr	r3, [r3, #4]
 801ee5c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801ee60:	687b      	ldr	r3, [r7, #4]
 801ee62:	6a1b      	ldr	r3, [r3, #32]
 801ee64:	069b      	lsls	r3, r3, #26
 801ee66:	4968      	ldr	r1, [pc, #416]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ee68:	4313      	orrs	r3, r2
 801ee6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ee6c:	e06a      	b.n	801ef44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ee6e:	4b66      	ldr	r3, [pc, #408]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ee70:	68db      	ldr	r3, [r3, #12]
 801ee72:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801ee76:	687b      	ldr	r3, [r7, #4]
 801ee78:	6a1b      	ldr	r3, [r3, #32]
 801ee7a:	061b      	lsls	r3, r3, #24
 801ee7c:	4962      	ldr	r1, [pc, #392]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ee7e:	4313      	orrs	r3, r2
 801ee80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ee82:	e05f      	b.n	801ef44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	69db      	ldr	r3, [r3, #28]
 801ee88:	2b00      	cmp	r3, #0
 801ee8a:	d042      	beq.n	801ef12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801ee8c:	4b5e      	ldr	r3, [pc, #376]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ee8e:	681b      	ldr	r3, [r3, #0]
 801ee90:	4a5d      	ldr	r2, [pc, #372]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ee92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ee96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ee98:	f7fc ff00 	bl	801bc9c <HAL_GetTick>
 801ee9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801ee9e:	e008      	b.n	801eeb2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801eea0:	f7fc fefc 	bl	801bc9c <HAL_GetTick>
 801eea4:	4602      	mov	r2, r0
 801eea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eea8:	1ad3      	subs	r3, r2, r3
 801eeaa:	2b02      	cmp	r3, #2
 801eeac:	d901      	bls.n	801eeb2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801eeae:	2303      	movs	r3, #3
 801eeb0:	e280      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801eeb2:	4b55      	ldr	r3, [pc, #340]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801eeb4:	681b      	ldr	r3, [r3, #0]
 801eeb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801eeba:	2b00      	cmp	r3, #0
 801eebc:	d0f0      	beq.n	801eea0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801eebe:	f7fc ff1d 	bl	801bcfc <HAL_GetREVID>
 801eec2:	4603      	mov	r3, r0
 801eec4:	f241 0203 	movw	r2, #4099	@ 0x1003
 801eec8:	4293      	cmp	r3, r2
 801eeca:	d817      	bhi.n	801eefc <HAL_RCC_OscConfig+0x3ec>
 801eecc:	687b      	ldr	r3, [r7, #4]
 801eece:	6a1b      	ldr	r3, [r3, #32]
 801eed0:	2b20      	cmp	r3, #32
 801eed2:	d108      	bne.n	801eee6 <HAL_RCC_OscConfig+0x3d6>
 801eed4:	4b4c      	ldr	r3, [pc, #304]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801eed6:	685b      	ldr	r3, [r3, #4]
 801eed8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801eedc:	4a4a      	ldr	r2, [pc, #296]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801eede:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801eee2:	6053      	str	r3, [r2, #4]
 801eee4:	e02e      	b.n	801ef44 <HAL_RCC_OscConfig+0x434>
 801eee6:	4b48      	ldr	r3, [pc, #288]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801eee8:	685b      	ldr	r3, [r3, #4]
 801eeea:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	6a1b      	ldr	r3, [r3, #32]
 801eef2:	069b      	lsls	r3, r3, #26
 801eef4:	4944      	ldr	r1, [pc, #272]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801eef6:	4313      	orrs	r3, r2
 801eef8:	604b      	str	r3, [r1, #4]
 801eefa:	e023      	b.n	801ef44 <HAL_RCC_OscConfig+0x434>
 801eefc:	4b42      	ldr	r3, [pc, #264]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801eefe:	68db      	ldr	r3, [r3, #12]
 801ef00:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801ef04:	687b      	ldr	r3, [r7, #4]
 801ef06:	6a1b      	ldr	r3, [r3, #32]
 801ef08:	061b      	lsls	r3, r3, #24
 801ef0a:	493f      	ldr	r1, [pc, #252]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ef0c:	4313      	orrs	r3, r2
 801ef0e:	60cb      	str	r3, [r1, #12]
 801ef10:	e018      	b.n	801ef44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801ef12:	4b3d      	ldr	r3, [pc, #244]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ef14:	681b      	ldr	r3, [r3, #0]
 801ef16:	4a3c      	ldr	r2, [pc, #240]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ef18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ef1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ef1e:	f7fc febd 	bl	801bc9c <HAL_GetTick>
 801ef22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801ef24:	e008      	b.n	801ef38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801ef26:	f7fc feb9 	bl	801bc9c <HAL_GetTick>
 801ef2a:	4602      	mov	r2, r0
 801ef2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef2e:	1ad3      	subs	r3, r2, r3
 801ef30:	2b02      	cmp	r3, #2
 801ef32:	d901      	bls.n	801ef38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801ef34:	2303      	movs	r3, #3
 801ef36:	e23d      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801ef38:	4b33      	ldr	r3, [pc, #204]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ef3a:	681b      	ldr	r3, [r3, #0]
 801ef3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ef40:	2b00      	cmp	r3, #0
 801ef42:	d1f0      	bne.n	801ef26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	681b      	ldr	r3, [r3, #0]
 801ef48:	f003 0308 	and.w	r3, r3, #8
 801ef4c:	2b00      	cmp	r3, #0
 801ef4e:	d036      	beq.n	801efbe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801ef50:	687b      	ldr	r3, [r7, #4]
 801ef52:	695b      	ldr	r3, [r3, #20]
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	d019      	beq.n	801ef8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801ef58:	4b2b      	ldr	r3, [pc, #172]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ef5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ef5c:	4a2a      	ldr	r2, [pc, #168]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ef5e:	f043 0301 	orr.w	r3, r3, #1
 801ef62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ef64:	f7fc fe9a 	bl	801bc9c <HAL_GetTick>
 801ef68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801ef6a:	e008      	b.n	801ef7e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801ef6c:	f7fc fe96 	bl	801bc9c <HAL_GetTick>
 801ef70:	4602      	mov	r2, r0
 801ef72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ef74:	1ad3      	subs	r3, r2, r3
 801ef76:	2b02      	cmp	r3, #2
 801ef78:	d901      	bls.n	801ef7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801ef7a:	2303      	movs	r3, #3
 801ef7c:	e21a      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801ef7e:	4b22      	ldr	r3, [pc, #136]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ef80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ef82:	f003 0302 	and.w	r3, r3, #2
 801ef86:	2b00      	cmp	r3, #0
 801ef88:	d0f0      	beq.n	801ef6c <HAL_RCC_OscConfig+0x45c>
 801ef8a:	e018      	b.n	801efbe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801ef8c:	4b1e      	ldr	r3, [pc, #120]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ef8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ef90:	4a1d      	ldr	r2, [pc, #116]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801ef92:	f023 0301 	bic.w	r3, r3, #1
 801ef96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ef98:	f7fc fe80 	bl	801bc9c <HAL_GetTick>
 801ef9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801ef9e:	e008      	b.n	801efb2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801efa0:	f7fc fe7c 	bl	801bc9c <HAL_GetTick>
 801efa4:	4602      	mov	r2, r0
 801efa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efa8:	1ad3      	subs	r3, r2, r3
 801efaa:	2b02      	cmp	r3, #2
 801efac:	d901      	bls.n	801efb2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801efae:	2303      	movs	r3, #3
 801efb0:	e200      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801efb2:	4b15      	ldr	r3, [pc, #84]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801efb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801efb6:	f003 0302 	and.w	r3, r3, #2
 801efba:	2b00      	cmp	r3, #0
 801efbc:	d1f0      	bne.n	801efa0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	681b      	ldr	r3, [r3, #0]
 801efc2:	f003 0320 	and.w	r3, r3, #32
 801efc6:	2b00      	cmp	r3, #0
 801efc8:	d039      	beq.n	801f03e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801efca:	687b      	ldr	r3, [r7, #4]
 801efcc:	699b      	ldr	r3, [r3, #24]
 801efce:	2b00      	cmp	r3, #0
 801efd0:	d01c      	beq.n	801f00c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801efd2:	4b0d      	ldr	r3, [pc, #52]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801efd4:	681b      	ldr	r3, [r3, #0]
 801efd6:	4a0c      	ldr	r2, [pc, #48]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801efd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801efdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801efde:	f7fc fe5d 	bl	801bc9c <HAL_GetTick>
 801efe2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801efe4:	e008      	b.n	801eff8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801efe6:	f7fc fe59 	bl	801bc9c <HAL_GetTick>
 801efea:	4602      	mov	r2, r0
 801efec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801efee:	1ad3      	subs	r3, r2, r3
 801eff0:	2b02      	cmp	r3, #2
 801eff2:	d901      	bls.n	801eff8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801eff4:	2303      	movs	r3, #3
 801eff6:	e1dd      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801eff8:	4b03      	ldr	r3, [pc, #12]	@ (801f008 <HAL_RCC_OscConfig+0x4f8>)
 801effa:	681b      	ldr	r3, [r3, #0]
 801effc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801f000:	2b00      	cmp	r3, #0
 801f002:	d0f0      	beq.n	801efe6 <HAL_RCC_OscConfig+0x4d6>
 801f004:	e01b      	b.n	801f03e <HAL_RCC_OscConfig+0x52e>
 801f006:	bf00      	nop
 801f008:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801f00c:	4b9b      	ldr	r3, [pc, #620]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f00e:	681b      	ldr	r3, [r3, #0]
 801f010:	4a9a      	ldr	r2, [pc, #616]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f012:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801f016:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801f018:	f7fc fe40 	bl	801bc9c <HAL_GetTick>
 801f01c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801f01e:	e008      	b.n	801f032 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801f020:	f7fc fe3c 	bl	801bc9c <HAL_GetTick>
 801f024:	4602      	mov	r2, r0
 801f026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f028:	1ad3      	subs	r3, r2, r3
 801f02a:	2b02      	cmp	r3, #2
 801f02c:	d901      	bls.n	801f032 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801f02e:	2303      	movs	r3, #3
 801f030:	e1c0      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801f032:	4b92      	ldr	r3, [pc, #584]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f034:	681b      	ldr	r3, [r3, #0]
 801f036:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	d1f0      	bne.n	801f020 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801f03e:	687b      	ldr	r3, [r7, #4]
 801f040:	681b      	ldr	r3, [r3, #0]
 801f042:	f003 0304 	and.w	r3, r3, #4
 801f046:	2b00      	cmp	r3, #0
 801f048:	f000 8081 	beq.w	801f14e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801f04c:	4b8c      	ldr	r3, [pc, #560]	@ (801f280 <HAL_RCC_OscConfig+0x770>)
 801f04e:	681b      	ldr	r3, [r3, #0]
 801f050:	4a8b      	ldr	r2, [pc, #556]	@ (801f280 <HAL_RCC_OscConfig+0x770>)
 801f052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801f056:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801f058:	f7fc fe20 	bl	801bc9c <HAL_GetTick>
 801f05c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801f05e:	e008      	b.n	801f072 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801f060:	f7fc fe1c 	bl	801bc9c <HAL_GetTick>
 801f064:	4602      	mov	r2, r0
 801f066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f068:	1ad3      	subs	r3, r2, r3
 801f06a:	2b64      	cmp	r3, #100	@ 0x64
 801f06c:	d901      	bls.n	801f072 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801f06e:	2303      	movs	r3, #3
 801f070:	e1a0      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801f072:	4b83      	ldr	r3, [pc, #524]	@ (801f280 <HAL_RCC_OscConfig+0x770>)
 801f074:	681b      	ldr	r3, [r3, #0]
 801f076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f07a:	2b00      	cmp	r3, #0
 801f07c:	d0f0      	beq.n	801f060 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801f07e:	687b      	ldr	r3, [r7, #4]
 801f080:	689b      	ldr	r3, [r3, #8]
 801f082:	2b01      	cmp	r3, #1
 801f084:	d106      	bne.n	801f094 <HAL_RCC_OscConfig+0x584>
 801f086:	4b7d      	ldr	r3, [pc, #500]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f08a:	4a7c      	ldr	r2, [pc, #496]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f08c:	f043 0301 	orr.w	r3, r3, #1
 801f090:	6713      	str	r3, [r2, #112]	@ 0x70
 801f092:	e02d      	b.n	801f0f0 <HAL_RCC_OscConfig+0x5e0>
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	689b      	ldr	r3, [r3, #8]
 801f098:	2b00      	cmp	r3, #0
 801f09a:	d10c      	bne.n	801f0b6 <HAL_RCC_OscConfig+0x5a6>
 801f09c:	4b77      	ldr	r3, [pc, #476]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f09e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f0a0:	4a76      	ldr	r2, [pc, #472]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f0a2:	f023 0301 	bic.w	r3, r3, #1
 801f0a6:	6713      	str	r3, [r2, #112]	@ 0x70
 801f0a8:	4b74      	ldr	r3, [pc, #464]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f0aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f0ac:	4a73      	ldr	r2, [pc, #460]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f0ae:	f023 0304 	bic.w	r3, r3, #4
 801f0b2:	6713      	str	r3, [r2, #112]	@ 0x70
 801f0b4:	e01c      	b.n	801f0f0 <HAL_RCC_OscConfig+0x5e0>
 801f0b6:	687b      	ldr	r3, [r7, #4]
 801f0b8:	689b      	ldr	r3, [r3, #8]
 801f0ba:	2b05      	cmp	r3, #5
 801f0bc:	d10c      	bne.n	801f0d8 <HAL_RCC_OscConfig+0x5c8>
 801f0be:	4b6f      	ldr	r3, [pc, #444]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f0c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f0c2:	4a6e      	ldr	r2, [pc, #440]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f0c4:	f043 0304 	orr.w	r3, r3, #4
 801f0c8:	6713      	str	r3, [r2, #112]	@ 0x70
 801f0ca:	4b6c      	ldr	r3, [pc, #432]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f0cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f0ce:	4a6b      	ldr	r2, [pc, #428]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f0d0:	f043 0301 	orr.w	r3, r3, #1
 801f0d4:	6713      	str	r3, [r2, #112]	@ 0x70
 801f0d6:	e00b      	b.n	801f0f0 <HAL_RCC_OscConfig+0x5e0>
 801f0d8:	4b68      	ldr	r3, [pc, #416]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f0da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f0dc:	4a67      	ldr	r2, [pc, #412]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f0de:	f023 0301 	bic.w	r3, r3, #1
 801f0e2:	6713      	str	r3, [r2, #112]	@ 0x70
 801f0e4:	4b65      	ldr	r3, [pc, #404]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f0e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f0e8:	4a64      	ldr	r2, [pc, #400]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f0ea:	f023 0304 	bic.w	r3, r3, #4
 801f0ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801f0f0:	687b      	ldr	r3, [r7, #4]
 801f0f2:	689b      	ldr	r3, [r3, #8]
 801f0f4:	2b00      	cmp	r3, #0
 801f0f6:	d015      	beq.n	801f124 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f0f8:	f7fc fdd0 	bl	801bc9c <HAL_GetTick>
 801f0fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801f0fe:	e00a      	b.n	801f116 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801f100:	f7fc fdcc 	bl	801bc9c <HAL_GetTick>
 801f104:	4602      	mov	r2, r0
 801f106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f108:	1ad3      	subs	r3, r2, r3
 801f10a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801f10e:	4293      	cmp	r3, r2
 801f110:	d901      	bls.n	801f116 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801f112:	2303      	movs	r3, #3
 801f114:	e14e      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801f116:	4b59      	ldr	r3, [pc, #356]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f11a:	f003 0302 	and.w	r3, r3, #2
 801f11e:	2b00      	cmp	r3, #0
 801f120:	d0ee      	beq.n	801f100 <HAL_RCC_OscConfig+0x5f0>
 801f122:	e014      	b.n	801f14e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f124:	f7fc fdba 	bl	801bc9c <HAL_GetTick>
 801f128:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801f12a:	e00a      	b.n	801f142 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801f12c:	f7fc fdb6 	bl	801bc9c <HAL_GetTick>
 801f130:	4602      	mov	r2, r0
 801f132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f134:	1ad3      	subs	r3, r2, r3
 801f136:	f241 3288 	movw	r2, #5000	@ 0x1388
 801f13a:	4293      	cmp	r3, r2
 801f13c:	d901      	bls.n	801f142 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801f13e:	2303      	movs	r3, #3
 801f140:	e138      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801f142:	4b4e      	ldr	r3, [pc, #312]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f146:	f003 0302 	and.w	r3, r3, #2
 801f14a:	2b00      	cmp	r3, #0
 801f14c:	d1ee      	bne.n	801f12c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801f14e:	687b      	ldr	r3, [r7, #4]
 801f150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f152:	2b00      	cmp	r3, #0
 801f154:	f000 812d 	beq.w	801f3b2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801f158:	4b48      	ldr	r3, [pc, #288]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f15a:	691b      	ldr	r3, [r3, #16]
 801f15c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801f160:	2b18      	cmp	r3, #24
 801f162:	f000 80bd 	beq.w	801f2e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f16a:	2b02      	cmp	r3, #2
 801f16c:	f040 809e 	bne.w	801f2ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f170:	4b42      	ldr	r3, [pc, #264]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f172:	681b      	ldr	r3, [r3, #0]
 801f174:	4a41      	ldr	r2, [pc, #260]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f176:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801f17a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f17c:	f7fc fd8e 	bl	801bc9c <HAL_GetTick>
 801f180:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801f182:	e008      	b.n	801f196 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801f184:	f7fc fd8a 	bl	801bc9c <HAL_GetTick>
 801f188:	4602      	mov	r2, r0
 801f18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f18c:	1ad3      	subs	r3, r2, r3
 801f18e:	2b02      	cmp	r3, #2
 801f190:	d901      	bls.n	801f196 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801f192:	2303      	movs	r3, #3
 801f194:	e10e      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801f196:	4b39      	ldr	r3, [pc, #228]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f198:	681b      	ldr	r3, [r3, #0]
 801f19a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f19e:	2b00      	cmp	r3, #0
 801f1a0:	d1f0      	bne.n	801f184 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801f1a2:	4b36      	ldr	r3, [pc, #216]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f1a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801f1a6:	4b37      	ldr	r3, [pc, #220]	@ (801f284 <HAL_RCC_OscConfig+0x774>)
 801f1a8:	4013      	ands	r3, r2
 801f1aa:	687a      	ldr	r2, [r7, #4]
 801f1ac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801f1ae:	687a      	ldr	r2, [r7, #4]
 801f1b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801f1b2:	0112      	lsls	r2, r2, #4
 801f1b4:	430a      	orrs	r2, r1
 801f1b6:	4931      	ldr	r1, [pc, #196]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f1b8:	4313      	orrs	r3, r2
 801f1ba:	628b      	str	r3, [r1, #40]	@ 0x28
 801f1bc:	687b      	ldr	r3, [r7, #4]
 801f1be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f1c0:	3b01      	subs	r3, #1
 801f1c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f1c6:	687b      	ldr	r3, [r7, #4]
 801f1c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f1ca:	3b01      	subs	r3, #1
 801f1cc:	025b      	lsls	r3, r3, #9
 801f1ce:	b29b      	uxth	r3, r3
 801f1d0:	431a      	orrs	r2, r3
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f1d6:	3b01      	subs	r3, #1
 801f1d8:	041b      	lsls	r3, r3, #16
 801f1da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f1de:	431a      	orrs	r2, r3
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f1e4:	3b01      	subs	r3, #1
 801f1e6:	061b      	lsls	r3, r3, #24
 801f1e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f1ec:	4923      	ldr	r1, [pc, #140]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f1ee:	4313      	orrs	r3, r2
 801f1f0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801f1f2:	4b22      	ldr	r3, [pc, #136]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f1f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f1f6:	4a21      	ldr	r2, [pc, #132]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f1f8:	f023 0301 	bic.w	r3, r3, #1
 801f1fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801f1fe:	4b1f      	ldr	r3, [pc, #124]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f200:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f202:	4b21      	ldr	r3, [pc, #132]	@ (801f288 <HAL_RCC_OscConfig+0x778>)
 801f204:	4013      	ands	r3, r2
 801f206:	687a      	ldr	r2, [r7, #4]
 801f208:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801f20a:	00d2      	lsls	r2, r2, #3
 801f20c:	491b      	ldr	r1, [pc, #108]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f20e:	4313      	orrs	r3, r2
 801f210:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801f212:	4b1a      	ldr	r3, [pc, #104]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f216:	f023 020c 	bic.w	r2, r3, #12
 801f21a:	687b      	ldr	r3, [r7, #4]
 801f21c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f21e:	4917      	ldr	r1, [pc, #92]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f220:	4313      	orrs	r3, r2
 801f222:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801f224:	4b15      	ldr	r3, [pc, #84]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f228:	f023 0202 	bic.w	r2, r3, #2
 801f22c:	687b      	ldr	r3, [r7, #4]
 801f22e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f230:	4912      	ldr	r1, [pc, #72]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f232:	4313      	orrs	r3, r2
 801f234:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801f236:	4b11      	ldr	r3, [pc, #68]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f23a:	4a10      	ldr	r2, [pc, #64]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f23c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801f240:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f242:	4b0e      	ldr	r3, [pc, #56]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f246:	4a0d      	ldr	r2, [pc, #52]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801f24c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801f24e:	4b0b      	ldr	r3, [pc, #44]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f252:	4a0a      	ldr	r2, [pc, #40]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801f258:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801f25a:	4b08      	ldr	r3, [pc, #32]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f25c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f25e:	4a07      	ldr	r2, [pc, #28]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f260:	f043 0301 	orr.w	r3, r3, #1
 801f264:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801f266:	4b05      	ldr	r3, [pc, #20]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f268:	681b      	ldr	r3, [r3, #0]
 801f26a:	4a04      	ldr	r2, [pc, #16]	@ (801f27c <HAL_RCC_OscConfig+0x76c>)
 801f26c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801f270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f272:	f7fc fd13 	bl	801bc9c <HAL_GetTick>
 801f276:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801f278:	e011      	b.n	801f29e <HAL_RCC_OscConfig+0x78e>
 801f27a:	bf00      	nop
 801f27c:	58024400 	.word	0x58024400
 801f280:	58024800 	.word	0x58024800
 801f284:	fffffc0c 	.word	0xfffffc0c
 801f288:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801f28c:	f7fc fd06 	bl	801bc9c <HAL_GetTick>
 801f290:	4602      	mov	r2, r0
 801f292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f294:	1ad3      	subs	r3, r2, r3
 801f296:	2b02      	cmp	r3, #2
 801f298:	d901      	bls.n	801f29e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801f29a:	2303      	movs	r3, #3
 801f29c:	e08a      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801f29e:	4b47      	ldr	r3, [pc, #284]	@ (801f3bc <HAL_RCC_OscConfig+0x8ac>)
 801f2a0:	681b      	ldr	r3, [r3, #0]
 801f2a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f2a6:	2b00      	cmp	r3, #0
 801f2a8:	d0f0      	beq.n	801f28c <HAL_RCC_OscConfig+0x77c>
 801f2aa:	e082      	b.n	801f3b2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f2ac:	4b43      	ldr	r3, [pc, #268]	@ (801f3bc <HAL_RCC_OscConfig+0x8ac>)
 801f2ae:	681b      	ldr	r3, [r3, #0]
 801f2b0:	4a42      	ldr	r2, [pc, #264]	@ (801f3bc <HAL_RCC_OscConfig+0x8ac>)
 801f2b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801f2b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f2b8:	f7fc fcf0 	bl	801bc9c <HAL_GetTick>
 801f2bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801f2be:	e008      	b.n	801f2d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801f2c0:	f7fc fcec 	bl	801bc9c <HAL_GetTick>
 801f2c4:	4602      	mov	r2, r0
 801f2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2c8:	1ad3      	subs	r3, r2, r3
 801f2ca:	2b02      	cmp	r3, #2
 801f2cc:	d901      	bls.n	801f2d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801f2ce:	2303      	movs	r3, #3
 801f2d0:	e070      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801f2d2:	4b3a      	ldr	r3, [pc, #232]	@ (801f3bc <HAL_RCC_OscConfig+0x8ac>)
 801f2d4:	681b      	ldr	r3, [r3, #0]
 801f2d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f2da:	2b00      	cmp	r3, #0
 801f2dc:	d1f0      	bne.n	801f2c0 <HAL_RCC_OscConfig+0x7b0>
 801f2de:	e068      	b.n	801f3b2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801f2e0:	4b36      	ldr	r3, [pc, #216]	@ (801f3bc <HAL_RCC_OscConfig+0x8ac>)
 801f2e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f2e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801f2e6:	4b35      	ldr	r3, [pc, #212]	@ (801f3bc <HAL_RCC_OscConfig+0x8ac>)
 801f2e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f2ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801f2ec:	687b      	ldr	r3, [r7, #4]
 801f2ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f2f0:	2b01      	cmp	r3, #1
 801f2f2:	d031      	beq.n	801f358 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f2f4:	693b      	ldr	r3, [r7, #16]
 801f2f6:	f003 0203 	and.w	r2, r3, #3
 801f2fa:	687b      	ldr	r3, [r7, #4]
 801f2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801f2fe:	429a      	cmp	r2, r3
 801f300:	d12a      	bne.n	801f358 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801f302:	693b      	ldr	r3, [r7, #16]
 801f304:	091b      	lsrs	r3, r3, #4
 801f306:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801f30a:	687b      	ldr	r3, [r7, #4]
 801f30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f30e:	429a      	cmp	r2, r3
 801f310:	d122      	bne.n	801f358 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801f312:	68fb      	ldr	r3, [r7, #12]
 801f314:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f318:	687b      	ldr	r3, [r7, #4]
 801f31a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f31c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801f31e:	429a      	cmp	r2, r3
 801f320:	d11a      	bne.n	801f358 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801f322:	68fb      	ldr	r3, [r7, #12]
 801f324:	0a5b      	lsrs	r3, r3, #9
 801f326:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801f32a:	687b      	ldr	r3, [r7, #4]
 801f32c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f32e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801f330:	429a      	cmp	r2, r3
 801f332:	d111      	bne.n	801f358 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801f334:	68fb      	ldr	r3, [r7, #12]
 801f336:	0c1b      	lsrs	r3, r3, #16
 801f338:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801f33c:	687b      	ldr	r3, [r7, #4]
 801f33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f340:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801f342:	429a      	cmp	r2, r3
 801f344:	d108      	bne.n	801f358 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801f346:	68fb      	ldr	r3, [r7, #12]
 801f348:	0e1b      	lsrs	r3, r3, #24
 801f34a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801f34e:	687b      	ldr	r3, [r7, #4]
 801f350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f352:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801f354:	429a      	cmp	r2, r3
 801f356:	d001      	beq.n	801f35c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801f358:	2301      	movs	r3, #1
 801f35a:	e02b      	b.n	801f3b4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801f35c:	4b17      	ldr	r3, [pc, #92]	@ (801f3bc <HAL_RCC_OscConfig+0x8ac>)
 801f35e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f360:	08db      	lsrs	r3, r3, #3
 801f362:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f366:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801f368:	687b      	ldr	r3, [r7, #4]
 801f36a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801f36c:	693a      	ldr	r2, [r7, #16]
 801f36e:	429a      	cmp	r2, r3
 801f370:	d01f      	beq.n	801f3b2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801f372:	4b12      	ldr	r3, [pc, #72]	@ (801f3bc <HAL_RCC_OscConfig+0x8ac>)
 801f374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f376:	4a11      	ldr	r2, [pc, #68]	@ (801f3bc <HAL_RCC_OscConfig+0x8ac>)
 801f378:	f023 0301 	bic.w	r3, r3, #1
 801f37c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801f37e:	f7fc fc8d 	bl	801bc9c <HAL_GetTick>
 801f382:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801f384:	bf00      	nop
 801f386:	f7fc fc89 	bl	801bc9c <HAL_GetTick>
 801f38a:	4602      	mov	r2, r0
 801f38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f38e:	4293      	cmp	r3, r2
 801f390:	d0f9      	beq.n	801f386 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801f392:	4b0a      	ldr	r3, [pc, #40]	@ (801f3bc <HAL_RCC_OscConfig+0x8ac>)
 801f394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f396:	4b0a      	ldr	r3, [pc, #40]	@ (801f3c0 <HAL_RCC_OscConfig+0x8b0>)
 801f398:	4013      	ands	r3, r2
 801f39a:	687a      	ldr	r2, [r7, #4]
 801f39c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801f39e:	00d2      	lsls	r2, r2, #3
 801f3a0:	4906      	ldr	r1, [pc, #24]	@ (801f3bc <HAL_RCC_OscConfig+0x8ac>)
 801f3a2:	4313      	orrs	r3, r2
 801f3a4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801f3a6:	4b05      	ldr	r3, [pc, #20]	@ (801f3bc <HAL_RCC_OscConfig+0x8ac>)
 801f3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f3aa:	4a04      	ldr	r2, [pc, #16]	@ (801f3bc <HAL_RCC_OscConfig+0x8ac>)
 801f3ac:	f043 0301 	orr.w	r3, r3, #1
 801f3b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801f3b2:	2300      	movs	r3, #0
}
 801f3b4:	4618      	mov	r0, r3
 801f3b6:	3730      	adds	r7, #48	@ 0x30
 801f3b8:	46bd      	mov	sp, r7
 801f3ba:	bd80      	pop	{r7, pc}
 801f3bc:	58024400 	.word	0x58024400
 801f3c0:	ffff0007 	.word	0xffff0007

0801f3c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801f3c4:	b580      	push	{r7, lr}
 801f3c6:	b086      	sub	sp, #24
 801f3c8:	af00      	add	r7, sp, #0
 801f3ca:	6078      	str	r0, [r7, #4]
 801f3cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801f3ce:	687b      	ldr	r3, [r7, #4]
 801f3d0:	2b00      	cmp	r3, #0
 801f3d2:	d101      	bne.n	801f3d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801f3d4:	2301      	movs	r3, #1
 801f3d6:	e19c      	b.n	801f712 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801f3d8:	4b8a      	ldr	r3, [pc, #552]	@ (801f604 <HAL_RCC_ClockConfig+0x240>)
 801f3da:	681b      	ldr	r3, [r3, #0]
 801f3dc:	f003 030f 	and.w	r3, r3, #15
 801f3e0:	683a      	ldr	r2, [r7, #0]
 801f3e2:	429a      	cmp	r2, r3
 801f3e4:	d910      	bls.n	801f408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f3e6:	4b87      	ldr	r3, [pc, #540]	@ (801f604 <HAL_RCC_ClockConfig+0x240>)
 801f3e8:	681b      	ldr	r3, [r3, #0]
 801f3ea:	f023 020f 	bic.w	r2, r3, #15
 801f3ee:	4985      	ldr	r1, [pc, #532]	@ (801f604 <HAL_RCC_ClockConfig+0x240>)
 801f3f0:	683b      	ldr	r3, [r7, #0]
 801f3f2:	4313      	orrs	r3, r2
 801f3f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801f3f6:	4b83      	ldr	r3, [pc, #524]	@ (801f604 <HAL_RCC_ClockConfig+0x240>)
 801f3f8:	681b      	ldr	r3, [r3, #0]
 801f3fa:	f003 030f 	and.w	r3, r3, #15
 801f3fe:	683a      	ldr	r2, [r7, #0]
 801f400:	429a      	cmp	r2, r3
 801f402:	d001      	beq.n	801f408 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801f404:	2301      	movs	r3, #1
 801f406:	e184      	b.n	801f712 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	681b      	ldr	r3, [r3, #0]
 801f40c:	f003 0304 	and.w	r3, r3, #4
 801f410:	2b00      	cmp	r3, #0
 801f412:	d010      	beq.n	801f436 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801f414:	687b      	ldr	r3, [r7, #4]
 801f416:	691a      	ldr	r2, [r3, #16]
 801f418:	4b7b      	ldr	r3, [pc, #492]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f41a:	699b      	ldr	r3, [r3, #24]
 801f41c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f420:	429a      	cmp	r2, r3
 801f422:	d908      	bls.n	801f436 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801f424:	4b78      	ldr	r3, [pc, #480]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f426:	699b      	ldr	r3, [r3, #24]
 801f428:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f42c:	687b      	ldr	r3, [r7, #4]
 801f42e:	691b      	ldr	r3, [r3, #16]
 801f430:	4975      	ldr	r1, [pc, #468]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f432:	4313      	orrs	r3, r2
 801f434:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f436:	687b      	ldr	r3, [r7, #4]
 801f438:	681b      	ldr	r3, [r3, #0]
 801f43a:	f003 0308 	and.w	r3, r3, #8
 801f43e:	2b00      	cmp	r3, #0
 801f440:	d010      	beq.n	801f464 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801f442:	687b      	ldr	r3, [r7, #4]
 801f444:	695a      	ldr	r2, [r3, #20]
 801f446:	4b70      	ldr	r3, [pc, #448]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f448:	69db      	ldr	r3, [r3, #28]
 801f44a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f44e:	429a      	cmp	r2, r3
 801f450:	d908      	bls.n	801f464 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801f452:	4b6d      	ldr	r3, [pc, #436]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f454:	69db      	ldr	r3, [r3, #28]
 801f456:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f45a:	687b      	ldr	r3, [r7, #4]
 801f45c:	695b      	ldr	r3, [r3, #20]
 801f45e:	496a      	ldr	r1, [pc, #424]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f460:	4313      	orrs	r3, r2
 801f462:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f464:	687b      	ldr	r3, [r7, #4]
 801f466:	681b      	ldr	r3, [r3, #0]
 801f468:	f003 0310 	and.w	r3, r3, #16
 801f46c:	2b00      	cmp	r3, #0
 801f46e:	d010      	beq.n	801f492 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801f470:	687b      	ldr	r3, [r7, #4]
 801f472:	699a      	ldr	r2, [r3, #24]
 801f474:	4b64      	ldr	r3, [pc, #400]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f476:	69db      	ldr	r3, [r3, #28]
 801f478:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801f47c:	429a      	cmp	r2, r3
 801f47e:	d908      	bls.n	801f492 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801f480:	4b61      	ldr	r3, [pc, #388]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f482:	69db      	ldr	r3, [r3, #28]
 801f484:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801f488:	687b      	ldr	r3, [r7, #4]
 801f48a:	699b      	ldr	r3, [r3, #24]
 801f48c:	495e      	ldr	r1, [pc, #376]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f48e:	4313      	orrs	r3, r2
 801f490:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801f492:	687b      	ldr	r3, [r7, #4]
 801f494:	681b      	ldr	r3, [r3, #0]
 801f496:	f003 0320 	and.w	r3, r3, #32
 801f49a:	2b00      	cmp	r3, #0
 801f49c:	d010      	beq.n	801f4c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801f49e:	687b      	ldr	r3, [r7, #4]
 801f4a0:	69da      	ldr	r2, [r3, #28]
 801f4a2:	4b59      	ldr	r3, [pc, #356]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f4a4:	6a1b      	ldr	r3, [r3, #32]
 801f4a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f4aa:	429a      	cmp	r2, r3
 801f4ac:	d908      	bls.n	801f4c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801f4ae:	4b56      	ldr	r3, [pc, #344]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f4b0:	6a1b      	ldr	r3, [r3, #32]
 801f4b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f4b6:	687b      	ldr	r3, [r7, #4]
 801f4b8:	69db      	ldr	r3, [r3, #28]
 801f4ba:	4953      	ldr	r1, [pc, #332]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f4bc:	4313      	orrs	r3, r2
 801f4be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	681b      	ldr	r3, [r3, #0]
 801f4c4:	f003 0302 	and.w	r3, r3, #2
 801f4c8:	2b00      	cmp	r3, #0
 801f4ca:	d010      	beq.n	801f4ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801f4cc:	687b      	ldr	r3, [r7, #4]
 801f4ce:	68da      	ldr	r2, [r3, #12]
 801f4d0:	4b4d      	ldr	r3, [pc, #308]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f4d2:	699b      	ldr	r3, [r3, #24]
 801f4d4:	f003 030f 	and.w	r3, r3, #15
 801f4d8:	429a      	cmp	r2, r3
 801f4da:	d908      	bls.n	801f4ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801f4dc:	4b4a      	ldr	r3, [pc, #296]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f4de:	699b      	ldr	r3, [r3, #24]
 801f4e0:	f023 020f 	bic.w	r2, r3, #15
 801f4e4:	687b      	ldr	r3, [r7, #4]
 801f4e6:	68db      	ldr	r3, [r3, #12]
 801f4e8:	4947      	ldr	r1, [pc, #284]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f4ea:	4313      	orrs	r3, r2
 801f4ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801f4ee:	687b      	ldr	r3, [r7, #4]
 801f4f0:	681b      	ldr	r3, [r3, #0]
 801f4f2:	f003 0301 	and.w	r3, r3, #1
 801f4f6:	2b00      	cmp	r3, #0
 801f4f8:	d055      	beq.n	801f5a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801f4fa:	4b43      	ldr	r3, [pc, #268]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f4fc:	699b      	ldr	r3, [r3, #24]
 801f4fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801f502:	687b      	ldr	r3, [r7, #4]
 801f504:	689b      	ldr	r3, [r3, #8]
 801f506:	4940      	ldr	r1, [pc, #256]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f508:	4313      	orrs	r3, r2
 801f50a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801f50c:	687b      	ldr	r3, [r7, #4]
 801f50e:	685b      	ldr	r3, [r3, #4]
 801f510:	2b02      	cmp	r3, #2
 801f512:	d107      	bne.n	801f524 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801f514:	4b3c      	ldr	r3, [pc, #240]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f516:	681b      	ldr	r3, [r3, #0]
 801f518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801f51c:	2b00      	cmp	r3, #0
 801f51e:	d121      	bne.n	801f564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801f520:	2301      	movs	r3, #1
 801f522:	e0f6      	b.n	801f712 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801f524:	687b      	ldr	r3, [r7, #4]
 801f526:	685b      	ldr	r3, [r3, #4]
 801f528:	2b03      	cmp	r3, #3
 801f52a:	d107      	bne.n	801f53c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801f52c:	4b36      	ldr	r3, [pc, #216]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f52e:	681b      	ldr	r3, [r3, #0]
 801f530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801f534:	2b00      	cmp	r3, #0
 801f536:	d115      	bne.n	801f564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801f538:	2301      	movs	r3, #1
 801f53a:	e0ea      	b.n	801f712 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801f53c:	687b      	ldr	r3, [r7, #4]
 801f53e:	685b      	ldr	r3, [r3, #4]
 801f540:	2b01      	cmp	r3, #1
 801f542:	d107      	bne.n	801f554 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801f544:	4b30      	ldr	r3, [pc, #192]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f546:	681b      	ldr	r3, [r3, #0]
 801f548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f54c:	2b00      	cmp	r3, #0
 801f54e:	d109      	bne.n	801f564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801f550:	2301      	movs	r3, #1
 801f552:	e0de      	b.n	801f712 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801f554:	4b2c      	ldr	r3, [pc, #176]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f556:	681b      	ldr	r3, [r3, #0]
 801f558:	f003 0304 	and.w	r3, r3, #4
 801f55c:	2b00      	cmp	r3, #0
 801f55e:	d101      	bne.n	801f564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801f560:	2301      	movs	r3, #1
 801f562:	e0d6      	b.n	801f712 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801f564:	4b28      	ldr	r3, [pc, #160]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f566:	691b      	ldr	r3, [r3, #16]
 801f568:	f023 0207 	bic.w	r2, r3, #7
 801f56c:	687b      	ldr	r3, [r7, #4]
 801f56e:	685b      	ldr	r3, [r3, #4]
 801f570:	4925      	ldr	r1, [pc, #148]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f572:	4313      	orrs	r3, r2
 801f574:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f576:	f7fc fb91 	bl	801bc9c <HAL_GetTick>
 801f57a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f57c:	e00a      	b.n	801f594 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801f57e:	f7fc fb8d 	bl	801bc9c <HAL_GetTick>
 801f582:	4602      	mov	r2, r0
 801f584:	697b      	ldr	r3, [r7, #20]
 801f586:	1ad3      	subs	r3, r2, r3
 801f588:	f241 3288 	movw	r2, #5000	@ 0x1388
 801f58c:	4293      	cmp	r3, r2
 801f58e:	d901      	bls.n	801f594 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801f590:	2303      	movs	r3, #3
 801f592:	e0be      	b.n	801f712 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f594:	4b1c      	ldr	r3, [pc, #112]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f596:	691b      	ldr	r3, [r3, #16]
 801f598:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801f59c:	687b      	ldr	r3, [r7, #4]
 801f59e:	685b      	ldr	r3, [r3, #4]
 801f5a0:	00db      	lsls	r3, r3, #3
 801f5a2:	429a      	cmp	r2, r3
 801f5a4:	d1eb      	bne.n	801f57e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801f5a6:	687b      	ldr	r3, [r7, #4]
 801f5a8:	681b      	ldr	r3, [r3, #0]
 801f5aa:	f003 0302 	and.w	r3, r3, #2
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	d010      	beq.n	801f5d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801f5b2:	687b      	ldr	r3, [r7, #4]
 801f5b4:	68da      	ldr	r2, [r3, #12]
 801f5b6:	4b14      	ldr	r3, [pc, #80]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f5b8:	699b      	ldr	r3, [r3, #24]
 801f5ba:	f003 030f 	and.w	r3, r3, #15
 801f5be:	429a      	cmp	r2, r3
 801f5c0:	d208      	bcs.n	801f5d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801f5c2:	4b11      	ldr	r3, [pc, #68]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f5c4:	699b      	ldr	r3, [r3, #24]
 801f5c6:	f023 020f 	bic.w	r2, r3, #15
 801f5ca:	687b      	ldr	r3, [r7, #4]
 801f5cc:	68db      	ldr	r3, [r3, #12]
 801f5ce:	490e      	ldr	r1, [pc, #56]	@ (801f608 <HAL_RCC_ClockConfig+0x244>)
 801f5d0:	4313      	orrs	r3, r2
 801f5d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801f5d4:	4b0b      	ldr	r3, [pc, #44]	@ (801f604 <HAL_RCC_ClockConfig+0x240>)
 801f5d6:	681b      	ldr	r3, [r3, #0]
 801f5d8:	f003 030f 	and.w	r3, r3, #15
 801f5dc:	683a      	ldr	r2, [r7, #0]
 801f5de:	429a      	cmp	r2, r3
 801f5e0:	d214      	bcs.n	801f60c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f5e2:	4b08      	ldr	r3, [pc, #32]	@ (801f604 <HAL_RCC_ClockConfig+0x240>)
 801f5e4:	681b      	ldr	r3, [r3, #0]
 801f5e6:	f023 020f 	bic.w	r2, r3, #15
 801f5ea:	4906      	ldr	r1, [pc, #24]	@ (801f604 <HAL_RCC_ClockConfig+0x240>)
 801f5ec:	683b      	ldr	r3, [r7, #0]
 801f5ee:	4313      	orrs	r3, r2
 801f5f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801f5f2:	4b04      	ldr	r3, [pc, #16]	@ (801f604 <HAL_RCC_ClockConfig+0x240>)
 801f5f4:	681b      	ldr	r3, [r3, #0]
 801f5f6:	f003 030f 	and.w	r3, r3, #15
 801f5fa:	683a      	ldr	r2, [r7, #0]
 801f5fc:	429a      	cmp	r2, r3
 801f5fe:	d005      	beq.n	801f60c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801f600:	2301      	movs	r3, #1
 801f602:	e086      	b.n	801f712 <HAL_RCC_ClockConfig+0x34e>
 801f604:	52002000 	.word	0x52002000
 801f608:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801f60c:	687b      	ldr	r3, [r7, #4]
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	f003 0304 	and.w	r3, r3, #4
 801f614:	2b00      	cmp	r3, #0
 801f616:	d010      	beq.n	801f63a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801f618:	687b      	ldr	r3, [r7, #4]
 801f61a:	691a      	ldr	r2, [r3, #16]
 801f61c:	4b3f      	ldr	r3, [pc, #252]	@ (801f71c <HAL_RCC_ClockConfig+0x358>)
 801f61e:	699b      	ldr	r3, [r3, #24]
 801f620:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f624:	429a      	cmp	r2, r3
 801f626:	d208      	bcs.n	801f63a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801f628:	4b3c      	ldr	r3, [pc, #240]	@ (801f71c <HAL_RCC_ClockConfig+0x358>)
 801f62a:	699b      	ldr	r3, [r3, #24]
 801f62c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f630:	687b      	ldr	r3, [r7, #4]
 801f632:	691b      	ldr	r3, [r3, #16]
 801f634:	4939      	ldr	r1, [pc, #228]	@ (801f71c <HAL_RCC_ClockConfig+0x358>)
 801f636:	4313      	orrs	r3, r2
 801f638:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f63a:	687b      	ldr	r3, [r7, #4]
 801f63c:	681b      	ldr	r3, [r3, #0]
 801f63e:	f003 0308 	and.w	r3, r3, #8
 801f642:	2b00      	cmp	r3, #0
 801f644:	d010      	beq.n	801f668 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801f646:	687b      	ldr	r3, [r7, #4]
 801f648:	695a      	ldr	r2, [r3, #20]
 801f64a:	4b34      	ldr	r3, [pc, #208]	@ (801f71c <HAL_RCC_ClockConfig+0x358>)
 801f64c:	69db      	ldr	r3, [r3, #28]
 801f64e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f652:	429a      	cmp	r2, r3
 801f654:	d208      	bcs.n	801f668 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801f656:	4b31      	ldr	r3, [pc, #196]	@ (801f71c <HAL_RCC_ClockConfig+0x358>)
 801f658:	69db      	ldr	r3, [r3, #28]
 801f65a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f65e:	687b      	ldr	r3, [r7, #4]
 801f660:	695b      	ldr	r3, [r3, #20]
 801f662:	492e      	ldr	r1, [pc, #184]	@ (801f71c <HAL_RCC_ClockConfig+0x358>)
 801f664:	4313      	orrs	r3, r2
 801f666:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f668:	687b      	ldr	r3, [r7, #4]
 801f66a:	681b      	ldr	r3, [r3, #0]
 801f66c:	f003 0310 	and.w	r3, r3, #16
 801f670:	2b00      	cmp	r3, #0
 801f672:	d010      	beq.n	801f696 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801f674:	687b      	ldr	r3, [r7, #4]
 801f676:	699a      	ldr	r2, [r3, #24]
 801f678:	4b28      	ldr	r3, [pc, #160]	@ (801f71c <HAL_RCC_ClockConfig+0x358>)
 801f67a:	69db      	ldr	r3, [r3, #28]
 801f67c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801f680:	429a      	cmp	r2, r3
 801f682:	d208      	bcs.n	801f696 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801f684:	4b25      	ldr	r3, [pc, #148]	@ (801f71c <HAL_RCC_ClockConfig+0x358>)
 801f686:	69db      	ldr	r3, [r3, #28]
 801f688:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	699b      	ldr	r3, [r3, #24]
 801f690:	4922      	ldr	r1, [pc, #136]	@ (801f71c <HAL_RCC_ClockConfig+0x358>)
 801f692:	4313      	orrs	r3, r2
 801f694:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801f696:	687b      	ldr	r3, [r7, #4]
 801f698:	681b      	ldr	r3, [r3, #0]
 801f69a:	f003 0320 	and.w	r3, r3, #32
 801f69e:	2b00      	cmp	r3, #0
 801f6a0:	d010      	beq.n	801f6c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801f6a2:	687b      	ldr	r3, [r7, #4]
 801f6a4:	69da      	ldr	r2, [r3, #28]
 801f6a6:	4b1d      	ldr	r3, [pc, #116]	@ (801f71c <HAL_RCC_ClockConfig+0x358>)
 801f6a8:	6a1b      	ldr	r3, [r3, #32]
 801f6aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801f6ae:	429a      	cmp	r2, r3
 801f6b0:	d208      	bcs.n	801f6c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801f6b2:	4b1a      	ldr	r3, [pc, #104]	@ (801f71c <HAL_RCC_ClockConfig+0x358>)
 801f6b4:	6a1b      	ldr	r3, [r3, #32]
 801f6b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801f6ba:	687b      	ldr	r3, [r7, #4]
 801f6bc:	69db      	ldr	r3, [r3, #28]
 801f6be:	4917      	ldr	r1, [pc, #92]	@ (801f71c <HAL_RCC_ClockConfig+0x358>)
 801f6c0:	4313      	orrs	r3, r2
 801f6c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801f6c4:	f000 f834 	bl	801f730 <HAL_RCC_GetSysClockFreq>
 801f6c8:	4602      	mov	r2, r0
 801f6ca:	4b14      	ldr	r3, [pc, #80]	@ (801f71c <HAL_RCC_ClockConfig+0x358>)
 801f6cc:	699b      	ldr	r3, [r3, #24]
 801f6ce:	0a1b      	lsrs	r3, r3, #8
 801f6d0:	f003 030f 	and.w	r3, r3, #15
 801f6d4:	4912      	ldr	r1, [pc, #72]	@ (801f720 <HAL_RCC_ClockConfig+0x35c>)
 801f6d6:	5ccb      	ldrb	r3, [r1, r3]
 801f6d8:	f003 031f 	and.w	r3, r3, #31
 801f6dc:	fa22 f303 	lsr.w	r3, r2, r3
 801f6e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801f6e2:	4b0e      	ldr	r3, [pc, #56]	@ (801f71c <HAL_RCC_ClockConfig+0x358>)
 801f6e4:	699b      	ldr	r3, [r3, #24]
 801f6e6:	f003 030f 	and.w	r3, r3, #15
 801f6ea:	4a0d      	ldr	r2, [pc, #52]	@ (801f720 <HAL_RCC_ClockConfig+0x35c>)
 801f6ec:	5cd3      	ldrb	r3, [r2, r3]
 801f6ee:	f003 031f 	and.w	r3, r3, #31
 801f6f2:	693a      	ldr	r2, [r7, #16]
 801f6f4:	fa22 f303 	lsr.w	r3, r2, r3
 801f6f8:	4a0a      	ldr	r2, [pc, #40]	@ (801f724 <HAL_RCC_ClockConfig+0x360>)
 801f6fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801f6fc:	4a0a      	ldr	r2, [pc, #40]	@ (801f728 <HAL_RCC_ClockConfig+0x364>)
 801f6fe:	693b      	ldr	r3, [r7, #16]
 801f700:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801f702:	4b0a      	ldr	r3, [pc, #40]	@ (801f72c <HAL_RCC_ClockConfig+0x368>)
 801f704:	681b      	ldr	r3, [r3, #0]
 801f706:	4618      	mov	r0, r3
 801f708:	f7fc fa7e 	bl	801bc08 <HAL_InitTick>
 801f70c:	4603      	mov	r3, r0
 801f70e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801f710:	7bfb      	ldrb	r3, [r7, #15]
}
 801f712:	4618      	mov	r0, r3
 801f714:	3718      	adds	r7, #24
 801f716:	46bd      	mov	sp, r7
 801f718:	bd80      	pop	{r7, pc}
 801f71a:	bf00      	nop
 801f71c:	58024400 	.word	0x58024400
 801f720:	0802b4b0 	.word	0x0802b4b0
 801f724:	24000020 	.word	0x24000020
 801f728:	2400001c 	.word	0x2400001c
 801f72c:	24000024 	.word	0x24000024

0801f730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801f730:	b480      	push	{r7}
 801f732:	b089      	sub	sp, #36	@ 0x24
 801f734:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801f736:	4bb3      	ldr	r3, [pc, #716]	@ (801fa04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f738:	691b      	ldr	r3, [r3, #16]
 801f73a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801f73e:	2b18      	cmp	r3, #24
 801f740:	f200 8155 	bhi.w	801f9ee <HAL_RCC_GetSysClockFreq+0x2be>
 801f744:	a201      	add	r2, pc, #4	@ (adr r2, 801f74c <HAL_RCC_GetSysClockFreq+0x1c>)
 801f746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f74a:	bf00      	nop
 801f74c:	0801f7b1 	.word	0x0801f7b1
 801f750:	0801f9ef 	.word	0x0801f9ef
 801f754:	0801f9ef 	.word	0x0801f9ef
 801f758:	0801f9ef 	.word	0x0801f9ef
 801f75c:	0801f9ef 	.word	0x0801f9ef
 801f760:	0801f9ef 	.word	0x0801f9ef
 801f764:	0801f9ef 	.word	0x0801f9ef
 801f768:	0801f9ef 	.word	0x0801f9ef
 801f76c:	0801f7d7 	.word	0x0801f7d7
 801f770:	0801f9ef 	.word	0x0801f9ef
 801f774:	0801f9ef 	.word	0x0801f9ef
 801f778:	0801f9ef 	.word	0x0801f9ef
 801f77c:	0801f9ef 	.word	0x0801f9ef
 801f780:	0801f9ef 	.word	0x0801f9ef
 801f784:	0801f9ef 	.word	0x0801f9ef
 801f788:	0801f9ef 	.word	0x0801f9ef
 801f78c:	0801f7dd 	.word	0x0801f7dd
 801f790:	0801f9ef 	.word	0x0801f9ef
 801f794:	0801f9ef 	.word	0x0801f9ef
 801f798:	0801f9ef 	.word	0x0801f9ef
 801f79c:	0801f9ef 	.word	0x0801f9ef
 801f7a0:	0801f9ef 	.word	0x0801f9ef
 801f7a4:	0801f9ef 	.word	0x0801f9ef
 801f7a8:	0801f9ef 	.word	0x0801f9ef
 801f7ac:	0801f7e3 	.word	0x0801f7e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f7b0:	4b94      	ldr	r3, [pc, #592]	@ (801fa04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f7b2:	681b      	ldr	r3, [r3, #0]
 801f7b4:	f003 0320 	and.w	r3, r3, #32
 801f7b8:	2b00      	cmp	r3, #0
 801f7ba:	d009      	beq.n	801f7d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f7bc:	4b91      	ldr	r3, [pc, #580]	@ (801fa04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f7be:	681b      	ldr	r3, [r3, #0]
 801f7c0:	08db      	lsrs	r3, r3, #3
 801f7c2:	f003 0303 	and.w	r3, r3, #3
 801f7c6:	4a90      	ldr	r2, [pc, #576]	@ (801fa08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801f7c8:	fa22 f303 	lsr.w	r3, r2, r3
 801f7cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801f7ce:	e111      	b.n	801f9f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801f7d0:	4b8d      	ldr	r3, [pc, #564]	@ (801fa08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801f7d2:	61bb      	str	r3, [r7, #24]
      break;
 801f7d4:	e10e      	b.n	801f9f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801f7d6:	4b8d      	ldr	r3, [pc, #564]	@ (801fa0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 801f7d8:	61bb      	str	r3, [r7, #24]
      break;
 801f7da:	e10b      	b.n	801f9f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801f7dc:	4b8c      	ldr	r3, [pc, #560]	@ (801fa10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801f7de:	61bb      	str	r3, [r7, #24]
      break;
 801f7e0:	e108      	b.n	801f9f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f7e2:	4b88      	ldr	r3, [pc, #544]	@ (801fa04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f7e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f7e6:	f003 0303 	and.w	r3, r3, #3
 801f7ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801f7ec:	4b85      	ldr	r3, [pc, #532]	@ (801fa04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f7f0:	091b      	lsrs	r3, r3, #4
 801f7f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f7f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801f7f8:	4b82      	ldr	r3, [pc, #520]	@ (801fa04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f7fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f7fc:	f003 0301 	and.w	r3, r3, #1
 801f800:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801f802:	4b80      	ldr	r3, [pc, #512]	@ (801fa04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f806:	08db      	lsrs	r3, r3, #3
 801f808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f80c:	68fa      	ldr	r2, [r7, #12]
 801f80e:	fb02 f303 	mul.w	r3, r2, r3
 801f812:	ee07 3a90 	vmov	s15, r3
 801f816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f81a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801f81e:	693b      	ldr	r3, [r7, #16]
 801f820:	2b00      	cmp	r3, #0
 801f822:	f000 80e1 	beq.w	801f9e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 801f826:	697b      	ldr	r3, [r7, #20]
 801f828:	2b02      	cmp	r3, #2
 801f82a:	f000 8083 	beq.w	801f934 <HAL_RCC_GetSysClockFreq+0x204>
 801f82e:	697b      	ldr	r3, [r7, #20]
 801f830:	2b02      	cmp	r3, #2
 801f832:	f200 80a1 	bhi.w	801f978 <HAL_RCC_GetSysClockFreq+0x248>
 801f836:	697b      	ldr	r3, [r7, #20]
 801f838:	2b00      	cmp	r3, #0
 801f83a:	d003      	beq.n	801f844 <HAL_RCC_GetSysClockFreq+0x114>
 801f83c:	697b      	ldr	r3, [r7, #20]
 801f83e:	2b01      	cmp	r3, #1
 801f840:	d056      	beq.n	801f8f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 801f842:	e099      	b.n	801f978 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f844:	4b6f      	ldr	r3, [pc, #444]	@ (801fa04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f846:	681b      	ldr	r3, [r3, #0]
 801f848:	f003 0320 	and.w	r3, r3, #32
 801f84c:	2b00      	cmp	r3, #0
 801f84e:	d02d      	beq.n	801f8ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f850:	4b6c      	ldr	r3, [pc, #432]	@ (801fa04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f852:	681b      	ldr	r3, [r3, #0]
 801f854:	08db      	lsrs	r3, r3, #3
 801f856:	f003 0303 	and.w	r3, r3, #3
 801f85a:	4a6b      	ldr	r2, [pc, #428]	@ (801fa08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801f85c:	fa22 f303 	lsr.w	r3, r2, r3
 801f860:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f862:	687b      	ldr	r3, [r7, #4]
 801f864:	ee07 3a90 	vmov	s15, r3
 801f868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f86c:	693b      	ldr	r3, [r7, #16]
 801f86e:	ee07 3a90 	vmov	s15, r3
 801f872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f87a:	4b62      	ldr	r3, [pc, #392]	@ (801fa04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f87c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f87e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f882:	ee07 3a90 	vmov	s15, r3
 801f886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f88a:	ed97 6a02 	vldr	s12, [r7, #8]
 801f88e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801fa14 <HAL_RCC_GetSysClockFreq+0x2e4>
 801f892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f89a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f89e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f8a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f8a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801f8aa:	e087      	b.n	801f9bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f8ac:	693b      	ldr	r3, [r7, #16]
 801f8ae:	ee07 3a90 	vmov	s15, r3
 801f8b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f8b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801fa18 <HAL_RCC_GetSysClockFreq+0x2e8>
 801f8ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f8be:	4b51      	ldr	r3, [pc, #324]	@ (801fa04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f8c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f8c6:	ee07 3a90 	vmov	s15, r3
 801f8ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f8ce:	ed97 6a02 	vldr	s12, [r7, #8]
 801f8d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801fa14 <HAL_RCC_GetSysClockFreq+0x2e4>
 801f8d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f8da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f8de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f8e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f8e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f8ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801f8ee:	e065      	b.n	801f9bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f8f0:	693b      	ldr	r3, [r7, #16]
 801f8f2:	ee07 3a90 	vmov	s15, r3
 801f8f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f8fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801fa1c <HAL_RCC_GetSysClockFreq+0x2ec>
 801f8fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f902:	4b40      	ldr	r3, [pc, #256]	@ (801fa04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f90a:	ee07 3a90 	vmov	s15, r3
 801f90e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f912:	ed97 6a02 	vldr	s12, [r7, #8]
 801f916:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801fa14 <HAL_RCC_GetSysClockFreq+0x2e4>
 801f91a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f91e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f92a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f92e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801f932:	e043      	b.n	801f9bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f934:	693b      	ldr	r3, [r7, #16]
 801f936:	ee07 3a90 	vmov	s15, r3
 801f93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f93e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801fa20 <HAL_RCC_GetSysClockFreq+0x2f0>
 801f942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f946:	4b2f      	ldr	r3, [pc, #188]	@ (801fa04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f94a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f94e:	ee07 3a90 	vmov	s15, r3
 801f952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f956:	ed97 6a02 	vldr	s12, [r7, #8]
 801f95a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801fa14 <HAL_RCC_GetSysClockFreq+0x2e4>
 801f95e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f96a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f96e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f972:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801f976:	e021      	b.n	801f9bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f978:	693b      	ldr	r3, [r7, #16]
 801f97a:	ee07 3a90 	vmov	s15, r3
 801f97e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f982:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801fa1c <HAL_RCC_GetSysClockFreq+0x2ec>
 801f986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f98a:	4b1e      	ldr	r3, [pc, #120]	@ (801fa04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f98c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f992:	ee07 3a90 	vmov	s15, r3
 801f996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f99a:	ed97 6a02 	vldr	s12, [r7, #8]
 801f99e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801fa14 <HAL_RCC_GetSysClockFreq+0x2e4>
 801f9a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f9a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f9aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f9ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f9b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f9b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801f9ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801f9bc:	4b11      	ldr	r3, [pc, #68]	@ (801fa04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801f9be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f9c0:	0a5b      	lsrs	r3, r3, #9
 801f9c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f9c6:	3301      	adds	r3, #1
 801f9c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801f9ca:	683b      	ldr	r3, [r7, #0]
 801f9cc:	ee07 3a90 	vmov	s15, r3
 801f9d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801f9d4:	edd7 6a07 	vldr	s13, [r7, #28]
 801f9d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f9dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f9e0:	ee17 3a90 	vmov	r3, s15
 801f9e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801f9e6:	e005      	b.n	801f9f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801f9e8:	2300      	movs	r3, #0
 801f9ea:	61bb      	str	r3, [r7, #24]
      break;
 801f9ec:	e002      	b.n	801f9f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801f9ee:	4b07      	ldr	r3, [pc, #28]	@ (801fa0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 801f9f0:	61bb      	str	r3, [r7, #24]
      break;
 801f9f2:	bf00      	nop
  }

  return sysclockfreq;
 801f9f4:	69bb      	ldr	r3, [r7, #24]
}
 801f9f6:	4618      	mov	r0, r3
 801f9f8:	3724      	adds	r7, #36	@ 0x24
 801f9fa:	46bd      	mov	sp, r7
 801f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa00:	4770      	bx	lr
 801fa02:	bf00      	nop
 801fa04:	58024400 	.word	0x58024400
 801fa08:	03d09000 	.word	0x03d09000
 801fa0c:	003d0900 	.word	0x003d0900
 801fa10:	017d7840 	.word	0x017d7840
 801fa14:	46000000 	.word	0x46000000
 801fa18:	4c742400 	.word	0x4c742400
 801fa1c:	4a742400 	.word	0x4a742400
 801fa20:	4bbebc20 	.word	0x4bbebc20

0801fa24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801fa24:	b580      	push	{r7, lr}
 801fa26:	b082      	sub	sp, #8
 801fa28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801fa2a:	f7ff fe81 	bl	801f730 <HAL_RCC_GetSysClockFreq>
 801fa2e:	4602      	mov	r2, r0
 801fa30:	4b10      	ldr	r3, [pc, #64]	@ (801fa74 <HAL_RCC_GetHCLKFreq+0x50>)
 801fa32:	699b      	ldr	r3, [r3, #24]
 801fa34:	0a1b      	lsrs	r3, r3, #8
 801fa36:	f003 030f 	and.w	r3, r3, #15
 801fa3a:	490f      	ldr	r1, [pc, #60]	@ (801fa78 <HAL_RCC_GetHCLKFreq+0x54>)
 801fa3c:	5ccb      	ldrb	r3, [r1, r3]
 801fa3e:	f003 031f 	and.w	r3, r3, #31
 801fa42:	fa22 f303 	lsr.w	r3, r2, r3
 801fa46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801fa48:	4b0a      	ldr	r3, [pc, #40]	@ (801fa74 <HAL_RCC_GetHCLKFreq+0x50>)
 801fa4a:	699b      	ldr	r3, [r3, #24]
 801fa4c:	f003 030f 	and.w	r3, r3, #15
 801fa50:	4a09      	ldr	r2, [pc, #36]	@ (801fa78 <HAL_RCC_GetHCLKFreq+0x54>)
 801fa52:	5cd3      	ldrb	r3, [r2, r3]
 801fa54:	f003 031f 	and.w	r3, r3, #31
 801fa58:	687a      	ldr	r2, [r7, #4]
 801fa5a:	fa22 f303 	lsr.w	r3, r2, r3
 801fa5e:	4a07      	ldr	r2, [pc, #28]	@ (801fa7c <HAL_RCC_GetHCLKFreq+0x58>)
 801fa60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801fa62:	4a07      	ldr	r2, [pc, #28]	@ (801fa80 <HAL_RCC_GetHCLKFreq+0x5c>)
 801fa64:	687b      	ldr	r3, [r7, #4]
 801fa66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801fa68:	4b04      	ldr	r3, [pc, #16]	@ (801fa7c <HAL_RCC_GetHCLKFreq+0x58>)
 801fa6a:	681b      	ldr	r3, [r3, #0]
}
 801fa6c:	4618      	mov	r0, r3
 801fa6e:	3708      	adds	r7, #8
 801fa70:	46bd      	mov	sp, r7
 801fa72:	bd80      	pop	{r7, pc}
 801fa74:	58024400 	.word	0x58024400
 801fa78:	0802b4b0 	.word	0x0802b4b0
 801fa7c:	24000020 	.word	0x24000020
 801fa80:	2400001c 	.word	0x2400001c

0801fa84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801fa84:	b580      	push	{r7, lr}
 801fa86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801fa88:	f7ff ffcc 	bl	801fa24 <HAL_RCC_GetHCLKFreq>
 801fa8c:	4602      	mov	r2, r0
 801fa8e:	4b06      	ldr	r3, [pc, #24]	@ (801faa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 801fa90:	69db      	ldr	r3, [r3, #28]
 801fa92:	091b      	lsrs	r3, r3, #4
 801fa94:	f003 0307 	and.w	r3, r3, #7
 801fa98:	4904      	ldr	r1, [pc, #16]	@ (801faac <HAL_RCC_GetPCLK1Freq+0x28>)
 801fa9a:	5ccb      	ldrb	r3, [r1, r3]
 801fa9c:	f003 031f 	and.w	r3, r3, #31
 801faa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801faa4:	4618      	mov	r0, r3
 801faa6:	bd80      	pop	{r7, pc}
 801faa8:	58024400 	.word	0x58024400
 801faac:	0802b4b0 	.word	0x0802b4b0

0801fab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801fab0:	b580      	push	{r7, lr}
 801fab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801fab4:	f7ff ffb6 	bl	801fa24 <HAL_RCC_GetHCLKFreq>
 801fab8:	4602      	mov	r2, r0
 801faba:	4b06      	ldr	r3, [pc, #24]	@ (801fad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 801fabc:	69db      	ldr	r3, [r3, #28]
 801fabe:	0a1b      	lsrs	r3, r3, #8
 801fac0:	f003 0307 	and.w	r3, r3, #7
 801fac4:	4904      	ldr	r1, [pc, #16]	@ (801fad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 801fac6:	5ccb      	ldrb	r3, [r1, r3]
 801fac8:	f003 031f 	and.w	r3, r3, #31
 801facc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801fad0:	4618      	mov	r0, r3
 801fad2:	bd80      	pop	{r7, pc}
 801fad4:	58024400 	.word	0x58024400
 801fad8:	0802b4b0 	.word	0x0802b4b0

0801fadc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801fadc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801fae0:	b0ca      	sub	sp, #296	@ 0x128
 801fae2:	af00      	add	r7, sp, #0
 801fae4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801fae8:	2300      	movs	r3, #0
 801faea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801faee:	2300      	movs	r3, #0
 801faf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801faf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801faf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fafc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801fb00:	2500      	movs	r5, #0
 801fb02:	ea54 0305 	orrs.w	r3, r4, r5
 801fb06:	d049      	beq.n	801fb9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801fb08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fb0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801fb12:	d02f      	beq.n	801fb74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801fb14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801fb18:	d828      	bhi.n	801fb6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 801fb1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801fb1e:	d01a      	beq.n	801fb56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801fb20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801fb24:	d822      	bhi.n	801fb6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	d003      	beq.n	801fb32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801fb2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801fb2e:	d007      	beq.n	801fb40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801fb30:	e01c      	b.n	801fb6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fb32:	4bb8      	ldr	r3, [pc, #736]	@ (801fe14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fb34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb36:	4ab7      	ldr	r2, [pc, #732]	@ (801fe14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fb38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fb3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801fb3e:	e01a      	b.n	801fb76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801fb40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb44:	3308      	adds	r3, #8
 801fb46:	2102      	movs	r1, #2
 801fb48:	4618      	mov	r0, r3
 801fb4a:	f002 fb61 	bl	8022210 <RCCEx_PLL2_Config>
 801fb4e:	4603      	mov	r3, r0
 801fb50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801fb54:	e00f      	b.n	801fb76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801fb56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb5a:	3328      	adds	r3, #40	@ 0x28
 801fb5c:	2102      	movs	r1, #2
 801fb5e:	4618      	mov	r0, r3
 801fb60:	f002 fc08 	bl	8022374 <RCCEx_PLL3_Config>
 801fb64:	4603      	mov	r3, r0
 801fb66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801fb6a:	e004      	b.n	801fb76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801fb6c:	2301      	movs	r3, #1
 801fb6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fb72:	e000      	b.n	801fb76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801fb74:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fb76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fb7a:	2b00      	cmp	r3, #0
 801fb7c:	d10a      	bne.n	801fb94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801fb7e:	4ba5      	ldr	r3, [pc, #660]	@ (801fe14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fb80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801fb82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801fb86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fb8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801fb8c:	4aa1      	ldr	r2, [pc, #644]	@ (801fe14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fb8e:	430b      	orrs	r3, r1
 801fb90:	6513      	str	r3, [r2, #80]	@ 0x50
 801fb92:	e003      	b.n	801fb9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fb94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fb98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801fb9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fba4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801fba8:	f04f 0900 	mov.w	r9, #0
 801fbac:	ea58 0309 	orrs.w	r3, r8, r9
 801fbb0:	d047      	beq.n	801fc42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801fbb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fbb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fbb8:	2b04      	cmp	r3, #4
 801fbba:	d82a      	bhi.n	801fc12 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801fbbc:	a201      	add	r2, pc, #4	@ (adr r2, 801fbc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801fbbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fbc2:	bf00      	nop
 801fbc4:	0801fbd9 	.word	0x0801fbd9
 801fbc8:	0801fbe7 	.word	0x0801fbe7
 801fbcc:	0801fbfd 	.word	0x0801fbfd
 801fbd0:	0801fc1b 	.word	0x0801fc1b
 801fbd4:	0801fc1b 	.word	0x0801fc1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fbd8:	4b8e      	ldr	r3, [pc, #568]	@ (801fe14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fbda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fbdc:	4a8d      	ldr	r2, [pc, #564]	@ (801fe14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fbde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fbe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fbe4:	e01a      	b.n	801fc1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fbe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fbea:	3308      	adds	r3, #8
 801fbec:	2100      	movs	r1, #0
 801fbee:	4618      	mov	r0, r3
 801fbf0:	f002 fb0e 	bl	8022210 <RCCEx_PLL2_Config>
 801fbf4:	4603      	mov	r3, r0
 801fbf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fbfa:	e00f      	b.n	801fc1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fbfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc00:	3328      	adds	r3, #40	@ 0x28
 801fc02:	2100      	movs	r1, #0
 801fc04:	4618      	mov	r0, r3
 801fc06:	f002 fbb5 	bl	8022374 <RCCEx_PLL3_Config>
 801fc0a:	4603      	mov	r3, r0
 801fc0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fc10:	e004      	b.n	801fc1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801fc12:	2301      	movs	r3, #1
 801fc14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fc18:	e000      	b.n	801fc1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801fc1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fc1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fc20:	2b00      	cmp	r3, #0
 801fc22:	d10a      	bne.n	801fc3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801fc24:	4b7b      	ldr	r3, [pc, #492]	@ (801fe14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fc26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801fc28:	f023 0107 	bic.w	r1, r3, #7
 801fc2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fc32:	4a78      	ldr	r2, [pc, #480]	@ (801fe14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fc34:	430b      	orrs	r3, r1
 801fc36:	6513      	str	r3, [r2, #80]	@ 0x50
 801fc38:	e003      	b.n	801fc42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fc3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fc3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801fc42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc4a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801fc4e:	f04f 0b00 	mov.w	fp, #0
 801fc52:	ea5a 030b 	orrs.w	r3, sl, fp
 801fc56:	d04c      	beq.n	801fcf2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801fc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801fc5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801fc62:	d030      	beq.n	801fcc6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801fc64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801fc68:	d829      	bhi.n	801fcbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801fc6a:	2bc0      	cmp	r3, #192	@ 0xc0
 801fc6c:	d02d      	beq.n	801fcca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801fc6e:	2bc0      	cmp	r3, #192	@ 0xc0
 801fc70:	d825      	bhi.n	801fcbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801fc72:	2b80      	cmp	r3, #128	@ 0x80
 801fc74:	d018      	beq.n	801fca8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801fc76:	2b80      	cmp	r3, #128	@ 0x80
 801fc78:	d821      	bhi.n	801fcbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801fc7a:	2b00      	cmp	r3, #0
 801fc7c:	d002      	beq.n	801fc84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801fc7e:	2b40      	cmp	r3, #64	@ 0x40
 801fc80:	d007      	beq.n	801fc92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801fc82:	e01c      	b.n	801fcbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fc84:	4b63      	ldr	r3, [pc, #396]	@ (801fe14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fc86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc88:	4a62      	ldr	r2, [pc, #392]	@ (801fe14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fc8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fc8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801fc90:	e01c      	b.n	801fccc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fc92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fc96:	3308      	adds	r3, #8
 801fc98:	2100      	movs	r1, #0
 801fc9a:	4618      	mov	r0, r3
 801fc9c:	f002 fab8 	bl	8022210 <RCCEx_PLL2_Config>
 801fca0:	4603      	mov	r3, r0
 801fca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801fca6:	e011      	b.n	801fccc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fcac:	3328      	adds	r3, #40	@ 0x28
 801fcae:	2100      	movs	r1, #0
 801fcb0:	4618      	mov	r0, r3
 801fcb2:	f002 fb5f 	bl	8022374 <RCCEx_PLL3_Config>
 801fcb6:	4603      	mov	r3, r0
 801fcb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801fcbc:	e006      	b.n	801fccc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801fcbe:	2301      	movs	r3, #1
 801fcc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fcc4:	e002      	b.n	801fccc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801fcc6:	bf00      	nop
 801fcc8:	e000      	b.n	801fccc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801fcca:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fcd0:	2b00      	cmp	r3, #0
 801fcd2:	d10a      	bne.n	801fcea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801fcd4:	4b4f      	ldr	r3, [pc, #316]	@ (801fe14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fcd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801fcd8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801fcdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801fce2:	4a4c      	ldr	r2, [pc, #304]	@ (801fe14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fce4:	430b      	orrs	r3, r1
 801fce6:	6513      	str	r3, [r2, #80]	@ 0x50
 801fce8:	e003      	b.n	801fcf2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fcea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fcee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801fcf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fcfa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801fcfe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801fd02:	2300      	movs	r3, #0
 801fd04:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801fd08:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801fd0c:	460b      	mov	r3, r1
 801fd0e:	4313      	orrs	r3, r2
 801fd10:	d053      	beq.n	801fdba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801fd12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fd16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801fd1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801fd1e:	d035      	beq.n	801fd8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801fd20:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801fd24:	d82e      	bhi.n	801fd84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801fd26:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801fd2a:	d031      	beq.n	801fd90 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801fd2c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801fd30:	d828      	bhi.n	801fd84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801fd32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801fd36:	d01a      	beq.n	801fd6e <HAL_RCCEx_PeriphCLKConfig+0x292>
 801fd38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801fd3c:	d822      	bhi.n	801fd84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801fd3e:	2b00      	cmp	r3, #0
 801fd40:	d003      	beq.n	801fd4a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801fd42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801fd46:	d007      	beq.n	801fd58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801fd48:	e01c      	b.n	801fd84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fd4a:	4b32      	ldr	r3, [pc, #200]	@ (801fe14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fd4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fd4e:	4a31      	ldr	r2, [pc, #196]	@ (801fe14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fd50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fd54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fd56:	e01c      	b.n	801fd92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fd58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fd5c:	3308      	adds	r3, #8
 801fd5e:	2100      	movs	r1, #0
 801fd60:	4618      	mov	r0, r3
 801fd62:	f002 fa55 	bl	8022210 <RCCEx_PLL2_Config>
 801fd66:	4603      	mov	r3, r0
 801fd68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801fd6c:	e011      	b.n	801fd92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fd6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fd72:	3328      	adds	r3, #40	@ 0x28
 801fd74:	2100      	movs	r1, #0
 801fd76:	4618      	mov	r0, r3
 801fd78:	f002 fafc 	bl	8022374 <RCCEx_PLL3_Config>
 801fd7c:	4603      	mov	r3, r0
 801fd7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fd82:	e006      	b.n	801fd92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801fd84:	2301      	movs	r3, #1
 801fd86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fd8a:	e002      	b.n	801fd92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801fd8c:	bf00      	nop
 801fd8e:	e000      	b.n	801fd92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801fd90:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fd92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	d10b      	bne.n	801fdb2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801fd9a:	4b1e      	ldr	r3, [pc, #120]	@ (801fe14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fd9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fd9e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801fda2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fda6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801fdaa:	4a1a      	ldr	r2, [pc, #104]	@ (801fe14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801fdac:	430b      	orrs	r3, r1
 801fdae:	6593      	str	r3, [r2, #88]	@ 0x58
 801fdb0:	e003      	b.n	801fdba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fdb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fdb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801fdba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fdc2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801fdc6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801fdca:	2300      	movs	r3, #0
 801fdcc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801fdd0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801fdd4:	460b      	mov	r3, r1
 801fdd6:	4313      	orrs	r3, r2
 801fdd8:	d056      	beq.n	801fe88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801fdda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fdde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801fde2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801fde6:	d038      	beq.n	801fe5a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801fde8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801fdec:	d831      	bhi.n	801fe52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801fdee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801fdf2:	d034      	beq.n	801fe5e <HAL_RCCEx_PeriphCLKConfig+0x382>
 801fdf4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801fdf8:	d82b      	bhi.n	801fe52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801fdfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801fdfe:	d01d      	beq.n	801fe3c <HAL_RCCEx_PeriphCLKConfig+0x360>
 801fe00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801fe04:	d825      	bhi.n	801fe52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801fe06:	2b00      	cmp	r3, #0
 801fe08:	d006      	beq.n	801fe18 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801fe0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801fe0e:	d00a      	beq.n	801fe26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801fe10:	e01f      	b.n	801fe52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801fe12:	bf00      	nop
 801fe14:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fe18:	4ba2      	ldr	r3, [pc, #648]	@ (80200a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fe1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fe1c:	4aa1      	ldr	r2, [pc, #644]	@ (80200a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fe1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fe22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fe24:	e01c      	b.n	801fe60 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801fe26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fe2a:	3308      	adds	r3, #8
 801fe2c:	2100      	movs	r1, #0
 801fe2e:	4618      	mov	r0, r3
 801fe30:	f002 f9ee 	bl	8022210 <RCCEx_PLL2_Config>
 801fe34:	4603      	mov	r3, r0
 801fe36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801fe3a:	e011      	b.n	801fe60 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801fe3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fe40:	3328      	adds	r3, #40	@ 0x28
 801fe42:	2100      	movs	r1, #0
 801fe44:	4618      	mov	r0, r3
 801fe46:	f002 fa95 	bl	8022374 <RCCEx_PLL3_Config>
 801fe4a:	4603      	mov	r3, r0
 801fe4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801fe50:	e006      	b.n	801fe60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801fe52:	2301      	movs	r3, #1
 801fe54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fe58:	e002      	b.n	801fe60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801fe5a:	bf00      	nop
 801fe5c:	e000      	b.n	801fe60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801fe5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fe60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fe64:	2b00      	cmp	r3, #0
 801fe66:	d10b      	bne.n	801fe80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801fe68:	4b8e      	ldr	r3, [pc, #568]	@ (80200a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fe6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fe6c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801fe70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fe74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801fe78:	4a8a      	ldr	r2, [pc, #552]	@ (80200a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fe7a:	430b      	orrs	r3, r1
 801fe7c:	6593      	str	r3, [r2, #88]	@ 0x58
 801fe7e:	e003      	b.n	801fe88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801fe80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fe84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801fe88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fe8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe90:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801fe94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801fe98:	2300      	movs	r3, #0
 801fe9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801fe9e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801fea2:	460b      	mov	r3, r1
 801fea4:	4313      	orrs	r3, r2
 801fea6:	d03a      	beq.n	801ff1e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801fea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801feac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801feae:	2b30      	cmp	r3, #48	@ 0x30
 801feb0:	d01f      	beq.n	801fef2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 801feb2:	2b30      	cmp	r3, #48	@ 0x30
 801feb4:	d819      	bhi.n	801feea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801feb6:	2b20      	cmp	r3, #32
 801feb8:	d00c      	beq.n	801fed4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801feba:	2b20      	cmp	r3, #32
 801febc:	d815      	bhi.n	801feea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801febe:	2b00      	cmp	r3, #0
 801fec0:	d019      	beq.n	801fef6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801fec2:	2b10      	cmp	r3, #16
 801fec4:	d111      	bne.n	801feea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801fec6:	4b77      	ldr	r3, [pc, #476]	@ (80200a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801feca:	4a76      	ldr	r2, [pc, #472]	@ (80200a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801fecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801fed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801fed2:	e011      	b.n	801fef8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801fed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801fed8:	3308      	adds	r3, #8
 801feda:	2102      	movs	r1, #2
 801fedc:	4618      	mov	r0, r3
 801fede:	f002 f997 	bl	8022210 <RCCEx_PLL2_Config>
 801fee2:	4603      	mov	r3, r0
 801fee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801fee8:	e006      	b.n	801fef8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801feea:	2301      	movs	r3, #1
 801feec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801fef0:	e002      	b.n	801fef8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801fef2:	bf00      	nop
 801fef4:	e000      	b.n	801fef8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801fef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801fef8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fefc:	2b00      	cmp	r3, #0
 801fefe:	d10a      	bne.n	801ff16 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801ff00:	4b68      	ldr	r3, [pc, #416]	@ (80200a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ff02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ff04:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801ff08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ff0e:	4a65      	ldr	r2, [pc, #404]	@ (80200a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ff10:	430b      	orrs	r3, r1
 801ff12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801ff14:	e003      	b.n	801ff1e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ff16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ff1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801ff1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ff26:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801ff2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801ff2e:	2300      	movs	r3, #0
 801ff30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801ff34:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801ff38:	460b      	mov	r3, r1
 801ff3a:	4313      	orrs	r3, r2
 801ff3c:	d051      	beq.n	801ffe2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801ff3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ff44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ff48:	d035      	beq.n	801ffb6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801ff4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ff4e:	d82e      	bhi.n	801ffae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801ff50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801ff54:	d031      	beq.n	801ffba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801ff56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801ff5a:	d828      	bhi.n	801ffae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801ff5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ff60:	d01a      	beq.n	801ff98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801ff62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ff66:	d822      	bhi.n	801ffae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801ff68:	2b00      	cmp	r3, #0
 801ff6a:	d003      	beq.n	801ff74 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801ff6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ff70:	d007      	beq.n	801ff82 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801ff72:	e01c      	b.n	801ffae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ff74:	4b4b      	ldr	r3, [pc, #300]	@ (80200a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ff76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ff78:	4a4a      	ldr	r2, [pc, #296]	@ (80200a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ff7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ff7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801ff80:	e01c      	b.n	801ffbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ff82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff86:	3308      	adds	r3, #8
 801ff88:	2100      	movs	r1, #0
 801ff8a:	4618      	mov	r0, r3
 801ff8c:	f002 f940 	bl	8022210 <RCCEx_PLL2_Config>
 801ff90:	4603      	mov	r3, r0
 801ff92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801ff96:	e011      	b.n	801ffbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801ff98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ff9c:	3328      	adds	r3, #40	@ 0x28
 801ff9e:	2100      	movs	r1, #0
 801ffa0:	4618      	mov	r0, r3
 801ffa2:	f002 f9e7 	bl	8022374 <RCCEx_PLL3_Config>
 801ffa6:	4603      	mov	r3, r0
 801ffa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801ffac:	e006      	b.n	801ffbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ffae:	2301      	movs	r3, #1
 801ffb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ffb4:	e002      	b.n	801ffbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801ffb6:	bf00      	nop
 801ffb8:	e000      	b.n	801ffbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801ffba:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ffbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ffc0:	2b00      	cmp	r3, #0
 801ffc2:	d10a      	bne.n	801ffda <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801ffc4:	4b37      	ldr	r3, [pc, #220]	@ (80200a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ffc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ffc8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801ffcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ffd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ffd2:	4a34      	ldr	r2, [pc, #208]	@ (80200a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ffd4:	430b      	orrs	r3, r1
 801ffd6:	6513      	str	r3, [r2, #80]	@ 0x50
 801ffd8:	e003      	b.n	801ffe2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ffda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ffde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801ffe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ffe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801ffee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801fff2:	2300      	movs	r3, #0
 801fff4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801fff8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801fffc:	460b      	mov	r3, r1
 801fffe:	4313      	orrs	r3, r2
 8020000:	d056      	beq.n	80200b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8020002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8020008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 802000c:	d033      	beq.n	8020076 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 802000e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8020012:	d82c      	bhi.n	802006e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8020014:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8020018:	d02f      	beq.n	802007a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 802001a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 802001e:	d826      	bhi.n	802006e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8020020:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8020024:	d02b      	beq.n	802007e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8020026:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 802002a:	d820      	bhi.n	802006e <HAL_RCCEx_PeriphCLKConfig+0x592>
 802002c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8020030:	d012      	beq.n	8020058 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8020032:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8020036:	d81a      	bhi.n	802006e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8020038:	2b00      	cmp	r3, #0
 802003a:	d022      	beq.n	8020082 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 802003c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020040:	d115      	bne.n	802006e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8020042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020046:	3308      	adds	r3, #8
 8020048:	2101      	movs	r1, #1
 802004a:	4618      	mov	r0, r3
 802004c:	f002 f8e0 	bl	8022210 <RCCEx_PLL2_Config>
 8020050:	4603      	mov	r3, r0
 8020052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8020056:	e015      	b.n	8020084 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8020058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802005c:	3328      	adds	r3, #40	@ 0x28
 802005e:	2101      	movs	r1, #1
 8020060:	4618      	mov	r0, r3
 8020062:	f002 f987 	bl	8022374 <RCCEx_PLL3_Config>
 8020066:	4603      	mov	r3, r0
 8020068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 802006c:	e00a      	b.n	8020084 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802006e:	2301      	movs	r3, #1
 8020070:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020074:	e006      	b.n	8020084 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8020076:	bf00      	nop
 8020078:	e004      	b.n	8020084 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 802007a:	bf00      	nop
 802007c:	e002      	b.n	8020084 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 802007e:	bf00      	nop
 8020080:	e000      	b.n	8020084 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8020082:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020084:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020088:	2b00      	cmp	r3, #0
 802008a:	d10d      	bne.n	80200a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 802008c:	4b05      	ldr	r3, [pc, #20]	@ (80200a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802008e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020090:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8020094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 802009a:	4a02      	ldr	r2, [pc, #8]	@ (80200a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 802009c:	430b      	orrs	r3, r1
 802009e:	6513      	str	r3, [r2, #80]	@ 0x50
 80200a0:	e006      	b.n	80200b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80200a2:	bf00      	nop
 80200a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80200a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80200ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80200b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80200b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200b8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80200bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80200c0:	2300      	movs	r3, #0
 80200c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80200c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80200ca:	460b      	mov	r3, r1
 80200cc:	4313      	orrs	r3, r2
 80200ce:	d055      	beq.n	802017c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80200d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80200d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80200d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80200dc:	d033      	beq.n	8020146 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80200de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80200e2:	d82c      	bhi.n	802013e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80200e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80200e8:	d02f      	beq.n	802014a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80200ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80200ee:	d826      	bhi.n	802013e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80200f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80200f4:	d02b      	beq.n	802014e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80200f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80200fa:	d820      	bhi.n	802013e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80200fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020100:	d012      	beq.n	8020128 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8020102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020106:	d81a      	bhi.n	802013e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8020108:	2b00      	cmp	r3, #0
 802010a:	d022      	beq.n	8020152 <HAL_RCCEx_PeriphCLKConfig+0x676>
 802010c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020110:	d115      	bne.n	802013e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8020112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020116:	3308      	adds	r3, #8
 8020118:	2101      	movs	r1, #1
 802011a:	4618      	mov	r0, r3
 802011c:	f002 f878 	bl	8022210 <RCCEx_PLL2_Config>
 8020120:	4603      	mov	r3, r0
 8020122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8020126:	e015      	b.n	8020154 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8020128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802012c:	3328      	adds	r3, #40	@ 0x28
 802012e:	2101      	movs	r1, #1
 8020130:	4618      	mov	r0, r3
 8020132:	f002 f91f 	bl	8022374 <RCCEx_PLL3_Config>
 8020136:	4603      	mov	r3, r0
 8020138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 802013c:	e00a      	b.n	8020154 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 802013e:	2301      	movs	r3, #1
 8020140:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020144:	e006      	b.n	8020154 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8020146:	bf00      	nop
 8020148:	e004      	b.n	8020154 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 802014a:	bf00      	nop
 802014c:	e002      	b.n	8020154 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 802014e:	bf00      	nop
 8020150:	e000      	b.n	8020154 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8020152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020154:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020158:	2b00      	cmp	r3, #0
 802015a:	d10b      	bne.n	8020174 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 802015c:	4ba3      	ldr	r3, [pc, #652]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802015e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020160:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8020164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020168:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 802016c:	4a9f      	ldr	r2, [pc, #636]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802016e:	430b      	orrs	r3, r1
 8020170:	6593      	str	r3, [r2, #88]	@ 0x58
 8020172:	e003      	b.n	802017c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020174:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020178:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 802017c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020184:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8020188:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 802018c:	2300      	movs	r3, #0
 802018e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8020192:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8020196:	460b      	mov	r3, r1
 8020198:	4313      	orrs	r3, r2
 802019a:	d037      	beq.n	802020c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 802019c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80201a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80201a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80201a6:	d00e      	beq.n	80201c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80201a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80201ac:	d816      	bhi.n	80201dc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80201ae:	2b00      	cmp	r3, #0
 80201b0:	d018      	beq.n	80201e4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80201b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80201b6:	d111      	bne.n	80201dc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80201b8:	4b8c      	ldr	r3, [pc, #560]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80201bc:	4a8b      	ldr	r2, [pc, #556]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80201c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80201c4:	e00f      	b.n	80201e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80201c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80201ca:	3308      	adds	r3, #8
 80201cc:	2101      	movs	r1, #1
 80201ce:	4618      	mov	r0, r3
 80201d0:	f002 f81e 	bl	8022210 <RCCEx_PLL2_Config>
 80201d4:	4603      	mov	r3, r0
 80201d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80201da:	e004      	b.n	80201e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80201dc:	2301      	movs	r3, #1
 80201de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80201e2:	e000      	b.n	80201e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80201e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80201e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80201ea:	2b00      	cmp	r3, #0
 80201ec:	d10a      	bne.n	8020204 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80201ee:	4b7f      	ldr	r3, [pc, #508]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80201f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80201f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80201fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80201fc:	4a7b      	ldr	r2, [pc, #492]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80201fe:	430b      	orrs	r3, r1
 8020200:	6513      	str	r3, [r2, #80]	@ 0x50
 8020202:	e003      	b.n	802020c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020208:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 802020c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020214:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8020218:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 802021c:	2300      	movs	r3, #0
 802021e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8020222:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8020226:	460b      	mov	r3, r1
 8020228:	4313      	orrs	r3, r2
 802022a:	d039      	beq.n	80202a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 802022c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8020232:	2b03      	cmp	r3, #3
 8020234:	d81c      	bhi.n	8020270 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8020236:	a201      	add	r2, pc, #4	@ (adr r2, 802023c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8020238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802023c:	08020279 	.word	0x08020279
 8020240:	0802024d 	.word	0x0802024d
 8020244:	0802025b 	.word	0x0802025b
 8020248:	08020279 	.word	0x08020279
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 802024c:	4b67      	ldr	r3, [pc, #412]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802024e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020250:	4a66      	ldr	r2, [pc, #408]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020256:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8020258:	e00f      	b.n	802027a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 802025a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802025e:	3308      	adds	r3, #8
 8020260:	2102      	movs	r1, #2
 8020262:	4618      	mov	r0, r3
 8020264:	f001 ffd4 	bl	8022210 <RCCEx_PLL2_Config>
 8020268:	4603      	mov	r3, r0
 802026a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 802026e:	e004      	b.n	802027a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8020270:	2301      	movs	r3, #1
 8020272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020276:	e000      	b.n	802027a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8020278:	bf00      	nop
    }

    if (ret == HAL_OK)
 802027a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802027e:	2b00      	cmp	r3, #0
 8020280:	d10a      	bne.n	8020298 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8020282:	4b5a      	ldr	r3, [pc, #360]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020286:	f023 0103 	bic.w	r1, r3, #3
 802028a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802028e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8020290:	4a56      	ldr	r2, [pc, #344]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020292:	430b      	orrs	r3, r1
 8020294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8020296:	e003      	b.n	80202a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020298:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802029c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80202a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80202a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80202a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80202ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80202b0:	2300      	movs	r3, #0
 80202b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80202b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80202ba:	460b      	mov	r3, r1
 80202bc:	4313      	orrs	r3, r2
 80202be:	f000 809f 	beq.w	8020400 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80202c2:	4b4b      	ldr	r3, [pc, #300]	@ (80203f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80202c4:	681b      	ldr	r3, [r3, #0]
 80202c6:	4a4a      	ldr	r2, [pc, #296]	@ (80203f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80202c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80202cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80202ce:	f7fb fce5 	bl	801bc9c <HAL_GetTick>
 80202d2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80202d6:	e00b      	b.n	80202f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80202d8:	f7fb fce0 	bl	801bc9c <HAL_GetTick>
 80202dc:	4602      	mov	r2, r0
 80202de:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80202e2:	1ad3      	subs	r3, r2, r3
 80202e4:	2b64      	cmp	r3, #100	@ 0x64
 80202e6:	d903      	bls.n	80202f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80202e8:	2303      	movs	r3, #3
 80202ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80202ee:	e005      	b.n	80202fc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80202f0:	4b3f      	ldr	r3, [pc, #252]	@ (80203f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80202f2:	681b      	ldr	r3, [r3, #0]
 80202f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80202f8:	2b00      	cmp	r3, #0
 80202fa:	d0ed      	beq.n	80202d8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80202fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020300:	2b00      	cmp	r3, #0
 8020302:	d179      	bne.n	80203f8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8020304:	4b39      	ldr	r3, [pc, #228]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020306:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8020308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802030c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020310:	4053      	eors	r3, r2
 8020312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8020316:	2b00      	cmp	r3, #0
 8020318:	d015      	beq.n	8020346 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 802031a:	4b34      	ldr	r3, [pc, #208]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802031c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802031e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020322:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8020326:	4b31      	ldr	r3, [pc, #196]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802032a:	4a30      	ldr	r2, [pc, #192]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802032c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8020330:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8020332:	4b2e      	ldr	r3, [pc, #184]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020336:	4a2d      	ldr	r2, [pc, #180]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 802033c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 802033e:	4a2b      	ldr	r2, [pc, #172]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8020340:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8020344:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8020346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802034a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 802034e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020352:	d118      	bne.n	8020386 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020354:	f7fb fca2 	bl	801bc9c <HAL_GetTick>
 8020358:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802035c:	e00d      	b.n	802037a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802035e:	f7fb fc9d 	bl	801bc9c <HAL_GetTick>
 8020362:	4602      	mov	r2, r0
 8020364:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8020368:	1ad2      	subs	r2, r2, r3
 802036a:	f241 3388 	movw	r3, #5000	@ 0x1388
 802036e:	429a      	cmp	r2, r3
 8020370:	d903      	bls.n	802037a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8020372:	2303      	movs	r3, #3
 8020374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8020378:	e005      	b.n	8020386 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802037a:	4b1c      	ldr	r3, [pc, #112]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 802037c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802037e:	f003 0302 	and.w	r3, r3, #2
 8020382:	2b00      	cmp	r3, #0
 8020384:	d0eb      	beq.n	802035e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8020386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802038a:	2b00      	cmp	r3, #0
 802038c:	d129      	bne.n	80203e2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802038e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020392:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8020396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 802039a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 802039e:	d10e      	bne.n	80203be <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80203a0:	4b12      	ldr	r3, [pc, #72]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80203a2:	691b      	ldr	r3, [r3, #16]
 80203a4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80203a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80203ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80203b0:	091a      	lsrs	r2, r3, #4
 80203b2:	4b10      	ldr	r3, [pc, #64]	@ (80203f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80203b4:	4013      	ands	r3, r2
 80203b6:	4a0d      	ldr	r2, [pc, #52]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80203b8:	430b      	orrs	r3, r1
 80203ba:	6113      	str	r3, [r2, #16]
 80203bc:	e005      	b.n	80203ca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80203be:	4b0b      	ldr	r3, [pc, #44]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80203c0:	691b      	ldr	r3, [r3, #16]
 80203c2:	4a0a      	ldr	r2, [pc, #40]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80203c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80203c8:	6113      	str	r3, [r2, #16]
 80203ca:	4b08      	ldr	r3, [pc, #32]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80203cc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80203ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80203d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80203d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80203da:	4a04      	ldr	r2, [pc, #16]	@ (80203ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80203dc:	430b      	orrs	r3, r1
 80203de:	6713      	str	r3, [r2, #112]	@ 0x70
 80203e0:	e00e      	b.n	8020400 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80203e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80203e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80203ea:	e009      	b.n	8020400 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80203ec:	58024400 	.word	0x58024400
 80203f0:	58024800 	.word	0x58024800
 80203f4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80203f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80203fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8020400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020408:	f002 0301 	and.w	r3, r2, #1
 802040c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8020410:	2300      	movs	r3, #0
 8020412:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8020416:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 802041a:	460b      	mov	r3, r1
 802041c:	4313      	orrs	r3, r2
 802041e:	f000 8089 	beq.w	8020534 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8020422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020426:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8020428:	2b28      	cmp	r3, #40	@ 0x28
 802042a:	d86b      	bhi.n	8020504 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 802042c:	a201      	add	r2, pc, #4	@ (adr r2, 8020434 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 802042e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020432:	bf00      	nop
 8020434:	0802050d 	.word	0x0802050d
 8020438:	08020505 	.word	0x08020505
 802043c:	08020505 	.word	0x08020505
 8020440:	08020505 	.word	0x08020505
 8020444:	08020505 	.word	0x08020505
 8020448:	08020505 	.word	0x08020505
 802044c:	08020505 	.word	0x08020505
 8020450:	08020505 	.word	0x08020505
 8020454:	080204d9 	.word	0x080204d9
 8020458:	08020505 	.word	0x08020505
 802045c:	08020505 	.word	0x08020505
 8020460:	08020505 	.word	0x08020505
 8020464:	08020505 	.word	0x08020505
 8020468:	08020505 	.word	0x08020505
 802046c:	08020505 	.word	0x08020505
 8020470:	08020505 	.word	0x08020505
 8020474:	080204ef 	.word	0x080204ef
 8020478:	08020505 	.word	0x08020505
 802047c:	08020505 	.word	0x08020505
 8020480:	08020505 	.word	0x08020505
 8020484:	08020505 	.word	0x08020505
 8020488:	08020505 	.word	0x08020505
 802048c:	08020505 	.word	0x08020505
 8020490:	08020505 	.word	0x08020505
 8020494:	0802050d 	.word	0x0802050d
 8020498:	08020505 	.word	0x08020505
 802049c:	08020505 	.word	0x08020505
 80204a0:	08020505 	.word	0x08020505
 80204a4:	08020505 	.word	0x08020505
 80204a8:	08020505 	.word	0x08020505
 80204ac:	08020505 	.word	0x08020505
 80204b0:	08020505 	.word	0x08020505
 80204b4:	0802050d 	.word	0x0802050d
 80204b8:	08020505 	.word	0x08020505
 80204bc:	08020505 	.word	0x08020505
 80204c0:	08020505 	.word	0x08020505
 80204c4:	08020505 	.word	0x08020505
 80204c8:	08020505 	.word	0x08020505
 80204cc:	08020505 	.word	0x08020505
 80204d0:	08020505 	.word	0x08020505
 80204d4:	0802050d 	.word	0x0802050d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80204d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80204dc:	3308      	adds	r3, #8
 80204de:	2101      	movs	r1, #1
 80204e0:	4618      	mov	r0, r3
 80204e2:	f001 fe95 	bl	8022210 <RCCEx_PLL2_Config>
 80204e6:	4603      	mov	r3, r0
 80204e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80204ec:	e00f      	b.n	802050e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80204ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80204f2:	3328      	adds	r3, #40	@ 0x28
 80204f4:	2101      	movs	r1, #1
 80204f6:	4618      	mov	r0, r3
 80204f8:	f001 ff3c 	bl	8022374 <RCCEx_PLL3_Config>
 80204fc:	4603      	mov	r3, r0
 80204fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8020502:	e004      	b.n	802050e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020504:	2301      	movs	r3, #1
 8020506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 802050a:	e000      	b.n	802050e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 802050c:	bf00      	nop
    }

    if (ret == HAL_OK)
 802050e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020512:	2b00      	cmp	r3, #0
 8020514:	d10a      	bne.n	802052c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8020516:	4bbf      	ldr	r3, [pc, #764]	@ (8020814 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8020518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802051a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 802051e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020522:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8020524:	4abb      	ldr	r2, [pc, #748]	@ (8020814 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8020526:	430b      	orrs	r3, r1
 8020528:	6553      	str	r3, [r2, #84]	@ 0x54
 802052a:	e003      	b.n	8020534 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802052c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020530:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8020534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020538:	e9d3 2300 	ldrd	r2, r3, [r3]
 802053c:	f002 0302 	and.w	r3, r2, #2
 8020540:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8020544:	2300      	movs	r3, #0
 8020546:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 802054a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 802054e:	460b      	mov	r3, r1
 8020550:	4313      	orrs	r3, r2
 8020552:	d041      	beq.n	80205d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8020554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020558:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 802055a:	2b05      	cmp	r3, #5
 802055c:	d824      	bhi.n	80205a8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 802055e:	a201      	add	r2, pc, #4	@ (adr r2, 8020564 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8020560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020564:	080205b1 	.word	0x080205b1
 8020568:	0802057d 	.word	0x0802057d
 802056c:	08020593 	.word	0x08020593
 8020570:	080205b1 	.word	0x080205b1
 8020574:	080205b1 	.word	0x080205b1
 8020578:	080205b1 	.word	0x080205b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802057c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020580:	3308      	adds	r3, #8
 8020582:	2101      	movs	r1, #1
 8020584:	4618      	mov	r0, r3
 8020586:	f001 fe43 	bl	8022210 <RCCEx_PLL2_Config>
 802058a:	4603      	mov	r3, r0
 802058c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8020590:	e00f      	b.n	80205b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8020592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020596:	3328      	adds	r3, #40	@ 0x28
 8020598:	2101      	movs	r1, #1
 802059a:	4618      	mov	r0, r3
 802059c:	f001 feea 	bl	8022374 <RCCEx_PLL3_Config>
 80205a0:	4603      	mov	r3, r0
 80205a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80205a6:	e004      	b.n	80205b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80205a8:	2301      	movs	r3, #1
 80205aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80205ae:	e000      	b.n	80205b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80205b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80205b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80205b6:	2b00      	cmp	r3, #0
 80205b8:	d10a      	bne.n	80205d0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80205ba:	4b96      	ldr	r3, [pc, #600]	@ (8020814 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80205bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80205be:	f023 0107 	bic.w	r1, r3, #7
 80205c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80205c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80205c8:	4a92      	ldr	r2, [pc, #584]	@ (8020814 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80205ca:	430b      	orrs	r3, r1
 80205cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80205ce:	e003      	b.n	80205d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80205d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80205d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80205d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80205dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205e0:	f002 0304 	and.w	r3, r2, #4
 80205e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80205e8:	2300      	movs	r3, #0
 80205ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80205ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80205f2:	460b      	mov	r3, r1
 80205f4:	4313      	orrs	r3, r2
 80205f6:	d044      	beq.n	8020682 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80205f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80205fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020600:	2b05      	cmp	r3, #5
 8020602:	d825      	bhi.n	8020650 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8020604:	a201      	add	r2, pc, #4	@ (adr r2, 802060c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8020606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802060a:	bf00      	nop
 802060c:	08020659 	.word	0x08020659
 8020610:	08020625 	.word	0x08020625
 8020614:	0802063b 	.word	0x0802063b
 8020618:	08020659 	.word	0x08020659
 802061c:	08020659 	.word	0x08020659
 8020620:	08020659 	.word	0x08020659
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8020624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020628:	3308      	adds	r3, #8
 802062a:	2101      	movs	r1, #1
 802062c:	4618      	mov	r0, r3
 802062e:	f001 fdef 	bl	8022210 <RCCEx_PLL2_Config>
 8020632:	4603      	mov	r3, r0
 8020634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8020638:	e00f      	b.n	802065a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802063a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802063e:	3328      	adds	r3, #40	@ 0x28
 8020640:	2101      	movs	r1, #1
 8020642:	4618      	mov	r0, r3
 8020644:	f001 fe96 	bl	8022374 <RCCEx_PLL3_Config>
 8020648:	4603      	mov	r3, r0
 802064a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 802064e:	e004      	b.n	802065a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020650:	2301      	movs	r3, #1
 8020652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020656:	e000      	b.n	802065a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8020658:	bf00      	nop
    }

    if (ret == HAL_OK)
 802065a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802065e:	2b00      	cmp	r3, #0
 8020660:	d10b      	bne.n	802067a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8020662:	4b6c      	ldr	r3, [pc, #432]	@ (8020814 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8020664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020666:	f023 0107 	bic.w	r1, r3, #7
 802066a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802066e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020672:	4a68      	ldr	r2, [pc, #416]	@ (8020814 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8020674:	430b      	orrs	r3, r1
 8020676:	6593      	str	r3, [r2, #88]	@ 0x58
 8020678:	e003      	b.n	8020682 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802067a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802067e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8020682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020686:	e9d3 2300 	ldrd	r2, r3, [r3]
 802068a:	f002 0320 	and.w	r3, r2, #32
 802068e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8020692:	2300      	movs	r3, #0
 8020694:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8020698:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 802069c:	460b      	mov	r3, r1
 802069e:	4313      	orrs	r3, r2
 80206a0:	d055      	beq.n	802074e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80206a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80206a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80206aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80206ae:	d033      	beq.n	8020718 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80206b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80206b4:	d82c      	bhi.n	8020710 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80206b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80206ba:	d02f      	beq.n	802071c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80206bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80206c0:	d826      	bhi.n	8020710 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80206c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80206c6:	d02b      	beq.n	8020720 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80206c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80206cc:	d820      	bhi.n	8020710 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80206ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80206d2:	d012      	beq.n	80206fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80206d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80206d8:	d81a      	bhi.n	8020710 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80206da:	2b00      	cmp	r3, #0
 80206dc:	d022      	beq.n	8020724 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80206de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80206e2:	d115      	bne.n	8020710 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80206e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80206e8:	3308      	adds	r3, #8
 80206ea:	2100      	movs	r1, #0
 80206ec:	4618      	mov	r0, r3
 80206ee:	f001 fd8f 	bl	8022210 <RCCEx_PLL2_Config>
 80206f2:	4603      	mov	r3, r0
 80206f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80206f8:	e015      	b.n	8020726 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80206fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80206fe:	3328      	adds	r3, #40	@ 0x28
 8020700:	2102      	movs	r1, #2
 8020702:	4618      	mov	r0, r3
 8020704:	f001 fe36 	bl	8022374 <RCCEx_PLL3_Config>
 8020708:	4603      	mov	r3, r0
 802070a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 802070e:	e00a      	b.n	8020726 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020710:	2301      	movs	r3, #1
 8020712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020716:	e006      	b.n	8020726 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8020718:	bf00      	nop
 802071a:	e004      	b.n	8020726 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 802071c:	bf00      	nop
 802071e:	e002      	b.n	8020726 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8020720:	bf00      	nop
 8020722:	e000      	b.n	8020726 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8020724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802072a:	2b00      	cmp	r3, #0
 802072c:	d10b      	bne.n	8020746 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 802072e:	4b39      	ldr	r3, [pc, #228]	@ (8020814 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8020730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020732:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8020736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802073a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802073e:	4a35      	ldr	r2, [pc, #212]	@ (8020814 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8020740:	430b      	orrs	r3, r1
 8020742:	6553      	str	r3, [r2, #84]	@ 0x54
 8020744:	e003      	b.n	802074e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802074a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 802074e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020756:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 802075a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 802075e:	2300      	movs	r3, #0
 8020760:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8020764:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8020768:	460b      	mov	r3, r1
 802076a:	4313      	orrs	r3, r2
 802076c:	d058      	beq.n	8020820 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 802076e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020772:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8020776:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 802077a:	d033      	beq.n	80207e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 802077c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8020780:	d82c      	bhi.n	80207dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8020782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020786:	d02f      	beq.n	80207e8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8020788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802078c:	d826      	bhi.n	80207dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802078e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8020792:	d02b      	beq.n	80207ec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8020794:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8020798:	d820      	bhi.n	80207dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 802079a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802079e:	d012      	beq.n	80207c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80207a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80207a4:	d81a      	bhi.n	80207dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80207a6:	2b00      	cmp	r3, #0
 80207a8:	d022      	beq.n	80207f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80207aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80207ae:	d115      	bne.n	80207dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80207b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80207b4:	3308      	adds	r3, #8
 80207b6:	2100      	movs	r1, #0
 80207b8:	4618      	mov	r0, r3
 80207ba:	f001 fd29 	bl	8022210 <RCCEx_PLL2_Config>
 80207be:	4603      	mov	r3, r0
 80207c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80207c4:	e015      	b.n	80207f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80207c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80207ca:	3328      	adds	r3, #40	@ 0x28
 80207cc:	2102      	movs	r1, #2
 80207ce:	4618      	mov	r0, r3
 80207d0:	f001 fdd0 	bl	8022374 <RCCEx_PLL3_Config>
 80207d4:	4603      	mov	r3, r0
 80207d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80207da:	e00a      	b.n	80207f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80207dc:	2301      	movs	r3, #1
 80207de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80207e2:	e006      	b.n	80207f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80207e4:	bf00      	nop
 80207e6:	e004      	b.n	80207f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80207e8:	bf00      	nop
 80207ea:	e002      	b.n	80207f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80207ec:	bf00      	nop
 80207ee:	e000      	b.n	80207f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80207f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80207f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80207f6:	2b00      	cmp	r3, #0
 80207f8:	d10e      	bne.n	8020818 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80207fa:	4b06      	ldr	r3, [pc, #24]	@ (8020814 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80207fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80207fe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8020802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020806:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 802080a:	4a02      	ldr	r2, [pc, #8]	@ (8020814 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 802080c:	430b      	orrs	r3, r1
 802080e:	6593      	str	r3, [r2, #88]	@ 0x58
 8020810:	e006      	b.n	8020820 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8020812:	bf00      	nop
 8020814:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 802081c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8020820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020828:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 802082c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8020830:	2300      	movs	r3, #0
 8020832:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8020836:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 802083a:	460b      	mov	r3, r1
 802083c:	4313      	orrs	r3, r2
 802083e:	d055      	beq.n	80208ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8020840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020844:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8020848:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 802084c:	d033      	beq.n	80208b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 802084e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8020852:	d82c      	bhi.n	80208ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8020854:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020858:	d02f      	beq.n	80208ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 802085a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802085e:	d826      	bhi.n	80208ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8020860:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8020864:	d02b      	beq.n	80208be <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8020866:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 802086a:	d820      	bhi.n	80208ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 802086c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8020870:	d012      	beq.n	8020898 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8020872:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8020876:	d81a      	bhi.n	80208ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8020878:	2b00      	cmp	r3, #0
 802087a:	d022      	beq.n	80208c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 802087c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020880:	d115      	bne.n	80208ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8020882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020886:	3308      	adds	r3, #8
 8020888:	2100      	movs	r1, #0
 802088a:	4618      	mov	r0, r3
 802088c:	f001 fcc0 	bl	8022210 <RCCEx_PLL2_Config>
 8020890:	4603      	mov	r3, r0
 8020892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8020896:	e015      	b.n	80208c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8020898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802089c:	3328      	adds	r3, #40	@ 0x28
 802089e:	2102      	movs	r1, #2
 80208a0:	4618      	mov	r0, r3
 80208a2:	f001 fd67 	bl	8022374 <RCCEx_PLL3_Config>
 80208a6:	4603      	mov	r3, r0
 80208a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80208ac:	e00a      	b.n	80208c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80208ae:	2301      	movs	r3, #1
 80208b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80208b4:	e006      	b.n	80208c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80208b6:	bf00      	nop
 80208b8:	e004      	b.n	80208c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80208ba:	bf00      	nop
 80208bc:	e002      	b.n	80208c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80208be:	bf00      	nop
 80208c0:	e000      	b.n	80208c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80208c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80208c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80208c8:	2b00      	cmp	r3, #0
 80208ca:	d10b      	bne.n	80208e4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80208cc:	4ba1      	ldr	r3, [pc, #644]	@ (8020b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80208ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80208d0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80208d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80208d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80208dc:	4a9d      	ldr	r2, [pc, #628]	@ (8020b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80208de:	430b      	orrs	r3, r1
 80208e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80208e2:	e003      	b.n	80208ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80208e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80208e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80208ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80208f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208f4:	f002 0308 	and.w	r3, r2, #8
 80208f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80208fc:	2300      	movs	r3, #0
 80208fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8020902:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8020906:	460b      	mov	r3, r1
 8020908:	4313      	orrs	r3, r2
 802090a:	d01e      	beq.n	802094a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 802090c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020918:	d10c      	bne.n	8020934 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 802091a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802091e:	3328      	adds	r3, #40	@ 0x28
 8020920:	2102      	movs	r1, #2
 8020922:	4618      	mov	r0, r3
 8020924:	f001 fd26 	bl	8022374 <RCCEx_PLL3_Config>
 8020928:	4603      	mov	r3, r0
 802092a:	2b00      	cmp	r3, #0
 802092c:	d002      	beq.n	8020934 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 802092e:	2301      	movs	r3, #1
 8020930:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8020934:	4b87      	ldr	r3, [pc, #540]	@ (8020b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020938:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 802093c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020944:	4a83      	ldr	r2, [pc, #524]	@ (8020b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020946:	430b      	orrs	r3, r1
 8020948:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 802094a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802094e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020952:	f002 0310 	and.w	r3, r2, #16
 8020956:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 802095a:	2300      	movs	r3, #0
 802095c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8020960:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8020964:	460b      	mov	r3, r1
 8020966:	4313      	orrs	r3, r2
 8020968:	d01e      	beq.n	80209a8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 802096a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802096e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8020972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020976:	d10c      	bne.n	8020992 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8020978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802097c:	3328      	adds	r3, #40	@ 0x28
 802097e:	2102      	movs	r1, #2
 8020980:	4618      	mov	r0, r3
 8020982:	f001 fcf7 	bl	8022374 <RCCEx_PLL3_Config>
 8020986:	4603      	mov	r3, r0
 8020988:	2b00      	cmp	r3, #0
 802098a:	d002      	beq.n	8020992 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 802098c:	2301      	movs	r3, #1
 802098e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8020992:	4b70      	ldr	r3, [pc, #448]	@ (8020b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020996:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 802099a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 802099e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80209a2:	4a6c      	ldr	r2, [pc, #432]	@ (8020b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80209a4:	430b      	orrs	r3, r1
 80209a6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80209a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80209ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209b0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80209b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80209b8:	2300      	movs	r3, #0
 80209ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80209be:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80209c2:	460b      	mov	r3, r1
 80209c4:	4313      	orrs	r3, r2
 80209c6:	d03e      	beq.n	8020a46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80209c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80209cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80209d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80209d4:	d022      	beq.n	8020a1c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80209d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80209da:	d81b      	bhi.n	8020a14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80209dc:	2b00      	cmp	r3, #0
 80209de:	d003      	beq.n	80209e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80209e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80209e4:	d00b      	beq.n	80209fe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80209e6:	e015      	b.n	8020a14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80209e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80209ec:	3308      	adds	r3, #8
 80209ee:	2100      	movs	r1, #0
 80209f0:	4618      	mov	r0, r3
 80209f2:	f001 fc0d 	bl	8022210 <RCCEx_PLL2_Config>
 80209f6:	4603      	mov	r3, r0
 80209f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80209fc:	e00f      	b.n	8020a1e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80209fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a02:	3328      	adds	r3, #40	@ 0x28
 8020a04:	2102      	movs	r1, #2
 8020a06:	4618      	mov	r0, r3
 8020a08:	f001 fcb4 	bl	8022374 <RCCEx_PLL3_Config>
 8020a0c:	4603      	mov	r3, r0
 8020a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8020a12:	e004      	b.n	8020a1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020a14:	2301      	movs	r3, #1
 8020a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020a1a:	e000      	b.n	8020a1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8020a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020a22:	2b00      	cmp	r3, #0
 8020a24:	d10b      	bne.n	8020a3e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8020a26:	4b4b      	ldr	r3, [pc, #300]	@ (8020b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020a2a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8020a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8020a36:	4a47      	ldr	r2, [pc, #284]	@ (8020b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020a38:	430b      	orrs	r3, r1
 8020a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8020a3c:	e003      	b.n	8020a46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020a42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8020a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a4e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8020a52:	67bb      	str	r3, [r7, #120]	@ 0x78
 8020a54:	2300      	movs	r3, #0
 8020a56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8020a58:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8020a5c:	460b      	mov	r3, r1
 8020a5e:	4313      	orrs	r3, r2
 8020a60:	d03b      	beq.n	8020ada <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8020a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020a6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8020a6e:	d01f      	beq.n	8020ab0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8020a70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8020a74:	d818      	bhi.n	8020aa8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8020a76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020a7a:	d003      	beq.n	8020a84 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8020a7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8020a80:	d007      	beq.n	8020a92 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8020a82:	e011      	b.n	8020aa8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8020a84:	4b33      	ldr	r3, [pc, #204]	@ (8020b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020a88:	4a32      	ldr	r2, [pc, #200]	@ (8020b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020a8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8020a90:	e00f      	b.n	8020ab2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8020a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020a96:	3328      	adds	r3, #40	@ 0x28
 8020a98:	2101      	movs	r1, #1
 8020a9a:	4618      	mov	r0, r3
 8020a9c:	f001 fc6a 	bl	8022374 <RCCEx_PLL3_Config>
 8020aa0:	4603      	mov	r3, r0
 8020aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8020aa6:	e004      	b.n	8020ab2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020aa8:	2301      	movs	r3, #1
 8020aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020aae:	e000      	b.n	8020ab2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8020ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020ab6:	2b00      	cmp	r3, #0
 8020ab8:	d10b      	bne.n	8020ad2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8020aba:	4b26      	ldr	r3, [pc, #152]	@ (8020b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020abe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8020ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020aca:	4a22      	ldr	r2, [pc, #136]	@ (8020b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020acc:	430b      	orrs	r3, r1
 8020ace:	6553      	str	r3, [r2, #84]	@ 0x54
 8020ad0:	e003      	b.n	8020ada <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020ad6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8020ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ae2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8020ae6:	673b      	str	r3, [r7, #112]	@ 0x70
 8020ae8:	2300      	movs	r3, #0
 8020aea:	677b      	str	r3, [r7, #116]	@ 0x74
 8020aec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8020af0:	460b      	mov	r3, r1
 8020af2:	4313      	orrs	r3, r2
 8020af4:	d034      	beq.n	8020b60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8020af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020afc:	2b00      	cmp	r3, #0
 8020afe:	d003      	beq.n	8020b08 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8020b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020b04:	d007      	beq.n	8020b16 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8020b06:	e011      	b.n	8020b2c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8020b08:	4b12      	ldr	r3, [pc, #72]	@ (8020b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020b0c:	4a11      	ldr	r2, [pc, #68]	@ (8020b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020b12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8020b14:	e00e      	b.n	8020b34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8020b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b1a:	3308      	adds	r3, #8
 8020b1c:	2102      	movs	r1, #2
 8020b1e:	4618      	mov	r0, r3
 8020b20:	f001 fb76 	bl	8022210 <RCCEx_PLL2_Config>
 8020b24:	4603      	mov	r3, r0
 8020b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8020b2a:	e003      	b.n	8020b34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8020b2c:	2301      	movs	r3, #1
 8020b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020b34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020b38:	2b00      	cmp	r3, #0
 8020b3a:	d10d      	bne.n	8020b58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8020b3c:	4b05      	ldr	r3, [pc, #20]	@ (8020b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020b40:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8020b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020b4a:	4a02      	ldr	r2, [pc, #8]	@ (8020b54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8020b4c:	430b      	orrs	r3, r1
 8020b4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8020b50:	e006      	b.n	8020b60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8020b52:	bf00      	nop
 8020b54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020b5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8020b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b68:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8020b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8020b6e:	2300      	movs	r3, #0
 8020b70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8020b72:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8020b76:	460b      	mov	r3, r1
 8020b78:	4313      	orrs	r3, r2
 8020b7a:	d00c      	beq.n	8020b96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8020b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b80:	3328      	adds	r3, #40	@ 0x28
 8020b82:	2102      	movs	r1, #2
 8020b84:	4618      	mov	r0, r3
 8020b86:	f001 fbf5 	bl	8022374 <RCCEx_PLL3_Config>
 8020b8a:	4603      	mov	r3, r0
 8020b8c:	2b00      	cmp	r3, #0
 8020b8e:	d002      	beq.n	8020b96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8020b90:	2301      	movs	r3, #1
 8020b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8020b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b9e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8020ba2:	663b      	str	r3, [r7, #96]	@ 0x60
 8020ba4:	2300      	movs	r3, #0
 8020ba6:	667b      	str	r3, [r7, #100]	@ 0x64
 8020ba8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8020bac:	460b      	mov	r3, r1
 8020bae:	4313      	orrs	r3, r2
 8020bb0:	d038      	beq.n	8020c24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8020bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020bba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020bbe:	d018      	beq.n	8020bf2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8020bc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020bc4:	d811      	bhi.n	8020bea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8020bc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020bca:	d014      	beq.n	8020bf6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8020bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020bd0:	d80b      	bhi.n	8020bea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8020bd2:	2b00      	cmp	r3, #0
 8020bd4:	d011      	beq.n	8020bfa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8020bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020bda:	d106      	bne.n	8020bea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8020bdc:	4bc3      	ldr	r3, [pc, #780]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020be0:	4ac2      	ldr	r2, [pc, #776]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020be2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020be6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8020be8:	e008      	b.n	8020bfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8020bea:	2301      	movs	r3, #1
 8020bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8020bf0:	e004      	b.n	8020bfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8020bf2:	bf00      	nop
 8020bf4:	e002      	b.n	8020bfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8020bf6:	bf00      	nop
 8020bf8:	e000      	b.n	8020bfc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8020bfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8020bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020c00:	2b00      	cmp	r3, #0
 8020c02:	d10b      	bne.n	8020c1c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8020c04:	4bb9      	ldr	r3, [pc, #740]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020c08:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8020c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8020c14:	4ab5      	ldr	r2, [pc, #724]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020c16:	430b      	orrs	r3, r1
 8020c18:	6553      	str	r3, [r2, #84]	@ 0x54
 8020c1a:	e003      	b.n	8020c24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020c20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8020c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c2c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8020c30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8020c32:	2300      	movs	r3, #0
 8020c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8020c36:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8020c3a:	460b      	mov	r3, r1
 8020c3c:	4313      	orrs	r3, r2
 8020c3e:	d009      	beq.n	8020c54 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8020c40:	4baa      	ldr	r3, [pc, #680]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020c44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8020c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8020c4e:	4aa7      	ldr	r2, [pc, #668]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020c50:	430b      	orrs	r3, r1
 8020c52:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8020c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c5c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8020c60:	653b      	str	r3, [r7, #80]	@ 0x50
 8020c62:	2300      	movs	r3, #0
 8020c64:	657b      	str	r3, [r7, #84]	@ 0x54
 8020c66:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8020c6a:	460b      	mov	r3, r1
 8020c6c:	4313      	orrs	r3, r2
 8020c6e:	d00a      	beq.n	8020c86 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8020c70:	4b9e      	ldr	r3, [pc, #632]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020c72:	691b      	ldr	r3, [r3, #16]
 8020c74:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8020c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8020c80:	4a9a      	ldr	r2, [pc, #616]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020c82:	430b      	orrs	r3, r1
 8020c84:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8020c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c8e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8020c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8020c94:	2300      	movs	r3, #0
 8020c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020c98:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8020c9c:	460b      	mov	r3, r1
 8020c9e:	4313      	orrs	r3, r2
 8020ca0:	d009      	beq.n	8020cb6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8020ca2:	4b92      	ldr	r3, [pc, #584]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020ca6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8020caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020cb0:	4a8e      	ldr	r2, [pc, #568]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020cb2:	430b      	orrs	r3, r1
 8020cb4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8020cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cbe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8020cc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8020cc4:	2300      	movs	r3, #0
 8020cc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8020cc8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8020ccc:	460b      	mov	r3, r1
 8020cce:	4313      	orrs	r3, r2
 8020cd0:	d00e      	beq.n	8020cf0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8020cd2:	4b86      	ldr	r3, [pc, #536]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020cd4:	691b      	ldr	r3, [r3, #16]
 8020cd6:	4a85      	ldr	r2, [pc, #532]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020cd8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8020cdc:	6113      	str	r3, [r2, #16]
 8020cde:	4b83      	ldr	r3, [pc, #524]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020ce0:	6919      	ldr	r1, [r3, #16]
 8020ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020ce6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8020cea:	4a80      	ldr	r2, [pc, #512]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020cec:	430b      	orrs	r3, r1
 8020cee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8020cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cf8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8020cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020cfe:	2300      	movs	r3, #0
 8020d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020d02:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8020d06:	460b      	mov	r3, r1
 8020d08:	4313      	orrs	r3, r2
 8020d0a:	d009      	beq.n	8020d20 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8020d0c:	4b77      	ldr	r3, [pc, #476]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020d10:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8020d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020d1a:	4a74      	ldr	r2, [pc, #464]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020d1c:	430b      	orrs	r3, r1
 8020d1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8020d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d28:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8020d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8020d2e:	2300      	movs	r3, #0
 8020d30:	637b      	str	r3, [r7, #52]	@ 0x34
 8020d32:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8020d36:	460b      	mov	r3, r1
 8020d38:	4313      	orrs	r3, r2
 8020d3a:	d00a      	beq.n	8020d52 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8020d3c:	4b6b      	ldr	r3, [pc, #428]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020d40:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8020d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8020d4c:	4a67      	ldr	r2, [pc, #412]	@ (8020eec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8020d4e:	430b      	orrs	r3, r1
 8020d50:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8020d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d5a:	2100      	movs	r1, #0
 8020d5c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8020d5e:	f003 0301 	and.w	r3, r3, #1
 8020d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020d64:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8020d68:	460b      	mov	r3, r1
 8020d6a:	4313      	orrs	r3, r2
 8020d6c:	d011      	beq.n	8020d92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8020d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d72:	3308      	adds	r3, #8
 8020d74:	2100      	movs	r1, #0
 8020d76:	4618      	mov	r0, r3
 8020d78:	f001 fa4a 	bl	8022210 <RCCEx_PLL2_Config>
 8020d7c:	4603      	mov	r3, r0
 8020d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	d003      	beq.n	8020d92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020d8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8020d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d9a:	2100      	movs	r1, #0
 8020d9c:	6239      	str	r1, [r7, #32]
 8020d9e:	f003 0302 	and.w	r3, r3, #2
 8020da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8020da4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8020da8:	460b      	mov	r3, r1
 8020daa:	4313      	orrs	r3, r2
 8020dac:	d011      	beq.n	8020dd2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8020dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020db2:	3308      	adds	r3, #8
 8020db4:	2101      	movs	r1, #1
 8020db6:	4618      	mov	r0, r3
 8020db8:	f001 fa2a 	bl	8022210 <RCCEx_PLL2_Config>
 8020dbc:	4603      	mov	r3, r0
 8020dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020dc6:	2b00      	cmp	r3, #0
 8020dc8:	d003      	beq.n	8020dd2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020dce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8020dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dda:	2100      	movs	r1, #0
 8020ddc:	61b9      	str	r1, [r7, #24]
 8020dde:	f003 0304 	and.w	r3, r3, #4
 8020de2:	61fb      	str	r3, [r7, #28]
 8020de4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8020de8:	460b      	mov	r3, r1
 8020dea:	4313      	orrs	r3, r2
 8020dec:	d011      	beq.n	8020e12 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8020dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020df2:	3308      	adds	r3, #8
 8020df4:	2102      	movs	r1, #2
 8020df6:	4618      	mov	r0, r3
 8020df8:	f001 fa0a 	bl	8022210 <RCCEx_PLL2_Config>
 8020dfc:	4603      	mov	r3, r0
 8020dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020e06:	2b00      	cmp	r3, #0
 8020e08:	d003      	beq.n	8020e12 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8020e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e1a:	2100      	movs	r1, #0
 8020e1c:	6139      	str	r1, [r7, #16]
 8020e1e:	f003 0308 	and.w	r3, r3, #8
 8020e22:	617b      	str	r3, [r7, #20]
 8020e24:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8020e28:	460b      	mov	r3, r1
 8020e2a:	4313      	orrs	r3, r2
 8020e2c:	d011      	beq.n	8020e52 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8020e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020e32:	3328      	adds	r3, #40	@ 0x28
 8020e34:	2100      	movs	r1, #0
 8020e36:	4618      	mov	r0, r3
 8020e38:	f001 fa9c 	bl	8022374 <RCCEx_PLL3_Config>
 8020e3c:	4603      	mov	r3, r0
 8020e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8020e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020e46:	2b00      	cmp	r3, #0
 8020e48:	d003      	beq.n	8020e52 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020e4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8020e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e5a:	2100      	movs	r1, #0
 8020e5c:	60b9      	str	r1, [r7, #8]
 8020e5e:	f003 0310 	and.w	r3, r3, #16
 8020e62:	60fb      	str	r3, [r7, #12]
 8020e64:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020e68:	460b      	mov	r3, r1
 8020e6a:	4313      	orrs	r3, r2
 8020e6c:	d011      	beq.n	8020e92 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8020e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020e72:	3328      	adds	r3, #40	@ 0x28
 8020e74:	2101      	movs	r1, #1
 8020e76:	4618      	mov	r0, r3
 8020e78:	f001 fa7c 	bl	8022374 <RCCEx_PLL3_Config>
 8020e7c:	4603      	mov	r3, r0
 8020e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020e86:	2b00      	cmp	r3, #0
 8020e88:	d003      	beq.n	8020e92 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020e8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8020e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e9a:	2100      	movs	r1, #0
 8020e9c:	6039      	str	r1, [r7, #0]
 8020e9e:	f003 0320 	and.w	r3, r3, #32
 8020ea2:	607b      	str	r3, [r7, #4]
 8020ea4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8020ea8:	460b      	mov	r3, r1
 8020eaa:	4313      	orrs	r3, r2
 8020eac:	d011      	beq.n	8020ed2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8020eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8020eb2:	3328      	adds	r3, #40	@ 0x28
 8020eb4:	2102      	movs	r1, #2
 8020eb6:	4618      	mov	r0, r3
 8020eb8:	f001 fa5c 	bl	8022374 <RCCEx_PLL3_Config>
 8020ebc:	4603      	mov	r3, r0
 8020ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8020ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020ec6:	2b00      	cmp	r3, #0
 8020ec8:	d003      	beq.n	8020ed2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8020eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020ece:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8020ed2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8020ed6:	2b00      	cmp	r3, #0
 8020ed8:	d101      	bne.n	8020ede <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8020eda:	2300      	movs	r3, #0
 8020edc:	e000      	b.n	8020ee0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8020ede:	2301      	movs	r3, #1
}
 8020ee0:	4618      	mov	r0, r3
 8020ee2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8020ee6:	46bd      	mov	sp, r7
 8020ee8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020eec:	58024400 	.word	0x58024400

08020ef0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8020ef0:	b580      	push	{r7, lr}
 8020ef2:	b090      	sub	sp, #64	@ 0x40
 8020ef4:	af00      	add	r7, sp, #0
 8020ef6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8020efa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020efe:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8020f02:	430b      	orrs	r3, r1
 8020f04:	f040 8094 	bne.w	8021030 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8020f08:	4b9e      	ldr	r3, [pc, #632]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8020f0c:	f003 0307 	and.w	r3, r3, #7
 8020f10:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8020f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f14:	2b04      	cmp	r3, #4
 8020f16:	f200 8087 	bhi.w	8021028 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8020f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8020f20 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8020f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020f20:	08020f35 	.word	0x08020f35
 8020f24:	08020f5d 	.word	0x08020f5d
 8020f28:	08020f85 	.word	0x08020f85
 8020f2c:	08021021 	.word	0x08021021
 8020f30:	08020fad 	.word	0x08020fad
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8020f34:	4b93      	ldr	r3, [pc, #588]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f36:	681b      	ldr	r3, [r3, #0]
 8020f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020f3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8020f40:	d108      	bne.n	8020f54 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8020f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020f46:	4618      	mov	r0, r3
 8020f48:	f001 f810 	bl	8021f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8020f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020f50:	f000 bd45 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020f54:	2300      	movs	r3, #0
 8020f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f58:	f000 bd41 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8020f5c:	4b89      	ldr	r3, [pc, #548]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f5e:	681b      	ldr	r3, [r3, #0]
 8020f60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8020f64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8020f68:	d108      	bne.n	8020f7c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020f6a:	f107 0318 	add.w	r3, r7, #24
 8020f6e:	4618      	mov	r0, r3
 8020f70:	f000 fd54 	bl	8021a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8020f74:	69bb      	ldr	r3, [r7, #24]
 8020f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020f78:	f000 bd31 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020f7c:	2300      	movs	r3, #0
 8020f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020f80:	f000 bd2d 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8020f84:	4b7f      	ldr	r3, [pc, #508]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020f86:	681b      	ldr	r3, [r3, #0]
 8020f88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8020f8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8020f90:	d108      	bne.n	8020fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020f92:	f107 030c 	add.w	r3, r7, #12
 8020f96:	4618      	mov	r0, r3
 8020f98:	f000 fe94 	bl	8021cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8020f9c:	68fb      	ldr	r3, [r7, #12]
 8020f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8020fa0:	f000 bd1d 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8020fa4:	2300      	movs	r3, #0
 8020fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020fa8:	f000 bd19 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8020fac:	4b75      	ldr	r3, [pc, #468]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8020fb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8020fb4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8020fb6:	4b73      	ldr	r3, [pc, #460]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020fb8:	681b      	ldr	r3, [r3, #0]
 8020fba:	f003 0304 	and.w	r3, r3, #4
 8020fbe:	2b04      	cmp	r3, #4
 8020fc0:	d10c      	bne.n	8020fdc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8020fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020fc4:	2b00      	cmp	r3, #0
 8020fc6:	d109      	bne.n	8020fdc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8020fc8:	4b6e      	ldr	r3, [pc, #440]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020fca:	681b      	ldr	r3, [r3, #0]
 8020fcc:	08db      	lsrs	r3, r3, #3
 8020fce:	f003 0303 	and.w	r3, r3, #3
 8020fd2:	4a6d      	ldr	r2, [pc, #436]	@ (8021188 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8020fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8020fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020fda:	e01f      	b.n	802101c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8020fdc:	4b69      	ldr	r3, [pc, #420]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020fde:	681b      	ldr	r3, [r3, #0]
 8020fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020fe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020fe8:	d106      	bne.n	8020ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8020fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020fec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020ff0:	d102      	bne.n	8020ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8020ff2:	4b66      	ldr	r3, [pc, #408]	@ (802118c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8020ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020ff6:	e011      	b.n	802101c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8020ff8:	4b62      	ldr	r3, [pc, #392]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8020ffa:	681b      	ldr	r3, [r3, #0]
 8020ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021000:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021004:	d106      	bne.n	8021014 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8021006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802100c:	d102      	bne.n	8021014 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 802100e:	4b60      	ldr	r3, [pc, #384]	@ (8021190 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8021010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021012:	e003      	b.n	802101c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8021014:	2300      	movs	r3, #0
 8021016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8021018:	f000 bce1 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 802101c:	f000 bcdf 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8021020:	4b5c      	ldr	r3, [pc, #368]	@ (8021194 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8021022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021024:	f000 bcdb 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8021028:	2300      	movs	r3, #0
 802102a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802102c:	f000 bcd7 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8021030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021034:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8021038:	430b      	orrs	r3, r1
 802103a:	f040 80ad 	bne.w	8021198 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 802103e:	4b51      	ldr	r3, [pc, #324]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8021040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021042:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8021046:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8021048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802104a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802104e:	d056      	beq.n	80210fe <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8021050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021056:	f200 8090 	bhi.w	802117a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 802105a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802105c:	2bc0      	cmp	r3, #192	@ 0xc0
 802105e:	f000 8088 	beq.w	8021172 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8021062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021064:	2bc0      	cmp	r3, #192	@ 0xc0
 8021066:	f200 8088 	bhi.w	802117a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 802106a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802106c:	2b80      	cmp	r3, #128	@ 0x80
 802106e:	d032      	beq.n	80210d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8021070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021072:	2b80      	cmp	r3, #128	@ 0x80
 8021074:	f200 8081 	bhi.w	802117a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8021078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802107a:	2b00      	cmp	r3, #0
 802107c:	d003      	beq.n	8021086 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 802107e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021080:	2b40      	cmp	r3, #64	@ 0x40
 8021082:	d014      	beq.n	80210ae <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8021084:	e079      	b.n	802117a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8021086:	4b3f      	ldr	r3, [pc, #252]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8021088:	681b      	ldr	r3, [r3, #0]
 802108a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802108e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8021092:	d108      	bne.n	80210a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8021094:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021098:	4618      	mov	r0, r3
 802109a:	f000 ff67 	bl	8021f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 802109e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80210a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80210a2:	f000 bc9c 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80210a6:	2300      	movs	r3, #0
 80210a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80210aa:	f000 bc98 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80210ae:	4b35      	ldr	r3, [pc, #212]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80210b0:	681b      	ldr	r3, [r3, #0]
 80210b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80210b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80210ba:	d108      	bne.n	80210ce <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80210bc:	f107 0318 	add.w	r3, r7, #24
 80210c0:	4618      	mov	r0, r3
 80210c2:	f000 fcab 	bl	8021a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80210c6:	69bb      	ldr	r3, [r7, #24]
 80210c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80210ca:	f000 bc88 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80210ce:	2300      	movs	r3, #0
 80210d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80210d2:	f000 bc84 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80210d6:	4b2b      	ldr	r3, [pc, #172]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80210d8:	681b      	ldr	r3, [r3, #0]
 80210da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80210de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80210e2:	d108      	bne.n	80210f6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80210e4:	f107 030c 	add.w	r3, r7, #12
 80210e8:	4618      	mov	r0, r3
 80210ea:	f000 fdeb 	bl	8021cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80210ee:	68fb      	ldr	r3, [r7, #12]
 80210f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80210f2:	f000 bc74 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80210f6:	2300      	movs	r3, #0
 80210f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80210fa:	f000 bc70 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80210fe:	4b21      	ldr	r3, [pc, #132]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8021100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021102:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8021106:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8021108:	4b1e      	ldr	r3, [pc, #120]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 802110a:	681b      	ldr	r3, [r3, #0]
 802110c:	f003 0304 	and.w	r3, r3, #4
 8021110:	2b04      	cmp	r3, #4
 8021112:	d10c      	bne.n	802112e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8021114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021116:	2b00      	cmp	r3, #0
 8021118:	d109      	bne.n	802112e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802111a:	4b1a      	ldr	r3, [pc, #104]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 802111c:	681b      	ldr	r3, [r3, #0]
 802111e:	08db      	lsrs	r3, r3, #3
 8021120:	f003 0303 	and.w	r3, r3, #3
 8021124:	4a18      	ldr	r2, [pc, #96]	@ (8021188 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8021126:	fa22 f303 	lsr.w	r3, r2, r3
 802112a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802112c:	e01f      	b.n	802116e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 802112e:	4b15      	ldr	r3, [pc, #84]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8021130:	681b      	ldr	r3, [r3, #0]
 8021132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802113a:	d106      	bne.n	802114a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 802113c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802113e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021142:	d102      	bne.n	802114a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8021144:	4b11      	ldr	r3, [pc, #68]	@ (802118c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8021146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021148:	e011      	b.n	802116e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 802114a:	4b0e      	ldr	r3, [pc, #56]	@ (8021184 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 802114c:	681b      	ldr	r3, [r3, #0]
 802114e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021152:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021156:	d106      	bne.n	8021166 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8021158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802115a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802115e:	d102      	bne.n	8021166 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8021160:	4b0b      	ldr	r3, [pc, #44]	@ (8021190 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8021162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021164:	e003      	b.n	802116e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8021166:	2300      	movs	r3, #0
 8021168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 802116a:	f000 bc38 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 802116e:	f000 bc36 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8021172:	4b08      	ldr	r3, [pc, #32]	@ (8021194 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8021174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021176:	f000 bc32 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 802117a:	2300      	movs	r3, #0
 802117c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802117e:	f000 bc2e 	b.w	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021182:	bf00      	nop
 8021184:	58024400 	.word	0x58024400
 8021188:	03d09000 	.word	0x03d09000
 802118c:	003d0900 	.word	0x003d0900
 8021190:	017d7840 	.word	0x017d7840
 8021194:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8021198:	e9d7 2300 	ldrd	r2, r3, [r7]
 802119c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80211a0:	430b      	orrs	r3, r1
 80211a2:	f040 809c 	bne.w	80212de <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80211a6:	4b9e      	ldr	r3, [pc, #632]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80211a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80211aa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80211ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80211b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80211b6:	d054      	beq.n	8021262 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80211b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80211be:	f200 808b 	bhi.w	80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80211c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80211c8:	f000 8083 	beq.w	80212d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80211cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80211d2:	f200 8081 	bhi.w	80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80211d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80211dc:	d02f      	beq.n	802123e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80211de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80211e4:	d878      	bhi.n	80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80211e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211e8:	2b00      	cmp	r3, #0
 80211ea:	d004      	beq.n	80211f6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80211ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80211ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80211f2:	d012      	beq.n	802121a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80211f4:	e070      	b.n	80212d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80211f6:	4b8a      	ldr	r3, [pc, #552]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80211f8:	681b      	ldr	r3, [r3, #0]
 80211fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80211fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8021202:	d107      	bne.n	8021214 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8021204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021208:	4618      	mov	r0, r3
 802120a:	f000 feaf 	bl	8021f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 802120e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021212:	e3e4      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021214:	2300      	movs	r3, #0
 8021216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021218:	e3e1      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 802121a:	4b81      	ldr	r3, [pc, #516]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 802121c:	681b      	ldr	r3, [r3, #0]
 802121e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8021222:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021226:	d107      	bne.n	8021238 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021228:	f107 0318 	add.w	r3, r7, #24
 802122c:	4618      	mov	r0, r3
 802122e:	f000 fbf5 	bl	8021a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8021232:	69bb      	ldr	r3, [r7, #24]
 8021234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021236:	e3d2      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021238:	2300      	movs	r3, #0
 802123a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802123c:	e3cf      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 802123e:	4b78      	ldr	r3, [pc, #480]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021240:	681b      	ldr	r3, [r3, #0]
 8021242:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8021246:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802124a:	d107      	bne.n	802125c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802124c:	f107 030c 	add.w	r3, r7, #12
 8021250:	4618      	mov	r0, r3
 8021252:	f000 fd37 	bl	8021cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8021256:	68fb      	ldr	r3, [r7, #12]
 8021258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802125a:	e3c0      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802125c:	2300      	movs	r3, #0
 802125e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021260:	e3bd      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8021262:	4b6f      	ldr	r3, [pc, #444]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021266:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 802126a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 802126c:	4b6c      	ldr	r3, [pc, #432]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 802126e:	681b      	ldr	r3, [r3, #0]
 8021270:	f003 0304 	and.w	r3, r3, #4
 8021274:	2b04      	cmp	r3, #4
 8021276:	d10c      	bne.n	8021292 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8021278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802127a:	2b00      	cmp	r3, #0
 802127c:	d109      	bne.n	8021292 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 802127e:	4b68      	ldr	r3, [pc, #416]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021280:	681b      	ldr	r3, [r3, #0]
 8021282:	08db      	lsrs	r3, r3, #3
 8021284:	f003 0303 	and.w	r3, r3, #3
 8021288:	4a66      	ldr	r2, [pc, #408]	@ (8021424 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 802128a:	fa22 f303 	lsr.w	r3, r2, r3
 802128e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021290:	e01e      	b.n	80212d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8021292:	4b63      	ldr	r3, [pc, #396]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021294:	681b      	ldr	r3, [r3, #0]
 8021296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802129a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802129e:	d106      	bne.n	80212ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80212a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80212a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80212a6:	d102      	bne.n	80212ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80212a8:	4b5f      	ldr	r3, [pc, #380]	@ (8021428 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80212aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80212ac:	e010      	b.n	80212d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80212ae:	4b5c      	ldr	r3, [pc, #368]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80212b0:	681b      	ldr	r3, [r3, #0]
 80212b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80212b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80212ba:	d106      	bne.n	80212ca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80212bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80212be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80212c2:	d102      	bne.n	80212ca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80212c4:	4b59      	ldr	r3, [pc, #356]	@ (802142c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80212c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80212c8:	e002      	b.n	80212d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80212ca:	2300      	movs	r3, #0
 80212cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80212ce:	e386      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80212d0:	e385      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80212d2:	4b57      	ldr	r3, [pc, #348]	@ (8021430 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80212d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80212d6:	e382      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80212d8:	2300      	movs	r3, #0
 80212da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80212dc:	e37f      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80212de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80212e2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80212e6:	430b      	orrs	r3, r1
 80212e8:	f040 80a7 	bne.w	802143a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80212ec:	4b4c      	ldr	r3, [pc, #304]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80212ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80212f0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80212f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80212f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80212f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80212fc:	d055      	beq.n	80213aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80212fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021300:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8021304:	f200 8096 	bhi.w	8021434 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8021308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802130a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 802130e:	f000 8084 	beq.w	802141a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8021312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021314:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8021318:	f200 808c 	bhi.w	8021434 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 802131c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802131e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8021322:	d030      	beq.n	8021386 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8021324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021326:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802132a:	f200 8083 	bhi.w	8021434 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 802132e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021330:	2b00      	cmp	r3, #0
 8021332:	d004      	beq.n	802133e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8021334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021336:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802133a:	d012      	beq.n	8021362 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 802133c:	e07a      	b.n	8021434 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 802133e:	4b38      	ldr	r3, [pc, #224]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021340:	681b      	ldr	r3, [r3, #0]
 8021342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021346:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802134a:	d107      	bne.n	802135c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 802134c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021350:	4618      	mov	r0, r3
 8021352:	f000 fe0b 	bl	8021f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8021356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802135a:	e340      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802135c:	2300      	movs	r3, #0
 802135e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021360:	e33d      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8021362:	4b2f      	ldr	r3, [pc, #188]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021364:	681b      	ldr	r3, [r3, #0]
 8021366:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 802136a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 802136e:	d107      	bne.n	8021380 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021370:	f107 0318 	add.w	r3, r7, #24
 8021374:	4618      	mov	r0, r3
 8021376:	f000 fb51 	bl	8021a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 802137a:	69bb      	ldr	r3, [r7, #24]
 802137c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802137e:	e32e      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021380:	2300      	movs	r3, #0
 8021382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021384:	e32b      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8021386:	4b26      	ldr	r3, [pc, #152]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8021388:	681b      	ldr	r3, [r3, #0]
 802138a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 802138e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021392:	d107      	bne.n	80213a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021394:	f107 030c 	add.w	r3, r7, #12
 8021398:	4618      	mov	r0, r3
 802139a:	f000 fc93 	bl	8021cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 802139e:	68fb      	ldr	r3, [r7, #12]
 80213a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80213a2:	e31c      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80213a4:	2300      	movs	r3, #0
 80213a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80213a8:	e319      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80213aa:	4b1d      	ldr	r3, [pc, #116]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80213ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80213ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80213b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80213b4:	4b1a      	ldr	r3, [pc, #104]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80213b6:	681b      	ldr	r3, [r3, #0]
 80213b8:	f003 0304 	and.w	r3, r3, #4
 80213bc:	2b04      	cmp	r3, #4
 80213be:	d10c      	bne.n	80213da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80213c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80213c2:	2b00      	cmp	r3, #0
 80213c4:	d109      	bne.n	80213da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80213c6:	4b16      	ldr	r3, [pc, #88]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80213c8:	681b      	ldr	r3, [r3, #0]
 80213ca:	08db      	lsrs	r3, r3, #3
 80213cc:	f003 0303 	and.w	r3, r3, #3
 80213d0:	4a14      	ldr	r2, [pc, #80]	@ (8021424 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80213d2:	fa22 f303 	lsr.w	r3, r2, r3
 80213d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80213d8:	e01e      	b.n	8021418 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80213da:	4b11      	ldr	r3, [pc, #68]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80213dc:	681b      	ldr	r3, [r3, #0]
 80213de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80213e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80213e6:	d106      	bne.n	80213f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80213e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80213ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80213ee:	d102      	bne.n	80213f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80213f0:	4b0d      	ldr	r3, [pc, #52]	@ (8021428 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80213f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80213f4:	e010      	b.n	8021418 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80213f6:	4b0a      	ldr	r3, [pc, #40]	@ (8021420 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80213f8:	681b      	ldr	r3, [r3, #0]
 80213fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80213fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021402:	d106      	bne.n	8021412 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8021404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021406:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802140a:	d102      	bne.n	8021412 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 802140c:	4b07      	ldr	r3, [pc, #28]	@ (802142c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 802140e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021410:	e002      	b.n	8021418 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8021412:	2300      	movs	r3, #0
 8021414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8021416:	e2e2      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021418:	e2e1      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 802141a:	4b05      	ldr	r3, [pc, #20]	@ (8021430 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 802141c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802141e:	e2de      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021420:	58024400 	.word	0x58024400
 8021424:	03d09000 	.word	0x03d09000
 8021428:	003d0900 	.word	0x003d0900
 802142c:	017d7840 	.word	0x017d7840
 8021430:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8021434:	2300      	movs	r3, #0
 8021436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021438:	e2d1      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 802143a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802143e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8021442:	430b      	orrs	r3, r1
 8021444:	f040 809c 	bne.w	8021580 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8021448:	4b93      	ldr	r3, [pc, #588]	@ (8021698 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 802144a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802144c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8021450:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8021452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021454:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8021458:	d054      	beq.n	8021504 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 802145a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802145c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8021460:	f200 808b 	bhi.w	802157a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8021464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021466:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 802146a:	f000 8083 	beq.w	8021574 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 802146e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021470:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8021474:	f200 8081 	bhi.w	802157a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8021478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802147a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802147e:	d02f      	beq.n	80214e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8021480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021486:	d878      	bhi.n	802157a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8021488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802148a:	2b00      	cmp	r3, #0
 802148c:	d004      	beq.n	8021498 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 802148e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8021494:	d012      	beq.n	80214bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8021496:	e070      	b.n	802157a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8021498:	4b7f      	ldr	r3, [pc, #508]	@ (8021698 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 802149a:	681b      	ldr	r3, [r3, #0]
 802149c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80214a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80214a4:	d107      	bne.n	80214b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80214a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80214aa:	4618      	mov	r0, r3
 80214ac:	f000 fd5e 	bl	8021f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80214b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80214b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80214b4:	e293      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80214b6:	2300      	movs	r3, #0
 80214b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80214ba:	e290      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80214bc:	4b76      	ldr	r3, [pc, #472]	@ (8021698 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80214be:	681b      	ldr	r3, [r3, #0]
 80214c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80214c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80214c8:	d107      	bne.n	80214da <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80214ca:	f107 0318 	add.w	r3, r7, #24
 80214ce:	4618      	mov	r0, r3
 80214d0:	f000 faa4 	bl	8021a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80214d4:	69bb      	ldr	r3, [r7, #24]
 80214d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80214d8:	e281      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80214da:	2300      	movs	r3, #0
 80214dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80214de:	e27e      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80214e0:	4b6d      	ldr	r3, [pc, #436]	@ (8021698 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80214e2:	681b      	ldr	r3, [r3, #0]
 80214e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80214e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80214ec:	d107      	bne.n	80214fe <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80214ee:	f107 030c 	add.w	r3, r7, #12
 80214f2:	4618      	mov	r0, r3
 80214f4:	f000 fbe6 	bl	8021cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80214f8:	68fb      	ldr	r3, [r7, #12]
 80214fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80214fc:	e26f      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80214fe:	2300      	movs	r3, #0
 8021500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021502:	e26c      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8021504:	4b64      	ldr	r3, [pc, #400]	@ (8021698 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021508:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 802150c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 802150e:	4b62      	ldr	r3, [pc, #392]	@ (8021698 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021510:	681b      	ldr	r3, [r3, #0]
 8021512:	f003 0304 	and.w	r3, r3, #4
 8021516:	2b04      	cmp	r3, #4
 8021518:	d10c      	bne.n	8021534 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 802151a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802151c:	2b00      	cmp	r3, #0
 802151e:	d109      	bne.n	8021534 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021520:	4b5d      	ldr	r3, [pc, #372]	@ (8021698 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021522:	681b      	ldr	r3, [r3, #0]
 8021524:	08db      	lsrs	r3, r3, #3
 8021526:	f003 0303 	and.w	r3, r3, #3
 802152a:	4a5c      	ldr	r2, [pc, #368]	@ (802169c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 802152c:	fa22 f303 	lsr.w	r3, r2, r3
 8021530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021532:	e01e      	b.n	8021572 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8021534:	4b58      	ldr	r3, [pc, #352]	@ (8021698 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021536:	681b      	ldr	r3, [r3, #0]
 8021538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802153c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021540:	d106      	bne.n	8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8021542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021544:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021548:	d102      	bne.n	8021550 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 802154a:	4b55      	ldr	r3, [pc, #340]	@ (80216a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 802154c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802154e:	e010      	b.n	8021572 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8021550:	4b51      	ldr	r3, [pc, #324]	@ (8021698 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021552:	681b      	ldr	r3, [r3, #0]
 8021554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021558:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802155c:	d106      	bne.n	802156c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 802155e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021564:	d102      	bne.n	802156c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8021566:	4b4f      	ldr	r3, [pc, #316]	@ (80216a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8021568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802156a:	e002      	b.n	8021572 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 802156c:	2300      	movs	r3, #0
 802156e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8021570:	e235      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021572:	e234      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8021574:	4b4c      	ldr	r3, [pc, #304]	@ (80216a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8021576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021578:	e231      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 802157a:	2300      	movs	r3, #0
 802157c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802157e:	e22e      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8021580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021584:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8021588:	430b      	orrs	r3, r1
 802158a:	f040 808f 	bne.w	80216ac <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 802158e:	4b42      	ldr	r3, [pc, #264]	@ (8021698 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021592:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8021596:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8021598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802159a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 802159e:	d06b      	beq.n	8021678 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80215a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80215a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80215a6:	d874      	bhi.n	8021692 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80215a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80215aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80215ae:	d056      	beq.n	802165e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80215b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80215b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80215b6:	d86c      	bhi.n	8021692 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80215b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80215ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80215be:	d03b      	beq.n	8021638 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80215c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80215c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80215c6:	d864      	bhi.n	8021692 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80215c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80215ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80215ce:	d021      	beq.n	8021614 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80215d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80215d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80215d6:	d85c      	bhi.n	8021692 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80215d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80215da:	2b00      	cmp	r3, #0
 80215dc:	d004      	beq.n	80215e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80215de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80215e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80215e4:	d004      	beq.n	80215f0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80215e6:	e054      	b.n	8021692 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80215e8:	f7fe fa4c 	bl	801fa84 <HAL_RCC_GetPCLK1Freq>
 80215ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80215ee:	e1f6      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80215f0:	4b29      	ldr	r3, [pc, #164]	@ (8021698 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80215f2:	681b      	ldr	r3, [r3, #0]
 80215f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80215f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80215fc:	d107      	bne.n	802160e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80215fe:	f107 0318 	add.w	r3, r7, #24
 8021602:	4618      	mov	r0, r3
 8021604:	f000 fa0a 	bl	8021a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8021608:	69fb      	ldr	r3, [r7, #28]
 802160a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802160c:	e1e7      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802160e:	2300      	movs	r3, #0
 8021610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021612:	e1e4      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8021614:	4b20      	ldr	r3, [pc, #128]	@ (8021698 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021616:	681b      	ldr	r3, [r3, #0]
 8021618:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 802161c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021620:	d107      	bne.n	8021632 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021622:	f107 030c 	add.w	r3, r7, #12
 8021626:	4618      	mov	r0, r3
 8021628:	f000 fb4c 	bl	8021cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 802162c:	693b      	ldr	r3, [r7, #16]
 802162e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021630:	e1d5      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021632:	2300      	movs	r3, #0
 8021634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021636:	e1d2      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8021638:	4b17      	ldr	r3, [pc, #92]	@ (8021698 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 802163a:	681b      	ldr	r3, [r3, #0]
 802163c:	f003 0304 	and.w	r3, r3, #4
 8021640:	2b04      	cmp	r3, #4
 8021642:	d109      	bne.n	8021658 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021644:	4b14      	ldr	r3, [pc, #80]	@ (8021698 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021646:	681b      	ldr	r3, [r3, #0]
 8021648:	08db      	lsrs	r3, r3, #3
 802164a:	f003 0303 	and.w	r3, r3, #3
 802164e:	4a13      	ldr	r2, [pc, #76]	@ (802169c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8021650:	fa22 f303 	lsr.w	r3, r2, r3
 8021654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021656:	e1c2      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021658:	2300      	movs	r3, #0
 802165a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802165c:	e1bf      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 802165e:	4b0e      	ldr	r3, [pc, #56]	@ (8021698 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8021660:	681b      	ldr	r3, [r3, #0]
 8021662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802166a:	d102      	bne.n	8021672 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 802166c:	4b0c      	ldr	r3, [pc, #48]	@ (80216a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 802166e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021670:	e1b5      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021672:	2300      	movs	r3, #0
 8021674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021676:	e1b2      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8021678:	4b07      	ldr	r3, [pc, #28]	@ (8021698 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 802167a:	681b      	ldr	r3, [r3, #0]
 802167c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021684:	d102      	bne.n	802168c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8021686:	4b07      	ldr	r3, [pc, #28]	@ (80216a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8021688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802168a:	e1a8      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 802168c:	2300      	movs	r3, #0
 802168e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021690:	e1a5      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8021692:	2300      	movs	r3, #0
 8021694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021696:	e1a2      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021698:	58024400 	.word	0x58024400
 802169c:	03d09000 	.word	0x03d09000
 80216a0:	003d0900 	.word	0x003d0900
 80216a4:	017d7840 	.word	0x017d7840
 80216a8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80216ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80216b0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80216b4:	430b      	orrs	r3, r1
 80216b6:	d173      	bne.n	80217a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80216b8:	4b9c      	ldr	r3, [pc, #624]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80216ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80216bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80216c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80216c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80216c8:	d02f      	beq.n	802172a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80216ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80216d0:	d863      	bhi.n	802179a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80216d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	d004      	beq.n	80216e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80216d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80216da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80216de:	d012      	beq.n	8021706 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80216e0:	e05b      	b.n	802179a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80216e2:	4b92      	ldr	r3, [pc, #584]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80216e4:	681b      	ldr	r3, [r3, #0]
 80216e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80216ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80216ee:	d107      	bne.n	8021700 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80216f0:	f107 0318 	add.w	r3, r7, #24
 80216f4:	4618      	mov	r0, r3
 80216f6:	f000 f991 	bl	8021a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80216fa:	69bb      	ldr	r3, [r7, #24]
 80216fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80216fe:	e16e      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021700:	2300      	movs	r3, #0
 8021702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021704:	e16b      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8021706:	4b89      	ldr	r3, [pc, #548]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021708:	681b      	ldr	r3, [r3, #0]
 802170a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 802170e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021712:	d107      	bne.n	8021724 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021714:	f107 030c 	add.w	r3, r7, #12
 8021718:	4618      	mov	r0, r3
 802171a:	f000 fad3 	bl	8021cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 802171e:	697b      	ldr	r3, [r7, #20]
 8021720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021722:	e15c      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021724:	2300      	movs	r3, #0
 8021726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021728:	e159      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 802172a:	4b80      	ldr	r3, [pc, #512]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 802172c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802172e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8021732:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8021734:	4b7d      	ldr	r3, [pc, #500]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021736:	681b      	ldr	r3, [r3, #0]
 8021738:	f003 0304 	and.w	r3, r3, #4
 802173c:	2b04      	cmp	r3, #4
 802173e:	d10c      	bne.n	802175a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8021740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021742:	2b00      	cmp	r3, #0
 8021744:	d109      	bne.n	802175a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021746:	4b79      	ldr	r3, [pc, #484]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021748:	681b      	ldr	r3, [r3, #0]
 802174a:	08db      	lsrs	r3, r3, #3
 802174c:	f003 0303 	and.w	r3, r3, #3
 8021750:	4a77      	ldr	r2, [pc, #476]	@ (8021930 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8021752:	fa22 f303 	lsr.w	r3, r2, r3
 8021756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021758:	e01e      	b.n	8021798 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 802175a:	4b74      	ldr	r3, [pc, #464]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 802175c:	681b      	ldr	r3, [r3, #0]
 802175e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021766:	d106      	bne.n	8021776 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8021768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802176a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802176e:	d102      	bne.n	8021776 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8021770:	4b70      	ldr	r3, [pc, #448]	@ (8021934 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8021772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021774:	e010      	b.n	8021798 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8021776:	4b6d      	ldr	r3, [pc, #436]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021778:	681b      	ldr	r3, [r3, #0]
 802177a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802177e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021782:	d106      	bne.n	8021792 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8021784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802178a:	d102      	bne.n	8021792 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 802178c:	4b6a      	ldr	r3, [pc, #424]	@ (8021938 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 802178e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021790:	e002      	b.n	8021798 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8021792:	2300      	movs	r3, #0
 8021794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8021796:	e122      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8021798:	e121      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 802179a:	2300      	movs	r3, #0
 802179c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802179e:	e11e      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80217a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80217a4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80217a8:	430b      	orrs	r3, r1
 80217aa:	d133      	bne.n	8021814 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80217ac:	4b5f      	ldr	r3, [pc, #380]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80217ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80217b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80217b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80217b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217b8:	2b00      	cmp	r3, #0
 80217ba:	d004      	beq.n	80217c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80217bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80217c2:	d012      	beq.n	80217ea <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80217c4:	e023      	b.n	802180e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80217c6:	4b59      	ldr	r3, [pc, #356]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80217c8:	681b      	ldr	r3, [r3, #0]
 80217ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80217ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80217d2:	d107      	bne.n	80217e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80217d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80217d8:	4618      	mov	r0, r3
 80217da:	f000 fbc7 	bl	8021f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80217de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80217e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80217e2:	e0fc      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80217e4:	2300      	movs	r3, #0
 80217e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80217e8:	e0f9      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80217ea:	4b50      	ldr	r3, [pc, #320]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80217ec:	681b      	ldr	r3, [r3, #0]
 80217ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80217f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80217f6:	d107      	bne.n	8021808 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80217f8:	f107 0318 	add.w	r3, r7, #24
 80217fc:	4618      	mov	r0, r3
 80217fe:	f000 f90d 	bl	8021a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8021802:	6a3b      	ldr	r3, [r7, #32]
 8021804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021806:	e0ea      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021808:	2300      	movs	r3, #0
 802180a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802180c:	e0e7      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 802180e:	2300      	movs	r3, #0
 8021810:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021812:	e0e4      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8021814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021818:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 802181c:	430b      	orrs	r3, r1
 802181e:	f040 808d 	bne.w	802193c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8021822:	4b42      	ldr	r3, [pc, #264]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021826:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 802182a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 802182c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802182e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8021832:	d06b      	beq.n	802190c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8021834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021836:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 802183a:	d874      	bhi.n	8021926 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 802183c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802183e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8021842:	d056      	beq.n	80218f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8021844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802184a:	d86c      	bhi.n	8021926 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 802184c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802184e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8021852:	d03b      	beq.n	80218cc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8021854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021856:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 802185a:	d864      	bhi.n	8021926 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 802185c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802185e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021862:	d021      	beq.n	80218a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8021864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802186a:	d85c      	bhi.n	8021926 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 802186c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802186e:	2b00      	cmp	r3, #0
 8021870:	d004      	beq.n	802187c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8021872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021878:	d004      	beq.n	8021884 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 802187a:	e054      	b.n	8021926 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 802187c:	f000 f8b8 	bl	80219f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8021880:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021882:	e0ac      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8021884:	4b29      	ldr	r3, [pc, #164]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8021886:	681b      	ldr	r3, [r3, #0]
 8021888:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 802188c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021890:	d107      	bne.n	80218a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021892:	f107 0318 	add.w	r3, r7, #24
 8021896:	4618      	mov	r0, r3
 8021898:	f000 f8c0 	bl	8021a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 802189c:	69fb      	ldr	r3, [r7, #28]
 802189e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80218a0:	e09d      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80218a2:	2300      	movs	r3, #0
 80218a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80218a6:	e09a      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80218a8:	4b20      	ldr	r3, [pc, #128]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80218aa:	681b      	ldr	r3, [r3, #0]
 80218ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80218b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80218b4:	d107      	bne.n	80218c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80218b6:	f107 030c 	add.w	r3, r7, #12
 80218ba:	4618      	mov	r0, r3
 80218bc:	f000 fa02 	bl	8021cc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80218c0:	693b      	ldr	r3, [r7, #16]
 80218c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80218c4:	e08b      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80218c6:	2300      	movs	r3, #0
 80218c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80218ca:	e088      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80218cc:	4b17      	ldr	r3, [pc, #92]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80218ce:	681b      	ldr	r3, [r3, #0]
 80218d0:	f003 0304 	and.w	r3, r3, #4
 80218d4:	2b04      	cmp	r3, #4
 80218d6:	d109      	bne.n	80218ec <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80218d8:	4b14      	ldr	r3, [pc, #80]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80218da:	681b      	ldr	r3, [r3, #0]
 80218dc:	08db      	lsrs	r3, r3, #3
 80218de:	f003 0303 	and.w	r3, r3, #3
 80218e2:	4a13      	ldr	r2, [pc, #76]	@ (8021930 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80218e4:	fa22 f303 	lsr.w	r3, r2, r3
 80218e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80218ea:	e078      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80218ec:	2300      	movs	r3, #0
 80218ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80218f0:	e075      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80218f2:	4b0e      	ldr	r3, [pc, #56]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80218f4:	681b      	ldr	r3, [r3, #0]
 80218f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80218fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80218fe:	d102      	bne.n	8021906 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8021900:	4b0c      	ldr	r3, [pc, #48]	@ (8021934 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8021902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021904:	e06b      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021906:	2300      	movs	r3, #0
 8021908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802190a:	e068      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 802190c:	4b07      	ldr	r3, [pc, #28]	@ (802192c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 802190e:	681b      	ldr	r3, [r3, #0]
 8021910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021918:	d102      	bne.n	8021920 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 802191a:	4b07      	ldr	r3, [pc, #28]	@ (8021938 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 802191c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 802191e:	e05e      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021920:	2300      	movs	r3, #0
 8021922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021924:	e05b      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8021926:	2300      	movs	r3, #0
 8021928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802192a:	e058      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 802192c:	58024400 	.word	0x58024400
 8021930:	03d09000 	.word	0x03d09000
 8021934:	003d0900 	.word	0x003d0900
 8021938:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 802193c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021940:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8021944:	430b      	orrs	r3, r1
 8021946:	d148      	bne.n	80219da <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8021948:	4b27      	ldr	r3, [pc, #156]	@ (80219e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 802194a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802194c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8021950:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8021952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021958:	d02a      	beq.n	80219b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 802195a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802195c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8021960:	d838      	bhi.n	80219d4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8021962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021964:	2b00      	cmp	r3, #0
 8021966:	d004      	beq.n	8021972 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8021968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802196a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802196e:	d00d      	beq.n	802198c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8021970:	e030      	b.n	80219d4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8021972:	4b1d      	ldr	r3, [pc, #116]	@ (80219e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8021974:	681b      	ldr	r3, [r3, #0]
 8021976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802197a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802197e:	d102      	bne.n	8021986 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8021980:	4b1a      	ldr	r3, [pc, #104]	@ (80219ec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8021982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8021984:	e02b      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8021986:	2300      	movs	r3, #0
 8021988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802198a:	e028      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 802198c:	4b16      	ldr	r3, [pc, #88]	@ (80219e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 802198e:	681b      	ldr	r3, [r3, #0]
 8021990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021994:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8021998:	d107      	bne.n	80219aa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 802199a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802199e:	4618      	mov	r0, r3
 80219a0:	f000 fae4 	bl	8021f6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80219a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80219a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80219a8:	e019      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80219aa:	2300      	movs	r3, #0
 80219ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80219ae:	e016      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80219b0:	4b0d      	ldr	r3, [pc, #52]	@ (80219e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80219b2:	681b      	ldr	r3, [r3, #0]
 80219b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80219b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80219bc:	d107      	bne.n	80219ce <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80219be:	f107 0318 	add.w	r3, r7, #24
 80219c2:	4618      	mov	r0, r3
 80219c4:	f000 f82a 	bl	8021a1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80219c8:	69fb      	ldr	r3, [r7, #28]
 80219ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80219cc:	e007      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80219ce:	2300      	movs	r3, #0
 80219d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80219d2:	e004      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80219d4:	2300      	movs	r3, #0
 80219d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80219d8:	e001      	b.n	80219de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80219da:	2300      	movs	r3, #0
 80219dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80219de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80219e0:	4618      	mov	r0, r3
 80219e2:	3740      	adds	r7, #64	@ 0x40
 80219e4:	46bd      	mov	sp, r7
 80219e6:	bd80      	pop	{r7, pc}
 80219e8:	58024400 	.word	0x58024400
 80219ec:	017d7840 	.word	0x017d7840

080219f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80219f0:	b580      	push	{r7, lr}
 80219f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80219f4:	f7fe f816 	bl	801fa24 <HAL_RCC_GetHCLKFreq>
 80219f8:	4602      	mov	r2, r0
 80219fa:	4b06      	ldr	r3, [pc, #24]	@ (8021a14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80219fc:	6a1b      	ldr	r3, [r3, #32]
 80219fe:	091b      	lsrs	r3, r3, #4
 8021a00:	f003 0307 	and.w	r3, r3, #7
 8021a04:	4904      	ldr	r1, [pc, #16]	@ (8021a18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8021a06:	5ccb      	ldrb	r3, [r1, r3]
 8021a08:	f003 031f 	and.w	r3, r3, #31
 8021a0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8021a10:	4618      	mov	r0, r3
 8021a12:	bd80      	pop	{r7, pc}
 8021a14:	58024400 	.word	0x58024400
 8021a18:	0802b4b0 	.word	0x0802b4b0

08021a1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8021a1c:	b480      	push	{r7}
 8021a1e:	b089      	sub	sp, #36	@ 0x24
 8021a20:	af00      	add	r7, sp, #0
 8021a22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8021a24:	4ba1      	ldr	r3, [pc, #644]	@ (8021cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021a28:	f003 0303 	and.w	r3, r3, #3
 8021a2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8021a2e:	4b9f      	ldr	r3, [pc, #636]	@ (8021cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021a32:	0b1b      	lsrs	r3, r3, #12
 8021a34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021a38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8021a3a:	4b9c      	ldr	r3, [pc, #624]	@ (8021cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021a3e:	091b      	lsrs	r3, r3, #4
 8021a40:	f003 0301 	and.w	r3, r3, #1
 8021a44:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8021a46:	4b99      	ldr	r3, [pc, #612]	@ (8021cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021a4a:	08db      	lsrs	r3, r3, #3
 8021a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021a50:	693a      	ldr	r2, [r7, #16]
 8021a52:	fb02 f303 	mul.w	r3, r2, r3
 8021a56:	ee07 3a90 	vmov	s15, r3
 8021a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021a5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8021a62:	697b      	ldr	r3, [r7, #20]
 8021a64:	2b00      	cmp	r3, #0
 8021a66:	f000 8111 	beq.w	8021c8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8021a6a:	69bb      	ldr	r3, [r7, #24]
 8021a6c:	2b02      	cmp	r3, #2
 8021a6e:	f000 8083 	beq.w	8021b78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8021a72:	69bb      	ldr	r3, [r7, #24]
 8021a74:	2b02      	cmp	r3, #2
 8021a76:	f200 80a1 	bhi.w	8021bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8021a7a:	69bb      	ldr	r3, [r7, #24]
 8021a7c:	2b00      	cmp	r3, #0
 8021a7e:	d003      	beq.n	8021a88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8021a80:	69bb      	ldr	r3, [r7, #24]
 8021a82:	2b01      	cmp	r3, #1
 8021a84:	d056      	beq.n	8021b34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8021a86:	e099      	b.n	8021bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021a88:	4b88      	ldr	r3, [pc, #544]	@ (8021cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021a8a:	681b      	ldr	r3, [r3, #0]
 8021a8c:	f003 0320 	and.w	r3, r3, #32
 8021a90:	2b00      	cmp	r3, #0
 8021a92:	d02d      	beq.n	8021af0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021a94:	4b85      	ldr	r3, [pc, #532]	@ (8021cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021a96:	681b      	ldr	r3, [r3, #0]
 8021a98:	08db      	lsrs	r3, r3, #3
 8021a9a:	f003 0303 	and.w	r3, r3, #3
 8021a9e:	4a84      	ldr	r2, [pc, #528]	@ (8021cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8021aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8021aa4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8021aa6:	68bb      	ldr	r3, [r7, #8]
 8021aa8:	ee07 3a90 	vmov	s15, r3
 8021aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021ab0:	697b      	ldr	r3, [r7, #20]
 8021ab2:	ee07 3a90 	vmov	s15, r3
 8021ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021abe:	4b7b      	ldr	r3, [pc, #492]	@ (8021cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021ac6:	ee07 3a90 	vmov	s15, r3
 8021aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8021ad2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8021cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8021ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021aea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8021aee:	e087      	b.n	8021c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8021af0:	697b      	ldr	r3, [r7, #20]
 8021af2:	ee07 3a90 	vmov	s15, r3
 8021af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021afa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8021cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8021afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021b02:	4b6a      	ldr	r3, [pc, #424]	@ (8021cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021b0a:	ee07 3a90 	vmov	s15, r3
 8021b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8021b16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8021cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8021b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021b32:	e065      	b.n	8021c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8021b34:	697b      	ldr	r3, [r7, #20]
 8021b36:	ee07 3a90 	vmov	s15, r3
 8021b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021b3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8021cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8021b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021b46:	4b59      	ldr	r3, [pc, #356]	@ (8021cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021b4e:	ee07 3a90 	vmov	s15, r3
 8021b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8021b5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8021cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8021b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021b76:	e043      	b.n	8021c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8021b78:	697b      	ldr	r3, [r7, #20]
 8021b7a:	ee07 3a90 	vmov	s15, r3
 8021b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021b82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8021cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8021b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021b8a:	4b48      	ldr	r3, [pc, #288]	@ (8021cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021b92:	ee07 3a90 	vmov	s15, r3
 8021b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8021b9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8021cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8021ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021bba:	e021      	b.n	8021c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8021bbc:	697b      	ldr	r3, [r7, #20]
 8021bbe:	ee07 3a90 	vmov	s15, r3
 8021bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021bc6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8021cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8021bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021bce:	4b37      	ldr	r3, [pc, #220]	@ (8021cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021bd6:	ee07 3a90 	vmov	s15, r3
 8021bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8021be2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8021cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8021be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021bfe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8021c00:	4b2a      	ldr	r3, [pc, #168]	@ (8021cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021c04:	0a5b      	lsrs	r3, r3, #9
 8021c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021c0a:	ee07 3a90 	vmov	s15, r3
 8021c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021c12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8021c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021c26:	ee17 2a90 	vmov	r2, s15
 8021c2a:	687b      	ldr	r3, [r7, #4]
 8021c2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8021c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8021cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021c32:	0c1b      	lsrs	r3, r3, #16
 8021c34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021c38:	ee07 3a90 	vmov	s15, r3
 8021c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021c40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021c44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021c48:	edd7 6a07 	vldr	s13, [r7, #28]
 8021c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021c54:	ee17 2a90 	vmov	r2, s15
 8021c58:	687b      	ldr	r3, [r7, #4]
 8021c5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8021c5c:	4b13      	ldr	r3, [pc, #76]	@ (8021cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8021c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021c60:	0e1b      	lsrs	r3, r3, #24
 8021c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021c66:	ee07 3a90 	vmov	s15, r3
 8021c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021c6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8021c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021c82:	ee17 2a90 	vmov	r2, s15
 8021c86:	687b      	ldr	r3, [r7, #4]
 8021c88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8021c8a:	e008      	b.n	8021c9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8021c8c:	687b      	ldr	r3, [r7, #4]
 8021c8e:	2200      	movs	r2, #0
 8021c90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8021c92:	687b      	ldr	r3, [r7, #4]
 8021c94:	2200      	movs	r2, #0
 8021c96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8021c98:	687b      	ldr	r3, [r7, #4]
 8021c9a:	2200      	movs	r2, #0
 8021c9c:	609a      	str	r2, [r3, #8]
}
 8021c9e:	bf00      	nop
 8021ca0:	3724      	adds	r7, #36	@ 0x24
 8021ca2:	46bd      	mov	sp, r7
 8021ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ca8:	4770      	bx	lr
 8021caa:	bf00      	nop
 8021cac:	58024400 	.word	0x58024400
 8021cb0:	03d09000 	.word	0x03d09000
 8021cb4:	46000000 	.word	0x46000000
 8021cb8:	4c742400 	.word	0x4c742400
 8021cbc:	4a742400 	.word	0x4a742400
 8021cc0:	4bbebc20 	.word	0x4bbebc20

08021cc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8021cc4:	b480      	push	{r7}
 8021cc6:	b089      	sub	sp, #36	@ 0x24
 8021cc8:	af00      	add	r7, sp, #0
 8021cca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8021ccc:	4ba1      	ldr	r3, [pc, #644]	@ (8021f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021cd0:	f003 0303 	and.w	r3, r3, #3
 8021cd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8021cd6:	4b9f      	ldr	r3, [pc, #636]	@ (8021f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021cda:	0d1b      	lsrs	r3, r3, #20
 8021cdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021ce0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8021ce2:	4b9c      	ldr	r3, [pc, #624]	@ (8021f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021ce6:	0a1b      	lsrs	r3, r3, #8
 8021ce8:	f003 0301 	and.w	r3, r3, #1
 8021cec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8021cee:	4b99      	ldr	r3, [pc, #612]	@ (8021f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021cf2:	08db      	lsrs	r3, r3, #3
 8021cf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021cf8:	693a      	ldr	r2, [r7, #16]
 8021cfa:	fb02 f303 	mul.w	r3, r2, r3
 8021cfe:	ee07 3a90 	vmov	s15, r3
 8021d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021d06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8021d0a:	697b      	ldr	r3, [r7, #20]
 8021d0c:	2b00      	cmp	r3, #0
 8021d0e:	f000 8111 	beq.w	8021f34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8021d12:	69bb      	ldr	r3, [r7, #24]
 8021d14:	2b02      	cmp	r3, #2
 8021d16:	f000 8083 	beq.w	8021e20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8021d1a:	69bb      	ldr	r3, [r7, #24]
 8021d1c:	2b02      	cmp	r3, #2
 8021d1e:	f200 80a1 	bhi.w	8021e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8021d22:	69bb      	ldr	r3, [r7, #24]
 8021d24:	2b00      	cmp	r3, #0
 8021d26:	d003      	beq.n	8021d30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8021d28:	69bb      	ldr	r3, [r7, #24]
 8021d2a:	2b01      	cmp	r3, #1
 8021d2c:	d056      	beq.n	8021ddc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8021d2e:	e099      	b.n	8021e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021d30:	4b88      	ldr	r3, [pc, #544]	@ (8021f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021d32:	681b      	ldr	r3, [r3, #0]
 8021d34:	f003 0320 	and.w	r3, r3, #32
 8021d38:	2b00      	cmp	r3, #0
 8021d3a:	d02d      	beq.n	8021d98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021d3c:	4b85      	ldr	r3, [pc, #532]	@ (8021f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021d3e:	681b      	ldr	r3, [r3, #0]
 8021d40:	08db      	lsrs	r3, r3, #3
 8021d42:	f003 0303 	and.w	r3, r3, #3
 8021d46:	4a84      	ldr	r2, [pc, #528]	@ (8021f58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8021d48:	fa22 f303 	lsr.w	r3, r2, r3
 8021d4c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021d4e:	68bb      	ldr	r3, [r7, #8]
 8021d50:	ee07 3a90 	vmov	s15, r3
 8021d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021d58:	697b      	ldr	r3, [r7, #20]
 8021d5a:	ee07 3a90 	vmov	s15, r3
 8021d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021d66:	4b7b      	ldr	r3, [pc, #492]	@ (8021f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021d6e:	ee07 3a90 	vmov	s15, r3
 8021d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8021d7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8021f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021d92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8021d96:	e087      	b.n	8021ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021d98:	697b      	ldr	r3, [r7, #20]
 8021d9a:	ee07 3a90 	vmov	s15, r3
 8021d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021da2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8021f60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8021da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021daa:	4b6a      	ldr	r3, [pc, #424]	@ (8021f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021db2:	ee07 3a90 	vmov	s15, r3
 8021db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8021dbe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8021f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021dda:	e065      	b.n	8021ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021ddc:	697b      	ldr	r3, [r7, #20]
 8021dde:	ee07 3a90 	vmov	s15, r3
 8021de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021de6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8021f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8021dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021dee:	4b59      	ldr	r3, [pc, #356]	@ (8021f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021df6:	ee07 3a90 	vmov	s15, r3
 8021dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8021e02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8021f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021e0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021e1e:	e043      	b.n	8021ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021e20:	697b      	ldr	r3, [r7, #20]
 8021e22:	ee07 3a90 	vmov	s15, r3
 8021e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021e2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8021f68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8021e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021e32:	4b48      	ldr	r3, [pc, #288]	@ (8021f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021e3a:	ee07 3a90 	vmov	s15, r3
 8021e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8021e46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8021f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021e62:	e021      	b.n	8021ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8021e64:	697b      	ldr	r3, [r7, #20]
 8021e66:	ee07 3a90 	vmov	s15, r3
 8021e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021e6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8021f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8021e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8021e76:	4b37      	ldr	r3, [pc, #220]	@ (8021f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8021e7e:	ee07 3a90 	vmov	s15, r3
 8021e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8021e8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8021f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8021e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8021e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8021e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8021ea6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8021ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8021f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021eac:	0a5b      	lsrs	r3, r3, #9
 8021eae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021eb2:	ee07 3a90 	vmov	s15, r3
 8021eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021eba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021ebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8021ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021ece:	ee17 2a90 	vmov	r2, s15
 8021ed2:	687b      	ldr	r3, [r7, #4]
 8021ed4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8021ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8021f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021eda:	0c1b      	lsrs	r3, r3, #16
 8021edc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021ee0:	ee07 3a90 	vmov	s15, r3
 8021ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021ee8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021eec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021ef0:	edd7 6a07 	vldr	s13, [r7, #28]
 8021ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021efc:	ee17 2a90 	vmov	r2, s15
 8021f00:	687b      	ldr	r3, [r7, #4]
 8021f02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8021f04:	4b13      	ldr	r3, [pc, #76]	@ (8021f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8021f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021f08:	0e1b      	lsrs	r3, r3, #24
 8021f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021f0e:	ee07 3a90 	vmov	s15, r3
 8021f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021f16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8021f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8021f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021f2a:	ee17 2a90 	vmov	r2, s15
 8021f2e:	687b      	ldr	r3, [r7, #4]
 8021f30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8021f32:	e008      	b.n	8021f46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8021f34:	687b      	ldr	r3, [r7, #4]
 8021f36:	2200      	movs	r2, #0
 8021f38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	2200      	movs	r2, #0
 8021f3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8021f40:	687b      	ldr	r3, [r7, #4]
 8021f42:	2200      	movs	r2, #0
 8021f44:	609a      	str	r2, [r3, #8]
}
 8021f46:	bf00      	nop
 8021f48:	3724      	adds	r7, #36	@ 0x24
 8021f4a:	46bd      	mov	sp, r7
 8021f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f50:	4770      	bx	lr
 8021f52:	bf00      	nop
 8021f54:	58024400 	.word	0x58024400
 8021f58:	03d09000 	.word	0x03d09000
 8021f5c:	46000000 	.word	0x46000000
 8021f60:	4c742400 	.word	0x4c742400
 8021f64:	4a742400 	.word	0x4a742400
 8021f68:	4bbebc20 	.word	0x4bbebc20

08021f6c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8021f6c:	b480      	push	{r7}
 8021f6e:	b089      	sub	sp, #36	@ 0x24
 8021f70:	af00      	add	r7, sp, #0
 8021f72:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8021f74:	4ba0      	ldr	r3, [pc, #640]	@ (80221f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f78:	f003 0303 	and.w	r3, r3, #3
 8021f7c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8021f7e:	4b9e      	ldr	r3, [pc, #632]	@ (80221f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f82:	091b      	lsrs	r3, r3, #4
 8021f84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021f88:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8021f8a:	4b9b      	ldr	r3, [pc, #620]	@ (80221f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021f8e:	f003 0301 	and.w	r3, r3, #1
 8021f92:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8021f94:	4b98      	ldr	r3, [pc, #608]	@ (80221f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021f98:	08db      	lsrs	r3, r3, #3
 8021f9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021f9e:	693a      	ldr	r2, [r7, #16]
 8021fa0:	fb02 f303 	mul.w	r3, r2, r3
 8021fa4:	ee07 3a90 	vmov	s15, r3
 8021fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021fac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8021fb0:	697b      	ldr	r3, [r7, #20]
 8021fb2:	2b00      	cmp	r3, #0
 8021fb4:	f000 8111 	beq.w	80221da <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8021fb8:	69bb      	ldr	r3, [r7, #24]
 8021fba:	2b02      	cmp	r3, #2
 8021fbc:	f000 8083 	beq.w	80220c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8021fc0:	69bb      	ldr	r3, [r7, #24]
 8021fc2:	2b02      	cmp	r3, #2
 8021fc4:	f200 80a1 	bhi.w	802210a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8021fc8:	69bb      	ldr	r3, [r7, #24]
 8021fca:	2b00      	cmp	r3, #0
 8021fcc:	d003      	beq.n	8021fd6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8021fce:	69bb      	ldr	r3, [r7, #24]
 8021fd0:	2b01      	cmp	r3, #1
 8021fd2:	d056      	beq.n	8022082 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8021fd4:	e099      	b.n	802210a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021fd6:	4b88      	ldr	r3, [pc, #544]	@ (80221f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021fd8:	681b      	ldr	r3, [r3, #0]
 8021fda:	f003 0320 	and.w	r3, r3, #32
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d02d      	beq.n	802203e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8021fe2:	4b85      	ldr	r3, [pc, #532]	@ (80221f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8021fe4:	681b      	ldr	r3, [r3, #0]
 8021fe6:	08db      	lsrs	r3, r3, #3
 8021fe8:	f003 0303 	and.w	r3, r3, #3
 8021fec:	4a83      	ldr	r2, [pc, #524]	@ (80221fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8021fee:	fa22 f303 	lsr.w	r3, r2, r3
 8021ff2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8021ff4:	68bb      	ldr	r3, [r7, #8]
 8021ff6:	ee07 3a90 	vmov	s15, r3
 8021ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8021ffe:	697b      	ldr	r3, [r7, #20]
 8022000:	ee07 3a90 	vmov	s15, r3
 8022004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022008:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802200c:	4b7a      	ldr	r3, [pc, #488]	@ (80221f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 802200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022014:	ee07 3a90 	vmov	s15, r3
 8022018:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802201c:	ed97 6a03 	vldr	s12, [r7, #12]
 8022020:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8022200 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8022024:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022028:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802202c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022030:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022038:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 802203c:	e087      	b.n	802214e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802203e:	697b      	ldr	r3, [r7, #20]
 8022040:	ee07 3a90 	vmov	s15, r3
 8022044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022048:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8022204 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 802204c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022050:	4b69      	ldr	r3, [pc, #420]	@ (80221f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8022052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022058:	ee07 3a90 	vmov	s15, r3
 802205c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022060:	ed97 6a03 	vldr	s12, [r7, #12]
 8022064:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8022200 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8022068:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802206c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022070:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022074:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022078:	ee67 7a27 	vmul.f32	s15, s14, s15
 802207c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8022080:	e065      	b.n	802214e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8022082:	697b      	ldr	r3, [r7, #20]
 8022084:	ee07 3a90 	vmov	s15, r3
 8022088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802208c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8022208 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8022090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022094:	4b58      	ldr	r3, [pc, #352]	@ (80221f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8022096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802209c:	ee07 3a90 	vmov	s15, r3
 80220a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80220a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80220a8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8022200 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80220ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80220b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80220b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80220b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80220bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80220c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80220c4:	e043      	b.n	802214e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80220c6:	697b      	ldr	r3, [r7, #20]
 80220c8:	ee07 3a90 	vmov	s15, r3
 80220cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80220d0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 802220c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80220d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80220d8:	4b47      	ldr	r3, [pc, #284]	@ (80221f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80220da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80220dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80220e0:	ee07 3a90 	vmov	s15, r3
 80220e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80220e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80220ec:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8022200 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80220f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80220f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80220f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80220fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022104:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8022108:	e021      	b.n	802214e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 802210a:	697b      	ldr	r3, [r7, #20]
 802210c:	ee07 3a90 	vmov	s15, r3
 8022110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022114:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8022204 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8022118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802211c:	4b36      	ldr	r3, [pc, #216]	@ (80221f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 802211e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022124:	ee07 3a90 	vmov	s15, r3
 8022128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802212c:	ed97 6a03 	vldr	s12, [r7, #12]
 8022130:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8022200 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8022134:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802213c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022148:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802214c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 802214e:	4b2a      	ldr	r3, [pc, #168]	@ (80221f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8022150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022152:	0a5b      	lsrs	r3, r3, #9
 8022154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022158:	ee07 3a90 	vmov	s15, r3
 802215c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022160:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022164:	ee37 7a87 	vadd.f32	s14, s15, s14
 8022168:	edd7 6a07 	vldr	s13, [r7, #28]
 802216c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022174:	ee17 2a90 	vmov	r2, s15
 8022178:	687b      	ldr	r3, [r7, #4]
 802217a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 802217c:	4b1e      	ldr	r3, [pc, #120]	@ (80221f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 802217e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022180:	0c1b      	lsrs	r3, r3, #16
 8022182:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022186:	ee07 3a90 	vmov	s15, r3
 802218a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802218e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022192:	ee37 7a87 	vadd.f32	s14, s15, s14
 8022196:	edd7 6a07 	vldr	s13, [r7, #28]
 802219a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802219e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80221a2:	ee17 2a90 	vmov	r2, s15
 80221a6:	687b      	ldr	r3, [r7, #4]
 80221a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80221aa:	4b13      	ldr	r3, [pc, #76]	@ (80221f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80221ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80221ae:	0e1b      	lsrs	r3, r3, #24
 80221b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80221b4:	ee07 3a90 	vmov	s15, r3
 80221b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80221bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80221c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80221c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80221c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80221cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80221d0:	ee17 2a90 	vmov	r2, s15
 80221d4:	687b      	ldr	r3, [r7, #4]
 80221d6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80221d8:	e008      	b.n	80221ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80221da:	687b      	ldr	r3, [r7, #4]
 80221dc:	2200      	movs	r2, #0
 80221de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80221e0:	687b      	ldr	r3, [r7, #4]
 80221e2:	2200      	movs	r2, #0
 80221e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80221e6:	687b      	ldr	r3, [r7, #4]
 80221e8:	2200      	movs	r2, #0
 80221ea:	609a      	str	r2, [r3, #8]
}
 80221ec:	bf00      	nop
 80221ee:	3724      	adds	r7, #36	@ 0x24
 80221f0:	46bd      	mov	sp, r7
 80221f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221f6:	4770      	bx	lr
 80221f8:	58024400 	.word	0x58024400
 80221fc:	03d09000 	.word	0x03d09000
 8022200:	46000000 	.word	0x46000000
 8022204:	4c742400 	.word	0x4c742400
 8022208:	4a742400 	.word	0x4a742400
 802220c:	4bbebc20 	.word	0x4bbebc20

08022210 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8022210:	b580      	push	{r7, lr}
 8022212:	b084      	sub	sp, #16
 8022214:	af00      	add	r7, sp, #0
 8022216:	6078      	str	r0, [r7, #4]
 8022218:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802221a:	2300      	movs	r3, #0
 802221c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 802221e:	4b53      	ldr	r3, [pc, #332]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 8022220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022222:	f003 0303 	and.w	r3, r3, #3
 8022226:	2b03      	cmp	r3, #3
 8022228:	d101      	bne.n	802222e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 802222a:	2301      	movs	r3, #1
 802222c:	e099      	b.n	8022362 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 802222e:	4b4f      	ldr	r3, [pc, #316]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 8022230:	681b      	ldr	r3, [r3, #0]
 8022232:	4a4e      	ldr	r2, [pc, #312]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 8022234:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8022238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802223a:	f7f9 fd2f 	bl	801bc9c <HAL_GetTick>
 802223e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8022240:	e008      	b.n	8022254 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8022242:	f7f9 fd2b 	bl	801bc9c <HAL_GetTick>
 8022246:	4602      	mov	r2, r0
 8022248:	68bb      	ldr	r3, [r7, #8]
 802224a:	1ad3      	subs	r3, r2, r3
 802224c:	2b02      	cmp	r3, #2
 802224e:	d901      	bls.n	8022254 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8022250:	2303      	movs	r3, #3
 8022252:	e086      	b.n	8022362 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8022254:	4b45      	ldr	r3, [pc, #276]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 8022256:	681b      	ldr	r3, [r3, #0]
 8022258:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 802225c:	2b00      	cmp	r3, #0
 802225e:	d1f0      	bne.n	8022242 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8022260:	4b42      	ldr	r3, [pc, #264]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 8022262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022264:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8022268:	687b      	ldr	r3, [r7, #4]
 802226a:	681b      	ldr	r3, [r3, #0]
 802226c:	031b      	lsls	r3, r3, #12
 802226e:	493f      	ldr	r1, [pc, #252]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 8022270:	4313      	orrs	r3, r2
 8022272:	628b      	str	r3, [r1, #40]	@ 0x28
 8022274:	687b      	ldr	r3, [r7, #4]
 8022276:	685b      	ldr	r3, [r3, #4]
 8022278:	3b01      	subs	r3, #1
 802227a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 802227e:	687b      	ldr	r3, [r7, #4]
 8022280:	689b      	ldr	r3, [r3, #8]
 8022282:	3b01      	subs	r3, #1
 8022284:	025b      	lsls	r3, r3, #9
 8022286:	b29b      	uxth	r3, r3
 8022288:	431a      	orrs	r2, r3
 802228a:	687b      	ldr	r3, [r7, #4]
 802228c:	68db      	ldr	r3, [r3, #12]
 802228e:	3b01      	subs	r3, #1
 8022290:	041b      	lsls	r3, r3, #16
 8022292:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8022296:	431a      	orrs	r2, r3
 8022298:	687b      	ldr	r3, [r7, #4]
 802229a:	691b      	ldr	r3, [r3, #16]
 802229c:	3b01      	subs	r3, #1
 802229e:	061b      	lsls	r3, r3, #24
 80222a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80222a4:	4931      	ldr	r1, [pc, #196]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 80222a6:	4313      	orrs	r3, r2
 80222a8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80222aa:	4b30      	ldr	r3, [pc, #192]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 80222ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80222b2:	687b      	ldr	r3, [r7, #4]
 80222b4:	695b      	ldr	r3, [r3, #20]
 80222b6:	492d      	ldr	r1, [pc, #180]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 80222b8:	4313      	orrs	r3, r2
 80222ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80222bc:	4b2b      	ldr	r3, [pc, #172]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 80222be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222c0:	f023 0220 	bic.w	r2, r3, #32
 80222c4:	687b      	ldr	r3, [r7, #4]
 80222c6:	699b      	ldr	r3, [r3, #24]
 80222c8:	4928      	ldr	r1, [pc, #160]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 80222ca:	4313      	orrs	r3, r2
 80222cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80222ce:	4b27      	ldr	r3, [pc, #156]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 80222d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222d2:	4a26      	ldr	r2, [pc, #152]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 80222d4:	f023 0310 	bic.w	r3, r3, #16
 80222d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80222da:	4b24      	ldr	r3, [pc, #144]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 80222dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80222de:	4b24      	ldr	r3, [pc, #144]	@ (8022370 <RCCEx_PLL2_Config+0x160>)
 80222e0:	4013      	ands	r3, r2
 80222e2:	687a      	ldr	r2, [r7, #4]
 80222e4:	69d2      	ldr	r2, [r2, #28]
 80222e6:	00d2      	lsls	r2, r2, #3
 80222e8:	4920      	ldr	r1, [pc, #128]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 80222ea:	4313      	orrs	r3, r2
 80222ec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80222ee:	4b1f      	ldr	r3, [pc, #124]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 80222f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222f2:	4a1e      	ldr	r2, [pc, #120]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 80222f4:	f043 0310 	orr.w	r3, r3, #16
 80222f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80222fa:	683b      	ldr	r3, [r7, #0]
 80222fc:	2b00      	cmp	r3, #0
 80222fe:	d106      	bne.n	802230e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8022300:	4b1a      	ldr	r3, [pc, #104]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 8022302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022304:	4a19      	ldr	r2, [pc, #100]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 8022306:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 802230a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 802230c:	e00f      	b.n	802232e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 802230e:	683b      	ldr	r3, [r7, #0]
 8022310:	2b01      	cmp	r3, #1
 8022312:	d106      	bne.n	8022322 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8022314:	4b15      	ldr	r3, [pc, #84]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 8022316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022318:	4a14      	ldr	r2, [pc, #80]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 802231a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802231e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8022320:	e005      	b.n	802232e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8022322:	4b12      	ldr	r3, [pc, #72]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 8022324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022326:	4a11      	ldr	r2, [pc, #68]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 8022328:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 802232c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 802232e:	4b0f      	ldr	r3, [pc, #60]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 8022330:	681b      	ldr	r3, [r3, #0]
 8022332:	4a0e      	ldr	r2, [pc, #56]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 8022334:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8022338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802233a:	f7f9 fcaf 	bl	801bc9c <HAL_GetTick>
 802233e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8022340:	e008      	b.n	8022354 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8022342:	f7f9 fcab 	bl	801bc9c <HAL_GetTick>
 8022346:	4602      	mov	r2, r0
 8022348:	68bb      	ldr	r3, [r7, #8]
 802234a:	1ad3      	subs	r3, r2, r3
 802234c:	2b02      	cmp	r3, #2
 802234e:	d901      	bls.n	8022354 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8022350:	2303      	movs	r3, #3
 8022352:	e006      	b.n	8022362 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8022354:	4b05      	ldr	r3, [pc, #20]	@ (802236c <RCCEx_PLL2_Config+0x15c>)
 8022356:	681b      	ldr	r3, [r3, #0]
 8022358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 802235c:	2b00      	cmp	r3, #0
 802235e:	d0f0      	beq.n	8022342 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8022360:	7bfb      	ldrb	r3, [r7, #15]
}
 8022362:	4618      	mov	r0, r3
 8022364:	3710      	adds	r7, #16
 8022366:	46bd      	mov	sp, r7
 8022368:	bd80      	pop	{r7, pc}
 802236a:	bf00      	nop
 802236c:	58024400 	.word	0x58024400
 8022370:	ffff0007 	.word	0xffff0007

08022374 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8022374:	b580      	push	{r7, lr}
 8022376:	b084      	sub	sp, #16
 8022378:	af00      	add	r7, sp, #0
 802237a:	6078      	str	r0, [r7, #4]
 802237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802237e:	2300      	movs	r3, #0
 8022380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8022382:	4b53      	ldr	r3, [pc, #332]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 8022384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022386:	f003 0303 	and.w	r3, r3, #3
 802238a:	2b03      	cmp	r3, #3
 802238c:	d101      	bne.n	8022392 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 802238e:	2301      	movs	r3, #1
 8022390:	e099      	b.n	80224c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8022392:	4b4f      	ldr	r3, [pc, #316]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 8022394:	681b      	ldr	r3, [r3, #0]
 8022396:	4a4e      	ldr	r2, [pc, #312]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 8022398:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 802239c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802239e:	f7f9 fc7d 	bl	801bc9c <HAL_GetTick>
 80223a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80223a4:	e008      	b.n	80223b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80223a6:	f7f9 fc79 	bl	801bc9c <HAL_GetTick>
 80223aa:	4602      	mov	r2, r0
 80223ac:	68bb      	ldr	r3, [r7, #8]
 80223ae:	1ad3      	subs	r3, r2, r3
 80223b0:	2b02      	cmp	r3, #2
 80223b2:	d901      	bls.n	80223b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80223b4:	2303      	movs	r3, #3
 80223b6:	e086      	b.n	80224c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80223b8:	4b45      	ldr	r3, [pc, #276]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 80223ba:	681b      	ldr	r3, [r3, #0]
 80223bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80223c0:	2b00      	cmp	r3, #0
 80223c2:	d1f0      	bne.n	80223a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80223c4:	4b42      	ldr	r3, [pc, #264]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 80223c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80223c8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80223cc:	687b      	ldr	r3, [r7, #4]
 80223ce:	681b      	ldr	r3, [r3, #0]
 80223d0:	051b      	lsls	r3, r3, #20
 80223d2:	493f      	ldr	r1, [pc, #252]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 80223d4:	4313      	orrs	r3, r2
 80223d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80223d8:	687b      	ldr	r3, [r7, #4]
 80223da:	685b      	ldr	r3, [r3, #4]
 80223dc:	3b01      	subs	r3, #1
 80223de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80223e2:	687b      	ldr	r3, [r7, #4]
 80223e4:	689b      	ldr	r3, [r3, #8]
 80223e6:	3b01      	subs	r3, #1
 80223e8:	025b      	lsls	r3, r3, #9
 80223ea:	b29b      	uxth	r3, r3
 80223ec:	431a      	orrs	r2, r3
 80223ee:	687b      	ldr	r3, [r7, #4]
 80223f0:	68db      	ldr	r3, [r3, #12]
 80223f2:	3b01      	subs	r3, #1
 80223f4:	041b      	lsls	r3, r3, #16
 80223f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80223fa:	431a      	orrs	r2, r3
 80223fc:	687b      	ldr	r3, [r7, #4]
 80223fe:	691b      	ldr	r3, [r3, #16]
 8022400:	3b01      	subs	r3, #1
 8022402:	061b      	lsls	r3, r3, #24
 8022404:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8022408:	4931      	ldr	r1, [pc, #196]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 802240a:	4313      	orrs	r3, r2
 802240c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 802240e:	4b30      	ldr	r3, [pc, #192]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 8022410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022412:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8022416:	687b      	ldr	r3, [r7, #4]
 8022418:	695b      	ldr	r3, [r3, #20]
 802241a:	492d      	ldr	r1, [pc, #180]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 802241c:	4313      	orrs	r3, r2
 802241e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8022420:	4b2b      	ldr	r3, [pc, #172]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 8022422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022424:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8022428:	687b      	ldr	r3, [r7, #4]
 802242a:	699b      	ldr	r3, [r3, #24]
 802242c:	4928      	ldr	r1, [pc, #160]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 802242e:	4313      	orrs	r3, r2
 8022430:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8022432:	4b27      	ldr	r3, [pc, #156]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 8022434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022436:	4a26      	ldr	r2, [pc, #152]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 8022438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 802243c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 802243e:	4b24      	ldr	r3, [pc, #144]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 8022440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8022442:	4b24      	ldr	r3, [pc, #144]	@ (80224d4 <RCCEx_PLL3_Config+0x160>)
 8022444:	4013      	ands	r3, r2
 8022446:	687a      	ldr	r2, [r7, #4]
 8022448:	69d2      	ldr	r2, [r2, #28]
 802244a:	00d2      	lsls	r2, r2, #3
 802244c:	4920      	ldr	r1, [pc, #128]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 802244e:	4313      	orrs	r3, r2
 8022450:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8022452:	4b1f      	ldr	r3, [pc, #124]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 8022454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022456:	4a1e      	ldr	r2, [pc, #120]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 8022458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 802245c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 802245e:	683b      	ldr	r3, [r7, #0]
 8022460:	2b00      	cmp	r3, #0
 8022462:	d106      	bne.n	8022472 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8022464:	4b1a      	ldr	r3, [pc, #104]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 8022466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022468:	4a19      	ldr	r2, [pc, #100]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 802246a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 802246e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8022470:	e00f      	b.n	8022492 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8022472:	683b      	ldr	r3, [r7, #0]
 8022474:	2b01      	cmp	r3, #1
 8022476:	d106      	bne.n	8022486 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8022478:	4b15      	ldr	r3, [pc, #84]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 802247a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802247c:	4a14      	ldr	r2, [pc, #80]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 802247e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8022482:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8022484:	e005      	b.n	8022492 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8022486:	4b12      	ldr	r3, [pc, #72]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 8022488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802248a:	4a11      	ldr	r2, [pc, #68]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 802248c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8022490:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8022492:	4b0f      	ldr	r3, [pc, #60]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 8022494:	681b      	ldr	r3, [r3, #0]
 8022496:	4a0e      	ldr	r2, [pc, #56]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 8022498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802249c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802249e:	f7f9 fbfd 	bl	801bc9c <HAL_GetTick>
 80224a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80224a4:	e008      	b.n	80224b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80224a6:	f7f9 fbf9 	bl	801bc9c <HAL_GetTick>
 80224aa:	4602      	mov	r2, r0
 80224ac:	68bb      	ldr	r3, [r7, #8]
 80224ae:	1ad3      	subs	r3, r2, r3
 80224b0:	2b02      	cmp	r3, #2
 80224b2:	d901      	bls.n	80224b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80224b4:	2303      	movs	r3, #3
 80224b6:	e006      	b.n	80224c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80224b8:	4b05      	ldr	r3, [pc, #20]	@ (80224d0 <RCCEx_PLL3_Config+0x15c>)
 80224ba:	681b      	ldr	r3, [r3, #0]
 80224bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80224c0:	2b00      	cmp	r3, #0
 80224c2:	d0f0      	beq.n	80224a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80224c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80224c6:	4618      	mov	r0, r3
 80224c8:	3710      	adds	r7, #16
 80224ca:	46bd      	mov	sp, r7
 80224cc:	bd80      	pop	{r7, pc}
 80224ce:	bf00      	nop
 80224d0:	58024400 	.word	0x58024400
 80224d4:	ffff0007 	.word	0xffff0007

080224d8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80224d8:	b580      	push	{r7, lr}
 80224da:	b08a      	sub	sp, #40	@ 0x28
 80224dc:	af00      	add	r7, sp, #0
 80224de:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80224e0:	687b      	ldr	r3, [r7, #4]
 80224e2:	2b00      	cmp	r3, #0
 80224e4:	d101      	bne.n	80224ea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80224e6:	2301      	movs	r3, #1
 80224e8:	e075      	b.n	80225d6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80224ea:	687b      	ldr	r3, [r7, #4]
 80224ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80224f0:	b2db      	uxtb	r3, r3
 80224f2:	2b00      	cmp	r3, #0
 80224f4:	d105      	bne.n	8022502 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80224f6:	687b      	ldr	r3, [r7, #4]
 80224f8:	2200      	movs	r2, #0
 80224fa:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80224fc:	6878      	ldr	r0, [r7, #4]
 80224fe:	f7ec fc17 	bl	800ed30 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8022502:	687b      	ldr	r3, [r7, #4]
 8022504:	2204      	movs	r2, #4
 8022506:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 802250a:	6878      	ldr	r0, [r7, #4]
 802250c:	f000 f868 	bl	80225e0 <HAL_SD_InitCard>
 8022510:	4603      	mov	r3, r0
 8022512:	2b00      	cmp	r3, #0
 8022514:	d001      	beq.n	802251a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8022516:	2301      	movs	r3, #1
 8022518:	e05d      	b.n	80225d6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 802251a:	f107 0308 	add.w	r3, r7, #8
 802251e:	4619      	mov	r1, r3
 8022520:	6878      	ldr	r0, [r7, #4]
 8022522:	f000 fdaf 	bl	8023084 <HAL_SD_GetCardStatus>
 8022526:	4603      	mov	r3, r0
 8022528:	2b00      	cmp	r3, #0
 802252a:	d001      	beq.n	8022530 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 802252c:	2301      	movs	r3, #1
 802252e:	e052      	b.n	80225d6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8022530:	7e3b      	ldrb	r3, [r7, #24]
 8022532:	b2db      	uxtb	r3, r3
 8022534:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8022536:	7e7b      	ldrb	r3, [r7, #25]
 8022538:	b2db      	uxtb	r3, r3
 802253a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 802253c:	687b      	ldr	r3, [r7, #4]
 802253e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022540:	2b01      	cmp	r3, #1
 8022542:	d10a      	bne.n	802255a <HAL_SD_Init+0x82>
 8022544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022546:	2b00      	cmp	r3, #0
 8022548:	d102      	bne.n	8022550 <HAL_SD_Init+0x78>
 802254a:	6a3b      	ldr	r3, [r7, #32]
 802254c:	2b00      	cmp	r3, #0
 802254e:	d004      	beq.n	802255a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8022550:	687b      	ldr	r3, [r7, #4]
 8022552:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022556:	659a      	str	r2, [r3, #88]	@ 0x58
 8022558:	e00b      	b.n	8022572 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 802255a:	687b      	ldr	r3, [r7, #4]
 802255c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802255e:	2b01      	cmp	r3, #1
 8022560:	d104      	bne.n	802256c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8022562:	687b      	ldr	r3, [r7, #4]
 8022564:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8022568:	659a      	str	r2, [r3, #88]	@ 0x58
 802256a:	e002      	b.n	8022572 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 802256c:	687b      	ldr	r3, [r7, #4]
 802256e:	2200      	movs	r2, #0
 8022570:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8022572:	687b      	ldr	r3, [r7, #4]
 8022574:	68db      	ldr	r3, [r3, #12]
 8022576:	4619      	mov	r1, r3
 8022578:	6878      	ldr	r0, [r7, #4]
 802257a:	f000 fe6d 	bl	8023258 <HAL_SD_ConfigWideBusOperation>
 802257e:	4603      	mov	r3, r0
 8022580:	2b00      	cmp	r3, #0
 8022582:	d001      	beq.n	8022588 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8022584:	2301      	movs	r3, #1
 8022586:	e026      	b.n	80225d6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8022588:	f7f9 fb88 	bl	801bc9c <HAL_GetTick>
 802258c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 802258e:	e011      	b.n	80225b4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8022590:	f7f9 fb84 	bl	801bc9c <HAL_GetTick>
 8022594:	4602      	mov	r2, r0
 8022596:	69fb      	ldr	r3, [r7, #28]
 8022598:	1ad3      	subs	r3, r2, r3
 802259a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802259e:	d109      	bne.n	80225b4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80225a0:	687b      	ldr	r3, [r7, #4]
 80225a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80225a6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	2201      	movs	r2, #1
 80225ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80225b0:	2303      	movs	r3, #3
 80225b2:	e010      	b.n	80225d6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80225b4:	6878      	ldr	r0, [r7, #4]
 80225b6:	f000 ff61 	bl	802347c <HAL_SD_GetCardState>
 80225ba:	4603      	mov	r3, r0
 80225bc:	2b04      	cmp	r3, #4
 80225be:	d1e7      	bne.n	8022590 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80225c0:	687b      	ldr	r3, [r7, #4]
 80225c2:	2200      	movs	r2, #0
 80225c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80225c6:	687b      	ldr	r3, [r7, #4]
 80225c8:	2200      	movs	r2, #0
 80225ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80225cc:	687b      	ldr	r3, [r7, #4]
 80225ce:	2201      	movs	r2, #1
 80225d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80225d4:	2300      	movs	r3, #0
}
 80225d6:	4618      	mov	r0, r3
 80225d8:	3728      	adds	r7, #40	@ 0x28
 80225da:	46bd      	mov	sp, r7
 80225dc:	bd80      	pop	{r7, pc}
	...

080225e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80225e0:	b590      	push	{r4, r7, lr}
 80225e2:	b08d      	sub	sp, #52	@ 0x34
 80225e4:	af02      	add	r7, sp, #8
 80225e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80225e8:	2300      	movs	r3, #0
 80225ea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80225ec:	2300      	movs	r3, #0
 80225ee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80225f0:	2300      	movs	r3, #0
 80225f2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80225f4:	2300      	movs	r3, #0
 80225f6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80225f8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80225fc:	f04f 0100 	mov.w	r1, #0
 8022600:	f7fe fc76 	bl	8020ef0 <HAL_RCCEx_GetPeriphCLKFreq>
 8022604:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8022606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022608:	2b00      	cmp	r3, #0
 802260a:	d109      	bne.n	8022620 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 802260c:	687b      	ldr	r3, [r7, #4]
 802260e:	2201      	movs	r2, #1
 8022610:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8022614:	687b      	ldr	r3, [r7, #4]
 8022616:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 802261a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 802261c:	2301      	movs	r3, #1
 802261e:	e070      	b.n	8022702 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8022620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022622:	0a1b      	lsrs	r3, r3, #8
 8022624:	4a39      	ldr	r2, [pc, #228]	@ (802270c <HAL_SD_InitCard+0x12c>)
 8022626:	fba2 2303 	umull	r2, r3, r2, r3
 802262a:	091b      	lsrs	r3, r3, #4
 802262c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 802262e:	687b      	ldr	r3, [r7, #4]
 8022630:	681c      	ldr	r4, [r3, #0]
 8022632:	466a      	mov	r2, sp
 8022634:	f107 0318 	add.w	r3, r7, #24
 8022638:	e893 0003 	ldmia.w	r3, {r0, r1}
 802263c:	e882 0003 	stmia.w	r2, {r0, r1}
 8022640:	f107 030c 	add.w	r3, r7, #12
 8022644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8022646:	4620      	mov	r0, r4
 8022648:	f002 fe5e 	bl	8025308 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	681b      	ldr	r3, [r3, #0]
 8022650:	4618      	mov	r0, r3
 8022652:	f002 fea1 	bl	8025398 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8022656:	69fb      	ldr	r3, [r7, #28]
 8022658:	2b00      	cmp	r3, #0
 802265a:	d005      	beq.n	8022668 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 802265c:	69fb      	ldr	r3, [r7, #28]
 802265e:	005b      	lsls	r3, r3, #1
 8022660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022662:	fbb2 f3f3 	udiv	r3, r2, r3
 8022666:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8022668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802266a:	2b00      	cmp	r3, #0
 802266c:	d007      	beq.n	802267e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 802266e:	4a28      	ldr	r2, [pc, #160]	@ (8022710 <HAL_SD_InitCard+0x130>)
 8022670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022672:	fbb2 f3f3 	udiv	r3, r2, r3
 8022676:	3301      	adds	r3, #1
 8022678:	4618      	mov	r0, r3
 802267a:	f7f9 fb1b 	bl	801bcb4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 802267e:	6878      	ldr	r0, [r7, #4]
 8022680:	f000 ffea 	bl	8023658 <SD_PowerON>
 8022684:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8022686:	6a3b      	ldr	r3, [r7, #32]
 8022688:	2b00      	cmp	r3, #0
 802268a:	d00b      	beq.n	80226a4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 802268c:	687b      	ldr	r3, [r7, #4]
 802268e:	2201      	movs	r2, #1
 8022690:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8022694:	687b      	ldr	r3, [r7, #4]
 8022696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022698:	6a3b      	ldr	r3, [r7, #32]
 802269a:	431a      	orrs	r2, r3
 802269c:	687b      	ldr	r3, [r7, #4]
 802269e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80226a0:	2301      	movs	r3, #1
 80226a2:	e02e      	b.n	8022702 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80226a4:	6878      	ldr	r0, [r7, #4]
 80226a6:	f000 ff09 	bl	80234bc <SD_InitCard>
 80226aa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80226ac:	6a3b      	ldr	r3, [r7, #32]
 80226ae:	2b00      	cmp	r3, #0
 80226b0:	d00b      	beq.n	80226ca <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80226b2:	687b      	ldr	r3, [r7, #4]
 80226b4:	2201      	movs	r2, #1
 80226b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80226ba:	687b      	ldr	r3, [r7, #4]
 80226bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80226be:	6a3b      	ldr	r3, [r7, #32]
 80226c0:	431a      	orrs	r2, r3
 80226c2:	687b      	ldr	r3, [r7, #4]
 80226c4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80226c6:	2301      	movs	r3, #1
 80226c8:	e01b      	b.n	8022702 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80226ca:	687b      	ldr	r3, [r7, #4]
 80226cc:	681b      	ldr	r3, [r3, #0]
 80226ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80226d2:	4618      	mov	r0, r3
 80226d4:	f002 fef6 	bl	80254c4 <SDMMC_CmdBlockLength>
 80226d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80226da:	6a3b      	ldr	r3, [r7, #32]
 80226dc:	2b00      	cmp	r3, #0
 80226de:	d00f      	beq.n	8022700 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80226e0:	687b      	ldr	r3, [r7, #4]
 80226e2:	681b      	ldr	r3, [r3, #0]
 80226e4:	4a0b      	ldr	r2, [pc, #44]	@ (8022714 <HAL_SD_InitCard+0x134>)
 80226e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80226e8:	687b      	ldr	r3, [r7, #4]
 80226ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80226ec:	6a3b      	ldr	r3, [r7, #32]
 80226ee:	431a      	orrs	r2, r3
 80226f0:	687b      	ldr	r3, [r7, #4]
 80226f2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	2201      	movs	r2, #1
 80226f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80226fc:	2301      	movs	r3, #1
 80226fe:	e000      	b.n	8022702 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8022700:	2300      	movs	r3, #0
}
 8022702:	4618      	mov	r0, r3
 8022704:	372c      	adds	r7, #44	@ 0x2c
 8022706:	46bd      	mov	sp, r7
 8022708:	bd90      	pop	{r4, r7, pc}
 802270a:	bf00      	nop
 802270c:	014f8b59 	.word	0x014f8b59
 8022710:	00012110 	.word	0x00012110
 8022714:	1fe00fff 	.word	0x1fe00fff

08022718 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8022718:	b580      	push	{r7, lr}
 802271a:	b08c      	sub	sp, #48	@ 0x30
 802271c:	af00      	add	r7, sp, #0
 802271e:	60f8      	str	r0, [r7, #12]
 8022720:	60b9      	str	r1, [r7, #8]
 8022722:	607a      	str	r2, [r7, #4]
 8022724:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8022726:	687b      	ldr	r3, [r7, #4]
 8022728:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 802272a:	68bb      	ldr	r3, [r7, #8]
 802272c:	2b00      	cmp	r3, #0
 802272e:	d107      	bne.n	8022740 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8022730:	68fb      	ldr	r3, [r7, #12]
 8022732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022734:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8022738:	68fb      	ldr	r3, [r7, #12]
 802273a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 802273c:	2301      	movs	r3, #1
 802273e:	e08d      	b.n	802285c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8022740:	68fb      	ldr	r3, [r7, #12]
 8022742:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8022746:	b2db      	uxtb	r3, r3
 8022748:	2b01      	cmp	r3, #1
 802274a:	f040 8086 	bne.w	802285a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 802274e:	68fb      	ldr	r3, [r7, #12]
 8022750:	2200      	movs	r2, #0
 8022752:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8022754:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022756:	683b      	ldr	r3, [r7, #0]
 8022758:	441a      	add	r2, r3
 802275a:	68fb      	ldr	r3, [r7, #12]
 802275c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802275e:	429a      	cmp	r2, r3
 8022760:	d907      	bls.n	8022772 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8022762:	68fb      	ldr	r3, [r7, #12]
 8022764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022766:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 802276a:	68fb      	ldr	r3, [r7, #12]
 802276c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 802276e:	2301      	movs	r3, #1
 8022770:	e074      	b.n	802285c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8022772:	68fb      	ldr	r3, [r7, #12]
 8022774:	2203      	movs	r2, #3
 8022776:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 802277a:	68fb      	ldr	r3, [r7, #12]
 802277c:	681b      	ldr	r3, [r3, #0]
 802277e:	2200      	movs	r2, #0
 8022780:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8022782:	68fb      	ldr	r3, [r7, #12]
 8022784:	68ba      	ldr	r2, [r7, #8]
 8022786:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8022788:	683b      	ldr	r3, [r7, #0]
 802278a:	025a      	lsls	r2, r3, #9
 802278c:	68fb      	ldr	r3, [r7, #12]
 802278e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8022790:	68fb      	ldr	r3, [r7, #12]
 8022792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022794:	2b01      	cmp	r3, #1
 8022796:	d002      	beq.n	802279e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8022798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802279a:	025b      	lsls	r3, r3, #9
 802279c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 802279e:	f04f 33ff 	mov.w	r3, #4294967295
 80227a2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80227a4:	683b      	ldr	r3, [r7, #0]
 80227a6:	025b      	lsls	r3, r3, #9
 80227a8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80227aa:	2390      	movs	r3, #144	@ 0x90
 80227ac:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80227ae:	2302      	movs	r3, #2
 80227b0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80227b2:	2300      	movs	r3, #0
 80227b4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80227b6:	2300      	movs	r3, #0
 80227b8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80227ba:	68fb      	ldr	r3, [r7, #12]
 80227bc:	681b      	ldr	r3, [r3, #0]
 80227be:	f107 0210 	add.w	r2, r7, #16
 80227c2:	4611      	mov	r1, r2
 80227c4:	4618      	mov	r0, r3
 80227c6:	f002 fe51 	bl	802546c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80227ca:	68fb      	ldr	r3, [r7, #12]
 80227cc:	681b      	ldr	r3, [r3, #0]
 80227ce:	68da      	ldr	r2, [r3, #12]
 80227d0:	68fb      	ldr	r3, [r7, #12]
 80227d2:	681b      	ldr	r3, [r3, #0]
 80227d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80227d8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80227da:	68fb      	ldr	r3, [r7, #12]
 80227dc:	681b      	ldr	r3, [r3, #0]
 80227de:	68ba      	ldr	r2, [r7, #8]
 80227e0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80227e2:	68fb      	ldr	r3, [r7, #12]
 80227e4:	681b      	ldr	r3, [r3, #0]
 80227e6:	2201      	movs	r2, #1
 80227e8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80227ea:	683b      	ldr	r3, [r7, #0]
 80227ec:	2b01      	cmp	r3, #1
 80227ee:	d90a      	bls.n	8022806 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80227f0:	68fb      	ldr	r3, [r7, #12]
 80227f2:	2282      	movs	r2, #130	@ 0x82
 80227f4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80227f6:	68fb      	ldr	r3, [r7, #12]
 80227f8:	681b      	ldr	r3, [r3, #0]
 80227fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80227fc:	4618      	mov	r0, r3
 80227fe:	f002 fea7 	bl	8025550 <SDMMC_CmdReadMultiBlock>
 8022802:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8022804:	e009      	b.n	802281a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8022806:	68fb      	ldr	r3, [r7, #12]
 8022808:	2281      	movs	r2, #129	@ 0x81
 802280a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 802280c:	68fb      	ldr	r3, [r7, #12]
 802280e:	681b      	ldr	r3, [r3, #0]
 8022810:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022812:	4618      	mov	r0, r3
 8022814:	f002 fe79 	bl	802550a <SDMMC_CmdReadSingleBlock>
 8022818:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 802281a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802281c:	2b00      	cmp	r3, #0
 802281e:	d012      	beq.n	8022846 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022820:	68fb      	ldr	r3, [r7, #12]
 8022822:	681b      	ldr	r3, [r3, #0]
 8022824:	4a0f      	ldr	r2, [pc, #60]	@ (8022864 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8022826:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8022828:	68fb      	ldr	r3, [r7, #12]
 802282a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802282c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802282e:	431a      	orrs	r2, r3
 8022830:	68fb      	ldr	r3, [r7, #12]
 8022832:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8022834:	68fb      	ldr	r3, [r7, #12]
 8022836:	2201      	movs	r2, #1
 8022838:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 802283c:	68fb      	ldr	r3, [r7, #12]
 802283e:	2200      	movs	r2, #0
 8022840:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8022842:	2301      	movs	r3, #1
 8022844:	e00a      	b.n	802285c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8022846:	68fb      	ldr	r3, [r7, #12]
 8022848:	681b      	ldr	r3, [r3, #0]
 802284a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802284c:	68fb      	ldr	r3, [r7, #12]
 802284e:	681b      	ldr	r3, [r3, #0]
 8022850:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8022854:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8022856:	2300      	movs	r3, #0
 8022858:	e000      	b.n	802285c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 802285a:	2302      	movs	r3, #2
  }
}
 802285c:	4618      	mov	r0, r3
 802285e:	3730      	adds	r7, #48	@ 0x30
 8022860:	46bd      	mov	sp, r7
 8022862:	bd80      	pop	{r7, pc}
 8022864:	1fe00fff 	.word	0x1fe00fff

08022868 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8022868:	b580      	push	{r7, lr}
 802286a:	b08c      	sub	sp, #48	@ 0x30
 802286c:	af00      	add	r7, sp, #0
 802286e:	60f8      	str	r0, [r7, #12]
 8022870:	60b9      	str	r1, [r7, #8]
 8022872:	607a      	str	r2, [r7, #4]
 8022874:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8022876:	687b      	ldr	r3, [r7, #4]
 8022878:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 802287a:	68bb      	ldr	r3, [r7, #8]
 802287c:	2b00      	cmp	r3, #0
 802287e:	d107      	bne.n	8022890 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8022880:	68fb      	ldr	r3, [r7, #12]
 8022882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022884:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8022888:	68fb      	ldr	r3, [r7, #12]
 802288a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 802288c:	2301      	movs	r3, #1
 802288e:	e08d      	b.n	80229ac <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8022890:	68fb      	ldr	r3, [r7, #12]
 8022892:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8022896:	b2db      	uxtb	r3, r3
 8022898:	2b01      	cmp	r3, #1
 802289a:	f040 8086 	bne.w	80229aa <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 802289e:	68fb      	ldr	r3, [r7, #12]
 80228a0:	2200      	movs	r2, #0
 80228a2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80228a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80228a6:	683b      	ldr	r3, [r7, #0]
 80228a8:	441a      	add	r2, r3
 80228aa:	68fb      	ldr	r3, [r7, #12]
 80228ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80228ae:	429a      	cmp	r2, r3
 80228b0:	d907      	bls.n	80228c2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80228b2:	68fb      	ldr	r3, [r7, #12]
 80228b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80228b6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80228ba:	68fb      	ldr	r3, [r7, #12]
 80228bc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80228be:	2301      	movs	r3, #1
 80228c0:	e074      	b.n	80229ac <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80228c2:	68fb      	ldr	r3, [r7, #12]
 80228c4:	2203      	movs	r2, #3
 80228c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80228ca:	68fb      	ldr	r3, [r7, #12]
 80228cc:	681b      	ldr	r3, [r3, #0]
 80228ce:	2200      	movs	r2, #0
 80228d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 80228d2:	68fb      	ldr	r3, [r7, #12]
 80228d4:	68ba      	ldr	r2, [r7, #8]
 80228d6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80228d8:	683b      	ldr	r3, [r7, #0]
 80228da:	025a      	lsls	r2, r3, #9
 80228dc:	68fb      	ldr	r3, [r7, #12]
 80228de:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80228e0:	68fb      	ldr	r3, [r7, #12]
 80228e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80228e4:	2b01      	cmp	r3, #1
 80228e6:	d002      	beq.n	80228ee <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80228e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80228ea:	025b      	lsls	r3, r3, #9
 80228ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80228ee:	f04f 33ff 	mov.w	r3, #4294967295
 80228f2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80228f4:	683b      	ldr	r3, [r7, #0]
 80228f6:	025b      	lsls	r3, r3, #9
 80228f8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80228fa:	2390      	movs	r3, #144	@ 0x90
 80228fc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80228fe:	2300      	movs	r3, #0
 8022900:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8022902:	2300      	movs	r3, #0
 8022904:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8022906:	2300      	movs	r3, #0
 8022908:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 802290a:	68fb      	ldr	r3, [r7, #12]
 802290c:	681b      	ldr	r3, [r3, #0]
 802290e:	f107 0210 	add.w	r2, r7, #16
 8022912:	4611      	mov	r1, r2
 8022914:	4618      	mov	r0, r3
 8022916:	f002 fda9 	bl	802546c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 802291a:	68fb      	ldr	r3, [r7, #12]
 802291c:	681b      	ldr	r3, [r3, #0]
 802291e:	68da      	ldr	r2, [r3, #12]
 8022920:	68fb      	ldr	r3, [r7, #12]
 8022922:	681b      	ldr	r3, [r3, #0]
 8022924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8022928:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 802292a:	68fb      	ldr	r3, [r7, #12]
 802292c:	681b      	ldr	r3, [r3, #0]
 802292e:	68ba      	ldr	r2, [r7, #8]
 8022930:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8022932:	68fb      	ldr	r3, [r7, #12]
 8022934:	681b      	ldr	r3, [r3, #0]
 8022936:	2201      	movs	r2, #1
 8022938:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 802293a:	683b      	ldr	r3, [r7, #0]
 802293c:	2b01      	cmp	r3, #1
 802293e:	d90a      	bls.n	8022956 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8022940:	68fb      	ldr	r3, [r7, #12]
 8022942:	22a0      	movs	r2, #160	@ 0xa0
 8022944:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8022946:	68fb      	ldr	r3, [r7, #12]
 8022948:	681b      	ldr	r3, [r3, #0]
 802294a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802294c:	4618      	mov	r0, r3
 802294e:	f002 fe45 	bl	80255dc <SDMMC_CmdWriteMultiBlock>
 8022952:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8022954:	e009      	b.n	802296a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8022956:	68fb      	ldr	r3, [r7, #12]
 8022958:	2290      	movs	r2, #144	@ 0x90
 802295a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 802295c:	68fb      	ldr	r3, [r7, #12]
 802295e:	681b      	ldr	r3, [r3, #0]
 8022960:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022962:	4618      	mov	r0, r3
 8022964:	f002 fe17 	bl	8025596 <SDMMC_CmdWriteSingleBlock>
 8022968:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 802296a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802296c:	2b00      	cmp	r3, #0
 802296e:	d012      	beq.n	8022996 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022970:	68fb      	ldr	r3, [r7, #12]
 8022972:	681b      	ldr	r3, [r3, #0]
 8022974:	4a0f      	ldr	r2, [pc, #60]	@ (80229b4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8022976:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8022978:	68fb      	ldr	r3, [r7, #12]
 802297a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802297c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802297e:	431a      	orrs	r2, r3
 8022980:	68fb      	ldr	r3, [r7, #12]
 8022982:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8022984:	68fb      	ldr	r3, [r7, #12]
 8022986:	2201      	movs	r2, #1
 8022988:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 802298c:	68fb      	ldr	r3, [r7, #12]
 802298e:	2200      	movs	r2, #0
 8022990:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8022992:	2301      	movs	r3, #1
 8022994:	e00a      	b.n	80229ac <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8022996:	68fb      	ldr	r3, [r7, #12]
 8022998:	681b      	ldr	r3, [r3, #0]
 802299a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802299c:	68fb      	ldr	r3, [r7, #12]
 802299e:	681b      	ldr	r3, [r3, #0]
 80229a0:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 80229a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80229a6:	2300      	movs	r3, #0
 80229a8:	e000      	b.n	80229ac <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80229aa:	2302      	movs	r3, #2
  }
}
 80229ac:	4618      	mov	r0, r3
 80229ae:	3730      	adds	r7, #48	@ 0x30
 80229b0:	46bd      	mov	sp, r7
 80229b2:	bd80      	pop	{r7, pc}
 80229b4:	1fe00fff 	.word	0x1fe00fff

080229b8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80229b8:	b580      	push	{r7, lr}
 80229ba:	b084      	sub	sp, #16
 80229bc:	af00      	add	r7, sp, #0
 80229be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80229c0:	687b      	ldr	r3, [r7, #4]
 80229c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80229c4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80229c6:	687b      	ldr	r3, [r7, #4]
 80229c8:	681b      	ldr	r3, [r3, #0]
 80229ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80229cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80229d0:	2b00      	cmp	r3, #0
 80229d2:	d008      	beq.n	80229e6 <HAL_SD_IRQHandler+0x2e>
 80229d4:	68fb      	ldr	r3, [r7, #12]
 80229d6:	f003 0308 	and.w	r3, r3, #8
 80229da:	2b00      	cmp	r3, #0
 80229dc:	d003      	beq.n	80229e6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80229de:	6878      	ldr	r0, [r7, #4]
 80229e0:	f001 f926 	bl	8023c30 <SD_Read_IT>
 80229e4:	e19a      	b.n	8022d1c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80229e6:	687b      	ldr	r3, [r7, #4]
 80229e8:	681b      	ldr	r3, [r3, #0]
 80229ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80229ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80229f0:	2b00      	cmp	r3, #0
 80229f2:	f000 80ac 	beq.w	8022b4e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80229f6:	687b      	ldr	r3, [r7, #4]
 80229f8:	681b      	ldr	r3, [r3, #0]
 80229fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80229fe:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8022a00:	687b      	ldr	r3, [r7, #4]
 8022a02:	681b      	ldr	r3, [r3, #0]
 8022a04:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8022a06:	687b      	ldr	r3, [r7, #4]
 8022a08:	681a      	ldr	r2, [r3, #0]
 8022a0a:	4b59      	ldr	r3, [pc, #356]	@ (8022b70 <HAL_SD_IRQHandler+0x1b8>)
 8022a0c:	400b      	ands	r3, r1
 8022a0e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8022a10:	687b      	ldr	r3, [r7, #4]
 8022a12:	681b      	ldr	r3, [r3, #0]
 8022a14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022a16:	687b      	ldr	r3, [r7, #4]
 8022a18:	681b      	ldr	r3, [r3, #0]
 8022a1a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8022a1e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8022a20:	687b      	ldr	r3, [r7, #4]
 8022a22:	681b      	ldr	r3, [r3, #0]
 8022a24:	68da      	ldr	r2, [r3, #12]
 8022a26:	687b      	ldr	r3, [r7, #4]
 8022a28:	681b      	ldr	r3, [r3, #0]
 8022a2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8022a2e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8022a30:	68fb      	ldr	r3, [r7, #12]
 8022a32:	f003 0308 	and.w	r3, r3, #8
 8022a36:	2b00      	cmp	r3, #0
 8022a38:	d038      	beq.n	8022aac <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8022a3a:	68fb      	ldr	r3, [r7, #12]
 8022a3c:	f003 0302 	and.w	r3, r3, #2
 8022a40:	2b00      	cmp	r3, #0
 8022a42:	d104      	bne.n	8022a4e <HAL_SD_IRQHandler+0x96>
 8022a44:	68fb      	ldr	r3, [r7, #12]
 8022a46:	f003 0320 	and.w	r3, r3, #32
 8022a4a:	2b00      	cmp	r3, #0
 8022a4c:	d011      	beq.n	8022a72 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8022a4e:	687b      	ldr	r3, [r7, #4]
 8022a50:	681b      	ldr	r3, [r3, #0]
 8022a52:	4618      	mov	r0, r3
 8022a54:	f002 fde6 	bl	8025624 <SDMMC_CmdStopTransfer>
 8022a58:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8022a5a:	68bb      	ldr	r3, [r7, #8]
 8022a5c:	2b00      	cmp	r3, #0
 8022a5e:	d008      	beq.n	8022a72 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8022a60:	687b      	ldr	r3, [r7, #4]
 8022a62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022a64:	68bb      	ldr	r3, [r7, #8]
 8022a66:	431a      	orrs	r2, r3
 8022a68:	687b      	ldr	r3, [r7, #4]
 8022a6a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8022a6c:	6878      	ldr	r0, [r7, #4]
 8022a6e:	f000 f95b 	bl	8022d28 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8022a72:	687b      	ldr	r3, [r7, #4]
 8022a74:	681b      	ldr	r3, [r3, #0]
 8022a76:	4a3f      	ldr	r2, [pc, #252]	@ (8022b74 <HAL_SD_IRQHandler+0x1bc>)
 8022a78:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8022a7a:	687b      	ldr	r3, [r7, #4]
 8022a7c:	2201      	movs	r2, #1
 8022a7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8022a82:	687b      	ldr	r3, [r7, #4]
 8022a84:	2200      	movs	r2, #0
 8022a86:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8022a88:	68fb      	ldr	r3, [r7, #12]
 8022a8a:	f003 0301 	and.w	r3, r3, #1
 8022a8e:	2b00      	cmp	r3, #0
 8022a90:	d104      	bne.n	8022a9c <HAL_SD_IRQHandler+0xe4>
 8022a92:	68fb      	ldr	r3, [r7, #12]
 8022a94:	f003 0302 	and.w	r3, r3, #2
 8022a98:	2b00      	cmp	r3, #0
 8022a9a:	d003      	beq.n	8022aa4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8022a9c:	6878      	ldr	r0, [r7, #4]
 8022a9e:	f003 fa73 	bl	8025f88 <HAL_SD_RxCpltCallback>
 8022aa2:	e13b      	b.n	8022d1c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8022aa4:	6878      	ldr	r0, [r7, #4]
 8022aa6:	f003 fa65 	bl	8025f74 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8022aaa:	e137      	b.n	8022d1c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8022aac:	68fb      	ldr	r3, [r7, #12]
 8022aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022ab2:	2b00      	cmp	r3, #0
 8022ab4:	f000 8132 	beq.w	8022d1c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8022ab8:	687b      	ldr	r3, [r7, #4]
 8022aba:	681b      	ldr	r3, [r3, #0]
 8022abc:	2200      	movs	r2, #0
 8022abe:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8022ac0:	687b      	ldr	r3, [r7, #4]
 8022ac2:	681b      	ldr	r3, [r3, #0]
 8022ac4:	2200      	movs	r2, #0
 8022ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8022ac8:	687b      	ldr	r3, [r7, #4]
 8022aca:	681b      	ldr	r3, [r3, #0]
 8022acc:	2200      	movs	r2, #0
 8022ace:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8022ad0:	68fb      	ldr	r3, [r7, #12]
 8022ad2:	f003 0302 	and.w	r3, r3, #2
 8022ad6:	2b00      	cmp	r3, #0
 8022ad8:	d104      	bne.n	8022ae4 <HAL_SD_IRQHandler+0x12c>
 8022ada:	68fb      	ldr	r3, [r7, #12]
 8022adc:	f003 0320 	and.w	r3, r3, #32
 8022ae0:	2b00      	cmp	r3, #0
 8022ae2:	d011      	beq.n	8022b08 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8022ae4:	687b      	ldr	r3, [r7, #4]
 8022ae6:	681b      	ldr	r3, [r3, #0]
 8022ae8:	4618      	mov	r0, r3
 8022aea:	f002 fd9b 	bl	8025624 <SDMMC_CmdStopTransfer>
 8022aee:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8022af0:	68bb      	ldr	r3, [r7, #8]
 8022af2:	2b00      	cmp	r3, #0
 8022af4:	d008      	beq.n	8022b08 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8022af6:	687b      	ldr	r3, [r7, #4]
 8022af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022afa:	68bb      	ldr	r3, [r7, #8]
 8022afc:	431a      	orrs	r2, r3
 8022afe:	687b      	ldr	r3, [r7, #4]
 8022b00:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8022b02:	6878      	ldr	r0, [r7, #4]
 8022b04:	f000 f910 	bl	8022d28 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8022b08:	687b      	ldr	r3, [r7, #4]
 8022b0a:	2201      	movs	r2, #1
 8022b0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8022b10:	687b      	ldr	r3, [r7, #4]
 8022b12:	2200      	movs	r2, #0
 8022b14:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8022b16:	68fb      	ldr	r3, [r7, #12]
 8022b18:	f003 0310 	and.w	r3, r3, #16
 8022b1c:	2b00      	cmp	r3, #0
 8022b1e:	d104      	bne.n	8022b2a <HAL_SD_IRQHandler+0x172>
 8022b20:	68fb      	ldr	r3, [r7, #12]
 8022b22:	f003 0320 	and.w	r3, r3, #32
 8022b26:	2b00      	cmp	r3, #0
 8022b28:	d002      	beq.n	8022b30 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8022b2a:	6878      	ldr	r0, [r7, #4]
 8022b2c:	f003 fa22 	bl	8025f74 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8022b30:	68fb      	ldr	r3, [r7, #12]
 8022b32:	f003 0301 	and.w	r3, r3, #1
 8022b36:	2b00      	cmp	r3, #0
 8022b38:	d105      	bne.n	8022b46 <HAL_SD_IRQHandler+0x18e>
 8022b3a:	68fb      	ldr	r3, [r7, #12]
 8022b3c:	f003 0302 	and.w	r3, r3, #2
 8022b40:	2b00      	cmp	r3, #0
 8022b42:	f000 80eb 	beq.w	8022d1c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8022b46:	6878      	ldr	r0, [r7, #4]
 8022b48:	f003 fa1e 	bl	8025f88 <HAL_SD_RxCpltCallback>
}
 8022b4c:	e0e6      	b.n	8022d1c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8022b4e:	687b      	ldr	r3, [r7, #4]
 8022b50:	681b      	ldr	r3, [r3, #0]
 8022b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8022b58:	2b00      	cmp	r3, #0
 8022b5a:	d00d      	beq.n	8022b78 <HAL_SD_IRQHandler+0x1c0>
 8022b5c:	68fb      	ldr	r3, [r7, #12]
 8022b5e:	f003 0308 	and.w	r3, r3, #8
 8022b62:	2b00      	cmp	r3, #0
 8022b64:	d008      	beq.n	8022b78 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8022b66:	6878      	ldr	r0, [r7, #4]
 8022b68:	f001 f8a8 	bl	8023cbc <SD_Write_IT>
 8022b6c:	e0d6      	b.n	8022d1c <HAL_SD_IRQHandler+0x364>
 8022b6e:	bf00      	nop
 8022b70:	ffff3ec5 	.word	0xffff3ec5
 8022b74:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8022b78:	687b      	ldr	r3, [r7, #4]
 8022b7a:	681b      	ldr	r3, [r3, #0]
 8022b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b7e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8022b82:	2b00      	cmp	r3, #0
 8022b84:	f000 809d 	beq.w	8022cc2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8022b88:	687b      	ldr	r3, [r7, #4]
 8022b8a:	681b      	ldr	r3, [r3, #0]
 8022b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b8e:	f003 0302 	and.w	r3, r3, #2
 8022b92:	2b00      	cmp	r3, #0
 8022b94:	d005      	beq.n	8022ba2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8022b96:	687b      	ldr	r3, [r7, #4]
 8022b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022b9a:	f043 0202 	orr.w	r2, r3, #2
 8022b9e:	687b      	ldr	r3, [r7, #4]
 8022ba0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8022ba2:	687b      	ldr	r3, [r7, #4]
 8022ba4:	681b      	ldr	r3, [r3, #0]
 8022ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022ba8:	f003 0308 	and.w	r3, r3, #8
 8022bac:	2b00      	cmp	r3, #0
 8022bae:	d005      	beq.n	8022bbc <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8022bb0:	687b      	ldr	r3, [r7, #4]
 8022bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022bb4:	f043 0208 	orr.w	r2, r3, #8
 8022bb8:	687b      	ldr	r3, [r7, #4]
 8022bba:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8022bbc:	687b      	ldr	r3, [r7, #4]
 8022bbe:	681b      	ldr	r3, [r3, #0]
 8022bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022bc2:	f003 0320 	and.w	r3, r3, #32
 8022bc6:	2b00      	cmp	r3, #0
 8022bc8:	d005      	beq.n	8022bd6 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8022bca:	687b      	ldr	r3, [r7, #4]
 8022bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022bce:	f043 0220 	orr.w	r2, r3, #32
 8022bd2:	687b      	ldr	r3, [r7, #4]
 8022bd4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8022bd6:	687b      	ldr	r3, [r7, #4]
 8022bd8:	681b      	ldr	r3, [r3, #0]
 8022bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022bdc:	f003 0310 	and.w	r3, r3, #16
 8022be0:	2b00      	cmp	r3, #0
 8022be2:	d005      	beq.n	8022bf0 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8022be4:	687b      	ldr	r3, [r7, #4]
 8022be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022be8:	f043 0210 	orr.w	r2, r3, #16
 8022bec:	687b      	ldr	r3, [r7, #4]
 8022bee:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8022bf0:	687b      	ldr	r3, [r7, #4]
 8022bf2:	681b      	ldr	r3, [r3, #0]
 8022bf4:	4a4b      	ldr	r2, [pc, #300]	@ (8022d24 <HAL_SD_IRQHandler+0x36c>)
 8022bf6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8022bf8:	687b      	ldr	r3, [r7, #4]
 8022bfa:	681b      	ldr	r3, [r3, #0]
 8022bfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022bfe:	687b      	ldr	r3, [r7, #4]
 8022c00:	681b      	ldr	r3, [r3, #0]
 8022c02:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8022c06:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8022c08:	687b      	ldr	r3, [r7, #4]
 8022c0a:	681b      	ldr	r3, [r3, #0]
 8022c0c:	68da      	ldr	r2, [r3, #12]
 8022c0e:	687b      	ldr	r3, [r7, #4]
 8022c10:	681b      	ldr	r3, [r3, #0]
 8022c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8022c16:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8022c18:	687b      	ldr	r3, [r7, #4]
 8022c1a:	681b      	ldr	r3, [r3, #0]
 8022c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022c1e:	687b      	ldr	r3, [r7, #4]
 8022c20:	681b      	ldr	r3, [r3, #0]
 8022c22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8022c26:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8022c28:	687b      	ldr	r3, [r7, #4]
 8022c2a:	681b      	ldr	r3, [r3, #0]
 8022c2c:	68da      	ldr	r2, [r3, #12]
 8022c2e:	687b      	ldr	r3, [r7, #4]
 8022c30:	681b      	ldr	r3, [r3, #0]
 8022c32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8022c36:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8022c38:	687b      	ldr	r3, [r7, #4]
 8022c3a:	681b      	ldr	r3, [r3, #0]
 8022c3c:	4618      	mov	r0, r3
 8022c3e:	f002 fcf1 	bl	8025624 <SDMMC_CmdStopTransfer>
 8022c42:	4602      	mov	r2, r0
 8022c44:	687b      	ldr	r3, [r7, #4]
 8022c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022c48:	431a      	orrs	r2, r3
 8022c4a:	687b      	ldr	r3, [r7, #4]
 8022c4c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8022c4e:	687b      	ldr	r3, [r7, #4]
 8022c50:	681b      	ldr	r3, [r3, #0]
 8022c52:	68da      	ldr	r2, [r3, #12]
 8022c54:	687b      	ldr	r3, [r7, #4]
 8022c56:	681b      	ldr	r3, [r3, #0]
 8022c58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8022c5c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8022c5e:	687b      	ldr	r3, [r7, #4]
 8022c60:	681b      	ldr	r3, [r3, #0]
 8022c62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8022c66:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8022c68:	68fb      	ldr	r3, [r7, #12]
 8022c6a:	f003 0308 	and.w	r3, r3, #8
 8022c6e:	2b00      	cmp	r3, #0
 8022c70:	d00a      	beq.n	8022c88 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8022c72:	687b      	ldr	r3, [r7, #4]
 8022c74:	2201      	movs	r2, #1
 8022c76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8022c7a:	687b      	ldr	r3, [r7, #4]
 8022c7c:	2200      	movs	r2, #0
 8022c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8022c80:	6878      	ldr	r0, [r7, #4]
 8022c82:	f000 f851 	bl	8022d28 <HAL_SD_ErrorCallback>
}
 8022c86:	e049      	b.n	8022d1c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8022c88:	68fb      	ldr	r3, [r7, #12]
 8022c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022c8e:	2b00      	cmp	r3, #0
 8022c90:	d044      	beq.n	8022d1c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8022c92:	687b      	ldr	r3, [r7, #4]
 8022c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022c96:	2b00      	cmp	r3, #0
 8022c98:	d040      	beq.n	8022d1c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8022c9a:	687b      	ldr	r3, [r7, #4]
 8022c9c:	681b      	ldr	r3, [r3, #0]
 8022c9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022ca0:	687b      	ldr	r3, [r7, #4]
 8022ca2:	681b      	ldr	r3, [r3, #0]
 8022ca4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8022ca8:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8022caa:	687b      	ldr	r3, [r7, #4]
 8022cac:	681b      	ldr	r3, [r3, #0]
 8022cae:	2200      	movs	r2, #0
 8022cb0:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8022cb2:	687b      	ldr	r3, [r7, #4]
 8022cb4:	2201      	movs	r2, #1
 8022cb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8022cba:	6878      	ldr	r0, [r7, #4]
 8022cbc:	f000 f834 	bl	8022d28 <HAL_SD_ErrorCallback>
}
 8022cc0:	e02c      	b.n	8022d1c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8022cc2:	687b      	ldr	r3, [r7, #4]
 8022cc4:	681b      	ldr	r3, [r3, #0]
 8022cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8022ccc:	2b00      	cmp	r3, #0
 8022cce:	d025      	beq.n	8022d1c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8022cd0:	687b      	ldr	r3, [r7, #4]
 8022cd2:	681b      	ldr	r3, [r3, #0]
 8022cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8022cd8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8022cda:	687b      	ldr	r3, [r7, #4]
 8022cdc:	681b      	ldr	r3, [r3, #0]
 8022cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022ce0:	f003 0304 	and.w	r3, r3, #4
 8022ce4:	2b00      	cmp	r3, #0
 8022ce6:	d10c      	bne.n	8022d02 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8022ce8:	68fb      	ldr	r3, [r7, #12]
 8022cea:	f003 0320 	and.w	r3, r3, #32
 8022cee:	2b00      	cmp	r3, #0
 8022cf0:	d003      	beq.n	8022cfa <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8022cf2:	6878      	ldr	r0, [r7, #4]
 8022cf4:	f001 f84a 	bl	8023d8c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8022cf8:	e010      	b.n	8022d1c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8022cfa:	6878      	ldr	r0, [r7, #4]
 8022cfc:	f001 f832 	bl	8023d64 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8022d00:	e00c      	b.n	8022d1c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8022d02:	68fb      	ldr	r3, [r7, #12]
 8022d04:	f003 0320 	and.w	r3, r3, #32
 8022d08:	2b00      	cmp	r3, #0
 8022d0a:	d003      	beq.n	8022d14 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8022d0c:	6878      	ldr	r0, [r7, #4]
 8022d0e:	f001 f833 	bl	8023d78 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8022d12:	e003      	b.n	8022d1c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8022d14:	6878      	ldr	r0, [r7, #4]
 8022d16:	f001 f81b 	bl	8023d50 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8022d1a:	e7ff      	b.n	8022d1c <HAL_SD_IRQHandler+0x364>
 8022d1c:	bf00      	nop
 8022d1e:	3710      	adds	r7, #16
 8022d20:	46bd      	mov	sp, r7
 8022d22:	bd80      	pop	{r7, pc}
 8022d24:	18000f3a 	.word	0x18000f3a

08022d28 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8022d28:	b480      	push	{r7}
 8022d2a:	b083      	sub	sp, #12
 8022d2c:	af00      	add	r7, sp, #0
 8022d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8022d30:	bf00      	nop
 8022d32:	370c      	adds	r7, #12
 8022d34:	46bd      	mov	sp, r7
 8022d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d3a:	4770      	bx	lr

08022d3c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8022d3c:	b480      	push	{r7}
 8022d3e:	b083      	sub	sp, #12
 8022d40:	af00      	add	r7, sp, #0
 8022d42:	6078      	str	r0, [r7, #4]
 8022d44:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8022d46:	687b      	ldr	r3, [r7, #4]
 8022d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022d4a:	0f9b      	lsrs	r3, r3, #30
 8022d4c:	b2da      	uxtb	r2, r3
 8022d4e:	683b      	ldr	r3, [r7, #0]
 8022d50:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8022d52:	687b      	ldr	r3, [r7, #4]
 8022d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022d56:	0e9b      	lsrs	r3, r3, #26
 8022d58:	b2db      	uxtb	r3, r3
 8022d5a:	f003 030f 	and.w	r3, r3, #15
 8022d5e:	b2da      	uxtb	r2, r3
 8022d60:	683b      	ldr	r3, [r7, #0]
 8022d62:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8022d64:	687b      	ldr	r3, [r7, #4]
 8022d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022d68:	0e1b      	lsrs	r3, r3, #24
 8022d6a:	b2db      	uxtb	r3, r3
 8022d6c:	f003 0303 	and.w	r3, r3, #3
 8022d70:	b2da      	uxtb	r2, r3
 8022d72:	683b      	ldr	r3, [r7, #0]
 8022d74:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8022d76:	687b      	ldr	r3, [r7, #4]
 8022d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022d7a:	0c1b      	lsrs	r3, r3, #16
 8022d7c:	b2da      	uxtb	r2, r3
 8022d7e:	683b      	ldr	r3, [r7, #0]
 8022d80:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8022d82:	687b      	ldr	r3, [r7, #4]
 8022d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022d86:	0a1b      	lsrs	r3, r3, #8
 8022d88:	b2da      	uxtb	r2, r3
 8022d8a:	683b      	ldr	r3, [r7, #0]
 8022d8c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8022d8e:	687b      	ldr	r3, [r7, #4]
 8022d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8022d92:	b2da      	uxtb	r2, r3
 8022d94:	683b      	ldr	r3, [r7, #0]
 8022d96:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8022d98:	687b      	ldr	r3, [r7, #4]
 8022d9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022d9c:	0d1b      	lsrs	r3, r3, #20
 8022d9e:	b29a      	uxth	r2, r3
 8022da0:	683b      	ldr	r3, [r7, #0]
 8022da2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8022da4:	687b      	ldr	r3, [r7, #4]
 8022da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022da8:	0c1b      	lsrs	r3, r3, #16
 8022daa:	b2db      	uxtb	r3, r3
 8022dac:	f003 030f 	and.w	r3, r3, #15
 8022db0:	b2da      	uxtb	r2, r3
 8022db2:	683b      	ldr	r3, [r7, #0]
 8022db4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8022db6:	687b      	ldr	r3, [r7, #4]
 8022db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022dba:	0bdb      	lsrs	r3, r3, #15
 8022dbc:	b2db      	uxtb	r3, r3
 8022dbe:	f003 0301 	and.w	r3, r3, #1
 8022dc2:	b2da      	uxtb	r2, r3
 8022dc4:	683b      	ldr	r3, [r7, #0]
 8022dc6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8022dc8:	687b      	ldr	r3, [r7, #4]
 8022dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022dcc:	0b9b      	lsrs	r3, r3, #14
 8022dce:	b2db      	uxtb	r3, r3
 8022dd0:	f003 0301 	and.w	r3, r3, #1
 8022dd4:	b2da      	uxtb	r2, r3
 8022dd6:	683b      	ldr	r3, [r7, #0]
 8022dd8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8022dda:	687b      	ldr	r3, [r7, #4]
 8022ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022dde:	0b5b      	lsrs	r3, r3, #13
 8022de0:	b2db      	uxtb	r3, r3
 8022de2:	f003 0301 	and.w	r3, r3, #1
 8022de6:	b2da      	uxtb	r2, r3
 8022de8:	683b      	ldr	r3, [r7, #0]
 8022dea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8022dec:	687b      	ldr	r3, [r7, #4]
 8022dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022df0:	0b1b      	lsrs	r3, r3, #12
 8022df2:	b2db      	uxtb	r3, r3
 8022df4:	f003 0301 	and.w	r3, r3, #1
 8022df8:	b2da      	uxtb	r2, r3
 8022dfa:	683b      	ldr	r3, [r7, #0]
 8022dfc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8022dfe:	683b      	ldr	r3, [r7, #0]
 8022e00:	2200      	movs	r2, #0
 8022e02:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8022e04:	687b      	ldr	r3, [r7, #4]
 8022e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022e08:	2b00      	cmp	r3, #0
 8022e0a:	d163      	bne.n	8022ed4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8022e0c:	687b      	ldr	r3, [r7, #4]
 8022e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022e10:	009a      	lsls	r2, r3, #2
 8022e12:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8022e16:	4013      	ands	r3, r2
 8022e18:	687a      	ldr	r2, [r7, #4]
 8022e1a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8022e1c:	0f92      	lsrs	r2, r2, #30
 8022e1e:	431a      	orrs	r2, r3
 8022e20:	683b      	ldr	r3, [r7, #0]
 8022e22:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8022e24:	687b      	ldr	r3, [r7, #4]
 8022e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022e28:	0edb      	lsrs	r3, r3, #27
 8022e2a:	b2db      	uxtb	r3, r3
 8022e2c:	f003 0307 	and.w	r3, r3, #7
 8022e30:	b2da      	uxtb	r2, r3
 8022e32:	683b      	ldr	r3, [r7, #0]
 8022e34:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8022e36:	687b      	ldr	r3, [r7, #4]
 8022e38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022e3a:	0e1b      	lsrs	r3, r3, #24
 8022e3c:	b2db      	uxtb	r3, r3
 8022e3e:	f003 0307 	and.w	r3, r3, #7
 8022e42:	b2da      	uxtb	r2, r3
 8022e44:	683b      	ldr	r3, [r7, #0]
 8022e46:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8022e48:	687b      	ldr	r3, [r7, #4]
 8022e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022e4c:	0d5b      	lsrs	r3, r3, #21
 8022e4e:	b2db      	uxtb	r3, r3
 8022e50:	f003 0307 	and.w	r3, r3, #7
 8022e54:	b2da      	uxtb	r2, r3
 8022e56:	683b      	ldr	r3, [r7, #0]
 8022e58:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8022e5a:	687b      	ldr	r3, [r7, #4]
 8022e5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022e5e:	0c9b      	lsrs	r3, r3, #18
 8022e60:	b2db      	uxtb	r3, r3
 8022e62:	f003 0307 	and.w	r3, r3, #7
 8022e66:	b2da      	uxtb	r2, r3
 8022e68:	683b      	ldr	r3, [r7, #0]
 8022e6a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8022e6c:	687b      	ldr	r3, [r7, #4]
 8022e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022e70:	0bdb      	lsrs	r3, r3, #15
 8022e72:	b2db      	uxtb	r3, r3
 8022e74:	f003 0307 	and.w	r3, r3, #7
 8022e78:	b2da      	uxtb	r2, r3
 8022e7a:	683b      	ldr	r3, [r7, #0]
 8022e7c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8022e7e:	683b      	ldr	r3, [r7, #0]
 8022e80:	691b      	ldr	r3, [r3, #16]
 8022e82:	1c5a      	adds	r2, r3, #1
 8022e84:	687b      	ldr	r3, [r7, #4]
 8022e86:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8022e88:	683b      	ldr	r3, [r7, #0]
 8022e8a:	7e1b      	ldrb	r3, [r3, #24]
 8022e8c:	b2db      	uxtb	r3, r3
 8022e8e:	f003 0307 	and.w	r3, r3, #7
 8022e92:	3302      	adds	r3, #2
 8022e94:	2201      	movs	r2, #1
 8022e96:	fa02 f303 	lsl.w	r3, r2, r3
 8022e9a:	687a      	ldr	r2, [r7, #4]
 8022e9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8022e9e:	fb03 f202 	mul.w	r2, r3, r2
 8022ea2:	687b      	ldr	r3, [r7, #4]
 8022ea4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8022ea6:	683b      	ldr	r3, [r7, #0]
 8022ea8:	7a1b      	ldrb	r3, [r3, #8]
 8022eaa:	b2db      	uxtb	r3, r3
 8022eac:	f003 030f 	and.w	r3, r3, #15
 8022eb0:	2201      	movs	r2, #1
 8022eb2:	409a      	lsls	r2, r3
 8022eb4:	687b      	ldr	r3, [r7, #4]
 8022eb6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8022eb8:	687b      	ldr	r3, [r7, #4]
 8022eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8022ebc:	687a      	ldr	r2, [r7, #4]
 8022ebe:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8022ec0:	0a52      	lsrs	r2, r2, #9
 8022ec2:	fb03 f202 	mul.w	r2, r3, r2
 8022ec6:	687b      	ldr	r3, [r7, #4]
 8022ec8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8022eca:	687b      	ldr	r3, [r7, #4]
 8022ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022ed0:	655a      	str	r2, [r3, #84]	@ 0x54
 8022ed2:	e031      	b.n	8022f38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8022ed4:	687b      	ldr	r3, [r7, #4]
 8022ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022ed8:	2b01      	cmp	r3, #1
 8022eda:	d11d      	bne.n	8022f18 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8022edc:	687b      	ldr	r3, [r7, #4]
 8022ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022ee0:	041b      	lsls	r3, r3, #16
 8022ee2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8022ee6:	687b      	ldr	r3, [r7, #4]
 8022ee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022eea:	0c1b      	lsrs	r3, r3, #16
 8022eec:	431a      	orrs	r2, r3
 8022eee:	683b      	ldr	r3, [r7, #0]
 8022ef0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8022ef2:	683b      	ldr	r3, [r7, #0]
 8022ef4:	691b      	ldr	r3, [r3, #16]
 8022ef6:	3301      	adds	r3, #1
 8022ef8:	029a      	lsls	r2, r3, #10
 8022efa:	687b      	ldr	r3, [r7, #4]
 8022efc:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8022efe:	687b      	ldr	r3, [r7, #4]
 8022f00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8022f02:	687b      	ldr	r3, [r7, #4]
 8022f04:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8022f06:	687b      	ldr	r3, [r7, #4]
 8022f08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022f0c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8022f0e:	687b      	ldr	r3, [r7, #4]
 8022f10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8022f12:	687b      	ldr	r3, [r7, #4]
 8022f14:	655a      	str	r2, [r3, #84]	@ 0x54
 8022f16:	e00f      	b.n	8022f38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8022f18:	687b      	ldr	r3, [r7, #4]
 8022f1a:	681b      	ldr	r3, [r3, #0]
 8022f1c:	4a58      	ldr	r2, [pc, #352]	@ (8023080 <HAL_SD_GetCardCSD+0x344>)
 8022f1e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8022f20:	687b      	ldr	r3, [r7, #4]
 8022f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022f24:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8022f28:	687b      	ldr	r3, [r7, #4]
 8022f2a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8022f2c:	687b      	ldr	r3, [r7, #4]
 8022f2e:	2201      	movs	r2, #1
 8022f30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8022f34:	2301      	movs	r3, #1
 8022f36:	e09d      	b.n	8023074 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8022f38:	687b      	ldr	r3, [r7, #4]
 8022f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022f3c:	0b9b      	lsrs	r3, r3, #14
 8022f3e:	b2db      	uxtb	r3, r3
 8022f40:	f003 0301 	and.w	r3, r3, #1
 8022f44:	b2da      	uxtb	r2, r3
 8022f46:	683b      	ldr	r3, [r7, #0]
 8022f48:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8022f4a:	687b      	ldr	r3, [r7, #4]
 8022f4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022f4e:	09db      	lsrs	r3, r3, #7
 8022f50:	b2db      	uxtb	r3, r3
 8022f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022f56:	b2da      	uxtb	r2, r3
 8022f58:	683b      	ldr	r3, [r7, #0]
 8022f5a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8022f5c:	687b      	ldr	r3, [r7, #4]
 8022f5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022f60:	b2db      	uxtb	r3, r3
 8022f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022f66:	b2da      	uxtb	r2, r3
 8022f68:	683b      	ldr	r3, [r7, #0]
 8022f6a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8022f6c:	687b      	ldr	r3, [r7, #4]
 8022f6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022f70:	0fdb      	lsrs	r3, r3, #31
 8022f72:	b2da      	uxtb	r2, r3
 8022f74:	683b      	ldr	r3, [r7, #0]
 8022f76:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8022f78:	687b      	ldr	r3, [r7, #4]
 8022f7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022f7c:	0f5b      	lsrs	r3, r3, #29
 8022f7e:	b2db      	uxtb	r3, r3
 8022f80:	f003 0303 	and.w	r3, r3, #3
 8022f84:	b2da      	uxtb	r2, r3
 8022f86:	683b      	ldr	r3, [r7, #0]
 8022f88:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8022f8a:	687b      	ldr	r3, [r7, #4]
 8022f8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022f8e:	0e9b      	lsrs	r3, r3, #26
 8022f90:	b2db      	uxtb	r3, r3
 8022f92:	f003 0307 	and.w	r3, r3, #7
 8022f96:	b2da      	uxtb	r2, r3
 8022f98:	683b      	ldr	r3, [r7, #0]
 8022f9a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8022f9c:	687b      	ldr	r3, [r7, #4]
 8022f9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022fa0:	0d9b      	lsrs	r3, r3, #22
 8022fa2:	b2db      	uxtb	r3, r3
 8022fa4:	f003 030f 	and.w	r3, r3, #15
 8022fa8:	b2da      	uxtb	r2, r3
 8022faa:	683b      	ldr	r3, [r7, #0]
 8022fac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8022fae:	687b      	ldr	r3, [r7, #4]
 8022fb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022fb2:	0d5b      	lsrs	r3, r3, #21
 8022fb4:	b2db      	uxtb	r3, r3
 8022fb6:	f003 0301 	and.w	r3, r3, #1
 8022fba:	b2da      	uxtb	r2, r3
 8022fbc:	683b      	ldr	r3, [r7, #0]
 8022fbe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8022fc2:	683b      	ldr	r3, [r7, #0]
 8022fc4:	2200      	movs	r2, #0
 8022fc6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8022fca:	687b      	ldr	r3, [r7, #4]
 8022fcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022fce:	0c1b      	lsrs	r3, r3, #16
 8022fd0:	b2db      	uxtb	r3, r3
 8022fd2:	f003 0301 	and.w	r3, r3, #1
 8022fd6:	b2da      	uxtb	r2, r3
 8022fd8:	683b      	ldr	r3, [r7, #0]
 8022fda:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8022fde:	687b      	ldr	r3, [r7, #4]
 8022fe0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022fe2:	0bdb      	lsrs	r3, r3, #15
 8022fe4:	b2db      	uxtb	r3, r3
 8022fe6:	f003 0301 	and.w	r3, r3, #1
 8022fea:	b2da      	uxtb	r2, r3
 8022fec:	683b      	ldr	r3, [r7, #0]
 8022fee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8022ff2:	687b      	ldr	r3, [r7, #4]
 8022ff4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8022ff6:	0b9b      	lsrs	r3, r3, #14
 8022ff8:	b2db      	uxtb	r3, r3
 8022ffa:	f003 0301 	and.w	r3, r3, #1
 8022ffe:	b2da      	uxtb	r2, r3
 8023000:	683b      	ldr	r3, [r7, #0]
 8023002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8023006:	687b      	ldr	r3, [r7, #4]
 8023008:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802300a:	0b5b      	lsrs	r3, r3, #13
 802300c:	b2db      	uxtb	r3, r3
 802300e:	f003 0301 	and.w	r3, r3, #1
 8023012:	b2da      	uxtb	r2, r3
 8023014:	683b      	ldr	r3, [r7, #0]
 8023016:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 802301a:	687b      	ldr	r3, [r7, #4]
 802301c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802301e:	0b1b      	lsrs	r3, r3, #12
 8023020:	b2db      	uxtb	r3, r3
 8023022:	f003 0301 	and.w	r3, r3, #1
 8023026:	b2da      	uxtb	r2, r3
 8023028:	683b      	ldr	r3, [r7, #0]
 802302a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 802302e:	687b      	ldr	r3, [r7, #4]
 8023030:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023032:	0a9b      	lsrs	r3, r3, #10
 8023034:	b2db      	uxtb	r3, r3
 8023036:	f003 0303 	and.w	r3, r3, #3
 802303a:	b2da      	uxtb	r2, r3
 802303c:	683b      	ldr	r3, [r7, #0]
 802303e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8023042:	687b      	ldr	r3, [r7, #4]
 8023044:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023046:	0a1b      	lsrs	r3, r3, #8
 8023048:	b2db      	uxtb	r3, r3
 802304a:	f003 0303 	and.w	r3, r3, #3
 802304e:	b2da      	uxtb	r2, r3
 8023050:	683b      	ldr	r3, [r7, #0]
 8023052:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8023056:	687b      	ldr	r3, [r7, #4]
 8023058:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802305a:	085b      	lsrs	r3, r3, #1
 802305c:	b2db      	uxtb	r3, r3
 802305e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8023062:	b2da      	uxtb	r2, r3
 8023064:	683b      	ldr	r3, [r7, #0]
 8023066:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 802306a:	683b      	ldr	r3, [r7, #0]
 802306c:	2201      	movs	r2, #1
 802306e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8023072:	2300      	movs	r3, #0
}
 8023074:	4618      	mov	r0, r3
 8023076:	370c      	adds	r7, #12
 8023078:	46bd      	mov	sp, r7
 802307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802307e:	4770      	bx	lr
 8023080:	1fe00fff 	.word	0x1fe00fff

08023084 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8023084:	b580      	push	{r7, lr}
 8023086:	b094      	sub	sp, #80	@ 0x50
 8023088:	af00      	add	r7, sp, #0
 802308a:	6078      	str	r0, [r7, #4]
 802308c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 802308e:	2300      	movs	r3, #0
 8023090:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8023094:	687b      	ldr	r3, [r7, #4]
 8023096:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 802309a:	b2db      	uxtb	r3, r3
 802309c:	2b03      	cmp	r3, #3
 802309e:	d101      	bne.n	80230a4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80230a0:	2301      	movs	r3, #1
 80230a2:	e0a7      	b.n	80231f4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80230a4:	f107 0308 	add.w	r3, r7, #8
 80230a8:	4619      	mov	r1, r3
 80230aa:	6878      	ldr	r0, [r7, #4]
 80230ac:	f000 fb62 	bl	8023774 <SD_SendSDStatus>
 80230b0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80230b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80230b4:	2b00      	cmp	r3, #0
 80230b6:	d011      	beq.n	80230dc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80230b8:	687b      	ldr	r3, [r7, #4]
 80230ba:	681b      	ldr	r3, [r3, #0]
 80230bc:	4a4f      	ldr	r2, [pc, #316]	@ (80231fc <HAL_SD_GetCardStatus+0x178>)
 80230be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80230c0:	687b      	ldr	r3, [r7, #4]
 80230c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80230c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80230c6:	431a      	orrs	r2, r3
 80230c8:	687b      	ldr	r3, [r7, #4]
 80230ca:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80230cc:	687b      	ldr	r3, [r7, #4]
 80230ce:	2201      	movs	r2, #1
 80230d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80230d4:	2301      	movs	r3, #1
 80230d6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80230da:	e070      	b.n	80231be <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80230dc:	68bb      	ldr	r3, [r7, #8]
 80230de:	099b      	lsrs	r3, r3, #6
 80230e0:	b2db      	uxtb	r3, r3
 80230e2:	f003 0303 	and.w	r3, r3, #3
 80230e6:	b2da      	uxtb	r2, r3
 80230e8:	683b      	ldr	r3, [r7, #0]
 80230ea:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80230ec:	68bb      	ldr	r3, [r7, #8]
 80230ee:	095b      	lsrs	r3, r3, #5
 80230f0:	b2db      	uxtb	r3, r3
 80230f2:	f003 0301 	and.w	r3, r3, #1
 80230f6:	b2da      	uxtb	r2, r3
 80230f8:	683b      	ldr	r3, [r7, #0]
 80230fa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80230fc:	68bb      	ldr	r3, [r7, #8]
 80230fe:	0a1b      	lsrs	r3, r3, #8
 8023100:	b29b      	uxth	r3, r3
 8023102:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8023106:	b29a      	uxth	r2, r3
 8023108:	68bb      	ldr	r3, [r7, #8]
 802310a:	0e1b      	lsrs	r3, r3, #24
 802310c:	b29b      	uxth	r3, r3
 802310e:	4313      	orrs	r3, r2
 8023110:	b29a      	uxth	r2, r3
 8023112:	683b      	ldr	r3, [r7, #0]
 8023114:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8023116:	68fb      	ldr	r3, [r7, #12]
 8023118:	061a      	lsls	r2, r3, #24
 802311a:	68fb      	ldr	r3, [r7, #12]
 802311c:	021b      	lsls	r3, r3, #8
 802311e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8023122:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8023124:	68fb      	ldr	r3, [r7, #12]
 8023126:	0a1b      	lsrs	r3, r3, #8
 8023128:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 802312c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 802312e:	68fb      	ldr	r3, [r7, #12]
 8023130:	0e1b      	lsrs	r3, r3, #24
 8023132:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8023134:	683b      	ldr	r3, [r7, #0]
 8023136:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8023138:	693b      	ldr	r3, [r7, #16]
 802313a:	b2da      	uxtb	r2, r3
 802313c:	683b      	ldr	r3, [r7, #0]
 802313e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8023140:	693b      	ldr	r3, [r7, #16]
 8023142:	0a1b      	lsrs	r3, r3, #8
 8023144:	b2da      	uxtb	r2, r3
 8023146:	683b      	ldr	r3, [r7, #0]
 8023148:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 802314a:	693b      	ldr	r3, [r7, #16]
 802314c:	0d1b      	lsrs	r3, r3, #20
 802314e:	b2db      	uxtb	r3, r3
 8023150:	f003 030f 	and.w	r3, r3, #15
 8023154:	b2da      	uxtb	r2, r3
 8023156:	683b      	ldr	r3, [r7, #0]
 8023158:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 802315a:	693b      	ldr	r3, [r7, #16]
 802315c:	0c1b      	lsrs	r3, r3, #16
 802315e:	b29b      	uxth	r3, r3
 8023160:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8023164:	b29a      	uxth	r2, r3
 8023166:	697b      	ldr	r3, [r7, #20]
 8023168:	b29b      	uxth	r3, r3
 802316a:	b2db      	uxtb	r3, r3
 802316c:	b29b      	uxth	r3, r3
 802316e:	4313      	orrs	r3, r2
 8023170:	b29a      	uxth	r2, r3
 8023172:	683b      	ldr	r3, [r7, #0]
 8023174:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8023176:	697b      	ldr	r3, [r7, #20]
 8023178:	0a9b      	lsrs	r3, r3, #10
 802317a:	b2db      	uxtb	r3, r3
 802317c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8023180:	b2da      	uxtb	r2, r3
 8023182:	683b      	ldr	r3, [r7, #0]
 8023184:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8023186:	697b      	ldr	r3, [r7, #20]
 8023188:	0a1b      	lsrs	r3, r3, #8
 802318a:	b2db      	uxtb	r3, r3
 802318c:	f003 0303 	and.w	r3, r3, #3
 8023190:	b2da      	uxtb	r2, r3
 8023192:	683b      	ldr	r3, [r7, #0]
 8023194:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8023196:	697b      	ldr	r3, [r7, #20]
 8023198:	091b      	lsrs	r3, r3, #4
 802319a:	b2db      	uxtb	r3, r3
 802319c:	f003 030f 	and.w	r3, r3, #15
 80231a0:	b2da      	uxtb	r2, r3
 80231a2:	683b      	ldr	r3, [r7, #0]
 80231a4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80231a6:	697b      	ldr	r3, [r7, #20]
 80231a8:	b2db      	uxtb	r3, r3
 80231aa:	f003 030f 	and.w	r3, r3, #15
 80231ae:	b2da      	uxtb	r2, r3
 80231b0:	683b      	ldr	r3, [r7, #0]
 80231b2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80231b4:	69bb      	ldr	r3, [r7, #24]
 80231b6:	0e1b      	lsrs	r3, r3, #24
 80231b8:	b2da      	uxtb	r2, r3
 80231ba:	683b      	ldr	r3, [r7, #0]
 80231bc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80231be:	687b      	ldr	r3, [r7, #4]
 80231c0:	681b      	ldr	r3, [r3, #0]
 80231c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80231c6:	4618      	mov	r0, r3
 80231c8:	f002 f97c 	bl	80254c4 <SDMMC_CmdBlockLength>
 80231cc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80231ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80231d0:	2b00      	cmp	r3, #0
 80231d2:	d00d      	beq.n	80231f0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80231d4:	687b      	ldr	r3, [r7, #4]
 80231d6:	681b      	ldr	r3, [r3, #0]
 80231d8:	4a08      	ldr	r2, [pc, #32]	@ (80231fc <HAL_SD_GetCardStatus+0x178>)
 80231da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80231dc:	687b      	ldr	r3, [r7, #4]
 80231de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80231e0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80231e2:	687b      	ldr	r3, [r7, #4]
 80231e4:	2201      	movs	r2, #1
 80231e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80231ea:	2301      	movs	r3, #1
 80231ec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80231f0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80231f4:	4618      	mov	r0, r3
 80231f6:	3750      	adds	r7, #80	@ 0x50
 80231f8:	46bd      	mov	sp, r7
 80231fa:	bd80      	pop	{r7, pc}
 80231fc:	1fe00fff 	.word	0x1fe00fff

08023200 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8023200:	b480      	push	{r7}
 8023202:	b083      	sub	sp, #12
 8023204:	af00      	add	r7, sp, #0
 8023206:	6078      	str	r0, [r7, #4]
 8023208:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 802320a:	687b      	ldr	r3, [r7, #4]
 802320c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802320e:	683b      	ldr	r3, [r7, #0]
 8023210:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8023212:	687b      	ldr	r3, [r7, #4]
 8023214:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8023216:	683b      	ldr	r3, [r7, #0]
 8023218:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 802321a:	687b      	ldr	r3, [r7, #4]
 802321c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 802321e:	683b      	ldr	r3, [r7, #0]
 8023220:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8023222:	687b      	ldr	r3, [r7, #4]
 8023224:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8023226:	683b      	ldr	r3, [r7, #0]
 8023228:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 802322a:	687b      	ldr	r3, [r7, #4]
 802322c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 802322e:	683b      	ldr	r3, [r7, #0]
 8023230:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8023232:	687b      	ldr	r3, [r7, #4]
 8023234:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8023236:	683b      	ldr	r3, [r7, #0]
 8023238:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 802323a:	687b      	ldr	r3, [r7, #4]
 802323c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 802323e:	683b      	ldr	r3, [r7, #0]
 8023240:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8023242:	687b      	ldr	r3, [r7, #4]
 8023244:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8023246:	683b      	ldr	r3, [r7, #0]
 8023248:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 802324a:	2300      	movs	r3, #0
}
 802324c:	4618      	mov	r0, r3
 802324e:	370c      	adds	r7, #12
 8023250:	46bd      	mov	sp, r7
 8023252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023256:	4770      	bx	lr

08023258 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8023258:	b590      	push	{r4, r7, lr}
 802325a:	b08d      	sub	sp, #52	@ 0x34
 802325c:	af02      	add	r7, sp, #8
 802325e:	6078      	str	r0, [r7, #4]
 8023260:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8023262:	2300      	movs	r3, #0
 8023264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8023268:	687b      	ldr	r3, [r7, #4]
 802326a:	2203      	movs	r2, #3
 802326c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8023270:	687b      	ldr	r3, [r7, #4]
 8023272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023274:	2b03      	cmp	r3, #3
 8023276:	d02e      	beq.n	80232d6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8023278:	683b      	ldr	r3, [r7, #0]
 802327a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802327e:	d106      	bne.n	802328e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8023280:	687b      	ldr	r3, [r7, #4]
 8023282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023284:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8023288:	687b      	ldr	r3, [r7, #4]
 802328a:	635a      	str	r2, [r3, #52]	@ 0x34
 802328c:	e029      	b.n	80232e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 802328e:	683b      	ldr	r3, [r7, #0]
 8023290:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8023294:	d10a      	bne.n	80232ac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8023296:	6878      	ldr	r0, [r7, #4]
 8023298:	f000 fb64 	bl	8023964 <SD_WideBus_Enable>
 802329c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 802329e:	687b      	ldr	r3, [r7, #4]
 80232a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80232a2:	6a3b      	ldr	r3, [r7, #32]
 80232a4:	431a      	orrs	r2, r3
 80232a6:	687b      	ldr	r3, [r7, #4]
 80232a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80232aa:	e01a      	b.n	80232e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80232ac:	683b      	ldr	r3, [r7, #0]
 80232ae:	2b00      	cmp	r3, #0
 80232b0:	d10a      	bne.n	80232c8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80232b2:	6878      	ldr	r0, [r7, #4]
 80232b4:	f000 fba1 	bl	80239fa <SD_WideBus_Disable>
 80232b8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80232ba:	687b      	ldr	r3, [r7, #4]
 80232bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80232be:	6a3b      	ldr	r3, [r7, #32]
 80232c0:	431a      	orrs	r2, r3
 80232c2:	687b      	ldr	r3, [r7, #4]
 80232c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80232c6:	e00c      	b.n	80232e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80232c8:	687b      	ldr	r3, [r7, #4]
 80232ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80232cc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80232d0:	687b      	ldr	r3, [r7, #4]
 80232d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80232d4:	e005      	b.n	80232e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80232d6:	687b      	ldr	r3, [r7, #4]
 80232d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80232da:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80232de:	687b      	ldr	r3, [r7, #4]
 80232e0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80232e2:	687b      	ldr	r3, [r7, #4]
 80232e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80232e6:	2b00      	cmp	r3, #0
 80232e8:	d007      	beq.n	80232fa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80232ea:	687b      	ldr	r3, [r7, #4]
 80232ec:	681b      	ldr	r3, [r3, #0]
 80232ee:	4a5f      	ldr	r2, [pc, #380]	@ (802346c <HAL_SD_ConfigWideBusOperation+0x214>)
 80232f0:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80232f2:	2301      	movs	r3, #1
 80232f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80232f8:	e096      	b.n	8023428 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80232fa:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80232fe:	f04f 0100 	mov.w	r1, #0
 8023302:	f7fd fdf5 	bl	8020ef0 <HAL_RCCEx_GetPeriphCLKFreq>
 8023306:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8023308:	69fb      	ldr	r3, [r7, #28]
 802330a:	2b00      	cmp	r3, #0
 802330c:	f000 8083 	beq.w	8023416 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8023310:	687b      	ldr	r3, [r7, #4]
 8023312:	685b      	ldr	r3, [r3, #4]
 8023314:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8023316:	687b      	ldr	r3, [r7, #4]
 8023318:	689b      	ldr	r3, [r3, #8]
 802331a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 802331c:	683b      	ldr	r3, [r7, #0]
 802331e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8023320:	687b      	ldr	r3, [r7, #4]
 8023322:	691b      	ldr	r3, [r3, #16]
 8023324:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8023326:	687b      	ldr	r3, [r7, #4]
 8023328:	695a      	ldr	r2, [r3, #20]
 802332a:	69fb      	ldr	r3, [r7, #28]
 802332c:	4950      	ldr	r1, [pc, #320]	@ (8023470 <HAL_SD_ConfigWideBusOperation+0x218>)
 802332e:	fba1 1303 	umull	r1, r3, r1, r3
 8023332:	0e1b      	lsrs	r3, r3, #24
 8023334:	429a      	cmp	r2, r3
 8023336:	d303      	bcc.n	8023340 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8023338:	687b      	ldr	r3, [r7, #4]
 802333a:	695b      	ldr	r3, [r3, #20]
 802333c:	61bb      	str	r3, [r7, #24]
 802333e:	e05a      	b.n	80233f6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8023340:	687b      	ldr	r3, [r7, #4]
 8023342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8023344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023348:	d103      	bne.n	8023352 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 802334a:	687b      	ldr	r3, [r7, #4]
 802334c:	695b      	ldr	r3, [r3, #20]
 802334e:	61bb      	str	r3, [r7, #24]
 8023350:	e051      	b.n	80233f6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8023352:	687b      	ldr	r3, [r7, #4]
 8023354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8023356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802335a:	d126      	bne.n	80233aa <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 802335c:	687b      	ldr	r3, [r7, #4]
 802335e:	695b      	ldr	r3, [r3, #20]
 8023360:	2b00      	cmp	r3, #0
 8023362:	d10e      	bne.n	8023382 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8023364:	69fb      	ldr	r3, [r7, #28]
 8023366:	4a43      	ldr	r2, [pc, #268]	@ (8023474 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8023368:	4293      	cmp	r3, r2
 802336a:	d906      	bls.n	802337a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 802336c:	69fb      	ldr	r3, [r7, #28]
 802336e:	4a40      	ldr	r2, [pc, #256]	@ (8023470 <HAL_SD_ConfigWideBusOperation+0x218>)
 8023370:	fba2 2303 	umull	r2, r3, r2, r3
 8023374:	0e5b      	lsrs	r3, r3, #25
 8023376:	61bb      	str	r3, [r7, #24]
 8023378:	e03d      	b.n	80233f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 802337a:	687b      	ldr	r3, [r7, #4]
 802337c:	695b      	ldr	r3, [r3, #20]
 802337e:	61bb      	str	r3, [r7, #24]
 8023380:	e039      	b.n	80233f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8023382:	687b      	ldr	r3, [r7, #4]
 8023384:	695b      	ldr	r3, [r3, #20]
 8023386:	005b      	lsls	r3, r3, #1
 8023388:	69fa      	ldr	r2, [r7, #28]
 802338a:	fbb2 f3f3 	udiv	r3, r2, r3
 802338e:	4a39      	ldr	r2, [pc, #228]	@ (8023474 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8023390:	4293      	cmp	r3, r2
 8023392:	d906      	bls.n	80233a2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8023394:	69fb      	ldr	r3, [r7, #28]
 8023396:	4a36      	ldr	r2, [pc, #216]	@ (8023470 <HAL_SD_ConfigWideBusOperation+0x218>)
 8023398:	fba2 2303 	umull	r2, r3, r2, r3
 802339c:	0e5b      	lsrs	r3, r3, #25
 802339e:	61bb      	str	r3, [r7, #24]
 80233a0:	e029      	b.n	80233f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80233a2:	687b      	ldr	r3, [r7, #4]
 80233a4:	695b      	ldr	r3, [r3, #20]
 80233a6:	61bb      	str	r3, [r7, #24]
 80233a8:	e025      	b.n	80233f6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80233aa:	687b      	ldr	r3, [r7, #4]
 80233ac:	695b      	ldr	r3, [r3, #20]
 80233ae:	2b00      	cmp	r3, #0
 80233b0:	d10e      	bne.n	80233d0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80233b2:	69fb      	ldr	r3, [r7, #28]
 80233b4:	4a30      	ldr	r2, [pc, #192]	@ (8023478 <HAL_SD_ConfigWideBusOperation+0x220>)
 80233b6:	4293      	cmp	r3, r2
 80233b8:	d906      	bls.n	80233c8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80233ba:	69fb      	ldr	r3, [r7, #28]
 80233bc:	4a2c      	ldr	r2, [pc, #176]	@ (8023470 <HAL_SD_ConfigWideBusOperation+0x218>)
 80233be:	fba2 2303 	umull	r2, r3, r2, r3
 80233c2:	0e1b      	lsrs	r3, r3, #24
 80233c4:	61bb      	str	r3, [r7, #24]
 80233c6:	e016      	b.n	80233f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80233c8:	687b      	ldr	r3, [r7, #4]
 80233ca:	695b      	ldr	r3, [r3, #20]
 80233cc:	61bb      	str	r3, [r7, #24]
 80233ce:	e012      	b.n	80233f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80233d0:	687b      	ldr	r3, [r7, #4]
 80233d2:	695b      	ldr	r3, [r3, #20]
 80233d4:	005b      	lsls	r3, r3, #1
 80233d6:	69fa      	ldr	r2, [r7, #28]
 80233d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80233dc:	4a26      	ldr	r2, [pc, #152]	@ (8023478 <HAL_SD_ConfigWideBusOperation+0x220>)
 80233de:	4293      	cmp	r3, r2
 80233e0:	d906      	bls.n	80233f0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80233e2:	69fb      	ldr	r3, [r7, #28]
 80233e4:	4a22      	ldr	r2, [pc, #136]	@ (8023470 <HAL_SD_ConfigWideBusOperation+0x218>)
 80233e6:	fba2 2303 	umull	r2, r3, r2, r3
 80233ea:	0e1b      	lsrs	r3, r3, #24
 80233ec:	61bb      	str	r3, [r7, #24]
 80233ee:	e002      	b.n	80233f6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80233f0:	687b      	ldr	r3, [r7, #4]
 80233f2:	695b      	ldr	r3, [r3, #20]
 80233f4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80233f6:	687b      	ldr	r3, [r7, #4]
 80233f8:	681c      	ldr	r4, [r3, #0]
 80233fa:	466a      	mov	r2, sp
 80233fc:	f107 0314 	add.w	r3, r7, #20
 8023400:	e893 0003 	ldmia.w	r3, {r0, r1}
 8023404:	e882 0003 	stmia.w	r2, {r0, r1}
 8023408:	f107 0308 	add.w	r3, r7, #8
 802340c:	cb0e      	ldmia	r3, {r1, r2, r3}
 802340e:	4620      	mov	r0, r4
 8023410:	f001 ff7a 	bl	8025308 <SDMMC_Init>
 8023414:	e008      	b.n	8023428 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8023416:	687b      	ldr	r3, [r7, #4]
 8023418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802341a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 802341e:	687b      	ldr	r3, [r7, #4]
 8023420:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8023422:	2301      	movs	r3, #1
 8023424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8023428:	687b      	ldr	r3, [r7, #4]
 802342a:	681b      	ldr	r3, [r3, #0]
 802342c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8023430:	4618      	mov	r0, r3
 8023432:	f002 f847 	bl	80254c4 <SDMMC_CmdBlockLength>
 8023436:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8023438:	6a3b      	ldr	r3, [r7, #32]
 802343a:	2b00      	cmp	r3, #0
 802343c:	d00c      	beq.n	8023458 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802343e:	687b      	ldr	r3, [r7, #4]
 8023440:	681b      	ldr	r3, [r3, #0]
 8023442:	4a0a      	ldr	r2, [pc, #40]	@ (802346c <HAL_SD_ConfigWideBusOperation+0x214>)
 8023444:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8023446:	687b      	ldr	r3, [r7, #4]
 8023448:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802344a:	6a3b      	ldr	r3, [r7, #32]
 802344c:	431a      	orrs	r2, r3
 802344e:	687b      	ldr	r3, [r7, #4]
 8023450:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8023452:	2301      	movs	r3, #1
 8023454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8023458:	687b      	ldr	r3, [r7, #4]
 802345a:	2201      	movs	r2, #1
 802345c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8023460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8023464:	4618      	mov	r0, r3
 8023466:	372c      	adds	r7, #44	@ 0x2c
 8023468:	46bd      	mov	sp, r7
 802346a:	bd90      	pop	{r4, r7, pc}
 802346c:	1fe00fff 	.word	0x1fe00fff
 8023470:	55e63b89 	.word	0x55e63b89
 8023474:	02faf080 	.word	0x02faf080
 8023478:	017d7840 	.word	0x017d7840

0802347c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 802347c:	b580      	push	{r7, lr}
 802347e:	b086      	sub	sp, #24
 8023480:	af00      	add	r7, sp, #0
 8023482:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8023484:	2300      	movs	r3, #0
 8023486:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8023488:	f107 030c 	add.w	r3, r7, #12
 802348c:	4619      	mov	r1, r3
 802348e:	6878      	ldr	r0, [r7, #4]
 8023490:	f000 fa40 	bl	8023914 <SD_SendStatus>
 8023494:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8023496:	697b      	ldr	r3, [r7, #20]
 8023498:	2b00      	cmp	r3, #0
 802349a:	d005      	beq.n	80234a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 802349c:	687b      	ldr	r3, [r7, #4]
 802349e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80234a0:	697b      	ldr	r3, [r7, #20]
 80234a2:	431a      	orrs	r2, r3
 80234a4:	687b      	ldr	r3, [r7, #4]
 80234a6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80234a8:	68fb      	ldr	r3, [r7, #12]
 80234aa:	0a5b      	lsrs	r3, r3, #9
 80234ac:	f003 030f 	and.w	r3, r3, #15
 80234b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80234b2:	693b      	ldr	r3, [r7, #16]
}
 80234b4:	4618      	mov	r0, r3
 80234b6:	3718      	adds	r7, #24
 80234b8:	46bd      	mov	sp, r7
 80234ba:	bd80      	pop	{r7, pc}

080234bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80234bc:	b580      	push	{r7, lr}
 80234be:	b090      	sub	sp, #64	@ 0x40
 80234c0:	af00      	add	r7, sp, #0
 80234c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80234c4:	2300      	movs	r3, #0
 80234c6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80234c8:	f7f8 fbe8 	bl	801bc9c <HAL_GetTick>
 80234cc:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80234ce:	687b      	ldr	r3, [r7, #4]
 80234d0:	681b      	ldr	r3, [r3, #0]
 80234d2:	4618      	mov	r0, r3
 80234d4:	f001 ff71 	bl	80253ba <SDMMC_GetPowerState>
 80234d8:	4603      	mov	r3, r0
 80234da:	2b00      	cmp	r3, #0
 80234dc:	d102      	bne.n	80234e4 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80234de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80234e2:	e0b5      	b.n	8023650 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80234e4:	687b      	ldr	r3, [r7, #4]
 80234e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80234e8:	2b03      	cmp	r3, #3
 80234ea:	d02e      	beq.n	802354a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80234ec:	687b      	ldr	r3, [r7, #4]
 80234ee:	681b      	ldr	r3, [r3, #0]
 80234f0:	4618      	mov	r0, r3
 80234f2:	f002 f9bc 	bl	802586e <SDMMC_CmdSendCID>
 80234f6:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80234f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80234fa:	2b00      	cmp	r3, #0
 80234fc:	d001      	beq.n	8023502 <SD_InitCard+0x46>
    {
      return errorstate;
 80234fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023500:	e0a6      	b.n	8023650 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8023502:	687b      	ldr	r3, [r7, #4]
 8023504:	681b      	ldr	r3, [r3, #0]
 8023506:	2100      	movs	r1, #0
 8023508:	4618      	mov	r0, r3
 802350a:	f001 ff9c 	bl	8025446 <SDMMC_GetResponse>
 802350e:	4602      	mov	r2, r0
 8023510:	687b      	ldr	r3, [r7, #4]
 8023512:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8023514:	687b      	ldr	r3, [r7, #4]
 8023516:	681b      	ldr	r3, [r3, #0]
 8023518:	2104      	movs	r1, #4
 802351a:	4618      	mov	r0, r3
 802351c:	f001 ff93 	bl	8025446 <SDMMC_GetResponse>
 8023520:	4602      	mov	r2, r0
 8023522:	687b      	ldr	r3, [r7, #4]
 8023524:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8023526:	687b      	ldr	r3, [r7, #4]
 8023528:	681b      	ldr	r3, [r3, #0]
 802352a:	2108      	movs	r1, #8
 802352c:	4618      	mov	r0, r3
 802352e:	f001 ff8a 	bl	8025446 <SDMMC_GetResponse>
 8023532:	4602      	mov	r2, r0
 8023534:	687b      	ldr	r3, [r7, #4]
 8023536:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8023538:	687b      	ldr	r3, [r7, #4]
 802353a:	681b      	ldr	r3, [r3, #0]
 802353c:	210c      	movs	r1, #12
 802353e:	4618      	mov	r0, r3
 8023540:	f001 ff81 	bl	8025446 <SDMMC_GetResponse>
 8023544:	4602      	mov	r2, r0
 8023546:	687b      	ldr	r3, [r7, #4]
 8023548:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 802354a:	687b      	ldr	r3, [r7, #4]
 802354c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802354e:	2b03      	cmp	r3, #3
 8023550:	d01d      	beq.n	802358e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8023552:	e019      	b.n	8023588 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8023554:	687b      	ldr	r3, [r7, #4]
 8023556:	681b      	ldr	r3, [r3, #0]
 8023558:	f107 020a 	add.w	r2, r7, #10
 802355c:	4611      	mov	r1, r2
 802355e:	4618      	mov	r0, r3
 8023560:	f002 f9c4 	bl	80258ec <SDMMC_CmdSetRelAdd>
 8023564:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8023566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023568:	2b00      	cmp	r3, #0
 802356a:	d001      	beq.n	8023570 <SD_InitCard+0xb4>
      {
        return errorstate;
 802356c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802356e:	e06f      	b.n	8023650 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8023570:	f7f8 fb94 	bl	801bc9c <HAL_GetTick>
 8023574:	4602      	mov	r2, r0
 8023576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023578:	1ad3      	subs	r3, r2, r3
 802357a:	f241 3287 	movw	r2, #4999	@ 0x1387
 802357e:	4293      	cmp	r3, r2
 8023580:	d902      	bls.n	8023588 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8023582:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8023586:	e063      	b.n	8023650 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8023588:	897b      	ldrh	r3, [r7, #10]
 802358a:	2b00      	cmp	r3, #0
 802358c:	d0e2      	beq.n	8023554 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 802358e:	687b      	ldr	r3, [r7, #4]
 8023590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023592:	2b03      	cmp	r3, #3
 8023594:	d036      	beq.n	8023604 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8023596:	897b      	ldrh	r3, [r7, #10]
 8023598:	461a      	mov	r2, r3
 802359a:	687b      	ldr	r3, [r7, #4]
 802359c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802359e:	687b      	ldr	r3, [r7, #4]
 80235a0:	681a      	ldr	r2, [r3, #0]
 80235a2:	687b      	ldr	r3, [r7, #4]
 80235a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80235a6:	041b      	lsls	r3, r3, #16
 80235a8:	4619      	mov	r1, r3
 80235aa:	4610      	mov	r0, r2
 80235ac:	f002 f97e 	bl	80258ac <SDMMC_CmdSendCSD>
 80235b0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80235b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80235b4:	2b00      	cmp	r3, #0
 80235b6:	d001      	beq.n	80235bc <SD_InitCard+0x100>
    {
      return errorstate;
 80235b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80235ba:	e049      	b.n	8023650 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80235bc:	687b      	ldr	r3, [r7, #4]
 80235be:	681b      	ldr	r3, [r3, #0]
 80235c0:	2100      	movs	r1, #0
 80235c2:	4618      	mov	r0, r3
 80235c4:	f001 ff3f 	bl	8025446 <SDMMC_GetResponse>
 80235c8:	4602      	mov	r2, r0
 80235ca:	687b      	ldr	r3, [r7, #4]
 80235cc:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80235ce:	687b      	ldr	r3, [r7, #4]
 80235d0:	681b      	ldr	r3, [r3, #0]
 80235d2:	2104      	movs	r1, #4
 80235d4:	4618      	mov	r0, r3
 80235d6:	f001 ff36 	bl	8025446 <SDMMC_GetResponse>
 80235da:	4602      	mov	r2, r0
 80235dc:	687b      	ldr	r3, [r7, #4]
 80235de:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80235e0:	687b      	ldr	r3, [r7, #4]
 80235e2:	681b      	ldr	r3, [r3, #0]
 80235e4:	2108      	movs	r1, #8
 80235e6:	4618      	mov	r0, r3
 80235e8:	f001 ff2d 	bl	8025446 <SDMMC_GetResponse>
 80235ec:	4602      	mov	r2, r0
 80235ee:	687b      	ldr	r3, [r7, #4]
 80235f0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80235f2:	687b      	ldr	r3, [r7, #4]
 80235f4:	681b      	ldr	r3, [r3, #0]
 80235f6:	210c      	movs	r1, #12
 80235f8:	4618      	mov	r0, r3
 80235fa:	f001 ff24 	bl	8025446 <SDMMC_GetResponse>
 80235fe:	4602      	mov	r2, r0
 8023600:	687b      	ldr	r3, [r7, #4]
 8023602:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8023604:	687b      	ldr	r3, [r7, #4]
 8023606:	681b      	ldr	r3, [r3, #0]
 8023608:	2104      	movs	r1, #4
 802360a:	4618      	mov	r0, r3
 802360c:	f001 ff1b 	bl	8025446 <SDMMC_GetResponse>
 8023610:	4603      	mov	r3, r0
 8023612:	0d1a      	lsrs	r2, r3, #20
 8023614:	687b      	ldr	r3, [r7, #4]
 8023616:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8023618:	f107 030c 	add.w	r3, r7, #12
 802361c:	4619      	mov	r1, r3
 802361e:	6878      	ldr	r0, [r7, #4]
 8023620:	f7ff fb8c 	bl	8022d3c <HAL_SD_GetCardCSD>
 8023624:	4603      	mov	r3, r0
 8023626:	2b00      	cmp	r3, #0
 8023628:	d002      	beq.n	8023630 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 802362a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 802362e:	e00f      	b.n	8023650 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8023630:	687b      	ldr	r3, [r7, #4]
 8023632:	681a      	ldr	r2, [r3, #0]
 8023634:	687b      	ldr	r3, [r7, #4]
 8023636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023638:	041b      	lsls	r3, r3, #16
 802363a:	4619      	mov	r1, r3
 802363c:	4610      	mov	r0, r2
 802363e:	f002 f82d 	bl	802569c <SDMMC_CmdSelDesel>
 8023642:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8023644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023646:	2b00      	cmp	r3, #0
 8023648:	d001      	beq.n	802364e <SD_InitCard+0x192>
  {
    return errorstate;
 802364a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802364c:	e000      	b.n	8023650 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 802364e:	2300      	movs	r3, #0
}
 8023650:	4618      	mov	r0, r3
 8023652:	3740      	adds	r7, #64	@ 0x40
 8023654:	46bd      	mov	sp, r7
 8023656:	bd80      	pop	{r7, pc}

08023658 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8023658:	b580      	push	{r7, lr}
 802365a:	b086      	sub	sp, #24
 802365c:	af00      	add	r7, sp, #0
 802365e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8023660:	2300      	movs	r3, #0
 8023662:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8023664:	2300      	movs	r3, #0
 8023666:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8023668:	2300      	movs	r3, #0
 802366a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 802366c:	687b      	ldr	r3, [r7, #4]
 802366e:	681b      	ldr	r3, [r3, #0]
 8023670:	4618      	mov	r0, r3
 8023672:	f002 f836 	bl	80256e2 <SDMMC_CmdGoIdleState>
 8023676:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8023678:	68fb      	ldr	r3, [r7, #12]
 802367a:	2b00      	cmp	r3, #0
 802367c:	d001      	beq.n	8023682 <SD_PowerON+0x2a>
  {
    return errorstate;
 802367e:	68fb      	ldr	r3, [r7, #12]
 8023680:	e072      	b.n	8023768 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8023682:	687b      	ldr	r3, [r7, #4]
 8023684:	681b      	ldr	r3, [r3, #0]
 8023686:	4618      	mov	r0, r3
 8023688:	f002 f849 	bl	802571e <SDMMC_CmdOperCond>
 802368c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 802368e:	68fb      	ldr	r3, [r7, #12]
 8023690:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8023694:	d10d      	bne.n	80236b2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8023696:	687b      	ldr	r3, [r7, #4]
 8023698:	2200      	movs	r2, #0
 802369a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 802369c:	687b      	ldr	r3, [r7, #4]
 802369e:	681b      	ldr	r3, [r3, #0]
 80236a0:	4618      	mov	r0, r3
 80236a2:	f002 f81e 	bl	80256e2 <SDMMC_CmdGoIdleState>
 80236a6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80236a8:	68fb      	ldr	r3, [r7, #12]
 80236aa:	2b00      	cmp	r3, #0
 80236ac:	d004      	beq.n	80236b8 <SD_PowerON+0x60>
    {
      return errorstate;
 80236ae:	68fb      	ldr	r3, [r7, #12]
 80236b0:	e05a      	b.n	8023768 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80236b2:	687b      	ldr	r3, [r7, #4]
 80236b4:	2201      	movs	r2, #1
 80236b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80236b8:	687b      	ldr	r3, [r7, #4]
 80236ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80236bc:	2b01      	cmp	r3, #1
 80236be:	d137      	bne.n	8023730 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80236c0:	687b      	ldr	r3, [r7, #4]
 80236c2:	681b      	ldr	r3, [r3, #0]
 80236c4:	2100      	movs	r1, #0
 80236c6:	4618      	mov	r0, r3
 80236c8:	f002 f849 	bl	802575e <SDMMC_CmdAppCommand>
 80236cc:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80236ce:	68fb      	ldr	r3, [r7, #12]
 80236d0:	2b00      	cmp	r3, #0
 80236d2:	d02d      	beq.n	8023730 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80236d4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80236d8:	e046      	b.n	8023768 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80236da:	687b      	ldr	r3, [r7, #4]
 80236dc:	681b      	ldr	r3, [r3, #0]
 80236de:	2100      	movs	r1, #0
 80236e0:	4618      	mov	r0, r3
 80236e2:	f002 f83c 	bl	802575e <SDMMC_CmdAppCommand>
 80236e6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80236e8:	68fb      	ldr	r3, [r7, #12]
 80236ea:	2b00      	cmp	r3, #0
 80236ec:	d001      	beq.n	80236f2 <SD_PowerON+0x9a>
    {
      return errorstate;
 80236ee:	68fb      	ldr	r3, [r7, #12]
 80236f0:	e03a      	b.n	8023768 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80236f2:	687b      	ldr	r3, [r7, #4]
 80236f4:	681b      	ldr	r3, [r3, #0]
 80236f6:	491e      	ldr	r1, [pc, #120]	@ (8023770 <SD_PowerON+0x118>)
 80236f8:	4618      	mov	r0, r3
 80236fa:	f002 f853 	bl	80257a4 <SDMMC_CmdAppOperCommand>
 80236fe:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8023700:	68fb      	ldr	r3, [r7, #12]
 8023702:	2b00      	cmp	r3, #0
 8023704:	d002      	beq.n	802370c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8023706:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 802370a:	e02d      	b.n	8023768 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 802370c:	687b      	ldr	r3, [r7, #4]
 802370e:	681b      	ldr	r3, [r3, #0]
 8023710:	2100      	movs	r1, #0
 8023712:	4618      	mov	r0, r3
 8023714:	f001 fe97 	bl	8025446 <SDMMC_GetResponse>
 8023718:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 802371a:	697b      	ldr	r3, [r7, #20]
 802371c:	0fdb      	lsrs	r3, r3, #31
 802371e:	2b01      	cmp	r3, #1
 8023720:	d101      	bne.n	8023726 <SD_PowerON+0xce>
 8023722:	2301      	movs	r3, #1
 8023724:	e000      	b.n	8023728 <SD_PowerON+0xd0>
 8023726:	2300      	movs	r3, #0
 8023728:	613b      	str	r3, [r7, #16]

    count++;
 802372a:	68bb      	ldr	r3, [r7, #8]
 802372c:	3301      	adds	r3, #1
 802372e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8023730:	68bb      	ldr	r3, [r7, #8]
 8023732:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8023736:	4293      	cmp	r3, r2
 8023738:	d802      	bhi.n	8023740 <SD_PowerON+0xe8>
 802373a:	693b      	ldr	r3, [r7, #16]
 802373c:	2b00      	cmp	r3, #0
 802373e:	d0cc      	beq.n	80236da <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8023740:	68bb      	ldr	r3, [r7, #8]
 8023742:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8023746:	4293      	cmp	r3, r2
 8023748:	d902      	bls.n	8023750 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 802374a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 802374e:	e00b      	b.n	8023768 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8023750:	687b      	ldr	r3, [r7, #4]
 8023752:	2200      	movs	r2, #0
 8023754:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8023756:	697b      	ldr	r3, [r7, #20]
 8023758:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 802375c:	2b00      	cmp	r3, #0
 802375e:	d002      	beq.n	8023766 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8023760:	687b      	ldr	r3, [r7, #4]
 8023762:	2201      	movs	r2, #1
 8023764:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8023766:	2300      	movs	r3, #0
}
 8023768:	4618      	mov	r0, r3
 802376a:	3718      	adds	r7, #24
 802376c:	46bd      	mov	sp, r7
 802376e:	bd80      	pop	{r7, pc}
 8023770:	c1100000 	.word	0xc1100000

08023774 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8023774:	b580      	push	{r7, lr}
 8023776:	b08c      	sub	sp, #48	@ 0x30
 8023778:	af00      	add	r7, sp, #0
 802377a:	6078      	str	r0, [r7, #4]
 802377c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 802377e:	f7f8 fa8d 	bl	801bc9c <HAL_GetTick>
 8023782:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8023784:	683b      	ldr	r3, [r7, #0]
 8023786:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8023788:	687b      	ldr	r3, [r7, #4]
 802378a:	681b      	ldr	r3, [r3, #0]
 802378c:	2100      	movs	r1, #0
 802378e:	4618      	mov	r0, r3
 8023790:	f001 fe59 	bl	8025446 <SDMMC_GetResponse>
 8023794:	4603      	mov	r3, r0
 8023796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802379a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802379e:	d102      	bne.n	80237a6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80237a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80237a4:	e0b0      	b.n	8023908 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80237a6:	687b      	ldr	r3, [r7, #4]
 80237a8:	681b      	ldr	r3, [r3, #0]
 80237aa:	2140      	movs	r1, #64	@ 0x40
 80237ac:	4618      	mov	r0, r3
 80237ae:	f001 fe89 	bl	80254c4 <SDMMC_CmdBlockLength>
 80237b2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80237b4:	6a3b      	ldr	r3, [r7, #32]
 80237b6:	2b00      	cmp	r3, #0
 80237b8:	d005      	beq.n	80237c6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80237ba:	687b      	ldr	r3, [r7, #4]
 80237bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80237be:	687b      	ldr	r3, [r7, #4]
 80237c0:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80237c2:	6a3b      	ldr	r3, [r7, #32]
 80237c4:	e0a0      	b.n	8023908 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80237c6:	687b      	ldr	r3, [r7, #4]
 80237c8:	681a      	ldr	r2, [r3, #0]
 80237ca:	687b      	ldr	r3, [r7, #4]
 80237cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80237ce:	041b      	lsls	r3, r3, #16
 80237d0:	4619      	mov	r1, r3
 80237d2:	4610      	mov	r0, r2
 80237d4:	f001 ffc3 	bl	802575e <SDMMC_CmdAppCommand>
 80237d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80237da:	6a3b      	ldr	r3, [r7, #32]
 80237dc:	2b00      	cmp	r3, #0
 80237de:	d005      	beq.n	80237ec <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80237e0:	687b      	ldr	r3, [r7, #4]
 80237e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80237e4:	687b      	ldr	r3, [r7, #4]
 80237e6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80237e8:	6a3b      	ldr	r3, [r7, #32]
 80237ea:	e08d      	b.n	8023908 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80237ec:	f04f 33ff 	mov.w	r3, #4294967295
 80237f0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80237f2:	2340      	movs	r3, #64	@ 0x40
 80237f4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80237f6:	2360      	movs	r3, #96	@ 0x60
 80237f8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80237fa:	2302      	movs	r3, #2
 80237fc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80237fe:	2300      	movs	r3, #0
 8023800:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8023802:	2301      	movs	r3, #1
 8023804:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8023806:	687b      	ldr	r3, [r7, #4]
 8023808:	681b      	ldr	r3, [r3, #0]
 802380a:	f107 0208 	add.w	r2, r7, #8
 802380e:	4611      	mov	r1, r2
 8023810:	4618      	mov	r0, r3
 8023812:	f001 fe2b 	bl	802546c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8023816:	687b      	ldr	r3, [r7, #4]
 8023818:	681b      	ldr	r3, [r3, #0]
 802381a:	4618      	mov	r0, r3
 802381c:	f002 f8ab 	bl	8025976 <SDMMC_CmdStatusRegister>
 8023820:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8023822:	6a3b      	ldr	r3, [r7, #32]
 8023824:	2b00      	cmp	r3, #0
 8023826:	d02b      	beq.n	8023880 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8023828:	687b      	ldr	r3, [r7, #4]
 802382a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802382c:	687b      	ldr	r3, [r7, #4]
 802382e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8023830:	6a3b      	ldr	r3, [r7, #32]
 8023832:	e069      	b.n	8023908 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8023834:	687b      	ldr	r3, [r7, #4]
 8023836:	681b      	ldr	r3, [r3, #0]
 8023838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802383a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 802383e:	2b00      	cmp	r3, #0
 8023840:	d013      	beq.n	802386a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8023842:	2300      	movs	r3, #0
 8023844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8023846:	e00d      	b.n	8023864 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8023848:	687b      	ldr	r3, [r7, #4]
 802384a:	681b      	ldr	r3, [r3, #0]
 802384c:	4618      	mov	r0, r3
 802384e:	f001 fd85 	bl	802535c <SDMMC_ReadFIFO>
 8023852:	4602      	mov	r2, r0
 8023854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023856:	601a      	str	r2, [r3, #0]
        pData++;
 8023858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802385a:	3304      	adds	r3, #4
 802385c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 802385e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023860:	3301      	adds	r3, #1
 8023862:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8023864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023866:	2b07      	cmp	r3, #7
 8023868:	d9ee      	bls.n	8023848 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 802386a:	f7f8 fa17 	bl	801bc9c <HAL_GetTick>
 802386e:	4602      	mov	r2, r0
 8023870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023872:	1ad3      	subs	r3, r2, r3
 8023874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023878:	d102      	bne.n	8023880 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 802387a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 802387e:	e043      	b.n	8023908 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8023880:	687b      	ldr	r3, [r7, #4]
 8023882:	681b      	ldr	r3, [r3, #0]
 8023884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023886:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 802388a:	2b00      	cmp	r3, #0
 802388c:	d0d2      	beq.n	8023834 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 802388e:	687b      	ldr	r3, [r7, #4]
 8023890:	681b      	ldr	r3, [r3, #0]
 8023892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023894:	f003 0308 	and.w	r3, r3, #8
 8023898:	2b00      	cmp	r3, #0
 802389a:	d001      	beq.n	80238a0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 802389c:	2308      	movs	r3, #8
 802389e:	e033      	b.n	8023908 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80238a0:	687b      	ldr	r3, [r7, #4]
 80238a2:	681b      	ldr	r3, [r3, #0]
 80238a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80238a6:	f003 0302 	and.w	r3, r3, #2
 80238aa:	2b00      	cmp	r3, #0
 80238ac:	d001      	beq.n	80238b2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80238ae:	2302      	movs	r3, #2
 80238b0:	e02a      	b.n	8023908 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80238b2:	687b      	ldr	r3, [r7, #4]
 80238b4:	681b      	ldr	r3, [r3, #0]
 80238b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80238b8:	f003 0320 	and.w	r3, r3, #32
 80238bc:	2b00      	cmp	r3, #0
 80238be:	d017      	beq.n	80238f0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80238c0:	2320      	movs	r3, #32
 80238c2:	e021      	b.n	8023908 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80238c4:	687b      	ldr	r3, [r7, #4]
 80238c6:	681b      	ldr	r3, [r3, #0]
 80238c8:	4618      	mov	r0, r3
 80238ca:	f001 fd47 	bl	802535c <SDMMC_ReadFIFO>
 80238ce:	4602      	mov	r2, r0
 80238d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80238d2:	601a      	str	r2, [r3, #0]
    pData++;
 80238d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80238d6:	3304      	adds	r3, #4
 80238d8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80238da:	f7f8 f9df 	bl	801bc9c <HAL_GetTick>
 80238de:	4602      	mov	r2, r0
 80238e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80238e2:	1ad3      	subs	r3, r2, r3
 80238e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80238e8:	d102      	bne.n	80238f0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80238ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80238ee:	e00b      	b.n	8023908 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80238f0:	687b      	ldr	r3, [r7, #4]
 80238f2:	681b      	ldr	r3, [r3, #0]
 80238f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80238f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80238fa:	2b00      	cmp	r3, #0
 80238fc:	d1e2      	bne.n	80238c4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80238fe:	687b      	ldr	r3, [r7, #4]
 8023900:	681b      	ldr	r3, [r3, #0]
 8023902:	4a03      	ldr	r2, [pc, #12]	@ (8023910 <SD_SendSDStatus+0x19c>)
 8023904:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8023906:	2300      	movs	r3, #0
}
 8023908:	4618      	mov	r0, r3
 802390a:	3730      	adds	r7, #48	@ 0x30
 802390c:	46bd      	mov	sp, r7
 802390e:	bd80      	pop	{r7, pc}
 8023910:	18000f3a 	.word	0x18000f3a

08023914 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8023914:	b580      	push	{r7, lr}
 8023916:	b084      	sub	sp, #16
 8023918:	af00      	add	r7, sp, #0
 802391a:	6078      	str	r0, [r7, #4]
 802391c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 802391e:	683b      	ldr	r3, [r7, #0]
 8023920:	2b00      	cmp	r3, #0
 8023922:	d102      	bne.n	802392a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8023924:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8023928:	e018      	b.n	802395c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802392a:	687b      	ldr	r3, [r7, #4]
 802392c:	681a      	ldr	r2, [r3, #0]
 802392e:	687b      	ldr	r3, [r7, #4]
 8023930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023932:	041b      	lsls	r3, r3, #16
 8023934:	4619      	mov	r1, r3
 8023936:	4610      	mov	r0, r2
 8023938:	f001 fffa 	bl	8025930 <SDMMC_CmdSendStatus>
 802393c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 802393e:	68fb      	ldr	r3, [r7, #12]
 8023940:	2b00      	cmp	r3, #0
 8023942:	d001      	beq.n	8023948 <SD_SendStatus+0x34>
  {
    return errorstate;
 8023944:	68fb      	ldr	r3, [r7, #12]
 8023946:	e009      	b.n	802395c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8023948:	687b      	ldr	r3, [r7, #4]
 802394a:	681b      	ldr	r3, [r3, #0]
 802394c:	2100      	movs	r1, #0
 802394e:	4618      	mov	r0, r3
 8023950:	f001 fd79 	bl	8025446 <SDMMC_GetResponse>
 8023954:	4602      	mov	r2, r0
 8023956:	683b      	ldr	r3, [r7, #0]
 8023958:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 802395a:	2300      	movs	r3, #0
}
 802395c:	4618      	mov	r0, r3
 802395e:	3710      	adds	r7, #16
 8023960:	46bd      	mov	sp, r7
 8023962:	bd80      	pop	{r7, pc}

08023964 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8023964:	b580      	push	{r7, lr}
 8023966:	b086      	sub	sp, #24
 8023968:	af00      	add	r7, sp, #0
 802396a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 802396c:	2300      	movs	r3, #0
 802396e:	60fb      	str	r3, [r7, #12]
 8023970:	2300      	movs	r3, #0
 8023972:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8023974:	687b      	ldr	r3, [r7, #4]
 8023976:	681b      	ldr	r3, [r3, #0]
 8023978:	2100      	movs	r1, #0
 802397a:	4618      	mov	r0, r3
 802397c:	f001 fd63 	bl	8025446 <SDMMC_GetResponse>
 8023980:	4603      	mov	r3, r0
 8023982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8023986:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 802398a:	d102      	bne.n	8023992 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 802398c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8023990:	e02f      	b.n	80239f2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8023992:	f107 030c 	add.w	r3, r7, #12
 8023996:	4619      	mov	r1, r3
 8023998:	6878      	ldr	r0, [r7, #4]
 802399a:	f000 f879 	bl	8023a90 <SD_FindSCR>
 802399e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80239a0:	697b      	ldr	r3, [r7, #20]
 80239a2:	2b00      	cmp	r3, #0
 80239a4:	d001      	beq.n	80239aa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80239a6:	697b      	ldr	r3, [r7, #20]
 80239a8:	e023      	b.n	80239f2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80239aa:	693b      	ldr	r3, [r7, #16]
 80239ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80239b0:	2b00      	cmp	r3, #0
 80239b2:	d01c      	beq.n	80239ee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80239b4:	687b      	ldr	r3, [r7, #4]
 80239b6:	681a      	ldr	r2, [r3, #0]
 80239b8:	687b      	ldr	r3, [r7, #4]
 80239ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80239bc:	041b      	lsls	r3, r3, #16
 80239be:	4619      	mov	r1, r3
 80239c0:	4610      	mov	r0, r2
 80239c2:	f001 fecc 	bl	802575e <SDMMC_CmdAppCommand>
 80239c6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80239c8:	697b      	ldr	r3, [r7, #20]
 80239ca:	2b00      	cmp	r3, #0
 80239cc:	d001      	beq.n	80239d2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80239ce:	697b      	ldr	r3, [r7, #20]
 80239d0:	e00f      	b.n	80239f2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80239d2:	687b      	ldr	r3, [r7, #4]
 80239d4:	681b      	ldr	r3, [r3, #0]
 80239d6:	2102      	movs	r1, #2
 80239d8:	4618      	mov	r0, r3
 80239da:	f001 ff03 	bl	80257e4 <SDMMC_CmdBusWidth>
 80239de:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80239e0:	697b      	ldr	r3, [r7, #20]
 80239e2:	2b00      	cmp	r3, #0
 80239e4:	d001      	beq.n	80239ea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80239e6:	697b      	ldr	r3, [r7, #20]
 80239e8:	e003      	b.n	80239f2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80239ea:	2300      	movs	r3, #0
 80239ec:	e001      	b.n	80239f2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80239ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80239f2:	4618      	mov	r0, r3
 80239f4:	3718      	adds	r7, #24
 80239f6:	46bd      	mov	sp, r7
 80239f8:	bd80      	pop	{r7, pc}

080239fa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80239fa:	b580      	push	{r7, lr}
 80239fc:	b086      	sub	sp, #24
 80239fe:	af00      	add	r7, sp, #0
 8023a00:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8023a02:	2300      	movs	r3, #0
 8023a04:	60fb      	str	r3, [r7, #12]
 8023a06:	2300      	movs	r3, #0
 8023a08:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8023a0a:	687b      	ldr	r3, [r7, #4]
 8023a0c:	681b      	ldr	r3, [r3, #0]
 8023a0e:	2100      	movs	r1, #0
 8023a10:	4618      	mov	r0, r3
 8023a12:	f001 fd18 	bl	8025446 <SDMMC_GetResponse>
 8023a16:	4603      	mov	r3, r0
 8023a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8023a1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8023a20:	d102      	bne.n	8023a28 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8023a22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8023a26:	e02f      	b.n	8023a88 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8023a28:	f107 030c 	add.w	r3, r7, #12
 8023a2c:	4619      	mov	r1, r3
 8023a2e:	6878      	ldr	r0, [r7, #4]
 8023a30:	f000 f82e 	bl	8023a90 <SD_FindSCR>
 8023a34:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8023a36:	697b      	ldr	r3, [r7, #20]
 8023a38:	2b00      	cmp	r3, #0
 8023a3a:	d001      	beq.n	8023a40 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8023a3c:	697b      	ldr	r3, [r7, #20]
 8023a3e:	e023      	b.n	8023a88 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8023a40:	693b      	ldr	r3, [r7, #16]
 8023a42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8023a46:	2b00      	cmp	r3, #0
 8023a48:	d01c      	beq.n	8023a84 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8023a4a:	687b      	ldr	r3, [r7, #4]
 8023a4c:	681a      	ldr	r2, [r3, #0]
 8023a4e:	687b      	ldr	r3, [r7, #4]
 8023a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023a52:	041b      	lsls	r3, r3, #16
 8023a54:	4619      	mov	r1, r3
 8023a56:	4610      	mov	r0, r2
 8023a58:	f001 fe81 	bl	802575e <SDMMC_CmdAppCommand>
 8023a5c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8023a5e:	697b      	ldr	r3, [r7, #20]
 8023a60:	2b00      	cmp	r3, #0
 8023a62:	d001      	beq.n	8023a68 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8023a64:	697b      	ldr	r3, [r7, #20]
 8023a66:	e00f      	b.n	8023a88 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8023a68:	687b      	ldr	r3, [r7, #4]
 8023a6a:	681b      	ldr	r3, [r3, #0]
 8023a6c:	2100      	movs	r1, #0
 8023a6e:	4618      	mov	r0, r3
 8023a70:	f001 feb8 	bl	80257e4 <SDMMC_CmdBusWidth>
 8023a74:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8023a76:	697b      	ldr	r3, [r7, #20]
 8023a78:	2b00      	cmp	r3, #0
 8023a7a:	d001      	beq.n	8023a80 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8023a7c:	697b      	ldr	r3, [r7, #20]
 8023a7e:	e003      	b.n	8023a88 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8023a80:	2300      	movs	r3, #0
 8023a82:	e001      	b.n	8023a88 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8023a84:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8023a88:	4618      	mov	r0, r3
 8023a8a:	3718      	adds	r7, #24
 8023a8c:	46bd      	mov	sp, r7
 8023a8e:	bd80      	pop	{r7, pc}

08023a90 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8023a90:	b580      	push	{r7, lr}
 8023a92:	b08e      	sub	sp, #56	@ 0x38
 8023a94:	af00      	add	r7, sp, #0
 8023a96:	6078      	str	r0, [r7, #4]
 8023a98:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8023a9a:	f7f8 f8ff 	bl	801bc9c <HAL_GetTick>
 8023a9e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8023aa0:	2300      	movs	r3, #0
 8023aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8023aa4:	2300      	movs	r3, #0
 8023aa6:	60bb      	str	r3, [r7, #8]
 8023aa8:	2300      	movs	r3, #0
 8023aaa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8023aac:	683b      	ldr	r3, [r7, #0]
 8023aae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8023ab0:	687b      	ldr	r3, [r7, #4]
 8023ab2:	681b      	ldr	r3, [r3, #0]
 8023ab4:	2108      	movs	r1, #8
 8023ab6:	4618      	mov	r0, r3
 8023ab8:	f001 fd04 	bl	80254c4 <SDMMC_CmdBlockLength>
 8023abc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8023abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023ac0:	2b00      	cmp	r3, #0
 8023ac2:	d001      	beq.n	8023ac8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8023ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023ac6:	e0ad      	b.n	8023c24 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8023ac8:	687b      	ldr	r3, [r7, #4]
 8023aca:	681a      	ldr	r2, [r3, #0]
 8023acc:	687b      	ldr	r3, [r7, #4]
 8023ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023ad0:	041b      	lsls	r3, r3, #16
 8023ad2:	4619      	mov	r1, r3
 8023ad4:	4610      	mov	r0, r2
 8023ad6:	f001 fe42 	bl	802575e <SDMMC_CmdAppCommand>
 8023ada:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8023adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023ade:	2b00      	cmp	r3, #0
 8023ae0:	d001      	beq.n	8023ae6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8023ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023ae4:	e09e      	b.n	8023c24 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8023ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8023aea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8023aec:	2308      	movs	r3, #8
 8023aee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8023af0:	2330      	movs	r3, #48	@ 0x30
 8023af2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8023af4:	2302      	movs	r3, #2
 8023af6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8023af8:	2300      	movs	r3, #0
 8023afa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8023afc:	2301      	movs	r3, #1
 8023afe:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8023b00:	687b      	ldr	r3, [r7, #4]
 8023b02:	681b      	ldr	r3, [r3, #0]
 8023b04:	f107 0210 	add.w	r2, r7, #16
 8023b08:	4611      	mov	r1, r2
 8023b0a:	4618      	mov	r0, r3
 8023b0c:	f001 fcae 	bl	802546c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8023b10:	687b      	ldr	r3, [r7, #4]
 8023b12:	681b      	ldr	r3, [r3, #0]
 8023b14:	4618      	mov	r0, r3
 8023b16:	f001 fe88 	bl	802582a <SDMMC_CmdSendSCR>
 8023b1a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8023b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023b1e:	2b00      	cmp	r3, #0
 8023b20:	d027      	beq.n	8023b72 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8023b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023b24:	e07e      	b.n	8023c24 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8023b26:	687b      	ldr	r3, [r7, #4]
 8023b28:	681b      	ldr	r3, [r3, #0]
 8023b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023b2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8023b30:	2b00      	cmp	r3, #0
 8023b32:	d113      	bne.n	8023b5c <SD_FindSCR+0xcc>
 8023b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023b36:	2b00      	cmp	r3, #0
 8023b38:	d110      	bne.n	8023b5c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8023b3a:	687b      	ldr	r3, [r7, #4]
 8023b3c:	681b      	ldr	r3, [r3, #0]
 8023b3e:	4618      	mov	r0, r3
 8023b40:	f001 fc0c 	bl	802535c <SDMMC_ReadFIFO>
 8023b44:	4603      	mov	r3, r0
 8023b46:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8023b48:	687b      	ldr	r3, [r7, #4]
 8023b4a:	681b      	ldr	r3, [r3, #0]
 8023b4c:	4618      	mov	r0, r3
 8023b4e:	f001 fc05 	bl	802535c <SDMMC_ReadFIFO>
 8023b52:	4603      	mov	r3, r0
 8023b54:	60fb      	str	r3, [r7, #12]
      index++;
 8023b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023b58:	3301      	adds	r3, #1
 8023b5a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8023b5c:	f7f8 f89e 	bl	801bc9c <HAL_GetTick>
 8023b60:	4602      	mov	r2, r0
 8023b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023b64:	1ad3      	subs	r3, r2, r3
 8023b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023b6a:	d102      	bne.n	8023b72 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8023b6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8023b70:	e058      	b.n	8023c24 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8023b72:	687b      	ldr	r3, [r7, #4]
 8023b74:	681b      	ldr	r3, [r3, #0]
 8023b76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023b78:	f240 532a 	movw	r3, #1322	@ 0x52a
 8023b7c:	4013      	ands	r3, r2
 8023b7e:	2b00      	cmp	r3, #0
 8023b80:	d0d1      	beq.n	8023b26 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8023b82:	687b      	ldr	r3, [r7, #4]
 8023b84:	681b      	ldr	r3, [r3, #0]
 8023b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023b88:	f003 0308 	and.w	r3, r3, #8
 8023b8c:	2b00      	cmp	r3, #0
 8023b8e:	d005      	beq.n	8023b9c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8023b90:	687b      	ldr	r3, [r7, #4]
 8023b92:	681b      	ldr	r3, [r3, #0]
 8023b94:	2208      	movs	r2, #8
 8023b96:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8023b98:	2308      	movs	r3, #8
 8023b9a:	e043      	b.n	8023c24 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8023b9c:	687b      	ldr	r3, [r7, #4]
 8023b9e:	681b      	ldr	r3, [r3, #0]
 8023ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023ba2:	f003 0302 	and.w	r3, r3, #2
 8023ba6:	2b00      	cmp	r3, #0
 8023ba8:	d005      	beq.n	8023bb6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8023baa:	687b      	ldr	r3, [r7, #4]
 8023bac:	681b      	ldr	r3, [r3, #0]
 8023bae:	2202      	movs	r2, #2
 8023bb0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8023bb2:	2302      	movs	r3, #2
 8023bb4:	e036      	b.n	8023c24 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8023bb6:	687b      	ldr	r3, [r7, #4]
 8023bb8:	681b      	ldr	r3, [r3, #0]
 8023bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8023bbc:	f003 0320 	and.w	r3, r3, #32
 8023bc0:	2b00      	cmp	r3, #0
 8023bc2:	d005      	beq.n	8023bd0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8023bc4:	687b      	ldr	r3, [r7, #4]
 8023bc6:	681b      	ldr	r3, [r3, #0]
 8023bc8:	2220      	movs	r2, #32
 8023bca:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8023bcc:	2320      	movs	r3, #32
 8023bce:	e029      	b.n	8023c24 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8023bd0:	687b      	ldr	r3, [r7, #4]
 8023bd2:	681b      	ldr	r3, [r3, #0]
 8023bd4:	4a15      	ldr	r2, [pc, #84]	@ (8023c2c <SD_FindSCR+0x19c>)
 8023bd6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8023bd8:	68fb      	ldr	r3, [r7, #12]
 8023bda:	061a      	lsls	r2, r3, #24
 8023bdc:	68fb      	ldr	r3, [r7, #12]
 8023bde:	021b      	lsls	r3, r3, #8
 8023be0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8023be4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8023be6:	68fb      	ldr	r3, [r7, #12]
 8023be8:	0a1b      	lsrs	r3, r3, #8
 8023bea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8023bee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8023bf0:	68fb      	ldr	r3, [r7, #12]
 8023bf2:	0e1b      	lsrs	r3, r3, #24
 8023bf4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8023bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023bf8:	601a      	str	r2, [r3, #0]
    scr++;
 8023bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023bfc:	3304      	adds	r3, #4
 8023bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8023c00:	68bb      	ldr	r3, [r7, #8]
 8023c02:	061a      	lsls	r2, r3, #24
 8023c04:	68bb      	ldr	r3, [r7, #8]
 8023c06:	021b      	lsls	r3, r3, #8
 8023c08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8023c0c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8023c0e:	68bb      	ldr	r3, [r7, #8]
 8023c10:	0a1b      	lsrs	r3, r3, #8
 8023c12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8023c16:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8023c18:	68bb      	ldr	r3, [r7, #8]
 8023c1a:	0e1b      	lsrs	r3, r3, #24
 8023c1c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8023c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023c20:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8023c22:	2300      	movs	r3, #0
}
 8023c24:	4618      	mov	r0, r3
 8023c26:	3738      	adds	r7, #56	@ 0x38
 8023c28:	46bd      	mov	sp, r7
 8023c2a:	bd80      	pop	{r7, pc}
 8023c2c:	18000f3a 	.word	0x18000f3a

08023c30 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8023c30:	b580      	push	{r7, lr}
 8023c32:	b086      	sub	sp, #24
 8023c34:	af00      	add	r7, sp, #0
 8023c36:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8023c38:	687b      	ldr	r3, [r7, #4]
 8023c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023c3c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8023c3e:	687b      	ldr	r3, [r7, #4]
 8023c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023c42:	2b1f      	cmp	r3, #31
 8023c44:	d936      	bls.n	8023cb4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8023c46:	2300      	movs	r3, #0
 8023c48:	617b      	str	r3, [r7, #20]
 8023c4a:	e027      	b.n	8023c9c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8023c4c:	687b      	ldr	r3, [r7, #4]
 8023c4e:	681b      	ldr	r3, [r3, #0]
 8023c50:	4618      	mov	r0, r3
 8023c52:	f001 fb83 	bl	802535c <SDMMC_ReadFIFO>
 8023c56:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8023c58:	68fb      	ldr	r3, [r7, #12]
 8023c5a:	b2da      	uxtb	r2, r3
 8023c5c:	693b      	ldr	r3, [r7, #16]
 8023c5e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8023c60:	693b      	ldr	r3, [r7, #16]
 8023c62:	3301      	adds	r3, #1
 8023c64:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8023c66:	68fb      	ldr	r3, [r7, #12]
 8023c68:	0a1b      	lsrs	r3, r3, #8
 8023c6a:	b2da      	uxtb	r2, r3
 8023c6c:	693b      	ldr	r3, [r7, #16]
 8023c6e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8023c70:	693b      	ldr	r3, [r7, #16]
 8023c72:	3301      	adds	r3, #1
 8023c74:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8023c76:	68fb      	ldr	r3, [r7, #12]
 8023c78:	0c1b      	lsrs	r3, r3, #16
 8023c7a:	b2da      	uxtb	r2, r3
 8023c7c:	693b      	ldr	r3, [r7, #16]
 8023c7e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8023c80:	693b      	ldr	r3, [r7, #16]
 8023c82:	3301      	adds	r3, #1
 8023c84:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8023c86:	68fb      	ldr	r3, [r7, #12]
 8023c88:	0e1b      	lsrs	r3, r3, #24
 8023c8a:	b2da      	uxtb	r2, r3
 8023c8c:	693b      	ldr	r3, [r7, #16]
 8023c8e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8023c90:	693b      	ldr	r3, [r7, #16]
 8023c92:	3301      	adds	r3, #1
 8023c94:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8023c96:	697b      	ldr	r3, [r7, #20]
 8023c98:	3301      	adds	r3, #1
 8023c9a:	617b      	str	r3, [r7, #20]
 8023c9c:	697b      	ldr	r3, [r7, #20]
 8023c9e:	2b07      	cmp	r3, #7
 8023ca0:	d9d4      	bls.n	8023c4c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8023ca2:	687b      	ldr	r3, [r7, #4]
 8023ca4:	693a      	ldr	r2, [r7, #16]
 8023ca6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8023ca8:	687b      	ldr	r3, [r7, #4]
 8023caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023cac:	f1a3 0220 	sub.w	r2, r3, #32
 8023cb0:	687b      	ldr	r3, [r7, #4]
 8023cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8023cb4:	bf00      	nop
 8023cb6:	3718      	adds	r7, #24
 8023cb8:	46bd      	mov	sp, r7
 8023cba:	bd80      	pop	{r7, pc}

08023cbc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8023cbc:	b580      	push	{r7, lr}
 8023cbe:	b086      	sub	sp, #24
 8023cc0:	af00      	add	r7, sp, #0
 8023cc2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8023cc4:	687b      	ldr	r3, [r7, #4]
 8023cc6:	69db      	ldr	r3, [r3, #28]
 8023cc8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8023cca:	687b      	ldr	r3, [r7, #4]
 8023ccc:	6a1b      	ldr	r3, [r3, #32]
 8023cce:	2b1f      	cmp	r3, #31
 8023cd0:	d93a      	bls.n	8023d48 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8023cd2:	2300      	movs	r3, #0
 8023cd4:	617b      	str	r3, [r7, #20]
 8023cd6:	e02b      	b.n	8023d30 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8023cd8:	693b      	ldr	r3, [r7, #16]
 8023cda:	781b      	ldrb	r3, [r3, #0]
 8023cdc:	60fb      	str	r3, [r7, #12]
      tmp++;
 8023cde:	693b      	ldr	r3, [r7, #16]
 8023ce0:	3301      	adds	r3, #1
 8023ce2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8023ce4:	693b      	ldr	r3, [r7, #16]
 8023ce6:	781b      	ldrb	r3, [r3, #0]
 8023ce8:	021a      	lsls	r2, r3, #8
 8023cea:	68fb      	ldr	r3, [r7, #12]
 8023cec:	4313      	orrs	r3, r2
 8023cee:	60fb      	str	r3, [r7, #12]
      tmp++;
 8023cf0:	693b      	ldr	r3, [r7, #16]
 8023cf2:	3301      	adds	r3, #1
 8023cf4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8023cf6:	693b      	ldr	r3, [r7, #16]
 8023cf8:	781b      	ldrb	r3, [r3, #0]
 8023cfa:	041a      	lsls	r2, r3, #16
 8023cfc:	68fb      	ldr	r3, [r7, #12]
 8023cfe:	4313      	orrs	r3, r2
 8023d00:	60fb      	str	r3, [r7, #12]
      tmp++;
 8023d02:	693b      	ldr	r3, [r7, #16]
 8023d04:	3301      	adds	r3, #1
 8023d06:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8023d08:	693b      	ldr	r3, [r7, #16]
 8023d0a:	781b      	ldrb	r3, [r3, #0]
 8023d0c:	061a      	lsls	r2, r3, #24
 8023d0e:	68fb      	ldr	r3, [r7, #12]
 8023d10:	4313      	orrs	r3, r2
 8023d12:	60fb      	str	r3, [r7, #12]
      tmp++;
 8023d14:	693b      	ldr	r3, [r7, #16]
 8023d16:	3301      	adds	r3, #1
 8023d18:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8023d1a:	687b      	ldr	r3, [r7, #4]
 8023d1c:	681b      	ldr	r3, [r3, #0]
 8023d1e:	f107 020c 	add.w	r2, r7, #12
 8023d22:	4611      	mov	r1, r2
 8023d24:	4618      	mov	r0, r3
 8023d26:	f001 fb26 	bl	8025376 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8023d2a:	697b      	ldr	r3, [r7, #20]
 8023d2c:	3301      	adds	r3, #1
 8023d2e:	617b      	str	r3, [r7, #20]
 8023d30:	697b      	ldr	r3, [r7, #20]
 8023d32:	2b07      	cmp	r3, #7
 8023d34:	d9d0      	bls.n	8023cd8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8023d36:	687b      	ldr	r3, [r7, #4]
 8023d38:	693a      	ldr	r2, [r7, #16]
 8023d3a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8023d3c:	687b      	ldr	r3, [r7, #4]
 8023d3e:	6a1b      	ldr	r3, [r3, #32]
 8023d40:	f1a3 0220 	sub.w	r2, r3, #32
 8023d44:	687b      	ldr	r3, [r7, #4]
 8023d46:	621a      	str	r2, [r3, #32]
  }
}
 8023d48:	bf00      	nop
 8023d4a:	3718      	adds	r7, #24
 8023d4c:	46bd      	mov	sp, r7
 8023d4e:	bd80      	pop	{r7, pc}

08023d50 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8023d50:	b480      	push	{r7}
 8023d52:	b083      	sub	sp, #12
 8023d54:	af00      	add	r7, sp, #0
 8023d56:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8023d58:	bf00      	nop
 8023d5a:	370c      	adds	r7, #12
 8023d5c:	46bd      	mov	sp, r7
 8023d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d62:	4770      	bx	lr

08023d64 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8023d64:	b480      	push	{r7}
 8023d66:	b083      	sub	sp, #12
 8023d68:	af00      	add	r7, sp, #0
 8023d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8023d6c:	bf00      	nop
 8023d6e:	370c      	adds	r7, #12
 8023d70:	46bd      	mov	sp, r7
 8023d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d76:	4770      	bx	lr

08023d78 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8023d78:	b480      	push	{r7}
 8023d7a:	b083      	sub	sp, #12
 8023d7c:	af00      	add	r7, sp, #0
 8023d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8023d80:	bf00      	nop
 8023d82:	370c      	adds	r7, #12
 8023d84:	46bd      	mov	sp, r7
 8023d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d8a:	4770      	bx	lr

08023d8c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8023d8c:	b480      	push	{r7}
 8023d8e:	b083      	sub	sp, #12
 8023d90:	af00      	add	r7, sp, #0
 8023d92:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8023d94:	bf00      	nop
 8023d96:	370c      	adds	r7, #12
 8023d98:	46bd      	mov	sp, r7
 8023d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d9e:	4770      	bx	lr

08023da0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8023da0:	b580      	push	{r7, lr}
 8023da2:	b084      	sub	sp, #16
 8023da4:	af00      	add	r7, sp, #0
 8023da6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8023da8:	687b      	ldr	r3, [r7, #4]
 8023daa:	2b00      	cmp	r3, #0
 8023dac:	d101      	bne.n	8023db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8023dae:	2301      	movs	r3, #1
 8023db0:	e10f      	b.n	8023fd2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8023db2:	687b      	ldr	r3, [r7, #4]
 8023db4:	2200      	movs	r2, #0
 8023db6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8023db8:	687b      	ldr	r3, [r7, #4]
 8023dba:	681b      	ldr	r3, [r3, #0]
 8023dbc:	4a87      	ldr	r2, [pc, #540]	@ (8023fdc <HAL_SPI_Init+0x23c>)
 8023dbe:	4293      	cmp	r3, r2
 8023dc0:	d00f      	beq.n	8023de2 <HAL_SPI_Init+0x42>
 8023dc2:	687b      	ldr	r3, [r7, #4]
 8023dc4:	681b      	ldr	r3, [r3, #0]
 8023dc6:	4a86      	ldr	r2, [pc, #536]	@ (8023fe0 <HAL_SPI_Init+0x240>)
 8023dc8:	4293      	cmp	r3, r2
 8023dca:	d00a      	beq.n	8023de2 <HAL_SPI_Init+0x42>
 8023dcc:	687b      	ldr	r3, [r7, #4]
 8023dce:	681b      	ldr	r3, [r3, #0]
 8023dd0:	4a84      	ldr	r2, [pc, #528]	@ (8023fe4 <HAL_SPI_Init+0x244>)
 8023dd2:	4293      	cmp	r3, r2
 8023dd4:	d005      	beq.n	8023de2 <HAL_SPI_Init+0x42>
 8023dd6:	687b      	ldr	r3, [r7, #4]
 8023dd8:	68db      	ldr	r3, [r3, #12]
 8023dda:	2b0f      	cmp	r3, #15
 8023ddc:	d901      	bls.n	8023de2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8023dde:	2301      	movs	r3, #1
 8023de0:	e0f7      	b.n	8023fd2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8023de2:	6878      	ldr	r0, [r7, #4]
 8023de4:	f000 f90a 	bl	8023ffc <SPI_GetPacketSize>
 8023de8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8023dea:	687b      	ldr	r3, [r7, #4]
 8023dec:	681b      	ldr	r3, [r3, #0]
 8023dee:	4a7b      	ldr	r2, [pc, #492]	@ (8023fdc <HAL_SPI_Init+0x23c>)
 8023df0:	4293      	cmp	r3, r2
 8023df2:	d00c      	beq.n	8023e0e <HAL_SPI_Init+0x6e>
 8023df4:	687b      	ldr	r3, [r7, #4]
 8023df6:	681b      	ldr	r3, [r3, #0]
 8023df8:	4a79      	ldr	r2, [pc, #484]	@ (8023fe0 <HAL_SPI_Init+0x240>)
 8023dfa:	4293      	cmp	r3, r2
 8023dfc:	d007      	beq.n	8023e0e <HAL_SPI_Init+0x6e>
 8023dfe:	687b      	ldr	r3, [r7, #4]
 8023e00:	681b      	ldr	r3, [r3, #0]
 8023e02:	4a78      	ldr	r2, [pc, #480]	@ (8023fe4 <HAL_SPI_Init+0x244>)
 8023e04:	4293      	cmp	r3, r2
 8023e06:	d002      	beq.n	8023e0e <HAL_SPI_Init+0x6e>
 8023e08:	68fb      	ldr	r3, [r7, #12]
 8023e0a:	2b08      	cmp	r3, #8
 8023e0c:	d811      	bhi.n	8023e32 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8023e0e:	687b      	ldr	r3, [r7, #4]
 8023e10:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8023e12:	4a72      	ldr	r2, [pc, #456]	@ (8023fdc <HAL_SPI_Init+0x23c>)
 8023e14:	4293      	cmp	r3, r2
 8023e16:	d009      	beq.n	8023e2c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8023e18:	687b      	ldr	r3, [r7, #4]
 8023e1a:	681b      	ldr	r3, [r3, #0]
 8023e1c:	4a70      	ldr	r2, [pc, #448]	@ (8023fe0 <HAL_SPI_Init+0x240>)
 8023e1e:	4293      	cmp	r3, r2
 8023e20:	d004      	beq.n	8023e2c <HAL_SPI_Init+0x8c>
 8023e22:	687b      	ldr	r3, [r7, #4]
 8023e24:	681b      	ldr	r3, [r3, #0]
 8023e26:	4a6f      	ldr	r2, [pc, #444]	@ (8023fe4 <HAL_SPI_Init+0x244>)
 8023e28:	4293      	cmp	r3, r2
 8023e2a:	d104      	bne.n	8023e36 <HAL_SPI_Init+0x96>
 8023e2c:	68fb      	ldr	r3, [r7, #12]
 8023e2e:	2b10      	cmp	r3, #16
 8023e30:	d901      	bls.n	8023e36 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8023e32:	2301      	movs	r3, #1
 8023e34:	e0cd      	b.n	8023fd2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8023e36:	687b      	ldr	r3, [r7, #4]
 8023e38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8023e3c:	b2db      	uxtb	r3, r3
 8023e3e:	2b00      	cmp	r3, #0
 8023e40:	d106      	bne.n	8023e50 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8023e42:	687b      	ldr	r3, [r7, #4]
 8023e44:	2200      	movs	r2, #0
 8023e46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8023e4a:	6878      	ldr	r0, [r7, #4]
 8023e4c:	f000 f8cc 	bl	8023fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8023e50:	687b      	ldr	r3, [r7, #4]
 8023e52:	2202      	movs	r2, #2
 8023e54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8023e58:	687b      	ldr	r3, [r7, #4]
 8023e5a:	681b      	ldr	r3, [r3, #0]
 8023e5c:	681a      	ldr	r2, [r3, #0]
 8023e5e:	687b      	ldr	r3, [r7, #4]
 8023e60:	681b      	ldr	r3, [r3, #0]
 8023e62:	f022 0201 	bic.w	r2, r2, #1
 8023e66:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8023e68:	687b      	ldr	r3, [r7, #4]
 8023e6a:	681b      	ldr	r3, [r3, #0]
 8023e6c:	689b      	ldr	r3, [r3, #8]
 8023e6e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8023e72:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8023e74:	687b      	ldr	r3, [r7, #4]
 8023e76:	699b      	ldr	r3, [r3, #24]
 8023e78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8023e7c:	d119      	bne.n	8023eb2 <HAL_SPI_Init+0x112>
 8023e7e:	687b      	ldr	r3, [r7, #4]
 8023e80:	685b      	ldr	r3, [r3, #4]
 8023e82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8023e86:	d103      	bne.n	8023e90 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8023e88:	687b      	ldr	r3, [r7, #4]
 8023e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8023e8c:	2b00      	cmp	r3, #0
 8023e8e:	d008      	beq.n	8023ea2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8023e90:	687b      	ldr	r3, [r7, #4]
 8023e92:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8023e94:	2b00      	cmp	r3, #0
 8023e96:	d10c      	bne.n	8023eb2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8023e98:	687b      	ldr	r3, [r7, #4]
 8023e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8023e9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8023ea0:	d107      	bne.n	8023eb2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8023ea2:	687b      	ldr	r3, [r7, #4]
 8023ea4:	681b      	ldr	r3, [r3, #0]
 8023ea6:	681a      	ldr	r2, [r3, #0]
 8023ea8:	687b      	ldr	r3, [r7, #4]
 8023eaa:	681b      	ldr	r3, [r3, #0]
 8023eac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8023eb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8023eb2:	687b      	ldr	r3, [r7, #4]
 8023eb4:	685b      	ldr	r3, [r3, #4]
 8023eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8023eba:	2b00      	cmp	r3, #0
 8023ebc:	d00f      	beq.n	8023ede <HAL_SPI_Init+0x13e>
 8023ebe:	687b      	ldr	r3, [r7, #4]
 8023ec0:	68db      	ldr	r3, [r3, #12]
 8023ec2:	2b06      	cmp	r3, #6
 8023ec4:	d90b      	bls.n	8023ede <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8023ec6:	687b      	ldr	r3, [r7, #4]
 8023ec8:	681b      	ldr	r3, [r3, #0]
 8023eca:	681b      	ldr	r3, [r3, #0]
 8023ecc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8023ed0:	687b      	ldr	r3, [r7, #4]
 8023ed2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8023ed4:	687b      	ldr	r3, [r7, #4]
 8023ed6:	681b      	ldr	r3, [r3, #0]
 8023ed8:	430a      	orrs	r2, r1
 8023eda:	601a      	str	r2, [r3, #0]
 8023edc:	e007      	b.n	8023eee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8023ede:	687b      	ldr	r3, [r7, #4]
 8023ee0:	681b      	ldr	r3, [r3, #0]
 8023ee2:	681a      	ldr	r2, [r3, #0]
 8023ee4:	687b      	ldr	r3, [r7, #4]
 8023ee6:	681b      	ldr	r3, [r3, #0]
 8023ee8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8023eec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8023eee:	687b      	ldr	r3, [r7, #4]
 8023ef0:	69da      	ldr	r2, [r3, #28]
 8023ef2:	687b      	ldr	r3, [r7, #4]
 8023ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023ef6:	431a      	orrs	r2, r3
 8023ef8:	68bb      	ldr	r3, [r7, #8]
 8023efa:	431a      	orrs	r2, r3
 8023efc:	687b      	ldr	r3, [r7, #4]
 8023efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8023f00:	ea42 0103 	orr.w	r1, r2, r3
 8023f04:	687b      	ldr	r3, [r7, #4]
 8023f06:	68da      	ldr	r2, [r3, #12]
 8023f08:	687b      	ldr	r3, [r7, #4]
 8023f0a:	681b      	ldr	r3, [r3, #0]
 8023f0c:	430a      	orrs	r2, r1
 8023f0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8023f10:	687b      	ldr	r3, [r7, #4]
 8023f12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023f14:	687b      	ldr	r3, [r7, #4]
 8023f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023f18:	431a      	orrs	r2, r3
 8023f1a:	687b      	ldr	r3, [r7, #4]
 8023f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023f1e:	431a      	orrs	r2, r3
 8023f20:	687b      	ldr	r3, [r7, #4]
 8023f22:	699b      	ldr	r3, [r3, #24]
 8023f24:	431a      	orrs	r2, r3
 8023f26:	687b      	ldr	r3, [r7, #4]
 8023f28:	691b      	ldr	r3, [r3, #16]
 8023f2a:	431a      	orrs	r2, r3
 8023f2c:	687b      	ldr	r3, [r7, #4]
 8023f2e:	695b      	ldr	r3, [r3, #20]
 8023f30:	431a      	orrs	r2, r3
 8023f32:	687b      	ldr	r3, [r7, #4]
 8023f34:	6a1b      	ldr	r3, [r3, #32]
 8023f36:	431a      	orrs	r2, r3
 8023f38:	687b      	ldr	r3, [r7, #4]
 8023f3a:	685b      	ldr	r3, [r3, #4]
 8023f3c:	431a      	orrs	r2, r3
 8023f3e:	687b      	ldr	r3, [r7, #4]
 8023f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8023f42:	431a      	orrs	r2, r3
 8023f44:	687b      	ldr	r3, [r7, #4]
 8023f46:	689b      	ldr	r3, [r3, #8]
 8023f48:	431a      	orrs	r2, r3
 8023f4a:	687b      	ldr	r3, [r7, #4]
 8023f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8023f4e:	ea42 0103 	orr.w	r1, r2, r3
 8023f52:	687b      	ldr	r3, [r7, #4]
 8023f54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8023f56:	687b      	ldr	r3, [r7, #4]
 8023f58:	681b      	ldr	r3, [r3, #0]
 8023f5a:	430a      	orrs	r2, r1
 8023f5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8023f5e:	687b      	ldr	r3, [r7, #4]
 8023f60:	685b      	ldr	r3, [r3, #4]
 8023f62:	2b00      	cmp	r3, #0
 8023f64:	d113      	bne.n	8023f8e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8023f66:	687b      	ldr	r3, [r7, #4]
 8023f68:	681b      	ldr	r3, [r3, #0]
 8023f6a:	689b      	ldr	r3, [r3, #8]
 8023f6c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8023f70:	687b      	ldr	r3, [r7, #4]
 8023f72:	681b      	ldr	r3, [r3, #0]
 8023f74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8023f78:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8023f7a:	687b      	ldr	r3, [r7, #4]
 8023f7c:	681b      	ldr	r3, [r3, #0]
 8023f7e:	689b      	ldr	r3, [r3, #8]
 8023f80:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8023f84:	687b      	ldr	r3, [r7, #4]
 8023f86:	681b      	ldr	r3, [r3, #0]
 8023f88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8023f8c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8023f8e:	687b      	ldr	r3, [r7, #4]
 8023f90:	681b      	ldr	r3, [r3, #0]
 8023f92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8023f94:	687b      	ldr	r3, [r7, #4]
 8023f96:	681b      	ldr	r3, [r3, #0]
 8023f98:	f022 0201 	bic.w	r2, r2, #1
 8023f9c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8023f9e:	687b      	ldr	r3, [r7, #4]
 8023fa0:	685b      	ldr	r3, [r3, #4]
 8023fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8023fa6:	2b00      	cmp	r3, #0
 8023fa8:	d00a      	beq.n	8023fc0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8023faa:	687b      	ldr	r3, [r7, #4]
 8023fac:	681b      	ldr	r3, [r3, #0]
 8023fae:	68db      	ldr	r3, [r3, #12]
 8023fb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8023fb4:	687b      	ldr	r3, [r7, #4]
 8023fb6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8023fb8:	687b      	ldr	r3, [r7, #4]
 8023fba:	681b      	ldr	r3, [r3, #0]
 8023fbc:	430a      	orrs	r2, r1
 8023fbe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8023fc0:	687b      	ldr	r3, [r7, #4]
 8023fc2:	2200      	movs	r2, #0
 8023fc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8023fc8:	687b      	ldr	r3, [r7, #4]
 8023fca:	2201      	movs	r2, #1
 8023fcc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8023fd0:	2300      	movs	r3, #0
}
 8023fd2:	4618      	mov	r0, r3
 8023fd4:	3710      	adds	r7, #16
 8023fd6:	46bd      	mov	sp, r7
 8023fd8:	bd80      	pop	{r7, pc}
 8023fda:	bf00      	nop
 8023fdc:	40013000 	.word	0x40013000
 8023fe0:	40003800 	.word	0x40003800
 8023fe4:	40003c00 	.word	0x40003c00

08023fe8 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8023fe8:	b480      	push	{r7}
 8023fea:	b083      	sub	sp, #12
 8023fec:	af00      	add	r7, sp, #0
 8023fee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8023ff0:	bf00      	nop
 8023ff2:	370c      	adds	r7, #12
 8023ff4:	46bd      	mov	sp, r7
 8023ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ffa:	4770      	bx	lr

08023ffc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8023ffc:	b480      	push	{r7}
 8023ffe:	b085      	sub	sp, #20
 8024000:	af00      	add	r7, sp, #0
 8024002:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8024004:	687b      	ldr	r3, [r7, #4]
 8024006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8024008:	095b      	lsrs	r3, r3, #5
 802400a:	3301      	adds	r3, #1
 802400c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 802400e:	687b      	ldr	r3, [r7, #4]
 8024010:	68db      	ldr	r3, [r3, #12]
 8024012:	3301      	adds	r3, #1
 8024014:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8024016:	68bb      	ldr	r3, [r7, #8]
 8024018:	3307      	adds	r3, #7
 802401a:	08db      	lsrs	r3, r3, #3
 802401c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 802401e:	68bb      	ldr	r3, [r7, #8]
 8024020:	68fa      	ldr	r2, [r7, #12]
 8024022:	fb02 f303 	mul.w	r3, r2, r3
}
 8024026:	4618      	mov	r0, r3
 8024028:	3714      	adds	r7, #20
 802402a:	46bd      	mov	sp, r7
 802402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024030:	4770      	bx	lr

08024032 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8024032:	b580      	push	{r7, lr}
 8024034:	b082      	sub	sp, #8
 8024036:	af00      	add	r7, sp, #0
 8024038:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802403a:	687b      	ldr	r3, [r7, #4]
 802403c:	2b00      	cmp	r3, #0
 802403e:	d101      	bne.n	8024044 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8024040:	2301      	movs	r3, #1
 8024042:	e042      	b.n	80240ca <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8024044:	687b      	ldr	r3, [r7, #4]
 8024046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802404a:	2b00      	cmp	r3, #0
 802404c:	d106      	bne.n	802405c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802404e:	687b      	ldr	r3, [r7, #4]
 8024050:	2200      	movs	r2, #0
 8024052:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8024056:	6878      	ldr	r0, [r7, #4]
 8024058:	f7ea ff00 	bl	800ee5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802405c:	687b      	ldr	r3, [r7, #4]
 802405e:	2224      	movs	r2, #36	@ 0x24
 8024060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8024064:	687b      	ldr	r3, [r7, #4]
 8024066:	681b      	ldr	r3, [r3, #0]
 8024068:	681a      	ldr	r2, [r3, #0]
 802406a:	687b      	ldr	r3, [r7, #4]
 802406c:	681b      	ldr	r3, [r3, #0]
 802406e:	f022 0201 	bic.w	r2, r2, #1
 8024072:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8024074:	687b      	ldr	r3, [r7, #4]
 8024076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024078:	2b00      	cmp	r3, #0
 802407a:	d002      	beq.n	8024082 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 802407c:	6878      	ldr	r0, [r7, #4]
 802407e:	f000 fe1f 	bl	8024cc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8024082:	6878      	ldr	r0, [r7, #4]
 8024084:	f000 f8b4 	bl	80241f0 <UART_SetConfig>
 8024088:	4603      	mov	r3, r0
 802408a:	2b01      	cmp	r3, #1
 802408c:	d101      	bne.n	8024092 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 802408e:	2301      	movs	r3, #1
 8024090:	e01b      	b.n	80240ca <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8024092:	687b      	ldr	r3, [r7, #4]
 8024094:	681b      	ldr	r3, [r3, #0]
 8024096:	685a      	ldr	r2, [r3, #4]
 8024098:	687b      	ldr	r3, [r7, #4]
 802409a:	681b      	ldr	r3, [r3, #0]
 802409c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80240a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80240a2:	687b      	ldr	r3, [r7, #4]
 80240a4:	681b      	ldr	r3, [r3, #0]
 80240a6:	689a      	ldr	r2, [r3, #8]
 80240a8:	687b      	ldr	r3, [r7, #4]
 80240aa:	681b      	ldr	r3, [r3, #0]
 80240ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80240b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80240b2:	687b      	ldr	r3, [r7, #4]
 80240b4:	681b      	ldr	r3, [r3, #0]
 80240b6:	681a      	ldr	r2, [r3, #0]
 80240b8:	687b      	ldr	r3, [r7, #4]
 80240ba:	681b      	ldr	r3, [r3, #0]
 80240bc:	f042 0201 	orr.w	r2, r2, #1
 80240c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80240c2:	6878      	ldr	r0, [r7, #4]
 80240c4:	f000 fe9e 	bl	8024e04 <UART_CheckIdleState>
 80240c8:	4603      	mov	r3, r0
}
 80240ca:	4618      	mov	r0, r3
 80240cc:	3708      	adds	r7, #8
 80240ce:	46bd      	mov	sp, r7
 80240d0:	bd80      	pop	{r7, pc}

080240d2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80240d2:	b580      	push	{r7, lr}
 80240d4:	b08a      	sub	sp, #40	@ 0x28
 80240d6:	af02      	add	r7, sp, #8
 80240d8:	60f8      	str	r0, [r7, #12]
 80240da:	60b9      	str	r1, [r7, #8]
 80240dc:	603b      	str	r3, [r7, #0]
 80240de:	4613      	mov	r3, r2
 80240e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80240e2:	68fb      	ldr	r3, [r7, #12]
 80240e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80240e8:	2b20      	cmp	r3, #32
 80240ea:	d17b      	bne.n	80241e4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80240ec:	68bb      	ldr	r3, [r7, #8]
 80240ee:	2b00      	cmp	r3, #0
 80240f0:	d002      	beq.n	80240f8 <HAL_UART_Transmit+0x26>
 80240f2:	88fb      	ldrh	r3, [r7, #6]
 80240f4:	2b00      	cmp	r3, #0
 80240f6:	d101      	bne.n	80240fc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80240f8:	2301      	movs	r3, #1
 80240fa:	e074      	b.n	80241e6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80240fc:	68fb      	ldr	r3, [r7, #12]
 80240fe:	2200      	movs	r2, #0
 8024100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8024104:	68fb      	ldr	r3, [r7, #12]
 8024106:	2221      	movs	r2, #33	@ 0x21
 8024108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802410c:	f7f7 fdc6 	bl	801bc9c <HAL_GetTick>
 8024110:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8024112:	68fb      	ldr	r3, [r7, #12]
 8024114:	88fa      	ldrh	r2, [r7, #6]
 8024116:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 802411a:	68fb      	ldr	r3, [r7, #12]
 802411c:	88fa      	ldrh	r2, [r7, #6]
 802411e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8024122:	68fb      	ldr	r3, [r7, #12]
 8024124:	689b      	ldr	r3, [r3, #8]
 8024126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802412a:	d108      	bne.n	802413e <HAL_UART_Transmit+0x6c>
 802412c:	68fb      	ldr	r3, [r7, #12]
 802412e:	691b      	ldr	r3, [r3, #16]
 8024130:	2b00      	cmp	r3, #0
 8024132:	d104      	bne.n	802413e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8024134:	2300      	movs	r3, #0
 8024136:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8024138:	68bb      	ldr	r3, [r7, #8]
 802413a:	61bb      	str	r3, [r7, #24]
 802413c:	e003      	b.n	8024146 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 802413e:	68bb      	ldr	r3, [r7, #8]
 8024140:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8024142:	2300      	movs	r3, #0
 8024144:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8024146:	e030      	b.n	80241aa <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8024148:	683b      	ldr	r3, [r7, #0]
 802414a:	9300      	str	r3, [sp, #0]
 802414c:	697b      	ldr	r3, [r7, #20]
 802414e:	2200      	movs	r2, #0
 8024150:	2180      	movs	r1, #128	@ 0x80
 8024152:	68f8      	ldr	r0, [r7, #12]
 8024154:	f000 ff00 	bl	8024f58 <UART_WaitOnFlagUntilTimeout>
 8024158:	4603      	mov	r3, r0
 802415a:	2b00      	cmp	r3, #0
 802415c:	d005      	beq.n	802416a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 802415e:	68fb      	ldr	r3, [r7, #12]
 8024160:	2220      	movs	r2, #32
 8024162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8024166:	2303      	movs	r3, #3
 8024168:	e03d      	b.n	80241e6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 802416a:	69fb      	ldr	r3, [r7, #28]
 802416c:	2b00      	cmp	r3, #0
 802416e:	d10b      	bne.n	8024188 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8024170:	69bb      	ldr	r3, [r7, #24]
 8024172:	881b      	ldrh	r3, [r3, #0]
 8024174:	461a      	mov	r2, r3
 8024176:	68fb      	ldr	r3, [r7, #12]
 8024178:	681b      	ldr	r3, [r3, #0]
 802417a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802417e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8024180:	69bb      	ldr	r3, [r7, #24]
 8024182:	3302      	adds	r3, #2
 8024184:	61bb      	str	r3, [r7, #24]
 8024186:	e007      	b.n	8024198 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8024188:	69fb      	ldr	r3, [r7, #28]
 802418a:	781a      	ldrb	r2, [r3, #0]
 802418c:	68fb      	ldr	r3, [r7, #12]
 802418e:	681b      	ldr	r3, [r3, #0]
 8024190:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8024192:	69fb      	ldr	r3, [r7, #28]
 8024194:	3301      	adds	r3, #1
 8024196:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8024198:	68fb      	ldr	r3, [r7, #12]
 802419a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 802419e:	b29b      	uxth	r3, r3
 80241a0:	3b01      	subs	r3, #1
 80241a2:	b29a      	uxth	r2, r3
 80241a4:	68fb      	ldr	r3, [r7, #12]
 80241a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80241aa:	68fb      	ldr	r3, [r7, #12]
 80241ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80241b0:	b29b      	uxth	r3, r3
 80241b2:	2b00      	cmp	r3, #0
 80241b4:	d1c8      	bne.n	8024148 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80241b6:	683b      	ldr	r3, [r7, #0]
 80241b8:	9300      	str	r3, [sp, #0]
 80241ba:	697b      	ldr	r3, [r7, #20]
 80241bc:	2200      	movs	r2, #0
 80241be:	2140      	movs	r1, #64	@ 0x40
 80241c0:	68f8      	ldr	r0, [r7, #12]
 80241c2:	f000 fec9 	bl	8024f58 <UART_WaitOnFlagUntilTimeout>
 80241c6:	4603      	mov	r3, r0
 80241c8:	2b00      	cmp	r3, #0
 80241ca:	d005      	beq.n	80241d8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80241cc:	68fb      	ldr	r3, [r7, #12]
 80241ce:	2220      	movs	r2, #32
 80241d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80241d4:	2303      	movs	r3, #3
 80241d6:	e006      	b.n	80241e6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80241d8:	68fb      	ldr	r3, [r7, #12]
 80241da:	2220      	movs	r2, #32
 80241dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80241e0:	2300      	movs	r3, #0
 80241e2:	e000      	b.n	80241e6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80241e4:	2302      	movs	r3, #2
  }
}
 80241e6:	4618      	mov	r0, r3
 80241e8:	3720      	adds	r7, #32
 80241ea:	46bd      	mov	sp, r7
 80241ec:	bd80      	pop	{r7, pc}
	...

080241f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80241f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80241f4:	b092      	sub	sp, #72	@ 0x48
 80241f6:	af00      	add	r7, sp, #0
 80241f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80241fa:	2300      	movs	r3, #0
 80241fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8024200:	697b      	ldr	r3, [r7, #20]
 8024202:	689a      	ldr	r2, [r3, #8]
 8024204:	697b      	ldr	r3, [r7, #20]
 8024206:	691b      	ldr	r3, [r3, #16]
 8024208:	431a      	orrs	r2, r3
 802420a:	697b      	ldr	r3, [r7, #20]
 802420c:	695b      	ldr	r3, [r3, #20]
 802420e:	431a      	orrs	r2, r3
 8024210:	697b      	ldr	r3, [r7, #20]
 8024212:	69db      	ldr	r3, [r3, #28]
 8024214:	4313      	orrs	r3, r2
 8024216:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8024218:	697b      	ldr	r3, [r7, #20]
 802421a:	681b      	ldr	r3, [r3, #0]
 802421c:	681a      	ldr	r2, [r3, #0]
 802421e:	4bbe      	ldr	r3, [pc, #760]	@ (8024518 <UART_SetConfig+0x328>)
 8024220:	4013      	ands	r3, r2
 8024222:	697a      	ldr	r2, [r7, #20]
 8024224:	6812      	ldr	r2, [r2, #0]
 8024226:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8024228:	430b      	orrs	r3, r1
 802422a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802422c:	697b      	ldr	r3, [r7, #20]
 802422e:	681b      	ldr	r3, [r3, #0]
 8024230:	685b      	ldr	r3, [r3, #4]
 8024232:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8024236:	697b      	ldr	r3, [r7, #20]
 8024238:	68da      	ldr	r2, [r3, #12]
 802423a:	697b      	ldr	r3, [r7, #20]
 802423c:	681b      	ldr	r3, [r3, #0]
 802423e:	430a      	orrs	r2, r1
 8024240:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8024242:	697b      	ldr	r3, [r7, #20]
 8024244:	699b      	ldr	r3, [r3, #24]
 8024246:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8024248:	697b      	ldr	r3, [r7, #20]
 802424a:	681b      	ldr	r3, [r3, #0]
 802424c:	4ab3      	ldr	r2, [pc, #716]	@ (802451c <UART_SetConfig+0x32c>)
 802424e:	4293      	cmp	r3, r2
 8024250:	d004      	beq.n	802425c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8024252:	697b      	ldr	r3, [r7, #20]
 8024254:	6a1b      	ldr	r3, [r3, #32]
 8024256:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8024258:	4313      	orrs	r3, r2
 802425a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 802425c:	697b      	ldr	r3, [r7, #20]
 802425e:	681b      	ldr	r3, [r3, #0]
 8024260:	689a      	ldr	r2, [r3, #8]
 8024262:	4baf      	ldr	r3, [pc, #700]	@ (8024520 <UART_SetConfig+0x330>)
 8024264:	4013      	ands	r3, r2
 8024266:	697a      	ldr	r2, [r7, #20]
 8024268:	6812      	ldr	r2, [r2, #0]
 802426a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 802426c:	430b      	orrs	r3, r1
 802426e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8024270:	697b      	ldr	r3, [r7, #20]
 8024272:	681b      	ldr	r3, [r3, #0]
 8024274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024276:	f023 010f 	bic.w	r1, r3, #15
 802427a:	697b      	ldr	r3, [r7, #20]
 802427c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802427e:	697b      	ldr	r3, [r7, #20]
 8024280:	681b      	ldr	r3, [r3, #0]
 8024282:	430a      	orrs	r2, r1
 8024284:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8024286:	697b      	ldr	r3, [r7, #20]
 8024288:	681b      	ldr	r3, [r3, #0]
 802428a:	4aa6      	ldr	r2, [pc, #664]	@ (8024524 <UART_SetConfig+0x334>)
 802428c:	4293      	cmp	r3, r2
 802428e:	d177      	bne.n	8024380 <UART_SetConfig+0x190>
 8024290:	4ba5      	ldr	r3, [pc, #660]	@ (8024528 <UART_SetConfig+0x338>)
 8024292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024294:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8024298:	2b28      	cmp	r3, #40	@ 0x28
 802429a:	d86d      	bhi.n	8024378 <UART_SetConfig+0x188>
 802429c:	a201      	add	r2, pc, #4	@ (adr r2, 80242a4 <UART_SetConfig+0xb4>)
 802429e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80242a2:	bf00      	nop
 80242a4:	08024349 	.word	0x08024349
 80242a8:	08024379 	.word	0x08024379
 80242ac:	08024379 	.word	0x08024379
 80242b0:	08024379 	.word	0x08024379
 80242b4:	08024379 	.word	0x08024379
 80242b8:	08024379 	.word	0x08024379
 80242bc:	08024379 	.word	0x08024379
 80242c0:	08024379 	.word	0x08024379
 80242c4:	08024351 	.word	0x08024351
 80242c8:	08024379 	.word	0x08024379
 80242cc:	08024379 	.word	0x08024379
 80242d0:	08024379 	.word	0x08024379
 80242d4:	08024379 	.word	0x08024379
 80242d8:	08024379 	.word	0x08024379
 80242dc:	08024379 	.word	0x08024379
 80242e0:	08024379 	.word	0x08024379
 80242e4:	08024359 	.word	0x08024359
 80242e8:	08024379 	.word	0x08024379
 80242ec:	08024379 	.word	0x08024379
 80242f0:	08024379 	.word	0x08024379
 80242f4:	08024379 	.word	0x08024379
 80242f8:	08024379 	.word	0x08024379
 80242fc:	08024379 	.word	0x08024379
 8024300:	08024379 	.word	0x08024379
 8024304:	08024361 	.word	0x08024361
 8024308:	08024379 	.word	0x08024379
 802430c:	08024379 	.word	0x08024379
 8024310:	08024379 	.word	0x08024379
 8024314:	08024379 	.word	0x08024379
 8024318:	08024379 	.word	0x08024379
 802431c:	08024379 	.word	0x08024379
 8024320:	08024379 	.word	0x08024379
 8024324:	08024369 	.word	0x08024369
 8024328:	08024379 	.word	0x08024379
 802432c:	08024379 	.word	0x08024379
 8024330:	08024379 	.word	0x08024379
 8024334:	08024379 	.word	0x08024379
 8024338:	08024379 	.word	0x08024379
 802433c:	08024379 	.word	0x08024379
 8024340:	08024379 	.word	0x08024379
 8024344:	08024371 	.word	0x08024371
 8024348:	2301      	movs	r3, #1
 802434a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802434e:	e222      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024350:	2304      	movs	r3, #4
 8024352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024356:	e21e      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024358:	2308      	movs	r3, #8
 802435a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802435e:	e21a      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024360:	2310      	movs	r3, #16
 8024362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024366:	e216      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024368:	2320      	movs	r3, #32
 802436a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802436e:	e212      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024370:	2340      	movs	r3, #64	@ 0x40
 8024372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024376:	e20e      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024378:	2380      	movs	r3, #128	@ 0x80
 802437a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802437e:	e20a      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024380:	697b      	ldr	r3, [r7, #20]
 8024382:	681b      	ldr	r3, [r3, #0]
 8024384:	4a69      	ldr	r2, [pc, #420]	@ (802452c <UART_SetConfig+0x33c>)
 8024386:	4293      	cmp	r3, r2
 8024388:	d130      	bne.n	80243ec <UART_SetConfig+0x1fc>
 802438a:	4b67      	ldr	r3, [pc, #412]	@ (8024528 <UART_SetConfig+0x338>)
 802438c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802438e:	f003 0307 	and.w	r3, r3, #7
 8024392:	2b05      	cmp	r3, #5
 8024394:	d826      	bhi.n	80243e4 <UART_SetConfig+0x1f4>
 8024396:	a201      	add	r2, pc, #4	@ (adr r2, 802439c <UART_SetConfig+0x1ac>)
 8024398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802439c:	080243b5 	.word	0x080243b5
 80243a0:	080243bd 	.word	0x080243bd
 80243a4:	080243c5 	.word	0x080243c5
 80243a8:	080243cd 	.word	0x080243cd
 80243ac:	080243d5 	.word	0x080243d5
 80243b0:	080243dd 	.word	0x080243dd
 80243b4:	2300      	movs	r3, #0
 80243b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243ba:	e1ec      	b.n	8024796 <UART_SetConfig+0x5a6>
 80243bc:	2304      	movs	r3, #4
 80243be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243c2:	e1e8      	b.n	8024796 <UART_SetConfig+0x5a6>
 80243c4:	2308      	movs	r3, #8
 80243c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243ca:	e1e4      	b.n	8024796 <UART_SetConfig+0x5a6>
 80243cc:	2310      	movs	r3, #16
 80243ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243d2:	e1e0      	b.n	8024796 <UART_SetConfig+0x5a6>
 80243d4:	2320      	movs	r3, #32
 80243d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243da:	e1dc      	b.n	8024796 <UART_SetConfig+0x5a6>
 80243dc:	2340      	movs	r3, #64	@ 0x40
 80243de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243e2:	e1d8      	b.n	8024796 <UART_SetConfig+0x5a6>
 80243e4:	2380      	movs	r3, #128	@ 0x80
 80243e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80243ea:	e1d4      	b.n	8024796 <UART_SetConfig+0x5a6>
 80243ec:	697b      	ldr	r3, [r7, #20]
 80243ee:	681b      	ldr	r3, [r3, #0]
 80243f0:	4a4f      	ldr	r2, [pc, #316]	@ (8024530 <UART_SetConfig+0x340>)
 80243f2:	4293      	cmp	r3, r2
 80243f4:	d130      	bne.n	8024458 <UART_SetConfig+0x268>
 80243f6:	4b4c      	ldr	r3, [pc, #304]	@ (8024528 <UART_SetConfig+0x338>)
 80243f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80243fa:	f003 0307 	and.w	r3, r3, #7
 80243fe:	2b05      	cmp	r3, #5
 8024400:	d826      	bhi.n	8024450 <UART_SetConfig+0x260>
 8024402:	a201      	add	r2, pc, #4	@ (adr r2, 8024408 <UART_SetConfig+0x218>)
 8024404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024408:	08024421 	.word	0x08024421
 802440c:	08024429 	.word	0x08024429
 8024410:	08024431 	.word	0x08024431
 8024414:	08024439 	.word	0x08024439
 8024418:	08024441 	.word	0x08024441
 802441c:	08024449 	.word	0x08024449
 8024420:	2300      	movs	r3, #0
 8024422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024426:	e1b6      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024428:	2304      	movs	r3, #4
 802442a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802442e:	e1b2      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024430:	2308      	movs	r3, #8
 8024432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024436:	e1ae      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024438:	2310      	movs	r3, #16
 802443a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802443e:	e1aa      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024440:	2320      	movs	r3, #32
 8024442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024446:	e1a6      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024448:	2340      	movs	r3, #64	@ 0x40
 802444a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802444e:	e1a2      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024450:	2380      	movs	r3, #128	@ 0x80
 8024452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024456:	e19e      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024458:	697b      	ldr	r3, [r7, #20]
 802445a:	681b      	ldr	r3, [r3, #0]
 802445c:	4a35      	ldr	r2, [pc, #212]	@ (8024534 <UART_SetConfig+0x344>)
 802445e:	4293      	cmp	r3, r2
 8024460:	d130      	bne.n	80244c4 <UART_SetConfig+0x2d4>
 8024462:	4b31      	ldr	r3, [pc, #196]	@ (8024528 <UART_SetConfig+0x338>)
 8024464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024466:	f003 0307 	and.w	r3, r3, #7
 802446a:	2b05      	cmp	r3, #5
 802446c:	d826      	bhi.n	80244bc <UART_SetConfig+0x2cc>
 802446e:	a201      	add	r2, pc, #4	@ (adr r2, 8024474 <UART_SetConfig+0x284>)
 8024470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024474:	0802448d 	.word	0x0802448d
 8024478:	08024495 	.word	0x08024495
 802447c:	0802449d 	.word	0x0802449d
 8024480:	080244a5 	.word	0x080244a5
 8024484:	080244ad 	.word	0x080244ad
 8024488:	080244b5 	.word	0x080244b5
 802448c:	2300      	movs	r3, #0
 802448e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024492:	e180      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024494:	2304      	movs	r3, #4
 8024496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802449a:	e17c      	b.n	8024796 <UART_SetConfig+0x5a6>
 802449c:	2308      	movs	r3, #8
 802449e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244a2:	e178      	b.n	8024796 <UART_SetConfig+0x5a6>
 80244a4:	2310      	movs	r3, #16
 80244a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244aa:	e174      	b.n	8024796 <UART_SetConfig+0x5a6>
 80244ac:	2320      	movs	r3, #32
 80244ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244b2:	e170      	b.n	8024796 <UART_SetConfig+0x5a6>
 80244b4:	2340      	movs	r3, #64	@ 0x40
 80244b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244ba:	e16c      	b.n	8024796 <UART_SetConfig+0x5a6>
 80244bc:	2380      	movs	r3, #128	@ 0x80
 80244be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244c2:	e168      	b.n	8024796 <UART_SetConfig+0x5a6>
 80244c4:	697b      	ldr	r3, [r7, #20]
 80244c6:	681b      	ldr	r3, [r3, #0]
 80244c8:	4a1b      	ldr	r2, [pc, #108]	@ (8024538 <UART_SetConfig+0x348>)
 80244ca:	4293      	cmp	r3, r2
 80244cc:	d142      	bne.n	8024554 <UART_SetConfig+0x364>
 80244ce:	4b16      	ldr	r3, [pc, #88]	@ (8024528 <UART_SetConfig+0x338>)
 80244d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80244d2:	f003 0307 	and.w	r3, r3, #7
 80244d6:	2b05      	cmp	r3, #5
 80244d8:	d838      	bhi.n	802454c <UART_SetConfig+0x35c>
 80244da:	a201      	add	r2, pc, #4	@ (adr r2, 80244e0 <UART_SetConfig+0x2f0>)
 80244dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80244e0:	080244f9 	.word	0x080244f9
 80244e4:	08024501 	.word	0x08024501
 80244e8:	08024509 	.word	0x08024509
 80244ec:	08024511 	.word	0x08024511
 80244f0:	0802453d 	.word	0x0802453d
 80244f4:	08024545 	.word	0x08024545
 80244f8:	2300      	movs	r3, #0
 80244fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80244fe:	e14a      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024500:	2304      	movs	r3, #4
 8024502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024506:	e146      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024508:	2308      	movs	r3, #8
 802450a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802450e:	e142      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024510:	2310      	movs	r3, #16
 8024512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024516:	e13e      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024518:	cfff69f3 	.word	0xcfff69f3
 802451c:	58000c00 	.word	0x58000c00
 8024520:	11fff4ff 	.word	0x11fff4ff
 8024524:	40011000 	.word	0x40011000
 8024528:	58024400 	.word	0x58024400
 802452c:	40004400 	.word	0x40004400
 8024530:	40004800 	.word	0x40004800
 8024534:	40004c00 	.word	0x40004c00
 8024538:	40005000 	.word	0x40005000
 802453c:	2320      	movs	r3, #32
 802453e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024542:	e128      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024544:	2340      	movs	r3, #64	@ 0x40
 8024546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802454a:	e124      	b.n	8024796 <UART_SetConfig+0x5a6>
 802454c:	2380      	movs	r3, #128	@ 0x80
 802454e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024552:	e120      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024554:	697b      	ldr	r3, [r7, #20]
 8024556:	681b      	ldr	r3, [r3, #0]
 8024558:	4acb      	ldr	r2, [pc, #812]	@ (8024888 <UART_SetConfig+0x698>)
 802455a:	4293      	cmp	r3, r2
 802455c:	d176      	bne.n	802464c <UART_SetConfig+0x45c>
 802455e:	4bcb      	ldr	r3, [pc, #812]	@ (802488c <UART_SetConfig+0x69c>)
 8024560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024562:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8024566:	2b28      	cmp	r3, #40	@ 0x28
 8024568:	d86c      	bhi.n	8024644 <UART_SetConfig+0x454>
 802456a:	a201      	add	r2, pc, #4	@ (adr r2, 8024570 <UART_SetConfig+0x380>)
 802456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024570:	08024615 	.word	0x08024615
 8024574:	08024645 	.word	0x08024645
 8024578:	08024645 	.word	0x08024645
 802457c:	08024645 	.word	0x08024645
 8024580:	08024645 	.word	0x08024645
 8024584:	08024645 	.word	0x08024645
 8024588:	08024645 	.word	0x08024645
 802458c:	08024645 	.word	0x08024645
 8024590:	0802461d 	.word	0x0802461d
 8024594:	08024645 	.word	0x08024645
 8024598:	08024645 	.word	0x08024645
 802459c:	08024645 	.word	0x08024645
 80245a0:	08024645 	.word	0x08024645
 80245a4:	08024645 	.word	0x08024645
 80245a8:	08024645 	.word	0x08024645
 80245ac:	08024645 	.word	0x08024645
 80245b0:	08024625 	.word	0x08024625
 80245b4:	08024645 	.word	0x08024645
 80245b8:	08024645 	.word	0x08024645
 80245bc:	08024645 	.word	0x08024645
 80245c0:	08024645 	.word	0x08024645
 80245c4:	08024645 	.word	0x08024645
 80245c8:	08024645 	.word	0x08024645
 80245cc:	08024645 	.word	0x08024645
 80245d0:	0802462d 	.word	0x0802462d
 80245d4:	08024645 	.word	0x08024645
 80245d8:	08024645 	.word	0x08024645
 80245dc:	08024645 	.word	0x08024645
 80245e0:	08024645 	.word	0x08024645
 80245e4:	08024645 	.word	0x08024645
 80245e8:	08024645 	.word	0x08024645
 80245ec:	08024645 	.word	0x08024645
 80245f0:	08024635 	.word	0x08024635
 80245f4:	08024645 	.word	0x08024645
 80245f8:	08024645 	.word	0x08024645
 80245fc:	08024645 	.word	0x08024645
 8024600:	08024645 	.word	0x08024645
 8024604:	08024645 	.word	0x08024645
 8024608:	08024645 	.word	0x08024645
 802460c:	08024645 	.word	0x08024645
 8024610:	0802463d 	.word	0x0802463d
 8024614:	2301      	movs	r3, #1
 8024616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802461a:	e0bc      	b.n	8024796 <UART_SetConfig+0x5a6>
 802461c:	2304      	movs	r3, #4
 802461e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024622:	e0b8      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024624:	2308      	movs	r3, #8
 8024626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802462a:	e0b4      	b.n	8024796 <UART_SetConfig+0x5a6>
 802462c:	2310      	movs	r3, #16
 802462e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024632:	e0b0      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024634:	2320      	movs	r3, #32
 8024636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802463a:	e0ac      	b.n	8024796 <UART_SetConfig+0x5a6>
 802463c:	2340      	movs	r3, #64	@ 0x40
 802463e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024642:	e0a8      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024644:	2380      	movs	r3, #128	@ 0x80
 8024646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802464a:	e0a4      	b.n	8024796 <UART_SetConfig+0x5a6>
 802464c:	697b      	ldr	r3, [r7, #20]
 802464e:	681b      	ldr	r3, [r3, #0]
 8024650:	4a8f      	ldr	r2, [pc, #572]	@ (8024890 <UART_SetConfig+0x6a0>)
 8024652:	4293      	cmp	r3, r2
 8024654:	d130      	bne.n	80246b8 <UART_SetConfig+0x4c8>
 8024656:	4b8d      	ldr	r3, [pc, #564]	@ (802488c <UART_SetConfig+0x69c>)
 8024658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802465a:	f003 0307 	and.w	r3, r3, #7
 802465e:	2b05      	cmp	r3, #5
 8024660:	d826      	bhi.n	80246b0 <UART_SetConfig+0x4c0>
 8024662:	a201      	add	r2, pc, #4	@ (adr r2, 8024668 <UART_SetConfig+0x478>)
 8024664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024668:	08024681 	.word	0x08024681
 802466c:	08024689 	.word	0x08024689
 8024670:	08024691 	.word	0x08024691
 8024674:	08024699 	.word	0x08024699
 8024678:	080246a1 	.word	0x080246a1
 802467c:	080246a9 	.word	0x080246a9
 8024680:	2300      	movs	r3, #0
 8024682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024686:	e086      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024688:	2304      	movs	r3, #4
 802468a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802468e:	e082      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024690:	2308      	movs	r3, #8
 8024692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024696:	e07e      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024698:	2310      	movs	r3, #16
 802469a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802469e:	e07a      	b.n	8024796 <UART_SetConfig+0x5a6>
 80246a0:	2320      	movs	r3, #32
 80246a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80246a6:	e076      	b.n	8024796 <UART_SetConfig+0x5a6>
 80246a8:	2340      	movs	r3, #64	@ 0x40
 80246aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80246ae:	e072      	b.n	8024796 <UART_SetConfig+0x5a6>
 80246b0:	2380      	movs	r3, #128	@ 0x80
 80246b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80246b6:	e06e      	b.n	8024796 <UART_SetConfig+0x5a6>
 80246b8:	697b      	ldr	r3, [r7, #20]
 80246ba:	681b      	ldr	r3, [r3, #0]
 80246bc:	4a75      	ldr	r2, [pc, #468]	@ (8024894 <UART_SetConfig+0x6a4>)
 80246be:	4293      	cmp	r3, r2
 80246c0:	d130      	bne.n	8024724 <UART_SetConfig+0x534>
 80246c2:	4b72      	ldr	r3, [pc, #456]	@ (802488c <UART_SetConfig+0x69c>)
 80246c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80246c6:	f003 0307 	and.w	r3, r3, #7
 80246ca:	2b05      	cmp	r3, #5
 80246cc:	d826      	bhi.n	802471c <UART_SetConfig+0x52c>
 80246ce:	a201      	add	r2, pc, #4	@ (adr r2, 80246d4 <UART_SetConfig+0x4e4>)
 80246d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80246d4:	080246ed 	.word	0x080246ed
 80246d8:	080246f5 	.word	0x080246f5
 80246dc:	080246fd 	.word	0x080246fd
 80246e0:	08024705 	.word	0x08024705
 80246e4:	0802470d 	.word	0x0802470d
 80246e8:	08024715 	.word	0x08024715
 80246ec:	2300      	movs	r3, #0
 80246ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80246f2:	e050      	b.n	8024796 <UART_SetConfig+0x5a6>
 80246f4:	2304      	movs	r3, #4
 80246f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80246fa:	e04c      	b.n	8024796 <UART_SetConfig+0x5a6>
 80246fc:	2308      	movs	r3, #8
 80246fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024702:	e048      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024704:	2310      	movs	r3, #16
 8024706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802470a:	e044      	b.n	8024796 <UART_SetConfig+0x5a6>
 802470c:	2320      	movs	r3, #32
 802470e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024712:	e040      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024714:	2340      	movs	r3, #64	@ 0x40
 8024716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802471a:	e03c      	b.n	8024796 <UART_SetConfig+0x5a6>
 802471c:	2380      	movs	r3, #128	@ 0x80
 802471e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024722:	e038      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024724:	697b      	ldr	r3, [r7, #20]
 8024726:	681b      	ldr	r3, [r3, #0]
 8024728:	4a5b      	ldr	r2, [pc, #364]	@ (8024898 <UART_SetConfig+0x6a8>)
 802472a:	4293      	cmp	r3, r2
 802472c:	d130      	bne.n	8024790 <UART_SetConfig+0x5a0>
 802472e:	4b57      	ldr	r3, [pc, #348]	@ (802488c <UART_SetConfig+0x69c>)
 8024730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8024732:	f003 0307 	and.w	r3, r3, #7
 8024736:	2b05      	cmp	r3, #5
 8024738:	d826      	bhi.n	8024788 <UART_SetConfig+0x598>
 802473a:	a201      	add	r2, pc, #4	@ (adr r2, 8024740 <UART_SetConfig+0x550>)
 802473c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024740:	08024759 	.word	0x08024759
 8024744:	08024761 	.word	0x08024761
 8024748:	08024769 	.word	0x08024769
 802474c:	08024771 	.word	0x08024771
 8024750:	08024779 	.word	0x08024779
 8024754:	08024781 	.word	0x08024781
 8024758:	2302      	movs	r3, #2
 802475a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802475e:	e01a      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024760:	2304      	movs	r3, #4
 8024762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024766:	e016      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024768:	2308      	movs	r3, #8
 802476a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802476e:	e012      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024770:	2310      	movs	r3, #16
 8024772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024776:	e00e      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024778:	2320      	movs	r3, #32
 802477a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802477e:	e00a      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024780:	2340      	movs	r3, #64	@ 0x40
 8024782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8024786:	e006      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024788:	2380      	movs	r3, #128	@ 0x80
 802478a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802478e:	e002      	b.n	8024796 <UART_SetConfig+0x5a6>
 8024790:	2380      	movs	r3, #128	@ 0x80
 8024792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8024796:	697b      	ldr	r3, [r7, #20]
 8024798:	681b      	ldr	r3, [r3, #0]
 802479a:	4a3f      	ldr	r2, [pc, #252]	@ (8024898 <UART_SetConfig+0x6a8>)
 802479c:	4293      	cmp	r3, r2
 802479e:	f040 80f8 	bne.w	8024992 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80247a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80247a6:	2b20      	cmp	r3, #32
 80247a8:	dc46      	bgt.n	8024838 <UART_SetConfig+0x648>
 80247aa:	2b02      	cmp	r3, #2
 80247ac:	f2c0 8082 	blt.w	80248b4 <UART_SetConfig+0x6c4>
 80247b0:	3b02      	subs	r3, #2
 80247b2:	2b1e      	cmp	r3, #30
 80247b4:	d87e      	bhi.n	80248b4 <UART_SetConfig+0x6c4>
 80247b6:	a201      	add	r2, pc, #4	@ (adr r2, 80247bc <UART_SetConfig+0x5cc>)
 80247b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80247bc:	0802483f 	.word	0x0802483f
 80247c0:	080248b5 	.word	0x080248b5
 80247c4:	08024847 	.word	0x08024847
 80247c8:	080248b5 	.word	0x080248b5
 80247cc:	080248b5 	.word	0x080248b5
 80247d0:	080248b5 	.word	0x080248b5
 80247d4:	08024857 	.word	0x08024857
 80247d8:	080248b5 	.word	0x080248b5
 80247dc:	080248b5 	.word	0x080248b5
 80247e0:	080248b5 	.word	0x080248b5
 80247e4:	080248b5 	.word	0x080248b5
 80247e8:	080248b5 	.word	0x080248b5
 80247ec:	080248b5 	.word	0x080248b5
 80247f0:	080248b5 	.word	0x080248b5
 80247f4:	08024867 	.word	0x08024867
 80247f8:	080248b5 	.word	0x080248b5
 80247fc:	080248b5 	.word	0x080248b5
 8024800:	080248b5 	.word	0x080248b5
 8024804:	080248b5 	.word	0x080248b5
 8024808:	080248b5 	.word	0x080248b5
 802480c:	080248b5 	.word	0x080248b5
 8024810:	080248b5 	.word	0x080248b5
 8024814:	080248b5 	.word	0x080248b5
 8024818:	080248b5 	.word	0x080248b5
 802481c:	080248b5 	.word	0x080248b5
 8024820:	080248b5 	.word	0x080248b5
 8024824:	080248b5 	.word	0x080248b5
 8024828:	080248b5 	.word	0x080248b5
 802482c:	080248b5 	.word	0x080248b5
 8024830:	080248b5 	.word	0x080248b5
 8024834:	080248a7 	.word	0x080248a7
 8024838:	2b40      	cmp	r3, #64	@ 0x40
 802483a:	d037      	beq.n	80248ac <UART_SetConfig+0x6bc>
 802483c:	e03a      	b.n	80248b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 802483e:	f7fd f8d7 	bl	80219f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8024842:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8024844:	e03c      	b.n	80248c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8024846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802484a:	4618      	mov	r0, r3
 802484c:	f7fd f8e6 	bl	8021a1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8024850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024854:	e034      	b.n	80248c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8024856:	f107 0318 	add.w	r3, r7, #24
 802485a:	4618      	mov	r0, r3
 802485c:	f7fd fa32 	bl	8021cc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8024860:	69fb      	ldr	r3, [r7, #28]
 8024862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024864:	e02c      	b.n	80248c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8024866:	4b09      	ldr	r3, [pc, #36]	@ (802488c <UART_SetConfig+0x69c>)
 8024868:	681b      	ldr	r3, [r3, #0]
 802486a:	f003 0320 	and.w	r3, r3, #32
 802486e:	2b00      	cmp	r3, #0
 8024870:	d016      	beq.n	80248a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8024872:	4b06      	ldr	r3, [pc, #24]	@ (802488c <UART_SetConfig+0x69c>)
 8024874:	681b      	ldr	r3, [r3, #0]
 8024876:	08db      	lsrs	r3, r3, #3
 8024878:	f003 0303 	and.w	r3, r3, #3
 802487c:	4a07      	ldr	r2, [pc, #28]	@ (802489c <UART_SetConfig+0x6ac>)
 802487e:	fa22 f303 	lsr.w	r3, r2, r3
 8024882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8024884:	e01c      	b.n	80248c0 <UART_SetConfig+0x6d0>
 8024886:	bf00      	nop
 8024888:	40011400 	.word	0x40011400
 802488c:	58024400 	.word	0x58024400
 8024890:	40007800 	.word	0x40007800
 8024894:	40007c00 	.word	0x40007c00
 8024898:	58000c00 	.word	0x58000c00
 802489c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80248a0:	4b9d      	ldr	r3, [pc, #628]	@ (8024b18 <UART_SetConfig+0x928>)
 80248a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80248a4:	e00c      	b.n	80248c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80248a6:	4b9d      	ldr	r3, [pc, #628]	@ (8024b1c <UART_SetConfig+0x92c>)
 80248a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80248aa:	e009      	b.n	80248c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80248ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80248b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80248b2:	e005      	b.n	80248c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80248b4:	2300      	movs	r3, #0
 80248b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80248b8:	2301      	movs	r3, #1
 80248ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80248be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80248c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80248c2:	2b00      	cmp	r3, #0
 80248c4:	f000 81de 	beq.w	8024c84 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80248c8:	697b      	ldr	r3, [r7, #20]
 80248ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80248cc:	4a94      	ldr	r2, [pc, #592]	@ (8024b20 <UART_SetConfig+0x930>)
 80248ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80248d2:	461a      	mov	r2, r3
 80248d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80248d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80248da:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80248dc:	697b      	ldr	r3, [r7, #20]
 80248de:	685a      	ldr	r2, [r3, #4]
 80248e0:	4613      	mov	r3, r2
 80248e2:	005b      	lsls	r3, r3, #1
 80248e4:	4413      	add	r3, r2
 80248e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80248e8:	429a      	cmp	r2, r3
 80248ea:	d305      	bcc.n	80248f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80248ec:	697b      	ldr	r3, [r7, #20]
 80248ee:	685b      	ldr	r3, [r3, #4]
 80248f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80248f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80248f4:	429a      	cmp	r2, r3
 80248f6:	d903      	bls.n	8024900 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80248f8:	2301      	movs	r3, #1
 80248fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80248fe:	e1c1      	b.n	8024c84 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8024900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024902:	2200      	movs	r2, #0
 8024904:	60bb      	str	r3, [r7, #8]
 8024906:	60fa      	str	r2, [r7, #12]
 8024908:	697b      	ldr	r3, [r7, #20]
 802490a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802490c:	4a84      	ldr	r2, [pc, #528]	@ (8024b20 <UART_SetConfig+0x930>)
 802490e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8024912:	b29b      	uxth	r3, r3
 8024914:	2200      	movs	r2, #0
 8024916:	603b      	str	r3, [r7, #0]
 8024918:	607a      	str	r2, [r7, #4]
 802491a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802491e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8024922:	f7dc f80f 	bl	8000944 <__aeabi_uldivmod>
 8024926:	4602      	mov	r2, r0
 8024928:	460b      	mov	r3, r1
 802492a:	4610      	mov	r0, r2
 802492c:	4619      	mov	r1, r3
 802492e:	f04f 0200 	mov.w	r2, #0
 8024932:	f04f 0300 	mov.w	r3, #0
 8024936:	020b      	lsls	r3, r1, #8
 8024938:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 802493c:	0202      	lsls	r2, r0, #8
 802493e:	6979      	ldr	r1, [r7, #20]
 8024940:	6849      	ldr	r1, [r1, #4]
 8024942:	0849      	lsrs	r1, r1, #1
 8024944:	2000      	movs	r0, #0
 8024946:	460c      	mov	r4, r1
 8024948:	4605      	mov	r5, r0
 802494a:	eb12 0804 	adds.w	r8, r2, r4
 802494e:	eb43 0905 	adc.w	r9, r3, r5
 8024952:	697b      	ldr	r3, [r7, #20]
 8024954:	685b      	ldr	r3, [r3, #4]
 8024956:	2200      	movs	r2, #0
 8024958:	469a      	mov	sl, r3
 802495a:	4693      	mov	fp, r2
 802495c:	4652      	mov	r2, sl
 802495e:	465b      	mov	r3, fp
 8024960:	4640      	mov	r0, r8
 8024962:	4649      	mov	r1, r9
 8024964:	f7db ffee 	bl	8000944 <__aeabi_uldivmod>
 8024968:	4602      	mov	r2, r0
 802496a:	460b      	mov	r3, r1
 802496c:	4613      	mov	r3, r2
 802496e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8024970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024972:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8024976:	d308      	bcc.n	802498a <UART_SetConfig+0x79a>
 8024978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802497a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 802497e:	d204      	bcs.n	802498a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8024980:	697b      	ldr	r3, [r7, #20]
 8024982:	681b      	ldr	r3, [r3, #0]
 8024984:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8024986:	60da      	str	r2, [r3, #12]
 8024988:	e17c      	b.n	8024c84 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 802498a:	2301      	movs	r3, #1
 802498c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8024990:	e178      	b.n	8024c84 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8024992:	697b      	ldr	r3, [r7, #20]
 8024994:	69db      	ldr	r3, [r3, #28]
 8024996:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802499a:	f040 80c5 	bne.w	8024b28 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 802499e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80249a2:	2b20      	cmp	r3, #32
 80249a4:	dc48      	bgt.n	8024a38 <UART_SetConfig+0x848>
 80249a6:	2b00      	cmp	r3, #0
 80249a8:	db7b      	blt.n	8024aa2 <UART_SetConfig+0x8b2>
 80249aa:	2b20      	cmp	r3, #32
 80249ac:	d879      	bhi.n	8024aa2 <UART_SetConfig+0x8b2>
 80249ae:	a201      	add	r2, pc, #4	@ (adr r2, 80249b4 <UART_SetConfig+0x7c4>)
 80249b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80249b4:	08024a3f 	.word	0x08024a3f
 80249b8:	08024a47 	.word	0x08024a47
 80249bc:	08024aa3 	.word	0x08024aa3
 80249c0:	08024aa3 	.word	0x08024aa3
 80249c4:	08024a4f 	.word	0x08024a4f
 80249c8:	08024aa3 	.word	0x08024aa3
 80249cc:	08024aa3 	.word	0x08024aa3
 80249d0:	08024aa3 	.word	0x08024aa3
 80249d4:	08024a5f 	.word	0x08024a5f
 80249d8:	08024aa3 	.word	0x08024aa3
 80249dc:	08024aa3 	.word	0x08024aa3
 80249e0:	08024aa3 	.word	0x08024aa3
 80249e4:	08024aa3 	.word	0x08024aa3
 80249e8:	08024aa3 	.word	0x08024aa3
 80249ec:	08024aa3 	.word	0x08024aa3
 80249f0:	08024aa3 	.word	0x08024aa3
 80249f4:	08024a6f 	.word	0x08024a6f
 80249f8:	08024aa3 	.word	0x08024aa3
 80249fc:	08024aa3 	.word	0x08024aa3
 8024a00:	08024aa3 	.word	0x08024aa3
 8024a04:	08024aa3 	.word	0x08024aa3
 8024a08:	08024aa3 	.word	0x08024aa3
 8024a0c:	08024aa3 	.word	0x08024aa3
 8024a10:	08024aa3 	.word	0x08024aa3
 8024a14:	08024aa3 	.word	0x08024aa3
 8024a18:	08024aa3 	.word	0x08024aa3
 8024a1c:	08024aa3 	.word	0x08024aa3
 8024a20:	08024aa3 	.word	0x08024aa3
 8024a24:	08024aa3 	.word	0x08024aa3
 8024a28:	08024aa3 	.word	0x08024aa3
 8024a2c:	08024aa3 	.word	0x08024aa3
 8024a30:	08024aa3 	.word	0x08024aa3
 8024a34:	08024a95 	.word	0x08024a95
 8024a38:	2b40      	cmp	r3, #64	@ 0x40
 8024a3a:	d02e      	beq.n	8024a9a <UART_SetConfig+0x8aa>
 8024a3c:	e031      	b.n	8024aa2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8024a3e:	f7fb f821 	bl	801fa84 <HAL_RCC_GetPCLK1Freq>
 8024a42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8024a44:	e033      	b.n	8024aae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8024a46:	f7fb f833 	bl	801fab0 <HAL_RCC_GetPCLK2Freq>
 8024a4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8024a4c:	e02f      	b.n	8024aae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8024a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8024a52:	4618      	mov	r0, r3
 8024a54:	f7fc ffe2 	bl	8021a1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8024a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024a5c:	e027      	b.n	8024aae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8024a5e:	f107 0318 	add.w	r3, r7, #24
 8024a62:	4618      	mov	r0, r3
 8024a64:	f7fd f92e 	bl	8021cc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8024a68:	69fb      	ldr	r3, [r7, #28]
 8024a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024a6c:	e01f      	b.n	8024aae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8024a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8024b24 <UART_SetConfig+0x934>)
 8024a70:	681b      	ldr	r3, [r3, #0]
 8024a72:	f003 0320 	and.w	r3, r3, #32
 8024a76:	2b00      	cmp	r3, #0
 8024a78:	d009      	beq.n	8024a8e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8024a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8024b24 <UART_SetConfig+0x934>)
 8024a7c:	681b      	ldr	r3, [r3, #0]
 8024a7e:	08db      	lsrs	r3, r3, #3
 8024a80:	f003 0303 	and.w	r3, r3, #3
 8024a84:	4a24      	ldr	r2, [pc, #144]	@ (8024b18 <UART_SetConfig+0x928>)
 8024a86:	fa22 f303 	lsr.w	r3, r2, r3
 8024a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8024a8c:	e00f      	b.n	8024aae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8024a8e:	4b22      	ldr	r3, [pc, #136]	@ (8024b18 <UART_SetConfig+0x928>)
 8024a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024a92:	e00c      	b.n	8024aae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8024a94:	4b21      	ldr	r3, [pc, #132]	@ (8024b1c <UART_SetConfig+0x92c>)
 8024a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024a98:	e009      	b.n	8024aae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8024a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8024a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024aa0:	e005      	b.n	8024aae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8024aa2:	2300      	movs	r3, #0
 8024aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8024aa6:	2301      	movs	r3, #1
 8024aa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8024aac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8024aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024ab0:	2b00      	cmp	r3, #0
 8024ab2:	f000 80e7 	beq.w	8024c84 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8024ab6:	697b      	ldr	r3, [r7, #20]
 8024ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024aba:	4a19      	ldr	r2, [pc, #100]	@ (8024b20 <UART_SetConfig+0x930>)
 8024abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8024ac0:	461a      	mov	r2, r3
 8024ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024ac4:	fbb3 f3f2 	udiv	r3, r3, r2
 8024ac8:	005a      	lsls	r2, r3, #1
 8024aca:	697b      	ldr	r3, [r7, #20]
 8024acc:	685b      	ldr	r3, [r3, #4]
 8024ace:	085b      	lsrs	r3, r3, #1
 8024ad0:	441a      	add	r2, r3
 8024ad2:	697b      	ldr	r3, [r7, #20]
 8024ad4:	685b      	ldr	r3, [r3, #4]
 8024ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8024ada:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8024adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024ade:	2b0f      	cmp	r3, #15
 8024ae0:	d916      	bls.n	8024b10 <UART_SetConfig+0x920>
 8024ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8024ae8:	d212      	bcs.n	8024b10 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8024aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024aec:	b29b      	uxth	r3, r3
 8024aee:	f023 030f 	bic.w	r3, r3, #15
 8024af2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8024af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024af6:	085b      	lsrs	r3, r3, #1
 8024af8:	b29b      	uxth	r3, r3
 8024afa:	f003 0307 	and.w	r3, r3, #7
 8024afe:	b29a      	uxth	r2, r3
 8024b00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8024b02:	4313      	orrs	r3, r2
 8024b04:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8024b06:	697b      	ldr	r3, [r7, #20]
 8024b08:	681b      	ldr	r3, [r3, #0]
 8024b0a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8024b0c:	60da      	str	r2, [r3, #12]
 8024b0e:	e0b9      	b.n	8024c84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8024b10:	2301      	movs	r3, #1
 8024b12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8024b16:	e0b5      	b.n	8024c84 <UART_SetConfig+0xa94>
 8024b18:	03d09000 	.word	0x03d09000
 8024b1c:	003d0900 	.word	0x003d0900
 8024b20:	0802b788 	.word	0x0802b788
 8024b24:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8024b28:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8024b2c:	2b20      	cmp	r3, #32
 8024b2e:	dc49      	bgt.n	8024bc4 <UART_SetConfig+0x9d4>
 8024b30:	2b00      	cmp	r3, #0
 8024b32:	db7c      	blt.n	8024c2e <UART_SetConfig+0xa3e>
 8024b34:	2b20      	cmp	r3, #32
 8024b36:	d87a      	bhi.n	8024c2e <UART_SetConfig+0xa3e>
 8024b38:	a201      	add	r2, pc, #4	@ (adr r2, 8024b40 <UART_SetConfig+0x950>)
 8024b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024b3e:	bf00      	nop
 8024b40:	08024bcb 	.word	0x08024bcb
 8024b44:	08024bd3 	.word	0x08024bd3
 8024b48:	08024c2f 	.word	0x08024c2f
 8024b4c:	08024c2f 	.word	0x08024c2f
 8024b50:	08024bdb 	.word	0x08024bdb
 8024b54:	08024c2f 	.word	0x08024c2f
 8024b58:	08024c2f 	.word	0x08024c2f
 8024b5c:	08024c2f 	.word	0x08024c2f
 8024b60:	08024beb 	.word	0x08024beb
 8024b64:	08024c2f 	.word	0x08024c2f
 8024b68:	08024c2f 	.word	0x08024c2f
 8024b6c:	08024c2f 	.word	0x08024c2f
 8024b70:	08024c2f 	.word	0x08024c2f
 8024b74:	08024c2f 	.word	0x08024c2f
 8024b78:	08024c2f 	.word	0x08024c2f
 8024b7c:	08024c2f 	.word	0x08024c2f
 8024b80:	08024bfb 	.word	0x08024bfb
 8024b84:	08024c2f 	.word	0x08024c2f
 8024b88:	08024c2f 	.word	0x08024c2f
 8024b8c:	08024c2f 	.word	0x08024c2f
 8024b90:	08024c2f 	.word	0x08024c2f
 8024b94:	08024c2f 	.word	0x08024c2f
 8024b98:	08024c2f 	.word	0x08024c2f
 8024b9c:	08024c2f 	.word	0x08024c2f
 8024ba0:	08024c2f 	.word	0x08024c2f
 8024ba4:	08024c2f 	.word	0x08024c2f
 8024ba8:	08024c2f 	.word	0x08024c2f
 8024bac:	08024c2f 	.word	0x08024c2f
 8024bb0:	08024c2f 	.word	0x08024c2f
 8024bb4:	08024c2f 	.word	0x08024c2f
 8024bb8:	08024c2f 	.word	0x08024c2f
 8024bbc:	08024c2f 	.word	0x08024c2f
 8024bc0:	08024c21 	.word	0x08024c21
 8024bc4:	2b40      	cmp	r3, #64	@ 0x40
 8024bc6:	d02e      	beq.n	8024c26 <UART_SetConfig+0xa36>
 8024bc8:	e031      	b.n	8024c2e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8024bca:	f7fa ff5b 	bl	801fa84 <HAL_RCC_GetPCLK1Freq>
 8024bce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8024bd0:	e033      	b.n	8024c3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8024bd2:	f7fa ff6d 	bl	801fab0 <HAL_RCC_GetPCLK2Freq>
 8024bd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8024bd8:	e02f      	b.n	8024c3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8024bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8024bde:	4618      	mov	r0, r3
 8024be0:	f7fc ff1c 	bl	8021a1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8024be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024be8:	e027      	b.n	8024c3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8024bea:	f107 0318 	add.w	r3, r7, #24
 8024bee:	4618      	mov	r0, r3
 8024bf0:	f7fd f868 	bl	8021cc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8024bf4:	69fb      	ldr	r3, [r7, #28]
 8024bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024bf8:	e01f      	b.n	8024c3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8024bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8024cb0 <UART_SetConfig+0xac0>)
 8024bfc:	681b      	ldr	r3, [r3, #0]
 8024bfe:	f003 0320 	and.w	r3, r3, #32
 8024c02:	2b00      	cmp	r3, #0
 8024c04:	d009      	beq.n	8024c1a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8024c06:	4b2a      	ldr	r3, [pc, #168]	@ (8024cb0 <UART_SetConfig+0xac0>)
 8024c08:	681b      	ldr	r3, [r3, #0]
 8024c0a:	08db      	lsrs	r3, r3, #3
 8024c0c:	f003 0303 	and.w	r3, r3, #3
 8024c10:	4a28      	ldr	r2, [pc, #160]	@ (8024cb4 <UART_SetConfig+0xac4>)
 8024c12:	fa22 f303 	lsr.w	r3, r2, r3
 8024c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8024c18:	e00f      	b.n	8024c3a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8024c1a:	4b26      	ldr	r3, [pc, #152]	@ (8024cb4 <UART_SetConfig+0xac4>)
 8024c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024c1e:	e00c      	b.n	8024c3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8024c20:	4b25      	ldr	r3, [pc, #148]	@ (8024cb8 <UART_SetConfig+0xac8>)
 8024c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024c24:	e009      	b.n	8024c3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8024c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8024c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8024c2c:	e005      	b.n	8024c3a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8024c2e:	2300      	movs	r3, #0
 8024c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8024c32:	2301      	movs	r3, #1
 8024c34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8024c38:	bf00      	nop
    }

    if (pclk != 0U)
 8024c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024c3c:	2b00      	cmp	r3, #0
 8024c3e:	d021      	beq.n	8024c84 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8024c40:	697b      	ldr	r3, [r7, #20]
 8024c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024c44:	4a1d      	ldr	r2, [pc, #116]	@ (8024cbc <UART_SetConfig+0xacc>)
 8024c46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8024c4a:	461a      	mov	r2, r3
 8024c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024c4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8024c52:	697b      	ldr	r3, [r7, #20]
 8024c54:	685b      	ldr	r3, [r3, #4]
 8024c56:	085b      	lsrs	r3, r3, #1
 8024c58:	441a      	add	r2, r3
 8024c5a:	697b      	ldr	r3, [r7, #20]
 8024c5c:	685b      	ldr	r3, [r3, #4]
 8024c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8024c62:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8024c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024c66:	2b0f      	cmp	r3, #15
 8024c68:	d909      	bls.n	8024c7e <UART_SetConfig+0xa8e>
 8024c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8024c70:	d205      	bcs.n	8024c7e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8024c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024c74:	b29a      	uxth	r2, r3
 8024c76:	697b      	ldr	r3, [r7, #20]
 8024c78:	681b      	ldr	r3, [r3, #0]
 8024c7a:	60da      	str	r2, [r3, #12]
 8024c7c:	e002      	b.n	8024c84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8024c7e:	2301      	movs	r3, #1
 8024c80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8024c84:	697b      	ldr	r3, [r7, #20]
 8024c86:	2201      	movs	r2, #1
 8024c88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8024c8c:	697b      	ldr	r3, [r7, #20]
 8024c8e:	2201      	movs	r2, #1
 8024c90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8024c94:	697b      	ldr	r3, [r7, #20]
 8024c96:	2200      	movs	r2, #0
 8024c98:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8024c9a:	697b      	ldr	r3, [r7, #20]
 8024c9c:	2200      	movs	r2, #0
 8024c9e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8024ca0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8024ca4:	4618      	mov	r0, r3
 8024ca6:	3748      	adds	r7, #72	@ 0x48
 8024ca8:	46bd      	mov	sp, r7
 8024caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8024cae:	bf00      	nop
 8024cb0:	58024400 	.word	0x58024400
 8024cb4:	03d09000 	.word	0x03d09000
 8024cb8:	003d0900 	.word	0x003d0900
 8024cbc:	0802b788 	.word	0x0802b788

08024cc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8024cc0:	b480      	push	{r7}
 8024cc2:	b083      	sub	sp, #12
 8024cc4:	af00      	add	r7, sp, #0
 8024cc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8024cc8:	687b      	ldr	r3, [r7, #4]
 8024cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024ccc:	f003 0308 	and.w	r3, r3, #8
 8024cd0:	2b00      	cmp	r3, #0
 8024cd2:	d00a      	beq.n	8024cea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8024cd4:	687b      	ldr	r3, [r7, #4]
 8024cd6:	681b      	ldr	r3, [r3, #0]
 8024cd8:	685b      	ldr	r3, [r3, #4]
 8024cda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8024cde:	687b      	ldr	r3, [r7, #4]
 8024ce0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8024ce2:	687b      	ldr	r3, [r7, #4]
 8024ce4:	681b      	ldr	r3, [r3, #0]
 8024ce6:	430a      	orrs	r2, r1
 8024ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8024cea:	687b      	ldr	r3, [r7, #4]
 8024cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024cee:	f003 0301 	and.w	r3, r3, #1
 8024cf2:	2b00      	cmp	r3, #0
 8024cf4:	d00a      	beq.n	8024d0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8024cf6:	687b      	ldr	r3, [r7, #4]
 8024cf8:	681b      	ldr	r3, [r3, #0]
 8024cfa:	685b      	ldr	r3, [r3, #4]
 8024cfc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8024d00:	687b      	ldr	r3, [r7, #4]
 8024d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8024d04:	687b      	ldr	r3, [r7, #4]
 8024d06:	681b      	ldr	r3, [r3, #0]
 8024d08:	430a      	orrs	r2, r1
 8024d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8024d0c:	687b      	ldr	r3, [r7, #4]
 8024d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024d10:	f003 0302 	and.w	r3, r3, #2
 8024d14:	2b00      	cmp	r3, #0
 8024d16:	d00a      	beq.n	8024d2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8024d18:	687b      	ldr	r3, [r7, #4]
 8024d1a:	681b      	ldr	r3, [r3, #0]
 8024d1c:	685b      	ldr	r3, [r3, #4]
 8024d1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8024d22:	687b      	ldr	r3, [r7, #4]
 8024d24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8024d26:	687b      	ldr	r3, [r7, #4]
 8024d28:	681b      	ldr	r3, [r3, #0]
 8024d2a:	430a      	orrs	r2, r1
 8024d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8024d2e:	687b      	ldr	r3, [r7, #4]
 8024d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024d32:	f003 0304 	and.w	r3, r3, #4
 8024d36:	2b00      	cmp	r3, #0
 8024d38:	d00a      	beq.n	8024d50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8024d3a:	687b      	ldr	r3, [r7, #4]
 8024d3c:	681b      	ldr	r3, [r3, #0]
 8024d3e:	685b      	ldr	r3, [r3, #4]
 8024d40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8024d44:	687b      	ldr	r3, [r7, #4]
 8024d46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8024d48:	687b      	ldr	r3, [r7, #4]
 8024d4a:	681b      	ldr	r3, [r3, #0]
 8024d4c:	430a      	orrs	r2, r1
 8024d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8024d50:	687b      	ldr	r3, [r7, #4]
 8024d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024d54:	f003 0310 	and.w	r3, r3, #16
 8024d58:	2b00      	cmp	r3, #0
 8024d5a:	d00a      	beq.n	8024d72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8024d5c:	687b      	ldr	r3, [r7, #4]
 8024d5e:	681b      	ldr	r3, [r3, #0]
 8024d60:	689b      	ldr	r3, [r3, #8]
 8024d62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8024d66:	687b      	ldr	r3, [r7, #4]
 8024d68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8024d6a:	687b      	ldr	r3, [r7, #4]
 8024d6c:	681b      	ldr	r3, [r3, #0]
 8024d6e:	430a      	orrs	r2, r1
 8024d70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8024d72:	687b      	ldr	r3, [r7, #4]
 8024d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024d76:	f003 0320 	and.w	r3, r3, #32
 8024d7a:	2b00      	cmp	r3, #0
 8024d7c:	d00a      	beq.n	8024d94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8024d7e:	687b      	ldr	r3, [r7, #4]
 8024d80:	681b      	ldr	r3, [r3, #0]
 8024d82:	689b      	ldr	r3, [r3, #8]
 8024d84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8024d88:	687b      	ldr	r3, [r7, #4]
 8024d8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8024d8c:	687b      	ldr	r3, [r7, #4]
 8024d8e:	681b      	ldr	r3, [r3, #0]
 8024d90:	430a      	orrs	r2, r1
 8024d92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8024d94:	687b      	ldr	r3, [r7, #4]
 8024d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024d9c:	2b00      	cmp	r3, #0
 8024d9e:	d01a      	beq.n	8024dd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8024da0:	687b      	ldr	r3, [r7, #4]
 8024da2:	681b      	ldr	r3, [r3, #0]
 8024da4:	685b      	ldr	r3, [r3, #4]
 8024da6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8024daa:	687b      	ldr	r3, [r7, #4]
 8024dac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8024dae:	687b      	ldr	r3, [r7, #4]
 8024db0:	681b      	ldr	r3, [r3, #0]
 8024db2:	430a      	orrs	r2, r1
 8024db4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8024db6:	687b      	ldr	r3, [r7, #4]
 8024db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8024dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8024dbe:	d10a      	bne.n	8024dd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8024dc0:	687b      	ldr	r3, [r7, #4]
 8024dc2:	681b      	ldr	r3, [r3, #0]
 8024dc4:	685b      	ldr	r3, [r3, #4]
 8024dc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8024dca:	687b      	ldr	r3, [r7, #4]
 8024dcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8024dce:	687b      	ldr	r3, [r7, #4]
 8024dd0:	681b      	ldr	r3, [r3, #0]
 8024dd2:	430a      	orrs	r2, r1
 8024dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8024dd6:	687b      	ldr	r3, [r7, #4]
 8024dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8024dde:	2b00      	cmp	r3, #0
 8024de0:	d00a      	beq.n	8024df8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8024de2:	687b      	ldr	r3, [r7, #4]
 8024de4:	681b      	ldr	r3, [r3, #0]
 8024de6:	685b      	ldr	r3, [r3, #4]
 8024de8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8024dec:	687b      	ldr	r3, [r7, #4]
 8024dee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8024df0:	687b      	ldr	r3, [r7, #4]
 8024df2:	681b      	ldr	r3, [r3, #0]
 8024df4:	430a      	orrs	r2, r1
 8024df6:	605a      	str	r2, [r3, #4]
  }
}
 8024df8:	bf00      	nop
 8024dfa:	370c      	adds	r7, #12
 8024dfc:	46bd      	mov	sp, r7
 8024dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e02:	4770      	bx	lr

08024e04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8024e04:	b580      	push	{r7, lr}
 8024e06:	b098      	sub	sp, #96	@ 0x60
 8024e08:	af02      	add	r7, sp, #8
 8024e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8024e0c:	687b      	ldr	r3, [r7, #4]
 8024e0e:	2200      	movs	r2, #0
 8024e10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8024e14:	f7f6 ff42 	bl	801bc9c <HAL_GetTick>
 8024e18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8024e1a:	687b      	ldr	r3, [r7, #4]
 8024e1c:	681b      	ldr	r3, [r3, #0]
 8024e1e:	681b      	ldr	r3, [r3, #0]
 8024e20:	f003 0308 	and.w	r3, r3, #8
 8024e24:	2b08      	cmp	r3, #8
 8024e26:	d12f      	bne.n	8024e88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8024e28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8024e2c:	9300      	str	r3, [sp, #0]
 8024e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8024e30:	2200      	movs	r2, #0
 8024e32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8024e36:	6878      	ldr	r0, [r7, #4]
 8024e38:	f000 f88e 	bl	8024f58 <UART_WaitOnFlagUntilTimeout>
 8024e3c:	4603      	mov	r3, r0
 8024e3e:	2b00      	cmp	r3, #0
 8024e40:	d022      	beq.n	8024e88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8024e42:	687b      	ldr	r3, [r7, #4]
 8024e44:	681b      	ldr	r3, [r3, #0]
 8024e46:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024e4a:	e853 3f00 	ldrex	r3, [r3]
 8024e4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8024e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024e52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8024e56:	653b      	str	r3, [r7, #80]	@ 0x50
 8024e58:	687b      	ldr	r3, [r7, #4]
 8024e5a:	681b      	ldr	r3, [r3, #0]
 8024e5c:	461a      	mov	r2, r3
 8024e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8024e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8024e62:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024e64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8024e66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8024e68:	e841 2300 	strex	r3, r2, [r1]
 8024e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8024e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024e70:	2b00      	cmp	r3, #0
 8024e72:	d1e6      	bne.n	8024e42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8024e74:	687b      	ldr	r3, [r7, #4]
 8024e76:	2220      	movs	r2, #32
 8024e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8024e7c:	687b      	ldr	r3, [r7, #4]
 8024e7e:	2200      	movs	r2, #0
 8024e80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8024e84:	2303      	movs	r3, #3
 8024e86:	e063      	b.n	8024f50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8024e88:	687b      	ldr	r3, [r7, #4]
 8024e8a:	681b      	ldr	r3, [r3, #0]
 8024e8c:	681b      	ldr	r3, [r3, #0]
 8024e8e:	f003 0304 	and.w	r3, r3, #4
 8024e92:	2b04      	cmp	r3, #4
 8024e94:	d149      	bne.n	8024f2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8024e96:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8024e9a:	9300      	str	r3, [sp, #0]
 8024e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8024e9e:	2200      	movs	r2, #0
 8024ea0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8024ea4:	6878      	ldr	r0, [r7, #4]
 8024ea6:	f000 f857 	bl	8024f58 <UART_WaitOnFlagUntilTimeout>
 8024eaa:	4603      	mov	r3, r0
 8024eac:	2b00      	cmp	r3, #0
 8024eae:	d03c      	beq.n	8024f2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8024eb0:	687b      	ldr	r3, [r7, #4]
 8024eb2:	681b      	ldr	r3, [r3, #0]
 8024eb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024eb8:	e853 3f00 	ldrex	r3, [r3]
 8024ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8024ebe:	6a3b      	ldr	r3, [r7, #32]
 8024ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8024ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8024ec6:	687b      	ldr	r3, [r7, #4]
 8024ec8:	681b      	ldr	r3, [r3, #0]
 8024eca:	461a      	mov	r2, r3
 8024ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8024ece:	633b      	str	r3, [r7, #48]	@ 0x30
 8024ed0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024ed2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8024ed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024ed6:	e841 2300 	strex	r3, r2, [r1]
 8024eda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8024edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024ede:	2b00      	cmp	r3, #0
 8024ee0:	d1e6      	bne.n	8024eb0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8024ee2:	687b      	ldr	r3, [r7, #4]
 8024ee4:	681b      	ldr	r3, [r3, #0]
 8024ee6:	3308      	adds	r3, #8
 8024ee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024eea:	693b      	ldr	r3, [r7, #16]
 8024eec:	e853 3f00 	ldrex	r3, [r3]
 8024ef0:	60fb      	str	r3, [r7, #12]
   return(result);
 8024ef2:	68fb      	ldr	r3, [r7, #12]
 8024ef4:	f023 0301 	bic.w	r3, r3, #1
 8024ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8024efa:	687b      	ldr	r3, [r7, #4]
 8024efc:	681b      	ldr	r3, [r3, #0]
 8024efe:	3308      	adds	r3, #8
 8024f00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8024f02:	61fa      	str	r2, [r7, #28]
 8024f04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024f06:	69b9      	ldr	r1, [r7, #24]
 8024f08:	69fa      	ldr	r2, [r7, #28]
 8024f0a:	e841 2300 	strex	r3, r2, [r1]
 8024f0e:	617b      	str	r3, [r7, #20]
   return(result);
 8024f10:	697b      	ldr	r3, [r7, #20]
 8024f12:	2b00      	cmp	r3, #0
 8024f14:	d1e5      	bne.n	8024ee2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8024f16:	687b      	ldr	r3, [r7, #4]
 8024f18:	2220      	movs	r2, #32
 8024f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8024f1e:	687b      	ldr	r3, [r7, #4]
 8024f20:	2200      	movs	r2, #0
 8024f22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8024f26:	2303      	movs	r3, #3
 8024f28:	e012      	b.n	8024f50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8024f2a:	687b      	ldr	r3, [r7, #4]
 8024f2c:	2220      	movs	r2, #32
 8024f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8024f32:	687b      	ldr	r3, [r7, #4]
 8024f34:	2220      	movs	r2, #32
 8024f36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8024f3a:	687b      	ldr	r3, [r7, #4]
 8024f3c:	2200      	movs	r2, #0
 8024f3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8024f40:	687b      	ldr	r3, [r7, #4]
 8024f42:	2200      	movs	r2, #0
 8024f44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8024f46:	687b      	ldr	r3, [r7, #4]
 8024f48:	2200      	movs	r2, #0
 8024f4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8024f4e:	2300      	movs	r3, #0
}
 8024f50:	4618      	mov	r0, r3
 8024f52:	3758      	adds	r7, #88	@ 0x58
 8024f54:	46bd      	mov	sp, r7
 8024f56:	bd80      	pop	{r7, pc}

08024f58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8024f58:	b580      	push	{r7, lr}
 8024f5a:	b084      	sub	sp, #16
 8024f5c:	af00      	add	r7, sp, #0
 8024f5e:	60f8      	str	r0, [r7, #12]
 8024f60:	60b9      	str	r1, [r7, #8]
 8024f62:	603b      	str	r3, [r7, #0]
 8024f64:	4613      	mov	r3, r2
 8024f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8024f68:	e04f      	b.n	802500a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8024f6a:	69bb      	ldr	r3, [r7, #24]
 8024f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024f70:	d04b      	beq.n	802500a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8024f72:	f7f6 fe93 	bl	801bc9c <HAL_GetTick>
 8024f76:	4602      	mov	r2, r0
 8024f78:	683b      	ldr	r3, [r7, #0]
 8024f7a:	1ad3      	subs	r3, r2, r3
 8024f7c:	69ba      	ldr	r2, [r7, #24]
 8024f7e:	429a      	cmp	r2, r3
 8024f80:	d302      	bcc.n	8024f88 <UART_WaitOnFlagUntilTimeout+0x30>
 8024f82:	69bb      	ldr	r3, [r7, #24]
 8024f84:	2b00      	cmp	r3, #0
 8024f86:	d101      	bne.n	8024f8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8024f88:	2303      	movs	r3, #3
 8024f8a:	e04e      	b.n	802502a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8024f8c:	68fb      	ldr	r3, [r7, #12]
 8024f8e:	681b      	ldr	r3, [r3, #0]
 8024f90:	681b      	ldr	r3, [r3, #0]
 8024f92:	f003 0304 	and.w	r3, r3, #4
 8024f96:	2b00      	cmp	r3, #0
 8024f98:	d037      	beq.n	802500a <UART_WaitOnFlagUntilTimeout+0xb2>
 8024f9a:	68bb      	ldr	r3, [r7, #8]
 8024f9c:	2b80      	cmp	r3, #128	@ 0x80
 8024f9e:	d034      	beq.n	802500a <UART_WaitOnFlagUntilTimeout+0xb2>
 8024fa0:	68bb      	ldr	r3, [r7, #8]
 8024fa2:	2b40      	cmp	r3, #64	@ 0x40
 8024fa4:	d031      	beq.n	802500a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8024fa6:	68fb      	ldr	r3, [r7, #12]
 8024fa8:	681b      	ldr	r3, [r3, #0]
 8024faa:	69db      	ldr	r3, [r3, #28]
 8024fac:	f003 0308 	and.w	r3, r3, #8
 8024fb0:	2b08      	cmp	r3, #8
 8024fb2:	d110      	bne.n	8024fd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8024fb4:	68fb      	ldr	r3, [r7, #12]
 8024fb6:	681b      	ldr	r3, [r3, #0]
 8024fb8:	2208      	movs	r2, #8
 8024fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8024fbc:	68f8      	ldr	r0, [r7, #12]
 8024fbe:	f000 f839 	bl	8025034 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8024fc2:	68fb      	ldr	r3, [r7, #12]
 8024fc4:	2208      	movs	r2, #8
 8024fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8024fca:	68fb      	ldr	r3, [r7, #12]
 8024fcc:	2200      	movs	r2, #0
 8024fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8024fd2:	2301      	movs	r3, #1
 8024fd4:	e029      	b.n	802502a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8024fd6:	68fb      	ldr	r3, [r7, #12]
 8024fd8:	681b      	ldr	r3, [r3, #0]
 8024fda:	69db      	ldr	r3, [r3, #28]
 8024fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8024fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8024fe4:	d111      	bne.n	802500a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8024fe6:	68fb      	ldr	r3, [r7, #12]
 8024fe8:	681b      	ldr	r3, [r3, #0]
 8024fea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8024fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8024ff0:	68f8      	ldr	r0, [r7, #12]
 8024ff2:	f000 f81f 	bl	8025034 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8024ff6:	68fb      	ldr	r3, [r7, #12]
 8024ff8:	2220      	movs	r2, #32
 8024ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8024ffe:	68fb      	ldr	r3, [r7, #12]
 8025000:	2200      	movs	r2, #0
 8025002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8025006:	2303      	movs	r3, #3
 8025008:	e00f      	b.n	802502a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802500a:	68fb      	ldr	r3, [r7, #12]
 802500c:	681b      	ldr	r3, [r3, #0]
 802500e:	69da      	ldr	r2, [r3, #28]
 8025010:	68bb      	ldr	r3, [r7, #8]
 8025012:	4013      	ands	r3, r2
 8025014:	68ba      	ldr	r2, [r7, #8]
 8025016:	429a      	cmp	r2, r3
 8025018:	bf0c      	ite	eq
 802501a:	2301      	moveq	r3, #1
 802501c:	2300      	movne	r3, #0
 802501e:	b2db      	uxtb	r3, r3
 8025020:	461a      	mov	r2, r3
 8025022:	79fb      	ldrb	r3, [r7, #7]
 8025024:	429a      	cmp	r2, r3
 8025026:	d0a0      	beq.n	8024f6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8025028:	2300      	movs	r3, #0
}
 802502a:	4618      	mov	r0, r3
 802502c:	3710      	adds	r7, #16
 802502e:	46bd      	mov	sp, r7
 8025030:	bd80      	pop	{r7, pc}
	...

08025034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8025034:	b480      	push	{r7}
 8025036:	b095      	sub	sp, #84	@ 0x54
 8025038:	af00      	add	r7, sp, #0
 802503a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 802503c:	687b      	ldr	r3, [r7, #4]
 802503e:	681b      	ldr	r3, [r3, #0]
 8025040:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025044:	e853 3f00 	ldrex	r3, [r3]
 8025048:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 802504a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802504c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8025050:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8025052:	687b      	ldr	r3, [r7, #4]
 8025054:	681b      	ldr	r3, [r3, #0]
 8025056:	461a      	mov	r2, r3
 8025058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802505a:	643b      	str	r3, [r7, #64]	@ 0x40
 802505c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802505e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8025060:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8025062:	e841 2300 	strex	r3, r2, [r1]
 8025066:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8025068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802506a:	2b00      	cmp	r3, #0
 802506c:	d1e6      	bne.n	802503c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 802506e:	687b      	ldr	r3, [r7, #4]
 8025070:	681b      	ldr	r3, [r3, #0]
 8025072:	3308      	adds	r3, #8
 8025074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025076:	6a3b      	ldr	r3, [r7, #32]
 8025078:	e853 3f00 	ldrex	r3, [r3]
 802507c:	61fb      	str	r3, [r7, #28]
   return(result);
 802507e:	69fa      	ldr	r2, [r7, #28]
 8025080:	4b1e      	ldr	r3, [pc, #120]	@ (80250fc <UART_EndRxTransfer+0xc8>)
 8025082:	4013      	ands	r3, r2
 8025084:	64bb      	str	r3, [r7, #72]	@ 0x48
 8025086:	687b      	ldr	r3, [r7, #4]
 8025088:	681b      	ldr	r3, [r3, #0]
 802508a:	3308      	adds	r3, #8
 802508c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802508e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8025090:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025092:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8025094:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025096:	e841 2300 	strex	r3, r2, [r1]
 802509a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 802509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802509e:	2b00      	cmp	r3, #0
 80250a0:	d1e5      	bne.n	802506e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80250a2:	687b      	ldr	r3, [r7, #4]
 80250a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80250a6:	2b01      	cmp	r3, #1
 80250a8:	d118      	bne.n	80250dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80250aa:	687b      	ldr	r3, [r7, #4]
 80250ac:	681b      	ldr	r3, [r3, #0]
 80250ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80250b0:	68fb      	ldr	r3, [r7, #12]
 80250b2:	e853 3f00 	ldrex	r3, [r3]
 80250b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80250b8:	68bb      	ldr	r3, [r7, #8]
 80250ba:	f023 0310 	bic.w	r3, r3, #16
 80250be:	647b      	str	r3, [r7, #68]	@ 0x44
 80250c0:	687b      	ldr	r3, [r7, #4]
 80250c2:	681b      	ldr	r3, [r3, #0]
 80250c4:	461a      	mov	r2, r3
 80250c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80250c8:	61bb      	str	r3, [r7, #24]
 80250ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80250cc:	6979      	ldr	r1, [r7, #20]
 80250ce:	69ba      	ldr	r2, [r7, #24]
 80250d0:	e841 2300 	strex	r3, r2, [r1]
 80250d4:	613b      	str	r3, [r7, #16]
   return(result);
 80250d6:	693b      	ldr	r3, [r7, #16]
 80250d8:	2b00      	cmp	r3, #0
 80250da:	d1e6      	bne.n	80250aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80250dc:	687b      	ldr	r3, [r7, #4]
 80250de:	2220      	movs	r2, #32
 80250e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80250e4:	687b      	ldr	r3, [r7, #4]
 80250e6:	2200      	movs	r2, #0
 80250e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80250ea:	687b      	ldr	r3, [r7, #4]
 80250ec:	2200      	movs	r2, #0
 80250ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80250f0:	bf00      	nop
 80250f2:	3754      	adds	r7, #84	@ 0x54
 80250f4:	46bd      	mov	sp, r7
 80250f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250fa:	4770      	bx	lr
 80250fc:	effffffe 	.word	0xeffffffe

08025100 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8025100:	b480      	push	{r7}
 8025102:	b085      	sub	sp, #20
 8025104:	af00      	add	r7, sp, #0
 8025106:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8025108:	687b      	ldr	r3, [r7, #4]
 802510a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802510e:	2b01      	cmp	r3, #1
 8025110:	d101      	bne.n	8025116 <HAL_UARTEx_DisableFifoMode+0x16>
 8025112:	2302      	movs	r3, #2
 8025114:	e027      	b.n	8025166 <HAL_UARTEx_DisableFifoMode+0x66>
 8025116:	687b      	ldr	r3, [r7, #4]
 8025118:	2201      	movs	r2, #1
 802511a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802511e:	687b      	ldr	r3, [r7, #4]
 8025120:	2224      	movs	r2, #36	@ 0x24
 8025122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8025126:	687b      	ldr	r3, [r7, #4]
 8025128:	681b      	ldr	r3, [r3, #0]
 802512a:	681b      	ldr	r3, [r3, #0]
 802512c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802512e:	687b      	ldr	r3, [r7, #4]
 8025130:	681b      	ldr	r3, [r3, #0]
 8025132:	681a      	ldr	r2, [r3, #0]
 8025134:	687b      	ldr	r3, [r7, #4]
 8025136:	681b      	ldr	r3, [r3, #0]
 8025138:	f022 0201 	bic.w	r2, r2, #1
 802513c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 802513e:	68fb      	ldr	r3, [r7, #12]
 8025140:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8025144:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8025146:	687b      	ldr	r3, [r7, #4]
 8025148:	2200      	movs	r2, #0
 802514a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802514c:	687b      	ldr	r3, [r7, #4]
 802514e:	681b      	ldr	r3, [r3, #0]
 8025150:	68fa      	ldr	r2, [r7, #12]
 8025152:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8025154:	687b      	ldr	r3, [r7, #4]
 8025156:	2220      	movs	r2, #32
 8025158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802515c:	687b      	ldr	r3, [r7, #4]
 802515e:	2200      	movs	r2, #0
 8025160:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8025164:	2300      	movs	r3, #0
}
 8025166:	4618      	mov	r0, r3
 8025168:	3714      	adds	r7, #20
 802516a:	46bd      	mov	sp, r7
 802516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025170:	4770      	bx	lr

08025172 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8025172:	b580      	push	{r7, lr}
 8025174:	b084      	sub	sp, #16
 8025176:	af00      	add	r7, sp, #0
 8025178:	6078      	str	r0, [r7, #4]
 802517a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802517c:	687b      	ldr	r3, [r7, #4]
 802517e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8025182:	2b01      	cmp	r3, #1
 8025184:	d101      	bne.n	802518a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8025186:	2302      	movs	r3, #2
 8025188:	e02d      	b.n	80251e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 802518a:	687b      	ldr	r3, [r7, #4]
 802518c:	2201      	movs	r2, #1
 802518e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8025192:	687b      	ldr	r3, [r7, #4]
 8025194:	2224      	movs	r2, #36	@ 0x24
 8025196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802519a:	687b      	ldr	r3, [r7, #4]
 802519c:	681b      	ldr	r3, [r3, #0]
 802519e:	681b      	ldr	r3, [r3, #0]
 80251a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80251a2:	687b      	ldr	r3, [r7, #4]
 80251a4:	681b      	ldr	r3, [r3, #0]
 80251a6:	681a      	ldr	r2, [r3, #0]
 80251a8:	687b      	ldr	r3, [r7, #4]
 80251aa:	681b      	ldr	r3, [r3, #0]
 80251ac:	f022 0201 	bic.w	r2, r2, #1
 80251b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80251b2:	687b      	ldr	r3, [r7, #4]
 80251b4:	681b      	ldr	r3, [r3, #0]
 80251b6:	689b      	ldr	r3, [r3, #8]
 80251b8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80251bc:	687b      	ldr	r3, [r7, #4]
 80251be:	681b      	ldr	r3, [r3, #0]
 80251c0:	683a      	ldr	r2, [r7, #0]
 80251c2:	430a      	orrs	r2, r1
 80251c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80251c6:	6878      	ldr	r0, [r7, #4]
 80251c8:	f000 f850 	bl	802526c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80251cc:	687b      	ldr	r3, [r7, #4]
 80251ce:	681b      	ldr	r3, [r3, #0]
 80251d0:	68fa      	ldr	r2, [r7, #12]
 80251d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80251d4:	687b      	ldr	r3, [r7, #4]
 80251d6:	2220      	movs	r2, #32
 80251d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80251dc:	687b      	ldr	r3, [r7, #4]
 80251de:	2200      	movs	r2, #0
 80251e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80251e4:	2300      	movs	r3, #0
}
 80251e6:	4618      	mov	r0, r3
 80251e8:	3710      	adds	r7, #16
 80251ea:	46bd      	mov	sp, r7
 80251ec:	bd80      	pop	{r7, pc}

080251ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80251ee:	b580      	push	{r7, lr}
 80251f0:	b084      	sub	sp, #16
 80251f2:	af00      	add	r7, sp, #0
 80251f4:	6078      	str	r0, [r7, #4]
 80251f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80251f8:	687b      	ldr	r3, [r7, #4]
 80251fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80251fe:	2b01      	cmp	r3, #1
 8025200:	d101      	bne.n	8025206 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8025202:	2302      	movs	r3, #2
 8025204:	e02d      	b.n	8025262 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8025206:	687b      	ldr	r3, [r7, #4]
 8025208:	2201      	movs	r2, #1
 802520a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802520e:	687b      	ldr	r3, [r7, #4]
 8025210:	2224      	movs	r2, #36	@ 0x24
 8025212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8025216:	687b      	ldr	r3, [r7, #4]
 8025218:	681b      	ldr	r3, [r3, #0]
 802521a:	681b      	ldr	r3, [r3, #0]
 802521c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802521e:	687b      	ldr	r3, [r7, #4]
 8025220:	681b      	ldr	r3, [r3, #0]
 8025222:	681a      	ldr	r2, [r3, #0]
 8025224:	687b      	ldr	r3, [r7, #4]
 8025226:	681b      	ldr	r3, [r3, #0]
 8025228:	f022 0201 	bic.w	r2, r2, #1
 802522c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 802522e:	687b      	ldr	r3, [r7, #4]
 8025230:	681b      	ldr	r3, [r3, #0]
 8025232:	689b      	ldr	r3, [r3, #8]
 8025234:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8025238:	687b      	ldr	r3, [r7, #4]
 802523a:	681b      	ldr	r3, [r3, #0]
 802523c:	683a      	ldr	r2, [r7, #0]
 802523e:	430a      	orrs	r2, r1
 8025240:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8025242:	6878      	ldr	r0, [r7, #4]
 8025244:	f000 f812 	bl	802526c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8025248:	687b      	ldr	r3, [r7, #4]
 802524a:	681b      	ldr	r3, [r3, #0]
 802524c:	68fa      	ldr	r2, [r7, #12]
 802524e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8025250:	687b      	ldr	r3, [r7, #4]
 8025252:	2220      	movs	r2, #32
 8025254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8025258:	687b      	ldr	r3, [r7, #4]
 802525a:	2200      	movs	r2, #0
 802525c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8025260:	2300      	movs	r3, #0
}
 8025262:	4618      	mov	r0, r3
 8025264:	3710      	adds	r7, #16
 8025266:	46bd      	mov	sp, r7
 8025268:	bd80      	pop	{r7, pc}
	...

0802526c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 802526c:	b480      	push	{r7}
 802526e:	b085      	sub	sp, #20
 8025270:	af00      	add	r7, sp, #0
 8025272:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8025274:	687b      	ldr	r3, [r7, #4]
 8025276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8025278:	2b00      	cmp	r3, #0
 802527a:	d108      	bne.n	802528e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 802527c:	687b      	ldr	r3, [r7, #4]
 802527e:	2201      	movs	r2, #1
 8025280:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8025284:	687b      	ldr	r3, [r7, #4]
 8025286:	2201      	movs	r2, #1
 8025288:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 802528c:	e031      	b.n	80252f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 802528e:	2310      	movs	r3, #16
 8025290:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8025292:	2310      	movs	r3, #16
 8025294:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8025296:	687b      	ldr	r3, [r7, #4]
 8025298:	681b      	ldr	r3, [r3, #0]
 802529a:	689b      	ldr	r3, [r3, #8]
 802529c:	0e5b      	lsrs	r3, r3, #25
 802529e:	b2db      	uxtb	r3, r3
 80252a0:	f003 0307 	and.w	r3, r3, #7
 80252a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80252a6:	687b      	ldr	r3, [r7, #4]
 80252a8:	681b      	ldr	r3, [r3, #0]
 80252aa:	689b      	ldr	r3, [r3, #8]
 80252ac:	0f5b      	lsrs	r3, r3, #29
 80252ae:	b2db      	uxtb	r3, r3
 80252b0:	f003 0307 	and.w	r3, r3, #7
 80252b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80252b6:	7bbb      	ldrb	r3, [r7, #14]
 80252b8:	7b3a      	ldrb	r2, [r7, #12]
 80252ba:	4911      	ldr	r1, [pc, #68]	@ (8025300 <UARTEx_SetNbDataToProcess+0x94>)
 80252bc:	5c8a      	ldrb	r2, [r1, r2]
 80252be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80252c2:	7b3a      	ldrb	r2, [r7, #12]
 80252c4:	490f      	ldr	r1, [pc, #60]	@ (8025304 <UARTEx_SetNbDataToProcess+0x98>)
 80252c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80252c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80252cc:	b29a      	uxth	r2, r3
 80252ce:	687b      	ldr	r3, [r7, #4]
 80252d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80252d4:	7bfb      	ldrb	r3, [r7, #15]
 80252d6:	7b7a      	ldrb	r2, [r7, #13]
 80252d8:	4909      	ldr	r1, [pc, #36]	@ (8025300 <UARTEx_SetNbDataToProcess+0x94>)
 80252da:	5c8a      	ldrb	r2, [r1, r2]
 80252dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80252e0:	7b7a      	ldrb	r2, [r7, #13]
 80252e2:	4908      	ldr	r1, [pc, #32]	@ (8025304 <UARTEx_SetNbDataToProcess+0x98>)
 80252e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80252e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80252ea:	b29a      	uxth	r2, r3
 80252ec:	687b      	ldr	r3, [r7, #4]
 80252ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80252f2:	bf00      	nop
 80252f4:	3714      	adds	r7, #20
 80252f6:	46bd      	mov	sp, r7
 80252f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252fc:	4770      	bx	lr
 80252fe:	bf00      	nop
 8025300:	0802b7a0 	.word	0x0802b7a0
 8025304:	0802b7a8 	.word	0x0802b7a8

08025308 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8025308:	b084      	sub	sp, #16
 802530a:	b480      	push	{r7}
 802530c:	b085      	sub	sp, #20
 802530e:	af00      	add	r7, sp, #0
 8025310:	6078      	str	r0, [r7, #4]
 8025312:	f107 001c 	add.w	r0, r7, #28
 8025316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 802531a:	2300      	movs	r3, #0
 802531c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 802531e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8025320:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8025322:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8025324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8025326:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8025328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 802532a:	431a      	orrs	r2, r3
             Init.ClockDiv
 802532c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 802532e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8025330:	68fa      	ldr	r2, [r7, #12]
 8025332:	4313      	orrs	r3, r2
 8025334:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8025336:	687b      	ldr	r3, [r7, #4]
 8025338:	685a      	ldr	r2, [r3, #4]
 802533a:	4b07      	ldr	r3, [pc, #28]	@ (8025358 <SDMMC_Init+0x50>)
 802533c:	4013      	ands	r3, r2
 802533e:	68fa      	ldr	r2, [r7, #12]
 8025340:	431a      	orrs	r2, r3
 8025342:	687b      	ldr	r3, [r7, #4]
 8025344:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8025346:	2300      	movs	r3, #0
}
 8025348:	4618      	mov	r0, r3
 802534a:	3714      	adds	r7, #20
 802534c:	46bd      	mov	sp, r7
 802534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025352:	b004      	add	sp, #16
 8025354:	4770      	bx	lr
 8025356:	bf00      	nop
 8025358:	ffc02c00 	.word	0xffc02c00

0802535c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 802535c:	b480      	push	{r7}
 802535e:	b083      	sub	sp, #12
 8025360:	af00      	add	r7, sp, #0
 8025362:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8025364:	687b      	ldr	r3, [r7, #4]
 8025366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 802536a:	4618      	mov	r0, r3
 802536c:	370c      	adds	r7, #12
 802536e:	46bd      	mov	sp, r7
 8025370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025374:	4770      	bx	lr

08025376 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8025376:	b480      	push	{r7}
 8025378:	b083      	sub	sp, #12
 802537a:	af00      	add	r7, sp, #0
 802537c:	6078      	str	r0, [r7, #4]
 802537e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8025380:	683b      	ldr	r3, [r7, #0]
 8025382:	681a      	ldr	r2, [r3, #0]
 8025384:	687b      	ldr	r3, [r7, #4]
 8025386:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 802538a:	2300      	movs	r3, #0
}
 802538c:	4618      	mov	r0, r3
 802538e:	370c      	adds	r7, #12
 8025390:	46bd      	mov	sp, r7
 8025392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025396:	4770      	bx	lr

08025398 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8025398:	b480      	push	{r7}
 802539a:	b083      	sub	sp, #12
 802539c:	af00      	add	r7, sp, #0
 802539e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80253a0:	687b      	ldr	r3, [r7, #4]
 80253a2:	681b      	ldr	r3, [r3, #0]
 80253a4:	f043 0203 	orr.w	r2, r3, #3
 80253a8:	687b      	ldr	r3, [r7, #4]
 80253aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80253ac:	2300      	movs	r3, #0
}
 80253ae:	4618      	mov	r0, r3
 80253b0:	370c      	adds	r7, #12
 80253b2:	46bd      	mov	sp, r7
 80253b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253b8:	4770      	bx	lr

080253ba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80253ba:	b480      	push	{r7}
 80253bc:	b083      	sub	sp, #12
 80253be:	af00      	add	r7, sp, #0
 80253c0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80253c2:	687b      	ldr	r3, [r7, #4]
 80253c4:	681b      	ldr	r3, [r3, #0]
 80253c6:	f003 0303 	and.w	r3, r3, #3
}
 80253ca:	4618      	mov	r0, r3
 80253cc:	370c      	adds	r7, #12
 80253ce:	46bd      	mov	sp, r7
 80253d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253d4:	4770      	bx	lr
	...

080253d8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80253d8:	b480      	push	{r7}
 80253da:	b085      	sub	sp, #20
 80253dc:	af00      	add	r7, sp, #0
 80253de:	6078      	str	r0, [r7, #4]
 80253e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80253e2:	2300      	movs	r3, #0
 80253e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80253e6:	683b      	ldr	r3, [r7, #0]
 80253e8:	681a      	ldr	r2, [r3, #0]
 80253ea:	687b      	ldr	r3, [r7, #4]
 80253ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80253ee:	683b      	ldr	r3, [r7, #0]
 80253f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80253f2:	683b      	ldr	r3, [r7, #0]
 80253f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80253f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80253f8:	683b      	ldr	r3, [r7, #0]
 80253fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80253fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80253fe:	683b      	ldr	r3, [r7, #0]
 8025400:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8025402:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8025404:	68fa      	ldr	r2, [r7, #12]
 8025406:	4313      	orrs	r3, r2
 8025408:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 802540a:	687b      	ldr	r3, [r7, #4]
 802540c:	68da      	ldr	r2, [r3, #12]
 802540e:	4b06      	ldr	r3, [pc, #24]	@ (8025428 <SDMMC_SendCommand+0x50>)
 8025410:	4013      	ands	r3, r2
 8025412:	68fa      	ldr	r2, [r7, #12]
 8025414:	431a      	orrs	r2, r3
 8025416:	687b      	ldr	r3, [r7, #4]
 8025418:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802541a:	2300      	movs	r3, #0
}
 802541c:	4618      	mov	r0, r3
 802541e:	3714      	adds	r7, #20
 8025420:	46bd      	mov	sp, r7
 8025422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025426:	4770      	bx	lr
 8025428:	fffee0c0 	.word	0xfffee0c0

0802542c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 802542c:	b480      	push	{r7}
 802542e:	b083      	sub	sp, #12
 8025430:	af00      	add	r7, sp, #0
 8025432:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8025434:	687b      	ldr	r3, [r7, #4]
 8025436:	691b      	ldr	r3, [r3, #16]
 8025438:	b2db      	uxtb	r3, r3
}
 802543a:	4618      	mov	r0, r3
 802543c:	370c      	adds	r7, #12
 802543e:	46bd      	mov	sp, r7
 8025440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025444:	4770      	bx	lr

08025446 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8025446:	b480      	push	{r7}
 8025448:	b085      	sub	sp, #20
 802544a:	af00      	add	r7, sp, #0
 802544c:	6078      	str	r0, [r7, #4]
 802544e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8025450:	687b      	ldr	r3, [r7, #4]
 8025452:	3314      	adds	r3, #20
 8025454:	461a      	mov	r2, r3
 8025456:	683b      	ldr	r3, [r7, #0]
 8025458:	4413      	add	r3, r2
 802545a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 802545c:	68fb      	ldr	r3, [r7, #12]
 802545e:	681b      	ldr	r3, [r3, #0]
}
 8025460:	4618      	mov	r0, r3
 8025462:	3714      	adds	r7, #20
 8025464:	46bd      	mov	sp, r7
 8025466:	f85d 7b04 	ldr.w	r7, [sp], #4
 802546a:	4770      	bx	lr

0802546c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 802546c:	b480      	push	{r7}
 802546e:	b085      	sub	sp, #20
 8025470:	af00      	add	r7, sp, #0
 8025472:	6078      	str	r0, [r7, #4]
 8025474:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8025476:	2300      	movs	r3, #0
 8025478:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 802547a:	683b      	ldr	r3, [r7, #0]
 802547c:	681a      	ldr	r2, [r3, #0]
 802547e:	687b      	ldr	r3, [r7, #4]
 8025480:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8025482:	683b      	ldr	r3, [r7, #0]
 8025484:	685a      	ldr	r2, [r3, #4]
 8025486:	687b      	ldr	r3, [r7, #4]
 8025488:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 802548a:	683b      	ldr	r3, [r7, #0]
 802548c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 802548e:	683b      	ldr	r3, [r7, #0]
 8025490:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8025492:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8025494:	683b      	ldr	r3, [r7, #0]
 8025496:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8025498:	431a      	orrs	r2, r3
                       Data->DPSM);
 802549a:	683b      	ldr	r3, [r7, #0]
 802549c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 802549e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80254a0:	68fa      	ldr	r2, [r7, #12]
 80254a2:	4313      	orrs	r3, r2
 80254a4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80254a6:	687b      	ldr	r3, [r7, #4]
 80254a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80254aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80254ae:	68fb      	ldr	r3, [r7, #12]
 80254b0:	431a      	orrs	r2, r3
 80254b2:	687b      	ldr	r3, [r7, #4]
 80254b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80254b6:	2300      	movs	r3, #0

}
 80254b8:	4618      	mov	r0, r3
 80254ba:	3714      	adds	r7, #20
 80254bc:	46bd      	mov	sp, r7
 80254be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254c2:	4770      	bx	lr

080254c4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80254c4:	b580      	push	{r7, lr}
 80254c6:	b088      	sub	sp, #32
 80254c8:	af00      	add	r7, sp, #0
 80254ca:	6078      	str	r0, [r7, #4]
 80254cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80254ce:	683b      	ldr	r3, [r7, #0]
 80254d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80254d2:	2310      	movs	r3, #16
 80254d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80254d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80254da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80254dc:	2300      	movs	r3, #0
 80254de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80254e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80254e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80254e6:	f107 0308 	add.w	r3, r7, #8
 80254ea:	4619      	mov	r1, r3
 80254ec:	6878      	ldr	r0, [r7, #4]
 80254ee:	f7ff ff73 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80254f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80254f6:	2110      	movs	r1, #16
 80254f8:	6878      	ldr	r0, [r7, #4]
 80254fa:	f000 fa5f 	bl	80259bc <SDMMC_GetCmdResp1>
 80254fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025500:	69fb      	ldr	r3, [r7, #28]
}
 8025502:	4618      	mov	r0, r3
 8025504:	3720      	adds	r7, #32
 8025506:	46bd      	mov	sp, r7
 8025508:	bd80      	pop	{r7, pc}

0802550a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 802550a:	b580      	push	{r7, lr}
 802550c:	b088      	sub	sp, #32
 802550e:	af00      	add	r7, sp, #0
 8025510:	6078      	str	r0, [r7, #4]
 8025512:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8025514:	683b      	ldr	r3, [r7, #0]
 8025516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8025518:	2311      	movs	r3, #17
 802551a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802551c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025522:	2300      	movs	r3, #0
 8025524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025526:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802552a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802552c:	f107 0308 	add.w	r3, r7, #8
 8025530:	4619      	mov	r1, r3
 8025532:	6878      	ldr	r0, [r7, #4]
 8025534:	f7ff ff50 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8025538:	f241 3288 	movw	r2, #5000	@ 0x1388
 802553c:	2111      	movs	r1, #17
 802553e:	6878      	ldr	r0, [r7, #4]
 8025540:	f000 fa3c 	bl	80259bc <SDMMC_GetCmdResp1>
 8025544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025546:	69fb      	ldr	r3, [r7, #28]
}
 8025548:	4618      	mov	r0, r3
 802554a:	3720      	adds	r7, #32
 802554c:	46bd      	mov	sp, r7
 802554e:	bd80      	pop	{r7, pc}

08025550 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8025550:	b580      	push	{r7, lr}
 8025552:	b088      	sub	sp, #32
 8025554:	af00      	add	r7, sp, #0
 8025556:	6078      	str	r0, [r7, #4]
 8025558:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 802555a:	683b      	ldr	r3, [r7, #0]
 802555c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 802555e:	2312      	movs	r3, #18
 8025560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025562:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025566:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025568:	2300      	movs	r3, #0
 802556a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802556c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025570:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025572:	f107 0308 	add.w	r3, r7, #8
 8025576:	4619      	mov	r1, r3
 8025578:	6878      	ldr	r0, [r7, #4]
 802557a:	f7ff ff2d 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 802557e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025582:	2112      	movs	r1, #18
 8025584:	6878      	ldr	r0, [r7, #4]
 8025586:	f000 fa19 	bl	80259bc <SDMMC_GetCmdResp1>
 802558a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802558c:	69fb      	ldr	r3, [r7, #28]
}
 802558e:	4618      	mov	r0, r3
 8025590:	3720      	adds	r7, #32
 8025592:	46bd      	mov	sp, r7
 8025594:	bd80      	pop	{r7, pc}

08025596 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8025596:	b580      	push	{r7, lr}
 8025598:	b088      	sub	sp, #32
 802559a:	af00      	add	r7, sp, #0
 802559c:	6078      	str	r0, [r7, #4]
 802559e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80255a0:	683b      	ldr	r3, [r7, #0]
 80255a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80255a4:	2318      	movs	r3, #24
 80255a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80255a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80255ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80255ae:	2300      	movs	r3, #0
 80255b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80255b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80255b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80255b8:	f107 0308 	add.w	r3, r7, #8
 80255bc:	4619      	mov	r1, r3
 80255be:	6878      	ldr	r0, [r7, #4]
 80255c0:	f7ff ff0a 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80255c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80255c8:	2118      	movs	r1, #24
 80255ca:	6878      	ldr	r0, [r7, #4]
 80255cc:	f000 f9f6 	bl	80259bc <SDMMC_GetCmdResp1>
 80255d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80255d2:	69fb      	ldr	r3, [r7, #28]
}
 80255d4:	4618      	mov	r0, r3
 80255d6:	3720      	adds	r7, #32
 80255d8:	46bd      	mov	sp, r7
 80255da:	bd80      	pop	{r7, pc}

080255dc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80255dc:	b580      	push	{r7, lr}
 80255de:	b088      	sub	sp, #32
 80255e0:	af00      	add	r7, sp, #0
 80255e2:	6078      	str	r0, [r7, #4]
 80255e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80255e6:	683b      	ldr	r3, [r7, #0]
 80255e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80255ea:	2319      	movs	r3, #25
 80255ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80255ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80255f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80255f4:	2300      	movs	r3, #0
 80255f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80255f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80255fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80255fe:	f107 0308 	add.w	r3, r7, #8
 8025602:	4619      	mov	r1, r3
 8025604:	6878      	ldr	r0, [r7, #4]
 8025606:	f7ff fee7 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 802560a:	f241 3288 	movw	r2, #5000	@ 0x1388
 802560e:	2119      	movs	r1, #25
 8025610:	6878      	ldr	r0, [r7, #4]
 8025612:	f000 f9d3 	bl	80259bc <SDMMC_GetCmdResp1>
 8025616:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025618:	69fb      	ldr	r3, [r7, #28]
}
 802561a:	4618      	mov	r0, r3
 802561c:	3720      	adds	r7, #32
 802561e:	46bd      	mov	sp, r7
 8025620:	bd80      	pop	{r7, pc}
	...

08025624 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8025624:	b580      	push	{r7, lr}
 8025626:	b088      	sub	sp, #32
 8025628:	af00      	add	r7, sp, #0
 802562a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 802562c:	2300      	movs	r3, #0
 802562e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8025630:	230c      	movs	r3, #12
 8025632:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025638:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802563a:	2300      	movs	r3, #0
 802563c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802563e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025642:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8025644:	687b      	ldr	r3, [r7, #4]
 8025646:	68db      	ldr	r3, [r3, #12]
 8025648:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 802564c:	687b      	ldr	r3, [r7, #4]
 802564e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8025650:	687b      	ldr	r3, [r7, #4]
 8025652:	68db      	ldr	r3, [r3, #12]
 8025654:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8025658:	687b      	ldr	r3, [r7, #4]
 802565a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802565c:	f107 0308 	add.w	r3, r7, #8
 8025660:	4619      	mov	r1, r3
 8025662:	6878      	ldr	r0, [r7, #4]
 8025664:	f7ff feb8 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8025668:	4a0b      	ldr	r2, [pc, #44]	@ (8025698 <SDMMC_CmdStopTransfer+0x74>)
 802566a:	210c      	movs	r1, #12
 802566c:	6878      	ldr	r0, [r7, #4]
 802566e:	f000 f9a5 	bl	80259bc <SDMMC_GetCmdResp1>
 8025672:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8025674:	687b      	ldr	r3, [r7, #4]
 8025676:	68db      	ldr	r3, [r3, #12]
 8025678:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 802567c:	687b      	ldr	r3, [r7, #4]
 802567e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8025680:	69fb      	ldr	r3, [r7, #28]
 8025682:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8025686:	d101      	bne.n	802568c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8025688:	2300      	movs	r3, #0
 802568a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 802568c:	69fb      	ldr	r3, [r7, #28]
}
 802568e:	4618      	mov	r0, r3
 8025690:	3720      	adds	r7, #32
 8025692:	46bd      	mov	sp, r7
 8025694:	bd80      	pop	{r7, pc}
 8025696:	bf00      	nop
 8025698:	05f5e100 	.word	0x05f5e100

0802569c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 802569c:	b580      	push	{r7, lr}
 802569e:	b088      	sub	sp, #32
 80256a0:	af00      	add	r7, sp, #0
 80256a2:	6078      	str	r0, [r7, #4]
 80256a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80256a6:	683b      	ldr	r3, [r7, #0]
 80256a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80256aa:	2307      	movs	r3, #7
 80256ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80256ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80256b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80256b4:	2300      	movs	r3, #0
 80256b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80256b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80256bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80256be:	f107 0308 	add.w	r3, r7, #8
 80256c2:	4619      	mov	r1, r3
 80256c4:	6878      	ldr	r0, [r7, #4]
 80256c6:	f7ff fe87 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80256ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80256ce:	2107      	movs	r1, #7
 80256d0:	6878      	ldr	r0, [r7, #4]
 80256d2:	f000 f973 	bl	80259bc <SDMMC_GetCmdResp1>
 80256d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80256d8:	69fb      	ldr	r3, [r7, #28]
}
 80256da:	4618      	mov	r0, r3
 80256dc:	3720      	adds	r7, #32
 80256de:	46bd      	mov	sp, r7
 80256e0:	bd80      	pop	{r7, pc}

080256e2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80256e2:	b580      	push	{r7, lr}
 80256e4:	b088      	sub	sp, #32
 80256e6:	af00      	add	r7, sp, #0
 80256e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80256ea:	2300      	movs	r3, #0
 80256ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80256ee:	2300      	movs	r3, #0
 80256f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80256f2:	2300      	movs	r3, #0
 80256f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80256f6:	2300      	movs	r3, #0
 80256f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80256fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80256fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025700:	f107 0308 	add.w	r3, r7, #8
 8025704:	4619      	mov	r1, r3
 8025706:	6878      	ldr	r0, [r7, #4]
 8025708:	f7ff fe66 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 802570c:	6878      	ldr	r0, [r7, #4]
 802570e:	f000 fb97 	bl	8025e40 <SDMMC_GetCmdError>
 8025712:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025714:	69fb      	ldr	r3, [r7, #28]
}
 8025716:	4618      	mov	r0, r3
 8025718:	3720      	adds	r7, #32
 802571a:	46bd      	mov	sp, r7
 802571c:	bd80      	pop	{r7, pc}

0802571e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 802571e:	b580      	push	{r7, lr}
 8025720:	b088      	sub	sp, #32
 8025722:	af00      	add	r7, sp, #0
 8025724:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8025726:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 802572a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 802572c:	2308      	movs	r3, #8
 802572e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025730:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025736:	2300      	movs	r3, #0
 8025738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802573a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802573e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025740:	f107 0308 	add.w	r3, r7, #8
 8025744:	4619      	mov	r1, r3
 8025746:	6878      	ldr	r0, [r7, #4]
 8025748:	f7ff fe46 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 802574c:	6878      	ldr	r0, [r7, #4]
 802574e:	f000 fb29 	bl	8025da4 <SDMMC_GetCmdResp7>
 8025752:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025754:	69fb      	ldr	r3, [r7, #28]
}
 8025756:	4618      	mov	r0, r3
 8025758:	3720      	adds	r7, #32
 802575a:	46bd      	mov	sp, r7
 802575c:	bd80      	pop	{r7, pc}

0802575e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 802575e:	b580      	push	{r7, lr}
 8025760:	b088      	sub	sp, #32
 8025762:	af00      	add	r7, sp, #0
 8025764:	6078      	str	r0, [r7, #4]
 8025766:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8025768:	683b      	ldr	r3, [r7, #0]
 802576a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 802576c:	2337      	movs	r3, #55	@ 0x37
 802576e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025770:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025774:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025776:	2300      	movs	r3, #0
 8025778:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802577a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802577e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025780:	f107 0308 	add.w	r3, r7, #8
 8025784:	4619      	mov	r1, r3
 8025786:	6878      	ldr	r0, [r7, #4]
 8025788:	f7ff fe26 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 802578c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025790:	2137      	movs	r1, #55	@ 0x37
 8025792:	6878      	ldr	r0, [r7, #4]
 8025794:	f000 f912 	bl	80259bc <SDMMC_GetCmdResp1>
 8025798:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802579a:	69fb      	ldr	r3, [r7, #28]
}
 802579c:	4618      	mov	r0, r3
 802579e:	3720      	adds	r7, #32
 80257a0:	46bd      	mov	sp, r7
 80257a2:	bd80      	pop	{r7, pc}

080257a4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80257a4:	b580      	push	{r7, lr}
 80257a6:	b088      	sub	sp, #32
 80257a8:	af00      	add	r7, sp, #0
 80257aa:	6078      	str	r0, [r7, #4]
 80257ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80257ae:	683b      	ldr	r3, [r7, #0]
 80257b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80257b2:	2329      	movs	r3, #41	@ 0x29
 80257b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80257b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80257ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80257bc:	2300      	movs	r3, #0
 80257be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80257c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80257c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80257c6:	f107 0308 	add.w	r3, r7, #8
 80257ca:	4619      	mov	r1, r3
 80257cc:	6878      	ldr	r0, [r7, #4]
 80257ce:	f7ff fe03 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80257d2:	6878      	ldr	r0, [r7, #4]
 80257d4:	f000 fa2e 	bl	8025c34 <SDMMC_GetCmdResp3>
 80257d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80257da:	69fb      	ldr	r3, [r7, #28]
}
 80257dc:	4618      	mov	r0, r3
 80257de:	3720      	adds	r7, #32
 80257e0:	46bd      	mov	sp, r7
 80257e2:	bd80      	pop	{r7, pc}

080257e4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80257e4:	b580      	push	{r7, lr}
 80257e6:	b088      	sub	sp, #32
 80257e8:	af00      	add	r7, sp, #0
 80257ea:	6078      	str	r0, [r7, #4]
 80257ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80257ee:	683b      	ldr	r3, [r7, #0]
 80257f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80257f2:	2306      	movs	r3, #6
 80257f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80257f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80257fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80257fc:	2300      	movs	r3, #0
 80257fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025804:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025806:	f107 0308 	add.w	r3, r7, #8
 802580a:	4619      	mov	r1, r3
 802580c:	6878      	ldr	r0, [r7, #4]
 802580e:	f7ff fde3 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8025812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025816:	2106      	movs	r1, #6
 8025818:	6878      	ldr	r0, [r7, #4]
 802581a:	f000 f8cf 	bl	80259bc <SDMMC_GetCmdResp1>
 802581e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025820:	69fb      	ldr	r3, [r7, #28]
}
 8025822:	4618      	mov	r0, r3
 8025824:	3720      	adds	r7, #32
 8025826:	46bd      	mov	sp, r7
 8025828:	bd80      	pop	{r7, pc}

0802582a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 802582a:	b580      	push	{r7, lr}
 802582c:	b088      	sub	sp, #32
 802582e:	af00      	add	r7, sp, #0
 8025830:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8025832:	2300      	movs	r3, #0
 8025834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8025836:	2333      	movs	r3, #51	@ 0x33
 8025838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802583a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802583e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025840:	2300      	movs	r3, #0
 8025842:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025844:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025848:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802584a:	f107 0308 	add.w	r3, r7, #8
 802584e:	4619      	mov	r1, r3
 8025850:	6878      	ldr	r0, [r7, #4]
 8025852:	f7ff fdc1 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8025856:	f241 3288 	movw	r2, #5000	@ 0x1388
 802585a:	2133      	movs	r1, #51	@ 0x33
 802585c:	6878      	ldr	r0, [r7, #4]
 802585e:	f000 f8ad 	bl	80259bc <SDMMC_GetCmdResp1>
 8025862:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025864:	69fb      	ldr	r3, [r7, #28]
}
 8025866:	4618      	mov	r0, r3
 8025868:	3720      	adds	r7, #32
 802586a:	46bd      	mov	sp, r7
 802586c:	bd80      	pop	{r7, pc}

0802586e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 802586e:	b580      	push	{r7, lr}
 8025870:	b088      	sub	sp, #32
 8025872:	af00      	add	r7, sp, #0
 8025874:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8025876:	2300      	movs	r3, #0
 8025878:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 802587a:	2302      	movs	r3, #2
 802587c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 802587e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8025882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025884:	2300      	movs	r3, #0
 8025886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802588c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802588e:	f107 0308 	add.w	r3, r7, #8
 8025892:	4619      	mov	r1, r3
 8025894:	6878      	ldr	r0, [r7, #4]
 8025896:	f7ff fd9f 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 802589a:	6878      	ldr	r0, [r7, #4]
 802589c:	f000 f980 	bl	8025ba0 <SDMMC_GetCmdResp2>
 80258a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80258a2:	69fb      	ldr	r3, [r7, #28]
}
 80258a4:	4618      	mov	r0, r3
 80258a6:	3720      	adds	r7, #32
 80258a8:	46bd      	mov	sp, r7
 80258aa:	bd80      	pop	{r7, pc}

080258ac <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80258ac:	b580      	push	{r7, lr}
 80258ae:	b088      	sub	sp, #32
 80258b0:	af00      	add	r7, sp, #0
 80258b2:	6078      	str	r0, [r7, #4]
 80258b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80258b6:	683b      	ldr	r3, [r7, #0]
 80258b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80258ba:	2309      	movs	r3, #9
 80258bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80258be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80258c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80258c4:	2300      	movs	r3, #0
 80258c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80258c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80258cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80258ce:	f107 0308 	add.w	r3, r7, #8
 80258d2:	4619      	mov	r1, r3
 80258d4:	6878      	ldr	r0, [r7, #4]
 80258d6:	f7ff fd7f 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80258da:	6878      	ldr	r0, [r7, #4]
 80258dc:	f000 f960 	bl	8025ba0 <SDMMC_GetCmdResp2>
 80258e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80258e2:	69fb      	ldr	r3, [r7, #28]
}
 80258e4:	4618      	mov	r0, r3
 80258e6:	3720      	adds	r7, #32
 80258e8:	46bd      	mov	sp, r7
 80258ea:	bd80      	pop	{r7, pc}

080258ec <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80258ec:	b580      	push	{r7, lr}
 80258ee:	b088      	sub	sp, #32
 80258f0:	af00      	add	r7, sp, #0
 80258f2:	6078      	str	r0, [r7, #4]
 80258f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80258f6:	2300      	movs	r3, #0
 80258f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80258fa:	2303      	movs	r3, #3
 80258fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80258fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025904:	2300      	movs	r3, #0
 8025906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802590c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802590e:	f107 0308 	add.w	r3, r7, #8
 8025912:	4619      	mov	r1, r3
 8025914:	6878      	ldr	r0, [r7, #4]
 8025916:	f7ff fd5f 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 802591a:	683a      	ldr	r2, [r7, #0]
 802591c:	2103      	movs	r1, #3
 802591e:	6878      	ldr	r0, [r7, #4]
 8025920:	f000 f9c8 	bl	8025cb4 <SDMMC_GetCmdResp6>
 8025924:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8025926:	69fb      	ldr	r3, [r7, #28]
}
 8025928:	4618      	mov	r0, r3
 802592a:	3720      	adds	r7, #32
 802592c:	46bd      	mov	sp, r7
 802592e:	bd80      	pop	{r7, pc}

08025930 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8025930:	b580      	push	{r7, lr}
 8025932:	b088      	sub	sp, #32
 8025934:	af00      	add	r7, sp, #0
 8025936:	6078      	str	r0, [r7, #4]
 8025938:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 802593a:	683b      	ldr	r3, [r7, #0]
 802593c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 802593e:	230d      	movs	r3, #13
 8025940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025942:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8025948:	2300      	movs	r3, #0
 802594a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802594c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025950:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025952:	f107 0308 	add.w	r3, r7, #8
 8025956:	4619      	mov	r1, r3
 8025958:	6878      	ldr	r0, [r7, #4]
 802595a:	f7ff fd3d 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 802595e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025962:	210d      	movs	r1, #13
 8025964:	6878      	ldr	r0, [r7, #4]
 8025966:	f000 f829 	bl	80259bc <SDMMC_GetCmdResp1>
 802596a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802596c:	69fb      	ldr	r3, [r7, #28]
}
 802596e:	4618      	mov	r0, r3
 8025970:	3720      	adds	r7, #32
 8025972:	46bd      	mov	sp, r7
 8025974:	bd80      	pop	{r7, pc}

08025976 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8025976:	b580      	push	{r7, lr}
 8025978:	b088      	sub	sp, #32
 802597a:	af00      	add	r7, sp, #0
 802597c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 802597e:	2300      	movs	r3, #0
 8025980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8025982:	230d      	movs	r3, #13
 8025984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8025986:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802598a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802598c:	2300      	movs	r3, #0
 802598e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8025990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025994:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8025996:	f107 0308 	add.w	r3, r7, #8
 802599a:	4619      	mov	r1, r3
 802599c:	6878      	ldr	r0, [r7, #4]
 802599e:	f7ff fd1b 	bl	80253d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80259a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80259a6:	210d      	movs	r1, #13
 80259a8:	6878      	ldr	r0, [r7, #4]
 80259aa:	f000 f807 	bl	80259bc <SDMMC_GetCmdResp1>
 80259ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80259b0:	69fb      	ldr	r3, [r7, #28]
}
 80259b2:	4618      	mov	r0, r3
 80259b4:	3720      	adds	r7, #32
 80259b6:	46bd      	mov	sp, r7
 80259b8:	bd80      	pop	{r7, pc}
	...

080259bc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80259bc:	b580      	push	{r7, lr}
 80259be:	b088      	sub	sp, #32
 80259c0:	af00      	add	r7, sp, #0
 80259c2:	60f8      	str	r0, [r7, #12]
 80259c4:	460b      	mov	r3, r1
 80259c6:	607a      	str	r2, [r7, #4]
 80259c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80259ca:	4b70      	ldr	r3, [pc, #448]	@ (8025b8c <SDMMC_GetCmdResp1+0x1d0>)
 80259cc:	681b      	ldr	r3, [r3, #0]
 80259ce:	4a70      	ldr	r2, [pc, #448]	@ (8025b90 <SDMMC_GetCmdResp1+0x1d4>)
 80259d0:	fba2 2303 	umull	r2, r3, r2, r3
 80259d4:	0a5a      	lsrs	r2, r3, #9
 80259d6:	687b      	ldr	r3, [r7, #4]
 80259d8:	fb02 f303 	mul.w	r3, r2, r3
 80259dc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80259de:	69fb      	ldr	r3, [r7, #28]
 80259e0:	1e5a      	subs	r2, r3, #1
 80259e2:	61fa      	str	r2, [r7, #28]
 80259e4:	2b00      	cmp	r3, #0
 80259e6:	d102      	bne.n	80259ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80259e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80259ec:	e0c9      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80259ee:	68fb      	ldr	r3, [r7, #12]
 80259f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80259f2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80259f4:	69ba      	ldr	r2, [r7, #24]
 80259f6:	4b67      	ldr	r3, [pc, #412]	@ (8025b94 <SDMMC_GetCmdResp1+0x1d8>)
 80259f8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80259fa:	2b00      	cmp	r3, #0
 80259fc:	d0ef      	beq.n	80259de <SDMMC_GetCmdResp1+0x22>
 80259fe:	69bb      	ldr	r3, [r7, #24]
 8025a00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8025a04:	2b00      	cmp	r3, #0
 8025a06:	d1ea      	bne.n	80259de <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025a08:	68fb      	ldr	r3, [r7, #12]
 8025a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025a0c:	f003 0304 	and.w	r3, r3, #4
 8025a10:	2b00      	cmp	r3, #0
 8025a12:	d004      	beq.n	8025a1e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025a14:	68fb      	ldr	r3, [r7, #12]
 8025a16:	2204      	movs	r2, #4
 8025a18:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025a1a:	2304      	movs	r3, #4
 8025a1c:	e0b1      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8025a1e:	68fb      	ldr	r3, [r7, #12]
 8025a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025a22:	f003 0301 	and.w	r3, r3, #1
 8025a26:	2b00      	cmp	r3, #0
 8025a28:	d004      	beq.n	8025a34 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8025a2a:	68fb      	ldr	r3, [r7, #12]
 8025a2c:	2201      	movs	r2, #1
 8025a2e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025a30:	2301      	movs	r3, #1
 8025a32:	e0a6      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025a34:	68fb      	ldr	r3, [r7, #12]
 8025a36:	4a58      	ldr	r2, [pc, #352]	@ (8025b98 <SDMMC_GetCmdResp1+0x1dc>)
 8025a38:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8025a3a:	68f8      	ldr	r0, [r7, #12]
 8025a3c:	f7ff fcf6 	bl	802542c <SDMMC_GetCommandResponse>
 8025a40:	4603      	mov	r3, r0
 8025a42:	461a      	mov	r2, r3
 8025a44:	7afb      	ldrb	r3, [r7, #11]
 8025a46:	4293      	cmp	r3, r2
 8025a48:	d001      	beq.n	8025a4e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025a4a:	2301      	movs	r3, #1
 8025a4c:	e099      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8025a4e:	2100      	movs	r1, #0
 8025a50:	68f8      	ldr	r0, [r7, #12]
 8025a52:	f7ff fcf8 	bl	8025446 <SDMMC_GetResponse>
 8025a56:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8025a58:	697a      	ldr	r2, [r7, #20]
 8025a5a:	4b50      	ldr	r3, [pc, #320]	@ (8025b9c <SDMMC_GetCmdResp1+0x1e0>)
 8025a5c:	4013      	ands	r3, r2
 8025a5e:	2b00      	cmp	r3, #0
 8025a60:	d101      	bne.n	8025a66 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8025a62:	2300      	movs	r3, #0
 8025a64:	e08d      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8025a66:	697b      	ldr	r3, [r7, #20]
 8025a68:	2b00      	cmp	r3, #0
 8025a6a:	da02      	bge.n	8025a72 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8025a6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8025a70:	e087      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8025a72:	697b      	ldr	r3, [r7, #20]
 8025a74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8025a78:	2b00      	cmp	r3, #0
 8025a7a:	d001      	beq.n	8025a80 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8025a7c:	2340      	movs	r3, #64	@ 0x40
 8025a7e:	e080      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8025a80:	697b      	ldr	r3, [r7, #20]
 8025a82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8025a86:	2b00      	cmp	r3, #0
 8025a88:	d001      	beq.n	8025a8e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8025a8a:	2380      	movs	r3, #128	@ 0x80
 8025a8c:	e079      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8025a8e:	697b      	ldr	r3, [r7, #20]
 8025a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8025a94:	2b00      	cmp	r3, #0
 8025a96:	d002      	beq.n	8025a9e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8025a98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8025a9c:	e071      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8025a9e:	697b      	ldr	r3, [r7, #20]
 8025aa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8025aa4:	2b00      	cmp	r3, #0
 8025aa6:	d002      	beq.n	8025aae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8025aa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8025aac:	e069      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8025aae:	697b      	ldr	r3, [r7, #20]
 8025ab0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8025ab4:	2b00      	cmp	r3, #0
 8025ab6:	d002      	beq.n	8025abe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8025ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8025abc:	e061      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8025abe:	697b      	ldr	r3, [r7, #20]
 8025ac0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8025ac4:	2b00      	cmp	r3, #0
 8025ac6:	d002      	beq.n	8025ace <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8025ac8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8025acc:	e059      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8025ace:	697b      	ldr	r3, [r7, #20]
 8025ad0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8025ad4:	2b00      	cmp	r3, #0
 8025ad6:	d002      	beq.n	8025ade <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8025ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025adc:	e051      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8025ade:	697b      	ldr	r3, [r7, #20]
 8025ae0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8025ae4:	2b00      	cmp	r3, #0
 8025ae6:	d002      	beq.n	8025aee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8025ae8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8025aec:	e049      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8025aee:	697b      	ldr	r3, [r7, #20]
 8025af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8025af4:	2b00      	cmp	r3, #0
 8025af6:	d002      	beq.n	8025afe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8025af8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8025afc:	e041      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8025afe:	697b      	ldr	r3, [r7, #20]
 8025b00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8025b04:	2b00      	cmp	r3, #0
 8025b06:	d002      	beq.n	8025b0e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8025b08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8025b0c:	e039      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8025b0e:	697b      	ldr	r3, [r7, #20]
 8025b10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8025b14:	2b00      	cmp	r3, #0
 8025b16:	d002      	beq.n	8025b1e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8025b18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8025b1c:	e031      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8025b1e:	697b      	ldr	r3, [r7, #20]
 8025b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8025b24:	2b00      	cmp	r3, #0
 8025b26:	d002      	beq.n	8025b2e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8025b28:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8025b2c:	e029      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8025b2e:	697b      	ldr	r3, [r7, #20]
 8025b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8025b34:	2b00      	cmp	r3, #0
 8025b36:	d002      	beq.n	8025b3e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8025b38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8025b3c:	e021      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8025b3e:	697b      	ldr	r3, [r7, #20]
 8025b40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8025b44:	2b00      	cmp	r3, #0
 8025b46:	d002      	beq.n	8025b4e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8025b48:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8025b4c:	e019      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8025b4e:	697b      	ldr	r3, [r7, #20]
 8025b50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8025b54:	2b00      	cmp	r3, #0
 8025b56:	d002      	beq.n	8025b5e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8025b58:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8025b5c:	e011      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8025b5e:	697b      	ldr	r3, [r7, #20]
 8025b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8025b64:	2b00      	cmp	r3, #0
 8025b66:	d002      	beq.n	8025b6e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8025b68:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8025b6c:	e009      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8025b6e:	697b      	ldr	r3, [r7, #20]
 8025b70:	f003 0308 	and.w	r3, r3, #8
 8025b74:	2b00      	cmp	r3, #0
 8025b76:	d002      	beq.n	8025b7e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8025b78:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8025b7c:	e001      	b.n	8025b82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8025b7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8025b82:	4618      	mov	r0, r3
 8025b84:	3720      	adds	r7, #32
 8025b86:	46bd      	mov	sp, r7
 8025b88:	bd80      	pop	{r7, pc}
 8025b8a:	bf00      	nop
 8025b8c:	2400001c 	.word	0x2400001c
 8025b90:	10624dd3 	.word	0x10624dd3
 8025b94:	00200045 	.word	0x00200045
 8025b98:	002000c5 	.word	0x002000c5
 8025b9c:	fdffe008 	.word	0xfdffe008

08025ba0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8025ba0:	b480      	push	{r7}
 8025ba2:	b085      	sub	sp, #20
 8025ba4:	af00      	add	r7, sp, #0
 8025ba6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8025c28 <SDMMC_GetCmdResp2+0x88>)
 8025baa:	681b      	ldr	r3, [r3, #0]
 8025bac:	4a1f      	ldr	r2, [pc, #124]	@ (8025c2c <SDMMC_GetCmdResp2+0x8c>)
 8025bae:	fba2 2303 	umull	r2, r3, r2, r3
 8025bb2:	0a5b      	lsrs	r3, r3, #9
 8025bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025bb8:	fb02 f303 	mul.w	r3, r2, r3
 8025bbc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8025bbe:	68fb      	ldr	r3, [r7, #12]
 8025bc0:	1e5a      	subs	r2, r3, #1
 8025bc2:	60fa      	str	r2, [r7, #12]
 8025bc4:	2b00      	cmp	r3, #0
 8025bc6:	d102      	bne.n	8025bce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025bc8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025bcc:	e026      	b.n	8025c1c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8025bce:	687b      	ldr	r3, [r7, #4]
 8025bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025bd2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025bd4:	68bb      	ldr	r3, [r7, #8]
 8025bd6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8025bda:	2b00      	cmp	r3, #0
 8025bdc:	d0ef      	beq.n	8025bbe <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025bde:	68bb      	ldr	r3, [r7, #8]
 8025be0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025be4:	2b00      	cmp	r3, #0
 8025be6:	d1ea      	bne.n	8025bbe <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025be8:	687b      	ldr	r3, [r7, #4]
 8025bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025bec:	f003 0304 	and.w	r3, r3, #4
 8025bf0:	2b00      	cmp	r3, #0
 8025bf2:	d004      	beq.n	8025bfe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025bf4:	687b      	ldr	r3, [r7, #4]
 8025bf6:	2204      	movs	r2, #4
 8025bf8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025bfa:	2304      	movs	r3, #4
 8025bfc:	e00e      	b.n	8025c1c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8025bfe:	687b      	ldr	r3, [r7, #4]
 8025c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025c02:	f003 0301 	and.w	r3, r3, #1
 8025c06:	2b00      	cmp	r3, #0
 8025c08:	d004      	beq.n	8025c14 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8025c0a:	687b      	ldr	r3, [r7, #4]
 8025c0c:	2201      	movs	r2, #1
 8025c0e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025c10:	2301      	movs	r3, #1
 8025c12:	e003      	b.n	8025c1c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025c14:	687b      	ldr	r3, [r7, #4]
 8025c16:	4a06      	ldr	r2, [pc, #24]	@ (8025c30 <SDMMC_GetCmdResp2+0x90>)
 8025c18:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8025c1a:	2300      	movs	r3, #0
}
 8025c1c:	4618      	mov	r0, r3
 8025c1e:	3714      	adds	r7, #20
 8025c20:	46bd      	mov	sp, r7
 8025c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c26:	4770      	bx	lr
 8025c28:	2400001c 	.word	0x2400001c
 8025c2c:	10624dd3 	.word	0x10624dd3
 8025c30:	002000c5 	.word	0x002000c5

08025c34 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8025c34:	b480      	push	{r7}
 8025c36:	b085      	sub	sp, #20
 8025c38:	af00      	add	r7, sp, #0
 8025c3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8025ca8 <SDMMC_GetCmdResp3+0x74>)
 8025c3e:	681b      	ldr	r3, [r3, #0]
 8025c40:	4a1a      	ldr	r2, [pc, #104]	@ (8025cac <SDMMC_GetCmdResp3+0x78>)
 8025c42:	fba2 2303 	umull	r2, r3, r2, r3
 8025c46:	0a5b      	lsrs	r3, r3, #9
 8025c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025c4c:	fb02 f303 	mul.w	r3, r2, r3
 8025c50:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8025c52:	68fb      	ldr	r3, [r7, #12]
 8025c54:	1e5a      	subs	r2, r3, #1
 8025c56:	60fa      	str	r2, [r7, #12]
 8025c58:	2b00      	cmp	r3, #0
 8025c5a:	d102      	bne.n	8025c62 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025c5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025c60:	e01b      	b.n	8025c9a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8025c62:	687b      	ldr	r3, [r7, #4]
 8025c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025c66:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025c68:	68bb      	ldr	r3, [r7, #8]
 8025c6a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8025c6e:	2b00      	cmp	r3, #0
 8025c70:	d0ef      	beq.n	8025c52 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025c72:	68bb      	ldr	r3, [r7, #8]
 8025c74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025c78:	2b00      	cmp	r3, #0
 8025c7a:	d1ea      	bne.n	8025c52 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025c7c:	687b      	ldr	r3, [r7, #4]
 8025c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025c80:	f003 0304 	and.w	r3, r3, #4
 8025c84:	2b00      	cmp	r3, #0
 8025c86:	d004      	beq.n	8025c92 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025c88:	687b      	ldr	r3, [r7, #4]
 8025c8a:	2204      	movs	r2, #4
 8025c8c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025c8e:	2304      	movs	r3, #4
 8025c90:	e003      	b.n	8025c9a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025c92:	687b      	ldr	r3, [r7, #4]
 8025c94:	4a06      	ldr	r2, [pc, #24]	@ (8025cb0 <SDMMC_GetCmdResp3+0x7c>)
 8025c96:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8025c98:	2300      	movs	r3, #0
}
 8025c9a:	4618      	mov	r0, r3
 8025c9c:	3714      	adds	r7, #20
 8025c9e:	46bd      	mov	sp, r7
 8025ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ca4:	4770      	bx	lr
 8025ca6:	bf00      	nop
 8025ca8:	2400001c 	.word	0x2400001c
 8025cac:	10624dd3 	.word	0x10624dd3
 8025cb0:	002000c5 	.word	0x002000c5

08025cb4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8025cb4:	b580      	push	{r7, lr}
 8025cb6:	b088      	sub	sp, #32
 8025cb8:	af00      	add	r7, sp, #0
 8025cba:	60f8      	str	r0, [r7, #12]
 8025cbc:	460b      	mov	r3, r1
 8025cbe:	607a      	str	r2, [r7, #4]
 8025cc0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025cc2:	4b35      	ldr	r3, [pc, #212]	@ (8025d98 <SDMMC_GetCmdResp6+0xe4>)
 8025cc4:	681b      	ldr	r3, [r3, #0]
 8025cc6:	4a35      	ldr	r2, [pc, #212]	@ (8025d9c <SDMMC_GetCmdResp6+0xe8>)
 8025cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8025ccc:	0a5b      	lsrs	r3, r3, #9
 8025cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025cd2:	fb02 f303 	mul.w	r3, r2, r3
 8025cd6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8025cd8:	69fb      	ldr	r3, [r7, #28]
 8025cda:	1e5a      	subs	r2, r3, #1
 8025cdc:	61fa      	str	r2, [r7, #28]
 8025cde:	2b00      	cmp	r3, #0
 8025ce0:	d102      	bne.n	8025ce8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025ce2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025ce6:	e052      	b.n	8025d8e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8025ce8:	68fb      	ldr	r3, [r7, #12]
 8025cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025cec:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025cee:	69bb      	ldr	r3, [r7, #24]
 8025cf0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8025cf4:	2b00      	cmp	r3, #0
 8025cf6:	d0ef      	beq.n	8025cd8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025cf8:	69bb      	ldr	r3, [r7, #24]
 8025cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025cfe:	2b00      	cmp	r3, #0
 8025d00:	d1ea      	bne.n	8025cd8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025d02:	68fb      	ldr	r3, [r7, #12]
 8025d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025d06:	f003 0304 	and.w	r3, r3, #4
 8025d0a:	2b00      	cmp	r3, #0
 8025d0c:	d004      	beq.n	8025d18 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025d0e:	68fb      	ldr	r3, [r7, #12]
 8025d10:	2204      	movs	r2, #4
 8025d12:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025d14:	2304      	movs	r3, #4
 8025d16:	e03a      	b.n	8025d8e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8025d18:	68fb      	ldr	r3, [r7, #12]
 8025d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025d1c:	f003 0301 	and.w	r3, r3, #1
 8025d20:	2b00      	cmp	r3, #0
 8025d22:	d004      	beq.n	8025d2e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8025d24:	68fb      	ldr	r3, [r7, #12]
 8025d26:	2201      	movs	r2, #1
 8025d28:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025d2a:	2301      	movs	r3, #1
 8025d2c:	e02f      	b.n	8025d8e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8025d2e:	68f8      	ldr	r0, [r7, #12]
 8025d30:	f7ff fb7c 	bl	802542c <SDMMC_GetCommandResponse>
 8025d34:	4603      	mov	r3, r0
 8025d36:	461a      	mov	r2, r3
 8025d38:	7afb      	ldrb	r3, [r7, #11]
 8025d3a:	4293      	cmp	r3, r2
 8025d3c:	d001      	beq.n	8025d42 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025d3e:	2301      	movs	r3, #1
 8025d40:	e025      	b.n	8025d8e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025d42:	68fb      	ldr	r3, [r7, #12]
 8025d44:	4a16      	ldr	r2, [pc, #88]	@ (8025da0 <SDMMC_GetCmdResp6+0xec>)
 8025d46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8025d48:	2100      	movs	r1, #0
 8025d4a:	68f8      	ldr	r0, [r7, #12]
 8025d4c:	f7ff fb7b 	bl	8025446 <SDMMC_GetResponse>
 8025d50:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8025d52:	697b      	ldr	r3, [r7, #20]
 8025d54:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8025d58:	2b00      	cmp	r3, #0
 8025d5a:	d106      	bne.n	8025d6a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8025d5c:	697b      	ldr	r3, [r7, #20]
 8025d5e:	0c1b      	lsrs	r3, r3, #16
 8025d60:	b29a      	uxth	r2, r3
 8025d62:	687b      	ldr	r3, [r7, #4]
 8025d64:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8025d66:	2300      	movs	r3, #0
 8025d68:	e011      	b.n	8025d8e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8025d6a:	697b      	ldr	r3, [r7, #20]
 8025d6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8025d70:	2b00      	cmp	r3, #0
 8025d72:	d002      	beq.n	8025d7a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8025d74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8025d78:	e009      	b.n	8025d8e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8025d7a:	697b      	ldr	r3, [r7, #20]
 8025d7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8025d80:	2b00      	cmp	r3, #0
 8025d82:	d002      	beq.n	8025d8a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8025d84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8025d88:	e001      	b.n	8025d8e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8025d8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8025d8e:	4618      	mov	r0, r3
 8025d90:	3720      	adds	r7, #32
 8025d92:	46bd      	mov	sp, r7
 8025d94:	bd80      	pop	{r7, pc}
 8025d96:	bf00      	nop
 8025d98:	2400001c 	.word	0x2400001c
 8025d9c:	10624dd3 	.word	0x10624dd3
 8025da0:	002000c5 	.word	0x002000c5

08025da4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8025da4:	b480      	push	{r7}
 8025da6:	b085      	sub	sp, #20
 8025da8:	af00      	add	r7, sp, #0
 8025daa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025dac:	4b22      	ldr	r3, [pc, #136]	@ (8025e38 <SDMMC_GetCmdResp7+0x94>)
 8025dae:	681b      	ldr	r3, [r3, #0]
 8025db0:	4a22      	ldr	r2, [pc, #136]	@ (8025e3c <SDMMC_GetCmdResp7+0x98>)
 8025db2:	fba2 2303 	umull	r2, r3, r2, r3
 8025db6:	0a5b      	lsrs	r3, r3, #9
 8025db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025dbc:	fb02 f303 	mul.w	r3, r2, r3
 8025dc0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8025dc2:	68fb      	ldr	r3, [r7, #12]
 8025dc4:	1e5a      	subs	r2, r3, #1
 8025dc6:	60fa      	str	r2, [r7, #12]
 8025dc8:	2b00      	cmp	r3, #0
 8025dca:	d102      	bne.n	8025dd2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025dcc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025dd0:	e02c      	b.n	8025e2c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8025dd2:	687b      	ldr	r3, [r7, #4]
 8025dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025dd6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025dd8:	68bb      	ldr	r3, [r7, #8]
 8025dda:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8025dde:	2b00      	cmp	r3, #0
 8025de0:	d0ef      	beq.n	8025dc2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8025de2:	68bb      	ldr	r3, [r7, #8]
 8025de4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8025de8:	2b00      	cmp	r3, #0
 8025dea:	d1ea      	bne.n	8025dc2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8025dec:	687b      	ldr	r3, [r7, #4]
 8025dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025df0:	f003 0304 	and.w	r3, r3, #4
 8025df4:	2b00      	cmp	r3, #0
 8025df6:	d004      	beq.n	8025e02 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8025df8:	687b      	ldr	r3, [r7, #4]
 8025dfa:	2204      	movs	r2, #4
 8025dfc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8025dfe:	2304      	movs	r3, #4
 8025e00:	e014      	b.n	8025e2c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8025e02:	687b      	ldr	r3, [r7, #4]
 8025e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025e06:	f003 0301 	and.w	r3, r3, #1
 8025e0a:	2b00      	cmp	r3, #0
 8025e0c:	d004      	beq.n	8025e18 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8025e0e:	687b      	ldr	r3, [r7, #4]
 8025e10:	2201      	movs	r2, #1
 8025e12:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8025e14:	2301      	movs	r3, #1
 8025e16:	e009      	b.n	8025e2c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8025e18:	687b      	ldr	r3, [r7, #4]
 8025e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8025e20:	2b00      	cmp	r3, #0
 8025e22:	d002      	beq.n	8025e2a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8025e24:	687b      	ldr	r3, [r7, #4]
 8025e26:	2240      	movs	r2, #64	@ 0x40
 8025e28:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8025e2a:	2300      	movs	r3, #0

}
 8025e2c:	4618      	mov	r0, r3
 8025e2e:	3714      	adds	r7, #20
 8025e30:	46bd      	mov	sp, r7
 8025e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e36:	4770      	bx	lr
 8025e38:	2400001c 	.word	0x2400001c
 8025e3c:	10624dd3 	.word	0x10624dd3

08025e40 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8025e40:	b480      	push	{r7}
 8025e42:	b085      	sub	sp, #20
 8025e44:	af00      	add	r7, sp, #0
 8025e46:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8025e48:	4b11      	ldr	r3, [pc, #68]	@ (8025e90 <SDMMC_GetCmdError+0x50>)
 8025e4a:	681b      	ldr	r3, [r3, #0]
 8025e4c:	4a11      	ldr	r2, [pc, #68]	@ (8025e94 <SDMMC_GetCmdError+0x54>)
 8025e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8025e52:	0a5b      	lsrs	r3, r3, #9
 8025e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8025e58:	fb02 f303 	mul.w	r3, r2, r3
 8025e5c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8025e5e:	68fb      	ldr	r3, [r7, #12]
 8025e60:	1e5a      	subs	r2, r3, #1
 8025e62:	60fa      	str	r2, [r7, #12]
 8025e64:	2b00      	cmp	r3, #0
 8025e66:	d102      	bne.n	8025e6e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8025e68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8025e6c:	e009      	b.n	8025e82 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8025e6e:	687b      	ldr	r3, [r7, #4]
 8025e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8025e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8025e76:	2b00      	cmp	r3, #0
 8025e78:	d0f1      	beq.n	8025e5e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8025e7a:	687b      	ldr	r3, [r7, #4]
 8025e7c:	4a06      	ldr	r2, [pc, #24]	@ (8025e98 <SDMMC_GetCmdError+0x58>)
 8025e7e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8025e80:	2300      	movs	r3, #0
}
 8025e82:	4618      	mov	r0, r3
 8025e84:	3714      	adds	r7, #20
 8025e86:	46bd      	mov	sp, r7
 8025e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e8c:	4770      	bx	lr
 8025e8e:	bf00      	nop
 8025e90:	2400001c 	.word	0x2400001c
 8025e94:	10624dd3 	.word	0x10624dd3
 8025e98:	002000c5 	.word	0x002000c5

08025e9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8025e9c:	b580      	push	{r7, lr}
 8025e9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8025ea0:	4904      	ldr	r1, [pc, #16]	@ (8025eb4 <MX_FATFS_Init+0x18>)
 8025ea2:	4805      	ldr	r0, [pc, #20]	@ (8025eb8 <MX_FATFS_Init+0x1c>)
 8025ea4:	f002 fc08 	bl	80286b8 <FATFS_LinkDriver>
 8025ea8:	4603      	mov	r3, r0
 8025eaa:	461a      	mov	r2, r3
 8025eac:	4b03      	ldr	r3, [pc, #12]	@ (8025ebc <MX_FATFS_Init+0x20>)
 8025eae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8025eb0:	bf00      	nop
 8025eb2:	bd80      	pop	{r7, pc}
 8025eb4:	24000420 	.word	0x24000420
 8025eb8:	0802b7b0 	.word	0x0802b7b0
 8025ebc:	2400041c 	.word	0x2400041c

08025ec0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8025ec0:	b480      	push	{r7}
 8025ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8025ec4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8025ec6:	4618      	mov	r0, r3
 8025ec8:	46bd      	mov	sp, r7
 8025eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ece:	4770      	bx	lr

08025ed0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8025ed0:	b580      	push	{r7, lr}
 8025ed2:	b086      	sub	sp, #24
 8025ed4:	af00      	add	r7, sp, #0
 8025ed6:	60f8      	str	r0, [r7, #12]
 8025ed8:	60b9      	str	r1, [r7, #8]
 8025eda:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8025edc:	2300      	movs	r3, #0
 8025ede:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8025ee0:	687b      	ldr	r3, [r7, #4]
 8025ee2:	68ba      	ldr	r2, [r7, #8]
 8025ee4:	68f9      	ldr	r1, [r7, #12]
 8025ee6:	4806      	ldr	r0, [pc, #24]	@ (8025f00 <BSP_SD_ReadBlocks_DMA+0x30>)
 8025ee8:	f7fc fc16 	bl	8022718 <HAL_SD_ReadBlocks_DMA>
 8025eec:	4603      	mov	r3, r0
 8025eee:	2b00      	cmp	r3, #0
 8025ef0:	d001      	beq.n	8025ef6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8025ef2:	2301      	movs	r3, #1
 8025ef4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8025ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8025ef8:	4618      	mov	r0, r3
 8025efa:	3718      	adds	r7, #24
 8025efc:	46bd      	mov	sp, r7
 8025efe:	bd80      	pop	{r7, pc}
 8025f00:	240002fc 	.word	0x240002fc

08025f04 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8025f04:	b580      	push	{r7, lr}
 8025f06:	b086      	sub	sp, #24
 8025f08:	af00      	add	r7, sp, #0
 8025f0a:	60f8      	str	r0, [r7, #12]
 8025f0c:	60b9      	str	r1, [r7, #8]
 8025f0e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8025f10:	2300      	movs	r3, #0
 8025f12:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8025f14:	687b      	ldr	r3, [r7, #4]
 8025f16:	68ba      	ldr	r2, [r7, #8]
 8025f18:	68f9      	ldr	r1, [r7, #12]
 8025f1a:	4806      	ldr	r0, [pc, #24]	@ (8025f34 <BSP_SD_WriteBlocks_DMA+0x30>)
 8025f1c:	f7fc fca4 	bl	8022868 <HAL_SD_WriteBlocks_DMA>
 8025f20:	4603      	mov	r3, r0
 8025f22:	2b00      	cmp	r3, #0
 8025f24:	d001      	beq.n	8025f2a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8025f26:	2301      	movs	r3, #1
 8025f28:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8025f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8025f2c:	4618      	mov	r0, r3
 8025f2e:	3718      	adds	r7, #24
 8025f30:	46bd      	mov	sp, r7
 8025f32:	bd80      	pop	{r7, pc}
 8025f34:	240002fc 	.word	0x240002fc

08025f38 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8025f38:	b580      	push	{r7, lr}
 8025f3a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8025f3c:	4805      	ldr	r0, [pc, #20]	@ (8025f54 <BSP_SD_GetCardState+0x1c>)
 8025f3e:	f7fd fa9d 	bl	802347c <HAL_SD_GetCardState>
 8025f42:	4603      	mov	r3, r0
 8025f44:	2b04      	cmp	r3, #4
 8025f46:	bf14      	ite	ne
 8025f48:	2301      	movne	r3, #1
 8025f4a:	2300      	moveq	r3, #0
 8025f4c:	b2db      	uxtb	r3, r3
}
 8025f4e:	4618      	mov	r0, r3
 8025f50:	bd80      	pop	{r7, pc}
 8025f52:	bf00      	nop
 8025f54:	240002fc 	.word	0x240002fc

08025f58 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8025f58:	b580      	push	{r7, lr}
 8025f5a:	b082      	sub	sp, #8
 8025f5c:	af00      	add	r7, sp, #0
 8025f5e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8025f60:	6879      	ldr	r1, [r7, #4]
 8025f62:	4803      	ldr	r0, [pc, #12]	@ (8025f70 <BSP_SD_GetCardInfo+0x18>)
 8025f64:	f7fd f94c 	bl	8023200 <HAL_SD_GetCardInfo>
}
 8025f68:	bf00      	nop
 8025f6a:	3708      	adds	r7, #8
 8025f6c:	46bd      	mov	sp, r7
 8025f6e:	bd80      	pop	{r7, pc}
 8025f70:	240002fc 	.word	0x240002fc

08025f74 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8025f74:	b580      	push	{r7, lr}
 8025f76:	b082      	sub	sp, #8
 8025f78:	af00      	add	r7, sp, #0
 8025f7a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8025f7c:	f000 fa14 	bl	80263a8 <BSP_SD_WriteCpltCallback>
}
 8025f80:	bf00      	nop
 8025f82:	3708      	adds	r7, #8
 8025f84:	46bd      	mov	sp, r7
 8025f86:	bd80      	pop	{r7, pc}

08025f88 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8025f88:	b580      	push	{r7, lr}
 8025f8a:	b082      	sub	sp, #8
 8025f8c:	af00      	add	r7, sp, #0
 8025f8e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8025f90:	f000 fa16 	bl	80263c0 <BSP_SD_ReadCpltCallback>
}
 8025f94:	bf00      	nop
 8025f96:	3708      	adds	r7, #8
 8025f98:	46bd      	mov	sp, r7
 8025f9a:	bd80      	pop	{r7, pc}

08025f9c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8025f9c:	b580      	push	{r7, lr}
 8025f9e:	b084      	sub	sp, #16
 8025fa0:	af00      	add	r7, sp, #0
 8025fa2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8025fa4:	f7f5 fe7a 	bl	801bc9c <HAL_GetTick>
 8025fa8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8025faa:	e006      	b.n	8025fba <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8025fac:	f7ff ffc4 	bl	8025f38 <BSP_SD_GetCardState>
 8025fb0:	4603      	mov	r3, r0
 8025fb2:	2b00      	cmp	r3, #0
 8025fb4:	d101      	bne.n	8025fba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8025fb6:	2300      	movs	r3, #0
 8025fb8:	e009      	b.n	8025fce <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8025fba:	f7f5 fe6f 	bl	801bc9c <HAL_GetTick>
 8025fbe:	4602      	mov	r2, r0
 8025fc0:	68fb      	ldr	r3, [r7, #12]
 8025fc2:	1ad3      	subs	r3, r2, r3
 8025fc4:	687a      	ldr	r2, [r7, #4]
 8025fc6:	429a      	cmp	r2, r3
 8025fc8:	d8f0      	bhi.n	8025fac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8025fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8025fce:	4618      	mov	r0, r3
 8025fd0:	3710      	adds	r7, #16
 8025fd2:	46bd      	mov	sp, r7
 8025fd4:	bd80      	pop	{r7, pc}
	...

08025fd8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8025fd8:	b580      	push	{r7, lr}
 8025fda:	b082      	sub	sp, #8
 8025fdc:	af00      	add	r7, sp, #0
 8025fde:	4603      	mov	r3, r0
 8025fe0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8025fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8026010 <SD_CheckStatus+0x38>)
 8025fe4:	2201      	movs	r2, #1
 8025fe6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8025fe8:	f7ff ffa6 	bl	8025f38 <BSP_SD_GetCardState>
 8025fec:	4603      	mov	r3, r0
 8025fee:	2b00      	cmp	r3, #0
 8025ff0:	d107      	bne.n	8026002 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8025ff2:	4b07      	ldr	r3, [pc, #28]	@ (8026010 <SD_CheckStatus+0x38>)
 8025ff4:	781b      	ldrb	r3, [r3, #0]
 8025ff6:	b2db      	uxtb	r3, r3
 8025ff8:	f023 0301 	bic.w	r3, r3, #1
 8025ffc:	b2da      	uxtb	r2, r3
 8025ffe:	4b04      	ldr	r3, [pc, #16]	@ (8026010 <SD_CheckStatus+0x38>)
 8026000:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8026002:	4b03      	ldr	r3, [pc, #12]	@ (8026010 <SD_CheckStatus+0x38>)
 8026004:	781b      	ldrb	r3, [r3, #0]
 8026006:	b2db      	uxtb	r3, r3
}
 8026008:	4618      	mov	r0, r3
 802600a:	3708      	adds	r7, #8
 802600c:	46bd      	mov	sp, r7
 802600e:	bd80      	pop	{r7, pc}
 8026010:	24000029 	.word	0x24000029

08026014 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8026014:	b580      	push	{r7, lr}
 8026016:	b082      	sub	sp, #8
 8026018:	af00      	add	r7, sp, #0
 802601a:	4603      	mov	r3, r0
 802601c:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 802601e:	79fb      	ldrb	r3, [r7, #7]
 8026020:	4618      	mov	r0, r3
 8026022:	f7ff ffd9 	bl	8025fd8 <SD_CheckStatus>
 8026026:	4603      	mov	r3, r0
 8026028:	461a      	mov	r2, r3
 802602a:	4b04      	ldr	r3, [pc, #16]	@ (802603c <SD_initialize+0x28>)
 802602c:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 802602e:	4b03      	ldr	r3, [pc, #12]	@ (802603c <SD_initialize+0x28>)
 8026030:	781b      	ldrb	r3, [r3, #0]
 8026032:	b2db      	uxtb	r3, r3
}
 8026034:	4618      	mov	r0, r3
 8026036:	3708      	adds	r7, #8
 8026038:	46bd      	mov	sp, r7
 802603a:	bd80      	pop	{r7, pc}
 802603c:	24000029 	.word	0x24000029

08026040 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8026040:	b580      	push	{r7, lr}
 8026042:	b082      	sub	sp, #8
 8026044:	af00      	add	r7, sp, #0
 8026046:	4603      	mov	r3, r0
 8026048:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 802604a:	79fb      	ldrb	r3, [r7, #7]
 802604c:	4618      	mov	r0, r3
 802604e:	f7ff ffc3 	bl	8025fd8 <SD_CheckStatus>
 8026052:	4603      	mov	r3, r0
}
 8026054:	4618      	mov	r0, r3
 8026056:	3708      	adds	r7, #8
 8026058:	46bd      	mov	sp, r7
 802605a:	bd80      	pop	{r7, pc}

0802605c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 802605c:	b580      	push	{r7, lr}
 802605e:	b088      	sub	sp, #32
 8026060:	af00      	add	r7, sp, #0
 8026062:	60b9      	str	r1, [r7, #8]
 8026064:	607a      	str	r2, [r7, #4]
 8026066:	603b      	str	r3, [r7, #0]
 8026068:	4603      	mov	r3, r0
 802606a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 802606c:	2301      	movs	r3, #1
 802606e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8026070:	f247 5030 	movw	r0, #30000	@ 0x7530
 8026074:	f7ff ff92 	bl	8025f9c <SD_CheckStatusWithTimeout>
 8026078:	4603      	mov	r3, r0
 802607a:	2b00      	cmp	r3, #0
 802607c:	da01      	bge.n	8026082 <SD_read+0x26>
  {
    return res;
 802607e:	7ffb      	ldrb	r3, [r7, #31]
 8026080:	e08b      	b.n	802619a <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8026082:	68bb      	ldr	r3, [r7, #8]
 8026084:	f003 0303 	and.w	r3, r3, #3
 8026088:	2b00      	cmp	r3, #0
 802608a:	d13b      	bne.n	8026104 <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 802608c:	683a      	ldr	r2, [r7, #0]
 802608e:	6879      	ldr	r1, [r7, #4]
 8026090:	68b8      	ldr	r0, [r7, #8]
 8026092:	f7ff ff1d 	bl	8025ed0 <BSP_SD_ReadBlocks_DMA>
 8026096:	4603      	mov	r3, r0
 8026098:	2b00      	cmp	r3, #0
 802609a:	d17d      	bne.n	8026198 <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 802609c:	4b41      	ldr	r3, [pc, #260]	@ (80261a4 <SD_read+0x148>)
 802609e:	2200      	movs	r2, #0
 80260a0:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80260a2:	f7f5 fdfb 	bl	801bc9c <HAL_GetTick>
 80260a6:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80260a8:	bf00      	nop
 80260aa:	4b3e      	ldr	r3, [pc, #248]	@ (80261a4 <SD_read+0x148>)
 80260ac:	681b      	ldr	r3, [r3, #0]
 80260ae:	2b00      	cmp	r3, #0
 80260b0:	d108      	bne.n	80260c4 <SD_read+0x68>
 80260b2:	f7f5 fdf3 	bl	801bc9c <HAL_GetTick>
 80260b6:	4602      	mov	r2, r0
 80260b8:	697b      	ldr	r3, [r7, #20]
 80260ba:	1ad3      	subs	r3, r2, r3
 80260bc:	f247 522f 	movw	r2, #29999	@ 0x752f
 80260c0:	4293      	cmp	r3, r2
 80260c2:	d9f2      	bls.n	80260aa <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80260c4:	4b37      	ldr	r3, [pc, #220]	@ (80261a4 <SD_read+0x148>)
 80260c6:	681b      	ldr	r3, [r3, #0]
 80260c8:	2b00      	cmp	r3, #0
 80260ca:	d102      	bne.n	80260d2 <SD_read+0x76>
      {
        res = RES_ERROR;
 80260cc:	2301      	movs	r3, #1
 80260ce:	77fb      	strb	r3, [r7, #31]
 80260d0:	e062      	b.n	8026198 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 80260d2:	4b34      	ldr	r3, [pc, #208]	@ (80261a4 <SD_read+0x148>)
 80260d4:	2200      	movs	r2, #0
 80260d6:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80260d8:	f7f5 fde0 	bl	801bc9c <HAL_GetTick>
 80260dc:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80260de:	e007      	b.n	80260f0 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80260e0:	f7ff ff2a 	bl	8025f38 <BSP_SD_GetCardState>
 80260e4:	4603      	mov	r3, r0
 80260e6:	2b00      	cmp	r3, #0
 80260e8:	d102      	bne.n	80260f0 <SD_read+0x94>
          {
            res = RES_OK;
 80260ea:	2300      	movs	r3, #0
 80260ec:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80260ee:	e053      	b.n	8026198 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80260f0:	f7f5 fdd4 	bl	801bc9c <HAL_GetTick>
 80260f4:	4602      	mov	r2, r0
 80260f6:	697b      	ldr	r3, [r7, #20]
 80260f8:	1ad3      	subs	r3, r2, r3
 80260fa:	f247 522f 	movw	r2, #29999	@ 0x752f
 80260fe:	4293      	cmp	r3, r2
 8026100:	d9ee      	bls.n	80260e0 <SD_read+0x84>
 8026102:	e049      	b.n	8026198 <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8026104:	2300      	movs	r3, #0
 8026106:	61bb      	str	r3, [r7, #24]
 8026108:	e037      	b.n	802617a <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 802610a:	687b      	ldr	r3, [r7, #4]
 802610c:	1c5a      	adds	r2, r3, #1
 802610e:	607a      	str	r2, [r7, #4]
 8026110:	2201      	movs	r2, #1
 8026112:	4619      	mov	r1, r3
 8026114:	4824      	ldr	r0, [pc, #144]	@ (80261a8 <SD_read+0x14c>)
 8026116:	f7ff fedb 	bl	8025ed0 <BSP_SD_ReadBlocks_DMA>
 802611a:	4603      	mov	r3, r0
 802611c:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 802611e:	7fbb      	ldrb	r3, [r7, #30]
 8026120:	2b00      	cmp	r3, #0
 8026122:	d12f      	bne.n	8026184 <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 8026124:	f7f5 fdba 	bl	801bc9c <HAL_GetTick>
 8026128:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 802612a:	bf00      	nop
 802612c:	4b1d      	ldr	r3, [pc, #116]	@ (80261a4 <SD_read+0x148>)
 802612e:	681b      	ldr	r3, [r3, #0]
 8026130:	2b00      	cmp	r3, #0
 8026132:	d108      	bne.n	8026146 <SD_read+0xea>
 8026134:	f7f5 fdb2 	bl	801bc9c <HAL_GetTick>
 8026138:	4602      	mov	r2, r0
 802613a:	697b      	ldr	r3, [r7, #20]
 802613c:	1ad3      	subs	r3, r2, r3
 802613e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8026142:	4293      	cmp	r3, r2
 8026144:	d9f2      	bls.n	802612c <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 8026146:	4b17      	ldr	r3, [pc, #92]	@ (80261a4 <SD_read+0x148>)
 8026148:	681b      	ldr	r3, [r3, #0]
 802614a:	2b00      	cmp	r3, #0
 802614c:	d102      	bne.n	8026154 <SD_read+0xf8>
          {
            res = RES_ERROR;
 802614e:	2301      	movs	r3, #1
 8026150:	77fb      	strb	r3, [r7, #31]
            break;
 8026152:	e018      	b.n	8026186 <SD_read+0x12a>
          }
          ReadStatus = 0;
 8026154:	4b13      	ldr	r3, [pc, #76]	@ (80261a4 <SD_read+0x148>)
 8026156:	2200      	movs	r2, #0
 8026158:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 802615a:	68bb      	ldr	r3, [r7, #8]
 802615c:	4a12      	ldr	r2, [pc, #72]	@ (80261a8 <SD_read+0x14c>)
 802615e:	4618      	mov	r0, r3
 8026160:	4611      	mov	r1, r2
 8026162:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8026166:	461a      	mov	r2, r3
 8026168:	f003 fbb9 	bl	80298de <memcpy>
          buff += BLOCKSIZE;
 802616c:	68bb      	ldr	r3, [r7, #8]
 802616e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8026172:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8026174:	69bb      	ldr	r3, [r7, #24]
 8026176:	3301      	adds	r3, #1
 8026178:	61bb      	str	r3, [r7, #24]
 802617a:	69bb      	ldr	r3, [r7, #24]
 802617c:	683a      	ldr	r2, [r7, #0]
 802617e:	429a      	cmp	r2, r3
 8026180:	d8c3      	bhi.n	802610a <SD_read+0xae>
 8026182:	e000      	b.n	8026186 <SD_read+0x12a>
        }
        else
        {
          break;
 8026184:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8026186:	69bb      	ldr	r3, [r7, #24]
 8026188:	683a      	ldr	r2, [r7, #0]
 802618a:	429a      	cmp	r2, r3
 802618c:	d104      	bne.n	8026198 <SD_read+0x13c>
 802618e:	7fbb      	ldrb	r3, [r7, #30]
 8026190:	2b00      	cmp	r3, #0
 8026192:	d101      	bne.n	8026198 <SD_read+0x13c>
        res = RES_OK;
 8026194:	2300      	movs	r3, #0
 8026196:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 8026198:	7ffb      	ldrb	r3, [r7, #31]
}
 802619a:	4618      	mov	r0, r3
 802619c:	3720      	adds	r7, #32
 802619e:	46bd      	mov	sp, r7
 80261a0:	bd80      	pop	{r7, pc}
 80261a2:	bf00      	nop
 80261a4:	24000a88 	.word	0x24000a88
 80261a8:	24000884 	.word	0x24000884

080261ac <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80261ac:	b580      	push	{r7, lr}
 80261ae:	b088      	sub	sp, #32
 80261b0:	af00      	add	r7, sp, #0
 80261b2:	60b9      	str	r1, [r7, #8]
 80261b4:	607a      	str	r2, [r7, #4]
 80261b6:	603b      	str	r3, [r7, #0]
 80261b8:	4603      	mov	r3, r0
 80261ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80261bc:	2301      	movs	r3, #1
 80261be:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80261c0:	4b4b      	ldr	r3, [pc, #300]	@ (80262f0 <SD_write+0x144>)
 80261c2:	2200      	movs	r2, #0
 80261c4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80261c6:	f247 5030 	movw	r0, #30000	@ 0x7530
 80261ca:	f7ff fee7 	bl	8025f9c <SD_CheckStatusWithTimeout>
 80261ce:	4603      	mov	r3, r0
 80261d0:	2b00      	cmp	r3, #0
 80261d2:	da01      	bge.n	80261d8 <SD_write+0x2c>
  {
    return res;
 80261d4:	7ffb      	ldrb	r3, [r7, #31]
 80261d6:	e087      	b.n	80262e8 <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80261d8:	68bb      	ldr	r3, [r7, #8]
 80261da:	f003 0303 	and.w	r3, r3, #3
 80261de:	2b00      	cmp	r3, #0
 80261e0:	d138      	bne.n	8026254 <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80261e2:	683a      	ldr	r2, [r7, #0]
 80261e4:	6879      	ldr	r1, [r7, #4]
 80261e6:	68b8      	ldr	r0, [r7, #8]
 80261e8:	f7ff fe8c 	bl	8025f04 <BSP_SD_WriteBlocks_DMA>
 80261ec:	4603      	mov	r3, r0
 80261ee:	2b00      	cmp	r3, #0
 80261f0:	d179      	bne.n	80262e6 <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80261f2:	f7f5 fd53 	bl	801bc9c <HAL_GetTick>
 80261f6:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80261f8:	bf00      	nop
 80261fa:	4b3d      	ldr	r3, [pc, #244]	@ (80262f0 <SD_write+0x144>)
 80261fc:	681b      	ldr	r3, [r3, #0]
 80261fe:	2b00      	cmp	r3, #0
 8026200:	d108      	bne.n	8026214 <SD_write+0x68>
 8026202:	f7f5 fd4b 	bl	801bc9c <HAL_GetTick>
 8026206:	4602      	mov	r2, r0
 8026208:	697b      	ldr	r3, [r7, #20]
 802620a:	1ad3      	subs	r3, r2, r3
 802620c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8026210:	4293      	cmp	r3, r2
 8026212:	d9f2      	bls.n	80261fa <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8026214:	4b36      	ldr	r3, [pc, #216]	@ (80262f0 <SD_write+0x144>)
 8026216:	681b      	ldr	r3, [r3, #0]
 8026218:	2b00      	cmp	r3, #0
 802621a:	d102      	bne.n	8026222 <SD_write+0x76>
      {
        res = RES_ERROR;
 802621c:	2301      	movs	r3, #1
 802621e:	77fb      	strb	r3, [r7, #31]
 8026220:	e061      	b.n	80262e6 <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 8026222:	4b33      	ldr	r3, [pc, #204]	@ (80262f0 <SD_write+0x144>)
 8026224:	2200      	movs	r2, #0
 8026226:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8026228:	f7f5 fd38 	bl	801bc9c <HAL_GetTick>
 802622c:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 802622e:	e007      	b.n	8026240 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8026230:	f7ff fe82 	bl	8025f38 <BSP_SD_GetCardState>
 8026234:	4603      	mov	r3, r0
 8026236:	2b00      	cmp	r3, #0
 8026238:	d102      	bne.n	8026240 <SD_write+0x94>
          {
            res = RES_OK;
 802623a:	2300      	movs	r3, #0
 802623c:	77fb      	strb	r3, [r7, #31]
            break;
 802623e:	e052      	b.n	80262e6 <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8026240:	f7f5 fd2c 	bl	801bc9c <HAL_GetTick>
 8026244:	4602      	mov	r2, r0
 8026246:	697b      	ldr	r3, [r7, #20]
 8026248:	1ad3      	subs	r3, r2, r3
 802624a:	f247 522f 	movw	r2, #29999	@ 0x752f
 802624e:	4293      	cmp	r3, r2
 8026250:	d9ee      	bls.n	8026230 <SD_write+0x84>
 8026252:	e048      	b.n	80262e6 <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8026254:	2300      	movs	r3, #0
 8026256:	61bb      	str	r3, [r7, #24]
 8026258:	e034      	b.n	80262c4 <SD_write+0x118>
      {
        WriteStatus = 0;
 802625a:	4b25      	ldr	r3, [pc, #148]	@ (80262f0 <SD_write+0x144>)
 802625c:	2200      	movs	r2, #0
 802625e:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 8026260:	4a24      	ldr	r2, [pc, #144]	@ (80262f4 <SD_write+0x148>)
 8026262:	68bb      	ldr	r3, [r7, #8]
 8026264:	4610      	mov	r0, r2
 8026266:	4619      	mov	r1, r3
 8026268:	f44f 7300 	mov.w	r3, #512	@ 0x200
 802626c:	461a      	mov	r2, r3
 802626e:	f003 fb36 	bl	80298de <memcpy>
        buff += BLOCKSIZE;
 8026272:	68bb      	ldr	r3, [r7, #8]
 8026274:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8026278:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 802627a:	687b      	ldr	r3, [r7, #4]
 802627c:	1c5a      	adds	r2, r3, #1
 802627e:	607a      	str	r2, [r7, #4]
 8026280:	2201      	movs	r2, #1
 8026282:	4619      	mov	r1, r3
 8026284:	481b      	ldr	r0, [pc, #108]	@ (80262f4 <SD_write+0x148>)
 8026286:	f7ff fe3d 	bl	8025f04 <BSP_SD_WriteBlocks_DMA>
 802628a:	4603      	mov	r3, r0
 802628c:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 802628e:	7fbb      	ldrb	r3, [r7, #30]
 8026290:	2b00      	cmp	r3, #0
 8026292:	d11c      	bne.n	80262ce <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8026294:	f7f5 fd02 	bl	801bc9c <HAL_GetTick>
 8026298:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 802629a:	bf00      	nop
 802629c:	4b14      	ldr	r3, [pc, #80]	@ (80262f0 <SD_write+0x144>)
 802629e:	681b      	ldr	r3, [r3, #0]
 80262a0:	2b00      	cmp	r3, #0
 80262a2:	d108      	bne.n	80262b6 <SD_write+0x10a>
 80262a4:	f7f5 fcfa 	bl	801bc9c <HAL_GetTick>
 80262a8:	4602      	mov	r2, r0
 80262aa:	697b      	ldr	r3, [r7, #20]
 80262ac:	1ad3      	subs	r3, r2, r3
 80262ae:	f247 522f 	movw	r2, #29999	@ 0x752f
 80262b2:	4293      	cmp	r3, r2
 80262b4:	d9f2      	bls.n	802629c <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 80262b6:	4b0e      	ldr	r3, [pc, #56]	@ (80262f0 <SD_write+0x144>)
 80262b8:	681b      	ldr	r3, [r3, #0]
 80262ba:	2b00      	cmp	r3, #0
 80262bc:	d009      	beq.n	80262d2 <SD_write+0x126>
      for (i = 0; i < count; i++)
 80262be:	69bb      	ldr	r3, [r7, #24]
 80262c0:	3301      	adds	r3, #1
 80262c2:	61bb      	str	r3, [r7, #24]
 80262c4:	69bb      	ldr	r3, [r7, #24]
 80262c6:	683a      	ldr	r2, [r7, #0]
 80262c8:	429a      	cmp	r2, r3
 80262ca:	d8c6      	bhi.n	802625a <SD_write+0xae>
 80262cc:	e002      	b.n	80262d4 <SD_write+0x128>
          }

        }
        else
        {
          break;
 80262ce:	bf00      	nop
 80262d0:	e000      	b.n	80262d4 <SD_write+0x128>
            break;
 80262d2:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 80262d4:	69bb      	ldr	r3, [r7, #24]
 80262d6:	683a      	ldr	r2, [r7, #0]
 80262d8:	429a      	cmp	r2, r3
 80262da:	d104      	bne.n	80262e6 <SD_write+0x13a>
 80262dc:	7fbb      	ldrb	r3, [r7, #30]
 80262de:	2b00      	cmp	r3, #0
 80262e0:	d101      	bne.n	80262e6 <SD_write+0x13a>
        res = RES_OK;
 80262e2:	2300      	movs	r3, #0
 80262e4:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 80262e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80262e8:	4618      	mov	r0, r3
 80262ea:	3720      	adds	r7, #32
 80262ec:	46bd      	mov	sp, r7
 80262ee:	bd80      	pop	{r7, pc}
 80262f0:	24000a84 	.word	0x24000a84
 80262f4:	24000884 	.word	0x24000884

080262f8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80262f8:	b580      	push	{r7, lr}
 80262fa:	b08c      	sub	sp, #48	@ 0x30
 80262fc:	af00      	add	r7, sp, #0
 80262fe:	4603      	mov	r3, r0
 8026300:	603a      	str	r2, [r7, #0]
 8026302:	71fb      	strb	r3, [r7, #7]
 8026304:	460b      	mov	r3, r1
 8026306:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8026308:	2301      	movs	r3, #1
 802630a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 802630e:	4b25      	ldr	r3, [pc, #148]	@ (80263a4 <SD_ioctl+0xac>)
 8026310:	781b      	ldrb	r3, [r3, #0]
 8026312:	b2db      	uxtb	r3, r3
 8026314:	f003 0301 	and.w	r3, r3, #1
 8026318:	2b00      	cmp	r3, #0
 802631a:	d001      	beq.n	8026320 <SD_ioctl+0x28>
 802631c:	2303      	movs	r3, #3
 802631e:	e03c      	b.n	802639a <SD_ioctl+0xa2>

  switch (cmd)
 8026320:	79bb      	ldrb	r3, [r7, #6]
 8026322:	2b03      	cmp	r3, #3
 8026324:	d834      	bhi.n	8026390 <SD_ioctl+0x98>
 8026326:	a201      	add	r2, pc, #4	@ (adr r2, 802632c <SD_ioctl+0x34>)
 8026328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802632c:	0802633d 	.word	0x0802633d
 8026330:	08026345 	.word	0x08026345
 8026334:	0802635d 	.word	0x0802635d
 8026338:	08026377 	.word	0x08026377
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 802633c:	2300      	movs	r3, #0
 802633e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8026342:	e028      	b.n	8026396 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8026344:	f107 0308 	add.w	r3, r7, #8
 8026348:	4618      	mov	r0, r3
 802634a:	f7ff fe05 	bl	8025f58 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 802634e:	6a3a      	ldr	r2, [r7, #32]
 8026350:	683b      	ldr	r3, [r7, #0]
 8026352:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8026354:	2300      	movs	r3, #0
 8026356:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 802635a:	e01c      	b.n	8026396 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 802635c:	f107 0308 	add.w	r3, r7, #8
 8026360:	4618      	mov	r0, r3
 8026362:	f7ff fdf9 	bl	8025f58 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8026366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026368:	b29a      	uxth	r2, r3
 802636a:	683b      	ldr	r3, [r7, #0]
 802636c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 802636e:	2300      	movs	r3, #0
 8026370:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8026374:	e00f      	b.n	8026396 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8026376:	f107 0308 	add.w	r3, r7, #8
 802637a:	4618      	mov	r0, r3
 802637c:	f7ff fdec 	bl	8025f58 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8026380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026382:	0a5a      	lsrs	r2, r3, #9
 8026384:	683b      	ldr	r3, [r7, #0]
 8026386:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8026388:	2300      	movs	r3, #0
 802638a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 802638e:	e002      	b.n	8026396 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8026390:	2304      	movs	r3, #4
 8026392:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8026396:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 802639a:	4618      	mov	r0, r3
 802639c:	3730      	adds	r7, #48	@ 0x30
 802639e:	46bd      	mov	sp, r7
 80263a0:	bd80      	pop	{r7, pc}
 80263a2:	bf00      	nop
 80263a4:	24000029 	.word	0x24000029

080263a8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80263a8:	b480      	push	{r7}
 80263aa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80263ac:	4b03      	ldr	r3, [pc, #12]	@ (80263bc <BSP_SD_WriteCpltCallback+0x14>)
 80263ae:	2201      	movs	r2, #1
 80263b0:	601a      	str	r2, [r3, #0]
}
 80263b2:	bf00      	nop
 80263b4:	46bd      	mov	sp, r7
 80263b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263ba:	4770      	bx	lr
 80263bc:	24000a84 	.word	0x24000a84

080263c0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80263c0:	b480      	push	{r7}
 80263c2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80263c4:	4b03      	ldr	r3, [pc, #12]	@ (80263d4 <BSP_SD_ReadCpltCallback+0x14>)
 80263c6:	2201      	movs	r2, #1
 80263c8:	601a      	str	r2, [r3, #0]
}
 80263ca:	bf00      	nop
 80263cc:	46bd      	mov	sp, r7
 80263ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263d2:	4770      	bx	lr
 80263d4:	24000a88 	.word	0x24000a88

080263d8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80263d8:	b580      	push	{r7, lr}
 80263da:	b084      	sub	sp, #16
 80263dc:	af00      	add	r7, sp, #0
 80263de:	4603      	mov	r3, r0
 80263e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80263e2:	79fb      	ldrb	r3, [r7, #7]
 80263e4:	4a08      	ldr	r2, [pc, #32]	@ (8026408 <disk_status+0x30>)
 80263e6:	009b      	lsls	r3, r3, #2
 80263e8:	4413      	add	r3, r2
 80263ea:	685b      	ldr	r3, [r3, #4]
 80263ec:	685b      	ldr	r3, [r3, #4]
 80263ee:	79fa      	ldrb	r2, [r7, #7]
 80263f0:	4905      	ldr	r1, [pc, #20]	@ (8026408 <disk_status+0x30>)
 80263f2:	440a      	add	r2, r1
 80263f4:	7a12      	ldrb	r2, [r2, #8]
 80263f6:	4610      	mov	r0, r2
 80263f8:	4798      	blx	r3
 80263fa:	4603      	mov	r3, r0
 80263fc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80263fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8026400:	4618      	mov	r0, r3
 8026402:	3710      	adds	r7, #16
 8026404:	46bd      	mov	sp, r7
 8026406:	bd80      	pop	{r7, pc}
 8026408:	24000ab4 	.word	0x24000ab4

0802640c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 802640c:	b580      	push	{r7, lr}
 802640e:	b084      	sub	sp, #16
 8026410:	af00      	add	r7, sp, #0
 8026412:	4603      	mov	r3, r0
 8026414:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8026416:	2300      	movs	r3, #0
 8026418:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 802641a:	79fb      	ldrb	r3, [r7, #7]
 802641c:	4a0e      	ldr	r2, [pc, #56]	@ (8026458 <disk_initialize+0x4c>)
 802641e:	5cd3      	ldrb	r3, [r2, r3]
 8026420:	2b00      	cmp	r3, #0
 8026422:	d114      	bne.n	802644e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8026424:	79fb      	ldrb	r3, [r7, #7]
 8026426:	4a0c      	ldr	r2, [pc, #48]	@ (8026458 <disk_initialize+0x4c>)
 8026428:	009b      	lsls	r3, r3, #2
 802642a:	4413      	add	r3, r2
 802642c:	685b      	ldr	r3, [r3, #4]
 802642e:	681b      	ldr	r3, [r3, #0]
 8026430:	79fa      	ldrb	r2, [r7, #7]
 8026432:	4909      	ldr	r1, [pc, #36]	@ (8026458 <disk_initialize+0x4c>)
 8026434:	440a      	add	r2, r1
 8026436:	7a12      	ldrb	r2, [r2, #8]
 8026438:	4610      	mov	r0, r2
 802643a:	4798      	blx	r3
 802643c:	4603      	mov	r3, r0
 802643e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8026440:	7bfb      	ldrb	r3, [r7, #15]
 8026442:	2b00      	cmp	r3, #0
 8026444:	d103      	bne.n	802644e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8026446:	79fb      	ldrb	r3, [r7, #7]
 8026448:	4a03      	ldr	r2, [pc, #12]	@ (8026458 <disk_initialize+0x4c>)
 802644a:	2101      	movs	r1, #1
 802644c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 802644e:	7bfb      	ldrb	r3, [r7, #15]
}
 8026450:	4618      	mov	r0, r3
 8026452:	3710      	adds	r7, #16
 8026454:	46bd      	mov	sp, r7
 8026456:	bd80      	pop	{r7, pc}
 8026458:	24000ab4 	.word	0x24000ab4

0802645c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 802645c:	b590      	push	{r4, r7, lr}
 802645e:	b087      	sub	sp, #28
 8026460:	af00      	add	r7, sp, #0
 8026462:	60b9      	str	r1, [r7, #8]
 8026464:	607a      	str	r2, [r7, #4]
 8026466:	603b      	str	r3, [r7, #0]
 8026468:	4603      	mov	r3, r0
 802646a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 802646c:	7bfb      	ldrb	r3, [r7, #15]
 802646e:	4a0a      	ldr	r2, [pc, #40]	@ (8026498 <disk_read+0x3c>)
 8026470:	009b      	lsls	r3, r3, #2
 8026472:	4413      	add	r3, r2
 8026474:	685b      	ldr	r3, [r3, #4]
 8026476:	689c      	ldr	r4, [r3, #8]
 8026478:	7bfb      	ldrb	r3, [r7, #15]
 802647a:	4a07      	ldr	r2, [pc, #28]	@ (8026498 <disk_read+0x3c>)
 802647c:	4413      	add	r3, r2
 802647e:	7a18      	ldrb	r0, [r3, #8]
 8026480:	683b      	ldr	r3, [r7, #0]
 8026482:	687a      	ldr	r2, [r7, #4]
 8026484:	68b9      	ldr	r1, [r7, #8]
 8026486:	47a0      	blx	r4
 8026488:	4603      	mov	r3, r0
 802648a:	75fb      	strb	r3, [r7, #23]
  return res;
 802648c:	7dfb      	ldrb	r3, [r7, #23]
}
 802648e:	4618      	mov	r0, r3
 8026490:	371c      	adds	r7, #28
 8026492:	46bd      	mov	sp, r7
 8026494:	bd90      	pop	{r4, r7, pc}
 8026496:	bf00      	nop
 8026498:	24000ab4 	.word	0x24000ab4

0802649c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 802649c:	b590      	push	{r4, r7, lr}
 802649e:	b087      	sub	sp, #28
 80264a0:	af00      	add	r7, sp, #0
 80264a2:	60b9      	str	r1, [r7, #8]
 80264a4:	607a      	str	r2, [r7, #4]
 80264a6:	603b      	str	r3, [r7, #0]
 80264a8:	4603      	mov	r3, r0
 80264aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80264ac:	7bfb      	ldrb	r3, [r7, #15]
 80264ae:	4a0a      	ldr	r2, [pc, #40]	@ (80264d8 <disk_write+0x3c>)
 80264b0:	009b      	lsls	r3, r3, #2
 80264b2:	4413      	add	r3, r2
 80264b4:	685b      	ldr	r3, [r3, #4]
 80264b6:	68dc      	ldr	r4, [r3, #12]
 80264b8:	7bfb      	ldrb	r3, [r7, #15]
 80264ba:	4a07      	ldr	r2, [pc, #28]	@ (80264d8 <disk_write+0x3c>)
 80264bc:	4413      	add	r3, r2
 80264be:	7a18      	ldrb	r0, [r3, #8]
 80264c0:	683b      	ldr	r3, [r7, #0]
 80264c2:	687a      	ldr	r2, [r7, #4]
 80264c4:	68b9      	ldr	r1, [r7, #8]
 80264c6:	47a0      	blx	r4
 80264c8:	4603      	mov	r3, r0
 80264ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80264cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80264ce:	4618      	mov	r0, r3
 80264d0:	371c      	adds	r7, #28
 80264d2:	46bd      	mov	sp, r7
 80264d4:	bd90      	pop	{r4, r7, pc}
 80264d6:	bf00      	nop
 80264d8:	24000ab4 	.word	0x24000ab4

080264dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80264dc:	b580      	push	{r7, lr}
 80264de:	b084      	sub	sp, #16
 80264e0:	af00      	add	r7, sp, #0
 80264e2:	4603      	mov	r3, r0
 80264e4:	603a      	str	r2, [r7, #0]
 80264e6:	71fb      	strb	r3, [r7, #7]
 80264e8:	460b      	mov	r3, r1
 80264ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80264ec:	79fb      	ldrb	r3, [r7, #7]
 80264ee:	4a09      	ldr	r2, [pc, #36]	@ (8026514 <disk_ioctl+0x38>)
 80264f0:	009b      	lsls	r3, r3, #2
 80264f2:	4413      	add	r3, r2
 80264f4:	685b      	ldr	r3, [r3, #4]
 80264f6:	691b      	ldr	r3, [r3, #16]
 80264f8:	79fa      	ldrb	r2, [r7, #7]
 80264fa:	4906      	ldr	r1, [pc, #24]	@ (8026514 <disk_ioctl+0x38>)
 80264fc:	440a      	add	r2, r1
 80264fe:	7a10      	ldrb	r0, [r2, #8]
 8026500:	79b9      	ldrb	r1, [r7, #6]
 8026502:	683a      	ldr	r2, [r7, #0]
 8026504:	4798      	blx	r3
 8026506:	4603      	mov	r3, r0
 8026508:	73fb      	strb	r3, [r7, #15]
  return res;
 802650a:	7bfb      	ldrb	r3, [r7, #15]
}
 802650c:	4618      	mov	r0, r3
 802650e:	3710      	adds	r7, #16
 8026510:	46bd      	mov	sp, r7
 8026512:	bd80      	pop	{r7, pc}
 8026514:	24000ab4 	.word	0x24000ab4

08026518 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8026518:	b480      	push	{r7}
 802651a:	b085      	sub	sp, #20
 802651c:	af00      	add	r7, sp, #0
 802651e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8026520:	687b      	ldr	r3, [r7, #4]
 8026522:	3301      	adds	r3, #1
 8026524:	781b      	ldrb	r3, [r3, #0]
 8026526:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8026528:	89fb      	ldrh	r3, [r7, #14]
 802652a:	021b      	lsls	r3, r3, #8
 802652c:	b21a      	sxth	r2, r3
 802652e:	687b      	ldr	r3, [r7, #4]
 8026530:	781b      	ldrb	r3, [r3, #0]
 8026532:	b21b      	sxth	r3, r3
 8026534:	4313      	orrs	r3, r2
 8026536:	b21b      	sxth	r3, r3
 8026538:	81fb      	strh	r3, [r7, #14]
	return rv;
 802653a:	89fb      	ldrh	r3, [r7, #14]
}
 802653c:	4618      	mov	r0, r3
 802653e:	3714      	adds	r7, #20
 8026540:	46bd      	mov	sp, r7
 8026542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026546:	4770      	bx	lr

08026548 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8026548:	b480      	push	{r7}
 802654a:	b085      	sub	sp, #20
 802654c:	af00      	add	r7, sp, #0
 802654e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8026550:	687b      	ldr	r3, [r7, #4]
 8026552:	3303      	adds	r3, #3
 8026554:	781b      	ldrb	r3, [r3, #0]
 8026556:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8026558:	68fb      	ldr	r3, [r7, #12]
 802655a:	021b      	lsls	r3, r3, #8
 802655c:	687a      	ldr	r2, [r7, #4]
 802655e:	3202      	adds	r2, #2
 8026560:	7812      	ldrb	r2, [r2, #0]
 8026562:	4313      	orrs	r3, r2
 8026564:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8026566:	68fb      	ldr	r3, [r7, #12]
 8026568:	021b      	lsls	r3, r3, #8
 802656a:	687a      	ldr	r2, [r7, #4]
 802656c:	3201      	adds	r2, #1
 802656e:	7812      	ldrb	r2, [r2, #0]
 8026570:	4313      	orrs	r3, r2
 8026572:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8026574:	68fb      	ldr	r3, [r7, #12]
 8026576:	021b      	lsls	r3, r3, #8
 8026578:	687a      	ldr	r2, [r7, #4]
 802657a:	7812      	ldrb	r2, [r2, #0]
 802657c:	4313      	orrs	r3, r2
 802657e:	60fb      	str	r3, [r7, #12]
	return rv;
 8026580:	68fb      	ldr	r3, [r7, #12]
}
 8026582:	4618      	mov	r0, r3
 8026584:	3714      	adds	r7, #20
 8026586:	46bd      	mov	sp, r7
 8026588:	f85d 7b04 	ldr.w	r7, [sp], #4
 802658c:	4770      	bx	lr

0802658e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 802658e:	b480      	push	{r7}
 8026590:	b083      	sub	sp, #12
 8026592:	af00      	add	r7, sp, #0
 8026594:	6078      	str	r0, [r7, #4]
 8026596:	460b      	mov	r3, r1
 8026598:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 802659a:	687b      	ldr	r3, [r7, #4]
 802659c:	1c5a      	adds	r2, r3, #1
 802659e:	607a      	str	r2, [r7, #4]
 80265a0:	887a      	ldrh	r2, [r7, #2]
 80265a2:	b2d2      	uxtb	r2, r2
 80265a4:	701a      	strb	r2, [r3, #0]
 80265a6:	887b      	ldrh	r3, [r7, #2]
 80265a8:	0a1b      	lsrs	r3, r3, #8
 80265aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80265ac:	687b      	ldr	r3, [r7, #4]
 80265ae:	1c5a      	adds	r2, r3, #1
 80265b0:	607a      	str	r2, [r7, #4]
 80265b2:	887a      	ldrh	r2, [r7, #2]
 80265b4:	b2d2      	uxtb	r2, r2
 80265b6:	701a      	strb	r2, [r3, #0]
}
 80265b8:	bf00      	nop
 80265ba:	370c      	adds	r7, #12
 80265bc:	46bd      	mov	sp, r7
 80265be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265c2:	4770      	bx	lr

080265c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80265c4:	b480      	push	{r7}
 80265c6:	b083      	sub	sp, #12
 80265c8:	af00      	add	r7, sp, #0
 80265ca:	6078      	str	r0, [r7, #4]
 80265cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80265ce:	687b      	ldr	r3, [r7, #4]
 80265d0:	1c5a      	adds	r2, r3, #1
 80265d2:	607a      	str	r2, [r7, #4]
 80265d4:	683a      	ldr	r2, [r7, #0]
 80265d6:	b2d2      	uxtb	r2, r2
 80265d8:	701a      	strb	r2, [r3, #0]
 80265da:	683b      	ldr	r3, [r7, #0]
 80265dc:	0a1b      	lsrs	r3, r3, #8
 80265de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80265e0:	687b      	ldr	r3, [r7, #4]
 80265e2:	1c5a      	adds	r2, r3, #1
 80265e4:	607a      	str	r2, [r7, #4]
 80265e6:	683a      	ldr	r2, [r7, #0]
 80265e8:	b2d2      	uxtb	r2, r2
 80265ea:	701a      	strb	r2, [r3, #0]
 80265ec:	683b      	ldr	r3, [r7, #0]
 80265ee:	0a1b      	lsrs	r3, r3, #8
 80265f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80265f2:	687b      	ldr	r3, [r7, #4]
 80265f4:	1c5a      	adds	r2, r3, #1
 80265f6:	607a      	str	r2, [r7, #4]
 80265f8:	683a      	ldr	r2, [r7, #0]
 80265fa:	b2d2      	uxtb	r2, r2
 80265fc:	701a      	strb	r2, [r3, #0]
 80265fe:	683b      	ldr	r3, [r7, #0]
 8026600:	0a1b      	lsrs	r3, r3, #8
 8026602:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8026604:	687b      	ldr	r3, [r7, #4]
 8026606:	1c5a      	adds	r2, r3, #1
 8026608:	607a      	str	r2, [r7, #4]
 802660a:	683a      	ldr	r2, [r7, #0]
 802660c:	b2d2      	uxtb	r2, r2
 802660e:	701a      	strb	r2, [r3, #0]
}
 8026610:	bf00      	nop
 8026612:	370c      	adds	r7, #12
 8026614:	46bd      	mov	sp, r7
 8026616:	f85d 7b04 	ldr.w	r7, [sp], #4
 802661a:	4770      	bx	lr

0802661c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 802661c:	b480      	push	{r7}
 802661e:	b087      	sub	sp, #28
 8026620:	af00      	add	r7, sp, #0
 8026622:	60f8      	str	r0, [r7, #12]
 8026624:	60b9      	str	r1, [r7, #8]
 8026626:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8026628:	68fb      	ldr	r3, [r7, #12]
 802662a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 802662c:	68bb      	ldr	r3, [r7, #8]
 802662e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8026630:	687b      	ldr	r3, [r7, #4]
 8026632:	2b00      	cmp	r3, #0
 8026634:	d00d      	beq.n	8026652 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8026636:	693a      	ldr	r2, [r7, #16]
 8026638:	1c53      	adds	r3, r2, #1
 802663a:	613b      	str	r3, [r7, #16]
 802663c:	697b      	ldr	r3, [r7, #20]
 802663e:	1c59      	adds	r1, r3, #1
 8026640:	6179      	str	r1, [r7, #20]
 8026642:	7812      	ldrb	r2, [r2, #0]
 8026644:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8026646:	687b      	ldr	r3, [r7, #4]
 8026648:	3b01      	subs	r3, #1
 802664a:	607b      	str	r3, [r7, #4]
 802664c:	687b      	ldr	r3, [r7, #4]
 802664e:	2b00      	cmp	r3, #0
 8026650:	d1f1      	bne.n	8026636 <mem_cpy+0x1a>
	}
}
 8026652:	bf00      	nop
 8026654:	371c      	adds	r7, #28
 8026656:	46bd      	mov	sp, r7
 8026658:	f85d 7b04 	ldr.w	r7, [sp], #4
 802665c:	4770      	bx	lr

0802665e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 802665e:	b480      	push	{r7}
 8026660:	b087      	sub	sp, #28
 8026662:	af00      	add	r7, sp, #0
 8026664:	60f8      	str	r0, [r7, #12]
 8026666:	60b9      	str	r1, [r7, #8]
 8026668:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 802666a:	68fb      	ldr	r3, [r7, #12]
 802666c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 802666e:	697b      	ldr	r3, [r7, #20]
 8026670:	1c5a      	adds	r2, r3, #1
 8026672:	617a      	str	r2, [r7, #20]
 8026674:	68ba      	ldr	r2, [r7, #8]
 8026676:	b2d2      	uxtb	r2, r2
 8026678:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 802667a:	687b      	ldr	r3, [r7, #4]
 802667c:	3b01      	subs	r3, #1
 802667e:	607b      	str	r3, [r7, #4]
 8026680:	687b      	ldr	r3, [r7, #4]
 8026682:	2b00      	cmp	r3, #0
 8026684:	d1f3      	bne.n	802666e <mem_set+0x10>
}
 8026686:	bf00      	nop
 8026688:	bf00      	nop
 802668a:	371c      	adds	r7, #28
 802668c:	46bd      	mov	sp, r7
 802668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026692:	4770      	bx	lr

08026694 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8026694:	b480      	push	{r7}
 8026696:	b089      	sub	sp, #36	@ 0x24
 8026698:	af00      	add	r7, sp, #0
 802669a:	60f8      	str	r0, [r7, #12]
 802669c:	60b9      	str	r1, [r7, #8]
 802669e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80266a0:	68fb      	ldr	r3, [r7, #12]
 80266a2:	61fb      	str	r3, [r7, #28]
 80266a4:	68bb      	ldr	r3, [r7, #8]
 80266a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80266a8:	2300      	movs	r3, #0
 80266aa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80266ac:	69fb      	ldr	r3, [r7, #28]
 80266ae:	1c5a      	adds	r2, r3, #1
 80266b0:	61fa      	str	r2, [r7, #28]
 80266b2:	781b      	ldrb	r3, [r3, #0]
 80266b4:	4619      	mov	r1, r3
 80266b6:	69bb      	ldr	r3, [r7, #24]
 80266b8:	1c5a      	adds	r2, r3, #1
 80266ba:	61ba      	str	r2, [r7, #24]
 80266bc:	781b      	ldrb	r3, [r3, #0]
 80266be:	1acb      	subs	r3, r1, r3
 80266c0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80266c2:	687b      	ldr	r3, [r7, #4]
 80266c4:	3b01      	subs	r3, #1
 80266c6:	607b      	str	r3, [r7, #4]
 80266c8:	687b      	ldr	r3, [r7, #4]
 80266ca:	2b00      	cmp	r3, #0
 80266cc:	d002      	beq.n	80266d4 <mem_cmp+0x40>
 80266ce:	697b      	ldr	r3, [r7, #20]
 80266d0:	2b00      	cmp	r3, #0
 80266d2:	d0eb      	beq.n	80266ac <mem_cmp+0x18>

	return r;
 80266d4:	697b      	ldr	r3, [r7, #20]
}
 80266d6:	4618      	mov	r0, r3
 80266d8:	3724      	adds	r7, #36	@ 0x24
 80266da:	46bd      	mov	sp, r7
 80266dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266e0:	4770      	bx	lr

080266e2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80266e2:	b480      	push	{r7}
 80266e4:	b083      	sub	sp, #12
 80266e6:	af00      	add	r7, sp, #0
 80266e8:	6078      	str	r0, [r7, #4]
 80266ea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80266ec:	e002      	b.n	80266f4 <chk_chr+0x12>
 80266ee:	687b      	ldr	r3, [r7, #4]
 80266f0:	3301      	adds	r3, #1
 80266f2:	607b      	str	r3, [r7, #4]
 80266f4:	687b      	ldr	r3, [r7, #4]
 80266f6:	781b      	ldrb	r3, [r3, #0]
 80266f8:	2b00      	cmp	r3, #0
 80266fa:	d005      	beq.n	8026708 <chk_chr+0x26>
 80266fc:	687b      	ldr	r3, [r7, #4]
 80266fe:	781b      	ldrb	r3, [r3, #0]
 8026700:	461a      	mov	r2, r3
 8026702:	683b      	ldr	r3, [r7, #0]
 8026704:	4293      	cmp	r3, r2
 8026706:	d1f2      	bne.n	80266ee <chk_chr+0xc>
	return *str;
 8026708:	687b      	ldr	r3, [r7, #4]
 802670a:	781b      	ldrb	r3, [r3, #0]
}
 802670c:	4618      	mov	r0, r3
 802670e:	370c      	adds	r7, #12
 8026710:	46bd      	mov	sp, r7
 8026712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026716:	4770      	bx	lr

08026718 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8026718:	b480      	push	{r7}
 802671a:	b085      	sub	sp, #20
 802671c:	af00      	add	r7, sp, #0
 802671e:	6078      	str	r0, [r7, #4]
 8026720:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8026722:	2300      	movs	r3, #0
 8026724:	60bb      	str	r3, [r7, #8]
 8026726:	68bb      	ldr	r3, [r7, #8]
 8026728:	60fb      	str	r3, [r7, #12]
 802672a:	e029      	b.n	8026780 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 802672c:	4a27      	ldr	r2, [pc, #156]	@ (80267cc <chk_lock+0xb4>)
 802672e:	68fb      	ldr	r3, [r7, #12]
 8026730:	011b      	lsls	r3, r3, #4
 8026732:	4413      	add	r3, r2
 8026734:	681b      	ldr	r3, [r3, #0]
 8026736:	2b00      	cmp	r3, #0
 8026738:	d01d      	beq.n	8026776 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 802673a:	4a24      	ldr	r2, [pc, #144]	@ (80267cc <chk_lock+0xb4>)
 802673c:	68fb      	ldr	r3, [r7, #12]
 802673e:	011b      	lsls	r3, r3, #4
 8026740:	4413      	add	r3, r2
 8026742:	681a      	ldr	r2, [r3, #0]
 8026744:	687b      	ldr	r3, [r7, #4]
 8026746:	681b      	ldr	r3, [r3, #0]
 8026748:	429a      	cmp	r2, r3
 802674a:	d116      	bne.n	802677a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 802674c:	4a1f      	ldr	r2, [pc, #124]	@ (80267cc <chk_lock+0xb4>)
 802674e:	68fb      	ldr	r3, [r7, #12]
 8026750:	011b      	lsls	r3, r3, #4
 8026752:	4413      	add	r3, r2
 8026754:	3304      	adds	r3, #4
 8026756:	681a      	ldr	r2, [r3, #0]
 8026758:	687b      	ldr	r3, [r7, #4]
 802675a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 802675c:	429a      	cmp	r2, r3
 802675e:	d10c      	bne.n	802677a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8026760:	4a1a      	ldr	r2, [pc, #104]	@ (80267cc <chk_lock+0xb4>)
 8026762:	68fb      	ldr	r3, [r7, #12]
 8026764:	011b      	lsls	r3, r3, #4
 8026766:	4413      	add	r3, r2
 8026768:	3308      	adds	r3, #8
 802676a:	681a      	ldr	r2, [r3, #0]
 802676c:	687b      	ldr	r3, [r7, #4]
 802676e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8026770:	429a      	cmp	r2, r3
 8026772:	d102      	bne.n	802677a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8026774:	e007      	b.n	8026786 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8026776:	2301      	movs	r3, #1
 8026778:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 802677a:	68fb      	ldr	r3, [r7, #12]
 802677c:	3301      	adds	r3, #1
 802677e:	60fb      	str	r3, [r7, #12]
 8026780:	68fb      	ldr	r3, [r7, #12]
 8026782:	2b01      	cmp	r3, #1
 8026784:	d9d2      	bls.n	802672c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8026786:	68fb      	ldr	r3, [r7, #12]
 8026788:	2b02      	cmp	r3, #2
 802678a:	d109      	bne.n	80267a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 802678c:	68bb      	ldr	r3, [r7, #8]
 802678e:	2b00      	cmp	r3, #0
 8026790:	d102      	bne.n	8026798 <chk_lock+0x80>
 8026792:	683b      	ldr	r3, [r7, #0]
 8026794:	2b02      	cmp	r3, #2
 8026796:	d101      	bne.n	802679c <chk_lock+0x84>
 8026798:	2300      	movs	r3, #0
 802679a:	e010      	b.n	80267be <chk_lock+0xa6>
 802679c:	2312      	movs	r3, #18
 802679e:	e00e      	b.n	80267be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80267a0:	683b      	ldr	r3, [r7, #0]
 80267a2:	2b00      	cmp	r3, #0
 80267a4:	d108      	bne.n	80267b8 <chk_lock+0xa0>
 80267a6:	4a09      	ldr	r2, [pc, #36]	@ (80267cc <chk_lock+0xb4>)
 80267a8:	68fb      	ldr	r3, [r7, #12]
 80267aa:	011b      	lsls	r3, r3, #4
 80267ac:	4413      	add	r3, r2
 80267ae:	330c      	adds	r3, #12
 80267b0:	881b      	ldrh	r3, [r3, #0]
 80267b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80267b6:	d101      	bne.n	80267bc <chk_lock+0xa4>
 80267b8:	2310      	movs	r3, #16
 80267ba:	e000      	b.n	80267be <chk_lock+0xa6>
 80267bc:	2300      	movs	r3, #0
}
 80267be:	4618      	mov	r0, r3
 80267c0:	3714      	adds	r7, #20
 80267c2:	46bd      	mov	sp, r7
 80267c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267c8:	4770      	bx	lr
 80267ca:	bf00      	nop
 80267cc:	24000a94 	.word	0x24000a94

080267d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80267d0:	b480      	push	{r7}
 80267d2:	b083      	sub	sp, #12
 80267d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80267d6:	2300      	movs	r3, #0
 80267d8:	607b      	str	r3, [r7, #4]
 80267da:	e002      	b.n	80267e2 <enq_lock+0x12>
 80267dc:	687b      	ldr	r3, [r7, #4]
 80267de:	3301      	adds	r3, #1
 80267e0:	607b      	str	r3, [r7, #4]
 80267e2:	687b      	ldr	r3, [r7, #4]
 80267e4:	2b01      	cmp	r3, #1
 80267e6:	d806      	bhi.n	80267f6 <enq_lock+0x26>
 80267e8:	4a09      	ldr	r2, [pc, #36]	@ (8026810 <enq_lock+0x40>)
 80267ea:	687b      	ldr	r3, [r7, #4]
 80267ec:	011b      	lsls	r3, r3, #4
 80267ee:	4413      	add	r3, r2
 80267f0:	681b      	ldr	r3, [r3, #0]
 80267f2:	2b00      	cmp	r3, #0
 80267f4:	d1f2      	bne.n	80267dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80267f6:	687b      	ldr	r3, [r7, #4]
 80267f8:	2b02      	cmp	r3, #2
 80267fa:	bf14      	ite	ne
 80267fc:	2301      	movne	r3, #1
 80267fe:	2300      	moveq	r3, #0
 8026800:	b2db      	uxtb	r3, r3
}
 8026802:	4618      	mov	r0, r3
 8026804:	370c      	adds	r7, #12
 8026806:	46bd      	mov	sp, r7
 8026808:	f85d 7b04 	ldr.w	r7, [sp], #4
 802680c:	4770      	bx	lr
 802680e:	bf00      	nop
 8026810:	24000a94 	.word	0x24000a94

08026814 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8026814:	b480      	push	{r7}
 8026816:	b085      	sub	sp, #20
 8026818:	af00      	add	r7, sp, #0
 802681a:	6078      	str	r0, [r7, #4]
 802681c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 802681e:	2300      	movs	r3, #0
 8026820:	60fb      	str	r3, [r7, #12]
 8026822:	e01f      	b.n	8026864 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8026824:	4a41      	ldr	r2, [pc, #260]	@ (802692c <inc_lock+0x118>)
 8026826:	68fb      	ldr	r3, [r7, #12]
 8026828:	011b      	lsls	r3, r3, #4
 802682a:	4413      	add	r3, r2
 802682c:	681a      	ldr	r2, [r3, #0]
 802682e:	687b      	ldr	r3, [r7, #4]
 8026830:	681b      	ldr	r3, [r3, #0]
 8026832:	429a      	cmp	r2, r3
 8026834:	d113      	bne.n	802685e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8026836:	4a3d      	ldr	r2, [pc, #244]	@ (802692c <inc_lock+0x118>)
 8026838:	68fb      	ldr	r3, [r7, #12]
 802683a:	011b      	lsls	r3, r3, #4
 802683c:	4413      	add	r3, r2
 802683e:	3304      	adds	r3, #4
 8026840:	681a      	ldr	r2, [r3, #0]
 8026842:	687b      	ldr	r3, [r7, #4]
 8026844:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8026846:	429a      	cmp	r2, r3
 8026848:	d109      	bne.n	802685e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 802684a:	4a38      	ldr	r2, [pc, #224]	@ (802692c <inc_lock+0x118>)
 802684c:	68fb      	ldr	r3, [r7, #12]
 802684e:	011b      	lsls	r3, r3, #4
 8026850:	4413      	add	r3, r2
 8026852:	3308      	adds	r3, #8
 8026854:	681a      	ldr	r2, [r3, #0]
 8026856:	687b      	ldr	r3, [r7, #4]
 8026858:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 802685a:	429a      	cmp	r2, r3
 802685c:	d006      	beq.n	802686c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 802685e:	68fb      	ldr	r3, [r7, #12]
 8026860:	3301      	adds	r3, #1
 8026862:	60fb      	str	r3, [r7, #12]
 8026864:	68fb      	ldr	r3, [r7, #12]
 8026866:	2b01      	cmp	r3, #1
 8026868:	d9dc      	bls.n	8026824 <inc_lock+0x10>
 802686a:	e000      	b.n	802686e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 802686c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 802686e:	68fb      	ldr	r3, [r7, #12]
 8026870:	2b02      	cmp	r3, #2
 8026872:	d132      	bne.n	80268da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8026874:	2300      	movs	r3, #0
 8026876:	60fb      	str	r3, [r7, #12]
 8026878:	e002      	b.n	8026880 <inc_lock+0x6c>
 802687a:	68fb      	ldr	r3, [r7, #12]
 802687c:	3301      	adds	r3, #1
 802687e:	60fb      	str	r3, [r7, #12]
 8026880:	68fb      	ldr	r3, [r7, #12]
 8026882:	2b01      	cmp	r3, #1
 8026884:	d806      	bhi.n	8026894 <inc_lock+0x80>
 8026886:	4a29      	ldr	r2, [pc, #164]	@ (802692c <inc_lock+0x118>)
 8026888:	68fb      	ldr	r3, [r7, #12]
 802688a:	011b      	lsls	r3, r3, #4
 802688c:	4413      	add	r3, r2
 802688e:	681b      	ldr	r3, [r3, #0]
 8026890:	2b00      	cmp	r3, #0
 8026892:	d1f2      	bne.n	802687a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8026894:	68fb      	ldr	r3, [r7, #12]
 8026896:	2b02      	cmp	r3, #2
 8026898:	d101      	bne.n	802689e <inc_lock+0x8a>
 802689a:	2300      	movs	r3, #0
 802689c:	e040      	b.n	8026920 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 802689e:	687b      	ldr	r3, [r7, #4]
 80268a0:	681a      	ldr	r2, [r3, #0]
 80268a2:	4922      	ldr	r1, [pc, #136]	@ (802692c <inc_lock+0x118>)
 80268a4:	68fb      	ldr	r3, [r7, #12]
 80268a6:	011b      	lsls	r3, r3, #4
 80268a8:	440b      	add	r3, r1
 80268aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80268ac:	687b      	ldr	r3, [r7, #4]
 80268ae:	689a      	ldr	r2, [r3, #8]
 80268b0:	491e      	ldr	r1, [pc, #120]	@ (802692c <inc_lock+0x118>)
 80268b2:	68fb      	ldr	r3, [r7, #12]
 80268b4:	011b      	lsls	r3, r3, #4
 80268b6:	440b      	add	r3, r1
 80268b8:	3304      	adds	r3, #4
 80268ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80268bc:	687b      	ldr	r3, [r7, #4]
 80268be:	695a      	ldr	r2, [r3, #20]
 80268c0:	491a      	ldr	r1, [pc, #104]	@ (802692c <inc_lock+0x118>)
 80268c2:	68fb      	ldr	r3, [r7, #12]
 80268c4:	011b      	lsls	r3, r3, #4
 80268c6:	440b      	add	r3, r1
 80268c8:	3308      	adds	r3, #8
 80268ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80268cc:	4a17      	ldr	r2, [pc, #92]	@ (802692c <inc_lock+0x118>)
 80268ce:	68fb      	ldr	r3, [r7, #12]
 80268d0:	011b      	lsls	r3, r3, #4
 80268d2:	4413      	add	r3, r2
 80268d4:	330c      	adds	r3, #12
 80268d6:	2200      	movs	r2, #0
 80268d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80268da:	683b      	ldr	r3, [r7, #0]
 80268dc:	2b00      	cmp	r3, #0
 80268de:	d009      	beq.n	80268f4 <inc_lock+0xe0>
 80268e0:	4a12      	ldr	r2, [pc, #72]	@ (802692c <inc_lock+0x118>)
 80268e2:	68fb      	ldr	r3, [r7, #12]
 80268e4:	011b      	lsls	r3, r3, #4
 80268e6:	4413      	add	r3, r2
 80268e8:	330c      	adds	r3, #12
 80268ea:	881b      	ldrh	r3, [r3, #0]
 80268ec:	2b00      	cmp	r3, #0
 80268ee:	d001      	beq.n	80268f4 <inc_lock+0xe0>
 80268f0:	2300      	movs	r3, #0
 80268f2:	e015      	b.n	8026920 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80268f4:	683b      	ldr	r3, [r7, #0]
 80268f6:	2b00      	cmp	r3, #0
 80268f8:	d108      	bne.n	802690c <inc_lock+0xf8>
 80268fa:	4a0c      	ldr	r2, [pc, #48]	@ (802692c <inc_lock+0x118>)
 80268fc:	68fb      	ldr	r3, [r7, #12]
 80268fe:	011b      	lsls	r3, r3, #4
 8026900:	4413      	add	r3, r2
 8026902:	330c      	adds	r3, #12
 8026904:	881b      	ldrh	r3, [r3, #0]
 8026906:	3301      	adds	r3, #1
 8026908:	b29a      	uxth	r2, r3
 802690a:	e001      	b.n	8026910 <inc_lock+0xfc>
 802690c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8026910:	4906      	ldr	r1, [pc, #24]	@ (802692c <inc_lock+0x118>)
 8026912:	68fb      	ldr	r3, [r7, #12]
 8026914:	011b      	lsls	r3, r3, #4
 8026916:	440b      	add	r3, r1
 8026918:	330c      	adds	r3, #12
 802691a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 802691c:	68fb      	ldr	r3, [r7, #12]
 802691e:	3301      	adds	r3, #1
}
 8026920:	4618      	mov	r0, r3
 8026922:	3714      	adds	r7, #20
 8026924:	46bd      	mov	sp, r7
 8026926:	f85d 7b04 	ldr.w	r7, [sp], #4
 802692a:	4770      	bx	lr
 802692c:	24000a94 	.word	0x24000a94

08026930 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8026930:	b480      	push	{r7}
 8026932:	b085      	sub	sp, #20
 8026934:	af00      	add	r7, sp, #0
 8026936:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8026938:	687b      	ldr	r3, [r7, #4]
 802693a:	3b01      	subs	r3, #1
 802693c:	607b      	str	r3, [r7, #4]
 802693e:	687b      	ldr	r3, [r7, #4]
 8026940:	2b01      	cmp	r3, #1
 8026942:	d825      	bhi.n	8026990 <dec_lock+0x60>
		n = Files[i].ctr;
 8026944:	4a17      	ldr	r2, [pc, #92]	@ (80269a4 <dec_lock+0x74>)
 8026946:	687b      	ldr	r3, [r7, #4]
 8026948:	011b      	lsls	r3, r3, #4
 802694a:	4413      	add	r3, r2
 802694c:	330c      	adds	r3, #12
 802694e:	881b      	ldrh	r3, [r3, #0]
 8026950:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8026952:	89fb      	ldrh	r3, [r7, #14]
 8026954:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8026958:	d101      	bne.n	802695e <dec_lock+0x2e>
 802695a:	2300      	movs	r3, #0
 802695c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 802695e:	89fb      	ldrh	r3, [r7, #14]
 8026960:	2b00      	cmp	r3, #0
 8026962:	d002      	beq.n	802696a <dec_lock+0x3a>
 8026964:	89fb      	ldrh	r3, [r7, #14]
 8026966:	3b01      	subs	r3, #1
 8026968:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 802696a:	4a0e      	ldr	r2, [pc, #56]	@ (80269a4 <dec_lock+0x74>)
 802696c:	687b      	ldr	r3, [r7, #4]
 802696e:	011b      	lsls	r3, r3, #4
 8026970:	4413      	add	r3, r2
 8026972:	330c      	adds	r3, #12
 8026974:	89fa      	ldrh	r2, [r7, #14]
 8026976:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8026978:	89fb      	ldrh	r3, [r7, #14]
 802697a:	2b00      	cmp	r3, #0
 802697c:	d105      	bne.n	802698a <dec_lock+0x5a>
 802697e:	4a09      	ldr	r2, [pc, #36]	@ (80269a4 <dec_lock+0x74>)
 8026980:	687b      	ldr	r3, [r7, #4]
 8026982:	011b      	lsls	r3, r3, #4
 8026984:	4413      	add	r3, r2
 8026986:	2200      	movs	r2, #0
 8026988:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 802698a:	2300      	movs	r3, #0
 802698c:	737b      	strb	r3, [r7, #13]
 802698e:	e001      	b.n	8026994 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8026990:	2302      	movs	r3, #2
 8026992:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8026994:	7b7b      	ldrb	r3, [r7, #13]
}
 8026996:	4618      	mov	r0, r3
 8026998:	3714      	adds	r7, #20
 802699a:	46bd      	mov	sp, r7
 802699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269a0:	4770      	bx	lr
 80269a2:	bf00      	nop
 80269a4:	24000a94 	.word	0x24000a94

080269a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80269a8:	b480      	push	{r7}
 80269aa:	b085      	sub	sp, #20
 80269ac:	af00      	add	r7, sp, #0
 80269ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80269b0:	2300      	movs	r3, #0
 80269b2:	60fb      	str	r3, [r7, #12]
 80269b4:	e010      	b.n	80269d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80269b6:	4a0d      	ldr	r2, [pc, #52]	@ (80269ec <clear_lock+0x44>)
 80269b8:	68fb      	ldr	r3, [r7, #12]
 80269ba:	011b      	lsls	r3, r3, #4
 80269bc:	4413      	add	r3, r2
 80269be:	681b      	ldr	r3, [r3, #0]
 80269c0:	687a      	ldr	r2, [r7, #4]
 80269c2:	429a      	cmp	r2, r3
 80269c4:	d105      	bne.n	80269d2 <clear_lock+0x2a>
 80269c6:	4a09      	ldr	r2, [pc, #36]	@ (80269ec <clear_lock+0x44>)
 80269c8:	68fb      	ldr	r3, [r7, #12]
 80269ca:	011b      	lsls	r3, r3, #4
 80269cc:	4413      	add	r3, r2
 80269ce:	2200      	movs	r2, #0
 80269d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80269d2:	68fb      	ldr	r3, [r7, #12]
 80269d4:	3301      	adds	r3, #1
 80269d6:	60fb      	str	r3, [r7, #12]
 80269d8:	68fb      	ldr	r3, [r7, #12]
 80269da:	2b01      	cmp	r3, #1
 80269dc:	d9eb      	bls.n	80269b6 <clear_lock+0xe>
	}
}
 80269de:	bf00      	nop
 80269e0:	bf00      	nop
 80269e2:	3714      	adds	r7, #20
 80269e4:	46bd      	mov	sp, r7
 80269e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269ea:	4770      	bx	lr
 80269ec:	24000a94 	.word	0x24000a94

080269f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80269f0:	b580      	push	{r7, lr}
 80269f2:	b086      	sub	sp, #24
 80269f4:	af00      	add	r7, sp, #0
 80269f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80269f8:	2300      	movs	r3, #0
 80269fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80269fc:	687b      	ldr	r3, [r7, #4]
 80269fe:	78db      	ldrb	r3, [r3, #3]
 8026a00:	2b00      	cmp	r3, #0
 8026a02:	d034      	beq.n	8026a6e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8026a04:	687b      	ldr	r3, [r7, #4]
 8026a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026a08:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8026a0a:	687b      	ldr	r3, [r7, #4]
 8026a0c:	7858      	ldrb	r0, [r3, #1]
 8026a0e:	687b      	ldr	r3, [r7, #4]
 8026a10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8026a14:	2301      	movs	r3, #1
 8026a16:	697a      	ldr	r2, [r7, #20]
 8026a18:	f7ff fd40 	bl	802649c <disk_write>
 8026a1c:	4603      	mov	r3, r0
 8026a1e:	2b00      	cmp	r3, #0
 8026a20:	d002      	beq.n	8026a28 <sync_window+0x38>
			res = FR_DISK_ERR;
 8026a22:	2301      	movs	r3, #1
 8026a24:	73fb      	strb	r3, [r7, #15]
 8026a26:	e022      	b.n	8026a6e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8026a28:	687b      	ldr	r3, [r7, #4]
 8026a2a:	2200      	movs	r2, #0
 8026a2c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8026a2e:	687b      	ldr	r3, [r7, #4]
 8026a30:	6a1b      	ldr	r3, [r3, #32]
 8026a32:	697a      	ldr	r2, [r7, #20]
 8026a34:	1ad2      	subs	r2, r2, r3
 8026a36:	687b      	ldr	r3, [r7, #4]
 8026a38:	699b      	ldr	r3, [r3, #24]
 8026a3a:	429a      	cmp	r2, r3
 8026a3c:	d217      	bcs.n	8026a6e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8026a3e:	687b      	ldr	r3, [r7, #4]
 8026a40:	789b      	ldrb	r3, [r3, #2]
 8026a42:	613b      	str	r3, [r7, #16]
 8026a44:	e010      	b.n	8026a68 <sync_window+0x78>
					wsect += fs->fsize;
 8026a46:	687b      	ldr	r3, [r7, #4]
 8026a48:	699b      	ldr	r3, [r3, #24]
 8026a4a:	697a      	ldr	r2, [r7, #20]
 8026a4c:	4413      	add	r3, r2
 8026a4e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8026a50:	687b      	ldr	r3, [r7, #4]
 8026a52:	7858      	ldrb	r0, [r3, #1]
 8026a54:	687b      	ldr	r3, [r7, #4]
 8026a56:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8026a5a:	2301      	movs	r3, #1
 8026a5c:	697a      	ldr	r2, [r7, #20]
 8026a5e:	f7ff fd1d 	bl	802649c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8026a62:	693b      	ldr	r3, [r7, #16]
 8026a64:	3b01      	subs	r3, #1
 8026a66:	613b      	str	r3, [r7, #16]
 8026a68:	693b      	ldr	r3, [r7, #16]
 8026a6a:	2b01      	cmp	r3, #1
 8026a6c:	d8eb      	bhi.n	8026a46 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8026a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8026a70:	4618      	mov	r0, r3
 8026a72:	3718      	adds	r7, #24
 8026a74:	46bd      	mov	sp, r7
 8026a76:	bd80      	pop	{r7, pc}

08026a78 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8026a78:	b580      	push	{r7, lr}
 8026a7a:	b084      	sub	sp, #16
 8026a7c:	af00      	add	r7, sp, #0
 8026a7e:	6078      	str	r0, [r7, #4]
 8026a80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8026a82:	2300      	movs	r3, #0
 8026a84:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8026a86:	687b      	ldr	r3, [r7, #4]
 8026a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8026a8a:	683a      	ldr	r2, [r7, #0]
 8026a8c:	429a      	cmp	r2, r3
 8026a8e:	d01b      	beq.n	8026ac8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8026a90:	6878      	ldr	r0, [r7, #4]
 8026a92:	f7ff ffad 	bl	80269f0 <sync_window>
 8026a96:	4603      	mov	r3, r0
 8026a98:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8026a9a:	7bfb      	ldrb	r3, [r7, #15]
 8026a9c:	2b00      	cmp	r3, #0
 8026a9e:	d113      	bne.n	8026ac8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8026aa0:	687b      	ldr	r3, [r7, #4]
 8026aa2:	7858      	ldrb	r0, [r3, #1]
 8026aa4:	687b      	ldr	r3, [r7, #4]
 8026aa6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8026aaa:	2301      	movs	r3, #1
 8026aac:	683a      	ldr	r2, [r7, #0]
 8026aae:	f7ff fcd5 	bl	802645c <disk_read>
 8026ab2:	4603      	mov	r3, r0
 8026ab4:	2b00      	cmp	r3, #0
 8026ab6:	d004      	beq.n	8026ac2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8026ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8026abc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8026abe:	2301      	movs	r3, #1
 8026ac0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8026ac2:	687b      	ldr	r3, [r7, #4]
 8026ac4:	683a      	ldr	r2, [r7, #0]
 8026ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8026ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8026aca:	4618      	mov	r0, r3
 8026acc:	3710      	adds	r7, #16
 8026ace:	46bd      	mov	sp, r7
 8026ad0:	bd80      	pop	{r7, pc}
	...

08026ad4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8026ad4:	b580      	push	{r7, lr}
 8026ad6:	b084      	sub	sp, #16
 8026ad8:	af00      	add	r7, sp, #0
 8026ada:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8026adc:	6878      	ldr	r0, [r7, #4]
 8026ade:	f7ff ff87 	bl	80269f0 <sync_window>
 8026ae2:	4603      	mov	r3, r0
 8026ae4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8026ae6:	7bfb      	ldrb	r3, [r7, #15]
 8026ae8:	2b00      	cmp	r3, #0
 8026aea:	d158      	bne.n	8026b9e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8026aec:	687b      	ldr	r3, [r7, #4]
 8026aee:	781b      	ldrb	r3, [r3, #0]
 8026af0:	2b03      	cmp	r3, #3
 8026af2:	d148      	bne.n	8026b86 <sync_fs+0xb2>
 8026af4:	687b      	ldr	r3, [r7, #4]
 8026af6:	791b      	ldrb	r3, [r3, #4]
 8026af8:	2b01      	cmp	r3, #1
 8026afa:	d144      	bne.n	8026b86 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8026afc:	687b      	ldr	r3, [r7, #4]
 8026afe:	3330      	adds	r3, #48	@ 0x30
 8026b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8026b04:	2100      	movs	r1, #0
 8026b06:	4618      	mov	r0, r3
 8026b08:	f7ff fda9 	bl	802665e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8026b0c:	687b      	ldr	r3, [r7, #4]
 8026b0e:	3330      	adds	r3, #48	@ 0x30
 8026b10:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8026b14:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8026b18:	4618      	mov	r0, r3
 8026b1a:	f7ff fd38 	bl	802658e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8026b1e:	687b      	ldr	r3, [r7, #4]
 8026b20:	3330      	adds	r3, #48	@ 0x30
 8026b22:	4921      	ldr	r1, [pc, #132]	@ (8026ba8 <sync_fs+0xd4>)
 8026b24:	4618      	mov	r0, r3
 8026b26:	f7ff fd4d 	bl	80265c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8026b2a:	687b      	ldr	r3, [r7, #4]
 8026b2c:	3330      	adds	r3, #48	@ 0x30
 8026b2e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8026b32:	491e      	ldr	r1, [pc, #120]	@ (8026bac <sync_fs+0xd8>)
 8026b34:	4618      	mov	r0, r3
 8026b36:	f7ff fd45 	bl	80265c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8026b3a:	687b      	ldr	r3, [r7, #4]
 8026b3c:	3330      	adds	r3, #48	@ 0x30
 8026b3e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8026b42:	687b      	ldr	r3, [r7, #4]
 8026b44:	691b      	ldr	r3, [r3, #16]
 8026b46:	4619      	mov	r1, r3
 8026b48:	4610      	mov	r0, r2
 8026b4a:	f7ff fd3b 	bl	80265c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8026b4e:	687b      	ldr	r3, [r7, #4]
 8026b50:	3330      	adds	r3, #48	@ 0x30
 8026b52:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8026b56:	687b      	ldr	r3, [r7, #4]
 8026b58:	68db      	ldr	r3, [r3, #12]
 8026b5a:	4619      	mov	r1, r3
 8026b5c:	4610      	mov	r0, r2
 8026b5e:	f7ff fd31 	bl	80265c4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8026b62:	687b      	ldr	r3, [r7, #4]
 8026b64:	69db      	ldr	r3, [r3, #28]
 8026b66:	1c5a      	adds	r2, r3, #1
 8026b68:	687b      	ldr	r3, [r7, #4]
 8026b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8026b6c:	687b      	ldr	r3, [r7, #4]
 8026b6e:	7858      	ldrb	r0, [r3, #1]
 8026b70:	687b      	ldr	r3, [r7, #4]
 8026b72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8026b76:	687b      	ldr	r3, [r7, #4]
 8026b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8026b7a:	2301      	movs	r3, #1
 8026b7c:	f7ff fc8e 	bl	802649c <disk_write>
			fs->fsi_flag = 0;
 8026b80:	687b      	ldr	r3, [r7, #4]
 8026b82:	2200      	movs	r2, #0
 8026b84:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8026b86:	687b      	ldr	r3, [r7, #4]
 8026b88:	785b      	ldrb	r3, [r3, #1]
 8026b8a:	2200      	movs	r2, #0
 8026b8c:	2100      	movs	r1, #0
 8026b8e:	4618      	mov	r0, r3
 8026b90:	f7ff fca4 	bl	80264dc <disk_ioctl>
 8026b94:	4603      	mov	r3, r0
 8026b96:	2b00      	cmp	r3, #0
 8026b98:	d001      	beq.n	8026b9e <sync_fs+0xca>
 8026b9a:	2301      	movs	r3, #1
 8026b9c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8026b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8026ba0:	4618      	mov	r0, r3
 8026ba2:	3710      	adds	r7, #16
 8026ba4:	46bd      	mov	sp, r7
 8026ba6:	bd80      	pop	{r7, pc}
 8026ba8:	41615252 	.word	0x41615252
 8026bac:	61417272 	.word	0x61417272

08026bb0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8026bb0:	b480      	push	{r7}
 8026bb2:	b083      	sub	sp, #12
 8026bb4:	af00      	add	r7, sp, #0
 8026bb6:	6078      	str	r0, [r7, #4]
 8026bb8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8026bba:	683b      	ldr	r3, [r7, #0]
 8026bbc:	3b02      	subs	r3, #2
 8026bbe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8026bc0:	687b      	ldr	r3, [r7, #4]
 8026bc2:	695b      	ldr	r3, [r3, #20]
 8026bc4:	3b02      	subs	r3, #2
 8026bc6:	683a      	ldr	r2, [r7, #0]
 8026bc8:	429a      	cmp	r2, r3
 8026bca:	d301      	bcc.n	8026bd0 <clust2sect+0x20>
 8026bcc:	2300      	movs	r3, #0
 8026bce:	e008      	b.n	8026be2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8026bd0:	687b      	ldr	r3, [r7, #4]
 8026bd2:	895b      	ldrh	r3, [r3, #10]
 8026bd4:	461a      	mov	r2, r3
 8026bd6:	683b      	ldr	r3, [r7, #0]
 8026bd8:	fb03 f202 	mul.w	r2, r3, r2
 8026bdc:	687b      	ldr	r3, [r7, #4]
 8026bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026be0:	4413      	add	r3, r2
}
 8026be2:	4618      	mov	r0, r3
 8026be4:	370c      	adds	r7, #12
 8026be6:	46bd      	mov	sp, r7
 8026be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bec:	4770      	bx	lr

08026bee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8026bee:	b580      	push	{r7, lr}
 8026bf0:	b086      	sub	sp, #24
 8026bf2:	af00      	add	r7, sp, #0
 8026bf4:	6078      	str	r0, [r7, #4]
 8026bf6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8026bf8:	687b      	ldr	r3, [r7, #4]
 8026bfa:	681b      	ldr	r3, [r3, #0]
 8026bfc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8026bfe:	683b      	ldr	r3, [r7, #0]
 8026c00:	2b01      	cmp	r3, #1
 8026c02:	d904      	bls.n	8026c0e <get_fat+0x20>
 8026c04:	693b      	ldr	r3, [r7, #16]
 8026c06:	695b      	ldr	r3, [r3, #20]
 8026c08:	683a      	ldr	r2, [r7, #0]
 8026c0a:	429a      	cmp	r2, r3
 8026c0c:	d302      	bcc.n	8026c14 <get_fat+0x26>
		val = 1;	/* Internal error */
 8026c0e:	2301      	movs	r3, #1
 8026c10:	617b      	str	r3, [r7, #20]
 8026c12:	e08e      	b.n	8026d32 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8026c14:	f04f 33ff 	mov.w	r3, #4294967295
 8026c18:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8026c1a:	693b      	ldr	r3, [r7, #16]
 8026c1c:	781b      	ldrb	r3, [r3, #0]
 8026c1e:	2b03      	cmp	r3, #3
 8026c20:	d061      	beq.n	8026ce6 <get_fat+0xf8>
 8026c22:	2b03      	cmp	r3, #3
 8026c24:	dc7b      	bgt.n	8026d1e <get_fat+0x130>
 8026c26:	2b01      	cmp	r3, #1
 8026c28:	d002      	beq.n	8026c30 <get_fat+0x42>
 8026c2a:	2b02      	cmp	r3, #2
 8026c2c:	d041      	beq.n	8026cb2 <get_fat+0xc4>
 8026c2e:	e076      	b.n	8026d1e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8026c30:	683b      	ldr	r3, [r7, #0]
 8026c32:	60fb      	str	r3, [r7, #12]
 8026c34:	68fb      	ldr	r3, [r7, #12]
 8026c36:	085b      	lsrs	r3, r3, #1
 8026c38:	68fa      	ldr	r2, [r7, #12]
 8026c3a:	4413      	add	r3, r2
 8026c3c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8026c3e:	693b      	ldr	r3, [r7, #16]
 8026c40:	6a1a      	ldr	r2, [r3, #32]
 8026c42:	68fb      	ldr	r3, [r7, #12]
 8026c44:	0a5b      	lsrs	r3, r3, #9
 8026c46:	4413      	add	r3, r2
 8026c48:	4619      	mov	r1, r3
 8026c4a:	6938      	ldr	r0, [r7, #16]
 8026c4c:	f7ff ff14 	bl	8026a78 <move_window>
 8026c50:	4603      	mov	r3, r0
 8026c52:	2b00      	cmp	r3, #0
 8026c54:	d166      	bne.n	8026d24 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8026c56:	68fb      	ldr	r3, [r7, #12]
 8026c58:	1c5a      	adds	r2, r3, #1
 8026c5a:	60fa      	str	r2, [r7, #12]
 8026c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026c60:	693a      	ldr	r2, [r7, #16]
 8026c62:	4413      	add	r3, r2
 8026c64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8026c68:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8026c6a:	693b      	ldr	r3, [r7, #16]
 8026c6c:	6a1a      	ldr	r2, [r3, #32]
 8026c6e:	68fb      	ldr	r3, [r7, #12]
 8026c70:	0a5b      	lsrs	r3, r3, #9
 8026c72:	4413      	add	r3, r2
 8026c74:	4619      	mov	r1, r3
 8026c76:	6938      	ldr	r0, [r7, #16]
 8026c78:	f7ff fefe 	bl	8026a78 <move_window>
 8026c7c:	4603      	mov	r3, r0
 8026c7e:	2b00      	cmp	r3, #0
 8026c80:	d152      	bne.n	8026d28 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8026c82:	68fb      	ldr	r3, [r7, #12]
 8026c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026c88:	693a      	ldr	r2, [r7, #16]
 8026c8a:	4413      	add	r3, r2
 8026c8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8026c90:	021b      	lsls	r3, r3, #8
 8026c92:	68ba      	ldr	r2, [r7, #8]
 8026c94:	4313      	orrs	r3, r2
 8026c96:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8026c98:	683b      	ldr	r3, [r7, #0]
 8026c9a:	f003 0301 	and.w	r3, r3, #1
 8026c9e:	2b00      	cmp	r3, #0
 8026ca0:	d002      	beq.n	8026ca8 <get_fat+0xba>
 8026ca2:	68bb      	ldr	r3, [r7, #8]
 8026ca4:	091b      	lsrs	r3, r3, #4
 8026ca6:	e002      	b.n	8026cae <get_fat+0xc0>
 8026ca8:	68bb      	ldr	r3, [r7, #8]
 8026caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026cae:	617b      	str	r3, [r7, #20]
			break;
 8026cb0:	e03f      	b.n	8026d32 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8026cb2:	693b      	ldr	r3, [r7, #16]
 8026cb4:	6a1a      	ldr	r2, [r3, #32]
 8026cb6:	683b      	ldr	r3, [r7, #0]
 8026cb8:	0a1b      	lsrs	r3, r3, #8
 8026cba:	4413      	add	r3, r2
 8026cbc:	4619      	mov	r1, r3
 8026cbe:	6938      	ldr	r0, [r7, #16]
 8026cc0:	f7ff feda 	bl	8026a78 <move_window>
 8026cc4:	4603      	mov	r3, r0
 8026cc6:	2b00      	cmp	r3, #0
 8026cc8:	d130      	bne.n	8026d2c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8026cca:	693b      	ldr	r3, [r7, #16]
 8026ccc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026cd0:	683b      	ldr	r3, [r7, #0]
 8026cd2:	005b      	lsls	r3, r3, #1
 8026cd4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8026cd8:	4413      	add	r3, r2
 8026cda:	4618      	mov	r0, r3
 8026cdc:	f7ff fc1c 	bl	8026518 <ld_word>
 8026ce0:	4603      	mov	r3, r0
 8026ce2:	617b      	str	r3, [r7, #20]
			break;
 8026ce4:	e025      	b.n	8026d32 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8026ce6:	693b      	ldr	r3, [r7, #16]
 8026ce8:	6a1a      	ldr	r2, [r3, #32]
 8026cea:	683b      	ldr	r3, [r7, #0]
 8026cec:	09db      	lsrs	r3, r3, #7
 8026cee:	4413      	add	r3, r2
 8026cf0:	4619      	mov	r1, r3
 8026cf2:	6938      	ldr	r0, [r7, #16]
 8026cf4:	f7ff fec0 	bl	8026a78 <move_window>
 8026cf8:	4603      	mov	r3, r0
 8026cfa:	2b00      	cmp	r3, #0
 8026cfc:	d118      	bne.n	8026d30 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8026cfe:	693b      	ldr	r3, [r7, #16]
 8026d00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026d04:	683b      	ldr	r3, [r7, #0]
 8026d06:	009b      	lsls	r3, r3, #2
 8026d08:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8026d0c:	4413      	add	r3, r2
 8026d0e:	4618      	mov	r0, r3
 8026d10:	f7ff fc1a 	bl	8026548 <ld_dword>
 8026d14:	4603      	mov	r3, r0
 8026d16:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8026d1a:	617b      	str	r3, [r7, #20]
			break;
 8026d1c:	e009      	b.n	8026d32 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8026d1e:	2301      	movs	r3, #1
 8026d20:	617b      	str	r3, [r7, #20]
 8026d22:	e006      	b.n	8026d32 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8026d24:	bf00      	nop
 8026d26:	e004      	b.n	8026d32 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8026d28:	bf00      	nop
 8026d2a:	e002      	b.n	8026d32 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8026d2c:	bf00      	nop
 8026d2e:	e000      	b.n	8026d32 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8026d30:	bf00      	nop
		}
	}

	return val;
 8026d32:	697b      	ldr	r3, [r7, #20]
}
 8026d34:	4618      	mov	r0, r3
 8026d36:	3718      	adds	r7, #24
 8026d38:	46bd      	mov	sp, r7
 8026d3a:	bd80      	pop	{r7, pc}

08026d3c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8026d3c:	b590      	push	{r4, r7, lr}
 8026d3e:	b089      	sub	sp, #36	@ 0x24
 8026d40:	af00      	add	r7, sp, #0
 8026d42:	60f8      	str	r0, [r7, #12]
 8026d44:	60b9      	str	r1, [r7, #8]
 8026d46:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8026d48:	2302      	movs	r3, #2
 8026d4a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8026d4c:	68bb      	ldr	r3, [r7, #8]
 8026d4e:	2b01      	cmp	r3, #1
 8026d50:	f240 80d9 	bls.w	8026f06 <put_fat+0x1ca>
 8026d54:	68fb      	ldr	r3, [r7, #12]
 8026d56:	695b      	ldr	r3, [r3, #20]
 8026d58:	68ba      	ldr	r2, [r7, #8]
 8026d5a:	429a      	cmp	r2, r3
 8026d5c:	f080 80d3 	bcs.w	8026f06 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8026d60:	68fb      	ldr	r3, [r7, #12]
 8026d62:	781b      	ldrb	r3, [r3, #0]
 8026d64:	2b03      	cmp	r3, #3
 8026d66:	f000 8096 	beq.w	8026e96 <put_fat+0x15a>
 8026d6a:	2b03      	cmp	r3, #3
 8026d6c:	f300 80cb 	bgt.w	8026f06 <put_fat+0x1ca>
 8026d70:	2b01      	cmp	r3, #1
 8026d72:	d002      	beq.n	8026d7a <put_fat+0x3e>
 8026d74:	2b02      	cmp	r3, #2
 8026d76:	d06e      	beq.n	8026e56 <put_fat+0x11a>
 8026d78:	e0c5      	b.n	8026f06 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8026d7a:	68bb      	ldr	r3, [r7, #8]
 8026d7c:	61bb      	str	r3, [r7, #24]
 8026d7e:	69bb      	ldr	r3, [r7, #24]
 8026d80:	085b      	lsrs	r3, r3, #1
 8026d82:	69ba      	ldr	r2, [r7, #24]
 8026d84:	4413      	add	r3, r2
 8026d86:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8026d88:	68fb      	ldr	r3, [r7, #12]
 8026d8a:	6a1a      	ldr	r2, [r3, #32]
 8026d8c:	69bb      	ldr	r3, [r7, #24]
 8026d8e:	0a5b      	lsrs	r3, r3, #9
 8026d90:	4413      	add	r3, r2
 8026d92:	4619      	mov	r1, r3
 8026d94:	68f8      	ldr	r0, [r7, #12]
 8026d96:	f7ff fe6f 	bl	8026a78 <move_window>
 8026d9a:	4603      	mov	r3, r0
 8026d9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8026d9e:	7ffb      	ldrb	r3, [r7, #31]
 8026da0:	2b00      	cmp	r3, #0
 8026da2:	f040 80a9 	bne.w	8026ef8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8026da6:	68fb      	ldr	r3, [r7, #12]
 8026da8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026dac:	69bb      	ldr	r3, [r7, #24]
 8026dae:	1c59      	adds	r1, r3, #1
 8026db0:	61b9      	str	r1, [r7, #24]
 8026db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026db6:	4413      	add	r3, r2
 8026db8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8026dba:	68bb      	ldr	r3, [r7, #8]
 8026dbc:	f003 0301 	and.w	r3, r3, #1
 8026dc0:	2b00      	cmp	r3, #0
 8026dc2:	d00d      	beq.n	8026de0 <put_fat+0xa4>
 8026dc4:	697b      	ldr	r3, [r7, #20]
 8026dc6:	781b      	ldrb	r3, [r3, #0]
 8026dc8:	b25b      	sxtb	r3, r3
 8026dca:	f003 030f 	and.w	r3, r3, #15
 8026dce:	b25a      	sxtb	r2, r3
 8026dd0:	687b      	ldr	r3, [r7, #4]
 8026dd2:	b2db      	uxtb	r3, r3
 8026dd4:	011b      	lsls	r3, r3, #4
 8026dd6:	b25b      	sxtb	r3, r3
 8026dd8:	4313      	orrs	r3, r2
 8026dda:	b25b      	sxtb	r3, r3
 8026ddc:	b2db      	uxtb	r3, r3
 8026dde:	e001      	b.n	8026de4 <put_fat+0xa8>
 8026de0:	687b      	ldr	r3, [r7, #4]
 8026de2:	b2db      	uxtb	r3, r3
 8026de4:	697a      	ldr	r2, [r7, #20]
 8026de6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8026de8:	68fb      	ldr	r3, [r7, #12]
 8026dea:	2201      	movs	r2, #1
 8026dec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8026dee:	68fb      	ldr	r3, [r7, #12]
 8026df0:	6a1a      	ldr	r2, [r3, #32]
 8026df2:	69bb      	ldr	r3, [r7, #24]
 8026df4:	0a5b      	lsrs	r3, r3, #9
 8026df6:	4413      	add	r3, r2
 8026df8:	4619      	mov	r1, r3
 8026dfa:	68f8      	ldr	r0, [r7, #12]
 8026dfc:	f7ff fe3c 	bl	8026a78 <move_window>
 8026e00:	4603      	mov	r3, r0
 8026e02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8026e04:	7ffb      	ldrb	r3, [r7, #31]
 8026e06:	2b00      	cmp	r3, #0
 8026e08:	d178      	bne.n	8026efc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8026e0a:	68fb      	ldr	r3, [r7, #12]
 8026e0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026e10:	69bb      	ldr	r3, [r7, #24]
 8026e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026e16:	4413      	add	r3, r2
 8026e18:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8026e1a:	68bb      	ldr	r3, [r7, #8]
 8026e1c:	f003 0301 	and.w	r3, r3, #1
 8026e20:	2b00      	cmp	r3, #0
 8026e22:	d003      	beq.n	8026e2c <put_fat+0xf0>
 8026e24:	687b      	ldr	r3, [r7, #4]
 8026e26:	091b      	lsrs	r3, r3, #4
 8026e28:	b2db      	uxtb	r3, r3
 8026e2a:	e00e      	b.n	8026e4a <put_fat+0x10e>
 8026e2c:	697b      	ldr	r3, [r7, #20]
 8026e2e:	781b      	ldrb	r3, [r3, #0]
 8026e30:	b25b      	sxtb	r3, r3
 8026e32:	f023 030f 	bic.w	r3, r3, #15
 8026e36:	b25a      	sxtb	r2, r3
 8026e38:	687b      	ldr	r3, [r7, #4]
 8026e3a:	0a1b      	lsrs	r3, r3, #8
 8026e3c:	b25b      	sxtb	r3, r3
 8026e3e:	f003 030f 	and.w	r3, r3, #15
 8026e42:	b25b      	sxtb	r3, r3
 8026e44:	4313      	orrs	r3, r2
 8026e46:	b25b      	sxtb	r3, r3
 8026e48:	b2db      	uxtb	r3, r3
 8026e4a:	697a      	ldr	r2, [r7, #20]
 8026e4c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8026e4e:	68fb      	ldr	r3, [r7, #12]
 8026e50:	2201      	movs	r2, #1
 8026e52:	70da      	strb	r2, [r3, #3]
			break;
 8026e54:	e057      	b.n	8026f06 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8026e56:	68fb      	ldr	r3, [r7, #12]
 8026e58:	6a1a      	ldr	r2, [r3, #32]
 8026e5a:	68bb      	ldr	r3, [r7, #8]
 8026e5c:	0a1b      	lsrs	r3, r3, #8
 8026e5e:	4413      	add	r3, r2
 8026e60:	4619      	mov	r1, r3
 8026e62:	68f8      	ldr	r0, [r7, #12]
 8026e64:	f7ff fe08 	bl	8026a78 <move_window>
 8026e68:	4603      	mov	r3, r0
 8026e6a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8026e6c:	7ffb      	ldrb	r3, [r7, #31]
 8026e6e:	2b00      	cmp	r3, #0
 8026e70:	d146      	bne.n	8026f00 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8026e72:	68fb      	ldr	r3, [r7, #12]
 8026e74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026e78:	68bb      	ldr	r3, [r7, #8]
 8026e7a:	005b      	lsls	r3, r3, #1
 8026e7c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8026e80:	4413      	add	r3, r2
 8026e82:	687a      	ldr	r2, [r7, #4]
 8026e84:	b292      	uxth	r2, r2
 8026e86:	4611      	mov	r1, r2
 8026e88:	4618      	mov	r0, r3
 8026e8a:	f7ff fb80 	bl	802658e <st_word>
			fs->wflag = 1;
 8026e8e:	68fb      	ldr	r3, [r7, #12]
 8026e90:	2201      	movs	r2, #1
 8026e92:	70da      	strb	r2, [r3, #3]
			break;
 8026e94:	e037      	b.n	8026f06 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8026e96:	68fb      	ldr	r3, [r7, #12]
 8026e98:	6a1a      	ldr	r2, [r3, #32]
 8026e9a:	68bb      	ldr	r3, [r7, #8]
 8026e9c:	09db      	lsrs	r3, r3, #7
 8026e9e:	4413      	add	r3, r2
 8026ea0:	4619      	mov	r1, r3
 8026ea2:	68f8      	ldr	r0, [r7, #12]
 8026ea4:	f7ff fde8 	bl	8026a78 <move_window>
 8026ea8:	4603      	mov	r3, r0
 8026eaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8026eac:	7ffb      	ldrb	r3, [r7, #31]
 8026eae:	2b00      	cmp	r3, #0
 8026eb0:	d128      	bne.n	8026f04 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8026eb2:	687b      	ldr	r3, [r7, #4]
 8026eb4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8026eb8:	68fb      	ldr	r3, [r7, #12]
 8026eba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026ebe:	68bb      	ldr	r3, [r7, #8]
 8026ec0:	009b      	lsls	r3, r3, #2
 8026ec2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8026ec6:	4413      	add	r3, r2
 8026ec8:	4618      	mov	r0, r3
 8026eca:	f7ff fb3d 	bl	8026548 <ld_dword>
 8026ece:	4603      	mov	r3, r0
 8026ed0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8026ed4:	4323      	orrs	r3, r4
 8026ed6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8026ed8:	68fb      	ldr	r3, [r7, #12]
 8026eda:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026ede:	68bb      	ldr	r3, [r7, #8]
 8026ee0:	009b      	lsls	r3, r3, #2
 8026ee2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8026ee6:	4413      	add	r3, r2
 8026ee8:	6879      	ldr	r1, [r7, #4]
 8026eea:	4618      	mov	r0, r3
 8026eec:	f7ff fb6a 	bl	80265c4 <st_dword>
			fs->wflag = 1;
 8026ef0:	68fb      	ldr	r3, [r7, #12]
 8026ef2:	2201      	movs	r2, #1
 8026ef4:	70da      	strb	r2, [r3, #3]
			break;
 8026ef6:	e006      	b.n	8026f06 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8026ef8:	bf00      	nop
 8026efa:	e004      	b.n	8026f06 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8026efc:	bf00      	nop
 8026efe:	e002      	b.n	8026f06 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8026f00:	bf00      	nop
 8026f02:	e000      	b.n	8026f06 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8026f04:	bf00      	nop
		}
	}
	return res;
 8026f06:	7ffb      	ldrb	r3, [r7, #31]
}
 8026f08:	4618      	mov	r0, r3
 8026f0a:	3724      	adds	r7, #36	@ 0x24
 8026f0c:	46bd      	mov	sp, r7
 8026f0e:	bd90      	pop	{r4, r7, pc}

08026f10 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8026f10:	b580      	push	{r7, lr}
 8026f12:	b088      	sub	sp, #32
 8026f14:	af00      	add	r7, sp, #0
 8026f16:	60f8      	str	r0, [r7, #12]
 8026f18:	60b9      	str	r1, [r7, #8]
 8026f1a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8026f1c:	2300      	movs	r3, #0
 8026f1e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8026f20:	68fb      	ldr	r3, [r7, #12]
 8026f22:	681b      	ldr	r3, [r3, #0]
 8026f24:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8026f26:	68bb      	ldr	r3, [r7, #8]
 8026f28:	2b01      	cmp	r3, #1
 8026f2a:	d904      	bls.n	8026f36 <remove_chain+0x26>
 8026f2c:	69bb      	ldr	r3, [r7, #24]
 8026f2e:	695b      	ldr	r3, [r3, #20]
 8026f30:	68ba      	ldr	r2, [r7, #8]
 8026f32:	429a      	cmp	r2, r3
 8026f34:	d301      	bcc.n	8026f3a <remove_chain+0x2a>
 8026f36:	2302      	movs	r3, #2
 8026f38:	e04b      	b.n	8026fd2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8026f3a:	687b      	ldr	r3, [r7, #4]
 8026f3c:	2b00      	cmp	r3, #0
 8026f3e:	d00c      	beq.n	8026f5a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8026f40:	f04f 32ff 	mov.w	r2, #4294967295
 8026f44:	6879      	ldr	r1, [r7, #4]
 8026f46:	69b8      	ldr	r0, [r7, #24]
 8026f48:	f7ff fef8 	bl	8026d3c <put_fat>
 8026f4c:	4603      	mov	r3, r0
 8026f4e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8026f50:	7ffb      	ldrb	r3, [r7, #31]
 8026f52:	2b00      	cmp	r3, #0
 8026f54:	d001      	beq.n	8026f5a <remove_chain+0x4a>
 8026f56:	7ffb      	ldrb	r3, [r7, #31]
 8026f58:	e03b      	b.n	8026fd2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8026f5a:	68b9      	ldr	r1, [r7, #8]
 8026f5c:	68f8      	ldr	r0, [r7, #12]
 8026f5e:	f7ff fe46 	bl	8026bee <get_fat>
 8026f62:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8026f64:	697b      	ldr	r3, [r7, #20]
 8026f66:	2b00      	cmp	r3, #0
 8026f68:	d031      	beq.n	8026fce <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8026f6a:	697b      	ldr	r3, [r7, #20]
 8026f6c:	2b01      	cmp	r3, #1
 8026f6e:	d101      	bne.n	8026f74 <remove_chain+0x64>
 8026f70:	2302      	movs	r3, #2
 8026f72:	e02e      	b.n	8026fd2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8026f74:	697b      	ldr	r3, [r7, #20]
 8026f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026f7a:	d101      	bne.n	8026f80 <remove_chain+0x70>
 8026f7c:	2301      	movs	r3, #1
 8026f7e:	e028      	b.n	8026fd2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8026f80:	2200      	movs	r2, #0
 8026f82:	68b9      	ldr	r1, [r7, #8]
 8026f84:	69b8      	ldr	r0, [r7, #24]
 8026f86:	f7ff fed9 	bl	8026d3c <put_fat>
 8026f8a:	4603      	mov	r3, r0
 8026f8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8026f8e:	7ffb      	ldrb	r3, [r7, #31]
 8026f90:	2b00      	cmp	r3, #0
 8026f92:	d001      	beq.n	8026f98 <remove_chain+0x88>
 8026f94:	7ffb      	ldrb	r3, [r7, #31]
 8026f96:	e01c      	b.n	8026fd2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8026f98:	69bb      	ldr	r3, [r7, #24]
 8026f9a:	691a      	ldr	r2, [r3, #16]
 8026f9c:	69bb      	ldr	r3, [r7, #24]
 8026f9e:	695b      	ldr	r3, [r3, #20]
 8026fa0:	3b02      	subs	r3, #2
 8026fa2:	429a      	cmp	r2, r3
 8026fa4:	d20b      	bcs.n	8026fbe <remove_chain+0xae>
			fs->free_clst++;
 8026fa6:	69bb      	ldr	r3, [r7, #24]
 8026fa8:	691b      	ldr	r3, [r3, #16]
 8026faa:	1c5a      	adds	r2, r3, #1
 8026fac:	69bb      	ldr	r3, [r7, #24]
 8026fae:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8026fb0:	69bb      	ldr	r3, [r7, #24]
 8026fb2:	791b      	ldrb	r3, [r3, #4]
 8026fb4:	f043 0301 	orr.w	r3, r3, #1
 8026fb8:	b2da      	uxtb	r2, r3
 8026fba:	69bb      	ldr	r3, [r7, #24]
 8026fbc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8026fbe:	697b      	ldr	r3, [r7, #20]
 8026fc0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8026fc2:	69bb      	ldr	r3, [r7, #24]
 8026fc4:	695b      	ldr	r3, [r3, #20]
 8026fc6:	68ba      	ldr	r2, [r7, #8]
 8026fc8:	429a      	cmp	r2, r3
 8026fca:	d3c6      	bcc.n	8026f5a <remove_chain+0x4a>
 8026fcc:	e000      	b.n	8026fd0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8026fce:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8026fd0:	2300      	movs	r3, #0
}
 8026fd2:	4618      	mov	r0, r3
 8026fd4:	3720      	adds	r7, #32
 8026fd6:	46bd      	mov	sp, r7
 8026fd8:	bd80      	pop	{r7, pc}

08026fda <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8026fda:	b580      	push	{r7, lr}
 8026fdc:	b088      	sub	sp, #32
 8026fde:	af00      	add	r7, sp, #0
 8026fe0:	6078      	str	r0, [r7, #4]
 8026fe2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8026fe4:	687b      	ldr	r3, [r7, #4]
 8026fe6:	681b      	ldr	r3, [r3, #0]
 8026fe8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8026fea:	683b      	ldr	r3, [r7, #0]
 8026fec:	2b00      	cmp	r3, #0
 8026fee:	d10d      	bne.n	802700c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8026ff0:	693b      	ldr	r3, [r7, #16]
 8026ff2:	68db      	ldr	r3, [r3, #12]
 8026ff4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8026ff6:	69bb      	ldr	r3, [r7, #24]
 8026ff8:	2b00      	cmp	r3, #0
 8026ffa:	d004      	beq.n	8027006 <create_chain+0x2c>
 8026ffc:	693b      	ldr	r3, [r7, #16]
 8026ffe:	695b      	ldr	r3, [r3, #20]
 8027000:	69ba      	ldr	r2, [r7, #24]
 8027002:	429a      	cmp	r2, r3
 8027004:	d31b      	bcc.n	802703e <create_chain+0x64>
 8027006:	2301      	movs	r3, #1
 8027008:	61bb      	str	r3, [r7, #24]
 802700a:	e018      	b.n	802703e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 802700c:	6839      	ldr	r1, [r7, #0]
 802700e:	6878      	ldr	r0, [r7, #4]
 8027010:	f7ff fded 	bl	8026bee <get_fat>
 8027014:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8027016:	68fb      	ldr	r3, [r7, #12]
 8027018:	2b01      	cmp	r3, #1
 802701a:	d801      	bhi.n	8027020 <create_chain+0x46>
 802701c:	2301      	movs	r3, #1
 802701e:	e070      	b.n	8027102 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8027020:	68fb      	ldr	r3, [r7, #12]
 8027022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027026:	d101      	bne.n	802702c <create_chain+0x52>
 8027028:	68fb      	ldr	r3, [r7, #12]
 802702a:	e06a      	b.n	8027102 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 802702c:	693b      	ldr	r3, [r7, #16]
 802702e:	695b      	ldr	r3, [r3, #20]
 8027030:	68fa      	ldr	r2, [r7, #12]
 8027032:	429a      	cmp	r2, r3
 8027034:	d201      	bcs.n	802703a <create_chain+0x60>
 8027036:	68fb      	ldr	r3, [r7, #12]
 8027038:	e063      	b.n	8027102 <create_chain+0x128>
		scl = clst;
 802703a:	683b      	ldr	r3, [r7, #0]
 802703c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 802703e:	69bb      	ldr	r3, [r7, #24]
 8027040:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8027042:	69fb      	ldr	r3, [r7, #28]
 8027044:	3301      	adds	r3, #1
 8027046:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8027048:	693b      	ldr	r3, [r7, #16]
 802704a:	695b      	ldr	r3, [r3, #20]
 802704c:	69fa      	ldr	r2, [r7, #28]
 802704e:	429a      	cmp	r2, r3
 8027050:	d307      	bcc.n	8027062 <create_chain+0x88>
				ncl = 2;
 8027052:	2302      	movs	r3, #2
 8027054:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8027056:	69fa      	ldr	r2, [r7, #28]
 8027058:	69bb      	ldr	r3, [r7, #24]
 802705a:	429a      	cmp	r2, r3
 802705c:	d901      	bls.n	8027062 <create_chain+0x88>
 802705e:	2300      	movs	r3, #0
 8027060:	e04f      	b.n	8027102 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8027062:	69f9      	ldr	r1, [r7, #28]
 8027064:	6878      	ldr	r0, [r7, #4]
 8027066:	f7ff fdc2 	bl	8026bee <get_fat>
 802706a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 802706c:	68fb      	ldr	r3, [r7, #12]
 802706e:	2b00      	cmp	r3, #0
 8027070:	d00e      	beq.n	8027090 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8027072:	68fb      	ldr	r3, [r7, #12]
 8027074:	2b01      	cmp	r3, #1
 8027076:	d003      	beq.n	8027080 <create_chain+0xa6>
 8027078:	68fb      	ldr	r3, [r7, #12]
 802707a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802707e:	d101      	bne.n	8027084 <create_chain+0xaa>
 8027080:	68fb      	ldr	r3, [r7, #12]
 8027082:	e03e      	b.n	8027102 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8027084:	69fa      	ldr	r2, [r7, #28]
 8027086:	69bb      	ldr	r3, [r7, #24]
 8027088:	429a      	cmp	r2, r3
 802708a:	d1da      	bne.n	8027042 <create_chain+0x68>
 802708c:	2300      	movs	r3, #0
 802708e:	e038      	b.n	8027102 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8027090:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8027092:	f04f 32ff 	mov.w	r2, #4294967295
 8027096:	69f9      	ldr	r1, [r7, #28]
 8027098:	6938      	ldr	r0, [r7, #16]
 802709a:	f7ff fe4f 	bl	8026d3c <put_fat>
 802709e:	4603      	mov	r3, r0
 80270a0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80270a2:	7dfb      	ldrb	r3, [r7, #23]
 80270a4:	2b00      	cmp	r3, #0
 80270a6:	d109      	bne.n	80270bc <create_chain+0xe2>
 80270a8:	683b      	ldr	r3, [r7, #0]
 80270aa:	2b00      	cmp	r3, #0
 80270ac:	d006      	beq.n	80270bc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80270ae:	69fa      	ldr	r2, [r7, #28]
 80270b0:	6839      	ldr	r1, [r7, #0]
 80270b2:	6938      	ldr	r0, [r7, #16]
 80270b4:	f7ff fe42 	bl	8026d3c <put_fat>
 80270b8:	4603      	mov	r3, r0
 80270ba:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80270bc:	7dfb      	ldrb	r3, [r7, #23]
 80270be:	2b00      	cmp	r3, #0
 80270c0:	d116      	bne.n	80270f0 <create_chain+0x116>
		fs->last_clst = ncl;
 80270c2:	693b      	ldr	r3, [r7, #16]
 80270c4:	69fa      	ldr	r2, [r7, #28]
 80270c6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80270c8:	693b      	ldr	r3, [r7, #16]
 80270ca:	691a      	ldr	r2, [r3, #16]
 80270cc:	693b      	ldr	r3, [r7, #16]
 80270ce:	695b      	ldr	r3, [r3, #20]
 80270d0:	3b02      	subs	r3, #2
 80270d2:	429a      	cmp	r2, r3
 80270d4:	d804      	bhi.n	80270e0 <create_chain+0x106>
 80270d6:	693b      	ldr	r3, [r7, #16]
 80270d8:	691b      	ldr	r3, [r3, #16]
 80270da:	1e5a      	subs	r2, r3, #1
 80270dc:	693b      	ldr	r3, [r7, #16]
 80270de:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80270e0:	693b      	ldr	r3, [r7, #16]
 80270e2:	791b      	ldrb	r3, [r3, #4]
 80270e4:	f043 0301 	orr.w	r3, r3, #1
 80270e8:	b2da      	uxtb	r2, r3
 80270ea:	693b      	ldr	r3, [r7, #16]
 80270ec:	711a      	strb	r2, [r3, #4]
 80270ee:	e007      	b.n	8027100 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80270f0:	7dfb      	ldrb	r3, [r7, #23]
 80270f2:	2b01      	cmp	r3, #1
 80270f4:	d102      	bne.n	80270fc <create_chain+0x122>
 80270f6:	f04f 33ff 	mov.w	r3, #4294967295
 80270fa:	e000      	b.n	80270fe <create_chain+0x124>
 80270fc:	2301      	movs	r3, #1
 80270fe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8027100:	69fb      	ldr	r3, [r7, #28]
}
 8027102:	4618      	mov	r0, r3
 8027104:	3720      	adds	r7, #32
 8027106:	46bd      	mov	sp, r7
 8027108:	bd80      	pop	{r7, pc}

0802710a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 802710a:	b480      	push	{r7}
 802710c:	b087      	sub	sp, #28
 802710e:	af00      	add	r7, sp, #0
 8027110:	6078      	str	r0, [r7, #4]
 8027112:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8027114:	687b      	ldr	r3, [r7, #4]
 8027116:	681b      	ldr	r3, [r3, #0]
 8027118:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 802711a:	687b      	ldr	r3, [r7, #4]
 802711c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802711e:	3304      	adds	r3, #4
 8027120:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8027122:	683b      	ldr	r3, [r7, #0]
 8027124:	0a5b      	lsrs	r3, r3, #9
 8027126:	68fa      	ldr	r2, [r7, #12]
 8027128:	8952      	ldrh	r2, [r2, #10]
 802712a:	fbb3 f3f2 	udiv	r3, r3, r2
 802712e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8027130:	693b      	ldr	r3, [r7, #16]
 8027132:	1d1a      	adds	r2, r3, #4
 8027134:	613a      	str	r2, [r7, #16]
 8027136:	681b      	ldr	r3, [r3, #0]
 8027138:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 802713a:	68bb      	ldr	r3, [r7, #8]
 802713c:	2b00      	cmp	r3, #0
 802713e:	d101      	bne.n	8027144 <clmt_clust+0x3a>
 8027140:	2300      	movs	r3, #0
 8027142:	e010      	b.n	8027166 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8027144:	697a      	ldr	r2, [r7, #20]
 8027146:	68bb      	ldr	r3, [r7, #8]
 8027148:	429a      	cmp	r2, r3
 802714a:	d307      	bcc.n	802715c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 802714c:	697a      	ldr	r2, [r7, #20]
 802714e:	68bb      	ldr	r3, [r7, #8]
 8027150:	1ad3      	subs	r3, r2, r3
 8027152:	617b      	str	r3, [r7, #20]
 8027154:	693b      	ldr	r3, [r7, #16]
 8027156:	3304      	adds	r3, #4
 8027158:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 802715a:	e7e9      	b.n	8027130 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 802715c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 802715e:	693b      	ldr	r3, [r7, #16]
 8027160:	681a      	ldr	r2, [r3, #0]
 8027162:	697b      	ldr	r3, [r7, #20]
 8027164:	4413      	add	r3, r2
}
 8027166:	4618      	mov	r0, r3
 8027168:	371c      	adds	r7, #28
 802716a:	46bd      	mov	sp, r7
 802716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027170:	4770      	bx	lr

08027172 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8027172:	b580      	push	{r7, lr}
 8027174:	b086      	sub	sp, #24
 8027176:	af00      	add	r7, sp, #0
 8027178:	6078      	str	r0, [r7, #4]
 802717a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 802717c:	687b      	ldr	r3, [r7, #4]
 802717e:	681b      	ldr	r3, [r3, #0]
 8027180:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8027182:	683b      	ldr	r3, [r7, #0]
 8027184:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8027188:	d204      	bcs.n	8027194 <dir_sdi+0x22>
 802718a:	683b      	ldr	r3, [r7, #0]
 802718c:	f003 031f 	and.w	r3, r3, #31
 8027190:	2b00      	cmp	r3, #0
 8027192:	d001      	beq.n	8027198 <dir_sdi+0x26>
		return FR_INT_ERR;
 8027194:	2302      	movs	r3, #2
 8027196:	e063      	b.n	8027260 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8027198:	687b      	ldr	r3, [r7, #4]
 802719a:	683a      	ldr	r2, [r7, #0]
 802719c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 802719e:	687b      	ldr	r3, [r7, #4]
 80271a0:	689b      	ldr	r3, [r3, #8]
 80271a2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80271a4:	697b      	ldr	r3, [r7, #20]
 80271a6:	2b00      	cmp	r3, #0
 80271a8:	d106      	bne.n	80271b8 <dir_sdi+0x46>
 80271aa:	693b      	ldr	r3, [r7, #16]
 80271ac:	781b      	ldrb	r3, [r3, #0]
 80271ae:	2b02      	cmp	r3, #2
 80271b0:	d902      	bls.n	80271b8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80271b2:	693b      	ldr	r3, [r7, #16]
 80271b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80271b6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80271b8:	697b      	ldr	r3, [r7, #20]
 80271ba:	2b00      	cmp	r3, #0
 80271bc:	d10c      	bne.n	80271d8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80271be:	683b      	ldr	r3, [r7, #0]
 80271c0:	095b      	lsrs	r3, r3, #5
 80271c2:	693a      	ldr	r2, [r7, #16]
 80271c4:	8912      	ldrh	r2, [r2, #8]
 80271c6:	4293      	cmp	r3, r2
 80271c8:	d301      	bcc.n	80271ce <dir_sdi+0x5c>
 80271ca:	2302      	movs	r3, #2
 80271cc:	e048      	b.n	8027260 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80271ce:	693b      	ldr	r3, [r7, #16]
 80271d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80271d2:	687b      	ldr	r3, [r7, #4]
 80271d4:	61da      	str	r2, [r3, #28]
 80271d6:	e029      	b.n	802722c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80271d8:	693b      	ldr	r3, [r7, #16]
 80271da:	895b      	ldrh	r3, [r3, #10]
 80271dc:	025b      	lsls	r3, r3, #9
 80271de:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80271e0:	e019      	b.n	8027216 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80271e2:	687b      	ldr	r3, [r7, #4]
 80271e4:	6979      	ldr	r1, [r7, #20]
 80271e6:	4618      	mov	r0, r3
 80271e8:	f7ff fd01 	bl	8026bee <get_fat>
 80271ec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80271ee:	697b      	ldr	r3, [r7, #20]
 80271f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80271f4:	d101      	bne.n	80271fa <dir_sdi+0x88>
 80271f6:	2301      	movs	r3, #1
 80271f8:	e032      	b.n	8027260 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80271fa:	697b      	ldr	r3, [r7, #20]
 80271fc:	2b01      	cmp	r3, #1
 80271fe:	d904      	bls.n	802720a <dir_sdi+0x98>
 8027200:	693b      	ldr	r3, [r7, #16]
 8027202:	695b      	ldr	r3, [r3, #20]
 8027204:	697a      	ldr	r2, [r7, #20]
 8027206:	429a      	cmp	r2, r3
 8027208:	d301      	bcc.n	802720e <dir_sdi+0x9c>
 802720a:	2302      	movs	r3, #2
 802720c:	e028      	b.n	8027260 <dir_sdi+0xee>
			ofs -= csz;
 802720e:	683a      	ldr	r2, [r7, #0]
 8027210:	68fb      	ldr	r3, [r7, #12]
 8027212:	1ad3      	subs	r3, r2, r3
 8027214:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8027216:	683a      	ldr	r2, [r7, #0]
 8027218:	68fb      	ldr	r3, [r7, #12]
 802721a:	429a      	cmp	r2, r3
 802721c:	d2e1      	bcs.n	80271e2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 802721e:	6979      	ldr	r1, [r7, #20]
 8027220:	6938      	ldr	r0, [r7, #16]
 8027222:	f7ff fcc5 	bl	8026bb0 <clust2sect>
 8027226:	4602      	mov	r2, r0
 8027228:	687b      	ldr	r3, [r7, #4]
 802722a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 802722c:	687b      	ldr	r3, [r7, #4]
 802722e:	697a      	ldr	r2, [r7, #20]
 8027230:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8027232:	687b      	ldr	r3, [r7, #4]
 8027234:	69db      	ldr	r3, [r3, #28]
 8027236:	2b00      	cmp	r3, #0
 8027238:	d101      	bne.n	802723e <dir_sdi+0xcc>
 802723a:	2302      	movs	r3, #2
 802723c:	e010      	b.n	8027260 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 802723e:	687b      	ldr	r3, [r7, #4]
 8027240:	69da      	ldr	r2, [r3, #28]
 8027242:	683b      	ldr	r3, [r7, #0]
 8027244:	0a5b      	lsrs	r3, r3, #9
 8027246:	441a      	add	r2, r3
 8027248:	687b      	ldr	r3, [r7, #4]
 802724a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 802724c:	693b      	ldr	r3, [r7, #16]
 802724e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8027252:	683b      	ldr	r3, [r7, #0]
 8027254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8027258:	441a      	add	r2, r3
 802725a:	687b      	ldr	r3, [r7, #4]
 802725c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 802725e:	2300      	movs	r3, #0
}
 8027260:	4618      	mov	r0, r3
 8027262:	3718      	adds	r7, #24
 8027264:	46bd      	mov	sp, r7
 8027266:	bd80      	pop	{r7, pc}

08027268 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8027268:	b580      	push	{r7, lr}
 802726a:	b086      	sub	sp, #24
 802726c:	af00      	add	r7, sp, #0
 802726e:	6078      	str	r0, [r7, #4]
 8027270:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8027272:	687b      	ldr	r3, [r7, #4]
 8027274:	681b      	ldr	r3, [r3, #0]
 8027276:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8027278:	687b      	ldr	r3, [r7, #4]
 802727a:	695b      	ldr	r3, [r3, #20]
 802727c:	3320      	adds	r3, #32
 802727e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8027280:	687b      	ldr	r3, [r7, #4]
 8027282:	69db      	ldr	r3, [r3, #28]
 8027284:	2b00      	cmp	r3, #0
 8027286:	d003      	beq.n	8027290 <dir_next+0x28>
 8027288:	68bb      	ldr	r3, [r7, #8]
 802728a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 802728e:	d301      	bcc.n	8027294 <dir_next+0x2c>
 8027290:	2304      	movs	r3, #4
 8027292:	e0aa      	b.n	80273ea <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8027294:	68bb      	ldr	r3, [r7, #8]
 8027296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802729a:	2b00      	cmp	r3, #0
 802729c:	f040 8098 	bne.w	80273d0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80272a0:	687b      	ldr	r3, [r7, #4]
 80272a2:	69db      	ldr	r3, [r3, #28]
 80272a4:	1c5a      	adds	r2, r3, #1
 80272a6:	687b      	ldr	r3, [r7, #4]
 80272a8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80272aa:	687b      	ldr	r3, [r7, #4]
 80272ac:	699b      	ldr	r3, [r3, #24]
 80272ae:	2b00      	cmp	r3, #0
 80272b0:	d10b      	bne.n	80272ca <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80272b2:	68bb      	ldr	r3, [r7, #8]
 80272b4:	095b      	lsrs	r3, r3, #5
 80272b6:	68fa      	ldr	r2, [r7, #12]
 80272b8:	8912      	ldrh	r2, [r2, #8]
 80272ba:	4293      	cmp	r3, r2
 80272bc:	f0c0 8088 	bcc.w	80273d0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80272c0:	687b      	ldr	r3, [r7, #4]
 80272c2:	2200      	movs	r2, #0
 80272c4:	61da      	str	r2, [r3, #28]
 80272c6:	2304      	movs	r3, #4
 80272c8:	e08f      	b.n	80273ea <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80272ca:	68bb      	ldr	r3, [r7, #8]
 80272cc:	0a5b      	lsrs	r3, r3, #9
 80272ce:	68fa      	ldr	r2, [r7, #12]
 80272d0:	8952      	ldrh	r2, [r2, #10]
 80272d2:	3a01      	subs	r2, #1
 80272d4:	4013      	ands	r3, r2
 80272d6:	2b00      	cmp	r3, #0
 80272d8:	d17a      	bne.n	80273d0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80272da:	687a      	ldr	r2, [r7, #4]
 80272dc:	687b      	ldr	r3, [r7, #4]
 80272de:	699b      	ldr	r3, [r3, #24]
 80272e0:	4619      	mov	r1, r3
 80272e2:	4610      	mov	r0, r2
 80272e4:	f7ff fc83 	bl	8026bee <get_fat>
 80272e8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80272ea:	697b      	ldr	r3, [r7, #20]
 80272ec:	2b01      	cmp	r3, #1
 80272ee:	d801      	bhi.n	80272f4 <dir_next+0x8c>
 80272f0:	2302      	movs	r3, #2
 80272f2:	e07a      	b.n	80273ea <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80272f4:	697b      	ldr	r3, [r7, #20]
 80272f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80272fa:	d101      	bne.n	8027300 <dir_next+0x98>
 80272fc:	2301      	movs	r3, #1
 80272fe:	e074      	b.n	80273ea <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8027300:	68fb      	ldr	r3, [r7, #12]
 8027302:	695b      	ldr	r3, [r3, #20]
 8027304:	697a      	ldr	r2, [r7, #20]
 8027306:	429a      	cmp	r2, r3
 8027308:	d358      	bcc.n	80273bc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 802730a:	683b      	ldr	r3, [r7, #0]
 802730c:	2b00      	cmp	r3, #0
 802730e:	d104      	bne.n	802731a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8027310:	687b      	ldr	r3, [r7, #4]
 8027312:	2200      	movs	r2, #0
 8027314:	61da      	str	r2, [r3, #28]
 8027316:	2304      	movs	r3, #4
 8027318:	e067      	b.n	80273ea <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 802731a:	687a      	ldr	r2, [r7, #4]
 802731c:	687b      	ldr	r3, [r7, #4]
 802731e:	699b      	ldr	r3, [r3, #24]
 8027320:	4619      	mov	r1, r3
 8027322:	4610      	mov	r0, r2
 8027324:	f7ff fe59 	bl	8026fda <create_chain>
 8027328:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 802732a:	697b      	ldr	r3, [r7, #20]
 802732c:	2b00      	cmp	r3, #0
 802732e:	d101      	bne.n	8027334 <dir_next+0xcc>
 8027330:	2307      	movs	r3, #7
 8027332:	e05a      	b.n	80273ea <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8027334:	697b      	ldr	r3, [r7, #20]
 8027336:	2b01      	cmp	r3, #1
 8027338:	d101      	bne.n	802733e <dir_next+0xd6>
 802733a:	2302      	movs	r3, #2
 802733c:	e055      	b.n	80273ea <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 802733e:	697b      	ldr	r3, [r7, #20]
 8027340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027344:	d101      	bne.n	802734a <dir_next+0xe2>
 8027346:	2301      	movs	r3, #1
 8027348:	e04f      	b.n	80273ea <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 802734a:	68f8      	ldr	r0, [r7, #12]
 802734c:	f7ff fb50 	bl	80269f0 <sync_window>
 8027350:	4603      	mov	r3, r0
 8027352:	2b00      	cmp	r3, #0
 8027354:	d001      	beq.n	802735a <dir_next+0xf2>
 8027356:	2301      	movs	r3, #1
 8027358:	e047      	b.n	80273ea <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 802735a:	68fb      	ldr	r3, [r7, #12]
 802735c:	3330      	adds	r3, #48	@ 0x30
 802735e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8027362:	2100      	movs	r1, #0
 8027364:	4618      	mov	r0, r3
 8027366:	f7ff f97a 	bl	802665e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 802736a:	2300      	movs	r3, #0
 802736c:	613b      	str	r3, [r7, #16]
 802736e:	6979      	ldr	r1, [r7, #20]
 8027370:	68f8      	ldr	r0, [r7, #12]
 8027372:	f7ff fc1d 	bl	8026bb0 <clust2sect>
 8027376:	4602      	mov	r2, r0
 8027378:	68fb      	ldr	r3, [r7, #12]
 802737a:	62da      	str	r2, [r3, #44]	@ 0x2c
 802737c:	e012      	b.n	80273a4 <dir_next+0x13c>
						fs->wflag = 1;
 802737e:	68fb      	ldr	r3, [r7, #12]
 8027380:	2201      	movs	r2, #1
 8027382:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8027384:	68f8      	ldr	r0, [r7, #12]
 8027386:	f7ff fb33 	bl	80269f0 <sync_window>
 802738a:	4603      	mov	r3, r0
 802738c:	2b00      	cmp	r3, #0
 802738e:	d001      	beq.n	8027394 <dir_next+0x12c>
 8027390:	2301      	movs	r3, #1
 8027392:	e02a      	b.n	80273ea <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8027394:	693b      	ldr	r3, [r7, #16]
 8027396:	3301      	adds	r3, #1
 8027398:	613b      	str	r3, [r7, #16]
 802739a:	68fb      	ldr	r3, [r7, #12]
 802739c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802739e:	1c5a      	adds	r2, r3, #1
 80273a0:	68fb      	ldr	r3, [r7, #12]
 80273a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80273a4:	68fb      	ldr	r3, [r7, #12]
 80273a6:	895b      	ldrh	r3, [r3, #10]
 80273a8:	461a      	mov	r2, r3
 80273aa:	693b      	ldr	r3, [r7, #16]
 80273ac:	4293      	cmp	r3, r2
 80273ae:	d3e6      	bcc.n	802737e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80273b0:	68fb      	ldr	r3, [r7, #12]
 80273b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80273b4:	693b      	ldr	r3, [r7, #16]
 80273b6:	1ad2      	subs	r2, r2, r3
 80273b8:	68fb      	ldr	r3, [r7, #12]
 80273ba:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80273bc:	687b      	ldr	r3, [r7, #4]
 80273be:	697a      	ldr	r2, [r7, #20]
 80273c0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80273c2:	6979      	ldr	r1, [r7, #20]
 80273c4:	68f8      	ldr	r0, [r7, #12]
 80273c6:	f7ff fbf3 	bl	8026bb0 <clust2sect>
 80273ca:	4602      	mov	r2, r0
 80273cc:	687b      	ldr	r3, [r7, #4]
 80273ce:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80273d0:	687b      	ldr	r3, [r7, #4]
 80273d2:	68ba      	ldr	r2, [r7, #8]
 80273d4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80273d6:	68fb      	ldr	r3, [r7, #12]
 80273d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80273dc:	68bb      	ldr	r3, [r7, #8]
 80273de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80273e2:	441a      	add	r2, r3
 80273e4:	687b      	ldr	r3, [r7, #4]
 80273e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80273e8:	2300      	movs	r3, #0
}
 80273ea:	4618      	mov	r0, r3
 80273ec:	3718      	adds	r7, #24
 80273ee:	46bd      	mov	sp, r7
 80273f0:	bd80      	pop	{r7, pc}

080273f2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80273f2:	b580      	push	{r7, lr}
 80273f4:	b086      	sub	sp, #24
 80273f6:	af00      	add	r7, sp, #0
 80273f8:	6078      	str	r0, [r7, #4]
 80273fa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80273fc:	687b      	ldr	r3, [r7, #4]
 80273fe:	681b      	ldr	r3, [r3, #0]
 8027400:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8027402:	2100      	movs	r1, #0
 8027404:	6878      	ldr	r0, [r7, #4]
 8027406:	f7ff feb4 	bl	8027172 <dir_sdi>
 802740a:	4603      	mov	r3, r0
 802740c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 802740e:	7dfb      	ldrb	r3, [r7, #23]
 8027410:	2b00      	cmp	r3, #0
 8027412:	d12b      	bne.n	802746c <dir_alloc+0x7a>
		n = 0;
 8027414:	2300      	movs	r3, #0
 8027416:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8027418:	687b      	ldr	r3, [r7, #4]
 802741a:	69db      	ldr	r3, [r3, #28]
 802741c:	4619      	mov	r1, r3
 802741e:	68f8      	ldr	r0, [r7, #12]
 8027420:	f7ff fb2a 	bl	8026a78 <move_window>
 8027424:	4603      	mov	r3, r0
 8027426:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8027428:	7dfb      	ldrb	r3, [r7, #23]
 802742a:	2b00      	cmp	r3, #0
 802742c:	d11d      	bne.n	802746a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 802742e:	687b      	ldr	r3, [r7, #4]
 8027430:	6a1b      	ldr	r3, [r3, #32]
 8027432:	781b      	ldrb	r3, [r3, #0]
 8027434:	2be5      	cmp	r3, #229	@ 0xe5
 8027436:	d004      	beq.n	8027442 <dir_alloc+0x50>
 8027438:	687b      	ldr	r3, [r7, #4]
 802743a:	6a1b      	ldr	r3, [r3, #32]
 802743c:	781b      	ldrb	r3, [r3, #0]
 802743e:	2b00      	cmp	r3, #0
 8027440:	d107      	bne.n	8027452 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8027442:	693b      	ldr	r3, [r7, #16]
 8027444:	3301      	adds	r3, #1
 8027446:	613b      	str	r3, [r7, #16]
 8027448:	693a      	ldr	r2, [r7, #16]
 802744a:	683b      	ldr	r3, [r7, #0]
 802744c:	429a      	cmp	r2, r3
 802744e:	d102      	bne.n	8027456 <dir_alloc+0x64>
 8027450:	e00c      	b.n	802746c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8027452:	2300      	movs	r3, #0
 8027454:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8027456:	2101      	movs	r1, #1
 8027458:	6878      	ldr	r0, [r7, #4]
 802745a:	f7ff ff05 	bl	8027268 <dir_next>
 802745e:	4603      	mov	r3, r0
 8027460:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8027462:	7dfb      	ldrb	r3, [r7, #23]
 8027464:	2b00      	cmp	r3, #0
 8027466:	d0d7      	beq.n	8027418 <dir_alloc+0x26>
 8027468:	e000      	b.n	802746c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 802746a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 802746c:	7dfb      	ldrb	r3, [r7, #23]
 802746e:	2b04      	cmp	r3, #4
 8027470:	d101      	bne.n	8027476 <dir_alloc+0x84>
 8027472:	2307      	movs	r3, #7
 8027474:	75fb      	strb	r3, [r7, #23]
	return res;
 8027476:	7dfb      	ldrb	r3, [r7, #23]
}
 8027478:	4618      	mov	r0, r3
 802747a:	3718      	adds	r7, #24
 802747c:	46bd      	mov	sp, r7
 802747e:	bd80      	pop	{r7, pc}

08027480 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8027480:	b580      	push	{r7, lr}
 8027482:	b084      	sub	sp, #16
 8027484:	af00      	add	r7, sp, #0
 8027486:	6078      	str	r0, [r7, #4]
 8027488:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 802748a:	683b      	ldr	r3, [r7, #0]
 802748c:	331a      	adds	r3, #26
 802748e:	4618      	mov	r0, r3
 8027490:	f7ff f842 	bl	8026518 <ld_word>
 8027494:	4603      	mov	r3, r0
 8027496:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8027498:	687b      	ldr	r3, [r7, #4]
 802749a:	781b      	ldrb	r3, [r3, #0]
 802749c:	2b03      	cmp	r3, #3
 802749e:	d109      	bne.n	80274b4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80274a0:	683b      	ldr	r3, [r7, #0]
 80274a2:	3314      	adds	r3, #20
 80274a4:	4618      	mov	r0, r3
 80274a6:	f7ff f837 	bl	8026518 <ld_word>
 80274aa:	4603      	mov	r3, r0
 80274ac:	041b      	lsls	r3, r3, #16
 80274ae:	68fa      	ldr	r2, [r7, #12]
 80274b0:	4313      	orrs	r3, r2
 80274b2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80274b4:	68fb      	ldr	r3, [r7, #12]
}
 80274b6:	4618      	mov	r0, r3
 80274b8:	3710      	adds	r7, #16
 80274ba:	46bd      	mov	sp, r7
 80274bc:	bd80      	pop	{r7, pc}

080274be <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80274be:	b580      	push	{r7, lr}
 80274c0:	b084      	sub	sp, #16
 80274c2:	af00      	add	r7, sp, #0
 80274c4:	60f8      	str	r0, [r7, #12]
 80274c6:	60b9      	str	r1, [r7, #8]
 80274c8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80274ca:	68bb      	ldr	r3, [r7, #8]
 80274cc:	331a      	adds	r3, #26
 80274ce:	687a      	ldr	r2, [r7, #4]
 80274d0:	b292      	uxth	r2, r2
 80274d2:	4611      	mov	r1, r2
 80274d4:	4618      	mov	r0, r3
 80274d6:	f7ff f85a 	bl	802658e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80274da:	68fb      	ldr	r3, [r7, #12]
 80274dc:	781b      	ldrb	r3, [r3, #0]
 80274de:	2b03      	cmp	r3, #3
 80274e0:	d109      	bne.n	80274f6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80274e2:	68bb      	ldr	r3, [r7, #8]
 80274e4:	f103 0214 	add.w	r2, r3, #20
 80274e8:	687b      	ldr	r3, [r7, #4]
 80274ea:	0c1b      	lsrs	r3, r3, #16
 80274ec:	b29b      	uxth	r3, r3
 80274ee:	4619      	mov	r1, r3
 80274f0:	4610      	mov	r0, r2
 80274f2:	f7ff f84c 	bl	802658e <st_word>
	}
}
 80274f6:	bf00      	nop
 80274f8:	3710      	adds	r7, #16
 80274fa:	46bd      	mov	sp, r7
 80274fc:	bd80      	pop	{r7, pc}

080274fe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80274fe:	b580      	push	{r7, lr}
 8027500:	b086      	sub	sp, #24
 8027502:	af00      	add	r7, sp, #0
 8027504:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8027506:	687b      	ldr	r3, [r7, #4]
 8027508:	681b      	ldr	r3, [r3, #0]
 802750a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 802750c:	2100      	movs	r1, #0
 802750e:	6878      	ldr	r0, [r7, #4]
 8027510:	f7ff fe2f 	bl	8027172 <dir_sdi>
 8027514:	4603      	mov	r3, r0
 8027516:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8027518:	7dfb      	ldrb	r3, [r7, #23]
 802751a:	2b00      	cmp	r3, #0
 802751c:	d001      	beq.n	8027522 <dir_find+0x24>
 802751e:	7dfb      	ldrb	r3, [r7, #23]
 8027520:	e03e      	b.n	80275a0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8027522:	687b      	ldr	r3, [r7, #4]
 8027524:	69db      	ldr	r3, [r3, #28]
 8027526:	4619      	mov	r1, r3
 8027528:	6938      	ldr	r0, [r7, #16]
 802752a:	f7ff faa5 	bl	8026a78 <move_window>
 802752e:	4603      	mov	r3, r0
 8027530:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8027532:	7dfb      	ldrb	r3, [r7, #23]
 8027534:	2b00      	cmp	r3, #0
 8027536:	d12f      	bne.n	8027598 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8027538:	687b      	ldr	r3, [r7, #4]
 802753a:	6a1b      	ldr	r3, [r3, #32]
 802753c:	781b      	ldrb	r3, [r3, #0]
 802753e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8027540:	7bfb      	ldrb	r3, [r7, #15]
 8027542:	2b00      	cmp	r3, #0
 8027544:	d102      	bne.n	802754c <dir_find+0x4e>
 8027546:	2304      	movs	r3, #4
 8027548:	75fb      	strb	r3, [r7, #23]
 802754a:	e028      	b.n	802759e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 802754c:	687b      	ldr	r3, [r7, #4]
 802754e:	6a1b      	ldr	r3, [r3, #32]
 8027550:	330b      	adds	r3, #11
 8027552:	781b      	ldrb	r3, [r3, #0]
 8027554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8027558:	b2da      	uxtb	r2, r3
 802755a:	687b      	ldr	r3, [r7, #4]
 802755c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 802755e:	687b      	ldr	r3, [r7, #4]
 8027560:	6a1b      	ldr	r3, [r3, #32]
 8027562:	330b      	adds	r3, #11
 8027564:	781b      	ldrb	r3, [r3, #0]
 8027566:	f003 0308 	and.w	r3, r3, #8
 802756a:	2b00      	cmp	r3, #0
 802756c:	d10a      	bne.n	8027584 <dir_find+0x86>
 802756e:	687b      	ldr	r3, [r7, #4]
 8027570:	6a18      	ldr	r0, [r3, #32]
 8027572:	687b      	ldr	r3, [r7, #4]
 8027574:	3324      	adds	r3, #36	@ 0x24
 8027576:	220b      	movs	r2, #11
 8027578:	4619      	mov	r1, r3
 802757a:	f7ff f88b 	bl	8026694 <mem_cmp>
 802757e:	4603      	mov	r3, r0
 8027580:	2b00      	cmp	r3, #0
 8027582:	d00b      	beq.n	802759c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8027584:	2100      	movs	r1, #0
 8027586:	6878      	ldr	r0, [r7, #4]
 8027588:	f7ff fe6e 	bl	8027268 <dir_next>
 802758c:	4603      	mov	r3, r0
 802758e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8027590:	7dfb      	ldrb	r3, [r7, #23]
 8027592:	2b00      	cmp	r3, #0
 8027594:	d0c5      	beq.n	8027522 <dir_find+0x24>
 8027596:	e002      	b.n	802759e <dir_find+0xa0>
		if (res != FR_OK) break;
 8027598:	bf00      	nop
 802759a:	e000      	b.n	802759e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 802759c:	bf00      	nop

	return res;
 802759e:	7dfb      	ldrb	r3, [r7, #23]
}
 80275a0:	4618      	mov	r0, r3
 80275a2:	3718      	adds	r7, #24
 80275a4:	46bd      	mov	sp, r7
 80275a6:	bd80      	pop	{r7, pc}

080275a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80275a8:	b580      	push	{r7, lr}
 80275aa:	b084      	sub	sp, #16
 80275ac:	af00      	add	r7, sp, #0
 80275ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80275b0:	687b      	ldr	r3, [r7, #4]
 80275b2:	681b      	ldr	r3, [r3, #0]
 80275b4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80275b6:	2101      	movs	r1, #1
 80275b8:	6878      	ldr	r0, [r7, #4]
 80275ba:	f7ff ff1a 	bl	80273f2 <dir_alloc>
 80275be:	4603      	mov	r3, r0
 80275c0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80275c2:	7bfb      	ldrb	r3, [r7, #15]
 80275c4:	2b00      	cmp	r3, #0
 80275c6:	d11c      	bne.n	8027602 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80275c8:	687b      	ldr	r3, [r7, #4]
 80275ca:	69db      	ldr	r3, [r3, #28]
 80275cc:	4619      	mov	r1, r3
 80275ce:	68b8      	ldr	r0, [r7, #8]
 80275d0:	f7ff fa52 	bl	8026a78 <move_window>
 80275d4:	4603      	mov	r3, r0
 80275d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80275d8:	7bfb      	ldrb	r3, [r7, #15]
 80275da:	2b00      	cmp	r3, #0
 80275dc:	d111      	bne.n	8027602 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80275de:	687b      	ldr	r3, [r7, #4]
 80275e0:	6a1b      	ldr	r3, [r3, #32]
 80275e2:	2220      	movs	r2, #32
 80275e4:	2100      	movs	r1, #0
 80275e6:	4618      	mov	r0, r3
 80275e8:	f7ff f839 	bl	802665e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80275ec:	687b      	ldr	r3, [r7, #4]
 80275ee:	6a18      	ldr	r0, [r3, #32]
 80275f0:	687b      	ldr	r3, [r7, #4]
 80275f2:	3324      	adds	r3, #36	@ 0x24
 80275f4:	220b      	movs	r2, #11
 80275f6:	4619      	mov	r1, r3
 80275f8:	f7ff f810 	bl	802661c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80275fc:	68bb      	ldr	r3, [r7, #8]
 80275fe:	2201      	movs	r2, #1
 8027600:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8027602:	7bfb      	ldrb	r3, [r7, #15]
}
 8027604:	4618      	mov	r0, r3
 8027606:	3710      	adds	r7, #16
 8027608:	46bd      	mov	sp, r7
 802760a:	bd80      	pop	{r7, pc}

0802760c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 802760c:	b580      	push	{r7, lr}
 802760e:	b088      	sub	sp, #32
 8027610:	af00      	add	r7, sp, #0
 8027612:	6078      	str	r0, [r7, #4]
 8027614:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8027616:	683b      	ldr	r3, [r7, #0]
 8027618:	681b      	ldr	r3, [r3, #0]
 802761a:	60fb      	str	r3, [r7, #12]
 802761c:	687b      	ldr	r3, [r7, #4]
 802761e:	3324      	adds	r3, #36	@ 0x24
 8027620:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8027622:	220b      	movs	r2, #11
 8027624:	2120      	movs	r1, #32
 8027626:	68b8      	ldr	r0, [r7, #8]
 8027628:	f7ff f819 	bl	802665e <mem_set>
	si = i = 0; ni = 8;
 802762c:	2300      	movs	r3, #0
 802762e:	613b      	str	r3, [r7, #16]
 8027630:	693b      	ldr	r3, [r7, #16]
 8027632:	61fb      	str	r3, [r7, #28]
 8027634:	2308      	movs	r3, #8
 8027636:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8027638:	69fb      	ldr	r3, [r7, #28]
 802763a:	1c5a      	adds	r2, r3, #1
 802763c:	61fa      	str	r2, [r7, #28]
 802763e:	68fa      	ldr	r2, [r7, #12]
 8027640:	4413      	add	r3, r2
 8027642:	781b      	ldrb	r3, [r3, #0]
 8027644:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8027646:	7efb      	ldrb	r3, [r7, #27]
 8027648:	2b20      	cmp	r3, #32
 802764a:	d94e      	bls.n	80276ea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 802764c:	7efb      	ldrb	r3, [r7, #27]
 802764e:	2b2f      	cmp	r3, #47	@ 0x2f
 8027650:	d006      	beq.n	8027660 <create_name+0x54>
 8027652:	7efb      	ldrb	r3, [r7, #27]
 8027654:	2b5c      	cmp	r3, #92	@ 0x5c
 8027656:	d110      	bne.n	802767a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8027658:	e002      	b.n	8027660 <create_name+0x54>
 802765a:	69fb      	ldr	r3, [r7, #28]
 802765c:	3301      	adds	r3, #1
 802765e:	61fb      	str	r3, [r7, #28]
 8027660:	68fa      	ldr	r2, [r7, #12]
 8027662:	69fb      	ldr	r3, [r7, #28]
 8027664:	4413      	add	r3, r2
 8027666:	781b      	ldrb	r3, [r3, #0]
 8027668:	2b2f      	cmp	r3, #47	@ 0x2f
 802766a:	d0f6      	beq.n	802765a <create_name+0x4e>
 802766c:	68fa      	ldr	r2, [r7, #12]
 802766e:	69fb      	ldr	r3, [r7, #28]
 8027670:	4413      	add	r3, r2
 8027672:	781b      	ldrb	r3, [r3, #0]
 8027674:	2b5c      	cmp	r3, #92	@ 0x5c
 8027676:	d0f0      	beq.n	802765a <create_name+0x4e>
			break;
 8027678:	e038      	b.n	80276ec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 802767a:	7efb      	ldrb	r3, [r7, #27]
 802767c:	2b2e      	cmp	r3, #46	@ 0x2e
 802767e:	d003      	beq.n	8027688 <create_name+0x7c>
 8027680:	693a      	ldr	r2, [r7, #16]
 8027682:	697b      	ldr	r3, [r7, #20]
 8027684:	429a      	cmp	r2, r3
 8027686:	d30c      	bcc.n	80276a2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8027688:	697b      	ldr	r3, [r7, #20]
 802768a:	2b0b      	cmp	r3, #11
 802768c:	d002      	beq.n	8027694 <create_name+0x88>
 802768e:	7efb      	ldrb	r3, [r7, #27]
 8027690:	2b2e      	cmp	r3, #46	@ 0x2e
 8027692:	d001      	beq.n	8027698 <create_name+0x8c>
 8027694:	2306      	movs	r3, #6
 8027696:	e044      	b.n	8027722 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8027698:	2308      	movs	r3, #8
 802769a:	613b      	str	r3, [r7, #16]
 802769c:	230b      	movs	r3, #11
 802769e:	617b      	str	r3, [r7, #20]
			continue;
 80276a0:	e022      	b.n	80276e8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80276a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80276a6:	2b00      	cmp	r3, #0
 80276a8:	da04      	bge.n	80276b4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80276aa:	7efb      	ldrb	r3, [r7, #27]
 80276ac:	3b80      	subs	r3, #128	@ 0x80
 80276ae:	4a1f      	ldr	r2, [pc, #124]	@ (802772c <create_name+0x120>)
 80276b0:	5cd3      	ldrb	r3, [r2, r3]
 80276b2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80276b4:	7efb      	ldrb	r3, [r7, #27]
 80276b6:	4619      	mov	r1, r3
 80276b8:	481d      	ldr	r0, [pc, #116]	@ (8027730 <create_name+0x124>)
 80276ba:	f7ff f812 	bl	80266e2 <chk_chr>
 80276be:	4603      	mov	r3, r0
 80276c0:	2b00      	cmp	r3, #0
 80276c2:	d001      	beq.n	80276c8 <create_name+0xbc>
 80276c4:	2306      	movs	r3, #6
 80276c6:	e02c      	b.n	8027722 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80276c8:	7efb      	ldrb	r3, [r7, #27]
 80276ca:	2b60      	cmp	r3, #96	@ 0x60
 80276cc:	d905      	bls.n	80276da <create_name+0xce>
 80276ce:	7efb      	ldrb	r3, [r7, #27]
 80276d0:	2b7a      	cmp	r3, #122	@ 0x7a
 80276d2:	d802      	bhi.n	80276da <create_name+0xce>
 80276d4:	7efb      	ldrb	r3, [r7, #27]
 80276d6:	3b20      	subs	r3, #32
 80276d8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80276da:	693b      	ldr	r3, [r7, #16]
 80276dc:	1c5a      	adds	r2, r3, #1
 80276de:	613a      	str	r2, [r7, #16]
 80276e0:	68ba      	ldr	r2, [r7, #8]
 80276e2:	4413      	add	r3, r2
 80276e4:	7efa      	ldrb	r2, [r7, #27]
 80276e6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80276e8:	e7a6      	b.n	8027638 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80276ea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80276ec:	68fa      	ldr	r2, [r7, #12]
 80276ee:	69fb      	ldr	r3, [r7, #28]
 80276f0:	441a      	add	r2, r3
 80276f2:	683b      	ldr	r3, [r7, #0]
 80276f4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80276f6:	693b      	ldr	r3, [r7, #16]
 80276f8:	2b00      	cmp	r3, #0
 80276fa:	d101      	bne.n	8027700 <create_name+0xf4>
 80276fc:	2306      	movs	r3, #6
 80276fe:	e010      	b.n	8027722 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8027700:	68bb      	ldr	r3, [r7, #8]
 8027702:	781b      	ldrb	r3, [r3, #0]
 8027704:	2be5      	cmp	r3, #229	@ 0xe5
 8027706:	d102      	bne.n	802770e <create_name+0x102>
 8027708:	68bb      	ldr	r3, [r7, #8]
 802770a:	2205      	movs	r2, #5
 802770c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 802770e:	7efb      	ldrb	r3, [r7, #27]
 8027710:	2b20      	cmp	r3, #32
 8027712:	d801      	bhi.n	8027718 <create_name+0x10c>
 8027714:	2204      	movs	r2, #4
 8027716:	e000      	b.n	802771a <create_name+0x10e>
 8027718:	2200      	movs	r2, #0
 802771a:	68bb      	ldr	r3, [r7, #8]
 802771c:	330b      	adds	r3, #11
 802771e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8027720:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8027722:	4618      	mov	r0, r3
 8027724:	3720      	adds	r7, #32
 8027726:	46bd      	mov	sp, r7
 8027728:	bd80      	pop	{r7, pc}
 802772a:	bf00      	nop
 802772c:	0802b7c4 	.word	0x0802b7c4
 8027730:	0802b158 	.word	0x0802b158

08027734 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8027734:	b580      	push	{r7, lr}
 8027736:	b086      	sub	sp, #24
 8027738:	af00      	add	r7, sp, #0
 802773a:	6078      	str	r0, [r7, #4]
 802773c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 802773e:	687b      	ldr	r3, [r7, #4]
 8027740:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8027742:	693b      	ldr	r3, [r7, #16]
 8027744:	681b      	ldr	r3, [r3, #0]
 8027746:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8027748:	e002      	b.n	8027750 <follow_path+0x1c>
 802774a:	683b      	ldr	r3, [r7, #0]
 802774c:	3301      	adds	r3, #1
 802774e:	603b      	str	r3, [r7, #0]
 8027750:	683b      	ldr	r3, [r7, #0]
 8027752:	781b      	ldrb	r3, [r3, #0]
 8027754:	2b2f      	cmp	r3, #47	@ 0x2f
 8027756:	d0f8      	beq.n	802774a <follow_path+0x16>
 8027758:	683b      	ldr	r3, [r7, #0]
 802775a:	781b      	ldrb	r3, [r3, #0]
 802775c:	2b5c      	cmp	r3, #92	@ 0x5c
 802775e:	d0f4      	beq.n	802774a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8027760:	693b      	ldr	r3, [r7, #16]
 8027762:	2200      	movs	r2, #0
 8027764:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8027766:	683b      	ldr	r3, [r7, #0]
 8027768:	781b      	ldrb	r3, [r3, #0]
 802776a:	2b1f      	cmp	r3, #31
 802776c:	d80a      	bhi.n	8027784 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 802776e:	687b      	ldr	r3, [r7, #4]
 8027770:	2280      	movs	r2, #128	@ 0x80
 8027772:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8027776:	2100      	movs	r1, #0
 8027778:	6878      	ldr	r0, [r7, #4]
 802777a:	f7ff fcfa 	bl	8027172 <dir_sdi>
 802777e:	4603      	mov	r3, r0
 8027780:	75fb      	strb	r3, [r7, #23]
 8027782:	e043      	b.n	802780c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8027784:	463b      	mov	r3, r7
 8027786:	4619      	mov	r1, r3
 8027788:	6878      	ldr	r0, [r7, #4]
 802778a:	f7ff ff3f 	bl	802760c <create_name>
 802778e:	4603      	mov	r3, r0
 8027790:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8027792:	7dfb      	ldrb	r3, [r7, #23]
 8027794:	2b00      	cmp	r3, #0
 8027796:	d134      	bne.n	8027802 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8027798:	6878      	ldr	r0, [r7, #4]
 802779a:	f7ff feb0 	bl	80274fe <dir_find>
 802779e:	4603      	mov	r3, r0
 80277a0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80277a2:	687b      	ldr	r3, [r7, #4]
 80277a4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80277a8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80277aa:	7dfb      	ldrb	r3, [r7, #23]
 80277ac:	2b00      	cmp	r3, #0
 80277ae:	d00a      	beq.n	80277c6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80277b0:	7dfb      	ldrb	r3, [r7, #23]
 80277b2:	2b04      	cmp	r3, #4
 80277b4:	d127      	bne.n	8027806 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80277b6:	7afb      	ldrb	r3, [r7, #11]
 80277b8:	f003 0304 	and.w	r3, r3, #4
 80277bc:	2b00      	cmp	r3, #0
 80277be:	d122      	bne.n	8027806 <follow_path+0xd2>
 80277c0:	2305      	movs	r3, #5
 80277c2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80277c4:	e01f      	b.n	8027806 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80277c6:	7afb      	ldrb	r3, [r7, #11]
 80277c8:	f003 0304 	and.w	r3, r3, #4
 80277cc:	2b00      	cmp	r3, #0
 80277ce:	d11c      	bne.n	802780a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80277d0:	693b      	ldr	r3, [r7, #16]
 80277d2:	799b      	ldrb	r3, [r3, #6]
 80277d4:	f003 0310 	and.w	r3, r3, #16
 80277d8:	2b00      	cmp	r3, #0
 80277da:	d102      	bne.n	80277e2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80277dc:	2305      	movs	r3, #5
 80277de:	75fb      	strb	r3, [r7, #23]
 80277e0:	e014      	b.n	802780c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80277e2:	68fb      	ldr	r3, [r7, #12]
 80277e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80277e8:	687b      	ldr	r3, [r7, #4]
 80277ea:	695b      	ldr	r3, [r3, #20]
 80277ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80277f0:	4413      	add	r3, r2
 80277f2:	4619      	mov	r1, r3
 80277f4:	68f8      	ldr	r0, [r7, #12]
 80277f6:	f7ff fe43 	bl	8027480 <ld_clust>
 80277fa:	4602      	mov	r2, r0
 80277fc:	693b      	ldr	r3, [r7, #16]
 80277fe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8027800:	e7c0      	b.n	8027784 <follow_path+0x50>
			if (res != FR_OK) break;
 8027802:	bf00      	nop
 8027804:	e002      	b.n	802780c <follow_path+0xd8>
				break;
 8027806:	bf00      	nop
 8027808:	e000      	b.n	802780c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 802780a:	bf00      	nop
			}
		}
	}

	return res;
 802780c:	7dfb      	ldrb	r3, [r7, #23]
}
 802780e:	4618      	mov	r0, r3
 8027810:	3718      	adds	r7, #24
 8027812:	46bd      	mov	sp, r7
 8027814:	bd80      	pop	{r7, pc}

08027816 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8027816:	b480      	push	{r7}
 8027818:	b087      	sub	sp, #28
 802781a:	af00      	add	r7, sp, #0
 802781c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 802781e:	f04f 33ff 	mov.w	r3, #4294967295
 8027822:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8027824:	687b      	ldr	r3, [r7, #4]
 8027826:	681b      	ldr	r3, [r3, #0]
 8027828:	2b00      	cmp	r3, #0
 802782a:	d031      	beq.n	8027890 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 802782c:	687b      	ldr	r3, [r7, #4]
 802782e:	681b      	ldr	r3, [r3, #0]
 8027830:	617b      	str	r3, [r7, #20]
 8027832:	e002      	b.n	802783a <get_ldnumber+0x24>
 8027834:	697b      	ldr	r3, [r7, #20]
 8027836:	3301      	adds	r3, #1
 8027838:	617b      	str	r3, [r7, #20]
 802783a:	697b      	ldr	r3, [r7, #20]
 802783c:	781b      	ldrb	r3, [r3, #0]
 802783e:	2b20      	cmp	r3, #32
 8027840:	d903      	bls.n	802784a <get_ldnumber+0x34>
 8027842:	697b      	ldr	r3, [r7, #20]
 8027844:	781b      	ldrb	r3, [r3, #0]
 8027846:	2b3a      	cmp	r3, #58	@ 0x3a
 8027848:	d1f4      	bne.n	8027834 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 802784a:	697b      	ldr	r3, [r7, #20]
 802784c:	781b      	ldrb	r3, [r3, #0]
 802784e:	2b3a      	cmp	r3, #58	@ 0x3a
 8027850:	d11c      	bne.n	802788c <get_ldnumber+0x76>
			tp = *path;
 8027852:	687b      	ldr	r3, [r7, #4]
 8027854:	681b      	ldr	r3, [r3, #0]
 8027856:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8027858:	68fb      	ldr	r3, [r7, #12]
 802785a:	1c5a      	adds	r2, r3, #1
 802785c:	60fa      	str	r2, [r7, #12]
 802785e:	781b      	ldrb	r3, [r3, #0]
 8027860:	3b30      	subs	r3, #48	@ 0x30
 8027862:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8027864:	68bb      	ldr	r3, [r7, #8]
 8027866:	2b09      	cmp	r3, #9
 8027868:	d80e      	bhi.n	8027888 <get_ldnumber+0x72>
 802786a:	68fa      	ldr	r2, [r7, #12]
 802786c:	697b      	ldr	r3, [r7, #20]
 802786e:	429a      	cmp	r2, r3
 8027870:	d10a      	bne.n	8027888 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8027872:	68bb      	ldr	r3, [r7, #8]
 8027874:	2b00      	cmp	r3, #0
 8027876:	d107      	bne.n	8027888 <get_ldnumber+0x72>
					vol = (int)i;
 8027878:	68bb      	ldr	r3, [r7, #8]
 802787a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 802787c:	697b      	ldr	r3, [r7, #20]
 802787e:	3301      	adds	r3, #1
 8027880:	617b      	str	r3, [r7, #20]
 8027882:	687b      	ldr	r3, [r7, #4]
 8027884:	697a      	ldr	r2, [r7, #20]
 8027886:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8027888:	693b      	ldr	r3, [r7, #16]
 802788a:	e002      	b.n	8027892 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 802788c:	2300      	movs	r3, #0
 802788e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8027890:	693b      	ldr	r3, [r7, #16]
}
 8027892:	4618      	mov	r0, r3
 8027894:	371c      	adds	r7, #28
 8027896:	46bd      	mov	sp, r7
 8027898:	f85d 7b04 	ldr.w	r7, [sp], #4
 802789c:	4770      	bx	lr
	...

080278a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80278a0:	b580      	push	{r7, lr}
 80278a2:	b082      	sub	sp, #8
 80278a4:	af00      	add	r7, sp, #0
 80278a6:	6078      	str	r0, [r7, #4]
 80278a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80278aa:	687b      	ldr	r3, [r7, #4]
 80278ac:	2200      	movs	r2, #0
 80278ae:	70da      	strb	r2, [r3, #3]
 80278b0:	687b      	ldr	r3, [r7, #4]
 80278b2:	f04f 32ff 	mov.w	r2, #4294967295
 80278b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80278b8:	6839      	ldr	r1, [r7, #0]
 80278ba:	6878      	ldr	r0, [r7, #4]
 80278bc:	f7ff f8dc 	bl	8026a78 <move_window>
 80278c0:	4603      	mov	r3, r0
 80278c2:	2b00      	cmp	r3, #0
 80278c4:	d001      	beq.n	80278ca <check_fs+0x2a>
 80278c6:	2304      	movs	r3, #4
 80278c8:	e038      	b.n	802793c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80278ca:	687b      	ldr	r3, [r7, #4]
 80278cc:	3330      	adds	r3, #48	@ 0x30
 80278ce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80278d2:	4618      	mov	r0, r3
 80278d4:	f7fe fe20 	bl	8026518 <ld_word>
 80278d8:	4603      	mov	r3, r0
 80278da:	461a      	mov	r2, r3
 80278dc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80278e0:	429a      	cmp	r2, r3
 80278e2:	d001      	beq.n	80278e8 <check_fs+0x48>
 80278e4:	2303      	movs	r3, #3
 80278e6:	e029      	b.n	802793c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80278e8:	687b      	ldr	r3, [r7, #4]
 80278ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80278ee:	2be9      	cmp	r3, #233	@ 0xe9
 80278f0:	d009      	beq.n	8027906 <check_fs+0x66>
 80278f2:	687b      	ldr	r3, [r7, #4]
 80278f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80278f8:	2beb      	cmp	r3, #235	@ 0xeb
 80278fa:	d11e      	bne.n	802793a <check_fs+0x9a>
 80278fc:	687b      	ldr	r3, [r7, #4]
 80278fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8027902:	2b90      	cmp	r3, #144	@ 0x90
 8027904:	d119      	bne.n	802793a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8027906:	687b      	ldr	r3, [r7, #4]
 8027908:	3330      	adds	r3, #48	@ 0x30
 802790a:	3336      	adds	r3, #54	@ 0x36
 802790c:	4618      	mov	r0, r3
 802790e:	f7fe fe1b 	bl	8026548 <ld_dword>
 8027912:	4603      	mov	r3, r0
 8027914:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8027918:	4a0a      	ldr	r2, [pc, #40]	@ (8027944 <check_fs+0xa4>)
 802791a:	4293      	cmp	r3, r2
 802791c:	d101      	bne.n	8027922 <check_fs+0x82>
 802791e:	2300      	movs	r3, #0
 8027920:	e00c      	b.n	802793c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8027922:	687b      	ldr	r3, [r7, #4]
 8027924:	3330      	adds	r3, #48	@ 0x30
 8027926:	3352      	adds	r3, #82	@ 0x52
 8027928:	4618      	mov	r0, r3
 802792a:	f7fe fe0d 	bl	8026548 <ld_dword>
 802792e:	4603      	mov	r3, r0
 8027930:	4a05      	ldr	r2, [pc, #20]	@ (8027948 <check_fs+0xa8>)
 8027932:	4293      	cmp	r3, r2
 8027934:	d101      	bne.n	802793a <check_fs+0x9a>
 8027936:	2300      	movs	r3, #0
 8027938:	e000      	b.n	802793c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 802793a:	2302      	movs	r3, #2
}
 802793c:	4618      	mov	r0, r3
 802793e:	3708      	adds	r7, #8
 8027940:	46bd      	mov	sp, r7
 8027942:	bd80      	pop	{r7, pc}
 8027944:	00544146 	.word	0x00544146
 8027948:	33544146 	.word	0x33544146

0802794c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 802794c:	b580      	push	{r7, lr}
 802794e:	b096      	sub	sp, #88	@ 0x58
 8027950:	af00      	add	r7, sp, #0
 8027952:	60f8      	str	r0, [r7, #12]
 8027954:	60b9      	str	r1, [r7, #8]
 8027956:	4613      	mov	r3, r2
 8027958:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 802795a:	68bb      	ldr	r3, [r7, #8]
 802795c:	2200      	movs	r2, #0
 802795e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8027960:	68f8      	ldr	r0, [r7, #12]
 8027962:	f7ff ff58 	bl	8027816 <get_ldnumber>
 8027966:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8027968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802796a:	2b00      	cmp	r3, #0
 802796c:	da01      	bge.n	8027972 <find_volume+0x26>
 802796e:	230b      	movs	r3, #11
 8027970:	e22d      	b.n	8027dce <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8027972:	4aa1      	ldr	r2, [pc, #644]	@ (8027bf8 <find_volume+0x2ac>)
 8027974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8027976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802797a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 802797c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802797e:	2b00      	cmp	r3, #0
 8027980:	d101      	bne.n	8027986 <find_volume+0x3a>
 8027982:	230c      	movs	r3, #12
 8027984:	e223      	b.n	8027dce <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8027986:	68bb      	ldr	r3, [r7, #8]
 8027988:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802798a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 802798c:	79fb      	ldrb	r3, [r7, #7]
 802798e:	f023 0301 	bic.w	r3, r3, #1
 8027992:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8027994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027996:	781b      	ldrb	r3, [r3, #0]
 8027998:	2b00      	cmp	r3, #0
 802799a:	d01a      	beq.n	80279d2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 802799c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802799e:	785b      	ldrb	r3, [r3, #1]
 80279a0:	4618      	mov	r0, r3
 80279a2:	f7fe fd19 	bl	80263d8 <disk_status>
 80279a6:	4603      	mov	r3, r0
 80279a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80279ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80279b0:	f003 0301 	and.w	r3, r3, #1
 80279b4:	2b00      	cmp	r3, #0
 80279b6:	d10c      	bne.n	80279d2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80279b8:	79fb      	ldrb	r3, [r7, #7]
 80279ba:	2b00      	cmp	r3, #0
 80279bc:	d007      	beq.n	80279ce <find_volume+0x82>
 80279be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80279c2:	f003 0304 	and.w	r3, r3, #4
 80279c6:	2b00      	cmp	r3, #0
 80279c8:	d001      	beq.n	80279ce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80279ca:	230a      	movs	r3, #10
 80279cc:	e1ff      	b.n	8027dce <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80279ce:	2300      	movs	r3, #0
 80279d0:	e1fd      	b.n	8027dce <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80279d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279d4:	2200      	movs	r2, #0
 80279d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80279d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80279da:	b2da      	uxtb	r2, r3
 80279dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80279e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80279e2:	785b      	ldrb	r3, [r3, #1]
 80279e4:	4618      	mov	r0, r3
 80279e6:	f7fe fd11 	bl	802640c <disk_initialize>
 80279ea:	4603      	mov	r3, r0
 80279ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80279f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80279f4:	f003 0301 	and.w	r3, r3, #1
 80279f8:	2b00      	cmp	r3, #0
 80279fa:	d001      	beq.n	8027a00 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80279fc:	2303      	movs	r3, #3
 80279fe:	e1e6      	b.n	8027dce <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8027a00:	79fb      	ldrb	r3, [r7, #7]
 8027a02:	2b00      	cmp	r3, #0
 8027a04:	d007      	beq.n	8027a16 <find_volume+0xca>
 8027a06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8027a0a:	f003 0304 	and.w	r3, r3, #4
 8027a0e:	2b00      	cmp	r3, #0
 8027a10:	d001      	beq.n	8027a16 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8027a12:	230a      	movs	r3, #10
 8027a14:	e1db      	b.n	8027dce <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8027a16:	2300      	movs	r3, #0
 8027a18:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8027a1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8027a1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8027a1e:	f7ff ff3f 	bl	80278a0 <check_fs>
 8027a22:	4603      	mov	r3, r0
 8027a24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8027a28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027a2c:	2b02      	cmp	r3, #2
 8027a2e:	d149      	bne.n	8027ac4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8027a30:	2300      	movs	r3, #0
 8027a32:	643b      	str	r3, [r7, #64]	@ 0x40
 8027a34:	e01e      	b.n	8027a74 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8027a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027a38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8027a3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027a3e:	011b      	lsls	r3, r3, #4
 8027a40:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8027a44:	4413      	add	r3, r2
 8027a46:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8027a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027a4a:	3304      	adds	r3, #4
 8027a4c:	781b      	ldrb	r3, [r3, #0]
 8027a4e:	2b00      	cmp	r3, #0
 8027a50:	d006      	beq.n	8027a60 <find_volume+0x114>
 8027a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8027a54:	3308      	adds	r3, #8
 8027a56:	4618      	mov	r0, r3
 8027a58:	f7fe fd76 	bl	8026548 <ld_dword>
 8027a5c:	4602      	mov	r2, r0
 8027a5e:	e000      	b.n	8027a62 <find_volume+0x116>
 8027a60:	2200      	movs	r2, #0
 8027a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027a64:	009b      	lsls	r3, r3, #2
 8027a66:	3358      	adds	r3, #88	@ 0x58
 8027a68:	443b      	add	r3, r7
 8027a6a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8027a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027a70:	3301      	adds	r3, #1
 8027a72:	643b      	str	r3, [r7, #64]	@ 0x40
 8027a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027a76:	2b03      	cmp	r3, #3
 8027a78:	d9dd      	bls.n	8027a36 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8027a7a:	2300      	movs	r3, #0
 8027a7c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8027a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027a80:	2b00      	cmp	r3, #0
 8027a82:	d002      	beq.n	8027a8a <find_volume+0x13e>
 8027a84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027a86:	3b01      	subs	r3, #1
 8027a88:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8027a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027a8c:	009b      	lsls	r3, r3, #2
 8027a8e:	3358      	adds	r3, #88	@ 0x58
 8027a90:	443b      	add	r3, r7
 8027a92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8027a96:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8027a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8027a9a:	2b00      	cmp	r3, #0
 8027a9c:	d005      	beq.n	8027aaa <find_volume+0x15e>
 8027a9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8027aa0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8027aa2:	f7ff fefd 	bl	80278a0 <check_fs>
 8027aa6:	4603      	mov	r3, r0
 8027aa8:	e000      	b.n	8027aac <find_volume+0x160>
 8027aaa:	2303      	movs	r3, #3
 8027aac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8027ab0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027ab4:	2b01      	cmp	r3, #1
 8027ab6:	d905      	bls.n	8027ac4 <find_volume+0x178>
 8027ab8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027aba:	3301      	adds	r3, #1
 8027abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8027abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027ac0:	2b03      	cmp	r3, #3
 8027ac2:	d9e2      	bls.n	8027a8a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8027ac4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027ac8:	2b04      	cmp	r3, #4
 8027aca:	d101      	bne.n	8027ad0 <find_volume+0x184>
 8027acc:	2301      	movs	r3, #1
 8027ace:	e17e      	b.n	8027dce <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8027ad0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027ad4:	2b01      	cmp	r3, #1
 8027ad6:	d901      	bls.n	8027adc <find_volume+0x190>
 8027ad8:	230d      	movs	r3, #13
 8027ada:	e178      	b.n	8027dce <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8027adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027ade:	3330      	adds	r3, #48	@ 0x30
 8027ae0:	330b      	adds	r3, #11
 8027ae2:	4618      	mov	r0, r3
 8027ae4:	f7fe fd18 	bl	8026518 <ld_word>
 8027ae8:	4603      	mov	r3, r0
 8027aea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8027aee:	d001      	beq.n	8027af4 <find_volume+0x1a8>
 8027af0:	230d      	movs	r3, #13
 8027af2:	e16c      	b.n	8027dce <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8027af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027af6:	3330      	adds	r3, #48	@ 0x30
 8027af8:	3316      	adds	r3, #22
 8027afa:	4618      	mov	r0, r3
 8027afc:	f7fe fd0c 	bl	8026518 <ld_word>
 8027b00:	4603      	mov	r3, r0
 8027b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8027b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027b06:	2b00      	cmp	r3, #0
 8027b08:	d106      	bne.n	8027b18 <find_volume+0x1cc>
 8027b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b0c:	3330      	adds	r3, #48	@ 0x30
 8027b0e:	3324      	adds	r3, #36	@ 0x24
 8027b10:	4618      	mov	r0, r3
 8027b12:	f7fe fd19 	bl	8026548 <ld_dword>
 8027b16:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8027b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8027b1c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8027b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b20:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8027b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8027b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b2a:	789b      	ldrb	r3, [r3, #2]
 8027b2c:	2b01      	cmp	r3, #1
 8027b2e:	d005      	beq.n	8027b3c <find_volume+0x1f0>
 8027b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b32:	789b      	ldrb	r3, [r3, #2]
 8027b34:	2b02      	cmp	r3, #2
 8027b36:	d001      	beq.n	8027b3c <find_volume+0x1f0>
 8027b38:	230d      	movs	r3, #13
 8027b3a:	e148      	b.n	8027dce <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8027b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b3e:	789b      	ldrb	r3, [r3, #2]
 8027b40:	461a      	mov	r2, r3
 8027b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027b44:	fb02 f303 	mul.w	r3, r2, r3
 8027b48:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8027b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8027b50:	461a      	mov	r2, r3
 8027b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8027b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b58:	895b      	ldrh	r3, [r3, #10]
 8027b5a:	2b00      	cmp	r3, #0
 8027b5c:	d008      	beq.n	8027b70 <find_volume+0x224>
 8027b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b60:	895b      	ldrh	r3, [r3, #10]
 8027b62:	461a      	mov	r2, r3
 8027b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b66:	895b      	ldrh	r3, [r3, #10]
 8027b68:	3b01      	subs	r3, #1
 8027b6a:	4013      	ands	r3, r2
 8027b6c:	2b00      	cmp	r3, #0
 8027b6e:	d001      	beq.n	8027b74 <find_volume+0x228>
 8027b70:	230d      	movs	r3, #13
 8027b72:	e12c      	b.n	8027dce <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8027b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b76:	3330      	adds	r3, #48	@ 0x30
 8027b78:	3311      	adds	r3, #17
 8027b7a:	4618      	mov	r0, r3
 8027b7c:	f7fe fccc 	bl	8026518 <ld_word>
 8027b80:	4603      	mov	r3, r0
 8027b82:	461a      	mov	r2, r3
 8027b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8027b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b8a:	891b      	ldrh	r3, [r3, #8]
 8027b8c:	f003 030f 	and.w	r3, r3, #15
 8027b90:	b29b      	uxth	r3, r3
 8027b92:	2b00      	cmp	r3, #0
 8027b94:	d001      	beq.n	8027b9a <find_volume+0x24e>
 8027b96:	230d      	movs	r3, #13
 8027b98:	e119      	b.n	8027dce <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8027b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027b9c:	3330      	adds	r3, #48	@ 0x30
 8027b9e:	3313      	adds	r3, #19
 8027ba0:	4618      	mov	r0, r3
 8027ba2:	f7fe fcb9 	bl	8026518 <ld_word>
 8027ba6:	4603      	mov	r3, r0
 8027ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8027baa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8027bac:	2b00      	cmp	r3, #0
 8027bae:	d106      	bne.n	8027bbe <find_volume+0x272>
 8027bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bb2:	3330      	adds	r3, #48	@ 0x30
 8027bb4:	3320      	adds	r3, #32
 8027bb6:	4618      	mov	r0, r3
 8027bb8:	f7fe fcc6 	bl	8026548 <ld_dword>
 8027bbc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8027bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027bc0:	3330      	adds	r3, #48	@ 0x30
 8027bc2:	330e      	adds	r3, #14
 8027bc4:	4618      	mov	r0, r3
 8027bc6:	f7fe fca7 	bl	8026518 <ld_word>
 8027bca:	4603      	mov	r3, r0
 8027bcc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8027bce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8027bd0:	2b00      	cmp	r3, #0
 8027bd2:	d101      	bne.n	8027bd8 <find_volume+0x28c>
 8027bd4:	230d      	movs	r3, #13
 8027bd6:	e0fa      	b.n	8027dce <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8027bd8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8027bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027bdc:	4413      	add	r3, r2
 8027bde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8027be0:	8912      	ldrh	r2, [r2, #8]
 8027be2:	0912      	lsrs	r2, r2, #4
 8027be4:	b292      	uxth	r2, r2
 8027be6:	4413      	add	r3, r2
 8027be8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8027bea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8027bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027bee:	429a      	cmp	r2, r3
 8027bf0:	d204      	bcs.n	8027bfc <find_volume+0x2b0>
 8027bf2:	230d      	movs	r3, #13
 8027bf4:	e0eb      	b.n	8027dce <find_volume+0x482>
 8027bf6:	bf00      	nop
 8027bf8:	24000a8c 	.word	0x24000a8c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8027bfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8027bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027c00:	1ad3      	subs	r3, r2, r3
 8027c02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8027c04:	8952      	ldrh	r2, [r2, #10]
 8027c06:	fbb3 f3f2 	udiv	r3, r3, r2
 8027c0a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8027c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027c0e:	2b00      	cmp	r3, #0
 8027c10:	d101      	bne.n	8027c16 <find_volume+0x2ca>
 8027c12:	230d      	movs	r3, #13
 8027c14:	e0db      	b.n	8027dce <find_volume+0x482>
		fmt = FS_FAT32;
 8027c16:	2303      	movs	r3, #3
 8027c18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8027c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027c1e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8027c22:	4293      	cmp	r3, r2
 8027c24:	d802      	bhi.n	8027c2c <find_volume+0x2e0>
 8027c26:	2302      	movs	r3, #2
 8027c28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8027c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027c2e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8027c32:	4293      	cmp	r3, r2
 8027c34:	d802      	bhi.n	8027c3c <find_volume+0x2f0>
 8027c36:	2301      	movs	r3, #1
 8027c38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8027c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027c3e:	1c9a      	adds	r2, r3, #2
 8027c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c42:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8027c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8027c48:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8027c4a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8027c4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8027c4e:	441a      	add	r2, r3
 8027c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c52:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8027c54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8027c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8027c58:	441a      	add	r2, r3
 8027c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c5c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8027c5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027c62:	2b03      	cmp	r3, #3
 8027c64:	d11e      	bne.n	8027ca4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8027c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c68:	3330      	adds	r3, #48	@ 0x30
 8027c6a:	332a      	adds	r3, #42	@ 0x2a
 8027c6c:	4618      	mov	r0, r3
 8027c6e:	f7fe fc53 	bl	8026518 <ld_word>
 8027c72:	4603      	mov	r3, r0
 8027c74:	2b00      	cmp	r3, #0
 8027c76:	d001      	beq.n	8027c7c <find_volume+0x330>
 8027c78:	230d      	movs	r3, #13
 8027c7a:	e0a8      	b.n	8027dce <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8027c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c7e:	891b      	ldrh	r3, [r3, #8]
 8027c80:	2b00      	cmp	r3, #0
 8027c82:	d001      	beq.n	8027c88 <find_volume+0x33c>
 8027c84:	230d      	movs	r3, #13
 8027c86:	e0a2      	b.n	8027dce <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8027c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c8a:	3330      	adds	r3, #48	@ 0x30
 8027c8c:	332c      	adds	r3, #44	@ 0x2c
 8027c8e:	4618      	mov	r0, r3
 8027c90:	f7fe fc5a 	bl	8026548 <ld_dword>
 8027c94:	4602      	mov	r2, r0
 8027c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c98:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8027c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027c9c:	695b      	ldr	r3, [r3, #20]
 8027c9e:	009b      	lsls	r3, r3, #2
 8027ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8027ca2:	e01f      	b.n	8027ce4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8027ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027ca6:	891b      	ldrh	r3, [r3, #8]
 8027ca8:	2b00      	cmp	r3, #0
 8027caa:	d101      	bne.n	8027cb0 <find_volume+0x364>
 8027cac:	230d      	movs	r3, #13
 8027cae:	e08e      	b.n	8027dce <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8027cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027cb2:	6a1a      	ldr	r2, [r3, #32]
 8027cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8027cb6:	441a      	add	r2, r3
 8027cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027cba:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8027cbc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027cc0:	2b02      	cmp	r3, #2
 8027cc2:	d103      	bne.n	8027ccc <find_volume+0x380>
 8027cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027cc6:	695b      	ldr	r3, [r3, #20]
 8027cc8:	005b      	lsls	r3, r3, #1
 8027cca:	e00a      	b.n	8027ce2 <find_volume+0x396>
 8027ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027cce:	695a      	ldr	r2, [r3, #20]
 8027cd0:	4613      	mov	r3, r2
 8027cd2:	005b      	lsls	r3, r3, #1
 8027cd4:	4413      	add	r3, r2
 8027cd6:	085a      	lsrs	r2, r3, #1
 8027cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027cda:	695b      	ldr	r3, [r3, #20]
 8027cdc:	f003 0301 	and.w	r3, r3, #1
 8027ce0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8027ce2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8027ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027ce6:	699a      	ldr	r2, [r3, #24]
 8027ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8027cea:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8027cee:	0a5b      	lsrs	r3, r3, #9
 8027cf0:	429a      	cmp	r2, r3
 8027cf2:	d201      	bcs.n	8027cf8 <find_volume+0x3ac>
 8027cf4:	230d      	movs	r3, #13
 8027cf6:	e06a      	b.n	8027dce <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8027cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8027cfe:	611a      	str	r2, [r3, #16]
 8027d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d02:	691a      	ldr	r2, [r3, #16]
 8027d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d06:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8027d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d0a:	2280      	movs	r2, #128	@ 0x80
 8027d0c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8027d0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8027d12:	2b03      	cmp	r3, #3
 8027d14:	d149      	bne.n	8027daa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8027d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d18:	3330      	adds	r3, #48	@ 0x30
 8027d1a:	3330      	adds	r3, #48	@ 0x30
 8027d1c:	4618      	mov	r0, r3
 8027d1e:	f7fe fbfb 	bl	8026518 <ld_word>
 8027d22:	4603      	mov	r3, r0
 8027d24:	2b01      	cmp	r3, #1
 8027d26:	d140      	bne.n	8027daa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8027d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8027d2a:	3301      	adds	r3, #1
 8027d2c:	4619      	mov	r1, r3
 8027d2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8027d30:	f7fe fea2 	bl	8026a78 <move_window>
 8027d34:	4603      	mov	r3, r0
 8027d36:	2b00      	cmp	r3, #0
 8027d38:	d137      	bne.n	8027daa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8027d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d3c:	2200      	movs	r2, #0
 8027d3e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8027d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d42:	3330      	adds	r3, #48	@ 0x30
 8027d44:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8027d48:	4618      	mov	r0, r3
 8027d4a:	f7fe fbe5 	bl	8026518 <ld_word>
 8027d4e:	4603      	mov	r3, r0
 8027d50:	461a      	mov	r2, r3
 8027d52:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8027d56:	429a      	cmp	r2, r3
 8027d58:	d127      	bne.n	8027daa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8027d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d5c:	3330      	adds	r3, #48	@ 0x30
 8027d5e:	4618      	mov	r0, r3
 8027d60:	f7fe fbf2 	bl	8026548 <ld_dword>
 8027d64:	4603      	mov	r3, r0
 8027d66:	4a1c      	ldr	r2, [pc, #112]	@ (8027dd8 <find_volume+0x48c>)
 8027d68:	4293      	cmp	r3, r2
 8027d6a:	d11e      	bne.n	8027daa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8027d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d6e:	3330      	adds	r3, #48	@ 0x30
 8027d70:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8027d74:	4618      	mov	r0, r3
 8027d76:	f7fe fbe7 	bl	8026548 <ld_dword>
 8027d7a:	4603      	mov	r3, r0
 8027d7c:	4a17      	ldr	r2, [pc, #92]	@ (8027ddc <find_volume+0x490>)
 8027d7e:	4293      	cmp	r3, r2
 8027d80:	d113      	bne.n	8027daa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8027d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d84:	3330      	adds	r3, #48	@ 0x30
 8027d86:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8027d8a:	4618      	mov	r0, r3
 8027d8c:	f7fe fbdc 	bl	8026548 <ld_dword>
 8027d90:	4602      	mov	r2, r0
 8027d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d94:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8027d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027d98:	3330      	adds	r3, #48	@ 0x30
 8027d9a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8027d9e:	4618      	mov	r0, r3
 8027da0:	f7fe fbd2 	bl	8026548 <ld_dword>
 8027da4:	4602      	mov	r2, r0
 8027da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027da8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8027daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027dac:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8027db0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8027db2:	4b0b      	ldr	r3, [pc, #44]	@ (8027de0 <find_volume+0x494>)
 8027db4:	881b      	ldrh	r3, [r3, #0]
 8027db6:	3301      	adds	r3, #1
 8027db8:	b29a      	uxth	r2, r3
 8027dba:	4b09      	ldr	r3, [pc, #36]	@ (8027de0 <find_volume+0x494>)
 8027dbc:	801a      	strh	r2, [r3, #0]
 8027dbe:	4b08      	ldr	r3, [pc, #32]	@ (8027de0 <find_volume+0x494>)
 8027dc0:	881a      	ldrh	r2, [r3, #0]
 8027dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027dc4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8027dc6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8027dc8:	f7fe fdee 	bl	80269a8 <clear_lock>
#endif
	return FR_OK;
 8027dcc:	2300      	movs	r3, #0
}
 8027dce:	4618      	mov	r0, r3
 8027dd0:	3758      	adds	r7, #88	@ 0x58
 8027dd2:	46bd      	mov	sp, r7
 8027dd4:	bd80      	pop	{r7, pc}
 8027dd6:	bf00      	nop
 8027dd8:	41615252 	.word	0x41615252
 8027ddc:	61417272 	.word	0x61417272
 8027de0:	24000a90 	.word	0x24000a90

08027de4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8027de4:	b580      	push	{r7, lr}
 8027de6:	b084      	sub	sp, #16
 8027de8:	af00      	add	r7, sp, #0
 8027dea:	6078      	str	r0, [r7, #4]
 8027dec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8027dee:	2309      	movs	r3, #9
 8027df0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8027df2:	687b      	ldr	r3, [r7, #4]
 8027df4:	2b00      	cmp	r3, #0
 8027df6:	d01c      	beq.n	8027e32 <validate+0x4e>
 8027df8:	687b      	ldr	r3, [r7, #4]
 8027dfa:	681b      	ldr	r3, [r3, #0]
 8027dfc:	2b00      	cmp	r3, #0
 8027dfe:	d018      	beq.n	8027e32 <validate+0x4e>
 8027e00:	687b      	ldr	r3, [r7, #4]
 8027e02:	681b      	ldr	r3, [r3, #0]
 8027e04:	781b      	ldrb	r3, [r3, #0]
 8027e06:	2b00      	cmp	r3, #0
 8027e08:	d013      	beq.n	8027e32 <validate+0x4e>
 8027e0a:	687b      	ldr	r3, [r7, #4]
 8027e0c:	889a      	ldrh	r2, [r3, #4]
 8027e0e:	687b      	ldr	r3, [r7, #4]
 8027e10:	681b      	ldr	r3, [r3, #0]
 8027e12:	88db      	ldrh	r3, [r3, #6]
 8027e14:	429a      	cmp	r2, r3
 8027e16:	d10c      	bne.n	8027e32 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8027e18:	687b      	ldr	r3, [r7, #4]
 8027e1a:	681b      	ldr	r3, [r3, #0]
 8027e1c:	785b      	ldrb	r3, [r3, #1]
 8027e1e:	4618      	mov	r0, r3
 8027e20:	f7fe fada 	bl	80263d8 <disk_status>
 8027e24:	4603      	mov	r3, r0
 8027e26:	f003 0301 	and.w	r3, r3, #1
 8027e2a:	2b00      	cmp	r3, #0
 8027e2c:	d101      	bne.n	8027e32 <validate+0x4e>
			res = FR_OK;
 8027e2e:	2300      	movs	r3, #0
 8027e30:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8027e32:	7bfb      	ldrb	r3, [r7, #15]
 8027e34:	2b00      	cmp	r3, #0
 8027e36:	d102      	bne.n	8027e3e <validate+0x5a>
 8027e38:	687b      	ldr	r3, [r7, #4]
 8027e3a:	681b      	ldr	r3, [r3, #0]
 8027e3c:	e000      	b.n	8027e40 <validate+0x5c>
 8027e3e:	2300      	movs	r3, #0
 8027e40:	683a      	ldr	r2, [r7, #0]
 8027e42:	6013      	str	r3, [r2, #0]
	return res;
 8027e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8027e46:	4618      	mov	r0, r3
 8027e48:	3710      	adds	r7, #16
 8027e4a:	46bd      	mov	sp, r7
 8027e4c:	bd80      	pop	{r7, pc}
	...

08027e50 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8027e50:	b580      	push	{r7, lr}
 8027e52:	b088      	sub	sp, #32
 8027e54:	af00      	add	r7, sp, #0
 8027e56:	60f8      	str	r0, [r7, #12]
 8027e58:	60b9      	str	r1, [r7, #8]
 8027e5a:	4613      	mov	r3, r2
 8027e5c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8027e5e:	68bb      	ldr	r3, [r7, #8]
 8027e60:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8027e62:	f107 0310 	add.w	r3, r7, #16
 8027e66:	4618      	mov	r0, r3
 8027e68:	f7ff fcd5 	bl	8027816 <get_ldnumber>
 8027e6c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8027e6e:	69fb      	ldr	r3, [r7, #28]
 8027e70:	2b00      	cmp	r3, #0
 8027e72:	da01      	bge.n	8027e78 <f_mount+0x28>
 8027e74:	230b      	movs	r3, #11
 8027e76:	e02b      	b.n	8027ed0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8027e78:	4a17      	ldr	r2, [pc, #92]	@ (8027ed8 <f_mount+0x88>)
 8027e7a:	69fb      	ldr	r3, [r7, #28]
 8027e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027e80:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8027e82:	69bb      	ldr	r3, [r7, #24]
 8027e84:	2b00      	cmp	r3, #0
 8027e86:	d005      	beq.n	8027e94 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8027e88:	69b8      	ldr	r0, [r7, #24]
 8027e8a:	f7fe fd8d 	bl	80269a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8027e8e:	69bb      	ldr	r3, [r7, #24]
 8027e90:	2200      	movs	r2, #0
 8027e92:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8027e94:	68fb      	ldr	r3, [r7, #12]
 8027e96:	2b00      	cmp	r3, #0
 8027e98:	d002      	beq.n	8027ea0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8027e9a:	68fb      	ldr	r3, [r7, #12]
 8027e9c:	2200      	movs	r2, #0
 8027e9e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8027ea0:	68fa      	ldr	r2, [r7, #12]
 8027ea2:	490d      	ldr	r1, [pc, #52]	@ (8027ed8 <f_mount+0x88>)
 8027ea4:	69fb      	ldr	r3, [r7, #28]
 8027ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8027eaa:	68fb      	ldr	r3, [r7, #12]
 8027eac:	2b00      	cmp	r3, #0
 8027eae:	d002      	beq.n	8027eb6 <f_mount+0x66>
 8027eb0:	79fb      	ldrb	r3, [r7, #7]
 8027eb2:	2b01      	cmp	r3, #1
 8027eb4:	d001      	beq.n	8027eba <f_mount+0x6a>
 8027eb6:	2300      	movs	r3, #0
 8027eb8:	e00a      	b.n	8027ed0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8027eba:	f107 010c 	add.w	r1, r7, #12
 8027ebe:	f107 0308 	add.w	r3, r7, #8
 8027ec2:	2200      	movs	r2, #0
 8027ec4:	4618      	mov	r0, r3
 8027ec6:	f7ff fd41 	bl	802794c <find_volume>
 8027eca:	4603      	mov	r3, r0
 8027ecc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8027ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8027ed0:	4618      	mov	r0, r3
 8027ed2:	3720      	adds	r7, #32
 8027ed4:	46bd      	mov	sp, r7
 8027ed6:	bd80      	pop	{r7, pc}
 8027ed8:	24000a8c 	.word	0x24000a8c

08027edc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8027edc:	b580      	push	{r7, lr}
 8027ede:	b098      	sub	sp, #96	@ 0x60
 8027ee0:	af00      	add	r7, sp, #0
 8027ee2:	60f8      	str	r0, [r7, #12]
 8027ee4:	60b9      	str	r1, [r7, #8]
 8027ee6:	4613      	mov	r3, r2
 8027ee8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8027eea:	68fb      	ldr	r3, [r7, #12]
 8027eec:	2b00      	cmp	r3, #0
 8027eee:	d101      	bne.n	8027ef4 <f_open+0x18>
 8027ef0:	2309      	movs	r3, #9
 8027ef2:	e1a9      	b.n	8028248 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8027ef4:	79fb      	ldrb	r3, [r7, #7]
 8027ef6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8027efa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8027efc:	79fa      	ldrb	r2, [r7, #7]
 8027efe:	f107 0110 	add.w	r1, r7, #16
 8027f02:	f107 0308 	add.w	r3, r7, #8
 8027f06:	4618      	mov	r0, r3
 8027f08:	f7ff fd20 	bl	802794c <find_volume>
 8027f0c:	4603      	mov	r3, r0
 8027f0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8027f12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027f16:	2b00      	cmp	r3, #0
 8027f18:	f040 818d 	bne.w	8028236 <f_open+0x35a>
		dj.obj.fs = fs;
 8027f1c:	693b      	ldr	r3, [r7, #16]
 8027f1e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8027f20:	68ba      	ldr	r2, [r7, #8]
 8027f22:	f107 0314 	add.w	r3, r7, #20
 8027f26:	4611      	mov	r1, r2
 8027f28:	4618      	mov	r0, r3
 8027f2a:	f7ff fc03 	bl	8027734 <follow_path>
 8027f2e:	4603      	mov	r3, r0
 8027f30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8027f34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027f38:	2b00      	cmp	r3, #0
 8027f3a:	d118      	bne.n	8027f6e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8027f3c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8027f40:	b25b      	sxtb	r3, r3
 8027f42:	2b00      	cmp	r3, #0
 8027f44:	da03      	bge.n	8027f4e <f_open+0x72>
				res = FR_INVALID_NAME;
 8027f46:	2306      	movs	r3, #6
 8027f48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8027f4c:	e00f      	b.n	8027f6e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8027f4e:	79fb      	ldrb	r3, [r7, #7]
 8027f50:	2b01      	cmp	r3, #1
 8027f52:	bf8c      	ite	hi
 8027f54:	2301      	movhi	r3, #1
 8027f56:	2300      	movls	r3, #0
 8027f58:	b2db      	uxtb	r3, r3
 8027f5a:	461a      	mov	r2, r3
 8027f5c:	f107 0314 	add.w	r3, r7, #20
 8027f60:	4611      	mov	r1, r2
 8027f62:	4618      	mov	r0, r3
 8027f64:	f7fe fbd8 	bl	8026718 <chk_lock>
 8027f68:	4603      	mov	r3, r0
 8027f6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8027f6e:	79fb      	ldrb	r3, [r7, #7]
 8027f70:	f003 031c 	and.w	r3, r3, #28
 8027f74:	2b00      	cmp	r3, #0
 8027f76:	d07f      	beq.n	8028078 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8027f78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027f7c:	2b00      	cmp	r3, #0
 8027f7e:	d017      	beq.n	8027fb0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8027f80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027f84:	2b04      	cmp	r3, #4
 8027f86:	d10e      	bne.n	8027fa6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8027f88:	f7fe fc22 	bl	80267d0 <enq_lock>
 8027f8c:	4603      	mov	r3, r0
 8027f8e:	2b00      	cmp	r3, #0
 8027f90:	d006      	beq.n	8027fa0 <f_open+0xc4>
 8027f92:	f107 0314 	add.w	r3, r7, #20
 8027f96:	4618      	mov	r0, r3
 8027f98:	f7ff fb06 	bl	80275a8 <dir_register>
 8027f9c:	4603      	mov	r3, r0
 8027f9e:	e000      	b.n	8027fa2 <f_open+0xc6>
 8027fa0:	2312      	movs	r3, #18
 8027fa2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8027fa6:	79fb      	ldrb	r3, [r7, #7]
 8027fa8:	f043 0308 	orr.w	r3, r3, #8
 8027fac:	71fb      	strb	r3, [r7, #7]
 8027fae:	e010      	b.n	8027fd2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8027fb0:	7ebb      	ldrb	r3, [r7, #26]
 8027fb2:	f003 0311 	and.w	r3, r3, #17
 8027fb6:	2b00      	cmp	r3, #0
 8027fb8:	d003      	beq.n	8027fc2 <f_open+0xe6>
					res = FR_DENIED;
 8027fba:	2307      	movs	r3, #7
 8027fbc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8027fc0:	e007      	b.n	8027fd2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8027fc2:	79fb      	ldrb	r3, [r7, #7]
 8027fc4:	f003 0304 	and.w	r3, r3, #4
 8027fc8:	2b00      	cmp	r3, #0
 8027fca:	d002      	beq.n	8027fd2 <f_open+0xf6>
 8027fcc:	2308      	movs	r3, #8
 8027fce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8027fd2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8027fd6:	2b00      	cmp	r3, #0
 8027fd8:	d168      	bne.n	80280ac <f_open+0x1d0>
 8027fda:	79fb      	ldrb	r3, [r7, #7]
 8027fdc:	f003 0308 	and.w	r3, r3, #8
 8027fe0:	2b00      	cmp	r3, #0
 8027fe2:	d063      	beq.n	80280ac <f_open+0x1d0>
				dw = GET_FATTIME();
 8027fe4:	f7fd ff6c 	bl	8025ec0 <get_fattime>
 8027fe8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8027fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027fec:	330e      	adds	r3, #14
 8027fee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8027ff0:	4618      	mov	r0, r3
 8027ff2:	f7fe fae7 	bl	80265c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8027ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027ff8:	3316      	adds	r3, #22
 8027ffa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8027ffc:	4618      	mov	r0, r3
 8027ffe:	f7fe fae1 	bl	80265c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8028002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8028004:	330b      	adds	r3, #11
 8028006:	2220      	movs	r2, #32
 8028008:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 802800a:	693b      	ldr	r3, [r7, #16]
 802800c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 802800e:	4611      	mov	r1, r2
 8028010:	4618      	mov	r0, r3
 8028012:	f7ff fa35 	bl	8027480 <ld_clust>
 8028016:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8028018:	693b      	ldr	r3, [r7, #16]
 802801a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 802801c:	2200      	movs	r2, #0
 802801e:	4618      	mov	r0, r3
 8028020:	f7ff fa4d 	bl	80274be <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8028024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8028026:	331c      	adds	r3, #28
 8028028:	2100      	movs	r1, #0
 802802a:	4618      	mov	r0, r3
 802802c:	f7fe faca 	bl	80265c4 <st_dword>
					fs->wflag = 1;
 8028030:	693b      	ldr	r3, [r7, #16]
 8028032:	2201      	movs	r2, #1
 8028034:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8028036:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8028038:	2b00      	cmp	r3, #0
 802803a:	d037      	beq.n	80280ac <f_open+0x1d0>
						dw = fs->winsect;
 802803c:	693b      	ldr	r3, [r7, #16]
 802803e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028040:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8028042:	f107 0314 	add.w	r3, r7, #20
 8028046:	2200      	movs	r2, #0
 8028048:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 802804a:	4618      	mov	r0, r3
 802804c:	f7fe ff60 	bl	8026f10 <remove_chain>
 8028050:	4603      	mov	r3, r0
 8028052:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8028056:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802805a:	2b00      	cmp	r3, #0
 802805c:	d126      	bne.n	80280ac <f_open+0x1d0>
							res = move_window(fs, dw);
 802805e:	693b      	ldr	r3, [r7, #16]
 8028060:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8028062:	4618      	mov	r0, r3
 8028064:	f7fe fd08 	bl	8026a78 <move_window>
 8028068:	4603      	mov	r3, r0
 802806a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 802806e:	693b      	ldr	r3, [r7, #16]
 8028070:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8028072:	3a01      	subs	r2, #1
 8028074:	60da      	str	r2, [r3, #12]
 8028076:	e019      	b.n	80280ac <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8028078:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802807c:	2b00      	cmp	r3, #0
 802807e:	d115      	bne.n	80280ac <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8028080:	7ebb      	ldrb	r3, [r7, #26]
 8028082:	f003 0310 	and.w	r3, r3, #16
 8028086:	2b00      	cmp	r3, #0
 8028088:	d003      	beq.n	8028092 <f_open+0x1b6>
					res = FR_NO_FILE;
 802808a:	2304      	movs	r3, #4
 802808c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8028090:	e00c      	b.n	80280ac <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8028092:	79fb      	ldrb	r3, [r7, #7]
 8028094:	f003 0302 	and.w	r3, r3, #2
 8028098:	2b00      	cmp	r3, #0
 802809a:	d007      	beq.n	80280ac <f_open+0x1d0>
 802809c:	7ebb      	ldrb	r3, [r7, #26]
 802809e:	f003 0301 	and.w	r3, r3, #1
 80280a2:	2b00      	cmp	r3, #0
 80280a4:	d002      	beq.n	80280ac <f_open+0x1d0>
						res = FR_DENIED;
 80280a6:	2307      	movs	r3, #7
 80280a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80280ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80280b0:	2b00      	cmp	r3, #0
 80280b2:	d126      	bne.n	8028102 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80280b4:	79fb      	ldrb	r3, [r7, #7]
 80280b6:	f003 0308 	and.w	r3, r3, #8
 80280ba:	2b00      	cmp	r3, #0
 80280bc:	d003      	beq.n	80280c6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80280be:	79fb      	ldrb	r3, [r7, #7]
 80280c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80280c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80280c6:	693b      	ldr	r3, [r7, #16]
 80280c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80280ca:	68fb      	ldr	r3, [r7, #12]
 80280cc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80280ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80280d0:	68fb      	ldr	r3, [r7, #12]
 80280d2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80280d4:	79fb      	ldrb	r3, [r7, #7]
 80280d6:	2b01      	cmp	r3, #1
 80280d8:	bf8c      	ite	hi
 80280da:	2301      	movhi	r3, #1
 80280dc:	2300      	movls	r3, #0
 80280de:	b2db      	uxtb	r3, r3
 80280e0:	461a      	mov	r2, r3
 80280e2:	f107 0314 	add.w	r3, r7, #20
 80280e6:	4611      	mov	r1, r2
 80280e8:	4618      	mov	r0, r3
 80280ea:	f7fe fb93 	bl	8026814 <inc_lock>
 80280ee:	4602      	mov	r2, r0
 80280f0:	68fb      	ldr	r3, [r7, #12]
 80280f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80280f4:	68fb      	ldr	r3, [r7, #12]
 80280f6:	691b      	ldr	r3, [r3, #16]
 80280f8:	2b00      	cmp	r3, #0
 80280fa:	d102      	bne.n	8028102 <f_open+0x226>
 80280fc:	2302      	movs	r3, #2
 80280fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8028102:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8028106:	2b00      	cmp	r3, #0
 8028108:	f040 8095 	bne.w	8028236 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 802810c:	693b      	ldr	r3, [r7, #16]
 802810e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8028110:	4611      	mov	r1, r2
 8028112:	4618      	mov	r0, r3
 8028114:	f7ff f9b4 	bl	8027480 <ld_clust>
 8028118:	4602      	mov	r2, r0
 802811a:	68fb      	ldr	r3, [r7, #12]
 802811c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 802811e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8028120:	331c      	adds	r3, #28
 8028122:	4618      	mov	r0, r3
 8028124:	f7fe fa10 	bl	8026548 <ld_dword>
 8028128:	4602      	mov	r2, r0
 802812a:	68fb      	ldr	r3, [r7, #12]
 802812c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 802812e:	68fb      	ldr	r3, [r7, #12]
 8028130:	2200      	movs	r2, #0
 8028132:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8028134:	693a      	ldr	r2, [r7, #16]
 8028136:	68fb      	ldr	r3, [r7, #12]
 8028138:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 802813a:	693b      	ldr	r3, [r7, #16]
 802813c:	88da      	ldrh	r2, [r3, #6]
 802813e:	68fb      	ldr	r3, [r7, #12]
 8028140:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8028142:	68fb      	ldr	r3, [r7, #12]
 8028144:	79fa      	ldrb	r2, [r7, #7]
 8028146:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8028148:	68fb      	ldr	r3, [r7, #12]
 802814a:	2200      	movs	r2, #0
 802814c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 802814e:	68fb      	ldr	r3, [r7, #12]
 8028150:	2200      	movs	r2, #0
 8028152:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8028154:	68fb      	ldr	r3, [r7, #12]
 8028156:	2200      	movs	r2, #0
 8028158:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 802815a:	68fb      	ldr	r3, [r7, #12]
 802815c:	3330      	adds	r3, #48	@ 0x30
 802815e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8028162:	2100      	movs	r1, #0
 8028164:	4618      	mov	r0, r3
 8028166:	f7fe fa7a 	bl	802665e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 802816a:	79fb      	ldrb	r3, [r7, #7]
 802816c:	f003 0320 	and.w	r3, r3, #32
 8028170:	2b00      	cmp	r3, #0
 8028172:	d060      	beq.n	8028236 <f_open+0x35a>
 8028174:	68fb      	ldr	r3, [r7, #12]
 8028176:	68db      	ldr	r3, [r3, #12]
 8028178:	2b00      	cmp	r3, #0
 802817a:	d05c      	beq.n	8028236 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 802817c:	68fb      	ldr	r3, [r7, #12]
 802817e:	68da      	ldr	r2, [r3, #12]
 8028180:	68fb      	ldr	r3, [r7, #12]
 8028182:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8028184:	693b      	ldr	r3, [r7, #16]
 8028186:	895b      	ldrh	r3, [r3, #10]
 8028188:	025b      	lsls	r3, r3, #9
 802818a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 802818c:	68fb      	ldr	r3, [r7, #12]
 802818e:	689b      	ldr	r3, [r3, #8]
 8028190:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8028192:	68fb      	ldr	r3, [r7, #12]
 8028194:	68db      	ldr	r3, [r3, #12]
 8028196:	657b      	str	r3, [r7, #84]	@ 0x54
 8028198:	e016      	b.n	80281c8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 802819a:	68fb      	ldr	r3, [r7, #12]
 802819c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 802819e:	4618      	mov	r0, r3
 80281a0:	f7fe fd25 	bl	8026bee <get_fat>
 80281a4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80281a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80281a8:	2b01      	cmp	r3, #1
 80281aa:	d802      	bhi.n	80281b2 <f_open+0x2d6>
 80281ac:	2302      	movs	r3, #2
 80281ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80281b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80281b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80281b8:	d102      	bne.n	80281c0 <f_open+0x2e4>
 80281ba:	2301      	movs	r3, #1
 80281bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80281c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80281c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80281c4:	1ad3      	subs	r3, r2, r3
 80281c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80281c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80281cc:	2b00      	cmp	r3, #0
 80281ce:	d103      	bne.n	80281d8 <f_open+0x2fc>
 80281d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80281d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80281d4:	429a      	cmp	r2, r3
 80281d6:	d8e0      	bhi.n	802819a <f_open+0x2be>
				}
				fp->clust = clst;
 80281d8:	68fb      	ldr	r3, [r7, #12]
 80281da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80281dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80281de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80281e2:	2b00      	cmp	r3, #0
 80281e4:	d127      	bne.n	8028236 <f_open+0x35a>
 80281e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80281e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80281ec:	2b00      	cmp	r3, #0
 80281ee:	d022      	beq.n	8028236 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80281f0:	693b      	ldr	r3, [r7, #16]
 80281f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80281f4:	4618      	mov	r0, r3
 80281f6:	f7fe fcdb 	bl	8026bb0 <clust2sect>
 80281fa:	6478      	str	r0, [r7, #68]	@ 0x44
 80281fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80281fe:	2b00      	cmp	r3, #0
 8028200:	d103      	bne.n	802820a <f_open+0x32e>
						res = FR_INT_ERR;
 8028202:	2302      	movs	r3, #2
 8028204:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8028208:	e015      	b.n	8028236 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 802820a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802820c:	0a5a      	lsrs	r2, r3, #9
 802820e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8028210:	441a      	add	r2, r3
 8028212:	68fb      	ldr	r3, [r7, #12]
 8028214:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8028216:	693b      	ldr	r3, [r7, #16]
 8028218:	7858      	ldrb	r0, [r3, #1]
 802821a:	68fb      	ldr	r3, [r7, #12]
 802821c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8028220:	68fb      	ldr	r3, [r7, #12]
 8028222:	6a1a      	ldr	r2, [r3, #32]
 8028224:	2301      	movs	r3, #1
 8028226:	f7fe f919 	bl	802645c <disk_read>
 802822a:	4603      	mov	r3, r0
 802822c:	2b00      	cmp	r3, #0
 802822e:	d002      	beq.n	8028236 <f_open+0x35a>
 8028230:	2301      	movs	r3, #1
 8028232:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8028236:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 802823a:	2b00      	cmp	r3, #0
 802823c:	d002      	beq.n	8028244 <f_open+0x368>
 802823e:	68fb      	ldr	r3, [r7, #12]
 8028240:	2200      	movs	r2, #0
 8028242:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8028244:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8028248:	4618      	mov	r0, r3
 802824a:	3760      	adds	r7, #96	@ 0x60
 802824c:	46bd      	mov	sp, r7
 802824e:	bd80      	pop	{r7, pc}

08028250 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8028250:	b580      	push	{r7, lr}
 8028252:	b08e      	sub	sp, #56	@ 0x38
 8028254:	af00      	add	r7, sp, #0
 8028256:	60f8      	str	r0, [r7, #12]
 8028258:	60b9      	str	r1, [r7, #8]
 802825a:	607a      	str	r2, [r7, #4]
 802825c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 802825e:	68bb      	ldr	r3, [r7, #8]
 8028260:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8028262:	683b      	ldr	r3, [r7, #0]
 8028264:	2200      	movs	r2, #0
 8028266:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8028268:	68fb      	ldr	r3, [r7, #12]
 802826a:	f107 0214 	add.w	r2, r7, #20
 802826e:	4611      	mov	r1, r2
 8028270:	4618      	mov	r0, r3
 8028272:	f7ff fdb7 	bl	8027de4 <validate>
 8028276:	4603      	mov	r3, r0
 8028278:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 802827c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8028280:	2b00      	cmp	r3, #0
 8028282:	d107      	bne.n	8028294 <f_read+0x44>
 8028284:	68fb      	ldr	r3, [r7, #12]
 8028286:	7d5b      	ldrb	r3, [r3, #21]
 8028288:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 802828c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8028290:	2b00      	cmp	r3, #0
 8028292:	d002      	beq.n	802829a <f_read+0x4a>
 8028294:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8028298:	e115      	b.n	80284c6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 802829a:	68fb      	ldr	r3, [r7, #12]
 802829c:	7d1b      	ldrb	r3, [r3, #20]
 802829e:	f003 0301 	and.w	r3, r3, #1
 80282a2:	2b00      	cmp	r3, #0
 80282a4:	d101      	bne.n	80282aa <f_read+0x5a>
 80282a6:	2307      	movs	r3, #7
 80282a8:	e10d      	b.n	80284c6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80282aa:	68fb      	ldr	r3, [r7, #12]
 80282ac:	68da      	ldr	r2, [r3, #12]
 80282ae:	68fb      	ldr	r3, [r7, #12]
 80282b0:	699b      	ldr	r3, [r3, #24]
 80282b2:	1ad3      	subs	r3, r2, r3
 80282b4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80282b6:	687a      	ldr	r2, [r7, #4]
 80282b8:	6a3b      	ldr	r3, [r7, #32]
 80282ba:	429a      	cmp	r2, r3
 80282bc:	f240 80fe 	bls.w	80284bc <f_read+0x26c>
 80282c0:	6a3b      	ldr	r3, [r7, #32]
 80282c2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80282c4:	e0fa      	b.n	80284bc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80282c6:	68fb      	ldr	r3, [r7, #12]
 80282c8:	699b      	ldr	r3, [r3, #24]
 80282ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80282ce:	2b00      	cmp	r3, #0
 80282d0:	f040 80c6 	bne.w	8028460 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80282d4:	68fb      	ldr	r3, [r7, #12]
 80282d6:	699b      	ldr	r3, [r3, #24]
 80282d8:	0a5b      	lsrs	r3, r3, #9
 80282da:	697a      	ldr	r2, [r7, #20]
 80282dc:	8952      	ldrh	r2, [r2, #10]
 80282de:	3a01      	subs	r2, #1
 80282e0:	4013      	ands	r3, r2
 80282e2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80282e4:	69fb      	ldr	r3, [r7, #28]
 80282e6:	2b00      	cmp	r3, #0
 80282e8:	d12f      	bne.n	802834a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80282ea:	68fb      	ldr	r3, [r7, #12]
 80282ec:	699b      	ldr	r3, [r3, #24]
 80282ee:	2b00      	cmp	r3, #0
 80282f0:	d103      	bne.n	80282fa <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80282f2:	68fb      	ldr	r3, [r7, #12]
 80282f4:	689b      	ldr	r3, [r3, #8]
 80282f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80282f8:	e013      	b.n	8028322 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80282fa:	68fb      	ldr	r3, [r7, #12]
 80282fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80282fe:	2b00      	cmp	r3, #0
 8028300:	d007      	beq.n	8028312 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8028302:	68fb      	ldr	r3, [r7, #12]
 8028304:	699b      	ldr	r3, [r3, #24]
 8028306:	4619      	mov	r1, r3
 8028308:	68f8      	ldr	r0, [r7, #12]
 802830a:	f7fe fefe 	bl	802710a <clmt_clust>
 802830e:	6338      	str	r0, [r7, #48]	@ 0x30
 8028310:	e007      	b.n	8028322 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8028312:	68fa      	ldr	r2, [r7, #12]
 8028314:	68fb      	ldr	r3, [r7, #12]
 8028316:	69db      	ldr	r3, [r3, #28]
 8028318:	4619      	mov	r1, r3
 802831a:	4610      	mov	r0, r2
 802831c:	f7fe fc67 	bl	8026bee <get_fat>
 8028320:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8028322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028324:	2b01      	cmp	r3, #1
 8028326:	d804      	bhi.n	8028332 <f_read+0xe2>
 8028328:	68fb      	ldr	r3, [r7, #12]
 802832a:	2202      	movs	r2, #2
 802832c:	755a      	strb	r2, [r3, #21]
 802832e:	2302      	movs	r3, #2
 8028330:	e0c9      	b.n	80284c6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8028332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028338:	d104      	bne.n	8028344 <f_read+0xf4>
 802833a:	68fb      	ldr	r3, [r7, #12]
 802833c:	2201      	movs	r2, #1
 802833e:	755a      	strb	r2, [r3, #21]
 8028340:	2301      	movs	r3, #1
 8028342:	e0c0      	b.n	80284c6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8028344:	68fb      	ldr	r3, [r7, #12]
 8028346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8028348:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 802834a:	697a      	ldr	r2, [r7, #20]
 802834c:	68fb      	ldr	r3, [r7, #12]
 802834e:	69db      	ldr	r3, [r3, #28]
 8028350:	4619      	mov	r1, r3
 8028352:	4610      	mov	r0, r2
 8028354:	f7fe fc2c 	bl	8026bb0 <clust2sect>
 8028358:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 802835a:	69bb      	ldr	r3, [r7, #24]
 802835c:	2b00      	cmp	r3, #0
 802835e:	d104      	bne.n	802836a <f_read+0x11a>
 8028360:	68fb      	ldr	r3, [r7, #12]
 8028362:	2202      	movs	r2, #2
 8028364:	755a      	strb	r2, [r3, #21]
 8028366:	2302      	movs	r3, #2
 8028368:	e0ad      	b.n	80284c6 <f_read+0x276>
			sect += csect;
 802836a:	69ba      	ldr	r2, [r7, #24]
 802836c:	69fb      	ldr	r3, [r7, #28]
 802836e:	4413      	add	r3, r2
 8028370:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8028372:	687b      	ldr	r3, [r7, #4]
 8028374:	0a5b      	lsrs	r3, r3, #9
 8028376:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8028378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802837a:	2b00      	cmp	r3, #0
 802837c:	d039      	beq.n	80283f2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 802837e:	69fa      	ldr	r2, [r7, #28]
 8028380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8028382:	4413      	add	r3, r2
 8028384:	697a      	ldr	r2, [r7, #20]
 8028386:	8952      	ldrh	r2, [r2, #10]
 8028388:	4293      	cmp	r3, r2
 802838a:	d905      	bls.n	8028398 <f_read+0x148>
					cc = fs->csize - csect;
 802838c:	697b      	ldr	r3, [r7, #20]
 802838e:	895b      	ldrh	r3, [r3, #10]
 8028390:	461a      	mov	r2, r3
 8028392:	69fb      	ldr	r3, [r7, #28]
 8028394:	1ad3      	subs	r3, r2, r3
 8028396:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8028398:	697b      	ldr	r3, [r7, #20]
 802839a:	7858      	ldrb	r0, [r3, #1]
 802839c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802839e:	69ba      	ldr	r2, [r7, #24]
 80283a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80283a2:	f7fe f85b 	bl	802645c <disk_read>
 80283a6:	4603      	mov	r3, r0
 80283a8:	2b00      	cmp	r3, #0
 80283aa:	d004      	beq.n	80283b6 <f_read+0x166>
 80283ac:	68fb      	ldr	r3, [r7, #12]
 80283ae:	2201      	movs	r2, #1
 80283b0:	755a      	strb	r2, [r3, #21]
 80283b2:	2301      	movs	r3, #1
 80283b4:	e087      	b.n	80284c6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80283b6:	68fb      	ldr	r3, [r7, #12]
 80283b8:	7d1b      	ldrb	r3, [r3, #20]
 80283ba:	b25b      	sxtb	r3, r3
 80283bc:	2b00      	cmp	r3, #0
 80283be:	da14      	bge.n	80283ea <f_read+0x19a>
 80283c0:	68fb      	ldr	r3, [r7, #12]
 80283c2:	6a1a      	ldr	r2, [r3, #32]
 80283c4:	69bb      	ldr	r3, [r7, #24]
 80283c6:	1ad3      	subs	r3, r2, r3
 80283c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80283ca:	429a      	cmp	r2, r3
 80283cc:	d90d      	bls.n	80283ea <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80283ce:	68fb      	ldr	r3, [r7, #12]
 80283d0:	6a1a      	ldr	r2, [r3, #32]
 80283d2:	69bb      	ldr	r3, [r7, #24]
 80283d4:	1ad3      	subs	r3, r2, r3
 80283d6:	025b      	lsls	r3, r3, #9
 80283d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80283da:	18d0      	adds	r0, r2, r3
 80283dc:	68fb      	ldr	r3, [r7, #12]
 80283de:	3330      	adds	r3, #48	@ 0x30
 80283e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80283e4:	4619      	mov	r1, r3
 80283e6:	f7fe f919 	bl	802661c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80283ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80283ec:	025b      	lsls	r3, r3, #9
 80283ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80283f0:	e050      	b.n	8028494 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80283f2:	68fb      	ldr	r3, [r7, #12]
 80283f4:	6a1b      	ldr	r3, [r3, #32]
 80283f6:	69ba      	ldr	r2, [r7, #24]
 80283f8:	429a      	cmp	r2, r3
 80283fa:	d02e      	beq.n	802845a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80283fc:	68fb      	ldr	r3, [r7, #12]
 80283fe:	7d1b      	ldrb	r3, [r3, #20]
 8028400:	b25b      	sxtb	r3, r3
 8028402:	2b00      	cmp	r3, #0
 8028404:	da18      	bge.n	8028438 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8028406:	697b      	ldr	r3, [r7, #20]
 8028408:	7858      	ldrb	r0, [r3, #1]
 802840a:	68fb      	ldr	r3, [r7, #12]
 802840c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8028410:	68fb      	ldr	r3, [r7, #12]
 8028412:	6a1a      	ldr	r2, [r3, #32]
 8028414:	2301      	movs	r3, #1
 8028416:	f7fe f841 	bl	802649c <disk_write>
 802841a:	4603      	mov	r3, r0
 802841c:	2b00      	cmp	r3, #0
 802841e:	d004      	beq.n	802842a <f_read+0x1da>
 8028420:	68fb      	ldr	r3, [r7, #12]
 8028422:	2201      	movs	r2, #1
 8028424:	755a      	strb	r2, [r3, #21]
 8028426:	2301      	movs	r3, #1
 8028428:	e04d      	b.n	80284c6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 802842a:	68fb      	ldr	r3, [r7, #12]
 802842c:	7d1b      	ldrb	r3, [r3, #20]
 802842e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8028432:	b2da      	uxtb	r2, r3
 8028434:	68fb      	ldr	r3, [r7, #12]
 8028436:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8028438:	697b      	ldr	r3, [r7, #20]
 802843a:	7858      	ldrb	r0, [r3, #1]
 802843c:	68fb      	ldr	r3, [r7, #12]
 802843e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8028442:	2301      	movs	r3, #1
 8028444:	69ba      	ldr	r2, [r7, #24]
 8028446:	f7fe f809 	bl	802645c <disk_read>
 802844a:	4603      	mov	r3, r0
 802844c:	2b00      	cmp	r3, #0
 802844e:	d004      	beq.n	802845a <f_read+0x20a>
 8028450:	68fb      	ldr	r3, [r7, #12]
 8028452:	2201      	movs	r2, #1
 8028454:	755a      	strb	r2, [r3, #21]
 8028456:	2301      	movs	r3, #1
 8028458:	e035      	b.n	80284c6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 802845a:	68fb      	ldr	r3, [r7, #12]
 802845c:	69ba      	ldr	r2, [r7, #24]
 802845e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8028460:	68fb      	ldr	r3, [r7, #12]
 8028462:	699b      	ldr	r3, [r3, #24]
 8028464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028468:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 802846c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 802846e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8028470:	687b      	ldr	r3, [r7, #4]
 8028472:	429a      	cmp	r2, r3
 8028474:	d901      	bls.n	802847a <f_read+0x22a>
 8028476:	687b      	ldr	r3, [r7, #4]
 8028478:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 802847a:	68fb      	ldr	r3, [r7, #12]
 802847c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8028480:	68fb      	ldr	r3, [r7, #12]
 8028482:	699b      	ldr	r3, [r3, #24]
 8028484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8028488:	4413      	add	r3, r2
 802848a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802848c:	4619      	mov	r1, r3
 802848e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8028490:	f7fe f8c4 	bl	802661c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8028494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8028496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8028498:	4413      	add	r3, r2
 802849a:	627b      	str	r3, [r7, #36]	@ 0x24
 802849c:	68fb      	ldr	r3, [r7, #12]
 802849e:	699a      	ldr	r2, [r3, #24]
 80284a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80284a2:	441a      	add	r2, r3
 80284a4:	68fb      	ldr	r3, [r7, #12]
 80284a6:	619a      	str	r2, [r3, #24]
 80284a8:	683b      	ldr	r3, [r7, #0]
 80284aa:	681a      	ldr	r2, [r3, #0]
 80284ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80284ae:	441a      	add	r2, r3
 80284b0:	683b      	ldr	r3, [r7, #0]
 80284b2:	601a      	str	r2, [r3, #0]
 80284b4:	687a      	ldr	r2, [r7, #4]
 80284b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80284b8:	1ad3      	subs	r3, r2, r3
 80284ba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80284bc:	687b      	ldr	r3, [r7, #4]
 80284be:	2b00      	cmp	r3, #0
 80284c0:	f47f af01 	bne.w	80282c6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80284c4:	2300      	movs	r3, #0
}
 80284c6:	4618      	mov	r0, r3
 80284c8:	3738      	adds	r7, #56	@ 0x38
 80284ca:	46bd      	mov	sp, r7
 80284cc:	bd80      	pop	{r7, pc}

080284ce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80284ce:	b580      	push	{r7, lr}
 80284d0:	b086      	sub	sp, #24
 80284d2:	af00      	add	r7, sp, #0
 80284d4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80284d6:	687b      	ldr	r3, [r7, #4]
 80284d8:	f107 0208 	add.w	r2, r7, #8
 80284dc:	4611      	mov	r1, r2
 80284de:	4618      	mov	r0, r3
 80284e0:	f7ff fc80 	bl	8027de4 <validate>
 80284e4:	4603      	mov	r3, r0
 80284e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80284e8:	7dfb      	ldrb	r3, [r7, #23]
 80284ea:	2b00      	cmp	r3, #0
 80284ec:	d168      	bne.n	80285c0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80284ee:	687b      	ldr	r3, [r7, #4]
 80284f0:	7d1b      	ldrb	r3, [r3, #20]
 80284f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80284f6:	2b00      	cmp	r3, #0
 80284f8:	d062      	beq.n	80285c0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80284fa:	687b      	ldr	r3, [r7, #4]
 80284fc:	7d1b      	ldrb	r3, [r3, #20]
 80284fe:	b25b      	sxtb	r3, r3
 8028500:	2b00      	cmp	r3, #0
 8028502:	da15      	bge.n	8028530 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8028504:	68bb      	ldr	r3, [r7, #8]
 8028506:	7858      	ldrb	r0, [r3, #1]
 8028508:	687b      	ldr	r3, [r7, #4]
 802850a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 802850e:	687b      	ldr	r3, [r7, #4]
 8028510:	6a1a      	ldr	r2, [r3, #32]
 8028512:	2301      	movs	r3, #1
 8028514:	f7fd ffc2 	bl	802649c <disk_write>
 8028518:	4603      	mov	r3, r0
 802851a:	2b00      	cmp	r3, #0
 802851c:	d001      	beq.n	8028522 <f_sync+0x54>
 802851e:	2301      	movs	r3, #1
 8028520:	e04f      	b.n	80285c2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8028522:	687b      	ldr	r3, [r7, #4]
 8028524:	7d1b      	ldrb	r3, [r3, #20]
 8028526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802852a:	b2da      	uxtb	r2, r3
 802852c:	687b      	ldr	r3, [r7, #4]
 802852e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8028530:	f7fd fcc6 	bl	8025ec0 <get_fattime>
 8028534:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8028536:	68ba      	ldr	r2, [r7, #8]
 8028538:	687b      	ldr	r3, [r7, #4]
 802853a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802853c:	4619      	mov	r1, r3
 802853e:	4610      	mov	r0, r2
 8028540:	f7fe fa9a 	bl	8026a78 <move_window>
 8028544:	4603      	mov	r3, r0
 8028546:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8028548:	7dfb      	ldrb	r3, [r7, #23]
 802854a:	2b00      	cmp	r3, #0
 802854c:	d138      	bne.n	80285c0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 802854e:	687b      	ldr	r3, [r7, #4]
 8028550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028552:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8028554:	68fb      	ldr	r3, [r7, #12]
 8028556:	330b      	adds	r3, #11
 8028558:	781a      	ldrb	r2, [r3, #0]
 802855a:	68fb      	ldr	r3, [r7, #12]
 802855c:	330b      	adds	r3, #11
 802855e:	f042 0220 	orr.w	r2, r2, #32
 8028562:	b2d2      	uxtb	r2, r2
 8028564:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8028566:	687b      	ldr	r3, [r7, #4]
 8028568:	6818      	ldr	r0, [r3, #0]
 802856a:	687b      	ldr	r3, [r7, #4]
 802856c:	689b      	ldr	r3, [r3, #8]
 802856e:	461a      	mov	r2, r3
 8028570:	68f9      	ldr	r1, [r7, #12]
 8028572:	f7fe ffa4 	bl	80274be <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8028576:	68fb      	ldr	r3, [r7, #12]
 8028578:	f103 021c 	add.w	r2, r3, #28
 802857c:	687b      	ldr	r3, [r7, #4]
 802857e:	68db      	ldr	r3, [r3, #12]
 8028580:	4619      	mov	r1, r3
 8028582:	4610      	mov	r0, r2
 8028584:	f7fe f81e 	bl	80265c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8028588:	68fb      	ldr	r3, [r7, #12]
 802858a:	3316      	adds	r3, #22
 802858c:	6939      	ldr	r1, [r7, #16]
 802858e:	4618      	mov	r0, r3
 8028590:	f7fe f818 	bl	80265c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8028594:	68fb      	ldr	r3, [r7, #12]
 8028596:	3312      	adds	r3, #18
 8028598:	2100      	movs	r1, #0
 802859a:	4618      	mov	r0, r3
 802859c:	f7fd fff7 	bl	802658e <st_word>
					fs->wflag = 1;
 80285a0:	68bb      	ldr	r3, [r7, #8]
 80285a2:	2201      	movs	r2, #1
 80285a4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80285a6:	68bb      	ldr	r3, [r7, #8]
 80285a8:	4618      	mov	r0, r3
 80285aa:	f7fe fa93 	bl	8026ad4 <sync_fs>
 80285ae:	4603      	mov	r3, r0
 80285b0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80285b2:	687b      	ldr	r3, [r7, #4]
 80285b4:	7d1b      	ldrb	r3, [r3, #20]
 80285b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80285ba:	b2da      	uxtb	r2, r3
 80285bc:	687b      	ldr	r3, [r7, #4]
 80285be:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80285c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80285c2:	4618      	mov	r0, r3
 80285c4:	3718      	adds	r7, #24
 80285c6:	46bd      	mov	sp, r7
 80285c8:	bd80      	pop	{r7, pc}

080285ca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80285ca:	b580      	push	{r7, lr}
 80285cc:	b084      	sub	sp, #16
 80285ce:	af00      	add	r7, sp, #0
 80285d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80285d2:	6878      	ldr	r0, [r7, #4]
 80285d4:	f7ff ff7b 	bl	80284ce <f_sync>
 80285d8:	4603      	mov	r3, r0
 80285da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80285dc:	7bfb      	ldrb	r3, [r7, #15]
 80285de:	2b00      	cmp	r3, #0
 80285e0:	d118      	bne.n	8028614 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80285e2:	687b      	ldr	r3, [r7, #4]
 80285e4:	f107 0208 	add.w	r2, r7, #8
 80285e8:	4611      	mov	r1, r2
 80285ea:	4618      	mov	r0, r3
 80285ec:	f7ff fbfa 	bl	8027de4 <validate>
 80285f0:	4603      	mov	r3, r0
 80285f2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80285f4:	7bfb      	ldrb	r3, [r7, #15]
 80285f6:	2b00      	cmp	r3, #0
 80285f8:	d10c      	bne.n	8028614 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80285fa:	687b      	ldr	r3, [r7, #4]
 80285fc:	691b      	ldr	r3, [r3, #16]
 80285fe:	4618      	mov	r0, r3
 8028600:	f7fe f996 	bl	8026930 <dec_lock>
 8028604:	4603      	mov	r3, r0
 8028606:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8028608:	7bfb      	ldrb	r3, [r7, #15]
 802860a:	2b00      	cmp	r3, #0
 802860c:	d102      	bne.n	8028614 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 802860e:	687b      	ldr	r3, [r7, #4]
 8028610:	2200      	movs	r2, #0
 8028612:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8028614:	7bfb      	ldrb	r3, [r7, #15]
}
 8028616:	4618      	mov	r0, r3
 8028618:	3710      	adds	r7, #16
 802861a:	46bd      	mov	sp, r7
 802861c:	bd80      	pop	{r7, pc}
	...

08028620 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8028620:	b480      	push	{r7}
 8028622:	b087      	sub	sp, #28
 8028624:	af00      	add	r7, sp, #0
 8028626:	60f8      	str	r0, [r7, #12]
 8028628:	60b9      	str	r1, [r7, #8]
 802862a:	4613      	mov	r3, r2
 802862c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 802862e:	2301      	movs	r3, #1
 8028630:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8028632:	2300      	movs	r3, #0
 8028634:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8028636:	4b1f      	ldr	r3, [pc, #124]	@ (80286b4 <FATFS_LinkDriverEx+0x94>)
 8028638:	7a5b      	ldrb	r3, [r3, #9]
 802863a:	b2db      	uxtb	r3, r3
 802863c:	2b00      	cmp	r3, #0
 802863e:	d131      	bne.n	80286a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8028640:	4b1c      	ldr	r3, [pc, #112]	@ (80286b4 <FATFS_LinkDriverEx+0x94>)
 8028642:	7a5b      	ldrb	r3, [r3, #9]
 8028644:	b2db      	uxtb	r3, r3
 8028646:	461a      	mov	r2, r3
 8028648:	4b1a      	ldr	r3, [pc, #104]	@ (80286b4 <FATFS_LinkDriverEx+0x94>)
 802864a:	2100      	movs	r1, #0
 802864c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 802864e:	4b19      	ldr	r3, [pc, #100]	@ (80286b4 <FATFS_LinkDriverEx+0x94>)
 8028650:	7a5b      	ldrb	r3, [r3, #9]
 8028652:	b2db      	uxtb	r3, r3
 8028654:	4a17      	ldr	r2, [pc, #92]	@ (80286b4 <FATFS_LinkDriverEx+0x94>)
 8028656:	009b      	lsls	r3, r3, #2
 8028658:	4413      	add	r3, r2
 802865a:	68fa      	ldr	r2, [r7, #12]
 802865c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 802865e:	4b15      	ldr	r3, [pc, #84]	@ (80286b4 <FATFS_LinkDriverEx+0x94>)
 8028660:	7a5b      	ldrb	r3, [r3, #9]
 8028662:	b2db      	uxtb	r3, r3
 8028664:	461a      	mov	r2, r3
 8028666:	4b13      	ldr	r3, [pc, #76]	@ (80286b4 <FATFS_LinkDriverEx+0x94>)
 8028668:	4413      	add	r3, r2
 802866a:	79fa      	ldrb	r2, [r7, #7]
 802866c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 802866e:	4b11      	ldr	r3, [pc, #68]	@ (80286b4 <FATFS_LinkDriverEx+0x94>)
 8028670:	7a5b      	ldrb	r3, [r3, #9]
 8028672:	b2db      	uxtb	r3, r3
 8028674:	1c5a      	adds	r2, r3, #1
 8028676:	b2d1      	uxtb	r1, r2
 8028678:	4a0e      	ldr	r2, [pc, #56]	@ (80286b4 <FATFS_LinkDriverEx+0x94>)
 802867a:	7251      	strb	r1, [r2, #9]
 802867c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 802867e:	7dbb      	ldrb	r3, [r7, #22]
 8028680:	3330      	adds	r3, #48	@ 0x30
 8028682:	b2da      	uxtb	r2, r3
 8028684:	68bb      	ldr	r3, [r7, #8]
 8028686:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8028688:	68bb      	ldr	r3, [r7, #8]
 802868a:	3301      	adds	r3, #1
 802868c:	223a      	movs	r2, #58	@ 0x3a
 802868e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8028690:	68bb      	ldr	r3, [r7, #8]
 8028692:	3302      	adds	r3, #2
 8028694:	222f      	movs	r2, #47	@ 0x2f
 8028696:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8028698:	68bb      	ldr	r3, [r7, #8]
 802869a:	3303      	adds	r3, #3
 802869c:	2200      	movs	r2, #0
 802869e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80286a0:	2300      	movs	r3, #0
 80286a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80286a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80286a6:	4618      	mov	r0, r3
 80286a8:	371c      	adds	r7, #28
 80286aa:	46bd      	mov	sp, r7
 80286ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80286b0:	4770      	bx	lr
 80286b2:	bf00      	nop
 80286b4:	24000ab4 	.word	0x24000ab4

080286b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80286b8:	b580      	push	{r7, lr}
 80286ba:	b082      	sub	sp, #8
 80286bc:	af00      	add	r7, sp, #0
 80286be:	6078      	str	r0, [r7, #4]
 80286c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80286c2:	2200      	movs	r2, #0
 80286c4:	6839      	ldr	r1, [r7, #0]
 80286c6:	6878      	ldr	r0, [r7, #4]
 80286c8:	f7ff ffaa 	bl	8028620 <FATFS_LinkDriverEx>
 80286cc:	4603      	mov	r3, r0
}
 80286ce:	4618      	mov	r0, r3
 80286d0:	3708      	adds	r7, #8
 80286d2:	46bd      	mov	sp, r7
 80286d4:	bd80      	pop	{r7, pc}

080286d6 <_ZdlPvj>:
 80286d6:	f000 bbd3 	b.w	8028e80 <_ZdlPv>

080286da <__cxa_guard_acquire>:
 80286da:	6802      	ldr	r2, [r0, #0]
 80286dc:	07d2      	lsls	r2, r2, #31
 80286de:	4603      	mov	r3, r0
 80286e0:	d405      	bmi.n	80286ee <__cxa_guard_acquire+0x14>
 80286e2:	7842      	ldrb	r2, [r0, #1]
 80286e4:	b102      	cbz	r2, 80286e8 <__cxa_guard_acquire+0xe>
 80286e6:	deff      	udf	#255	@ 0xff
 80286e8:	2001      	movs	r0, #1
 80286ea:	7058      	strb	r0, [r3, #1]
 80286ec:	4770      	bx	lr
 80286ee:	2000      	movs	r0, #0
 80286f0:	4770      	bx	lr

080286f2 <__cxa_guard_release>:
 80286f2:	2301      	movs	r3, #1
 80286f4:	6003      	str	r3, [r0, #0]
 80286f6:	4770      	bx	lr

080286f8 <_Znwj>:
 80286f8:	2801      	cmp	r0, #1
 80286fa:	bf38      	it	cc
 80286fc:	2001      	movcc	r0, #1
 80286fe:	b510      	push	{r4, lr}
 8028700:	4604      	mov	r4, r0
 8028702:	4620      	mov	r0, r4
 8028704:	f000 fc68 	bl	8028fd8 <malloc>
 8028708:	b100      	cbz	r0, 802870c <_Znwj+0x14>
 802870a:	bd10      	pop	{r4, pc}
 802870c:	f000 fbba 	bl	8028e84 <_ZSt15get_new_handlerv>
 8028710:	b908      	cbnz	r0, 8028716 <_Znwj+0x1e>
 8028712:	f000 fc59 	bl	8028fc8 <abort>
 8028716:	4780      	blx	r0
 8028718:	e7f3      	b.n	8028702 <_Znwj+0xa>

0802871a <_ZNSaIcEC1Ev>:
 802871a:	4770      	bx	lr

0802871c <_ZNSaIcED1Ev>:
 802871c:	4770      	bx	lr

0802871e <_ZSt17__throw_bad_allocv>:
 802871e:	b508      	push	{r3, lr}
 8028720:	f000 fc52 	bl	8028fc8 <abort>

08028724 <_ZSt28__throw_bad_array_new_lengthv>:
 8028724:	b508      	push	{r3, lr}
 8028726:	f000 fc4f 	bl	8028fc8 <abort>

0802872a <_ZSt19__throw_logic_errorPKc>:
 802872a:	b508      	push	{r3, lr}
 802872c:	f000 fc4c 	bl	8028fc8 <abort>

08028730 <_ZSt24__throw_invalid_argumentPKc>:
 8028730:	b508      	push	{r3, lr}
 8028732:	f000 fc49 	bl	8028fc8 <abort>

08028736 <_ZSt20__throw_length_errorPKc>:
 8028736:	b508      	push	{r3, lr}
 8028738:	f000 fc46 	bl	8028fc8 <abort>

0802873c <_ZSt20__throw_out_of_rangePKc>:
 802873c:	b508      	push	{r3, lr}
 802873e:	f000 fc43 	bl	8028fc8 <abort>

08028742 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8028742:	b40f      	push	{r0, r1, r2, r3}
 8028744:	b508      	push	{r3, lr}
 8028746:	f000 fc3f 	bl	8028fc8 <abort>

0802874a <_ZSt25__throw_bad_function_callv>:
 802874a:	b508      	push	{r3, lr}
 802874c:	f000 fc3c 	bl	8028fc8 <abort>

08028750 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 8028750:	4901      	ldr	r1, [pc, #4]	@ (8028758 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 8028752:	f000 bc23 	b.w	8028f9c <_ZNKSt9type_info7__equalERKS_>
 8028756:	bf00      	nop
 8028758:	0802b85c 	.word	0x0802b85c

0802875c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 802875c:	b10a      	cbz	r2, 8028762 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 802875e:	f001 b8be 	b.w	80298de <memcpy>
 8028762:	4770      	bx	lr

08028764 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8028764:	b10a      	cbz	r2, 802876a <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8028766:	f000 bfc1 	b.w	80296ec <memcmp>
 802876a:	4610      	mov	r0, r2
 802876c:	4770      	bx	lr

0802876e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 802876e:	6001      	str	r1, [r0, #0]
 8028770:	4770      	bx	lr

08028772 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8028772:	6800      	ldr	r0, [r0, #0]
 8028774:	4770      	bx	lr

08028776 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8028776:	3008      	adds	r0, #8
 8028778:	4770      	bx	lr

0802877a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 802877a:	6081      	str	r1, [r0, #8]
 802877c:	4770      	bx	lr

0802877e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 802877e:	6803      	ldr	r3, [r0, #0]
 8028780:	6041      	str	r1, [r0, #4]
 8028782:	2200      	movs	r2, #0
 8028784:	545a      	strb	r2, [r3, r1]
 8028786:	4770      	bx	lr

08028788 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8028788:	f850 3b08 	ldr.w	r3, [r0], #8
 802878c:	1a1b      	subs	r3, r3, r0
 802878e:	4258      	negs	r0, r3
 8028790:	4158      	adcs	r0, r3
 8028792:	4770      	bx	lr

08028794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8028794:	b508      	push	{r3, lr}
 8028796:	680b      	ldr	r3, [r1, #0]
 8028798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802879c:	d302      	bcc.n	80287a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 802879e:	480d      	ldr	r0, [pc, #52]	@ (80287d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80287a0:	f7ff ffc9 	bl	8028736 <_ZSt20__throw_length_errorPKc>
 80287a4:	4293      	cmp	r3, r2
 80287a6:	d90b      	bls.n	80287c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80287a8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80287ac:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80287b0:	d206      	bcs.n	80287c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80287b2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80287b6:	bf2a      	itet	cs
 80287b8:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 80287bc:	6008      	strcc	r0, [r1, #0]
 80287be:	600b      	strcs	r3, [r1, #0]
 80287c0:	6808      	ldr	r0, [r1, #0]
 80287c2:	3001      	adds	r0, #1
 80287c4:	d501      	bpl.n	80287ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80287c6:	f7ff ffaa 	bl	802871e <_ZSt17__throw_bad_allocv>
 80287ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80287ce:	f7ff bf93 	b.w	80286f8 <_Znwj>
 80287d2:	bf00      	nop
 80287d4:	0802b864 	.word	0x0802b864

080287d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80287d8:	b510      	push	{r4, lr}
 80287da:	4604      	mov	r4, r0
 80287dc:	f7ff ffd4 	bl	8028788 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80287e0:	b920      	cbnz	r0, 80287ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 80287e2:	6820      	ldr	r0, [r4, #0]
 80287e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80287e8:	f000 bb4a 	b.w	8028e80 <_ZdlPv>
 80287ec:	bd10      	pop	{r4, pc}
	...

080287f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80287f0:	b508      	push	{r3, lr}
 80287f2:	4603      	mov	r3, r0
 80287f4:	4608      	mov	r0, r1
 80287f6:	685b      	ldr	r3, [r3, #4]
 80287f8:	4298      	cmp	r0, r3
 80287fa:	4611      	mov	r1, r2
 80287fc:	d903      	bls.n	8028806 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 80287fe:	4602      	mov	r2, r0
 8028800:	4801      	ldr	r0, [pc, #4]	@ (8028808 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 8028802:	f7ff ff9e 	bl	8028742 <_ZSt24__throw_out_of_range_fmtPKcz>
 8028806:	bd08      	pop	{r3, pc}
 8028808:	0802b87c 	.word	0x0802b87c

0802880c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 802880c:	6840      	ldr	r0, [r0, #4]
 802880e:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8028812:	3901      	subs	r1, #1
 8028814:	1a09      	subs	r1, r1, r0
 8028816:	4291      	cmp	r1, r2
 8028818:	b508      	push	{r3, lr}
 802881a:	d202      	bcs.n	8028822 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 802881c:	4618      	mov	r0, r3
 802881e:	f7ff ff8a 	bl	8028736 <_ZSt20__throw_length_errorPKc>
 8028822:	bd08      	pop	{r3, pc}

08028824 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8028824:	6803      	ldr	r3, [r0, #0]
 8028826:	428b      	cmp	r3, r1
 8028828:	d806      	bhi.n	8028838 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 802882a:	6842      	ldr	r2, [r0, #4]
 802882c:	4413      	add	r3, r2
 802882e:	4299      	cmp	r1, r3
 8028830:	bf94      	ite	ls
 8028832:	2000      	movls	r0, #0
 8028834:	2001      	movhi	r0, #1
 8028836:	4770      	bx	lr
 8028838:	2001      	movs	r0, #1
 802883a:	4770      	bx	lr

0802883c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 802883c:	2a01      	cmp	r2, #1
 802883e:	b410      	push	{r4}
 8028840:	d104      	bne.n	802884c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8028842:	780a      	ldrb	r2, [r1, #0]
 8028844:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028848:	7002      	strb	r2, [r0, #0]
 802884a:	4770      	bx	lr
 802884c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028850:	f7ff bf84 	b.w	802875c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08028854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8028854:	2a01      	cmp	r2, #1
 8028856:	b430      	push	{r4, r5}
 8028858:	d103      	bne.n	8028862 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 802885a:	780b      	ldrb	r3, [r1, #0]
 802885c:	7003      	strb	r3, [r0, #0]
 802885e:	bc30      	pop	{r4, r5}
 8028860:	4770      	bx	lr
 8028862:	2a00      	cmp	r2, #0
 8028864:	d0fb      	beq.n	802885e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8028866:	bc30      	pop	{r4, r5}
 8028868:	f000 bf50 	b.w	802970c <memmove>

0802886c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 802886c:	460b      	mov	r3, r1
 802886e:	2b01      	cmp	r3, #1
 8028870:	b410      	push	{r4}
 8028872:	4611      	mov	r1, r2
 8028874:	4604      	mov	r4, r0
 8028876:	d103      	bne.n	8028880 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8028878:	7022      	strb	r2, [r4, #0]
 802887a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802887e:	4770      	bx	lr
 8028880:	2b00      	cmp	r3, #0
 8028882:	d0fa      	beq.n	802887a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8028884:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028888:	461a      	mov	r2, r3
 802888a:	f000 bf59 	b.w	8029740 <memset>

0802888e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 802888e:	b508      	push	{r3, lr}
 8028890:	1a52      	subs	r2, r2, r1
 8028892:	f7ff ffd3 	bl	802883c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028896:	bd08      	pop	{r3, pc}

08028898 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8028898:	b508      	push	{r3, lr}
 802889a:	1a52      	subs	r2, r2, r1
 802889c:	f7ff ffce 	bl	802883c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80288a0:	bd08      	pop	{r3, pc}

080288a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80288a2:	f100 0208 	add.w	r2, r0, #8
 80288a6:	6002      	str	r2, [r0, #0]
 80288a8:	2200      	movs	r2, #0
 80288aa:	6042      	str	r2, [r0, #4]
 80288ac:	7202      	strb	r2, [r0, #8]
 80288ae:	4770      	bx	lr

080288b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 80288b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80288b2:	f100 0708 	add.w	r7, r0, #8
 80288b6:	6007      	str	r7, [r0, #0]
 80288b8:	4605      	mov	r5, r0
 80288ba:	4608      	mov	r0, r1
 80288bc:	460c      	mov	r4, r1
 80288be:	f7ff ff63 	bl	8028788 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80288c2:	f104 0608 	add.w	r6, r4, #8
 80288c6:	6862      	ldr	r2, [r4, #4]
 80288c8:	b160      	cbz	r0, 80288e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 80288ca:	3201      	adds	r2, #1
 80288cc:	4631      	mov	r1, r6
 80288ce:	4638      	mov	r0, r7
 80288d0:	f7ff ff44 	bl	802875c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 80288d4:	6863      	ldr	r3, [r4, #4]
 80288d6:	606b      	str	r3, [r5, #4]
 80288d8:	2300      	movs	r3, #0
 80288da:	7223      	strb	r3, [r4, #8]
 80288dc:	6026      	str	r6, [r4, #0]
 80288de:	6063      	str	r3, [r4, #4]
 80288e0:	4628      	mov	r0, r5
 80288e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80288e4:	6823      	ldr	r3, [r4, #0]
 80288e6:	602b      	str	r3, [r5, #0]
 80288e8:	68a3      	ldr	r3, [r4, #8]
 80288ea:	60ab      	str	r3, [r5, #8]
 80288ec:	e7f2      	b.n	80288d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

080288ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80288ee:	b510      	push	{r4, lr}
 80288f0:	4604      	mov	r4, r0
 80288f2:	f7ff ff71 	bl	80287d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80288f6:	4620      	mov	r0, r4
 80288f8:	bd10      	pop	{r4, pc}

080288fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80288fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80288fc:	460c      	mov	r4, r1
 80288fe:	4605      	mov	r5, r0
 8028900:	f7ff ff42 	bl	8028788 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8028904:	4606      	mov	r6, r0
 8028906:	4620      	mov	r0, r4
 8028908:	f7ff ff3e 	bl	8028788 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 802890c:	b190      	cbz	r0, 8028934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 802890e:	42a5      	cmp	r5, r4
 8028910:	d00a      	beq.n	8028928 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8028912:	6862      	ldr	r2, [r4, #4]
 8028914:	b11a      	cbz	r2, 802891e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 8028916:	6821      	ldr	r1, [r4, #0]
 8028918:	6828      	ldr	r0, [r5, #0]
 802891a:	f7ff ff8f 	bl	802883c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 802891e:	6863      	ldr	r3, [r4, #4]
 8028920:	682a      	ldr	r2, [r5, #0]
 8028922:	606b      	str	r3, [r5, #4]
 8028924:	2100      	movs	r1, #0
 8028926:	54d1      	strb	r1, [r2, r3]
 8028928:	6822      	ldr	r2, [r4, #0]
 802892a:	2300      	movs	r3, #0
 802892c:	6063      	str	r3, [r4, #4]
 802892e:	7013      	strb	r3, [r2, #0]
 8028930:	4628      	mov	r0, r5
 8028932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028934:	b90e      	cbnz	r6, 802893a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8028936:	6828      	ldr	r0, [r5, #0]
 8028938:	68af      	ldr	r7, [r5, #8]
 802893a:	6823      	ldr	r3, [r4, #0]
 802893c:	602b      	str	r3, [r5, #0]
 802893e:	6863      	ldr	r3, [r4, #4]
 8028940:	606b      	str	r3, [r5, #4]
 8028942:	68a3      	ldr	r3, [r4, #8]
 8028944:	60ab      	str	r3, [r5, #8]
 8028946:	b110      	cbz	r0, 802894e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 8028948:	6020      	str	r0, [r4, #0]
 802894a:	60a7      	str	r7, [r4, #8]
 802894c:	e7ec      	b.n	8028928 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 802894e:	f104 0308 	add.w	r3, r4, #8
 8028952:	6023      	str	r3, [r4, #0]
 8028954:	e7e8      	b.n	8028928 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

08028956 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8028956:	b510      	push	{r4, lr}
 8028958:	4604      	mov	r4, r0
 802895a:	f7ff ff15 	bl	8028788 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 802895e:	b908      	cbnz	r0, 8028964 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8028960:	68a0      	ldr	r0, [r4, #8]
 8028962:	bd10      	pop	{r4, pc}
 8028964:	200f      	movs	r0, #15
 8028966:	e7fc      	b.n	8028962 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08028968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8028968:	4288      	cmp	r0, r1
 802896a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802896c:	4604      	mov	r4, r0
 802896e:	460e      	mov	r6, r1
 8028970:	d01d      	beq.n	80289ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x46>
 8028972:	684d      	ldr	r5, [r1, #4]
 8028974:	f7ff ffef 	bl	8028956 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028978:	42a8      	cmp	r0, r5
 802897a:	4602      	mov	r2, r0
 802897c:	d211      	bcs.n	80289a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3a>
 802897e:	a901      	add	r1, sp, #4
 8028980:	4620      	mov	r0, r4
 8028982:	9501      	str	r5, [sp, #4]
 8028984:	f7ff ff06 	bl	8028794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8028988:	4607      	mov	r7, r0
 802898a:	4620      	mov	r0, r4
 802898c:	f7ff ff24 	bl	80287d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8028990:	9b01      	ldr	r3, [sp, #4]
 8028992:	6027      	str	r7, [r4, #0]
 8028994:	60a3      	str	r3, [r4, #8]
 8028996:	6831      	ldr	r1, [r6, #0]
 8028998:	6820      	ldr	r0, [r4, #0]
 802899a:	462a      	mov	r2, r5
 802899c:	f7ff ff4e 	bl	802883c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80289a0:	e001      	b.n	80289a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x3e>
 80289a2:	2d00      	cmp	r5, #0
 80289a4:	d1f7      	bne.n	8028996 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x2e>
 80289a6:	6823      	ldr	r3, [r4, #0]
 80289a8:	6065      	str	r5, [r4, #4]
 80289aa:	2200      	movs	r2, #0
 80289ac:	555a      	strb	r2, [r3, r5]
 80289ae:	b003      	add	sp, #12
 80289b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080289b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 80289b2:	b510      	push	{r4, lr}
 80289b4:	4604      	mov	r4, r0
 80289b6:	f7ff ffd7 	bl	8028968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80289ba:	4620      	mov	r0, r4
 80289bc:	bd10      	pop	{r4, pc}

080289be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80289be:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80289c2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80289c4:	461f      	mov	r7, r3
 80289c6:	6843      	ldr	r3, [r0, #4]
 80289c8:	eb01 0802 	add.w	r8, r1, r2
 80289cc:	1ab2      	subs	r2, r6, r2
 80289ce:	441a      	add	r2, r3
 80289d0:	4604      	mov	r4, r0
 80289d2:	460d      	mov	r5, r1
 80289d4:	eba3 0908 	sub.w	r9, r3, r8
 80289d8:	9201      	str	r2, [sp, #4]
 80289da:	f7ff ffbc 	bl	8028956 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80289de:	a901      	add	r1, sp, #4
 80289e0:	4602      	mov	r2, r0
 80289e2:	4620      	mov	r0, r4
 80289e4:	f7ff fed6 	bl	8028794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80289e8:	4682      	mov	sl, r0
 80289ea:	b11d      	cbz	r5, 80289f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 80289ec:	6821      	ldr	r1, [r4, #0]
 80289ee:	462a      	mov	r2, r5
 80289f0:	f7ff ff24 	bl	802883c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80289f4:	b137      	cbz	r7, 8028a04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 80289f6:	b12e      	cbz	r6, 8028a04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 80289f8:	4632      	mov	r2, r6
 80289fa:	4639      	mov	r1, r7
 80289fc:	eb0a 0005 	add.w	r0, sl, r5
 8028a00:	f7ff ff1c 	bl	802883c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028a04:	f1b9 0f00 	cmp.w	r9, #0
 8028a08:	d007      	beq.n	8028a1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8028a0a:	6821      	ldr	r1, [r4, #0]
 8028a0c:	4435      	add	r5, r6
 8028a0e:	464a      	mov	r2, r9
 8028a10:	4441      	add	r1, r8
 8028a12:	eb0a 0005 	add.w	r0, sl, r5
 8028a16:	f7ff ff11 	bl	802883c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028a1a:	4620      	mov	r0, r4
 8028a1c:	f7ff fedc 	bl	80287d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8028a20:	9b01      	ldr	r3, [sp, #4]
 8028a22:	f8c4 a000 	str.w	sl, [r4]
 8028a26:	60a3      	str	r3, [r4, #8]
 8028a28:	b002      	add	sp, #8
 8028a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08028a2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8028a2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8028a30:	4604      	mov	r4, r0
 8028a32:	9101      	str	r1, [sp, #4]
 8028a34:	f7ff ff8f 	bl	8028956 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028a38:	9b01      	ldr	r3, [sp, #4]
 8028a3a:	4283      	cmp	r3, r0
 8028a3c:	4602      	mov	r2, r0
 8028a3e:	d90f      	bls.n	8028a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 8028a40:	a901      	add	r1, sp, #4
 8028a42:	4620      	mov	r0, r4
 8028a44:	f7ff fea6 	bl	8028794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8028a48:	6862      	ldr	r2, [r4, #4]
 8028a4a:	6821      	ldr	r1, [r4, #0]
 8028a4c:	3201      	adds	r2, #1
 8028a4e:	4605      	mov	r5, r0
 8028a50:	f7ff fef4 	bl	802883c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028a54:	4620      	mov	r0, r4
 8028a56:	f7ff febf 	bl	80287d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8028a5a:	9b01      	ldr	r3, [sp, #4]
 8028a5c:	6025      	str	r5, [r4, #0]
 8028a5e:	60a3      	str	r3, [r4, #8]
 8028a60:	b003      	add	sp, #12
 8028a62:	bd30      	pop	{r4, r5, pc}

08028a64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 8028a64:	6802      	ldr	r2, [r0, #0]
 8028a66:	2300      	movs	r3, #0
 8028a68:	6043      	str	r3, [r0, #4]
 8028a6a:	7013      	strb	r3, [r2, #0]
 8028a6c:	4770      	bx	lr

08028a6e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5emptyEv>:
 8028a6e:	6840      	ldr	r0, [r0, #4]
 8028a70:	fab0 f080 	clz	r0, r0
 8028a74:	0940      	lsrs	r0, r0, #5
 8028a76:	4770      	bx	lr

08028a78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8028a78:	6800      	ldr	r0, [r0, #0]
 8028a7a:	4408      	add	r0, r1
 8028a7c:	4770      	bx	lr

08028a7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8028a7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028a80:	6846      	ldr	r6, [r0, #4]
 8028a82:	4604      	mov	r4, r0
 8028a84:	460f      	mov	r7, r1
 8028a86:	f7ff ff66 	bl	8028956 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028a8a:	1c75      	adds	r5, r6, #1
 8028a8c:	4285      	cmp	r5, r0
 8028a8e:	d907      	bls.n	8028aa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x22>
 8028a90:	2301      	movs	r3, #1
 8028a92:	9300      	str	r3, [sp, #0]
 8028a94:	2300      	movs	r3, #0
 8028a96:	461a      	mov	r2, r3
 8028a98:	4631      	mov	r1, r6
 8028a9a:	4620      	mov	r0, r4
 8028a9c:	f7ff ff8f 	bl	80289be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8028aa0:	6823      	ldr	r3, [r4, #0]
 8028aa2:	559f      	strb	r7, [r3, r6]
 8028aa4:	6823      	ldr	r3, [r4, #0]
 8028aa6:	6065      	str	r5, [r4, #4]
 8028aa8:	2200      	movs	r2, #0
 8028aaa:	555a      	strb	r2, [r3, r5]
 8028aac:	b003      	add	sp, #12
 8028aae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08028ab0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8028ab0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8028ab4:	4616      	mov	r6, r2
 8028ab6:	461d      	mov	r5, r3
 8028ab8:	4604      	mov	r4, r0
 8028aba:	4b1b      	ldr	r3, [pc, #108]	@ (8028b28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 8028abc:	462a      	mov	r2, r5
 8028abe:	460f      	mov	r7, r1
 8028ac0:	4631      	mov	r1, r6
 8028ac2:	f7ff fea3 	bl	802880c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8028ac6:	4620      	mov	r0, r4
 8028ac8:	f7ff ff45 	bl	8028956 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028acc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8028ad0:	eba5 0806 	sub.w	r8, r5, r6
 8028ad4:	44c8      	add	r8, r9
 8028ad6:	4540      	cmp	r0, r8
 8028ad8:	d31d      	bcc.n	8028b16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 8028ada:	19f3      	adds	r3, r6, r7
 8028adc:	ebb9 0203 	subs.w	r2, r9, r3
 8028ae0:	d007      	beq.n	8028af2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8028ae2:	42ae      	cmp	r6, r5
 8028ae4:	d005      	beq.n	8028af2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8028ae6:	6820      	ldr	r0, [r4, #0]
 8028ae8:	4438      	add	r0, r7
 8028aea:	1981      	adds	r1, r0, r6
 8028aec:	4428      	add	r0, r5
 8028aee:	f7ff feb1 	bl	8028854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028af2:	b135      	cbz	r5, 8028b02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 8028af4:	6820      	ldr	r0, [r4, #0]
 8028af6:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 8028afa:	4629      	mov	r1, r5
 8028afc:	4438      	add	r0, r7
 8028afe:	f7ff feb5 	bl	802886c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8028b02:	6823      	ldr	r3, [r4, #0]
 8028b04:	f8c4 8004 	str.w	r8, [r4, #4]
 8028b08:	2200      	movs	r2, #0
 8028b0a:	4620      	mov	r0, r4
 8028b0c:	f803 2008 	strb.w	r2, [r3, r8]
 8028b10:	b003      	add	sp, #12
 8028b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028b16:	9500      	str	r5, [sp, #0]
 8028b18:	2300      	movs	r3, #0
 8028b1a:	4632      	mov	r2, r6
 8028b1c:	4639      	mov	r1, r7
 8028b1e:	4620      	mov	r0, r4
 8028b20:	f7ff ff4d 	bl	80289be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8028b24:	e7e5      	b.n	8028af2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8028b26:	bf00      	nop
 8028b28:	0802b8b3 	.word	0x0802b8b3

08028b2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 8028b2c:	b507      	push	{r0, r1, r2, lr}
 8028b2e:	9200      	str	r2, [sp, #0]
 8028b30:	460b      	mov	r3, r1
 8028b32:	2200      	movs	r2, #0
 8028b34:	6841      	ldr	r1, [r0, #4]
 8028b36:	f7ff ffbb 	bl	8028ab0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 8028b3a:	b003      	add	sp, #12
 8028b3c:	f85d fb04 	ldr.w	pc, [sp], #4

08028b40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8028b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b44:	b085      	sub	sp, #20
 8028b46:	4680      	mov	r8, r0
 8028b48:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8028b4a:	4614      	mov	r4, r2
 8028b4c:	4689      	mov	r9, r1
 8028b4e:	462a      	mov	r2, r5
 8028b50:	4621      	mov	r1, r4
 8028b52:	461f      	mov	r7, r3
 8028b54:	4b37      	ldr	r3, [pc, #220]	@ (8028c34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 8028b56:	f7ff fe59 	bl	802880c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8028b5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8028b5e:	9303      	str	r3, [sp, #12]
 8028b60:	eba5 0b04 	sub.w	fp, r5, r4
 8028b64:	4640      	mov	r0, r8
 8028b66:	eb03 0a0b 	add.w	sl, r3, fp
 8028b6a:	f7ff fef4 	bl	8028956 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028b6e:	4550      	cmp	r0, sl
 8028b70:	d354      	bcc.n	8028c1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 8028b72:	f8d8 6000 	ldr.w	r6, [r8]
 8028b76:	9b03      	ldr	r3, [sp, #12]
 8028b78:	444e      	add	r6, r9
 8028b7a:	4639      	mov	r1, r7
 8028b7c:	44a1      	add	r9, r4
 8028b7e:	4640      	mov	r0, r8
 8028b80:	eba3 0909 	sub.w	r9, r3, r9
 8028b84:	f7ff fe4e 	bl	8028824 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8028b88:	b180      	cbz	r0, 8028bac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 8028b8a:	f1b9 0f00 	cmp.w	r9, #0
 8028b8e:	d006      	beq.n	8028b9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8028b90:	42ac      	cmp	r4, r5
 8028b92:	d004      	beq.n	8028b9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 8028b94:	464a      	mov	r2, r9
 8028b96:	1931      	adds	r1, r6, r4
 8028b98:	1970      	adds	r0, r6, r5
 8028b9a:	f7ff fe5b 	bl	8028854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028b9e:	b315      	cbz	r5, 8028be6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028ba0:	462a      	mov	r2, r5
 8028ba2:	4639      	mov	r1, r7
 8028ba4:	4630      	mov	r0, r6
 8028ba6:	f7ff fe49 	bl	802883c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028baa:	e01c      	b.n	8028be6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028bac:	b135      	cbz	r5, 8028bbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 8028bae:	42ac      	cmp	r4, r5
 8028bb0:	d33c      	bcc.n	8028c2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 8028bb2:	462a      	mov	r2, r5
 8028bb4:	4639      	mov	r1, r7
 8028bb6:	4630      	mov	r0, r6
 8028bb8:	f7ff fe4c 	bl	8028854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028bbc:	f1b9 0f00 	cmp.w	r9, #0
 8028bc0:	d011      	beq.n	8028be6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028bc2:	42ac      	cmp	r4, r5
 8028bc4:	d00f      	beq.n	8028be6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028bc6:	464a      	mov	r2, r9
 8028bc8:	1931      	adds	r1, r6, r4
 8028bca:	1970      	adds	r0, r6, r5
 8028bcc:	f7ff fe42 	bl	8028854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028bd0:	42ac      	cmp	r4, r5
 8028bd2:	d208      	bcs.n	8028be6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028bd4:	4434      	add	r4, r6
 8028bd6:	197b      	adds	r3, r7, r5
 8028bd8:	429c      	cmp	r4, r3
 8028bda:	d30f      	bcc.n	8028bfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 8028bdc:	462a      	mov	r2, r5
 8028bde:	4639      	mov	r1, r7
 8028be0:	4630      	mov	r0, r6
 8028be2:	f7ff fe37 	bl	8028854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028be6:	f8d8 3000 	ldr.w	r3, [r8]
 8028bea:	f8c8 a004 	str.w	sl, [r8, #4]
 8028bee:	2200      	movs	r2, #0
 8028bf0:	4640      	mov	r0, r8
 8028bf2:	f803 200a 	strb.w	r2, [r3, sl]
 8028bf6:	b005      	add	sp, #20
 8028bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028bfc:	42bc      	cmp	r4, r7
 8028bfe:	d803      	bhi.n	8028c08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 8028c00:	462a      	mov	r2, r5
 8028c02:	eb07 010b 	add.w	r1, r7, fp
 8028c06:	e7cd      	b.n	8028ba4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 8028c08:	1be4      	subs	r4, r4, r7
 8028c0a:	4622      	mov	r2, r4
 8028c0c:	4639      	mov	r1, r7
 8028c0e:	4630      	mov	r0, r6
 8028c10:	f7ff fe20 	bl	8028854 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8028c14:	1b2a      	subs	r2, r5, r4
 8028c16:	1971      	adds	r1, r6, r5
 8028c18:	1930      	adds	r0, r6, r4
 8028c1a:	e7c4      	b.n	8028ba6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8028c1c:	9500      	str	r5, [sp, #0]
 8028c1e:	463b      	mov	r3, r7
 8028c20:	4622      	mov	r2, r4
 8028c22:	4649      	mov	r1, r9
 8028c24:	4640      	mov	r0, r8
 8028c26:	f7ff feca 	bl	80289be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8028c2a:	e7dc      	b.n	8028be6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 8028c2c:	f1b9 0f00 	cmp.w	r9, #0
 8028c30:	d0d0      	beq.n	8028bd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 8028c32:	e7c8      	b.n	8028bc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 8028c34:	0802b8d0 	.word	0x0802b8d0

08028c38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKcj>:
 8028c38:	b507      	push	{r0, r1, r2, lr}
 8028c3a:	9200      	str	r2, [sp, #0]
 8028c3c:	460b      	mov	r3, r1
 8028c3e:	6842      	ldr	r2, [r0, #4]
 8028c40:	2100      	movs	r1, #0
 8028c42:	f7ff ff7d 	bl	8028b40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8028c46:	b003      	add	sp, #12
 8028c48:	f85d fb04 	ldr.w	pc, [sp], #4

08028c4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8028c4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8028c50:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8028c54:	4604      	mov	r4, r0
 8028c56:	eb02 0708 	add.w	r7, r2, r8
 8028c5a:	460e      	mov	r6, r1
 8028c5c:	4615      	mov	r5, r2
 8028c5e:	f7ff fe7a 	bl	8028956 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8028c62:	42b8      	cmp	r0, r7
 8028c64:	d30e      	bcc.n	8028c84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x38>
 8028c66:	b12d      	cbz	r5, 8028c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
 8028c68:	6820      	ldr	r0, [r4, #0]
 8028c6a:	462a      	mov	r2, r5
 8028c6c:	4631      	mov	r1, r6
 8028c6e:	4440      	add	r0, r8
 8028c70:	f7ff fde4 	bl	802883c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8028c74:	6823      	ldr	r3, [r4, #0]
 8028c76:	6067      	str	r7, [r4, #4]
 8028c78:	2200      	movs	r2, #0
 8028c7a:	4620      	mov	r0, r4
 8028c7c:	55da      	strb	r2, [r3, r7]
 8028c7e:	b002      	add	sp, #8
 8028c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028c84:	9500      	str	r5, [sp, #0]
 8028c86:	4633      	mov	r3, r6
 8028c88:	2200      	movs	r2, #0
 8028c8a:	4641      	mov	r1, r8
 8028c8c:	4620      	mov	r0, r4
 8028c8e:	f7ff fe96 	bl	80289be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8028c92:	e7ef      	b.n	8028c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>

08028c94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 8028c94:	b570      	push	{r4, r5, r6, lr}
 8028c96:	4b06      	ldr	r3, [pc, #24]	@ (8028cb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8028c98:	4604      	mov	r4, r0
 8028c9a:	460d      	mov	r5, r1
 8028c9c:	4616      	mov	r6, r2
 8028c9e:	2100      	movs	r1, #0
 8028ca0:	f7ff fdb4 	bl	802880c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8028ca4:	4632      	mov	r2, r6
 8028ca6:	4629      	mov	r1, r5
 8028ca8:	4620      	mov	r0, r4
 8028caa:	f7ff ffcf 	bl	8028c4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8028cae:	bd70      	pop	{r4, r5, r6, pc}
 8028cb0:	0802b8e9 	.word	0x0802b8e9

08028cb4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8028cb4:	6800      	ldr	r0, [r0, #0]
 8028cb6:	4770      	bx	lr

08028cb8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_>:
 8028cb8:	b538      	push	{r3, r4, r5, lr}
 8028cba:	6845      	ldr	r5, [r0, #4]
 8028cbc:	684c      	ldr	r4, [r1, #4]
 8028cbe:	6800      	ldr	r0, [r0, #0]
 8028cc0:	6809      	ldr	r1, [r1, #0]
 8028cc2:	42a5      	cmp	r5, r4
 8028cc4:	462a      	mov	r2, r5
 8028cc6:	bf28      	it	cs
 8028cc8:	4622      	movcs	r2, r4
 8028cca:	f7ff fd4b 	bl	8028764 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8028cce:	b900      	cbnz	r0, 8028cd2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_+0x1a>
 8028cd0:	1b28      	subs	r0, r5, r4
 8028cd2:	bd38      	pop	{r3, r4, r5, pc}

08028cd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8028cd4:	6001      	str	r1, [r0, #0]
 8028cd6:	4770      	bx	lr

08028cd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8028cd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028cda:	1a53      	subs	r3, r2, r1
 8028cdc:	2b0f      	cmp	r3, #15
 8028cde:	4604      	mov	r4, r0
 8028ce0:	460d      	mov	r5, r1
 8028ce2:	4616      	mov	r6, r2
 8028ce4:	9301      	str	r3, [sp, #4]
 8028ce6:	d906      	bls.n	8028cf6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8028ce8:	2200      	movs	r2, #0
 8028cea:	a901      	add	r1, sp, #4
 8028cec:	f7ff fd52 	bl	8028794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8028cf0:	9b01      	ldr	r3, [sp, #4]
 8028cf2:	6020      	str	r0, [r4, #0]
 8028cf4:	60a3      	str	r3, [r4, #8]
 8028cf6:	4632      	mov	r2, r6
 8028cf8:	4629      	mov	r1, r5
 8028cfa:	6820      	ldr	r0, [r4, #0]
 8028cfc:	f7ff fdc7 	bl	802888e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8028d00:	9b01      	ldr	r3, [sp, #4]
 8028d02:	6822      	ldr	r2, [r4, #0]
 8028d04:	6063      	str	r3, [r4, #4]
 8028d06:	2100      	movs	r1, #0
 8028d08:	54d1      	strb	r1, [r2, r3]
 8028d0a:	b002      	add	sp, #8
 8028d0c:	bd70      	pop	{r4, r5, r6, pc}

08028d0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8028d0e:	f100 0208 	add.w	r2, r0, #8
 8028d12:	b510      	push	{r4, lr}
 8028d14:	6002      	str	r2, [r0, #0]
 8028d16:	e9d1 1200 	ldrd	r1, r2, [r1]
 8028d1a:	4604      	mov	r4, r0
 8028d1c:	f04f 0300 	mov.w	r3, #0
 8028d20:	440a      	add	r2, r1
 8028d22:	f7ff ffd9 	bl	8028cd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8028d26:	4620      	mov	r0, r4
 8028d28:	bd10      	pop	{r4, pc}
	...

08028d2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 8028d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028d30:	4698      	mov	r8, r3
 8028d32:	f100 0308 	add.w	r3, r0, #8
 8028d36:	460d      	mov	r5, r1
 8028d38:	4617      	mov	r7, r2
 8028d3a:	6003      	str	r3, [r0, #0]
 8028d3c:	680e      	ldr	r6, [r1, #0]
 8028d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8028d6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 8028d40:	4604      	mov	r4, r0
 8028d42:	4639      	mov	r1, r7
 8028d44:	4628      	mov	r0, r5
 8028d46:	f7ff fd53 	bl	80287f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8028d4a:	686a      	ldr	r2, [r5, #4]
 8028d4c:	1831      	adds	r1, r6, r0
 8028d4e:	1bd2      	subs	r2, r2, r7
 8028d50:	4620      	mov	r0, r4
 8028d52:	f04f 0300 	mov.w	r3, #0
 8028d56:	4542      	cmp	r2, r8
 8028d58:	bf94      	ite	ls
 8028d5a:	188a      	addls	r2, r1, r2
 8028d5c:	eb01 0208 	addhi.w	r2, r1, r8
 8028d60:	f7de ff6d 	bl	8007c3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8028d64:	4620      	mov	r0, r4
 8028d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028d6a:	bf00      	nop
 8028d6c:	0802b8fe 	.word	0x0802b8fe

08028d70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8028d70:	b570      	push	{r4, r5, r6, lr}
 8028d72:	460d      	mov	r5, r1
 8028d74:	4604      	mov	r4, r0
 8028d76:	4611      	mov	r1, r2
 8028d78:	4628      	mov	r0, r5
 8028d7a:	4a06      	ldr	r2, [pc, #24]	@ (8028d94 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8028d7c:	461e      	mov	r6, r3
 8028d7e:	f7ff fd37 	bl	80287f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8028d82:	4633      	mov	r3, r6
 8028d84:	4602      	mov	r2, r0
 8028d86:	4629      	mov	r1, r5
 8028d88:	4620      	mov	r0, r4
 8028d8a:	f7ff ffcf 	bl	8028d2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8028d8e:	4620      	mov	r0, r4
 8028d90:	bd70      	pop	{r4, r5, r6, pc}
 8028d92:	bf00      	nop
 8028d94:	0802b919 	.word	0x0802b919

08028d98 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8028d98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8028d9a:	2400      	movs	r4, #0
 8028d9c:	2310      	movs	r3, #16
 8028d9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8028da2:	6803      	ldr	r3, [r0, #0]
 8028da4:	4615      	mov	r5, r2
 8028da6:	699e      	ldr	r6, [r3, #24]
 8028da8:	6812      	ldr	r2, [r2, #0]
 8028daa:	466b      	mov	r3, sp
 8028dac:	e9cd 4400 	strd	r4, r4, [sp]
 8028db0:	47b0      	blx	r6
 8028db2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8028db6:	f003 0306 	and.w	r3, r3, #6
 8028dba:	2b06      	cmp	r3, #6
 8028dbc:	bf03      	ittte	eq
 8028dbe:	9b00      	ldreq	r3, [sp, #0]
 8028dc0:	602b      	streq	r3, [r5, #0]
 8028dc2:	2001      	moveq	r0, #1
 8028dc4:	4620      	movne	r0, r4
 8028dc6:	b004      	add	sp, #16
 8028dc8:	bd70      	pop	{r4, r5, r6, pc}

08028dca <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8028dca:	9800      	ldr	r0, [sp, #0]
 8028dcc:	4290      	cmp	r0, r2
 8028dce:	bf0c      	ite	eq
 8028dd0:	2006      	moveq	r0, #6
 8028dd2:	2001      	movne	r0, #1
 8028dd4:	4770      	bx	lr
	...

08028dd8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8028dd8:	b510      	push	{r4, lr}
 8028dda:	4b03      	ldr	r3, [pc, #12]	@ (8028de8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8028ddc:	6003      	str	r3, [r0, #0]
 8028dde:	4604      	mov	r4, r0
 8028de0:	f000 f8d9 	bl	8028f96 <_ZNSt9type_infoD1Ev>
 8028de4:	4620      	mov	r0, r4
 8028de6:	bd10      	pop	{r4, pc}
 8028de8:	0802b964 	.word	0x0802b964

08028dec <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8028dec:	b510      	push	{r4, lr}
 8028dee:	4604      	mov	r4, r0
 8028df0:	f7ff fff2 	bl	8028dd8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8028df4:	4620      	mov	r0, r4
 8028df6:	2108      	movs	r1, #8
 8028df8:	f7ff fc6d 	bl	80286d6 <_ZdlPvj>
 8028dfc:	4620      	mov	r0, r4
 8028dfe:	bd10      	pop	{r4, pc}

08028e00 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8028e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028e04:	461f      	mov	r7, r3
 8028e06:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8028e0a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8028e0e:	4598      	cmp	r8, r3
 8028e10:	4606      	mov	r6, r0
 8028e12:	4615      	mov	r5, r2
 8028e14:	d107      	bne.n	8028e26 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8028e16:	9907      	ldr	r1, [sp, #28]
 8028e18:	f000 f8c0 	bl	8028f9c <_ZNKSt9type_info7__equalERKS_>
 8028e1c:	b118      	cbz	r0, 8028e26 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8028e1e:	7165      	strb	r5, [r4, #5]
 8028e20:	2000      	movs	r0, #0
 8028e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028e26:	4639      	mov	r1, r7
 8028e28:	4630      	mov	r0, r6
 8028e2a:	f000 f8b7 	bl	8028f9c <_ZNKSt9type_info7__equalERKS_>
 8028e2e:	2800      	cmp	r0, #0
 8028e30:	d0f6      	beq.n	8028e20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8028e32:	2301      	movs	r3, #1
 8028e34:	f8c4 8000 	str.w	r8, [r4]
 8028e38:	7125      	strb	r5, [r4, #4]
 8028e3a:	71a3      	strb	r3, [r4, #6]
 8028e3c:	e7f0      	b.n	8028e20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08028e3e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8028e3e:	b538      	push	{r3, r4, r5, lr}
 8028e40:	4615      	mov	r5, r2
 8028e42:	461c      	mov	r4, r3
 8028e44:	f000 f8aa 	bl	8028f9c <_ZNKSt9type_info7__equalERKS_>
 8028e48:	b120      	cbz	r0, 8028e54 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8028e4a:	2308      	movs	r3, #8
 8028e4c:	60e3      	str	r3, [r4, #12]
 8028e4e:	2306      	movs	r3, #6
 8028e50:	6025      	str	r5, [r4, #0]
 8028e52:	7123      	strb	r3, [r4, #4]
 8028e54:	bd38      	pop	{r3, r4, r5, pc}

08028e56 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8028e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028e5a:	4605      	mov	r5, r0
 8028e5c:	460c      	mov	r4, r1
 8028e5e:	4616      	mov	r6, r2
 8028e60:	461f      	mov	r7, r3
 8028e62:	f000 f89b 	bl	8028f9c <_ZNKSt9type_info7__equalERKS_>
 8028e66:	b948      	cbnz	r0, 8028e7c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8028e68:	2f03      	cmp	r7, #3
 8028e6a:	d807      	bhi.n	8028e7c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8028e6c:	6823      	ldr	r3, [r4, #0]
 8028e6e:	4632      	mov	r2, r6
 8028e70:	4629      	mov	r1, r5
 8028e72:	4620      	mov	r0, r4
 8028e74:	695b      	ldr	r3, [r3, #20]
 8028e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028e7a:	4718      	bx	r3
 8028e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028e80 <_ZdlPv>:
 8028e80:	f000 b8b2 	b.w	8028fe8 <free>

08028e84 <_ZSt15get_new_handlerv>:
 8028e84:	4b02      	ldr	r3, [pc, #8]	@ (8028e90 <_ZSt15get_new_handlerv+0xc>)
 8028e86:	6818      	ldr	r0, [r3, #0]
 8028e88:	f3bf 8f5b 	dmb	ish
 8028e8c:	4770      	bx	lr
 8028e8e:	bf00      	nop
 8028e90:	24000ac0 	.word	0x24000ac0

08028e94 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8028e94:	b510      	push	{r4, lr}
 8028e96:	4b03      	ldr	r3, [pc, #12]	@ (8028ea4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8028e98:	6003      	str	r3, [r0, #0]
 8028e9a:	4604      	mov	r4, r0
 8028e9c:	f7ff ff9c 	bl	8028dd8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8028ea0:	4620      	mov	r0, r4
 8028ea2:	bd10      	pop	{r4, pc}
 8028ea4:	0802b9c4 	.word	0x0802b9c4

08028ea8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8028ea8:	b510      	push	{r4, lr}
 8028eaa:	4604      	mov	r4, r0
 8028eac:	f7ff fff2 	bl	8028e94 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8028eb0:	4620      	mov	r0, r4
 8028eb2:	210c      	movs	r1, #12
 8028eb4:	f7ff fc0f 	bl	80286d6 <_ZdlPvj>
 8028eb8:	4620      	mov	r0, r4
 8028eba:	bd10      	pop	{r4, pc}

08028ebc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8028ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028ec0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8028ec4:	4590      	cmp	r8, r2
 8028ec6:	4606      	mov	r6, r0
 8028ec8:	460f      	mov	r7, r1
 8028eca:	4615      	mov	r5, r2
 8028ecc:	461c      	mov	r4, r3
 8028ece:	d00b      	beq.n	8028ee8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8028ed0:	68b0      	ldr	r0, [r6, #8]
 8028ed2:	6803      	ldr	r3, [r0, #0]
 8028ed4:	f8cd 8018 	str.w	r8, [sp, #24]
 8028ed8:	6a1e      	ldr	r6, [r3, #32]
 8028eda:	462a      	mov	r2, r5
 8028edc:	4623      	mov	r3, r4
 8028ede:	4639      	mov	r1, r7
 8028ee0:	46b4      	mov	ip, r6
 8028ee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028ee6:	4760      	bx	ip
 8028ee8:	4619      	mov	r1, r3
 8028eea:	f000 f857 	bl	8028f9c <_ZNKSt9type_info7__equalERKS_>
 8028eee:	2800      	cmp	r0, #0
 8028ef0:	d0ee      	beq.n	8028ed0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8028ef2:	2006      	movs	r0, #6
 8028ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028ef8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8028ef8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028efc:	460d      	mov	r5, r1
 8028efe:	4619      	mov	r1, r3
 8028f00:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	@ 0x28
 8028f04:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	@ 0x30
 8028f08:	4681      	mov	r9, r0
 8028f0a:	4617      	mov	r7, r2
 8028f0c:	4698      	mov	r8, r3
 8028f0e:	f000 f845 	bl	8028f9c <_ZNKSt9type_info7__equalERKS_>
 8028f12:	b190      	cbz	r0, 8028f3a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8028f14:	2d00      	cmp	r5, #0
 8028f16:	6034      	str	r4, [r6, #0]
 8028f18:	7137      	strb	r7, [r6, #4]
 8028f1a:	db09      	blt.n	8028f30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8028f1c:	442c      	add	r4, r5
 8028f1e:	45a2      	cmp	sl, r4
 8028f20:	bf14      	ite	ne
 8028f22:	2401      	movne	r4, #1
 8028f24:	2406      	moveq	r4, #6
 8028f26:	71b4      	strb	r4, [r6, #6]
 8028f28:	2000      	movs	r0, #0
 8028f2a:	b001      	add	sp, #4
 8028f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028f30:	3502      	adds	r5, #2
 8028f32:	d1f9      	bne.n	8028f28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8028f34:	2301      	movs	r3, #1
 8028f36:	71b3      	strb	r3, [r6, #6]
 8028f38:	e7f6      	b.n	8028f28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8028f3a:	4554      	cmp	r4, sl
 8028f3c:	d106      	bne.n	8028f4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8028f3e:	4659      	mov	r1, fp
 8028f40:	4648      	mov	r0, r9
 8028f42:	f000 f82b 	bl	8028f9c <_ZNKSt9type_info7__equalERKS_>
 8028f46:	b108      	cbz	r0, 8028f4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8028f48:	7177      	strb	r7, [r6, #5]
 8028f4a:	e7ed      	b.n	8028f28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8028f4c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8028f50:	6803      	ldr	r3, [r0, #0]
 8028f52:	e9cd a60c 	strd	sl, r6, [sp, #48]	@ 0x30
 8028f56:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
 8028f5a:	69dc      	ldr	r4, [r3, #28]
 8028f5c:	463a      	mov	r2, r7
 8028f5e:	4643      	mov	r3, r8
 8028f60:	4629      	mov	r1, r5
 8028f62:	46a4      	mov	ip, r4
 8028f64:	b001      	add	sp, #4
 8028f66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f6a:	4760      	bx	ip

08028f6c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8028f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028f70:	4607      	mov	r7, r0
 8028f72:	460c      	mov	r4, r1
 8028f74:	4615      	mov	r5, r2
 8028f76:	461e      	mov	r6, r3
 8028f78:	f7ff ff61 	bl	8028e3e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8028f7c:	b948      	cbnz	r0, 8028f92 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8028f7e:	68b8      	ldr	r0, [r7, #8]
 8028f80:	6803      	ldr	r3, [r0, #0]
 8028f82:	699f      	ldr	r7, [r3, #24]
 8028f84:	462a      	mov	r2, r5
 8028f86:	4633      	mov	r3, r6
 8028f88:	4621      	mov	r1, r4
 8028f8a:	46bc      	mov	ip, r7
 8028f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028f90:	4760      	bx	ip
 8028f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028f96 <_ZNSt9type_infoD1Ev>:
 8028f96:	4770      	bx	lr

08028f98 <_ZNKSt9type_info14__is_pointer_pEv>:
 8028f98:	2000      	movs	r0, #0
 8028f9a:	4770      	bx	lr

08028f9c <_ZNKSt9type_info7__equalERKS_>:
 8028f9c:	4281      	cmp	r1, r0
 8028f9e:	b508      	push	{r3, lr}
 8028fa0:	d00e      	beq.n	8028fc0 <_ZNKSt9type_info7__equalERKS_+0x24>
 8028fa2:	6840      	ldr	r0, [r0, #4]
 8028fa4:	7803      	ldrb	r3, [r0, #0]
 8028fa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8028fa8:	d00c      	beq.n	8028fc4 <_ZNKSt9type_info7__equalERKS_+0x28>
 8028faa:	6849      	ldr	r1, [r1, #4]
 8028fac:	780b      	ldrb	r3, [r1, #0]
 8028fae:	2b2a      	cmp	r3, #42	@ 0x2a
 8028fb0:	bf08      	it	eq
 8028fb2:	3101      	addeq	r1, #1
 8028fb4:	f7d7 f994 	bl	80002e0 <strcmp>
 8028fb8:	fab0 f080 	clz	r0, r0
 8028fbc:	0940      	lsrs	r0, r0, #5
 8028fbe:	bd08      	pop	{r3, pc}
 8028fc0:	2001      	movs	r0, #1
 8028fc2:	e7fc      	b.n	8028fbe <_ZNKSt9type_info7__equalERKS_+0x22>
 8028fc4:	2000      	movs	r0, #0
 8028fc6:	e7fa      	b.n	8028fbe <_ZNKSt9type_info7__equalERKS_+0x22>

08028fc8 <abort>:
 8028fc8:	b508      	push	{r3, lr}
 8028fca:	2006      	movs	r0, #6
 8028fcc:	f000 fbe8 	bl	80297a0 <raise>
 8028fd0:	2001      	movs	r0, #1
 8028fd2:	f7e5 ffff 	bl	800efd4 <_exit>
	...

08028fd8 <malloc>:
 8028fd8:	4b02      	ldr	r3, [pc, #8]	@ (8028fe4 <malloc+0xc>)
 8028fda:	4601      	mov	r1, r0
 8028fdc:	6818      	ldr	r0, [r3, #0]
 8028fde:	f000 b82d 	b.w	802903c <_malloc_r>
 8028fe2:	bf00      	nop
 8028fe4:	24000038 	.word	0x24000038

08028fe8 <free>:
 8028fe8:	4b02      	ldr	r3, [pc, #8]	@ (8028ff4 <free+0xc>)
 8028fea:	4601      	mov	r1, r0
 8028fec:	6818      	ldr	r0, [r3, #0]
 8028fee:	f000 bc85 	b.w	80298fc <_free_r>
 8028ff2:	bf00      	nop
 8028ff4:	24000038 	.word	0x24000038

08028ff8 <sbrk_aligned>:
 8028ff8:	b570      	push	{r4, r5, r6, lr}
 8028ffa:	4e0f      	ldr	r6, [pc, #60]	@ (8029038 <sbrk_aligned+0x40>)
 8028ffc:	460c      	mov	r4, r1
 8028ffe:	6831      	ldr	r1, [r6, #0]
 8029000:	4605      	mov	r5, r0
 8029002:	b911      	cbnz	r1, 802900a <sbrk_aligned+0x12>
 8029004:	f000 fc1c 	bl	8029840 <_sbrk_r>
 8029008:	6030      	str	r0, [r6, #0]
 802900a:	4621      	mov	r1, r4
 802900c:	4628      	mov	r0, r5
 802900e:	f000 fc17 	bl	8029840 <_sbrk_r>
 8029012:	1c43      	adds	r3, r0, #1
 8029014:	d103      	bne.n	802901e <sbrk_aligned+0x26>
 8029016:	f04f 34ff 	mov.w	r4, #4294967295
 802901a:	4620      	mov	r0, r4
 802901c:	bd70      	pop	{r4, r5, r6, pc}
 802901e:	1cc4      	adds	r4, r0, #3
 8029020:	f024 0403 	bic.w	r4, r4, #3
 8029024:	42a0      	cmp	r0, r4
 8029026:	d0f8      	beq.n	802901a <sbrk_aligned+0x22>
 8029028:	1a21      	subs	r1, r4, r0
 802902a:	4628      	mov	r0, r5
 802902c:	f000 fc08 	bl	8029840 <_sbrk_r>
 8029030:	3001      	adds	r0, #1
 8029032:	d1f2      	bne.n	802901a <sbrk_aligned+0x22>
 8029034:	e7ef      	b.n	8029016 <sbrk_aligned+0x1e>
 8029036:	bf00      	nop
 8029038:	24000ac4 	.word	0x24000ac4

0802903c <_malloc_r>:
 802903c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029040:	1ccd      	adds	r5, r1, #3
 8029042:	f025 0503 	bic.w	r5, r5, #3
 8029046:	3508      	adds	r5, #8
 8029048:	2d0c      	cmp	r5, #12
 802904a:	bf38      	it	cc
 802904c:	250c      	movcc	r5, #12
 802904e:	2d00      	cmp	r5, #0
 8029050:	4606      	mov	r6, r0
 8029052:	db01      	blt.n	8029058 <_malloc_r+0x1c>
 8029054:	42a9      	cmp	r1, r5
 8029056:	d904      	bls.n	8029062 <_malloc_r+0x26>
 8029058:	230c      	movs	r3, #12
 802905a:	6033      	str	r3, [r6, #0]
 802905c:	2000      	movs	r0, #0
 802905e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029062:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8029138 <_malloc_r+0xfc>
 8029066:	f000 f869 	bl	802913c <__malloc_lock>
 802906a:	f8d8 3000 	ldr.w	r3, [r8]
 802906e:	461c      	mov	r4, r3
 8029070:	bb44      	cbnz	r4, 80290c4 <_malloc_r+0x88>
 8029072:	4629      	mov	r1, r5
 8029074:	4630      	mov	r0, r6
 8029076:	f7ff ffbf 	bl	8028ff8 <sbrk_aligned>
 802907a:	1c43      	adds	r3, r0, #1
 802907c:	4604      	mov	r4, r0
 802907e:	d158      	bne.n	8029132 <_malloc_r+0xf6>
 8029080:	f8d8 4000 	ldr.w	r4, [r8]
 8029084:	4627      	mov	r7, r4
 8029086:	2f00      	cmp	r7, #0
 8029088:	d143      	bne.n	8029112 <_malloc_r+0xd6>
 802908a:	2c00      	cmp	r4, #0
 802908c:	d04b      	beq.n	8029126 <_malloc_r+0xea>
 802908e:	6823      	ldr	r3, [r4, #0]
 8029090:	4639      	mov	r1, r7
 8029092:	4630      	mov	r0, r6
 8029094:	eb04 0903 	add.w	r9, r4, r3
 8029098:	f000 fbd2 	bl	8029840 <_sbrk_r>
 802909c:	4581      	cmp	r9, r0
 802909e:	d142      	bne.n	8029126 <_malloc_r+0xea>
 80290a0:	6821      	ldr	r1, [r4, #0]
 80290a2:	1a6d      	subs	r5, r5, r1
 80290a4:	4629      	mov	r1, r5
 80290a6:	4630      	mov	r0, r6
 80290a8:	f7ff ffa6 	bl	8028ff8 <sbrk_aligned>
 80290ac:	3001      	adds	r0, #1
 80290ae:	d03a      	beq.n	8029126 <_malloc_r+0xea>
 80290b0:	6823      	ldr	r3, [r4, #0]
 80290b2:	442b      	add	r3, r5
 80290b4:	6023      	str	r3, [r4, #0]
 80290b6:	f8d8 3000 	ldr.w	r3, [r8]
 80290ba:	685a      	ldr	r2, [r3, #4]
 80290bc:	bb62      	cbnz	r2, 8029118 <_malloc_r+0xdc>
 80290be:	f8c8 7000 	str.w	r7, [r8]
 80290c2:	e00f      	b.n	80290e4 <_malloc_r+0xa8>
 80290c4:	6822      	ldr	r2, [r4, #0]
 80290c6:	1b52      	subs	r2, r2, r5
 80290c8:	d420      	bmi.n	802910c <_malloc_r+0xd0>
 80290ca:	2a0b      	cmp	r2, #11
 80290cc:	d917      	bls.n	80290fe <_malloc_r+0xc2>
 80290ce:	1961      	adds	r1, r4, r5
 80290d0:	42a3      	cmp	r3, r4
 80290d2:	6025      	str	r5, [r4, #0]
 80290d4:	bf18      	it	ne
 80290d6:	6059      	strne	r1, [r3, #4]
 80290d8:	6863      	ldr	r3, [r4, #4]
 80290da:	bf08      	it	eq
 80290dc:	f8c8 1000 	streq.w	r1, [r8]
 80290e0:	5162      	str	r2, [r4, r5]
 80290e2:	604b      	str	r3, [r1, #4]
 80290e4:	4630      	mov	r0, r6
 80290e6:	f000 f82f 	bl	8029148 <__malloc_unlock>
 80290ea:	f104 000b 	add.w	r0, r4, #11
 80290ee:	1d23      	adds	r3, r4, #4
 80290f0:	f020 0007 	bic.w	r0, r0, #7
 80290f4:	1ac2      	subs	r2, r0, r3
 80290f6:	bf1c      	itt	ne
 80290f8:	1a1b      	subne	r3, r3, r0
 80290fa:	50a3      	strne	r3, [r4, r2]
 80290fc:	e7af      	b.n	802905e <_malloc_r+0x22>
 80290fe:	6862      	ldr	r2, [r4, #4]
 8029100:	42a3      	cmp	r3, r4
 8029102:	bf0c      	ite	eq
 8029104:	f8c8 2000 	streq.w	r2, [r8]
 8029108:	605a      	strne	r2, [r3, #4]
 802910a:	e7eb      	b.n	80290e4 <_malloc_r+0xa8>
 802910c:	4623      	mov	r3, r4
 802910e:	6864      	ldr	r4, [r4, #4]
 8029110:	e7ae      	b.n	8029070 <_malloc_r+0x34>
 8029112:	463c      	mov	r4, r7
 8029114:	687f      	ldr	r7, [r7, #4]
 8029116:	e7b6      	b.n	8029086 <_malloc_r+0x4a>
 8029118:	461a      	mov	r2, r3
 802911a:	685b      	ldr	r3, [r3, #4]
 802911c:	42a3      	cmp	r3, r4
 802911e:	d1fb      	bne.n	8029118 <_malloc_r+0xdc>
 8029120:	2300      	movs	r3, #0
 8029122:	6053      	str	r3, [r2, #4]
 8029124:	e7de      	b.n	80290e4 <_malloc_r+0xa8>
 8029126:	230c      	movs	r3, #12
 8029128:	6033      	str	r3, [r6, #0]
 802912a:	4630      	mov	r0, r6
 802912c:	f000 f80c 	bl	8029148 <__malloc_unlock>
 8029130:	e794      	b.n	802905c <_malloc_r+0x20>
 8029132:	6005      	str	r5, [r0, #0]
 8029134:	e7d6      	b.n	80290e4 <_malloc_r+0xa8>
 8029136:	bf00      	nop
 8029138:	24000ac8 	.word	0x24000ac8

0802913c <__malloc_lock>:
 802913c:	4801      	ldr	r0, [pc, #4]	@ (8029144 <__malloc_lock+0x8>)
 802913e:	f000 bbcc 	b.w	80298da <__retarget_lock_acquire_recursive>
 8029142:	bf00      	nop
 8029144:	24000c0c 	.word	0x24000c0c

08029148 <__malloc_unlock>:
 8029148:	4801      	ldr	r0, [pc, #4]	@ (8029150 <__malloc_unlock+0x8>)
 802914a:	f000 bbc7 	b.w	80298dc <__retarget_lock_release_recursive>
 802914e:	bf00      	nop
 8029150:	24000c0c 	.word	0x24000c0c

08029154 <realloc>:
 8029154:	4b02      	ldr	r3, [pc, #8]	@ (8029160 <realloc+0xc>)
 8029156:	460a      	mov	r2, r1
 8029158:	4601      	mov	r1, r0
 802915a:	6818      	ldr	r0, [r3, #0]
 802915c:	f000 b802 	b.w	8029164 <_realloc_r>
 8029160:	24000038 	.word	0x24000038

08029164 <_realloc_r>:
 8029164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029168:	4680      	mov	r8, r0
 802916a:	4615      	mov	r5, r2
 802916c:	460c      	mov	r4, r1
 802916e:	b921      	cbnz	r1, 802917a <_realloc_r+0x16>
 8029170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029174:	4611      	mov	r1, r2
 8029176:	f7ff bf61 	b.w	802903c <_malloc_r>
 802917a:	b92a      	cbnz	r2, 8029188 <_realloc_r+0x24>
 802917c:	f000 fbbe 	bl	80298fc <_free_r>
 8029180:	2400      	movs	r4, #0
 8029182:	4620      	mov	r0, r4
 8029184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029188:	f000 fc02 	bl	8029990 <_malloc_usable_size_r>
 802918c:	4285      	cmp	r5, r0
 802918e:	4606      	mov	r6, r0
 8029190:	d802      	bhi.n	8029198 <_realloc_r+0x34>
 8029192:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8029196:	d8f4      	bhi.n	8029182 <_realloc_r+0x1e>
 8029198:	4629      	mov	r1, r5
 802919a:	4640      	mov	r0, r8
 802919c:	f7ff ff4e 	bl	802903c <_malloc_r>
 80291a0:	4607      	mov	r7, r0
 80291a2:	2800      	cmp	r0, #0
 80291a4:	d0ec      	beq.n	8029180 <_realloc_r+0x1c>
 80291a6:	42b5      	cmp	r5, r6
 80291a8:	462a      	mov	r2, r5
 80291aa:	4621      	mov	r1, r4
 80291ac:	bf28      	it	cs
 80291ae:	4632      	movcs	r2, r6
 80291b0:	f000 fb95 	bl	80298de <memcpy>
 80291b4:	4621      	mov	r1, r4
 80291b6:	4640      	mov	r0, r8
 80291b8:	f000 fba0 	bl	80298fc <_free_r>
 80291bc:	463c      	mov	r4, r7
 80291be:	e7e0      	b.n	8029182 <_realloc_r+0x1e>

080291c0 <_strtol_l.constprop.0>:
 80291c0:	2b24      	cmp	r3, #36	@ 0x24
 80291c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80291c6:	4686      	mov	lr, r0
 80291c8:	4690      	mov	r8, r2
 80291ca:	d801      	bhi.n	80291d0 <_strtol_l.constprop.0+0x10>
 80291cc:	2b01      	cmp	r3, #1
 80291ce:	d106      	bne.n	80291de <_strtol_l.constprop.0+0x1e>
 80291d0:	f000 fb58 	bl	8029884 <__errno>
 80291d4:	2316      	movs	r3, #22
 80291d6:	6003      	str	r3, [r0, #0]
 80291d8:	2000      	movs	r0, #0
 80291da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80291de:	4834      	ldr	r0, [pc, #208]	@ (80292b0 <_strtol_l.constprop.0+0xf0>)
 80291e0:	460d      	mov	r5, r1
 80291e2:	462a      	mov	r2, r5
 80291e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80291e8:	5d06      	ldrb	r6, [r0, r4]
 80291ea:	f016 0608 	ands.w	r6, r6, #8
 80291ee:	d1f8      	bne.n	80291e2 <_strtol_l.constprop.0+0x22>
 80291f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80291f2:	d12d      	bne.n	8029250 <_strtol_l.constprop.0+0x90>
 80291f4:	782c      	ldrb	r4, [r5, #0]
 80291f6:	2601      	movs	r6, #1
 80291f8:	1c95      	adds	r5, r2, #2
 80291fa:	f033 0210 	bics.w	r2, r3, #16
 80291fe:	d109      	bne.n	8029214 <_strtol_l.constprop.0+0x54>
 8029200:	2c30      	cmp	r4, #48	@ 0x30
 8029202:	d12a      	bne.n	802925a <_strtol_l.constprop.0+0x9a>
 8029204:	782a      	ldrb	r2, [r5, #0]
 8029206:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802920a:	2a58      	cmp	r2, #88	@ 0x58
 802920c:	d125      	bne.n	802925a <_strtol_l.constprop.0+0x9a>
 802920e:	786c      	ldrb	r4, [r5, #1]
 8029210:	2310      	movs	r3, #16
 8029212:	3502      	adds	r5, #2
 8029214:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8029218:	f10c 3cff 	add.w	ip, ip, #4294967295
 802921c:	2200      	movs	r2, #0
 802921e:	fbbc f9f3 	udiv	r9, ip, r3
 8029222:	4610      	mov	r0, r2
 8029224:	fb03 ca19 	mls	sl, r3, r9, ip
 8029228:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802922c:	2f09      	cmp	r7, #9
 802922e:	d81b      	bhi.n	8029268 <_strtol_l.constprop.0+0xa8>
 8029230:	463c      	mov	r4, r7
 8029232:	42a3      	cmp	r3, r4
 8029234:	dd27      	ble.n	8029286 <_strtol_l.constprop.0+0xc6>
 8029236:	1c57      	adds	r7, r2, #1
 8029238:	d007      	beq.n	802924a <_strtol_l.constprop.0+0x8a>
 802923a:	4581      	cmp	r9, r0
 802923c:	d320      	bcc.n	8029280 <_strtol_l.constprop.0+0xc0>
 802923e:	d101      	bne.n	8029244 <_strtol_l.constprop.0+0x84>
 8029240:	45a2      	cmp	sl, r4
 8029242:	db1d      	blt.n	8029280 <_strtol_l.constprop.0+0xc0>
 8029244:	fb00 4003 	mla	r0, r0, r3, r4
 8029248:	2201      	movs	r2, #1
 802924a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802924e:	e7eb      	b.n	8029228 <_strtol_l.constprop.0+0x68>
 8029250:	2c2b      	cmp	r4, #43	@ 0x2b
 8029252:	bf04      	itt	eq
 8029254:	782c      	ldrbeq	r4, [r5, #0]
 8029256:	1c95      	addeq	r5, r2, #2
 8029258:	e7cf      	b.n	80291fa <_strtol_l.constprop.0+0x3a>
 802925a:	2b00      	cmp	r3, #0
 802925c:	d1da      	bne.n	8029214 <_strtol_l.constprop.0+0x54>
 802925e:	2c30      	cmp	r4, #48	@ 0x30
 8029260:	bf0c      	ite	eq
 8029262:	2308      	moveq	r3, #8
 8029264:	230a      	movne	r3, #10
 8029266:	e7d5      	b.n	8029214 <_strtol_l.constprop.0+0x54>
 8029268:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802926c:	2f19      	cmp	r7, #25
 802926e:	d801      	bhi.n	8029274 <_strtol_l.constprop.0+0xb4>
 8029270:	3c37      	subs	r4, #55	@ 0x37
 8029272:	e7de      	b.n	8029232 <_strtol_l.constprop.0+0x72>
 8029274:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8029278:	2f19      	cmp	r7, #25
 802927a:	d804      	bhi.n	8029286 <_strtol_l.constprop.0+0xc6>
 802927c:	3c57      	subs	r4, #87	@ 0x57
 802927e:	e7d8      	b.n	8029232 <_strtol_l.constprop.0+0x72>
 8029280:	f04f 32ff 	mov.w	r2, #4294967295
 8029284:	e7e1      	b.n	802924a <_strtol_l.constprop.0+0x8a>
 8029286:	1c53      	adds	r3, r2, #1
 8029288:	d108      	bne.n	802929c <_strtol_l.constprop.0+0xdc>
 802928a:	2322      	movs	r3, #34	@ 0x22
 802928c:	f8ce 3000 	str.w	r3, [lr]
 8029290:	4660      	mov	r0, ip
 8029292:	f1b8 0f00 	cmp.w	r8, #0
 8029296:	d0a0      	beq.n	80291da <_strtol_l.constprop.0+0x1a>
 8029298:	1e69      	subs	r1, r5, #1
 802929a:	e006      	b.n	80292aa <_strtol_l.constprop.0+0xea>
 802929c:	b106      	cbz	r6, 80292a0 <_strtol_l.constprop.0+0xe0>
 802929e:	4240      	negs	r0, r0
 80292a0:	f1b8 0f00 	cmp.w	r8, #0
 80292a4:	d099      	beq.n	80291da <_strtol_l.constprop.0+0x1a>
 80292a6:	2a00      	cmp	r2, #0
 80292a8:	d1f6      	bne.n	8029298 <_strtol_l.constprop.0+0xd8>
 80292aa:	f8c8 1000 	str.w	r1, [r8]
 80292ae:	e794      	b.n	80291da <_strtol_l.constprop.0+0x1a>
 80292b0:	0802ba01 	.word	0x0802ba01

080292b4 <strtol>:
 80292b4:	4613      	mov	r3, r2
 80292b6:	460a      	mov	r2, r1
 80292b8:	4601      	mov	r1, r0
 80292ba:	4802      	ldr	r0, [pc, #8]	@ (80292c4 <strtol+0x10>)
 80292bc:	6800      	ldr	r0, [r0, #0]
 80292be:	f7ff bf7f 	b.w	80291c0 <_strtol_l.constprop.0>
 80292c2:	bf00      	nop
 80292c4:	24000038 	.word	0x24000038

080292c8 <std>:
 80292c8:	2300      	movs	r3, #0
 80292ca:	b510      	push	{r4, lr}
 80292cc:	4604      	mov	r4, r0
 80292ce:	e9c0 3300 	strd	r3, r3, [r0]
 80292d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80292d6:	6083      	str	r3, [r0, #8]
 80292d8:	8181      	strh	r1, [r0, #12]
 80292da:	6643      	str	r3, [r0, #100]	@ 0x64
 80292dc:	81c2      	strh	r2, [r0, #14]
 80292de:	6183      	str	r3, [r0, #24]
 80292e0:	4619      	mov	r1, r3
 80292e2:	2208      	movs	r2, #8
 80292e4:	305c      	adds	r0, #92	@ 0x5c
 80292e6:	f000 fa2b 	bl	8029740 <memset>
 80292ea:	4b0d      	ldr	r3, [pc, #52]	@ (8029320 <std+0x58>)
 80292ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80292ee:	4b0d      	ldr	r3, [pc, #52]	@ (8029324 <std+0x5c>)
 80292f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80292f2:	4b0d      	ldr	r3, [pc, #52]	@ (8029328 <std+0x60>)
 80292f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80292f6:	4b0d      	ldr	r3, [pc, #52]	@ (802932c <std+0x64>)
 80292f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80292fa:	4b0d      	ldr	r3, [pc, #52]	@ (8029330 <std+0x68>)
 80292fc:	6224      	str	r4, [r4, #32]
 80292fe:	429c      	cmp	r4, r3
 8029300:	d006      	beq.n	8029310 <std+0x48>
 8029302:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8029306:	4294      	cmp	r4, r2
 8029308:	d002      	beq.n	8029310 <std+0x48>
 802930a:	33d0      	adds	r3, #208	@ 0xd0
 802930c:	429c      	cmp	r4, r3
 802930e:	d105      	bne.n	802931c <std+0x54>
 8029310:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8029314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029318:	f000 bade 	b.w	80298d8 <__retarget_lock_init_recursive>
 802931c:	bd10      	pop	{r4, pc}
 802931e:	bf00      	nop
 8029320:	0802953d 	.word	0x0802953d
 8029324:	0802955f 	.word	0x0802955f
 8029328:	08029597 	.word	0x08029597
 802932c:	080295bb 	.word	0x080295bb
 8029330:	24000acc 	.word	0x24000acc

08029334 <stdio_exit_handler>:
 8029334:	4a02      	ldr	r2, [pc, #8]	@ (8029340 <stdio_exit_handler+0xc>)
 8029336:	4903      	ldr	r1, [pc, #12]	@ (8029344 <stdio_exit_handler+0x10>)
 8029338:	4803      	ldr	r0, [pc, #12]	@ (8029348 <stdio_exit_handler+0x14>)
 802933a:	f000 b869 	b.w	8029410 <_fwalk_sglue>
 802933e:	bf00      	nop
 8029340:	2400002c 	.word	0x2400002c
 8029344:	0802a049 	.word	0x0802a049
 8029348:	2400003c 	.word	0x2400003c

0802934c <cleanup_stdio>:
 802934c:	6841      	ldr	r1, [r0, #4]
 802934e:	4b0c      	ldr	r3, [pc, #48]	@ (8029380 <cleanup_stdio+0x34>)
 8029350:	4299      	cmp	r1, r3
 8029352:	b510      	push	{r4, lr}
 8029354:	4604      	mov	r4, r0
 8029356:	d001      	beq.n	802935c <cleanup_stdio+0x10>
 8029358:	f000 fe76 	bl	802a048 <_fflush_r>
 802935c:	68a1      	ldr	r1, [r4, #8]
 802935e:	4b09      	ldr	r3, [pc, #36]	@ (8029384 <cleanup_stdio+0x38>)
 8029360:	4299      	cmp	r1, r3
 8029362:	d002      	beq.n	802936a <cleanup_stdio+0x1e>
 8029364:	4620      	mov	r0, r4
 8029366:	f000 fe6f 	bl	802a048 <_fflush_r>
 802936a:	68e1      	ldr	r1, [r4, #12]
 802936c:	4b06      	ldr	r3, [pc, #24]	@ (8029388 <cleanup_stdio+0x3c>)
 802936e:	4299      	cmp	r1, r3
 8029370:	d004      	beq.n	802937c <cleanup_stdio+0x30>
 8029372:	4620      	mov	r0, r4
 8029374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029378:	f000 be66 	b.w	802a048 <_fflush_r>
 802937c:	bd10      	pop	{r4, pc}
 802937e:	bf00      	nop
 8029380:	24000acc 	.word	0x24000acc
 8029384:	24000b34 	.word	0x24000b34
 8029388:	24000b9c 	.word	0x24000b9c

0802938c <global_stdio_init.part.0>:
 802938c:	b510      	push	{r4, lr}
 802938e:	4b0b      	ldr	r3, [pc, #44]	@ (80293bc <global_stdio_init.part.0+0x30>)
 8029390:	4c0b      	ldr	r4, [pc, #44]	@ (80293c0 <global_stdio_init.part.0+0x34>)
 8029392:	4a0c      	ldr	r2, [pc, #48]	@ (80293c4 <global_stdio_init.part.0+0x38>)
 8029394:	601a      	str	r2, [r3, #0]
 8029396:	4620      	mov	r0, r4
 8029398:	2200      	movs	r2, #0
 802939a:	2104      	movs	r1, #4
 802939c:	f7ff ff94 	bl	80292c8 <std>
 80293a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80293a4:	2201      	movs	r2, #1
 80293a6:	2109      	movs	r1, #9
 80293a8:	f7ff ff8e 	bl	80292c8 <std>
 80293ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80293b0:	2202      	movs	r2, #2
 80293b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80293b6:	2112      	movs	r1, #18
 80293b8:	f7ff bf86 	b.w	80292c8 <std>
 80293bc:	24000c04 	.word	0x24000c04
 80293c0:	24000acc 	.word	0x24000acc
 80293c4:	08029335 	.word	0x08029335

080293c8 <__sfp_lock_acquire>:
 80293c8:	4801      	ldr	r0, [pc, #4]	@ (80293d0 <__sfp_lock_acquire+0x8>)
 80293ca:	f000 ba86 	b.w	80298da <__retarget_lock_acquire_recursive>
 80293ce:	bf00      	nop
 80293d0:	24000c0d 	.word	0x24000c0d

080293d4 <__sfp_lock_release>:
 80293d4:	4801      	ldr	r0, [pc, #4]	@ (80293dc <__sfp_lock_release+0x8>)
 80293d6:	f000 ba81 	b.w	80298dc <__retarget_lock_release_recursive>
 80293da:	bf00      	nop
 80293dc:	24000c0d 	.word	0x24000c0d

080293e0 <__sinit>:
 80293e0:	b510      	push	{r4, lr}
 80293e2:	4604      	mov	r4, r0
 80293e4:	f7ff fff0 	bl	80293c8 <__sfp_lock_acquire>
 80293e8:	6a23      	ldr	r3, [r4, #32]
 80293ea:	b11b      	cbz	r3, 80293f4 <__sinit+0x14>
 80293ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80293f0:	f7ff bff0 	b.w	80293d4 <__sfp_lock_release>
 80293f4:	4b04      	ldr	r3, [pc, #16]	@ (8029408 <__sinit+0x28>)
 80293f6:	6223      	str	r3, [r4, #32]
 80293f8:	4b04      	ldr	r3, [pc, #16]	@ (802940c <__sinit+0x2c>)
 80293fa:	681b      	ldr	r3, [r3, #0]
 80293fc:	2b00      	cmp	r3, #0
 80293fe:	d1f5      	bne.n	80293ec <__sinit+0xc>
 8029400:	f7ff ffc4 	bl	802938c <global_stdio_init.part.0>
 8029404:	e7f2      	b.n	80293ec <__sinit+0xc>
 8029406:	bf00      	nop
 8029408:	0802934d 	.word	0x0802934d
 802940c:	24000c04 	.word	0x24000c04

08029410 <_fwalk_sglue>:
 8029410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029414:	4607      	mov	r7, r0
 8029416:	4688      	mov	r8, r1
 8029418:	4614      	mov	r4, r2
 802941a:	2600      	movs	r6, #0
 802941c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8029420:	f1b9 0901 	subs.w	r9, r9, #1
 8029424:	d505      	bpl.n	8029432 <_fwalk_sglue+0x22>
 8029426:	6824      	ldr	r4, [r4, #0]
 8029428:	2c00      	cmp	r4, #0
 802942a:	d1f7      	bne.n	802941c <_fwalk_sglue+0xc>
 802942c:	4630      	mov	r0, r6
 802942e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029432:	89ab      	ldrh	r3, [r5, #12]
 8029434:	2b01      	cmp	r3, #1
 8029436:	d907      	bls.n	8029448 <_fwalk_sglue+0x38>
 8029438:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802943c:	3301      	adds	r3, #1
 802943e:	d003      	beq.n	8029448 <_fwalk_sglue+0x38>
 8029440:	4629      	mov	r1, r5
 8029442:	4638      	mov	r0, r7
 8029444:	47c0      	blx	r8
 8029446:	4306      	orrs	r6, r0
 8029448:	3568      	adds	r5, #104	@ 0x68
 802944a:	e7e9      	b.n	8029420 <_fwalk_sglue+0x10>

0802944c <iprintf>:
 802944c:	b40f      	push	{r0, r1, r2, r3}
 802944e:	b507      	push	{r0, r1, r2, lr}
 8029450:	4906      	ldr	r1, [pc, #24]	@ (802946c <iprintf+0x20>)
 8029452:	ab04      	add	r3, sp, #16
 8029454:	6808      	ldr	r0, [r1, #0]
 8029456:	f853 2b04 	ldr.w	r2, [r3], #4
 802945a:	6881      	ldr	r1, [r0, #8]
 802945c:	9301      	str	r3, [sp, #4]
 802945e:	f000 fac9 	bl	80299f4 <_vfiprintf_r>
 8029462:	b003      	add	sp, #12
 8029464:	f85d eb04 	ldr.w	lr, [sp], #4
 8029468:	b004      	add	sp, #16
 802946a:	4770      	bx	lr
 802946c:	24000038 	.word	0x24000038

08029470 <putchar>:
 8029470:	4b02      	ldr	r3, [pc, #8]	@ (802947c <putchar+0xc>)
 8029472:	4601      	mov	r1, r0
 8029474:	6818      	ldr	r0, [r3, #0]
 8029476:	6882      	ldr	r2, [r0, #8]
 8029478:	f000 be70 	b.w	802a15c <_putc_r>
 802947c:	24000038 	.word	0x24000038

08029480 <_puts_r>:
 8029480:	6a03      	ldr	r3, [r0, #32]
 8029482:	b570      	push	{r4, r5, r6, lr}
 8029484:	6884      	ldr	r4, [r0, #8]
 8029486:	4605      	mov	r5, r0
 8029488:	460e      	mov	r6, r1
 802948a:	b90b      	cbnz	r3, 8029490 <_puts_r+0x10>
 802948c:	f7ff ffa8 	bl	80293e0 <__sinit>
 8029490:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8029492:	07db      	lsls	r3, r3, #31
 8029494:	d405      	bmi.n	80294a2 <_puts_r+0x22>
 8029496:	89a3      	ldrh	r3, [r4, #12]
 8029498:	0598      	lsls	r0, r3, #22
 802949a:	d402      	bmi.n	80294a2 <_puts_r+0x22>
 802949c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802949e:	f000 fa1c 	bl	80298da <__retarget_lock_acquire_recursive>
 80294a2:	89a3      	ldrh	r3, [r4, #12]
 80294a4:	0719      	lsls	r1, r3, #28
 80294a6:	d502      	bpl.n	80294ae <_puts_r+0x2e>
 80294a8:	6923      	ldr	r3, [r4, #16]
 80294aa:	2b00      	cmp	r3, #0
 80294ac:	d135      	bne.n	802951a <_puts_r+0x9a>
 80294ae:	4621      	mov	r1, r4
 80294b0:	4628      	mov	r0, r5
 80294b2:	f000 f8c5 	bl	8029640 <__swsetup_r>
 80294b6:	b380      	cbz	r0, 802951a <_puts_r+0x9a>
 80294b8:	f04f 35ff 	mov.w	r5, #4294967295
 80294bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80294be:	07da      	lsls	r2, r3, #31
 80294c0:	d405      	bmi.n	80294ce <_puts_r+0x4e>
 80294c2:	89a3      	ldrh	r3, [r4, #12]
 80294c4:	059b      	lsls	r3, r3, #22
 80294c6:	d402      	bmi.n	80294ce <_puts_r+0x4e>
 80294c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80294ca:	f000 fa07 	bl	80298dc <__retarget_lock_release_recursive>
 80294ce:	4628      	mov	r0, r5
 80294d0:	bd70      	pop	{r4, r5, r6, pc}
 80294d2:	2b00      	cmp	r3, #0
 80294d4:	da04      	bge.n	80294e0 <_puts_r+0x60>
 80294d6:	69a2      	ldr	r2, [r4, #24]
 80294d8:	429a      	cmp	r2, r3
 80294da:	dc17      	bgt.n	802950c <_puts_r+0x8c>
 80294dc:	290a      	cmp	r1, #10
 80294de:	d015      	beq.n	802950c <_puts_r+0x8c>
 80294e0:	6823      	ldr	r3, [r4, #0]
 80294e2:	1c5a      	adds	r2, r3, #1
 80294e4:	6022      	str	r2, [r4, #0]
 80294e6:	7019      	strb	r1, [r3, #0]
 80294e8:	68a3      	ldr	r3, [r4, #8]
 80294ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80294ee:	3b01      	subs	r3, #1
 80294f0:	60a3      	str	r3, [r4, #8]
 80294f2:	2900      	cmp	r1, #0
 80294f4:	d1ed      	bne.n	80294d2 <_puts_r+0x52>
 80294f6:	2b00      	cmp	r3, #0
 80294f8:	da11      	bge.n	802951e <_puts_r+0x9e>
 80294fa:	4622      	mov	r2, r4
 80294fc:	210a      	movs	r1, #10
 80294fe:	4628      	mov	r0, r5
 8029500:	f000 f85f 	bl	80295c2 <__swbuf_r>
 8029504:	3001      	adds	r0, #1
 8029506:	d0d7      	beq.n	80294b8 <_puts_r+0x38>
 8029508:	250a      	movs	r5, #10
 802950a:	e7d7      	b.n	80294bc <_puts_r+0x3c>
 802950c:	4622      	mov	r2, r4
 802950e:	4628      	mov	r0, r5
 8029510:	f000 f857 	bl	80295c2 <__swbuf_r>
 8029514:	3001      	adds	r0, #1
 8029516:	d1e7      	bne.n	80294e8 <_puts_r+0x68>
 8029518:	e7ce      	b.n	80294b8 <_puts_r+0x38>
 802951a:	3e01      	subs	r6, #1
 802951c:	e7e4      	b.n	80294e8 <_puts_r+0x68>
 802951e:	6823      	ldr	r3, [r4, #0]
 8029520:	1c5a      	adds	r2, r3, #1
 8029522:	6022      	str	r2, [r4, #0]
 8029524:	220a      	movs	r2, #10
 8029526:	701a      	strb	r2, [r3, #0]
 8029528:	e7ee      	b.n	8029508 <_puts_r+0x88>
	...

0802952c <puts>:
 802952c:	4b02      	ldr	r3, [pc, #8]	@ (8029538 <puts+0xc>)
 802952e:	4601      	mov	r1, r0
 8029530:	6818      	ldr	r0, [r3, #0]
 8029532:	f7ff bfa5 	b.w	8029480 <_puts_r>
 8029536:	bf00      	nop
 8029538:	24000038 	.word	0x24000038

0802953c <__sread>:
 802953c:	b510      	push	{r4, lr}
 802953e:	460c      	mov	r4, r1
 8029540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029544:	f000 f956 	bl	80297f4 <_read_r>
 8029548:	2800      	cmp	r0, #0
 802954a:	bfab      	itete	ge
 802954c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802954e:	89a3      	ldrhlt	r3, [r4, #12]
 8029550:	181b      	addge	r3, r3, r0
 8029552:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8029556:	bfac      	ite	ge
 8029558:	6563      	strge	r3, [r4, #84]	@ 0x54
 802955a:	81a3      	strhlt	r3, [r4, #12]
 802955c:	bd10      	pop	{r4, pc}

0802955e <__swrite>:
 802955e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029562:	461f      	mov	r7, r3
 8029564:	898b      	ldrh	r3, [r1, #12]
 8029566:	05db      	lsls	r3, r3, #23
 8029568:	4605      	mov	r5, r0
 802956a:	460c      	mov	r4, r1
 802956c:	4616      	mov	r6, r2
 802956e:	d505      	bpl.n	802957c <__swrite+0x1e>
 8029570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029574:	2302      	movs	r3, #2
 8029576:	2200      	movs	r2, #0
 8029578:	f000 f92a 	bl	80297d0 <_lseek_r>
 802957c:	89a3      	ldrh	r3, [r4, #12]
 802957e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029582:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8029586:	81a3      	strh	r3, [r4, #12]
 8029588:	4632      	mov	r2, r6
 802958a:	463b      	mov	r3, r7
 802958c:	4628      	mov	r0, r5
 802958e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029592:	f000 b965 	b.w	8029860 <_write_r>

08029596 <__sseek>:
 8029596:	b510      	push	{r4, lr}
 8029598:	460c      	mov	r4, r1
 802959a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802959e:	f000 f917 	bl	80297d0 <_lseek_r>
 80295a2:	1c43      	adds	r3, r0, #1
 80295a4:	89a3      	ldrh	r3, [r4, #12]
 80295a6:	bf15      	itete	ne
 80295a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80295aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80295ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80295b2:	81a3      	strheq	r3, [r4, #12]
 80295b4:	bf18      	it	ne
 80295b6:	81a3      	strhne	r3, [r4, #12]
 80295b8:	bd10      	pop	{r4, pc}

080295ba <__sclose>:
 80295ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80295be:	f000 b8f7 	b.w	80297b0 <_close_r>

080295c2 <__swbuf_r>:
 80295c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80295c4:	460e      	mov	r6, r1
 80295c6:	4614      	mov	r4, r2
 80295c8:	4605      	mov	r5, r0
 80295ca:	b118      	cbz	r0, 80295d4 <__swbuf_r+0x12>
 80295cc:	6a03      	ldr	r3, [r0, #32]
 80295ce:	b90b      	cbnz	r3, 80295d4 <__swbuf_r+0x12>
 80295d0:	f7ff ff06 	bl	80293e0 <__sinit>
 80295d4:	69a3      	ldr	r3, [r4, #24]
 80295d6:	60a3      	str	r3, [r4, #8]
 80295d8:	89a3      	ldrh	r3, [r4, #12]
 80295da:	071a      	lsls	r2, r3, #28
 80295dc:	d501      	bpl.n	80295e2 <__swbuf_r+0x20>
 80295de:	6923      	ldr	r3, [r4, #16]
 80295e0:	b943      	cbnz	r3, 80295f4 <__swbuf_r+0x32>
 80295e2:	4621      	mov	r1, r4
 80295e4:	4628      	mov	r0, r5
 80295e6:	f000 f82b 	bl	8029640 <__swsetup_r>
 80295ea:	b118      	cbz	r0, 80295f4 <__swbuf_r+0x32>
 80295ec:	f04f 37ff 	mov.w	r7, #4294967295
 80295f0:	4638      	mov	r0, r7
 80295f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80295f4:	6823      	ldr	r3, [r4, #0]
 80295f6:	6922      	ldr	r2, [r4, #16]
 80295f8:	1a98      	subs	r0, r3, r2
 80295fa:	6963      	ldr	r3, [r4, #20]
 80295fc:	b2f6      	uxtb	r6, r6
 80295fe:	4283      	cmp	r3, r0
 8029600:	4637      	mov	r7, r6
 8029602:	dc05      	bgt.n	8029610 <__swbuf_r+0x4e>
 8029604:	4621      	mov	r1, r4
 8029606:	4628      	mov	r0, r5
 8029608:	f000 fd1e 	bl	802a048 <_fflush_r>
 802960c:	2800      	cmp	r0, #0
 802960e:	d1ed      	bne.n	80295ec <__swbuf_r+0x2a>
 8029610:	68a3      	ldr	r3, [r4, #8]
 8029612:	3b01      	subs	r3, #1
 8029614:	60a3      	str	r3, [r4, #8]
 8029616:	6823      	ldr	r3, [r4, #0]
 8029618:	1c5a      	adds	r2, r3, #1
 802961a:	6022      	str	r2, [r4, #0]
 802961c:	701e      	strb	r6, [r3, #0]
 802961e:	6962      	ldr	r2, [r4, #20]
 8029620:	1c43      	adds	r3, r0, #1
 8029622:	429a      	cmp	r2, r3
 8029624:	d004      	beq.n	8029630 <__swbuf_r+0x6e>
 8029626:	89a3      	ldrh	r3, [r4, #12]
 8029628:	07db      	lsls	r3, r3, #31
 802962a:	d5e1      	bpl.n	80295f0 <__swbuf_r+0x2e>
 802962c:	2e0a      	cmp	r6, #10
 802962e:	d1df      	bne.n	80295f0 <__swbuf_r+0x2e>
 8029630:	4621      	mov	r1, r4
 8029632:	4628      	mov	r0, r5
 8029634:	f000 fd08 	bl	802a048 <_fflush_r>
 8029638:	2800      	cmp	r0, #0
 802963a:	d0d9      	beq.n	80295f0 <__swbuf_r+0x2e>
 802963c:	e7d6      	b.n	80295ec <__swbuf_r+0x2a>
	...

08029640 <__swsetup_r>:
 8029640:	b538      	push	{r3, r4, r5, lr}
 8029642:	4b29      	ldr	r3, [pc, #164]	@ (80296e8 <__swsetup_r+0xa8>)
 8029644:	4605      	mov	r5, r0
 8029646:	6818      	ldr	r0, [r3, #0]
 8029648:	460c      	mov	r4, r1
 802964a:	b118      	cbz	r0, 8029654 <__swsetup_r+0x14>
 802964c:	6a03      	ldr	r3, [r0, #32]
 802964e:	b90b      	cbnz	r3, 8029654 <__swsetup_r+0x14>
 8029650:	f7ff fec6 	bl	80293e0 <__sinit>
 8029654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029658:	0719      	lsls	r1, r3, #28
 802965a:	d422      	bmi.n	80296a2 <__swsetup_r+0x62>
 802965c:	06da      	lsls	r2, r3, #27
 802965e:	d407      	bmi.n	8029670 <__swsetup_r+0x30>
 8029660:	2209      	movs	r2, #9
 8029662:	602a      	str	r2, [r5, #0]
 8029664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029668:	81a3      	strh	r3, [r4, #12]
 802966a:	f04f 30ff 	mov.w	r0, #4294967295
 802966e:	e033      	b.n	80296d8 <__swsetup_r+0x98>
 8029670:	0758      	lsls	r0, r3, #29
 8029672:	d512      	bpl.n	802969a <__swsetup_r+0x5a>
 8029674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029676:	b141      	cbz	r1, 802968a <__swsetup_r+0x4a>
 8029678:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802967c:	4299      	cmp	r1, r3
 802967e:	d002      	beq.n	8029686 <__swsetup_r+0x46>
 8029680:	4628      	mov	r0, r5
 8029682:	f000 f93b 	bl	80298fc <_free_r>
 8029686:	2300      	movs	r3, #0
 8029688:	6363      	str	r3, [r4, #52]	@ 0x34
 802968a:	89a3      	ldrh	r3, [r4, #12]
 802968c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8029690:	81a3      	strh	r3, [r4, #12]
 8029692:	2300      	movs	r3, #0
 8029694:	6063      	str	r3, [r4, #4]
 8029696:	6923      	ldr	r3, [r4, #16]
 8029698:	6023      	str	r3, [r4, #0]
 802969a:	89a3      	ldrh	r3, [r4, #12]
 802969c:	f043 0308 	orr.w	r3, r3, #8
 80296a0:	81a3      	strh	r3, [r4, #12]
 80296a2:	6923      	ldr	r3, [r4, #16]
 80296a4:	b94b      	cbnz	r3, 80296ba <__swsetup_r+0x7a>
 80296a6:	89a3      	ldrh	r3, [r4, #12]
 80296a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80296ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80296b0:	d003      	beq.n	80296ba <__swsetup_r+0x7a>
 80296b2:	4621      	mov	r1, r4
 80296b4:	4628      	mov	r0, r5
 80296b6:	f000 fd15 	bl	802a0e4 <__smakebuf_r>
 80296ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80296be:	f013 0201 	ands.w	r2, r3, #1
 80296c2:	d00a      	beq.n	80296da <__swsetup_r+0x9a>
 80296c4:	2200      	movs	r2, #0
 80296c6:	60a2      	str	r2, [r4, #8]
 80296c8:	6962      	ldr	r2, [r4, #20]
 80296ca:	4252      	negs	r2, r2
 80296cc:	61a2      	str	r2, [r4, #24]
 80296ce:	6922      	ldr	r2, [r4, #16]
 80296d0:	b942      	cbnz	r2, 80296e4 <__swsetup_r+0xa4>
 80296d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80296d6:	d1c5      	bne.n	8029664 <__swsetup_r+0x24>
 80296d8:	bd38      	pop	{r3, r4, r5, pc}
 80296da:	0799      	lsls	r1, r3, #30
 80296dc:	bf58      	it	pl
 80296de:	6962      	ldrpl	r2, [r4, #20]
 80296e0:	60a2      	str	r2, [r4, #8]
 80296e2:	e7f4      	b.n	80296ce <__swsetup_r+0x8e>
 80296e4:	2000      	movs	r0, #0
 80296e6:	e7f7      	b.n	80296d8 <__swsetup_r+0x98>
 80296e8:	24000038 	.word	0x24000038

080296ec <memcmp>:
 80296ec:	b510      	push	{r4, lr}
 80296ee:	3901      	subs	r1, #1
 80296f0:	4402      	add	r2, r0
 80296f2:	4290      	cmp	r0, r2
 80296f4:	d101      	bne.n	80296fa <memcmp+0xe>
 80296f6:	2000      	movs	r0, #0
 80296f8:	e005      	b.n	8029706 <memcmp+0x1a>
 80296fa:	7803      	ldrb	r3, [r0, #0]
 80296fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8029700:	42a3      	cmp	r3, r4
 8029702:	d001      	beq.n	8029708 <memcmp+0x1c>
 8029704:	1b18      	subs	r0, r3, r4
 8029706:	bd10      	pop	{r4, pc}
 8029708:	3001      	adds	r0, #1
 802970a:	e7f2      	b.n	80296f2 <memcmp+0x6>

0802970c <memmove>:
 802970c:	4288      	cmp	r0, r1
 802970e:	b510      	push	{r4, lr}
 8029710:	eb01 0402 	add.w	r4, r1, r2
 8029714:	d902      	bls.n	802971c <memmove+0x10>
 8029716:	4284      	cmp	r4, r0
 8029718:	4623      	mov	r3, r4
 802971a:	d807      	bhi.n	802972c <memmove+0x20>
 802971c:	1e43      	subs	r3, r0, #1
 802971e:	42a1      	cmp	r1, r4
 8029720:	d008      	beq.n	8029734 <memmove+0x28>
 8029722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8029726:	f803 2f01 	strb.w	r2, [r3, #1]!
 802972a:	e7f8      	b.n	802971e <memmove+0x12>
 802972c:	4402      	add	r2, r0
 802972e:	4601      	mov	r1, r0
 8029730:	428a      	cmp	r2, r1
 8029732:	d100      	bne.n	8029736 <memmove+0x2a>
 8029734:	bd10      	pop	{r4, pc}
 8029736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802973a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802973e:	e7f7      	b.n	8029730 <memmove+0x24>

08029740 <memset>:
 8029740:	4402      	add	r2, r0
 8029742:	4603      	mov	r3, r0
 8029744:	4293      	cmp	r3, r2
 8029746:	d100      	bne.n	802974a <memset+0xa>
 8029748:	4770      	bx	lr
 802974a:	f803 1b01 	strb.w	r1, [r3], #1
 802974e:	e7f9      	b.n	8029744 <memset+0x4>

08029750 <_raise_r>:
 8029750:	291f      	cmp	r1, #31
 8029752:	b538      	push	{r3, r4, r5, lr}
 8029754:	4605      	mov	r5, r0
 8029756:	460c      	mov	r4, r1
 8029758:	d904      	bls.n	8029764 <_raise_r+0x14>
 802975a:	2316      	movs	r3, #22
 802975c:	6003      	str	r3, [r0, #0]
 802975e:	f04f 30ff 	mov.w	r0, #4294967295
 8029762:	bd38      	pop	{r3, r4, r5, pc}
 8029764:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8029766:	b112      	cbz	r2, 802976e <_raise_r+0x1e>
 8029768:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802976c:	b94b      	cbnz	r3, 8029782 <_raise_r+0x32>
 802976e:	4628      	mov	r0, r5
 8029770:	f000 f864 	bl	802983c <_getpid_r>
 8029774:	4622      	mov	r2, r4
 8029776:	4601      	mov	r1, r0
 8029778:	4628      	mov	r0, r5
 802977a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802977e:	f000 b84b 	b.w	8029818 <_kill_r>
 8029782:	2b01      	cmp	r3, #1
 8029784:	d00a      	beq.n	802979c <_raise_r+0x4c>
 8029786:	1c59      	adds	r1, r3, #1
 8029788:	d103      	bne.n	8029792 <_raise_r+0x42>
 802978a:	2316      	movs	r3, #22
 802978c:	6003      	str	r3, [r0, #0]
 802978e:	2001      	movs	r0, #1
 8029790:	e7e7      	b.n	8029762 <_raise_r+0x12>
 8029792:	2100      	movs	r1, #0
 8029794:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8029798:	4620      	mov	r0, r4
 802979a:	4798      	blx	r3
 802979c:	2000      	movs	r0, #0
 802979e:	e7e0      	b.n	8029762 <_raise_r+0x12>

080297a0 <raise>:
 80297a0:	4b02      	ldr	r3, [pc, #8]	@ (80297ac <raise+0xc>)
 80297a2:	4601      	mov	r1, r0
 80297a4:	6818      	ldr	r0, [r3, #0]
 80297a6:	f7ff bfd3 	b.w	8029750 <_raise_r>
 80297aa:	bf00      	nop
 80297ac:	24000038 	.word	0x24000038

080297b0 <_close_r>:
 80297b0:	b538      	push	{r3, r4, r5, lr}
 80297b2:	4d06      	ldr	r5, [pc, #24]	@ (80297cc <_close_r+0x1c>)
 80297b4:	2300      	movs	r3, #0
 80297b6:	4604      	mov	r4, r0
 80297b8:	4608      	mov	r0, r1
 80297ba:	602b      	str	r3, [r5, #0]
 80297bc:	f7e5 fc4e 	bl	800f05c <_close>
 80297c0:	1c43      	adds	r3, r0, #1
 80297c2:	d102      	bne.n	80297ca <_close_r+0x1a>
 80297c4:	682b      	ldr	r3, [r5, #0]
 80297c6:	b103      	cbz	r3, 80297ca <_close_r+0x1a>
 80297c8:	6023      	str	r3, [r4, #0]
 80297ca:	bd38      	pop	{r3, r4, r5, pc}
 80297cc:	24000c08 	.word	0x24000c08

080297d0 <_lseek_r>:
 80297d0:	b538      	push	{r3, r4, r5, lr}
 80297d2:	4d07      	ldr	r5, [pc, #28]	@ (80297f0 <_lseek_r+0x20>)
 80297d4:	4604      	mov	r4, r0
 80297d6:	4608      	mov	r0, r1
 80297d8:	4611      	mov	r1, r2
 80297da:	2200      	movs	r2, #0
 80297dc:	602a      	str	r2, [r5, #0]
 80297de:	461a      	mov	r2, r3
 80297e0:	f7e5 fc63 	bl	800f0aa <_lseek>
 80297e4:	1c43      	adds	r3, r0, #1
 80297e6:	d102      	bne.n	80297ee <_lseek_r+0x1e>
 80297e8:	682b      	ldr	r3, [r5, #0]
 80297ea:	b103      	cbz	r3, 80297ee <_lseek_r+0x1e>
 80297ec:	6023      	str	r3, [r4, #0]
 80297ee:	bd38      	pop	{r3, r4, r5, pc}
 80297f0:	24000c08 	.word	0x24000c08

080297f4 <_read_r>:
 80297f4:	b538      	push	{r3, r4, r5, lr}
 80297f6:	4d07      	ldr	r5, [pc, #28]	@ (8029814 <_read_r+0x20>)
 80297f8:	4604      	mov	r4, r0
 80297fa:	4608      	mov	r0, r1
 80297fc:	4611      	mov	r1, r2
 80297fe:	2200      	movs	r2, #0
 8029800:	602a      	str	r2, [r5, #0]
 8029802:	461a      	mov	r2, r3
 8029804:	f7e5 fbf1 	bl	800efea <_read>
 8029808:	1c43      	adds	r3, r0, #1
 802980a:	d102      	bne.n	8029812 <_read_r+0x1e>
 802980c:	682b      	ldr	r3, [r5, #0]
 802980e:	b103      	cbz	r3, 8029812 <_read_r+0x1e>
 8029810:	6023      	str	r3, [r4, #0]
 8029812:	bd38      	pop	{r3, r4, r5, pc}
 8029814:	24000c08 	.word	0x24000c08

08029818 <_kill_r>:
 8029818:	b538      	push	{r3, r4, r5, lr}
 802981a:	4d07      	ldr	r5, [pc, #28]	@ (8029838 <_kill_r+0x20>)
 802981c:	2300      	movs	r3, #0
 802981e:	4604      	mov	r4, r0
 8029820:	4608      	mov	r0, r1
 8029822:	4611      	mov	r1, r2
 8029824:	602b      	str	r3, [r5, #0]
 8029826:	f7e5 fbc5 	bl	800efb4 <_kill>
 802982a:	1c43      	adds	r3, r0, #1
 802982c:	d102      	bne.n	8029834 <_kill_r+0x1c>
 802982e:	682b      	ldr	r3, [r5, #0]
 8029830:	b103      	cbz	r3, 8029834 <_kill_r+0x1c>
 8029832:	6023      	str	r3, [r4, #0]
 8029834:	bd38      	pop	{r3, r4, r5, pc}
 8029836:	bf00      	nop
 8029838:	24000c08 	.word	0x24000c08

0802983c <_getpid_r>:
 802983c:	f7e5 bbb2 	b.w	800efa4 <_getpid>

08029840 <_sbrk_r>:
 8029840:	b538      	push	{r3, r4, r5, lr}
 8029842:	4d06      	ldr	r5, [pc, #24]	@ (802985c <_sbrk_r+0x1c>)
 8029844:	2300      	movs	r3, #0
 8029846:	4604      	mov	r4, r0
 8029848:	4608      	mov	r0, r1
 802984a:	602b      	str	r3, [r5, #0]
 802984c:	f7e5 fc3a 	bl	800f0c4 <_sbrk>
 8029850:	1c43      	adds	r3, r0, #1
 8029852:	d102      	bne.n	802985a <_sbrk_r+0x1a>
 8029854:	682b      	ldr	r3, [r5, #0]
 8029856:	b103      	cbz	r3, 802985a <_sbrk_r+0x1a>
 8029858:	6023      	str	r3, [r4, #0]
 802985a:	bd38      	pop	{r3, r4, r5, pc}
 802985c:	24000c08 	.word	0x24000c08

08029860 <_write_r>:
 8029860:	b538      	push	{r3, r4, r5, lr}
 8029862:	4d07      	ldr	r5, [pc, #28]	@ (8029880 <_write_r+0x20>)
 8029864:	4604      	mov	r4, r0
 8029866:	4608      	mov	r0, r1
 8029868:	4611      	mov	r1, r2
 802986a:	2200      	movs	r2, #0
 802986c:	602a      	str	r2, [r5, #0]
 802986e:	461a      	mov	r2, r3
 8029870:	f7e5 fbd8 	bl	800f024 <_write>
 8029874:	1c43      	adds	r3, r0, #1
 8029876:	d102      	bne.n	802987e <_write_r+0x1e>
 8029878:	682b      	ldr	r3, [r5, #0]
 802987a:	b103      	cbz	r3, 802987e <_write_r+0x1e>
 802987c:	6023      	str	r3, [r4, #0]
 802987e:	bd38      	pop	{r3, r4, r5, pc}
 8029880:	24000c08 	.word	0x24000c08

08029884 <__errno>:
 8029884:	4b01      	ldr	r3, [pc, #4]	@ (802988c <__errno+0x8>)
 8029886:	6818      	ldr	r0, [r3, #0]
 8029888:	4770      	bx	lr
 802988a:	bf00      	nop
 802988c:	24000038 	.word	0x24000038

08029890 <__libc_init_array>:
 8029890:	b570      	push	{r4, r5, r6, lr}
 8029892:	4d0d      	ldr	r5, [pc, #52]	@ (80298c8 <__libc_init_array+0x38>)
 8029894:	4c0d      	ldr	r4, [pc, #52]	@ (80298cc <__libc_init_array+0x3c>)
 8029896:	1b64      	subs	r4, r4, r5
 8029898:	10a4      	asrs	r4, r4, #2
 802989a:	2600      	movs	r6, #0
 802989c:	42a6      	cmp	r6, r4
 802989e:	d109      	bne.n	80298b4 <__libc_init_array+0x24>
 80298a0:	4d0b      	ldr	r5, [pc, #44]	@ (80298d0 <__libc_init_array+0x40>)
 80298a2:	4c0c      	ldr	r4, [pc, #48]	@ (80298d4 <__libc_init_array+0x44>)
 80298a4:	f000 fcb0 	bl	802a208 <_init>
 80298a8:	1b64      	subs	r4, r4, r5
 80298aa:	10a4      	asrs	r4, r4, #2
 80298ac:	2600      	movs	r6, #0
 80298ae:	42a6      	cmp	r6, r4
 80298b0:	d105      	bne.n	80298be <__libc_init_array+0x2e>
 80298b2:	bd70      	pop	{r4, r5, r6, pc}
 80298b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80298b8:	4798      	blx	r3
 80298ba:	3601      	adds	r6, #1
 80298bc:	e7ee      	b.n	802989c <__libc_init_array+0xc>
 80298be:	f855 3b04 	ldr.w	r3, [r5], #4
 80298c2:	4798      	blx	r3
 80298c4:	3601      	adds	r6, #1
 80298c6:	e7f2      	b.n	80298ae <__libc_init_array+0x1e>
 80298c8:	0802bb3c 	.word	0x0802bb3c
 80298cc:	0802bb3c 	.word	0x0802bb3c
 80298d0:	0802bb3c 	.word	0x0802bb3c
 80298d4:	0802bb48 	.word	0x0802bb48

080298d8 <__retarget_lock_init_recursive>:
 80298d8:	4770      	bx	lr

080298da <__retarget_lock_acquire_recursive>:
 80298da:	4770      	bx	lr

080298dc <__retarget_lock_release_recursive>:
 80298dc:	4770      	bx	lr

080298de <memcpy>:
 80298de:	440a      	add	r2, r1
 80298e0:	4291      	cmp	r1, r2
 80298e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80298e6:	d100      	bne.n	80298ea <memcpy+0xc>
 80298e8:	4770      	bx	lr
 80298ea:	b510      	push	{r4, lr}
 80298ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80298f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80298f4:	4291      	cmp	r1, r2
 80298f6:	d1f9      	bne.n	80298ec <memcpy+0xe>
 80298f8:	bd10      	pop	{r4, pc}
	...

080298fc <_free_r>:
 80298fc:	b538      	push	{r3, r4, r5, lr}
 80298fe:	4605      	mov	r5, r0
 8029900:	2900      	cmp	r1, #0
 8029902:	d041      	beq.n	8029988 <_free_r+0x8c>
 8029904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029908:	1f0c      	subs	r4, r1, #4
 802990a:	2b00      	cmp	r3, #0
 802990c:	bfb8      	it	lt
 802990e:	18e4      	addlt	r4, r4, r3
 8029910:	f7ff fc14 	bl	802913c <__malloc_lock>
 8029914:	4a1d      	ldr	r2, [pc, #116]	@ (802998c <_free_r+0x90>)
 8029916:	6813      	ldr	r3, [r2, #0]
 8029918:	b933      	cbnz	r3, 8029928 <_free_r+0x2c>
 802991a:	6063      	str	r3, [r4, #4]
 802991c:	6014      	str	r4, [r2, #0]
 802991e:	4628      	mov	r0, r5
 8029920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029924:	f7ff bc10 	b.w	8029148 <__malloc_unlock>
 8029928:	42a3      	cmp	r3, r4
 802992a:	d908      	bls.n	802993e <_free_r+0x42>
 802992c:	6820      	ldr	r0, [r4, #0]
 802992e:	1821      	adds	r1, r4, r0
 8029930:	428b      	cmp	r3, r1
 8029932:	bf01      	itttt	eq
 8029934:	6819      	ldreq	r1, [r3, #0]
 8029936:	685b      	ldreq	r3, [r3, #4]
 8029938:	1809      	addeq	r1, r1, r0
 802993a:	6021      	streq	r1, [r4, #0]
 802993c:	e7ed      	b.n	802991a <_free_r+0x1e>
 802993e:	461a      	mov	r2, r3
 8029940:	685b      	ldr	r3, [r3, #4]
 8029942:	b10b      	cbz	r3, 8029948 <_free_r+0x4c>
 8029944:	42a3      	cmp	r3, r4
 8029946:	d9fa      	bls.n	802993e <_free_r+0x42>
 8029948:	6811      	ldr	r1, [r2, #0]
 802994a:	1850      	adds	r0, r2, r1
 802994c:	42a0      	cmp	r0, r4
 802994e:	d10b      	bne.n	8029968 <_free_r+0x6c>
 8029950:	6820      	ldr	r0, [r4, #0]
 8029952:	4401      	add	r1, r0
 8029954:	1850      	adds	r0, r2, r1
 8029956:	4283      	cmp	r3, r0
 8029958:	6011      	str	r1, [r2, #0]
 802995a:	d1e0      	bne.n	802991e <_free_r+0x22>
 802995c:	6818      	ldr	r0, [r3, #0]
 802995e:	685b      	ldr	r3, [r3, #4]
 8029960:	6053      	str	r3, [r2, #4]
 8029962:	4408      	add	r0, r1
 8029964:	6010      	str	r0, [r2, #0]
 8029966:	e7da      	b.n	802991e <_free_r+0x22>
 8029968:	d902      	bls.n	8029970 <_free_r+0x74>
 802996a:	230c      	movs	r3, #12
 802996c:	602b      	str	r3, [r5, #0]
 802996e:	e7d6      	b.n	802991e <_free_r+0x22>
 8029970:	6820      	ldr	r0, [r4, #0]
 8029972:	1821      	adds	r1, r4, r0
 8029974:	428b      	cmp	r3, r1
 8029976:	bf04      	itt	eq
 8029978:	6819      	ldreq	r1, [r3, #0]
 802997a:	685b      	ldreq	r3, [r3, #4]
 802997c:	6063      	str	r3, [r4, #4]
 802997e:	bf04      	itt	eq
 8029980:	1809      	addeq	r1, r1, r0
 8029982:	6021      	streq	r1, [r4, #0]
 8029984:	6054      	str	r4, [r2, #4]
 8029986:	e7ca      	b.n	802991e <_free_r+0x22>
 8029988:	bd38      	pop	{r3, r4, r5, pc}
 802998a:	bf00      	nop
 802998c:	24000ac8 	.word	0x24000ac8

08029990 <_malloc_usable_size_r>:
 8029990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029994:	1f18      	subs	r0, r3, #4
 8029996:	2b00      	cmp	r3, #0
 8029998:	bfbc      	itt	lt
 802999a:	580b      	ldrlt	r3, [r1, r0]
 802999c:	18c0      	addlt	r0, r0, r3
 802999e:	4770      	bx	lr

080299a0 <__sfputc_r>:
 80299a0:	6893      	ldr	r3, [r2, #8]
 80299a2:	3b01      	subs	r3, #1
 80299a4:	2b00      	cmp	r3, #0
 80299a6:	b410      	push	{r4}
 80299a8:	6093      	str	r3, [r2, #8]
 80299aa:	da08      	bge.n	80299be <__sfputc_r+0x1e>
 80299ac:	6994      	ldr	r4, [r2, #24]
 80299ae:	42a3      	cmp	r3, r4
 80299b0:	db01      	blt.n	80299b6 <__sfputc_r+0x16>
 80299b2:	290a      	cmp	r1, #10
 80299b4:	d103      	bne.n	80299be <__sfputc_r+0x1e>
 80299b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80299ba:	f7ff be02 	b.w	80295c2 <__swbuf_r>
 80299be:	6813      	ldr	r3, [r2, #0]
 80299c0:	1c58      	adds	r0, r3, #1
 80299c2:	6010      	str	r0, [r2, #0]
 80299c4:	7019      	strb	r1, [r3, #0]
 80299c6:	4608      	mov	r0, r1
 80299c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80299cc:	4770      	bx	lr

080299ce <__sfputs_r>:
 80299ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80299d0:	4606      	mov	r6, r0
 80299d2:	460f      	mov	r7, r1
 80299d4:	4614      	mov	r4, r2
 80299d6:	18d5      	adds	r5, r2, r3
 80299d8:	42ac      	cmp	r4, r5
 80299da:	d101      	bne.n	80299e0 <__sfputs_r+0x12>
 80299dc:	2000      	movs	r0, #0
 80299de:	e007      	b.n	80299f0 <__sfputs_r+0x22>
 80299e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80299e4:	463a      	mov	r2, r7
 80299e6:	4630      	mov	r0, r6
 80299e8:	f7ff ffda 	bl	80299a0 <__sfputc_r>
 80299ec:	1c43      	adds	r3, r0, #1
 80299ee:	d1f3      	bne.n	80299d8 <__sfputs_r+0xa>
 80299f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080299f4 <_vfiprintf_r>:
 80299f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80299f8:	460d      	mov	r5, r1
 80299fa:	b09d      	sub	sp, #116	@ 0x74
 80299fc:	4614      	mov	r4, r2
 80299fe:	4698      	mov	r8, r3
 8029a00:	4606      	mov	r6, r0
 8029a02:	b118      	cbz	r0, 8029a0c <_vfiprintf_r+0x18>
 8029a04:	6a03      	ldr	r3, [r0, #32]
 8029a06:	b90b      	cbnz	r3, 8029a0c <_vfiprintf_r+0x18>
 8029a08:	f7ff fcea 	bl	80293e0 <__sinit>
 8029a0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029a0e:	07d9      	lsls	r1, r3, #31
 8029a10:	d405      	bmi.n	8029a1e <_vfiprintf_r+0x2a>
 8029a12:	89ab      	ldrh	r3, [r5, #12]
 8029a14:	059a      	lsls	r2, r3, #22
 8029a16:	d402      	bmi.n	8029a1e <_vfiprintf_r+0x2a>
 8029a18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029a1a:	f7ff ff5e 	bl	80298da <__retarget_lock_acquire_recursive>
 8029a1e:	89ab      	ldrh	r3, [r5, #12]
 8029a20:	071b      	lsls	r3, r3, #28
 8029a22:	d501      	bpl.n	8029a28 <_vfiprintf_r+0x34>
 8029a24:	692b      	ldr	r3, [r5, #16]
 8029a26:	b99b      	cbnz	r3, 8029a50 <_vfiprintf_r+0x5c>
 8029a28:	4629      	mov	r1, r5
 8029a2a:	4630      	mov	r0, r6
 8029a2c:	f7ff fe08 	bl	8029640 <__swsetup_r>
 8029a30:	b170      	cbz	r0, 8029a50 <_vfiprintf_r+0x5c>
 8029a32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029a34:	07dc      	lsls	r4, r3, #31
 8029a36:	d504      	bpl.n	8029a42 <_vfiprintf_r+0x4e>
 8029a38:	f04f 30ff 	mov.w	r0, #4294967295
 8029a3c:	b01d      	add	sp, #116	@ 0x74
 8029a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029a42:	89ab      	ldrh	r3, [r5, #12]
 8029a44:	0598      	lsls	r0, r3, #22
 8029a46:	d4f7      	bmi.n	8029a38 <_vfiprintf_r+0x44>
 8029a48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029a4a:	f7ff ff47 	bl	80298dc <__retarget_lock_release_recursive>
 8029a4e:	e7f3      	b.n	8029a38 <_vfiprintf_r+0x44>
 8029a50:	2300      	movs	r3, #0
 8029a52:	9309      	str	r3, [sp, #36]	@ 0x24
 8029a54:	2320      	movs	r3, #32
 8029a56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8029a5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8029a5e:	2330      	movs	r3, #48	@ 0x30
 8029a60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8029c10 <_vfiprintf_r+0x21c>
 8029a64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8029a68:	f04f 0901 	mov.w	r9, #1
 8029a6c:	4623      	mov	r3, r4
 8029a6e:	469a      	mov	sl, r3
 8029a70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029a74:	b10a      	cbz	r2, 8029a7a <_vfiprintf_r+0x86>
 8029a76:	2a25      	cmp	r2, #37	@ 0x25
 8029a78:	d1f9      	bne.n	8029a6e <_vfiprintf_r+0x7a>
 8029a7a:	ebba 0b04 	subs.w	fp, sl, r4
 8029a7e:	d00b      	beq.n	8029a98 <_vfiprintf_r+0xa4>
 8029a80:	465b      	mov	r3, fp
 8029a82:	4622      	mov	r2, r4
 8029a84:	4629      	mov	r1, r5
 8029a86:	4630      	mov	r0, r6
 8029a88:	f7ff ffa1 	bl	80299ce <__sfputs_r>
 8029a8c:	3001      	adds	r0, #1
 8029a8e:	f000 80a7 	beq.w	8029be0 <_vfiprintf_r+0x1ec>
 8029a92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029a94:	445a      	add	r2, fp
 8029a96:	9209      	str	r2, [sp, #36]	@ 0x24
 8029a98:	f89a 3000 	ldrb.w	r3, [sl]
 8029a9c:	2b00      	cmp	r3, #0
 8029a9e:	f000 809f 	beq.w	8029be0 <_vfiprintf_r+0x1ec>
 8029aa2:	2300      	movs	r3, #0
 8029aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8029aa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029aac:	f10a 0a01 	add.w	sl, sl, #1
 8029ab0:	9304      	str	r3, [sp, #16]
 8029ab2:	9307      	str	r3, [sp, #28]
 8029ab4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8029ab8:	931a      	str	r3, [sp, #104]	@ 0x68
 8029aba:	4654      	mov	r4, sl
 8029abc:	2205      	movs	r2, #5
 8029abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029ac2:	4853      	ldr	r0, [pc, #332]	@ (8029c10 <_vfiprintf_r+0x21c>)
 8029ac4:	f7d6 fc1c 	bl	8000300 <memchr>
 8029ac8:	9a04      	ldr	r2, [sp, #16]
 8029aca:	b9d8      	cbnz	r0, 8029b04 <_vfiprintf_r+0x110>
 8029acc:	06d1      	lsls	r1, r2, #27
 8029ace:	bf44      	itt	mi
 8029ad0:	2320      	movmi	r3, #32
 8029ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029ad6:	0713      	lsls	r3, r2, #28
 8029ad8:	bf44      	itt	mi
 8029ada:	232b      	movmi	r3, #43	@ 0x2b
 8029adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8029ae4:	2b2a      	cmp	r3, #42	@ 0x2a
 8029ae6:	d015      	beq.n	8029b14 <_vfiprintf_r+0x120>
 8029ae8:	9a07      	ldr	r2, [sp, #28]
 8029aea:	4654      	mov	r4, sl
 8029aec:	2000      	movs	r0, #0
 8029aee:	f04f 0c0a 	mov.w	ip, #10
 8029af2:	4621      	mov	r1, r4
 8029af4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029af8:	3b30      	subs	r3, #48	@ 0x30
 8029afa:	2b09      	cmp	r3, #9
 8029afc:	d94b      	bls.n	8029b96 <_vfiprintf_r+0x1a2>
 8029afe:	b1b0      	cbz	r0, 8029b2e <_vfiprintf_r+0x13a>
 8029b00:	9207      	str	r2, [sp, #28]
 8029b02:	e014      	b.n	8029b2e <_vfiprintf_r+0x13a>
 8029b04:	eba0 0308 	sub.w	r3, r0, r8
 8029b08:	fa09 f303 	lsl.w	r3, r9, r3
 8029b0c:	4313      	orrs	r3, r2
 8029b0e:	9304      	str	r3, [sp, #16]
 8029b10:	46a2      	mov	sl, r4
 8029b12:	e7d2      	b.n	8029aba <_vfiprintf_r+0xc6>
 8029b14:	9b03      	ldr	r3, [sp, #12]
 8029b16:	1d19      	adds	r1, r3, #4
 8029b18:	681b      	ldr	r3, [r3, #0]
 8029b1a:	9103      	str	r1, [sp, #12]
 8029b1c:	2b00      	cmp	r3, #0
 8029b1e:	bfbb      	ittet	lt
 8029b20:	425b      	neglt	r3, r3
 8029b22:	f042 0202 	orrlt.w	r2, r2, #2
 8029b26:	9307      	strge	r3, [sp, #28]
 8029b28:	9307      	strlt	r3, [sp, #28]
 8029b2a:	bfb8      	it	lt
 8029b2c:	9204      	strlt	r2, [sp, #16]
 8029b2e:	7823      	ldrb	r3, [r4, #0]
 8029b30:	2b2e      	cmp	r3, #46	@ 0x2e
 8029b32:	d10a      	bne.n	8029b4a <_vfiprintf_r+0x156>
 8029b34:	7863      	ldrb	r3, [r4, #1]
 8029b36:	2b2a      	cmp	r3, #42	@ 0x2a
 8029b38:	d132      	bne.n	8029ba0 <_vfiprintf_r+0x1ac>
 8029b3a:	9b03      	ldr	r3, [sp, #12]
 8029b3c:	1d1a      	adds	r2, r3, #4
 8029b3e:	681b      	ldr	r3, [r3, #0]
 8029b40:	9203      	str	r2, [sp, #12]
 8029b42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8029b46:	3402      	adds	r4, #2
 8029b48:	9305      	str	r3, [sp, #20]
 8029b4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8029c20 <_vfiprintf_r+0x22c>
 8029b4e:	7821      	ldrb	r1, [r4, #0]
 8029b50:	2203      	movs	r2, #3
 8029b52:	4650      	mov	r0, sl
 8029b54:	f7d6 fbd4 	bl	8000300 <memchr>
 8029b58:	b138      	cbz	r0, 8029b6a <_vfiprintf_r+0x176>
 8029b5a:	9b04      	ldr	r3, [sp, #16]
 8029b5c:	eba0 000a 	sub.w	r0, r0, sl
 8029b60:	2240      	movs	r2, #64	@ 0x40
 8029b62:	4082      	lsls	r2, r0
 8029b64:	4313      	orrs	r3, r2
 8029b66:	3401      	adds	r4, #1
 8029b68:	9304      	str	r3, [sp, #16]
 8029b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029b6e:	4829      	ldr	r0, [pc, #164]	@ (8029c14 <_vfiprintf_r+0x220>)
 8029b70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8029b74:	2206      	movs	r2, #6
 8029b76:	f7d6 fbc3 	bl	8000300 <memchr>
 8029b7a:	2800      	cmp	r0, #0
 8029b7c:	d03f      	beq.n	8029bfe <_vfiprintf_r+0x20a>
 8029b7e:	4b26      	ldr	r3, [pc, #152]	@ (8029c18 <_vfiprintf_r+0x224>)
 8029b80:	bb1b      	cbnz	r3, 8029bca <_vfiprintf_r+0x1d6>
 8029b82:	9b03      	ldr	r3, [sp, #12]
 8029b84:	3307      	adds	r3, #7
 8029b86:	f023 0307 	bic.w	r3, r3, #7
 8029b8a:	3308      	adds	r3, #8
 8029b8c:	9303      	str	r3, [sp, #12]
 8029b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029b90:	443b      	add	r3, r7
 8029b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8029b94:	e76a      	b.n	8029a6c <_vfiprintf_r+0x78>
 8029b96:	fb0c 3202 	mla	r2, ip, r2, r3
 8029b9a:	460c      	mov	r4, r1
 8029b9c:	2001      	movs	r0, #1
 8029b9e:	e7a8      	b.n	8029af2 <_vfiprintf_r+0xfe>
 8029ba0:	2300      	movs	r3, #0
 8029ba2:	3401      	adds	r4, #1
 8029ba4:	9305      	str	r3, [sp, #20]
 8029ba6:	4619      	mov	r1, r3
 8029ba8:	f04f 0c0a 	mov.w	ip, #10
 8029bac:	4620      	mov	r0, r4
 8029bae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029bb2:	3a30      	subs	r2, #48	@ 0x30
 8029bb4:	2a09      	cmp	r2, #9
 8029bb6:	d903      	bls.n	8029bc0 <_vfiprintf_r+0x1cc>
 8029bb8:	2b00      	cmp	r3, #0
 8029bba:	d0c6      	beq.n	8029b4a <_vfiprintf_r+0x156>
 8029bbc:	9105      	str	r1, [sp, #20]
 8029bbe:	e7c4      	b.n	8029b4a <_vfiprintf_r+0x156>
 8029bc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8029bc4:	4604      	mov	r4, r0
 8029bc6:	2301      	movs	r3, #1
 8029bc8:	e7f0      	b.n	8029bac <_vfiprintf_r+0x1b8>
 8029bca:	ab03      	add	r3, sp, #12
 8029bcc:	9300      	str	r3, [sp, #0]
 8029bce:	462a      	mov	r2, r5
 8029bd0:	4b12      	ldr	r3, [pc, #72]	@ (8029c1c <_vfiprintf_r+0x228>)
 8029bd2:	a904      	add	r1, sp, #16
 8029bd4:	4630      	mov	r0, r6
 8029bd6:	f3af 8000 	nop.w
 8029bda:	4607      	mov	r7, r0
 8029bdc:	1c78      	adds	r0, r7, #1
 8029bde:	d1d6      	bne.n	8029b8e <_vfiprintf_r+0x19a>
 8029be0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8029be2:	07d9      	lsls	r1, r3, #31
 8029be4:	d405      	bmi.n	8029bf2 <_vfiprintf_r+0x1fe>
 8029be6:	89ab      	ldrh	r3, [r5, #12]
 8029be8:	059a      	lsls	r2, r3, #22
 8029bea:	d402      	bmi.n	8029bf2 <_vfiprintf_r+0x1fe>
 8029bec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029bee:	f7ff fe75 	bl	80298dc <__retarget_lock_release_recursive>
 8029bf2:	89ab      	ldrh	r3, [r5, #12]
 8029bf4:	065b      	lsls	r3, r3, #25
 8029bf6:	f53f af1f 	bmi.w	8029a38 <_vfiprintf_r+0x44>
 8029bfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029bfc:	e71e      	b.n	8029a3c <_vfiprintf_r+0x48>
 8029bfe:	ab03      	add	r3, sp, #12
 8029c00:	9300      	str	r3, [sp, #0]
 8029c02:	462a      	mov	r2, r5
 8029c04:	4b05      	ldr	r3, [pc, #20]	@ (8029c1c <_vfiprintf_r+0x228>)
 8029c06:	a904      	add	r1, sp, #16
 8029c08:	4630      	mov	r0, r6
 8029c0a:	f000 f879 	bl	8029d00 <_printf_i>
 8029c0e:	e7e4      	b.n	8029bda <_vfiprintf_r+0x1e6>
 8029c10:	0802bb01 	.word	0x0802bb01
 8029c14:	0802bb0b 	.word	0x0802bb0b
 8029c18:	00000000 	.word	0x00000000
 8029c1c:	080299cf 	.word	0x080299cf
 8029c20:	0802bb07 	.word	0x0802bb07

08029c24 <_printf_common>:
 8029c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029c28:	4616      	mov	r6, r2
 8029c2a:	4698      	mov	r8, r3
 8029c2c:	688a      	ldr	r2, [r1, #8]
 8029c2e:	690b      	ldr	r3, [r1, #16]
 8029c30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8029c34:	4293      	cmp	r3, r2
 8029c36:	bfb8      	it	lt
 8029c38:	4613      	movlt	r3, r2
 8029c3a:	6033      	str	r3, [r6, #0]
 8029c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8029c40:	4607      	mov	r7, r0
 8029c42:	460c      	mov	r4, r1
 8029c44:	b10a      	cbz	r2, 8029c4a <_printf_common+0x26>
 8029c46:	3301      	adds	r3, #1
 8029c48:	6033      	str	r3, [r6, #0]
 8029c4a:	6823      	ldr	r3, [r4, #0]
 8029c4c:	0699      	lsls	r1, r3, #26
 8029c4e:	bf42      	ittt	mi
 8029c50:	6833      	ldrmi	r3, [r6, #0]
 8029c52:	3302      	addmi	r3, #2
 8029c54:	6033      	strmi	r3, [r6, #0]
 8029c56:	6825      	ldr	r5, [r4, #0]
 8029c58:	f015 0506 	ands.w	r5, r5, #6
 8029c5c:	d106      	bne.n	8029c6c <_printf_common+0x48>
 8029c5e:	f104 0a19 	add.w	sl, r4, #25
 8029c62:	68e3      	ldr	r3, [r4, #12]
 8029c64:	6832      	ldr	r2, [r6, #0]
 8029c66:	1a9b      	subs	r3, r3, r2
 8029c68:	42ab      	cmp	r3, r5
 8029c6a:	dc26      	bgt.n	8029cba <_printf_common+0x96>
 8029c6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8029c70:	6822      	ldr	r2, [r4, #0]
 8029c72:	3b00      	subs	r3, #0
 8029c74:	bf18      	it	ne
 8029c76:	2301      	movne	r3, #1
 8029c78:	0692      	lsls	r2, r2, #26
 8029c7a:	d42b      	bmi.n	8029cd4 <_printf_common+0xb0>
 8029c7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8029c80:	4641      	mov	r1, r8
 8029c82:	4638      	mov	r0, r7
 8029c84:	47c8      	blx	r9
 8029c86:	3001      	adds	r0, #1
 8029c88:	d01e      	beq.n	8029cc8 <_printf_common+0xa4>
 8029c8a:	6823      	ldr	r3, [r4, #0]
 8029c8c:	6922      	ldr	r2, [r4, #16]
 8029c8e:	f003 0306 	and.w	r3, r3, #6
 8029c92:	2b04      	cmp	r3, #4
 8029c94:	bf02      	ittt	eq
 8029c96:	68e5      	ldreq	r5, [r4, #12]
 8029c98:	6833      	ldreq	r3, [r6, #0]
 8029c9a:	1aed      	subeq	r5, r5, r3
 8029c9c:	68a3      	ldr	r3, [r4, #8]
 8029c9e:	bf0c      	ite	eq
 8029ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029ca4:	2500      	movne	r5, #0
 8029ca6:	4293      	cmp	r3, r2
 8029ca8:	bfc4      	itt	gt
 8029caa:	1a9b      	subgt	r3, r3, r2
 8029cac:	18ed      	addgt	r5, r5, r3
 8029cae:	2600      	movs	r6, #0
 8029cb0:	341a      	adds	r4, #26
 8029cb2:	42b5      	cmp	r5, r6
 8029cb4:	d11a      	bne.n	8029cec <_printf_common+0xc8>
 8029cb6:	2000      	movs	r0, #0
 8029cb8:	e008      	b.n	8029ccc <_printf_common+0xa8>
 8029cba:	2301      	movs	r3, #1
 8029cbc:	4652      	mov	r2, sl
 8029cbe:	4641      	mov	r1, r8
 8029cc0:	4638      	mov	r0, r7
 8029cc2:	47c8      	blx	r9
 8029cc4:	3001      	adds	r0, #1
 8029cc6:	d103      	bne.n	8029cd0 <_printf_common+0xac>
 8029cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8029ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029cd0:	3501      	adds	r5, #1
 8029cd2:	e7c6      	b.n	8029c62 <_printf_common+0x3e>
 8029cd4:	18e1      	adds	r1, r4, r3
 8029cd6:	1c5a      	adds	r2, r3, #1
 8029cd8:	2030      	movs	r0, #48	@ 0x30
 8029cda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8029cde:	4422      	add	r2, r4
 8029ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8029ce4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8029ce8:	3302      	adds	r3, #2
 8029cea:	e7c7      	b.n	8029c7c <_printf_common+0x58>
 8029cec:	2301      	movs	r3, #1
 8029cee:	4622      	mov	r2, r4
 8029cf0:	4641      	mov	r1, r8
 8029cf2:	4638      	mov	r0, r7
 8029cf4:	47c8      	blx	r9
 8029cf6:	3001      	adds	r0, #1
 8029cf8:	d0e6      	beq.n	8029cc8 <_printf_common+0xa4>
 8029cfa:	3601      	adds	r6, #1
 8029cfc:	e7d9      	b.n	8029cb2 <_printf_common+0x8e>
	...

08029d00 <_printf_i>:
 8029d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029d04:	7e0f      	ldrb	r7, [r1, #24]
 8029d06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8029d08:	2f78      	cmp	r7, #120	@ 0x78
 8029d0a:	4691      	mov	r9, r2
 8029d0c:	4680      	mov	r8, r0
 8029d0e:	460c      	mov	r4, r1
 8029d10:	469a      	mov	sl, r3
 8029d12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8029d16:	d807      	bhi.n	8029d28 <_printf_i+0x28>
 8029d18:	2f62      	cmp	r7, #98	@ 0x62
 8029d1a:	d80a      	bhi.n	8029d32 <_printf_i+0x32>
 8029d1c:	2f00      	cmp	r7, #0
 8029d1e:	f000 80d2 	beq.w	8029ec6 <_printf_i+0x1c6>
 8029d22:	2f58      	cmp	r7, #88	@ 0x58
 8029d24:	f000 80b9 	beq.w	8029e9a <_printf_i+0x19a>
 8029d28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8029d2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8029d30:	e03a      	b.n	8029da8 <_printf_i+0xa8>
 8029d32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8029d36:	2b15      	cmp	r3, #21
 8029d38:	d8f6      	bhi.n	8029d28 <_printf_i+0x28>
 8029d3a:	a101      	add	r1, pc, #4	@ (adr r1, 8029d40 <_printf_i+0x40>)
 8029d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8029d40:	08029d99 	.word	0x08029d99
 8029d44:	08029dad 	.word	0x08029dad
 8029d48:	08029d29 	.word	0x08029d29
 8029d4c:	08029d29 	.word	0x08029d29
 8029d50:	08029d29 	.word	0x08029d29
 8029d54:	08029d29 	.word	0x08029d29
 8029d58:	08029dad 	.word	0x08029dad
 8029d5c:	08029d29 	.word	0x08029d29
 8029d60:	08029d29 	.word	0x08029d29
 8029d64:	08029d29 	.word	0x08029d29
 8029d68:	08029d29 	.word	0x08029d29
 8029d6c:	08029ead 	.word	0x08029ead
 8029d70:	08029dd7 	.word	0x08029dd7
 8029d74:	08029e67 	.word	0x08029e67
 8029d78:	08029d29 	.word	0x08029d29
 8029d7c:	08029d29 	.word	0x08029d29
 8029d80:	08029ecf 	.word	0x08029ecf
 8029d84:	08029d29 	.word	0x08029d29
 8029d88:	08029dd7 	.word	0x08029dd7
 8029d8c:	08029d29 	.word	0x08029d29
 8029d90:	08029d29 	.word	0x08029d29
 8029d94:	08029e6f 	.word	0x08029e6f
 8029d98:	6833      	ldr	r3, [r6, #0]
 8029d9a:	1d1a      	adds	r2, r3, #4
 8029d9c:	681b      	ldr	r3, [r3, #0]
 8029d9e:	6032      	str	r2, [r6, #0]
 8029da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8029da4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8029da8:	2301      	movs	r3, #1
 8029daa:	e09d      	b.n	8029ee8 <_printf_i+0x1e8>
 8029dac:	6833      	ldr	r3, [r6, #0]
 8029dae:	6820      	ldr	r0, [r4, #0]
 8029db0:	1d19      	adds	r1, r3, #4
 8029db2:	6031      	str	r1, [r6, #0]
 8029db4:	0606      	lsls	r6, r0, #24
 8029db6:	d501      	bpl.n	8029dbc <_printf_i+0xbc>
 8029db8:	681d      	ldr	r5, [r3, #0]
 8029dba:	e003      	b.n	8029dc4 <_printf_i+0xc4>
 8029dbc:	0645      	lsls	r5, r0, #25
 8029dbe:	d5fb      	bpl.n	8029db8 <_printf_i+0xb8>
 8029dc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8029dc4:	2d00      	cmp	r5, #0
 8029dc6:	da03      	bge.n	8029dd0 <_printf_i+0xd0>
 8029dc8:	232d      	movs	r3, #45	@ 0x2d
 8029dca:	426d      	negs	r5, r5
 8029dcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8029dd0:	4859      	ldr	r0, [pc, #356]	@ (8029f38 <_printf_i+0x238>)
 8029dd2:	230a      	movs	r3, #10
 8029dd4:	e011      	b.n	8029dfa <_printf_i+0xfa>
 8029dd6:	6821      	ldr	r1, [r4, #0]
 8029dd8:	6833      	ldr	r3, [r6, #0]
 8029dda:	0608      	lsls	r0, r1, #24
 8029ddc:	f853 5b04 	ldr.w	r5, [r3], #4
 8029de0:	d402      	bmi.n	8029de8 <_printf_i+0xe8>
 8029de2:	0649      	lsls	r1, r1, #25
 8029de4:	bf48      	it	mi
 8029de6:	b2ad      	uxthmi	r5, r5
 8029de8:	2f6f      	cmp	r7, #111	@ 0x6f
 8029dea:	4853      	ldr	r0, [pc, #332]	@ (8029f38 <_printf_i+0x238>)
 8029dec:	6033      	str	r3, [r6, #0]
 8029dee:	bf14      	ite	ne
 8029df0:	230a      	movne	r3, #10
 8029df2:	2308      	moveq	r3, #8
 8029df4:	2100      	movs	r1, #0
 8029df6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8029dfa:	6866      	ldr	r6, [r4, #4]
 8029dfc:	60a6      	str	r6, [r4, #8]
 8029dfe:	2e00      	cmp	r6, #0
 8029e00:	bfa2      	ittt	ge
 8029e02:	6821      	ldrge	r1, [r4, #0]
 8029e04:	f021 0104 	bicge.w	r1, r1, #4
 8029e08:	6021      	strge	r1, [r4, #0]
 8029e0a:	b90d      	cbnz	r5, 8029e10 <_printf_i+0x110>
 8029e0c:	2e00      	cmp	r6, #0
 8029e0e:	d04b      	beq.n	8029ea8 <_printf_i+0x1a8>
 8029e10:	4616      	mov	r6, r2
 8029e12:	fbb5 f1f3 	udiv	r1, r5, r3
 8029e16:	fb03 5711 	mls	r7, r3, r1, r5
 8029e1a:	5dc7      	ldrb	r7, [r0, r7]
 8029e1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8029e20:	462f      	mov	r7, r5
 8029e22:	42bb      	cmp	r3, r7
 8029e24:	460d      	mov	r5, r1
 8029e26:	d9f4      	bls.n	8029e12 <_printf_i+0x112>
 8029e28:	2b08      	cmp	r3, #8
 8029e2a:	d10b      	bne.n	8029e44 <_printf_i+0x144>
 8029e2c:	6823      	ldr	r3, [r4, #0]
 8029e2e:	07df      	lsls	r7, r3, #31
 8029e30:	d508      	bpl.n	8029e44 <_printf_i+0x144>
 8029e32:	6923      	ldr	r3, [r4, #16]
 8029e34:	6861      	ldr	r1, [r4, #4]
 8029e36:	4299      	cmp	r1, r3
 8029e38:	bfde      	ittt	le
 8029e3a:	2330      	movle	r3, #48	@ 0x30
 8029e3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8029e40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8029e44:	1b92      	subs	r2, r2, r6
 8029e46:	6122      	str	r2, [r4, #16]
 8029e48:	f8cd a000 	str.w	sl, [sp]
 8029e4c:	464b      	mov	r3, r9
 8029e4e:	aa03      	add	r2, sp, #12
 8029e50:	4621      	mov	r1, r4
 8029e52:	4640      	mov	r0, r8
 8029e54:	f7ff fee6 	bl	8029c24 <_printf_common>
 8029e58:	3001      	adds	r0, #1
 8029e5a:	d14a      	bne.n	8029ef2 <_printf_i+0x1f2>
 8029e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8029e60:	b004      	add	sp, #16
 8029e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029e66:	6823      	ldr	r3, [r4, #0]
 8029e68:	f043 0320 	orr.w	r3, r3, #32
 8029e6c:	6023      	str	r3, [r4, #0]
 8029e6e:	4833      	ldr	r0, [pc, #204]	@ (8029f3c <_printf_i+0x23c>)
 8029e70:	2778      	movs	r7, #120	@ 0x78
 8029e72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8029e76:	6823      	ldr	r3, [r4, #0]
 8029e78:	6831      	ldr	r1, [r6, #0]
 8029e7a:	061f      	lsls	r7, r3, #24
 8029e7c:	f851 5b04 	ldr.w	r5, [r1], #4
 8029e80:	d402      	bmi.n	8029e88 <_printf_i+0x188>
 8029e82:	065f      	lsls	r7, r3, #25
 8029e84:	bf48      	it	mi
 8029e86:	b2ad      	uxthmi	r5, r5
 8029e88:	6031      	str	r1, [r6, #0]
 8029e8a:	07d9      	lsls	r1, r3, #31
 8029e8c:	bf44      	itt	mi
 8029e8e:	f043 0320 	orrmi.w	r3, r3, #32
 8029e92:	6023      	strmi	r3, [r4, #0]
 8029e94:	b11d      	cbz	r5, 8029e9e <_printf_i+0x19e>
 8029e96:	2310      	movs	r3, #16
 8029e98:	e7ac      	b.n	8029df4 <_printf_i+0xf4>
 8029e9a:	4827      	ldr	r0, [pc, #156]	@ (8029f38 <_printf_i+0x238>)
 8029e9c:	e7e9      	b.n	8029e72 <_printf_i+0x172>
 8029e9e:	6823      	ldr	r3, [r4, #0]
 8029ea0:	f023 0320 	bic.w	r3, r3, #32
 8029ea4:	6023      	str	r3, [r4, #0]
 8029ea6:	e7f6      	b.n	8029e96 <_printf_i+0x196>
 8029ea8:	4616      	mov	r6, r2
 8029eaa:	e7bd      	b.n	8029e28 <_printf_i+0x128>
 8029eac:	6833      	ldr	r3, [r6, #0]
 8029eae:	6825      	ldr	r5, [r4, #0]
 8029eb0:	6961      	ldr	r1, [r4, #20]
 8029eb2:	1d18      	adds	r0, r3, #4
 8029eb4:	6030      	str	r0, [r6, #0]
 8029eb6:	062e      	lsls	r6, r5, #24
 8029eb8:	681b      	ldr	r3, [r3, #0]
 8029eba:	d501      	bpl.n	8029ec0 <_printf_i+0x1c0>
 8029ebc:	6019      	str	r1, [r3, #0]
 8029ebe:	e002      	b.n	8029ec6 <_printf_i+0x1c6>
 8029ec0:	0668      	lsls	r0, r5, #25
 8029ec2:	d5fb      	bpl.n	8029ebc <_printf_i+0x1bc>
 8029ec4:	8019      	strh	r1, [r3, #0]
 8029ec6:	2300      	movs	r3, #0
 8029ec8:	6123      	str	r3, [r4, #16]
 8029eca:	4616      	mov	r6, r2
 8029ecc:	e7bc      	b.n	8029e48 <_printf_i+0x148>
 8029ece:	6833      	ldr	r3, [r6, #0]
 8029ed0:	1d1a      	adds	r2, r3, #4
 8029ed2:	6032      	str	r2, [r6, #0]
 8029ed4:	681e      	ldr	r6, [r3, #0]
 8029ed6:	6862      	ldr	r2, [r4, #4]
 8029ed8:	2100      	movs	r1, #0
 8029eda:	4630      	mov	r0, r6
 8029edc:	f7d6 fa10 	bl	8000300 <memchr>
 8029ee0:	b108      	cbz	r0, 8029ee6 <_printf_i+0x1e6>
 8029ee2:	1b80      	subs	r0, r0, r6
 8029ee4:	6060      	str	r0, [r4, #4]
 8029ee6:	6863      	ldr	r3, [r4, #4]
 8029ee8:	6123      	str	r3, [r4, #16]
 8029eea:	2300      	movs	r3, #0
 8029eec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8029ef0:	e7aa      	b.n	8029e48 <_printf_i+0x148>
 8029ef2:	6923      	ldr	r3, [r4, #16]
 8029ef4:	4632      	mov	r2, r6
 8029ef6:	4649      	mov	r1, r9
 8029ef8:	4640      	mov	r0, r8
 8029efa:	47d0      	blx	sl
 8029efc:	3001      	adds	r0, #1
 8029efe:	d0ad      	beq.n	8029e5c <_printf_i+0x15c>
 8029f00:	6823      	ldr	r3, [r4, #0]
 8029f02:	079b      	lsls	r3, r3, #30
 8029f04:	d413      	bmi.n	8029f2e <_printf_i+0x22e>
 8029f06:	68e0      	ldr	r0, [r4, #12]
 8029f08:	9b03      	ldr	r3, [sp, #12]
 8029f0a:	4298      	cmp	r0, r3
 8029f0c:	bfb8      	it	lt
 8029f0e:	4618      	movlt	r0, r3
 8029f10:	e7a6      	b.n	8029e60 <_printf_i+0x160>
 8029f12:	2301      	movs	r3, #1
 8029f14:	4632      	mov	r2, r6
 8029f16:	4649      	mov	r1, r9
 8029f18:	4640      	mov	r0, r8
 8029f1a:	47d0      	blx	sl
 8029f1c:	3001      	adds	r0, #1
 8029f1e:	d09d      	beq.n	8029e5c <_printf_i+0x15c>
 8029f20:	3501      	adds	r5, #1
 8029f22:	68e3      	ldr	r3, [r4, #12]
 8029f24:	9903      	ldr	r1, [sp, #12]
 8029f26:	1a5b      	subs	r3, r3, r1
 8029f28:	42ab      	cmp	r3, r5
 8029f2a:	dcf2      	bgt.n	8029f12 <_printf_i+0x212>
 8029f2c:	e7eb      	b.n	8029f06 <_printf_i+0x206>
 8029f2e:	2500      	movs	r5, #0
 8029f30:	f104 0619 	add.w	r6, r4, #25
 8029f34:	e7f5      	b.n	8029f22 <_printf_i+0x222>
 8029f36:	bf00      	nop
 8029f38:	0802bb12 	.word	0x0802bb12
 8029f3c:	0802bb23 	.word	0x0802bb23

08029f40 <__sflush_r>:
 8029f40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8029f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029f48:	0716      	lsls	r6, r2, #28
 8029f4a:	4605      	mov	r5, r0
 8029f4c:	460c      	mov	r4, r1
 8029f4e:	d454      	bmi.n	8029ffa <__sflush_r+0xba>
 8029f50:	684b      	ldr	r3, [r1, #4]
 8029f52:	2b00      	cmp	r3, #0
 8029f54:	dc02      	bgt.n	8029f5c <__sflush_r+0x1c>
 8029f56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8029f58:	2b00      	cmp	r3, #0
 8029f5a:	dd48      	ble.n	8029fee <__sflush_r+0xae>
 8029f5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8029f5e:	2e00      	cmp	r6, #0
 8029f60:	d045      	beq.n	8029fee <__sflush_r+0xae>
 8029f62:	2300      	movs	r3, #0
 8029f64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8029f68:	682f      	ldr	r7, [r5, #0]
 8029f6a:	6a21      	ldr	r1, [r4, #32]
 8029f6c:	602b      	str	r3, [r5, #0]
 8029f6e:	d030      	beq.n	8029fd2 <__sflush_r+0x92>
 8029f70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8029f72:	89a3      	ldrh	r3, [r4, #12]
 8029f74:	0759      	lsls	r1, r3, #29
 8029f76:	d505      	bpl.n	8029f84 <__sflush_r+0x44>
 8029f78:	6863      	ldr	r3, [r4, #4]
 8029f7a:	1ad2      	subs	r2, r2, r3
 8029f7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8029f7e:	b10b      	cbz	r3, 8029f84 <__sflush_r+0x44>
 8029f80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8029f82:	1ad2      	subs	r2, r2, r3
 8029f84:	2300      	movs	r3, #0
 8029f86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8029f88:	6a21      	ldr	r1, [r4, #32]
 8029f8a:	4628      	mov	r0, r5
 8029f8c:	47b0      	blx	r6
 8029f8e:	1c43      	adds	r3, r0, #1
 8029f90:	89a3      	ldrh	r3, [r4, #12]
 8029f92:	d106      	bne.n	8029fa2 <__sflush_r+0x62>
 8029f94:	6829      	ldr	r1, [r5, #0]
 8029f96:	291d      	cmp	r1, #29
 8029f98:	d82b      	bhi.n	8029ff2 <__sflush_r+0xb2>
 8029f9a:	4a2a      	ldr	r2, [pc, #168]	@ (802a044 <__sflush_r+0x104>)
 8029f9c:	410a      	asrs	r2, r1
 8029f9e:	07d6      	lsls	r6, r2, #31
 8029fa0:	d427      	bmi.n	8029ff2 <__sflush_r+0xb2>
 8029fa2:	2200      	movs	r2, #0
 8029fa4:	6062      	str	r2, [r4, #4]
 8029fa6:	04d9      	lsls	r1, r3, #19
 8029fa8:	6922      	ldr	r2, [r4, #16]
 8029faa:	6022      	str	r2, [r4, #0]
 8029fac:	d504      	bpl.n	8029fb8 <__sflush_r+0x78>
 8029fae:	1c42      	adds	r2, r0, #1
 8029fb0:	d101      	bne.n	8029fb6 <__sflush_r+0x76>
 8029fb2:	682b      	ldr	r3, [r5, #0]
 8029fb4:	b903      	cbnz	r3, 8029fb8 <__sflush_r+0x78>
 8029fb6:	6560      	str	r0, [r4, #84]	@ 0x54
 8029fb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8029fba:	602f      	str	r7, [r5, #0]
 8029fbc:	b1b9      	cbz	r1, 8029fee <__sflush_r+0xae>
 8029fbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8029fc2:	4299      	cmp	r1, r3
 8029fc4:	d002      	beq.n	8029fcc <__sflush_r+0x8c>
 8029fc6:	4628      	mov	r0, r5
 8029fc8:	f7ff fc98 	bl	80298fc <_free_r>
 8029fcc:	2300      	movs	r3, #0
 8029fce:	6363      	str	r3, [r4, #52]	@ 0x34
 8029fd0:	e00d      	b.n	8029fee <__sflush_r+0xae>
 8029fd2:	2301      	movs	r3, #1
 8029fd4:	4628      	mov	r0, r5
 8029fd6:	47b0      	blx	r6
 8029fd8:	4602      	mov	r2, r0
 8029fda:	1c50      	adds	r0, r2, #1
 8029fdc:	d1c9      	bne.n	8029f72 <__sflush_r+0x32>
 8029fde:	682b      	ldr	r3, [r5, #0]
 8029fe0:	2b00      	cmp	r3, #0
 8029fe2:	d0c6      	beq.n	8029f72 <__sflush_r+0x32>
 8029fe4:	2b1d      	cmp	r3, #29
 8029fe6:	d001      	beq.n	8029fec <__sflush_r+0xac>
 8029fe8:	2b16      	cmp	r3, #22
 8029fea:	d11e      	bne.n	802a02a <__sflush_r+0xea>
 8029fec:	602f      	str	r7, [r5, #0]
 8029fee:	2000      	movs	r0, #0
 8029ff0:	e022      	b.n	802a038 <__sflush_r+0xf8>
 8029ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029ff6:	b21b      	sxth	r3, r3
 8029ff8:	e01b      	b.n	802a032 <__sflush_r+0xf2>
 8029ffa:	690f      	ldr	r7, [r1, #16]
 8029ffc:	2f00      	cmp	r7, #0
 8029ffe:	d0f6      	beq.n	8029fee <__sflush_r+0xae>
 802a000:	0793      	lsls	r3, r2, #30
 802a002:	680e      	ldr	r6, [r1, #0]
 802a004:	bf08      	it	eq
 802a006:	694b      	ldreq	r3, [r1, #20]
 802a008:	600f      	str	r7, [r1, #0]
 802a00a:	bf18      	it	ne
 802a00c:	2300      	movne	r3, #0
 802a00e:	eba6 0807 	sub.w	r8, r6, r7
 802a012:	608b      	str	r3, [r1, #8]
 802a014:	f1b8 0f00 	cmp.w	r8, #0
 802a018:	dde9      	ble.n	8029fee <__sflush_r+0xae>
 802a01a:	6a21      	ldr	r1, [r4, #32]
 802a01c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802a01e:	4643      	mov	r3, r8
 802a020:	463a      	mov	r2, r7
 802a022:	4628      	mov	r0, r5
 802a024:	47b0      	blx	r6
 802a026:	2800      	cmp	r0, #0
 802a028:	dc08      	bgt.n	802a03c <__sflush_r+0xfc>
 802a02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a02e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a032:	81a3      	strh	r3, [r4, #12]
 802a034:	f04f 30ff 	mov.w	r0, #4294967295
 802a038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a03c:	4407      	add	r7, r0
 802a03e:	eba8 0800 	sub.w	r8, r8, r0
 802a042:	e7e7      	b.n	802a014 <__sflush_r+0xd4>
 802a044:	dfbffffe 	.word	0xdfbffffe

0802a048 <_fflush_r>:
 802a048:	b538      	push	{r3, r4, r5, lr}
 802a04a:	690b      	ldr	r3, [r1, #16]
 802a04c:	4605      	mov	r5, r0
 802a04e:	460c      	mov	r4, r1
 802a050:	b913      	cbnz	r3, 802a058 <_fflush_r+0x10>
 802a052:	2500      	movs	r5, #0
 802a054:	4628      	mov	r0, r5
 802a056:	bd38      	pop	{r3, r4, r5, pc}
 802a058:	b118      	cbz	r0, 802a062 <_fflush_r+0x1a>
 802a05a:	6a03      	ldr	r3, [r0, #32]
 802a05c:	b90b      	cbnz	r3, 802a062 <_fflush_r+0x1a>
 802a05e:	f7ff f9bf 	bl	80293e0 <__sinit>
 802a062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a066:	2b00      	cmp	r3, #0
 802a068:	d0f3      	beq.n	802a052 <_fflush_r+0xa>
 802a06a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802a06c:	07d0      	lsls	r0, r2, #31
 802a06e:	d404      	bmi.n	802a07a <_fflush_r+0x32>
 802a070:	0599      	lsls	r1, r3, #22
 802a072:	d402      	bmi.n	802a07a <_fflush_r+0x32>
 802a074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a076:	f7ff fc30 	bl	80298da <__retarget_lock_acquire_recursive>
 802a07a:	4628      	mov	r0, r5
 802a07c:	4621      	mov	r1, r4
 802a07e:	f7ff ff5f 	bl	8029f40 <__sflush_r>
 802a082:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802a084:	07da      	lsls	r2, r3, #31
 802a086:	4605      	mov	r5, r0
 802a088:	d4e4      	bmi.n	802a054 <_fflush_r+0xc>
 802a08a:	89a3      	ldrh	r3, [r4, #12]
 802a08c:	059b      	lsls	r3, r3, #22
 802a08e:	d4e1      	bmi.n	802a054 <_fflush_r+0xc>
 802a090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a092:	f7ff fc23 	bl	80298dc <__retarget_lock_release_recursive>
 802a096:	e7dd      	b.n	802a054 <_fflush_r+0xc>

0802a098 <__swhatbuf_r>:
 802a098:	b570      	push	{r4, r5, r6, lr}
 802a09a:	460c      	mov	r4, r1
 802a09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a0a0:	2900      	cmp	r1, #0
 802a0a2:	b096      	sub	sp, #88	@ 0x58
 802a0a4:	4615      	mov	r5, r2
 802a0a6:	461e      	mov	r6, r3
 802a0a8:	da0d      	bge.n	802a0c6 <__swhatbuf_r+0x2e>
 802a0aa:	89a3      	ldrh	r3, [r4, #12]
 802a0ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802a0b0:	f04f 0100 	mov.w	r1, #0
 802a0b4:	bf14      	ite	ne
 802a0b6:	2340      	movne	r3, #64	@ 0x40
 802a0b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802a0bc:	2000      	movs	r0, #0
 802a0be:	6031      	str	r1, [r6, #0]
 802a0c0:	602b      	str	r3, [r5, #0]
 802a0c2:	b016      	add	sp, #88	@ 0x58
 802a0c4:	bd70      	pop	{r4, r5, r6, pc}
 802a0c6:	466a      	mov	r2, sp
 802a0c8:	f000 f87c 	bl	802a1c4 <_fstat_r>
 802a0cc:	2800      	cmp	r0, #0
 802a0ce:	dbec      	blt.n	802a0aa <__swhatbuf_r+0x12>
 802a0d0:	9901      	ldr	r1, [sp, #4]
 802a0d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802a0d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802a0da:	4259      	negs	r1, r3
 802a0dc:	4159      	adcs	r1, r3
 802a0de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802a0e2:	e7eb      	b.n	802a0bc <__swhatbuf_r+0x24>

0802a0e4 <__smakebuf_r>:
 802a0e4:	898b      	ldrh	r3, [r1, #12]
 802a0e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a0e8:	079d      	lsls	r5, r3, #30
 802a0ea:	4606      	mov	r6, r0
 802a0ec:	460c      	mov	r4, r1
 802a0ee:	d507      	bpl.n	802a100 <__smakebuf_r+0x1c>
 802a0f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802a0f4:	6023      	str	r3, [r4, #0]
 802a0f6:	6123      	str	r3, [r4, #16]
 802a0f8:	2301      	movs	r3, #1
 802a0fa:	6163      	str	r3, [r4, #20]
 802a0fc:	b003      	add	sp, #12
 802a0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a100:	ab01      	add	r3, sp, #4
 802a102:	466a      	mov	r2, sp
 802a104:	f7ff ffc8 	bl	802a098 <__swhatbuf_r>
 802a108:	9f00      	ldr	r7, [sp, #0]
 802a10a:	4605      	mov	r5, r0
 802a10c:	4639      	mov	r1, r7
 802a10e:	4630      	mov	r0, r6
 802a110:	f7fe ff94 	bl	802903c <_malloc_r>
 802a114:	b948      	cbnz	r0, 802a12a <__smakebuf_r+0x46>
 802a116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a11a:	059a      	lsls	r2, r3, #22
 802a11c:	d4ee      	bmi.n	802a0fc <__smakebuf_r+0x18>
 802a11e:	f023 0303 	bic.w	r3, r3, #3
 802a122:	f043 0302 	orr.w	r3, r3, #2
 802a126:	81a3      	strh	r3, [r4, #12]
 802a128:	e7e2      	b.n	802a0f0 <__smakebuf_r+0xc>
 802a12a:	89a3      	ldrh	r3, [r4, #12]
 802a12c:	6020      	str	r0, [r4, #0]
 802a12e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802a132:	81a3      	strh	r3, [r4, #12]
 802a134:	9b01      	ldr	r3, [sp, #4]
 802a136:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802a13a:	b15b      	cbz	r3, 802a154 <__smakebuf_r+0x70>
 802a13c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a140:	4630      	mov	r0, r6
 802a142:	f000 f851 	bl	802a1e8 <_isatty_r>
 802a146:	b128      	cbz	r0, 802a154 <__smakebuf_r+0x70>
 802a148:	89a3      	ldrh	r3, [r4, #12]
 802a14a:	f023 0303 	bic.w	r3, r3, #3
 802a14e:	f043 0301 	orr.w	r3, r3, #1
 802a152:	81a3      	strh	r3, [r4, #12]
 802a154:	89a3      	ldrh	r3, [r4, #12]
 802a156:	431d      	orrs	r5, r3
 802a158:	81a5      	strh	r5, [r4, #12]
 802a15a:	e7cf      	b.n	802a0fc <__smakebuf_r+0x18>

0802a15c <_putc_r>:
 802a15c:	b570      	push	{r4, r5, r6, lr}
 802a15e:	460d      	mov	r5, r1
 802a160:	4614      	mov	r4, r2
 802a162:	4606      	mov	r6, r0
 802a164:	b118      	cbz	r0, 802a16e <_putc_r+0x12>
 802a166:	6a03      	ldr	r3, [r0, #32]
 802a168:	b90b      	cbnz	r3, 802a16e <_putc_r+0x12>
 802a16a:	f7ff f939 	bl	80293e0 <__sinit>
 802a16e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802a170:	07d8      	lsls	r0, r3, #31
 802a172:	d405      	bmi.n	802a180 <_putc_r+0x24>
 802a174:	89a3      	ldrh	r3, [r4, #12]
 802a176:	0599      	lsls	r1, r3, #22
 802a178:	d402      	bmi.n	802a180 <_putc_r+0x24>
 802a17a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a17c:	f7ff fbad 	bl	80298da <__retarget_lock_acquire_recursive>
 802a180:	68a3      	ldr	r3, [r4, #8]
 802a182:	3b01      	subs	r3, #1
 802a184:	2b00      	cmp	r3, #0
 802a186:	60a3      	str	r3, [r4, #8]
 802a188:	da05      	bge.n	802a196 <_putc_r+0x3a>
 802a18a:	69a2      	ldr	r2, [r4, #24]
 802a18c:	4293      	cmp	r3, r2
 802a18e:	db12      	blt.n	802a1b6 <_putc_r+0x5a>
 802a190:	b2eb      	uxtb	r3, r5
 802a192:	2b0a      	cmp	r3, #10
 802a194:	d00f      	beq.n	802a1b6 <_putc_r+0x5a>
 802a196:	6823      	ldr	r3, [r4, #0]
 802a198:	1c5a      	adds	r2, r3, #1
 802a19a:	6022      	str	r2, [r4, #0]
 802a19c:	701d      	strb	r5, [r3, #0]
 802a19e:	b2ed      	uxtb	r5, r5
 802a1a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802a1a2:	07da      	lsls	r2, r3, #31
 802a1a4:	d405      	bmi.n	802a1b2 <_putc_r+0x56>
 802a1a6:	89a3      	ldrh	r3, [r4, #12]
 802a1a8:	059b      	lsls	r3, r3, #22
 802a1aa:	d402      	bmi.n	802a1b2 <_putc_r+0x56>
 802a1ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a1ae:	f7ff fb95 	bl	80298dc <__retarget_lock_release_recursive>
 802a1b2:	4628      	mov	r0, r5
 802a1b4:	bd70      	pop	{r4, r5, r6, pc}
 802a1b6:	4629      	mov	r1, r5
 802a1b8:	4622      	mov	r2, r4
 802a1ba:	4630      	mov	r0, r6
 802a1bc:	f7ff fa01 	bl	80295c2 <__swbuf_r>
 802a1c0:	4605      	mov	r5, r0
 802a1c2:	e7ed      	b.n	802a1a0 <_putc_r+0x44>

0802a1c4 <_fstat_r>:
 802a1c4:	b538      	push	{r3, r4, r5, lr}
 802a1c6:	4d07      	ldr	r5, [pc, #28]	@ (802a1e4 <_fstat_r+0x20>)
 802a1c8:	2300      	movs	r3, #0
 802a1ca:	4604      	mov	r4, r0
 802a1cc:	4608      	mov	r0, r1
 802a1ce:	4611      	mov	r1, r2
 802a1d0:	602b      	str	r3, [r5, #0]
 802a1d2:	f7e4 ff4f 	bl	800f074 <_fstat>
 802a1d6:	1c43      	adds	r3, r0, #1
 802a1d8:	d102      	bne.n	802a1e0 <_fstat_r+0x1c>
 802a1da:	682b      	ldr	r3, [r5, #0]
 802a1dc:	b103      	cbz	r3, 802a1e0 <_fstat_r+0x1c>
 802a1de:	6023      	str	r3, [r4, #0]
 802a1e0:	bd38      	pop	{r3, r4, r5, pc}
 802a1e2:	bf00      	nop
 802a1e4:	24000c08 	.word	0x24000c08

0802a1e8 <_isatty_r>:
 802a1e8:	b538      	push	{r3, r4, r5, lr}
 802a1ea:	4d06      	ldr	r5, [pc, #24]	@ (802a204 <_isatty_r+0x1c>)
 802a1ec:	2300      	movs	r3, #0
 802a1ee:	4604      	mov	r4, r0
 802a1f0:	4608      	mov	r0, r1
 802a1f2:	602b      	str	r3, [r5, #0]
 802a1f4:	f7e4 ff4e 	bl	800f094 <_isatty>
 802a1f8:	1c43      	adds	r3, r0, #1
 802a1fa:	d102      	bne.n	802a202 <_isatty_r+0x1a>
 802a1fc:	682b      	ldr	r3, [r5, #0]
 802a1fe:	b103      	cbz	r3, 802a202 <_isatty_r+0x1a>
 802a200:	6023      	str	r3, [r4, #0]
 802a202:	bd38      	pop	{r3, r4, r5, pc}
 802a204:	24000c08 	.word	0x24000c08

0802a208 <_init>:
 802a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a20a:	bf00      	nop
 802a20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a20e:	bc08      	pop	{r3}
 802a210:	469e      	mov	lr, r3
 802a212:	4770      	bx	lr

0802a214 <_fini>:
 802a214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a216:	bf00      	nop
 802a218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a21a:	bc08      	pop	{r3}
 802a21c:	469e      	mov	lr, r3
 802a21e:	4770      	bx	lr
